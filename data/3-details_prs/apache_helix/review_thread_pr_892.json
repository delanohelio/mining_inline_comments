{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3NjEyNzUx", "number": 892, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMToxOTowNVrODojVZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMTozNDo1MFrODojeGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODQ4NTQ4OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/multizk/TestMultiZkEnvironment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMToxOTowNVrOF3K44g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMjo1Nzo1M1rOF3MUbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5NDQwMg==", "bodyText": "Maybe it is more accurate for us to back up this system property and recover it after the test? If we simply clear the property after class, there may be a case that another test relying on this property. If the property is cleared, the test may fail. I understand the property should be set and cleared in each test class/method. But just in case.", "url": "https://github.com/apache/helix/pull/892#discussion_r393394402", "createdAt": "2020-03-17T01:19:05Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/integration/multizk/TestMultiZkEnvironment.java", "diffHunk": "@@ -0,0 +1,448 @@\n+package org.apache.helix.integration.multizk;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.BaseDataAccessor;\n+import org.apache.helix.ConfigAccessor;\n+import org.apache.helix.HelixAdmin;\n+import org.apache.helix.InstanceType;\n+import org.apache.helix.SystemPropertyKeys;\n+import org.apache.helix.TestHelper;\n+import org.apache.helix.api.config.RebalanceConfig;\n+import org.apache.helix.controller.rebalancer.DelayedAutoRebalancer;\n+import org.apache.helix.controller.rebalancer.strategy.CrushEdRebalanceStrategy;\n+import org.apache.helix.integration.manager.ClusterControllerManager;\n+import org.apache.helix.integration.manager.MockParticipantManager;\n+import org.apache.helix.integration.task.MockTask;\n+import org.apache.helix.integration.task.WorkflowGenerator;\n+import org.apache.helix.manager.zk.ZKHelixAdmin;\n+import org.apache.helix.manager.zk.ZKUtil;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.model.ClusterConfig;\n+import org.apache.helix.model.IdealState;\n+import org.apache.helix.model.InstanceConfig;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.mock.MockMetadataStoreDirectoryServer;\n+import org.apache.helix.participant.StateMachineEngine;\n+import org.apache.helix.store.HelixPropertyStore;\n+import org.apache.helix.store.zk.ZkHelixPropertyStore;\n+import org.apache.helix.task.TaskDriver;\n+import org.apache.helix.task.TaskFactory;\n+import org.apache.helix.task.TaskState;\n+import org.apache.helix.task.TaskStateModelFactory;\n+import org.apache.helix.task.Workflow;\n+import org.apache.helix.task.WorkflowContext;\n+import org.apache.helix.tools.ClusterSetup;\n+import org.apache.helix.tools.ClusterVerifiers.BestPossibleExternalViewVerifier;\n+import org.apache.helix.tools.ClusterVerifiers.ZkHelixClusterVerifier;\n+import org.apache.helix.zookeeper.api.client.HelixZkClient;\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.helix.zookeeper.datamodel.serializer.ZNRecordSerializer;\n+import org.apache.helix.zookeeper.impl.client.FederatedZkClient;\n+import org.apache.helix.zookeeper.impl.factory.DedicatedZkClientFactory;\n+import org.apache.helix.zookeeper.zkclient.ZkServer;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * TestMultiZkEnvironment spins up multiple in-memory ZooKeepers with a pre-configured\n+ * cluster-Zk realm routing information.\n+ * This test verifies that all Helix Java APIs work as expected.\n+ */\n+public class TestMultiZkEnvironment {\n+  private static final int NUM_ZK = 3;\n+  private static final Map<String, ZkServer> ZK_SERVER_MAP = new HashMap<>();\n+  private static final Map<String, HelixZkClient> ZK_CLIENT_MAP = new HashMap<>();\n+  private static final Map<String, ClusterControllerManager> MOCK_CONTROLLERS = new HashMap<>();\n+  private static final Set<MockParticipantManager> MOCK_PARTICIPANTS = new HashSet<>();\n+  private static final List<String> CLUSTER_LIST =\n+      ImmutableList.of(\"CLUSTER_1\", \"CLUSTER_2\", \"CLUSTER_3\");\n+\n+  private MockMetadataStoreDirectoryServer _msds;\n+  private static final Map<String, Collection<String>> _rawRoutingData = new HashMap<>();\n+  private RealmAwareZkClient _zkClient;\n+  private HelixAdmin _zkHelixAdmin;\n+\n+  @BeforeClass\n+  public void beforeClass() throws Exception {\n+    // Create 3 in-memory zookeepers and routing mapping\n+    final String zkPrefix = \"localhost:\";\n+    final int zkStartPort = 8777;\n+\n+    for (int i = 0; i < NUM_ZK; i++) {\n+      String zkAddress = zkPrefix + (zkStartPort + i);\n+      ZK_SERVER_MAP.put(zkAddress, TestHelper.startZkServer(zkAddress));\n+      ZK_CLIENT_MAP.put(zkAddress, DedicatedZkClientFactory.getInstance()\n+          .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n+              new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer())));\n+\n+      // One cluster per ZkServer created\n+      _rawRoutingData.put(zkAddress, Collections.singletonList(\"/\" + CLUSTER_LIST.get(i)));\n+    }\n+\n+    // Create a Mock MSDS\n+    final String msdsHostName = \"localhost\";\n+    final int msdsPort = 11117;\n+    final String msdsNamespace = \"multiZkTest\";\n+    _msds = new MockMetadataStoreDirectoryServer(msdsHostName, msdsPort, msdsNamespace,\n+        _rawRoutingData);\n+    _msds.startServer();\n+\n+    // Turn on multiZk mode in System config\n+    System.setProperty(SystemPropertyKeys.MULTI_ZK_ENABLED, \"true\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb1e4546512cfcdf20c6c3104173a799cf4c7eda"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQxNzgzNg==", "bodyText": "As you mentioned, system configs should be reset for each test but I could certainly add what youre suggesting :)", "url": "https://github.com/apache/helix/pull/892#discussion_r393417836", "createdAt": "2020-03-17T02:57:53Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/integration/multizk/TestMultiZkEnvironment.java", "diffHunk": "@@ -0,0 +1,448 @@\n+package org.apache.helix.integration.multizk;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.BaseDataAccessor;\n+import org.apache.helix.ConfigAccessor;\n+import org.apache.helix.HelixAdmin;\n+import org.apache.helix.InstanceType;\n+import org.apache.helix.SystemPropertyKeys;\n+import org.apache.helix.TestHelper;\n+import org.apache.helix.api.config.RebalanceConfig;\n+import org.apache.helix.controller.rebalancer.DelayedAutoRebalancer;\n+import org.apache.helix.controller.rebalancer.strategy.CrushEdRebalanceStrategy;\n+import org.apache.helix.integration.manager.ClusterControllerManager;\n+import org.apache.helix.integration.manager.MockParticipantManager;\n+import org.apache.helix.integration.task.MockTask;\n+import org.apache.helix.integration.task.WorkflowGenerator;\n+import org.apache.helix.manager.zk.ZKHelixAdmin;\n+import org.apache.helix.manager.zk.ZKUtil;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.model.ClusterConfig;\n+import org.apache.helix.model.IdealState;\n+import org.apache.helix.model.InstanceConfig;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.mock.MockMetadataStoreDirectoryServer;\n+import org.apache.helix.participant.StateMachineEngine;\n+import org.apache.helix.store.HelixPropertyStore;\n+import org.apache.helix.store.zk.ZkHelixPropertyStore;\n+import org.apache.helix.task.TaskDriver;\n+import org.apache.helix.task.TaskFactory;\n+import org.apache.helix.task.TaskState;\n+import org.apache.helix.task.TaskStateModelFactory;\n+import org.apache.helix.task.Workflow;\n+import org.apache.helix.task.WorkflowContext;\n+import org.apache.helix.tools.ClusterSetup;\n+import org.apache.helix.tools.ClusterVerifiers.BestPossibleExternalViewVerifier;\n+import org.apache.helix.tools.ClusterVerifiers.ZkHelixClusterVerifier;\n+import org.apache.helix.zookeeper.api.client.HelixZkClient;\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.helix.zookeeper.datamodel.serializer.ZNRecordSerializer;\n+import org.apache.helix.zookeeper.impl.client.FederatedZkClient;\n+import org.apache.helix.zookeeper.impl.factory.DedicatedZkClientFactory;\n+import org.apache.helix.zookeeper.zkclient.ZkServer;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * TestMultiZkEnvironment spins up multiple in-memory ZooKeepers with a pre-configured\n+ * cluster-Zk realm routing information.\n+ * This test verifies that all Helix Java APIs work as expected.\n+ */\n+public class TestMultiZkEnvironment {\n+  private static final int NUM_ZK = 3;\n+  private static final Map<String, ZkServer> ZK_SERVER_MAP = new HashMap<>();\n+  private static final Map<String, HelixZkClient> ZK_CLIENT_MAP = new HashMap<>();\n+  private static final Map<String, ClusterControllerManager> MOCK_CONTROLLERS = new HashMap<>();\n+  private static final Set<MockParticipantManager> MOCK_PARTICIPANTS = new HashSet<>();\n+  private static final List<String> CLUSTER_LIST =\n+      ImmutableList.of(\"CLUSTER_1\", \"CLUSTER_2\", \"CLUSTER_3\");\n+\n+  private MockMetadataStoreDirectoryServer _msds;\n+  private static final Map<String, Collection<String>> _rawRoutingData = new HashMap<>();\n+  private RealmAwareZkClient _zkClient;\n+  private HelixAdmin _zkHelixAdmin;\n+\n+  @BeforeClass\n+  public void beforeClass() throws Exception {\n+    // Create 3 in-memory zookeepers and routing mapping\n+    final String zkPrefix = \"localhost:\";\n+    final int zkStartPort = 8777;\n+\n+    for (int i = 0; i < NUM_ZK; i++) {\n+      String zkAddress = zkPrefix + (zkStartPort + i);\n+      ZK_SERVER_MAP.put(zkAddress, TestHelper.startZkServer(zkAddress));\n+      ZK_CLIENT_MAP.put(zkAddress, DedicatedZkClientFactory.getInstance()\n+          .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n+              new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer())));\n+\n+      // One cluster per ZkServer created\n+      _rawRoutingData.put(zkAddress, Collections.singletonList(\"/\" + CLUSTER_LIST.get(i)));\n+    }\n+\n+    // Create a Mock MSDS\n+    final String msdsHostName = \"localhost\";\n+    final int msdsPort = 11117;\n+    final String msdsNamespace = \"multiZkTest\";\n+    _msds = new MockMetadataStoreDirectoryServer(msdsHostName, msdsPort, msdsNamespace,\n+        _rawRoutingData);\n+    _msds.startServer();\n+\n+    // Turn on multiZk mode in System config\n+    System.setProperty(SystemPropertyKeys.MULTI_ZK_ENABLED, \"true\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5NDQwMg=="}, "originalCommit": {"oid": "eb1e4546512cfcdf20c6c3104173a799cf4c7eda"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODQ5MjU4OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/multizk/TestMultiZkEnvironment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMToyNDoxOFrOF3K9Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMjo1ODoxN1rOF3MUyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5NTUyMg==", "bodyText": "Do we still need to keep this property after class?", "url": "https://github.com/apache/helix/pull/892#discussion_r393395522", "createdAt": "2020-03-17T01:24:18Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/integration/multizk/TestMultiZkEnvironment.java", "diffHunk": "@@ -0,0 +1,448 @@\n+package org.apache.helix.integration.multizk;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.BaseDataAccessor;\n+import org.apache.helix.ConfigAccessor;\n+import org.apache.helix.HelixAdmin;\n+import org.apache.helix.InstanceType;\n+import org.apache.helix.SystemPropertyKeys;\n+import org.apache.helix.TestHelper;\n+import org.apache.helix.api.config.RebalanceConfig;\n+import org.apache.helix.controller.rebalancer.DelayedAutoRebalancer;\n+import org.apache.helix.controller.rebalancer.strategy.CrushEdRebalanceStrategy;\n+import org.apache.helix.integration.manager.ClusterControllerManager;\n+import org.apache.helix.integration.manager.MockParticipantManager;\n+import org.apache.helix.integration.task.MockTask;\n+import org.apache.helix.integration.task.WorkflowGenerator;\n+import org.apache.helix.manager.zk.ZKHelixAdmin;\n+import org.apache.helix.manager.zk.ZKUtil;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.model.ClusterConfig;\n+import org.apache.helix.model.IdealState;\n+import org.apache.helix.model.InstanceConfig;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.mock.MockMetadataStoreDirectoryServer;\n+import org.apache.helix.participant.StateMachineEngine;\n+import org.apache.helix.store.HelixPropertyStore;\n+import org.apache.helix.store.zk.ZkHelixPropertyStore;\n+import org.apache.helix.task.TaskDriver;\n+import org.apache.helix.task.TaskFactory;\n+import org.apache.helix.task.TaskState;\n+import org.apache.helix.task.TaskStateModelFactory;\n+import org.apache.helix.task.Workflow;\n+import org.apache.helix.task.WorkflowContext;\n+import org.apache.helix.tools.ClusterSetup;\n+import org.apache.helix.tools.ClusterVerifiers.BestPossibleExternalViewVerifier;\n+import org.apache.helix.tools.ClusterVerifiers.ZkHelixClusterVerifier;\n+import org.apache.helix.zookeeper.api.client.HelixZkClient;\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.helix.zookeeper.datamodel.serializer.ZNRecordSerializer;\n+import org.apache.helix.zookeeper.impl.client.FederatedZkClient;\n+import org.apache.helix.zookeeper.impl.factory.DedicatedZkClientFactory;\n+import org.apache.helix.zookeeper.zkclient.ZkServer;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * TestMultiZkEnvironment spins up multiple in-memory ZooKeepers with a pre-configured\n+ * cluster-Zk realm routing information.\n+ * This test verifies that all Helix Java APIs work as expected.\n+ */\n+public class TestMultiZkEnvironment {\n+  private static final int NUM_ZK = 3;\n+  private static final Map<String, ZkServer> ZK_SERVER_MAP = new HashMap<>();\n+  private static final Map<String, HelixZkClient> ZK_CLIENT_MAP = new HashMap<>();\n+  private static final Map<String, ClusterControllerManager> MOCK_CONTROLLERS = new HashMap<>();\n+  private static final Set<MockParticipantManager> MOCK_PARTICIPANTS = new HashSet<>();\n+  private static final List<String> CLUSTER_LIST =\n+      ImmutableList.of(\"CLUSTER_1\", \"CLUSTER_2\", \"CLUSTER_3\");\n+\n+  private MockMetadataStoreDirectoryServer _msds;\n+  private static final Map<String, Collection<String>> _rawRoutingData = new HashMap<>();\n+  private RealmAwareZkClient _zkClient;\n+  private HelixAdmin _zkHelixAdmin;\n+\n+  @BeforeClass\n+  public void beforeClass() throws Exception {\n+    // Create 3 in-memory zookeepers and routing mapping\n+    final String zkPrefix = \"localhost:\";\n+    final int zkStartPort = 8777;\n+\n+    for (int i = 0; i < NUM_ZK; i++) {\n+      String zkAddress = zkPrefix + (zkStartPort + i);\n+      ZK_SERVER_MAP.put(zkAddress, TestHelper.startZkServer(zkAddress));\n+      ZK_CLIENT_MAP.put(zkAddress, DedicatedZkClientFactory.getInstance()\n+          .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n+              new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer())));\n+\n+      // One cluster per ZkServer created\n+      _rawRoutingData.put(zkAddress, Collections.singletonList(\"/\" + CLUSTER_LIST.get(i)));\n+    }\n+\n+    // Create a Mock MSDS\n+    final String msdsHostName = \"localhost\";\n+    final int msdsPort = 11117;\n+    final String msdsNamespace = \"multiZkTest\";\n+    _msds = new MockMetadataStoreDirectoryServer(msdsHostName, msdsPort, msdsNamespace,\n+        _rawRoutingData);\n+    _msds.startServer();\n+\n+    // Turn on multiZk mode in System config\n+    System.setProperty(SystemPropertyKeys.MULTI_ZK_ENABLED, \"true\");\n+    // MSDS endpoint: http://localhost:11117/admin/v2/namespaces/multiZkTest\n+    System.setProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb1e4546512cfcdf20c6c3104173a799cf4c7eda"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQxNzkzMA==", "bodyText": "Should be removed.", "url": "https://github.com/apache/helix/pull/892#discussion_r393417930", "createdAt": "2020-03-17T02:58:17Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/integration/multizk/TestMultiZkEnvironment.java", "diffHunk": "@@ -0,0 +1,448 @@\n+package org.apache.helix.integration.multizk;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.BaseDataAccessor;\n+import org.apache.helix.ConfigAccessor;\n+import org.apache.helix.HelixAdmin;\n+import org.apache.helix.InstanceType;\n+import org.apache.helix.SystemPropertyKeys;\n+import org.apache.helix.TestHelper;\n+import org.apache.helix.api.config.RebalanceConfig;\n+import org.apache.helix.controller.rebalancer.DelayedAutoRebalancer;\n+import org.apache.helix.controller.rebalancer.strategy.CrushEdRebalanceStrategy;\n+import org.apache.helix.integration.manager.ClusterControllerManager;\n+import org.apache.helix.integration.manager.MockParticipantManager;\n+import org.apache.helix.integration.task.MockTask;\n+import org.apache.helix.integration.task.WorkflowGenerator;\n+import org.apache.helix.manager.zk.ZKHelixAdmin;\n+import org.apache.helix.manager.zk.ZKUtil;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.model.ClusterConfig;\n+import org.apache.helix.model.IdealState;\n+import org.apache.helix.model.InstanceConfig;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.mock.MockMetadataStoreDirectoryServer;\n+import org.apache.helix.participant.StateMachineEngine;\n+import org.apache.helix.store.HelixPropertyStore;\n+import org.apache.helix.store.zk.ZkHelixPropertyStore;\n+import org.apache.helix.task.TaskDriver;\n+import org.apache.helix.task.TaskFactory;\n+import org.apache.helix.task.TaskState;\n+import org.apache.helix.task.TaskStateModelFactory;\n+import org.apache.helix.task.Workflow;\n+import org.apache.helix.task.WorkflowContext;\n+import org.apache.helix.tools.ClusterSetup;\n+import org.apache.helix.tools.ClusterVerifiers.BestPossibleExternalViewVerifier;\n+import org.apache.helix.tools.ClusterVerifiers.ZkHelixClusterVerifier;\n+import org.apache.helix.zookeeper.api.client.HelixZkClient;\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.helix.zookeeper.datamodel.serializer.ZNRecordSerializer;\n+import org.apache.helix.zookeeper.impl.client.FederatedZkClient;\n+import org.apache.helix.zookeeper.impl.factory.DedicatedZkClientFactory;\n+import org.apache.helix.zookeeper.zkclient.ZkServer;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * TestMultiZkEnvironment spins up multiple in-memory ZooKeepers with a pre-configured\n+ * cluster-Zk realm routing information.\n+ * This test verifies that all Helix Java APIs work as expected.\n+ */\n+public class TestMultiZkEnvironment {\n+  private static final int NUM_ZK = 3;\n+  private static final Map<String, ZkServer> ZK_SERVER_MAP = new HashMap<>();\n+  private static final Map<String, HelixZkClient> ZK_CLIENT_MAP = new HashMap<>();\n+  private static final Map<String, ClusterControllerManager> MOCK_CONTROLLERS = new HashMap<>();\n+  private static final Set<MockParticipantManager> MOCK_PARTICIPANTS = new HashSet<>();\n+  private static final List<String> CLUSTER_LIST =\n+      ImmutableList.of(\"CLUSTER_1\", \"CLUSTER_2\", \"CLUSTER_3\");\n+\n+  private MockMetadataStoreDirectoryServer _msds;\n+  private static final Map<String, Collection<String>> _rawRoutingData = new HashMap<>();\n+  private RealmAwareZkClient _zkClient;\n+  private HelixAdmin _zkHelixAdmin;\n+\n+  @BeforeClass\n+  public void beforeClass() throws Exception {\n+    // Create 3 in-memory zookeepers and routing mapping\n+    final String zkPrefix = \"localhost:\";\n+    final int zkStartPort = 8777;\n+\n+    for (int i = 0; i < NUM_ZK; i++) {\n+      String zkAddress = zkPrefix + (zkStartPort + i);\n+      ZK_SERVER_MAP.put(zkAddress, TestHelper.startZkServer(zkAddress));\n+      ZK_CLIENT_MAP.put(zkAddress, DedicatedZkClientFactory.getInstance()\n+          .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n+              new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer())));\n+\n+      // One cluster per ZkServer created\n+      _rawRoutingData.put(zkAddress, Collections.singletonList(\"/\" + CLUSTER_LIST.get(i)));\n+    }\n+\n+    // Create a Mock MSDS\n+    final String msdsHostName = \"localhost\";\n+    final int msdsPort = 11117;\n+    final String msdsNamespace = \"multiZkTest\";\n+    _msds = new MockMetadataStoreDirectoryServer(msdsHostName, msdsPort, msdsNamespace,\n+        _rawRoutingData);\n+    _msds.startServer();\n+\n+    // Turn on multiZk mode in System config\n+    System.setProperty(SystemPropertyKeys.MULTI_ZK_ENABLED, \"true\");\n+    // MSDS endpoint: http://localhost:11117/admin/v2/namespaces/multiZkTest\n+    System.setProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5NTUyMg=="}, "originalCommit": {"oid": "eb1e4546512cfcdf20c6c3104173a799cf4c7eda"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODQ5Njg2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/multizk/TestMultiZkEnvironment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMToyNzoxOFrOF3LACQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMzoxMDowNFrOF3MieA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5NjIzMw==", "bodyText": "Just a corner case, if there is exception before clearProperty(), this property will be kept and may affect other tests? Usually what I do is using try...finally.", "url": "https://github.com/apache/helix/pull/892#discussion_r393396233", "createdAt": "2020-03-17T01:27:18Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/integration/multizk/TestMultiZkEnvironment.java", "diffHunk": "@@ -0,0 +1,448 @@\n+package org.apache.helix.integration.multizk;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.BaseDataAccessor;\n+import org.apache.helix.ConfigAccessor;\n+import org.apache.helix.HelixAdmin;\n+import org.apache.helix.InstanceType;\n+import org.apache.helix.SystemPropertyKeys;\n+import org.apache.helix.TestHelper;\n+import org.apache.helix.api.config.RebalanceConfig;\n+import org.apache.helix.controller.rebalancer.DelayedAutoRebalancer;\n+import org.apache.helix.controller.rebalancer.strategy.CrushEdRebalanceStrategy;\n+import org.apache.helix.integration.manager.ClusterControllerManager;\n+import org.apache.helix.integration.manager.MockParticipantManager;\n+import org.apache.helix.integration.task.MockTask;\n+import org.apache.helix.integration.task.WorkflowGenerator;\n+import org.apache.helix.manager.zk.ZKHelixAdmin;\n+import org.apache.helix.manager.zk.ZKUtil;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.model.ClusterConfig;\n+import org.apache.helix.model.IdealState;\n+import org.apache.helix.model.InstanceConfig;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.mock.MockMetadataStoreDirectoryServer;\n+import org.apache.helix.participant.StateMachineEngine;\n+import org.apache.helix.store.HelixPropertyStore;\n+import org.apache.helix.store.zk.ZkHelixPropertyStore;\n+import org.apache.helix.task.TaskDriver;\n+import org.apache.helix.task.TaskFactory;\n+import org.apache.helix.task.TaskState;\n+import org.apache.helix.task.TaskStateModelFactory;\n+import org.apache.helix.task.Workflow;\n+import org.apache.helix.task.WorkflowContext;\n+import org.apache.helix.tools.ClusterSetup;\n+import org.apache.helix.tools.ClusterVerifiers.BestPossibleExternalViewVerifier;\n+import org.apache.helix.tools.ClusterVerifiers.ZkHelixClusterVerifier;\n+import org.apache.helix.zookeeper.api.client.HelixZkClient;\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.helix.zookeeper.datamodel.serializer.ZNRecordSerializer;\n+import org.apache.helix.zookeeper.impl.client.FederatedZkClient;\n+import org.apache.helix.zookeeper.impl.factory.DedicatedZkClientFactory;\n+import org.apache.helix.zookeeper.zkclient.ZkServer;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * TestMultiZkEnvironment spins up multiple in-memory ZooKeepers with a pre-configured\n+ * cluster-Zk realm routing information.\n+ * This test verifies that all Helix Java APIs work as expected.\n+ */\n+public class TestMultiZkEnvironment {\n+  private static final int NUM_ZK = 3;\n+  private static final Map<String, ZkServer> ZK_SERVER_MAP = new HashMap<>();\n+  private static final Map<String, HelixZkClient> ZK_CLIENT_MAP = new HashMap<>();\n+  private static final Map<String, ClusterControllerManager> MOCK_CONTROLLERS = new HashMap<>();\n+  private static final Set<MockParticipantManager> MOCK_PARTICIPANTS = new HashSet<>();\n+  private static final List<String> CLUSTER_LIST =\n+      ImmutableList.of(\"CLUSTER_1\", \"CLUSTER_2\", \"CLUSTER_3\");\n+\n+  private MockMetadataStoreDirectoryServer _msds;\n+  private static final Map<String, Collection<String>> _rawRoutingData = new HashMap<>();\n+  private RealmAwareZkClient _zkClient;\n+  private HelixAdmin _zkHelixAdmin;\n+\n+  @BeforeClass\n+  public void beforeClass() throws Exception {\n+    // Create 3 in-memory zookeepers and routing mapping\n+    final String zkPrefix = \"localhost:\";\n+    final int zkStartPort = 8777;\n+\n+    for (int i = 0; i < NUM_ZK; i++) {\n+      String zkAddress = zkPrefix + (zkStartPort + i);\n+      ZK_SERVER_MAP.put(zkAddress, TestHelper.startZkServer(zkAddress));\n+      ZK_CLIENT_MAP.put(zkAddress, DedicatedZkClientFactory.getInstance()\n+          .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n+              new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer())));\n+\n+      // One cluster per ZkServer created\n+      _rawRoutingData.put(zkAddress, Collections.singletonList(\"/\" + CLUSTER_LIST.get(i)));\n+    }\n+\n+    // Create a Mock MSDS\n+    final String msdsHostName = \"localhost\";\n+    final int msdsPort = 11117;\n+    final String msdsNamespace = \"multiZkTest\";\n+    _msds = new MockMetadataStoreDirectoryServer(msdsHostName, msdsPort, msdsNamespace,\n+        _rawRoutingData);\n+    _msds.startServer();\n+\n+    // Turn on multiZk mode in System config\n+    System.setProperty(SystemPropertyKeys.MULTI_ZK_ENABLED, \"true\");\n+    // MSDS endpoint: http://localhost:11117/admin/v2/namespaces/multiZkTest\n+    System.setProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY,\n+        \"http://\" + msdsHostName + \":\" + msdsPort + \"/admin/v2/namespaces/\" + msdsNamespace);\n+\n+    // Create a FederatedZkClient for admin work\n+    _zkClient =\n+        new FederatedZkClient(new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build(),\n+            new RealmAwareZkClient.RealmAwareZkClientConfig());\n+  }\n+\n+  @AfterClass\n+  public void afterClass() throws Exception {\n+    // Kill all mock controllers and participants\n+    MOCK_CONTROLLERS.values().forEach(ClusterControllerManager::syncStop);\n+    MOCK_PARTICIPANTS.forEach(MockParticipantManager::syncStop);\n+\n+    // Tear down all clusters\n+    CLUSTER_LIST.forEach(cluster -> TestHelper.dropCluster(cluster, _zkClient));\n+\n+    // Verify that all clusters are gone in each zookeeper\n+    Assert.assertTrue(TestHelper.verify(() -> {\n+      for (Map.Entry<String, HelixZkClient> zkClientEntry : ZK_CLIENT_MAP.entrySet()) {\n+        List<String> children = zkClientEntry.getValue().getChildren(\"/\");\n+        if (children.stream().anyMatch(CLUSTER_LIST::contains)) {\n+          return false;\n+        }\n+      }\n+      return true;\n+    }, TestHelper.WAIT_DURATION));\n+\n+    // Tear down zookeepers\n+    ZK_SERVER_MAP.forEach((zkAddress, zkServer) -> zkServer.shutdown());\n+\n+    // Stop MockMSDS\n+    _msds.stopServer();\n+\n+    // Turn off multiZK mode in System config\n+    System.clearProperty(SystemPropertyKeys.MULTI_ZK_ENABLED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb1e4546512cfcdf20c6c3104173a799cf4c7eda"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyMTQzMg==", "bodyText": "Again, I can wrap it in try-finally but each test is responsible for controlling its own System property configs. So a well-written test with a proper beforeClass or a setup method shouldn't be affected. But I agree - wrapping it in a try-finally is not a bad idea so I will add it.", "url": "https://github.com/apache/helix/pull/892#discussion_r393421432", "createdAt": "2020-03-17T03:10:04Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/integration/multizk/TestMultiZkEnvironment.java", "diffHunk": "@@ -0,0 +1,448 @@\n+package org.apache.helix.integration.multizk;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.BaseDataAccessor;\n+import org.apache.helix.ConfigAccessor;\n+import org.apache.helix.HelixAdmin;\n+import org.apache.helix.InstanceType;\n+import org.apache.helix.SystemPropertyKeys;\n+import org.apache.helix.TestHelper;\n+import org.apache.helix.api.config.RebalanceConfig;\n+import org.apache.helix.controller.rebalancer.DelayedAutoRebalancer;\n+import org.apache.helix.controller.rebalancer.strategy.CrushEdRebalanceStrategy;\n+import org.apache.helix.integration.manager.ClusterControllerManager;\n+import org.apache.helix.integration.manager.MockParticipantManager;\n+import org.apache.helix.integration.task.MockTask;\n+import org.apache.helix.integration.task.WorkflowGenerator;\n+import org.apache.helix.manager.zk.ZKHelixAdmin;\n+import org.apache.helix.manager.zk.ZKUtil;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.model.ClusterConfig;\n+import org.apache.helix.model.IdealState;\n+import org.apache.helix.model.InstanceConfig;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.mock.MockMetadataStoreDirectoryServer;\n+import org.apache.helix.participant.StateMachineEngine;\n+import org.apache.helix.store.HelixPropertyStore;\n+import org.apache.helix.store.zk.ZkHelixPropertyStore;\n+import org.apache.helix.task.TaskDriver;\n+import org.apache.helix.task.TaskFactory;\n+import org.apache.helix.task.TaskState;\n+import org.apache.helix.task.TaskStateModelFactory;\n+import org.apache.helix.task.Workflow;\n+import org.apache.helix.task.WorkflowContext;\n+import org.apache.helix.tools.ClusterSetup;\n+import org.apache.helix.tools.ClusterVerifiers.BestPossibleExternalViewVerifier;\n+import org.apache.helix.tools.ClusterVerifiers.ZkHelixClusterVerifier;\n+import org.apache.helix.zookeeper.api.client.HelixZkClient;\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.helix.zookeeper.datamodel.serializer.ZNRecordSerializer;\n+import org.apache.helix.zookeeper.impl.client.FederatedZkClient;\n+import org.apache.helix.zookeeper.impl.factory.DedicatedZkClientFactory;\n+import org.apache.helix.zookeeper.zkclient.ZkServer;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * TestMultiZkEnvironment spins up multiple in-memory ZooKeepers with a pre-configured\n+ * cluster-Zk realm routing information.\n+ * This test verifies that all Helix Java APIs work as expected.\n+ */\n+public class TestMultiZkEnvironment {\n+  private static final int NUM_ZK = 3;\n+  private static final Map<String, ZkServer> ZK_SERVER_MAP = new HashMap<>();\n+  private static final Map<String, HelixZkClient> ZK_CLIENT_MAP = new HashMap<>();\n+  private static final Map<String, ClusterControllerManager> MOCK_CONTROLLERS = new HashMap<>();\n+  private static final Set<MockParticipantManager> MOCK_PARTICIPANTS = new HashSet<>();\n+  private static final List<String> CLUSTER_LIST =\n+      ImmutableList.of(\"CLUSTER_1\", \"CLUSTER_2\", \"CLUSTER_3\");\n+\n+  private MockMetadataStoreDirectoryServer _msds;\n+  private static final Map<String, Collection<String>> _rawRoutingData = new HashMap<>();\n+  private RealmAwareZkClient _zkClient;\n+  private HelixAdmin _zkHelixAdmin;\n+\n+  @BeforeClass\n+  public void beforeClass() throws Exception {\n+    // Create 3 in-memory zookeepers and routing mapping\n+    final String zkPrefix = \"localhost:\";\n+    final int zkStartPort = 8777;\n+\n+    for (int i = 0; i < NUM_ZK; i++) {\n+      String zkAddress = zkPrefix + (zkStartPort + i);\n+      ZK_SERVER_MAP.put(zkAddress, TestHelper.startZkServer(zkAddress));\n+      ZK_CLIENT_MAP.put(zkAddress, DedicatedZkClientFactory.getInstance()\n+          .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n+              new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer())));\n+\n+      // One cluster per ZkServer created\n+      _rawRoutingData.put(zkAddress, Collections.singletonList(\"/\" + CLUSTER_LIST.get(i)));\n+    }\n+\n+    // Create a Mock MSDS\n+    final String msdsHostName = \"localhost\";\n+    final int msdsPort = 11117;\n+    final String msdsNamespace = \"multiZkTest\";\n+    _msds = new MockMetadataStoreDirectoryServer(msdsHostName, msdsPort, msdsNamespace,\n+        _rawRoutingData);\n+    _msds.startServer();\n+\n+    // Turn on multiZk mode in System config\n+    System.setProperty(SystemPropertyKeys.MULTI_ZK_ENABLED, \"true\");\n+    // MSDS endpoint: http://localhost:11117/admin/v2/namespaces/multiZkTest\n+    System.setProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY,\n+        \"http://\" + msdsHostName + \":\" + msdsPort + \"/admin/v2/namespaces/\" + msdsNamespace);\n+\n+    // Create a FederatedZkClient for admin work\n+    _zkClient =\n+        new FederatedZkClient(new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build(),\n+            new RealmAwareZkClient.RealmAwareZkClientConfig());\n+  }\n+\n+  @AfterClass\n+  public void afterClass() throws Exception {\n+    // Kill all mock controllers and participants\n+    MOCK_CONTROLLERS.values().forEach(ClusterControllerManager::syncStop);\n+    MOCK_PARTICIPANTS.forEach(MockParticipantManager::syncStop);\n+\n+    // Tear down all clusters\n+    CLUSTER_LIST.forEach(cluster -> TestHelper.dropCluster(cluster, _zkClient));\n+\n+    // Verify that all clusters are gone in each zookeeper\n+    Assert.assertTrue(TestHelper.verify(() -> {\n+      for (Map.Entry<String, HelixZkClient> zkClientEntry : ZK_CLIENT_MAP.entrySet()) {\n+        List<String> children = zkClientEntry.getValue().getChildren(\"/\");\n+        if (children.stream().anyMatch(CLUSTER_LIST::contains)) {\n+          return false;\n+        }\n+      }\n+      return true;\n+    }, TestHelper.WAIT_DURATION));\n+\n+    // Tear down zookeepers\n+    ZK_SERVER_MAP.forEach((zkAddress, zkServer) -> zkServer.shutdown());\n+\n+    // Stop MockMSDS\n+    _msds.stopServer();\n+\n+    // Turn off multiZK mode in System config\n+    System.clearProperty(SystemPropertyKeys.MULTI_ZK_ENABLED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5NjIzMw=="}, "originalCommit": {"oid": "eb1e4546512cfcdf20c6c3104173a799cf4c7eda"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODUwNzc5OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/multizk/TestMultiZkEnvironment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMTozNDo1MFrOF3LGxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzoxMjozN1rOF3mBUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5Nzk1OA==", "bodyText": "Nit, \"This test verifies that all Helix Java APIs work as expected.\" Looking at the comments and the class name, I am not sure if the test class name is accurate (it seems to the scope of MultiZkEnvironment is bigger), or something like TestMultiZkHelixJavaApis? Up to you.", "url": "https://github.com/apache/helix/pull/892#discussion_r393397958", "createdAt": "2020-03-17T01:34:50Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/integration/multizk/TestMultiZkEnvironment.java", "diffHunk": "@@ -0,0 +1,448 @@\n+package org.apache.helix.integration.multizk;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.BaseDataAccessor;\n+import org.apache.helix.ConfigAccessor;\n+import org.apache.helix.HelixAdmin;\n+import org.apache.helix.InstanceType;\n+import org.apache.helix.SystemPropertyKeys;\n+import org.apache.helix.TestHelper;\n+import org.apache.helix.api.config.RebalanceConfig;\n+import org.apache.helix.controller.rebalancer.DelayedAutoRebalancer;\n+import org.apache.helix.controller.rebalancer.strategy.CrushEdRebalanceStrategy;\n+import org.apache.helix.integration.manager.ClusterControllerManager;\n+import org.apache.helix.integration.manager.MockParticipantManager;\n+import org.apache.helix.integration.task.MockTask;\n+import org.apache.helix.integration.task.WorkflowGenerator;\n+import org.apache.helix.manager.zk.ZKHelixAdmin;\n+import org.apache.helix.manager.zk.ZKUtil;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.model.ClusterConfig;\n+import org.apache.helix.model.IdealState;\n+import org.apache.helix.model.InstanceConfig;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.mock.MockMetadataStoreDirectoryServer;\n+import org.apache.helix.participant.StateMachineEngine;\n+import org.apache.helix.store.HelixPropertyStore;\n+import org.apache.helix.store.zk.ZkHelixPropertyStore;\n+import org.apache.helix.task.TaskDriver;\n+import org.apache.helix.task.TaskFactory;\n+import org.apache.helix.task.TaskState;\n+import org.apache.helix.task.TaskStateModelFactory;\n+import org.apache.helix.task.Workflow;\n+import org.apache.helix.task.WorkflowContext;\n+import org.apache.helix.tools.ClusterSetup;\n+import org.apache.helix.tools.ClusterVerifiers.BestPossibleExternalViewVerifier;\n+import org.apache.helix.tools.ClusterVerifiers.ZkHelixClusterVerifier;\n+import org.apache.helix.zookeeper.api.client.HelixZkClient;\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.helix.zookeeper.datamodel.serializer.ZNRecordSerializer;\n+import org.apache.helix.zookeeper.impl.client.FederatedZkClient;\n+import org.apache.helix.zookeeper.impl.factory.DedicatedZkClientFactory;\n+import org.apache.helix.zookeeper.zkclient.ZkServer;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * TestMultiZkEnvironment spins up multiple in-memory ZooKeepers with a pre-configured\n+ * cluster-Zk realm routing information.\n+ * This test verifies that all Helix Java APIs work as expected.\n+ */\n+public class TestMultiZkEnvironment {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb1e4546512cfcdf20c6c3104173a799cf4c7eda"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzODkzMQ==", "bodyText": "I updated the name as you suggested. Thanks :)", "url": "https://github.com/apache/helix/pull/892#discussion_r393838931", "createdAt": "2020-03-17T17:12:37Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/integration/multizk/TestMultiZkEnvironment.java", "diffHunk": "@@ -0,0 +1,448 @@\n+package org.apache.helix.integration.multizk;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.BaseDataAccessor;\n+import org.apache.helix.ConfigAccessor;\n+import org.apache.helix.HelixAdmin;\n+import org.apache.helix.InstanceType;\n+import org.apache.helix.SystemPropertyKeys;\n+import org.apache.helix.TestHelper;\n+import org.apache.helix.api.config.RebalanceConfig;\n+import org.apache.helix.controller.rebalancer.DelayedAutoRebalancer;\n+import org.apache.helix.controller.rebalancer.strategy.CrushEdRebalanceStrategy;\n+import org.apache.helix.integration.manager.ClusterControllerManager;\n+import org.apache.helix.integration.manager.MockParticipantManager;\n+import org.apache.helix.integration.task.MockTask;\n+import org.apache.helix.integration.task.WorkflowGenerator;\n+import org.apache.helix.manager.zk.ZKHelixAdmin;\n+import org.apache.helix.manager.zk.ZKUtil;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.model.ClusterConfig;\n+import org.apache.helix.model.IdealState;\n+import org.apache.helix.model.InstanceConfig;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.mock.MockMetadataStoreDirectoryServer;\n+import org.apache.helix.participant.StateMachineEngine;\n+import org.apache.helix.store.HelixPropertyStore;\n+import org.apache.helix.store.zk.ZkHelixPropertyStore;\n+import org.apache.helix.task.TaskDriver;\n+import org.apache.helix.task.TaskFactory;\n+import org.apache.helix.task.TaskState;\n+import org.apache.helix.task.TaskStateModelFactory;\n+import org.apache.helix.task.Workflow;\n+import org.apache.helix.task.WorkflowContext;\n+import org.apache.helix.tools.ClusterSetup;\n+import org.apache.helix.tools.ClusterVerifiers.BestPossibleExternalViewVerifier;\n+import org.apache.helix.tools.ClusterVerifiers.ZkHelixClusterVerifier;\n+import org.apache.helix.zookeeper.api.client.HelixZkClient;\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.helix.zookeeper.datamodel.serializer.ZNRecordSerializer;\n+import org.apache.helix.zookeeper.impl.client.FederatedZkClient;\n+import org.apache.helix.zookeeper.impl.factory.DedicatedZkClientFactory;\n+import org.apache.helix.zookeeper.zkclient.ZkServer;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * TestMultiZkEnvironment spins up multiple in-memory ZooKeepers with a pre-configured\n+ * cluster-Zk realm routing information.\n+ * This test verifies that all Helix Java APIs work as expected.\n+ */\n+public class TestMultiZkEnvironment {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5Nzk1OA=="}, "originalCommit": {"oid": "eb1e4546512cfcdf20c6c3104173a799cf4c7eda"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1381, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}