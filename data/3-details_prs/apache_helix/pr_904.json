{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNzcwNzAw", "number": 904, "title": "Fix the concurrent modification error happens during the HelixManager initHandlers() call", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n#903\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nFix the concurrent modification error that happens during the HelixManager initHandlers() call.\nTests\n\n The following tests are written for this issue:\n\nTestHandleSession.testConcurrentInitCallbackHandlers()\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\nFailed tests:\nTestResourceChangeDetector.testRemoveInstance:284 \u00bb ZkClient Failed to delete ...\nTestDeleteJobFromJobQueue.testForceDeleteJobFromJobQueue:75 \u00bb ZkClient Failed ...\nTestJobQueueCleanUp.testJobQueueAutoCleanUp \u00bb ThreadTimeout Method org.testng....\nTestWorkflowTermination.testWorkflowPausedTimeout:170->verifyWorkflowCleanup:257 expected: but was:\nTests run: 1092, Failures: 4, Errors: 0, Skipped: 4\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\nRerun:\nResults :\nTests run: 19, Failures: 0, Errors: 0, Skipped: 0\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 01:26 min\n[INFO] Finished at: 2020-03-20T16:18:55-07:00\n[INFO] ------------------------------------------------------------------------\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation (Optional)\n\n In case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCode Quality\n\n My diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-03-20T22:50:11Z", "url": "https://github.com/apache/helix/pull/904", "merged": true, "mergeCommit": {"oid": "d109c64834b1b288c937b9f9693b26e74487a244"}, "closed": true, "closedAt": "2020-03-21T01:18:17Z", "author": {"login": "jiajunwang"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPnfURgH2gAyMzkxNzcwNzAwOjE2Nzg4NWUzOGRmZTJlNGI1NDE2Mjg1ODg4NDVmMmE0NmQ5MmIxOGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPqmToAH2gAyMzkxNzcwNzAwOjBhOTVjOWI3OTAyZGZiMjhiNTdkM2Q0NmQ2MmJhMjNhZjI4ODRlMzM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "167885e38dfe2e4b541628588845f2a46d92b18a", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/167885e38dfe2e4b541628588845f2a46d92b18a", "committedDate": "2020-03-20T21:35:27Z", "message": "Fix the concurrent modification error happens during the HelixManager.initHandlers() call.\n\nAdd test case to verify the fix and ensure this error not happen again."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4ODYwMTg1", "url": "https://github.com/apache/helix/pull/904#pullrequestreview-378860185", "createdAt": "2020-03-20T23:23:14Z", "commit": {"oid": "167885e38dfe2e4b541628588845f2a46d92b18a"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMzoyMzoxNFrOF5lpCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwMDoyODowNVrOF5mWVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkyOTg2Ng==", "bodyText": "Nit: modify -> modifies", "url": "https://github.com/apache/helix/pull/904#discussion_r395929866", "createdAt": "2020-03-20T23:23:14Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java", "diffHunk": "@@ -1004,7 +1004,10 @@ void waitUntilConnected() {\n   void initHandlers(List<CallbackHandler> handlers) {\n     synchronized (this) {\n       if (handlers != null) {\n-        for (CallbackHandler handler : handlers) {\n+        // get a copy of the list and iterate over the copy list\n+        // in case handler.init() modify the original handler list", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167885e38dfe2e4b541628588845f2a46d92b18a"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0MDE1Ng==", "bodyText": "testConcurrentHandlerProcessing  -> testConcurrentInitCallbackHandlers", "url": "https://github.com/apache/helix/pull/904#discussion_r395940156", "createdAt": "2020-03-21T00:18:35Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestHandleSession.java", "diffHunk": "@@ -466,6 +468,79 @@ public void testSessionExpiredWhenResetHandlers() throws Exception {\n     deleteCluster(clusterName);\n   }\n \n+  @Test\n+  public void testConcurrentInitCallbackHandlers() throws Exception {\n+    final String clusterName =\n+        CLUSTER_PREFIX + \"_\" + _className + \"_\" + TestHelper.getTestMethodName();\n+    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n+    final String spectatorName = \"testConcurrentHandlerChangeSpectator\";\n+    try {\n+      BlockingHandleNewSessionZkHelixManager helixManager =\n+          new BlockingHandleNewSessionZkHelixManager(clusterName, spectatorName,\n+              InstanceType.SPECTATOR, _gZkClient.getServers());\n+      helixManager.connect();\n+      // Add two mock listeners that will add more callback handlers while handling INIT or CALLBACK event.\n+      // Note that we have to test with 2 separate listeners so one of them has a chance to fail if\n+      // there is a concurrent modification exception.\n+      helixManager.addLiveInstanceChangeListener(\n+          (LiveInstanceChangeListener) (liveInstances, changeContext) -> {\n+            if (changeContext.getType() != NotificationContext.Type.FINALIZE) {\n+              for (LiveInstance liveInstance : liveInstances) {\n+                if (liveInstance.getInstanceName().equals(\"localhost_1\")) {\n+                  try {\n+                    helixManager.addCurrentStateChangeListener(\n+                        (CurrentStateChangeListener) (instanceName, statesInfo, currentStateChangeContext) -> {\n+                          // empty callback\n+                        }, liveInstance.getInstanceName(), liveInstance.getEphemeralOwner());\n+                  } catch (Exception e) {\n+                    throw new HelixException(\n+                        \"Unexpected exception in the testConcurrentHandlerProcessing.\", e);\n+                  }\n+                }\n+              }\n+            }\n+          });\n+      helixManager.addLiveInstanceChangeListener(\n+          (LiveInstanceChangeListener) (liveInstances, changeContext) -> {\n+            if (changeContext.getType() != NotificationContext.Type.FINALIZE) {\n+              for (LiveInstance liveInstance : liveInstances) {\n+                if (liveInstance.getInstanceName().equals(\"localhost_2\")) {\n+                  try {\n+                    helixManager.addCurrentStateChangeListener(\n+                        (CurrentStateChangeListener) (instanceName, statesInfo, currentStateChangeContext) -> {\n+                          // empty callback\n+                        }, liveInstance.getInstanceName(), liveInstance.getEphemeralOwner());\n+                  } catch (Exception e) {\n+                    throw new HelixException(\n+                        \"Unexpected exception in the testConcurrentHandlerProcessing.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167885e38dfe2e4b541628588845f2a46d92b18a"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0MDM3OQ==", "bodyText": "testConcurrentHandlerProcessing -> testConcurrentInitCallbackHandlers.\nMay be better to just getTestMethodName().", "url": "https://github.com/apache/helix/pull/904#discussion_r395940379", "createdAt": "2020-03-21T00:20:19Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestHandleSession.java", "diffHunk": "@@ -466,6 +468,79 @@ public void testSessionExpiredWhenResetHandlers() throws Exception {\n     deleteCluster(clusterName);\n   }\n \n+  @Test\n+  public void testConcurrentInitCallbackHandlers() throws Exception {\n+    final String clusterName =\n+        CLUSTER_PREFIX + \"_\" + _className + \"_\" + TestHelper.getTestMethodName();\n+    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n+    final String spectatorName = \"testConcurrentHandlerChangeSpectator\";\n+    try {\n+      BlockingHandleNewSessionZkHelixManager helixManager =\n+          new BlockingHandleNewSessionZkHelixManager(clusterName, spectatorName,\n+              InstanceType.SPECTATOR, _gZkClient.getServers());\n+      helixManager.connect();\n+      // Add two mock listeners that will add more callback handlers while handling INIT or CALLBACK event.\n+      // Note that we have to test with 2 separate listeners so one of them has a chance to fail if\n+      // there is a concurrent modification exception.\n+      helixManager.addLiveInstanceChangeListener(\n+          (LiveInstanceChangeListener) (liveInstances, changeContext) -> {\n+            if (changeContext.getType() != NotificationContext.Type.FINALIZE) {\n+              for (LiveInstance liveInstance : liveInstances) {\n+                if (liveInstance.getInstanceName().equals(\"localhost_1\")) {\n+                  try {\n+                    helixManager.addCurrentStateChangeListener(\n+                        (CurrentStateChangeListener) (instanceName, statesInfo, currentStateChangeContext) -> {\n+                          // empty callback\n+                        }, liveInstance.getInstanceName(), liveInstance.getEphemeralOwner());\n+                  } catch (Exception e) {\n+                    throw new HelixException(\n+                        \"Unexpected exception in the testConcurrentHandlerProcessing.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167885e38dfe2e4b541628588845f2a46d92b18a"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0MDg1MQ==", "bodyText": "Nit, wrap this long line by concatenation?", "url": "https://github.com/apache/helix/pull/904#discussion_r395940851", "createdAt": "2020-03-21T00:23:24Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestHandleSession.java", "diffHunk": "@@ -466,6 +468,79 @@ public void testSessionExpiredWhenResetHandlers() throws Exception {\n     deleteCluster(clusterName);\n   }\n \n+  @Test\n+  public void testConcurrentInitCallbackHandlers() throws Exception {\n+    final String clusterName =\n+        CLUSTER_PREFIX + \"_\" + _className + \"_\" + TestHelper.getTestMethodName();\n+    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n+    final String spectatorName = \"testConcurrentHandlerChangeSpectator\";\n+    try {\n+      BlockingHandleNewSessionZkHelixManager helixManager =\n+          new BlockingHandleNewSessionZkHelixManager(clusterName, spectatorName,\n+              InstanceType.SPECTATOR, _gZkClient.getServers());\n+      helixManager.connect();\n+      // Add two mock listeners that will add more callback handlers while handling INIT or CALLBACK event.\n+      // Note that we have to test with 2 separate listeners so one of them has a chance to fail if\n+      // there is a concurrent modification exception.\n+      helixManager.addLiveInstanceChangeListener(\n+          (LiveInstanceChangeListener) (liveInstances, changeContext) -> {\n+            if (changeContext.getType() != NotificationContext.Type.FINALIZE) {\n+              for (LiveInstance liveInstance : liveInstances) {\n+                if (liveInstance.getInstanceName().equals(\"localhost_1\")) {\n+                  try {\n+                    helixManager.addCurrentStateChangeListener(\n+                        (CurrentStateChangeListener) (instanceName, statesInfo, currentStateChangeContext) -> {\n+                          // empty callback\n+                        }, liveInstance.getInstanceName(), liveInstance.getEphemeralOwner());\n+                  } catch (Exception e) {\n+                    throw new HelixException(\n+                        \"Unexpected exception in the testConcurrentHandlerProcessing.\", e);\n+                  }\n+                }\n+              }\n+            }\n+          });\n+      helixManager.addLiveInstanceChangeListener(\n+          (LiveInstanceChangeListener) (liveInstances, changeContext) -> {\n+            if (changeContext.getType() != NotificationContext.Type.FINALIZE) {\n+              for (LiveInstance liveInstance : liveInstances) {\n+                if (liveInstance.getInstanceName().equals(\"localhost_2\")) {\n+                  try {\n+                    helixManager.addCurrentStateChangeListener(\n+                        (CurrentStateChangeListener) (instanceName, statesInfo, currentStateChangeContext) -> {\n+                          // empty callback\n+                        }, liveInstance.getInstanceName(), liveInstance.getEphemeralOwner());\n+                  } catch (Exception e) {\n+                    throw new HelixException(\n+                        \"Unexpected exception in the testConcurrentHandlerProcessing.\", e);\n+                  }\n+                }\n+              }\n+            }\n+          });\n+      // Session expire will trigger all callbacks to be init. And the injected liveInstance\n+      // listener will trigger more callbackhandlers to be registered during the init process.\n+      ZkTestHelper.asyncExpireSession(helixManager.getZkClient());\n+      // Create mock live instance znodes to trigger the internal callback handling logic which will\n+      // modify the handler list.\n+      setupLiveInstances(clusterName, new int[] { 1, 2 });\n+      // Start new session handling so the manager will call the initHandler() for initializing all\n+      // existing handlers.\n+      helixManager.proceedNewSessionHandling();\n+      // Ensure the new session has been processed.\n+      TestHelper.verify(() -> helixManager.getHandleNewSessionEndTime() != 0, 3000);\n+      // Verify that both new mock current state callback handlers have been initialized normally.\n+      // Note that if there is concurrent modification that cause errors, one of the callback will\n+      // not be initialized normally.\n+      for (CallbackHandler handler : helixManager.getHandlers()) {\n+        Assert.assertTrue(handler.isReady(),\n+            \"CallbackHandler is not initialized as expected. It might be caused by a ConcurrentModificationException\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167885e38dfe2e4b541628588845f2a46d92b18a"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0MTQ2Mg==", "bodyText": "Can we wrap this block into a private method to avoid the duplicate code in these 2 listeners?", "url": "https://github.com/apache/helix/pull/904#discussion_r395941462", "createdAt": "2020-03-21T00:28:05Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestHandleSession.java", "diffHunk": "@@ -466,6 +468,79 @@ public void testSessionExpiredWhenResetHandlers() throws Exception {\n     deleteCluster(clusterName);\n   }\n \n+  @Test\n+  public void testConcurrentInitCallbackHandlers() throws Exception {\n+    final String clusterName =\n+        CLUSTER_PREFIX + \"_\" + _className + \"_\" + TestHelper.getTestMethodName();\n+    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n+    final String spectatorName = \"testConcurrentHandlerChangeSpectator\";\n+    try {\n+      BlockingHandleNewSessionZkHelixManager helixManager =\n+          new BlockingHandleNewSessionZkHelixManager(clusterName, spectatorName,\n+              InstanceType.SPECTATOR, _gZkClient.getServers());\n+      helixManager.connect();\n+      // Add two mock listeners that will add more callback handlers while handling INIT or CALLBACK event.\n+      // Note that we have to test with 2 separate listeners so one of them has a chance to fail if\n+      // there is a concurrent modification exception.\n+      helixManager.addLiveInstanceChangeListener(\n+          (LiveInstanceChangeListener) (liveInstances, changeContext) -> {\n+            if (changeContext.getType() != NotificationContext.Type.FINALIZE) {\n+              for (LiveInstance liveInstance : liveInstances) {\n+                if (liveInstance.getInstanceName().equals(\"localhost_1\")) {\n+                  try {\n+                    helixManager.addCurrentStateChangeListener(\n+                        (CurrentStateChangeListener) (instanceName, statesInfo, currentStateChangeContext) -> {\n+                          // empty callback\n+                        }, liveInstance.getInstanceName(), liveInstance.getEphemeralOwner());\n+                  } catch (Exception e) {\n+                    throw new HelixException(\n+                        \"Unexpected exception in the testConcurrentHandlerProcessing.\", e);\n+                  }\n+                }\n+              }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167885e38dfe2e4b541628588845f2a46d92b18a"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a95c9b7902dfb28b57d3d46d62ba23af2884e33", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/0a95c9b7902dfb28b57d3d46d62ba23af2884e33", "committedDate": "2020-03-21T01:12:48Z", "message": "Address comments."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4717, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}