{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NzQ2ODk5", "number": 1013, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMToyODozOFrOD9BVEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTozOTozOVrOD-wsrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzExNTA2OnYy", "diffSide": "RIGHT", "path": "helix-common/src/main/java/org/apache/helix/SystemPropertyKeys.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMToyODozOFrOGWUXJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDoxMDozMlrOGXwz_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NTQ2MA==", "bodyText": "Is this strictly for Helix REST? In that case, should we try to put this in a PropertyKey constant file in the helix-rest module?", "url": "https://github.com/apache/helix/pull/1013#discussion_r426055460", "createdAt": "2020-05-15T21:28:38Z", "author": {"login": "narendly"}, "path": "helix-common/src/main/java/org/apache/helix/SystemPropertyKeys.java", "diffHunk": "@@ -78,4 +78,7 @@\n   // System Property Metadata Store Directory Server endpoint key\n   public static final String MSDS_SERVER_ENDPOINT_KEY =\n       MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY;\n+\n+  // System property for request timeout\n+  public static final String HTTP_REQUEST_TIMEOUT = \"http.request.timeout\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyNjI3MA==", "bodyText": "+1. There are other places like MSDS that also have timeout config. This should be narrow down to helix rest or even stoppable.", "url": "https://github.com/apache/helix/pull/1013#discussion_r426226270", "createdAt": "2020-05-17T07:07:21Z", "author": {"login": "huizhilu"}, "path": "helix-common/src/main/java/org/apache/helix/SystemPropertyKeys.java", "diffHunk": "@@ -78,4 +78,7 @@\n   // System Property Metadata Store Directory Server endpoint key\n   public static final String MSDS_SERVER_ENDPOINT_KEY =\n       MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY;\n+\n+  // System property for request timeout\n+  public static final String HTTP_REQUEST_TIMEOUT = \"http.request.timeout\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NTQ2MA=="}, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU3MDE3NA==", "bodyText": "Done. Added a file called RestSystemPropertyKeys and added this key to that file.", "url": "https://github.com/apache/helix/pull/1013#discussion_r427570174", "createdAt": "2020-05-19T20:10:32Z", "author": {"login": "alirezazamani"}, "path": "helix-common/src/main/java/org/apache/helix/SystemPropertyKeys.java", "diffHunk": "@@ -78,4 +78,7 @@\n   // System Property Metadata Store Directory Server endpoint key\n   public static final String MSDS_SERVER_ENDPOINT_KEY =\n       MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY;\n+\n+  // System property for request timeout\n+  public static final String HTTP_REQUEST_TIMEOUT = \"http.request.timeout\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NTQ2MA=="}, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzExNjU5OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/client/CustomRestClientFactory.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMToyOToxNVrOGWUYAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMDozODo1MVrOGYc93Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NTY4Mg==", "bodyText": "For timeout values, we usually use long type.\n60 * 1000L;", "url": "https://github.com/apache/helix/pull/1013#discussion_r426055682", "createdAt": "2020-05-15T21:29:15Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/client/CustomRestClientFactory.java", "diffHunk": "@@ -32,10 +36,13 @@\n  */\n public class CustomRestClientFactory {\n   private static final Logger LOG = LoggerFactory.getLogger(CustomRestClientFactory.class);\n+  private static final int DEFAULT_HTTP_REQUEST_TIMEOUT = 60 * 1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU3MDM5Mw==", "bodyText": "I noticed that as well. But since the setSocketTimeout and setConnectionRequestTimeout methods are getting int as input, I prefer to keep them as int. If not we need to have additional type casting.", "url": "https://github.com/apache/helix/pull/1013#discussion_r427570393", "createdAt": "2020-05-19T20:10:54Z", "author": {"login": "alirezazamani"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/client/CustomRestClientFactory.java", "diffHunk": "@@ -32,10 +36,13 @@\n  */\n public class CustomRestClientFactory {\n   private static final Logger LOG = LoggerFactory.getLogger(CustomRestClientFactory.class);\n+  private static final int DEFAULT_HTTP_REQUEST_TIMEOUT = 60 * 1000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NTY4Mg=="}, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU4NzE2Mg==", "bodyText": "Interesting. In that case, could we leave a comment? That way, the intention is clear, and as the writer of this PR, you can justify using an int.", "url": "https://github.com/apache/helix/pull/1013#discussion_r427587162", "createdAt": "2020-05-19T20:42:20Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/client/CustomRestClientFactory.java", "diffHunk": "@@ -32,10 +36,13 @@\n  */\n public class CustomRestClientFactory {\n   private static final Logger LOG = LoggerFactory.getLogger(CustomRestClientFactory.class);\n+  private static final int DEFAULT_HTTP_REQUEST_TIMEOUT = 60 * 1000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NTY4Mg=="}, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI5MzU5Nw==", "bodyText": "Sure. Added a comments.", "url": "https://github.com/apache/helix/pull/1013#discussion_r428293597", "createdAt": "2020-05-20T20:38:51Z", "author": {"login": "alirezazamani"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/client/CustomRestClientFactory.java", "diffHunk": "@@ -32,10 +36,13 @@\n  */\n public class CustomRestClientFactory {\n   private static final Logger LOG = LoggerFactory.getLogger(CustomRestClientFactory.class);\n+  private static final int DEFAULT_HTTP_REQUEST_TIMEOUT = 60 * 1000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NTY4Mg=="}, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzEyMDMzOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/client/CustomRestClientFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMTozMDo0M1rOGWUaKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDoxMTowNFrOGXw1Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NjIzNA==", "bodyText": "Do we want to set the socket and connect timeout as well? Those two seem unrelated to the problem you're solving. I am not saying we shouldn't necessarily, but we should understand the implications of setting such configs.\nAlso it would be good to add a line of comment describing what you're doing here.", "url": "https://github.com/apache/helix/pull/1013#discussion_r426056234", "createdAt": "2020-05-15T21:30:43Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/client/CustomRestClientFactory.java", "diffHunk": "@@ -44,14 +51,17 @@ public static CustomRestClient get() {\n         if (INSTANCE == null) {\n           try {\n             HttpClient httpClient;\n+            RequestConfig config = RequestConfig.custom().setConnectTimeout(_httpRequestTimeout)\n+                .setConnectionRequestTimeout(_httpRequestTimeout)\n+                .setSocketTimeout(_httpRequestTimeout).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU3MDQ1OA==", "bodyText": "I think we prefer to have a timeout for any reason and not be blocked to query SN. That is why I used both of them as same value. Also I noticed that we do same for other classes such as HttpRoutingDataReader. I do not have strong preferences about this. I feel we should reduce the amount of configs as much as possible.", "url": "https://github.com/apache/helix/pull/1013#discussion_r427570458", "createdAt": "2020-05-19T20:11:04Z", "author": {"login": "alirezazamani"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/client/CustomRestClientFactory.java", "diffHunk": "@@ -44,14 +51,17 @@ public static CustomRestClient get() {\n         if (INSTANCE == null) {\n           try {\n             HttpClient httpClient;\n+            RequestConfig config = RequestConfig.custom().setConnectTimeout(_httpRequestTimeout)\n+                .setConnectionRequestTimeout(_httpRequestTimeout)\n+                .setSocketTimeout(_httpRequestTimeout).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NjIzNA=="}, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzEyMjc5OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMTozMjowM1rOGWUb3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMjo1Nzo0MFrOGX1eGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NjY3MQ==", "bodyText": ":\"back to its original value\" -> where is the original value set?", "url": "https://github.com/apache/helix/pull/1013#discussion_r426056671", "createdAt": "2020-05-15T21:32:03Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "diffHunk": "@@ -145,6 +150,19 @@ public void testPostRequestFormat() throws IOException {\n     Assert.assertEquals(json.get(\"data\").asText(), \"{}\");\n   }\n \n+  @Test(expectedExceptions = ConnectTimeoutException.class)\n+  public void testPostRequestSmallTimeout() throws IOException {\n+    // Set 1 ms to cause timeout for requests\n+    System.setProperty(SystemPropertyKeys.HTTP_REQUEST_TIMEOUT, \"1\");\n+    // a popular echo server that echos all the inputs\n+    final String echoServer = \"http://httpbin.org/post\";\n+    CustomRestClient _customRestClient = MockCustomRestClientFactory.get();\n+    _customRestClient.getInstanceStoppableCheck(echoServer, Collections.emptyMap());\n+\n+    // Reset the HTTP_REQUEST_TIMEOUT property back to its original value\n+    System.setProperty(SystemPropertyKeys.HTTP_REQUEST_TIMEOUT, \"60000\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0NjQ5MA==", "bodyText": "Fixed. Thanks.", "url": "https://github.com/apache/helix/pull/1013#discussion_r427646490", "createdAt": "2020-05-19T22:57:40Z", "author": {"login": "alirezazamani"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "diffHunk": "@@ -145,6 +150,19 @@ public void testPostRequestFormat() throws IOException {\n     Assert.assertEquals(json.get(\"data\").asText(), \"{}\");\n   }\n \n+  @Test(expectedExceptions = ConnectTimeoutException.class)\n+  public void testPostRequestSmallTimeout() throws IOException {\n+    // Set 1 ms to cause timeout for requests\n+    System.setProperty(SystemPropertyKeys.HTTP_REQUEST_TIMEOUT, \"1\");\n+    // a popular echo server that echos all the inputs\n+    final String echoServer = \"http://httpbin.org/post\";\n+    CustomRestClient _customRestClient = MockCustomRestClientFactory.get();\n+    _customRestClient.getInstanceStoppableCheck(echoServer, Collections.emptyMap());\n+\n+    // Reset the HTTP_REQUEST_TIMEOUT property back to its original value\n+    System.setProperty(SystemPropertyKeys.HTTP_REQUEST_TIMEOUT, \"60000\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NjY3MQ=="}, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzEyMzEzOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMTozMjoxM1rOGWUcFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMDozODozMlrOGYc9Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NjcyNg==", "bodyText": "Use long", "url": "https://github.com/apache/helix/pull/1013#discussion_r426056726", "createdAt": "2020-05-15T21:32:13Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "diffHunk": "@@ -161,4 +179,35 @@ protected JsonNode getJsonObject(HttpResponse httpResponse) throws IOException {\n       return new ObjectMapper().readTree(_jsonResponse);\n     }\n   }\n+\n+  /**\n+   * This MockCustomRestClientFactory is necessary to have for testing because once an INSTANCE is\n+   * initialized in CustomRestClientFactory while running \"mvn test\" , it will no re-initialize the\n+   * INSTANCE with new HelixProperty. Hence this class makes sure that new CustomRestClient will be\n+   * created with the timeout set to the new value.\n+   */\n+  private static class MockCustomRestClientFactory extends CustomRestClientFactory {\n+    private static final int DEFAULT_HTTP_REQUEST_TIMEOUT = 60 * 1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU3MTE2MQ==", "bodyText": "Please see my answer above. If you strongly feel we should do long, I can do it. But I think this way the code will be cleaner.", "url": "https://github.com/apache/helix/pull/1013#discussion_r427571161", "createdAt": "2020-05-19T20:12:26Z", "author": {"login": "alirezazamani"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "diffHunk": "@@ -161,4 +179,35 @@ protected JsonNode getJsonObject(HttpResponse httpResponse) throws IOException {\n       return new ObjectMapper().readTree(_jsonResponse);\n     }\n   }\n+\n+  /**\n+   * This MockCustomRestClientFactory is necessary to have for testing because once an INSTANCE is\n+   * initialized in CustomRestClientFactory while running \"mvn test\" , it will no re-initialize the\n+   * INSTANCE with new HelixProperty. Hence this class makes sure that new CustomRestClient will be\n+   * created with the timeout set to the new value.\n+   */\n+  private static class MockCustomRestClientFactory extends CustomRestClientFactory {\n+    private static final int DEFAULT_HTTP_REQUEST_TIMEOUT = 60 * 1000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NjcyNg=="}, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU4ODExNw==", "bodyText": "in that case, using an int is fine. But can we avoid creating yet another constant here? I believe we already define it elsewhere.", "url": "https://github.com/apache/helix/pull/1013#discussion_r427588117", "createdAt": "2020-05-19T20:44:10Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "diffHunk": "@@ -161,4 +179,35 @@ protected JsonNode getJsonObject(HttpResponse httpResponse) throws IOException {\n       return new ObjectMapper().readTree(_jsonResponse);\n     }\n   }\n+\n+  /**\n+   * This MockCustomRestClientFactory is necessary to have for testing because once an INSTANCE is\n+   * initialized in CustomRestClientFactory while running \"mvn test\" , it will no re-initialize the\n+   * INSTANCE with new HelixProperty. Hence this class makes sure that new CustomRestClient will be\n+   * created with the timeout set to the new value.\n+   */\n+  private static class MockCustomRestClientFactory extends CustomRestClientFactory {\n+    private static final int DEFAULT_HTTP_REQUEST_TIMEOUT = 60 * 1000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NjcyNg=="}, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI5MzQ0Nw==", "bodyText": "I added comments about it. I removed the default constant and directly uses the value in getSystemPropertyAsInt to avoid creating new constants. I found some other default values in for http request for MSDS related code. However, I am not sure if that is a good idea to have one default for everything. Anyway, please have a look and see if this makes sense.", "url": "https://github.com/apache/helix/pull/1013#discussion_r428293447", "createdAt": "2020-05-20T20:38:32Z", "author": {"login": "alirezazamani"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "diffHunk": "@@ -161,4 +179,35 @@ protected JsonNode getJsonObject(HttpResponse httpResponse) throws IOException {\n       return new ObjectMapper().readTree(_jsonResponse);\n     }\n   }\n+\n+  /**\n+   * This MockCustomRestClientFactory is necessary to have for testing because once an INSTANCE is\n+   * initialized in CustomRestClientFactory while running \"mvn test\" , it will no re-initialize the\n+   * INSTANCE with new HelixProperty. Hence this class makes sure that new CustomRestClient will be\n+   * created with the timeout set to the new value.\n+   */\n+  private static class MockCustomRestClientFactory extends CustomRestClientFactory {\n+    private static final int DEFAULT_HTTP_REQUEST_TIMEOUT = 60 * 1000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NjcyNg=="}, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzEyNDI3OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMTozMjo0MFrOGWUczA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMjo1NzoyNlrOGX1d1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NjkwOA==", "bodyText": "Please fix typos.", "url": "https://github.com/apache/helix/pull/1013#discussion_r426056908", "createdAt": "2020-05-15T21:32:40Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "diffHunk": "@@ -161,4 +179,35 @@ protected JsonNode getJsonObject(HttpResponse httpResponse) throws IOException {\n       return new ObjectMapper().readTree(_jsonResponse);\n     }\n   }\n+\n+  /**\n+   * This MockCustomRestClientFactory is necessary to have for testing because once an INSTANCE is\n+   * initialized in CustomRestClientFactory while running \"mvn test\" , it will no re-initialize the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0NjQyMw==", "bodyText": "Removed. Thanks. I realize this class can be removed and not needed.", "url": "https://github.com/apache/helix/pull/1013#discussion_r427646423", "createdAt": "2020-05-19T22:57:26Z", "author": {"login": "alirezazamani"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "diffHunk": "@@ -161,4 +179,35 @@ protected JsonNode getJsonObject(HttpResponse httpResponse) throws IOException {\n       return new ObjectMapper().readTree(_jsonResponse);\n     }\n   }\n+\n+  /**\n+   * This MockCustomRestClientFactory is necessary to have for testing because once an INSTANCE is\n+   * initialized in CustomRestClientFactory while running \"mvn test\" , it will no re-initialize the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NjkwOA=="}, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDM5MTg5OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/client/CustomRestClientFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNzowOTowNFrOGWey6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMjo1Mzo1NFrOGX1ZIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyNjQxMQ==", "bodyText": "Could combine DEFAULT_HTTP_REQUEST_TIMEOUT and this, right? And also this var is static final, would be better to name it a constant?\nBack from your test, if we don't make this a constant but a local var in get(), we could avoid the MockCustomRestClientFactory by resetting the instance using reflection.", "url": "https://github.com/apache/helix/pull/1013#discussion_r426226411", "createdAt": "2020-05-17T07:09:04Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/client/CustomRestClientFactory.java", "diffHunk": "@@ -32,10 +36,13 @@\n  */\n public class CustomRestClientFactory {\n   private static final Logger LOG = LoggerFactory.getLogger(CustomRestClientFactory.class);\n+  private static final int DEFAULT_HTTP_REQUEST_TIMEOUT = 60 * 1000;\n+  private static final int _httpRequestTimeout = HelixUtil.getSystemPropertyAsInt(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0NTIxOQ==", "bodyText": "I combined the Default and getSystemProperty. Thanks.", "url": "https://github.com/apache/helix/pull/1013#discussion_r427645219", "createdAt": "2020-05-19T22:53:54Z", "author": {"login": "alirezazamani"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/client/CustomRestClientFactory.java", "diffHunk": "@@ -32,10 +36,13 @@\n  */\n public class CustomRestClientFactory {\n   private static final Logger LOG = LoggerFactory.getLogger(CustomRestClientFactory.class);\n+  private static final int DEFAULT_HTTP_REQUEST_TIMEOUT = 60 * 1000;\n+  private static final int _httpRequestTimeout = HelixUtil.getSystemPropertyAsInt(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyNjQxMQ=="}, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDQwMTk5OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/client/CustomRestClientImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNzoyNDo1MFrOGWe4Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMjo1NDo1OFrOGX1agw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyNzczMA==", "bodyText": "What's the purpose of logging and throwing exception?\nBy checking the calling stack, I don't think it is necessary. ConnectTimeoutException also extends IOException which is already caught. The upper method getHealthStatusFromRest catches this exception and logs. If you log and throw here, there would be two error messages which are confusing and redundant. Eg, in the test you write, we would see the error log in our test output if we set logging level to print errors. And it is quite confusing.", "url": "https://github.com/apache/helix/pull/1013#discussion_r426227730", "createdAt": "2020-05-17T07:24:50Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/client/CustomRestClientImpl.java", "diffHunk": "@@ -130,6 +131,11 @@ protected HttpResponse post(String url, Map<String, String> payloads) throws IOE\n       LOG.info(\"Executing request: {}, headers: {}, entity: {}\", postRequest.getRequestLine(),\n           postRequest.getAllHeaders(), postRequest.getEntity());\n       return _httpClient.execute(postRequest);\n+    } catch (ConnectTimeoutException e) {\n+      LOG.error(\n+          \"Failed to perform customized health check due to ConnectTimeoutException for endpoint {}.\",\n+          url, e);\n+      throw e;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0NTU3MQ==", "bodyText": "Removed the log and exception as it will be catched (IOException) by upper methods. Thanks.", "url": "https://github.com/apache/helix/pull/1013#discussion_r427645571", "createdAt": "2020-05-19T22:54:58Z", "author": {"login": "alirezazamani"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/client/CustomRestClientImpl.java", "diffHunk": "@@ -130,6 +131,11 @@ protected HttpResponse post(String url, Map<String, String> payloads) throws IOE\n       LOG.info(\"Executing request: {}, headers: {}, entity: {}\", postRequest.getRequestLine(),\n           postRequest.getAllHeaders(), postRequest.getEntity());\n       return _httpClient.execute(postRequest);\n+    } catch (ConnectTimeoutException e) {\n+      LOG.error(\n+          \"Failed to perform customized health check due to ConnectTimeoutException for endpoint {}.\",\n+          url, e);\n+      throw e;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyNzczMA=="}, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDQ0NjMzOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwODozNDo0MlrOGWfPVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMjo1NToxNlrOGX1a2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzMzY4NA==", "bodyText": "This mock class implements the almost the same logic of the parent class. The cons are:\n\nduplicate code\ndifficult to maintain. if the parent class changes its logic, it is not easy to find this mock class and change this logic. If this child class is not changed, the test is actually testing the child class, not the logic in parent class.\n\nThere is a trick to avoid this duplicate and unnecessary mock class. We could use Java reflection to change the class's internal state, so the singleton would be re-initialized. And to be able to make the new instance use the new system property, the system property variable needs to be in a local one in get().\n// reset the singleton instance.\nField instance = Parent.class.getDeclaredField(\"INSTANCE\");\ninstance.setAccessible(true);\ninstance.set(null, null);", "url": "https://github.com/apache/helix/pull/1013#discussion_r426233684", "createdAt": "2020-05-17T08:34:42Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "diffHunk": "@@ -161,4 +179,35 @@ protected JsonNode getJsonObject(HttpResponse httpResponse) throws IOException {\n       return new ObjectMapper().readTree(_jsonResponse);\n     }\n   }\n+\n+  /**\n+   * This MockCustomRestClientFactory is necessary to have for testing because once an INSTANCE is\n+   * initialized in CustomRestClientFactory while running \"mvn test\" , it will no re-initialize the\n+   * INSTANCE with new HelixProperty. Hence this class makes sure that new CustomRestClient will be\n+   * created with the timeout set to the new value.\n+   */\n+  private static class MockCustomRestClientFactory extends CustomRestClientFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0NTY1Ng==", "bodyText": "Very good suggestion. Addressed. Thanks.", "url": "https://github.com/apache/helix/pull/1013#discussion_r427645656", "createdAt": "2020-05-19T22:55:16Z", "author": {"login": "alirezazamani"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "diffHunk": "@@ -161,4 +179,35 @@ protected JsonNode getJsonObject(HttpResponse httpResponse) throws IOException {\n       return new ObjectMapper().readTree(_jsonResponse);\n     }\n   }\n+\n+  /**\n+   * This MockCustomRestClientFactory is necessary to have for testing because once an INSTANCE is\n+   * initialized in CustomRestClientFactory while running \"mvn test\" , it will no re-initialize the\n+   * INSTANCE with new HelixProperty. Hence this class makes sure that new CustomRestClient will be\n+   * created with the timeout set to the new value.\n+   */\n+  private static class MockCustomRestClientFactory extends CustomRestClientFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzMzY4NA=="}, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDQ1NjA5OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/client/CustomRestClientFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwODo0NzoxNlrOGWfUMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMjo1NTo0OVrOGX1bnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzNDkyOQ==", "bodyText": "It seems we should also change this to make it volatile so it is safe for double lock checking. But we should do it in another PR. Reference: #1014", "url": "https://github.com/apache/helix/pull/1013#discussion_r426234929", "createdAt": "2020-05-17T08:47:16Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/client/CustomRestClientFactory.java", "diffHunk": "@@ -32,10 +36,13 @@\n  */\n public class CustomRestClientFactory {\n   private static final Logger LOG = LoggerFactory.getLogger(CustomRestClientFactory.class);\n+  private static final int DEFAULT_HTTP_REQUEST_TIMEOUT = 60 * 1000;\n+  private static final int _httpRequestTimeout = HelixUtil.getSystemPropertyAsInt(\n+      SystemPropertyKeys.HTTP_REQUEST_TIMEOUT, DEFAULT_HTTP_REQUEST_TIMEOUT);\n \n   private static CustomRestClient INSTANCE = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0NTg1NQ==", "bodyText": "Yeah it can be in another PR. Thanks for mentioning it here.", "url": "https://github.com/apache/helix/pull/1013#discussion_r427645855", "createdAt": "2020-05-19T22:55:49Z", "author": {"login": "alirezazamani"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/client/CustomRestClientFactory.java", "diffHunk": "@@ -32,10 +36,13 @@\n  */\n public class CustomRestClientFactory {\n   private static final Logger LOG = LoggerFactory.getLogger(CustomRestClientFactory.class);\n+  private static final int DEFAULT_HTTP_REQUEST_TIMEOUT = 60 * 1000;\n+  private static final int _httpRequestTimeout = HelixUtil.getSystemPropertyAsInt(\n+      SystemPropertyKeys.HTTP_REQUEST_TIMEOUT, DEFAULT_HTTP_REQUEST_TIMEOUT);\n \n   private static CustomRestClient INSTANCE = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzNDkyOQ=="}, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDgzNjA2OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxNzozNzozMVrOGWib8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjozNzoxM1rOGYUaeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4NjA2NQ==", "bodyText": "This is unnecessary as the exception is thrown from post(). I suggest using try...catch so it is easier to know which code is tested. With expectedExceptions, it is not easy to know which line of code is expected to throw the exception as this method has multiple lines and API calls. If calling _customRestClient.getInstanceStoppableCheck, it is more like an integration test not a unit test. And as you state in the method name testPostRequestSmallTimeout, it is supposed to be testing the post(), right?", "url": "https://github.com/apache/helix/pull/1013#discussion_r426286065", "createdAt": "2020-05-17T17:37:31Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "diffHunk": "@@ -145,6 +150,19 @@ public void testPostRequestFormat() throws IOException {\n     Assert.assertEquals(json.get(\"data\").asText(), \"{}\");\n   }\n \n+  @Test(expectedExceptions = ConnectTimeoutException.class)\n+  public void testPostRequestSmallTimeout() throws IOException {\n+    // Set 1 ms to cause timeout for requests\n+    System.setProperty(SystemPropertyKeys.HTTP_REQUEST_TIMEOUT, \"1\");\n+    // a popular echo server that echos all the inputs\n+    final String echoServer = \"http://httpbin.org/post\";\n+    CustomRestClient _customRestClient = MockCustomRestClientFactory.get();\n+    _customRestClient.getInstanceStoppableCheck(echoServer, Collections.emptyMap());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE1MzQ2Ng==", "bodyText": "Basically wanted to check getInstanceStoppableCheck. I will change the Test's name. And I will change it to try catch.", "url": "https://github.com/apache/helix/pull/1013#discussion_r428153466", "createdAt": "2020-05-20T16:37:13Z", "author": {"login": "alirezazamani"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "diffHunk": "@@ -145,6 +150,19 @@ public void testPostRequestFormat() throws IOException {\n     Assert.assertEquals(json.get(\"data\").asText(), \"{}\");\n   }\n \n+  @Test(expectedExceptions = ConnectTimeoutException.class)\n+  public void testPostRequestSmallTimeout() throws IOException {\n+    // Set 1 ms to cause timeout for requests\n+    System.setProperty(SystemPropertyKeys.HTTP_REQUEST_TIMEOUT, \"1\");\n+    // a popular echo server that echos all the inputs\n+    final String echoServer = \"http://httpbin.org/post\";\n+    CustomRestClient _customRestClient = MockCustomRestClientFactory.get();\n+    _customRestClient.getInstanceStoppableCheck(echoServer, Collections.emptyMap());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4NjA2NQ=="}, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDg3NDMxOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxODozNjo1MFrOGWiv2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMDo0ODo0NVrOGYdRbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI5MTE2MQ==", "bodyText": "I don't think it is a good idea to connect to an external host/service for testing. What if my testing machine doesn't have network? Are we still going to get the expected exception? The answer is no. Instead, something else like UnknownHostException would be thrown. And this test does not achieve the purpose.\nIn a unit test, and in this case, I would not want to actually connect to a real REST server. Connecting to a real server is technically more an integration test. Though we have a local server started in AbstractTestClass, I would suggest mocking the timeout scenario for this unit test instead of connecting to a real server.", "url": "https://github.com/apache/helix/pull/1013#discussion_r426291161", "createdAt": "2020-05-17T18:36:50Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "diffHunk": "@@ -145,6 +150,19 @@ public void testPostRequestFormat() throws IOException {\n     Assert.assertEquals(json.get(\"data\").asText(), \"{}\");\n   }\n \n+  @Test(expectedExceptions = ConnectTimeoutException.class)\n+  public void testPostRequestSmallTimeout() throws IOException {\n+    // Set 1 ms to cause timeout for requests\n+    System.setProperty(SystemPropertyKeys.HTTP_REQUEST_TIMEOUT, \"1\");\n+    // a popular echo server that echos all the inputs\n+    final String echoServer = \"http://httpbin.org/post\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI5MDkxNw==", "bodyText": "I changed the real server. Now, I am using non-routable internal address which causes the ConnectTimeoutException for http requests.", "url": "https://github.com/apache/helix/pull/1013#discussion_r428290917", "createdAt": "2020-05-20T20:33:38Z", "author": {"login": "alirezazamani"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "diffHunk": "@@ -145,6 +150,19 @@ public void testPostRequestFormat() throws IOException {\n     Assert.assertEquals(json.get(\"data\").asText(), \"{}\");\n   }\n \n+  @Test(expectedExceptions = ConnectTimeoutException.class)\n+  public void testPostRequestSmallTimeout() throws IOException {\n+    // Set 1 ms to cause timeout for requests\n+    System.setProperty(SystemPropertyKeys.HTTP_REQUEST_TIMEOUT, \"1\");\n+    // a popular echo server that echos all the inputs\n+    final String echoServer = \"http://httpbin.org/post\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI5MTE2MQ=="}, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI5ODYwNQ==", "bodyText": "I just realize that 127.0.0.0 gets timeout exception in mac only and not the Linux. So I changed it back to the external source for now. I added todo for this series of test to add mock rest server sometime in the future.", "url": "https://github.com/apache/helix/pull/1013#discussion_r428298605", "createdAt": "2020-05-20T20:48:45Z", "author": {"login": "alirezazamani"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "diffHunk": "@@ -145,6 +150,19 @@ public void testPostRequestFormat() throws IOException {\n     Assert.assertEquals(json.get(\"data\").asText(), \"{}\");\n   }\n \n+  @Test(expectedExceptions = ConnectTimeoutException.class)\n+  public void testPostRequestSmallTimeout() throws IOException {\n+    // Set 1 ms to cause timeout for requests\n+    System.setProperty(SystemPropertyKeys.HTTP_REQUEST_TIMEOUT, \"1\");\n+    // a popular echo server that echos all the inputs\n+    final String echoServer = \"http://httpbin.org/post\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI5MTE2MQ=="}, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzU0ODYxOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/client/CustomRestClientFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMToyODoxN1rOGYea9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMTo1OToxMlrOGYfTyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMxNzQyOQ==", "bodyText": "Let's put this number to some constant file or at least to be a variable", "url": "https://github.com/apache/helix/pull/1013#discussion_r428317429", "createdAt": "2020-05-20T21:28:17Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/client/CustomRestClientFactory.java", "diffHunk": "@@ -32,26 +37,32 @@\n  */\n public class CustomRestClientFactory {\n   private static final Logger LOG = LoggerFactory.getLogger(CustomRestClientFactory.class);\n-\n   private static CustomRestClient INSTANCE = null;\n \n-  private CustomRestClientFactory() {\n+  protected CustomRestClientFactory() {\n   }\n \n   public static CustomRestClient get() {\n     if (INSTANCE == null) {\n       synchronized (CustomRestClientFactory.class) {\n         if (INSTANCE == null) {\n           try {\n+            // Here int has been used for timeout value because setConnectTimeout,\n+            // setConnectionRequestTimeout and setSocketTimeout are getting int as input\n+            final int httpRequestTimeout =\n+                HelixUtil.getSystemPropertyAsInt(RestSystemPropertyKeys.HTTP_TIMEOUT_MS, 60 * 1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba2633e3dacc50b941cdc64632b5773ea054f13"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMzMTk3Nw==", "bodyText": "Sure. Moved to constant file.", "url": "https://github.com/apache/helix/pull/1013#discussion_r428331977", "createdAt": "2020-05-20T21:59:12Z", "author": {"login": "alirezazamani"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/client/CustomRestClientFactory.java", "diffHunk": "@@ -32,26 +37,32 @@\n  */\n public class CustomRestClientFactory {\n   private static final Logger LOG = LoggerFactory.getLogger(CustomRestClientFactory.class);\n-\n   private static CustomRestClient INSTANCE = null;\n \n-  private CustomRestClientFactory() {\n+  protected CustomRestClientFactory() {\n   }\n \n   public static CustomRestClient get() {\n     if (INSTANCE == null) {\n       synchronized (CustomRestClientFactory.class) {\n         if (INSTANCE == null) {\n           try {\n+            // Here int has been used for timeout value because setConnectTimeout,\n+            // setConnectionRequestTimeout and setSocketTimeout are getting int as input\n+            final int httpRequestTimeout =\n+                HelixUtil.getSystemPropertyAsInt(RestSystemPropertyKeys.HTTP_TIMEOUT_MS, 60 * 1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMxNzQyOQ=="}, "originalCommit": {"oid": "7ba2633e3dacc50b941cdc64632b5773ea054f13"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODIwMDAzOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMzowOTo0MlrOGYkwJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNjo0NjoxNVrOGY6hcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMTE1Ng==", "bodyText": "Why is this reset to a hard coded timeout? What if the timeout is changed, you setting it here 60000 would break the original value. The correct way should be to backup the original property and set it back here.", "url": "https://github.com/apache/helix/pull/1013#discussion_r428421156", "createdAt": "2020-05-21T03:09:42Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "diffHunk": "@@ -145,6 +148,35 @@ public void testPostRequestFormat() throws IOException {\n     Assert.assertEquals(json.get(\"data\").asText(), \"{}\");\n   }\n \n+  @Test\n+  public void testGetInstanceStoppableCheckSmallTimeout() throws Exception {\n+    // Reset the INSTANCE in CustomRestClientFactory to create new one with new TimeOut\n+    Field instance = CustomRestClientFactory.class.getDeclaredField(\"INSTANCE\");\n+    instance.setAccessible(true);\n+    instance.set(null, null);\n+\n+    // Set 1 ms to cause timeout for http requests\n+    System.setProperty(RestSystemPropertyKeys.HTTP_TIMEOUT_MS, \"1\");\n+    // a popular echo server that echos all the inputs\n+    // TODO: add a mock rest server\n+    final String echoServer = \"http://httpbin.org/post\";\n+    CustomRestClient _customRestClient = CustomRestClientFactory.get();\n+    boolean timeoutExceptionHappened = false;\n+    try {\n+      _customRestClient.getInstanceStoppableCheck(echoServer, Collections.emptyMap());\n+    } catch (ConnectTimeoutException e) {\n+      // Since the timeout is so small, we are expecting to get ConnectTimeoutException\n+      timeoutExceptionHappened = true;\n+    }\n+    // Reset the HTTP_REQUEST_TIMEOUT property back to the default value\n+    System.setProperty(RestSystemPropertyKeys.HTTP_TIMEOUT_MS, \"60000\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3c191f2224124ee4ee1ef34375c59ec6bf8ed68"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMzQwOA==", "bodyText": "Should use try finally to recover the state. Otherwise if this test throws exception before recovering, later tests may be failing.", "url": "https://github.com/apache/helix/pull/1013#discussion_r428423408", "createdAt": "2020-05-21T03:19:30Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "diffHunk": "@@ -145,6 +148,35 @@ public void testPostRequestFormat() throws IOException {\n     Assert.assertEquals(json.get(\"data\").asText(), \"{}\");\n   }\n \n+  @Test\n+  public void testGetInstanceStoppableCheckSmallTimeout() throws Exception {\n+    // Reset the INSTANCE in CustomRestClientFactory to create new one with new TimeOut\n+    Field instance = CustomRestClientFactory.class.getDeclaredField(\"INSTANCE\");\n+    instance.setAccessible(true);\n+    instance.set(null, null);\n+\n+    // Set 1 ms to cause timeout for http requests\n+    System.setProperty(RestSystemPropertyKeys.HTTP_TIMEOUT_MS, \"1\");\n+    // a popular echo server that echos all the inputs\n+    // TODO: add a mock rest server\n+    final String echoServer = \"http://httpbin.org/post\";\n+    CustomRestClient _customRestClient = CustomRestClientFactory.get();\n+    boolean timeoutExceptionHappened = false;\n+    try {\n+      _customRestClient.getInstanceStoppableCheck(echoServer, Collections.emptyMap());\n+    } catch (ConnectTimeoutException e) {\n+      // Since the timeout is so small, we are expecting to get ConnectTimeoutException\n+      timeoutExceptionHappened = true;\n+    }\n+    // Reset the HTTP_REQUEST_TIMEOUT property back to the default value\n+    System.setProperty(RestSystemPropertyKeys.HTTP_TIMEOUT_MS, \"60000\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMTE1Ng=="}, "originalCommit": {"oid": "a3c191f2224124ee4ee1ef34375c59ec6bf8ed68"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc3Nzg0Mg==", "bodyText": "Removed this test.", "url": "https://github.com/apache/helix/pull/1013#discussion_r428777842", "createdAt": "2020-05-21T16:46:15Z", "author": {"login": "alirezazamani"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "diffHunk": "@@ -145,6 +148,35 @@ public void testPostRequestFormat() throws IOException {\n     Assert.assertEquals(json.get(\"data\").asText(), \"{}\");\n   }\n \n+  @Test\n+  public void testGetInstanceStoppableCheckSmallTimeout() throws Exception {\n+    // Reset the INSTANCE in CustomRestClientFactory to create new one with new TimeOut\n+    Field instance = CustomRestClientFactory.class.getDeclaredField(\"INSTANCE\");\n+    instance.setAccessible(true);\n+    instance.set(null, null);\n+\n+    // Set 1 ms to cause timeout for http requests\n+    System.setProperty(RestSystemPropertyKeys.HTTP_TIMEOUT_MS, \"1\");\n+    // a popular echo server that echos all the inputs\n+    // TODO: add a mock rest server\n+    final String echoServer = \"http://httpbin.org/post\";\n+    CustomRestClient _customRestClient = CustomRestClientFactory.get();\n+    boolean timeoutExceptionHappened = false;\n+    try {\n+      _customRestClient.getInstanceStoppableCheck(echoServer, Collections.emptyMap());\n+    } catch (ConnectTimeoutException e) {\n+      // Since the timeout is so small, we are expecting to get ConnectTimeoutException\n+      timeoutExceptionHappened = true;\n+    }\n+    // Reset the HTTP_REQUEST_TIMEOUT property back to the default value\n+    System.setProperty(RestSystemPropertyKeys.HTTP_TIMEOUT_MS, \"60000\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMTE1Ng=="}, "originalCommit": {"oid": "a3c191f2224124ee4ee1ef34375c59ec6bf8ed68"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODIwNTEyOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMzoxMzowM1rOGYkzTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNjo0NTo1OFrOGY6gug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMTk2Ng==", "bodyText": "I am not sure if I am convinced by this. What if it is fast enough to complete the request in 1 ms? It may not happen, but theoretically it could. This is relying on possibility of timeout..", "url": "https://github.com/apache/helix/pull/1013#discussion_r428421966", "createdAt": "2020-05-21T03:13:03Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "diffHunk": "@@ -145,6 +148,35 @@ public void testPostRequestFormat() throws IOException {\n     Assert.assertEquals(json.get(\"data\").asText(), \"{}\");\n   }\n \n+  @Test\n+  public void testGetInstanceStoppableCheckSmallTimeout() throws Exception {\n+    // Reset the INSTANCE in CustomRestClientFactory to create new one with new TimeOut\n+    Field instance = CustomRestClientFactory.class.getDeclaredField(\"INSTANCE\");\n+    instance.setAccessible(true);\n+    instance.set(null, null);\n+\n+    // Set 1 ms to cause timeout for http requests\n+    System.setProperty(RestSystemPropertyKeys.HTTP_TIMEOUT_MS, \"1\");\n+    // a popular echo server that echos all the inputs\n+    // TODO: add a mock rest server\n+    final String echoServer = \"http://httpbin.org/post\";\n+    CustomRestClient _customRestClient = CustomRestClientFactory.get();\n+    boolean timeoutExceptionHappened = false;\n+    try {\n+      _customRestClient.getInstanceStoppableCheck(echoServer, Collections.emptyMap());\n+    } catch (ConnectTimeoutException e) {\n+      // Since the timeout is so small, we are expecting to get ConnectTimeoutException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3c191f2224124ee4ee1ef34375c59ec6bf8ed68"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc3NzY1OA==", "bodyText": "Changed the test completely. It is using mock now.", "url": "https://github.com/apache/helix/pull/1013#discussion_r428777658", "createdAt": "2020-05-21T16:45:58Z", "author": {"login": "alirezazamani"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "diffHunk": "@@ -145,6 +148,35 @@ public void testPostRequestFormat() throws IOException {\n     Assert.assertEquals(json.get(\"data\").asText(), \"{}\");\n   }\n \n+  @Test\n+  public void testGetInstanceStoppableCheckSmallTimeout() throws Exception {\n+    // Reset the INSTANCE in CustomRestClientFactory to create new one with new TimeOut\n+    Field instance = CustomRestClientFactory.class.getDeclaredField(\"INSTANCE\");\n+    instance.setAccessible(true);\n+    instance.set(null, null);\n+\n+    // Set 1 ms to cause timeout for http requests\n+    System.setProperty(RestSystemPropertyKeys.HTTP_TIMEOUT_MS, \"1\");\n+    // a popular echo server that echos all the inputs\n+    // TODO: add a mock rest server\n+    final String echoServer = \"http://httpbin.org/post\";\n+    CustomRestClient _customRestClient = CustomRestClientFactory.get();\n+    boolean timeoutExceptionHappened = false;\n+    try {\n+      _customRestClient.getInstanceStoppableCheck(echoServer, Collections.emptyMap());\n+    } catch (ConnectTimeoutException e) {\n+      // Since the timeout is so small, we are expecting to get ConnectTimeoutException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMTk2Ng=="}, "originalCommit": {"oid": "a3c191f2224124ee4ee1ef34375c59ec6bf8ed68"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODIwODgxOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/common/RestSystemPropertyKeys.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMzoxNTozOFrOGYk1nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNjo0NTozMVrOGY6ftQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMjU1Ng==", "bodyText": "Is this changed? Like I said in previous thread, The property name is too generic. If this is set, it indicates that all http in helix should be using the config. However this is not the case. Should be narrowed down to helix rest or even stoppable.", "url": "https://github.com/apache/helix/pull/1013#discussion_r428422556", "createdAt": "2020-05-21T03:15:38Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/common/RestSystemPropertyKeys.java", "diffHunk": "@@ -0,0 +1,6 @@\n+package org.apache.helix.rest.common;\n+\n+public class RestSystemPropertyKeys {\n+  // System property for request timeout\n+  public static final String HTTP_TIMEOUT_MS = \"http.timeout.ms\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3c191f2224124ee4ee1ef34375c59ec6bf8ed68"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc3NzM5Nw==", "bodyText": "Changed it to REST_HTTP_TIMEOUT_MS.", "url": "https://github.com/apache/helix/pull/1013#discussion_r428777397", "createdAt": "2020-05-21T16:45:31Z", "author": {"login": "alirezazamani"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/common/RestSystemPropertyKeys.java", "diffHunk": "@@ -0,0 +1,6 @@\n+package org.apache.helix.rest.common;\n+\n+public class RestSystemPropertyKeys {\n+  // System property for request timeout\n+  public static final String HTTP_TIMEOUT_MS = \"http.timeout.ms\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMjU1Ng=="}, "originalCommit": {"oid": "a3c191f2224124ee4ee1ef34375c59ec6bf8ed68"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTM0MTAxOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTozMzoxM1rOGZDsew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTozMzoxM1rOGZDsew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkyODEyMw==", "bodyText": "This mix of styling (snake_case and camelCase) isn't java style", "url": "https://github.com/apache/helix/pull/1013#discussion_r428928123", "createdAt": "2020-05-21T21:33:13Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "diffHunk": "@@ -145,6 +146,28 @@ public void testPostRequestFormat() throws IOException {\n     Assert.assertEquals(json.get(\"data\").asText(), \"{}\");\n   }\n \n+  @Test\n+  public void testGetPartitionStoppableCheck_when_timeout() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb1a374dc1e9325f91b9741e7fc8afafb0993a20"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTM2MTcyOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/client/CustomRestClientImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTozOTozOVrOGZD4lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTozOTozOVrOGZD4lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzMTIyMw==", "bodyText": "Please remove this unused import", "url": "https://github.com/apache/helix/pull/1013#discussion_r428931223", "createdAt": "2020-05-21T21:39:39Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/client/CustomRestClientImpl.java", "diffHunk": "@@ -33,6 +33,7 @@\n import org.apache.http.client.ClientProtocolException;\n import org.apache.http.client.HttpClient;\n import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.conn.ConnectTimeoutException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb1a374dc1e9325f91b9741e7fc8afafb0993a20"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1508, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}