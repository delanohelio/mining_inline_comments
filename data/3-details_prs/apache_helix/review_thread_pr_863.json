{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MDYzNTY0", "number": 863, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTowMzoxM1rODllegg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMzoyNzo0MlrODm7W7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzM3OTIyOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkCacheBaseDataAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTowMzoxM1rOFykEaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzowNzo1MFrOFzAedQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NDA3Mw==", "bodyText": "static constant for \"/\" to reduce objects created?", "url": "https://github.com/apache/helix/pull/863#discussion_r388564073", "createdAt": "2020-03-05T21:03:13Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkCacheBaseDataAccessor.java", "diffHunk": "@@ -58,7 +61,15 @@\n   protected ZkCallbackCache<T> _zkCache;\n \n   final ZkBaseDataAccessor<T> _baseAccessor;\n-  final Map<String, Cache<T>> _cacheMap;\n+\n+  // TODO: need to make sure no overlap between wtCachePaths and zkCachePaths\n+  // TreeMap key is ordered by key string length, so more general (i.e. short) prefix\n+  // comes first\n+  final Map<String, Cache<T>> _cacheMap = new TreeMap<>((o1, o2) -> {\n+    int len1 = o1.split(\"/\").length;\n+    int len2 = o2.split(\"/\").length;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a817bb55579042bf24a89e8df0ab0598d75b92"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAyOTQ5Mw==", "bodyText": "Realized this is original code. We could resolve this thread.", "url": "https://github.com/apache/helix/pull/863#discussion_r389029493", "createdAt": "2020-03-06T17:07:50Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkCacheBaseDataAccessor.java", "diffHunk": "@@ -58,7 +61,15 @@\n   protected ZkCallbackCache<T> _zkCache;\n \n   final ZkBaseDataAccessor<T> _baseAccessor;\n-  final Map<String, Cache<T>> _cacheMap;\n+\n+  // TODO: need to make sure no overlap between wtCachePaths and zkCachePaths\n+  // TreeMap key is ordered by key string length, so more general (i.e. short) prefix\n+  // comes first\n+  final Map<String, Cache<T>> _cacheMap = new TreeMap<>((o1, o2) -> {\n+    int len1 = o1.split(\"/\").length;\n+    int len2 = o2.split(\"/\").length;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NDA3Mw=="}, "originalCommit": {"oid": "45a817bb55579042bf24a89e8df0ab0598d75b92"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODU3MTI2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkCacheBaseDataAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNzoxNjozNlrOFyvGYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzozMjoyMlrOFzybdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc0NDgwMw==", "bodyText": "Do we need to validate zk address before falling back to single realm mode?", "url": "https://github.com/apache/helix/pull/863#discussion_r388744803", "createdAt": "2020-03-06T07:16:36Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkCacheBaseDataAccessor.java", "diffHunk": "@@ -146,17 +161,55 @@ public ZkCacheBaseDataAccessor(String zkAddress, ZkSerializer serializer, String\n     _wtCachePaths = wtCachePaths;\n     _zkCachePaths = zkCachePaths;\n \n-    // TODO: need to make sure no overlap between wtCachePaths and zkCachePaths\n-    // TreeMap key is ordered by key string length, so more general (i.e. short) prefix\n-    // comes first\n-    _cacheMap = new TreeMap<>(new Comparator<String>() {\n-      @Override\n-      public int compare(String o1, String o2) {\n-        int len1 = o1.split(\"/\").length;\n-        int len2 = o2.split(\"/\").length;\n-        return len1 - len2;\n-      }\n-    });\n+    start();\n+  }\n+\n+  /**\n+   * Constructor using a Builder that allows users to set connection and client configs.\n+   * @param builder\n+   */\n+  private ZkCacheBaseDataAccessor(Builder builder) {\n+    _chrootPath = builder._chrootPath;\n+    _wtCachePaths = builder._wtCachePaths;\n+    _zkCachePaths = builder._zkCachePaths;\n+\n+    RealmAwareZkClient zkClient;\n+    switch (builder._realmMode) {\n+      case MULTI_REALM:\n+        try {\n+          zkClient = new FederatedZkClient(builder._realmAwareZkConnectionConfig,\n+              builder._realmAwareZkClientConfig);\n+          break; // Must break out of the switch statement here\n+        } catch (IOException | InvalidRoutingDataException | IllegalStateException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a817bb55579042bf24a89e8df0ab0598d75b92"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg0NzkyNg==", "bodyText": "It's already done in the builder's validate()?", "url": "https://github.com/apache/helix/pull/863#discussion_r389847926", "createdAt": "2020-03-09T17:32:22Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkCacheBaseDataAccessor.java", "diffHunk": "@@ -146,17 +161,55 @@ public ZkCacheBaseDataAccessor(String zkAddress, ZkSerializer serializer, String\n     _wtCachePaths = wtCachePaths;\n     _zkCachePaths = zkCachePaths;\n \n-    // TODO: need to make sure no overlap between wtCachePaths and zkCachePaths\n-    // TreeMap key is ordered by key string length, so more general (i.e. short) prefix\n-    // comes first\n-    _cacheMap = new TreeMap<>(new Comparator<String>() {\n-      @Override\n-      public int compare(String o1, String o2) {\n-        int len1 = o1.split(\"/\").length;\n-        int len2 = o2.split(\"/\").length;\n-        return len1 - len2;\n-      }\n-    });\n+    start();\n+  }\n+\n+  /**\n+   * Constructor using a Builder that allows users to set connection and client configs.\n+   * @param builder\n+   */\n+  private ZkCacheBaseDataAccessor(Builder builder) {\n+    _chrootPath = builder._chrootPath;\n+    _wtCachePaths = builder._wtCachePaths;\n+    _zkCachePaths = builder._zkCachePaths;\n+\n+    RealmAwareZkClient zkClient;\n+    switch (builder._realmMode) {\n+      case MULTI_REALM:\n+        try {\n+          zkClient = new FederatedZkClient(builder._realmAwareZkConnectionConfig,\n+              builder._realmAwareZkClientConfig);\n+          break; // Must break out of the switch statement here\n+        } catch (IOException | InvalidRoutingDataException | IllegalStateException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc0NDgwMw=="}, "originalCommit": {"oid": "45a817bb55579042bf24a89e8df0ab0598d75b92"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzQ1ODE0OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkCacheBaseDataAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNTozMTozOFrOFzbVCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjowNDoxNVrOFzu-Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ2OTQ1MQ==", "bodyText": "This Builder code is very similar across all Helix APIs, I do recommend us to find some way to consolidate them.\nFor existing use case (who do not care about realm, or who is not  going to shard to multiple ZK), do they need to change anything in their code?", "url": "https://github.com/apache/helix/pull/863#discussion_r389469451", "createdAt": "2020-03-09T05:31:38Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkCacheBaseDataAccessor.java", "diffHunk": "@@ -842,4 +894,116 @@ public void close() {\n       _zkClient.close();\n     }\n   }\n+\n+  public static class Builder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f17cca0aaf24bdd6be374bbd8b57032ee8693a"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc5MTMwMw==", "bodyText": "@lei-xia\n\n\nSee #873 . We will do this once all Helix Java APIs have been implemented since this is a purely internal implementation detail. User-facing APIs stay the same.\n\n\nNo, please see existing constructors for the fallback logic.", "url": "https://github.com/apache/helix/pull/863#discussion_r389791303", "createdAt": "2020-03-09T16:04:15Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkCacheBaseDataAccessor.java", "diffHunk": "@@ -842,4 +894,116 @@ public void close() {\n       _zkClient.close();\n     }\n   }\n+\n+  public static class Builder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ2OTQ1MQ=="}, "originalCommit": {"oid": "29f17cca0aaf24bdd6be374bbd8b57032ee8693a"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTcwNzkxOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkCacheBaseDataAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjo1NDowMVrOFzw7vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzozNDoxMlrOFzygSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgyMzQyMg==", "bodyText": "This is not very clear. Do you mean whatever type I set here, it will change the API to single-realm mode?  Then if call builder. setRealmMode(multi-realm).setZkClientType(type), what will happen?", "url": "https://github.com/apache/helix/pull/863#discussion_r389823422", "createdAt": "2020-03-09T16:54:01Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkCacheBaseDataAccessor.java", "diffHunk": "@@ -842,4 +894,116 @@ public void close() {\n       _zkClient.close();\n     }\n   }\n+\n+  public static class Builder {\n+    private String _zkAddress;\n+    private RealmAwareZkClient.RealmMode _realmMode;\n+    private RealmAwareZkClient.RealmAwareZkConnectionConfig _realmAwareZkConnectionConfig;\n+    private RealmAwareZkClient.RealmAwareZkClientConfig _realmAwareZkClientConfig;\n+\n+    /** ZkCacheBaseDataAccessor-specific parameters */\n+    private String _chrootPath;\n+    private List<String> _wtCachePaths;\n+    private List<String> _zkCachePaths;\n+    private ZkBaseDataAccessor.ZkClientType _zkClientType;\n+\n+    public Builder() {\n+    }\n+\n+    public Builder setZkAddress(String zkAddress) {\n+      _zkAddress = zkAddress;\n+      return this;\n+    }\n+\n+    public Builder setRealmMode(RealmAwareZkClient.RealmMode realmMode) {\n+      _realmMode = realmMode;\n+      return this;\n+    }\n+\n+    public Builder setRealmAwareZkConnectionConfig(\n+        RealmAwareZkClient.RealmAwareZkConnectionConfig realmAwareZkConnectionConfig) {\n+      _realmAwareZkConnectionConfig = realmAwareZkConnectionConfig;\n+      return this;\n+    }\n+\n+    public Builder setRealmAwareZkClientConfig(\n+        RealmAwareZkClient.RealmAwareZkClientConfig realmAwareZkClientConfig) {\n+      _realmAwareZkClientConfig = realmAwareZkClientConfig;\n+      return this;\n+    }\n+\n+    public Builder setChrootPath(String chrootPath) {\n+      _chrootPath = chrootPath;\n+      return this;\n+    }\n+\n+    public Builder setWtCachePaths(List<String> wtCachePaths) {\n+      _wtCachePaths = wtCachePaths;\n+      return this;\n+    }\n+\n+    public Builder setZkCachePaths(List<String> zkCachePaths) {\n+      _zkCachePaths = zkCachePaths;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the ZkClientType. If this is set, ZkCacheBaseDataAccessor will be created on\n+     * single-realm mode.\n+     * @param zkClientType\n+     * @return\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f17cca0aaf24bdd6be374bbd8b57032ee8693a"}, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg0OTE2MA==", "bodyText": "That will throw an exception as ZkClientType only applies to the old Dedicated and Shared zkclients.\nDo you see the following block of code in the validate() logic? How could I make this clearer?\n      // If ZkClientType is set, RealmMode must either be single-realm or not set.\n      if (isZkClientTypeSet && _realmMode == RealmAwareZkClient.RealmMode.MULTI_REALM) {\n        throw new HelixException(\n            \"ZkCacheBaseDataAccessor: you cannot set ZkClientType on multi-realm mode!\");", "url": "https://github.com/apache/helix/pull/863#discussion_r389849160", "createdAt": "2020-03-09T17:34:12Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkCacheBaseDataAccessor.java", "diffHunk": "@@ -842,4 +894,116 @@ public void close() {\n       _zkClient.close();\n     }\n   }\n+\n+  public static class Builder {\n+    private String _zkAddress;\n+    private RealmAwareZkClient.RealmMode _realmMode;\n+    private RealmAwareZkClient.RealmAwareZkConnectionConfig _realmAwareZkConnectionConfig;\n+    private RealmAwareZkClient.RealmAwareZkClientConfig _realmAwareZkClientConfig;\n+\n+    /** ZkCacheBaseDataAccessor-specific parameters */\n+    private String _chrootPath;\n+    private List<String> _wtCachePaths;\n+    private List<String> _zkCachePaths;\n+    private ZkBaseDataAccessor.ZkClientType _zkClientType;\n+\n+    public Builder() {\n+    }\n+\n+    public Builder setZkAddress(String zkAddress) {\n+      _zkAddress = zkAddress;\n+      return this;\n+    }\n+\n+    public Builder setRealmMode(RealmAwareZkClient.RealmMode realmMode) {\n+      _realmMode = realmMode;\n+      return this;\n+    }\n+\n+    public Builder setRealmAwareZkConnectionConfig(\n+        RealmAwareZkClient.RealmAwareZkConnectionConfig realmAwareZkConnectionConfig) {\n+      _realmAwareZkConnectionConfig = realmAwareZkConnectionConfig;\n+      return this;\n+    }\n+\n+    public Builder setRealmAwareZkClientConfig(\n+        RealmAwareZkClient.RealmAwareZkClientConfig realmAwareZkClientConfig) {\n+      _realmAwareZkClientConfig = realmAwareZkClientConfig;\n+      return this;\n+    }\n+\n+    public Builder setChrootPath(String chrootPath) {\n+      _chrootPath = chrootPath;\n+      return this;\n+    }\n+\n+    public Builder setWtCachePaths(List<String> wtCachePaths) {\n+      _wtCachePaths = wtCachePaths;\n+      return this;\n+    }\n+\n+    public Builder setZkCachePaths(List<String> zkCachePaths) {\n+      _zkCachePaths = zkCachePaths;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the ZkClientType. If this is set, ZkCacheBaseDataAccessor will be created on\n+     * single-realm mode.\n+     * @param zkClientType\n+     * @return\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgyMzQyMg=="}, "originalCommit": {"oid": "29f17cca0aaf24bdd6be374bbd8b57032ee8693a"}, "originalPosition": 245}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTQ1MDA0OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkCacheBaseDataAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMzoyNzo0MlrOF0oHbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMjozOToxM1rOF1PfhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyNzUzNA==", "bodyText": "Note: current FederatedZkClient doesn't support waitUntilConnected() because of multiple raw zkClients. We shall move waitUntilConnected to only single-realm mode.", "url": "https://github.com/apache/helix/pull/863#discussion_r390727534", "createdAt": "2020-03-11T03:27:42Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkCacheBaseDataAccessor.java", "diffHunk": "@@ -90,50 +104,62 @@ public ZkCacheBaseDataAccessor(ZkBaseDataAccessor<T> baseAccessor, String chroot\n     _wtCachePaths = wtCachePaths;\n     _zkCachePaths = zkCachePaths;\n \n-    // TODO: need to make sure no overlap between wtCachePaths and zkCachePaths\n-    // TreeMap key is ordered by key string length, so more general (i.e. short) prefix\n-    // comes first\n-    _cacheMap = new TreeMap<>(new Comparator<String>() {\n-      @Override\n-      public int compare(String o1, String o2) {\n-        int len1 = o1.split(\"/\").length;\n-        int len2 = o2.split(\"/\").length;\n-        return len1 - len2;\n-      }\n-    });\n-\n     start();\n   }\n \n+  @Deprecated\n   public ZkCacheBaseDataAccessor(String zkAddress, ZkSerializer serializer, String chrootPath,\n       List<String> wtCachePaths, List<String> zkCachePaths) {\n     this(zkAddress, serializer, chrootPath, wtCachePaths, zkCachePaths, null, null,\n         ZkBaseDataAccessor.ZkClientType.SHARED);\n   }\n \n+  @Deprecated\n   public ZkCacheBaseDataAccessor(String zkAddress, ZkSerializer serializer, String chrootPath,\n       List<String> wtCachePaths, List<String> zkCachePaths, String monitorType, String monitorkey) {\n     this(zkAddress, serializer, chrootPath, wtCachePaths, zkCachePaths, monitorType, monitorkey,\n         ZkBaseDataAccessor.ZkClientType.SHARED);\n   }\n \n+  @Deprecated\n   public ZkCacheBaseDataAccessor(String zkAddress, ZkSerializer serializer, String chrootPath,\n       List<String> wtCachePaths, List<String> zkCachePaths, String monitorType, String monitorkey,\n       ZkBaseDataAccessor.ZkClientType zkClientType) {\n-    HelixZkClient.ZkClientConfig clientConfig = new HelixZkClient.ZkClientConfig();\n-    clientConfig.setZkSerializer(serializer).setMonitorType(monitorType).setMonitorKey(monitorkey);\n-    switch (zkClientType) {\n-    case DEDICATED:\n-      _zkClient = DedicatedZkClientFactory.getInstance().buildZkClient(\n-          new HelixZkClient.ZkConnectionConfig(zkAddress),\n-          new HelixZkClient.ZkClientConfig().setZkSerializer(serializer));\n-      break;\n-    case SHARED:\n-    default:\n-      _zkClient = SharedZkClientFactory.getInstance()\n-          .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress), clientConfig);\n-    }\n-    _zkClient.waitUntilConnected(HelixZkClient.DEFAULT_CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS);\n+\n+    // If the multi ZK config is enabled, use multi-realm mode with FederatedZkClient\n+    if (Boolean.parseBoolean(System.getProperty(SystemPropertyKeys.MULTI_ZK_ENABLED))) {\n+      try {\n+        RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder connectionConfigBuilder =\n+            new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder();\n+        RealmAwareZkClient.RealmAwareZkClientConfig clientConfig =\n+            new RealmAwareZkClient.RealmAwareZkClientConfig();\n+        clientConfig.setZkSerializer(serializer).setMonitorType(monitorType)\n+            .setMonitorKey(monitorkey);\n+        // Use a federated zk client\n+        _zkClient = new FederatedZkClient(connectionConfigBuilder.build(), clientConfig);\n+      } catch (IOException | InvalidRoutingDataException | IllegalStateException e) {\n+        // Note: IllegalStateException is for HttpRoutingDataReader if MSDS endpoint cannot be\n+        // found\n+        throw new HelixException(\"Failed to create ZkCacheBaseDataAccessor!\", e);\n+      }\n+    } else {\n+      HelixZkClient.ZkClientConfig clientConfig = new HelixZkClient.ZkClientConfig();\n+      clientConfig.setZkSerializer(serializer).setMonitorType(monitorType)\n+          .setMonitorKey(monitorkey);\n+      switch (zkClientType) {\n+        case DEDICATED:\n+          _zkClient = DedicatedZkClientFactory.getInstance()\n+              .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n+                  new HelixZkClient.ZkClientConfig().setZkSerializer(serializer));\n+          break;\n+        case SHARED:\n+        default:\n+          _zkClient = SharedZkClientFactory.getInstance()\n+              .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress), clientConfig);\n+      }\n+      _zkClient.waitUntilConnected(HelixZkClient.DEFAULT_CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a1ef024b982d85cb39479b9ff698e8cdc323b65"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM3MjY3Nw==", "bodyText": "@pkuwm Could you look again? This is in the else block where we do not create FederatedZkClient...", "url": "https://github.com/apache/helix/pull/863#discussion_r391372677", "createdAt": "2020-03-12T02:39:13Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkCacheBaseDataAccessor.java", "diffHunk": "@@ -90,50 +104,62 @@ public ZkCacheBaseDataAccessor(ZkBaseDataAccessor<T> baseAccessor, String chroot\n     _wtCachePaths = wtCachePaths;\n     _zkCachePaths = zkCachePaths;\n \n-    // TODO: need to make sure no overlap between wtCachePaths and zkCachePaths\n-    // TreeMap key is ordered by key string length, so more general (i.e. short) prefix\n-    // comes first\n-    _cacheMap = new TreeMap<>(new Comparator<String>() {\n-      @Override\n-      public int compare(String o1, String o2) {\n-        int len1 = o1.split(\"/\").length;\n-        int len2 = o2.split(\"/\").length;\n-        return len1 - len2;\n-      }\n-    });\n-\n     start();\n   }\n \n+  @Deprecated\n   public ZkCacheBaseDataAccessor(String zkAddress, ZkSerializer serializer, String chrootPath,\n       List<String> wtCachePaths, List<String> zkCachePaths) {\n     this(zkAddress, serializer, chrootPath, wtCachePaths, zkCachePaths, null, null,\n         ZkBaseDataAccessor.ZkClientType.SHARED);\n   }\n \n+  @Deprecated\n   public ZkCacheBaseDataAccessor(String zkAddress, ZkSerializer serializer, String chrootPath,\n       List<String> wtCachePaths, List<String> zkCachePaths, String monitorType, String monitorkey) {\n     this(zkAddress, serializer, chrootPath, wtCachePaths, zkCachePaths, monitorType, monitorkey,\n         ZkBaseDataAccessor.ZkClientType.SHARED);\n   }\n \n+  @Deprecated\n   public ZkCacheBaseDataAccessor(String zkAddress, ZkSerializer serializer, String chrootPath,\n       List<String> wtCachePaths, List<String> zkCachePaths, String monitorType, String monitorkey,\n       ZkBaseDataAccessor.ZkClientType zkClientType) {\n-    HelixZkClient.ZkClientConfig clientConfig = new HelixZkClient.ZkClientConfig();\n-    clientConfig.setZkSerializer(serializer).setMonitorType(monitorType).setMonitorKey(monitorkey);\n-    switch (zkClientType) {\n-    case DEDICATED:\n-      _zkClient = DedicatedZkClientFactory.getInstance().buildZkClient(\n-          new HelixZkClient.ZkConnectionConfig(zkAddress),\n-          new HelixZkClient.ZkClientConfig().setZkSerializer(serializer));\n-      break;\n-    case SHARED:\n-    default:\n-      _zkClient = SharedZkClientFactory.getInstance()\n-          .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress), clientConfig);\n-    }\n-    _zkClient.waitUntilConnected(HelixZkClient.DEFAULT_CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS);\n+\n+    // If the multi ZK config is enabled, use multi-realm mode with FederatedZkClient\n+    if (Boolean.parseBoolean(System.getProperty(SystemPropertyKeys.MULTI_ZK_ENABLED))) {\n+      try {\n+        RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder connectionConfigBuilder =\n+            new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder();\n+        RealmAwareZkClient.RealmAwareZkClientConfig clientConfig =\n+            new RealmAwareZkClient.RealmAwareZkClientConfig();\n+        clientConfig.setZkSerializer(serializer).setMonitorType(monitorType)\n+            .setMonitorKey(monitorkey);\n+        // Use a federated zk client\n+        _zkClient = new FederatedZkClient(connectionConfigBuilder.build(), clientConfig);\n+      } catch (IOException | InvalidRoutingDataException | IllegalStateException e) {\n+        // Note: IllegalStateException is for HttpRoutingDataReader if MSDS endpoint cannot be\n+        // found\n+        throw new HelixException(\"Failed to create ZkCacheBaseDataAccessor!\", e);\n+      }\n+    } else {\n+      HelixZkClient.ZkClientConfig clientConfig = new HelixZkClient.ZkClientConfig();\n+      clientConfig.setZkSerializer(serializer).setMonitorType(monitorType)\n+          .setMonitorKey(monitorkey);\n+      switch (zkClientType) {\n+        case DEDICATED:\n+          _zkClient = DedicatedZkClientFactory.getInstance()\n+              .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n+                  new HelixZkClient.ZkClientConfig().setZkSerializer(serializer));\n+          break;\n+        case SHARED:\n+        default:\n+          _zkClient = SharedZkClientFactory.getInstance()\n+              .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress), clientConfig);\n+      }\n+      _zkClient.waitUntilConnected(HelixZkClient.DEFAULT_CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyNzUzNA=="}, "originalCommit": {"oid": "6a1ef024b982d85cb39479b9ff698e8cdc323b65"}, "originalPosition": 145}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1347, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}