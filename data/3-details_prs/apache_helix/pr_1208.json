{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYxODg2NjEw", "number": 1208, "title": "Add DynamicTaskConfig to store task configs in ZK", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #1207\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThis PR adds DynamicTaskConfig class, which is a wrapper for ZNRecord, to store and access the configs for dynamically loaded tasks in ZK. It also adds the appropriate constants that refer to the config fields to TaskConstants.\nTests\n\n The following tests are written for this issue:\n\nNo tests were written, as this PR only adds a class to the project.\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\nSince the PR doesn't modify any existing code, it's not going to cause any test failures. The following is the build result:\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for Apache Helix 1.0.2-SNAPSHOT:\n[INFO] \n[INFO] Apache Helix ....................................... SUCCESS [  2.163 s]\n[INFO] Apache Helix :: Metrics Common ..................... SUCCESS [  4.236 s]\n[INFO] Apache Helix :: Metadata Store Directory Common .... SUCCESS [  2.850 s]\n[INFO] Apache Helix :: ZooKeeper API ...................... SUCCESS [  5.996 s]\n[INFO] Apache Helix :: Helix Common ....................... SUCCESS [  3.138 s]\n[INFO] Apache Helix :: Core ............................... SUCCESS [ 38.853 s]\n[INFO] Apache Helix :: Admin Webapp ....................... SUCCESS [  5.833 s]\n[INFO] Apache Helix :: Restful Interface .................. SUCCESS [ 10.435 s]\n[INFO] Apache Helix :: Distributed Lock ................... SUCCESS [  1.894 s]\n[INFO] Apache Helix :: HelixAgent ......................... SUCCESS [  2.897 s]\n[INFO] Apache Helix :: Recipes ............................ SUCCESS [  0.044 s]\n[INFO] Apache Helix :: Recipes :: Rabbitmq Consumer Group . SUCCESS [  1.426 s]\n[INFO] Apache Helix :: Recipes :: Rsync Replicated File Store SUCCESS [  1.463 s]\n[INFO] Apache Helix :: Recipes :: distributed lock manager  SUCCESS [  1.043 s]\n[INFO] Apache Helix :: Recipes :: distributed task execution SUCCESS [  1.171 s]\n[INFO] Apache Helix :: Recipes :: service discovery ....... SUCCESS [  1.046 s]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:25 min\n[INFO] Finished at: 2020-08-04T09:50:49-07:00\n[INFO] ------------------------------------------------------------------------\n\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation (Optional)\n\n In case of new functionality, my PR adds documentation in the following wiki page:\n\nCode Quality\n\n My diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-08-03T00:43:09Z", "url": "https://github.com/apache/helix/pull/1208", "merged": true, "mergeCommit": {"oid": "4524028d50e211fbaa18eb36c805d1a2c578643d"}, "closed": true, "closedAt": "2020-08-04T17:23:54Z", "author": {"login": "rabashizade"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7G_yXgH2gAyNDYxODg2NjEwOjQxZTEyYzFhYWE0MDk2NWQ0YWIwNTA1ZDE3ZDZmOThkMGU1ZjJkZDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7pkNGAH2gAyNDYxODg2NjEwOjVjY2MyOWM2OGNlMTlkOTY2OWU1MTE4ZDc3Y2ZjNTFiNjI3YzdlYTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "41e12c1aaa40965d4ab0505d17d6f98d0e5f2dd0", "author": {"user": {"login": "rabashizade", "name": "Ramin Bashizade"}}, "url": "https://github.com/apache/helix/commit/41e12c1aaa40965d4ab0505d17d6f98d0e5f2dd0", "committedDate": "2020-08-03T00:36:43Z", "message": "Add DynamicTaskConfig to store task configs in ZK\n\nAdds DynamicTaskConfig class, which is a wrapper for ZNRecord, to store\nand access the configs for dynamically loaded tasks in ZK.\n\nAlso adds the appropriate constants to TaskConstants."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NzY1MzY2", "url": "https://github.com/apache/helix/pull/1208#pullrequestreview-459765366", "createdAt": "2020-08-03T06:01:03Z", "commit": {"oid": "41e12c1aaa40965d4ab0505d17d6f98d0e5f2dd0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNjowMTowNFrOG6tD5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNjowMTowNFrOG6tD5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwODg2OA==", "bodyText": "Is there a reason DynamicTaskConfig doesn't use inheritance here?", "url": "https://github.com/apache/helix/pull/1208#discussion_r464208868", "createdAt": "2020-08-03T06:01:04Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+\n+/**\n+ * A wrapper class for ZNRecord, used to store configs for tasks that are to be dynamically loaded\n+ */\n+public class DynamicTaskConfig {\n+  private ZNRecord _taskConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41e12c1aaa40965d4ab0505d17d6f98d0e5f2dd0"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMTc1NTEx", "url": "https://github.com/apache/helix/pull/1208#pullrequestreview-460175511", "createdAt": "2020-08-03T16:39:04Z", "commit": {"oid": "41e12c1aaa40965d4ab0505d17d6f98d0e5f2dd0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjozOTowNFrOG7AoGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjozOTowNFrOG7AoGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyOTQzMw==", "bodyText": "What are these getters and setters for?", "url": "https://github.com/apache/helix/pull/1208#discussion_r464529433", "createdAt": "2020-08-03T16:39:04Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+\n+/**\n+ * A wrapper class for ZNRecord, used to store configs for tasks that are to be dynamically loaded\n+ */\n+public class DynamicTaskConfig {\n+  private ZNRecord _taskConfig;\n+\n+  /**\n+   * Initialize task config with an existing ZNRecord\n+   * @param taskConfig\n+   */\n+  public DynamicTaskConfig(ZNRecord taskConfig) {\n+    _taskConfig = taskConfig;\n+  }\n+\n+  /**\n+   * Initialize task config with parameters\n+   * @param id\n+   * @param jarFile address of the JAR file containing the task\n+   * @param taskVersion task version\n+   * @param taskClasses list of the {@link Task} classes names\n+   * @param taskFactory {@link TaskFactory} class name\n+   */\n+  public DynamicTaskConfig(String id, String jarFile, String taskVersion, List<String> taskClasses,\n+      String taskFactory) {\n+    _taskConfig = new ZNRecord(id);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_JAR_FILE_KEY, jarFile);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_VERSION_KEY, taskVersion);\n+    _taskConfig.setListField(TaskConstants.TASK_CLASSES_KEY, taskClasses);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_FACTORY_KEY, taskFactory);\n+  }\n+\n+  /**\n+   * Get the task config ZNRecord\n+   * @return\n+   */\n+  public ZNRecord getTaskConfig() {\n+    return _taskConfig;\n+  }\n+\n+  /**\n+   * Set the task config ZNRecord\n+   * @param taskConfig\n+   */\n+  public void setTaskConfig(ZNRecord taskConfig) {\n+    _taskConfig = taskConfig;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41e12c1aaa40965d4ab0505d17d6f98d0e5f2dd0"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMTc1ODYx", "url": "https://github.com/apache/helix/pull/1208#pullrequestreview-460175861", "createdAt": "2020-08-03T16:39:35Z", "commit": {"oid": "41e12c1aaa40965d4ab0505d17d6f98d0e5f2dd0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjozOTozNlrOG7ApOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjozOTozNlrOG7ApOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyOTcyMg==", "bodyText": "JarFilePath? or getLocalJarFilePath? Let's try to use descriptive variable/method names.", "url": "https://github.com/apache/helix/pull/1208#discussion_r464529722", "createdAt": "2020-08-03T16:39:36Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+\n+/**\n+ * A wrapper class for ZNRecord, used to store configs for tasks that are to be dynamically loaded\n+ */\n+public class DynamicTaskConfig {\n+  private ZNRecord _taskConfig;\n+\n+  /**\n+   * Initialize task config with an existing ZNRecord\n+   * @param taskConfig\n+   */\n+  public DynamicTaskConfig(ZNRecord taskConfig) {\n+    _taskConfig = taskConfig;\n+  }\n+\n+  /**\n+   * Initialize task config with parameters\n+   * @param id\n+   * @param jarFile address of the JAR file containing the task\n+   * @param taskVersion task version\n+   * @param taskClasses list of the {@link Task} classes names\n+   * @param taskFactory {@link TaskFactory} class name\n+   */\n+  public DynamicTaskConfig(String id, String jarFile, String taskVersion, List<String> taskClasses,\n+      String taskFactory) {\n+    _taskConfig = new ZNRecord(id);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_JAR_FILE_KEY, jarFile);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_VERSION_KEY, taskVersion);\n+    _taskConfig.setListField(TaskConstants.TASK_CLASSES_KEY, taskClasses);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_FACTORY_KEY, taskFactory);\n+  }\n+\n+  /**\n+   * Get the task config ZNRecord\n+   * @return\n+   */\n+  public ZNRecord getTaskConfig() {\n+    return _taskConfig;\n+  }\n+\n+  /**\n+   * Set the task config ZNRecord\n+   * @param taskConfig\n+   */\n+  public void setTaskConfig(ZNRecord taskConfig) {\n+    _taskConfig = taskConfig;\n+  }\n+\n+  /**\n+   * Get the address of the JAR file containing the task\n+   * @return\n+   */\n+  public String getJarFile() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41e12c1aaa40965d4ab0505d17d6f98d0e5f2dd0"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMTc2MTI2", "url": "https://github.com/apache/helix/pull/1208#pullrequestreview-460176126", "createdAt": "2020-08-03T16:40:02Z", "commit": {"oid": "41e12c1aaa40965d4ab0505d17d6f98d0e5f2dd0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo0MDowMlrOG7AqJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo0MDowMlrOG7AqJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyOTk1OA==", "bodyText": "Typo.\nAlso, why do you ever need to set the task version after-the-fact?", "url": "https://github.com/apache/helix/pull/1208#discussion_r464529958", "createdAt": "2020-08-03T16:40:02Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+\n+/**\n+ * A wrapper class for ZNRecord, used to store configs for tasks that are to be dynamically loaded\n+ */\n+public class DynamicTaskConfig {\n+  private ZNRecord _taskConfig;\n+\n+  /**\n+   * Initialize task config with an existing ZNRecord\n+   * @param taskConfig\n+   */\n+  public DynamicTaskConfig(ZNRecord taskConfig) {\n+    _taskConfig = taskConfig;\n+  }\n+\n+  /**\n+   * Initialize task config with parameters\n+   * @param id\n+   * @param jarFile address of the JAR file containing the task\n+   * @param taskVersion task version\n+   * @param taskClasses list of the {@link Task} classes names\n+   * @param taskFactory {@link TaskFactory} class name\n+   */\n+  public DynamicTaskConfig(String id, String jarFile, String taskVersion, List<String> taskClasses,\n+      String taskFactory) {\n+    _taskConfig = new ZNRecord(id);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_JAR_FILE_KEY, jarFile);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_VERSION_KEY, taskVersion);\n+    _taskConfig.setListField(TaskConstants.TASK_CLASSES_KEY, taskClasses);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_FACTORY_KEY, taskFactory);\n+  }\n+\n+  /**\n+   * Get the task config ZNRecord\n+   * @return\n+   */\n+  public ZNRecord getTaskConfig() {\n+    return _taskConfig;\n+  }\n+\n+  /**\n+   * Set the task config ZNRecord\n+   * @param taskConfig\n+   */\n+  public void setTaskConfig(ZNRecord taskConfig) {\n+    _taskConfig = taskConfig;\n+  }\n+\n+  /**\n+   * Get the address of the JAR file containing the task\n+   * @return\n+   */\n+  public String getJarFile() {\n+    return _taskConfig.getSimpleField(TaskConstants.TASK_JAR_FILE_KEY);\n+  }\n+\n+  /**\n+   * Set the address of the JAR file containing the task\n+   * @param jarFile\n+   */\n+  public void setJarFile(String jarFile) {\n+    _taskConfig.setSimpleField(TaskConstants.TASK_JAR_FILE_KEY, jarFile);\n+  }\n+\n+  /**\n+   * Get the task version\n+   * @return\n+   */\n+  public String getTaskVersion() {\n+    return _taskConfig.getSimpleField(TaskConstants.TASK_VERSION_KEY);\n+  }\n+\n+  /**\n+   * Set the task version\n+   * @param taskVersion\n+   */\n+  public void seTaskVersion(String taskVersion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41e12c1aaa40965d4ab0505d17d6f98d0e5f2dd0"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMTc2ODIw", "url": "https://github.com/apache/helix/pull/1208#pullrequestreview-460176820", "createdAt": "2020-08-03T16:41:03Z", "commit": {"oid": "41e12c1aaa40965d4ab0505d17d6f98d0e5f2dd0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo0MTowNFrOG7AsVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo0MTowNFrOG7AsVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzMDUxOQ==", "bodyText": "Overall, let's go over this class and make sure we do not have methods (Getters and setters) that we don't/shouldn't need. Think about which fields should be immutable?\nAlso, let's put a focus on descriptive variable/method names as well.", "url": "https://github.com/apache/helix/pull/1208#discussion_r464530519", "createdAt": "2020-08-03T16:41:04Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+\n+/**\n+ * A wrapper class for ZNRecord, used to store configs for tasks that are to be dynamically loaded\n+ */\n+public class DynamicTaskConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41e12c1aaa40965d4ab0505d17d6f98d0e5f2dd0"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a579b70c8b39295670a84ed922666590b319331", "author": {"user": {"login": "rabashizade", "name": "Ramin Bashizade"}}, "url": "https://github.com/apache/helix/commit/2a579b70c8b39295670a84ed922666590b319331", "committedDate": "2020-08-03T18:13:34Z", "message": "Remove unnecessary methods, add more descriptive names\n\nRemoves unnecessary setter methods and renames some methods and\nvariables to be more descriptive."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNDYxMzc4", "url": "https://github.com/apache/helix/pull/1208#pullrequestreview-460461378", "createdAt": "2020-08-04T02:52:25Z", "commit": {"oid": "2a579b70c8b39295670a84ed922666590b319331"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjo1MjoyNVrOG7PMjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjo1MjoyNVrOG7PMjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2ODE0Mw==", "bodyText": "Nit: Rename to getTaskConfigZNRecord?", "url": "https://github.com/apache/helix/pull/1208#discussion_r464768143", "createdAt": "2020-08-04T02:52:25Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+\n+/**\n+ * A wrapper class for ZNRecord, used to store configs for tasks that are to be dynamically loaded\n+ */\n+public class DynamicTaskConfig {\n+  private final ZNRecord _taskConfig;\n+\n+  /**\n+   * Initialize task config with an existing ZNRecord\n+   * @param taskConfig\n+   */\n+  public DynamicTaskConfig(ZNRecord taskConfig) {\n+    _taskConfig = taskConfig;\n+  }\n+\n+  /**\n+   * Initialize task config with parameters\n+   * @param id\n+   * @param jarFilePath path of the JAR file containing the task\n+   * @param taskVersion task version\n+   * @param taskClassesFqns list of the {@link Task} classes fully qualified names\n+   * @param taskFactoryFqn {@link TaskFactory} class fully qualified name\n+   */\n+  public DynamicTaskConfig(String id, String jarFilePath, String taskVersion, List<String> taskClassesFqns,\n+      String taskFactoryFqn) {\n+    _taskConfig = new ZNRecord(id);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_JAR_FILE_KEY, jarFilePath);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_VERSION_KEY, taskVersion);\n+    _taskConfig.setListField(TaskConstants.TASK_CLASSES_KEY, taskClassesFqns);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_FACTORY_KEY, taskFactoryFqn);\n+  }\n+\n+  /**\n+   * Get the task config ZNRecord\n+   * @return\n+   */\n+  public ZNRecord getTaskConfig() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a579b70c8b39295670a84ed922666590b319331"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNDYxNjU2", "url": "https://github.com/apache/helix/pull/1208#pullrequestreview-460461656", "createdAt": "2020-08-04T02:53:23Z", "commit": {"oid": "2a579b70c8b39295670a84ed922666590b319331"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjo1MzoyM1rOG7PNcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjo1MzoyM1rOG7PNcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2ODM2OQ==", "bodyText": "Since we have a TaskFactory - Task Class mapping, do we want a map here instead of two separate lists? How do we match them up otherwise?", "url": "https://github.com/apache/helix/pull/1208#discussion_r464768369", "createdAt": "2020-08-04T02:53:23Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+\n+/**\n+ * A wrapper class for ZNRecord, used to store configs for tasks that are to be dynamically loaded\n+ */\n+public class DynamicTaskConfig {\n+  private final ZNRecord _taskConfig;\n+\n+  /**\n+   * Initialize task config with an existing ZNRecord\n+   * @param taskConfig\n+   */\n+  public DynamicTaskConfig(ZNRecord taskConfig) {\n+    _taskConfig = taskConfig;\n+  }\n+\n+  /**\n+   * Initialize task config with parameters\n+   * @param id\n+   * @param jarFilePath path of the JAR file containing the task\n+   * @param taskVersion task version\n+   * @param taskClassesFqns list of the {@link Task} classes fully qualified names\n+   * @param taskFactoryFqn {@link TaskFactory} class fully qualified name\n+   */\n+  public DynamicTaskConfig(String id, String jarFilePath, String taskVersion, List<String> taskClassesFqns,\n+      String taskFactoryFqn) {\n+    _taskConfig = new ZNRecord(id);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_JAR_FILE_KEY, jarFilePath);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_VERSION_KEY, taskVersion);\n+    _taskConfig.setListField(TaskConstants.TASK_CLASSES_KEY, taskClassesFqns);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_FACTORY_KEY, taskFactoryFqn);\n+  }\n+\n+  /**\n+   * Get the task config ZNRecord\n+   * @return\n+   */\n+  public ZNRecord getTaskConfig() {\n+    return _taskConfig;\n+  }\n+\n+  /**\n+   * Get the address of the JAR file containing the task\n+   * @return\n+   */\n+  public String getJarFilePath() {\n+    return _taskConfig.getSimpleField(TaskConstants.TASK_JAR_FILE_KEY);\n+  }\n+\n+  /**\n+   * Get the task version\n+   * @return\n+   */\n+  public String getTaskVersion() {\n+    return _taskConfig.getSimpleField(TaskConstants.TASK_VERSION_KEY);\n+  }\n+\n+  /**\n+   * Get the list of the {@link Task} classes fully qualified names\n+   * @return\n+   */\n+  public List<String> getTaskClassesFqns() {\n+    return _taskConfig.getListField(TaskConstants.TASK_CLASSES_KEY);\n+  }\n+\n+  /**\n+   * Get the {@link TaskFactory} class fully qualified name\n+   * @return\n+   */\n+  public String getTaskFactoryFqn() {\n+    return _taskConfig.getSimpleField(TaskConstants.TASK_FACTORY_KEY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a579b70c8b39295670a84ed922666590b319331"}, "originalPosition": 94}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNDYxODIy", "url": "https://github.com/apache/helix/pull/1208#pullrequestreview-460461822", "createdAt": "2020-08-04T02:53:56Z", "commit": {"oid": "2a579b70c8b39295670a84ed922666590b319331"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjo1Mzo1NlrOG7PN8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjo1Mzo1NlrOG7PN8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2ODQ5Ng==", "bodyText": "Nit: TASK_FACTORY for consistency?", "url": "https://github.com/apache/helix/pull/1208#discussion_r464768496", "createdAt": "2020-08-04T02:53:56Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskConstants.java", "diffHunk": "@@ -49,4 +49,24 @@\n   public static final String PREV_RA_NODE = \"PreviousResourceAssignment\";\n \n   public static final boolean DEFAULT_TASK_ENABLE_COMPRESSION = false;\n+  /**\n+   * Name of the JAR file for the task dynamically loaded in {@link TaskStateModel}\n+   */\n+  public static final String TASK_JAR_FILE_KEY = \"JAR_FILE\";\n+  /**\n+   * Version of the task dynamically loaded in {@link TaskStateModel}\n+   */\n+  public static final String TASK_VERSION_KEY = \"VERSION\";\n+  /**\n+   * Name of the {@link Task} class(es) for the task dynamically loaded in {@link TaskStateModel}\n+   */\n+  public static final String TASK_CLASSES_KEY = \"TASK_CLASSES\";\n+  /**\n+   * Name of the {@link TaskFactory} class for the task dynamically loaded in {@link TaskStateModel}\n+   */\n+  public static final String TASK_FACTORY_KEY = \"TASKFACTORY\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a579b70c8b39295670a84ed922666590b319331"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNDY3MTgy", "url": "https://github.com/apache/helix/pull/1208#pullrequestreview-460467182", "createdAt": "2020-08-04T03:12:47Z", "commit": {"oid": "2a579b70c8b39295670a84ed922666590b319331"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMzoxMjo0N1rOG7PhCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMzoxMjo0N1rOG7PhCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3MzM4NQ==", "bodyText": "Let's rename TASK_PATH to DYNAMICALLY_LOADED_TASK_PATH or something. TASK_PATH might add confusion because we actually use /PROPERTYSTORE/TaskRebalancer/", "url": "https://github.com/apache/helix/pull/1208#discussion_r464773385", "createdAt": "2020-08-04T03:12:47Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskConstants.java", "diffHunk": "@@ -49,4 +49,24 @@\n   public static final String PREV_RA_NODE = \"PreviousResourceAssignment\";\n \n   public static final boolean DEFAULT_TASK_ENABLE_COMPRESSION = false;\n+  /**\n+   * Name of the JAR file for the task dynamically loaded in {@link TaskStateModel}\n+   */\n+  public static final String TASK_JAR_FILE_KEY = \"JAR_FILE\";\n+  /**\n+   * Version of the task dynamically loaded in {@link TaskStateModel}\n+   */\n+  public static final String TASK_VERSION_KEY = \"VERSION\";\n+  /**\n+   * Name of the {@link Task} class(es) for the task dynamically loaded in {@link TaskStateModel}\n+   */\n+  public static final String TASK_CLASSES_KEY = \"TASK_CLASSES\";\n+  /**\n+   * Name of the {@link TaskFactory} class for the task dynamically loaded in {@link TaskStateModel}\n+   */\n+  public static final String TASK_FACTORY_KEY = \"TASKFACTORY\";\n+  /**\n+   * The path for dynamic task configs\n+   */\n+  public static final String TASK_PATH = \"/TASK_DEFINITION\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a579b70c8b39295670a84ed922666590b319331"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37e89c59e58b52a46360a342ad78df2bdd4d03e3", "author": {"user": {"login": "rabashizade", "name": "Ramin Bashizade"}}, "url": "https://github.com/apache/helix/commit/37e89c59e58b52a46360a342ad78df2bdd4d03e3", "committedDate": "2020-08-04T03:57:50Z", "message": "Refactor some names to be clear/consistent"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwOTgyNTEy", "url": "https://github.com/apache/helix/pull/1208#pullrequestreview-460982512", "createdAt": "2020-08-04T16:35:26Z", "commit": {"oid": "37e89c59e58b52a46360a342ad78df2bdd4d03e3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ccc29c68ce19d9669e5118d77cfc51b627c7ea2", "author": {"user": {"login": "rabashizade", "name": "Ramin Bashizade"}}, "url": "https://github.com/apache/helix/commit/5ccc29c68ce19d9669e5118d77cfc51b627c7ea2", "committedDate": "2020-08-04T16:53:16Z", "message": "Clarify a variable's name"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4622, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}