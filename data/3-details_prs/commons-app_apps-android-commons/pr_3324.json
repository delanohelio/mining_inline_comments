{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxOTQ5OTI2", "number": 3324, "title": "Shift contributions to use Room DB", "bodyText": "Description (required)\n\nAdded Room Dependency\nShifted ContributionsDao to use RoomDB\nFixes #3127 Refactor our content providers to adhere to modern standards\nWhat changes did you make and why?\n\nTests performed (required)\nTested betaDebug on Samsung S7", "createdAt": "2020-01-13T06:12:58Z", "url": "https://github.com/commons-app/apps-android-commons/pull/3324", "merged": true, "mergeCommit": {"oid": "99c6f5f10526f91c9e94134206aa9f7cbe809a9d"}, "closed": true, "closedAt": "2020-03-09T21:13:21Z", "author": {"login": "ashishkumar468"}, "timelineItems": {"totalCount": 66, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb52FVpgH2gAyMzYxOTQ5OTI2OjllMGI4ZjAzNzdkODU3OGZkNTUyZDFkZGY3YWFiNmFmODk0NjM4Yzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMEk2xgFqTM3MTUzMzAyOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9e0b8f0377d8578fd552d1ddf7aab6af894638c7", "author": {"user": {"login": "ashishkumar468", "name": "Ashish"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/9e0b8f0377d8578fd552d1ddf7aab6af894638c7", "committedDate": "2020-01-13T06:09:19Z", "message": "Part of #3127\n* Added Room Dependency\n* Shifted ContributionsDao to use RoomDB"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNjUwNDMw", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-341650430", "createdAt": "2020-01-13T06:13:02Z", "commit": {"oid": "9e0b8f0377d8578fd552d1ddf7aab6af894638c7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d37148ea98c42a7639bf2d0644578ebbcb1f8235", "author": {"user": {"login": "ashishkumar468", "name": "Ashish"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/d37148ea98c42a7639bf2d0644578ebbcb1f8235", "committedDate": "2020-02-04T09:21:23Z", "message": "Sync with master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d547749d4b97e57eeecae94482b5baf839399fa", "author": {"user": {"login": "ashishkumar468", "name": "Ashish"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/3d547749d4b97e57eeecae94482b5baf839399fa", "committedDate": "2020-02-04T16:37:14Z", "message": "Save and Fetch contributions via RoomDAO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "899885ccbde6d67820727ff486db8a61a87389b1", "author": {"user": {"login": "ashishkumar468", "name": "Ashish"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/899885ccbde6d67820727ff486db8a61a87389b1", "committedDate": "2020-02-23T15:20:13Z", "message": "Bugfixes, fixed test cases, injected schedulers for ContributionsPresenter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac33ee6b25e12c438871b4de04183c4c1b623fcf", "author": {"user": {"login": "ashishkumar468", "name": "Ashish"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/ac33ee6b25e12c438871b4de04183c4c1b623fcf", "committedDate": "2020-02-23T15:22:40Z", "message": "removed stetho"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d31fbfc7524a58ed9f08d70a0c418c40d67a9949", "author": {"user": {"login": "ashishkumar468", "name": "Ashish"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/d31fbfc7524a58ed9f08d70a0c418c40d67a9949", "committedDate": "2020-02-23T17:10:02Z", "message": "Fixed ReviewHelperTest cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e060bd041e9b718d204bf0c3995492ab1c8dae4", "author": {"user": {"login": "ashishkumar468", "name": "Ashish"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/5e060bd041e9b718d204bf0c3995492ab1c8dae4", "committedDate": "2020-02-23T17:31:38Z", "message": "Fixed test cases in DeleteHelperTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMTE1OTkw", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-363115990", "createdAt": "2020-02-23T19:15:27Z", "commit": {"oid": "5e060bd041e9b718d204bf0c3995492ab1c8dae4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85d99a005ee7a0533af8effaecf61c924b273711", "author": {"user": {"login": "ashishkumar468", "name": "Ashish"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/85d99a005ee7a0533af8effaecf61c924b273711", "committedDate": "2020-02-23T19:47:15Z", "message": "Fetch all contributions [TODO add pagination to use this, maybe later in a seperate PR]"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37f17b6fd462774ff019406f4708ed2a33ac07f0", "author": {"user": {"login": "ashishkumar468", "name": "Ashish"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/37f17b6fd462774ff019406f4708ed2a33ac07f0", "committedDate": "2020-02-24T10:26:40Z", "message": "Update Schema false in AppDatabase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "509ea4359315247299a37f804dda6df0d483d11d", "author": {"user": {"login": "ashishkumar468", "name": "Ashish"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/509ea4359315247299a37f804dda6df0d483d11d", "committedDate": "2020-02-24T12:37:42Z", "message": "removed parameter from fetchControbutions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8962a21cc94c412f57b110a8f96dd5bac9076a3", "author": {"user": {"login": "ashishkumar468", "name": "Ashish"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/c8962a21cc94c412f57b110a8f96dd5bac9076a3", "committedDate": "2020-02-24T15:46:27Z", "message": "Merge branch 'master' into refactor/contributions-to-room"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1424776132b7200735c82c64af7267198648b152", "author": {"user": {"login": "ashishkumar468", "name": "Ashish"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/1424776132b7200735c82c64af7267198648b152", "committedDate": "2020-02-24T15:54:54Z", "message": "Added logs for fetch contributions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a5224114dffb606c1a2622a5282e9f19164e4c1", "author": {"user": {"login": "ashishkumar468", "name": "Ashish"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/6a5224114dffb606c1a2622a5282e9f19164e4c1", "committedDate": "2020-02-24T16:07:51Z", "message": "Fixed test case ContributionsPresenter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7140e1a2f5161b1f41181db4e43213b2faf3bb8", "author": {"user": {"login": "ashishkumar468", "name": "Ashish"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/e7140e1a2f5161b1f41181db4e43213b2faf3bb8", "committedDate": "2020-02-24T16:50:05Z", "message": "Added an autogenerate primary key, submit save contributions on executor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2714df2e0b01c68e277eadc89423533b440612c8", "author": {"user": {"login": "ashishkumar468", "name": "Ashish"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/2714df2e0b01c68e277eadc89423533b440612c8", "committedDate": "2020-02-24T17:05:43Z", "message": " fixed getItemAtPosition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe", "author": {"user": {"login": "ashishkumar468", "name": "Ashish"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/9d995278cb04a278f7f566d2f48eb6a4253b93fe", "committedDate": "2020-02-25T07:24:39Z", "message": "MainActivity Config changes +=orientation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MDc3Mjgw", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-364077280", "createdAt": "2020-02-25T11:43:21Z", "commit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3OTY0NTkz", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-367964593", "createdAt": "2020-03-03T13:12:23Z", "commit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMzoxMjoyM1rOFxFI3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMzoxMjoyM1rOFxFI3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwODczNQ==", "bodyText": "I wouldn't do this, it is generally just lying to yourself about things working", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387008735", "createdAt": "2020-03-03T13:12:23Z", "author": {"login": "macgills"}, "path": "app/src/main/AndroidManifest.xml", "diffHunk": "@@ -78,7 +78,7 @@\n             android:name=\".contributions.MainActivity\"\n             android:icon=\"@mipmap/ic_launcher\"\n             android:label=\"@string/app_name\"\n-            android:configChanges=\"screenSize|keyboard\" />\n+            android:configChanges=\"screenSize|keyboard|orientation\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3OTkwNTY3", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-367990567", "createdAt": "2020-03-03T13:48:31Z", "commit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMzo0ODozMVrOFxGZAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMzo0ODozMVrOFxGZAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyOTI0OQ==", "bodyText": "versions should be specified in gradle.properteries and be in CONSTANT_CASE", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387029249", "createdAt": "2020-03-03T13:48:31Z", "author": {"login": "macgills"}, "path": "app/build.gradle", "diffHunk": "@@ -102,7 +102,14 @@ dependencies {\n \n     //swipe_layout\n     implementation 'com.daimajia.swipelayout:library:1.2.0@aar'\n+\n+    //Room\n+    def room_version= '2.2.3'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDAyMzcz", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-368002373", "createdAt": "2020-03-03T14:03:41Z", "commit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDowMzo0MVrOFxG9yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDowMzo0MVrOFxG9yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAzODY2Nw==", "bodyText": "how could contributions be null? Create it at the field level if you want. It should also be final.\nThere are minor style violations in this file, no spaces around operators", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387038667", "createdAt": "2020-03-03T14:03:41Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java", "diffHunk": "@@ -35,15 +40,23 @@ public ContributionViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int\n \n     @Override\n     public void onBindViewHolder(@NonNull ContributionViewHolder holder, int position) {\n-        final Contribution contribution = callback.getContributionForPosition(position);\n+        final Contribution contribution = contributions.get(position);\n         DisplayableContribution displayableContribution = new DisplayableContribution(contribution,\n                 position);\n         holder.init(position, displayableContribution);\n     }\n \n     @Override\n     public int getItemCount() {\n-        return callback.getNumberOfContributions();\n+        return contributions==null?0:contributions.size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDAzMTY4", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-368003168", "createdAt": "2020-03-03T14:04:45Z", "commit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDowNDo0NVrOFxHAOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDowNDo0NVrOFxHAOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAzOTI4OQ==", "bodyText": "if all this does is call super then it is unnecessary and can be deleted", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387039289", "createdAt": "2020-03-03T14:04:45Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListFragment.java", "diffHunk": "@@ -72,6 +74,12 @@\n     private String lastVisibleItemID;\n \n     private int SPAN_COUNT=3;\n+    private List<Contribution> contributions;\n+\n+    @Override\n+    public void onCreate(@Nullable Bundle savedInstanceState) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDAzOTE4", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-368003918", "createdAt": "2020-03-03T14:05:43Z", "commit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDowNTo0M1rOFxHCrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDowNTo0M1rOFxHCrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAzOTkxNg==", "bodyText": "This is essentially a no-op, can be deleted", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387039916", "createdAt": "2020-03-03T14:05:43Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListFragment.java", "diffHunk": "@@ -104,6 +112,7 @@ private void initRecyclerView() {\n         }\n \n         rvContributionsList.setAdapter(adapter);\n+        adapter.setContributions(contributions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDA0NDEz", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-368004413", "createdAt": "2020-03-03T14:06:20Z", "commit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDowNjoyMFrOFxHELw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDowNjoyMFrOFxHELw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA0MDMwMw==", "bodyText": "delete this line and the field", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387040303", "createdAt": "2020-03-03T14:06:20Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListFragment.java", "diffHunk": "@@ -178,16 +187,9 @@ public void showNoContributionsUI(boolean shouldShow) {\n         noContributionsYet.setVisibility(shouldShow ? VISIBLE : GONE);\n     }\n \n-    public void onDataSetChanged() {\n-        if (null != adapter) {\n-            adapter.notifyDataSetChanged();\n-            //Restoring last visible item position in cases of orientation change\n-            if (null != lastVisibleItemID) {\n-                int itemPositionWithId = callback.findItemPositionWithId(lastVisibleItemID);\n-                rvContributionsList.scrollToPosition(itemPositionWithId);\n-                lastVisibleItemID = null;//Reset the lastVisibleItemID once we have used it\n-            }\n-        }\n+    public void setContributions(List<Contribution> contributionList) {\n+        this.contributions=contributionList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDA5Mjg5", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-368009289", "createdAt": "2020-03-03T14:12:16Z", "commit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDoxMjoxN1rOFxHTEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDoxMjoxN1rOFxHTEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA0NDExMw==", "bodyText": "I'd be shocked if Room would return null for a list", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387044113", "createdAt": "2020-03-03T14:12:17Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsLocalDataSource.java", "diffHunk": "@@ -1,49 +1,80 @@\n package fr.free.nrw.commons.contributions;\n \n-import android.database.Cursor;\n+import android.app.job.JobScheduler;\n+import android.text.TextUtils;\n+\n+import androidx.lifecycle.LiveData;\n+\n+import java.util.List;\n \n import javax.inject.Inject;\n import javax.inject.Named;\n \n+import fr.free.nrw.commons.db.AppDatabase;\n import fr.free.nrw.commons.kvstore.JsonKvStore;\n+import io.reactivex.Single;\n \n /**\n  * The LocalDataSource class for Contributions\n  */\n class ContributionsLocalDataSource {\n \n-    private final ContributionDao contributionsDao;\n+    private final ContributionDao contributionDao;\n     private final JsonKvStore defaultKVStore;\n \n     @Inject\n     public ContributionsLocalDataSource(\n             @Named(\"default_preferences\") JsonKvStore defaultKVStore,\n-            ContributionDao contributionDao) {\n+            AppDatabase appDatabase) {\n         this.defaultKVStore = defaultKVStore;\n-        this.contributionsDao = contributionDao;\n+        this.contributionDao = appDatabase.getContributionDao();\n+    }\n+\n+    /**\n+     * Fetch default number of contributions to be show, based on user preferences\n+     */\n+    public String getString(String key) {\n+        return defaultKVStore.getString(key);\n     }\n \n     /**\n      * Fetch default number of contributions to be show, based on user preferences\n      */\n-    public int get(String key) {\n-        return defaultKVStore.getInt(key);\n+    public long getLong(String key) {\n+       return defaultKVStore.getLong(key);\n     }\n \n     /**\n      * Get contribution object from cursor\n-     * @param cursor\n+     * @param uri\n      * @return\n      */\n-    public Contribution getContributionFromCursor(Cursor cursor) {\n-        return contributionsDao.fromCursor(cursor);\n+    public Contribution getContributionWithFileName(String uri) {\n+        List<Contribution> contributionWithUri = contributionDao.getContributionWithTitle(uri);\n+        if(null!=contributionWithUri && contributionWithUri.size()>0){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDIwNzE2", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-368020716", "createdAt": "2020-03-03T14:25:37Z", "commit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDoyNTozOFrOFxH1oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDoyNTozOFrOFxH1oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA1Mjk2MQ==", "bodyText": "Why is the CompositeDisposable being assigned twice?", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387052961", "createdAt": "2020-03-03T14:25:38Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsPresenter.java", "diffHunk": "@@ -3,104 +3,155 @@\n import android.content.Context;\n import android.database.Cursor;\n import android.database.DataSetObserver;\n-import android.os.Bundle;\n+import android.text.TextUtils;\n+import android.util.Log;\n \n-import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n-import androidx.loader.content.CursorLoader;\n-import androidx.loader.content.Loader;\n+import androidx.lifecycle.LifecycleOwner;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.Observer;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n \n import javax.inject.Inject;\n+import javax.inject.Named;\n \n+import fr.free.nrw.commons.CommonsApplication;\n import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.auth.SessionManager;\n import fr.free.nrw.commons.contributions.ContributionsContract.UserActionListener;\n+import fr.free.nrw.commons.db.AppDatabase;\n+import fr.free.nrw.commons.di.CommonsApplicationModule;\n+import fr.free.nrw.commons.mwapi.UserClient;\n+import fr.free.nrw.commons.utils.ExecutorUtils;\n+import fr.free.nrw.commons.utils.NetworkUtils;\n+import io.reactivex.Observable;\n+import io.reactivex.Scheduler;\n+import io.reactivex.SingleObserver;\n+import io.reactivex.android.schedulers.AndroidSchedulers;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.schedulers.Schedulers;\n import timber.log.Timber;\n \n-import static fr.free.nrw.commons.contributions.ContributionDao.Table.ALL_FIELDS;\n-import static fr.free.nrw.commons.contributions.ContributionsContentProvider.BASE_URI;\n-import static fr.free.nrw.commons.settings.Prefs.UPLOADS_SHOWING;\n+import static fr.free.nrw.commons.contributions.Contribution.STATE_COMPLETED;\n \n /**\n  * The presenter class for Contributions\n  */\n-public class ContributionsPresenter extends DataSetObserver implements UserActionListener {\n+public class ContributionsPresenter implements UserActionListener {\n \n     private final ContributionsRepository repository;\n+    private final Scheduler mainThreadScheduler;\n+    private final Scheduler ioThreadScheduler;\n+    private CompositeDisposable compositeDisposable;\n     private ContributionsContract.View view;\n-    private Cursor cursor;\n+    private List<Contribution> contributionList=new ArrayList<>();\n \n     @Inject\n     Context context;\n \n     @Inject\n-    ContributionsPresenter(ContributionsRepository repository) {\n+    UserClient userClient;\n+\n+    @Inject\n+    AppDatabase appDatabase;\n+\n+    @Inject\n+    SessionManager sessionManager;\n+    private LifecycleOwner lifeCycleOwner;\n+\n+    @Inject\n+    ContributionsPresenter(ContributionsRepository repository, @Named(CommonsApplicationModule.MAIN_THREAD) Scheduler mainThreadScheduler,@Named(CommonsApplicationModule.IO_THREAD) Scheduler ioThreadScheduler) {\n         this.repository = repository;\n+        compositeDisposable=new CompositeDisposable();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDI2MzY0", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-368026364", "createdAt": "2020-03-03T14:32:05Z", "commit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDozMjowNVrOFxIHOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDozMjowNVrOFxIHOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA1NzQ2NA==", "bodyText": "I would generally just observe liveData in my view.\nAlso the fragment is passing in the wrong lifecycle, you need to use getViewLifecycleOwner(), see here", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387057464", "createdAt": "2020-03-03T14:32:05Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsPresenter.java", "diffHunk": "@@ -3,104 +3,155 @@\n import android.content.Context;\n import android.database.Cursor;\n import android.database.DataSetObserver;\n-import android.os.Bundle;\n+import android.text.TextUtils;\n+import android.util.Log;\n \n-import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n-import androidx.loader.content.CursorLoader;\n-import androidx.loader.content.Loader;\n+import androidx.lifecycle.LifecycleOwner;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.Observer;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n \n import javax.inject.Inject;\n+import javax.inject.Named;\n \n+import fr.free.nrw.commons.CommonsApplication;\n import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.auth.SessionManager;\n import fr.free.nrw.commons.contributions.ContributionsContract.UserActionListener;\n+import fr.free.nrw.commons.db.AppDatabase;\n+import fr.free.nrw.commons.di.CommonsApplicationModule;\n+import fr.free.nrw.commons.mwapi.UserClient;\n+import fr.free.nrw.commons.utils.ExecutorUtils;\n+import fr.free.nrw.commons.utils.NetworkUtils;\n+import io.reactivex.Observable;\n+import io.reactivex.Scheduler;\n+import io.reactivex.SingleObserver;\n+import io.reactivex.android.schedulers.AndroidSchedulers;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.schedulers.Schedulers;\n import timber.log.Timber;\n \n-import static fr.free.nrw.commons.contributions.ContributionDao.Table.ALL_FIELDS;\n-import static fr.free.nrw.commons.contributions.ContributionsContentProvider.BASE_URI;\n-import static fr.free.nrw.commons.settings.Prefs.UPLOADS_SHOWING;\n+import static fr.free.nrw.commons.contributions.Contribution.STATE_COMPLETED;\n \n /**\n  * The presenter class for Contributions\n  */\n-public class ContributionsPresenter extends DataSetObserver implements UserActionListener {\n+public class ContributionsPresenter implements UserActionListener {\n \n     private final ContributionsRepository repository;\n+    private final Scheduler mainThreadScheduler;\n+    private final Scheduler ioThreadScheduler;\n+    private CompositeDisposable compositeDisposable;\n     private ContributionsContract.View view;\n-    private Cursor cursor;\n+    private List<Contribution> contributionList=new ArrayList<>();\n \n     @Inject\n     Context context;\n \n     @Inject\n-    ContributionsPresenter(ContributionsRepository repository) {\n+    UserClient userClient;\n+\n+    @Inject\n+    AppDatabase appDatabase;\n+\n+    @Inject\n+    SessionManager sessionManager;\n+    private LifecycleOwner lifeCycleOwner;\n+\n+    @Inject\n+    ContributionsPresenter(ContributionsRepository repository, @Named(CommonsApplicationModule.MAIN_THREAD) Scheduler mainThreadScheduler,@Named(CommonsApplicationModule.IO_THREAD) Scheduler ioThreadScheduler) {\n         this.repository = repository;\n+        compositeDisposable=new CompositeDisposable();\n+        this.mainThreadScheduler=mainThreadScheduler;\n+        this.ioThreadScheduler=ioThreadScheduler;\n     }\n \n+    private String user;\n+\n     @Override\n     public void onAttachView(ContributionsContract.View view) {\n         this.view = view;\n-        if (null != cursor) {\n-            try {\n-                cursor.registerDataSetObserver(this);\n-            } catch (IllegalStateException e) {//Cursor might be already registered\n-                Timber.d(e);\n-            }\n-        }\n+        compositeDisposable=new CompositeDisposable();\n     }\n \n-    @Override\n-    public void onDetachView() {\n-        this.view = null;\n-        if (null != cursor) {\n-            try {\n-                cursor.unregisterDataSetObserver(this);\n-            } catch (Exception e) {//Cursor might not be already registered\n-                Timber.d(e);\n-            }\n-        }\n+    public void setLifeCycleOwner(LifecycleOwner lifeCycleOwner){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "originalPosition": 106}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDI3ODQ1", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-368027845", "createdAt": "2020-03-03T14:33:50Z", "commit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDozMzo1MFrOFxILuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDozMzo1MFrOFxILuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA1ODYxNw==", "bodyText": "parameter should be marked @NonNull and null check deleted", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387058617", "createdAt": "2020-03-03T14:33:50Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsPresenter.java", "diffHunk": "@@ -3,104 +3,155 @@\n import android.content.Context;\n import android.database.Cursor;\n import android.database.DataSetObserver;\n-import android.os.Bundle;\n+import android.text.TextUtils;\n+import android.util.Log;\n \n-import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n-import androidx.loader.content.CursorLoader;\n-import androidx.loader.content.Loader;\n+import androidx.lifecycle.LifecycleOwner;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.Observer;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n \n import javax.inject.Inject;\n+import javax.inject.Named;\n \n+import fr.free.nrw.commons.CommonsApplication;\n import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.auth.SessionManager;\n import fr.free.nrw.commons.contributions.ContributionsContract.UserActionListener;\n+import fr.free.nrw.commons.db.AppDatabase;\n+import fr.free.nrw.commons.di.CommonsApplicationModule;\n+import fr.free.nrw.commons.mwapi.UserClient;\n+import fr.free.nrw.commons.utils.ExecutorUtils;\n+import fr.free.nrw.commons.utils.NetworkUtils;\n+import io.reactivex.Observable;\n+import io.reactivex.Scheduler;\n+import io.reactivex.SingleObserver;\n+import io.reactivex.android.schedulers.AndroidSchedulers;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.schedulers.Schedulers;\n import timber.log.Timber;\n \n-import static fr.free.nrw.commons.contributions.ContributionDao.Table.ALL_FIELDS;\n-import static fr.free.nrw.commons.contributions.ContributionsContentProvider.BASE_URI;\n-import static fr.free.nrw.commons.settings.Prefs.UPLOADS_SHOWING;\n+import static fr.free.nrw.commons.contributions.Contribution.STATE_COMPLETED;\n \n /**\n  * The presenter class for Contributions\n  */\n-public class ContributionsPresenter extends DataSetObserver implements UserActionListener {\n+public class ContributionsPresenter implements UserActionListener {\n \n     private final ContributionsRepository repository;\n+    private final Scheduler mainThreadScheduler;\n+    private final Scheduler ioThreadScheduler;\n+    private CompositeDisposable compositeDisposable;\n     private ContributionsContract.View view;\n-    private Cursor cursor;\n+    private List<Contribution> contributionList=new ArrayList<>();\n \n     @Inject\n     Context context;\n \n     @Inject\n-    ContributionsPresenter(ContributionsRepository repository) {\n+    UserClient userClient;\n+\n+    @Inject\n+    AppDatabase appDatabase;\n+\n+    @Inject\n+    SessionManager sessionManager;\n+    private LifecycleOwner lifeCycleOwner;\n+\n+    @Inject\n+    ContributionsPresenter(ContributionsRepository repository, @Named(CommonsApplicationModule.MAIN_THREAD) Scheduler mainThreadScheduler,@Named(CommonsApplicationModule.IO_THREAD) Scheduler ioThreadScheduler) {\n         this.repository = repository;\n+        compositeDisposable=new CompositeDisposable();\n+        this.mainThreadScheduler=mainThreadScheduler;\n+        this.ioThreadScheduler=ioThreadScheduler;\n     }\n \n+    private String user;\n+\n     @Override\n     public void onAttachView(ContributionsContract.View view) {\n         this.view = view;\n-        if (null != cursor) {\n-            try {\n-                cursor.registerDataSetObserver(this);\n-            } catch (IllegalStateException e) {//Cursor might be already registered\n-                Timber.d(e);\n-            }\n-        }\n+        compositeDisposable=new CompositeDisposable();\n     }\n \n-    @Override\n-    public void onDetachView() {\n-        this.view = null;\n-        if (null != cursor) {\n-            try {\n-                cursor.unregisterDataSetObserver(this);\n-            } catch (Exception e) {//Cursor might not be already registered\n-                Timber.d(e);\n-            }\n-        }\n+    public void setLifeCycleOwner(LifecycleOwner lifeCycleOwner){\n+        this.lifeCycleOwner=lifeCycleOwner;\n     }\n \n-    @NonNull\n-    @Override\n-    public Loader<Cursor> onCreateLoader(int id, @Nullable Bundle args) {\n-        int preferredNumberOfUploads = repository.get(UPLOADS_SHOWING);\n-        return new CursorLoader(context, BASE_URI,\n-                ALL_FIELDS, \"\", null,\n-                ContributionDao.CONTRIBUTION_SORT + \"LIMIT \"\n-                        + (preferredNumberOfUploads>0?preferredNumberOfUploads:100));\n+    public void fetchContributions() {\n+        Timber.d(\"fetch  Contributions\");\n+        LiveData<List<Contribution>> liveDataContributions = repository.fetchContributions();\n+        if(null!=lifeCycleOwner) {\n+             liveDataContributions.observe(lifeCycleOwner, this::showContributions);\n+        }\n+\n+        if (NetworkUtils.isInternetConnectionEstablished(CommonsApplication.getInstance()) && shouldFetchContributions()) {\n+            Timber.d(\"fetching contributions: \");\n+            view.showProgress(true);\n+            this.user = sessionManager.getUserName();\n+            view.showContributions(null);\n+            compositeDisposable.add(userClient.logEvents(user)\n+                    .subscribeOn(ioThreadScheduler)\n+                    .observeOn(mainThreadScheduler)\n+                    .doOnNext(mwQueryLogEvent -> Timber.d(\"Received image %s\", mwQueryLogEvent.title()))\n+                    .filter(mwQueryLogEvent -> !mwQueryLogEvent.isDeleted()).doOnNext(mwQueryLogEvent -> Timber.d(\"Image %s passed filters\", mwQueryLogEvent.title()))\n+                    .map(image -> {\n+                        Contribution contribution = new Contribution(null, null, image.title(),\n+                                \"\", -1, image.date(), image.date(), user,\n+                                \"\", \"\", STATE_COMPLETED);\n+                        return contribution;\n+                    })\n+                    .toList()\n+                    .subscribe(this::saveContributionsToDB, error -> {\n+                        Timber.e(\"Failed to fetch contributions: %s\", error.getMessage());\n+                    }));\n+        }\n     }\n \n-    @Override\n-    public void onLoadFinished(@NonNull Loader<Cursor> loader, Cursor cursor) {\n+    private void showContributions(List<Contribution> contributions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "originalPosition": 150}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDMwMDE2", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-368030016", "createdAt": "2020-03-03T14:36:24Z", "commit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDozNjoyNVrOFxISvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDozNjoyNVrOFxISvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA2MDQxMg==", "bodyText": "if contributions ever was null this code guarantees an NPE. \"If contributions is null and is empty\"\nAlso avoid .size==0 checks, .isEmpty() is there to be used.", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387060412", "createdAt": "2020-03-03T14:36:25Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsPresenter.java", "diffHunk": "@@ -3,104 +3,155 @@\n import android.content.Context;\n import android.database.Cursor;\n import android.database.DataSetObserver;\n-import android.os.Bundle;\n+import android.text.TextUtils;\n+import android.util.Log;\n \n-import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n-import androidx.loader.content.CursorLoader;\n-import androidx.loader.content.Loader;\n+import androidx.lifecycle.LifecycleOwner;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.Observer;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n \n import javax.inject.Inject;\n+import javax.inject.Named;\n \n+import fr.free.nrw.commons.CommonsApplication;\n import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.auth.SessionManager;\n import fr.free.nrw.commons.contributions.ContributionsContract.UserActionListener;\n+import fr.free.nrw.commons.db.AppDatabase;\n+import fr.free.nrw.commons.di.CommonsApplicationModule;\n+import fr.free.nrw.commons.mwapi.UserClient;\n+import fr.free.nrw.commons.utils.ExecutorUtils;\n+import fr.free.nrw.commons.utils.NetworkUtils;\n+import io.reactivex.Observable;\n+import io.reactivex.Scheduler;\n+import io.reactivex.SingleObserver;\n+import io.reactivex.android.schedulers.AndroidSchedulers;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.schedulers.Schedulers;\n import timber.log.Timber;\n \n-import static fr.free.nrw.commons.contributions.ContributionDao.Table.ALL_FIELDS;\n-import static fr.free.nrw.commons.contributions.ContributionsContentProvider.BASE_URI;\n-import static fr.free.nrw.commons.settings.Prefs.UPLOADS_SHOWING;\n+import static fr.free.nrw.commons.contributions.Contribution.STATE_COMPLETED;\n \n /**\n  * The presenter class for Contributions\n  */\n-public class ContributionsPresenter extends DataSetObserver implements UserActionListener {\n+public class ContributionsPresenter implements UserActionListener {\n \n     private final ContributionsRepository repository;\n+    private final Scheduler mainThreadScheduler;\n+    private final Scheduler ioThreadScheduler;\n+    private CompositeDisposable compositeDisposable;\n     private ContributionsContract.View view;\n-    private Cursor cursor;\n+    private List<Contribution> contributionList=new ArrayList<>();\n \n     @Inject\n     Context context;\n \n     @Inject\n-    ContributionsPresenter(ContributionsRepository repository) {\n+    UserClient userClient;\n+\n+    @Inject\n+    AppDatabase appDatabase;\n+\n+    @Inject\n+    SessionManager sessionManager;\n+    private LifecycleOwner lifeCycleOwner;\n+\n+    @Inject\n+    ContributionsPresenter(ContributionsRepository repository, @Named(CommonsApplicationModule.MAIN_THREAD) Scheduler mainThreadScheduler,@Named(CommonsApplicationModule.IO_THREAD) Scheduler ioThreadScheduler) {\n         this.repository = repository;\n+        compositeDisposable=new CompositeDisposable();\n+        this.mainThreadScheduler=mainThreadScheduler;\n+        this.ioThreadScheduler=ioThreadScheduler;\n     }\n \n+    private String user;\n+\n     @Override\n     public void onAttachView(ContributionsContract.View view) {\n         this.view = view;\n-        if (null != cursor) {\n-            try {\n-                cursor.registerDataSetObserver(this);\n-            } catch (IllegalStateException e) {//Cursor might be already registered\n-                Timber.d(e);\n-            }\n-        }\n+        compositeDisposable=new CompositeDisposable();\n     }\n \n-    @Override\n-    public void onDetachView() {\n-        this.view = null;\n-        if (null != cursor) {\n-            try {\n-                cursor.unregisterDataSetObserver(this);\n-            } catch (Exception e) {//Cursor might not be already registered\n-                Timber.d(e);\n-            }\n-        }\n+    public void setLifeCycleOwner(LifecycleOwner lifeCycleOwner){\n+        this.lifeCycleOwner=lifeCycleOwner;\n     }\n \n-    @NonNull\n-    @Override\n-    public Loader<Cursor> onCreateLoader(int id, @Nullable Bundle args) {\n-        int preferredNumberOfUploads = repository.get(UPLOADS_SHOWING);\n-        return new CursorLoader(context, BASE_URI,\n-                ALL_FIELDS, \"\", null,\n-                ContributionDao.CONTRIBUTION_SORT + \"LIMIT \"\n-                        + (preferredNumberOfUploads>0?preferredNumberOfUploads:100));\n+    public void fetchContributions() {\n+        Timber.d(\"fetch  Contributions\");\n+        LiveData<List<Contribution>> liveDataContributions = repository.fetchContributions();\n+        if(null!=lifeCycleOwner) {\n+             liveDataContributions.observe(lifeCycleOwner, this::showContributions);\n+        }\n+\n+        if (NetworkUtils.isInternetConnectionEstablished(CommonsApplication.getInstance()) && shouldFetchContributions()) {\n+            Timber.d(\"fetching contributions: \");\n+            view.showProgress(true);\n+            this.user = sessionManager.getUserName();\n+            view.showContributions(null);\n+            compositeDisposable.add(userClient.logEvents(user)\n+                    .subscribeOn(ioThreadScheduler)\n+                    .observeOn(mainThreadScheduler)\n+                    .doOnNext(mwQueryLogEvent -> Timber.d(\"Received image %s\", mwQueryLogEvent.title()))\n+                    .filter(mwQueryLogEvent -> !mwQueryLogEvent.isDeleted()).doOnNext(mwQueryLogEvent -> Timber.d(\"Image %s passed filters\", mwQueryLogEvent.title()))\n+                    .map(image -> {\n+                        Contribution contribution = new Contribution(null, null, image.title(),\n+                                \"\", -1, image.date(), image.date(), user,\n+                                \"\", \"\", STATE_COMPLETED);\n+                        return contribution;\n+                    })\n+                    .toList()\n+                    .subscribe(this::saveContributionsToDB, error -> {\n+                        Timber.e(\"Failed to fetch contributions: %s\", error.getMessage());\n+                    }));\n+        }\n     }\n \n-    @Override\n-    public void onLoadFinished(@NonNull Loader<Cursor> loader, Cursor cursor) {\n+    private void showContributions(List<Contribution> contributions) {\n         view.showProgress(false);\n-        if (null != cursor && cursor.getCount() > 0) {\n+        if(!(contributions==null && contributions.size()==0)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "originalPosition": 153}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDMxNjM5", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-368031639", "createdAt": "2020-03-03T14:38:19Z", "commit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDozODoxOVrOFxIXdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDozODoxOVrOFxIXdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA2MTYyMw==", "bodyText": "I don't think we need to observe on any particular thread", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387061623", "createdAt": "2020-03-03T14:38:19Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsPresenter.java", "diffHunk": "@@ -109,75 +160,24 @@ public Contribution getContributionsFromCursor(Cursor cursor) {\n      */\n     @Override\n     public void deleteUpload(Contribution contribution) {\n-        repository.deleteContributionFromDB(contribution);\n+        compositeDisposable.add(repository.deleteContributionFromDB(contribution)\n+        .observeOn(mainThreadScheduler)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "originalPosition": 214}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDM0NzE2", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-368034716", "createdAt": "2020-03-03T14:41:50Z", "commit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDo0MTo1MFrOFxIhRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDo0MTo1MFrOFxIhRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA2NDEzNA==", "bodyText": "So all our existing users Contributions data - on upgrade - will remain on disk forever?", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387064134", "createdAt": "2020-03-03T14:41:50Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/CommonsApplication.java", "diffHunk": "@@ -306,7 +309,7 @@ private void updateAllDatabases() {\n         SQLiteDatabase db = dbOpenHelper.getWritableDatabase();\n \n         CategoryDao.Table.onDelete(db);\n-        ContributionDao.Table.onDelete(db);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDQwMjM2", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-368040236", "createdAt": "2020-03-03T14:47:52Z", "commit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDo0Nzo1MlrOFxI0aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDo0Nzo1MlrOFxI0aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA2OTAzMg==", "bodyText": "Just inject ContributionDao, testing will be a little bit more annoying if there is some indirection with the object's dependencies", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387069032", "createdAt": "2020-03-03T14:47:52Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsLocalDataSource.java", "diffHunk": "@@ -1,49 +1,80 @@\n package fr.free.nrw.commons.contributions;\n \n-import android.database.Cursor;\n+import android.app.job.JobScheduler;\n+import android.text.TextUtils;\n+\n+import androidx.lifecycle.LiveData;\n+\n+import java.util.List;\n \n import javax.inject.Inject;\n import javax.inject.Named;\n \n+import fr.free.nrw.commons.db.AppDatabase;\n import fr.free.nrw.commons.kvstore.JsonKvStore;\n+import io.reactivex.Single;\n \n /**\n  * The LocalDataSource class for Contributions\n  */\n class ContributionsLocalDataSource {\n \n-    private final ContributionDao contributionsDao;\n+    private final ContributionDao contributionDao;\n     private final JsonKvStore defaultKVStore;\n \n     @Inject\n     public ContributionsLocalDataSource(\n             @Named(\"default_preferences\") JsonKvStore defaultKVStore,\n-            ContributionDao contributionDao) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDQzNDg0", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-368043484", "createdAt": "2020-03-03T14:51:30Z", "commit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDo1MTozMFrOFxI-bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDo1MTozMFrOFxI-bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3MTU5OA==", "bodyText": "contributionList can never be null", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387071598", "createdAt": "2020-03-03T14:51:30Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsPresenter.java", "diffHunk": "@@ -109,75 +160,24 @@ public Contribution getContributionsFromCursor(Cursor cursor) {\n      */\n     @Override\n     public void deleteUpload(Contribution contribution) {\n-        repository.deleteContributionFromDB(contribution);\n+        compositeDisposable.add(repository.deleteContributionFromDB(contribution)\n+        .observeOn(mainThreadScheduler)\n+        .subscribeOn(ioThreadScheduler)\n+        .subscribe());\n     }\n \n     /**\n      * Returns a contribution at the specified cursor position\n+     *\n      * @param i\n      * @return\n      */\n     @Nullable\n     @Override\n     public Media getItemAtPosition(int i) {\n-        if (null != cursor && cursor.moveToPosition(i)) {\n-            return getContributionsFromCursor(cursor);\n-        }\n-        return null;\n-    }\n-\n-    /**\n-     * Get contribution position  with id\n-     */\n-    public int getChildPositionWithId(String id) {\n-        int position = 0;\n-        cursor.moveToFirst();\n-        while (null != cursor && cursor.moveToNext()) {\n-            if (getContributionsFromCursor(cursor).getContentUri().getLastPathSegment()\n-                    .equals(id)) {\n-                position = cursor.getPosition();\n-                break;\n-            }\n-        }\n-        return position;\n-    }\n-\n-    @Override\n-    public void onChanged() {\n-        super.onChanged();\n-        view.onDataSetChanged();\n-    }\n-\n-    @Override\n-    public void onInvalidated() {\n-        super.onInvalidated();\n-        //Not letting the view know of this as of now, TODO discuss how to handle this and maybe show a proper ui for this\n-    }\n-\n-    /**\n-     * Swap in a new Cursor, returning the old Cursor. The returned old Cursor is <em>not</em>\n-     * closed.\n-     *\n-     * @param newCursor The new cursor to be used.\n-     * @return Returns the previously set Cursor, or null if there was not one. If the given new\n-     * Cursor is the same instance is the previously set Cursor, null is also returned.\n-     */\n-    private void swapCursor(Cursor newCursor) {\n-        try {\n-            if (newCursor == cursor) {\n-                return;\n-            }\n-            Cursor oldCursor = cursor;\n-            if (oldCursor != null) {\n-                oldCursor.unregisterDataSetObserver(this);\n-            }\n-            cursor = newCursor;\n-            if (newCursor != null) {\n-                newCursor.registerDataSetObserver(this);\n-            }\n-            view.onDataSetChanged();\n-        } catch (IllegalStateException e) {//Cursor might [not] be already registered/unregistered\n-            Timber.e(e);\n+        if (i == -1 || contributionList == null || contributionList.size() < i+1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "originalPosition": 286}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDQ4NDIw", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-368048420", "createdAt": "2020-03-03T14:57:03Z", "commit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDo1NzowNFrOFxJNwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDo1NzowNFrOFxJNwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3NTUyMA==", "bodyText": "/**\n     * Gson objects are very heavy. The app should ideally be using just one instance of it instead of creating new instances everywhere.\n     * @return returns a singleton Gson instance\n     */\n    @Provides\n    @Singleton\n    public Gson provideGson() {\n        return GsonUtil.getDefaultGson();\n    }\n\nIt would be handy if we could not create Gsons here though I don't know how this class is instantiated by room", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387075520", "createdAt": "2020-03-03T14:57:04Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/db/Converters.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package fr.free.nrw.commons.db;\n+\n+import android.net.Uri;\n+\n+import androidx.room.TypeConverter;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+\n+import fr.free.nrw.commons.location.LatLng;\n+\n+public class Converters {\n+    @TypeConverter\n+    public static Date fromTimestamp(Long value) {\n+        return value == null ? null : new Date(value);\n+    }\n+\n+    @TypeConverter\n+    public static Long dateToTimestamp(Date date) {\n+        return date == null ? null : date.getTime();\n+    }\n+\n+    @TypeConverter\n+    public static Uri fromString(String value) {\n+        return value == null ? null : Uri.parse(value);\n+    }\n+\n+    @TypeConverter\n+    public static String uriToString(Uri uri) {\n+        return uri == null ? null : uri.toString();\n+    }\n+\n+    @TypeConverter\n+    public static String listObjectToString(ArrayList<String> objectList) {\n+        return objectList == null ? null : new Gson().toJson(objectList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDUwMTc2", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-368050176", "createdAt": "2020-03-03T14:59:05Z", "commit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDo1OTowNVrOFxJTeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDo1OTowNVrOFxJTeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3Njk4NQ==", "bodyText": "This should be  @Singelton", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387076985", "createdAt": "2020-03-03T14:59:05Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/di/CommonsApplicationModule.java", "diffHunk": "@@ -229,4 +231,9 @@ public String provideLoggedInUsername() {\n     public QuadTree providesQuadTres() {\n         return new QuadTree<>(-180, -90, +180, +90);\n     }\n+\n+    @Provides", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDUxMDc3", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-368051077", "createdAt": "2020-03-03T15:00:05Z", "commit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTowMDowNVrOFxJWKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTowMDowNVrOFxJWKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3NzY3Mw==", "bodyText": "Not using Singles here?", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387077673", "createdAt": "2020-03-03T15:00:05Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/upload/UploadService.java", "diffHunk": "@@ -105,7 +106,7 @@ public void onProgress(long transferred, long total) {\n             notificationManager.notify(notificationTag, NOTIFICATION_UPLOAD_IN_PROGRESS, curNotification.build());\n \n             contribution.setTransferred(transferred);\n-            contributionDao.save(contribution);\n+            ExecutorUtils.get().submit(() -> appDatabase.getContributionDao().save(contribution));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDUyMzQx", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-368052341", "createdAt": "2020-03-03T15:01:27Z", "commit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTowMToyN1rOFxJaCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTowMToyN1rOFxJaCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3ODY2Ng==", "bodyText": "use whenever from mockito-android instead of this workaround for avoiding the kotlin keyword when", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387078666", "createdAt": "2020-03-03T15:01:27Z", "author": {"login": "macgills"}, "path": "app/src/test/kotlin/fr/free/nrw/commons/contributions/ContributionsPresenterTest.kt", "diffHunk": "@@ -27,84 +37,58 @@ class ContributionsPresenterTest {\n \n     lateinit var loader: Loader<Cursor>\n \n+    lateinit var liveData: LiveData<List<Contribution>>\n+\n+    @Rule @JvmField var instantTaskExecutorRule = InstantTaskExecutorRule()\n+\n+    lateinit var scheduler : Scheduler\n+\n     /**\n      * initial setup\n      */\n     @Before\n     @Throws(Exception::class)\n     fun setUp() {\n         MockitoAnnotations.initMocks(this)\n+        scheduler=TestScheduler()\n         cursor = Mockito.mock(Cursor::class.java)\n         contribution = Mockito.mock(Contribution::class.java)\n-        contributionsPresenter = ContributionsPresenter(repository)\n+        contributionsPresenter = ContributionsPresenter(repository,scheduler,scheduler)\n         loader = Mockito.mock(CursorLoader::class.java)\n         contributionsPresenter?.onAttachView(view)\n+        liveData=MutableLiveData()\n     }\n \n-\n     /**\n-     * Test presenter actions onGetContributionFromCursor\n+     * Test fetch contributions\n      */\n     @Test\n-    fun testGetContributionFromCursor() {\n-        contributionsPresenter?.getContributionsFromCursor(cursor)\n-        verify(repository)?.getContributionFromCursor(cursor)\n+    fun testFetchContributions(){\n+        Mockito.`when`(repository?.getString(ArgumentMatchers.anyString())).thenReturn(\"10\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDU0NTU0", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-368054554", "createdAt": "2020-03-03T15:03:56Z", "commit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTowMzo1N1rOFxJgzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTowMzo1N1rOFxJgzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4MDM5Ng==", "bodyText": "Why is contributionsPresenter & repository nullable? Fix that if you could.", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387080396", "createdAt": "2020-03-03T15:03:57Z", "author": {"login": "macgills"}, "path": "app/src/test/kotlin/fr/free/nrw/commons/contributions/ContributionsPresenterTest.kt", "diffHunk": "@@ -27,84 +37,58 @@ class ContributionsPresenterTest {\n \n     lateinit var loader: Loader<Cursor>\n \n+    lateinit var liveData: LiveData<List<Contribution>>\n+\n+    @Rule @JvmField var instantTaskExecutorRule = InstantTaskExecutorRule()\n+\n+    lateinit var scheduler : Scheduler\n+\n     /**\n      * initial setup\n      */\n     @Before\n     @Throws(Exception::class)\n     fun setUp() {\n         MockitoAnnotations.initMocks(this)\n+        scheduler=TestScheduler()\n         cursor = Mockito.mock(Cursor::class.java)\n         contribution = Mockito.mock(Contribution::class.java)\n-        contributionsPresenter = ContributionsPresenter(repository)\n+        contributionsPresenter = ContributionsPresenter(repository,scheduler,scheduler)\n         loader = Mockito.mock(CursorLoader::class.java)\n         contributionsPresenter?.onAttachView(view)\n+        liveData=MutableLiveData()\n     }\n \n-\n     /**\n-     * Test presenter actions onGetContributionFromCursor\n+     * Test fetch contributions\n      */\n     @Test\n-    fun testGetContributionFromCursor() {\n-        contributionsPresenter?.getContributionsFromCursor(cursor)\n-        verify(repository)?.getContributionFromCursor(cursor)\n+    fun testFetchContributions(){\n+        Mockito.`when`(repository?.getString(ArgumentMatchers.anyString())).thenReturn(\"10\")\n+        Mockito.`when`(repository?.fetchContributions()).thenReturn(liveData)\n+        contributionsPresenter?.fetchContributions()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDY3MjMy", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-368067232", "createdAt": "2020-03-03T15:18:26Z", "commit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToxODoyN1rOFxKHyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToxODoyN1rOFxKHyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5MDM3OA==", "bodyText": "This test barely covers this method and the coverage overall of the class is far from full , no view interactions, deleteUpload or getItemAtPosition", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387090378", "createdAt": "2020-03-03T15:18:27Z", "author": {"login": "macgills"}, "path": "app/src/test/kotlin/fr/free/nrw/commons/contributions/ContributionsPresenterTest.kt", "diffHunk": "@@ -27,84 +37,58 @@ class ContributionsPresenterTest {\n \n     lateinit var loader: Loader<Cursor>\n \n+    lateinit var liveData: LiveData<List<Contribution>>\n+\n+    @Rule @JvmField var instantTaskExecutorRule = InstantTaskExecutorRule()\n+\n+    lateinit var scheduler : Scheduler\n+\n     /**\n      * initial setup\n      */\n     @Before\n     @Throws(Exception::class)\n     fun setUp() {\n         MockitoAnnotations.initMocks(this)\n+        scheduler=TestScheduler()\n         cursor = Mockito.mock(Cursor::class.java)\n         contribution = Mockito.mock(Contribution::class.java)\n-        contributionsPresenter = ContributionsPresenter(repository)\n+        contributionsPresenter = ContributionsPresenter(repository,scheduler,scheduler)\n         loader = Mockito.mock(CursorLoader::class.java)\n         contributionsPresenter?.onAttachView(view)\n+        liveData=MutableLiveData()\n     }\n \n-\n     /**\n-     * Test presenter actions onGetContributionFromCursor\n+     * Test fetch contributions\n      */\n     @Test\n-    fun testGetContributionFromCursor() {\n-        contributionsPresenter?.getContributionsFromCursor(cursor)\n-        verify(repository)?.getContributionFromCursor(cursor)\n+    fun testFetchContributions(){\n+        Mockito.`when`(repository?.getString(ArgumentMatchers.anyString())).thenReturn(\"10\")\n+        Mockito.`when`(repository?.fetchContributions()).thenReturn(liveData)\n+        contributionsPresenter?.fetchContributions()\n+        verify(repository)?.fetchContributions()\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDcyMDQy", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-368072042", "createdAt": "2020-03-03T15:23:45Z", "commit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToyMzo0NlrOFxKW5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToyMzo0NlrOFxKW5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5NDI0NQ==", "bodyText": "mocks should not have their fields assigned. Also I don't believe val media could be nullable", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387094245", "createdAt": "2020-03-03T15:23:46Z", "author": {"login": "macgills"}, "path": "app/src/test/kotlin/fr/free/nrw/commons/delete/ReasonBuilderTest.kt", "diffHunk": "@@ -56,7 +56,7 @@ class ReasonBuilderTest {\n                 .thenReturn(Single.just(mock(FeedbackResponse::class.java)))\n \n         val media = mock(Media::class.java)\n-        `when`(media!!.dateUploaded).thenReturn(Date())\n+        media?.dateUploaded=Date()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDczNjQ2", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-368073646", "createdAt": "2020-03-03T15:25:32Z", "commit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToyNTozM1rOFxKcKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToyNTozM1rOFxKcKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5NTU5NA==", "bodyText": "There is no need for the field", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387095594", "createdAt": "2020-03-03T15:25:33Z", "author": {"login": "macgills"}, "path": "app/src/test/kotlin/fr/free/nrw/commons/review/ReviewHelperTest.kt", "diffHunk": "@@ -32,6 +32,8 @@ class ReviewHelperTest {\n     @InjectMocks\n     var reviewHelper: ReviewHelper? = null\n \n+    lateinit var media: Media", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52c086f20ddd855e3765da52d7ed1f1b5736a89b", "author": {"user": {"login": "ashishkumar468", "name": "Ashish"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/52c086f20ddd855e3765da52d7ed1f1b5736a89b", "committedDate": "2020-03-04T05:12:55Z", "message": "BugFixes\n* Make AppDataBase Singleton\n* Set _id as autogenerate primary key [replacing the previously used filename, seems like they are not unique]\n* Replace Execxutor Utils with Subscribers on Singles in UploadService\n* BugFix, Upload Progress"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adaa33c8881b5a8f01155f1e4bbe97a21a129e70", "author": {"user": {"login": "ashishkumar468", "name": "Ashish"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/adaa33c8881b5a8f01155f1e4bbe97a21a129e70", "committedDate": "2020-03-04T17:53:55Z", "message": "Remove un-nescessary null check on contributions in ContributionsListAdapter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c34720099d3cc5538bab628252089de0b19db5a5", "author": {"user": {"login": "ashishkumar468", "name": "Ashish"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/c34720099d3cc5538bab628252089de0b19db5a5", "committedDate": "2020-03-04T17:55:14Z", "message": "removed ContributionsListFragment [not-implemeted]"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adb6d70c6901eef08c52b99f82b15d874df1aced", "author": {"user": {"login": "ashishkumar468", "name": "Ashish"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/adb6d70c6901eef08c52b99f82b15d874df1aced", "committedDate": "2020-03-04T18:30:53Z", "message": "Review suggested changes\n* removed un-nescessary null checks\n* provide ContributionsDao\n* Minor bug fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e33730404930b56e37fb96b1dbc1ddd9a1af138", "author": {"user": {"login": "ashishkumar468", "name": "Ashish"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/8e33730404930b56e37fb96b1dbc1ddd9a1af138", "committedDate": "2020-03-04T18:45:32Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d9189573c64dad1eccd80b215b92da4aee7a1e7", "author": {"user": {"login": "ashishkumar468", "name": "Ashish"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/3d9189573c64dad1eccd80b215b92da4aee7a1e7", "committedDate": "2020-03-04T18:58:08Z", "message": "delete existing contributions table (from the existing db) on upgrade"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d87140277d443847ece267f307a391aca88f0de", "author": {"user": {"login": "ashishkumar468", "name": "Ashish"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/0d87140277d443847ece267f307a391aca88f0de", "committedDate": "2020-03-04T19:15:24Z", "message": "remove un-nescessary null checks in test classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3081989f322ee0f9e76989deebaa943d4fbcd512", "author": {"user": {"login": "ashishkumar468", "name": "Ashish"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/3081989f322ee0f9e76989deebaa943d4fbcd512", "committedDate": "2020-03-04T19:17:25Z", "message": "shifted media to be a local variable in ReviewHelperTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c4c783a6dc7e831d93caa7169a88032b1f98781", "author": {"user": {"login": "ashishkumar468", "name": "Ashish"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/0c4c783a6dc7e831d93caa7169a88032b1f98781", "committedDate": "2020-03-04T19:18:14Z", "message": "removed captured folder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2985b1c2b519e1a298d88e16f8e7172791e1eef1", "author": {"user": {"login": "ashishkumar468", "name": "Ashish"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/2985b1c2b519e1a298d88e16f8e7172791e1eef1", "committedDate": "2020-03-05T04:32:11Z", "message": "Dispose composite disposables in UploadService"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NDI5OTA5", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-369429909", "createdAt": "2020-03-05T09:54:34Z", "commit": {"oid": "2985b1c2b519e1a298d88e16f8e7172791e1eef1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTo1NDozNFrOFyM-HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTo1NDozNFrOFyM-HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4NTYyOQ==", "bodyText": "This is assigned but never read, can be deleted", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r388185629", "createdAt": "2020-03-05T09:54:34Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListFragment.java", "diffHunk": "@@ -72,6 +75,7 @@\n     private String lastVisibleItemID;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2985b1c2b519e1a298d88e16f8e7172791e1eef1"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NDM1MzI1", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-369435325", "createdAt": "2020-03-05T10:01:47Z", "commit": {"oid": "2985b1c2b519e1a298d88e16f8e7172791e1eef1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDowMTo0OFrOFyNPIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDowMTo0OFrOFyNPIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4OTk4NA==", "bodyText": "you could just delete all entries in the DB here, that is functionally what you want to happen right? And then the livedata will emit the empty list for you. Hmmm no we are banking too much on that web request being successful.\nActually the more I think about this the weirder it is, \"show nothing because we are loading\" was this how it worked previously?", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r388189984", "createdAt": "2020-03-05T10:01:48Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsPresenter.java", "diffHunk": "@@ -3,104 +3,156 @@\n import android.content.Context;\n import android.database.Cursor;\n import android.database.DataSetObserver;\n-import android.os.Bundle;\n+import android.text.TextUtils;\n+import android.util.Log;\n \n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n-import androidx.loader.content.CursorLoader;\n-import androidx.loader.content.Loader;\n+import androidx.lifecycle.LifecycleOwner;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.Observer;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n \n import javax.inject.Inject;\n+import javax.inject.Named;\n \n+import fr.free.nrw.commons.CommonsApplication;\n import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.auth.SessionManager;\n import fr.free.nrw.commons.contributions.ContributionsContract.UserActionListener;\n+import fr.free.nrw.commons.db.AppDatabase;\n+import fr.free.nrw.commons.di.CommonsApplicationModule;\n+import fr.free.nrw.commons.mwapi.UserClient;\n+import fr.free.nrw.commons.utils.ExecutorUtils;\n+import fr.free.nrw.commons.utils.NetworkUtils;\n+import io.reactivex.Observable;\n+import io.reactivex.Scheduler;\n+import io.reactivex.SingleObserver;\n+import io.reactivex.android.schedulers.AndroidSchedulers;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.schedulers.Schedulers;\n import timber.log.Timber;\n \n-import static fr.free.nrw.commons.contributions.ContributionDao.Table.ALL_FIELDS;\n-import static fr.free.nrw.commons.contributions.ContributionsContentProvider.BASE_URI;\n-import static fr.free.nrw.commons.settings.Prefs.UPLOADS_SHOWING;\n+import static fr.free.nrw.commons.contributions.Contribution.STATE_COMPLETED;\n \n /**\n  * The presenter class for Contributions\n  */\n-public class ContributionsPresenter extends DataSetObserver implements UserActionListener {\n+public class ContributionsPresenter implements UserActionListener {\n \n     private final ContributionsRepository repository;\n+    private final Scheduler mainThreadScheduler;\n+    private final Scheduler ioThreadScheduler;\n+    private CompositeDisposable compositeDisposable;\n     private ContributionsContract.View view;\n-    private Cursor cursor;\n+    private List<Contribution> contributionList=new ArrayList<>();\n \n     @Inject\n     Context context;\n \n     @Inject\n-    ContributionsPresenter(ContributionsRepository repository) {\n+    UserClient userClient;\n+\n+    @Inject\n+    AppDatabase appDatabase;\n+\n+    @Inject\n+    SessionManager sessionManager;\n+    private LifecycleOwner lifeCycleOwner;\n+\n+    @Inject\n+    ContributionsPresenter(ContributionsRepository repository, @Named(CommonsApplicationModule.MAIN_THREAD) Scheduler mainThreadScheduler,@Named(CommonsApplicationModule.IO_THREAD) Scheduler ioThreadScheduler) {\n         this.repository = repository;\n+        this.mainThreadScheduler=mainThreadScheduler;\n+        this.ioThreadScheduler=ioThreadScheduler;\n     }\n \n+    private String user;\n+\n     @Override\n     public void onAttachView(ContributionsContract.View view) {\n         this.view = view;\n-        if (null != cursor) {\n-            try {\n-                cursor.registerDataSetObserver(this);\n-            } catch (IllegalStateException e) {//Cursor might be already registered\n-                Timber.d(e);\n-            }\n-        }\n+        compositeDisposable=new CompositeDisposable();\n     }\n \n-    @Override\n-    public void onDetachView() {\n-        this.view = null;\n-        if (null != cursor) {\n-            try {\n-                cursor.unregisterDataSetObserver(this);\n-            } catch (Exception e) {//Cursor might not be already registered\n-                Timber.d(e);\n-            }\n-        }\n+    public void setLifeCycleOwner(LifecycleOwner lifeCycleOwner){\n+        this.lifeCycleOwner=lifeCycleOwner;\n     }\n \n-    @NonNull\n-    @Override\n-    public Loader<Cursor> onCreateLoader(int id, @Nullable Bundle args) {\n-        int preferredNumberOfUploads = repository.get(UPLOADS_SHOWING);\n-        return new CursorLoader(context, BASE_URI,\n-                ALL_FIELDS, \"\", null,\n-                ContributionDao.CONTRIBUTION_SORT + \"LIMIT \"\n-                        + (preferredNumberOfUploads>0?preferredNumberOfUploads:100));\n+    public void fetchContributions() {\n+        Timber.d(\"fetch  Contributions\");\n+        LiveData<List<Contribution>> liveDataContributions = repository.fetchContributions();\n+        if(null!=lifeCycleOwner) {\n+             liveDataContributions.observe(lifeCycleOwner, this::showContributions);\n+        }\n+\n+        if (NetworkUtils.isInternetConnectionEstablished(CommonsApplication.getInstance()) && shouldFetchContributions()) {\n+            Timber.d(\"fetching contributions: \");\n+            view.showProgress(true);\n+            this.user = sessionManager.getUserName();\n+            view.showContributions(Collections.emptyList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2985b1c2b519e1a298d88e16f8e7172791e1eef1"}, "originalPosition": 129}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NDM1NjQ3", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-369435647", "createdAt": "2020-03-05T10:02:15Z", "commit": {"oid": "2985b1c2b519e1a298d88e16f8e7172791e1eef1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDowMjoxNVrOFyNQGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDowMjoxNVrOFyNQGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5MDIzMg==", "bodyText": "isEmpty", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r388190232", "createdAt": "2020-03-05T10:02:15Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsPresenter.java", "diffHunk": "@@ -3,104 +3,156 @@\n import android.content.Context;\n import android.database.Cursor;\n import android.database.DataSetObserver;\n-import android.os.Bundle;\n+import android.text.TextUtils;\n+import android.util.Log;\n \n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n-import androidx.loader.content.CursorLoader;\n-import androidx.loader.content.Loader;\n+import androidx.lifecycle.LifecycleOwner;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.Observer;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n \n import javax.inject.Inject;\n+import javax.inject.Named;\n \n+import fr.free.nrw.commons.CommonsApplication;\n import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.auth.SessionManager;\n import fr.free.nrw.commons.contributions.ContributionsContract.UserActionListener;\n+import fr.free.nrw.commons.db.AppDatabase;\n+import fr.free.nrw.commons.di.CommonsApplicationModule;\n+import fr.free.nrw.commons.mwapi.UserClient;\n+import fr.free.nrw.commons.utils.ExecutorUtils;\n+import fr.free.nrw.commons.utils.NetworkUtils;\n+import io.reactivex.Observable;\n+import io.reactivex.Scheduler;\n+import io.reactivex.SingleObserver;\n+import io.reactivex.android.schedulers.AndroidSchedulers;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.schedulers.Schedulers;\n import timber.log.Timber;\n \n-import static fr.free.nrw.commons.contributions.ContributionDao.Table.ALL_FIELDS;\n-import static fr.free.nrw.commons.contributions.ContributionsContentProvider.BASE_URI;\n-import static fr.free.nrw.commons.settings.Prefs.UPLOADS_SHOWING;\n+import static fr.free.nrw.commons.contributions.Contribution.STATE_COMPLETED;\n \n /**\n  * The presenter class for Contributions\n  */\n-public class ContributionsPresenter extends DataSetObserver implements UserActionListener {\n+public class ContributionsPresenter implements UserActionListener {\n \n     private final ContributionsRepository repository;\n+    private final Scheduler mainThreadScheduler;\n+    private final Scheduler ioThreadScheduler;\n+    private CompositeDisposable compositeDisposable;\n     private ContributionsContract.View view;\n-    private Cursor cursor;\n+    private List<Contribution> contributionList=new ArrayList<>();\n \n     @Inject\n     Context context;\n \n     @Inject\n-    ContributionsPresenter(ContributionsRepository repository) {\n+    UserClient userClient;\n+\n+    @Inject\n+    AppDatabase appDatabase;\n+\n+    @Inject\n+    SessionManager sessionManager;\n+    private LifecycleOwner lifeCycleOwner;\n+\n+    @Inject\n+    ContributionsPresenter(ContributionsRepository repository, @Named(CommonsApplicationModule.MAIN_THREAD) Scheduler mainThreadScheduler,@Named(CommonsApplicationModule.IO_THREAD) Scheduler ioThreadScheduler) {\n         this.repository = repository;\n+        this.mainThreadScheduler=mainThreadScheduler;\n+        this.ioThreadScheduler=ioThreadScheduler;\n     }\n \n+    private String user;\n+\n     @Override\n     public void onAttachView(ContributionsContract.View view) {\n         this.view = view;\n-        if (null != cursor) {\n-            try {\n-                cursor.registerDataSetObserver(this);\n-            } catch (IllegalStateException e) {//Cursor might be already registered\n-                Timber.d(e);\n-            }\n-        }\n+        compositeDisposable=new CompositeDisposable();\n     }\n \n-    @Override\n-    public void onDetachView() {\n-        this.view = null;\n-        if (null != cursor) {\n-            try {\n-                cursor.unregisterDataSetObserver(this);\n-            } catch (Exception e) {//Cursor might not be already registered\n-                Timber.d(e);\n-            }\n-        }\n+    public void setLifeCycleOwner(LifecycleOwner lifeCycleOwner){\n+        this.lifeCycleOwner=lifeCycleOwner;\n     }\n \n-    @NonNull\n-    @Override\n-    public Loader<Cursor> onCreateLoader(int id, @Nullable Bundle args) {\n-        int preferredNumberOfUploads = repository.get(UPLOADS_SHOWING);\n-        return new CursorLoader(context, BASE_URI,\n-                ALL_FIELDS, \"\", null,\n-                ContributionDao.CONTRIBUTION_SORT + \"LIMIT \"\n-                        + (preferredNumberOfUploads>0?preferredNumberOfUploads:100));\n+    public void fetchContributions() {\n+        Timber.d(\"fetch  Contributions\");\n+        LiveData<List<Contribution>> liveDataContributions = repository.fetchContributions();\n+        if(null!=lifeCycleOwner) {\n+             liveDataContributions.observe(lifeCycleOwner, this::showContributions);\n+        }\n+\n+        if (NetworkUtils.isInternetConnectionEstablished(CommonsApplication.getInstance()) && shouldFetchContributions()) {\n+            Timber.d(\"fetching contributions: \");\n+            view.showProgress(true);\n+            this.user = sessionManager.getUserName();\n+            view.showContributions(Collections.emptyList());\n+            compositeDisposable.add(userClient.logEvents(user)\n+                    .subscribeOn(ioThreadScheduler)\n+                    .observeOn(mainThreadScheduler)\n+                    .doOnNext(mwQueryLogEvent -> Timber.d(\"Received image %s\", mwQueryLogEvent.title()))\n+                    .filter(mwQueryLogEvent -> !mwQueryLogEvent.isDeleted()).doOnNext(mwQueryLogEvent -> Timber.d(\"Image %s passed filters\", mwQueryLogEvent.title()))\n+                    .map(image -> {\n+                        Contribution contribution = new Contribution(null, null, image.title(),\n+                                \"\", -1, image.date(), image.date(), user,\n+                                \"\", \"\", STATE_COMPLETED);\n+                        return contribution;\n+                    })\n+                    .toList()\n+                    .subscribe(this::saveContributionsToDB, error -> {\n+                        Timber.e(\"Failed to fetch contributions: %s\", error.getMessage());\n+                    }));\n+        }\n     }\n \n-    @Override\n-    public void onLoadFinished(@NonNull Loader<Cursor> loader, Cursor cursor) {\n+    private void showContributions(@NonNull List<Contribution> contributions) {\n         view.showProgress(false);\n-        if (null != cursor && cursor.getCount() > 0) {\n-            view.showWelcomeTip(false);\n-            view.showNoContributionsUI(false);\n-            view.setUploadCount(cursor.getCount());\n-        } else {\n+        if (contributions.size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2985b1c2b519e1a298d88e16f8e7172791e1eef1"}, "originalPosition": 157}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "faf9f4126f5472c6aa4cdaee84ad354f82d7985e", "author": {"user": {"login": "ashishkumar468", "name": "Ashish"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/faf9f4126f5472c6aa4cdaee84ad354f82d7985e", "committedDate": "2020-03-05T10:06:03Z", "message": "replaced size check with isEmpty ContributionsPresenter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NDM5ODgx", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-369439881", "createdAt": "2020-03-05T10:08:26Z", "commit": {"oid": "2985b1c2b519e1a298d88e16f8e7172791e1eef1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDowODoyNlrOFyNcfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDowODoyNlrOFyNcfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5MzQwNg==", "bodyText": "this could be a Single too, or a Completeable if you don't really care about the return value ehich you don't because it is void", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r388193406", "createdAt": "2020-03-05T10:08:26Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsPresenter.java", "diffHunk": "@@ -3,104 +3,156 @@\n import android.content.Context;\n import android.database.Cursor;\n import android.database.DataSetObserver;\n-import android.os.Bundle;\n+import android.text.TextUtils;\n+import android.util.Log;\n \n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n-import androidx.loader.content.CursorLoader;\n-import androidx.loader.content.Loader;\n+import androidx.lifecycle.LifecycleOwner;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.Observer;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n \n import javax.inject.Inject;\n+import javax.inject.Named;\n \n+import fr.free.nrw.commons.CommonsApplication;\n import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.auth.SessionManager;\n import fr.free.nrw.commons.contributions.ContributionsContract.UserActionListener;\n+import fr.free.nrw.commons.db.AppDatabase;\n+import fr.free.nrw.commons.di.CommonsApplicationModule;\n+import fr.free.nrw.commons.mwapi.UserClient;\n+import fr.free.nrw.commons.utils.ExecutorUtils;\n+import fr.free.nrw.commons.utils.NetworkUtils;\n+import io.reactivex.Observable;\n+import io.reactivex.Scheduler;\n+import io.reactivex.SingleObserver;\n+import io.reactivex.android.schedulers.AndroidSchedulers;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.schedulers.Schedulers;\n import timber.log.Timber;\n \n-import static fr.free.nrw.commons.contributions.ContributionDao.Table.ALL_FIELDS;\n-import static fr.free.nrw.commons.contributions.ContributionsContentProvider.BASE_URI;\n-import static fr.free.nrw.commons.settings.Prefs.UPLOADS_SHOWING;\n+import static fr.free.nrw.commons.contributions.Contribution.STATE_COMPLETED;\n \n /**\n  * The presenter class for Contributions\n  */\n-public class ContributionsPresenter extends DataSetObserver implements UserActionListener {\n+public class ContributionsPresenter implements UserActionListener {\n \n     private final ContributionsRepository repository;\n+    private final Scheduler mainThreadScheduler;\n+    private final Scheduler ioThreadScheduler;\n+    private CompositeDisposable compositeDisposable;\n     private ContributionsContract.View view;\n-    private Cursor cursor;\n+    private List<Contribution> contributionList=new ArrayList<>();\n \n     @Inject\n     Context context;\n \n     @Inject\n-    ContributionsPresenter(ContributionsRepository repository) {\n+    UserClient userClient;\n+\n+    @Inject\n+    AppDatabase appDatabase;\n+\n+    @Inject\n+    SessionManager sessionManager;\n+    private LifecycleOwner lifeCycleOwner;\n+\n+    @Inject\n+    ContributionsPresenter(ContributionsRepository repository, @Named(CommonsApplicationModule.MAIN_THREAD) Scheduler mainThreadScheduler,@Named(CommonsApplicationModule.IO_THREAD) Scheduler ioThreadScheduler) {\n         this.repository = repository;\n+        this.mainThreadScheduler=mainThreadScheduler;\n+        this.ioThreadScheduler=ioThreadScheduler;\n     }\n \n+    private String user;\n+\n     @Override\n     public void onAttachView(ContributionsContract.View view) {\n         this.view = view;\n-        if (null != cursor) {\n-            try {\n-                cursor.registerDataSetObserver(this);\n-            } catch (IllegalStateException e) {//Cursor might be already registered\n-                Timber.d(e);\n-            }\n-        }\n+        compositeDisposable=new CompositeDisposable();\n     }\n \n-    @Override\n-    public void onDetachView() {\n-        this.view = null;\n-        if (null != cursor) {\n-            try {\n-                cursor.unregisterDataSetObserver(this);\n-            } catch (Exception e) {//Cursor might not be already registered\n-                Timber.d(e);\n-            }\n-        }\n+    public void setLifeCycleOwner(LifecycleOwner lifeCycleOwner){\n+        this.lifeCycleOwner=lifeCycleOwner;\n     }\n \n-    @NonNull\n-    @Override\n-    public Loader<Cursor> onCreateLoader(int id, @Nullable Bundle args) {\n-        int preferredNumberOfUploads = repository.get(UPLOADS_SHOWING);\n-        return new CursorLoader(context, BASE_URI,\n-                ALL_FIELDS, \"\", null,\n-                ContributionDao.CONTRIBUTION_SORT + \"LIMIT \"\n-                        + (preferredNumberOfUploads>0?preferredNumberOfUploads:100));\n+    public void fetchContributions() {\n+        Timber.d(\"fetch  Contributions\");\n+        LiveData<List<Contribution>> liveDataContributions = repository.fetchContributions();\n+        if(null!=lifeCycleOwner) {\n+             liveDataContributions.observe(lifeCycleOwner, this::showContributions);\n+        }\n+\n+        if (NetworkUtils.isInternetConnectionEstablished(CommonsApplication.getInstance()) && shouldFetchContributions()) {\n+            Timber.d(\"fetching contributions: \");\n+            view.showProgress(true);\n+            this.user = sessionManager.getUserName();\n+            view.showContributions(Collections.emptyList());\n+            compositeDisposable.add(userClient.logEvents(user)\n+                    .subscribeOn(ioThreadScheduler)\n+                    .observeOn(mainThreadScheduler)\n+                    .doOnNext(mwQueryLogEvent -> Timber.d(\"Received image %s\", mwQueryLogEvent.title()))\n+                    .filter(mwQueryLogEvent -> !mwQueryLogEvent.isDeleted()).doOnNext(mwQueryLogEvent -> Timber.d(\"Image %s passed filters\", mwQueryLogEvent.title()))\n+                    .map(image -> {\n+                        Contribution contribution = new Contribution(null, null, image.title(),\n+                                \"\", -1, image.date(), image.date(), user,\n+                                \"\", \"\", STATE_COMPLETED);\n+                        return contribution;\n+                    })\n+                    .toList()\n+                    .subscribe(this::saveContributionsToDB, error -> {\n+                        Timber.e(\"Failed to fetch contributions: %s\", error.getMessage());\n+                    }));\n+        }\n     }\n \n-    @Override\n-    public void onLoadFinished(@NonNull Loader<Cursor> loader, Cursor cursor) {\n+    private void showContributions(@NonNull List<Contribution> contributions) {\n         view.showProgress(false);\n-        if (null != cursor && cursor.getCount() > 0) {\n-            view.showWelcomeTip(false);\n-            view.showNoContributionsUI(false);\n-            view.setUploadCount(cursor.getCount());\n-        } else {\n+        if (contributions.size() == 0) {\n             view.showWelcomeTip(true);\n             view.showNoContributionsUI(true);\n+        } else {\n+            view.showWelcomeTip(false);\n+            view.showNoContributionsUI(false);\n+            view.setUploadCount(contributions.size());\n+            view.showContributions(contributions);\n+            this.contributionList.clear();\n+            this.contributionList.addAll(contributions);\n+        }\n+    }\n+\n+    private void saveContributionsToDB(List<Contribution> contributions) {\n+        Timber.e(\"Fetched: \"+contributions.size()+\" contributions \"+\" saving to db\");\n+        ExecutorUtils.get().submit(() -> repository.save(contributions));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2985b1c2b519e1a298d88e16f8e7172791e1eef1"}, "originalPosition": 172}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NDQxNDMx", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-369441431", "createdAt": "2020-03-05T10:10:33Z", "commit": {"oid": "2985b1c2b519e1a298d88e16f8e7172791e1eef1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDoxMDozM1rOFyNhDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDoxMDozM1rOFyNhDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5NDU3NA==", "bodyText": "Can we retrieve our actual gson instance? I don't care if it has to be exposed on the component level", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r388194574", "createdAt": "2020-03-05T10:10:33Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/db/Converters.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package fr.free.nrw.commons.db;\n+\n+import android.net.Uri;\n+\n+import androidx.room.TypeConverter;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+\n+import fr.free.nrw.commons.location.LatLng;\n+\n+public class Converters {\n+    private static Gson gson;\n+    public static Gson getGson(){\n+        if(null==gson){\n+            gson=new Gson();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2985b1c2b519e1a298d88e16f8e7172791e1eef1"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NDQyMDMx", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-369442031", "createdAt": "2020-03-05T10:11:22Z", "commit": {"oid": "2985b1c2b519e1a298d88e16f8e7172791e1eef1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDoxMToyMlrOFyNi0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDoxMToyMlrOFyNi0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5NTAyNQ==", "bodyText": "put appDatabase in as a parameter, we don't need to hold onto it as a field", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r388195025", "createdAt": "2020-03-05T10:11:22Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/di/CommonsApplicationModule.java", "diffHunk": "@@ -229,4 +232,16 @@ public String provideLoggedInUsername() {\n     public QuadTree providesQuadTres() {\n         return new QuadTree<>(-180, -90, +180, +90);\n     }\n+\n+    @Provides\n+    @Singleton\n+    public AppDatabase provideAppDataBase() {\n+        appDatabase=Room.databaseBuilder(applicationContext, AppDatabase.class, \"commons_room.db\").build();\n+        return appDatabase;\n+    }\n+\n+    @Provides\n+    public ContributionDao providesContributiosDao() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2985b1c2b519e1a298d88e16f8e7172791e1eef1"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48c998b640e93130f0639feae3e926a09cc461ea", "author": {"user": {"login": "ashishkumar468", "name": "Ashish"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/48c998b640e93130f0639feae3e926a09cc461ea", "committedDate": "2020-03-05T10:26:12Z", "message": "transform saveContributions to a Completable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d484c1ca6d7add387bebf0b8279cf7796ad8f0c", "author": {"user": {"login": "ashishkumar468", "name": "Ashish"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/5d484c1ca6d7add387bebf0b8279cf7796ad8f0c", "committedDate": "2020-03-06T18:08:43Z", "message": "Addressed comments in review\n* Typo in Contributions\n* ReasonBuilderTest (create media object instead of mocking)\n* Use global Gson object instead of creating a new one in Converters"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMTE4NjQy", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-371118642", "createdAt": "2020-03-09T12:24:31Z", "commit": {"oid": "5d484c1ca6d7add387bebf0b8279cf7796ad8f0c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjoyNDozMVrOFzk7ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjoyNDozMVrOFzk7ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyNjc0Nw==", "bodyText": "I was hoping to see the use of the CommonsApplicationComponent. This has the same end result but is more brittle", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r389626747", "createdAt": "2020-03-09T12:24:31Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/db/Converters.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package fr.free.nrw.commons.db;\n+\n+import android.net.Uri;\n+\n+import androidx.room.TypeConverter;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+import org.wikipedia.json.GsonUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+\n+import fr.free.nrw.commons.location.LatLng;\n+\n+public class Converters {\n+    private static Gson gson= GsonUtil.getDefaultGson();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d484c1ca6d7add387bebf0b8279cf7796ad8f0c"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc4d76a44aa90f981c723df5a81bfbd8ae376092", "author": {"user": {"login": "ashishkumar468", "name": "Ashish"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/dc4d76a44aa90f981c723df5a81bfbd8ae376092", "committedDate": "2020-03-09T15:49:46Z", "message": "Provide Gson to Converters from the CommonsApplicationComponent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f1c82b3503370978fa4461b7f459fee82e5bf8a", "author": {"user": {"login": "ashishkumar468", "name": "Ashish"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/7f1c82b3503370978fa4461b7f459fee82e5bf8a", "committedDate": "2020-03-09T16:02:08Z", "message": "use static method instead of field instead of static field to provide GSON in Converters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1181a811c4a2b4c55a6e547aacf7e92da938a014", "author": {"user": {"login": "ashishkumar468", "name": "Ashish"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/1181a811c4a2b4c55a6e547aacf7e92da938a014", "committedDate": "2020-03-09T16:04:18Z", "message": "Modified gitignore to exclude captures/*"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNTMzMDI5", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#pullrequestreview-371533029", "createdAt": "2020-03-09T21:13:03Z", "commit": {"oid": "1181a811c4a2b4c55a6e547aacf7e92da938a014"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 471, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}