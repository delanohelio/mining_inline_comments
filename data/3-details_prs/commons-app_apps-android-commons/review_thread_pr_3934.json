{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwODQwNTMx", "number": 3934, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDowNjoyNlrOEnEBFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDowNjoyNlrOEnEBFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Mzk1NzMyOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/media/CustomOkHttpNetworkFetcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDowNjoyNlrOHXcqGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzozNTowOVrOHXlgYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0ODgyNQ==", "bodyText": "Could we get Javadocs for these methods please?", "url": "https://github.com/commons-app/apps-android-commons/pull/3934#discussion_r494348825", "createdAt": "2020-09-24T14:06:26Z", "author": {"login": "misaochan"}, "path": "app/src/main/java/fr/free/nrw/commons/media/CustomOkHttpNetworkFetcher.java", "diffHunk": "@@ -0,0 +1,229 @@\n+package fr.free.nrw.commons.media;\n+\n+import android.net.Uri;\n+import android.os.Looper;\n+import android.os.SystemClock;\n+import androidx.annotation.Nullable;\n+import com.facebook.imagepipeline.common.BytesRange;\n+import com.facebook.imagepipeline.image.EncodedImage;\n+import com.facebook.imagepipeline.producers.BaseNetworkFetcher;\n+import com.facebook.imagepipeline.producers.BaseProducerContextCallbacks;\n+import com.facebook.imagepipeline.producers.Consumer;\n+import com.facebook.imagepipeline.producers.FetchState;\n+import com.facebook.imagepipeline.producers.NetworkFetcher;\n+import com.facebook.imagepipeline.producers.ProducerContext;\n+import fr.free.nrw.commons.CommonsApplication;\n+import fr.free.nrw.commons.kvstore.JsonKvStore;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import javax.inject.Singleton;\n+import okhttp3.CacheControl;\n+import okhttp3.Call;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+import okhttp3.ResponseBody;\n+import timber.log.Timber;\n+\n+// Custom implementation of Fresco's Network fetcher to skip downloading of images when limited connection mode is enabled\n+// https://github.com/facebook/fresco/blob/master/imagepipeline-backends/imagepipeline-okhttp3/src/main/java/com/facebook/imagepipeline/backends/okhttp3/OkHttpNetworkFetcher.java\n+@Singleton\n+public class CustomOkHttpNetworkFetcher\n+    extends BaseNetworkFetcher<CustomOkHttpNetworkFetcher.OkHttpNetworkFetchState> {\n+\n+  private static final String QUEUE_TIME = \"queue_time\";\n+  private static final String FETCH_TIME = \"fetch_time\";\n+  private static final String TOTAL_TIME = \"total_time\";\n+  private static final String IMAGE_SIZE = \"image_size\";\n+  private final Call.Factory mCallFactory;\n+  private final @Nullable\n+  CacheControl mCacheControl;\n+  private Executor mCancellationExecutor;\n+  private JsonKvStore defaultKvStore;\n+\n+  /**\n+   * @param okHttpClient client to use\n+   */\n+  @Inject\n+  public CustomOkHttpNetworkFetcher(OkHttpClient okHttpClient,\n+      @Named(\"default_preferences\") JsonKvStore defaultKvStore) {\n+    this(okHttpClient, okHttpClient.dispatcher().executorService(), defaultKvStore);\n+  }\n+\n+  /**\n+   * @param callFactory          custom {@link Call.Factory} for fetching image from the network\n+   * @param cancellationExecutor executor on which fetching cancellation is performed if\n+   *                             cancellation is requested from the UI Thread\n+   */\n+  public CustomOkHttpNetworkFetcher(Call.Factory callFactory, Executor cancellationExecutor,\n+      JsonKvStore defaultKvStore) {\n+    this(callFactory, cancellationExecutor, defaultKvStore, true);\n+  }\n+\n+  /**\n+   * @param callFactory          custom {@link Call.Factory} for fetching image from the network\n+   * @param cancellationExecutor executor on which fetching cancellation is performed if\n+   *                             cancellation is requested from the UI Thread\n+   * @param disableOkHttpCache   true if network requests should not be cached by OkHttp\n+   */\n+  public CustomOkHttpNetworkFetcher(\n+      Call.Factory callFactory, Executor cancellationExecutor, JsonKvStore defaultKvStore,\n+      boolean disableOkHttpCache) {\n+    this.defaultKvStore = defaultKvStore;\n+    mCallFactory = callFactory;\n+    mCancellationExecutor = cancellationExecutor;\n+    mCacheControl = disableOkHttpCache ? new CacheControl.Builder().noStore().build() : null;\n+  }\n+\n+  @Override\n+  public OkHttpNetworkFetchState createFetchState(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a1bca98e103bfb9a4e018a6f1c3d479ca286130"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ5Mzc5NQ==", "bodyText": "@misaochan I have added class level Java docs for this file as this class is just a copy of Fresco's network fetcher. I have also added a link to their implementation.", "url": "https://github.com/commons-app/apps-android-commons/pull/3934#discussion_r494493795", "createdAt": "2020-09-24T17:35:09Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/media/CustomOkHttpNetworkFetcher.java", "diffHunk": "@@ -0,0 +1,229 @@\n+package fr.free.nrw.commons.media;\n+\n+import android.net.Uri;\n+import android.os.Looper;\n+import android.os.SystemClock;\n+import androidx.annotation.Nullable;\n+import com.facebook.imagepipeline.common.BytesRange;\n+import com.facebook.imagepipeline.image.EncodedImage;\n+import com.facebook.imagepipeline.producers.BaseNetworkFetcher;\n+import com.facebook.imagepipeline.producers.BaseProducerContextCallbacks;\n+import com.facebook.imagepipeline.producers.Consumer;\n+import com.facebook.imagepipeline.producers.FetchState;\n+import com.facebook.imagepipeline.producers.NetworkFetcher;\n+import com.facebook.imagepipeline.producers.ProducerContext;\n+import fr.free.nrw.commons.CommonsApplication;\n+import fr.free.nrw.commons.kvstore.JsonKvStore;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import javax.inject.Singleton;\n+import okhttp3.CacheControl;\n+import okhttp3.Call;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+import okhttp3.ResponseBody;\n+import timber.log.Timber;\n+\n+// Custom implementation of Fresco's Network fetcher to skip downloading of images when limited connection mode is enabled\n+// https://github.com/facebook/fresco/blob/master/imagepipeline-backends/imagepipeline-okhttp3/src/main/java/com/facebook/imagepipeline/backends/okhttp3/OkHttpNetworkFetcher.java\n+@Singleton\n+public class CustomOkHttpNetworkFetcher\n+    extends BaseNetworkFetcher<CustomOkHttpNetworkFetcher.OkHttpNetworkFetchState> {\n+\n+  private static final String QUEUE_TIME = \"queue_time\";\n+  private static final String FETCH_TIME = \"fetch_time\";\n+  private static final String TOTAL_TIME = \"total_time\";\n+  private static final String IMAGE_SIZE = \"image_size\";\n+  private final Call.Factory mCallFactory;\n+  private final @Nullable\n+  CacheControl mCacheControl;\n+  private Executor mCancellationExecutor;\n+  private JsonKvStore defaultKvStore;\n+\n+  /**\n+   * @param okHttpClient client to use\n+   */\n+  @Inject\n+  public CustomOkHttpNetworkFetcher(OkHttpClient okHttpClient,\n+      @Named(\"default_preferences\") JsonKvStore defaultKvStore) {\n+    this(okHttpClient, okHttpClient.dispatcher().executorService(), defaultKvStore);\n+  }\n+\n+  /**\n+   * @param callFactory          custom {@link Call.Factory} for fetching image from the network\n+   * @param cancellationExecutor executor on which fetching cancellation is performed if\n+   *                             cancellation is requested from the UI Thread\n+   */\n+  public CustomOkHttpNetworkFetcher(Call.Factory callFactory, Executor cancellationExecutor,\n+      JsonKvStore defaultKvStore) {\n+    this(callFactory, cancellationExecutor, defaultKvStore, true);\n+  }\n+\n+  /**\n+   * @param callFactory          custom {@link Call.Factory} for fetching image from the network\n+   * @param cancellationExecutor executor on which fetching cancellation is performed if\n+   *                             cancellation is requested from the UI Thread\n+   * @param disableOkHttpCache   true if network requests should not be cached by OkHttp\n+   */\n+  public CustomOkHttpNetworkFetcher(\n+      Call.Factory callFactory, Executor cancellationExecutor, JsonKvStore defaultKvStore,\n+      boolean disableOkHttpCache) {\n+    this.defaultKvStore = defaultKvStore;\n+    mCallFactory = callFactory;\n+    mCancellationExecutor = cancellationExecutor;\n+    mCacheControl = disableOkHttpCache ? new CacheControl.Builder().noStore().build() : null;\n+  }\n+\n+  @Override\n+  public OkHttpNetworkFetchState createFetchState(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0ODgyNQ=="}, "originalCommit": {"oid": "6a1bca98e103bfb9a4e018a6f1c3d479ca286130"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4296, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}