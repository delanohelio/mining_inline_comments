{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MDgyMDkz", "number": 3615, "title": "Add nearby presenter unit tests ", "bodyText": "Description (required)\nAdds unit tests for nearby presenter. I keep adding, please feel free to review existing tests meanwhile. More will be added.", "createdAt": "2020-04-01T15:52:15Z", "url": "https://github.com/commons-app/apps-android-commons/pull/3615", "merged": true, "mergeCommit": {"oid": "8630ba8025b1fe8ae22cb8f57a7b5890d3a8deb8"}, "closed": true, "closedAt": "2020-07-17T09:32:17Z", "author": {"login": "neslihanturan"}, "timelineItems": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTViRYgH2gAyMzk3MDgyMDkzOjJmYzU1ZTE5YjA4M2U0N2UzM2IxY2M2YzhlZDBlMzY0YTQ0MjgwNDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABceSO_4gFqTQwNTY5NDQzNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2fc55e19b083e47e33b1cc6c8ed0e364a4428049", "author": {"user": {"login": "neslihanturan", "name": "neslihanturan"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/2fc55e19b083e47e33b1cc6c8ed0e364a4428049", "committedDate": "2020-04-01T10:56:05Z", "message": "init the test file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b1d62cdb1cccf74c7649071f63b83722e0ff150", "author": {"user": {"login": "neslihanturan", "name": "neslihanturan"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/8b1d62cdb1cccf74c7649071f63b83722e0ff150", "committedDate": "2020-04-01T12:32:18Z", "message": "Add tests to check if searchthisarea button action and checkbox actions are added after initialize test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f395169daa824ca99b3b36fd1eaea6ce21936bb", "author": {"user": {"login": "neslihanturan", "name": "neslihanturan"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/2f395169daa824ca99b3b36fd1eaea6ce21936bb", "committedDate": "2020-04-01T12:42:09Z", "message": "Add tests to locked unlocked nearby cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a743348eca782fe1317c7921f301226b9c77981", "author": {"user": {"login": "neslihanturan", "name": "neslihanturan"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/8a743348eca782fe1317c7921f301226b9c77981", "committedDate": "2020-04-01T13:19:31Z", "message": "Add tests for null cases in updateMapAndList method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb4e8e0c467b0b7ee6be39ae0ae7cc91fd4cf0f9", "author": {"user": {"login": "neslihanturan", "name": "neslihanturan"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/bb4e8e0c467b0b7ee6be39ae0ae7cc91fd4cf0f9", "committedDate": "2020-04-01T13:34:24Z", "message": "Add test to check which locations are used to populate places, depending to LocationChangeType"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0fef8ae5bbc78d1959555f5503a2d2c265374bf", "author": {"user": {"login": "neslihanturan", "name": "neslihanturan"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/f0fef8ae5bbc78d1959555f5503a2d2c265374bf", "committedDate": "2020-04-01T14:23:44Z", "message": "Add tests to test users position is not followed if blue dot (current location marker) is not visible"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NzIxMDAx", "url": "https://github.com/commons-app/apps-android-commons/pull/3615#pullrequestreview-385721001", "createdAt": "2020-04-01T15:52:19Z", "commit": {"oid": "f0fef8ae5bbc78d1959555f5503a2d2c265374bf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5300c6fa6697d68cabadeebcc9a4e368e69affb7", "author": {"user": {"login": "neslihanturan", "name": "neslihanturan"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/5300c6fa6697d68cabadeebcc9a4e368e69affb7", "committedDate": "2020-04-02T10:37:07Z", "message": "Add tests to decide search this area method visibility on camera move"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "677126f7f9482bf3df86514b1232a344ccf13fc7", "author": {"user": {"login": "neslihanturan", "name": "neslihanturan"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/677126f7f9482bf3df86514b1232a344ccf13fc7", "committedDate": "2020-04-02T11:03:44Z", "message": "Add tests for multi filteirng of placetypes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c597ea5b0f7bbe4c7768dd6e935a006d6de560e5", "author": {"user": {"login": "neslihanturan", "name": "neslihanturan"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/c597ea5b0f7bbe4c7768dd6e935a006d6de560e5", "committedDate": "2020-04-02T11:31:04Z", "message": "add tests for single place type selection too"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec37b1e294fb92efddc2a0b63c2746c81ef6e47c", "author": {"user": {"login": "neslihanturan", "name": "neslihanturan"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/ec37b1e294fb92efddc2a0b63c2746c81ef6e47c", "committedDate": "2020-04-02T12:07:20Z", "message": "Add tests to tests search view focus gain and bottom sheet visibilities"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d66c7be7cff34035be2611a9202e65148f822cf6", "author": {"user": {"login": "neslihanturan", "name": "neslihanturan"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/d66c7be7cff34035be2611a9202e65148f822cf6", "committedDate": "2020-04-02T13:17:51Z", "message": "Add tests for SearchCloseToCurrentLocation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MTA0Nzk2", "url": "https://github.com/commons-app/apps-android-commons/pull/3615#pullrequestreview-388104796", "createdAt": "2020-04-06T10:04:47Z", "commit": {"oid": "d66c7be7cff34035be2611a9202e65148f822cf6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDowNDo0OFrOGBQlpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDowNDo0OFrOGBQlpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3MzU0Mg==", "bodyText": "Do we need to be spying?", "url": "https://github.com/commons-app/apps-android-commons/pull/3615#discussion_r403973542", "createdAt": "2020-04-06T10:04:48Z", "author": {"login": "macgills"}, "path": "app/src/test/kotlin/fr/free/nrw/commons/nearby/NearbyParentFragmentPresenterTest.kt", "diffHunk": "@@ -0,0 +1,320 @@\n+package fr.free.nrw.commons.nearby\n+\n+import com.nhaarman.mockitokotlin2.*\n+import fr.free.nrw.commons.bookmarks.locations.BookmarkLocationsDao\n+import fr.free.nrw.commons.location.LatLng\n+import fr.free.nrw.commons.location.LocationServiceManager\n+import fr.free.nrw.commons.nearby.contract.NearbyParentFragmentContract\n+import fr.free.nrw.commons.nearby.presenter.NearbyParentFragmentPresenter\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.Assert.*\n+import org.mockito.Mock\n+import org.mockito.Mockito\n+import org.mockito.MockitoAnnotations\n+\n+\n+/**\n+ * The unit test class for NearbyParentFragmentPresenter\n+ */\n+class NearbyParentFragmentPresenterTest {\n+    @Mock\n+    internal lateinit var nearbyParentFragmentView: NearbyParentFragmentContract.View\n+    @Mock\n+    internal lateinit var bookmarkLocationsDao: BookmarkLocationsDao\n+    @Mock\n+    internal lateinit var latestLocation: LatLng\n+    @Mock\n+    internal lateinit var cameraTarget: LatLng\n+    @Mock\n+    internal lateinit var selectedLabels: List<Label>\n+\n+    private lateinit var nearbyPresenter: NearbyParentFragmentPresenter\n+    private lateinit var latestLocationSpy: LatLng\n+    private lateinit var mapboxCameraTarget: com.mapbox.mapboxsdk.geometry.LatLng\n+\n+    /**\n+     * initial setup\n+     */\n+    @Before\n+    @Throws(Exception::class)\n+    fun setUp() {\n+        MockitoAnnotations.initMocks(this)\n+        nearbyPresenter = Mockito.spy(NearbyParentFragmentPresenter(bookmarkLocationsDao))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d66c7be7cff34035be2611a9202e65148f822cf6"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MTA3Nzkw", "url": "https://github.com/commons-app/apps-android-commons/pull/3615#pullrequestreview-388107790", "createdAt": "2020-04-06T10:09:08Z", "commit": {"oid": "d66c7be7cff34035be2611a9202e65148f822cf6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDowOTowOFrOGBQvIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDowOTowOFrOGBQvIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3NTk3MA==", "bodyText": "I know we add javadocs to classes but to tests? that seems extreme to me especially when you can have kotlin test functions enclosed in backticks to be named arbitrarily. For example the name of this test could be\nfun `Tests nearby operations are initialized`()", "url": "https://github.com/commons-app/apps-android-commons/pull/3615#discussion_r403975970", "createdAt": "2020-04-06T10:09:08Z", "author": {"login": "macgills"}, "path": "app/src/test/kotlin/fr/free/nrw/commons/nearby/NearbyParentFragmentPresenterTest.kt", "diffHunk": "@@ -0,0 +1,320 @@\n+package fr.free.nrw.commons.nearby\n+\n+import com.nhaarman.mockitokotlin2.*\n+import fr.free.nrw.commons.bookmarks.locations.BookmarkLocationsDao\n+import fr.free.nrw.commons.location.LatLng\n+import fr.free.nrw.commons.location.LocationServiceManager\n+import fr.free.nrw.commons.nearby.contract.NearbyParentFragmentContract\n+import fr.free.nrw.commons.nearby.presenter.NearbyParentFragmentPresenter\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.Assert.*\n+import org.mockito.Mock\n+import org.mockito.Mockito\n+import org.mockito.MockitoAnnotations\n+\n+\n+/**\n+ * The unit test class for NearbyParentFragmentPresenter\n+ */\n+class NearbyParentFragmentPresenterTest {\n+    @Mock\n+    internal lateinit var nearbyParentFragmentView: NearbyParentFragmentContract.View\n+    @Mock\n+    internal lateinit var bookmarkLocationsDao: BookmarkLocationsDao\n+    @Mock\n+    internal lateinit var latestLocation: LatLng\n+    @Mock\n+    internal lateinit var cameraTarget: LatLng\n+    @Mock\n+    internal lateinit var selectedLabels: List<Label>\n+\n+    private lateinit var nearbyPresenter: NearbyParentFragmentPresenter\n+    private lateinit var latestLocationSpy: LatLng\n+    private lateinit var mapboxCameraTarget: com.mapbox.mapboxsdk.geometry.LatLng\n+\n+    /**\n+     * initial setup\n+     */\n+    @Before\n+    @Throws(Exception::class)\n+    fun setUp() {\n+        MockitoAnnotations.initMocks(this)\n+        nearbyPresenter = Mockito.spy(NearbyParentFragmentPresenter(bookmarkLocationsDao))\n+        nearbyPresenter.attachView(nearbyParentFragmentView)\n+    }\n+\n+    /**\n+     * Tests nearby operations are initialized\n+     */\n+    @Test\n+    fun testInitializeNearbyMapOperations() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d66c7be7cff34035be2611a9202e65148f822cf6"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MTEwNDI0", "url": "https://github.com/commons-app/apps-android-commons/pull/3615#pullrequestreview-388110424", "createdAt": "2020-04-06T10:13:00Z", "commit": {"oid": "d66c7be7cff34035be2611a9202e65148f822cf6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDoxMzowMFrOGBQ3gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDoxMzowMFrOGBQ3gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3ODExMw==", "bodyText": "Exposing code for test is a code smell. The option is to rewrite or use the nasty @VisibleForTesting annotation.\nI'd say rewrite because lockUnlockNearby sets it quite easily for you.", "url": "https://github.com/commons-app/apps-android-commons/pull/3615#discussion_r403978113", "createdAt": "2020-04-06T10:13:00Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/nearby/presenter/NearbyParentFragmentPresenter.java", "diffHunk": "@@ -373,4 +373,12 @@ public boolean areLocationsClose(LatLng cameraTarget, LatLng lastKnownLocation)\n             return true;\n         }\n     }\n+\n+    public boolean isNearbyLocked() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d66c7be7cff34035be2611a9202e65148f822cf6"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MTEyMDA1", "url": "https://github.com/commons-app/apps-android-commons/pull/3615#pullrequestreview-388112005", "createdAt": "2020-04-06T10:15:19Z", "commit": {"oid": "d66c7be7cff34035be2611a9202e65148f822cf6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDoxNToxOVrOGBQ8hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDoxNToxOVrOGBQ8hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3OTM5OQ==", "bodyText": "where is MapUpdated?", "url": "https://github.com/commons-app/apps-android-commons/pull/3615#discussion_r403979399", "createdAt": "2020-04-06T10:15:19Z", "author": {"login": "macgills"}, "path": "app/src/test/kotlin/fr/free/nrw/commons/nearby/NearbyParentFragmentPresenterTest.kt", "diffHunk": "@@ -0,0 +1,320 @@\n+package fr.free.nrw.commons.nearby\n+\n+import com.nhaarman.mockitokotlin2.*\n+import fr.free.nrw.commons.bookmarks.locations.BookmarkLocationsDao\n+import fr.free.nrw.commons.location.LatLng\n+import fr.free.nrw.commons.location.LocationServiceManager\n+import fr.free.nrw.commons.nearby.contract.NearbyParentFragmentContract\n+import fr.free.nrw.commons.nearby.presenter.NearbyParentFragmentPresenter\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.Assert.*\n+import org.mockito.Mock\n+import org.mockito.Mockito\n+import org.mockito.MockitoAnnotations\n+\n+\n+/**\n+ * The unit test class for NearbyParentFragmentPresenter\n+ */\n+class NearbyParentFragmentPresenterTest {\n+    @Mock\n+    internal lateinit var nearbyParentFragmentView: NearbyParentFragmentContract.View\n+    @Mock\n+    internal lateinit var bookmarkLocationsDao: BookmarkLocationsDao\n+    @Mock\n+    internal lateinit var latestLocation: LatLng\n+    @Mock\n+    internal lateinit var cameraTarget: LatLng\n+    @Mock\n+    internal lateinit var selectedLabels: List<Label>\n+\n+    private lateinit var nearbyPresenter: NearbyParentFragmentPresenter\n+    private lateinit var latestLocationSpy: LatLng\n+    private lateinit var mapboxCameraTarget: com.mapbox.mapboxsdk.geometry.LatLng\n+\n+    /**\n+     * initial setup\n+     */\n+    @Before\n+    @Throws(Exception::class)\n+    fun setUp() {\n+        MockitoAnnotations.initMocks(this)\n+        nearbyPresenter = Mockito.spy(NearbyParentFragmentPresenter(bookmarkLocationsDao))\n+        nearbyPresenter.attachView(nearbyParentFragmentView)\n+    }\n+\n+    /**\n+     * Tests nearby operations are initialized\n+     */\n+    @Test\n+    fun testInitializeNearbyMapOperations() {\n+        nearbyPresenter.initializeMapOperations()\n+        verify(nearbyParentFragmentView).addSearchThisAreaButtonAction()\n+        verify(nearbyParentFragmentView).setCheckBoxAction()\n+    }\n+\n+    /**\n+     * Test lockUnlockNearby method to lock nearby case\n+     */\n+    @Test\n+    fun testLockUnlockNearbyForLocked() {\n+        nearbyPresenter.lockUnlockNearby(true)\n+        verify(nearbyParentFragmentView).disableFABRecenter()\n+    }\n+\n+    /**\n+     * Test lockUnlockNearby method to unlock nearby case\n+     */\n+    @Test\n+    fun testLockUnlockNearbyForUnlocked() {\n+        nearbyPresenter.lockUnlockNearby(false)\n+        verify(nearbyParentFragmentView).enableFABRecenter()\n+    }\n+\n+    /**\n+     * Test updateMapAndList method returns with zero interactions when location is locked\n+     */\n+    @Test\n+    fun testUpdateMapAndListWhenLocationLocked() {\n+        nearbyPresenter.setNearbyLocked(true)\n+        nearbyPresenter.updateMapAndList(null)\n+        verifyZeroInteractions(nearbyParentFragmentView)\n+    }\n+\n+    /**\n+     * Test updateMapAndList method returns with zero interactions when network connection\n+     * is not established\n+     */\n+    @Test\n+    fun testUpdateMapAndListWhenNoNetworkConnection() {\n+        nearbyPresenter.setNearbyLocked(false)\n+        whenever(nearbyParentFragmentView.isNetworkConnectionEstablished()).thenReturn(false)\n+        nearbyPresenter.updateMapAndList(null)\n+        verify(nearbyParentFragmentView).isNetworkConnectionEstablished()\n+        verifyNoMoreInteractions(nearbyParentFragmentView)\n+    }\n+\n+    /**\n+     * Test updateMapAndList method returns with zero interactions when last location is null\n+     */\n+    @Test\n+    fun testUpdateMapAndListWhenLastLocationIsNull() {\n+        nearbyPresenter.setNearbyLocked(false)\n+        whenever(nearbyParentFragmentView.isNetworkConnectionEstablished()).thenReturn(true)\n+        whenever(nearbyParentFragmentView.getLastLocation()).thenReturn(null)\n+        nearbyPresenter.updateMapAndList(null)\n+        verify(nearbyParentFragmentView).isNetworkConnectionEstablished()\n+        verify(nearbyParentFragmentView).getLastLocation()\n+        verifyNoMoreInteractions(nearbyParentFragmentView)\n+    }\n+\n+    /**\n+     * Test updateMapAndList method updates parent fragment view with latest location of user\n+     * at significant location change\n+     */\n+    @Test\n+    fun testPlacesPopulatedForLatestLocationWhenLocationSignificantlyChanged() {\n+        nearbyPresenter.setNearbyLocked(false)\n+        whenever(nearbyParentFragmentView.isNetworkConnectionEstablished()).thenReturn(true)\n+        whenever(nearbyParentFragmentView.getLastLocation()).thenReturn(latestLocation)\n+        nearbyPresenter.updateMapAndList(LocationServiceManager.LocationChangeType.LOCATION_SIGNIFICANTLY_CHANGED)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d66c7be7cff34035be2611a9202e65148f822cf6"}, "originalPosition": 121}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MTE0Mzc4", "url": "https://github.com/commons-app/apps-android-commons/pull/3615#pullrequestreview-388114378", "createdAt": "2020-04-06T10:18:45Z", "commit": {"oid": "d66c7be7cff34035be2611a9202e65148f822cf6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDoxODo0NlrOGBREMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDoxODo0NlrOGBREMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk4MTM2MA==", "bodyText": "why are they spied? mocks or just the objects themselves would do I think", "url": "https://github.com/commons-app/apps-android-commons/pull/3615#discussion_r403981360", "createdAt": "2020-04-06T10:18:46Z", "author": {"login": "macgills"}, "path": "app/src/test/kotlin/fr/free/nrw/commons/nearby/NearbyParentFragmentPresenterTest.kt", "diffHunk": "@@ -0,0 +1,320 @@\n+package fr.free.nrw.commons.nearby\n+\n+import com.nhaarman.mockitokotlin2.*\n+import fr.free.nrw.commons.bookmarks.locations.BookmarkLocationsDao\n+import fr.free.nrw.commons.location.LatLng\n+import fr.free.nrw.commons.location.LocationServiceManager\n+import fr.free.nrw.commons.nearby.contract.NearbyParentFragmentContract\n+import fr.free.nrw.commons.nearby.presenter.NearbyParentFragmentPresenter\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.Assert.*\n+import org.mockito.Mock\n+import org.mockito.Mockito\n+import org.mockito.MockitoAnnotations\n+\n+\n+/**\n+ * The unit test class for NearbyParentFragmentPresenter\n+ */\n+class NearbyParentFragmentPresenterTest {\n+    @Mock\n+    internal lateinit var nearbyParentFragmentView: NearbyParentFragmentContract.View\n+    @Mock\n+    internal lateinit var bookmarkLocationsDao: BookmarkLocationsDao\n+    @Mock\n+    internal lateinit var latestLocation: LatLng\n+    @Mock\n+    internal lateinit var cameraTarget: LatLng\n+    @Mock\n+    internal lateinit var selectedLabels: List<Label>\n+\n+    private lateinit var nearbyPresenter: NearbyParentFragmentPresenter\n+    private lateinit var latestLocationSpy: LatLng\n+    private lateinit var mapboxCameraTarget: com.mapbox.mapboxsdk.geometry.LatLng\n+\n+    /**\n+     * initial setup\n+     */\n+    @Before\n+    @Throws(Exception::class)\n+    fun setUp() {\n+        MockitoAnnotations.initMocks(this)\n+        nearbyPresenter = Mockito.spy(NearbyParentFragmentPresenter(bookmarkLocationsDao))\n+        nearbyPresenter.attachView(nearbyParentFragmentView)\n+    }\n+\n+    /**\n+     * Tests nearby operations are initialized\n+     */\n+    @Test\n+    fun testInitializeNearbyMapOperations() {\n+        nearbyPresenter.initializeMapOperations()\n+        verify(nearbyParentFragmentView).addSearchThisAreaButtonAction()\n+        verify(nearbyParentFragmentView).setCheckBoxAction()\n+    }\n+\n+    /**\n+     * Test lockUnlockNearby method to lock nearby case\n+     */\n+    @Test\n+    fun testLockUnlockNearbyForLocked() {\n+        nearbyPresenter.lockUnlockNearby(true)\n+        verify(nearbyParentFragmentView).disableFABRecenter()\n+    }\n+\n+    /**\n+     * Test lockUnlockNearby method to unlock nearby case\n+     */\n+    @Test\n+    fun testLockUnlockNearbyForUnlocked() {\n+        nearbyPresenter.lockUnlockNearby(false)\n+        verify(nearbyParentFragmentView).enableFABRecenter()\n+    }\n+\n+    /**\n+     * Test updateMapAndList method returns with zero interactions when location is locked\n+     */\n+    @Test\n+    fun testUpdateMapAndListWhenLocationLocked() {\n+        nearbyPresenter.setNearbyLocked(true)\n+        nearbyPresenter.updateMapAndList(null)\n+        verifyZeroInteractions(nearbyParentFragmentView)\n+    }\n+\n+    /**\n+     * Test updateMapAndList method returns with zero interactions when network connection\n+     * is not established\n+     */\n+    @Test\n+    fun testUpdateMapAndListWhenNoNetworkConnection() {\n+        nearbyPresenter.setNearbyLocked(false)\n+        whenever(nearbyParentFragmentView.isNetworkConnectionEstablished()).thenReturn(false)\n+        nearbyPresenter.updateMapAndList(null)\n+        verify(nearbyParentFragmentView).isNetworkConnectionEstablished()\n+        verifyNoMoreInteractions(nearbyParentFragmentView)\n+    }\n+\n+    /**\n+     * Test updateMapAndList method returns with zero interactions when last location is null\n+     */\n+    @Test\n+    fun testUpdateMapAndListWhenLastLocationIsNull() {\n+        nearbyPresenter.setNearbyLocked(false)\n+        whenever(nearbyParentFragmentView.isNetworkConnectionEstablished()).thenReturn(true)\n+        whenever(nearbyParentFragmentView.getLastLocation()).thenReturn(null)\n+        nearbyPresenter.updateMapAndList(null)\n+        verify(nearbyParentFragmentView).isNetworkConnectionEstablished()\n+        verify(nearbyParentFragmentView).getLastLocation()\n+        verifyNoMoreInteractions(nearbyParentFragmentView)\n+    }\n+\n+    /**\n+     * Test updateMapAndList method updates parent fragment view with latest location of user\n+     * at significant location change\n+     */\n+    @Test\n+    fun testPlacesPopulatedForLatestLocationWhenLocationSignificantlyChanged() {\n+        nearbyPresenter.setNearbyLocked(false)\n+        whenever(nearbyParentFragmentView.isNetworkConnectionEstablished()).thenReturn(true)\n+        whenever(nearbyParentFragmentView.getLastLocation()).thenReturn(latestLocation)\n+        nearbyPresenter.updateMapAndList(LocationServiceManager.LocationChangeType.LOCATION_SIGNIFICANTLY_CHANGED)\n+        verify(nearbyParentFragmentView).populatePlaces(latestLocation)\n+    }\n+\n+    /**\n+     * Test updateMapAndList method updates parent fragment view with camera target location\n+     * at search custom area mode\n+     */\n+    @Test\n+    fun testPlacesPopulatedForCameraTargetLocationWhenSearchCustomArea() {\n+        nearbyPresenter.setNearbyLocked(false)\n+        whenever(nearbyParentFragmentView.isNetworkConnectionEstablished()).thenReturn(true)\n+        whenever(nearbyParentFragmentView.getLastLocation()).thenReturn(latestLocation)\n+        whenever(nearbyParentFragmentView.getCameraTarget()).thenReturn(cameraTarget)\n+        nearbyPresenter.updateMapAndList(LocationServiceManager.LocationChangeType.SEARCH_CUSTOM_AREA)\n+        verify(nearbyParentFragmentView).populatePlaces(cameraTarget)\n+    }\n+\n+    /**\n+     * Test testUpdateMapAndList tracks users location if current location marker is visible and\n+     * location is slightly changed\n+     */\n+    @Test\n+    fun testUserTrackedWhenCurrentLocationMarkerVisible() {\n+        nearbyPresenter.setNearbyLocked(false)\n+        whenever(nearbyParentFragmentView.isNetworkConnectionEstablished()).thenReturn(true)\n+        whenever(nearbyParentFragmentView.getLastLocation()).thenReturn(latestLocation)\n+        whenever(nearbyParentFragmentView.isCurrentLocationMarkerVisible()).thenReturn(true)\n+        nearbyPresenter.updateMapAndList(LocationServiceManager.LocationChangeType.LOCATION_SLIGHTLY_CHANGED)\n+        verify(nearbyParentFragmentView).recenterMap(latestLocation)\n+    }\n+\n+    /**\n+     * Test testUpdateMapAndList doesn't track users location if current location marker is\n+     * invisible and location is slightly changed\n+     */\n+    @Test\n+    fun testUserNotTrackedWhenCurrentLocationMarkerInvisible() {\n+        nearbyPresenter.setNearbyLocked(false)\n+        whenever(nearbyParentFragmentView.isNetworkConnectionEstablished()).thenReturn(true)\n+        whenever(nearbyParentFragmentView.getLastLocation()).thenReturn(latestLocation)\n+        whenever(nearbyParentFragmentView.isCurrentLocationMarkerVisible()).thenReturn(false)\n+        nearbyPresenter.updateMapAndList(LocationServiceManager.LocationChangeType.LOCATION_SLIGHTLY_CHANGED)\n+        verify(nearbyParentFragmentView).isNetworkConnectionEstablished()\n+        verify(nearbyParentFragmentView).getLastLocation()\n+        verify(nearbyParentFragmentView).isCurrentLocationMarkerVisible()\n+        verifyNoMoreInteractions(nearbyParentFragmentView)\n+    }\n+\n+    /**\n+     * Test search this area button became visible after user moved the camera target to far\n+     * away from current target. Distance between these two point is 111.19 km, so our camera target\n+     * is at outside of previously searched region if we set latestSearchRadius below 111.19. Thus,\n+     * setSearchThisAreaButtonVisibility(true) should be verified.\n+     */\n+    @Test\n+    fun testSearchThisAreaButtonVisibleWhenMoveToFarPosition() {\n+        NearbyController.latestSearchLocation = Mockito.spy(LatLng(2.0,1.0,0.0F))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d66c7be7cff34035be2611a9202e65148f822cf6"}, "originalPosition": 178}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MTE1NjMx", "url": "https://github.com/commons-app/apps-android-commons/pull/3615#pullrequestreview-388115631", "createdAt": "2020-04-06T10:20:32Z", "commit": {"oid": "d66c7be7cff34035be2611a9202e65148f822cf6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDoyMDozMlrOGBRIZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDoyMDozMlrOGBRIZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk4MjQzOA==", "bodyText": "no verification for\n        lockUnlockNearby(false);\n        updateMapAndList(LOCATION_SIGNIFICANTLY_CHANGED);", "url": "https://github.com/commons-app/apps-android-commons/pull/3615#discussion_r403982438", "createdAt": "2020-04-06T10:20:32Z", "author": {"login": "macgills"}, "path": "app/src/test/kotlin/fr/free/nrw/commons/nearby/NearbyParentFragmentPresenterTest.kt", "diffHunk": "@@ -0,0 +1,320 @@\n+package fr.free.nrw.commons.nearby\n+\n+import com.nhaarman.mockitokotlin2.*\n+import fr.free.nrw.commons.bookmarks.locations.BookmarkLocationsDao\n+import fr.free.nrw.commons.location.LatLng\n+import fr.free.nrw.commons.location.LocationServiceManager\n+import fr.free.nrw.commons.nearby.contract.NearbyParentFragmentContract\n+import fr.free.nrw.commons.nearby.presenter.NearbyParentFragmentPresenter\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.Assert.*\n+import org.mockito.Mock\n+import org.mockito.Mockito\n+import org.mockito.MockitoAnnotations\n+\n+\n+/**\n+ * The unit test class for NearbyParentFragmentPresenter\n+ */\n+class NearbyParentFragmentPresenterTest {\n+    @Mock\n+    internal lateinit var nearbyParentFragmentView: NearbyParentFragmentContract.View\n+    @Mock\n+    internal lateinit var bookmarkLocationsDao: BookmarkLocationsDao\n+    @Mock\n+    internal lateinit var latestLocation: LatLng\n+    @Mock\n+    internal lateinit var cameraTarget: LatLng\n+    @Mock\n+    internal lateinit var selectedLabels: List<Label>\n+\n+    private lateinit var nearbyPresenter: NearbyParentFragmentPresenter\n+    private lateinit var latestLocationSpy: LatLng\n+    private lateinit var mapboxCameraTarget: com.mapbox.mapboxsdk.geometry.LatLng\n+\n+    /**\n+     * initial setup\n+     */\n+    @Before\n+    @Throws(Exception::class)\n+    fun setUp() {\n+        MockitoAnnotations.initMocks(this)\n+        nearbyPresenter = Mockito.spy(NearbyParentFragmentPresenter(bookmarkLocationsDao))\n+        nearbyPresenter.attachView(nearbyParentFragmentView)\n+    }\n+\n+    /**\n+     * Tests nearby operations are initialized\n+     */\n+    @Test\n+    fun testInitializeNearbyMapOperations() {\n+        nearbyPresenter.initializeMapOperations()\n+        verify(nearbyParentFragmentView).addSearchThisAreaButtonAction()\n+        verify(nearbyParentFragmentView).setCheckBoxAction()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d66c7be7cff34035be2611a9202e65148f822cf6"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe1f1b8c80d8a8031013a096ea3c3451acfde90f", "author": {"user": {"login": "neslihanturan", "name": "neslihanturan"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/fe1f1b8c80d8a8031013a096ea3c3451acfde90f", "committedDate": "2020-04-06T12:33:34Z", "message": "Remove two unneeded getter and setter for isNearbyLocked, use @VisibleForTesting annotation instead"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0178f3c74d84f618b1251a5b2ae77ea16fc03c20", "author": {"user": {"login": "neslihanturan", "name": "neslihanturan"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/0178f3c74d84f618b1251a5b2ae77ea16fc03c20", "committedDate": "2020-04-06T13:08:13Z", "message": "Add VisibleForTesting annotation to initializeNearbyOperations method so that it will be private by default"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ba4ef691ff7cdd9cff77602b5f5860bffd90e84", "author": {"user": {"login": "neslihanturan", "name": "neslihanturan"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/6ba4ef691ff7cdd9cff77602b5f5860bffd90e84", "committedDate": "2020-04-06T13:15:06Z", "message": "Add missing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53abcace89bf8a94380d79c4aa17bc314b33dd21", "author": {"user": {"login": "neslihanturan", "name": "neslihanturan"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/53abcace89bf8a94380d79c4aa17bc314b33dd21", "committedDate": "2020-04-06T13:33:39Z", "message": "Add tests for map updated case and add missing lines those are being tested"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca775b9eb5dc03c59752c21f36a513ce71d95dcd", "author": {"user": {"login": "neslihanturan", "name": "neslihanturan"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/ca775b9eb5dc03c59752c21f36a513ce71d95dcd", "committedDate": "2020-04-06T14:49:39Z", "message": "Add some missind method verifications"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f691149eeff24a5caca1abd5650025a6dc7e8d9a", "author": {"user": {"login": "neslihanturan", "name": "neslihanturan"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/f691149eeff24a5caca1abd5650025a6dc7e8d9a", "committedDate": "2020-04-06T15:02:35Z", "message": "Create real latlang objects isntead of spying them"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98fc8a0c294e097f398e315ad227f89ea483b5ba", "author": {"user": {"login": "neslihanturan", "name": "neslihanturan"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/98fc8a0c294e097f398e315ad227f89ea483b5ba", "committedDate": "2020-04-06T15:36:13Z", "message": "Use a real presenter object instead of a spy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4Mzc1ODY1", "url": "https://github.com/commons-app/apps-android-commons/pull/3615#pullrequestreview-388375865", "createdAt": "2020-04-06T15:40:21Z", "commit": {"oid": "98fc8a0c294e097f398e315ad227f89ea483b5ba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNTo0MDoyMVrOGBd33w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNTo0MDoyMVrOGBd33w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE5MTE5OQ==", "bodyText": "I am not sure about this line. @macgills can you guide me? When nearbyFragmentPresenter was a spy, this line was\n       verify(nearbyPresenter).updateMapAndList(LocationChangeType.LOCATION_SIGNIFICANTLY_CHANGED)\n\nNow I changed it to this way, but doesn't seem like a best practice.", "url": "https://github.com/commons-app/apps-android-commons/pull/3615#discussion_r404191199", "createdAt": "2020-04-06T15:40:21Z", "author": {"login": "neslihanturan"}, "path": "app/src/test/kotlin/fr/free/nrw/commons/nearby/NearbyParentFragmentPresenterTest.kt", "diffHunk": "@@ -0,0 +1,342 @@\n+package fr.free.nrw.commons.nearby\n+\n+import com.nhaarman.mockitokotlin2.*\n+import fr.free.nrw.commons.bookmarks.locations.BookmarkLocationsDao\n+import fr.free.nrw.commons.location.LatLng\n+import fr.free.nrw.commons.location.LocationServiceManager\n+import fr.free.nrw.commons.location.LocationServiceManager.LocationChangeType\n+import fr.free.nrw.commons.nearby.contract.NearbyParentFragmentContract\n+import fr.free.nrw.commons.nearby.presenter.NearbyParentFragmentPresenter\n+import org.junit.Assert.assertFalse\n+import org.junit.Assert.assertTrue\n+import org.junit.Before\n+import org.junit.Test\n+import org.mockito.Mock\n+import org.mockito.Mockito\n+import org.mockito.MockitoAnnotations\n+\n+\n+/**\n+ * The unit test class for NearbyParentFragmentPresenter\n+ */\n+class NearbyParentFragmentPresenterTest {\n+    @Mock\n+    internal lateinit var nearbyParentFragmentView: NearbyParentFragmentContract.View\n+    @Mock\n+    internal lateinit var bookmarkLocationsDao: BookmarkLocationsDao\n+    @Mock\n+    internal lateinit var latestLocation: LatLng\n+    @Mock\n+    internal lateinit var cameraTarget: LatLng\n+    @Mock\n+    internal lateinit var selectedLabels: List<Label>\n+\n+    private lateinit var nearbyPresenter: NearbyParentFragmentPresenter\n+    private lateinit var mapboxCameraTarget: com.mapbox.mapboxsdk.geometry.LatLng\n+\n+    /**\n+     * initial setup\n+     */\n+    @Before\n+    @Throws(Exception::class)\n+    fun setUp() {\n+        MockitoAnnotations.initMocks(this)\n+        nearbyPresenter = NearbyParentFragmentPresenter(bookmarkLocationsDao)\n+        nearbyPresenter.attachView(nearbyParentFragmentView)\n+    }\n+\n+    /**\n+     * Tests nearby operations are initialized\n+     */\n+    @Test\n+    fun testInitializeNearbyMapOperations() {\n+        nearbyPresenter.initializeMapOperations()\n+        verify(nearbyParentFragmentView).enableFABRecenter()\n+        testPlacesPopulatedForLatestLocationWhenLocationSignificantlyChanged()\n+        verify(nearbyParentFragmentView).addSearchThisAreaButtonAction()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98fc8a0c294e097f398e315ad227f89ea483b5ba"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4OTI1MTAw", "url": "https://github.com/commons-app/apps-android-commons/pull/3615#pullrequestreview-388925100", "createdAt": "2020-04-07T09:06:04Z", "commit": {"oid": "98fc8a0c294e097f398e315ad227f89ea483b5ba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTowNjowNFrOGB6HBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTowNjowNFrOGB6HBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1MzgzMQ==", "bodyText": "As per the thread where I first mentioned this annotation\n\nI meant for you to rewrite the test, @VisibleForTesting is an ugly bandaid and should only be used in extreme scenarios", "url": "https://github.com/commons-app/apps-android-commons/pull/3615#discussion_r404653831", "createdAt": "2020-04-07T09:06:04Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/nearby/presenter/NearbyParentFragmentPresenter.java", "diffHunk": "@@ -2,6 +2,7 @@\n \n import android.view.View;\n \n+import androidx.annotation.VisibleForTesting;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98fc8a0c294e097f398e315ad227f89ea483b5ba"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4OTM2MTc1", "url": "https://github.com/commons-app/apps-android-commons/pull/3615#pullrequestreview-388936175", "createdAt": "2020-04-07T09:20:38Z", "commit": {"oid": "98fc8a0c294e097f398e315ad227f89ea483b5ba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOToyMDozOFrOGB6qoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOToyMDozOFrOGB6qoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY2Mjk0NA==", "bodyText": "I would rename all these test title to be in backticks so they can be an english sentence eg When nearby is locked do not update view or updateMapAndList when locked does nothing just something that expresses it well so that if somebody reads this in a failed test report they will instantly know what went wrong", "url": "https://github.com/commons-app/apps-android-commons/pull/3615#discussion_r404662944", "createdAt": "2020-04-07T09:20:38Z", "author": {"login": "macgills"}, "path": "app/src/test/kotlin/fr/free/nrw/commons/nearby/NearbyParentFragmentPresenterTest.kt", "diffHunk": "@@ -0,0 +1,342 @@\n+package fr.free.nrw.commons.nearby\n+\n+import com.nhaarman.mockitokotlin2.*\n+import fr.free.nrw.commons.bookmarks.locations.BookmarkLocationsDao\n+import fr.free.nrw.commons.location.LatLng\n+import fr.free.nrw.commons.location.LocationServiceManager\n+import fr.free.nrw.commons.location.LocationServiceManager.LocationChangeType\n+import fr.free.nrw.commons.nearby.contract.NearbyParentFragmentContract\n+import fr.free.nrw.commons.nearby.presenter.NearbyParentFragmentPresenter\n+import org.junit.Assert.assertFalse\n+import org.junit.Assert.assertTrue\n+import org.junit.Before\n+import org.junit.Test\n+import org.mockito.Mock\n+import org.mockito.Mockito\n+import org.mockito.MockitoAnnotations\n+\n+\n+/**\n+ * The unit test class for NearbyParentFragmentPresenter\n+ */\n+class NearbyParentFragmentPresenterTest {\n+    @Mock\n+    internal lateinit var nearbyParentFragmentView: NearbyParentFragmentContract.View\n+    @Mock\n+    internal lateinit var bookmarkLocationsDao: BookmarkLocationsDao\n+    @Mock\n+    internal lateinit var latestLocation: LatLng\n+    @Mock\n+    internal lateinit var cameraTarget: LatLng\n+    @Mock\n+    internal lateinit var selectedLabels: List<Label>\n+\n+    private lateinit var nearbyPresenter: NearbyParentFragmentPresenter\n+    private lateinit var mapboxCameraTarget: com.mapbox.mapboxsdk.geometry.LatLng\n+\n+    /**\n+     * initial setup\n+     */\n+    @Before\n+    @Throws(Exception::class)\n+    fun setUp() {\n+        MockitoAnnotations.initMocks(this)\n+        nearbyPresenter = NearbyParentFragmentPresenter(bookmarkLocationsDao)\n+        nearbyPresenter.attachView(nearbyParentFragmentView)\n+    }\n+\n+    /**\n+     * Tests nearby operations are initialized\n+     */\n+    @Test\n+    fun testInitializeNearbyMapOperations() {\n+        nearbyPresenter.initializeMapOperations()\n+        verify(nearbyParentFragmentView).enableFABRecenter()\n+        testPlacesPopulatedForLatestLocationWhenLocationSignificantlyChanged()\n+        verify(nearbyParentFragmentView).addSearchThisAreaButtonAction()\n+        verify(nearbyParentFragmentView).setCheckBoxAction()\n+    }\n+\n+    /**\n+     * Test lockUnlockNearby method to lock nearby case\n+     */\n+    @Test\n+    fun testLockUnlockNearbyForLocked() {\n+        nearbyPresenter.lockUnlockNearby(true)\n+        verify(nearbyParentFragmentView).disableFABRecenter()\n+    }\n+\n+    /**\n+     * Test lockUnlockNearby method to unlock nearby case\n+     */\n+    @Test\n+    fun testLockUnlockNearbyForUnlocked() {\n+        nearbyPresenter.lockUnlockNearby(false)\n+        verify(nearbyParentFragmentView).enableFABRecenter()\n+    }\n+\n+    /**\n+     * Test updateMapAndList method returns with zero interactions when location is locked\n+     */\n+    @Test\n+    fun testUpdateMapAndListWhenLocationLocked() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98fc8a0c294e097f398e315ad227f89ea483b5ba"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6c5796c12e3f33b9b09c5201d498df757dccd2d", "author": {"user": {"login": "neslihanturan", "name": "neslihanturan"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/c6c5796c12e3f33b9b09c5201d498df757dccd2d", "committedDate": "2020-04-20T11:16:08Z", "message": "Merge remote-tracking branch 'upstream/master' into addNearbyTests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ab622523c583d577d857ebbd7314d7c75d3f8c1", "author": {"user": {"login": "neslihanturan", "name": "neslihanturan"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/0ab622523c583d577d857ebbd7314d7c75d3f8c1", "committedDate": "2020-04-20T11:31:22Z", "message": "Revert nonneeded @VisibleForTest annotations, instead reach via lockUnlock method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86a0a93ceb7a9239f15916c8fe7d1e9e72bc0a7c", "author": {"user": {"login": "neslihanturan", "name": "neslihanturan"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/86a0a93ceb7a9239f15916c8fe7d1e9e72bc0a7c", "committedDate": "2020-04-20T15:12:15Z", "message": "Reduce code repetitions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd0b1609f3f848812d0beb05c18387d8315b0aba", "author": {"user": {"login": "neslihanturan", "name": "neslihanturan"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/cd0b1609f3f848812d0beb05c18387d8315b0aba", "committedDate": "2020-04-20T15:20:17Z", "message": "Do not call a test from another test method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NzAyNDA4", "url": "https://github.com/commons-app/apps-android-commons/pull/3615#pullrequestreview-396702408", "createdAt": "2020-04-20T18:23:16Z", "commit": {"oid": "cd0b1609f3f848812d0beb05c18387d8315b0aba"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "002ccda44b8f5fb31a459eedfff385684d7a13e9", "author": {"user": {"login": "neslihanturan", "name": "neslihanturan"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/002ccda44b8f5fb31a459eedfff385684d7a13e9", "committedDate": "2020-04-29T20:24:25Z", "message": "Add some more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3347e514ae1921ae6428bd67343f93b2f766312", "author": {"user": {"login": "neslihanturan", "name": "neslihanturan"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/e3347e514ae1921ae6428bd67343f93b2f766312", "committedDate": "2020-04-29T20:49:30Z", "message": "Fix minor issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NjkwNzE2", "url": "https://github.com/commons-app/apps-android-commons/pull/3615#pullrequestreview-405690716", "createdAt": "2020-05-05T11:11:58Z", "commit": {"oid": "e3347e514ae1921ae6428bd67343f93b2f766312"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMToxMTo1OFrOGQkqkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMToxMTo1OFrOGQkqkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAzMTEyMA==", "bodyText": "These tests still miss a lot of this method. You can use argument captors like\nval captor = ArgumentCaptor.for(View.OnCLickListener::class.java)\nverify(nearbyParentFragmentView).setFABPlusAction(captor.capture())\ncaptor.value.onClick(null)\n\nYou can also use annotations to declare an ArgumentCaptor but I wouldn't do that unless the argument captor is used in many tests", "url": "https://github.com/commons-app/apps-android-commons/pull/3615#discussion_r420031120", "createdAt": "2020-05-05T11:11:58Z", "author": {"login": "macgills"}, "path": "app/src/test/kotlin/fr/free/nrw/commons/nearby/NearbyParentFragmentPresenterTest.kt", "diffHunk": "@@ -0,0 +1,444 @@\n+package fr.free.nrw.commons.nearby\n+\n+import com.mapbox.mapboxsdk.annotations.Marker\n+import com.nhaarman.mockitokotlin2.*\n+import fr.free.nrw.commons.bookmarks.locations.BookmarkLocationsDao\n+import fr.free.nrw.commons.location.LatLng\n+import fr.free.nrw.commons.location.LocationServiceManager.LocationChangeType\n+import fr.free.nrw.commons.nearby.contract.NearbyParentFragmentContract\n+import fr.free.nrw.commons.nearby.presenter.NearbyParentFragmentPresenter\n+import org.junit.Assert.assertFalse\n+import org.junit.Assert.assertTrue\n+import org.junit.Before\n+import org.junit.Test\n+import org.mockito.Mock\n+import org.mockito.Mockito\n+import org.mockito.MockitoAnnotations\n+\n+/**\n+ * The unit test class for NearbyParentFragmentPresenter\n+ */\n+class NearbyParentFragmentPresenterTest {\n+    @Mock\n+    internal lateinit var nearbyParentFragmentView: NearbyParentFragmentContract.View\n+    @Mock\n+    internal lateinit var bookmarkLocationsDao: BookmarkLocationsDao\n+    @Mock\n+    internal lateinit var latestLocation: LatLng\n+    @Mock\n+    internal lateinit var cameraTarget: LatLng\n+    @Mock\n+    internal lateinit var selectedLabels: List<Label>\n+    @Mock\n+    internal lateinit var marker: Marker\n+\n+    private lateinit var nearbyPresenter: NearbyParentFragmentPresenter\n+    private lateinit var mapboxCameraTarget: com.mapbox.mapboxsdk.geometry.LatLng\n+\n+    /**\n+     * initial setup\n+     */\n+    @Before\n+    @Throws(Exception::class)\n+    fun setUp() {\n+        MockitoAnnotations.initMocks(this)\n+        nearbyPresenter = NearbyParentFragmentPresenter(bookmarkLocationsDao)\n+        nearbyPresenter.attachView(nearbyParentFragmentView)\n+    }\n+\n+    /**\n+     * Tests nearby operations are initialized\n+     */\n+    @Test\n+    fun testInitializeNearbyMapOperations() {\n+        nearbyPresenter.initializeMapOperations()\n+        verify(nearbyParentFragmentView).enableFABRecenter()\n+        expectMapAndListUpdate()\n+        nearbyPresenter.updateMapAndList(LocationChangeType.LOCATION_SIGNIFICANTLY_CHANGED)\n+        verify(nearbyParentFragmentView).disableFABRecenter();\n+        verify(nearbyParentFragmentView).setProgressBarVisibility(true)\n+        verify(nearbyParentFragmentView).populatePlaces(latestLocation)\n+        verify(nearbyParentFragmentView).addSearchThisAreaButtonAction()\n+        verify(nearbyParentFragmentView).setCheckBoxAction()\n+    }\n+\n+    /**\n+     * Test lockUnlockNearby method to lock nearby case\n+     */\n+    @Test\n+    fun testLockUnlockNearbyForLocked() {\n+        nearbyPresenter.lockUnlockNearby(true)\n+        verify(nearbyParentFragmentView).disableFABRecenter()\n+    }\n+\n+    /**\n+     * Test lockUnlockNearby method to unlock nearby case\n+     */\n+    @Test\n+    fun testLockUnlockNearbyForUnlocked() {\n+        nearbyPresenter.lockUnlockNearby(false)\n+        verify(nearbyParentFragmentView).enableFABRecenter()\n+    }\n+\n+    /**\n+     * Test updateMapAndList method returns with zero interactions when location is locked\n+     */\n+    @Test\n+    fun testUpdateMapAndListWhenLocationLocked() {\n+        nearbyPresenter.lockUnlockNearby(true)\n+        nearbyPresenter.updateMapAndList(null)\n+        verify(nearbyParentFragmentView).disableFABRecenter()\n+        verifyZeroInteractions(nearbyParentFragmentView)\n+    }\n+\n+    /**\n+     * Test updateMapAndList method returns with zero interactions when network connection\n+     * is not established\n+     */\n+    @Test\n+    fun testUpdateMapAndListWhenNoNetworkConnection() {\n+        nearbyPresenter.lockUnlockNearby(false)\n+        whenever(nearbyParentFragmentView.isNetworkConnectionEstablished()).thenReturn(false)\n+        nearbyPresenter.updateMapAndList(null)\n+        verify(nearbyParentFragmentView).enableFABRecenter()\n+        verify(nearbyParentFragmentView).isNetworkConnectionEstablished()\n+        verifyNoMoreInteractions(nearbyParentFragmentView)\n+    }\n+\n+    /**\n+     * Test updateMapAndList method returns with zero interactions when last location is null\n+     */\n+    @Test\n+    fun testUpdateMapAndListWhenLastLocationIsNull() {\n+        nearbyPresenter.lockUnlockNearby(false)\n+        whenever(nearbyParentFragmentView.isNetworkConnectionEstablished()).thenReturn(true)\n+        whenever(nearbyParentFragmentView.getLastLocation()).thenReturn(null)\n+        nearbyPresenter.updateMapAndList(null)\n+        verify(nearbyParentFragmentView).enableFABRecenter()\n+        verify(nearbyParentFragmentView).isNetworkConnectionEstablished()\n+        verify(nearbyParentFragmentView).getLastLocation()\n+        verifyNoMoreInteractions(nearbyParentFragmentView)\n+    }\n+\n+    /**\n+     * Test updateMapAndList method updates parent fragment view with latest location of user\n+     * at significant location change\n+     */\n+    @Test\n+    fun testPlacesPopulatedForLatestLocationWhenLocationSignificantlyChanged() {\n+        expectMapAndListUpdate()\n+        nearbyPresenter.updateMapAndList(LocationChangeType.LOCATION_SIGNIFICANTLY_CHANGED)\n+        updateMapSignificantly()\n+    }\n+\n+    /**\n+     * Test updateMapAndList method updates parent fragment view with latest location of user\n+     * at map is updated location change type\n+     */\n+    @Test\n+    fun testPlacesPopulatedForLatestLocationWhenLocationMapUpdated() {\n+        expectMapAndListUpdate()\n+        nearbyPresenter.updateMapAndList(LocationChangeType.MAP_UPDATED)\n+        updateMapSignificantly()\n+    }\n+\n+    fun updateMapSignificantly() {\n+        verify(nearbyParentFragmentView).disableFABRecenter()\n+        verify(nearbyParentFragmentView).setProgressBarVisibility(true)\n+        verify(nearbyParentFragmentView).populatePlaces(latestLocation)\n+    }\n+\n+    /**\n+     * Test updateMapAndList method updates parent fragment view with camera target location\n+     * at search custom area mode\n+     */\n+    @Test\n+    fun testPlacesPopulatedForCameraTargetLocationWhenSearchCustomArea() {\n+        expectMapAndListUpdate()\n+        whenever(nearbyParentFragmentView.getCameraTarget()).thenReturn(cameraTarget)\n+        nearbyPresenter.updateMapAndList(LocationChangeType.SEARCH_CUSTOM_AREA)\n+        verify(nearbyParentFragmentView).disableFABRecenter()\n+        verify(nearbyParentFragmentView).setProgressBarVisibility(true)\n+        verify(nearbyParentFragmentView).populatePlaces(cameraTarget)\n+    }\n+\n+    /**\n+     * Test testUpdateMapAndList tracks users location if current location marker is visible and\n+     * location is slightly changed\n+     */\n+    @Test\n+    fun testUserTrackedWhenCurrentLocationMarkerVisible() {\n+        expectMapAndListUpdate()\n+        whenever(nearbyParentFragmentView.isCurrentLocationMarkerVisible()).thenReturn(true)\n+        nearbyPresenter.updateMapAndList(LocationChangeType.LOCATION_SLIGHTLY_CHANGED)\n+        verify(nearbyParentFragmentView).recenterMap(latestLocation)\n+    }\n+\n+    /**\n+     * Test testUpdateMapAndList doesn't track users location if current location marker is\n+     * invisible and location is slightly changed\n+     */\n+    @Test\n+    fun testUserNotTrackedWhenCurrentLocationMarkerInvisible() {\n+        expectMapAndListUpdate()\n+        whenever(nearbyParentFragmentView.isCurrentLocationMarkerVisible()).thenReturn(false)\n+        nearbyPresenter.updateMapAndList(LocationChangeType.LOCATION_SLIGHTLY_CHANGED)\n+        verify(nearbyParentFragmentView).enableFABRecenter()\n+        verify(nearbyParentFragmentView).isNetworkConnectionEstablished()\n+        verify(nearbyParentFragmentView).getLastLocation()\n+        verify(nearbyParentFragmentView).isCurrentLocationMarkerVisible()\n+        verifyNoMoreInteractions(nearbyParentFragmentView)\n+    }\n+\n+    /**\n+     * Test search this area button became visible after user moved the camera target to far\n+     * away from current target. Distance between these two point is 111.19 km, so our camera target\n+     * is at outside of previously searched region if we set latestSearchRadius below 111.19. Thus,\n+     * setSearchThisAreaButtonVisibility(true) should be verified.\n+     */\n+    @Test\n+    fun testSearchThisAreaButtonVisibleWhenMoveToFarPosition() {\n+        NearbyController.latestSearchLocation = Mockito.spy(LatLng(2.0,1.0,0.0F))\n+        mapboxCameraTarget = Mockito.spy(com.mapbox.mapboxsdk.geometry.LatLng(1.0,1.0,0.0))\n+        // Distance between these two point is 111.19 km\n+        NearbyController.latestSearchRadius = 111.0*1000 // To meter\n+        whenever(nearbyParentFragmentView.isNetworkConnectionEstablished()).thenReturn(true)\n+        nearbyPresenter.onCameraMove(mapboxCameraTarget)\n+        verify(nearbyParentFragmentView).setSearchThisAreaButtonVisibility(true)\n+    }\n+\n+    /**\n+     * Test search this area button became visible after user moved the camera target to far\n+     * away from current target. Distance between these two point is 111.19 km, so our camera target\n+     * is at inside of previously searched region if we set latestSearchRadius above 111.19. Thus,\n+     * setSearchThisAreaButtonVisibility(false) should be verified.\n+     */\n+    @Test\n+    fun testSearchThisAreaButtonInvisibleWhenMoveToClosePosition() {\n+        NearbyController.latestSearchLocation = Mockito.spy(LatLng(2.0,1.0,0.0F))\n+        mapboxCameraTarget = Mockito.spy(com.mapbox.mapboxsdk.geometry.LatLng(1.0,1.0,0.0))\n+        // Distance between these two point is 111.19 km\n+        NearbyController.latestSearchRadius = 112.0*1000 // To meter\n+        whenever(nearbyParentFragmentView.isNetworkConnectionEstablished()).thenReturn(true)\n+        nearbyPresenter.onCameraMove(mapboxCameraTarget)\n+        verify(nearbyParentFragmentView).setSearchThisAreaButtonVisibility(false)\n+    }\n+\n+    /**\n+     * Multi selection should overwrite single selection of marker types. Ie. when user choose\n+     *\"parks\", then they multi select to display all or none, we overwrite previous \"park\" filter.\n+     *\n+     * We expect zero interaction from view when state is UNKNOWN\n+     */\n+    @Test\n+    fun testFilterByMarkerTypeMultiSelectUNKNOWN() {\n+        val state = CheckBoxTriStates.UNKNOWN\n+        nearbyPresenter.filterByMarkerType(selectedLabels,state,false,true)\n+        verifyZeroInteractions(nearbyParentFragmentView)\n+    }\n+\n+    /**\n+     * Multi selection should overwrite single selection of marker types. Ie. when user choose\n+     *\"parks\", then they multi select to display all or none, we overwrite previous \"park\" filter.\n+     *\n+     * We expect just filterOutAllMarkers and setRecyclerViewAdapterItemsGreyedOut is called when\n+     * the state is UNCHECKED\n+     */\n+    @Test\n+    fun testFilterByMarkerTypeMultiSelectUNCHECKED() {\n+        val state = CheckBoxTriStates.UNCHECKED\n+        nearbyPresenter.filterByMarkerType(selectedLabels,state,false,true)\n+        verify(nearbyParentFragmentView).filterOutAllMarkers()\n+        verify(nearbyParentFragmentView).setRecyclerViewAdapterItemsGreyedOut()\n+        verifyNoMoreInteractions(nearbyParentFragmentView)\n+    }\n+\n+    /**\n+     * Multi selection should overwrite single selection of marker types. Ie. when user choose\n+     *\"parks\", then they multi select to display all or none, we overwrite previous \"park\" filter.\n+     *\n+     * We expect just displayAllMarkers and setRecyclerViewAdapterAllSelected is called when\n+     * the state is CHECKED\n+     */\n+    @Test\n+    fun testFilterByMarkerTypeMultiSelectCHECKED() {\n+        val state = CheckBoxTriStates.CHECKED\n+        nearbyPresenter.filterByMarkerType(selectedLabels, state, false,true)\n+        verify(nearbyParentFragmentView).displayAllMarkers()\n+        verify(nearbyParentFragmentView).setRecyclerViewAdapterAllSelected()\n+        verifyNoMoreInteractions(nearbyParentFragmentView)\n+    }\n+\n+    /**\n+     * We expect just filterMarkersByLabels is called when filterForAllNoneType is false\n+     */\n+    @Test\n+    fun testFilterByMarkerTypeSingleSelect() {\n+        nearbyPresenter.filterByMarkerType(selectedLabels, 0, true,false)\n+        verify(nearbyParentFragmentView).filterMarkersByLabels(any(), any(), any(), any(), any());\n+        verifyNoMoreInteractions(nearbyParentFragmentView)\n+    }\n+\n+    /**\n+     * Test if bottom sheet gets hidden after search view gained focus\n+     */\n+    @Test\n+    fun testSearchViewFocusWhenBottomSheetExpanded() {\n+        whenever(nearbyParentFragmentView.isListBottomSheetExpanded()).thenReturn(true)\n+        nearbyPresenter.searchViewGainedFocus()\n+        verify(nearbyParentFragmentView).hideBottomSheet()\n+    }\n+\n+    /**\n+     * Test if bottom details sheet gets hidden after search view gained focus\n+     */\n+    @Test\n+    fun testSearchViewFocusWhenDetailsBottomSheetVisible() {\n+        whenever(nearbyParentFragmentView.isListBottomSheetExpanded()).thenReturn(false)\n+        whenever(nearbyParentFragmentView.isDetailsBottomSheetVisible()).thenReturn(true)\n+        nearbyPresenter.searchViewGainedFocus()\n+        verify(nearbyParentFragmentView).hideBottomDetailsSheet()\n+    }\n+\n+    /**\n+     * Test if the search is close to current location, when last location is null we expect it to\n+     * return true\n+     */\n+    @Test\n+    fun testSearchCloseToCurrentLocationNullLastLocation() {\n+        whenever(nearbyParentFragmentView.getLastFocusLocation()).thenReturn(null)\n+        val isClose = nearbyPresenter?.searchCloseToCurrentLocation()\n+        assertTrue(isClose!!)\n+    }\n+\n+    /**\n+     * Test if the search is close to current location, when far\n+     */\n+    @Test\n+    fun testSearchCloseToCurrentLocationWhenFar() {\n+        whenever(nearbyParentFragmentView.getLastFocusLocation()).\n+            thenReturn(com.mapbox.mapboxsdk.geometry.LatLng(1.0,1.0,0.0))\n+        whenever(nearbyParentFragmentView.getCameraTarget()).\n+                thenReturn(LatLng(2.0,1.0,0.0F))\n+        //111.19 km real distance, return false if 148306.444306 >  currentLocationSearchRadius\n+        NearbyController.currentLocationSearchRadius = 148306.0\n+        val isClose = nearbyPresenter?.searchCloseToCurrentLocation()\n+        assertFalse(isClose!!)\n+    }\n+\n+    /**\n+     * Test if the search is close to current location, when close\n+     */\n+    @Test\n+    fun testSearchCloseToCurrentLocationWhenClose() {\n+        whenever(nearbyParentFragmentView.getLastFocusLocation()).\n+            thenReturn(com.mapbox.mapboxsdk.geometry.LatLng(1.0,1.0,0.0))\n+        whenever(nearbyParentFragmentView.getCameraTarget()).\n+            thenReturn(LatLng(2.0,1.0,0.0F))\n+        //111.19 km real distance, return false if 148253.333 >  currentLocationSearchRadius\n+        NearbyController.currentLocationSearchRadius = 148307.0\n+        val isClose = nearbyPresenter?.searchCloseToCurrentLocation()\n+        assertTrue(isClose!!)\n+    }\n+\n+    fun expectMapAndListUpdate() {\n+        nearbyPresenter.lockUnlockNearby(false)\n+        whenever(nearbyParentFragmentView.isNetworkConnectionEstablished()).thenReturn(true)\n+        whenever(nearbyParentFragmentView.getLastLocation()).thenReturn(latestLocation)\n+    }\n+\n+    @Test\n+    fun testSetActionListeners() {\n+        nearbyPresenter.setActionListeners(any())\n+        verify(nearbyParentFragmentView).setFABPlusAction(any())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3347e514ae1921ae6428bd67343f93b2f766312"}, "originalPosition": 353}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1Njk0NDM1", "url": "https://github.com/commons-app/apps-android-commons/pull/3615#pullrequestreview-405694435", "createdAt": "2020-05-05T11:18:28Z", "commit": {"oid": "e3347e514ae1921ae6428bd67343f93b2f766312"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMToxODoyOVrOGQk2lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMToxODoyOVrOGQk2lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAzNDE5Ng==", "bodyText": "you would need to set your expectations first.\nIt is weird that this test calls 2 methods on nearbyPresenter when onWikidataEditSuccessful already calls updateMapAndList\nThis goes for the following tests too", "url": "https://github.com/commons-app/apps-android-commons/pull/3615#discussion_r420034196", "createdAt": "2020-05-05T11:18:29Z", "author": {"login": "macgills"}, "path": "app/src/test/kotlin/fr/free/nrw/commons/nearby/NearbyParentFragmentPresenterTest.kt", "diffHunk": "@@ -0,0 +1,444 @@\n+package fr.free.nrw.commons.nearby\n+\n+import com.mapbox.mapboxsdk.annotations.Marker\n+import com.nhaarman.mockitokotlin2.*\n+import fr.free.nrw.commons.bookmarks.locations.BookmarkLocationsDao\n+import fr.free.nrw.commons.location.LatLng\n+import fr.free.nrw.commons.location.LocationServiceManager.LocationChangeType\n+import fr.free.nrw.commons.nearby.contract.NearbyParentFragmentContract\n+import fr.free.nrw.commons.nearby.presenter.NearbyParentFragmentPresenter\n+import org.junit.Assert.assertFalse\n+import org.junit.Assert.assertTrue\n+import org.junit.Before\n+import org.junit.Test\n+import org.mockito.Mock\n+import org.mockito.Mockito\n+import org.mockito.MockitoAnnotations\n+\n+/**\n+ * The unit test class for NearbyParentFragmentPresenter\n+ */\n+class NearbyParentFragmentPresenterTest {\n+    @Mock\n+    internal lateinit var nearbyParentFragmentView: NearbyParentFragmentContract.View\n+    @Mock\n+    internal lateinit var bookmarkLocationsDao: BookmarkLocationsDao\n+    @Mock\n+    internal lateinit var latestLocation: LatLng\n+    @Mock\n+    internal lateinit var cameraTarget: LatLng\n+    @Mock\n+    internal lateinit var selectedLabels: List<Label>\n+    @Mock\n+    internal lateinit var marker: Marker\n+\n+    private lateinit var nearbyPresenter: NearbyParentFragmentPresenter\n+    private lateinit var mapboxCameraTarget: com.mapbox.mapboxsdk.geometry.LatLng\n+\n+    /**\n+     * initial setup\n+     */\n+    @Before\n+    @Throws(Exception::class)\n+    fun setUp() {\n+        MockitoAnnotations.initMocks(this)\n+        nearbyPresenter = NearbyParentFragmentPresenter(bookmarkLocationsDao)\n+        nearbyPresenter.attachView(nearbyParentFragmentView)\n+    }\n+\n+    /**\n+     * Tests nearby operations are initialized\n+     */\n+    @Test\n+    fun testInitializeNearbyMapOperations() {\n+        nearbyPresenter.initializeMapOperations()\n+        verify(nearbyParentFragmentView).enableFABRecenter()\n+        expectMapAndListUpdate()\n+        nearbyPresenter.updateMapAndList(LocationChangeType.LOCATION_SIGNIFICANTLY_CHANGED)\n+        verify(nearbyParentFragmentView).disableFABRecenter();\n+        verify(nearbyParentFragmentView).setProgressBarVisibility(true)\n+        verify(nearbyParentFragmentView).populatePlaces(latestLocation)\n+        verify(nearbyParentFragmentView).addSearchThisAreaButtonAction()\n+        verify(nearbyParentFragmentView).setCheckBoxAction()\n+    }\n+\n+    /**\n+     * Test lockUnlockNearby method to lock nearby case\n+     */\n+    @Test\n+    fun testLockUnlockNearbyForLocked() {\n+        nearbyPresenter.lockUnlockNearby(true)\n+        verify(nearbyParentFragmentView).disableFABRecenter()\n+    }\n+\n+    /**\n+     * Test lockUnlockNearby method to unlock nearby case\n+     */\n+    @Test\n+    fun testLockUnlockNearbyForUnlocked() {\n+        nearbyPresenter.lockUnlockNearby(false)\n+        verify(nearbyParentFragmentView).enableFABRecenter()\n+    }\n+\n+    /**\n+     * Test updateMapAndList method returns with zero interactions when location is locked\n+     */\n+    @Test\n+    fun testUpdateMapAndListWhenLocationLocked() {\n+        nearbyPresenter.lockUnlockNearby(true)\n+        nearbyPresenter.updateMapAndList(null)\n+        verify(nearbyParentFragmentView).disableFABRecenter()\n+        verifyZeroInteractions(nearbyParentFragmentView)\n+    }\n+\n+    /**\n+     * Test updateMapAndList method returns with zero interactions when network connection\n+     * is not established\n+     */\n+    @Test\n+    fun testUpdateMapAndListWhenNoNetworkConnection() {\n+        nearbyPresenter.lockUnlockNearby(false)\n+        whenever(nearbyParentFragmentView.isNetworkConnectionEstablished()).thenReturn(false)\n+        nearbyPresenter.updateMapAndList(null)\n+        verify(nearbyParentFragmentView).enableFABRecenter()\n+        verify(nearbyParentFragmentView).isNetworkConnectionEstablished()\n+        verifyNoMoreInteractions(nearbyParentFragmentView)\n+    }\n+\n+    /**\n+     * Test updateMapAndList method returns with zero interactions when last location is null\n+     */\n+    @Test\n+    fun testUpdateMapAndListWhenLastLocationIsNull() {\n+        nearbyPresenter.lockUnlockNearby(false)\n+        whenever(nearbyParentFragmentView.isNetworkConnectionEstablished()).thenReturn(true)\n+        whenever(nearbyParentFragmentView.getLastLocation()).thenReturn(null)\n+        nearbyPresenter.updateMapAndList(null)\n+        verify(nearbyParentFragmentView).enableFABRecenter()\n+        verify(nearbyParentFragmentView).isNetworkConnectionEstablished()\n+        verify(nearbyParentFragmentView).getLastLocation()\n+        verifyNoMoreInteractions(nearbyParentFragmentView)\n+    }\n+\n+    /**\n+     * Test updateMapAndList method updates parent fragment view with latest location of user\n+     * at significant location change\n+     */\n+    @Test\n+    fun testPlacesPopulatedForLatestLocationWhenLocationSignificantlyChanged() {\n+        expectMapAndListUpdate()\n+        nearbyPresenter.updateMapAndList(LocationChangeType.LOCATION_SIGNIFICANTLY_CHANGED)\n+        updateMapSignificantly()\n+    }\n+\n+    /**\n+     * Test updateMapAndList method updates parent fragment view with latest location of user\n+     * at map is updated location change type\n+     */\n+    @Test\n+    fun testPlacesPopulatedForLatestLocationWhenLocationMapUpdated() {\n+        expectMapAndListUpdate()\n+        nearbyPresenter.updateMapAndList(LocationChangeType.MAP_UPDATED)\n+        updateMapSignificantly()\n+    }\n+\n+    fun updateMapSignificantly() {\n+        verify(nearbyParentFragmentView).disableFABRecenter()\n+        verify(nearbyParentFragmentView).setProgressBarVisibility(true)\n+        verify(nearbyParentFragmentView).populatePlaces(latestLocation)\n+    }\n+\n+    /**\n+     * Test updateMapAndList method updates parent fragment view with camera target location\n+     * at search custom area mode\n+     */\n+    @Test\n+    fun testPlacesPopulatedForCameraTargetLocationWhenSearchCustomArea() {\n+        expectMapAndListUpdate()\n+        whenever(nearbyParentFragmentView.getCameraTarget()).thenReturn(cameraTarget)\n+        nearbyPresenter.updateMapAndList(LocationChangeType.SEARCH_CUSTOM_AREA)\n+        verify(nearbyParentFragmentView).disableFABRecenter()\n+        verify(nearbyParentFragmentView).setProgressBarVisibility(true)\n+        verify(nearbyParentFragmentView).populatePlaces(cameraTarget)\n+    }\n+\n+    /**\n+     * Test testUpdateMapAndList tracks users location if current location marker is visible and\n+     * location is slightly changed\n+     */\n+    @Test\n+    fun testUserTrackedWhenCurrentLocationMarkerVisible() {\n+        expectMapAndListUpdate()\n+        whenever(nearbyParentFragmentView.isCurrentLocationMarkerVisible()).thenReturn(true)\n+        nearbyPresenter.updateMapAndList(LocationChangeType.LOCATION_SLIGHTLY_CHANGED)\n+        verify(nearbyParentFragmentView).recenterMap(latestLocation)\n+    }\n+\n+    /**\n+     * Test testUpdateMapAndList doesn't track users location if current location marker is\n+     * invisible and location is slightly changed\n+     */\n+    @Test\n+    fun testUserNotTrackedWhenCurrentLocationMarkerInvisible() {\n+        expectMapAndListUpdate()\n+        whenever(nearbyParentFragmentView.isCurrentLocationMarkerVisible()).thenReturn(false)\n+        nearbyPresenter.updateMapAndList(LocationChangeType.LOCATION_SLIGHTLY_CHANGED)\n+        verify(nearbyParentFragmentView).enableFABRecenter()\n+        verify(nearbyParentFragmentView).isNetworkConnectionEstablished()\n+        verify(nearbyParentFragmentView).getLastLocation()\n+        verify(nearbyParentFragmentView).isCurrentLocationMarkerVisible()\n+        verifyNoMoreInteractions(nearbyParentFragmentView)\n+    }\n+\n+    /**\n+     * Test search this area button became visible after user moved the camera target to far\n+     * away from current target. Distance between these two point is 111.19 km, so our camera target\n+     * is at outside of previously searched region if we set latestSearchRadius below 111.19. Thus,\n+     * setSearchThisAreaButtonVisibility(true) should be verified.\n+     */\n+    @Test\n+    fun testSearchThisAreaButtonVisibleWhenMoveToFarPosition() {\n+        NearbyController.latestSearchLocation = Mockito.spy(LatLng(2.0,1.0,0.0F))\n+        mapboxCameraTarget = Mockito.spy(com.mapbox.mapboxsdk.geometry.LatLng(1.0,1.0,0.0))\n+        // Distance between these two point is 111.19 km\n+        NearbyController.latestSearchRadius = 111.0*1000 // To meter\n+        whenever(nearbyParentFragmentView.isNetworkConnectionEstablished()).thenReturn(true)\n+        nearbyPresenter.onCameraMove(mapboxCameraTarget)\n+        verify(nearbyParentFragmentView).setSearchThisAreaButtonVisibility(true)\n+    }\n+\n+    /**\n+     * Test search this area button became visible after user moved the camera target to far\n+     * away from current target. Distance between these two point is 111.19 km, so our camera target\n+     * is at inside of previously searched region if we set latestSearchRadius above 111.19. Thus,\n+     * setSearchThisAreaButtonVisibility(false) should be verified.\n+     */\n+    @Test\n+    fun testSearchThisAreaButtonInvisibleWhenMoveToClosePosition() {\n+        NearbyController.latestSearchLocation = Mockito.spy(LatLng(2.0,1.0,0.0F))\n+        mapboxCameraTarget = Mockito.spy(com.mapbox.mapboxsdk.geometry.LatLng(1.0,1.0,0.0))\n+        // Distance between these two point is 111.19 km\n+        NearbyController.latestSearchRadius = 112.0*1000 // To meter\n+        whenever(nearbyParentFragmentView.isNetworkConnectionEstablished()).thenReturn(true)\n+        nearbyPresenter.onCameraMove(mapboxCameraTarget)\n+        verify(nearbyParentFragmentView).setSearchThisAreaButtonVisibility(false)\n+    }\n+\n+    /**\n+     * Multi selection should overwrite single selection of marker types. Ie. when user choose\n+     *\"parks\", then they multi select to display all or none, we overwrite previous \"park\" filter.\n+     *\n+     * We expect zero interaction from view when state is UNKNOWN\n+     */\n+    @Test\n+    fun testFilterByMarkerTypeMultiSelectUNKNOWN() {\n+        val state = CheckBoxTriStates.UNKNOWN\n+        nearbyPresenter.filterByMarkerType(selectedLabels,state,false,true)\n+        verifyZeroInteractions(nearbyParentFragmentView)\n+    }\n+\n+    /**\n+     * Multi selection should overwrite single selection of marker types. Ie. when user choose\n+     *\"parks\", then they multi select to display all or none, we overwrite previous \"park\" filter.\n+     *\n+     * We expect just filterOutAllMarkers and setRecyclerViewAdapterItemsGreyedOut is called when\n+     * the state is UNCHECKED\n+     */\n+    @Test\n+    fun testFilterByMarkerTypeMultiSelectUNCHECKED() {\n+        val state = CheckBoxTriStates.UNCHECKED\n+        nearbyPresenter.filterByMarkerType(selectedLabels,state,false,true)\n+        verify(nearbyParentFragmentView).filterOutAllMarkers()\n+        verify(nearbyParentFragmentView).setRecyclerViewAdapterItemsGreyedOut()\n+        verifyNoMoreInteractions(nearbyParentFragmentView)\n+    }\n+\n+    /**\n+     * Multi selection should overwrite single selection of marker types. Ie. when user choose\n+     *\"parks\", then they multi select to display all or none, we overwrite previous \"park\" filter.\n+     *\n+     * We expect just displayAllMarkers and setRecyclerViewAdapterAllSelected is called when\n+     * the state is CHECKED\n+     */\n+    @Test\n+    fun testFilterByMarkerTypeMultiSelectCHECKED() {\n+        val state = CheckBoxTriStates.CHECKED\n+        nearbyPresenter.filterByMarkerType(selectedLabels, state, false,true)\n+        verify(nearbyParentFragmentView).displayAllMarkers()\n+        verify(nearbyParentFragmentView).setRecyclerViewAdapterAllSelected()\n+        verifyNoMoreInteractions(nearbyParentFragmentView)\n+    }\n+\n+    /**\n+     * We expect just filterMarkersByLabels is called when filterForAllNoneType is false\n+     */\n+    @Test\n+    fun testFilterByMarkerTypeSingleSelect() {\n+        nearbyPresenter.filterByMarkerType(selectedLabels, 0, true,false)\n+        verify(nearbyParentFragmentView).filterMarkersByLabels(any(), any(), any(), any(), any());\n+        verifyNoMoreInteractions(nearbyParentFragmentView)\n+    }\n+\n+    /**\n+     * Test if bottom sheet gets hidden after search view gained focus\n+     */\n+    @Test\n+    fun testSearchViewFocusWhenBottomSheetExpanded() {\n+        whenever(nearbyParentFragmentView.isListBottomSheetExpanded()).thenReturn(true)\n+        nearbyPresenter.searchViewGainedFocus()\n+        verify(nearbyParentFragmentView).hideBottomSheet()\n+    }\n+\n+    /**\n+     * Test if bottom details sheet gets hidden after search view gained focus\n+     */\n+    @Test\n+    fun testSearchViewFocusWhenDetailsBottomSheetVisible() {\n+        whenever(nearbyParentFragmentView.isListBottomSheetExpanded()).thenReturn(false)\n+        whenever(nearbyParentFragmentView.isDetailsBottomSheetVisible()).thenReturn(true)\n+        nearbyPresenter.searchViewGainedFocus()\n+        verify(nearbyParentFragmentView).hideBottomDetailsSheet()\n+    }\n+\n+    /**\n+     * Test if the search is close to current location, when last location is null we expect it to\n+     * return true\n+     */\n+    @Test\n+    fun testSearchCloseToCurrentLocationNullLastLocation() {\n+        whenever(nearbyParentFragmentView.getLastFocusLocation()).thenReturn(null)\n+        val isClose = nearbyPresenter?.searchCloseToCurrentLocation()\n+        assertTrue(isClose!!)\n+    }\n+\n+    /**\n+     * Test if the search is close to current location, when far\n+     */\n+    @Test\n+    fun testSearchCloseToCurrentLocationWhenFar() {\n+        whenever(nearbyParentFragmentView.getLastFocusLocation()).\n+            thenReturn(com.mapbox.mapboxsdk.geometry.LatLng(1.0,1.0,0.0))\n+        whenever(nearbyParentFragmentView.getCameraTarget()).\n+                thenReturn(LatLng(2.0,1.0,0.0F))\n+        //111.19 km real distance, return false if 148306.444306 >  currentLocationSearchRadius\n+        NearbyController.currentLocationSearchRadius = 148306.0\n+        val isClose = nearbyPresenter?.searchCloseToCurrentLocation()\n+        assertFalse(isClose!!)\n+    }\n+\n+    /**\n+     * Test if the search is close to current location, when close\n+     */\n+    @Test\n+    fun testSearchCloseToCurrentLocationWhenClose() {\n+        whenever(nearbyParentFragmentView.getLastFocusLocation()).\n+            thenReturn(com.mapbox.mapboxsdk.geometry.LatLng(1.0,1.0,0.0))\n+        whenever(nearbyParentFragmentView.getCameraTarget()).\n+            thenReturn(LatLng(2.0,1.0,0.0F))\n+        //111.19 km real distance, return false if 148253.333 >  currentLocationSearchRadius\n+        NearbyController.currentLocationSearchRadius = 148307.0\n+        val isClose = nearbyPresenter?.searchCloseToCurrentLocation()\n+        assertTrue(isClose!!)\n+    }\n+\n+    fun expectMapAndListUpdate() {\n+        nearbyPresenter.lockUnlockNearby(false)\n+        whenever(nearbyParentFragmentView.isNetworkConnectionEstablished()).thenReturn(true)\n+        whenever(nearbyParentFragmentView.getLastLocation()).thenReturn(latestLocation)\n+    }\n+\n+    @Test\n+    fun testSetActionListeners() {\n+        nearbyPresenter.setActionListeners(any())\n+        verify(nearbyParentFragmentView).setFABPlusAction(any())\n+        verify(nearbyParentFragmentView).setFABRecenterAction(any())\n+    }\n+\n+    @Test\n+    fun testBackButtonClickedWhenBottomSheetExpanded() {\n+        whenever(nearbyParentFragmentView.isListBottomSheetExpanded()).thenReturn(true)\n+        nearbyPresenter.backButtonClicked()\n+        verify(nearbyParentFragmentView).listOptionMenuItemClicked()\n+    }\n+\n+    @Test\n+    fun testBackButtonClickedWhenDetailsBottomSheetVisible() {\n+        whenever(nearbyParentFragmentView.isListBottomSheetExpanded()).thenReturn(false)\n+        whenever(nearbyParentFragmentView.isDetailsBottomSheetVisible()).thenReturn(true)\n+        nearbyPresenter.backButtonClicked()\n+        verify(nearbyParentFragmentView).setBottomSheetDetailsSmaller()\n+    }\n+\n+    @Test\n+    fun testBackButtonClickedWhenNoSheetVisible() {\n+        whenever(nearbyParentFragmentView.isListBottomSheetExpanded()).thenReturn(false)\n+        whenever(nearbyParentFragmentView.isDetailsBottomSheetVisible()).thenReturn(false)\n+        nearbyPresenter.backButtonClicked()\n+        verify(nearbyParentFragmentView).setTabItemContributions()\n+    }\n+\n+    @Test\n+    fun testMarkerUnselected() {\n+        nearbyPresenter.markerUnselected()\n+        verify(nearbyParentFragmentView).hideBottomSheet();\n+    }\n+\n+    @Test\n+    fun testMarkerSelected() {\n+        nearbyPresenter.markerSelected(marker)\n+        verify(nearbyParentFragmentView).displayBottomSheetWithInfo(marker)\n+    }\n+\n+    @Test\n+    fun testOnWikidataEditSuccessful() {\n+        nearbyPresenter.onWikidataEditSuccessful()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3347e514ae1921ae6428bd67343f93b2f766312"}, "originalPosition": 394}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 654, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}