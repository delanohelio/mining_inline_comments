{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNDc5NzEy", "number": 3553, "title": "#3222 Merge Structured Data branch into master", "bodyText": "Description (required)\nFixes #3222 Merge master into Structured Data branch, fix conflicts\nEdit (by misaochan) - stuff that needs to be fixed before the merge into master:\n\n Duplicate captions\n Failing uploads\n Remove http logging", "createdAt": "2020-03-20T11:23:44Z", "url": "https://github.com/commons-app/apps-android-commons/pull/3553", "merged": true, "mergeCommit": {"oid": "0f906b20c9241b5f1551f3d50901306156c3efd0"}, "closed": true, "closedAt": "2020-04-21T16:34:54Z", "author": {"login": "macgills"}, "timelineItems": {"totalCount": 50, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMRsznAH2gAyMzkxNDc5NzEyOjk0MmNlZjVkNWUyZGM4MzZiNmZjMjdkY2E2NTY1ZTU0YjhkMjZjMmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZ2WTAgFqTM5NzQ3NTExNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "942cef5d5e2dc836b6fc27dca6565e54b8d26c2e", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/942cef5d5e2dc836b6fc27dca6565e54b8d26c2e", "committedDate": "2020-03-10T12:30:30Z", "message": "#3222 Merge master into Structured Data branch, fix conflicts (#3447)\n\n* [WIP] Fixes #2942. Set 'depicts' automatically for images uploaded via 'Nearby'\r\n\r\n* Feature/refractor uploads [WIP] (#2887)\r\n\r\n* Fix duplicate param information (#2515)\r\n\r\n* Bug fix issue #2476 (#2526)\r\n\r\n* Added wikidataEntityID in all db versions, handled db.execSql via method runQuery\r\n\r\n* Versioning and changelog for v2.10.2 (#2531)\r\n\r\n* Update changelog.md\r\n\r\n* Versioning for v2.10.2\r\n\r\n* Update changelog.md\r\n\r\n* Bugfix/issue 2580 (#2584)\r\n\r\n* Corrected string placedholders in certain string files\r\n\r\n* Corrected string placedholders in certain string files[Bug fix #2580]\r\n\r\n* Bug Fix #2585 (#2647)\r\n\r\n* Bug Fix #2585\r\n* Added null checks on view in SearchImageFragment when updating views from external sources\r\n* Disposed the disposables in SearchActivity and SearchImageFragment when no longer in active lifecycle\r\n\r\n* use FragmentUtils to verify fragment active state\r\n\r\n* Bug Fix issue #2648 (#2678)\r\n\r\n* Bug Fix issue #2648\r\n* Handled external storage permission before file download\r\n\r\n* * Removed redudant check for permission in MediaDetailPagerFragment (Dexter already does that)\r\n* Removed duplicate code in PermissionUtil$checkPermissionsAndPerformAction, used the existing function with conditional extra parameters\r\n\r\n* string name typo correction\r\n\r\n* BugFix issue #2652 (#2706)\r\n\r\n* Addded null check on bookmark before operating on it\r\n\r\n* BugFix issue #2711 (#2712)\r\n\r\n* Added null checks in OkHttpJsonApiClient$searchImages MwQueryResponse\r\n\r\n* BugFix #2718 (#2719)\r\n\r\n* Handled null auth cookies\r\n\r\n* Fix #2791: NPE when nominating for deletion and leaving screen (#2792)\r\n\r\n* Bug Fix issue #2789 (#2790)\r\n\r\n* Handled Illegal State Exception for non existent appropriate view parents in ViewUtils$showShortSnackbar\r\n\r\n* BugFix #2720 (#2831)\r\n\r\nBugFix deprecated licenes #2720\r\n\r\n* ui fixes, wip, upload\r\n\r\n* *Issue #2886, BugFix #2832[wip]\r\n* updated UploadActivity code\r\n* modified ui\r\n* Updated UploadPresenterTest\r\n\r\n* * updated interfaces names to follow names suffixed with Contract\r\n* added test cases\r\n\r\n* card view elevation\r\n\r\n* view pager disabled swipe\r\n\r\n* bug fix, duplicate image\r\n\r\n* used existing non-swipable view pager\r\n\r\n* Avoid image view resize with keyboard, added adjustPan and stateVisible as softinputMode for UploadActivity\r\n\r\n* retain UploadBaseFragment instances on orientation changes\r\n\r\n* * Added test cases for UploadMediaPresenter\r\n* Injected io and main thread schedulers\r\n\r\n* categories presenter test cased wip\r\n\r\n* Added CategoriesPresenter test\r\n\r\n* * Added the logic to show open map (with to be uploaded image's coordinates while uploading image)\r\n\r\n* codacy suggested changes * added java docs\r\n\r\n* Added travis_wait fot android-wait-for-emulator\r\n\r\n* ranamed interface onResponseCallback to Callback\r\n\r\n* * Added api to delete picture in UploadModel\r\n* cleanUp in UploadModel. once upload has been initiated\r\n* Removed unused methods from UploadModel and the corresponding test class\r\n\r\n* * Added tests for UploadPresenter\r\n* Travis suggested changes\r\n* Addded copy previous title and description\r\n\r\n* * Made the upload add descriptions visible when keyboard visible\r\n* add description request focus only when user manually requests it\r\n\r\n* Added JavaDocs, review suggested changes\r\n\r\n* Fix dagger injection\r\n\r\n* use DialogUtil to show info in descriptions\r\n\r\n* use activity context for DialogUtil\r\n\r\n* Minor changes\r\n\r\n* refactored title\r\n\r\n* ui for depicts\r\n\r\n* bug fix\r\n\r\n* basic architecture for depicts\r\n\r\n* adde architecture components for depicts\r\n\r\n* [WIP] ApacheHttpClientMediaWikiApi.wikidataEditEntity: JSON param creation uses object instead of string\r\n\r\n* resolved dagger errors\r\n\r\n* multilingual captions and next button error resolved\r\n\r\n* fixed next button issues in depicts fragment\r\n\r\n* captions and depicts\r\n\r\n* resolved previous button click issues\r\n\r\n* fixed bindview error and added multi-captions\r\n\r\n* replaced description and caption with uploadmediadetail\r\n\r\n* refactored few classes\r\n\r\n* modified ui of depicts\r\n\r\n* minor fixes\r\n\r\n* Bug fix, reduced the add description edit text clickable bound (#2973)\r\n\r\n* moved depicts before categories\r\n\r\n* replaced previous filename with captions\r\n\r\n* removed time from filename\r\n\r\n* added depicts suggestions\r\n\r\n* [WIP] Wikidata Sandbox (Q4115189) test\r\n\r\n* changes layout of layout_upload_depicts\r\n\r\n* changed layout of upload_depicts\r\n\r\n* code stuck at IO_SCHEDULER\r\n\r\n* labels and description for depicts activity\r\n\r\n* Bugfix/uploads (#3000)\r\n\r\n* merged with master\r\n\r\n* BugFix IllegalStateException\r\n* setRetainState(true), not required with FragmentStatePagerAdapter\r\n* Increase the ViewPager's Offscreen Limit, we want all the fragments to be active\r\n\r\n* BugFix, clear selected categoris for previous upload session\r\n* Clear Selected Categories\r\n* Addded JavaDocs for CategoriesModel\r\n\r\n* Code Formatting in app/src/main/java/fr/free/nrw/commons/upload/UploadModel.java\r\n\r\n* Added class level JavaDoc UploadRemoteDataSource\r\n\r\n* Added class level JavaDoc for UploadRepository\r\n\r\n* Added JavaDocs for ThumbnailsAdapter\r\n\r\n* Added JavaDocs for MediaLicensePresenter, CategoriesPresenter\r\n\r\n* Removed null check on category query\r\n* Show default catgeories based on image title and gps location when category text empty\r\n* Allow search for empty category search\r\n\r\n* Attached image scale listener to upload media image\r\n\r\n* Bug fix, reduced the add description edit text clickable bound\r\n\r\n* Fix memory leak (#3001)\r\n\r\n* Bugfix/uploads (#3002)\r\n\r\n* merged with master\r\n\r\n* BugFix IllegalStateException\r\n* setRetainState(true), not required with FragmentStatePagerAdapter\r\n* Increase the ViewPager's Offscreen Limit, we want all the fragments to be active\r\n\r\n* BugFix, clear selected categoris for previous upload session\r\n* Clear Selected Categories\r\n* Addded JavaDocs for CategoriesModel\r\n\r\n* Code Formatting in app/src/main/java/fr/free/nrw/commons/upload/UploadModel.java\r\n\r\n* Added class level JavaDoc UploadRemoteDataSource\r\n\r\n* Added class level JavaDoc for UploadRepository\r\n\r\n* Added JavaDocs for ThumbnailsAdapter\r\n\r\n* Added JavaDocs for MediaLicensePresenter, CategoriesPresenter\r\n\r\n* Removed null check on category query\r\n* Show default catgeories based on image title and gps location when category text empty\r\n* Allow search for empty category search\r\n\r\n* Attached image scale listener to upload media image\r\n\r\n* Bug fix, reduced the add description edit text clickable bound\r\n\r\n* Added tooltip in Title in UploadMediaFragment\r\n\r\n* BugFix recent categories\r\n\r\n* Updated test methods\r\n\r\n* Bugfix/uploads (#3011)\r\n\r\n* merged with master\r\n\r\n* BugFix IllegalStateException\r\n* setRetainState(true), not required with FragmentStatePagerAdapter\r\n* Increase the ViewPager's Offscreen Limit, we want all the fragments to be active\r\n\r\n* BugFix, clear selected categoris for previous upload session\r\n* Clear Selected Categories\r\n* Addded JavaDocs for CategoriesModel\r\n\r\n* Code Formatting in app/src/main/java/fr/free/nrw/commons/upload/UploadModel.java\r\n\r\n* Added class level JavaDoc UploadRemoteDataSource\r\n\r\n* Added class level JavaDoc for UploadRepository\r\n\r\n* Added JavaDocs for ThumbnailsAdapter\r\n\r\n* Added JavaDocs for MediaLicensePresenter, CategoriesPresenter\r\n\r\n* Removed null check on category query\r\n* Show default catgeories based on image title and gps location when category text empty\r\n* Allow search for empty category search\r\n\r\n* Attached image scale listener to upload media image\r\n\r\n* Bug fix, reduced the add description edit text clickable bound\r\n\r\n* Added tooltip in Title in UploadMediaFragment\r\n\r\n* BugFix recent categories\r\n\r\n* Updated test methods\r\n\r\n* Avoid memory leak, free the adpater in MediaLicenseFragment.onDestroyView\r\n\r\n* bugfix/uploads (#3012)\r\n\r\n* merged with master\r\n\r\n* BugFix IllegalStateException\r\n* setRetainState(true), not required with FragmentStatePagerAdapter\r\n* Increase the ViewPager's Offscreen Limit, we want all the fragments to be active\r\n\r\n* BugFix, clear selected categoris for previous upload session\r\n* Clear Selected Categories\r\n* Addded JavaDocs for CategoriesModel\r\n\r\n* Code Formatting in app/src/main/java/fr/free/nrw/commons/upload/UploadModel.java\r\n\r\n* Added class level JavaDoc UploadRemoteDataSource\r\n\r\n* Added class level JavaDoc for UploadRepository\r\n\r\n* Added JavaDocs for ThumbnailsAdapter\r\n\r\n* Added JavaDocs for MediaLicensePresenter, CategoriesPresenter\r\n\r\n* Removed null check on category query\r\n* Show default catgeories based on image title and gps location when category text empty\r\n* Allow search for empty category search\r\n\r\n* Attached image scale listener to upload media image\r\n\r\n* Bug fix, reduced the add description edit text clickable bound\r\n\r\n* Added tooltip in Title in UploadMediaFragment\r\n\r\n* BugFix recent categories\r\n\r\n* Updated test methods\r\n\r\n* Avoid memory leak, free the adpater in MediaLicenseFragment.onDestroyView\r\n\r\n* BugFix Illegal State Exception in ViewpPagerAdapter\r\n\r\n* Remove irrelevant comment\r\n\r\n* merge conflict with strings (#3016)\r\n\r\n* [WIP] Fixed duplicated subscriprion for 'addPropertyP180'\r\n\r\n* added documentation\r\n\r\n* fixed issue #3006\r\n\r\n* resolved issue #3004\r\n\r\n* fixed issue with categoryPresenterTest.kt\r\n\r\n* send captions as labels\r\n\r\n* fixed issue with the captions\r\n\r\n* optimised imports\r\n\r\n* added upload for captions\r\n\r\n* minor changes\r\n\r\n* resolved issue with uploading captions\r\n\r\n* resolved issue with api call\r\n\r\n* uploading captions to wikibase\r\n\r\n* added some tests and documentation\r\n\r\n* undo formatting changes\r\n\r\n* uploaded captions as labels to wikibase\r\n\r\n* minor changes\r\n\r\n* resolved error with spinner adpater\r\n\r\n* adding captions to local database\r\n\r\n* Fixed issue #3035\r\n\r\n* fixed issue #3033\r\n\r\n* fixed issue #3005\r\n\r\n* fixed issue #3005\r\n\r\n* added search for depicts\r\n\r\n* fixed issue with compile time\r\n\r\n* fixe issue with project build\r\n\r\n* fixed issue #3044\r\n\r\n* merged uploading depicts into branch\r\n\r\n* uploading depicts\r\n\r\n* rebased branch\r\n\r\n* fixed crash due to depicts\r\n\r\n* modified depicts interface\r\n\r\n* Resolve merge conflicts\r\n\r\n* Fix issues with API calls\r\n\r\n* Use wikidata token\r\n\r\n* searching depictions from depicts activity\r\n\r\n* added some documentation and other changes\r\n\r\n* fixed crash on selecting depictions\r\n\r\n* sending wikidataentity id to upload depictions\r\n\r\n* added changes after review\r\n\r\n* Fixed issue with next button diabling in media detail activity\r\n\r\n* added tests for depictions\r\n\r\n* added all the unit tests and fixed few more issues\r\n\r\n* showing captions in media details\r\n\r\n* show captions in media details\r\n\r\n* added documentations and worked upon review comments\r\n\r\n* parsing response for depictions\r\n\r\n* displaying captions and depiction QID in media detail\r\n\r\n* added documentation\r\n\r\n* fetching labels from QIDs\r\n\r\n* captions working perfectly\r\n\r\n* added documentations and code cleaning\r\n\r\n* minor changes\r\n\r\n* minor changes\r\n\r\n* Showing items in explore\r\n\r\n* added search via depicts in explore\r\n\r\n* Added setOffscreenPageLimit in ViewPager\r\n\r\n* show captions in explore\r\n\r\n* show captions in home\r\n\r\n* showing depict images under items\r\n\r\n* added documentation and code refactoring\r\n\r\n* enabled pagination in depiction search\r\n\r\n* added some tests and media deatils in depiction detail activity\r\n\r\n* fixed bug with back button in media\r\n\r\n* fixed issue #3100\r\n\r\n* fixed issue #3098\r\n\r\n* fixed issue #3099\r\n\r\n* fixed issue #3104 and #3098\r\n\r\n* showing captions in place of title in home and explore:media\r\n\r\n* show captions in explore:depiction image list activity\r\n\r\n* showing depictions in media details\r\n\r\n* showing depictions in media details in production flavor\r\n\r\n* fixed issue #3108 and #3107\r\n\r\n* fix isse #3108\r\n\r\n* fixed issue #3110 and #3112\r\n\r\n* fixed issue #3113\r\n\r\n* added documentations\r\n\r\n* fixed issue #3076 and #3109\r\n\r\n* added depiction search test\r\n\r\n* fixed issue #3113\r\n\r\n* fixed issue #3111\r\n\r\n* fixed issue #3106\r\n\r\n* Showing items in explore\r\n\r\n* minor change\r\n\r\n* fixed issue #3118 and some other changes\r\n\r\n* added MVP in searchdepictionsfragment\r\n\r\n* added mvp architecture\r\n\r\n* added MVP architecture to DepictedImagesDetailsActivity\r\n\r\n* added documentation and some minor changes\r\n\r\n* added image to depicted item in search depictions\r\n\r\n* * Use callbacks from renderer to fetch thumbnails\r\n\r\n* adding fresco to load image in depictions\r\n\r\n* adding thumbnail image for depictions in upload and explore\r\n\r\n* pagination issues\r\n\r\n* fixed issue --(showing previous depiction thumbnail in explore)\r\n\r\n* Fixed the logic for pagination\r\n\r\n* hide progress on success of last page\r\n\r\n* adding sub-items and parent items to search in explore\r\n\r\n* minor changes for review comments\r\n\r\n* fixed issue #3119\r\n\r\n* fixed issue #3130\r\n\r\n* changes after review comments\r\n\r\n* showing child classes for depictions\r\n\r\n* Showing child items\r\n\r\n* showing parent classes for depicted items\r\n\r\n* adding localised search for parent and child items\r\n\r\n* clicking on any child class or parent class should call the corresponding class items\r\n\r\n* fixed issue of showing wrong thumbnail for P18 item\r\n\r\n* fixed issue #3132\r\n\r\n* added test for DepictedImagesPresenter.java\r\n\r\n* added unit tests for depicted items parent and child classes\r\n\r\n* removed unused imports and code formatting\r\n\r\n* fixed issue in search test\r\n\r\n* deleting unnecessary .attach_pid9313 file\r\n\r\n* deleting unnecessary .attach_pid9655 file\r\n\r\n* added SearchDepictionsPresenterTest\r\n\r\n* changes after review comments\r\n\r\n* updates for review comments\r\n\r\n* added more documentations\r\n\r\n* removed unused code and classes and addressed spacing changes\r\n\r\n* changes after review\r\n\r\n* fixed build issues in the app\r\n\r\n* worked on some review comments\r\n\r\n* fixed issue:wrong thumbnail appears on wikidata item\r\n\r\n* minor change\r\n\r\n* worked on some review changes\r\n\r\n* worked on review comments\r\n\r\n* minor change\r\n\r\n* addressed remaining review comments\r\n\r\n* replaced hardcoded jpgs with pageIds to fetch captions\r\n\r\n* added documentation\r\n\r\n* removed hardcoded extensions and worked on review comments\r\n\r\n* review comments\r\n\r\n* [WIP] Added Depicts values for flavors\r\n\r\n* [WIP] Minor fix\r\n\r\n* [WIP] Minor fixes\r\n\r\n* [WIP] Fixed URL\r\n\r\n* [WIP] Fixed URLs and tokens\r\n\r\n* Fixed MediaClient: added check for null in continuation store\r\n\r\n* Fixed Media::from, changed return from null to new Media()\r\n\r\n* [WIP] Merged with master\r\n\r\n* Fix #3254 Displays a proper message in explore section when no result for caption\r\n\r\n* Updated Mockito to org.mockito:mockito-inline:2.13.0\r\n\r\n* [WIP] Fixed tests after merging\r\n\r\n* [WIP] Fixed some JUnit tests\r\n\r\n* Fixed 'accessing from wrong thread' error\r\n\r\n* #3222 Delete manifest declaration of activity as fragment - stop casting MainActivity to CatgoryImagesCallback - fix tests\r\n\r\n* Remove unit test not associated with any class - make CategoryPresenterTest more idiomatic\r\n\r\n* fix compilation errors\r\n\r\nCo-authored-by: Vitaly V. Pinchuk <vetal.978@gmail.com>\r\nCo-authored-by: Ashish Kumar <ashishkumar468@gmail.com>\r\nCo-authored-by: vanshikaarora <vanshikaa937@gmail.com>\r\nCo-authored-by: Vivek Maskara <maskaravivek@gmail.com>\r\nCo-authored-by: Vanshika Arora <34261945+vanshikaarora@users.noreply.github.com>\r\nCo-authored-by: Somanshu and Himanshu <somanshS14@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66e195d88b7daa8d9722de05fd9eefccdeb21172", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/66e195d88b7daa8d9722de05fd9eefccdeb21172", "committedDate": "2020-03-18T15:12:37Z", "message": "#3482 Use Room in Structured Data branch - remove unused code (#3483)\n\n* #3482 Use Room in Structured Data branch - remove unused code\r\n\r\n* #3482 Use Room in Structured Data branch - fix unit test compilation\r\n\r\n* #3482 Use Room in Structured Data branch - add kdoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb751c6fd0aa16aab88490625fc0d07a1bd777ee", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/fb751c6fd0aa16aab88490625fc0d07a1bd777ee", "committedDate": "2020-03-19T14:51:39Z", "message": "#3490 Depiction Search in upload shows No Results before it gets results (#3491)\n\n* #3482 Use Room in Structured Data branch - remove unused code\r\n\r\n* #3482 Use Room in Structured Data branch - fix unit test compilation\r\n\r\n* #3490 Depiction Search in upload shows No Results before it gets results - stop showing error on subscription\r\n\r\n* #3490 Depiction Search in upload shows No Results before it gets results - update test cases\r\n\r\n* make labels nullable too"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "719f32c27eb05b4111f8eca3a1d31949bdb655aa", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/719f32c27eb05b4111f8eca3a1d31949bdb655aa", "committedDate": "2020-03-20T08:46:39Z", "message": "Merge remote-tracking branch 'origin/master' into structured-data\n\n# Conflicts:\n#\tapp/build.gradle\n#\tapp/src/main/java/fr/free/nrw/commons/CommonsApplication.java\n#\tapp/src/main/java/fr/free/nrw/commons/contributions/ContributionViewHolder.java\n#\tapp/src/main/java/fr/free/nrw/commons/contributions/model/DisplayableContribution.java\n#\tapp/src/main/java/fr/free/nrw/commons/upload/ImageProcessingService.java\n#\tapp/src/main/java/fr/free/nrw/commons/upload/SpinnerLanguagesAdapter.java\n#\tapp/src/main/java/fr/free/nrw/commons/upload/UploadService.java\n#\tapp/src/main/java/fr/free/nrw/commons/upload/mediaDetails/UploadMediaDetailFragment.java\n#\tapp/src/main/java/fr/free/nrw/commons/wikidata/WikidataEditService.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e992ed43176ec61425741812addd924c1a3d1493", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/e992ed43176ec61425741812addd924c1a3d1493", "committedDate": "2020-03-20T09:08:41Z", "message": "fix unit test compilation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NDAyODMw", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#pullrequestreview-378402830", "createdAt": "2020-03-20T11:23:51Z", "commit": {"oid": "e992ed43176ec61425741812addd924c1a3d1493"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02a0042d3c192f04957bba69dc8ac17e95b9fb80", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/02a0042d3c192f04957bba69dc8ac17e95b9fb80", "committedDate": "2020-03-20T11:25:49Z", "message": "Merge remote-tracking branch 'origin/master' into structured-data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc8b29b71f37e4bf09caf394b85e7e247949a7e3", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/bc8b29b71f37e4bf09caf394b85e7e247949a7e3", "committedDate": "2020-03-20T11:29:36Z", "message": "#3222 remove lingering reference to depiction content provider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1f0f4a359319b6f20af72d031207a7d183b7d4a", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/f1f0f4a359319b6f20af72d031207a7d183b7d4a", "committedDate": "2020-03-20T12:45:37Z", "message": "Fix Crash"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NDc1MDQ2", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#pullrequestreview-378475046", "createdAt": "2020-03-20T13:21:15Z", "commit": {"oid": "f1f0f4a359319b6f20af72d031207a7d183b7d4a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/1404bb0da60a745c5327b3ec438eb47ea8370010", "committedDate": "2020-03-20T14:40:13Z", "message": "Merge remote-tracking branch 'origin/master' into structured-data\n\n# Conflicts:\n#\tapp/src/main/java/fr/free/nrw/commons/di/CommonsApplicationModule.java\n#\tapp/src/main/java/fr/free/nrw/commons/repository/UploadRemoteDataSource.java\n#\tapp/src/main/java/fr/free/nrw/commons/repository/UploadRepository.java\n#\tapp/src/main/java/fr/free/nrw/commons/upload/UploadModel.java\n#\tapp/src/main/java/fr/free/nrw/commons/upload/mediaDetails/UploadMediaDetailFragment.java\n#\tapp/src/main/java/fr/free/nrw/commons/upload/mediaDetails/UploadMediaPresenter.java\n#\tapp/src/test/kotlin/fr/free/nrw/commons/upload/FileProcessorTest.kt\n#\tapp/src/test/kotlin/fr/free/nrw/commons/upload/UploadMediaPresenterTest.kt"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4OTY0MzMy", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#pullrequestreview-378964332", "createdAt": "2020-03-22T01:17:14Z", "commit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMToxNzoxNFrOF5soCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMTo1MjowNlrOF5suuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NDI5OQ==", "bodyText": "Avoid magic numbers. Define these as constants.", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396044299", "createdAt": "2020-03-22T01:17:14Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/MediaDataExtractor.java", "diffHunk": "@@ -26,23 +34,83 @@ public MediaDataExtractor(MediaClient mediaClient) {\n \n     /**\n      * Simplified method to extract all details required to show media details.\n-     * It fetches media object, deletion status and talk page for the filename\n+     * It fetches media object, deletion status, talk page and captions for the filename\n      * @param filename for which the details are to be fetched\n      * @return full Media object with all details including deletion status and talk page\n      */\n-    public Single<Media> fetchMediaDetails(String filename) {\n+    public Single<Media> fetchMediaDetails(String filename, String pageId) {\n         Single<Media> mediaSingle = getMediaFromFileName(filename);\n         Single<Boolean> pageExistsSingle = mediaClient.checkPageExistsUsingTitle(\"Commons:Deletion_requests/\" + filename);\n         Single<String> discussionSingle = getDiscussion(filename);\n-        return Single.zip(mediaSingle, pageExistsSingle, discussionSingle, (media, deletionStatus, discussion) -> {\n+        Single<String> captionSingle = getCaption(\"M\"+pageId);\n+        Single<JsonObject> depictionSingle = getDepictions(filename);\n+        return Single.zip(mediaSingle, pageExistsSingle, discussionSingle, captionSingle, depictionSingle, (media, deletionStatus, discussion, caption, depiction) -> {\n             media.setDiscussion(discussion);\n+            media.setCaption(caption);\n+            media.setDepiction(formatDepictions(depiction));\n             if (deletionStatus) {\n                 media.setRequestedDeletion();\n             }\n             return media;\n         });\n     }\n \n+    /**\n+     * Obtains captions using filename\n+     * @param wikibaseIdentifier\n+     *\n+     * @return caption for the image in user's locale\n+     * Ex: \"a nice painting\" (english locale) and \"No Caption\" in case the caption is not available for the image\n+     */\n+    private Single<String> getCaption(String wikibaseIdentifier) {\n+        return mediaClient.getCaptionByWikibaseIdentifier(wikibaseIdentifier);\n+    }\n+\n+    /**\n+     * From the Json Object extract depictions into an array list\n+     * @param mediaResponse\n+     * @return List containing map for depictions, the map has two keys,\n+     *  first key is for the label and second is for the url of the item\n+     */\n+    private ArrayList<Map<String, String>> formatDepictions(JsonObject mediaResponse) {\n+        try {\n+            JsonArray depictionArray = (JsonArray) mediaResponse.get(\"Depiction\");\n+            ArrayList<Map<String, String>> depictedItemList = new ArrayList<>();\n+            try {\n+                for (int i = 0; i <depictionArray.size() ; i++) {\n+                    JsonObject depictedItem = (JsonObject) depictionArray.get(i);\n+                    Map <String, String> depictedObject = new HashMap<>();\n+                    String label = depictedItem.get(\"label\").toString();\n+                    String id =  depictedItem.get(\"id\").toString();\n+                    String transformedLabel = label.substring(3, label.length()-3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NDQyNQ==", "bodyText": "Please add java docs", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396044425", "createdAt": "2020-03-22T01:19:40Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/db/Converters.java", "diffHunk": "@@ -73,4 +68,24 @@ public static LatLng stringToLatLng(String objectList) {\n         return objectList == null ? null : getGson().fromJson(objectList,LatLng.class);\n     }\n \n+    @TypeConverter\n+    public static String listOfMapToString(ArrayList<Map<String,String>> listOfMaps) {\n+        return listOfMaps == null ? null : getGson().toJson(listOfMaps);\n+    }\n+\n+    @TypeConverter\n+    public static ArrayList<Map<String,String>> stringToListOfMap(String listOfMaps) {\n+        return listOfMaps == null ? null :getGson().fromJson(listOfMaps,new TypeToken<ArrayList<Map<String,String>>>(){}.getType());\n+    }\n+\n+    @TypeConverter\n+    public static String mapToString(Map<String,String> map) {\n+        return map == null ? null : getGson().toJson(map);\n+    }\n+\n+    @TypeConverter\n+    public static Map<String,String> stringToMap(String map) {\n+        return map == null ? null :getGson().fromJson(map,new TypeToken<Map<String,String>>(){}.getType());\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NDQ5MQ==", "bodyText": "The prefix M is used at several places. It could be extracted out as a constant.", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396044491", "createdAt": "2020-03-22T01:21:06Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/Media/DepictedImagesFragment.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package fr.free.nrw.commons.depictions.Media;\n+\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.AbsListView;\n+import android.widget.AdapterView;\n+import android.widget.GridView;\n+import android.widget.ListAdapter;\n+import android.widget.ProgressBar;\n+import android.widget.RelativeLayout;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import butterknife.BindView;\n+import butterknife.ButterKnife;\n+import dagger.android.support.DaggerFragment;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.R;\n+import fr.free.nrw.commons.depictions.WikidataItemDetailsActivity;\n+import fr.free.nrw.commons.depictions.GridViewAdapter;\n+import fr.free.nrw.commons.utils.NetworkUtils;\n+import fr.free.nrw.commons.utils.ViewUtil;\n+\n+import static android.view.View.GONE;\n+import static android.view.View.VISIBLE;\n+\n+/**\n+ * Fragment for showing image list after selected an item from SearchActivity In Explore\n+ */\n+public class DepictedImagesFragment extends DaggerFragment implements DepictedImagesContract.View {\n+\n+\n+    @BindView(R.id.statusMessage)\n+    TextView statusTextView;\n+    @BindView(R.id.loadingImagesProgressBar)\n+    ProgressBar progressBar;\n+    @BindView(R.id.depicts_image_list)\n+    GridView gridView;\n+    @BindView(R.id.parentLayout)\n+    RelativeLayout parentLayout;\n+    @Inject\n+    DepictedImagesPresenter presenter;\n+    private GridViewAdapter gridAdapter;\n+    private String entityId = null;\n+    private boolean isLastPage;\n+    private boolean isLoading = true;\n+    private int mediaSize = 0;\n+\n+    @Nullable\n+    @Override\n+    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n+        View v = inflater.inflate(R.layout.fragment_depict_image, container, false);\n+        ButterKnife.bind(this, v);\n+        presenter.onAttachView(this);\n+        return v;\n+    }\n+\n+    @Override\n+    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n+        super.onViewCreated(view, savedInstanceState);\n+        gridView.setOnItemClickListener((AdapterView.OnItemClickListener) getActivity());\n+        initViews();\n+    }\n+\n+    /**\n+     * Initializes the UI elements for the fragment\n+     * Setup the grid view to and scroll listener for it\n+     */\n+    private void initViews() {\n+        String depictsName = getArguments().getString(\"wikidataItemName\");\n+        entityId = getArguments().getString(\"entityId\");\n+        if (getArguments() != null && depictsName != null) {\n+            initList();\n+            setScrollListener();\n+        }\n+    }\n+\n+    private void initList() {\n+        presenter.initList(entityId);\n+        if (!NetworkUtils.isInternetConnectionEstablished(getContext())) {\n+            handleNoInternet();\n+        } else presenter.initList(entityId);\n+    }\n+\n+    /**\n+     * Handles the UI updates for no internet scenario\n+     */\n+    @Override\n+    public void handleNoInternet() {\n+        progressBar.setVisibility(GONE);\n+        if (gridAdapter == null || gridAdapter.isEmpty()) {\n+            statusTextView.setVisibility(VISIBLE);\n+            statusTextView.setText(getString(R.string.no_internet));\n+        } else {\n+            ViewUtil.showShortSnackbar(parentLayout, R.string.no_internet);\n+        }\n+    }\n+\n+    /**\n+     * Handles the UI updates for a error scenario\n+     */\n+    @Override\n+    public void initErrorView() {\n+        progressBar.setVisibility(GONE);\n+        if (gridAdapter == null || gridAdapter.isEmpty()) {\n+            statusTextView.setVisibility(VISIBLE);\n+            statusTextView.setText(getString(R.string.no_images_found));\n+        } else {\n+            statusTextView.setVisibility(GONE);\n+        }\n+    }\n+\n+    /**\n+     * Sets the scroll listener for the grid view so that more images are fetched when the user scrolls down\n+     * Checks if the item has more images before loading\n+     * Also checks whether images are currently being fetched before triggering another request\n+     */\n+    private void setScrollListener() {\n+        gridView.setOnScrollListener(new AbsListView.OnScrollListener() {\n+            @Override\n+            public void onScrollStateChanged(AbsListView view, int scrollState) {\n+            }\n+\n+            @Override\n+            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {\n+                if (!isLastPage && !isLoading && (firstVisibleItem + visibleItemCount >= totalItemCount)) {\n+                    isLoading = true;\n+                    if (!NetworkUtils.isInternetConnectionEstablished(getContext())) {\n+                        handleNoInternet();\n+                    } else {\n+                        presenter.fetchMoreImages();\n+                    }\n+                }\n+                if (isLastPage) {\n+                    progressBar.setVisibility(GONE);\n+                }\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Seat caption to the image at the given position\n+     */\n+    @Override\n+    public void handleLabelforImage(String s, int position) {\n+        if (!s.trim().equals(getString(R.string.detail_caption_empty))) {\n+            gridAdapter.getItem(position).setThumbnailTitle(s);\n+            gridAdapter.notifyDataSetChanged();\n+        }\n+    }\n+\n+    /**\n+     * Display snackbar\n+     */\n+    @Override\n+    public void showSnackBar() {\n+        ViewUtil.showShortSnackbar(parentLayout, R.string.error_loading_images);\n+    }\n+\n+    /**\n+     * Set visibility of progressbar depending on the boolean value\n+     */\n+    @Override\n+    public void progressBarVisible(Boolean value) {\n+        if (value) {\n+            progressBar.setVisibility(VISIBLE);\n+        } else {\n+            progressBar.setVisibility(GONE);\n+        }\n+    }\n+\n+    /**\n+     * It return an instance of gridView adapter which helps in extracting media details\n+     * used by the gridView\n+     *\n+     * @return GridView Adapter\n+     */\n+    @Override\n+    public ListAdapter getAdapter() {\n+        return gridAdapter;\n+    }\n+\n+    /**\n+     * Initializes the adapter with a list of Media objects\n+     *\n+     * @param mediaList List of new Media to be displayed\n+     */\n+    @Override\n+    public void setAdapter(List<Media> mediaList) {\n+        gridAdapter = new fr.free.nrw.commons.depictions.GridViewAdapter(getContext(), R.layout.layout_depict_image, mediaList);\n+        gridView.setAdapter(gridAdapter);\n+    }\n+\n+    /**\n+     * adds list to adapter\n+     */\n+    @Override\n+    public void addItemsToAdapter(List<Media> media) {\n+        gridAdapter.addAll(media);\n+        gridAdapter.notifyDataSetChanged();\n+    }\n+\n+    /**\n+     * Sets loading status depending on the boolean value\n+     */\n+    @Override\n+    public void setLoadingStatus(Boolean value) {\n+        if (!value) {\n+            statusTextView.setVisibility(GONE);\n+        }\n+        isLoading = value;\n+    }\n+\n+    /**\n+     * Inform the view that there are no more items to be loaded for this search query\n+     * or reset the isLastPage for the current query\n+     * @param isLastPage\n+     */\n+    @Override\n+    public void setIsLastPage(boolean isLastPage) {\n+        this.isLastPage=isLastPage;\n+        progressBar.setVisibility(GONE);\n+    }\n+\n+\n+    /**\n+     * Handles the success scenario\n+     * On first load, it initializes the grid view. On subsequent loads, it adds items to the adapter\n+     *\n+     * @param collection List of new Media to be displayed\n+     */\n+    @Override\n+    public void handleSuccess(List<Media> collection) {\n+       presenter.addItemsToQueryList(collection);\n+        if (gridAdapter == null) {\n+            setAdapter(collection);\n+        } else {\n+            if (gridAdapter.containsAll(collection)) {\n+                return;\n+            }\n+            gridAdapter.addItems(collection);\n+\n+            try {\n+                ((WikidataItemDetailsActivity) getContext()).viewPagerNotifyDataSetChanged();\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+            }\n+        }\n+        progressBar.setVisibility(GONE);\n+        isLoading = false;\n+        statusTextView.setVisibility(GONE);\n+        for (Media m : collection) {\n+            presenter.replaceTitlesWithCaptions(\"M\"+m.getPageId(), mediaSize++);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 261}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NDUyMQ==", "bodyText": "Wrap in braces", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396044521", "createdAt": "2020-03-22T01:22:02Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/Media/DepictedImagesFragment.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package fr.free.nrw.commons.depictions.Media;\n+\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.AbsListView;\n+import android.widget.AdapterView;\n+import android.widget.GridView;\n+import android.widget.ListAdapter;\n+import android.widget.ProgressBar;\n+import android.widget.RelativeLayout;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import butterknife.BindView;\n+import butterknife.ButterKnife;\n+import dagger.android.support.DaggerFragment;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.R;\n+import fr.free.nrw.commons.depictions.WikidataItemDetailsActivity;\n+import fr.free.nrw.commons.depictions.GridViewAdapter;\n+import fr.free.nrw.commons.utils.NetworkUtils;\n+import fr.free.nrw.commons.utils.ViewUtil;\n+\n+import static android.view.View.GONE;\n+import static android.view.View.VISIBLE;\n+\n+/**\n+ * Fragment for showing image list after selected an item from SearchActivity In Explore\n+ */\n+public class DepictedImagesFragment extends DaggerFragment implements DepictedImagesContract.View {\n+\n+\n+    @BindView(R.id.statusMessage)\n+    TextView statusTextView;\n+    @BindView(R.id.loadingImagesProgressBar)\n+    ProgressBar progressBar;\n+    @BindView(R.id.depicts_image_list)\n+    GridView gridView;\n+    @BindView(R.id.parentLayout)\n+    RelativeLayout parentLayout;\n+    @Inject\n+    DepictedImagesPresenter presenter;\n+    private GridViewAdapter gridAdapter;\n+    private String entityId = null;\n+    private boolean isLastPage;\n+    private boolean isLoading = true;\n+    private int mediaSize = 0;\n+\n+    @Nullable\n+    @Override\n+    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n+        View v = inflater.inflate(R.layout.fragment_depict_image, container, false);\n+        ButterKnife.bind(this, v);\n+        presenter.onAttachView(this);\n+        return v;\n+    }\n+\n+    @Override\n+    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n+        super.onViewCreated(view, savedInstanceState);\n+        gridView.setOnItemClickListener((AdapterView.OnItemClickListener) getActivity());\n+        initViews();\n+    }\n+\n+    /**\n+     * Initializes the UI elements for the fragment\n+     * Setup the grid view to and scroll listener for it\n+     */\n+    private void initViews() {\n+        String depictsName = getArguments().getString(\"wikidataItemName\");\n+        entityId = getArguments().getString(\"entityId\");\n+        if (getArguments() != null && depictsName != null) {\n+            initList();\n+            setScrollListener();\n+        }\n+    }\n+\n+    private void initList() {\n+        presenter.initList(entityId);\n+        if (!NetworkUtils.isInternetConnectionEstablished(getContext())) {\n+            handleNoInternet();\n+        } else presenter.initList(entityId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NDU2OQ==", "bodyText": "Please use a meaningful variable name instead of s.", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396044569", "createdAt": "2020-03-22T01:22:46Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/Media/DepictedImagesFragment.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package fr.free.nrw.commons.depictions.Media;\n+\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.AbsListView;\n+import android.widget.AdapterView;\n+import android.widget.GridView;\n+import android.widget.ListAdapter;\n+import android.widget.ProgressBar;\n+import android.widget.RelativeLayout;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import butterknife.BindView;\n+import butterknife.ButterKnife;\n+import dagger.android.support.DaggerFragment;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.R;\n+import fr.free.nrw.commons.depictions.WikidataItemDetailsActivity;\n+import fr.free.nrw.commons.depictions.GridViewAdapter;\n+import fr.free.nrw.commons.utils.NetworkUtils;\n+import fr.free.nrw.commons.utils.ViewUtil;\n+\n+import static android.view.View.GONE;\n+import static android.view.View.VISIBLE;\n+\n+/**\n+ * Fragment for showing image list after selected an item from SearchActivity In Explore\n+ */\n+public class DepictedImagesFragment extends DaggerFragment implements DepictedImagesContract.View {\n+\n+\n+    @BindView(R.id.statusMessage)\n+    TextView statusTextView;\n+    @BindView(R.id.loadingImagesProgressBar)\n+    ProgressBar progressBar;\n+    @BindView(R.id.depicts_image_list)\n+    GridView gridView;\n+    @BindView(R.id.parentLayout)\n+    RelativeLayout parentLayout;\n+    @Inject\n+    DepictedImagesPresenter presenter;\n+    private GridViewAdapter gridAdapter;\n+    private String entityId = null;\n+    private boolean isLastPage;\n+    private boolean isLoading = true;\n+    private int mediaSize = 0;\n+\n+    @Nullable\n+    @Override\n+    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n+        View v = inflater.inflate(R.layout.fragment_depict_image, container, false);\n+        ButterKnife.bind(this, v);\n+        presenter.onAttachView(this);\n+        return v;\n+    }\n+\n+    @Override\n+    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n+        super.onViewCreated(view, savedInstanceState);\n+        gridView.setOnItemClickListener((AdapterView.OnItemClickListener) getActivity());\n+        initViews();\n+    }\n+\n+    /**\n+     * Initializes the UI elements for the fragment\n+     * Setup the grid view to and scroll listener for it\n+     */\n+    private void initViews() {\n+        String depictsName = getArguments().getString(\"wikidataItemName\");\n+        entityId = getArguments().getString(\"entityId\");\n+        if (getArguments() != null && depictsName != null) {\n+            initList();\n+            setScrollListener();\n+        }\n+    }\n+\n+    private void initList() {\n+        presenter.initList(entityId);\n+        if (!NetworkUtils.isInternetConnectionEstablished(getContext())) {\n+            handleNoInternet();\n+        } else presenter.initList(entityId);\n+    }\n+\n+    /**\n+     * Handles the UI updates for no internet scenario\n+     */\n+    @Override\n+    public void handleNoInternet() {\n+        progressBar.setVisibility(GONE);\n+        if (gridAdapter == null || gridAdapter.isEmpty()) {\n+            statusTextView.setVisibility(VISIBLE);\n+            statusTextView.setText(getString(R.string.no_internet));\n+        } else {\n+            ViewUtil.showShortSnackbar(parentLayout, R.string.no_internet);\n+        }\n+    }\n+\n+    /**\n+     * Handles the UI updates for a error scenario\n+     */\n+    @Override\n+    public void initErrorView() {\n+        progressBar.setVisibility(GONE);\n+        if (gridAdapter == null || gridAdapter.isEmpty()) {\n+            statusTextView.setVisibility(VISIBLE);\n+            statusTextView.setText(getString(R.string.no_images_found));\n+        } else {\n+            statusTextView.setVisibility(GONE);\n+        }\n+    }\n+\n+    /**\n+     * Sets the scroll listener for the grid view so that more images are fetched when the user scrolls down\n+     * Checks if the item has more images before loading\n+     * Also checks whether images are currently being fetched before triggering another request\n+     */\n+    private void setScrollListener() {\n+        gridView.setOnScrollListener(new AbsListView.OnScrollListener() {\n+            @Override\n+            public void onScrollStateChanged(AbsListView view, int scrollState) {\n+            }\n+\n+            @Override\n+            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {\n+                if (!isLastPage && !isLoading && (firstVisibleItem + visibleItemCount >= totalItemCount)) {\n+                    isLoading = true;\n+                    if (!NetworkUtils.isInternetConnectionEstablished(getContext())) {\n+                        handleNoInternet();\n+                    } else {\n+                        presenter.fetchMoreImages();\n+                    }\n+                }\n+                if (isLastPage) {\n+                    progressBar.setVisibility(GONE);\n+                }\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Seat caption to the image at the given position\n+     */\n+    @Override\n+    public void handleLabelforImage(String s, int position) {\n+        if (!s.trim().equals(getString(R.string.detail_caption_empty))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NDYwNA==", "bodyText": "Why are we trying to catch all exceptions here?", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396044604", "createdAt": "2020-03-22T01:23:23Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/Media/DepictedImagesFragment.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package fr.free.nrw.commons.depictions.Media;\n+\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.AbsListView;\n+import android.widget.AdapterView;\n+import android.widget.GridView;\n+import android.widget.ListAdapter;\n+import android.widget.ProgressBar;\n+import android.widget.RelativeLayout;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import butterknife.BindView;\n+import butterknife.ButterKnife;\n+import dagger.android.support.DaggerFragment;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.R;\n+import fr.free.nrw.commons.depictions.WikidataItemDetailsActivity;\n+import fr.free.nrw.commons.depictions.GridViewAdapter;\n+import fr.free.nrw.commons.utils.NetworkUtils;\n+import fr.free.nrw.commons.utils.ViewUtil;\n+\n+import static android.view.View.GONE;\n+import static android.view.View.VISIBLE;\n+\n+/**\n+ * Fragment for showing image list after selected an item from SearchActivity In Explore\n+ */\n+public class DepictedImagesFragment extends DaggerFragment implements DepictedImagesContract.View {\n+\n+\n+    @BindView(R.id.statusMessage)\n+    TextView statusTextView;\n+    @BindView(R.id.loadingImagesProgressBar)\n+    ProgressBar progressBar;\n+    @BindView(R.id.depicts_image_list)\n+    GridView gridView;\n+    @BindView(R.id.parentLayout)\n+    RelativeLayout parentLayout;\n+    @Inject\n+    DepictedImagesPresenter presenter;\n+    private GridViewAdapter gridAdapter;\n+    private String entityId = null;\n+    private boolean isLastPage;\n+    private boolean isLoading = true;\n+    private int mediaSize = 0;\n+\n+    @Nullable\n+    @Override\n+    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n+        View v = inflater.inflate(R.layout.fragment_depict_image, container, false);\n+        ButterKnife.bind(this, v);\n+        presenter.onAttachView(this);\n+        return v;\n+    }\n+\n+    @Override\n+    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n+        super.onViewCreated(view, savedInstanceState);\n+        gridView.setOnItemClickListener((AdapterView.OnItemClickListener) getActivity());\n+        initViews();\n+    }\n+\n+    /**\n+     * Initializes the UI elements for the fragment\n+     * Setup the grid view to and scroll listener for it\n+     */\n+    private void initViews() {\n+        String depictsName = getArguments().getString(\"wikidataItemName\");\n+        entityId = getArguments().getString(\"entityId\");\n+        if (getArguments() != null && depictsName != null) {\n+            initList();\n+            setScrollListener();\n+        }\n+    }\n+\n+    private void initList() {\n+        presenter.initList(entityId);\n+        if (!NetworkUtils.isInternetConnectionEstablished(getContext())) {\n+            handleNoInternet();\n+        } else presenter.initList(entityId);\n+    }\n+\n+    /**\n+     * Handles the UI updates for no internet scenario\n+     */\n+    @Override\n+    public void handleNoInternet() {\n+        progressBar.setVisibility(GONE);\n+        if (gridAdapter == null || gridAdapter.isEmpty()) {\n+            statusTextView.setVisibility(VISIBLE);\n+            statusTextView.setText(getString(R.string.no_internet));\n+        } else {\n+            ViewUtil.showShortSnackbar(parentLayout, R.string.no_internet);\n+        }\n+    }\n+\n+    /**\n+     * Handles the UI updates for a error scenario\n+     */\n+    @Override\n+    public void initErrorView() {\n+        progressBar.setVisibility(GONE);\n+        if (gridAdapter == null || gridAdapter.isEmpty()) {\n+            statusTextView.setVisibility(VISIBLE);\n+            statusTextView.setText(getString(R.string.no_images_found));\n+        } else {\n+            statusTextView.setVisibility(GONE);\n+        }\n+    }\n+\n+    /**\n+     * Sets the scroll listener for the grid view so that more images are fetched when the user scrolls down\n+     * Checks if the item has more images before loading\n+     * Also checks whether images are currently being fetched before triggering another request\n+     */\n+    private void setScrollListener() {\n+        gridView.setOnScrollListener(new AbsListView.OnScrollListener() {\n+            @Override\n+            public void onScrollStateChanged(AbsListView view, int scrollState) {\n+            }\n+\n+            @Override\n+            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {\n+                if (!isLastPage && !isLoading && (firstVisibleItem + visibleItemCount >= totalItemCount)) {\n+                    isLoading = true;\n+                    if (!NetworkUtils.isInternetConnectionEstablished(getContext())) {\n+                        handleNoInternet();\n+                    } else {\n+                        presenter.fetchMoreImages();\n+                    }\n+                }\n+                if (isLastPage) {\n+                    progressBar.setVisibility(GONE);\n+                }\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Seat caption to the image at the given position\n+     */\n+    @Override\n+    public void handleLabelforImage(String s, int position) {\n+        if (!s.trim().equals(getString(R.string.detail_caption_empty))) {\n+            gridAdapter.getItem(position).setThumbnailTitle(s);\n+            gridAdapter.notifyDataSetChanged();\n+        }\n+    }\n+\n+    /**\n+     * Display snackbar\n+     */\n+    @Override\n+    public void showSnackBar() {\n+        ViewUtil.showShortSnackbar(parentLayout, R.string.error_loading_images);\n+    }\n+\n+    /**\n+     * Set visibility of progressbar depending on the boolean value\n+     */\n+    @Override\n+    public void progressBarVisible(Boolean value) {\n+        if (value) {\n+            progressBar.setVisibility(VISIBLE);\n+        } else {\n+            progressBar.setVisibility(GONE);\n+        }\n+    }\n+\n+    /**\n+     * It return an instance of gridView adapter which helps in extracting media details\n+     * used by the gridView\n+     *\n+     * @return GridView Adapter\n+     */\n+    @Override\n+    public ListAdapter getAdapter() {\n+        return gridAdapter;\n+    }\n+\n+    /**\n+     * Initializes the adapter with a list of Media objects\n+     *\n+     * @param mediaList List of new Media to be displayed\n+     */\n+    @Override\n+    public void setAdapter(List<Media> mediaList) {\n+        gridAdapter = new fr.free.nrw.commons.depictions.GridViewAdapter(getContext(), R.layout.layout_depict_image, mediaList);\n+        gridView.setAdapter(gridAdapter);\n+    }\n+\n+    /**\n+     * adds list to adapter\n+     */\n+    @Override\n+    public void addItemsToAdapter(List<Media> media) {\n+        gridAdapter.addAll(media);\n+        gridAdapter.notifyDataSetChanged();\n+    }\n+\n+    /**\n+     * Sets loading status depending on the boolean value\n+     */\n+    @Override\n+    public void setLoadingStatus(Boolean value) {\n+        if (!value) {\n+            statusTextView.setVisibility(GONE);\n+        }\n+        isLoading = value;\n+    }\n+\n+    /**\n+     * Inform the view that there are no more items to be loaded for this search query\n+     * or reset the isLastPage for the current query\n+     * @param isLastPage\n+     */\n+    @Override\n+    public void setIsLastPage(boolean isLastPage) {\n+        this.isLastPage=isLastPage;\n+        progressBar.setVisibility(GONE);\n+    }\n+\n+\n+    /**\n+     * Handles the success scenario\n+     * On first load, it initializes the grid view. On subsequent loads, it adds items to the adapter\n+     *\n+     * @param collection List of new Media to be displayed\n+     */\n+    @Override\n+    public void handleSuccess(List<Media> collection) {\n+       presenter.addItemsToQueryList(collection);\n+        if (gridAdapter == null) {\n+            setAdapter(collection);\n+        } else {\n+            if (gridAdapter.containsAll(collection)) {\n+                return;\n+            }\n+            gridAdapter.addItems(collection);\n+\n+            try {\n+                ((WikidataItemDetailsActivity) getContext()).viewPagerNotifyDataSetChanged();\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NDYyOQ==", "bodyText": "Use timber log", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396044629", "createdAt": "2020-03-22T01:23:40Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/Media/DepictedImagesFragment.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package fr.free.nrw.commons.depictions.Media;\n+\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.AbsListView;\n+import android.widget.AdapterView;\n+import android.widget.GridView;\n+import android.widget.ListAdapter;\n+import android.widget.ProgressBar;\n+import android.widget.RelativeLayout;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import butterknife.BindView;\n+import butterknife.ButterKnife;\n+import dagger.android.support.DaggerFragment;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.R;\n+import fr.free.nrw.commons.depictions.WikidataItemDetailsActivity;\n+import fr.free.nrw.commons.depictions.GridViewAdapter;\n+import fr.free.nrw.commons.utils.NetworkUtils;\n+import fr.free.nrw.commons.utils.ViewUtil;\n+\n+import static android.view.View.GONE;\n+import static android.view.View.VISIBLE;\n+\n+/**\n+ * Fragment for showing image list after selected an item from SearchActivity In Explore\n+ */\n+public class DepictedImagesFragment extends DaggerFragment implements DepictedImagesContract.View {\n+\n+\n+    @BindView(R.id.statusMessage)\n+    TextView statusTextView;\n+    @BindView(R.id.loadingImagesProgressBar)\n+    ProgressBar progressBar;\n+    @BindView(R.id.depicts_image_list)\n+    GridView gridView;\n+    @BindView(R.id.parentLayout)\n+    RelativeLayout parentLayout;\n+    @Inject\n+    DepictedImagesPresenter presenter;\n+    private GridViewAdapter gridAdapter;\n+    private String entityId = null;\n+    private boolean isLastPage;\n+    private boolean isLoading = true;\n+    private int mediaSize = 0;\n+\n+    @Nullable\n+    @Override\n+    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n+        View v = inflater.inflate(R.layout.fragment_depict_image, container, false);\n+        ButterKnife.bind(this, v);\n+        presenter.onAttachView(this);\n+        return v;\n+    }\n+\n+    @Override\n+    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n+        super.onViewCreated(view, savedInstanceState);\n+        gridView.setOnItemClickListener((AdapterView.OnItemClickListener) getActivity());\n+        initViews();\n+    }\n+\n+    /**\n+     * Initializes the UI elements for the fragment\n+     * Setup the grid view to and scroll listener for it\n+     */\n+    private void initViews() {\n+        String depictsName = getArguments().getString(\"wikidataItemName\");\n+        entityId = getArguments().getString(\"entityId\");\n+        if (getArguments() != null && depictsName != null) {\n+            initList();\n+            setScrollListener();\n+        }\n+    }\n+\n+    private void initList() {\n+        presenter.initList(entityId);\n+        if (!NetworkUtils.isInternetConnectionEstablished(getContext())) {\n+            handleNoInternet();\n+        } else presenter.initList(entityId);\n+    }\n+\n+    /**\n+     * Handles the UI updates for no internet scenario\n+     */\n+    @Override\n+    public void handleNoInternet() {\n+        progressBar.setVisibility(GONE);\n+        if (gridAdapter == null || gridAdapter.isEmpty()) {\n+            statusTextView.setVisibility(VISIBLE);\n+            statusTextView.setText(getString(R.string.no_internet));\n+        } else {\n+            ViewUtil.showShortSnackbar(parentLayout, R.string.no_internet);\n+        }\n+    }\n+\n+    /**\n+     * Handles the UI updates for a error scenario\n+     */\n+    @Override\n+    public void initErrorView() {\n+        progressBar.setVisibility(GONE);\n+        if (gridAdapter == null || gridAdapter.isEmpty()) {\n+            statusTextView.setVisibility(VISIBLE);\n+            statusTextView.setText(getString(R.string.no_images_found));\n+        } else {\n+            statusTextView.setVisibility(GONE);\n+        }\n+    }\n+\n+    /**\n+     * Sets the scroll listener for the grid view so that more images are fetched when the user scrolls down\n+     * Checks if the item has more images before loading\n+     * Also checks whether images are currently being fetched before triggering another request\n+     */\n+    private void setScrollListener() {\n+        gridView.setOnScrollListener(new AbsListView.OnScrollListener() {\n+            @Override\n+            public void onScrollStateChanged(AbsListView view, int scrollState) {\n+            }\n+\n+            @Override\n+            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {\n+                if (!isLastPage && !isLoading && (firstVisibleItem + visibleItemCount >= totalItemCount)) {\n+                    isLoading = true;\n+                    if (!NetworkUtils.isInternetConnectionEstablished(getContext())) {\n+                        handleNoInternet();\n+                    } else {\n+                        presenter.fetchMoreImages();\n+                    }\n+                }\n+                if (isLastPage) {\n+                    progressBar.setVisibility(GONE);\n+                }\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Seat caption to the image at the given position\n+     */\n+    @Override\n+    public void handleLabelforImage(String s, int position) {\n+        if (!s.trim().equals(getString(R.string.detail_caption_empty))) {\n+            gridAdapter.getItem(position).setThumbnailTitle(s);\n+            gridAdapter.notifyDataSetChanged();\n+        }\n+    }\n+\n+    /**\n+     * Display snackbar\n+     */\n+    @Override\n+    public void showSnackBar() {\n+        ViewUtil.showShortSnackbar(parentLayout, R.string.error_loading_images);\n+    }\n+\n+    /**\n+     * Set visibility of progressbar depending on the boolean value\n+     */\n+    @Override\n+    public void progressBarVisible(Boolean value) {\n+        if (value) {\n+            progressBar.setVisibility(VISIBLE);\n+        } else {\n+            progressBar.setVisibility(GONE);\n+        }\n+    }\n+\n+    /**\n+     * It return an instance of gridView adapter which helps in extracting media details\n+     * used by the gridView\n+     *\n+     * @return GridView Adapter\n+     */\n+    @Override\n+    public ListAdapter getAdapter() {\n+        return gridAdapter;\n+    }\n+\n+    /**\n+     * Initializes the adapter with a list of Media objects\n+     *\n+     * @param mediaList List of new Media to be displayed\n+     */\n+    @Override\n+    public void setAdapter(List<Media> mediaList) {\n+        gridAdapter = new fr.free.nrw.commons.depictions.GridViewAdapter(getContext(), R.layout.layout_depict_image, mediaList);\n+        gridView.setAdapter(gridAdapter);\n+    }\n+\n+    /**\n+     * adds list to adapter\n+     */\n+    @Override\n+    public void addItemsToAdapter(List<Media> media) {\n+        gridAdapter.addAll(media);\n+        gridAdapter.notifyDataSetChanged();\n+    }\n+\n+    /**\n+     * Sets loading status depending on the boolean value\n+     */\n+    @Override\n+    public void setLoadingStatus(Boolean value) {\n+        if (!value) {\n+            statusTextView.setVisibility(GONE);\n+        }\n+        isLoading = value;\n+    }\n+\n+    /**\n+     * Inform the view that there are no more items to be loaded for this search query\n+     * or reset the isLastPage for the current query\n+     * @param isLastPage\n+     */\n+    @Override\n+    public void setIsLastPage(boolean isLastPage) {\n+        this.isLastPage=isLastPage;\n+        progressBar.setVisibility(GONE);\n+    }\n+\n+\n+    /**\n+     * Handles the success scenario\n+     * On first load, it initializes the grid view. On subsequent loads, it adds items to the adapter\n+     *\n+     * @param collection List of new Media to be displayed\n+     */\n+    @Override\n+    public void handleSuccess(List<Media> collection) {\n+       presenter.addItemsToQueryList(collection);\n+        if (gridAdapter == null) {\n+            setAdapter(collection);\n+        } else {\n+            if (gridAdapter.containsAll(collection)) {\n+                return;\n+            }\n+            gridAdapter.addItems(collection);\n+\n+            try {\n+                ((WikidataItemDetailsActivity) getContext()).viewPagerNotifyDataSetChanged();\n+            } catch (Exception e) {\n+                e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 254}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NDYzNg==", "bodyText": "Variable name", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396044636", "createdAt": "2020-03-22T01:23:52Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/Media/DepictedImagesFragment.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package fr.free.nrw.commons.depictions.Media;\n+\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.AbsListView;\n+import android.widget.AdapterView;\n+import android.widget.GridView;\n+import android.widget.ListAdapter;\n+import android.widget.ProgressBar;\n+import android.widget.RelativeLayout;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import butterknife.BindView;\n+import butterknife.ButterKnife;\n+import dagger.android.support.DaggerFragment;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.R;\n+import fr.free.nrw.commons.depictions.WikidataItemDetailsActivity;\n+import fr.free.nrw.commons.depictions.GridViewAdapter;\n+import fr.free.nrw.commons.utils.NetworkUtils;\n+import fr.free.nrw.commons.utils.ViewUtil;\n+\n+import static android.view.View.GONE;\n+import static android.view.View.VISIBLE;\n+\n+/**\n+ * Fragment for showing image list after selected an item from SearchActivity In Explore\n+ */\n+public class DepictedImagesFragment extends DaggerFragment implements DepictedImagesContract.View {\n+\n+\n+    @BindView(R.id.statusMessage)\n+    TextView statusTextView;\n+    @BindView(R.id.loadingImagesProgressBar)\n+    ProgressBar progressBar;\n+    @BindView(R.id.depicts_image_list)\n+    GridView gridView;\n+    @BindView(R.id.parentLayout)\n+    RelativeLayout parentLayout;\n+    @Inject\n+    DepictedImagesPresenter presenter;\n+    private GridViewAdapter gridAdapter;\n+    private String entityId = null;\n+    private boolean isLastPage;\n+    private boolean isLoading = true;\n+    private int mediaSize = 0;\n+\n+    @Nullable\n+    @Override\n+    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n+        View v = inflater.inflate(R.layout.fragment_depict_image, container, false);\n+        ButterKnife.bind(this, v);\n+        presenter.onAttachView(this);\n+        return v;\n+    }\n+\n+    @Override\n+    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n+        super.onViewCreated(view, savedInstanceState);\n+        gridView.setOnItemClickListener((AdapterView.OnItemClickListener) getActivity());\n+        initViews();\n+    }\n+\n+    /**\n+     * Initializes the UI elements for the fragment\n+     * Setup the grid view to and scroll listener for it\n+     */\n+    private void initViews() {\n+        String depictsName = getArguments().getString(\"wikidataItemName\");\n+        entityId = getArguments().getString(\"entityId\");\n+        if (getArguments() != null && depictsName != null) {\n+            initList();\n+            setScrollListener();\n+        }\n+    }\n+\n+    private void initList() {\n+        presenter.initList(entityId);\n+        if (!NetworkUtils.isInternetConnectionEstablished(getContext())) {\n+            handleNoInternet();\n+        } else presenter.initList(entityId);\n+    }\n+\n+    /**\n+     * Handles the UI updates for no internet scenario\n+     */\n+    @Override\n+    public void handleNoInternet() {\n+        progressBar.setVisibility(GONE);\n+        if (gridAdapter == null || gridAdapter.isEmpty()) {\n+            statusTextView.setVisibility(VISIBLE);\n+            statusTextView.setText(getString(R.string.no_internet));\n+        } else {\n+            ViewUtil.showShortSnackbar(parentLayout, R.string.no_internet);\n+        }\n+    }\n+\n+    /**\n+     * Handles the UI updates for a error scenario\n+     */\n+    @Override\n+    public void initErrorView() {\n+        progressBar.setVisibility(GONE);\n+        if (gridAdapter == null || gridAdapter.isEmpty()) {\n+            statusTextView.setVisibility(VISIBLE);\n+            statusTextView.setText(getString(R.string.no_images_found));\n+        } else {\n+            statusTextView.setVisibility(GONE);\n+        }\n+    }\n+\n+    /**\n+     * Sets the scroll listener for the grid view so that more images are fetched when the user scrolls down\n+     * Checks if the item has more images before loading\n+     * Also checks whether images are currently being fetched before triggering another request\n+     */\n+    private void setScrollListener() {\n+        gridView.setOnScrollListener(new AbsListView.OnScrollListener() {\n+            @Override\n+            public void onScrollStateChanged(AbsListView view, int scrollState) {\n+            }\n+\n+            @Override\n+            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {\n+                if (!isLastPage && !isLoading && (firstVisibleItem + visibleItemCount >= totalItemCount)) {\n+                    isLoading = true;\n+                    if (!NetworkUtils.isInternetConnectionEstablished(getContext())) {\n+                        handleNoInternet();\n+                    } else {\n+                        presenter.fetchMoreImages();\n+                    }\n+                }\n+                if (isLastPage) {\n+                    progressBar.setVisibility(GONE);\n+                }\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Seat caption to the image at the given position\n+     */\n+    @Override\n+    public void handleLabelforImage(String s, int position) {\n+        if (!s.trim().equals(getString(R.string.detail_caption_empty))) {\n+            gridAdapter.getItem(position).setThumbnailTitle(s);\n+            gridAdapter.notifyDataSetChanged();\n+        }\n+    }\n+\n+    /**\n+     * Display snackbar\n+     */\n+    @Override\n+    public void showSnackBar() {\n+        ViewUtil.showShortSnackbar(parentLayout, R.string.error_loading_images);\n+    }\n+\n+    /**\n+     * Set visibility of progressbar depending on the boolean value\n+     */\n+    @Override\n+    public void progressBarVisible(Boolean value) {\n+        if (value) {\n+            progressBar.setVisibility(VISIBLE);\n+        } else {\n+            progressBar.setVisibility(GONE);\n+        }\n+    }\n+\n+    /**\n+     * It return an instance of gridView adapter which helps in extracting media details\n+     * used by the gridView\n+     *\n+     * @return GridView Adapter\n+     */\n+    @Override\n+    public ListAdapter getAdapter() {\n+        return gridAdapter;\n+    }\n+\n+    /**\n+     * Initializes the adapter with a list of Media objects\n+     *\n+     * @param mediaList List of new Media to be displayed\n+     */\n+    @Override\n+    public void setAdapter(List<Media> mediaList) {\n+        gridAdapter = new fr.free.nrw.commons.depictions.GridViewAdapter(getContext(), R.layout.layout_depict_image, mediaList);\n+        gridView.setAdapter(gridAdapter);\n+    }\n+\n+    /**\n+     * adds list to adapter\n+     */\n+    @Override\n+    public void addItemsToAdapter(List<Media> media) {\n+        gridAdapter.addAll(media);\n+        gridAdapter.notifyDataSetChanged();\n+    }\n+\n+    /**\n+     * Sets loading status depending on the boolean value\n+     */\n+    @Override\n+    public void setLoadingStatus(Boolean value) {\n+        if (!value) {\n+            statusTextView.setVisibility(GONE);\n+        }\n+        isLoading = value;\n+    }\n+\n+    /**\n+     * Inform the view that there are no more items to be loaded for this search query\n+     * or reset the isLastPage for the current query\n+     * @param isLastPage\n+     */\n+    @Override\n+    public void setIsLastPage(boolean isLastPage) {\n+        this.isLastPage=isLastPage;\n+        progressBar.setVisibility(GONE);\n+    }\n+\n+\n+    /**\n+     * Handles the success scenario\n+     * On first load, it initializes the grid view. On subsequent loads, it adds items to the adapter\n+     *\n+     * @param collection List of new Media to be displayed\n+     */\n+    @Override\n+    public void handleSuccess(List<Media> collection) {\n+       presenter.addItemsToQueryList(collection);\n+        if (gridAdapter == null) {\n+            setAdapter(collection);\n+        } else {\n+            if (gridAdapter.containsAll(collection)) {\n+                return;\n+            }\n+            gridAdapter.addItems(collection);\n+\n+            try {\n+                ((WikidataItemDetailsActivity) getContext()).viewPagerNotifyDataSetChanged();\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+            }\n+        }\n+        progressBar.setVisibility(GONE);\n+        isLoading = false;\n+        statusTextView.setVisibility(GONE);\n+        for (Media m : collection) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NDc1NQ==", "bodyText": "IMO we should handle just specific exceptions. Also, use timber logs.", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396044755", "createdAt": "2020-03-22T01:26:37Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/SubClass/SubDepictionListPresenter.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package fr.free.nrw.commons.depictions.SubClass;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Proxy;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import fr.free.nrw.commons.explore.depictions.DepictsClient;\n+import fr.free.nrw.commons.explore.recentsearches.RecentSearch;\n+import fr.free.nrw.commons.explore.recentsearches.RecentSearchesDao;\n+import fr.free.nrw.commons.mwapi.OkHttpJsonApiClient;\n+import fr.free.nrw.commons.upload.structure.depictions.DepictedItem;\n+import io.reactivex.Scheduler;\n+import io.reactivex.android.schedulers.AndroidSchedulers;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.schedulers.Schedulers;\n+import timber.log.Timber;\n+\n+import static fr.free.nrw.commons.di.CommonsApplicationModule.IO_THREAD;\n+import static fr.free.nrw.commons.di.CommonsApplicationModule.MAIN_THREAD;\n+\n+/**\n+* Presenter for parent classes and child classes of Depicted items in Explore\n+ */\n+public class SubDepictionListPresenter implements SubDepictionListContract.UserActionListener {\n+\n+    /**\n+     * This creates a dynamic proxy instance of the class,\n+     * proxy is to control access to the target object\n+     * here our target object is the view.\n+     * Thus we when onDettach method of fragment is called we replace the binding of view to our object with the proxy instance\n+     */\n+    private static final SubDepictionListContract.View DUMMY = (SubDepictionListContract.View) Proxy\n+            .newProxyInstance(\n+                    SubDepictionListContract.View.class.getClassLoader(),\n+                    new Class[]{SubDepictionListContract.View.class},\n+                    (proxy, method, methodArgs) -> null);\n+\n+    private final Scheduler ioScheduler;\n+    private final Scheduler mainThreadScheduler;\n+    private  SubDepictionListContract.View view = DUMMY;\n+    RecentSearchesDao recentSearchesDao;\n+    /**\n+     * Value of the search query\n+     */\n+    public String query;\n+    protected CompositeDisposable compositeDisposable = new CompositeDisposable();\n+    DepictsClient depictsClient;\n+    private static int TIMEOUT_SECONDS = 15;\n+    private List<DepictedItem> queryList = new ArrayList<>();\n+    OkHttpJsonApiClient okHttpJsonApiClient;\n+    /**\n+     * variable used to record the number of API calls already made for fetching Thumbnails\n+     */\n+    private int size = 0;\n+\n+    @Inject\n+    public SubDepictionListPresenter(RecentSearchesDao recentSearchesDao, DepictsClient depictsClient, OkHttpJsonApiClient okHttpJsonApiClient,  @Named(IO_THREAD) Scheduler ioScheduler,\n+                                     @Named(MAIN_THREAD) Scheduler mainThreadScheduler) {\n+        this.recentSearchesDao = recentSearchesDao;\n+        this.ioScheduler = ioScheduler;\n+        this.mainThreadScheduler = mainThreadScheduler;\n+        this.depictsClient = depictsClient;\n+        this.okHttpJsonApiClient = okHttpJsonApiClient;\n+    }\n+    @Override\n+    public void onAttachView(SubDepictionListContract.View view) {\n+        this.view = view;\n+    }\n+\n+    @Override\n+    public void onDetachView() {\n+        this.view = DUMMY;\n+    }\n+\n+    /**\n+     * Store the current query in Recent searches\n+     */\n+    @Override\n+    public void saveQuery() {\n+        RecentSearch recentSearch = recentSearchesDao.find(query);\n+\n+        // Newly searched query...\n+        if (recentSearch == null) {\n+            recentSearch = new RecentSearch(null, query, new Date());\n+        } else {\n+            recentSearch.setLastSearched(new Date());\n+        }\n+        recentSearchesDao.save(recentSearch);\n+    }\n+\n+    /**\n+     * Calls Wikibase APIs to fetch Thumbnail image for a given wikidata item\n+     */\n+    @Override\n+    public void fetchThumbnailForEntityId(String entityId, int position) {\n+        compositeDisposable.add(depictsClient.getP18ForItem(entityId)\n+                .subscribeOn(ioScheduler)\n+                .observeOn(mainThreadScheduler)\n+                .timeout(TIMEOUT_SECONDS, TimeUnit.SECONDS)\n+                .subscribe(response -> {\n+                    view.onImageUrlFetched(response,position);\n+                }));\n+    }\n+\n+    @Override\n+    public void initSubDepictionList(String qid, Boolean isParentClass) throws IOException {\n+        size = 0;\n+        if (isParentClass) {\n+            compositeDisposable.add(okHttpJsonApiClient.getParentQIDs(qid)\n+                    .subscribeOn(ioScheduler)\n+                    .observeOn(mainThreadScheduler)\n+                    .subscribe(this::handleSuccess, this::handleError));\n+        } else {\n+            compositeDisposable.add(okHttpJsonApiClient.getChildQIDs(qid)\n+                    .subscribeOn(ioScheduler)\n+                    .observeOn(mainThreadScheduler)\n+                    .subscribe(this::handleSuccess, this::handleError));\n+        }\n+\n+    }\n+\n+    @Override\n+    public String getQuery() {\n+        return query;\n+    }\n+\n+    /**\n+     * Handles the success scenario\n+     * it initializes the recycler view by adding items to the adapter\n+     */\n+    public void handleSuccess(List<DepictedItem> mediaList) {\n+        if (mediaList == null || mediaList.isEmpty()) {\n+            if(queryList.isEmpty()){\n+                view.initErrorView();\n+            }else{\n+                view.setIsLastPage(true);\n+            }\n+        } else {\n+            this.queryList.addAll(mediaList);\n+            view.onSuccess(mediaList);\n+            for (DepictedItem m : mediaList) {\n+                fetchThumbnailForEntityId(m.getEntityId(), size++);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Logs and handles API error scenario\n+     */\n+    private void handleError(Throwable throwable) {\n+        Timber.e(throwable, \"Error occurred while loading queried depictions\");\n+        try {\n+            view.initErrorView();\n+            view.showSnackbar();\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NDg2MA==", "bodyText": "Use MVP pattern for this activity.", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396044860", "createdAt": "2020-03-22T01:28:29Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/WikidataItemDetailsActivity.java", "diffHunk": "@@ -0,0 +1,204 @@\n+package fr.free.nrw.commons.depictions;\n+\n+import android.content.Context;\n+import android.content.Intent;\n+import android.os.Bundle;\n+import android.view.View;\n+import android.widget.AdapterView;\n+import android.widget.FrameLayout;\n+\n+import androidx.fragment.app.Fragment;\n+import androidx.fragment.app.FragmentManager;\n+import androidx.viewpager.widget.ViewPager;\n+\n+import com.google.android.material.tabs.TabLayout;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import butterknife.BindView;\n+import butterknife.ButterKnife;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.R;\n+import fr.free.nrw.commons.depictions.Media.DepictedImagesFragment;\n+import fr.free.nrw.commons.depictions.SubClass.SubDepictionListFragment;\n+import fr.free.nrw.commons.explore.ViewPagerAdapter;\n+import fr.free.nrw.commons.media.MediaDetailPagerFragment;\n+import fr.free.nrw.commons.theme.NavigationBaseActivity;\n+import fr.free.nrw.commons.upload.structure.depictions.DepictedItem;\n+\n+/**\n+ * Activity to show depiction media, parent classes and child classes of depicted items in Explore\n+ */\n+public class WikidataItemDetailsActivity extends NavigationBaseActivity implements MediaDetailPagerFragment.MediaDetailProvider, AdapterView.OnItemClickListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NTEzMQ==", "bodyText": "For the below classes ie. Continue, Query, DepictionResponse i believe that this could be part of MwQueryResponse and MwQueryResult. If yes, please avoid duplicating the classes.", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396045131", "createdAt": "2020-03-22T01:33:37Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/models/Continue.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package fr.free.nrw.commons.depictions.models;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model class for object obtained while parsing depiction response\n+ */\n+public class Continue {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NTE0OQ==", "bodyText": "I assume that this is just the MwQueryPage class", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396045149", "createdAt": "2020-03-22T01:34:11Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/models/Search.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package fr.free.nrw.commons.depictions.models;\n+\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model class for object obtained while parsing depiction response\n+ * this class contains all the details of for the media object\n+ */\n+\n+public class Search {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NTE4Ng==", "bodyText": "Are we using totalhits anywhere?", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396045186", "createdAt": "2020-03-22T01:35:03Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/models/Searchinfo.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package fr.free.nrw.commons.depictions.models;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model class for object obtained while parsing query object\n+ */\n+\n+public class Searchinfo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NTI4MA==", "bodyText": "Use NAMED_COMMONS_WIKI_SITE. It already exists", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396045280", "createdAt": "2020-03-22T01:36:49Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/di/NetworkingModule.java", "diffHunk": "@@ -133,6 +138,13 @@ public WikiSite provideWikidataWikiSite() {\n         return new WikiSite(BuildConfig.WIKIDATA_URL);\n     }\n \n+    @Provides\n+    @Singleton\n+    @Named(NAMED_COMMONS_WIKI)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NTQ0MA==", "bodyText": "I don't think that this is the right way of getting the thumbnail. It might not work for all images.  imageInfo API can be used to fetch the thumbnail.", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396045440", "createdAt": "2020-03-22T01:39:59Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/explore/depictions/DepictsClient.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package fr.free.nrw.commons.explore.depictions;\n+\n+import androidx.annotation.Nullable;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonPrimitive;\n+\n+\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import fr.free.nrw.commons.BuildConfig;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.depictions.models.Search;\n+import fr.free.nrw.commons.media.MediaInterface;\n+import fr.free.nrw.commons.upload.depicts.DepictsInterface;\n+import fr.free.nrw.commons.upload.structure.depictions.DepictedItem;\n+import fr.free.nrw.commons.utils.CommonsDateUtil;\n+import io.reactivex.Observable;\n+import io.reactivex.Single;\n+\n+/**\n+ * Depicts Client to handle custom calls to Commons Wikibase APIs\n+ */\n+@Singleton\n+public class DepictsClient {\n+\n+    private final DepictsInterface depictsInterface;\n+    private final MediaInterface mediaInterface;\n+    private static final String NO_DEPICTED_IMAGE = \"No Image for Depiction\";\n+\n+    @Inject\n+    public DepictsClient(DepictsInterface depictsInterface, MediaInterface mediaInterface) {\n+        this.depictsInterface = depictsInterface;\n+        this.mediaInterface = mediaInterface;\n+    }\n+\n+    /**\n+     * Search for depictions using the search item\n+     * @return list of depicted items\n+     */\n+    public Observable<DepictedItem> searchForDepictions(String query, int limit, int offset) {\n+        return depictsInterface.searchForDepicts(\n+                query,\n+                String.valueOf(limit),\n+                Locale.getDefault().getLanguage(),\n+                Locale.getDefault().getLanguage(),\n+                String.valueOf(offset)\n+        )\n+                .flatMap(depictSearchResponse ->Observable.fromIterable(depictSearchResponse.getSearch()))\n+                .map(DepictedItem::new);\n+    }\n+\n+    /**\n+     * Get URL for image using image name\n+     * Ex: title = Guion Bluford\n+     * Url = https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/Guion_Bluford.jpg/70px-Guion_Bluford.jpg\n+     */\n+    private String getThumbnailUrl(String title) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NTU5OA==", "bodyText": "Please define concrete classes instead of using JsonObject. I guess I have already added some of these classes in my PR #3449. I will base my PR on structured-data branch and you could reuse it.", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396045598", "createdAt": "2020-03-22T01:42:54Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/explore/depictions/DepictsClient.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package fr.free.nrw.commons.explore.depictions;\n+\n+import androidx.annotation.Nullable;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonPrimitive;\n+\n+\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import fr.free.nrw.commons.BuildConfig;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.depictions.models.Search;\n+import fr.free.nrw.commons.media.MediaInterface;\n+import fr.free.nrw.commons.upload.depicts.DepictsInterface;\n+import fr.free.nrw.commons.upload.structure.depictions.DepictedItem;\n+import fr.free.nrw.commons.utils.CommonsDateUtil;\n+import io.reactivex.Observable;\n+import io.reactivex.Single;\n+\n+/**\n+ * Depicts Client to handle custom calls to Commons Wikibase APIs\n+ */\n+@Singleton\n+public class DepictsClient {\n+\n+    private final DepictsInterface depictsInterface;\n+    private final MediaInterface mediaInterface;\n+    private static final String NO_DEPICTED_IMAGE = \"No Image for Depiction\";\n+\n+    @Inject\n+    public DepictsClient(DepictsInterface depictsInterface, MediaInterface mediaInterface) {\n+        this.depictsInterface = depictsInterface;\n+        this.mediaInterface = mediaInterface;\n+    }\n+\n+    /**\n+     * Search for depictions using the search item\n+     * @return list of depicted items\n+     */\n+    public Observable<DepictedItem> searchForDepictions(String query, int limit, int offset) {\n+        return depictsInterface.searchForDepicts(\n+                query,\n+                String.valueOf(limit),\n+                Locale.getDefault().getLanguage(),\n+                Locale.getDefault().getLanguage(),\n+                String.valueOf(offset)\n+        )\n+                .flatMap(depictSearchResponse ->Observable.fromIterable(depictSearchResponse.getSearch()))\n+                .map(DepictedItem::new);\n+    }\n+\n+    /**\n+     * Get URL for image using image name\n+     * Ex: title = Guion Bluford\n+     * Url = https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/Guion_Bluford.jpg/70px-Guion_Bluford.jpg\n+     */\n+    private String getThumbnailUrl(String title) {\n+        String baseUrl = \"https://upload.wikimedia.org/wikipedia/commons/thumb/\";\n+        title = title.replace(\" \", \"_\");\n+        String MD5Hash =  getMd5(title);\n+        /**\n+         * We use 70 pixels as the size of our Thumbnail (as it is the perfect fits our UI)\n+         */\n+        return baseUrl + MD5Hash.charAt(0) + '/' + MD5Hash.charAt(0) + MD5Hash.charAt(1) + '/' + title + \"/70px-\" + title;\n+    }\n+\n+    /**\n+     * Ex: entityId = Q357458\n+     * value returned = Elgin Baylor Night program.jpeg\n+     */\n+    public Single<String> getP18ForItem(String entityId) {\n+        return depictsInterface.getImageForEntity(entityId)\n+                .map(commonsFilename -> {\n+                    String name;\n+                    try {\n+                        JsonObject claims = commonsFilename.getAsJsonObject(\"claims\").getAsJsonObject();\n+                        JsonObject p18 = claims.get(\"P18\").getAsJsonArray().get(0).getAsJsonObject();\n+                        JsonObject mainsnak = p18.get(\"mainsnak\").getAsJsonObject();\n+                        JsonObject datavalue = mainsnak.get(\"datavalue\").getAsJsonObject();\n+                        JsonPrimitive value = datavalue.get(\"value\").getAsJsonPrimitive();\n+                        name = value.toString();\n+                        name = name.substring(1, name.length() - 1);\n+                    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NTY1OA==", "bodyText": "IMO this is not the right way of getting the image url. It could lead to errors. I remember running into issues with such URL formations in media details screen.", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396045658", "createdAt": "2020-03-22T01:44:35Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/explore/depictions/DepictsClient.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package fr.free.nrw.commons.explore.depictions;\n+\n+import androidx.annotation.Nullable;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonPrimitive;\n+\n+\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import fr.free.nrw.commons.BuildConfig;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.depictions.models.Search;\n+import fr.free.nrw.commons.media.MediaInterface;\n+import fr.free.nrw.commons.upload.depicts.DepictsInterface;\n+import fr.free.nrw.commons.upload.structure.depictions.DepictedItem;\n+import fr.free.nrw.commons.utils.CommonsDateUtil;\n+import io.reactivex.Observable;\n+import io.reactivex.Single;\n+\n+/**\n+ * Depicts Client to handle custom calls to Commons Wikibase APIs\n+ */\n+@Singleton\n+public class DepictsClient {\n+\n+    private final DepictsInterface depictsInterface;\n+    private final MediaInterface mediaInterface;\n+    private static final String NO_DEPICTED_IMAGE = \"No Image for Depiction\";\n+\n+    @Inject\n+    public DepictsClient(DepictsInterface depictsInterface, MediaInterface mediaInterface) {\n+        this.depictsInterface = depictsInterface;\n+        this.mediaInterface = mediaInterface;\n+    }\n+\n+    /**\n+     * Search for depictions using the search item\n+     * @return list of depicted items\n+     */\n+    public Observable<DepictedItem> searchForDepictions(String query, int limit, int offset) {\n+        return depictsInterface.searchForDepicts(\n+                query,\n+                String.valueOf(limit),\n+                Locale.getDefault().getLanguage(),\n+                Locale.getDefault().getLanguage(),\n+                String.valueOf(offset)\n+        )\n+                .flatMap(depictSearchResponse ->Observable.fromIterable(depictSearchResponse.getSearch()))\n+                .map(DepictedItem::new);\n+    }\n+\n+    /**\n+     * Get URL for image using image name\n+     * Ex: title = Guion Bluford\n+     * Url = https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/Guion_Bluford.jpg/70px-Guion_Bluford.jpg\n+     */\n+    private String getThumbnailUrl(String title) {\n+        String baseUrl = \"https://upload.wikimedia.org/wikipedia/commons/thumb/\";\n+        title = title.replace(\" \", \"_\");\n+        String MD5Hash =  getMd5(title);\n+        /**\n+         * We use 70 pixels as the size of our Thumbnail (as it is the perfect fits our UI)\n+         */\n+        return baseUrl + MD5Hash.charAt(0) + '/' + MD5Hash.charAt(0) + MD5Hash.charAt(1) + '/' + title + \"/70px-\" + title;\n+    }\n+\n+    /**\n+     * Ex: entityId = Q357458\n+     * value returned = Elgin Baylor Night program.jpeg\n+     */\n+    public Single<String> getP18ForItem(String entityId) {\n+        return depictsInterface.getImageForEntity(entityId)\n+                .map(commonsFilename -> {\n+                    String name;\n+                    try {\n+                        JsonObject claims = commonsFilename.getAsJsonObject(\"claims\").getAsJsonObject();\n+                        JsonObject p18 = claims.get(\"P18\").getAsJsonArray().get(0).getAsJsonObject();\n+                        JsonObject mainsnak = p18.get(\"mainsnak\").getAsJsonObject();\n+                        JsonObject datavalue = mainsnak.get(\"datavalue\").getAsJsonObject();\n+                        JsonPrimitive value = datavalue.get(\"value\").getAsJsonPrimitive();\n+                        name = value.toString();\n+                        name = name.substring(1, name.length() - 1);\n+                    } catch (Exception e) {\n+                        name=\"\";\n+                    }\n+                    if (!name.isEmpty()){\n+                        return getThumbnailUrl(name);\n+                    } else return NO_DEPICTED_IMAGE;\n+                })\n+                .singleOrError();\n+    }\n+\n+    /**\n+     * @return list of images for a particular depict entity\n+     */\n+    public Observable<List<Media>> fetchImagesForDepictedItem(String query, int limit, int sroffset) {\n+        return mediaInterface.fetchImagesForDepictedItem(\"haswbstatement:\" + BuildConfig.DEPICTS_PROPERTY + \"=\" + query, String.valueOf(sroffset))\n+                .map(mwQueryResponse -> {\n+                    List<Media> mediaList =  new ArrayList<>();\n+                    for (Search s: mwQueryResponse.getQuery().getSearch()) {\n+                        Media media = new Media(null,\n+                                getUrl(s.getTitle()),\n+                                s.getTitle(),\n+                                new HashMap<>(),\n+                                \"\",\n+                                0,\n+                                safeParseDate(s.getTimestamp()),\n+                                safeParseDate(s.getTimestamp()),\n+                                \"\"\n+                        );\n+                        mediaList.add(media);\n+                    }\n+                    return mediaList;\n+                });\n+    }\n+\n+    /**\n+     * Get url for the image from media of depictions\n+     * Ex: Tiger_Woods\n+     * Value: https://upload.wikimedia.org/wikipedia/commons/thumb/6/67/Tiger_Woods.jpg/70px-Tiger_Woods.jpg\n+     */\n+    private String getUrl(String title) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NTczMQ==", "bodyText": "Please check if mediaInterface.fetchImagesForDepictedItem is actually required or one of the existing MediaClient methods could be reused.", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396045731", "createdAt": "2020-03-22T01:46:02Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/explore/depictions/DepictsClient.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package fr.free.nrw.commons.explore.depictions;\n+\n+import androidx.annotation.Nullable;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonPrimitive;\n+\n+\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import fr.free.nrw.commons.BuildConfig;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.depictions.models.Search;\n+import fr.free.nrw.commons.media.MediaInterface;\n+import fr.free.nrw.commons.upload.depicts.DepictsInterface;\n+import fr.free.nrw.commons.upload.structure.depictions.DepictedItem;\n+import fr.free.nrw.commons.utils.CommonsDateUtil;\n+import io.reactivex.Observable;\n+import io.reactivex.Single;\n+\n+/**\n+ * Depicts Client to handle custom calls to Commons Wikibase APIs\n+ */\n+@Singleton\n+public class DepictsClient {\n+\n+    private final DepictsInterface depictsInterface;\n+    private final MediaInterface mediaInterface;\n+    private static final String NO_DEPICTED_IMAGE = \"No Image for Depiction\";\n+\n+    @Inject\n+    public DepictsClient(DepictsInterface depictsInterface, MediaInterface mediaInterface) {\n+        this.depictsInterface = depictsInterface;\n+        this.mediaInterface = mediaInterface;\n+    }\n+\n+    /**\n+     * Search for depictions using the search item\n+     * @return list of depicted items\n+     */\n+    public Observable<DepictedItem> searchForDepictions(String query, int limit, int offset) {\n+        return depictsInterface.searchForDepicts(\n+                query,\n+                String.valueOf(limit),\n+                Locale.getDefault().getLanguage(),\n+                Locale.getDefault().getLanguage(),\n+                String.valueOf(offset)\n+        )\n+                .flatMap(depictSearchResponse ->Observable.fromIterable(depictSearchResponse.getSearch()))\n+                .map(DepictedItem::new);\n+    }\n+\n+    /**\n+     * Get URL for image using image name\n+     * Ex: title = Guion Bluford\n+     * Url = https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/Guion_Bluford.jpg/70px-Guion_Bluford.jpg\n+     */\n+    private String getThumbnailUrl(String title) {\n+        String baseUrl = \"https://upload.wikimedia.org/wikipedia/commons/thumb/\";\n+        title = title.replace(\" \", \"_\");\n+        String MD5Hash =  getMd5(title);\n+        /**\n+         * We use 70 pixels as the size of our Thumbnail (as it is the perfect fits our UI)\n+         */\n+        return baseUrl + MD5Hash.charAt(0) + '/' + MD5Hash.charAt(0) + MD5Hash.charAt(1) + '/' + title + \"/70px-\" + title;\n+    }\n+\n+    /**\n+     * Ex: entityId = Q357458\n+     * value returned = Elgin Baylor Night program.jpeg\n+     */\n+    public Single<String> getP18ForItem(String entityId) {\n+        return depictsInterface.getImageForEntity(entityId)\n+                .map(commonsFilename -> {\n+                    String name;\n+                    try {\n+                        JsonObject claims = commonsFilename.getAsJsonObject(\"claims\").getAsJsonObject();\n+                        JsonObject p18 = claims.get(\"P18\").getAsJsonArray().get(0).getAsJsonObject();\n+                        JsonObject mainsnak = p18.get(\"mainsnak\").getAsJsonObject();\n+                        JsonObject datavalue = mainsnak.get(\"datavalue\").getAsJsonObject();\n+                        JsonPrimitive value = datavalue.get(\"value\").getAsJsonPrimitive();\n+                        name = value.toString();\n+                        name = name.substring(1, name.length() - 1);\n+                    } catch (Exception e) {\n+                        name=\"\";\n+                    }\n+                    if (!name.isEmpty()){\n+                        return getThumbnailUrl(name);\n+                    } else return NO_DEPICTED_IMAGE;\n+                })\n+                .singleOrError();\n+    }\n+\n+    /**\n+     * @return list of images for a particular depict entity\n+     */\n+    public Observable<List<Media>> fetchImagesForDepictedItem(String query, int limit, int sroffset) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NTc2NA==", "bodyText": "Check error handling", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396045764", "createdAt": "2020-03-22T01:47:07Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/explore/depictions/SearchDepictionsFragmentPresenter.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package fr.free.nrw.commons.explore.depictions;\n+\n+import java.lang.reflect.Proxy;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import fr.free.nrw.commons.di.CommonsDaggerSupportFragment;\n+import fr.free.nrw.commons.explore.recentsearches.RecentSearch;\n+import fr.free.nrw.commons.explore.recentsearches.RecentSearchesDao;\n+import fr.free.nrw.commons.kvstore.JsonKvStore;\n+import fr.free.nrw.commons.upload.structure.depictions.DepictedItem;\n+\n+import io.reactivex.Scheduler;\n+import io.reactivex.disposables.CompositeDisposable;\n+import timber.log.Timber;\n+\n+import static fr.free.nrw.commons.di.CommonsApplicationModule.IO_THREAD;\n+import static fr.free.nrw.commons.di.CommonsApplicationModule.MAIN_THREAD;\n+\n+/**\n+ * The presenter class for SearchDepictionsFragment\n+ */\n+public class SearchDepictionsFragmentPresenter extends CommonsDaggerSupportFragment implements SearchDepictionsFragmentContract.UserActionListener {\n+\n+    /**\n+     * This creates a dynamic proxy instance of the class,\n+     * proxy is to control access to the target object\n+     * here our target object is the view.\n+     * Thus we when onDettach method of fragment is called we replace the binding of view to our object with the proxy instance\n+     */\n+    private static final SearchDepictionsFragmentContract.View DUMMY = (SearchDepictionsFragmentContract.View) Proxy\n+            .newProxyInstance(\n+                    SearchDepictionsFragmentContract.View.class.getClassLoader(),\n+                    new Class[]{SearchDepictionsFragmentContract.View.class},\n+                    (proxy, method, methodArgs) -> null);\n+    private static int TIMEOUT_SECONDS = 15;\n+    protected CompositeDisposable compositeDisposable = new CompositeDisposable();\n+    private final Scheduler ioScheduler;\n+    private final Scheduler mainThreadScheduler;\n+\n+    boolean isLoadingDepictions;\n+    String query;\n+    RecentSearchesDao recentSearchesDao;\n+    DepictsClient depictsClient;\n+    JsonKvStore basicKvStore;\n+    private SearchDepictionsFragmentContract.View view = DUMMY;\n+    private List<DepictedItem> queryList = new ArrayList<>();\n+    int offset=0;\n+    int size = 0;\n+\n+    @Inject\n+    public SearchDepictionsFragmentPresenter(@Named(\"default_preferences\") JsonKvStore basicKvStore,\n+                                             RecentSearchesDao recentSearchesDao,\n+                                             DepictsClient depictsClient,\n+                                             @Named(IO_THREAD) Scheduler ioScheduler,\n+                                             @Named(MAIN_THREAD) Scheduler mainThreadScheduler) {\n+        this.basicKvStore = basicKvStore;\n+        this.recentSearchesDao = recentSearchesDao;\n+        this.depictsClient = depictsClient;\n+        this.ioScheduler = ioScheduler;\n+        this.mainThreadScheduler = mainThreadScheduler;\n+    }\n+\n+    @Override\n+    public void onAttachView(SearchDepictionsFragmentContract.View view) {\n+        this.view = view;\n+    }\n+\n+    @Override\n+    public void onDetachView() {\n+        this.view = DUMMY;\n+    }\n+\n+    /**\n+     * Called when user selects \"Items\" from Search Activity\n+     * to load the list of depictions from API\n+     *\n+     * @param query string searched in the Explore Activity\n+     * @param reInitialise\n+     */\n+    @Override\n+    public void updateDepictionList(String query, int pageSize, boolean reInitialise) {\n+        this.query = query;\n+        view.loadingDepictions();\n+        if (reInitialise) {\n+            size = 0;\n+        }\n+        saveQuery();\n+        compositeDisposable.add(depictsClient.searchForDepictions(query, 25, offset)\n+                .subscribeOn(ioScheduler)\n+                .observeOn(mainThreadScheduler)\n+                .timeout(TIMEOUT_SECONDS, TimeUnit.SECONDS)\n+                .doOnSubscribe(disposable -> saveQuery())\n+                .collect(ArrayList<DepictedItem>::new, ArrayList::add)\n+                .subscribe(this::handleSuccess, this::handleError));\n+    }\n+\n+    /**\n+     * Logs and handles API error scenario\n+     */\n+    private void handleError(Throwable throwable) {\n+        Timber.e(throwable, \"Error occurred while loading queried depictions\");\n+        try {\n+            view.initErrorView();\n+            view.showSnackbar();\n+        } catch (Exception e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NTc5Ng==", "bodyText": "Use meaningful variable names", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396045796", "createdAt": "2020-03-22T01:47:37Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/explore/images/SearchImageFragment.java", "diffHunk": "@@ -198,10 +203,36 @@ private void handleSuccess(List<Media> mediaList) {\n             progressBar.setVisibility(GONE);\n             imagesAdapter.addAll(mediaList);\n             imagesAdapter.notifyDataSetChanged();\n-            ((SearchActivity) getContext()).viewPagerNotifyDataSetChanged();\n+            ((SearchActivity)getContext()).viewPagerNotifyDataSetChanged();\n+            for (Media m : mediaList) {\n+                replaceTitlesWithCaptions(\"M\"+m.getPageId(), mediaSize++);\n+            }\n         }\n     }\n \n+    /**\n+     * In explore we first show title and simultaneously call the API to retrieve captions\n+     * When captions are retrieved they replace title\n+     */\n+\n+        public void replaceTitlesWithCaptions(String wikibaseIdentifier, int i) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NTkxMw==", "bodyText": "Wow this method looks scary. I guess it can be simplified.", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396045913", "createdAt": "2020-03-22T01:49:54Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/media/MediaClient.java", "diffHunk": "@@ -160,4 +178,143 @@ public MediaClient(MediaInterface mediaInterface) {\n                 .map(MwParseResult::text)\n                 .first(\"\");\n     }\n-}\n+\n+\n+    /**\n+     * @return  caption for image using wikibaseIdentifier\n+     */\n+    public Single<String> getCaptionByWikibaseIdentifier(String wikibaseIdentifier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NTkyNw==", "bodyText": "Please define and use concrete classes.", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396045927", "createdAt": "2020-03-22T01:50:17Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/media/MediaClient.java", "diffHunk": "@@ -160,4 +178,143 @@ public MediaClient(MediaInterface mediaInterface) {\n                 .map(MwParseResult::text)\n                 .first(\"\");\n     }\n-}\n+\n+\n+    /**\n+     * @return  caption for image using wikibaseIdentifier\n+     */\n+    public Single<String> getCaptionByWikibaseIdentifier(String wikibaseIdentifier) {\n+        return mediaDetailInterface.getCaptionForImage(Locale.getDefault().getLanguage(), wikibaseIdentifier)\n+                .map(mediaDetailResponse -> {\n+                    if (mediaDetailResponse != null && mediaDetailResponse.getSuccess() != null && mediaDetailResponse.getSuccess() == 1 && mediaDetailResponse.getEntities() != null) {\n+                        Map<String, CommonsWikibaseItem> entities = mediaDetailResponse.getEntities();\n+                        try {\n+                            Map.Entry<String, CommonsWikibaseItem> entry = entities.entrySet().iterator().next();\n+                            CommonsWikibaseItem commonsWikibaseItem = entry.getValue();\n+                                Map<String, Caption> labels = commonsWikibaseItem.getLabels();\n+                                Map.Entry<String, Caption> captionEntry = labels.entrySet().iterator().next();\n+                                Caption caption = captionEntry.getValue();\n+                                return caption.getValue();\n+\n+                        } catch (Exception e) {\n+                            return NO_CAPTION;\n+                        }\n+                    }\n+                        return NO_CAPTION;\n+\n+                })\n+                .singleOrError();\n+    }\n+\n+    /**\n+     * Fetches Structured data from API\n+     *\n+     * @param filename\n+     * @return a map containing caption and depictions (empty string in the map if no caption/depictions)\n+     */\n+    public Single<JsonObject> getCaptionAndDepictions(String filename)  {\n+        return mediaDetailInterface.fetchStructuredDataByFilename(Locale.getDefault().getLanguage(), filename)\n+                .map(mediaDetailResponse -> {\n+                        return fetchCaptionandDepictionsFromMediaDetailResponse(mediaDetailResponse);\n+                })\n+                .singleOrError();\n+    }\n+\n+    /**\n+     * Parses the mediaDetailResponse from API to extract captions and depictions\n+     * @param mediaDetailResponse Response obtained from API for Media Details\n+     * @return a map containing caption and depictions (empty string in the map if no caption/depictions)\n+     */\n+    @SuppressLint(\"CheckResult\")\n+    private JsonObject fetchCaptionandDepictionsFromMediaDetailResponse(MediaDetailResponse mediaDetailResponse) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NjAwOA==", "bodyText": "Define concrete classes", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396046008", "createdAt": "2020-03-22T01:52:06Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/mwapi/OkHttpJsonApiClient.java", "diffHunk": "@@ -208,6 +213,94 @@ public OkHttpJsonApiClient(OkHttpClient okHttpClient,\n         });\n     }\n \n+    /**\n+     * Get the QIDs of all Wikidata items that are subclasses of the given Wikidata item.\n+     * Example: bridge -> suspended bridge, aqueduct, etc\n+     */\n+    public Observable<ArrayList<DepictedItem>> getChildQIDs(String qid) throws IOException {\n+        String queryString = FileUtils.readFromResource(\"/queries/subclasses_query.rq\");\n+        String query = queryString.\n+                replace(\"${QID}\", qid)\n+                .replace(\"${LANG}\", \"\\\"\"+Locale.getDefault().getLanguage()+\"\\\"\");\n+        Timber.e(query);\n+        HttpUrl.Builder urlBuilder = HttpUrl\n+                .parse(sparqlQueryUrl)\n+                .newBuilder()\n+                .addQueryParameter(\"query\", query)\n+                .addQueryParameter(\"format\", \"json\");\n+        Request request = new Request.Builder()\n+                .url(urlBuilder.build())\n+                .build();\n+        return Observable.fromCallable(() -> {\n+            Response response = okHttpClient.newCall(request).execute();\n+            String json = response.body().string();\n+            SparqlQueryResponse example  = gson.fromJson(json, SparqlQueryResponse.class);\n+            List<Binding> bindings = example.getResults().getBindings();\n+            ArrayList<DepictedItem> subItems = new ArrayList<>();\n+            for (Binding binding : bindings) {\n+                if (binding.getSubclassLabel().getXmlLang() != null) {\n+                    String label = binding.getSubclassLabel().getValue();\n+                    String entityId = binding.getSubclass().getValue();\n+                    entityId = entityId.substring(entityId.lastIndexOf(\"/\") - 1);\n+                    subItems.add(new DepictedItem(label, \"\", \"\", false,entityId ));\n+                    Timber.e(label);\n+                }\n+            }\n+            return subItems;\n+        }).doOnError(throwable -> {\n+            Timber.e(throwable.toString());\n+        });\n+    }\n+\n+    /**\n+     * Get the QIDs of all Wikidata items that are subclasses of the given Wikidata item.\n+     * Example: bridge -> suspended bridge, aqueduct, etc\n+     */\n+    public Observable<ArrayList<DepictedItem>> getParentQIDs(String qid) throws IOException {\n+        String queryString = FileUtils.readFromResource(\"/queries/parentclasses_query.rq\");\n+        String query = queryString.\n+                replace(\"${QID}\", qid)\n+                .replace(\"${LANG}\", \"\\\"\"+Locale.getDefault().getLanguage()+\"\\\"\");\n+        Timber.e(query);\n+        HttpUrl.Builder urlBuilder = HttpUrl\n+                .parse(sparqlQueryUrl)\n+                .newBuilder()\n+                .addQueryParameter(\"query\", query)\n+                .addQueryParameter(\"format\", \"json\");\n+        Request request = new Request.Builder()\n+                .url(urlBuilder.build())\n+                .build();\n+        return Observable.fromCallable(() -> {\n+            Response response = okHttpClient.newCall(request).execute();\n+            try {\n+                String json = response.body().string();\n+                JSONObject jsonObject = new JSONObject(json);\n+                ArrayList<DepictedItem> subItems = new ArrayList<>();\n+                JSONObject results = (JSONObject) jsonObject.get(\"results\");\n+                JSONArray bindings = (JSONArray) results.get(\"bindings\");\n+                for (int i = 0; i < bindings.length(); i++) {\n+                    Timber.e(bindings.get(i).getClass().toString());\n+                    JSONObject object = (JSONObject) bindings.get(i);\n+                    JSONObject parentClassLabel = (JSONObject) object.get(\"parentClassLabel\");\n+                    if (parentClassLabel.get(\"value\") != null) {\n+                        String labelString = parentClassLabel.getString(\"value\");\n+                        JSONObject parentClass = (JSONObject) object.get(\"parentClass\");\n+                        if (parentClass.get(\"value\") != null) {\n+                            String entityId = parentClass.getString(\"value\");\n+                            entityId = entityId.substring(entityId.lastIndexOf(\"/\") + 1);\n+                            subItems.add(new DepictedItem(labelString, \"\", \"\", false, entityId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4OTczMTU0", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#pullrequestreview-378973154", "createdAt": "2020-03-22T05:18:54Z", "commit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwNToxODo1NFrOF5tUmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwNToxODo1NFrOF5tUmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA1NTcwNQ==", "bodyText": "Are we not saving this to db?", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396055705", "createdAt": "2020-03-22T05:18:54Z", "author": {"login": "ashishkumar468"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionViewHolder.java", "diffHunk": "@@ -99,6 +106,30 @@ public void init(int position, Contribution contribution) {\n         }\n     }\n \n+    /**\n+     * In contributions first we show the title for the image stored in cache,\n+     * then we fetch captions associated with the image and replace title on the thumbnail with caption\n+     *\n+     * @param contribution\n+     */\n+    private void fetchAndDisplayCaption(Contribution contribution) {\n+        if ((contribution.getState() != Contribution.STATE_COMPLETED)) {\n+            titleView.setText(contribution.getDisplayTitle());\n+        } else {\n+            Timber.d(\"Fetching caption for %s\", contribution.getFilename());\n+            String wikibaseMediaId = \"M\"+contribution.getPageId(); // Create Wikibase media id from the page id. Example media id: M80618155 for https://commons.wikimedia.org/wiki/File:Tantanmen.jpeg with has the pageid 80618155\n+            compositeDisposable.add(mediaClient.getCaptionByWikibaseIdentifier(wikibaseMediaId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4OTczMjUx", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#pullrequestreview-378973251", "createdAt": "2020-03-22T05:21:32Z", "commit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwNToyMTozM1rOF5tVEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwNToyMTozM1rOF5tVEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA1NTgyNg==", "bodyText": "Why <=0", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396055826", "createdAt": "2020-03-22T05:21:33Z", "author": {"login": "ashishkumar468"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/GridViewAdapter.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package fr.free.nrw.commons.depictions;\n+\n+import android.content.Context;\n+import android.text.TextUtils;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ArrayAdapter;\n+import android.widget.TextView;\n+\n+import androidx.annotation.Nullable;\n+\n+import com.facebook.drawee.view.SimpleDraweeView;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.R;\n+\n+/**\n+ * Adapter for Items in DepictionDetailsActivity\n+ */\n+public class GridViewAdapter extends ArrayAdapter {\n+\n+        private List<Media> data;\n+\n+        public GridViewAdapter(Context context, int layoutResourceId, List<Media> data) {\n+            super(context, layoutResourceId, data);\n+            this.data = data;\n+        }\n+\n+        /**\n+         * Adds more item to the list\n+         * Its triggered on scrolling down in the list\n+         * @param images\n+         */\n+        public void addItems(List<Media> images) {\n+            if (data == null) {\n+                data = new ArrayList<>();\n+            }\n+            data.addAll(images);\n+            notifyDataSetChanged();\n+        }\n+\n+        /**\n+         * Check the first item in the new list with old list and returns true if they are same\n+         * Its triggered on successful response of the fetch images API.\n+         * @param images\n+         */\n+        public boolean containsAll(List<Media> images){\n+            if (images == null || images.isEmpty()) {\n+                return false;\n+            }\n+            if (data == null) {\n+                data = new ArrayList<>();\n+                return false;\n+            }\n+            if (data.size() <= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4OTczMjY5", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#pullrequestreview-378973269", "createdAt": "2020-03-22T05:21:59Z", "commit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwNToyMjowMFrOF5tVJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwNToyMjowMFrOF5tVJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA1NTg0NA==", "bodyText": "Is this intentional", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396055844", "createdAt": "2020-03-22T05:22:00Z", "author": {"login": "ashishkumar468"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/GridViewAdapter.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package fr.free.nrw.commons.depictions;\n+\n+import android.content.Context;\n+import android.text.TextUtils;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ArrayAdapter;\n+import android.widget.TextView;\n+\n+import androidx.annotation.Nullable;\n+\n+import com.facebook.drawee.view.SimpleDraweeView;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.R;\n+\n+/**\n+ * Adapter for Items in DepictionDetailsActivity\n+ */\n+public class GridViewAdapter extends ArrayAdapter {\n+\n+        private List<Media> data;\n+\n+        public GridViewAdapter(Context context, int layoutResourceId, List<Media> data) {\n+            super(context, layoutResourceId, data);\n+            this.data = data;\n+        }\n+\n+        /**\n+         * Adds more item to the list\n+         * Its triggered on scrolling down in the list\n+         * @param images\n+         */\n+        public void addItems(List<Media> images) {\n+            if (data == null) {\n+                data = new ArrayList<>();\n+            }\n+            data.addAll(images);\n+            notifyDataSetChanged();\n+        }\n+\n+        /**\n+         * Check the first item in the new list with old list and returns true if they are same\n+         * Its triggered on successful response of the fetch images API.\n+         * @param images\n+         */\n+        public boolean containsAll(List<Media> images){\n+            if (images == null || images.isEmpty()) {\n+                return false;\n+            }\n+            if (data == null) {\n+                data = new ArrayList<>();\n+                return false;\n+            }\n+            if (data.size() <= 0) {\n+                return false;\n+            }\n+            String fileName = data.get(0).getFilename();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4OTczNDIw", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#pullrequestreview-378973420", "createdAt": "2020-03-22T05:26:17Z", "commit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwNToyNjoxN1rOF5tWEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwNToyNjoxN1rOF5tWEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA1NjA4Mg==", "bodyText": "Should we consider replacing timeouts from over here, OKHTTP client does have timeout anyways", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396056082", "createdAt": "2020-03-22T05:26:17Z", "author": {"login": "ashishkumar468"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/Media/DepictedImagesPresenter.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package fr.free.nrw.commons.depictions.Media;\n+\n+import android.annotation.SuppressLint;\n+\n+import java.lang.reflect.Proxy;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.explore.depictions.DepictsClient;\n+import fr.free.nrw.commons.kvstore.JsonKvStore;\n+import fr.free.nrw.commons.media.MediaClient;\n+import io.reactivex.Scheduler;\n+import io.reactivex.disposables.CompositeDisposable;\n+import timber.log.Timber;\n+\n+import static fr.free.nrw.commons.di.CommonsApplicationModule.IO_THREAD;\n+import static fr.free.nrw.commons.di.CommonsApplicationModule.MAIN_THREAD;\n+\n+/**\n+ * Presenter for DepictedImagesFragment\n+ */\n+public class DepictedImagesPresenter implements DepictedImagesContract.UserActionListener {\n+\n+    private static final DepictedImagesContract.View DUMMY = (DepictedImagesContract.View) Proxy\n+            .newProxyInstance(\n+                    DepictedImagesContract.View.class.getClassLoader(),\n+                    new Class[]{DepictedImagesContract.View.class},\n+                    (proxy, method, methodArgs) -> null);\n+    private static int TIMEOUT_SECONDS = 15;\n+    DepictsClient depictsClient;\n+    MediaClient mediaClient;\n+    @Named(\"default_preferences\")\n+    JsonKvStore depictionKvStore;\n+    private final Scheduler ioScheduler;\n+    private final Scheduler mainThreadScheduler;\n+    private DepictedImagesContract.View view = DUMMY;\n+    private CompositeDisposable compositeDisposable = new CompositeDisposable();\n+    /**\n+     * Wikibase enitityId for the depicted Item\n+     * Ex: Q9394\n+     */\n+    private String entityId = null;\n+    private List<Media> queryList = new ArrayList<>();\n+\n+    @Inject\n+    public DepictedImagesPresenter(@Named(\"default_preferences\") JsonKvStore depictionKvStore, DepictsClient depictsClient, MediaClient mediaClient,  @Named(IO_THREAD) Scheduler ioScheduler,\n+                                   @Named(MAIN_THREAD) Scheduler mainThreadScheduler) {\n+        this.depictionKvStore = depictionKvStore;\n+        this.depictsClient = depictsClient;\n+        this.ioScheduler = ioScheduler;\n+        this.mainThreadScheduler = mainThreadScheduler;\n+        this.mediaClient = mediaClient;\n+    }\n+\n+    @Override\n+    public void onAttachView(DepictedImagesContract.View view) {\n+        this.view = view;\n+    }\n+\n+    @Override\n+    public void onDetachView() {\n+        this.view = DUMMY;\n+    }\n+\n+    /**\n+     * Checks for internet connection and then initializes the grid view with first 10 images of that depiction\n+     */\n+    @SuppressLint(\"CheckResult\")\n+    @Override\n+    public void initList(String entityId) {\n+        view.setLoadingStatus(true);\n+        view.progressBarVisible(true);\n+        view.setIsLastPage(false);\n+        compositeDisposable.add(depictsClient.fetchImagesForDepictedItem(entityId, 25, 0)\n+                .subscribeOn(ioScheduler)\n+                .observeOn(mainThreadScheduler)\n+                .timeout(TIMEOUT_SECONDS, TimeUnit.SECONDS)\n+                .subscribe(this::handleSuccess, this::handleError));\n+    }\n+\n+    /**\n+     * Fetches more images for the item and adds it to the grid view adapter\n+     */\n+    @SuppressLint(\"CheckResult\")\n+    @Override\n+    public void fetchMoreImages() {\n+        view.progressBarVisible(true);\n+        compositeDisposable.add(depictsClient.fetchImagesForDepictedItem(entityId, 25, queryList.size())\n+                .subscribeOn(ioScheduler)\n+                .observeOn(mainThreadScheduler)\n+                .timeout(TIMEOUT_SECONDS, TimeUnit.SECONDS)\n+                .subscribe(this::handlePaginationSuccess, this::handleError));\n+    }\n+\n+    /**\n+     * Handles the success scenario\n+     * it initializes the recycler view by adding items to the adapter\n+     */\n+    private void handlePaginationSuccess(List<Media> media) {\n+        queryList.addAll(media);\n+        view.progressBarVisible(false);\n+        view.addItemsToAdapter(media);\n+    }\n+\n+    /**\n+     * Logs and handles API error scenario\n+     *\n+     * @param throwable\n+     */\n+    public void handleError(Throwable throwable) {\n+        Timber.e(throwable, \"Error occurred while loading images inside items\");\n+        try {\n+            view.initErrorView();\n+            view.showSnackBar();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+\n+    }\n+\n+    /**\n+     * Handles the success scenario\n+     * On first load, it initializes the grid view. On subsequent loads, it adds items to the adapter\n+     * @param collection List of new Media to be displayed\n+     */\n+    public void handleSuccess(List<Media> collection) {\n+        if (collection == null || collection.isEmpty()) {\n+            if (queryList.isEmpty()) {\n+                view.initErrorView();\n+            } else {\n+                view.setIsLastPage(true);\n+            }\n+        } else {\n+            this.queryList.addAll(collection);\n+            view.handleSuccess(collection);\n+        }\n+    }\n+\n+    /**\n+     * fetch captions for the image using filename and replace title of on the image thumbnail(if captions are available)\n+     * else show filename\n+     */\n+    @Override\n+    public void replaceTitlesWithCaptions(String wikibaseIdentifier, int position) {\n+        compositeDisposable.add(mediaClient.getCaptionByWikibaseIdentifier(wikibaseIdentifier)\n+                .subscribeOn(ioScheduler)\n+                .observeOn(mainThreadScheduler)\n+                .timeout(TIMEOUT_SECONDS, TimeUnit.SECONDS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 153}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4OTczNTc3", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#pullrequestreview-378973577", "createdAt": "2020-03-22T05:30:36Z", "commit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwNTozMDozNlrOF5tW4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwNTozMDozNlrOF5tW4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA1NjI4OA==", "bodyText": "use proper name for this", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396056288", "createdAt": "2020-03-22T05:30:36Z", "author": {"login": "ashishkumar468"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/WikidataItemDetailsActivity.java", "diffHunk": "@@ -0,0 +1,204 @@\n+package fr.free.nrw.commons.depictions;\n+\n+import android.content.Context;\n+import android.content.Intent;\n+import android.os.Bundle;\n+import android.view.View;\n+import android.widget.AdapterView;\n+import android.widget.FrameLayout;\n+\n+import androidx.fragment.app.Fragment;\n+import androidx.fragment.app.FragmentManager;\n+import androidx.viewpager.widget.ViewPager;\n+\n+import com.google.android.material.tabs.TabLayout;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import butterknife.BindView;\n+import butterknife.ButterKnife;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.R;\n+import fr.free.nrw.commons.depictions.Media.DepictedImagesFragment;\n+import fr.free.nrw.commons.depictions.SubClass.SubDepictionListFragment;\n+import fr.free.nrw.commons.explore.ViewPagerAdapter;\n+import fr.free.nrw.commons.media.MediaDetailPagerFragment;\n+import fr.free.nrw.commons.theme.NavigationBaseActivity;\n+import fr.free.nrw.commons.upload.structure.depictions.DepictedItem;\n+\n+/**\n+ * Activity to show depiction media, parent classes and child classes of depicted items in Explore\n+ */\n+public class WikidataItemDetailsActivity extends NavigationBaseActivity implements MediaDetailPagerFragment.MediaDetailProvider, AdapterView.OnItemClickListener {\n+    private FragmentManager supportFragmentManager;\n+    private DepictedImagesFragment depictionImagesListFragment;\n+    private MediaDetailPagerFragment mediaDetails;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "895b343f81ca7d2c46d158bda68e0f370ebab8cb", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/895b343f81ca7d2c46d158bda68e0f370ebab8cb", "committedDate": "2020-03-23T11:30:02Z", "message": "#3222 Merge master into Structured Data branch, fix conflicts - review fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NjAxMTM2", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#pullrequestreview-379601136", "createdAt": "2020-03-23T16:29:05Z", "commit": {"oid": "895b343f81ca7d2c46d158bda68e0f370ebab8cb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e439952760b5b07bf0952fb451ccf20fd957cef", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/2e439952760b5b07bf0952fb451ccf20fd957cef", "committedDate": "2020-03-24T08:21:02Z", "message": "Merge remote-tracking branch 'origin/master' into structured-data\n\n# Conflicts:\n#\tapp/src/main/java/fr/free/nrw/commons/upload/UploadMediaDetailAdapter.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5b62befc9f11f4d40d8bc5a3d2114148d8d51ce", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/d5b62befc9f11f4d40d8bc5a3d2114148d8d51ce", "committedDate": "2020-03-24T13:35:49Z", "message": "Merge remote-tracking branch 'origin/master' into structured-data\n\n# Conflicts:\n#\tapp/src/main/java/fr/free/nrw/commons/upload/UploadService.java\n#\tapp/src/main/java/fr/free/nrw/commons/wikidata/WikidataEditService.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2854f6af02378247c9c4ef3db13b9bb488b12f18", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/2854f6af02378247c9c4ef3db13b9bb488b12f18", "committedDate": "2020-03-24T13:48:15Z", "message": "Fix method invocations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "587d97716a2e1bed889da53b9b05e4426033a12e", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/587d97716a2e1bed889da53b9b05e4426033a12e", "committedDate": "2020-03-25T10:13:06Z", "message": "Merge branch 'master' into structured-data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23b8c2e6594131a3e59ad44ba021ad29061b0655", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/23b8c2e6594131a3e59ad44ba021ad29061b0655", "committedDate": "2020-03-25T10:42:29Z", "message": "#3529 Captions/depictions are not saved to Commons (#3574)\n\n* #3529 Captions/depictions are not saved to Commons - make copy of list of depictionEntityIds - uncomment editBaseDepictsProperty - refactor upload related classes\r\n\r\n* #3529 Captions/depictions are not saved to Commons - fix wrong ArrayList usage\r\n\r\n* #3529 Captions/depictions are not saved to Commons - fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dec68ed9221012b7c851a88cee166a9cd3b95f3e", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/dec68ed9221012b7c851a88cee166a9cd3b95f3e", "committedDate": "2020-03-26T10:17:05Z", "message": "#3503 Remove Title/Caption From MediaUploadDetail and only use Caption/Description pairs  (#3578)\n\n* #3529 Captions/depictions are not saved to Commons - make copy of list of depictionEntityIds - uncomment editBaseDepictsProperty - refactor upload related classes\r\n\r\n* #3529 Captions/depictions are not saved to Commons - fix wrong ArrayList usage\r\n\r\n* #3529 Captions/depictions are not saved to Commons - fix test\r\n\r\n* #3503 Remove Title/Caption From MediaUploadDetail and only use Caption/Description pairs - replace title with the first MediaDetail\r\n\r\n* #3503 Remove Title/Caption From MediaUploadDetail and only use Caption/Description pairs - restore button disabling\r\n\r\n* #3503 Remove Title/Caption From MediaUploadDetail and only use Caption/Description pairs - fix nearby place"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00e93571151b10db80dcc1b3410b10cbb95c855d", "author": {"user": {"login": "vvijayalakshmi21", "name": null}}, "url": "https://github.com/commons-app/apps-android-commons/commit/00e93571151b10db80dcc1b3410b10cbb95c855d", "committedDate": "2020-04-02T05:48:57Z", "message": "fix thumbnail issue 3526 (#3617)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d2c786392efe6008bb23a892f90fec3efd76396", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/5d2c786392efe6008bb23a892f90fec3efd76396", "committedDate": "2020-04-07T10:35:01Z", "message": "Merge remote-tracking branch 'origin/master' into structured-data\n\n# Conflicts:\n#\tapp/src/main/java/fr/free/nrw/commons/Media.java\n#\tapp/src/main/java/fr/free/nrw/commons/contributions/Contribution.java\n#\tapp/src/main/java/fr/free/nrw/commons/upload/UploadService.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9797a706af0ad8f18f83c1317b69cb19b034326", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/a9797a706af0ad8f18f83c1317b69cb19b034326", "committedDate": "2020-04-07T12:40:16Z", "message": "#3222 Merge master into Structured Data branch, fix conflicts - fix bad merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f6d26c296928b524a7d92c52956d95ff44072cb", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/3f6d26c296928b524a7d92c52956d95ff44072cb", "committedDate": "2020-04-09T10:01:12Z", "message": "Merge branch 'master' into structured-data\n\n# Conflicts:\n#\tbuild.gradle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "628a6056e071f8c29464a1d219ebb5e12136b0dc", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/628a6056e071f8c29464a1d219ebb5e12136b0dc", "committedDate": "2020-04-09T15:38:40Z", "message": "#3529 Captions/depictions are not saved to Commons (#3588)\n\n* #3529 Captions/depictions are not saved to Commons - update flow to update appropriate data\r\n\r\n* #3529 Captions/depictions are not saved to Commons - fix invoking of setlabel\r\n\r\n* #3529 Captions/depictions are not saved to Commons - fix unit tests\r\n\r\n* #3529 Captions/depictions are not saved to Commons - use constant for @Named\r\n\r\n* #3529 Captions/depictions are not saved to Commons - remove captions interface\r\n\r\n* #3529 Captions/depictions are not saved to Commons - delete unused Contribution fields - enforce Single Responsibility by using PageContentsCreator\r\n\r\n* #3529 Captions/depictions are not saved to Commons - prefix id with M - remove language from url and only add from Field\r\n\r\n* #3529 Captions/depictions are not saved to Commons - make edits of depictions and captions sequential\r\n\r\n* #3529 Captions/depictions are not saved to Commons - remove unused model fields\r\n\r\n* #3529 Captions/depictions are not saved to Commons - weaken type of categories - copy list on Contribution creation\r\n\r\n* #3529 Captions/depictions are not saved to Commons - mark Media fields private - weaken types - remove partly implemented fields\r\n\r\n* #3529 Captions/depictions are not saved to Commons - add semi colon\r\n\r\n* #3529 Captions/depictions are not saved to Commons - fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62f176443b1a5503610ab76bf364651f5e2657de", "author": {"user": {"login": "vvijayalakshmi21", "name": null}}, "url": "https://github.com/commons-app/apps-android-commons/commit/62f176443b1a5503610ab76bf364651f5e2657de", "committedDate": "2020-04-10T09:56:14Z", "message": "Fix issue 3526 Unlike \"Items\" tab, \"child classes\" tab does not display description nor image thumbnail (#3619)\n\n* fix thumbnail issue 3526\r\n\r\n* Fix Description issue 3526\r\n\r\n* revert changes on this file, not finished with it yet\r\n\r\n* Fix Description for Child and Parent classes - issue 3526\r\n\r\n* Remove conflict text in file\r\n\r\n* Remove retrofit.HEAD import\r\n\r\n* Incorporated review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46847f0d772ddca74b7d7960d0ae494aa42f9251", "author": {"user": {"login": "vvijayalakshmi21", "name": null}}, "url": "https://github.com/commons-app/apps-android-commons/commit/46847f0d772ddca74b7d7960d0ae494aa42f9251", "committedDate": "2020-04-10T10:40:36Z", "message": "Fix issue 3137 (#3637)\n\n* Fix issue 3137\r\n\r\n* Remove import Timber\r\n\r\n* Remove unnecessary space"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94da06183671a9adafde914f5f466f08c9f5d25a", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/94da06183671a9adafde914f5f466f08c9f5d25a", "committedDate": "2020-04-10T11:32:25Z", "message": "#3222 Merge master into Structured Data branch, fix conflicts - revert logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "752d6341141c64f1d6419d6a2dd7fed38b804a8f", "author": {"user": {"login": "maskaravivek", "name": "Vivek Maskara"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/752d6341141c64f1d6419d6a2dd7fed38b804a8f", "committedDate": "2020-04-14T17:52:12Z", "message": "Merge branch 'master' into structured-data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dee963885884ea4085fff19f1d85f1a04162714e", "author": {"user": {"login": "maskaravivek", "name": "Vivek Maskara"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/dee963885884ea4085fff19f1d85f1a04162714e", "committedDate": "2020-04-15T02:57:57Z", "message": "Fix build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8f980958481c7a531f3bbdd4dbf01a90ed480ae", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/d8f980958481c7a531f3bbdd4dbf01a90ed480ae", "committedDate": "2020-04-16T09:15:28Z", "message": "#3661 No Depictions Selected Dialog has reversed buttons - fix button order"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9cd3b4dbdfd26bf6c9d4d44ab50de8656a5ee85", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/e9cd3b4dbdfd26bf6c9d4d44ab50de8656a5ee85", "committedDate": "2020-04-16T09:16:27Z", "message": "Revert \"#3661 No Depictions Selected Dialog has reversed buttons - fix button order\"\n\nThis reverts commit d8f980958481c7a531f3bbdd4dbf01a90ed480ae."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9e67889885b073d993d6d89a54316ae9e1c35f4", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/c9e67889885b073d993d6d89a54316ae9e1c35f4", "committedDate": "2020-04-16T09:25:56Z", "message": "Merge branch 'master' into structured-data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92d684820f35c6c082b8e531449a4fcc08e67c69", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/92d684820f35c6c082b8e531449a4fcc08e67c69", "committedDate": "2020-04-16T09:36:16Z", "message": "#3222 Merge master into Structured Data branch, fix conflicts - remove unused methods/fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2e76524ee9c32c453e31b902416285e9fab7f9a", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/d2e76524ee9c32c453e31b902416285e9fab7f9a", "committedDate": "2020-04-16T17:35:52Z", "message": "#3661 No Depictions Selected Dialog has reversed buttons - fix button order (#3662)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7384b32ad99d0166c44fa3d85f222ac57624fa8", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/b7384b32ad99d0166c44fa3d85f222ac57624fa8", "committedDate": "2020-04-16T17:38:41Z", "message": "#3653 Many Mnull requests - stop requesting captions for null ids (#3657)\n\n* #3653 Many Mnull requests - stop requesting captions for null ids\r\n\r\n* #3653 Many Mnull requests - move log line"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "590a7ed93f60ab21fcc695649023de730053427c", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/590a7ed93f60ab21fcc695649023de730053427c", "committedDate": "2020-04-16T17:40:09Z", "message": "#3633 [structured-data branch] In depictions selection screen, suggest nearby items  (#3650)\n\n* #3633 [structured-data branch] In depictions selection screen, suggest nearby items - for empty search terms show nearby items for depictions\r\n\r\n* #3633 [structured-data branch] In depictions selection screen, suggest nearby items - use linear radii progression to search for places"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "194d31e852c91602937cead3854aa1a02617be4c", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/194d31e852c91602937cead3854aa1a02617be4c", "committedDate": "2020-04-17T17:46:29Z", "message": "#3666 Crash when uploading on structured-data branch - revert cleanup of UploadController (#3670)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41f30761ee42f9bc754cc61d97297db7811d7e66", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/41f30761ee42f9bc754cc61d97297db7811d7e66", "committedDate": "2020-04-20T09:36:47Z", "message": "Merge branch 'master' into structured-data\n\n# Conflicts:\n#\tapp/src/main/java/fr/free/nrw/commons/OkHttpConnectionFactory.java\n#\tapp/src/main/java/fr/free/nrw/commons/contributions/Contribution.java\n#\tapp/src/main/java/fr/free/nrw/commons/media/MediaDetailPagerFragment.java\n#\tapp/src/main/res/layout/fragment_media_detail.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25bcff2e34daeeed117ba73ba1a609b3ed7f490d", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/25bcff2e34daeeed117ba73ba1a609b3ed7f490d", "committedDate": "2020-04-20T12:24:32Z", "message": "#3222 Merge Structured Data branch into master - fix caption rendering in new UI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe9d6ca19495f5e4ce759805da99e0637bcf893e", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/fe9d6ca19495f5e4ce759805da99e0637bcf893e", "committedDate": "2020-04-20T12:26:34Z", "message": "Merge remote-tracking branch 'origin/master' into structured-data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b20dec0f1a78acd181f6134bb0df40aab4110e3f", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/b20dec0f1a78acd181f6134bb0df40aab4110e3f", "committedDate": "2020-04-20T12:33:54Z", "message": "#3222 Merge Structured Data branch into master - upgrade retrofit + okhttp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7b1b1446fa69ff739e195fc2e419d1059417467", "author": {"user": {"login": "macgills", "name": "Se\u00e1n Mac Gillicuddy"}}, "url": "https://github.com/commons-app/apps-android-commons/commit/f7b1b1446fa69ff739e195fc2e419d1059417467", "committedDate": "2020-04-20T16:52:20Z", "message": "#3664 Stop using JsonObject on StructuredData (#3672)\n\n* #3664 Stop using JsonObject on StructuredData - remove usage in Media classes - remove from depicts client - create partial network models\r\n\r\n* #3664 Stop using JsonObject on StructuredData - allow partial mapping of polymorphic models by returning null in typeadapter\r\n\r\n* #3664 Stop using JsonObject on StructuredData - use models for editing depicts property\r\n\r\n* #3664 Stop using JsonObject on StructuredData - use models for sparql parent query\r\n\r\n* #3664 Stop using JsonObject on StructuredData - fix unit test compilation\r\n\r\n* #3664 Stop using JsonObject on StructuredData - unify sparql responses\r\n\r\n* #3664 Stop using JsonObject on StructuredData - minor cleanup of misnamed/unused/too broad visibility\r\n\r\n* #3664 Stop using JsonObject on StructuredData - share variable names and logic for the Sarql queries\r\n\r\n* #3664 Stop using JsonObject on StructuredData - add error logging"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MTY5OTIw", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#pullrequestreview-397169920", "createdAt": "2020-04-21T09:49:55Z", "commit": {"oid": "f7b1b1446fa69ff739e195fc2e419d1059417467"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NDc1MTE3", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#pullrequestreview-397475117", "createdAt": "2020-04-21T16:33:25Z", "commit": {"oid": "f7b1b1446fa69ff739e195fc2e419d1059417467"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 447, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}