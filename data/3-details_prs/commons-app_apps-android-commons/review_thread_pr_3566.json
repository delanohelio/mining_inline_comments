{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMTg2MjYx", "number": 3566, "reviewThreads": {"totalCount": 46, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODo1MjowM1rODznmaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODoyMzowNFrOD__D9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDUyNzc2OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/di/CommonsApplicationModule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODo1MjowM1rOGIKCeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjo1Mzo0MFrOGIeLWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwNjI2NA==", "bodyText": "If we just delete everything instead of migrating data we could fallbackDestructively like mentioned here", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r411206264", "createdAt": "2020-04-20T08:52:03Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/di/CommonsApplicationModule.java", "diffHunk": "@@ -231,10 +234,55 @@ public QuadTree providesQuadTres() {\n     @Provides\n     @Singleton\n     public AppDatabase provideAppDataBase() {\n-        appDatabase=Room.databaseBuilder(applicationContext, AppDatabase.class, \"commons_room.db\").build();\n+        Builder<AppDatabase> appDatabaseBuilder = Room\n+            .databaseBuilder(applicationContext, AppDatabase.class, \"commons_room.db\");\n+        appDatabaseBuilder.addMigrations(MIGRATION_1_2);\n+        appDatabase = appDatabaseBuilder.build();\n         return appDatabase;\n     }\n \n+    static final Migration MIGRATION_1_2 = new Migration(1, 2) {\n+        @Override\n+        public void migrate(SupportSQLiteDatabase database) {\n+            database.execSQL(\"DROP TABLE `contribution`\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9ed4e5e6ae94bdaf50562750b0067453fb0ab9f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzNjIxOA==", "bodyText": "Thanks, @macgills. Will make this change.", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r411536218", "createdAt": "2020-04-20T16:53:40Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/di/CommonsApplicationModule.java", "diffHunk": "@@ -231,10 +234,55 @@ public QuadTree providesQuadTres() {\n     @Provides\n     @Singleton\n     public AppDatabase provideAppDataBase() {\n-        appDatabase=Room.databaseBuilder(applicationContext, AppDatabase.class, \"commons_room.db\").build();\n+        Builder<AppDatabase> appDatabaseBuilder = Room\n+            .databaseBuilder(applicationContext, AppDatabase.class, \"commons_room.db\");\n+        appDatabaseBuilder.addMigrations(MIGRATION_1_2);\n+        appDatabase = appDatabaseBuilder.build();\n         return appDatabase;\n     }\n \n+    static final Migration MIGRATION_1_2 = new Migration(1, 2) {\n+        @Override\n+        public void migrate(SupportSQLiteDatabase database) {\n+            database.execSQL(\"DROP TABLE `contribution`\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwNjI2NA=="}, "originalCommit": {"oid": "b9ed4e5e6ae94bdaf50562750b0067453fb0ab9f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTcwNjkyOnYy", "diffSide": "RIGHT", "path": ".idea/codeStyles/codeStyleConfig.xml", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDozMzoyMVrOGJvYxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDowNjowMlrOGQiqDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg2Njc1OQ==", "bodyText": "This might mean you are not using the Project Default?\nPlease verify your settings are like this", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r412866759", "createdAt": "2020-04-22T10:33:21Z", "author": {"login": "macgills"}, "path": ".idea/codeStyles/codeStyleConfig.xml", "diffHunk": "@@ -1,5 +1,6 @@\n <component name=\"ProjectCodeStyleConfiguration\">\n   <state>\n     <option name=\"USE_PER_PROJECT_SETTINGS\" value=\"true\" />\n+    <option name=\"PREFERRED_PROJECT_CODE_STYLE\" value=\"Default\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e12d310001fbf5df31c0245ab53c9e9f57fb8f6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUwNTMxMQ==", "bodyText": "I have been using project default for inspection. Also, these inspections are working for me as studio now points out several inspection issues which it didn't do earlier.", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r413505311", "createdAt": "2020-04-23T04:46:13Z", "author": {"login": "maskaravivek"}, "path": ".idea/codeStyles/codeStyleConfig.xml", "diffHunk": "@@ -1,5 +1,6 @@\n <component name=\"ProjectCodeStyleConfiguration\">\n   <state>\n     <option name=\"USE_PER_PROJECT_SETTINGS\" value=\"true\" />\n+    <option name=\"PREFERRED_PROJECT_CODE_STYLE\" value=\"Default\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg2Njc1OQ=="}, "originalCommit": {"oid": "1e12d310001fbf5df31c0245ab53c9e9f57fb8f6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYyNTc0OA==", "bodyText": "My apologies, I screenshot the wrong thing", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r413625748", "createdAt": "2020-04-23T08:39:40Z", "author": {"login": "macgills"}, "path": ".idea/codeStyles/codeStyleConfig.xml", "diffHunk": "@@ -1,5 +1,6 @@\n <component name=\"ProjectCodeStyleConfiguration\">\n   <state>\n     <option name=\"USE_PER_PROJECT_SETTINGS\" value=\"true\" />\n+    <option name=\"PREFERRED_PROJECT_CODE_STYLE\" value=\"Default\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg2Njc1OQ=="}, "originalCommit": {"oid": "1e12d310001fbf5df31c0245ab53c9e9f57fb8f6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYyOTY4NQ==", "bodyText": "That too is set to use project settings.\n\nEverytime i switch branch I keep stashing this change. Is there a way to fix it?", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r413629685", "createdAt": "2020-04-23T08:45:13Z", "author": {"login": "maskaravivek"}, "path": ".idea/codeStyles/codeStyleConfig.xml", "diffHunk": "@@ -1,5 +1,6 @@\n <component name=\"ProjectCodeStyleConfiguration\">\n   <state>\n     <option name=\"USE_PER_PROJECT_SETTINGS\" value=\"true\" />\n+    <option name=\"PREFERRED_PROJECT_CODE_STYLE\" value=\"Default\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg2Njc1OQ=="}, "originalCommit": {"oid": "1e12d310001fbf5df31c0245ab53c9e9f57fb8f6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYzOTQwOQ==", "bodyText": "This is the change that happens when I set my code style to default\nIf you just discard this change does it come back? You can try switching codestyles a bit (and clicking apply) and see what happens", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r413639409", "createdAt": "2020-04-23T08:58:43Z", "author": {"login": "macgills"}, "path": ".idea/codeStyles/codeStyleConfig.xml", "diffHunk": "@@ -1,5 +1,6 @@\n <component name=\"ProjectCodeStyleConfiguration\">\n   <state>\n     <option name=\"USE_PER_PROJECT_SETTINGS\" value=\"true\" />\n+    <option name=\"PREFERRED_PROJECT_CODE_STYLE\" value=\"Default\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg2Njc1OQ=="}, "originalCommit": {"oid": "1e12d310001fbf5df31c0245ab53c9e9f57fb8f6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk5ODIyMw==", "bodyText": "I found a potential solution that may work?", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r419998223", "createdAt": "2020-05-05T10:06:02Z", "author": {"login": "macgills"}, "path": ".idea/codeStyles/codeStyleConfig.xml", "diffHunk": "@@ -1,5 +1,6 @@\n <component name=\"ProjectCodeStyleConfiguration\">\n   <state>\n     <option name=\"USE_PER_PROJECT_SETTINGS\" value=\"true\" />\n+    <option name=\"PREFERRED_PROJECT_CODE_STYLE\" value=\"Default\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg2Njc1OQ=="}, "originalCommit": {"oid": "1e12d310001fbf5df31c0245ab53c9e9f57fb8f6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTcxMTQ5OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/Media.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDozNDozMlrOGJvbiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDowNzo0MFrOGQitUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg2NzQ2Nw==", "bodyText": "I think pageId is frequently null? I had that Pr where we kept requesting Mnull", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r412867467", "createdAt": "2020-04-22T10:34:32Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/Media.java", "diffHunk": "@@ -50,6 +51,8 @@\n     /**\n      * Wikibase Identifier associated with media files\n      */\n+    @PrimaryKey\n+    @NonNull\n     private String pageId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e12d310001fbf5df31c0245ab53c9e9f57fb8f6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUwNDU0OA==", "bodyText": "It won't be null for Media. It can be null for other API calls where MwQueryPage is returned as response.", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r413504548", "createdAt": "2020-04-23T04:43:52Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/Media.java", "diffHunk": "@@ -50,6 +51,8 @@\n     /**\n      * Wikibase Identifier associated with media files\n      */\n+    @PrimaryKey\n+    @NonNull\n     private String pageId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg2NzQ2Nw=="}, "originalCommit": {"oid": "1e12d310001fbf5df31c0245ab53c9e9f57fb8f6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk5OTA1OA==", "bodyText": "Then NonNull is not very true if it can be null. Is the annotation a Room requirement on primary keys? I've forgotten", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r419999058", "createdAt": "2020-05-05T10:07:40Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/Media.java", "diffHunk": "@@ -50,6 +51,8 @@\n     /**\n      * Wikibase Identifier associated with media files\n      */\n+    @PrimaryKey\n+    @NonNull\n     private String pageId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg2NzQ2Nw=="}, "originalCommit": {"oid": "1e12d310001fbf5df31c0245ab53c9e9f57fb8f6"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTc1NjIxOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListFragment.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDo0NToyOVrOGJv11Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODozNTowNFrOGKdgxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NDE5Nw==", "bodyText": "a GridLayoutManager with spanCount 1 is essentially analogous to LinearLayoutManager, I would believe\nThat way we could move this condition into a ternary and not create different types of LayoutManager", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r412874197", "createdAt": "2020-04-22T10:45:29Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListFragment.java", "diffHunk": "@@ -99,14 +105,21 @@ public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {\n     }\n \n     private void initRecyclerView() {\n+        Timber.d(\"RecyclerList Recycler view Init.\");\n+        LinearLayoutManager layoutManager;\n         if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {\n-            rvContributionsList.setLayoutManager(new GridLayoutManager(getContext(),SPAN_COUNT));\n+            layoutManager = new GridLayoutManager(getContext(), SPAN_COUNT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e12d310001fbf5df31c0245ab53c9e9f57fb8f6"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUwNDI3MA==", "bodyText": "We are using span count = 3.", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r413504270", "createdAt": "2020-04-23T04:42:57Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListFragment.java", "diffHunk": "@@ -99,14 +105,21 @@ public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {\n     }\n \n     private void initRecyclerView() {\n+        Timber.d(\"RecyclerList Recycler view Init.\");\n+        LinearLayoutManager layoutManager;\n         if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {\n-            rvContributionsList.setLayoutManager(new GridLayoutManager(getContext(),SPAN_COUNT));\n+            layoutManager = new GridLayoutManager(getContext(), SPAN_COUNT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NDE5Nw=="}, "originalCommit": {"oid": "1e12d310001fbf5df31c0245ab53c9e9f57fb8f6"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYyMjQ2OQ==", "bodyText": "Yes we are but Instead of a LinearLayoutManager and a GridLayoutManager we could use only a GridLayoutManager and based on Orientation set the span count", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r413622469", "createdAt": "2020-04-23T08:35:04Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListFragment.java", "diffHunk": "@@ -99,14 +105,21 @@ public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {\n     }\n \n     private void initRecyclerView() {\n+        Timber.d(\"RecyclerList Recycler view Init.\");\n+        LinearLayoutManager layoutManager;\n         if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {\n-            rvContributionsList.setLayoutManager(new GridLayoutManager(getContext(),SPAN_COUNT));\n+            layoutManager = new GridLayoutManager(getContext(), SPAN_COUNT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NDE5Nw=="}, "originalCommit": {"oid": "1e12d310001fbf5df31c0245ab53c9e9f57fb8f6"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTc4MDE4OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/media/MediaInterface.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDo1MToyN1rOGJwD9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDo1MToyN1rOGJwD9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NzgxMw==", "bodyText": "is this different from the above params?", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r412877813", "createdAt": "2020-04-22T10:51:27Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/media/MediaInterface.java", "diffHunk": "@@ -17,6 +15,11 @@\n     String MEDIA_PARAMS=\"&prop=imageinfo&iiprop=url|extmetadata&iiurlwidth=640\" +\n             \"&iiextmetadatafilter=DateTime|Categories|GPSLatitude|GPSLongitude|ImageDescription|DateTimeOriginal\" +\n             \"|Artist|LicenseShortName|LicenseUrl\";\n+\n+    String USER_MEDIA_PARAMS = \"&prop=imageinfo&iiprop=url|extmetadata&iiurlwidth=640\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e12d310001fbf5df31c0245ab53c9e9f57fb8f6"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTc5MTE4OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/media/MediaInterface.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDo1NDowOVrOGJwKcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDo1NDowOVrOGJwKcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3OTQ3Mw==", "bodyText": "the username is... the category name?", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r412879473", "createdAt": "2020-04-22T10:54:09Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/media/MediaInterface.java", "diffHunk": "@@ -48,6 +51,21 @@\n             MEDIA_PARAMS)\n     Observable<MwQueryResponse> getMediaListFromCategory(@Query(\"gcmtitle\") String category, @Query(\"gcmlimit\") int itemLimit, @QueryMap Map<String, String> continuation);\n \n+    /**\n+     * This method retrieves a list of Media objects for a given user name\n+     *\n+     * @param username     the category name. Must start with \"Category:\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e12d310001fbf5df31c0245ab53c9e9f57fb8f6"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTgwNjEwOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/upload/UploadService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDo1Nzo1NlrOGJwTTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDo1Nzo1NlrOGJwTTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4MTc0Mg==", "bodyText": "Not sure about this at all, at this point a contribution can't have a pageID as it doesn't exist on the servers, we try and save it with nothing(?) set as pageId? I am pretty sure @AutoGenerate has been removed so that won't work", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r412881742", "createdAt": "2020-04-22T10:57:56Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/upload/UploadService.java", "diffHunk": "@@ -162,7 +162,7 @@ public void queue(int what, Contribution contribution) {\n                         .subscribeOn(ioThreadScheduler)\n                         .observeOn(mainThreadScheduler)\n                         .subscribe(aLong->{\n-                            contribution.set_id(aLong);\n+                            contribution.setPageId(String.valueOf(aLong));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e12d310001fbf5df31c0245ab53c9e9f57fb8f6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MzQzNzQ5OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/OkHttpConnectionFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxODozNToxM1rOGMISug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxODozNToxM1rOGMISug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM3MTk2Mg==", "bodyText": "Is this intentional?", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r415371962", "createdAt": "2020-04-26T18:35:13Z", "author": {"login": "ashishkumar468"}, "path": "app/src/main/java/fr/free/nrw/commons/OkHttpConnectionFactory.java", "diffHunk": "@@ -45,7 +46,7 @@ private static OkHttpClient createClient() {\n \n     private static HttpLoggingInterceptor getLoggingInterceptor() {\n         final HttpLoggingInterceptor httpLoggingInterceptor = new HttpLoggingInterceptor()\n-                .setLevel(Level.BASIC);\n+            .setLevel(Level.BODY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d2216bad6b9a4e5f7beeba890c46678fe869e42"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MzQ0MDM0OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/contributions/Contribution.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxODozNjozM1rOGMIUBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxODozNjozM1rOGMIUBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM3MjI5NA==", "bodyText": "Maybe add a comment, why this constructor has state_completed by default", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r415372294", "createdAt": "2020-04-26T18:36:33Z", "author": {"login": "ashishkumar468"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/Contribution.java", "diffHunk": "@@ -161,17 +143,26 @@ public int describeContents() {\n     @Override\n     public void writeToParcel(final Parcel dest, final int flags) {\n         super.writeToParcel(dest, flags);\n-        dest.writeLong(_id);\n         dest.writeInt(state);\n         dest.writeLong(transferred);\n         dest.writeString(decimalCoords);\n         dest.writeString(dateCreatedSource);\n         dest.writeSerializable((HashMap) captions);\n     }\n \n+    public Contribution(Media media) {\n+        super(media.getPageId(),\n+            media.getLocalUri(), media.getThumbUrl(), media.getImageUrl(), media.getFilename(),\n+            media.getDescription(),\n+            media.getDiscussion(),\n+            media.getDataLength(), media.getDateCreated(), media.getDateUploaded(),\n+            media.getLicense(), media.getLicenseUrl(), media.getCreator(), media.getCategories(),\n+            media.isRequestedDeletion(), media.getCoordinates());\n+        this.state = STATE_COMPLETED;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d2216bad6b9a4e5f7beeba890c46678fe869e42"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDQ4Mjk0OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/Media.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDowODozNFrOGQivEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMToxMzo1MFrOGR5yOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk5OTUwNw==", "bodyText": "you could replace this line with this()", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r419999507", "createdAt": "2020-05-05T10:08:34Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/Media.java", "diffHunk": "@@ -64,14 +68,28 @@\n      * Provides local constructor\n      */\n     public Media() {\n+        pageId = UUID.randomUUID().toString();\n     }\n \n+    public static final Creator<Media> CREATOR = new Creator<Media>() {\n+        @Override\n+        public Media createFromParcel(final Parcel source) {\n+            return new Media(source);\n+        }\n+\n+        @Override\n+        public Media[] newArray(final int size) {\n+            return new Media[size];\n+        }\n+    };\n+\n     /**\n      * Provides a minimal constructor\n      *\n      * @param filename Media filename\n      */\n-    public Media(String filename) {\n+    public Media(final String filename) {\n+        pageId = UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d2216bad6b9a4e5f7beeba890c46678fe869e42"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM5MTcxOA==", "bodyText": "@macgills I didn't understand the requested change. Can you elaborate?", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r421391718", "createdAt": "2020-05-07T10:08:56Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/Media.java", "diffHunk": "@@ -64,14 +68,28 @@\n      * Provides local constructor\n      */\n     public Media() {\n+        pageId = UUID.randomUUID().toString();\n     }\n \n+    public static final Creator<Media> CREATOR = new Creator<Media>() {\n+        @Override\n+        public Media createFromParcel(final Parcel source) {\n+            return new Media(source);\n+        }\n+\n+        @Override\n+        public Media[] newArray(final int size) {\n+            return new Media[size];\n+        }\n+    };\n+\n     /**\n      * Provides a minimal constructor\n      *\n      * @param filename Media filename\n      */\n-    public Media(String filename) {\n+    public Media(final String filename) {\n+        pageId = UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk5OTUwNw=="}, "originalCommit": {"oid": "5d2216bad6b9a4e5f7beeba890c46678fe869e42"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQyNTcyMw==", "bodyText": "pageId = UUID.randomUUID().toString(); is repeated, you can invoke the parameter-less constructor by calling this() and stop the repetition.\nKotlin - because it is great - enforces this and all secondary constructors must delegate to the primary constructor.", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r421425723", "createdAt": "2020-05-07T11:13:50Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/Media.java", "diffHunk": "@@ -64,14 +68,28 @@\n      * Provides local constructor\n      */\n     public Media() {\n+        pageId = UUID.randomUUID().toString();\n     }\n \n+    public static final Creator<Media> CREATOR = new Creator<Media>() {\n+        @Override\n+        public Media createFromParcel(final Parcel source) {\n+            return new Media(source);\n+        }\n+\n+        @Override\n+        public Media[] newArray(final int size) {\n+            return new Media[size];\n+        }\n+    };\n+\n     /**\n      * Provides a minimal constructor\n      *\n      * @param filename Media filename\n      */\n-    public Media(String filename) {\n+    public Media(final String filename) {\n+        pageId = UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk5OTUwNw=="}, "originalCommit": {"oid": "5d2216bad6b9a4e5f7beeba890c46678fe869e42"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDQ5Njk4OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDoxMjo1M1rOGQi3zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDoxMjo1M1rOGQi3zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwMTc0MA==", "bodyText": "this method can probably be deleted?", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r420001740", "createdAt": "2020-05-05T10:12:53Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsFragment.java", "diffHunk": "@@ -307,43 +226,47 @@ void onAuthCookieAcquired() {\n \n     }\n \n-    public Intent getUploadServiceIntent(){\n-        Intent intent = new Intent(getActivity(), UploadService.class);\n-        intent.setAction(UploadService.ACTION_START_SERVICE);\n-        return intent;\n-    }\n+    private void initFragments() {\n+        if (null == contributionsListFragment) {\n+            contributionsListFragment = new ContributionsListFragment(this);\n+        }\n \n-    /**\n-     * Replace whatever is in the current contributionsFragmentContainer view with\n-     * mediaDetailPagerFragment, and preserve previous state in back stack.\n-     * Called when user selects a contribution.\n-     */\n-    private void showDetail(int i) {\n-        if (mediaDetailPagerFragment == null || !mediaDetailPagerFragment.isVisible()) {\n-            mediaDetailPagerFragment = new MediaDetailPagerFragment();\n+        if (shouldShowMediaDetailsFragment) {\n             showMediaDetailPagerFragment();\n+        } else {\n+            showContributionsListFragment();\n         }\n-        mediaDetailPagerFragment.showImage(i);\n+\n+        showFragment(contributionsListFragment, CONTRIBUTION_LIST_FRAGMENT_TAG);\n     }\n \n-    @Override\n-    public void refreshSource() {\n-        contributionsPresenter.fetchContributions();\n+    /**\n+     * Replaces the root frame layout with the given fragment\n+     *\n+     * @param fragment\n+     * @param tag\n+     */\n+    private void showFragment(Fragment fragment, String tag) {\n+        FragmentTransaction transaction = getChildFragmentManager().beginTransaction();\n+        transaction.replace(R.id.root_frame, fragment, tag);\n+        transaction.addToBackStack(CONTRIBUTION_LIST_FRAGMENT_TAG);\n+        transaction.commit();\n+        getChildFragmentManager().executePendingTransactions();\n     }\n \n-    @Override\n-    public Media getMediaAtPosition(int i) {\n-        return contributionsPresenter.getItemAtPosition(i);\n+    public Intent getUploadServiceIntent(){\n+        Intent intent = new Intent(getActivity(), UploadService.class);\n+        intent.setAction(UploadService.ACTION_START_SERVICE);\n+        return intent;\n     }\n \n     @Override\n-    public int getTotalMediaCount() {\n-        return numberOfContributions;\n+    public void refreshSource() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d2216bad6b9a4e5f7beeba890c46678fe869e42"}, "originalPosition": 267}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDUzMzUxOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/upload/UploadService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDoyNDoxNVrOGQjOAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDoyNDoxNVrOGQjOAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwNzQyNw==", "bodyText": "do we need this variable? It could be inlined like the previous code", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r420007427", "createdAt": "2020-05-05T10:24:15Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/upload/UploadService.java", "diffHunk": "@@ -299,11 +297,12 @@ private void saveCompletedContribution(Contribution contribution, UploadResult u\n         contribution.setState(Contribution.STATE_COMPLETED);\n         contribution.setDateUploaded(CommonsDateUtil.getIso8601DateFormatTimestamp()\n             .parse(uploadResult.getImageinfo().getTimestamp()));\n-        compositeDisposable.add(contributionDao\n-            .save(contribution)\n-            .subscribeOn(ioThreadScheduler)\n-            .observeOn(mainThreadScheduler)\n-            .subscribe());\n+\n+        final Disposable disposable = contributionDao.delete(contribution)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d2216bad6b9a4e5f7beeba890c46678fe869e42"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzYzMTM2OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMTozNzo0MlrOGR6gzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMTozNzo0MlrOGR6gzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQzNzY0NQ==", "bodyText": "\"concert\" in variable names and comments", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r421437645", "createdAt": "2020-05-07T11:37:42Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java", "diffHunk": "@@ -1,52 +1,54 @@\n package fr.free.nrw.commons.contributions;\n \n-import android.text.TextUtils;\n import android.view.LayoutInflater;\n import android.view.ViewGroup;\n import androidx.annotation.NonNull;\n-import androidx.recyclerview.widget.RecyclerView;\n+import androidx.paging.PagedListAdapter;\n+import androidx.recyclerview.widget.DiffUtil;\n import fr.free.nrw.commons.R;\n import fr.free.nrw.commons.media.MediaClient;\n import java.util.ArrayList;\n import java.util.List;\n \n /**\n- * Represents The View Adapter for the List of Contributions  \n+ * Represents The View Adapter for the List of Contributions\n  */\n-public class ContributionsListAdapter extends RecyclerView.Adapter<ContributionViewHolder> {\n+public class ContributionsListAdapter extends\n+    PagedListAdapter<Contribution, ContributionViewHolder> {\n \n     private Callback callback;\n     private final MediaClient mediaClient;\n     private List<Contribution> contributions;\n \n-    public ContributionsListAdapter(Callback callback,\n-        MediaClient mediaClient) {\n+    ContributionsListAdapter(final Callback callback,\n+        final MediaClient mediaClient) {\n+        super(DIFF_CALLBACK);\n         this.callback = callback;\n         this.mediaClient = mediaClient;\n         contributions = new ArrayList<>();\n+        setHasStableIds(true);\n     }\n \n-    /**\n-     * Creates the new View Holder which will be used to display items(contributions)\n-     * using the onBindViewHolder(viewHolder,position) \n-     */\n-    @NonNull\n-    @Override\n-    public ContributionViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n-        ContributionViewHolder viewHolder = new ContributionViewHolder(\n-                LayoutInflater.from(parent.getContext())\n-                        .inflate(R.layout.layout_contribution, parent, false), callback, mediaClient);\n-        return viewHolder;\n-    }\n+\n+    private static DiffUtil.ItemCallback<Contribution> DIFF_CALLBACK =\n+        new DiffUtil.ItemCallback<Contribution>() {\n+            // Concert details may have changed if reloaded from the database,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e93e491cafc130729bf2693cd7bc5da21a742d62"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzY3MjExOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMTo1MDoxN1rOGR65xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMTozMjoyOFrOGSREjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0NDAzNw==", "bodyText": "So you overrode equals to get the effect of old.pageId==new.pageId here by converting them to strings first. Couple problems\n\nQuite surprising, could have effects at any other comparison site\nAndroid studio will create hashCode, equals & toString methods for you, press alt+insert\nno hashcode implementation was added\n\nTo make explicit your intention you could have said\n            @Override\n            public boolean areContentsTheSame(Contribution oldConcert,\n                Contribution newConcert) {\n                return areItemsTheSame(oldConcert, newConcert);\n\nwhich is I think what the intention was.\nThis leads in to the larger problem of a contribution can't change its contents which they should be able to do I think? This could lead to some very confusing errors where the data has been updated and it just won't render", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r421444037", "createdAt": "2020-05-07T11:50:17Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java", "diffHunk": "@@ -1,52 +1,54 @@\n package fr.free.nrw.commons.contributions;\n \n-import android.text.TextUtils;\n import android.view.LayoutInflater;\n import android.view.ViewGroup;\n import androidx.annotation.NonNull;\n-import androidx.recyclerview.widget.RecyclerView;\n+import androidx.paging.PagedListAdapter;\n+import androidx.recyclerview.widget.DiffUtil;\n import fr.free.nrw.commons.R;\n import fr.free.nrw.commons.media.MediaClient;\n import java.util.ArrayList;\n import java.util.List;\n \n /**\n- * Represents The View Adapter for the List of Contributions  \n+ * Represents The View Adapter for the List of Contributions\n  */\n-public class ContributionsListAdapter extends RecyclerView.Adapter<ContributionViewHolder> {\n+public class ContributionsListAdapter extends\n+    PagedListAdapter<Contribution, ContributionViewHolder> {\n \n     private Callback callback;\n     private final MediaClient mediaClient;\n     private List<Contribution> contributions;\n \n-    public ContributionsListAdapter(Callback callback,\n-        MediaClient mediaClient) {\n+    ContributionsListAdapter(final Callback callback,\n+        final MediaClient mediaClient) {\n+        super(DIFF_CALLBACK);\n         this.callback = callback;\n         this.mediaClient = mediaClient;\n         contributions = new ArrayList<>();\n+        setHasStableIds(true);\n     }\n \n-    /**\n-     * Creates the new View Holder which will be used to display items(contributions)\n-     * using the onBindViewHolder(viewHolder,position) \n-     */\n-    @NonNull\n-    @Override\n-    public ContributionViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n-        ContributionViewHolder viewHolder = new ContributionViewHolder(\n-                LayoutInflater.from(parent.getContext())\n-                        .inflate(R.layout.layout_contribution, parent, false), callback, mediaClient);\n-        return viewHolder;\n-    }\n+\n+    private static DiffUtil.ItemCallback<Contribution> DIFF_CALLBACK =\n+        new DiffUtil.ItemCallback<Contribution>() {\n+            // Concert details may have changed if reloaded from the database,\n+            // but ID is fixed.\n+            @Override\n+            public boolean areItemsTheSame(Contribution oldConcert, Contribution newConcert) {\n+                return oldConcert.getPageId() == newConcert.getPageId();\n+            }\n+\n+            @Override\n+            public boolean areContentsTheSame(Contribution oldConcert,\n+                Contribution newConcert) {\n+                return oldConcert.equals(newConcert);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e93e491cafc130729bf2693cd7bc5da21a742d62"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgwNzI0Nw==", "bodyText": "Agreed. I didn't notice this while making the changes. I have updated the hashcode and equals implementation for Media and Contribution classes. It would be great if you could take a look.", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r421807247", "createdAt": "2020-05-07T21:32:28Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java", "diffHunk": "@@ -1,52 +1,54 @@\n package fr.free.nrw.commons.contributions;\n \n-import android.text.TextUtils;\n import android.view.LayoutInflater;\n import android.view.ViewGroup;\n import androidx.annotation.NonNull;\n-import androidx.recyclerview.widget.RecyclerView;\n+import androidx.paging.PagedListAdapter;\n+import androidx.recyclerview.widget.DiffUtil;\n import fr.free.nrw.commons.R;\n import fr.free.nrw.commons.media.MediaClient;\n import java.util.ArrayList;\n import java.util.List;\n \n /**\n- * Represents The View Adapter for the List of Contributions  \n+ * Represents The View Adapter for the List of Contributions\n  */\n-public class ContributionsListAdapter extends RecyclerView.Adapter<ContributionViewHolder> {\n+public class ContributionsListAdapter extends\n+    PagedListAdapter<Contribution, ContributionViewHolder> {\n \n     private Callback callback;\n     private final MediaClient mediaClient;\n     private List<Contribution> contributions;\n \n-    public ContributionsListAdapter(Callback callback,\n-        MediaClient mediaClient) {\n+    ContributionsListAdapter(final Callback callback,\n+        final MediaClient mediaClient) {\n+        super(DIFF_CALLBACK);\n         this.callback = callback;\n         this.mediaClient = mediaClient;\n         contributions = new ArrayList<>();\n+        setHasStableIds(true);\n     }\n \n-    /**\n-     * Creates the new View Holder which will be used to display items(contributions)\n-     * using the onBindViewHolder(viewHolder,position) \n-     */\n-    @NonNull\n-    @Override\n-    public ContributionViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n-        ContributionViewHolder viewHolder = new ContributionViewHolder(\n-                LayoutInflater.from(parent.getContext())\n-                        .inflate(R.layout.layout_contribution, parent, false), callback, mediaClient);\n-        return viewHolder;\n-    }\n+\n+    private static DiffUtil.ItemCallback<Contribution> DIFF_CALLBACK =\n+        new DiffUtil.ItemCallback<Contribution>() {\n+            // Concert details may have changed if reloaded from the database,\n+            // but ID is fixed.\n+            @Override\n+            public boolean areItemsTheSame(Contribution oldConcert, Contribution newConcert) {\n+                return oldConcert.getPageId() == newConcert.getPageId();\n+            }\n+\n+            @Override\n+            public boolean areContentsTheSame(Contribution oldConcert,\n+                Contribution newConcert) {\n+                return oldConcert.equals(newConcert);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0NDAzNw=="}, "originalCommit": {"oid": "e93e491cafc130729bf2693cd7bc5da21a742d62"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzY5MDQxOnYy", "diffSide": "LEFT", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListFragment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMTo1NjowMFrOGR7FPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMToyNjoyNlrOGSQ5Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0Njk3Mg==", "bodyText": "not restoring the state?", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r421446972", "createdAt": "2020-05-07T11:56:00Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListFragment.java", "diffHunk": "@@ -211,23 +233,25 @@ public void onSaveInstanceState(@NonNull Bundle outState) {\n     public void onViewStateRestored(@Nullable Bundle savedInstanceState) {\n         super.onViewStateRestored(savedInstanceState);\n         if(null!=savedInstanceState){\n-            lastVisibleItemID =savedInstanceState.getString(VISIBLE_ITEM_ID, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e93e491cafc130729bf2693cd7bc5da21a742d62"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgwNDMyNg==", "bodyText": "The scrolled state of the list is still being retained. I am not sure how this variable was being used earlier.", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r421804326", "createdAt": "2020-05-07T21:26:26Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListFragment.java", "diffHunk": "@@ -211,23 +233,25 @@ public void onSaveInstanceState(@NonNull Bundle outState) {\n     public void onViewStateRestored(@Nullable Bundle savedInstanceState) {\n         super.onViewStateRestored(savedInstanceState);\n         if(null!=savedInstanceState){\n-            lastVisibleItemID =savedInstanceState.getString(VISIBLE_ITEM_ID, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0Njk3Mg=="}, "originalCommit": {"oid": "e93e491cafc130729bf2693cd7bc5da21a742d62"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzcwODg5OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/media/MediaClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMjowMTozMlrOGR7QmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMjowMTozMlrOGR7QmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0OTg4MA==", "bodyText": "this is a bit hard on the eyes, how about moving the ternary into the method call?\nmediaInterface.getMediaListForUser(\nusername,\n10,\ncontinuationStore.hasUser ? continuation.getUser : emptyMap()\n)", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r421449880", "createdAt": "2020-05-07T12:01:32Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/media/MediaClient.java", "diffHunk": "@@ -83,6 +84,24 @@ public MediaClient(MediaInterface mediaInterface, MediaDetailInterface mediaDeta\n \n     }\n \n+    /**\n+     * This method takes the userName as input and returns a list of  Media objects filtered using\n+     * allimages query It uses the allimages query API to get the images contributed by the userName,\n+     * 10 at a time.\n+     *\n+     * @param userName the username\n+     * @return\n+     */\n+    public Single<List<Media>> getMediaListForUser(String userName) {\n+        return responseToMediaList(\n+            continuationStore.containsKey(\"user_\" + userName) ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e93e491cafc130729bf2693cd7bc5da21a742d62"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzc0MjA1OnYy", "diffSide": "LEFT", "path": "app/src/test/kotlin/fr/free/nrw/commons/contributions/ContributionsPresenterTest.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMjoxMTo0MFrOGR7lEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMToyNzo1MlrOGSQ7_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ1NTEyMw==", "bodyText": "This functionality hasn't been deleted just moved, right? It would be a shame to lose the coverage", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r421455123", "createdAt": "2020-05-07T12:11:40Z", "author": {"login": "macgills"}, "path": "app/src/test/kotlin/fr/free/nrw/commons/contributions/ContributionsPresenterTest.kt", "diffHunk": "@@ -60,17 +60,6 @@ class ContributionsPresenterTest {\n         liveData=MutableLiveData()\n     }\n \n-    /**\n-     * Test fetch contributions\n-     */\n-    @Test\n-    fun testFetchContributions(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e93e491cafc130729bf2693cd7bc5da21a742d62"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgwNTA1Mg==", "bodyText": "The functionality has changed but I have added a new test case for this method. I will add more test cases once the functionality gets tested.", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r421805052", "createdAt": "2020-05-07T21:27:52Z", "author": {"login": "maskaravivek"}, "path": "app/src/test/kotlin/fr/free/nrw/commons/contributions/ContributionsPresenterTest.kt", "diffHunk": "@@ -60,17 +60,6 @@ class ContributionsPresenterTest {\n         liveData=MutableLiveData()\n     }\n \n-    /**\n-     * Test fetch contributions\n-     */\n-    @Test\n-    fun testFetchContributions(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ1NTEyMw=="}, "originalCommit": {"oid": "e93e491cafc130729bf2693cd7bc5da21a742d62"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjMzNDAxOnYy", "diffSide": "RIGHT", "path": "app/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMDowNTo0OVrOGTI1Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMDowNTo0OVrOGTI1Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcyMDgxNQ==", "bodyText": "I had to enable multidex support as the number of methods grew after adding a couple of dependencies.", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r422720815", "createdAt": "2020-05-11T00:05:49Z", "author": {"login": "maskaravivek"}, "path": "app/build.gradle", "diffHunk": "@@ -121,6 +125,8 @@ dependencies {\n     implementation \"androidx.preference:preference:$PREFERENCE_VERSION\"\n     // Kotlin\n     implementation \"androidx.preference:preference-ktx:$PREFERENCE_VERSION\"\n+\n+    implementation 'androidx.multidex:multidex:2.0.1'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34bd6f68e80d456824985069e2c0779b4780b0c8"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzY0OTAyOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsFragment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOTo0MDoxNFrOGTUqBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMzozOTowNVrOGTcrWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkxNDU2NQ==", "bodyText": "this could be deleted now, right?", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r422914565", "createdAt": "2020-05-11T09:40:14Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsFragment.java", "diffHunk": "@@ -386,10 +297,6 @@ public void onResume() {\n \n         boolean isSettingsChanged = store.getBoolean(Prefs.IS_CONTRIBUTION_COUNT_CHANGED, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34bd6f68e80d456824985069e2c0779b4780b0c8"}, "originalPosition": 289}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0NTk3Nw==", "bodyText": "IS_CONTRIBUTION_COUNT_CHANGED is now only used to put the boolean, never retrieve it, can be deleted", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r423045977", "createdAt": "2020-05-11T13:39:05Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsFragment.java", "diffHunk": "@@ -386,10 +297,6 @@ public void onResume() {\n \n         boolean isSettingsChanged = store.getBoolean(Prefs.IS_CONTRIBUTION_COUNT_CHANGED, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkxNDU2NQ=="}, "originalCommit": {"oid": "34bd6f68e80d456824985069e2c0779b4780b0c8"}, "originalPosition": 289}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzY1MjcwOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOTo0MToxM1rOGTUsOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOTo0MToxM1rOGTUsOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkxNTEyOA==", "bodyText": "this is the default value so could be omitted", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r422915128", "createdAt": "2020-05-11T09:41:13Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java", "diffHunk": "@@ -1,68 +1,74 @@\n package fr.free.nrw.commons.contributions;\n \n-import android.text.TextUtils;\n import android.view.LayoutInflater;\n import android.view.ViewGroup;\n import androidx.annotation.NonNull;\n-import androidx.recyclerview.widget.RecyclerView;\n+import androidx.paging.PagedListAdapter;\n+import androidx.recyclerview.widget.DiffUtil;\n import fr.free.nrw.commons.R;\n import fr.free.nrw.commons.media.MediaClient;\n-import java.util.ArrayList;\n-import java.util.List;\n \n /**\n- * Represents The View Adapter for the List of Contributions  \n+ * Represents The View Adapter for the List of Contributions\n  */\n-public class ContributionsListAdapter extends RecyclerView.Adapter<ContributionViewHolder> {\n+public class ContributionsListAdapter extends\n+    PagedListAdapter<Contribution, ContributionViewHolder> {\n \n-    private Callback callback;\n+    private final Callback callback;\n     private final MediaClient mediaClient;\n-    private List<Contribution> contributions;\n \n-    public ContributionsListAdapter(Callback callback,\n-        MediaClient mediaClient) {\n+    ContributionsListAdapter(final Callback callback,\n+        final MediaClient mediaClient) {\n+        super(DIFF_CALLBACK);\n         this.callback = callback;\n         this.mediaClient = mediaClient;\n-        contributions = new ArrayList<>();\n+        setHasStableIds(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34bd6f68e80d456824985069e2c0779b4780b0c8"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzY2NDI3OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOTo0NDowNlrOGTUzQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOTo0NDowNlrOGTUzQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkxNjkyOA==", "bodyText": "unused I think", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r422916928", "createdAt": "2020-05-11T09:44:06Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListFragment.java", "diffHunk": "@@ -16,218 +17,218 @@\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n import androidx.recyclerview.widget.GridLayoutManager;\n-import androidx.recyclerview.widget.LinearLayoutManager;\n import androidx.recyclerview.widget.RecyclerView;\n import androidx.recyclerview.widget.RecyclerView.LayoutManager;\n import butterknife.BindView;\n import butterknife.ButterKnife;\n import com.google.android.material.floatingactionbutton.FloatingActionButton;\n+import fr.free.nrw.commons.Media;\n import fr.free.nrw.commons.R;\n-import fr.free.nrw.commons.contributions.ContributionsListAdapter.Callback;\n import fr.free.nrw.commons.di.CommonsDaggerSupportFragment;\n-import fr.free.nrw.commons.kvstore.JsonKvStore;\n import fr.free.nrw.commons.media.MediaClient;\n-import java.util.ArrayList;\n-import java.util.List;\n+import fr.free.nrw.commons.media.MediaDetailPagerFragment;\n import javax.inject.Inject;\n-import javax.inject.Named;\n \n /**\n  * Created by root on 01.06.2018.\n  */\n \n-public class ContributionsListFragment extends CommonsDaggerSupportFragment {\n-\n-    private static final String VISIBLE_ITEM_ID = \"visible_item_id\";\n-    @BindView(R.id.contributionsList)\n-    RecyclerView rvContributionsList;\n-    @BindView(R.id.loadingContributionsProgressBar)\n-    ProgressBar progressBar;\n-    @BindView(R.id.fab_plus)\n-    FloatingActionButton fabPlus;\n-    @BindView(R.id.fab_camera)\n-    FloatingActionButton fabCamera;\n-    @BindView(R.id.fab_gallery)\n-    FloatingActionButton fabGallery;\n-    @BindView(R.id.noContributionsYet)\n-    TextView noContributionsYet;\n-    @BindView(R.id.fab_layout)\n-    LinearLayout fab_layout;\n-\n-    @Inject @Named(\"default_preferences\") JsonKvStore kvStore;\n-    @Inject ContributionController controller;\n-    @Inject MediaClient mediaClient;\n-\n-    private Animation fab_close;\n-    private Animation fab_open;\n-    private Animation rotate_forward;\n-    private Animation rotate_backward;\n-\n-\n-    private boolean isFabOpen = false;\n-\n-    private ContributionsListAdapter adapter;\n-\n-    private Callback callback;\n-    private String lastVisibleItemID;\n-\n-    private int SPAN_COUNT=3;\n-    private List<Contribution> contributions=new ArrayList<>();\n-\n-    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n-        View view = inflater.inflate(R.layout.fragment_contributions_list, container, false);\n-        ButterKnife.bind(this, view);\n-        initAdapter();\n-        return view;\n-    }\n-\n-    public void setCallback(Callback callback) {\n-        this.callback = callback;\n-    }\n-\n-    private void initAdapter() {\n-        adapter = new ContributionsListAdapter(callback, mediaClient);\n-        adapter.setHasStableIds(true);\n-    }\n-\n-    @Override\n-    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {\n-        super.onViewCreated(view, savedInstanceState);\n-        initRecyclerView();\n-        initializeAnimations();\n-        setListeners();\n-    }\n-\n-    private void initRecyclerView() {\n-        if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {\n-            rvContributionsList.setLayoutManager(new GridLayoutManager(getContext(),SPAN_COUNT));\n-        } else {\n-            rvContributionsList.setLayoutManager(new LinearLayoutManager(getContext()));\n-        }\n-\n-        rvContributionsList.setAdapter(adapter);\n-        adapter.setContributions(contributions);\n-    }\n-\n-    @Override\n-    public void onConfigurationChanged(Configuration newConfig) {\n-        super.onConfigurationChanged(newConfig);\n-        // check orientation\n-        if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {\n-            fab_layout.setOrientation(LinearLayout.HORIZONTAL);\n-            rvContributionsList.setLayoutManager(new GridLayoutManager(getContext(),SPAN_COUNT));\n-        } else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) {\n-            fab_layout.setOrientation(LinearLayout.VERTICAL);\n-            rvContributionsList.setLayoutManager(new LinearLayoutManager(getContext()));\n-        }\n-    }\n-\n-    private void initializeAnimations() {\n-        fab_open = AnimationUtils.loadAnimation(getActivity(), R.anim.fab_open);\n-        fab_close = AnimationUtils.loadAnimation(getActivity(), R.anim.fab_close);\n-        rotate_forward = AnimationUtils.loadAnimation(getActivity(), R.anim.rotate_forward);\n-        rotate_backward = AnimationUtils.loadAnimation(getActivity(), R.anim.rotate_backward);\n-    }\n-\n-    private void setListeners() {\n-        fabPlus.setOnClickListener(view -> animateFAB(isFabOpen));\n-        fabCamera.setOnClickListener(view -> {\n-            controller.initiateCameraPick(getActivity());\n-            animateFAB(isFabOpen);\n-        });\n-        fabGallery.setOnClickListener(view -> {\n-            controller.initiateGalleryPick(getActivity(), true);\n-            animateFAB(isFabOpen);\n-        });\n-    }\n-\n-    private void animateFAB(boolean isFabOpen) {\n-        this.isFabOpen = !isFabOpen;\n-        if (fabPlus.isShown()){\n-            if (isFabOpen) {\n-                fabPlus.startAnimation(rotate_backward);\n-                fabCamera.startAnimation(fab_close);\n-                fabGallery.startAnimation(fab_close);\n-                fabCamera.hide();\n-                fabGallery.hide();\n-            } else {\n-                fabPlus.startAnimation(rotate_forward);\n-                fabCamera.startAnimation(fab_open);\n-                fabGallery.startAnimation(fab_open);\n-                fabCamera.show();\n-                fabGallery.show();\n-            }\n-            this.isFabOpen=!isFabOpen;\n-        }\n-    }\n-\n-    /**\n-     * Shows welcome message if user has no contributions yet i.e. new user.\n-     */\n-    public void showWelcomeTip(boolean shouldShow) {\n-        noContributionsYet.setVisibility(shouldShow ? VISIBLE : GONE);\n-    }\n-\n-    /**\n-     * Responsible to set progress bar invisible and visible\n-     *\n-     * @param shouldShow True when contributions list should be hidden.\n-     */\n-    public void showProgress(boolean shouldShow) {\n-        progressBar.setVisibility(shouldShow ? VISIBLE : GONE);\n-    }\n-\n-    public void showNoContributionsUI(boolean shouldShow) {\n-        noContributionsYet.setVisibility(shouldShow ? VISIBLE : GONE);\n-    }\n-\n-    public void setContributions(List<Contribution> contributionList) {\n-        this.contributions.clear();\n-        this.contributions.addAll(contributionList);\n-        adapter.setContributions(contributions);\n-    }\n-\n-    public interface SourceRefresher {\n-        void refreshSource();\n-    }\n-\n-    @Override\n-    public void onSaveInstanceState(@NonNull Bundle outState) {\n-        super.onSaveInstanceState(outState);\n-        LayoutManager layoutManager = rvContributionsList.getLayoutManager();\n-        int lastVisibleItemPosition=0;\n-        if(layoutManager instanceof  LinearLayoutManager){\n-            lastVisibleItemPosition= ((LinearLayoutManager) layoutManager).findLastCompletelyVisibleItemPosition();\n-        }else if(layoutManager instanceof GridLayoutManager){\n-            lastVisibleItemPosition=((GridLayoutManager)layoutManager).findLastCompletelyVisibleItemPosition();\n-        }\n-        String idOfItemWithPosition = findIdOfItemWithPosition(lastVisibleItemPosition);\n-        if (null != idOfItemWithPosition) {\n-            outState.putString(VISIBLE_ITEM_ID, idOfItemWithPosition);\n-        }\n-    }\n-\n-    @Override\n-    public void onViewStateRestored(@Nullable Bundle savedInstanceState) {\n-        super.onViewStateRestored(savedInstanceState);\n-        if(null!=savedInstanceState){\n-            lastVisibleItemID =savedInstanceState.getString(VISIBLE_ITEM_ID, null);\n-        }\n-    }\n-\n-\n-    /**\n-     * Gets the id of the contribution from the db\n-     * @param position\n-     * @return\n-     */\n-    @Nullable\n-    private String findIdOfItemWithPosition(int position) {\n-        Contribution contributionForPosition = callback.getContributionForPosition(position);\n-        if (null != contributionForPosition) {\n-            return contributionForPosition.getFilename();\n-        }\n-        return null;\n-    }\n-\n+public class ContributionsListFragment extends CommonsDaggerSupportFragment implements\n+    ContributionsListContract.View, ContributionsListAdapter.Callback {\n+\n+  private static final String VISIBLE_ITEM_ID = \"visible_item_id\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34bd6f68e80d456824985069e2c0779b4780b0c8"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzY4NDM4OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListPresenter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOTo0OToyOVrOGTU_dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOTo0OToyOVrOGTU_dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkyMDA1Mw==", "bodyText": "I think we shouldn't use placeholders, it sounds like we would want to know the entire data set beforehand? docs", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r422920053", "createdAt": "2020-05-11T09:49:29Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListPresenter.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package fr.free.nrw.commons.contributions;\n+\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.paging.LivePagedListBuilder;\n+import androidx.paging.PagedList;\n+import fr.free.nrw.commons.contributions.ContributionsListContract.UserActionListener;\n+import fr.free.nrw.commons.di.CommonsApplicationModule;\n+import io.reactivex.Scheduler;\n+import io.reactivex.disposables.CompositeDisposable;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+/**\n+ * The presenter class for Contributions\n+ */\n+public class ContributionsListPresenter implements UserActionListener {\n+\n+  private final ContributionBoundaryCallback contributionBoundaryCallback;\n+  private final ContributionsRepository repository;\n+  private final Scheduler ioThreadScheduler;\n+\n+  private CompositeDisposable compositeDisposable;\n+\n+  public LiveData<PagedList<Contribution>> contributionList;\n+  public MutableLiveData networkState;\n+\n+  @Inject\n+  ContributionsListPresenter(\n+      final ContributionBoundaryCallback contributionBoundaryCallback,\n+      ContributionsRepository repository,\n+      @Named(CommonsApplicationModule.IO_THREAD) Scheduler ioThreadScheduler) {\n+    this.contributionBoundaryCallback = contributionBoundaryCallback;\n+    this.repository = repository;\n+    this.ioThreadScheduler = ioThreadScheduler;\n+    compositeDisposable = new CompositeDisposable();\n+  }\n+\n+  @Override\n+  public void onAttachView(ContributionsListContract.View view) {\n+  }\n+\n+  /**\n+   * Setup the paged list.\n+   * This method sets the configuration for paged list and ties it up with the live data object.\n+   * This method can be tweaked to update the lazy loading behavior of the contributions list\n+   */\n+  void setup() {\n+    final PagedList.Config pagedListConfig =\n+        (new PagedList.Config.Builder())\n+            .setEnablePlaceholders(true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34bd6f68e80d456824985069e2c0779b4780b0c8"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzY5NzE5OnYy", "diffSide": "RIGHT", "path": "app/src/test/kotlin/fr/free/nrw/commons/contributions/ContributionsRepositoryTest.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOTo1Mjo1NFrOGTVHcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODozOTowOFrOGUnXMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkyMjA5Nw==", "bodyText": "you can use .test().assert* instead", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r422922097", "createdAt": "2020-05-11T09:52:54Z", "author": {"login": "macgills"}, "path": "app/src/test/kotlin/fr/free/nrw/commons/contributions/ContributionsRepositoryTest.kt", "diffHunk": "@@ -0,0 +1,55 @@\n+package fr.free.nrw.commons.contributions\n+\n+import com.nhaarman.mockitokotlin2.times\n+import com.nhaarman.mockitokotlin2.verify\n+import com.nhaarman.mockitokotlin2.whenever\n+import fr.free.nrw.commons.utils.createMockDataSourceFactory\n+import io.reactivex.Scheduler\n+import io.reactivex.Single\n+import junit.framework.Assert.assertEquals\n+import org.junit.Before\n+import org.junit.Test\n+import org.mockito.*\n+import org.mockito.Mockito.any\n+import org.mockito.Mockito.mock\n+\n+/**\n+ * The unit test class for ContributionsRepositoryTest\n+ */\n+class ContributionsRepositoryTest {\n+    @Mock\n+    internal lateinit var localDataSource: ContributionsLocalDataSource\n+\n+    @InjectMocks\n+    private lateinit var contributionsRepository: ContributionsRepository\n+\n+    lateinit var scheduler: Scheduler\n+\n+    /**\n+     * initial setup\n+     */\n+    @Before\n+    @Throws(Exception::class)\n+    fun setUp() {\n+        MockitoAnnotations.initMocks(this)\n+    }\n+\n+    @Test\n+    fun testFetchContributions() {\n+        val contribution = mock(Contribution::class.java)\n+        whenever(localDataSource.getContributions())\n+            .thenReturn(createMockDataSourceFactory(listOf(contribution)))\n+        val contributionsFactory = contributionsRepository.fetchContributions()\n+        verify(localDataSource, times(1)).getContributions();\n+    }\n+\n+    @Test\n+    fun testSaveContribution() {\n+        val contributions = listOf(mock(Contribution::class.java))\n+        whenever(localDataSource.saveContributions(ArgumentMatchers.anyList()))\n+            .thenReturn(Single.just(listOf(1L)))\n+        val save = contributionsRepository.save(contributions).blockingGet()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34bd6f68e80d456824985069e2c0779b4780b0c8"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI2OTYxOQ==", "bodyText": "@maskaravivek this change could also be made", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r424269619", "createdAt": "2020-05-13T08:39:08Z", "author": {"login": "macgills"}, "path": "app/src/test/kotlin/fr/free/nrw/commons/contributions/ContributionsRepositoryTest.kt", "diffHunk": "@@ -0,0 +1,55 @@\n+package fr.free.nrw.commons.contributions\n+\n+import com.nhaarman.mockitokotlin2.times\n+import com.nhaarman.mockitokotlin2.verify\n+import com.nhaarman.mockitokotlin2.whenever\n+import fr.free.nrw.commons.utils.createMockDataSourceFactory\n+import io.reactivex.Scheduler\n+import io.reactivex.Single\n+import junit.framework.Assert.assertEquals\n+import org.junit.Before\n+import org.junit.Test\n+import org.mockito.*\n+import org.mockito.Mockito.any\n+import org.mockito.Mockito.mock\n+\n+/**\n+ * The unit test class for ContributionsRepositoryTest\n+ */\n+class ContributionsRepositoryTest {\n+    @Mock\n+    internal lateinit var localDataSource: ContributionsLocalDataSource\n+\n+    @InjectMocks\n+    private lateinit var contributionsRepository: ContributionsRepository\n+\n+    lateinit var scheduler: Scheduler\n+\n+    /**\n+     * initial setup\n+     */\n+    @Before\n+    @Throws(Exception::class)\n+    fun setUp() {\n+        MockitoAnnotations.initMocks(this)\n+    }\n+\n+    @Test\n+    fun testFetchContributions() {\n+        val contribution = mock(Contribution::class.java)\n+        whenever(localDataSource.getContributions())\n+            .thenReturn(createMockDataSourceFactory(listOf(contribution)))\n+        val contributionsFactory = contributionsRepository.fetchContributions()\n+        verify(localDataSource, times(1)).getContributions();\n+    }\n+\n+    @Test\n+    fun testSaveContribution() {\n+        val contributions = listOf(mock(Contribution::class.java))\n+        whenever(localDataSource.saveContributions(ArgumentMatchers.anyList()))\n+            .thenReturn(Single.just(listOf(1L)))\n+        val save = contributionsRepository.save(contributions).blockingGet()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkyMjA5Nw=="}, "originalCommit": {"oid": "34bd6f68e80d456824985069e2c0779b4780b0c8"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzY5OTQ3OnYy", "diffSide": "RIGHT", "path": "app/src/test/kotlin/fr/free/nrw/commons/media/MediaClientTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOTo1MzoyNlrOGTVIvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOTo1MzoyNlrOGTVIvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkyMjQyOQ==", "bodyText": "whenever", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r422922429", "createdAt": "2020-05-11T09:53:26Z", "author": {"login": "macgills"}, "path": "app/src/test/kotlin/fr/free/nrw/commons/media/MediaClientTest.kt", "diffHunk": "@@ -197,6 +197,35 @@ class MediaClientTest {\n         assertEquals(media2.filename, \"Test\")\n     }\n \n+    @Test\n+    fun getMediaListForUser() {\n+        val mockContinuation= mapOf(Pair(\"gcmcontinue\", \"test\"))\n+        val imageInfo = ImageInfo()\n+\n+        val mwQueryPage = mock(MwQueryPage::class.java)\n+        `when`(mwQueryPage.title()).thenReturn(\"Test\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34bd6f68e80d456824985069e2c0779b4780b0c8"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzc0MTQyOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDowNDo0MFrOGTVikA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODowODo1MVrOGUmOFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkyOTA0MA==", "bodyText": "this is a whole new class, it would be much nicer in kotlin to just use map instead of this for loop", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r422929040", "createdAt": "2020-05-11T10:04:40Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package fr.free.nrw.commons.contributions;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.paging.PagedList;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.auth.SessionManager;\n+import fr.free.nrw.commons.di.CommonsApplicationModule;\n+import fr.free.nrw.commons.media.MediaClient;\n+import io.reactivex.Scheduler;\n+import io.reactivex.Single;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.schedulers.Schedulers;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import timber.log.Timber;\n+\n+/**\n+ * Class that extends PagedList.BoundaryCallback for contributions list\n+ * It defines the action that is triggered for various boundary conditions in the list\n+ */\n+public class ContributionBoundaryCallback extends PagedList.BoundaryCallback<Contribution> {\n+\n+  private final ContributionsRepository repository;\n+  private final SessionManager sessionManager;\n+  private final MediaClient mediaClient;\n+  private final MutableLiveData networkState;\n+  private final CompositeDisposable compositeDisposable;\n+  private final Scheduler ioThreadScheduler;\n+\n+  @Inject\n+  public ContributionBoundaryCallback(final ContributionsRepository repository,\n+      final SessionManager sessionManager,\n+      final MediaClient mediaClient,\n+      @Named(CommonsApplicationModule.IO_THREAD) final Scheduler ioThreadScheduler) {\n+    super();\n+    this.ioThreadScheduler = ioThreadScheduler;\n+    networkState = new MutableLiveData();\n+    this.repository = repository;\n+    this.sessionManager = sessionManager;\n+    this.mediaClient = mediaClient;\n+    compositeDisposable = new CompositeDisposable();\n+  }\n+\n+  /**\n+   * Provides the current network state.\n+   * @return\n+   */\n+  public MutableLiveData getNetworkState() {\n+    return networkState;\n+  }\n+\n+  /**\n+   * It is triggered when the list has no items\n+   * User's Contributions are then fetched from the network\n+   */\n+  @Override\n+  public void onZeroItemsLoaded() {\n+    fetchContributions();\n+  }\n+\n+  /**\n+   * It is triggered when the user scrolls to the top of the list\n+   * No action is taken at this point\n+   */\n+  @Override\n+  public void onItemAtFrontLoaded(@NonNull final Contribution itemAtFront) {\n+  }\n+\n+  /**\n+   * It is triggered when the user scrolls to the end of the list\n+   * User's Contributions are then fetched from the network\n+   */\n+  @Override\n+  public void onItemAtEndLoaded(@NonNull final Contribution itemAtEnd) {\n+    fetchContributions();\n+  }\n+\n+  /**\n+   * Fetches contributions using the MediaWiki API\n+   */\n+  public void fetchContributions() {\n+    networkState.postValue(NetworkState.LOADING);\n+    compositeDisposable.add(mediaClient.getMediaListForUser(sessionManager.getUserName())\n+        .map(mediaList -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34bd6f68e80d456824985069e2c0779b4780b0c8"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI1MDkwMQ==", "bodyText": "@maskaravivek any inclination to convert this to kotlin?", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r424250901", "createdAt": "2020-05-13T08:08:51Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package fr.free.nrw.commons.contributions;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.paging.PagedList;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.auth.SessionManager;\n+import fr.free.nrw.commons.di.CommonsApplicationModule;\n+import fr.free.nrw.commons.media.MediaClient;\n+import io.reactivex.Scheduler;\n+import io.reactivex.Single;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.schedulers.Schedulers;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import timber.log.Timber;\n+\n+/**\n+ * Class that extends PagedList.BoundaryCallback for contributions list\n+ * It defines the action that is triggered for various boundary conditions in the list\n+ */\n+public class ContributionBoundaryCallback extends PagedList.BoundaryCallback<Contribution> {\n+\n+  private final ContributionsRepository repository;\n+  private final SessionManager sessionManager;\n+  private final MediaClient mediaClient;\n+  private final MutableLiveData networkState;\n+  private final CompositeDisposable compositeDisposable;\n+  private final Scheduler ioThreadScheduler;\n+\n+  @Inject\n+  public ContributionBoundaryCallback(final ContributionsRepository repository,\n+      final SessionManager sessionManager,\n+      final MediaClient mediaClient,\n+      @Named(CommonsApplicationModule.IO_THREAD) final Scheduler ioThreadScheduler) {\n+    super();\n+    this.ioThreadScheduler = ioThreadScheduler;\n+    networkState = new MutableLiveData();\n+    this.repository = repository;\n+    this.sessionManager = sessionManager;\n+    this.mediaClient = mediaClient;\n+    compositeDisposable = new CompositeDisposable();\n+  }\n+\n+  /**\n+   * Provides the current network state.\n+   * @return\n+   */\n+  public MutableLiveData getNetworkState() {\n+    return networkState;\n+  }\n+\n+  /**\n+   * It is triggered when the list has no items\n+   * User's Contributions are then fetched from the network\n+   */\n+  @Override\n+  public void onZeroItemsLoaded() {\n+    fetchContributions();\n+  }\n+\n+  /**\n+   * It is triggered when the user scrolls to the top of the list\n+   * No action is taken at this point\n+   */\n+  @Override\n+  public void onItemAtFrontLoaded(@NonNull final Contribution itemAtFront) {\n+  }\n+\n+  /**\n+   * It is triggered when the user scrolls to the end of the list\n+   * User's Contributions are then fetched from the network\n+   */\n+  @Override\n+  public void onItemAtEndLoaded(@NonNull final Contribution itemAtEnd) {\n+    fetchContributions();\n+  }\n+\n+  /**\n+   * Fetches contributions using the MediaWiki API\n+   */\n+  public void fetchContributions() {\n+    networkState.postValue(NetworkState.LOADING);\n+    compositeDisposable.add(mediaClient.getMediaListForUser(sessionManager.getUserName())\n+        .map(mediaList -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkyOTA0MA=="}, "originalCommit": {"oid": "34bd6f68e80d456824985069e2c0779b4780b0c8"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzc2NzQ3OnYy", "diffSide": "RIGHT", "path": "app/src/test/kotlin/fr/free/nrw/commons/contributions/ContributionBoundaryCallbackTest.kt", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDoxMTo0OVrOGTVySg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODo0MDozMVrOGUnaug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkzMzA2Ng==", "bodyText": "verify(_, times(1) is equivalent to verify(_)", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r422933066", "createdAt": "2020-05-11T10:11:49Z", "author": {"login": "macgills"}, "path": "app/src/test/kotlin/fr/free/nrw/commons/contributions/ContributionBoundaryCallbackTest.kt", "diffHunk": "@@ -0,0 +1,101 @@\n+package fr.free.nrw.commons.contributions\n+\n+import android.content.Context\n+import androidx.arch.core.executor.testing.InstantTaskExecutorRule\n+import com.nhaarman.mockitokotlin2.times\n+import com.nhaarman.mockitokotlin2.verify\n+import com.nhaarman.mockitokotlin2.verifyZeroInteractions\n+import com.nhaarman.mockitokotlin2.whenever\n+import fr.free.nrw.commons.Media\n+import fr.free.nrw.commons.auth.SessionManager\n+import fr.free.nrw.commons.media.MediaClient\n+import fr.free.nrw.commons.utils.NetworkUtilsTest\n+import fr.free.nrw.commons.utils.createMockDataSourceFactory\n+import io.reactivex.Scheduler\n+import io.reactivex.Single\n+import io.reactivex.schedulers.Schedulers\n+import io.reactivex.schedulers.TestScheduler\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.mockito.ArgumentMatchers.anyList\n+import org.mockito.ArgumentMatchers.anyString\n+import org.mockito.InjectMocks\n+import org.mockito.Mock\n+import org.mockito.Mockito.mock\n+import org.mockito.MockitoAnnotations\n+import java.util.*\n+\n+/**\n+ * The unit test class for ContributionBoundaryCallbackTest\n+ */\n+class ContributionBoundaryCallbackTest {\n+    @Mock\n+    internal lateinit var repository: ContributionsRepository\n+\n+    @Mock\n+    internal lateinit var sessionManager: SessionManager\n+\n+    @Mock\n+    internal lateinit var mediaClient: MediaClient\n+\n+    private lateinit var contributionBoundaryCallback: ContributionBoundaryCallback\n+\n+    @Rule\n+    @JvmField\n+    var instantTaskExecutorRule = InstantTaskExecutorRule()\n+\n+    lateinit var scheduler: Scheduler\n+\n+    /**\n+     * initial setup\n+     */\n+    @Before\n+    @Throws(Exception::class)\n+    fun setUp() {\n+        MockitoAnnotations.initMocks(this)\n+        scheduler = Schedulers.trampoline()\n+        contributionBoundaryCallback =\n+            ContributionBoundaryCallback(repository, sessionManager, mediaClient, scheduler);\n+    }\n+\n+    @Test\n+    fun testOnZeroItemsLoaded() {\n+        whenever(sessionManager.userName).thenReturn(\"Test\")\n+        whenever(mediaClient.getMediaListForUser(anyString())).thenReturn(\n+            Single.just(listOf(mock(Media::class.java)))\n+        )\n+        contributionBoundaryCallback.onZeroItemsLoaded()\n+        verify(repository, times(1)).save(anyList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34bd6f68e80d456824985069e2c0779b4780b0c8"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkzNjM2NA==", "bodyText": "anyList() is hiding the logic of mapping a media to a completed Contribution", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r422936364", "createdAt": "2020-05-11T10:17:41Z", "author": {"login": "macgills"}, "path": "app/src/test/kotlin/fr/free/nrw/commons/contributions/ContributionBoundaryCallbackTest.kt", "diffHunk": "@@ -0,0 +1,101 @@\n+package fr.free.nrw.commons.contributions\n+\n+import android.content.Context\n+import androidx.arch.core.executor.testing.InstantTaskExecutorRule\n+import com.nhaarman.mockitokotlin2.times\n+import com.nhaarman.mockitokotlin2.verify\n+import com.nhaarman.mockitokotlin2.verifyZeroInteractions\n+import com.nhaarman.mockitokotlin2.whenever\n+import fr.free.nrw.commons.Media\n+import fr.free.nrw.commons.auth.SessionManager\n+import fr.free.nrw.commons.media.MediaClient\n+import fr.free.nrw.commons.utils.NetworkUtilsTest\n+import fr.free.nrw.commons.utils.createMockDataSourceFactory\n+import io.reactivex.Scheduler\n+import io.reactivex.Single\n+import io.reactivex.schedulers.Schedulers\n+import io.reactivex.schedulers.TestScheduler\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.mockito.ArgumentMatchers.anyList\n+import org.mockito.ArgumentMatchers.anyString\n+import org.mockito.InjectMocks\n+import org.mockito.Mock\n+import org.mockito.Mockito.mock\n+import org.mockito.MockitoAnnotations\n+import java.util.*\n+\n+/**\n+ * The unit test class for ContributionBoundaryCallbackTest\n+ */\n+class ContributionBoundaryCallbackTest {\n+    @Mock\n+    internal lateinit var repository: ContributionsRepository\n+\n+    @Mock\n+    internal lateinit var sessionManager: SessionManager\n+\n+    @Mock\n+    internal lateinit var mediaClient: MediaClient\n+\n+    private lateinit var contributionBoundaryCallback: ContributionBoundaryCallback\n+\n+    @Rule\n+    @JvmField\n+    var instantTaskExecutorRule = InstantTaskExecutorRule()\n+\n+    lateinit var scheduler: Scheduler\n+\n+    /**\n+     * initial setup\n+     */\n+    @Before\n+    @Throws(Exception::class)\n+    fun setUp() {\n+        MockitoAnnotations.initMocks(this)\n+        scheduler = Schedulers.trampoline()\n+        contributionBoundaryCallback =\n+            ContributionBoundaryCallback(repository, sessionManager, mediaClient, scheduler);\n+    }\n+\n+    @Test\n+    fun testOnZeroItemsLoaded() {\n+        whenever(sessionManager.userName).thenReturn(\"Test\")\n+        whenever(mediaClient.getMediaListForUser(anyString())).thenReturn(\n+            Single.just(listOf(mock(Media::class.java)))\n+        )\n+        contributionBoundaryCallback.onZeroItemsLoaded()\n+        verify(repository, times(1)).save(anyList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkzMzA2Ng=="}, "originalCommit": {"oid": "34bd6f68e80d456824985069e2c0779b4780b0c8"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkzNzY3MA==", "bodyText": "There is no testing the error case sending a network state or any test involving network state", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r422937670", "createdAt": "2020-05-11T10:19:56Z", "author": {"login": "macgills"}, "path": "app/src/test/kotlin/fr/free/nrw/commons/contributions/ContributionBoundaryCallbackTest.kt", "diffHunk": "@@ -0,0 +1,101 @@\n+package fr.free.nrw.commons.contributions\n+\n+import android.content.Context\n+import androidx.arch.core.executor.testing.InstantTaskExecutorRule\n+import com.nhaarman.mockitokotlin2.times\n+import com.nhaarman.mockitokotlin2.verify\n+import com.nhaarman.mockitokotlin2.verifyZeroInteractions\n+import com.nhaarman.mockitokotlin2.whenever\n+import fr.free.nrw.commons.Media\n+import fr.free.nrw.commons.auth.SessionManager\n+import fr.free.nrw.commons.media.MediaClient\n+import fr.free.nrw.commons.utils.NetworkUtilsTest\n+import fr.free.nrw.commons.utils.createMockDataSourceFactory\n+import io.reactivex.Scheduler\n+import io.reactivex.Single\n+import io.reactivex.schedulers.Schedulers\n+import io.reactivex.schedulers.TestScheduler\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.mockito.ArgumentMatchers.anyList\n+import org.mockito.ArgumentMatchers.anyString\n+import org.mockito.InjectMocks\n+import org.mockito.Mock\n+import org.mockito.Mockito.mock\n+import org.mockito.MockitoAnnotations\n+import java.util.*\n+\n+/**\n+ * The unit test class for ContributionBoundaryCallbackTest\n+ */\n+class ContributionBoundaryCallbackTest {\n+    @Mock\n+    internal lateinit var repository: ContributionsRepository\n+\n+    @Mock\n+    internal lateinit var sessionManager: SessionManager\n+\n+    @Mock\n+    internal lateinit var mediaClient: MediaClient\n+\n+    private lateinit var contributionBoundaryCallback: ContributionBoundaryCallback\n+\n+    @Rule\n+    @JvmField\n+    var instantTaskExecutorRule = InstantTaskExecutorRule()\n+\n+    lateinit var scheduler: Scheduler\n+\n+    /**\n+     * initial setup\n+     */\n+    @Before\n+    @Throws(Exception::class)\n+    fun setUp() {\n+        MockitoAnnotations.initMocks(this)\n+        scheduler = Schedulers.trampoline()\n+        contributionBoundaryCallback =\n+            ContributionBoundaryCallback(repository, sessionManager, mediaClient, scheduler);\n+    }\n+\n+    @Test\n+    fun testOnZeroItemsLoaded() {\n+        whenever(sessionManager.userName).thenReturn(\"Test\")\n+        whenever(mediaClient.getMediaListForUser(anyString())).thenReturn(\n+            Single.just(listOf(mock(Media::class.java)))\n+        )\n+        contributionBoundaryCallback.onZeroItemsLoaded()\n+        verify(repository, times(1)).save(anyList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkzMzA2Ng=="}, "originalCommit": {"oid": "34bd6f68e80d456824985069e2c0779b4780b0c8"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI3MDUyMg==", "bodyText": "anyList() is hiding the logic of mapping a media to a completed Contribution\n\nThis issue is still relevant @maskaravivek", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r424270522", "createdAt": "2020-05-13T08:40:31Z", "author": {"login": "macgills"}, "path": "app/src/test/kotlin/fr/free/nrw/commons/contributions/ContributionBoundaryCallbackTest.kt", "diffHunk": "@@ -0,0 +1,101 @@\n+package fr.free.nrw.commons.contributions\n+\n+import android.content.Context\n+import androidx.arch.core.executor.testing.InstantTaskExecutorRule\n+import com.nhaarman.mockitokotlin2.times\n+import com.nhaarman.mockitokotlin2.verify\n+import com.nhaarman.mockitokotlin2.verifyZeroInteractions\n+import com.nhaarman.mockitokotlin2.whenever\n+import fr.free.nrw.commons.Media\n+import fr.free.nrw.commons.auth.SessionManager\n+import fr.free.nrw.commons.media.MediaClient\n+import fr.free.nrw.commons.utils.NetworkUtilsTest\n+import fr.free.nrw.commons.utils.createMockDataSourceFactory\n+import io.reactivex.Scheduler\n+import io.reactivex.Single\n+import io.reactivex.schedulers.Schedulers\n+import io.reactivex.schedulers.TestScheduler\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.mockito.ArgumentMatchers.anyList\n+import org.mockito.ArgumentMatchers.anyString\n+import org.mockito.InjectMocks\n+import org.mockito.Mock\n+import org.mockito.Mockito.mock\n+import org.mockito.MockitoAnnotations\n+import java.util.*\n+\n+/**\n+ * The unit test class for ContributionBoundaryCallbackTest\n+ */\n+class ContributionBoundaryCallbackTest {\n+    @Mock\n+    internal lateinit var repository: ContributionsRepository\n+\n+    @Mock\n+    internal lateinit var sessionManager: SessionManager\n+\n+    @Mock\n+    internal lateinit var mediaClient: MediaClient\n+\n+    private lateinit var contributionBoundaryCallback: ContributionBoundaryCallback\n+\n+    @Rule\n+    @JvmField\n+    var instantTaskExecutorRule = InstantTaskExecutorRule()\n+\n+    lateinit var scheduler: Scheduler\n+\n+    /**\n+     * initial setup\n+     */\n+    @Before\n+    @Throws(Exception::class)\n+    fun setUp() {\n+        MockitoAnnotations.initMocks(this)\n+        scheduler = Schedulers.trampoline()\n+        contributionBoundaryCallback =\n+            ContributionBoundaryCallback(repository, sessionManager, mediaClient, scheduler);\n+    }\n+\n+    @Test\n+    fun testOnZeroItemsLoaded() {\n+        whenever(sessionManager.userName).thenReturn(\"Test\")\n+        whenever(mediaClient.getMediaListForUser(anyString())).thenReturn(\n+            Single.just(listOf(mock(Media::class.java)))\n+        )\n+        contributionBoundaryCallback.onZeroItemsLoaded()\n+        verify(repository, times(1)).save(anyList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkzMzA2Ng=="}, "originalCommit": {"oid": "34bd6f68e80d456824985069e2c0779b4780b0c8"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzgwMDExOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDoyMToxNlrOGTWHFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxODoyMDozMlrOGTn90g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkzODM4OA==", "bodyText": "this does nothing without a subscribe", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r422938388", "createdAt": "2020-05-11T10:21:16Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package fr.free.nrw.commons.contributions;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.paging.PagedList;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.auth.SessionManager;\n+import fr.free.nrw.commons.di.CommonsApplicationModule;\n+import fr.free.nrw.commons.media.MediaClient;\n+import io.reactivex.Scheduler;\n+import io.reactivex.Single;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.schedulers.Schedulers;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import timber.log.Timber;\n+\n+/**\n+ * Class that extends PagedList.BoundaryCallback for contributions list\n+ * It defines the action that is triggered for various boundary conditions in the list\n+ */\n+public class ContributionBoundaryCallback extends PagedList.BoundaryCallback<Contribution> {\n+\n+  private final ContributionsRepository repository;\n+  private final SessionManager sessionManager;\n+  private final MediaClient mediaClient;\n+  private final MutableLiveData networkState;\n+  private final CompositeDisposable compositeDisposable;\n+  private final Scheduler ioThreadScheduler;\n+\n+  @Inject\n+  public ContributionBoundaryCallback(final ContributionsRepository repository,\n+      final SessionManager sessionManager,\n+      final MediaClient mediaClient,\n+      @Named(CommonsApplicationModule.IO_THREAD) final Scheduler ioThreadScheduler) {\n+    super();\n+    this.ioThreadScheduler = ioThreadScheduler;\n+    networkState = new MutableLiveData();\n+    this.repository = repository;\n+    this.sessionManager = sessionManager;\n+    this.mediaClient = mediaClient;\n+    compositeDisposable = new CompositeDisposable();\n+  }\n+\n+  /**\n+   * Provides the current network state.\n+   * @return\n+   */\n+  public MutableLiveData getNetworkState() {\n+    return networkState;\n+  }\n+\n+  /**\n+   * It is triggered when the list has no items\n+   * User's Contributions are then fetched from the network\n+   */\n+  @Override\n+  public void onZeroItemsLoaded() {\n+    fetchContributions();\n+  }\n+\n+  /**\n+   * It is triggered when the user scrolls to the top of the list\n+   * No action is taken at this point\n+   */\n+  @Override\n+  public void onItemAtFrontLoaded(@NonNull final Contribution itemAtFront) {\n+  }\n+\n+  /**\n+   * It is triggered when the user scrolls to the end of the list\n+   * User's Contributions are then fetched from the network\n+   */\n+  @Override\n+  public void onItemAtEndLoaded(@NonNull final Contribution itemAtEnd) {\n+    fetchContributions();\n+  }\n+\n+  /**\n+   * Fetches contributions using the MediaWiki API\n+   */\n+  public void fetchContributions() {\n+    networkState.postValue(NetworkState.LOADING);\n+    compositeDisposable.add(mediaClient.getMediaListForUser(sessionManager.getUserName())\n+        .map(mediaList -> {\n+          List<Contribution> contributions = new ArrayList<>();\n+          for (Media media : mediaList) {\n+            contributions.add(new Contribution(media, Contribution.STATE_COMPLETED));\n+          }\n+          return contributions;\n+        })\n+        .subscribeOn(ioThreadScheduler)\n+        .subscribe(this::saveContributionsToDB, error -> {\n+          Timber.e(\"Failed to fetch contributions: %s\", error.getMessage());\n+          networkState.postValue(NetworkState.FAILED);\n+        }));\n+  }\n+\n+  /**\n+   * Saves the contributions the the local DB\n+   */\n+  private void saveContributionsToDB(final List<Contribution> contributions) {\n+    Single<List<Long>> single = repository.save(contributions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34bd6f68e80d456824985069e2c0779b4780b0c8"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0NzMxNA==", "bodyText": "This still does nothing without a subscribe", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r423047314", "createdAt": "2020-05-11T13:41:04Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package fr.free.nrw.commons.contributions;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.paging.PagedList;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.auth.SessionManager;\n+import fr.free.nrw.commons.di.CommonsApplicationModule;\n+import fr.free.nrw.commons.media.MediaClient;\n+import io.reactivex.Scheduler;\n+import io.reactivex.Single;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.schedulers.Schedulers;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import timber.log.Timber;\n+\n+/**\n+ * Class that extends PagedList.BoundaryCallback for contributions list\n+ * It defines the action that is triggered for various boundary conditions in the list\n+ */\n+public class ContributionBoundaryCallback extends PagedList.BoundaryCallback<Contribution> {\n+\n+  private final ContributionsRepository repository;\n+  private final SessionManager sessionManager;\n+  private final MediaClient mediaClient;\n+  private final MutableLiveData networkState;\n+  private final CompositeDisposable compositeDisposable;\n+  private final Scheduler ioThreadScheduler;\n+\n+  @Inject\n+  public ContributionBoundaryCallback(final ContributionsRepository repository,\n+      final SessionManager sessionManager,\n+      final MediaClient mediaClient,\n+      @Named(CommonsApplicationModule.IO_THREAD) final Scheduler ioThreadScheduler) {\n+    super();\n+    this.ioThreadScheduler = ioThreadScheduler;\n+    networkState = new MutableLiveData();\n+    this.repository = repository;\n+    this.sessionManager = sessionManager;\n+    this.mediaClient = mediaClient;\n+    compositeDisposable = new CompositeDisposable();\n+  }\n+\n+  /**\n+   * Provides the current network state.\n+   * @return\n+   */\n+  public MutableLiveData getNetworkState() {\n+    return networkState;\n+  }\n+\n+  /**\n+   * It is triggered when the list has no items\n+   * User's Contributions are then fetched from the network\n+   */\n+  @Override\n+  public void onZeroItemsLoaded() {\n+    fetchContributions();\n+  }\n+\n+  /**\n+   * It is triggered when the user scrolls to the top of the list\n+   * No action is taken at this point\n+   */\n+  @Override\n+  public void onItemAtFrontLoaded(@NonNull final Contribution itemAtFront) {\n+  }\n+\n+  /**\n+   * It is triggered when the user scrolls to the end of the list\n+   * User's Contributions are then fetched from the network\n+   */\n+  @Override\n+  public void onItemAtEndLoaded(@NonNull final Contribution itemAtEnd) {\n+    fetchContributions();\n+  }\n+\n+  /**\n+   * Fetches contributions using the MediaWiki API\n+   */\n+  public void fetchContributions() {\n+    networkState.postValue(NetworkState.LOADING);\n+    compositeDisposable.add(mediaClient.getMediaListForUser(sessionManager.getUserName())\n+        .map(mediaList -> {\n+          List<Contribution> contributions = new ArrayList<>();\n+          for (Media media : mediaList) {\n+            contributions.add(new Contribution(media, Contribution.STATE_COMPLETED));\n+          }\n+          return contributions;\n+        })\n+        .subscribeOn(ioThreadScheduler)\n+        .subscribe(this::saveContributionsToDB, error -> {\n+          Timber.e(\"Failed to fetch contributions: %s\", error.getMessage());\n+          networkState.postValue(NetworkState.FAILED);\n+        }));\n+  }\n+\n+  /**\n+   * Saves the contributions the the local DB\n+   */\n+  private void saveContributionsToDB(final List<Contribution> contributions) {\n+    Single<List<Long>> single = repository.save(contributions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkzODM4OA=="}, "originalCommit": {"oid": "34bd6f68e80d456824985069e2c0779b4780b0c8"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIzMDkzMA==", "bodyText": "The contribution is getting saved in the DB. I didn't understand the comment.", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r423230930", "createdAt": "2020-05-11T18:20:32Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package fr.free.nrw.commons.contributions;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.paging.PagedList;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.auth.SessionManager;\n+import fr.free.nrw.commons.di.CommonsApplicationModule;\n+import fr.free.nrw.commons.media.MediaClient;\n+import io.reactivex.Scheduler;\n+import io.reactivex.Single;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.schedulers.Schedulers;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import timber.log.Timber;\n+\n+/**\n+ * Class that extends PagedList.BoundaryCallback for contributions list\n+ * It defines the action that is triggered for various boundary conditions in the list\n+ */\n+public class ContributionBoundaryCallback extends PagedList.BoundaryCallback<Contribution> {\n+\n+  private final ContributionsRepository repository;\n+  private final SessionManager sessionManager;\n+  private final MediaClient mediaClient;\n+  private final MutableLiveData networkState;\n+  private final CompositeDisposable compositeDisposable;\n+  private final Scheduler ioThreadScheduler;\n+\n+  @Inject\n+  public ContributionBoundaryCallback(final ContributionsRepository repository,\n+      final SessionManager sessionManager,\n+      final MediaClient mediaClient,\n+      @Named(CommonsApplicationModule.IO_THREAD) final Scheduler ioThreadScheduler) {\n+    super();\n+    this.ioThreadScheduler = ioThreadScheduler;\n+    networkState = new MutableLiveData();\n+    this.repository = repository;\n+    this.sessionManager = sessionManager;\n+    this.mediaClient = mediaClient;\n+    compositeDisposable = new CompositeDisposable();\n+  }\n+\n+  /**\n+   * Provides the current network state.\n+   * @return\n+   */\n+  public MutableLiveData getNetworkState() {\n+    return networkState;\n+  }\n+\n+  /**\n+   * It is triggered when the list has no items\n+   * User's Contributions are then fetched from the network\n+   */\n+  @Override\n+  public void onZeroItemsLoaded() {\n+    fetchContributions();\n+  }\n+\n+  /**\n+   * It is triggered when the user scrolls to the top of the list\n+   * No action is taken at this point\n+   */\n+  @Override\n+  public void onItemAtFrontLoaded(@NonNull final Contribution itemAtFront) {\n+  }\n+\n+  /**\n+   * It is triggered when the user scrolls to the end of the list\n+   * User's Contributions are then fetched from the network\n+   */\n+  @Override\n+  public void onItemAtEndLoaded(@NonNull final Contribution itemAtEnd) {\n+    fetchContributions();\n+  }\n+\n+  /**\n+   * Fetches contributions using the MediaWiki API\n+   */\n+  public void fetchContributions() {\n+    networkState.postValue(NetworkState.LOADING);\n+    compositeDisposable.add(mediaClient.getMediaListForUser(sessionManager.getUserName())\n+        .map(mediaList -> {\n+          List<Contribution> contributions = new ArrayList<>();\n+          for (Media media : mediaList) {\n+            contributions.add(new Contribution(media, Contribution.STATE_COMPLETED));\n+          }\n+          return contributions;\n+        })\n+        .subscribeOn(ioThreadScheduler)\n+        .subscribe(this::saveContributionsToDB, error -> {\n+          Timber.e(\"Failed to fetch contributions: %s\", error.getMessage());\n+          networkState.postValue(NetworkState.FAILED);\n+        }));\n+  }\n+\n+  /**\n+   * Saves the contributions the the local DB\n+   */\n+  private void saveContributionsToDB(final List<Contribution> contributions) {\n+    Single<List<Long>> single = repository.save(contributions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkzODM4OA=="}, "originalCommit": {"oid": "34bd6f68e80d456824985069e2c0779b4780b0c8"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzgwMTc5OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDoyMTo0OVrOGTWIPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDoyMTo0OVrOGTWIPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkzODY4NA==", "bodyText": "unnecessary super", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r422938684", "createdAt": "2020-05-11T10:21:49Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package fr.free.nrw.commons.contributions;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.paging.PagedList;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.auth.SessionManager;\n+import fr.free.nrw.commons.di.CommonsApplicationModule;\n+import fr.free.nrw.commons.media.MediaClient;\n+import io.reactivex.Scheduler;\n+import io.reactivex.Single;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.schedulers.Schedulers;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import timber.log.Timber;\n+\n+/**\n+ * Class that extends PagedList.BoundaryCallback for contributions list\n+ * It defines the action that is triggered for various boundary conditions in the list\n+ */\n+public class ContributionBoundaryCallback extends PagedList.BoundaryCallback<Contribution> {\n+\n+  private final ContributionsRepository repository;\n+  private final SessionManager sessionManager;\n+  private final MediaClient mediaClient;\n+  private final MutableLiveData networkState;\n+  private final CompositeDisposable compositeDisposable;\n+  private final Scheduler ioThreadScheduler;\n+\n+  @Inject\n+  public ContributionBoundaryCallback(final ContributionsRepository repository,\n+      final SessionManager sessionManager,\n+      final MediaClient mediaClient,\n+      @Named(CommonsApplicationModule.IO_THREAD) final Scheduler ioThreadScheduler) {\n+    super();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34bd6f68e80d456824985069e2c0779b4780b0c8"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzgwNTE5OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDoyMjo0NVrOGTWKSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDoyMjo0NVrOGTWKSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkzOTIwOQ==", "bodyText": "raw type of mutable live data", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r422939209", "createdAt": "2020-05-11T10:22:45Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package fr.free.nrw.commons.contributions;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.paging.PagedList;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.auth.SessionManager;\n+import fr.free.nrw.commons.di.CommonsApplicationModule;\n+import fr.free.nrw.commons.media.MediaClient;\n+import io.reactivex.Scheduler;\n+import io.reactivex.Single;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.schedulers.Schedulers;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import timber.log.Timber;\n+\n+/**\n+ * Class that extends PagedList.BoundaryCallback for contributions list\n+ * It defines the action that is triggered for various boundary conditions in the list\n+ */\n+public class ContributionBoundaryCallback extends PagedList.BoundaryCallback<Contribution> {\n+\n+  private final ContributionsRepository repository;\n+  private final SessionManager sessionManager;\n+  private final MediaClient mediaClient;\n+  private final MutableLiveData networkState;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34bd6f68e80d456824985069e2c0779b4780b0c8"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzgzMzE2OnYy", "diffSide": "RIGHT", "path": "app/src/test/kotlin/fr/free/nrw/commons/media/MediaClientTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDozMDozNVrOGTWbQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDozMDozNVrOGTWbQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk0MzU1Mg==", "bodyText": "mapOf(\"key\" to \"value\") is a bit more idiomatic kotlin", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r422943552", "createdAt": "2020-05-11T10:30:35Z", "author": {"login": "macgills"}, "path": "app/src/test/kotlin/fr/free/nrw/commons/media/MediaClientTest.kt", "diffHunk": "@@ -197,6 +197,35 @@ class MediaClientTest {\n         assertEquals(media2.filename, \"Test\")\n     }\n \n+    @Test\n+    fun getMediaListForUser() {\n+        val mockContinuation= mapOf(Pair(\"gcmcontinue\", \"test\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34bd6f68e80d456824985069e2c0779b4780b0c8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzg0NDk0OnYy", "diffSide": "RIGHT", "path": "app/src/test/kotlin/fr/free/nrw/commons/media/MediaClientTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDozNDoxOVrOGTWilQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDozNDoxOVrOGTWilQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk0NTQyOQ==", "bodyText": "the mocked object already exists, why are we fetching the title to assert it is the same object?", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r422945429", "createdAt": "2020-05-11T10:34:19Z", "author": {"login": "macgills"}, "path": "app/src/test/kotlin/fr/free/nrw/commons/media/MediaClientTest.kt", "diffHunk": "@@ -197,6 +197,35 @@ class MediaClientTest {\n         assertEquals(media2.filename, \"Test\")\n     }\n \n+    @Test\n+    fun getMediaListForUser() {\n+        val mockContinuation= mapOf(Pair(\"gcmcontinue\", \"test\"))\n+        val imageInfo = ImageInfo()\n+\n+        val mwQueryPage = mock(MwQueryPage::class.java)\n+        `when`(mwQueryPage.title()).thenReturn(\"Test\")\n+        `when`(mwQueryPage.imageInfo()).thenReturn(imageInfo)\n+\n+        val mwQueryResult = mock(MwQueryResult::class.java)\n+        `when`(mwQueryResult.pages()).thenReturn(listOf(mwQueryPage))\n+\n+        val mockResponse = mock(MwQueryResponse::class.java)\n+        `when`(mockResponse.query()).thenReturn(mwQueryResult)\n+        `when`(mockResponse.continuation()).thenReturn(mockContinuation)\n+\n+        `when`(mediaInterface!!.getMediaListForUser(ArgumentMatchers.anyString(), ArgumentMatchers.anyInt(),\n+            continuationCaptor!!.capture()))\n+            .thenReturn(Observable.just(mockResponse))\n+        val media1 = mediaClient!!.getMediaListForUser(\"Test\").blockingGet().get(0)\n+        val media2 = mediaClient!!.getMediaListForUser(\"Test\").blockingGet().get(0)\n+\n+        assertEquals(continuationCaptor.allValues[0], emptyMap<String, String>())\n+        assertEquals(continuationCaptor.allValues[1], mockContinuation)\n+\n+        assertEquals(media1.filename, \"Test\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34bd6f68e80d456824985069e2c0779b4780b0c8"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzg0OTA4OnYy", "diffSide": "RIGHT", "path": "app/src/test/kotlin/fr/free/nrw/commons/media/MediaClientTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDozNTozMFrOGTWlFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDozNTozMFrOGTWlFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk0NjA2OQ==", "bodyText": "you could do this with a verification call instead and it would probably read cleaner", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r422946069", "createdAt": "2020-05-11T10:35:30Z", "author": {"login": "macgills"}, "path": "app/src/test/kotlin/fr/free/nrw/commons/media/MediaClientTest.kt", "diffHunk": "@@ -197,6 +197,35 @@ class MediaClientTest {\n         assertEquals(media2.filename, \"Test\")\n     }\n \n+    @Test\n+    fun getMediaListForUser() {\n+        val mockContinuation= mapOf(Pair(\"gcmcontinue\", \"test\"))\n+        val imageInfo = ImageInfo()\n+\n+        val mwQueryPage = mock(MwQueryPage::class.java)\n+        `when`(mwQueryPage.title()).thenReturn(\"Test\")\n+        `when`(mwQueryPage.imageInfo()).thenReturn(imageInfo)\n+\n+        val mwQueryResult = mock(MwQueryResult::class.java)\n+        `when`(mwQueryResult.pages()).thenReturn(listOf(mwQueryPage))\n+\n+        val mockResponse = mock(MwQueryResponse::class.java)\n+        `when`(mockResponse.query()).thenReturn(mwQueryResult)\n+        `when`(mockResponse.continuation()).thenReturn(mockContinuation)\n+\n+        `when`(mediaInterface!!.getMediaListForUser(ArgumentMatchers.anyString(), ArgumentMatchers.anyInt(),\n+            continuationCaptor!!.capture()))\n+            .thenReturn(Observable.just(mockResponse))\n+        val media1 = mediaClient!!.getMediaListForUser(\"Test\").blockingGet().get(0)\n+        val media2 = mediaClient!!.getMediaListForUser(\"Test\").blockingGet().get(0)\n+\n+        assertEquals(continuationCaptor.allValues[0], emptyMap<String, String>())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34bd6f68e80d456824985069e2c0779b4780b0c8"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzUyMzY4OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzo1NjowN1rOGT6hlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoxNjoxNVrOGU7o5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUzNDk5Ng==", "bodyText": "I'll move this discussion to the more recent code.\nThis does nothing without a subscribe, this is just a Single which represents a task that produces a value or an error.\nIf the contributions are being saved then it is not by this code", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r423534996", "createdAt": "2020-05-12T07:56:07Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package fr.free.nrw.commons.contributions;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.paging.PagedList;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.auth.SessionManager;\n+import fr.free.nrw.commons.di.CommonsApplicationModule;\n+import fr.free.nrw.commons.media.MediaClient;\n+import io.reactivex.Scheduler;\n+import io.reactivex.Single;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.schedulers.Schedulers;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import timber.log.Timber;\n+\n+/**\n+ * Class that extends PagedList.BoundaryCallback for contributions list It defines the action that\n+ * is triggered for various boundary conditions in the list\n+ */\n+public class ContributionBoundaryCallback extends PagedList.BoundaryCallback<Contribution> {\n+\n+  private final ContributionsRepository repository;\n+  private final SessionManager sessionManager;\n+  private final MediaClient mediaClient;\n+  private final CompositeDisposable compositeDisposable;\n+  private final Scheduler ioThreadScheduler;\n+\n+  @Inject\n+  public ContributionBoundaryCallback(final ContributionsRepository repository,\n+      final SessionManager sessionManager,\n+      final MediaClient mediaClient,\n+      @Named(CommonsApplicationModule.IO_THREAD) final Scheduler ioThreadScheduler) {\n+    this.ioThreadScheduler = ioThreadScheduler;\n+    this.repository = repository;\n+    this.sessionManager = sessionManager;\n+    this.mediaClient = mediaClient;\n+    compositeDisposable = new CompositeDisposable();\n+  }\n+\n+  /**\n+   * It is triggered when the list has no items User's Contributions are then fetched from the\n+   * network\n+   */\n+  @Override\n+  public void onZeroItemsLoaded() {\n+    fetchContributions();\n+  }\n+\n+  /**\n+   * It is triggered when the user scrolls to the top of the list No action is taken at this point\n+   */\n+  @Override\n+  public void onItemAtFrontLoaded(@NonNull final Contribution itemAtFront) {\n+  }\n+\n+  /**\n+   * It is triggered when the user scrolls to the end of the list User's Contributions are then\n+   * fetched from the network\n+   */\n+  @Override\n+  public void onItemAtEndLoaded(@NonNull final Contribution itemAtEnd) {\n+    fetchContributions();\n+  }\n+\n+  /**\n+   * Fetches contributions using the MediaWiki API\n+   */\n+  public void fetchContributions() {\n+    compositeDisposable.add(mediaClient.getMediaListForUser(sessionManager.getUserName())\n+        .map(mediaList -> {\n+          List<Contribution> contributions = new ArrayList<>();\n+          for (final Media media : mediaList) {\n+            contributions.add(new Contribution(media, Contribution.STATE_COMPLETED));\n+          }\n+          return contributions;\n+        })\n+        .subscribeOn(ioThreadScheduler)\n+        .subscribe(this::saveContributionsToDB, error -> {\n+          Timber.e(\"Failed to fetch contributions: %s\", error.getMessage());\n+        }));\n+  }\n+\n+  /**\n+   * Saves the contributions the the local DB\n+   */\n+  private void saveContributionsToDB(final List<Contribution> contributions) {\n+    repository.save(contributions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee70c21493ae24e63e8d0e05900685a5d4a862bd"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkzMjYwNA==", "bodyText": "@macgills There's just a single usage of this method in our codebase. I checked ContributionsRepository, ContributionsLocalDataSource and ContributionDao too.\nAlso, I have been testing on a fresh install.\nCan you demonstrate that a Single doesn't execute if the result isn't subscribed?", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r423932604", "createdAt": "2020-05-12T18:06:46Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package fr.free.nrw.commons.contributions;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.paging.PagedList;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.auth.SessionManager;\n+import fr.free.nrw.commons.di.CommonsApplicationModule;\n+import fr.free.nrw.commons.media.MediaClient;\n+import io.reactivex.Scheduler;\n+import io.reactivex.Single;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.schedulers.Schedulers;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import timber.log.Timber;\n+\n+/**\n+ * Class that extends PagedList.BoundaryCallback for contributions list It defines the action that\n+ * is triggered for various boundary conditions in the list\n+ */\n+public class ContributionBoundaryCallback extends PagedList.BoundaryCallback<Contribution> {\n+\n+  private final ContributionsRepository repository;\n+  private final SessionManager sessionManager;\n+  private final MediaClient mediaClient;\n+  private final CompositeDisposable compositeDisposable;\n+  private final Scheduler ioThreadScheduler;\n+\n+  @Inject\n+  public ContributionBoundaryCallback(final ContributionsRepository repository,\n+      final SessionManager sessionManager,\n+      final MediaClient mediaClient,\n+      @Named(CommonsApplicationModule.IO_THREAD) final Scheduler ioThreadScheduler) {\n+    this.ioThreadScheduler = ioThreadScheduler;\n+    this.repository = repository;\n+    this.sessionManager = sessionManager;\n+    this.mediaClient = mediaClient;\n+    compositeDisposable = new CompositeDisposable();\n+  }\n+\n+  /**\n+   * It is triggered when the list has no items User's Contributions are then fetched from the\n+   * network\n+   */\n+  @Override\n+  public void onZeroItemsLoaded() {\n+    fetchContributions();\n+  }\n+\n+  /**\n+   * It is triggered when the user scrolls to the top of the list No action is taken at this point\n+   */\n+  @Override\n+  public void onItemAtFrontLoaded(@NonNull final Contribution itemAtFront) {\n+  }\n+\n+  /**\n+   * It is triggered when the user scrolls to the end of the list User's Contributions are then\n+   * fetched from the network\n+   */\n+  @Override\n+  public void onItemAtEndLoaded(@NonNull final Contribution itemAtEnd) {\n+    fetchContributions();\n+  }\n+\n+  /**\n+   * Fetches contributions using the MediaWiki API\n+   */\n+  public void fetchContributions() {\n+    compositeDisposable.add(mediaClient.getMediaListForUser(sessionManager.getUserName())\n+        .map(mediaList -> {\n+          List<Contribution> contributions = new ArrayList<>();\n+          for (final Media media : mediaList) {\n+            contributions.add(new Contribution(media, Contribution.STATE_COMPLETED));\n+          }\n+          return contributions;\n+        })\n+        .subscribeOn(ioThreadScheduler)\n+        .subscribe(this::saveContributionsToDB, error -> {\n+          Timber.e(\"Failed to fetch contributions: %s\", error.getMessage());\n+        }));\n+  }\n+\n+  /**\n+   * Saves the contributions the the local DB\n+   */\n+  private void saveContributionsToDB(final List<Contribution> contributions) {\n+    repository.save(contributions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUzNDk5Ng=="}, "originalCommit": {"oid": "ee70c21493ae24e63e8d0e05900685a5d4a862bd"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk2NDk2NA==", "bodyText": "Anyways, I have updated the code to add a subscription. Still, it would be great if you could cite a source or demonstrate the above.", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r423964964", "createdAt": "2020-05-12T19:01:29Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package fr.free.nrw.commons.contributions;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.paging.PagedList;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.auth.SessionManager;\n+import fr.free.nrw.commons.di.CommonsApplicationModule;\n+import fr.free.nrw.commons.media.MediaClient;\n+import io.reactivex.Scheduler;\n+import io.reactivex.Single;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.schedulers.Schedulers;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import timber.log.Timber;\n+\n+/**\n+ * Class that extends PagedList.BoundaryCallback for contributions list It defines the action that\n+ * is triggered for various boundary conditions in the list\n+ */\n+public class ContributionBoundaryCallback extends PagedList.BoundaryCallback<Contribution> {\n+\n+  private final ContributionsRepository repository;\n+  private final SessionManager sessionManager;\n+  private final MediaClient mediaClient;\n+  private final CompositeDisposable compositeDisposable;\n+  private final Scheduler ioThreadScheduler;\n+\n+  @Inject\n+  public ContributionBoundaryCallback(final ContributionsRepository repository,\n+      final SessionManager sessionManager,\n+      final MediaClient mediaClient,\n+      @Named(CommonsApplicationModule.IO_THREAD) final Scheduler ioThreadScheduler) {\n+    this.ioThreadScheduler = ioThreadScheduler;\n+    this.repository = repository;\n+    this.sessionManager = sessionManager;\n+    this.mediaClient = mediaClient;\n+    compositeDisposable = new CompositeDisposable();\n+  }\n+\n+  /**\n+   * It is triggered when the list has no items User's Contributions are then fetched from the\n+   * network\n+   */\n+  @Override\n+  public void onZeroItemsLoaded() {\n+    fetchContributions();\n+  }\n+\n+  /**\n+   * It is triggered when the user scrolls to the top of the list No action is taken at this point\n+   */\n+  @Override\n+  public void onItemAtFrontLoaded(@NonNull final Contribution itemAtFront) {\n+  }\n+\n+  /**\n+   * It is triggered when the user scrolls to the end of the list User's Contributions are then\n+   * fetched from the network\n+   */\n+  @Override\n+  public void onItemAtEndLoaded(@NonNull final Contribution itemAtEnd) {\n+    fetchContributions();\n+  }\n+\n+  /**\n+   * Fetches contributions using the MediaWiki API\n+   */\n+  public void fetchContributions() {\n+    compositeDisposable.add(mediaClient.getMediaListForUser(sessionManager.getUserName())\n+        .map(mediaList -> {\n+          List<Contribution> contributions = new ArrayList<>();\n+          for (final Media media : mediaList) {\n+            contributions.add(new Contribution(media, Contribution.STATE_COMPLETED));\n+          }\n+          return contributions;\n+        })\n+        .subscribeOn(ioThreadScheduler)\n+        .subscribe(this::saveContributionsToDB, error -> {\n+          Timber.e(\"Failed to fetch contributions: %s\", error.getMessage());\n+        }));\n+  }\n+\n+  /**\n+   * Saves the contributions the the local DB\n+   */\n+  private void saveContributionsToDB(final List<Contribution> contributions) {\n+    repository.save(contributions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUzNDk5Ng=="}, "originalCommit": {"oid": "ee70c21493ae24e63e8d0e05900685a5d4a862bd"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIzNDU5OQ==", "bodyText": "This is just an object\n\nThis is the single executing\n\nOr we could check the documentation of Single. This is the behaviour of all the reactive types, you need a subscribe call to actually do/receive something.\nTutorial official examples", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r424234599", "createdAt": "2020-05-13T07:41:19Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package fr.free.nrw.commons.contributions;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.paging.PagedList;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.auth.SessionManager;\n+import fr.free.nrw.commons.di.CommonsApplicationModule;\n+import fr.free.nrw.commons.media.MediaClient;\n+import io.reactivex.Scheduler;\n+import io.reactivex.Single;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.schedulers.Schedulers;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import timber.log.Timber;\n+\n+/**\n+ * Class that extends PagedList.BoundaryCallback for contributions list It defines the action that\n+ * is triggered for various boundary conditions in the list\n+ */\n+public class ContributionBoundaryCallback extends PagedList.BoundaryCallback<Contribution> {\n+\n+  private final ContributionsRepository repository;\n+  private final SessionManager sessionManager;\n+  private final MediaClient mediaClient;\n+  private final CompositeDisposable compositeDisposable;\n+  private final Scheduler ioThreadScheduler;\n+\n+  @Inject\n+  public ContributionBoundaryCallback(final ContributionsRepository repository,\n+      final SessionManager sessionManager,\n+      final MediaClient mediaClient,\n+      @Named(CommonsApplicationModule.IO_THREAD) final Scheduler ioThreadScheduler) {\n+    this.ioThreadScheduler = ioThreadScheduler;\n+    this.repository = repository;\n+    this.sessionManager = sessionManager;\n+    this.mediaClient = mediaClient;\n+    compositeDisposable = new CompositeDisposable();\n+  }\n+\n+  /**\n+   * It is triggered when the list has no items User's Contributions are then fetched from the\n+   * network\n+   */\n+  @Override\n+  public void onZeroItemsLoaded() {\n+    fetchContributions();\n+  }\n+\n+  /**\n+   * It is triggered when the user scrolls to the top of the list No action is taken at this point\n+   */\n+  @Override\n+  public void onItemAtFrontLoaded(@NonNull final Contribution itemAtFront) {\n+  }\n+\n+  /**\n+   * It is triggered when the user scrolls to the end of the list User's Contributions are then\n+   * fetched from the network\n+   */\n+  @Override\n+  public void onItemAtEndLoaded(@NonNull final Contribution itemAtEnd) {\n+    fetchContributions();\n+  }\n+\n+  /**\n+   * Fetches contributions using the MediaWiki API\n+   */\n+  public void fetchContributions() {\n+    compositeDisposable.add(mediaClient.getMediaListForUser(sessionManager.getUserName())\n+        .map(mediaList -> {\n+          List<Contribution> contributions = new ArrayList<>();\n+          for (final Media media : mediaList) {\n+            contributions.add(new Contribution(media, Contribution.STATE_COMPLETED));\n+          }\n+          return contributions;\n+        })\n+        .subscribeOn(ioThreadScheduler)\n+        .subscribe(this::saveContributionsToDB, error -> {\n+          Timber.e(\"Failed to fetch contributions: %s\", error.getMessage());\n+        }));\n+  }\n+\n+  /**\n+   * Saves the contributions the the local DB\n+   */\n+  private void saveContributionsToDB(final List<Contribution> contributions) {\n+    repository.save(contributions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUzNDk5Ng=="}, "originalCommit": {"oid": "ee70c21493ae24e63e8d0e05900685a5d4a862bd"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwMTgzMA==", "bodyText": "Thanks for the example. Hopefully, the updated code should work as expected.", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r424601830", "createdAt": "2020-05-13T17:16:15Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package fr.free.nrw.commons.contributions;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.paging.PagedList;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.auth.SessionManager;\n+import fr.free.nrw.commons.di.CommonsApplicationModule;\n+import fr.free.nrw.commons.media.MediaClient;\n+import io.reactivex.Scheduler;\n+import io.reactivex.Single;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.schedulers.Schedulers;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import timber.log.Timber;\n+\n+/**\n+ * Class that extends PagedList.BoundaryCallback for contributions list It defines the action that\n+ * is triggered for various boundary conditions in the list\n+ */\n+public class ContributionBoundaryCallback extends PagedList.BoundaryCallback<Contribution> {\n+\n+  private final ContributionsRepository repository;\n+  private final SessionManager sessionManager;\n+  private final MediaClient mediaClient;\n+  private final CompositeDisposable compositeDisposable;\n+  private final Scheduler ioThreadScheduler;\n+\n+  @Inject\n+  public ContributionBoundaryCallback(final ContributionsRepository repository,\n+      final SessionManager sessionManager,\n+      final MediaClient mediaClient,\n+      @Named(CommonsApplicationModule.IO_THREAD) final Scheduler ioThreadScheduler) {\n+    this.ioThreadScheduler = ioThreadScheduler;\n+    this.repository = repository;\n+    this.sessionManager = sessionManager;\n+    this.mediaClient = mediaClient;\n+    compositeDisposable = new CompositeDisposable();\n+  }\n+\n+  /**\n+   * It is triggered when the list has no items User's Contributions are then fetched from the\n+   * network\n+   */\n+  @Override\n+  public void onZeroItemsLoaded() {\n+    fetchContributions();\n+  }\n+\n+  /**\n+   * It is triggered when the user scrolls to the top of the list No action is taken at this point\n+   */\n+  @Override\n+  public void onItemAtFrontLoaded(@NonNull final Contribution itemAtFront) {\n+  }\n+\n+  /**\n+   * It is triggered when the user scrolls to the end of the list User's Contributions are then\n+   * fetched from the network\n+   */\n+  @Override\n+  public void onItemAtEndLoaded(@NonNull final Contribution itemAtEnd) {\n+    fetchContributions();\n+  }\n+\n+  /**\n+   * Fetches contributions using the MediaWiki API\n+   */\n+  public void fetchContributions() {\n+    compositeDisposable.add(mediaClient.getMediaListForUser(sessionManager.getUserName())\n+        .map(mediaList -> {\n+          List<Contribution> contributions = new ArrayList<>();\n+          for (final Media media : mediaList) {\n+            contributions.add(new Contribution(media, Contribution.STATE_COMPLETED));\n+          }\n+          return contributions;\n+        })\n+        .subscribeOn(ioThreadScheduler)\n+        .subscribe(this::saveContributionsToDB, error -> {\n+          Timber.e(\"Failed to fetch contributions: %s\", error.getMessage());\n+        }));\n+  }\n+\n+  /**\n+   * Saves the contributions the the local DB\n+   */\n+  private void saveContributionsToDB(final List<Contribution> contributions) {\n+    repository.save(contributions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUzNDk5Ng=="}, "originalCommit": {"oid": "ee70c21493ae24e63e8d0e05900685a5d4a862bd"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjAyODE5OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsFragment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODoyOTo0NFrOGUm_iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzowNzo1MFrOGU7VmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI2MzU2MA==", "bodyText": "Prefs.IS_CONTRIBUTION_COUNT_CHANGED can be removed entirely, we now only ever set the value, never retrieve", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r424263560", "createdAt": "2020-05-13T08:29:44Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsFragment.java", "diffHunk": "@@ -384,12 +295,7 @@ public void onResume() {\n         firstLocationUpdate = true;\n         locationManager.addLocationListener(this);\n \n-        boolean isSettingsChanged = store.getBoolean(Prefs.IS_CONTRIBUTION_COUNT_CHANGED, false);\n         store.putBoolean(Prefs.IS_CONTRIBUTION_COUNT_CHANGED, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa889265c17130819bfebdcea839dfaf691a608a"}, "originalPosition": 292}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5Njg4OQ==", "bodyText": "Yeah, I think the whole of upload limit setting can be removed now.", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r424596889", "createdAt": "2020-05-13T17:07:50Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsFragment.java", "diffHunk": "@@ -384,12 +295,7 @@ public void onResume() {\n         firstLocationUpdate = true;\n         locationManager.addLocationListener(this);\n \n-        boolean isSettingsChanged = store.getBoolean(Prefs.IS_CONTRIBUTION_COUNT_CHANGED, false);\n         store.putBoolean(Prefs.IS_CONTRIBUTION_COUNT_CHANGED, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI2MzU2MA=="}, "originalCommit": {"oid": "aa889265c17130819bfebdcea839dfaf691a608a"}, "originalPosition": 292}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjAzMzE2OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODozMDo1OFrOGUnCmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODozMDo1OFrOGUnCmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI2NDM0Nw==", "bodyText": "we no longer need this null check as we don't use placeholders", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r424264347", "createdAt": "2020-05-13T08:30:58Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java", "diffHunk": "@@ -1,68 +1,73 @@\n package fr.free.nrw.commons.contributions;\n \n-import android.text.TextUtils;\n import android.view.LayoutInflater;\n import android.view.ViewGroup;\n import androidx.annotation.NonNull;\n-import androidx.recyclerview.widget.RecyclerView;\n+import androidx.paging.PagedListAdapter;\n+import androidx.recyclerview.widget.DiffUtil;\n import fr.free.nrw.commons.R;\n import fr.free.nrw.commons.media.MediaClient;\n-import java.util.ArrayList;\n-import java.util.List;\n \n /**\n- * Represents The View Adapter for the List of Contributions  \n+ * Represents The View Adapter for the List of Contributions\n  */\n-public class ContributionsListAdapter extends RecyclerView.Adapter<ContributionViewHolder> {\n+public class ContributionsListAdapter extends\n+    PagedListAdapter<Contribution, ContributionViewHolder> {\n \n-    private Callback callback;\n+    private final Callback callback;\n     private final MediaClient mediaClient;\n-    private List<Contribution> contributions;\n \n-    public ContributionsListAdapter(Callback callback,\n-        MediaClient mediaClient) {\n+    ContributionsListAdapter(final Callback callback,\n+        final MediaClient mediaClient) {\n+        super(DIFF_CALLBACK);\n         this.callback = callback;\n         this.mediaClient = mediaClient;\n-        contributions = new ArrayList<>();\n     }\n \n     /**\n-     * Creates the new View Holder which will be used to display items(contributions)\n-     * using the onBindViewHolder(viewHolder,position) \n+     * Uses DiffUtil to calculate the changes in the list\n+     * It has methods that check ID and the content of the items to determine if its a new item\n      */\n-    @NonNull\n-    @Override\n-    public ContributionViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n-        ContributionViewHolder viewHolder = new ContributionViewHolder(\n-                LayoutInflater.from(parent.getContext())\n-                        .inflate(R.layout.layout_contribution, parent, false), callback, mediaClient);\n-        return viewHolder;\n-    }\n+    private static final DiffUtil.ItemCallback<Contribution> DIFF_CALLBACK =\n+        new DiffUtil.ItemCallback<Contribution>() {\n+            @Override\n+            public boolean areItemsTheSame(final Contribution oldContribution, final Contribution newContribution) {\n+                return oldContribution.getPageId().equals(newContribution.getPageId());\n+            }\n+\n+            @Override\n+            public boolean areContentsTheSame(final Contribution oldContribution, final Contribution newContribution) {\n+                return oldContribution.equals(newContribution);\n+            }\n+        };\n \n+    /**\n+     * Initializes the view holder with contribution data\n+     */\n     @Override\n-    public void onBindViewHolder(@NonNull ContributionViewHolder holder, int position) {\n-        final Contribution contribution = contributions.get(position);\n-        if (TextUtils.isEmpty(contribution.getThumbUrl())\n-            && contribution.getState() == Contribution.STATE_COMPLETED) {\n-            callback.fetchMediaUriFor(contribution);\n+    public void onBindViewHolder(@NonNull final ContributionViewHolder holder, final int position) {\n+        final Contribution contribution = getItem(position);\n+        if (contribution != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa889265c17130819bfebdcea839dfaf691a608a"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjA1MzMwOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/media/MediaClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODozNjowNFrOGUnPdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODozNjowNFrOGUnPdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI2NzYzNg==", "bodyText": "this looks a little funky with the .get on the next line, sometimes I favor\nexpression\n ? trueValue\n : falseValue\n\nwhen things run a little long", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r424267636", "createdAt": "2020-05-13T08:36:04Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/media/MediaClient.java", "diffHunk": "@@ -83,6 +83,22 @@ public MediaClient(MediaInterface mediaInterface, MediaDetailInterface mediaDeta\n \n     }\n \n+    /**\n+     * This method takes the userName as input and returns a list of  Media objects filtered using\n+     * allimages query It uses the allimages query API to get the images contributed by the userName,\n+     * 10 at a time.\n+     *\n+     * @param userName the username\n+     * @return\n+     */\n+    public Single<List<Media>> getMediaListForUser(String userName) {\n+        Map<String, String> continuation =\n+            continuationStore.containsKey(\"user_\" + userName) ? continuationStore\n+                .get(\"user_\" + userName) : Collections.emptyMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa889265c17130819bfebdcea839dfaf691a608a"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjEyNjkxOnYy", "diffSide": "RIGHT", "path": "app/src/test/kotlin/fr/free/nrw/commons/media/MediaClientTest.kt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODo1NDoxNVrOGUn9RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNDo1MTozNFrOGVL-yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI3OTM2NQ==", "bodyText": "my intention with the verify was to not use argument matchers and have 2 separate calls that verify exact arguments.\nI imagine this test invokes getMediaListForUser twice for the purpose of testing the continuationStore ternary? anyMap() is hiding this fact.\nA more robust - but unnecessary - way to approach this would be if continuationStroe was not a hashMap but an object ContinuationStore we could mock and expect values from and then we would have separate tests for when there is and isn't a match in the continuation store", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r424279365", "createdAt": "2020-05-13T08:54:15Z", "author": {"login": "macgills"}, "path": "app/src/test/kotlin/fr/free/nrw/commons/media/MediaClientTest.kt", "diffHunk": "@@ -197,6 +203,38 @@ class MediaClientTest {\n         assertEquals(media2.filename, \"Test\")\n     }\n \n+    @Test\n+    fun getMediaListForUser() {\n+        val mockContinuation = mapOf(\"gcmcontinue\" to \"test\")\n+        val imageInfo = ImageInfo()\n+\n+        val mwQueryPage = mock(MwQueryPage::class.java)\n+        whenever(mwQueryPage.title()).thenReturn(\"Test\")\n+        whenever(mwQueryPage.imageInfo()).thenReturn(imageInfo)\n+\n+        val mwQueryResult = mock(MwQueryResult::class.java)\n+        whenever(mwQueryResult.pages()).thenReturn(listOf(mwQueryPage))\n+\n+        val mockResponse = mock(MwQueryResponse::class.java)\n+        whenever(mockResponse.query()).thenReturn(mwQueryResult)\n+        whenever(mockResponse.continuation()).thenReturn(mockContinuation)\n+\n+        whenever(\n+            mediaInterface!!.getMediaListForUser(\n+                ArgumentMatchers.anyString(), ArgumentMatchers.anyInt(),\n+                continuationCaptor!!.capture()\n+            )\n+        )\n+            .thenReturn(Observable.just(mockResponse))\n+        val media1 = mediaClient!!.getMediaListForUser(\"Test\").blockingGet().get(0)\n+        val media2 = mediaClient!!.getMediaListForUser(\"Test\").blockingGet().get(0)\n+\n+        verify(mediaInterface, times(2))?.getMediaListForUser(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa889265c17130819bfebdcea839dfaf691a608a"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwMTQ4OQ==", "bodyText": "Yeah, I agree. This test and other similar tests in MediaClientTest can be improved. Can you create a separate issue for it? I have just mimicked the existing getMediaListFromCategoryTwice test(i am the original of that test too).\nThese tests can probably be improved in different PR.", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r424601489", "createdAt": "2020-05-13T17:15:38Z", "author": {"login": "maskaravivek"}, "path": "app/src/test/kotlin/fr/free/nrw/commons/media/MediaClientTest.kt", "diffHunk": "@@ -197,6 +203,38 @@ class MediaClientTest {\n         assertEquals(media2.filename, \"Test\")\n     }\n \n+    @Test\n+    fun getMediaListForUser() {\n+        val mockContinuation = mapOf(\"gcmcontinue\" to \"test\")\n+        val imageInfo = ImageInfo()\n+\n+        val mwQueryPage = mock(MwQueryPage::class.java)\n+        whenever(mwQueryPage.title()).thenReturn(\"Test\")\n+        whenever(mwQueryPage.imageInfo()).thenReturn(imageInfo)\n+\n+        val mwQueryResult = mock(MwQueryResult::class.java)\n+        whenever(mwQueryResult.pages()).thenReturn(listOf(mwQueryPage))\n+\n+        val mockResponse = mock(MwQueryResponse::class.java)\n+        whenever(mockResponse.query()).thenReturn(mwQueryResult)\n+        whenever(mockResponse.continuation()).thenReturn(mockContinuation)\n+\n+        whenever(\n+            mediaInterface!!.getMediaListForUser(\n+                ArgumentMatchers.anyString(), ArgumentMatchers.anyInt(),\n+                continuationCaptor!!.capture()\n+            )\n+        )\n+            .thenReturn(Observable.just(mockResponse))\n+        val media1 = mediaClient!!.getMediaListForUser(\"Test\").blockingGet().get(0)\n+        val media2 = mediaClient!!.getMediaListForUser(\"Test\").blockingGet().get(0)\n+\n+        verify(mediaInterface, times(2))?.getMediaListForUser(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI3OTM2NQ=="}, "originalCommit": {"oid": "aa889265c17130819bfebdcea839dfaf691a608a"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg2OTU3OQ==", "bodyText": "#3749 done", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r424869579", "createdAt": "2020-05-14T04:51:34Z", "author": {"login": "macgills"}, "path": "app/src/test/kotlin/fr/free/nrw/commons/media/MediaClientTest.kt", "diffHunk": "@@ -197,6 +203,38 @@ class MediaClientTest {\n         assertEquals(media2.filename, \"Test\")\n     }\n \n+    @Test\n+    fun getMediaListForUser() {\n+        val mockContinuation = mapOf(\"gcmcontinue\" to \"test\")\n+        val imageInfo = ImageInfo()\n+\n+        val mwQueryPage = mock(MwQueryPage::class.java)\n+        whenever(mwQueryPage.title()).thenReturn(\"Test\")\n+        whenever(mwQueryPage.imageInfo()).thenReturn(imageInfo)\n+\n+        val mwQueryResult = mock(MwQueryResult::class.java)\n+        whenever(mwQueryResult.pages()).thenReturn(listOf(mwQueryPage))\n+\n+        val mockResponse = mock(MwQueryResponse::class.java)\n+        whenever(mockResponse.query()).thenReturn(mwQueryResult)\n+        whenever(mockResponse.continuation()).thenReturn(mockContinuation)\n+\n+        whenever(\n+            mediaInterface!!.getMediaListForUser(\n+                ArgumentMatchers.anyString(), ArgumentMatchers.anyInt(),\n+                continuationCaptor!!.capture()\n+            )\n+        )\n+            .thenReturn(Observable.just(mockResponse))\n+        val media1 = mediaClient!!.getMediaListForUser(\"Test\").blockingGet().get(0)\n+        val media2 = mediaClient!!.getMediaListForUser(\"Test\").blockingGet().get(0)\n+\n+        verify(mediaInterface, times(2))?.getMediaListForUser(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI3OTM2NQ=="}, "originalCommit": {"oid": "aa889265c17130819bfebdcea839dfaf691a608a"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjEzNDI3OnYy", "diffSide": "RIGHT", "path": "app/build.gradle", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODo1NjowNVrOGUoB7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNTo1MjoyM1rOGVM9tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI4MDU1OQ==", "bodyText": "there is a testImplementation of the pagingLibrary as well with no Android dependencies, was that not useful?", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r424280559", "createdAt": "2020-05-13T08:56:05Z", "author": {"login": "macgills"}, "path": "app/build.gradle", "diffHunk": "@@ -44,6 +44,10 @@ dependencies {\n     implementation 'com.karumi:dexter:5.0.0'\n     implementation \"com.jakewharton:butterknife:$BUTTERKNIFE_VERSION\"\n \n+    //paging\n+    implementation \"androidx.paging:paging-runtime:2.1.2\"\n+    implementation \"androidx.paging:paging-rxjava2:2.1.2\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa889265c17130819bfebdcea839dfaf691a608a"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5OTQ0MQ==", "bodyText": "Can you point me to the library? I didn't actually understand this comment.", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r424599441", "createdAt": "2020-05-13T17:12:08Z", "author": {"login": "maskaravivek"}, "path": "app/build.gradle", "diffHunk": "@@ -44,6 +44,10 @@ dependencies {\n     implementation 'com.karumi:dexter:5.0.0'\n     implementation \"com.jakewharton:butterknife:$BUTTERKNIFE_VERSION\"\n \n+    //paging\n+    implementation \"androidx.paging:paging-runtime:2.1.2\"\n+    implementation \"androidx.paging:paging-rxjava2:2.1.2\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI4MDU1OQ=="}, "originalCommit": {"oid": "aa889265c17130819bfebdcea839dfaf691a608a"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg2ODg1Nw==", "bodyText": "The androidx team provide a library without Android Dependencies: paging-commons\nI can't find any example of why it is useful? I would have thought given the testImplementation that it is for writing unit tests involving PagedList etc.\nAlso we should be using the -ktx variants of these libraries, it'll give us some advantages when writing kotlin", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r424868857", "createdAt": "2020-05-14T04:48:49Z", "author": {"login": "macgills"}, "path": "app/build.gradle", "diffHunk": "@@ -44,6 +44,10 @@ dependencies {\n     implementation 'com.karumi:dexter:5.0.0'\n     implementation \"com.jakewharton:butterknife:$BUTTERKNIFE_VERSION\"\n \n+    //paging\n+    implementation \"androidx.paging:paging-runtime:2.1.2\"\n+    implementation \"androidx.paging:paging-rxjava2:2.1.2\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI4MDU1OQ=="}, "originalCommit": {"oid": "aa889265c17130819bfebdcea839dfaf691a608a"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4NTY4NA==", "bodyText": "I have added the -ktx version of the library. For writing paged list tests I have added a few methods in PagedListMock.kt class. That seems to be serving the purpose for now. We can add the test implementation later if required.", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r424885684", "createdAt": "2020-05-14T05:52:23Z", "author": {"login": "maskaravivek"}, "path": "app/build.gradle", "diffHunk": "@@ -44,6 +44,10 @@ dependencies {\n     implementation 'com.karumi:dexter:5.0.0'\n     implementation \"com.jakewharton:butterknife:$BUTTERKNIFE_VERSION\"\n \n+    //paging\n+    implementation \"androidx.paging:paging-runtime:2.1.2\"\n+    implementation \"androidx.paging:paging-rxjava2:2.1.2\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI4MDU1OQ=="}, "originalCommit": {"oid": "aa889265c17130819bfebdcea839dfaf691a608a"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTgxNjg4OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNToxNDo1NlrOGVMUYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNToxNDo1NlrOGVMUYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg3NTEwNQ==", "bodyText": "you can remove the type information from this map\nalso my original point here was we could map the mediaList and avoid the overly verbose loop eg\nmediaList.map { Contribution(it, Contribution.STATE_COMPLETED) }\n\nand the OnNext action in the subscribe can become a method reference\n.subscribe(\n   ::saveContributionsToDb,", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r424875105", "createdAt": "2020-05-14T05:14:56Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.kt", "diffHunk": "@@ -0,0 +1,90 @@\n+package fr.free.nrw.commons.contributions\n+\n+import androidx.paging.PagedList.BoundaryCallback\n+import fr.free.nrw.commons.Media\n+import fr.free.nrw.commons.auth.SessionManager\n+import fr.free.nrw.commons.di.CommonsApplicationModule\n+import fr.free.nrw.commons.media.MediaClient\n+import io.reactivex.Scheduler\n+import io.reactivex.disposables.CompositeDisposable\n+import timber.log.Timber\n+import java.util.*\n+import javax.inject.Inject\n+import javax.inject.Named\n+\n+/**\n+ * Class that extends PagedList.BoundaryCallback for contributions list It defines the action that\n+ * is triggered for various boundary conditions in the list\n+ */\n+class ContributionBoundaryCallback @Inject constructor(\n+    private val repository: ContributionsRepository,\n+    private val sessionManager: SessionManager,\n+    private val mediaClient: MediaClient,\n+    @param:Named(CommonsApplicationModule.IO_THREAD) private val ioThreadScheduler: Scheduler\n+) : BoundaryCallback<Contribution>() {\n+    private val compositeDisposable: CompositeDisposable = CompositeDisposable()\n+\n+    /**\n+     * It is triggered when the list has no items User's Contributions are then fetched from the\n+     * network\n+     */\n+    override fun onZeroItemsLoaded() {\n+        fetchContributions()\n+    }\n+\n+    /**\n+     * It is triggered when the user scrolls to the top of the list No action is taken at this point\n+     */\n+    override fun onItemAtFrontLoaded(itemAtFront: Contribution) {}\n+\n+    /**\n+     * It is triggered when the user scrolls to the end of the list User's Contributions are then\n+     * fetched from the network\n+     */\n+    override fun onItemAtEndLoaded(itemAtEnd: Contribution) {\n+        fetchContributions()\n+    }\n+\n+    /**\n+     * Fetches contributions using the MediaWiki API\n+     */\n+    fun fetchContributions() {\n+        compositeDisposable.add(\n+            mediaClient.getMediaListForUser(sessionManager.userName)\n+                .map<List<Contribution>> { mediaList: List<Media?> ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d23115b9c648d937d7ec1b6011939127d35068cb"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTI4OTg3OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMjowMDo0NVrOGYIJIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMjowMDo0NVrOGYIJIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk1MjQxOA==", "bodyText": "this comment is no longer true", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r427952418", "createdAt": "2020-05-20T12:00:45Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.kt", "diffHunk": "@@ -0,0 +1,85 @@\n+package fr.free.nrw.commons.contributions\n+\n+import androidx.paging.PagedList.BoundaryCallback\n+import fr.free.nrw.commons.Media\n+import fr.free.nrw.commons.auth.SessionManager\n+import fr.free.nrw.commons.di.CommonsApplicationModule\n+import fr.free.nrw.commons.media.MediaClient\n+import io.reactivex.Scheduler\n+import io.reactivex.disposables.CompositeDisposable\n+import timber.log.Timber\n+import java.util.*\n+import javax.inject.Inject\n+import javax.inject.Named\n+\n+/**\n+ * Class that extends PagedList.BoundaryCallback for contributions list It defines the action that\n+ * is triggered for various boundary conditions in the list\n+ */\n+class ContributionBoundaryCallback @Inject constructor(\n+    private val repository: ContributionsRepository,\n+    private val sessionManager: SessionManager,\n+    private val mediaClient: MediaClient,\n+    @param:Named(CommonsApplicationModule.IO_THREAD) private val ioThreadScheduler: Scheduler\n+) : BoundaryCallback<Contribution>() {\n+    private val compositeDisposable: CompositeDisposable = CompositeDisposable()\n+\n+    /**\n+     * It is triggered when the list has no items User's Contributions are then fetched from the\n+     * network\n+     */\n+    override fun onZeroItemsLoaded() {\n+        fetchContributions()\n+    }\n+\n+    /**\n+     * It is triggered when the user scrolls to the top of the list No action is taken at this point", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "193ed2a2e1bbbd75c4f280881b1b8124c7a0a5ed"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTMwNTczOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMjowNTo1NFrOGYITXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjowODoyNFrOGYTNCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk1NTAzNg==", "bodyText": "do we need this method when we have getItem ?", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r427955036", "createdAt": "2020-05-20T12:05:54Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java", "diffHunk": "@@ -1,68 +1,71 @@\n package fr.free.nrw.commons.contributions;\n \n-import android.text.TextUtils;\n import android.view.LayoutInflater;\n import android.view.ViewGroup;\n import androidx.annotation.NonNull;\n-import androidx.recyclerview.widget.RecyclerView;\n+import androidx.paging.PagedListAdapter;\n+import androidx.recyclerview.widget.DiffUtil;\n import fr.free.nrw.commons.R;\n import fr.free.nrw.commons.media.MediaClient;\n-import java.util.ArrayList;\n-import java.util.List;\n \n /**\n- * Represents The View Adapter for the List of Contributions  \n+ * Represents The View Adapter for the List of Contributions\n  */\n-public class ContributionsListAdapter extends RecyclerView.Adapter<ContributionViewHolder> {\n+public class ContributionsListAdapter extends\n+    PagedListAdapter<Contribution, ContributionViewHolder> {\n \n-    private Callback callback;\n+    private final Callback callback;\n     private final MediaClient mediaClient;\n-    private List<Contribution> contributions;\n \n-    public ContributionsListAdapter(Callback callback,\n-        MediaClient mediaClient) {\n+    ContributionsListAdapter(final Callback callback,\n+        final MediaClient mediaClient) {\n+        super(DIFF_CALLBACK);\n         this.callback = callback;\n         this.mediaClient = mediaClient;\n-        contributions = new ArrayList<>();\n     }\n \n     /**\n-     * Creates the new View Holder which will be used to display items(contributions)\n-     * using the onBindViewHolder(viewHolder,position) \n+     * Uses DiffUtil to calculate the changes in the list\n+     * It has methods that check ID and the content of the items to determine if its a new item\n      */\n-    @NonNull\n-    @Override\n-    public ContributionViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n-        ContributionViewHolder viewHolder = new ContributionViewHolder(\n-                LayoutInflater.from(parent.getContext())\n-                        .inflate(R.layout.layout_contribution, parent, false), callback, mediaClient);\n-        return viewHolder;\n-    }\n+    private static final DiffUtil.ItemCallback<Contribution> DIFF_CALLBACK =\n+        new DiffUtil.ItemCallback<Contribution>() {\n+            @Override\n+            public boolean areItemsTheSame(final Contribution oldContribution, final Contribution newContribution) {\n+                return oldContribution.getPageId().equals(newContribution.getPageId());\n+            }\n+\n+            @Override\n+            public boolean areContentsTheSame(final Contribution oldContribution, final Contribution newContribution) {\n+                return oldContribution.equals(newContribution);\n+            }\n+        };\n \n+    /**\n+     * Initializes the view holder with contribution data\n+     */\n     @Override\n-    public void onBindViewHolder(@NonNull ContributionViewHolder holder, int position) {\n-        final Contribution contribution = contributions.get(position);\n-        if (TextUtils.isEmpty(contribution.getThumbUrl())\n-            && contribution.getState() == Contribution.STATE_COMPLETED) {\n-            callback.fetchMediaUriFor(contribution);\n-        }\n-\n+    public void onBindViewHolder(@NonNull final ContributionViewHolder holder, final int position) {\n+        final Contribution contribution = getItem(position);\n         holder.init(position, contribution);\n     }\n \n-    @Override\n-    public int getItemCount() {\n-        return contributions.size();\n-    }\n-\n-    public void setContributions(@NonNull List<Contribution> contributionList) {\n-        contributions = contributionList;\n-        notifyDataSetChanged();\n+    Contribution getContributionForPosition(final int position) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "193ed2a2e1bbbd75c4f280881b1b8124c7a0a5ed"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExNzQ4MA==", "bodyText": "getItem is protected. We are using getContributionForPosition outside the adapter class.", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r428117480", "createdAt": "2020-05-20T15:45:23Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java", "diffHunk": "@@ -1,68 +1,71 @@\n package fr.free.nrw.commons.contributions;\n \n-import android.text.TextUtils;\n import android.view.LayoutInflater;\n import android.view.ViewGroup;\n import androidx.annotation.NonNull;\n-import androidx.recyclerview.widget.RecyclerView;\n+import androidx.paging.PagedListAdapter;\n+import androidx.recyclerview.widget.DiffUtil;\n import fr.free.nrw.commons.R;\n import fr.free.nrw.commons.media.MediaClient;\n-import java.util.ArrayList;\n-import java.util.List;\n \n /**\n- * Represents The View Adapter for the List of Contributions  \n+ * Represents The View Adapter for the List of Contributions\n  */\n-public class ContributionsListAdapter extends RecyclerView.Adapter<ContributionViewHolder> {\n+public class ContributionsListAdapter extends\n+    PagedListAdapter<Contribution, ContributionViewHolder> {\n \n-    private Callback callback;\n+    private final Callback callback;\n     private final MediaClient mediaClient;\n-    private List<Contribution> contributions;\n \n-    public ContributionsListAdapter(Callback callback,\n-        MediaClient mediaClient) {\n+    ContributionsListAdapter(final Callback callback,\n+        final MediaClient mediaClient) {\n+        super(DIFF_CALLBACK);\n         this.callback = callback;\n         this.mediaClient = mediaClient;\n-        contributions = new ArrayList<>();\n     }\n \n     /**\n-     * Creates the new View Holder which will be used to display items(contributions)\n-     * using the onBindViewHolder(viewHolder,position) \n+     * Uses DiffUtil to calculate the changes in the list\n+     * It has methods that check ID and the content of the items to determine if its a new item\n      */\n-    @NonNull\n-    @Override\n-    public ContributionViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n-        ContributionViewHolder viewHolder = new ContributionViewHolder(\n-                LayoutInflater.from(parent.getContext())\n-                        .inflate(R.layout.layout_contribution, parent, false), callback, mediaClient);\n-        return viewHolder;\n-    }\n+    private static final DiffUtil.ItemCallback<Contribution> DIFF_CALLBACK =\n+        new DiffUtil.ItemCallback<Contribution>() {\n+            @Override\n+            public boolean areItemsTheSame(final Contribution oldContribution, final Contribution newContribution) {\n+                return oldContribution.getPageId().equals(newContribution.getPageId());\n+            }\n+\n+            @Override\n+            public boolean areContentsTheSame(final Contribution oldContribution, final Contribution newContribution) {\n+                return oldContribution.equals(newContribution);\n+            }\n+        };\n \n+    /**\n+     * Initializes the view holder with contribution data\n+     */\n     @Override\n-    public void onBindViewHolder(@NonNull ContributionViewHolder holder, int position) {\n-        final Contribution contribution = contributions.get(position);\n-        if (TextUtils.isEmpty(contribution.getThumbUrl())\n-            && contribution.getState() == Contribution.STATE_COMPLETED) {\n-            callback.fetchMediaUriFor(contribution);\n-        }\n-\n+    public void onBindViewHolder(@NonNull final ContributionViewHolder holder, final int position) {\n+        final Contribution contribution = getItem(position);\n         holder.init(position, contribution);\n     }\n \n-    @Override\n-    public int getItemCount() {\n-        return contributions.size();\n-    }\n-\n-    public void setContributions(@NonNull List<Contribution> contributionList) {\n-        contributions = contributionList;\n-        notifyDataSetChanged();\n+    Contribution getContributionForPosition(final int position) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk1NTAzNg=="}, "originalCommit": {"oid": "193ed2a2e1bbbd75c4f280881b1b8124c7a0a5ed"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEzMzY0MQ==", "bodyText": "yup, my mistake", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r428133641", "createdAt": "2020-05-20T16:08:24Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java", "diffHunk": "@@ -1,68 +1,71 @@\n package fr.free.nrw.commons.contributions;\n \n-import android.text.TextUtils;\n import android.view.LayoutInflater;\n import android.view.ViewGroup;\n import androidx.annotation.NonNull;\n-import androidx.recyclerview.widget.RecyclerView;\n+import androidx.paging.PagedListAdapter;\n+import androidx.recyclerview.widget.DiffUtil;\n import fr.free.nrw.commons.R;\n import fr.free.nrw.commons.media.MediaClient;\n-import java.util.ArrayList;\n-import java.util.List;\n \n /**\n- * Represents The View Adapter for the List of Contributions  \n+ * Represents The View Adapter for the List of Contributions\n  */\n-public class ContributionsListAdapter extends RecyclerView.Adapter<ContributionViewHolder> {\n+public class ContributionsListAdapter extends\n+    PagedListAdapter<Contribution, ContributionViewHolder> {\n \n-    private Callback callback;\n+    private final Callback callback;\n     private final MediaClient mediaClient;\n-    private List<Contribution> contributions;\n \n-    public ContributionsListAdapter(Callback callback,\n-        MediaClient mediaClient) {\n+    ContributionsListAdapter(final Callback callback,\n+        final MediaClient mediaClient) {\n+        super(DIFF_CALLBACK);\n         this.callback = callback;\n         this.mediaClient = mediaClient;\n-        contributions = new ArrayList<>();\n     }\n \n     /**\n-     * Creates the new View Holder which will be used to display items(contributions)\n-     * using the onBindViewHolder(viewHolder,position) \n+     * Uses DiffUtil to calculate the changes in the list\n+     * It has methods that check ID and the content of the items to determine if its a new item\n      */\n-    @NonNull\n-    @Override\n-    public ContributionViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n-        ContributionViewHolder viewHolder = new ContributionViewHolder(\n-                LayoutInflater.from(parent.getContext())\n-                        .inflate(R.layout.layout_contribution, parent, false), callback, mediaClient);\n-        return viewHolder;\n-    }\n+    private static final DiffUtil.ItemCallback<Contribution> DIFF_CALLBACK =\n+        new DiffUtil.ItemCallback<Contribution>() {\n+            @Override\n+            public boolean areItemsTheSame(final Contribution oldContribution, final Contribution newContribution) {\n+                return oldContribution.getPageId().equals(newContribution.getPageId());\n+            }\n+\n+            @Override\n+            public boolean areContentsTheSame(final Contribution oldContribution, final Contribution newContribution) {\n+                return oldContribution.equals(newContribution);\n+            }\n+        };\n \n+    /**\n+     * Initializes the view holder with contribution data\n+     */\n     @Override\n-    public void onBindViewHolder(@NonNull ContributionViewHolder holder, int position) {\n-        final Contribution contribution = contributions.get(position);\n-        if (TextUtils.isEmpty(contribution.getThumbUrl())\n-            && contribution.getState() == Contribution.STATE_COMPLETED) {\n-            callback.fetchMediaUriFor(contribution);\n-        }\n-\n+    public void onBindViewHolder(@NonNull final ContributionViewHolder holder, final int position) {\n+        final Contribution contribution = getItem(position);\n         holder.init(position, contribution);\n     }\n \n-    @Override\n-    public int getItemCount() {\n-        return contributions.size();\n-    }\n-\n-    public void setContributions(@NonNull List<Contribution> contributionList) {\n-        contributions = contributionList;\n-        notifyDataSetChanged();\n+    Contribution getContributionForPosition(final int position) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk1NTAzNg=="}, "originalCommit": {"oid": "193ed2a2e1bbbd75c4f280881b1b8124c7a0a5ed"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTMyMzA3OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/contributions/NetworkState.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMjoxMTowN1rOGYId_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMjoxMTowN1rOGYId_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk1Nzc1OQ==", "bodyText": "never used", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r427957759", "createdAt": "2020-05-20T12:11:07Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/NetworkState.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package fr.free.nrw.commons.contributions;\n+\n+/**\n+ * Enum that defines the different states for contribution paged list's boundary callback\n+ */\n+enum NetworkState {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "193ed2a2e1bbbd75c4f280881b1b8124c7a0a5ed"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODcyNzY2OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/media/MediaClient.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzo1OToxMVrOGYpzrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTo1NDo1N1rOGZRfWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMzk4MQ==", "bodyText": "if null couldn't we just remove the key and then it all works as usual without the extra map", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r428503981", "createdAt": "2020-05-21T07:59:11Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/media/MediaClient.java", "diffHunk": "@@ -123,7 +140,12 @@ public MediaClient(MediaInterface mediaInterface, MediaDetailInterface mediaDeta\n                     || null == mwQueryResponse.query().pages()) {\n                 return Observable.empty();\n             }\n-            continuationStore.put(key, mwQueryResponse.continuation());\n+            if(mwQueryResponse.continuation() != null) {\n+                continuationStore.put(key, mwQueryResponse.continuation());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ca466283a562301d7d06ae5c82fc85cb2824145"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU3OTcxMQ==", "bodyText": "If we remove the key then it would be like fetching the first page. The API call would be made without the continuation params.", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r428579711", "createdAt": "2020-05-21T10:47:58Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/media/MediaClient.java", "diffHunk": "@@ -123,7 +140,12 @@ public MediaClient(MediaInterface mediaInterface, MediaDetailInterface mediaDeta\n                     || null == mwQueryResponse.query().pages()) {\n                 return Observable.empty();\n             }\n-            continuationStore.put(key, mwQueryResponse.continuation());\n+            if(mwQueryResponse.continuation() != null) {\n+                continuationStore.put(key, mwQueryResponse.continuation());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMzk4MQ=="}, "originalCommit": {"oid": "9ca466283a562301d7d06ae5c82fc85cb2824145"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU4NjY1Mg==", "bodyText": "And then the Db update would return the same data, not retriggering a boundaryCallback as the list would be unchanged, I think.\nThough I guess now the api is set up with a continuation... I am quite unsure of how to proceed", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r428586652", "createdAt": "2020-05-21T11:04:59Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/media/MediaClient.java", "diffHunk": "@@ -123,7 +140,12 @@ public MediaClient(MediaInterface mediaInterface, MediaDetailInterface mediaDeta\n                     || null == mwQueryResponse.query().pages()) {\n                 return Observable.empty();\n             }\n-            continuationStore.put(key, mwQueryResponse.continuation());\n+            if(mwQueryResponse.continuation() != null) {\n+                continuationStore.put(key, mwQueryResponse.continuation());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMzk4MQ=="}, "originalCommit": {"oid": "9ca466283a562301d7d06ae5c82fc85cb2824145"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU5MzEwMw==", "bodyText": "and the continuation map is never assigned but I am sure you are on that", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r428593103", "createdAt": "2020-05-21T11:20:42Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/media/MediaClient.java", "diffHunk": "@@ -123,7 +140,12 @@ public MediaClient(MediaInterface mediaInterface, MediaDetailInterface mediaDeta\n                     || null == mwQueryResponse.query().pages()) {\n                 return Observable.empty();\n             }\n-            continuationStore.put(key, mwQueryResponse.continuation());\n+            if(mwQueryResponse.continuation() != null) {\n+                continuationStore.put(key, mwQueryResponse.continuation());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMzk4MQ=="}, "originalCommit": {"oid": "9ca466283a562301d7d06ae5c82fc85cb2824145"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgyOTk4OQ==", "bodyText": "Though I guess now the api is set up with a continuation... I am quite unsure of how to proceed\n\nYeah, right. As the API is set up with a continuation it will start fetching all the pages again. On a related note, the current logic of fetching pages(that I added in this PR) is very naive and can be improved. For now, i wanted to keep things simple.\n\nand the continuation map is never assigned but I am sure you are on that\n\nI didn't understand this comment.", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r428829989", "createdAt": "2020-05-21T18:19:36Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/media/MediaClient.java", "diffHunk": "@@ -123,7 +140,12 @@ public MediaClient(MediaInterface mediaInterface, MediaDetailInterface mediaDeta\n                     || null == mwQueryResponse.query().pages()) {\n                 return Observable.empty();\n             }\n-            continuationStore.put(key, mwQueryResponse.continuation());\n+            if(mwQueryResponse.continuation() != null) {\n+                continuationStore.put(key, mwQueryResponse.continuation());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMzk4MQ=="}, "originalCommit": {"oid": "9ca466283a562301d7d06ae5c82fc85cb2824145"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyMTc0Nw==", "bodyText": "I should have said continuationExists map but it is resolved now.\nThis is a bit \"upending the teatable\" but it seems to me that this endpoint shouldn't use continuation at all, we could happily query using\n\nbut perhaps that is best suited for another ticket", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r429121747", "createdAt": "2020-05-22T08:46:05Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/media/MediaClient.java", "diffHunk": "@@ -123,7 +140,12 @@ public MediaClient(MediaInterface mediaInterface, MediaDetailInterface mediaDeta\n                     || null == mwQueryResponse.query().pages()) {\n                 return Observable.empty();\n             }\n-            continuationStore.put(key, mwQueryResponse.continuation());\n+            if(mwQueryResponse.continuation() != null) {\n+                continuationStore.put(key, mwQueryResponse.continuation());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMzk4MQ=="}, "originalCommit": {"oid": "9ca466283a562301d7d06ae5c82fc85cb2824145"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE0NjgxMw==", "bodyText": "Yeah we can use aistart and aiend parameter to fetch contributions based on timestamp but I don't think that can replace continuation. With start and end timestamp, there's no way to be sure how many contributions would be returned. For eg. recently I uploaded around 2000 images in a day. The API would then return all images in one call. It would defeat the purpose of pagination.\nTo limit it to 10 images per call we will have to use ailimit and then continuation will still come into picture.", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r429146813", "createdAt": "2020-05-22T09:39:03Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/media/MediaClient.java", "diffHunk": "@@ -123,7 +140,12 @@ public MediaClient(MediaInterface mediaInterface, MediaDetailInterface mediaDeta\n                     || null == mwQueryResponse.query().pages()) {\n                 return Observable.empty();\n             }\n-            continuationStore.put(key, mwQueryResponse.continuation());\n+            if(mwQueryResponse.continuation() != null) {\n+                continuationStore.put(key, mwQueryResponse.continuation());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMzk4MQ=="}, "originalCommit": {"oid": "9ca466283a562301d7d06ae5c82fc85cb2824145"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE0Nzc0OA==", "bodyText": "@macgills Is everything working in this PR now? It would be great if you could do another test.", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r429147748", "createdAt": "2020-05-22T09:41:08Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/media/MediaClient.java", "diffHunk": "@@ -123,7 +140,12 @@ public MediaClient(MediaInterface mediaInterface, MediaDetailInterface mediaDeta\n                     || null == mwQueryResponse.query().pages()) {\n                 return Observable.empty();\n             }\n-            continuationStore.put(key, mwQueryResponse.continuation());\n+            if(mwQueryResponse.continuation() != null) {\n+                continuationStore.put(key, mwQueryResponse.continuation());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMzk4MQ=="}, "originalCommit": {"oid": "9ca466283a562301d7d06ae5c82fc85cb2824145"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1NDEzOQ==", "bodyText": "It is a little trickier granted but if at top of list we request media since now and reorder it so it is oldest first it hoovers along nicely.\nBottom of the list request since last item timestamp + newest first.\nAgain perhaps a discussion for another ticket. I will get to testing shortly", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r429154139", "createdAt": "2020-05-22T09:54:57Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/media/MediaClient.java", "diffHunk": "@@ -123,7 +140,12 @@ public MediaClient(MediaInterface mediaInterface, MediaDetailInterface mediaDeta\n                     || null == mwQueryResponse.query().pages()) {\n                 return Observable.empty();\n             }\n-            continuationStore.put(key, mwQueryResponse.continuation());\n+            if(mwQueryResponse.continuation() != null) {\n+                continuationStore.put(key, mwQueryResponse.continuation());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMzk4MQ=="}, "originalCommit": {"oid": "9ca466283a562301d7d06ae5c82fc85cb2824145"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDE0ODMyOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListPresenter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwOTozOTo0OFrOGaWiGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwOTozOTo0OFrOGaWiGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI4NTMzNg==", "bodyText": "Completeable.fromAction may be more idiomatic", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r430285336", "createdAt": "2020-05-26T09:39:48Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListPresenter.java", "diffHunk": "@@ -62,9 +62,7 @@ public void onDetachView() {\n    */\n   @Override\n   public void deleteUpload(final Contribution contribution) {\n-    compositeDisposable.add(repository.deleteContributionFromDB(contribution)\n-        .subscribeOn(ioThreadScheduler)\n-        .subscribe());\n+    ioThreadScheduler.scheduleDirect(() -> repository.deleteContributionFromDB(contribution));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4dfc1d8588ecaa5ea02cdfc4f517e5d5ddf2dd7"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDE2Njk1OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/upload/UploadService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODoxMzo0NlrOGa-QpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODoyODowM1rOGa-yOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzNjIyOA==", "bodyText": "this won't work, saveAndDelete is a completable.\nsubscribe is a terminal call, it receives the values from the particular stream it subscribes to but it cannot continue the stream.\nyou probably want to use .flatMapCompletable", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r430936228", "createdAt": "2020-05-27T08:13:46Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/upload/UploadService.java", "diffHunk": "@@ -297,7 +298,7 @@ private void onSuccessfulUpload(Contribution contribution, UploadResult uploadRe\n     private void saveCompletedContribution(Contribution contribution, UploadResult uploadResult) {\n         compositeDisposable.add(mediaClient.getMedia(\"File:\" + uploadResult.getFilename())\n         .map(media -> new Contribution(media, Contribution.STATE_COMPLETED))\n-        .subscribe(newContribution -> contributionDao.deleteAndSaveContribution(contribution, newContribution)));\n+        .subscribe(newContribution -> contributionDao.saveAndDelete(contribution, newContribution)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2898beecbc6b4921e058081fe2c67b41d7e44e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk0NDgyNw==", "bodyText": "Just updated the PR.", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r430944827", "createdAt": "2020-05-27T08:28:03Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/upload/UploadService.java", "diffHunk": "@@ -297,7 +298,7 @@ private void onSuccessfulUpload(Contribution contribution, UploadResult uploadRe\n     private void saveCompletedContribution(Contribution contribution, UploadResult uploadResult) {\n         compositeDisposable.add(mediaClient.getMedia(\"File:\" + uploadResult.getFilename())\n         .map(media -> new Contribution(media, Contribution.STATE_COMPLETED))\n-        .subscribe(newContribution -> contributionDao.deleteAndSaveContribution(contribution, newContribution)));\n+        .subscribe(newContribution -> contributionDao.saveAndDelete(contribution, newContribution)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzNjIyOA=="}, "originalCommit": {"oid": "ac2898beecbc6b4921e058081fe2c67b41d7e44e"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDIwMDg3OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionDao.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODoyMzowNFrOGa-mDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODoyMzowNFrOGa-mDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk0MTcxMQ==", "bodyText": "synchronous", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r430941711", "createdAt": "2020-05-27T08:23:04Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionDao.java", "diffHunk": "@@ -20,20 +22,36 @@\n   abstract DataSource.Factory<Integer, Contribution> fetchContributions();\n \n   @Insert(onConflict = OnConflictStrategy.REPLACE)\n-  public abstract void save(Contribution contribution);\n+  public abstract void saveSyncronous(Contribution contribution);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2898beecbc6b4921e058081fe2c67b41d7e44e"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4233, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}