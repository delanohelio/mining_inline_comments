{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNDc5NzEy", "number": 3553, "reviewThreads": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMToxNzoxNFrODqHukg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwNTozMDozNlrODqIU0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDkzMzk0OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/MediaDataExtractor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMToxNzoxNFrOF5soCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwNToxNTo1M1rOF5tT_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NDI5OQ==", "bodyText": "Avoid magic numbers. Define these as constants.", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396044299", "createdAt": "2020-03-22T01:17:14Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/MediaDataExtractor.java", "diffHunk": "@@ -26,23 +34,83 @@ public MediaDataExtractor(MediaClient mediaClient) {\n \n     /**\n      * Simplified method to extract all details required to show media details.\n-     * It fetches media object, deletion status and talk page for the filename\n+     * It fetches media object, deletion status, talk page and captions for the filename\n      * @param filename for which the details are to be fetched\n      * @return full Media object with all details including deletion status and talk page\n      */\n-    public Single<Media> fetchMediaDetails(String filename) {\n+    public Single<Media> fetchMediaDetails(String filename, String pageId) {\n         Single<Media> mediaSingle = getMediaFromFileName(filename);\n         Single<Boolean> pageExistsSingle = mediaClient.checkPageExistsUsingTitle(\"Commons:Deletion_requests/\" + filename);\n         Single<String> discussionSingle = getDiscussion(filename);\n-        return Single.zip(mediaSingle, pageExistsSingle, discussionSingle, (media, deletionStatus, discussion) -> {\n+        Single<String> captionSingle = getCaption(\"M\"+pageId);\n+        Single<JsonObject> depictionSingle = getDepictions(filename);\n+        return Single.zip(mediaSingle, pageExistsSingle, discussionSingle, captionSingle, depictionSingle, (media, deletionStatus, discussion, caption, depiction) -> {\n             media.setDiscussion(discussion);\n+            media.setCaption(caption);\n+            media.setDepiction(formatDepictions(depiction));\n             if (deletionStatus) {\n                 media.setRequestedDeletion();\n             }\n             return media;\n         });\n     }\n \n+    /**\n+     * Obtains captions using filename\n+     * @param wikibaseIdentifier\n+     *\n+     * @return caption for the image in user's locale\n+     * Ex: \"a nice painting\" (english locale) and \"No Caption\" in case the caption is not available for the image\n+     */\n+    private Single<String> getCaption(String wikibaseIdentifier) {\n+        return mediaClient.getCaptionByWikibaseIdentifier(wikibaseIdentifier);\n+    }\n+\n+    /**\n+     * From the Json Object extract depictions into an array list\n+     * @param mediaResponse\n+     * @return List containing map for depictions, the map has two keys,\n+     *  first key is for the label and second is for the url of the item\n+     */\n+    private ArrayList<Map<String, String>> formatDepictions(JsonObject mediaResponse) {\n+        try {\n+            JsonArray depictionArray = (JsonArray) mediaResponse.get(\"Depiction\");\n+            ArrayList<Map<String, String>> depictedItemList = new ArrayList<>();\n+            try {\n+                for (int i = 0; i <depictionArray.size() ; i++) {\n+                    JsonObject depictedItem = (JsonObject) depictionArray.get(i);\n+                    Map <String, String> depictedObject = new HashMap<>();\n+                    String label = depictedItem.get(\"label\").toString();\n+                    String id =  depictedItem.get(\"id\").toString();\n+                    String transformedLabel = label.substring(3, label.length()-3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA1NTU1MA==", "bodyText": "Do we need two nested try catch?", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396055550", "createdAt": "2020-03-22T05:15:53Z", "author": {"login": "ashishkumar468"}, "path": "app/src/main/java/fr/free/nrw/commons/MediaDataExtractor.java", "diffHunk": "@@ -26,23 +34,83 @@ public MediaDataExtractor(MediaClient mediaClient) {\n \n     /**\n      * Simplified method to extract all details required to show media details.\n-     * It fetches media object, deletion status and talk page for the filename\n+     * It fetches media object, deletion status, talk page and captions for the filename\n      * @param filename for which the details are to be fetched\n      * @return full Media object with all details including deletion status and talk page\n      */\n-    public Single<Media> fetchMediaDetails(String filename) {\n+    public Single<Media> fetchMediaDetails(String filename, String pageId) {\n         Single<Media> mediaSingle = getMediaFromFileName(filename);\n         Single<Boolean> pageExistsSingle = mediaClient.checkPageExistsUsingTitle(\"Commons:Deletion_requests/\" + filename);\n         Single<String> discussionSingle = getDiscussion(filename);\n-        return Single.zip(mediaSingle, pageExistsSingle, discussionSingle, (media, deletionStatus, discussion) -> {\n+        Single<String> captionSingle = getCaption(\"M\"+pageId);\n+        Single<JsonObject> depictionSingle = getDepictions(filename);\n+        return Single.zip(mediaSingle, pageExistsSingle, discussionSingle, captionSingle, depictionSingle, (media, deletionStatus, discussion, caption, depiction) -> {\n             media.setDiscussion(discussion);\n+            media.setCaption(caption);\n+            media.setDepiction(formatDepictions(depiction));\n             if (deletionStatus) {\n                 media.setRequestedDeletion();\n             }\n             return media;\n         });\n     }\n \n+    /**\n+     * Obtains captions using filename\n+     * @param wikibaseIdentifier\n+     *\n+     * @return caption for the image in user's locale\n+     * Ex: \"a nice painting\" (english locale) and \"No Caption\" in case the caption is not available for the image\n+     */\n+    private Single<String> getCaption(String wikibaseIdentifier) {\n+        return mediaClient.getCaptionByWikibaseIdentifier(wikibaseIdentifier);\n+    }\n+\n+    /**\n+     * From the Json Object extract depictions into an array list\n+     * @param mediaResponse\n+     * @return List containing map for depictions, the map has two keys,\n+     *  first key is for the label and second is for the url of the item\n+     */\n+    private ArrayList<Map<String, String>> formatDepictions(JsonObject mediaResponse) {\n+        try {\n+            JsonArray depictionArray = (JsonArray) mediaResponse.get(\"Depiction\");\n+            ArrayList<Map<String, String>> depictedItemList = new ArrayList<>();\n+            try {\n+                for (int i = 0; i <depictionArray.size() ; i++) {\n+                    JsonObject depictedItem = (JsonObject) depictionArray.get(i);\n+                    Map <String, String> depictedObject = new HashMap<>();\n+                    String label = depictedItem.get(\"label\").toString();\n+                    String id =  depictedItem.get(\"id\").toString();\n+                    String transformedLabel = label.substring(3, label.length()-3);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NDI5OQ=="}, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDkzNTA3OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/db/Converters.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMToxOTo0MFrOF5soiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMToxOTo0MFrOF5soiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NDQyNQ==", "bodyText": "Please add java docs", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396044425", "createdAt": "2020-03-22T01:19:40Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/db/Converters.java", "diffHunk": "@@ -73,4 +68,24 @@ public static LatLng stringToLatLng(String objectList) {\n         return objectList == null ? null : getGson().fromJson(objectList,LatLng.class);\n     }\n \n+    @TypeConverter\n+    public static String listOfMapToString(ArrayList<Map<String,String>> listOfMaps) {\n+        return listOfMaps == null ? null : getGson().toJson(listOfMaps);\n+    }\n+\n+    @TypeConverter\n+    public static ArrayList<Map<String,String>> stringToListOfMap(String listOfMaps) {\n+        return listOfMaps == null ? null :getGson().fromJson(listOfMaps,new TypeToken<ArrayList<Map<String,String>>>(){}.getType());\n+    }\n+\n+    @TypeConverter\n+    public static String mapToString(Map<String,String> map) {\n+        return map == null ? null : getGson().toJson(map);\n+    }\n+\n+    @TypeConverter\n+    public static Map<String,String> stringToMap(String map) {\n+        return map == null ? null :getGson().fromJson(map,new TypeToken<Map<String,String>>(){}.getType());\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDkzNTU5OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/depictions/Media/DepictedImagesFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMToyMTowNlrOF5soyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMToyMTowNlrOF5soyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NDQ5MQ==", "bodyText": "The prefix M is used at several places. It could be extracted out as a constant.", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396044491", "createdAt": "2020-03-22T01:21:06Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/Media/DepictedImagesFragment.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package fr.free.nrw.commons.depictions.Media;\n+\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.AbsListView;\n+import android.widget.AdapterView;\n+import android.widget.GridView;\n+import android.widget.ListAdapter;\n+import android.widget.ProgressBar;\n+import android.widget.RelativeLayout;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import butterknife.BindView;\n+import butterknife.ButterKnife;\n+import dagger.android.support.DaggerFragment;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.R;\n+import fr.free.nrw.commons.depictions.WikidataItemDetailsActivity;\n+import fr.free.nrw.commons.depictions.GridViewAdapter;\n+import fr.free.nrw.commons.utils.NetworkUtils;\n+import fr.free.nrw.commons.utils.ViewUtil;\n+\n+import static android.view.View.GONE;\n+import static android.view.View.VISIBLE;\n+\n+/**\n+ * Fragment for showing image list after selected an item from SearchActivity In Explore\n+ */\n+public class DepictedImagesFragment extends DaggerFragment implements DepictedImagesContract.View {\n+\n+\n+    @BindView(R.id.statusMessage)\n+    TextView statusTextView;\n+    @BindView(R.id.loadingImagesProgressBar)\n+    ProgressBar progressBar;\n+    @BindView(R.id.depicts_image_list)\n+    GridView gridView;\n+    @BindView(R.id.parentLayout)\n+    RelativeLayout parentLayout;\n+    @Inject\n+    DepictedImagesPresenter presenter;\n+    private GridViewAdapter gridAdapter;\n+    private String entityId = null;\n+    private boolean isLastPage;\n+    private boolean isLoading = true;\n+    private int mediaSize = 0;\n+\n+    @Nullable\n+    @Override\n+    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n+        View v = inflater.inflate(R.layout.fragment_depict_image, container, false);\n+        ButterKnife.bind(this, v);\n+        presenter.onAttachView(this);\n+        return v;\n+    }\n+\n+    @Override\n+    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n+        super.onViewCreated(view, savedInstanceState);\n+        gridView.setOnItemClickListener((AdapterView.OnItemClickListener) getActivity());\n+        initViews();\n+    }\n+\n+    /**\n+     * Initializes the UI elements for the fragment\n+     * Setup the grid view to and scroll listener for it\n+     */\n+    private void initViews() {\n+        String depictsName = getArguments().getString(\"wikidataItemName\");\n+        entityId = getArguments().getString(\"entityId\");\n+        if (getArguments() != null && depictsName != null) {\n+            initList();\n+            setScrollListener();\n+        }\n+    }\n+\n+    private void initList() {\n+        presenter.initList(entityId);\n+        if (!NetworkUtils.isInternetConnectionEstablished(getContext())) {\n+            handleNoInternet();\n+        } else presenter.initList(entityId);\n+    }\n+\n+    /**\n+     * Handles the UI updates for no internet scenario\n+     */\n+    @Override\n+    public void handleNoInternet() {\n+        progressBar.setVisibility(GONE);\n+        if (gridAdapter == null || gridAdapter.isEmpty()) {\n+            statusTextView.setVisibility(VISIBLE);\n+            statusTextView.setText(getString(R.string.no_internet));\n+        } else {\n+            ViewUtil.showShortSnackbar(parentLayout, R.string.no_internet);\n+        }\n+    }\n+\n+    /**\n+     * Handles the UI updates for a error scenario\n+     */\n+    @Override\n+    public void initErrorView() {\n+        progressBar.setVisibility(GONE);\n+        if (gridAdapter == null || gridAdapter.isEmpty()) {\n+            statusTextView.setVisibility(VISIBLE);\n+            statusTextView.setText(getString(R.string.no_images_found));\n+        } else {\n+            statusTextView.setVisibility(GONE);\n+        }\n+    }\n+\n+    /**\n+     * Sets the scroll listener for the grid view so that more images are fetched when the user scrolls down\n+     * Checks if the item has more images before loading\n+     * Also checks whether images are currently being fetched before triggering another request\n+     */\n+    private void setScrollListener() {\n+        gridView.setOnScrollListener(new AbsListView.OnScrollListener() {\n+            @Override\n+            public void onScrollStateChanged(AbsListView view, int scrollState) {\n+            }\n+\n+            @Override\n+            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {\n+                if (!isLastPage && !isLoading && (firstVisibleItem + visibleItemCount >= totalItemCount)) {\n+                    isLoading = true;\n+                    if (!NetworkUtils.isInternetConnectionEstablished(getContext())) {\n+                        handleNoInternet();\n+                    } else {\n+                        presenter.fetchMoreImages();\n+                    }\n+                }\n+                if (isLastPage) {\n+                    progressBar.setVisibility(GONE);\n+                }\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Seat caption to the image at the given position\n+     */\n+    @Override\n+    public void handleLabelforImage(String s, int position) {\n+        if (!s.trim().equals(getString(R.string.detail_caption_empty))) {\n+            gridAdapter.getItem(position).setThumbnailTitle(s);\n+            gridAdapter.notifyDataSetChanged();\n+        }\n+    }\n+\n+    /**\n+     * Display snackbar\n+     */\n+    @Override\n+    public void showSnackBar() {\n+        ViewUtil.showShortSnackbar(parentLayout, R.string.error_loading_images);\n+    }\n+\n+    /**\n+     * Set visibility of progressbar depending on the boolean value\n+     */\n+    @Override\n+    public void progressBarVisible(Boolean value) {\n+        if (value) {\n+            progressBar.setVisibility(VISIBLE);\n+        } else {\n+            progressBar.setVisibility(GONE);\n+        }\n+    }\n+\n+    /**\n+     * It return an instance of gridView adapter which helps in extracting media details\n+     * used by the gridView\n+     *\n+     * @return GridView Adapter\n+     */\n+    @Override\n+    public ListAdapter getAdapter() {\n+        return gridAdapter;\n+    }\n+\n+    /**\n+     * Initializes the adapter with a list of Media objects\n+     *\n+     * @param mediaList List of new Media to be displayed\n+     */\n+    @Override\n+    public void setAdapter(List<Media> mediaList) {\n+        gridAdapter = new fr.free.nrw.commons.depictions.GridViewAdapter(getContext(), R.layout.layout_depict_image, mediaList);\n+        gridView.setAdapter(gridAdapter);\n+    }\n+\n+    /**\n+     * adds list to adapter\n+     */\n+    @Override\n+    public void addItemsToAdapter(List<Media> media) {\n+        gridAdapter.addAll(media);\n+        gridAdapter.notifyDataSetChanged();\n+    }\n+\n+    /**\n+     * Sets loading status depending on the boolean value\n+     */\n+    @Override\n+    public void setLoadingStatus(Boolean value) {\n+        if (!value) {\n+            statusTextView.setVisibility(GONE);\n+        }\n+        isLoading = value;\n+    }\n+\n+    /**\n+     * Inform the view that there are no more items to be loaded for this search query\n+     * or reset the isLastPage for the current query\n+     * @param isLastPage\n+     */\n+    @Override\n+    public void setIsLastPage(boolean isLastPage) {\n+        this.isLastPage=isLastPage;\n+        progressBar.setVisibility(GONE);\n+    }\n+\n+\n+    /**\n+     * Handles the success scenario\n+     * On first load, it initializes the grid view. On subsequent loads, it adds items to the adapter\n+     *\n+     * @param collection List of new Media to be displayed\n+     */\n+    @Override\n+    public void handleSuccess(List<Media> collection) {\n+       presenter.addItemsToQueryList(collection);\n+        if (gridAdapter == null) {\n+            setAdapter(collection);\n+        } else {\n+            if (gridAdapter.containsAll(collection)) {\n+                return;\n+            }\n+            gridAdapter.addItems(collection);\n+\n+            try {\n+                ((WikidataItemDetailsActivity) getContext()).viewPagerNotifyDataSetChanged();\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+            }\n+        }\n+        progressBar.setVisibility(GONE);\n+        isLoading = false;\n+        statusTextView.setVisibility(GONE);\n+        for (Media m : collection) {\n+            presenter.replaceTitlesWithCaptions(\"M\"+m.getPageId(), mediaSize++);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 261}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDkzNTgzOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/depictions/Media/DepictedImagesFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMToyMjowMlrOF5so6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMToyMjowMlrOF5so6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NDUyMQ==", "bodyText": "Wrap in braces", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396044521", "createdAt": "2020-03-22T01:22:02Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/Media/DepictedImagesFragment.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package fr.free.nrw.commons.depictions.Media;\n+\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.AbsListView;\n+import android.widget.AdapterView;\n+import android.widget.GridView;\n+import android.widget.ListAdapter;\n+import android.widget.ProgressBar;\n+import android.widget.RelativeLayout;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import butterknife.BindView;\n+import butterknife.ButterKnife;\n+import dagger.android.support.DaggerFragment;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.R;\n+import fr.free.nrw.commons.depictions.WikidataItemDetailsActivity;\n+import fr.free.nrw.commons.depictions.GridViewAdapter;\n+import fr.free.nrw.commons.utils.NetworkUtils;\n+import fr.free.nrw.commons.utils.ViewUtil;\n+\n+import static android.view.View.GONE;\n+import static android.view.View.VISIBLE;\n+\n+/**\n+ * Fragment for showing image list after selected an item from SearchActivity In Explore\n+ */\n+public class DepictedImagesFragment extends DaggerFragment implements DepictedImagesContract.View {\n+\n+\n+    @BindView(R.id.statusMessage)\n+    TextView statusTextView;\n+    @BindView(R.id.loadingImagesProgressBar)\n+    ProgressBar progressBar;\n+    @BindView(R.id.depicts_image_list)\n+    GridView gridView;\n+    @BindView(R.id.parentLayout)\n+    RelativeLayout parentLayout;\n+    @Inject\n+    DepictedImagesPresenter presenter;\n+    private GridViewAdapter gridAdapter;\n+    private String entityId = null;\n+    private boolean isLastPage;\n+    private boolean isLoading = true;\n+    private int mediaSize = 0;\n+\n+    @Nullable\n+    @Override\n+    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n+        View v = inflater.inflate(R.layout.fragment_depict_image, container, false);\n+        ButterKnife.bind(this, v);\n+        presenter.onAttachView(this);\n+        return v;\n+    }\n+\n+    @Override\n+    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n+        super.onViewCreated(view, savedInstanceState);\n+        gridView.setOnItemClickListener((AdapterView.OnItemClickListener) getActivity());\n+        initViews();\n+    }\n+\n+    /**\n+     * Initializes the UI elements for the fragment\n+     * Setup the grid view to and scroll listener for it\n+     */\n+    private void initViews() {\n+        String depictsName = getArguments().getString(\"wikidataItemName\");\n+        entityId = getArguments().getString(\"entityId\");\n+        if (getArguments() != null && depictsName != null) {\n+            initList();\n+            setScrollListener();\n+        }\n+    }\n+\n+    private void initList() {\n+        presenter.initList(entityId);\n+        if (!NetworkUtils.isInternetConnectionEstablished(getContext())) {\n+            handleNoInternet();\n+        } else presenter.initList(entityId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDkzNjI1OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/depictions/Media/DepictedImagesFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMToyMjo0NlrOF5spGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMToyMjo0NlrOF5spGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NDU2OQ==", "bodyText": "Please use a meaningful variable name instead of s.", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396044569", "createdAt": "2020-03-22T01:22:46Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/Media/DepictedImagesFragment.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package fr.free.nrw.commons.depictions.Media;\n+\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.AbsListView;\n+import android.widget.AdapterView;\n+import android.widget.GridView;\n+import android.widget.ListAdapter;\n+import android.widget.ProgressBar;\n+import android.widget.RelativeLayout;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import butterknife.BindView;\n+import butterknife.ButterKnife;\n+import dagger.android.support.DaggerFragment;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.R;\n+import fr.free.nrw.commons.depictions.WikidataItemDetailsActivity;\n+import fr.free.nrw.commons.depictions.GridViewAdapter;\n+import fr.free.nrw.commons.utils.NetworkUtils;\n+import fr.free.nrw.commons.utils.ViewUtil;\n+\n+import static android.view.View.GONE;\n+import static android.view.View.VISIBLE;\n+\n+/**\n+ * Fragment for showing image list after selected an item from SearchActivity In Explore\n+ */\n+public class DepictedImagesFragment extends DaggerFragment implements DepictedImagesContract.View {\n+\n+\n+    @BindView(R.id.statusMessage)\n+    TextView statusTextView;\n+    @BindView(R.id.loadingImagesProgressBar)\n+    ProgressBar progressBar;\n+    @BindView(R.id.depicts_image_list)\n+    GridView gridView;\n+    @BindView(R.id.parentLayout)\n+    RelativeLayout parentLayout;\n+    @Inject\n+    DepictedImagesPresenter presenter;\n+    private GridViewAdapter gridAdapter;\n+    private String entityId = null;\n+    private boolean isLastPage;\n+    private boolean isLoading = true;\n+    private int mediaSize = 0;\n+\n+    @Nullable\n+    @Override\n+    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n+        View v = inflater.inflate(R.layout.fragment_depict_image, container, false);\n+        ButterKnife.bind(this, v);\n+        presenter.onAttachView(this);\n+        return v;\n+    }\n+\n+    @Override\n+    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n+        super.onViewCreated(view, savedInstanceState);\n+        gridView.setOnItemClickListener((AdapterView.OnItemClickListener) getActivity());\n+        initViews();\n+    }\n+\n+    /**\n+     * Initializes the UI elements for the fragment\n+     * Setup the grid view to and scroll listener for it\n+     */\n+    private void initViews() {\n+        String depictsName = getArguments().getString(\"wikidataItemName\");\n+        entityId = getArguments().getString(\"entityId\");\n+        if (getArguments() != null && depictsName != null) {\n+            initList();\n+            setScrollListener();\n+        }\n+    }\n+\n+    private void initList() {\n+        presenter.initList(entityId);\n+        if (!NetworkUtils.isInternetConnectionEstablished(getContext())) {\n+            handleNoInternet();\n+        } else presenter.initList(entityId);\n+    }\n+\n+    /**\n+     * Handles the UI updates for no internet scenario\n+     */\n+    @Override\n+    public void handleNoInternet() {\n+        progressBar.setVisibility(GONE);\n+        if (gridAdapter == null || gridAdapter.isEmpty()) {\n+            statusTextView.setVisibility(VISIBLE);\n+            statusTextView.setText(getString(R.string.no_internet));\n+        } else {\n+            ViewUtil.showShortSnackbar(parentLayout, R.string.no_internet);\n+        }\n+    }\n+\n+    /**\n+     * Handles the UI updates for a error scenario\n+     */\n+    @Override\n+    public void initErrorView() {\n+        progressBar.setVisibility(GONE);\n+        if (gridAdapter == null || gridAdapter.isEmpty()) {\n+            statusTextView.setVisibility(VISIBLE);\n+            statusTextView.setText(getString(R.string.no_images_found));\n+        } else {\n+            statusTextView.setVisibility(GONE);\n+        }\n+    }\n+\n+    /**\n+     * Sets the scroll listener for the grid view so that more images are fetched when the user scrolls down\n+     * Checks if the item has more images before loading\n+     * Also checks whether images are currently being fetched before triggering another request\n+     */\n+    private void setScrollListener() {\n+        gridView.setOnScrollListener(new AbsListView.OnScrollListener() {\n+            @Override\n+            public void onScrollStateChanged(AbsListView view, int scrollState) {\n+            }\n+\n+            @Override\n+            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {\n+                if (!isLastPage && !isLoading && (firstVisibleItem + visibleItemCount >= totalItemCount)) {\n+                    isLoading = true;\n+                    if (!NetworkUtils.isInternetConnectionEstablished(getContext())) {\n+                        handleNoInternet();\n+                    } else {\n+                        presenter.fetchMoreImages();\n+                    }\n+                }\n+                if (isLastPage) {\n+                    progressBar.setVisibility(GONE);\n+                }\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Seat caption to the image at the given position\n+     */\n+    @Override\n+    public void handleLabelforImage(String s, int position) {\n+        if (!s.trim().equals(getString(R.string.detail_caption_empty))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDkzNjU4OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/depictions/Media/DepictedImagesFragment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMToyMzoyM1rOF5spPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMDo0MDoxM1rOF5_o0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NDYwNA==", "bodyText": "Why are we trying to catch all exceptions here?", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396044604", "createdAt": "2020-03-22T01:23:23Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/Media/DepictedImagesFragment.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package fr.free.nrw.commons.depictions.Media;\n+\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.AbsListView;\n+import android.widget.AdapterView;\n+import android.widget.GridView;\n+import android.widget.ListAdapter;\n+import android.widget.ProgressBar;\n+import android.widget.RelativeLayout;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import butterknife.BindView;\n+import butterknife.ButterKnife;\n+import dagger.android.support.DaggerFragment;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.R;\n+import fr.free.nrw.commons.depictions.WikidataItemDetailsActivity;\n+import fr.free.nrw.commons.depictions.GridViewAdapter;\n+import fr.free.nrw.commons.utils.NetworkUtils;\n+import fr.free.nrw.commons.utils.ViewUtil;\n+\n+import static android.view.View.GONE;\n+import static android.view.View.VISIBLE;\n+\n+/**\n+ * Fragment for showing image list after selected an item from SearchActivity In Explore\n+ */\n+public class DepictedImagesFragment extends DaggerFragment implements DepictedImagesContract.View {\n+\n+\n+    @BindView(R.id.statusMessage)\n+    TextView statusTextView;\n+    @BindView(R.id.loadingImagesProgressBar)\n+    ProgressBar progressBar;\n+    @BindView(R.id.depicts_image_list)\n+    GridView gridView;\n+    @BindView(R.id.parentLayout)\n+    RelativeLayout parentLayout;\n+    @Inject\n+    DepictedImagesPresenter presenter;\n+    private GridViewAdapter gridAdapter;\n+    private String entityId = null;\n+    private boolean isLastPage;\n+    private boolean isLoading = true;\n+    private int mediaSize = 0;\n+\n+    @Nullable\n+    @Override\n+    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n+        View v = inflater.inflate(R.layout.fragment_depict_image, container, false);\n+        ButterKnife.bind(this, v);\n+        presenter.onAttachView(this);\n+        return v;\n+    }\n+\n+    @Override\n+    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n+        super.onViewCreated(view, savedInstanceState);\n+        gridView.setOnItemClickListener((AdapterView.OnItemClickListener) getActivity());\n+        initViews();\n+    }\n+\n+    /**\n+     * Initializes the UI elements for the fragment\n+     * Setup the grid view to and scroll listener for it\n+     */\n+    private void initViews() {\n+        String depictsName = getArguments().getString(\"wikidataItemName\");\n+        entityId = getArguments().getString(\"entityId\");\n+        if (getArguments() != null && depictsName != null) {\n+            initList();\n+            setScrollListener();\n+        }\n+    }\n+\n+    private void initList() {\n+        presenter.initList(entityId);\n+        if (!NetworkUtils.isInternetConnectionEstablished(getContext())) {\n+            handleNoInternet();\n+        } else presenter.initList(entityId);\n+    }\n+\n+    /**\n+     * Handles the UI updates for no internet scenario\n+     */\n+    @Override\n+    public void handleNoInternet() {\n+        progressBar.setVisibility(GONE);\n+        if (gridAdapter == null || gridAdapter.isEmpty()) {\n+            statusTextView.setVisibility(VISIBLE);\n+            statusTextView.setText(getString(R.string.no_internet));\n+        } else {\n+            ViewUtil.showShortSnackbar(parentLayout, R.string.no_internet);\n+        }\n+    }\n+\n+    /**\n+     * Handles the UI updates for a error scenario\n+     */\n+    @Override\n+    public void initErrorView() {\n+        progressBar.setVisibility(GONE);\n+        if (gridAdapter == null || gridAdapter.isEmpty()) {\n+            statusTextView.setVisibility(VISIBLE);\n+            statusTextView.setText(getString(R.string.no_images_found));\n+        } else {\n+            statusTextView.setVisibility(GONE);\n+        }\n+    }\n+\n+    /**\n+     * Sets the scroll listener for the grid view so that more images are fetched when the user scrolls down\n+     * Checks if the item has more images before loading\n+     * Also checks whether images are currently being fetched before triggering another request\n+     */\n+    private void setScrollListener() {\n+        gridView.setOnScrollListener(new AbsListView.OnScrollListener() {\n+            @Override\n+            public void onScrollStateChanged(AbsListView view, int scrollState) {\n+            }\n+\n+            @Override\n+            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {\n+                if (!isLastPage && !isLoading && (firstVisibleItem + visibleItemCount >= totalItemCount)) {\n+                    isLoading = true;\n+                    if (!NetworkUtils.isInternetConnectionEstablished(getContext())) {\n+                        handleNoInternet();\n+                    } else {\n+                        presenter.fetchMoreImages();\n+                    }\n+                }\n+                if (isLastPage) {\n+                    progressBar.setVisibility(GONE);\n+                }\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Seat caption to the image at the given position\n+     */\n+    @Override\n+    public void handleLabelforImage(String s, int position) {\n+        if (!s.trim().equals(getString(R.string.detail_caption_empty))) {\n+            gridAdapter.getItem(position).setThumbnailTitle(s);\n+            gridAdapter.notifyDataSetChanged();\n+        }\n+    }\n+\n+    /**\n+     * Display snackbar\n+     */\n+    @Override\n+    public void showSnackBar() {\n+        ViewUtil.showShortSnackbar(parentLayout, R.string.error_loading_images);\n+    }\n+\n+    /**\n+     * Set visibility of progressbar depending on the boolean value\n+     */\n+    @Override\n+    public void progressBarVisible(Boolean value) {\n+        if (value) {\n+            progressBar.setVisibility(VISIBLE);\n+        } else {\n+            progressBar.setVisibility(GONE);\n+        }\n+    }\n+\n+    /**\n+     * It return an instance of gridView adapter which helps in extracting media details\n+     * used by the gridView\n+     *\n+     * @return GridView Adapter\n+     */\n+    @Override\n+    public ListAdapter getAdapter() {\n+        return gridAdapter;\n+    }\n+\n+    /**\n+     * Initializes the adapter with a list of Media objects\n+     *\n+     * @param mediaList List of new Media to be displayed\n+     */\n+    @Override\n+    public void setAdapter(List<Media> mediaList) {\n+        gridAdapter = new fr.free.nrw.commons.depictions.GridViewAdapter(getContext(), R.layout.layout_depict_image, mediaList);\n+        gridView.setAdapter(gridAdapter);\n+    }\n+\n+    /**\n+     * adds list to adapter\n+     */\n+    @Override\n+    public void addItemsToAdapter(List<Media> media) {\n+        gridAdapter.addAll(media);\n+        gridAdapter.notifyDataSetChanged();\n+    }\n+\n+    /**\n+     * Sets loading status depending on the boolean value\n+     */\n+    @Override\n+    public void setLoadingStatus(Boolean value) {\n+        if (!value) {\n+            statusTextView.setVisibility(GONE);\n+        }\n+        isLoading = value;\n+    }\n+\n+    /**\n+     * Inform the view that there are no more items to be loaded for this search query\n+     * or reset the isLastPage for the current query\n+     * @param isLastPage\n+     */\n+    @Override\n+    public void setIsLastPage(boolean isLastPage) {\n+        this.isLastPage=isLastPage;\n+        progressBar.setVisibility(GONE);\n+    }\n+\n+\n+    /**\n+     * Handles the success scenario\n+     * On first load, it initializes the grid view. On subsequent loads, it adds items to the adapter\n+     *\n+     * @param collection List of new Media to be displayed\n+     */\n+    @Override\n+    public void handleSuccess(List<Media> collection) {\n+       presenter.addItemsToQueryList(collection);\n+        if (gridAdapter == null) {\n+            setAdapter(collection);\n+        } else {\n+            if (gridAdapter.containsAll(collection)) {\n+                return;\n+            }\n+            gridAdapter.addItems(collection);\n+\n+            try {\n+                ((WikidataItemDetailsActivity) getContext()).viewPagerNotifyDataSetChanged();\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM1NTc5NQ==", "bodyText": "I would guess because there was an example in the code before me moved to casting to that interface, the broken window effect.", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396355795", "createdAt": "2020-03-23T10:40:13Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/Media/DepictedImagesFragment.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package fr.free.nrw.commons.depictions.Media;\n+\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.AbsListView;\n+import android.widget.AdapterView;\n+import android.widget.GridView;\n+import android.widget.ListAdapter;\n+import android.widget.ProgressBar;\n+import android.widget.RelativeLayout;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import butterknife.BindView;\n+import butterknife.ButterKnife;\n+import dagger.android.support.DaggerFragment;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.R;\n+import fr.free.nrw.commons.depictions.WikidataItemDetailsActivity;\n+import fr.free.nrw.commons.depictions.GridViewAdapter;\n+import fr.free.nrw.commons.utils.NetworkUtils;\n+import fr.free.nrw.commons.utils.ViewUtil;\n+\n+import static android.view.View.GONE;\n+import static android.view.View.VISIBLE;\n+\n+/**\n+ * Fragment for showing image list after selected an item from SearchActivity In Explore\n+ */\n+public class DepictedImagesFragment extends DaggerFragment implements DepictedImagesContract.View {\n+\n+\n+    @BindView(R.id.statusMessage)\n+    TextView statusTextView;\n+    @BindView(R.id.loadingImagesProgressBar)\n+    ProgressBar progressBar;\n+    @BindView(R.id.depicts_image_list)\n+    GridView gridView;\n+    @BindView(R.id.parentLayout)\n+    RelativeLayout parentLayout;\n+    @Inject\n+    DepictedImagesPresenter presenter;\n+    private GridViewAdapter gridAdapter;\n+    private String entityId = null;\n+    private boolean isLastPage;\n+    private boolean isLoading = true;\n+    private int mediaSize = 0;\n+\n+    @Nullable\n+    @Override\n+    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n+        View v = inflater.inflate(R.layout.fragment_depict_image, container, false);\n+        ButterKnife.bind(this, v);\n+        presenter.onAttachView(this);\n+        return v;\n+    }\n+\n+    @Override\n+    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n+        super.onViewCreated(view, savedInstanceState);\n+        gridView.setOnItemClickListener((AdapterView.OnItemClickListener) getActivity());\n+        initViews();\n+    }\n+\n+    /**\n+     * Initializes the UI elements for the fragment\n+     * Setup the grid view to and scroll listener for it\n+     */\n+    private void initViews() {\n+        String depictsName = getArguments().getString(\"wikidataItemName\");\n+        entityId = getArguments().getString(\"entityId\");\n+        if (getArguments() != null && depictsName != null) {\n+            initList();\n+            setScrollListener();\n+        }\n+    }\n+\n+    private void initList() {\n+        presenter.initList(entityId);\n+        if (!NetworkUtils.isInternetConnectionEstablished(getContext())) {\n+            handleNoInternet();\n+        } else presenter.initList(entityId);\n+    }\n+\n+    /**\n+     * Handles the UI updates for no internet scenario\n+     */\n+    @Override\n+    public void handleNoInternet() {\n+        progressBar.setVisibility(GONE);\n+        if (gridAdapter == null || gridAdapter.isEmpty()) {\n+            statusTextView.setVisibility(VISIBLE);\n+            statusTextView.setText(getString(R.string.no_internet));\n+        } else {\n+            ViewUtil.showShortSnackbar(parentLayout, R.string.no_internet);\n+        }\n+    }\n+\n+    /**\n+     * Handles the UI updates for a error scenario\n+     */\n+    @Override\n+    public void initErrorView() {\n+        progressBar.setVisibility(GONE);\n+        if (gridAdapter == null || gridAdapter.isEmpty()) {\n+            statusTextView.setVisibility(VISIBLE);\n+            statusTextView.setText(getString(R.string.no_images_found));\n+        } else {\n+            statusTextView.setVisibility(GONE);\n+        }\n+    }\n+\n+    /**\n+     * Sets the scroll listener for the grid view so that more images are fetched when the user scrolls down\n+     * Checks if the item has more images before loading\n+     * Also checks whether images are currently being fetched before triggering another request\n+     */\n+    private void setScrollListener() {\n+        gridView.setOnScrollListener(new AbsListView.OnScrollListener() {\n+            @Override\n+            public void onScrollStateChanged(AbsListView view, int scrollState) {\n+            }\n+\n+            @Override\n+            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {\n+                if (!isLastPage && !isLoading && (firstVisibleItem + visibleItemCount >= totalItemCount)) {\n+                    isLoading = true;\n+                    if (!NetworkUtils.isInternetConnectionEstablished(getContext())) {\n+                        handleNoInternet();\n+                    } else {\n+                        presenter.fetchMoreImages();\n+                    }\n+                }\n+                if (isLastPage) {\n+                    progressBar.setVisibility(GONE);\n+                }\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Seat caption to the image at the given position\n+     */\n+    @Override\n+    public void handleLabelforImage(String s, int position) {\n+        if (!s.trim().equals(getString(R.string.detail_caption_empty))) {\n+            gridAdapter.getItem(position).setThumbnailTitle(s);\n+            gridAdapter.notifyDataSetChanged();\n+        }\n+    }\n+\n+    /**\n+     * Display snackbar\n+     */\n+    @Override\n+    public void showSnackBar() {\n+        ViewUtil.showShortSnackbar(parentLayout, R.string.error_loading_images);\n+    }\n+\n+    /**\n+     * Set visibility of progressbar depending on the boolean value\n+     */\n+    @Override\n+    public void progressBarVisible(Boolean value) {\n+        if (value) {\n+            progressBar.setVisibility(VISIBLE);\n+        } else {\n+            progressBar.setVisibility(GONE);\n+        }\n+    }\n+\n+    /**\n+     * It return an instance of gridView adapter which helps in extracting media details\n+     * used by the gridView\n+     *\n+     * @return GridView Adapter\n+     */\n+    @Override\n+    public ListAdapter getAdapter() {\n+        return gridAdapter;\n+    }\n+\n+    /**\n+     * Initializes the adapter with a list of Media objects\n+     *\n+     * @param mediaList List of new Media to be displayed\n+     */\n+    @Override\n+    public void setAdapter(List<Media> mediaList) {\n+        gridAdapter = new fr.free.nrw.commons.depictions.GridViewAdapter(getContext(), R.layout.layout_depict_image, mediaList);\n+        gridView.setAdapter(gridAdapter);\n+    }\n+\n+    /**\n+     * adds list to adapter\n+     */\n+    @Override\n+    public void addItemsToAdapter(List<Media> media) {\n+        gridAdapter.addAll(media);\n+        gridAdapter.notifyDataSetChanged();\n+    }\n+\n+    /**\n+     * Sets loading status depending on the boolean value\n+     */\n+    @Override\n+    public void setLoadingStatus(Boolean value) {\n+        if (!value) {\n+            statusTextView.setVisibility(GONE);\n+        }\n+        isLoading = value;\n+    }\n+\n+    /**\n+     * Inform the view that there are no more items to be loaded for this search query\n+     * or reset the isLastPage for the current query\n+     * @param isLastPage\n+     */\n+    @Override\n+    public void setIsLastPage(boolean isLastPage) {\n+        this.isLastPage=isLastPage;\n+        progressBar.setVisibility(GONE);\n+    }\n+\n+\n+    /**\n+     * Handles the success scenario\n+     * On first load, it initializes the grid view. On subsequent loads, it adds items to the adapter\n+     *\n+     * @param collection List of new Media to be displayed\n+     */\n+    @Override\n+    public void handleSuccess(List<Media> collection) {\n+       presenter.addItemsToQueryList(collection);\n+        if (gridAdapter == null) {\n+            setAdapter(collection);\n+        } else {\n+            if (gridAdapter.containsAll(collection)) {\n+                return;\n+            }\n+            gridAdapter.addItems(collection);\n+\n+            try {\n+                ((WikidataItemDetailsActivity) getContext()).viewPagerNotifyDataSetChanged();\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NDYwNA=="}, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDkzNjgxOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/depictions/Media/DepictedImagesFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMToyMzo0MFrOF5spVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMToyMzo0MFrOF5spVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NDYyOQ==", "bodyText": "Use timber log", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396044629", "createdAt": "2020-03-22T01:23:40Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/Media/DepictedImagesFragment.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package fr.free.nrw.commons.depictions.Media;\n+\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.AbsListView;\n+import android.widget.AdapterView;\n+import android.widget.GridView;\n+import android.widget.ListAdapter;\n+import android.widget.ProgressBar;\n+import android.widget.RelativeLayout;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import butterknife.BindView;\n+import butterknife.ButterKnife;\n+import dagger.android.support.DaggerFragment;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.R;\n+import fr.free.nrw.commons.depictions.WikidataItemDetailsActivity;\n+import fr.free.nrw.commons.depictions.GridViewAdapter;\n+import fr.free.nrw.commons.utils.NetworkUtils;\n+import fr.free.nrw.commons.utils.ViewUtil;\n+\n+import static android.view.View.GONE;\n+import static android.view.View.VISIBLE;\n+\n+/**\n+ * Fragment for showing image list after selected an item from SearchActivity In Explore\n+ */\n+public class DepictedImagesFragment extends DaggerFragment implements DepictedImagesContract.View {\n+\n+\n+    @BindView(R.id.statusMessage)\n+    TextView statusTextView;\n+    @BindView(R.id.loadingImagesProgressBar)\n+    ProgressBar progressBar;\n+    @BindView(R.id.depicts_image_list)\n+    GridView gridView;\n+    @BindView(R.id.parentLayout)\n+    RelativeLayout parentLayout;\n+    @Inject\n+    DepictedImagesPresenter presenter;\n+    private GridViewAdapter gridAdapter;\n+    private String entityId = null;\n+    private boolean isLastPage;\n+    private boolean isLoading = true;\n+    private int mediaSize = 0;\n+\n+    @Nullable\n+    @Override\n+    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n+        View v = inflater.inflate(R.layout.fragment_depict_image, container, false);\n+        ButterKnife.bind(this, v);\n+        presenter.onAttachView(this);\n+        return v;\n+    }\n+\n+    @Override\n+    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n+        super.onViewCreated(view, savedInstanceState);\n+        gridView.setOnItemClickListener((AdapterView.OnItemClickListener) getActivity());\n+        initViews();\n+    }\n+\n+    /**\n+     * Initializes the UI elements for the fragment\n+     * Setup the grid view to and scroll listener for it\n+     */\n+    private void initViews() {\n+        String depictsName = getArguments().getString(\"wikidataItemName\");\n+        entityId = getArguments().getString(\"entityId\");\n+        if (getArguments() != null && depictsName != null) {\n+            initList();\n+            setScrollListener();\n+        }\n+    }\n+\n+    private void initList() {\n+        presenter.initList(entityId);\n+        if (!NetworkUtils.isInternetConnectionEstablished(getContext())) {\n+            handleNoInternet();\n+        } else presenter.initList(entityId);\n+    }\n+\n+    /**\n+     * Handles the UI updates for no internet scenario\n+     */\n+    @Override\n+    public void handleNoInternet() {\n+        progressBar.setVisibility(GONE);\n+        if (gridAdapter == null || gridAdapter.isEmpty()) {\n+            statusTextView.setVisibility(VISIBLE);\n+            statusTextView.setText(getString(R.string.no_internet));\n+        } else {\n+            ViewUtil.showShortSnackbar(parentLayout, R.string.no_internet);\n+        }\n+    }\n+\n+    /**\n+     * Handles the UI updates for a error scenario\n+     */\n+    @Override\n+    public void initErrorView() {\n+        progressBar.setVisibility(GONE);\n+        if (gridAdapter == null || gridAdapter.isEmpty()) {\n+            statusTextView.setVisibility(VISIBLE);\n+            statusTextView.setText(getString(R.string.no_images_found));\n+        } else {\n+            statusTextView.setVisibility(GONE);\n+        }\n+    }\n+\n+    /**\n+     * Sets the scroll listener for the grid view so that more images are fetched when the user scrolls down\n+     * Checks if the item has more images before loading\n+     * Also checks whether images are currently being fetched before triggering another request\n+     */\n+    private void setScrollListener() {\n+        gridView.setOnScrollListener(new AbsListView.OnScrollListener() {\n+            @Override\n+            public void onScrollStateChanged(AbsListView view, int scrollState) {\n+            }\n+\n+            @Override\n+            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {\n+                if (!isLastPage && !isLoading && (firstVisibleItem + visibleItemCount >= totalItemCount)) {\n+                    isLoading = true;\n+                    if (!NetworkUtils.isInternetConnectionEstablished(getContext())) {\n+                        handleNoInternet();\n+                    } else {\n+                        presenter.fetchMoreImages();\n+                    }\n+                }\n+                if (isLastPage) {\n+                    progressBar.setVisibility(GONE);\n+                }\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Seat caption to the image at the given position\n+     */\n+    @Override\n+    public void handleLabelforImage(String s, int position) {\n+        if (!s.trim().equals(getString(R.string.detail_caption_empty))) {\n+            gridAdapter.getItem(position).setThumbnailTitle(s);\n+            gridAdapter.notifyDataSetChanged();\n+        }\n+    }\n+\n+    /**\n+     * Display snackbar\n+     */\n+    @Override\n+    public void showSnackBar() {\n+        ViewUtil.showShortSnackbar(parentLayout, R.string.error_loading_images);\n+    }\n+\n+    /**\n+     * Set visibility of progressbar depending on the boolean value\n+     */\n+    @Override\n+    public void progressBarVisible(Boolean value) {\n+        if (value) {\n+            progressBar.setVisibility(VISIBLE);\n+        } else {\n+            progressBar.setVisibility(GONE);\n+        }\n+    }\n+\n+    /**\n+     * It return an instance of gridView adapter which helps in extracting media details\n+     * used by the gridView\n+     *\n+     * @return GridView Adapter\n+     */\n+    @Override\n+    public ListAdapter getAdapter() {\n+        return gridAdapter;\n+    }\n+\n+    /**\n+     * Initializes the adapter with a list of Media objects\n+     *\n+     * @param mediaList List of new Media to be displayed\n+     */\n+    @Override\n+    public void setAdapter(List<Media> mediaList) {\n+        gridAdapter = new fr.free.nrw.commons.depictions.GridViewAdapter(getContext(), R.layout.layout_depict_image, mediaList);\n+        gridView.setAdapter(gridAdapter);\n+    }\n+\n+    /**\n+     * adds list to adapter\n+     */\n+    @Override\n+    public void addItemsToAdapter(List<Media> media) {\n+        gridAdapter.addAll(media);\n+        gridAdapter.notifyDataSetChanged();\n+    }\n+\n+    /**\n+     * Sets loading status depending on the boolean value\n+     */\n+    @Override\n+    public void setLoadingStatus(Boolean value) {\n+        if (!value) {\n+            statusTextView.setVisibility(GONE);\n+        }\n+        isLoading = value;\n+    }\n+\n+    /**\n+     * Inform the view that there are no more items to be loaded for this search query\n+     * or reset the isLastPage for the current query\n+     * @param isLastPage\n+     */\n+    @Override\n+    public void setIsLastPage(boolean isLastPage) {\n+        this.isLastPage=isLastPage;\n+        progressBar.setVisibility(GONE);\n+    }\n+\n+\n+    /**\n+     * Handles the success scenario\n+     * On first load, it initializes the grid view. On subsequent loads, it adds items to the adapter\n+     *\n+     * @param collection List of new Media to be displayed\n+     */\n+    @Override\n+    public void handleSuccess(List<Media> collection) {\n+       presenter.addItemsToQueryList(collection);\n+        if (gridAdapter == null) {\n+            setAdapter(collection);\n+        } else {\n+            if (gridAdapter.containsAll(collection)) {\n+                return;\n+            }\n+            gridAdapter.addItems(collection);\n+\n+            try {\n+                ((WikidataItemDetailsActivity) getContext()).viewPagerNotifyDataSetChanged();\n+            } catch (Exception e) {\n+                e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 254}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDkzNjg4OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/depictions/Media/DepictedImagesFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMToyMzo1MlrOF5spXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMToyMzo1MlrOF5spXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NDYzNg==", "bodyText": "Variable name", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396044636", "createdAt": "2020-03-22T01:23:52Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/Media/DepictedImagesFragment.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package fr.free.nrw.commons.depictions.Media;\n+\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.AbsListView;\n+import android.widget.AdapterView;\n+import android.widget.GridView;\n+import android.widget.ListAdapter;\n+import android.widget.ProgressBar;\n+import android.widget.RelativeLayout;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import butterknife.BindView;\n+import butterknife.ButterKnife;\n+import dagger.android.support.DaggerFragment;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.R;\n+import fr.free.nrw.commons.depictions.WikidataItemDetailsActivity;\n+import fr.free.nrw.commons.depictions.GridViewAdapter;\n+import fr.free.nrw.commons.utils.NetworkUtils;\n+import fr.free.nrw.commons.utils.ViewUtil;\n+\n+import static android.view.View.GONE;\n+import static android.view.View.VISIBLE;\n+\n+/**\n+ * Fragment for showing image list after selected an item from SearchActivity In Explore\n+ */\n+public class DepictedImagesFragment extends DaggerFragment implements DepictedImagesContract.View {\n+\n+\n+    @BindView(R.id.statusMessage)\n+    TextView statusTextView;\n+    @BindView(R.id.loadingImagesProgressBar)\n+    ProgressBar progressBar;\n+    @BindView(R.id.depicts_image_list)\n+    GridView gridView;\n+    @BindView(R.id.parentLayout)\n+    RelativeLayout parentLayout;\n+    @Inject\n+    DepictedImagesPresenter presenter;\n+    private GridViewAdapter gridAdapter;\n+    private String entityId = null;\n+    private boolean isLastPage;\n+    private boolean isLoading = true;\n+    private int mediaSize = 0;\n+\n+    @Nullable\n+    @Override\n+    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n+        View v = inflater.inflate(R.layout.fragment_depict_image, container, false);\n+        ButterKnife.bind(this, v);\n+        presenter.onAttachView(this);\n+        return v;\n+    }\n+\n+    @Override\n+    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n+        super.onViewCreated(view, savedInstanceState);\n+        gridView.setOnItemClickListener((AdapterView.OnItemClickListener) getActivity());\n+        initViews();\n+    }\n+\n+    /**\n+     * Initializes the UI elements for the fragment\n+     * Setup the grid view to and scroll listener for it\n+     */\n+    private void initViews() {\n+        String depictsName = getArguments().getString(\"wikidataItemName\");\n+        entityId = getArguments().getString(\"entityId\");\n+        if (getArguments() != null && depictsName != null) {\n+            initList();\n+            setScrollListener();\n+        }\n+    }\n+\n+    private void initList() {\n+        presenter.initList(entityId);\n+        if (!NetworkUtils.isInternetConnectionEstablished(getContext())) {\n+            handleNoInternet();\n+        } else presenter.initList(entityId);\n+    }\n+\n+    /**\n+     * Handles the UI updates for no internet scenario\n+     */\n+    @Override\n+    public void handleNoInternet() {\n+        progressBar.setVisibility(GONE);\n+        if (gridAdapter == null || gridAdapter.isEmpty()) {\n+            statusTextView.setVisibility(VISIBLE);\n+            statusTextView.setText(getString(R.string.no_internet));\n+        } else {\n+            ViewUtil.showShortSnackbar(parentLayout, R.string.no_internet);\n+        }\n+    }\n+\n+    /**\n+     * Handles the UI updates for a error scenario\n+     */\n+    @Override\n+    public void initErrorView() {\n+        progressBar.setVisibility(GONE);\n+        if (gridAdapter == null || gridAdapter.isEmpty()) {\n+            statusTextView.setVisibility(VISIBLE);\n+            statusTextView.setText(getString(R.string.no_images_found));\n+        } else {\n+            statusTextView.setVisibility(GONE);\n+        }\n+    }\n+\n+    /**\n+     * Sets the scroll listener for the grid view so that more images are fetched when the user scrolls down\n+     * Checks if the item has more images before loading\n+     * Also checks whether images are currently being fetched before triggering another request\n+     */\n+    private void setScrollListener() {\n+        gridView.setOnScrollListener(new AbsListView.OnScrollListener() {\n+            @Override\n+            public void onScrollStateChanged(AbsListView view, int scrollState) {\n+            }\n+\n+            @Override\n+            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {\n+                if (!isLastPage && !isLoading && (firstVisibleItem + visibleItemCount >= totalItemCount)) {\n+                    isLoading = true;\n+                    if (!NetworkUtils.isInternetConnectionEstablished(getContext())) {\n+                        handleNoInternet();\n+                    } else {\n+                        presenter.fetchMoreImages();\n+                    }\n+                }\n+                if (isLastPage) {\n+                    progressBar.setVisibility(GONE);\n+                }\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Seat caption to the image at the given position\n+     */\n+    @Override\n+    public void handleLabelforImage(String s, int position) {\n+        if (!s.trim().equals(getString(R.string.detail_caption_empty))) {\n+            gridAdapter.getItem(position).setThumbnailTitle(s);\n+            gridAdapter.notifyDataSetChanged();\n+        }\n+    }\n+\n+    /**\n+     * Display snackbar\n+     */\n+    @Override\n+    public void showSnackBar() {\n+        ViewUtil.showShortSnackbar(parentLayout, R.string.error_loading_images);\n+    }\n+\n+    /**\n+     * Set visibility of progressbar depending on the boolean value\n+     */\n+    @Override\n+    public void progressBarVisible(Boolean value) {\n+        if (value) {\n+            progressBar.setVisibility(VISIBLE);\n+        } else {\n+            progressBar.setVisibility(GONE);\n+        }\n+    }\n+\n+    /**\n+     * It return an instance of gridView adapter which helps in extracting media details\n+     * used by the gridView\n+     *\n+     * @return GridView Adapter\n+     */\n+    @Override\n+    public ListAdapter getAdapter() {\n+        return gridAdapter;\n+    }\n+\n+    /**\n+     * Initializes the adapter with a list of Media objects\n+     *\n+     * @param mediaList List of new Media to be displayed\n+     */\n+    @Override\n+    public void setAdapter(List<Media> mediaList) {\n+        gridAdapter = new fr.free.nrw.commons.depictions.GridViewAdapter(getContext(), R.layout.layout_depict_image, mediaList);\n+        gridView.setAdapter(gridAdapter);\n+    }\n+\n+    /**\n+     * adds list to adapter\n+     */\n+    @Override\n+    public void addItemsToAdapter(List<Media> media) {\n+        gridAdapter.addAll(media);\n+        gridAdapter.notifyDataSetChanged();\n+    }\n+\n+    /**\n+     * Sets loading status depending on the boolean value\n+     */\n+    @Override\n+    public void setLoadingStatus(Boolean value) {\n+        if (!value) {\n+            statusTextView.setVisibility(GONE);\n+        }\n+        isLoading = value;\n+    }\n+\n+    /**\n+     * Inform the view that there are no more items to be loaded for this search query\n+     * or reset the isLastPage for the current query\n+     * @param isLastPage\n+     */\n+    @Override\n+    public void setIsLastPage(boolean isLastPage) {\n+        this.isLastPage=isLastPage;\n+        progressBar.setVisibility(GONE);\n+    }\n+\n+\n+    /**\n+     * Handles the success scenario\n+     * On first load, it initializes the grid view. On subsequent loads, it adds items to the adapter\n+     *\n+     * @param collection List of new Media to be displayed\n+     */\n+    @Override\n+    public void handleSuccess(List<Media> collection) {\n+       presenter.addItemsToQueryList(collection);\n+        if (gridAdapter == null) {\n+            setAdapter(collection);\n+        } else {\n+            if (gridAdapter.containsAll(collection)) {\n+                return;\n+            }\n+            gridAdapter.addItems(collection);\n+\n+            try {\n+                ((WikidataItemDetailsActivity) getContext()).viewPagerNotifyDataSetChanged();\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+            }\n+        }\n+        progressBar.setVisibility(GONE);\n+        isLoading = false;\n+        statusTextView.setVisibility(GONE);\n+        for (Media m : collection) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 260}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDkzNzgyOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/depictions/SubClass/SubDepictionListPresenter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMToyNjozN1rOF5sp0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMDo0NTowNFrOF5_zqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NDc1NQ==", "bodyText": "IMO we should handle just specific exceptions. Also, use timber logs.", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396044755", "createdAt": "2020-03-22T01:26:37Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/SubClass/SubDepictionListPresenter.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package fr.free.nrw.commons.depictions.SubClass;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Proxy;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import fr.free.nrw.commons.explore.depictions.DepictsClient;\n+import fr.free.nrw.commons.explore.recentsearches.RecentSearch;\n+import fr.free.nrw.commons.explore.recentsearches.RecentSearchesDao;\n+import fr.free.nrw.commons.mwapi.OkHttpJsonApiClient;\n+import fr.free.nrw.commons.upload.structure.depictions.DepictedItem;\n+import io.reactivex.Scheduler;\n+import io.reactivex.android.schedulers.AndroidSchedulers;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.schedulers.Schedulers;\n+import timber.log.Timber;\n+\n+import static fr.free.nrw.commons.di.CommonsApplicationModule.IO_THREAD;\n+import static fr.free.nrw.commons.di.CommonsApplicationModule.MAIN_THREAD;\n+\n+/**\n+* Presenter for parent classes and child classes of Depicted items in Explore\n+ */\n+public class SubDepictionListPresenter implements SubDepictionListContract.UserActionListener {\n+\n+    /**\n+     * This creates a dynamic proxy instance of the class,\n+     * proxy is to control access to the target object\n+     * here our target object is the view.\n+     * Thus we when onDettach method of fragment is called we replace the binding of view to our object with the proxy instance\n+     */\n+    private static final SubDepictionListContract.View DUMMY = (SubDepictionListContract.View) Proxy\n+            .newProxyInstance(\n+                    SubDepictionListContract.View.class.getClassLoader(),\n+                    new Class[]{SubDepictionListContract.View.class},\n+                    (proxy, method, methodArgs) -> null);\n+\n+    private final Scheduler ioScheduler;\n+    private final Scheduler mainThreadScheduler;\n+    private  SubDepictionListContract.View view = DUMMY;\n+    RecentSearchesDao recentSearchesDao;\n+    /**\n+     * Value of the search query\n+     */\n+    public String query;\n+    protected CompositeDisposable compositeDisposable = new CompositeDisposable();\n+    DepictsClient depictsClient;\n+    private static int TIMEOUT_SECONDS = 15;\n+    private List<DepictedItem> queryList = new ArrayList<>();\n+    OkHttpJsonApiClient okHttpJsonApiClient;\n+    /**\n+     * variable used to record the number of API calls already made for fetching Thumbnails\n+     */\n+    private int size = 0;\n+\n+    @Inject\n+    public SubDepictionListPresenter(RecentSearchesDao recentSearchesDao, DepictsClient depictsClient, OkHttpJsonApiClient okHttpJsonApiClient,  @Named(IO_THREAD) Scheduler ioScheduler,\n+                                     @Named(MAIN_THREAD) Scheduler mainThreadScheduler) {\n+        this.recentSearchesDao = recentSearchesDao;\n+        this.ioScheduler = ioScheduler;\n+        this.mainThreadScheduler = mainThreadScheduler;\n+        this.depictsClient = depictsClient;\n+        this.okHttpJsonApiClient = okHttpJsonApiClient;\n+    }\n+    @Override\n+    public void onAttachView(SubDepictionListContract.View view) {\n+        this.view = view;\n+    }\n+\n+    @Override\n+    public void onDetachView() {\n+        this.view = DUMMY;\n+    }\n+\n+    /**\n+     * Store the current query in Recent searches\n+     */\n+    @Override\n+    public void saveQuery() {\n+        RecentSearch recentSearch = recentSearchesDao.find(query);\n+\n+        // Newly searched query...\n+        if (recentSearch == null) {\n+            recentSearch = new RecentSearch(null, query, new Date());\n+        } else {\n+            recentSearch.setLastSearched(new Date());\n+        }\n+        recentSearchesDao.save(recentSearch);\n+    }\n+\n+    /**\n+     * Calls Wikibase APIs to fetch Thumbnail image for a given wikidata item\n+     */\n+    @Override\n+    public void fetchThumbnailForEntityId(String entityId, int position) {\n+        compositeDisposable.add(depictsClient.getP18ForItem(entityId)\n+                .subscribeOn(ioScheduler)\n+                .observeOn(mainThreadScheduler)\n+                .timeout(TIMEOUT_SECONDS, TimeUnit.SECONDS)\n+                .subscribe(response -> {\n+                    view.onImageUrlFetched(response,position);\n+                }));\n+    }\n+\n+    @Override\n+    public void initSubDepictionList(String qid, Boolean isParentClass) throws IOException {\n+        size = 0;\n+        if (isParentClass) {\n+            compositeDisposable.add(okHttpJsonApiClient.getParentQIDs(qid)\n+                    .subscribeOn(ioScheduler)\n+                    .observeOn(mainThreadScheduler)\n+                    .subscribe(this::handleSuccess, this::handleError));\n+        } else {\n+            compositeDisposable.add(okHttpJsonApiClient.getChildQIDs(qid)\n+                    .subscribeOn(ioScheduler)\n+                    .observeOn(mainThreadScheduler)\n+                    .subscribe(this::handleSuccess, this::handleError));\n+        }\n+\n+    }\n+\n+    @Override\n+    public String getQuery() {\n+        return query;\n+    }\n+\n+    /**\n+     * Handles the success scenario\n+     * it initializes the recycler view by adding items to the adapter\n+     */\n+    public void handleSuccess(List<DepictedItem> mediaList) {\n+        if (mediaList == null || mediaList.isEmpty()) {\n+            if(queryList.isEmpty()){\n+                view.initErrorView();\n+            }else{\n+                view.setIsLastPage(true);\n+            }\n+        } else {\n+            this.queryList.addAll(mediaList);\n+            view.onSuccess(mediaList);\n+            for (DepictedItem m : mediaList) {\n+                fetchThumbnailForEntityId(m.getEntityId(), size++);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Logs and handles API error scenario\n+     */\n+    private void handleError(Throwable throwable) {\n+        Timber.e(throwable, \"Error occurred while loading queried depictions\");\n+        try {\n+            view.initErrorView();\n+            view.showSnackbar();\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM1ODU2OQ==", "bodyText": "We should heavily consider sharing our inspections so people don't repeat these mistakes and get quick fixes\n\n\nI believe timber also has a lint rule", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396358569", "createdAt": "2020-03-23T10:45:04Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/SubClass/SubDepictionListPresenter.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package fr.free.nrw.commons.depictions.SubClass;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Proxy;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import fr.free.nrw.commons.explore.depictions.DepictsClient;\n+import fr.free.nrw.commons.explore.recentsearches.RecentSearch;\n+import fr.free.nrw.commons.explore.recentsearches.RecentSearchesDao;\n+import fr.free.nrw.commons.mwapi.OkHttpJsonApiClient;\n+import fr.free.nrw.commons.upload.structure.depictions.DepictedItem;\n+import io.reactivex.Scheduler;\n+import io.reactivex.android.schedulers.AndroidSchedulers;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.schedulers.Schedulers;\n+import timber.log.Timber;\n+\n+import static fr.free.nrw.commons.di.CommonsApplicationModule.IO_THREAD;\n+import static fr.free.nrw.commons.di.CommonsApplicationModule.MAIN_THREAD;\n+\n+/**\n+* Presenter for parent classes and child classes of Depicted items in Explore\n+ */\n+public class SubDepictionListPresenter implements SubDepictionListContract.UserActionListener {\n+\n+    /**\n+     * This creates a dynamic proxy instance of the class,\n+     * proxy is to control access to the target object\n+     * here our target object is the view.\n+     * Thus we when onDettach method of fragment is called we replace the binding of view to our object with the proxy instance\n+     */\n+    private static final SubDepictionListContract.View DUMMY = (SubDepictionListContract.View) Proxy\n+            .newProxyInstance(\n+                    SubDepictionListContract.View.class.getClassLoader(),\n+                    new Class[]{SubDepictionListContract.View.class},\n+                    (proxy, method, methodArgs) -> null);\n+\n+    private final Scheduler ioScheduler;\n+    private final Scheduler mainThreadScheduler;\n+    private  SubDepictionListContract.View view = DUMMY;\n+    RecentSearchesDao recentSearchesDao;\n+    /**\n+     * Value of the search query\n+     */\n+    public String query;\n+    protected CompositeDisposable compositeDisposable = new CompositeDisposable();\n+    DepictsClient depictsClient;\n+    private static int TIMEOUT_SECONDS = 15;\n+    private List<DepictedItem> queryList = new ArrayList<>();\n+    OkHttpJsonApiClient okHttpJsonApiClient;\n+    /**\n+     * variable used to record the number of API calls already made for fetching Thumbnails\n+     */\n+    private int size = 0;\n+\n+    @Inject\n+    public SubDepictionListPresenter(RecentSearchesDao recentSearchesDao, DepictsClient depictsClient, OkHttpJsonApiClient okHttpJsonApiClient,  @Named(IO_THREAD) Scheduler ioScheduler,\n+                                     @Named(MAIN_THREAD) Scheduler mainThreadScheduler) {\n+        this.recentSearchesDao = recentSearchesDao;\n+        this.ioScheduler = ioScheduler;\n+        this.mainThreadScheduler = mainThreadScheduler;\n+        this.depictsClient = depictsClient;\n+        this.okHttpJsonApiClient = okHttpJsonApiClient;\n+    }\n+    @Override\n+    public void onAttachView(SubDepictionListContract.View view) {\n+        this.view = view;\n+    }\n+\n+    @Override\n+    public void onDetachView() {\n+        this.view = DUMMY;\n+    }\n+\n+    /**\n+     * Store the current query in Recent searches\n+     */\n+    @Override\n+    public void saveQuery() {\n+        RecentSearch recentSearch = recentSearchesDao.find(query);\n+\n+        // Newly searched query...\n+        if (recentSearch == null) {\n+            recentSearch = new RecentSearch(null, query, new Date());\n+        } else {\n+            recentSearch.setLastSearched(new Date());\n+        }\n+        recentSearchesDao.save(recentSearch);\n+    }\n+\n+    /**\n+     * Calls Wikibase APIs to fetch Thumbnail image for a given wikidata item\n+     */\n+    @Override\n+    public void fetchThumbnailForEntityId(String entityId, int position) {\n+        compositeDisposable.add(depictsClient.getP18ForItem(entityId)\n+                .subscribeOn(ioScheduler)\n+                .observeOn(mainThreadScheduler)\n+                .timeout(TIMEOUT_SECONDS, TimeUnit.SECONDS)\n+                .subscribe(response -> {\n+                    view.onImageUrlFetched(response,position);\n+                }));\n+    }\n+\n+    @Override\n+    public void initSubDepictionList(String qid, Boolean isParentClass) throws IOException {\n+        size = 0;\n+        if (isParentClass) {\n+            compositeDisposable.add(okHttpJsonApiClient.getParentQIDs(qid)\n+                    .subscribeOn(ioScheduler)\n+                    .observeOn(mainThreadScheduler)\n+                    .subscribe(this::handleSuccess, this::handleError));\n+        } else {\n+            compositeDisposable.add(okHttpJsonApiClient.getChildQIDs(qid)\n+                    .subscribeOn(ioScheduler)\n+                    .observeOn(mainThreadScheduler)\n+                    .subscribe(this::handleSuccess, this::handleError));\n+        }\n+\n+    }\n+\n+    @Override\n+    public String getQuery() {\n+        return query;\n+    }\n+\n+    /**\n+     * Handles the success scenario\n+     * it initializes the recycler view by adding items to the adapter\n+     */\n+    public void handleSuccess(List<DepictedItem> mediaList) {\n+        if (mediaList == null || mediaList.isEmpty()) {\n+            if(queryList.isEmpty()){\n+                view.initErrorView();\n+            }else{\n+                view.setIsLastPage(true);\n+            }\n+        } else {\n+            this.queryList.addAll(mediaList);\n+            view.onSuccess(mediaList);\n+            for (DepictedItem m : mediaList) {\n+                fetchThumbnailForEntityId(m.getEntityId(), size++);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Logs and handles API error scenario\n+     */\n+    private void handleError(Throwable throwable) {\n+        Timber.e(throwable, \"Error occurred while loading queried depictions\");\n+        try {\n+            view.initErrorView();\n+            view.showSnackbar();\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NDc1NQ=="}, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDkzODcyOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/depictions/WikidataItemDetailsActivity.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMToyODoyOVrOF5sqPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMTo0ODozM1rOF6B6BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NDg2MA==", "bodyText": "Use MVP pattern for this activity.", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396044860", "createdAt": "2020-03-22T01:28:29Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/WikidataItemDetailsActivity.java", "diffHunk": "@@ -0,0 +1,204 @@\n+package fr.free.nrw.commons.depictions;\n+\n+import android.content.Context;\n+import android.content.Intent;\n+import android.os.Bundle;\n+import android.view.View;\n+import android.widget.AdapterView;\n+import android.widget.FrameLayout;\n+\n+import androidx.fragment.app.Fragment;\n+import androidx.fragment.app.FragmentManager;\n+import androidx.viewpager.widget.ViewPager;\n+\n+import com.google.android.material.tabs.TabLayout;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import butterknife.BindView;\n+import butterknife.ButterKnife;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.R;\n+import fr.free.nrw.commons.depictions.Media.DepictedImagesFragment;\n+import fr.free.nrw.commons.depictions.SubClass.SubDepictionListFragment;\n+import fr.free.nrw.commons.explore.ViewPagerAdapter;\n+import fr.free.nrw.commons.media.MediaDetailPagerFragment;\n+import fr.free.nrw.commons.theme.NavigationBaseActivity;\n+import fr.free.nrw.commons.upload.structure.depictions.DepictedItem;\n+\n+/**\n+ * Activity to show depiction media, parent classes and child classes of depicted items in Explore\n+ */\n+public class WikidataItemDetailsActivity extends NavigationBaseActivity implements MediaDetailPagerFragment.MediaDetailProvider, AdapterView.OnItemClickListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM2MDg4Mw==", "bodyText": "I am happy to make minor corrections but this seems too large for the intention of getting this on master to stop further divergence and so it can be improved. I would make a separate ticket.\nPinging @nicolas-raoul for input", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396360883", "createdAt": "2020-03-23T10:49:02Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/WikidataItemDetailsActivity.java", "diffHunk": "@@ -0,0 +1,204 @@\n+package fr.free.nrw.commons.depictions;\n+\n+import android.content.Context;\n+import android.content.Intent;\n+import android.os.Bundle;\n+import android.view.View;\n+import android.widget.AdapterView;\n+import android.widget.FrameLayout;\n+\n+import androidx.fragment.app.Fragment;\n+import androidx.fragment.app.FragmentManager;\n+import androidx.viewpager.widget.ViewPager;\n+\n+import com.google.android.material.tabs.TabLayout;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import butterknife.BindView;\n+import butterknife.ButterKnife;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.R;\n+import fr.free.nrw.commons.depictions.Media.DepictedImagesFragment;\n+import fr.free.nrw.commons.depictions.SubClass.SubDepictionListFragment;\n+import fr.free.nrw.commons.explore.ViewPagerAdapter;\n+import fr.free.nrw.commons.media.MediaDetailPagerFragment;\n+import fr.free.nrw.commons.theme.NavigationBaseActivity;\n+import fr.free.nrw.commons.upload.structure.depictions.DepictedItem;\n+\n+/**\n+ * Activity to show depiction media, parent classes and child classes of depicted items in Explore\n+ */\n+public class WikidataItemDetailsActivity extends NavigationBaseActivity implements MediaDetailPagerFragment.MediaDetailProvider, AdapterView.OnItemClickListener {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NDg2MA=="}, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM5Mjk2NA==", "bodyText": "For this particular branch I am in favor of merging first and fixing later.\nBreaking our long-time rule is for @misaochan to allow/disallow, though.", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396392964", "createdAt": "2020-03-23T11:48:33Z", "author": {"login": "nicolas-raoul"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/WikidataItemDetailsActivity.java", "diffHunk": "@@ -0,0 +1,204 @@\n+package fr.free.nrw.commons.depictions;\n+\n+import android.content.Context;\n+import android.content.Intent;\n+import android.os.Bundle;\n+import android.view.View;\n+import android.widget.AdapterView;\n+import android.widget.FrameLayout;\n+\n+import androidx.fragment.app.Fragment;\n+import androidx.fragment.app.FragmentManager;\n+import androidx.viewpager.widget.ViewPager;\n+\n+import com.google.android.material.tabs.TabLayout;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import butterknife.BindView;\n+import butterknife.ButterKnife;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.R;\n+import fr.free.nrw.commons.depictions.Media.DepictedImagesFragment;\n+import fr.free.nrw.commons.depictions.SubClass.SubDepictionListFragment;\n+import fr.free.nrw.commons.explore.ViewPagerAdapter;\n+import fr.free.nrw.commons.media.MediaDetailPagerFragment;\n+import fr.free.nrw.commons.theme.NavigationBaseActivity;\n+import fr.free.nrw.commons.upload.structure.depictions.DepictedItem;\n+\n+/**\n+ * Activity to show depiction media, parent classes and child classes of depicted items in Explore\n+ */\n+public class WikidataItemDetailsActivity extends NavigationBaseActivity implements MediaDetailPagerFragment.MediaDetailProvider, AdapterView.OnItemClickListener {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NDg2MA=="}, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDk0MTA3OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/depictions/models/Continue.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMTozMzozN1rOF5srSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMDo1MTozMlrOF6ACSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NTEzMQ==", "bodyText": "For the below classes ie. Continue, Query, DepictionResponse i believe that this could be part of MwQueryResponse and MwQueryResult. If yes, please avoid duplicating the classes.", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396045131", "createdAt": "2020-03-22T01:33:37Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/models/Continue.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package fr.free.nrw.commons.depictions.models;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model class for object obtained while parsing depiction response\n+ */\n+public class Continue {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM2MjMxNA==", "bodyText": "I think I am the least qualified person to assess this change as I have very little idea about the structure of the multitude of APIs used", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396362314", "createdAt": "2020-03-23T10:51:32Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/models/Continue.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package fr.free.nrw.commons.depictions.models;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model class for object obtained while parsing depiction response\n+ */\n+public class Continue {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NTEzMQ=="}, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDk0MTIwOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/depictions/models/Search.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMTozNDoxMVrOF5srXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMDo1Mzo1N1rOF6AHvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NTE0OQ==", "bodyText": "I assume that this is just the MwQueryPage class", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396045149", "createdAt": "2020-03-22T01:34:11Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/models/Search.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package fr.free.nrw.commons.depictions.models;\n+\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model class for object obtained while parsing depiction response\n+ * this class contains all the details of for the media object\n+ */\n+\n+public class Search {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM2MzcxMA==", "bodyText": "I see no wordcount or snippet in MwQueryPage so I'll guess \"no\"", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396363710", "createdAt": "2020-03-23T10:53:57Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/models/Search.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package fr.free.nrw.commons.depictions.models;\n+\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model class for object obtained while parsing depiction response\n+ * this class contains all the details of for the media object\n+ */\n+\n+public class Search {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NTE0OQ=="}, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDk0MTQ4OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/depictions/models/Searchinfo.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMTozNTowM1rOF5srgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMDo1NzozNlrOF6AP7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NTE4Ng==", "bodyText": "Are we using totalhits anywhere?", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396045186", "createdAt": "2020-03-22T01:35:03Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/models/Searchinfo.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package fr.free.nrw.commons.depictions.models;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model class for object obtained while parsing query object\n+ */\n+\n+public class Searchinfo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM2NTgwNg==", "bodyText": "No but it raises the 2 camps of network modelling\n\nYou should model the object in its entirety to exactly represent it\nYou should only model what you need\n\nI fall into the first camp even though in general I would consider cutting off my own finger if I thought I would never use it again.", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396365806", "createdAt": "2020-03-23T10:57:36Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/models/Searchinfo.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package fr.free.nrw.commons.depictions.models;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model class for object obtained while parsing query object\n+ */\n+\n+public class Searchinfo {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NTE4Ng=="}, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDk0MjIxOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/di/NetworkingModule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMTozNjo0OVrOF5sr4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMTozNjo0OVrOF5sr4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NTI4MA==", "bodyText": "Use NAMED_COMMONS_WIKI_SITE. It already exists", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396045280", "createdAt": "2020-03-22T01:36:49Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/di/NetworkingModule.java", "diffHunk": "@@ -133,6 +138,13 @@ public WikiSite provideWikidataWikiSite() {\n         return new WikiSite(BuildConfig.WIKIDATA_URL);\n     }\n \n+    @Provides\n+    @Singleton\n+    @Named(NAMED_COMMONS_WIKI)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDk0MzQ1OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/explore/depictions/DepictsClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMTozOTo1OVrOF5ssgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMTowMzowNlrOF6AbvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NTQ0MA==", "bodyText": "I don't think that this is the right way of getting the thumbnail. It might not work for all images.  imageInfo API can be used to fetch the thumbnail.", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396045440", "createdAt": "2020-03-22T01:39:59Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/explore/depictions/DepictsClient.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package fr.free.nrw.commons.explore.depictions;\n+\n+import androidx.annotation.Nullable;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonPrimitive;\n+\n+\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import fr.free.nrw.commons.BuildConfig;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.depictions.models.Search;\n+import fr.free.nrw.commons.media.MediaInterface;\n+import fr.free.nrw.commons.upload.depicts.DepictsInterface;\n+import fr.free.nrw.commons.upload.structure.depictions.DepictedItem;\n+import fr.free.nrw.commons.utils.CommonsDateUtil;\n+import io.reactivex.Observable;\n+import io.reactivex.Single;\n+\n+/**\n+ * Depicts Client to handle custom calls to Commons Wikibase APIs\n+ */\n+@Singleton\n+public class DepictsClient {\n+\n+    private final DepictsInterface depictsInterface;\n+    private final MediaInterface mediaInterface;\n+    private static final String NO_DEPICTED_IMAGE = \"No Image for Depiction\";\n+\n+    @Inject\n+    public DepictsClient(DepictsInterface depictsInterface, MediaInterface mediaInterface) {\n+        this.depictsInterface = depictsInterface;\n+        this.mediaInterface = mediaInterface;\n+    }\n+\n+    /**\n+     * Search for depictions using the search item\n+     * @return list of depicted items\n+     */\n+    public Observable<DepictedItem> searchForDepictions(String query, int limit, int offset) {\n+        return depictsInterface.searchForDepicts(\n+                query,\n+                String.valueOf(limit),\n+                Locale.getDefault().getLanguage(),\n+                Locale.getDefault().getLanguage(),\n+                String.valueOf(offset)\n+        )\n+                .flatMap(depictSearchResponse ->Observable.fromIterable(depictSearchResponse.getSearch()))\n+                .map(DepictedItem::new);\n+    }\n+\n+    /**\n+     * Get URL for image using image name\n+     * Ex: title = Guion Bluford\n+     * Url = https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/Guion_Bluford.jpg/70px-Guion_Bluford.jpg\n+     */\n+    private String getThumbnailUrl(String title) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM2ODgyOA==", "bodyText": "I will need more information to implement this, is there an example usage somewhere", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396368828", "createdAt": "2020-03-23T11:03:06Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/explore/depictions/DepictsClient.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package fr.free.nrw.commons.explore.depictions;\n+\n+import androidx.annotation.Nullable;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonPrimitive;\n+\n+\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import fr.free.nrw.commons.BuildConfig;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.depictions.models.Search;\n+import fr.free.nrw.commons.media.MediaInterface;\n+import fr.free.nrw.commons.upload.depicts.DepictsInterface;\n+import fr.free.nrw.commons.upload.structure.depictions.DepictedItem;\n+import fr.free.nrw.commons.utils.CommonsDateUtil;\n+import io.reactivex.Observable;\n+import io.reactivex.Single;\n+\n+/**\n+ * Depicts Client to handle custom calls to Commons Wikibase APIs\n+ */\n+@Singleton\n+public class DepictsClient {\n+\n+    private final DepictsInterface depictsInterface;\n+    private final MediaInterface mediaInterface;\n+    private static final String NO_DEPICTED_IMAGE = \"No Image for Depiction\";\n+\n+    @Inject\n+    public DepictsClient(DepictsInterface depictsInterface, MediaInterface mediaInterface) {\n+        this.depictsInterface = depictsInterface;\n+        this.mediaInterface = mediaInterface;\n+    }\n+\n+    /**\n+     * Search for depictions using the search item\n+     * @return list of depicted items\n+     */\n+    public Observable<DepictedItem> searchForDepictions(String query, int limit, int offset) {\n+        return depictsInterface.searchForDepicts(\n+                query,\n+                String.valueOf(limit),\n+                Locale.getDefault().getLanguage(),\n+                Locale.getDefault().getLanguage(),\n+                String.valueOf(offset)\n+        )\n+                .flatMap(depictSearchResponse ->Observable.fromIterable(depictSearchResponse.getSearch()))\n+                .map(DepictedItem::new);\n+    }\n+\n+    /**\n+     * Get URL for image using image name\n+     * Ex: title = Guion Bluford\n+     * Url = https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/Guion_Bluford.jpg/70px-Guion_Bluford.jpg\n+     */\n+    private String getThumbnailUrl(String title) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NTQ0MA=="}, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDk0NDYzOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/explore/depictions/DepictsClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMTo0Mjo1NFrOF5stHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMTowNToyOFrOF6Agdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NTU5OA==", "bodyText": "Please define concrete classes instead of using JsonObject. I guess I have already added some of these classes in my PR #3449. I will base my PR on structured-data branch and you could reuse it.", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396045598", "createdAt": "2020-03-22T01:42:54Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/explore/depictions/DepictsClient.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package fr.free.nrw.commons.explore.depictions;\n+\n+import androidx.annotation.Nullable;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonPrimitive;\n+\n+\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import fr.free.nrw.commons.BuildConfig;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.depictions.models.Search;\n+import fr.free.nrw.commons.media.MediaInterface;\n+import fr.free.nrw.commons.upload.depicts.DepictsInterface;\n+import fr.free.nrw.commons.upload.structure.depictions.DepictedItem;\n+import fr.free.nrw.commons.utils.CommonsDateUtil;\n+import io.reactivex.Observable;\n+import io.reactivex.Single;\n+\n+/**\n+ * Depicts Client to handle custom calls to Commons Wikibase APIs\n+ */\n+@Singleton\n+public class DepictsClient {\n+\n+    private final DepictsInterface depictsInterface;\n+    private final MediaInterface mediaInterface;\n+    private static final String NO_DEPICTED_IMAGE = \"No Image for Depiction\";\n+\n+    @Inject\n+    public DepictsClient(DepictsInterface depictsInterface, MediaInterface mediaInterface) {\n+        this.depictsInterface = depictsInterface;\n+        this.mediaInterface = mediaInterface;\n+    }\n+\n+    /**\n+     * Search for depictions using the search item\n+     * @return list of depicted items\n+     */\n+    public Observable<DepictedItem> searchForDepictions(String query, int limit, int offset) {\n+        return depictsInterface.searchForDepicts(\n+                query,\n+                String.valueOf(limit),\n+                Locale.getDefault().getLanguage(),\n+                Locale.getDefault().getLanguage(),\n+                String.valueOf(offset)\n+        )\n+                .flatMap(depictSearchResponse ->Observable.fromIterable(depictSearchResponse.getSearch()))\n+                .map(DepictedItem::new);\n+    }\n+\n+    /**\n+     * Get URL for image using image name\n+     * Ex: title = Guion Bluford\n+     * Url = https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/Guion_Bluford.jpg/70px-Guion_Bluford.jpg\n+     */\n+    private String getThumbnailUrl(String title) {\n+        String baseUrl = \"https://upload.wikimedia.org/wikipedia/commons/thumb/\";\n+        title = title.replace(\" \", \"_\");\n+        String MD5Hash =  getMd5(title);\n+        /**\n+         * We use 70 pixels as the size of our Thumbnail (as it is the perfect fits our UI)\n+         */\n+        return baseUrl + MD5Hash.charAt(0) + '/' + MD5Hash.charAt(0) + MD5Hash.charAt(1) + '/' + title + \"/70px-\" + title;\n+    }\n+\n+    /**\n+     * Ex: entityId = Q357458\n+     * value returned = Elgin Baylor Night program.jpeg\n+     */\n+    public Single<String> getP18ForItem(String entityId) {\n+        return depictsInterface.getImageForEntity(entityId)\n+                .map(commonsFilename -> {\n+                    String name;\n+                    try {\n+                        JsonObject claims = commonsFilename.getAsJsonObject(\"claims\").getAsJsonObject();\n+                        JsonObject p18 = claims.get(\"P18\").getAsJsonArray().get(0).getAsJsonObject();\n+                        JsonObject mainsnak = p18.get(\"mainsnak\").getAsJsonObject();\n+                        JsonObject datavalue = mainsnak.get(\"datavalue\").getAsJsonObject();\n+                        JsonPrimitive value = datavalue.get(\"value\").getAsJsonPrimitive();\n+                        name = value.toString();\n+                        name = name.substring(1, name.length() - 1);\n+                    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM3MDAzOQ==", "bodyText": "This was done as a shortcut originally approved by nicolas If I remember my first investigation of rewriting these to use gson. I think this can be done later. I could find no satisfactory model definitions if I am remembering this corectly", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396370039", "createdAt": "2020-03-23T11:05:28Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/explore/depictions/DepictsClient.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package fr.free.nrw.commons.explore.depictions;\n+\n+import androidx.annotation.Nullable;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonPrimitive;\n+\n+\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import fr.free.nrw.commons.BuildConfig;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.depictions.models.Search;\n+import fr.free.nrw.commons.media.MediaInterface;\n+import fr.free.nrw.commons.upload.depicts.DepictsInterface;\n+import fr.free.nrw.commons.upload.structure.depictions.DepictedItem;\n+import fr.free.nrw.commons.utils.CommonsDateUtil;\n+import io.reactivex.Observable;\n+import io.reactivex.Single;\n+\n+/**\n+ * Depicts Client to handle custom calls to Commons Wikibase APIs\n+ */\n+@Singleton\n+public class DepictsClient {\n+\n+    private final DepictsInterface depictsInterface;\n+    private final MediaInterface mediaInterface;\n+    private static final String NO_DEPICTED_IMAGE = \"No Image for Depiction\";\n+\n+    @Inject\n+    public DepictsClient(DepictsInterface depictsInterface, MediaInterface mediaInterface) {\n+        this.depictsInterface = depictsInterface;\n+        this.mediaInterface = mediaInterface;\n+    }\n+\n+    /**\n+     * Search for depictions using the search item\n+     * @return list of depicted items\n+     */\n+    public Observable<DepictedItem> searchForDepictions(String query, int limit, int offset) {\n+        return depictsInterface.searchForDepicts(\n+                query,\n+                String.valueOf(limit),\n+                Locale.getDefault().getLanguage(),\n+                Locale.getDefault().getLanguage(),\n+                String.valueOf(offset)\n+        )\n+                .flatMap(depictSearchResponse ->Observable.fromIterable(depictSearchResponse.getSearch()))\n+                .map(DepictedItem::new);\n+    }\n+\n+    /**\n+     * Get URL for image using image name\n+     * Ex: title = Guion Bluford\n+     * Url = https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/Guion_Bluford.jpg/70px-Guion_Bluford.jpg\n+     */\n+    private String getThumbnailUrl(String title) {\n+        String baseUrl = \"https://upload.wikimedia.org/wikipedia/commons/thumb/\";\n+        title = title.replace(\" \", \"_\");\n+        String MD5Hash =  getMd5(title);\n+        /**\n+         * We use 70 pixels as the size of our Thumbnail (as it is the perfect fits our UI)\n+         */\n+        return baseUrl + MD5Hash.charAt(0) + '/' + MD5Hash.charAt(0) + MD5Hash.charAt(1) + '/' + title + \"/70px-\" + title;\n+    }\n+\n+    /**\n+     * Ex: entityId = Q357458\n+     * value returned = Elgin Baylor Night program.jpeg\n+     */\n+    public Single<String> getP18ForItem(String entityId) {\n+        return depictsInterface.getImageForEntity(entityId)\n+                .map(commonsFilename -> {\n+                    String name;\n+                    try {\n+                        JsonObject claims = commonsFilename.getAsJsonObject(\"claims\").getAsJsonObject();\n+                        JsonObject p18 = claims.get(\"P18\").getAsJsonArray().get(0).getAsJsonObject();\n+                        JsonObject mainsnak = p18.get(\"mainsnak\").getAsJsonObject();\n+                        JsonObject datavalue = mainsnak.get(\"datavalue\").getAsJsonObject();\n+                        JsonPrimitive value = datavalue.get(\"value\").getAsJsonPrimitive();\n+                        name = value.toString();\n+                        name = name.substring(1, name.length() - 1);\n+                    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NTU5OA=="}, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDk0NTA5OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/explore/depictions/DepictsClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMTo0NDozNVrOF5stWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMTo0NDozNVrOF5stWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NTY1OA==", "bodyText": "IMO this is not the right way of getting the image url. It could lead to errors. I remember running into issues with such URL formations in media details screen.", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396045658", "createdAt": "2020-03-22T01:44:35Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/explore/depictions/DepictsClient.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package fr.free.nrw.commons.explore.depictions;\n+\n+import androidx.annotation.Nullable;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonPrimitive;\n+\n+\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import fr.free.nrw.commons.BuildConfig;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.depictions.models.Search;\n+import fr.free.nrw.commons.media.MediaInterface;\n+import fr.free.nrw.commons.upload.depicts.DepictsInterface;\n+import fr.free.nrw.commons.upload.structure.depictions.DepictedItem;\n+import fr.free.nrw.commons.utils.CommonsDateUtil;\n+import io.reactivex.Observable;\n+import io.reactivex.Single;\n+\n+/**\n+ * Depicts Client to handle custom calls to Commons Wikibase APIs\n+ */\n+@Singleton\n+public class DepictsClient {\n+\n+    private final DepictsInterface depictsInterface;\n+    private final MediaInterface mediaInterface;\n+    private static final String NO_DEPICTED_IMAGE = \"No Image for Depiction\";\n+\n+    @Inject\n+    public DepictsClient(DepictsInterface depictsInterface, MediaInterface mediaInterface) {\n+        this.depictsInterface = depictsInterface;\n+        this.mediaInterface = mediaInterface;\n+    }\n+\n+    /**\n+     * Search for depictions using the search item\n+     * @return list of depicted items\n+     */\n+    public Observable<DepictedItem> searchForDepictions(String query, int limit, int offset) {\n+        return depictsInterface.searchForDepicts(\n+                query,\n+                String.valueOf(limit),\n+                Locale.getDefault().getLanguage(),\n+                Locale.getDefault().getLanguage(),\n+                String.valueOf(offset)\n+        )\n+                .flatMap(depictSearchResponse ->Observable.fromIterable(depictSearchResponse.getSearch()))\n+                .map(DepictedItem::new);\n+    }\n+\n+    /**\n+     * Get URL for image using image name\n+     * Ex: title = Guion Bluford\n+     * Url = https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/Guion_Bluford.jpg/70px-Guion_Bluford.jpg\n+     */\n+    private String getThumbnailUrl(String title) {\n+        String baseUrl = \"https://upload.wikimedia.org/wikipedia/commons/thumb/\";\n+        title = title.replace(\" \", \"_\");\n+        String MD5Hash =  getMd5(title);\n+        /**\n+         * We use 70 pixels as the size of our Thumbnail (as it is the perfect fits our UI)\n+         */\n+        return baseUrl + MD5Hash.charAt(0) + '/' + MD5Hash.charAt(0) + MD5Hash.charAt(1) + '/' + title + \"/70px-\" + title;\n+    }\n+\n+    /**\n+     * Ex: entityId = Q357458\n+     * value returned = Elgin Baylor Night program.jpeg\n+     */\n+    public Single<String> getP18ForItem(String entityId) {\n+        return depictsInterface.getImageForEntity(entityId)\n+                .map(commonsFilename -> {\n+                    String name;\n+                    try {\n+                        JsonObject claims = commonsFilename.getAsJsonObject(\"claims\").getAsJsonObject();\n+                        JsonObject p18 = claims.get(\"P18\").getAsJsonArray().get(0).getAsJsonObject();\n+                        JsonObject mainsnak = p18.get(\"mainsnak\").getAsJsonObject();\n+                        JsonObject datavalue = mainsnak.get(\"datavalue\").getAsJsonObject();\n+                        JsonPrimitive value = datavalue.get(\"value\").getAsJsonPrimitive();\n+                        name = value.toString();\n+                        name = name.substring(1, name.length() - 1);\n+                    } catch (Exception e) {\n+                        name=\"\";\n+                    }\n+                    if (!name.isEmpty()){\n+                        return getThumbnailUrl(name);\n+                    } else return NO_DEPICTED_IMAGE;\n+                })\n+                .singleOrError();\n+    }\n+\n+    /**\n+     * @return list of images for a particular depict entity\n+     */\n+    public Observable<List<Media>> fetchImagesForDepictedItem(String query, int limit, int sroffset) {\n+        return mediaInterface.fetchImagesForDepictedItem(\"haswbstatement:\" + BuildConfig.DEPICTS_PROPERTY + \"=\" + query, String.valueOf(sroffset))\n+                .map(mwQueryResponse -> {\n+                    List<Media> mediaList =  new ArrayList<>();\n+                    for (Search s: mwQueryResponse.getQuery().getSearch()) {\n+                        Media media = new Media(null,\n+                                getUrl(s.getTitle()),\n+                                s.getTitle(),\n+                                new HashMap<>(),\n+                                \"\",\n+                                0,\n+                                safeParseDate(s.getTimestamp()),\n+                                safeParseDate(s.getTimestamp()),\n+                                \"\"\n+                        );\n+                        mediaList.add(media);\n+                    }\n+                    return mediaList;\n+                });\n+    }\n+\n+    /**\n+     * Get url for the image from media of depictions\n+     * Ex: Tiger_Woods\n+     * Value: https://upload.wikimedia.org/wikipedia/commons/thumb/6/67/Tiger_Woods.jpg/70px-Tiger_Woods.jpg\n+     */\n+    private String getUrl(String title) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDk0NTY2OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/explore/depictions/DepictsClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMTo0NjowMlrOF5stow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMTowODo1MlrOF6Anaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NTczMQ==", "bodyText": "Please check if mediaInterface.fetchImagesForDepictedItem is actually required or one of the existing MediaClient methods could be reused.", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396045731", "createdAt": "2020-03-22T01:46:02Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/explore/depictions/DepictsClient.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package fr.free.nrw.commons.explore.depictions;\n+\n+import androidx.annotation.Nullable;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonPrimitive;\n+\n+\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import fr.free.nrw.commons.BuildConfig;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.depictions.models.Search;\n+import fr.free.nrw.commons.media.MediaInterface;\n+import fr.free.nrw.commons.upload.depicts.DepictsInterface;\n+import fr.free.nrw.commons.upload.structure.depictions.DepictedItem;\n+import fr.free.nrw.commons.utils.CommonsDateUtil;\n+import io.reactivex.Observable;\n+import io.reactivex.Single;\n+\n+/**\n+ * Depicts Client to handle custom calls to Commons Wikibase APIs\n+ */\n+@Singleton\n+public class DepictsClient {\n+\n+    private final DepictsInterface depictsInterface;\n+    private final MediaInterface mediaInterface;\n+    private static final String NO_DEPICTED_IMAGE = \"No Image for Depiction\";\n+\n+    @Inject\n+    public DepictsClient(DepictsInterface depictsInterface, MediaInterface mediaInterface) {\n+        this.depictsInterface = depictsInterface;\n+        this.mediaInterface = mediaInterface;\n+    }\n+\n+    /**\n+     * Search for depictions using the search item\n+     * @return list of depicted items\n+     */\n+    public Observable<DepictedItem> searchForDepictions(String query, int limit, int offset) {\n+        return depictsInterface.searchForDepicts(\n+                query,\n+                String.valueOf(limit),\n+                Locale.getDefault().getLanguage(),\n+                Locale.getDefault().getLanguage(),\n+                String.valueOf(offset)\n+        )\n+                .flatMap(depictSearchResponse ->Observable.fromIterable(depictSearchResponse.getSearch()))\n+                .map(DepictedItem::new);\n+    }\n+\n+    /**\n+     * Get URL for image using image name\n+     * Ex: title = Guion Bluford\n+     * Url = https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/Guion_Bluford.jpg/70px-Guion_Bluford.jpg\n+     */\n+    private String getThumbnailUrl(String title) {\n+        String baseUrl = \"https://upload.wikimedia.org/wikipedia/commons/thumb/\";\n+        title = title.replace(\" \", \"_\");\n+        String MD5Hash =  getMd5(title);\n+        /**\n+         * We use 70 pixels as the size of our Thumbnail (as it is the perfect fits our UI)\n+         */\n+        return baseUrl + MD5Hash.charAt(0) + '/' + MD5Hash.charAt(0) + MD5Hash.charAt(1) + '/' + title + \"/70px-\" + title;\n+    }\n+\n+    /**\n+     * Ex: entityId = Q357458\n+     * value returned = Elgin Baylor Night program.jpeg\n+     */\n+    public Single<String> getP18ForItem(String entityId) {\n+        return depictsInterface.getImageForEntity(entityId)\n+                .map(commonsFilename -> {\n+                    String name;\n+                    try {\n+                        JsonObject claims = commonsFilename.getAsJsonObject(\"claims\").getAsJsonObject();\n+                        JsonObject p18 = claims.get(\"P18\").getAsJsonArray().get(0).getAsJsonObject();\n+                        JsonObject mainsnak = p18.get(\"mainsnak\").getAsJsonObject();\n+                        JsonObject datavalue = mainsnak.get(\"datavalue\").getAsJsonObject();\n+                        JsonPrimitive value = datavalue.get(\"value\").getAsJsonPrimitive();\n+                        name = value.toString();\n+                        name = name.substring(1, name.length() - 1);\n+                    } catch (Exception e) {\n+                        name=\"\";\n+                    }\n+                    if (!name.isEmpty()){\n+                        return getThumbnailUrl(name);\n+                    } else return NO_DEPICTED_IMAGE;\n+                })\n+                .singleOrError();\n+    }\n+\n+    /**\n+     * @return list of images for a particular depict entity\n+     */\n+    public Observable<List<Media>> fetchImagesForDepictedItem(String query, int limit, int sroffset) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM3MTgxOQ==", "bodyText": "I couldn't say", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396371819", "createdAt": "2020-03-23T11:08:52Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/explore/depictions/DepictsClient.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package fr.free.nrw.commons.explore.depictions;\n+\n+import androidx.annotation.Nullable;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonPrimitive;\n+\n+\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import fr.free.nrw.commons.BuildConfig;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.depictions.models.Search;\n+import fr.free.nrw.commons.media.MediaInterface;\n+import fr.free.nrw.commons.upload.depicts.DepictsInterface;\n+import fr.free.nrw.commons.upload.structure.depictions.DepictedItem;\n+import fr.free.nrw.commons.utils.CommonsDateUtil;\n+import io.reactivex.Observable;\n+import io.reactivex.Single;\n+\n+/**\n+ * Depicts Client to handle custom calls to Commons Wikibase APIs\n+ */\n+@Singleton\n+public class DepictsClient {\n+\n+    private final DepictsInterface depictsInterface;\n+    private final MediaInterface mediaInterface;\n+    private static final String NO_DEPICTED_IMAGE = \"No Image for Depiction\";\n+\n+    @Inject\n+    public DepictsClient(DepictsInterface depictsInterface, MediaInterface mediaInterface) {\n+        this.depictsInterface = depictsInterface;\n+        this.mediaInterface = mediaInterface;\n+    }\n+\n+    /**\n+     * Search for depictions using the search item\n+     * @return list of depicted items\n+     */\n+    public Observable<DepictedItem> searchForDepictions(String query, int limit, int offset) {\n+        return depictsInterface.searchForDepicts(\n+                query,\n+                String.valueOf(limit),\n+                Locale.getDefault().getLanguage(),\n+                Locale.getDefault().getLanguage(),\n+                String.valueOf(offset)\n+        )\n+                .flatMap(depictSearchResponse ->Observable.fromIterable(depictSearchResponse.getSearch()))\n+                .map(DepictedItem::new);\n+    }\n+\n+    /**\n+     * Get URL for image using image name\n+     * Ex: title = Guion Bluford\n+     * Url = https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/Guion_Bluford.jpg/70px-Guion_Bluford.jpg\n+     */\n+    private String getThumbnailUrl(String title) {\n+        String baseUrl = \"https://upload.wikimedia.org/wikipedia/commons/thumb/\";\n+        title = title.replace(\" \", \"_\");\n+        String MD5Hash =  getMd5(title);\n+        /**\n+         * We use 70 pixels as the size of our Thumbnail (as it is the perfect fits our UI)\n+         */\n+        return baseUrl + MD5Hash.charAt(0) + '/' + MD5Hash.charAt(0) + MD5Hash.charAt(1) + '/' + title + \"/70px-\" + title;\n+    }\n+\n+    /**\n+     * Ex: entityId = Q357458\n+     * value returned = Elgin Baylor Night program.jpeg\n+     */\n+    public Single<String> getP18ForItem(String entityId) {\n+        return depictsInterface.getImageForEntity(entityId)\n+                .map(commonsFilename -> {\n+                    String name;\n+                    try {\n+                        JsonObject claims = commonsFilename.getAsJsonObject(\"claims\").getAsJsonObject();\n+                        JsonObject p18 = claims.get(\"P18\").getAsJsonArray().get(0).getAsJsonObject();\n+                        JsonObject mainsnak = p18.get(\"mainsnak\").getAsJsonObject();\n+                        JsonObject datavalue = mainsnak.get(\"datavalue\").getAsJsonObject();\n+                        JsonPrimitive value = datavalue.get(\"value\").getAsJsonPrimitive();\n+                        name = value.toString();\n+                        name = name.substring(1, name.length() - 1);\n+                    } catch (Exception e) {\n+                        name=\"\";\n+                    }\n+                    if (!name.isEmpty()){\n+                        return getThumbnailUrl(name);\n+                    } else return NO_DEPICTED_IMAGE;\n+                })\n+                .singleOrError();\n+    }\n+\n+    /**\n+     * @return list of images for a particular depict entity\n+     */\n+    public Observable<List<Media>> fetchImagesForDepictedItem(String query, int limit, int sroffset) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NTczMQ=="}, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDk0NTkyOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/explore/depictions/SearchDepictionsFragmentPresenter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMTo0NzowN1rOF5stxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMTo0NzowN1rOF5stxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NTc2NA==", "bodyText": "Check error handling", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396045764", "createdAt": "2020-03-22T01:47:07Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/explore/depictions/SearchDepictionsFragmentPresenter.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package fr.free.nrw.commons.explore.depictions;\n+\n+import java.lang.reflect.Proxy;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import fr.free.nrw.commons.di.CommonsDaggerSupportFragment;\n+import fr.free.nrw.commons.explore.recentsearches.RecentSearch;\n+import fr.free.nrw.commons.explore.recentsearches.RecentSearchesDao;\n+import fr.free.nrw.commons.kvstore.JsonKvStore;\n+import fr.free.nrw.commons.upload.structure.depictions.DepictedItem;\n+\n+import io.reactivex.Scheduler;\n+import io.reactivex.disposables.CompositeDisposable;\n+import timber.log.Timber;\n+\n+import static fr.free.nrw.commons.di.CommonsApplicationModule.IO_THREAD;\n+import static fr.free.nrw.commons.di.CommonsApplicationModule.MAIN_THREAD;\n+\n+/**\n+ * The presenter class for SearchDepictionsFragment\n+ */\n+public class SearchDepictionsFragmentPresenter extends CommonsDaggerSupportFragment implements SearchDepictionsFragmentContract.UserActionListener {\n+\n+    /**\n+     * This creates a dynamic proxy instance of the class,\n+     * proxy is to control access to the target object\n+     * here our target object is the view.\n+     * Thus we when onDettach method of fragment is called we replace the binding of view to our object with the proxy instance\n+     */\n+    private static final SearchDepictionsFragmentContract.View DUMMY = (SearchDepictionsFragmentContract.View) Proxy\n+            .newProxyInstance(\n+                    SearchDepictionsFragmentContract.View.class.getClassLoader(),\n+                    new Class[]{SearchDepictionsFragmentContract.View.class},\n+                    (proxy, method, methodArgs) -> null);\n+    private static int TIMEOUT_SECONDS = 15;\n+    protected CompositeDisposable compositeDisposable = new CompositeDisposable();\n+    private final Scheduler ioScheduler;\n+    private final Scheduler mainThreadScheduler;\n+\n+    boolean isLoadingDepictions;\n+    String query;\n+    RecentSearchesDao recentSearchesDao;\n+    DepictsClient depictsClient;\n+    JsonKvStore basicKvStore;\n+    private SearchDepictionsFragmentContract.View view = DUMMY;\n+    private List<DepictedItem> queryList = new ArrayList<>();\n+    int offset=0;\n+    int size = 0;\n+\n+    @Inject\n+    public SearchDepictionsFragmentPresenter(@Named(\"default_preferences\") JsonKvStore basicKvStore,\n+                                             RecentSearchesDao recentSearchesDao,\n+                                             DepictsClient depictsClient,\n+                                             @Named(IO_THREAD) Scheduler ioScheduler,\n+                                             @Named(MAIN_THREAD) Scheduler mainThreadScheduler) {\n+        this.basicKvStore = basicKvStore;\n+        this.recentSearchesDao = recentSearchesDao;\n+        this.depictsClient = depictsClient;\n+        this.ioScheduler = ioScheduler;\n+        this.mainThreadScheduler = mainThreadScheduler;\n+    }\n+\n+    @Override\n+    public void onAttachView(SearchDepictionsFragmentContract.View view) {\n+        this.view = view;\n+    }\n+\n+    @Override\n+    public void onDetachView() {\n+        this.view = DUMMY;\n+    }\n+\n+    /**\n+     * Called when user selects \"Items\" from Search Activity\n+     * to load the list of depictions from API\n+     *\n+     * @param query string searched in the Explore Activity\n+     * @param reInitialise\n+     */\n+    @Override\n+    public void updateDepictionList(String query, int pageSize, boolean reInitialise) {\n+        this.query = query;\n+        view.loadingDepictions();\n+        if (reInitialise) {\n+            size = 0;\n+        }\n+        saveQuery();\n+        compositeDisposable.add(depictsClient.searchForDepictions(query, 25, offset)\n+                .subscribeOn(ioScheduler)\n+                .observeOn(mainThreadScheduler)\n+                .timeout(TIMEOUT_SECONDS, TimeUnit.SECONDS)\n+                .doOnSubscribe(disposable -> saveQuery())\n+                .collect(ArrayList<DepictedItem>::new, ArrayList::add)\n+                .subscribe(this::handleSuccess, this::handleError));\n+    }\n+\n+    /**\n+     * Logs and handles API error scenario\n+     */\n+    private void handleError(Throwable throwable) {\n+        Timber.e(throwable, \"Error occurred while loading queried depictions\");\n+        try {\n+            view.initErrorView();\n+            view.showSnackbar();\n+        } catch (Exception e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDk0NjIwOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/explore/images/SearchImageFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMTo0NzozN1rOF5st5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMTo0NzozN1rOF5st5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NTc5Ng==", "bodyText": "Use meaningful variable names", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396045796", "createdAt": "2020-03-22T01:47:37Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/explore/images/SearchImageFragment.java", "diffHunk": "@@ -198,10 +203,36 @@ private void handleSuccess(List<Media> mediaList) {\n             progressBar.setVisibility(GONE);\n             imagesAdapter.addAll(mediaList);\n             imagesAdapter.notifyDataSetChanged();\n-            ((SearchActivity) getContext()).viewPagerNotifyDataSetChanged();\n+            ((SearchActivity)getContext()).viewPagerNotifyDataSetChanged();\n+            for (Media m : mediaList) {\n+                replaceTitlesWithCaptions(\"M\"+m.getPageId(), mediaSize++);\n+            }\n         }\n     }\n \n+    /**\n+     * In explore we first show title and simultaneously call the API to retrieve captions\n+     * When captions are retrieved they replace title\n+     */\n+\n+        public void replaceTitlesWithCaptions(String wikibaseIdentifier, int i) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDk0NzEyOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/media/MediaClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMTo0OTo1NFrOF5suWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMTo0OTo1NFrOF5suWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NTkxMw==", "bodyText": "Wow this method looks scary. I guess it can be simplified.", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396045913", "createdAt": "2020-03-22T01:49:54Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/media/MediaClient.java", "diffHunk": "@@ -160,4 +178,143 @@ public MediaClient(MediaInterface mediaInterface) {\n                 .map(MwParseResult::text)\n                 .first(\"\");\n     }\n-}\n+\n+\n+    /**\n+     * @return  caption for image using wikibaseIdentifier\n+     */\n+    public Single<String> getCaptionByWikibaseIdentifier(String wikibaseIdentifier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDk0NzIwOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/media/MediaClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMTo1MDoxN1rOF5suZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMTo1MDoxN1rOF5suZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NTkyNw==", "bodyText": "Please define and use concrete classes.", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396045927", "createdAt": "2020-03-22T01:50:17Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/media/MediaClient.java", "diffHunk": "@@ -160,4 +178,143 @@ public MediaClient(MediaInterface mediaInterface) {\n                 .map(MwParseResult::text)\n                 .first(\"\");\n     }\n-}\n+\n+\n+    /**\n+     * @return  caption for image using wikibaseIdentifier\n+     */\n+    public Single<String> getCaptionByWikibaseIdentifier(String wikibaseIdentifier) {\n+        return mediaDetailInterface.getCaptionForImage(Locale.getDefault().getLanguage(), wikibaseIdentifier)\n+                .map(mediaDetailResponse -> {\n+                    if (mediaDetailResponse != null && mediaDetailResponse.getSuccess() != null && mediaDetailResponse.getSuccess() == 1 && mediaDetailResponse.getEntities() != null) {\n+                        Map<String, CommonsWikibaseItem> entities = mediaDetailResponse.getEntities();\n+                        try {\n+                            Map.Entry<String, CommonsWikibaseItem> entry = entities.entrySet().iterator().next();\n+                            CommonsWikibaseItem commonsWikibaseItem = entry.getValue();\n+                                Map<String, Caption> labels = commonsWikibaseItem.getLabels();\n+                                Map.Entry<String, Caption> captionEntry = labels.entrySet().iterator().next();\n+                                Caption caption = captionEntry.getValue();\n+                                return caption.getValue();\n+\n+                        } catch (Exception e) {\n+                            return NO_CAPTION;\n+                        }\n+                    }\n+                        return NO_CAPTION;\n+\n+                })\n+                .singleOrError();\n+    }\n+\n+    /**\n+     * Fetches Structured data from API\n+     *\n+     * @param filename\n+     * @return a map containing caption and depictions (empty string in the map if no caption/depictions)\n+     */\n+    public Single<JsonObject> getCaptionAndDepictions(String filename)  {\n+        return mediaDetailInterface.fetchStructuredDataByFilename(Locale.getDefault().getLanguage(), filename)\n+                .map(mediaDetailResponse -> {\n+                        return fetchCaptionandDepictionsFromMediaDetailResponse(mediaDetailResponse);\n+                })\n+                .singleOrError();\n+    }\n+\n+    /**\n+     * Parses the mediaDetailResponse from API to extract captions and depictions\n+     * @param mediaDetailResponse Response obtained from API for Media Details\n+     * @return a map containing caption and depictions (empty string in the map if no caption/depictions)\n+     */\n+    @SuppressLint(\"CheckResult\")\n+    private JsonObject fetchCaptionandDepictionsFromMediaDetailResponse(MediaDetailResponse mediaDetailResponse) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDk0Nzg3OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/mwapi/OkHttpJsonApiClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMTo1MjowNlrOF5suuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMTo1MjowNlrOF5suuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NjAwOA==", "bodyText": "Define concrete classes", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396046008", "createdAt": "2020-03-22T01:52:06Z", "author": {"login": "maskaravivek"}, "path": "app/src/main/java/fr/free/nrw/commons/mwapi/OkHttpJsonApiClient.java", "diffHunk": "@@ -208,6 +213,94 @@ public OkHttpJsonApiClient(OkHttpClient okHttpClient,\n         });\n     }\n \n+    /**\n+     * Get the QIDs of all Wikidata items that are subclasses of the given Wikidata item.\n+     * Example: bridge -> suspended bridge, aqueduct, etc\n+     */\n+    public Observable<ArrayList<DepictedItem>> getChildQIDs(String qid) throws IOException {\n+        String queryString = FileUtils.readFromResource(\"/queries/subclasses_query.rq\");\n+        String query = queryString.\n+                replace(\"${QID}\", qid)\n+                .replace(\"${LANG}\", \"\\\"\"+Locale.getDefault().getLanguage()+\"\\\"\");\n+        Timber.e(query);\n+        HttpUrl.Builder urlBuilder = HttpUrl\n+                .parse(sparqlQueryUrl)\n+                .newBuilder()\n+                .addQueryParameter(\"query\", query)\n+                .addQueryParameter(\"format\", \"json\");\n+        Request request = new Request.Builder()\n+                .url(urlBuilder.build())\n+                .build();\n+        return Observable.fromCallable(() -> {\n+            Response response = okHttpClient.newCall(request).execute();\n+            String json = response.body().string();\n+            SparqlQueryResponse example  = gson.fromJson(json, SparqlQueryResponse.class);\n+            List<Binding> bindings = example.getResults().getBindings();\n+            ArrayList<DepictedItem> subItems = new ArrayList<>();\n+            for (Binding binding : bindings) {\n+                if (binding.getSubclassLabel().getXmlLang() != null) {\n+                    String label = binding.getSubclassLabel().getValue();\n+                    String entityId = binding.getSubclass().getValue();\n+                    entityId = entityId.substring(entityId.lastIndexOf(\"/\") - 1);\n+                    subItems.add(new DepictedItem(label, \"\", \"\", false,entityId ));\n+                    Timber.e(label);\n+                }\n+            }\n+            return subItems;\n+        }).doOnError(throwable -> {\n+            Timber.e(throwable.toString());\n+        });\n+    }\n+\n+    /**\n+     * Get the QIDs of all Wikidata items that are subclasses of the given Wikidata item.\n+     * Example: bridge -> suspended bridge, aqueduct, etc\n+     */\n+    public Observable<ArrayList<DepictedItem>> getParentQIDs(String qid) throws IOException {\n+        String queryString = FileUtils.readFromResource(\"/queries/parentclasses_query.rq\");\n+        String query = queryString.\n+                replace(\"${QID}\", qid)\n+                .replace(\"${LANG}\", \"\\\"\"+Locale.getDefault().getLanguage()+\"\\\"\");\n+        Timber.e(query);\n+        HttpUrl.Builder urlBuilder = HttpUrl\n+                .parse(sparqlQueryUrl)\n+                .newBuilder()\n+                .addQueryParameter(\"query\", query)\n+                .addQueryParameter(\"format\", \"json\");\n+        Request request = new Request.Builder()\n+                .url(urlBuilder.build())\n+                .build();\n+        return Observable.fromCallable(() -> {\n+            Response response = okHttpClient.newCall(request).execute();\n+            try {\n+                String json = response.body().string();\n+                JSONObject jsonObject = new JSONObject(json);\n+                ArrayList<DepictedItem> subItems = new ArrayList<>();\n+                JSONObject results = (JSONObject) jsonObject.get(\"results\");\n+                JSONArray bindings = (JSONArray) results.get(\"bindings\");\n+                for (int i = 0; i < bindings.length(); i++) {\n+                    Timber.e(bindings.get(i).getClass().toString());\n+                    JSONObject object = (JSONObject) bindings.get(i);\n+                    JSONObject parentClassLabel = (JSONObject) object.get(\"parentClassLabel\");\n+                    if (parentClassLabel.get(\"value\") != null) {\n+                        String labelString = parentClassLabel.getString(\"value\");\n+                        JSONObject parentClass = (JSONObject) object.get(\"parentClass\");\n+                        if (parentClass.get(\"value\") != null) {\n+                            String entityId = parentClass.getString(\"value\");\n+                            entityId = entityId.substring(entityId.lastIndexOf(\"/\") + 1);\n+                            subItems.add(new DepictedItem(labelString, \"\", \"\", false, entityId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NTAyNjkyOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionViewHolder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwNToxODo1NFrOF5tUmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMToyNTozMlrOF6BLtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA1NTcwNQ==", "bodyText": "Are we not saving this to db?", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396055705", "createdAt": "2020-03-22T05:18:54Z", "author": {"login": "ashishkumar468"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionViewHolder.java", "diffHunk": "@@ -99,6 +106,30 @@ public void init(int position, Contribution contribution) {\n         }\n     }\n \n+    /**\n+     * In contributions first we show the title for the image stored in cache,\n+     * then we fetch captions associated with the image and replace title on the thumbnail with caption\n+     *\n+     * @param contribution\n+     */\n+    private void fetchAndDisplayCaption(Contribution contribution) {\n+        if ((contribution.getState() != Contribution.STATE_COMPLETED)) {\n+            titleView.setText(contribution.getDisplayTitle());\n+        } else {\n+            Timber.d(\"Fetching caption for %s\", contribution.getFilename());\n+            String wikibaseMediaId = \"M\"+contribution.getPageId(); // Create Wikibase media id from the page id. Example media id: M80618155 for https://commons.wikimedia.org/wiki/File:Tantanmen.jpeg with has the pageid 80618155\n+            compositeDisposable.add(mediaClient.getCaptionByWikibaseIdentifier(wikibaseMediaId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM4MTEwOA==", "bodyText": "No clue, the are certainly fields in media and contribution that use depiction & caption liberally but I haven't drilled down enough to verify this", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396381108", "createdAt": "2020-03-23T11:25:32Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionViewHolder.java", "diffHunk": "@@ -99,6 +106,30 @@ public void init(int position, Contribution contribution) {\n         }\n     }\n \n+    /**\n+     * In contributions first we show the title for the image stored in cache,\n+     * then we fetch captions associated with the image and replace title on the thumbnail with caption\n+     *\n+     * @param contribution\n+     */\n+    private void fetchAndDisplayCaption(Contribution contribution) {\n+        if ((contribution.getState() != Contribution.STATE_COMPLETED)) {\n+            titleView.setText(contribution.getDisplayTitle());\n+        } else {\n+            Timber.d(\"Fetching caption for %s\", contribution.getFilename());\n+            String wikibaseMediaId = \"M\"+contribution.getPageId(); // Create Wikibase media id from the page id. Example media id: M80618155 for https://commons.wikimedia.org/wiki/File:Tantanmen.jpeg with has the pageid 80618155\n+            compositeDisposable.add(mediaClient.getCaptionByWikibaseIdentifier(wikibaseMediaId)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA1NTcwNQ=="}, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NTAyNzk0OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/depictions/GridViewAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwNToyMTozM1rOF5tVEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMToyNzowOFrOF6BPHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA1NTgyNg==", "bodyText": "Why <=0", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396055826", "createdAt": "2020-03-22T05:21:33Z", "author": {"login": "ashishkumar468"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/GridViewAdapter.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package fr.free.nrw.commons.depictions;\n+\n+import android.content.Context;\n+import android.text.TextUtils;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ArrayAdapter;\n+import android.widget.TextView;\n+\n+import androidx.annotation.Nullable;\n+\n+import com.facebook.drawee.view.SimpleDraweeView;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.R;\n+\n+/**\n+ * Adapter for Items in DepictionDetailsActivity\n+ */\n+public class GridViewAdapter extends ArrayAdapter {\n+\n+        private List<Media> data;\n+\n+        public GridViewAdapter(Context context, int layoutResourceId, List<Media> data) {\n+            super(context, layoutResourceId, data);\n+            this.data = data;\n+        }\n+\n+        /**\n+         * Adds more item to the list\n+         * Its triggered on scrolling down in the list\n+         * @param images\n+         */\n+        public void addItems(List<Media> images) {\n+            if (data == null) {\n+                data = new ArrayList<>();\n+            }\n+            data.addAll(images);\n+            notifyDataSetChanged();\n+        }\n+\n+        /**\n+         * Check the first item in the new list with old list and returns true if they are same\n+         * Its triggered on successful response of the fetch images API.\n+         * @param images\n+         */\n+        public boolean containsAll(List<Media> images){\n+            if (images == null || images.isEmpty()) {\n+                return false;\n+            }\n+            if (data == null) {\n+                data = new ArrayList<>();\n+                return false;\n+            }\n+            if (data.size() <= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM4MTk4Mg==", "bodyText": "Defensive coding?", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396381982", "createdAt": "2020-03-23T11:27:08Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/GridViewAdapter.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package fr.free.nrw.commons.depictions;\n+\n+import android.content.Context;\n+import android.text.TextUtils;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ArrayAdapter;\n+import android.widget.TextView;\n+\n+import androidx.annotation.Nullable;\n+\n+import com.facebook.drawee.view.SimpleDraweeView;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.R;\n+\n+/**\n+ * Adapter for Items in DepictionDetailsActivity\n+ */\n+public class GridViewAdapter extends ArrayAdapter {\n+\n+        private List<Media> data;\n+\n+        public GridViewAdapter(Context context, int layoutResourceId, List<Media> data) {\n+            super(context, layoutResourceId, data);\n+            this.data = data;\n+        }\n+\n+        /**\n+         * Adds more item to the list\n+         * Its triggered on scrolling down in the list\n+         * @param images\n+         */\n+        public void addItems(List<Media> images) {\n+            if (data == null) {\n+                data = new ArrayList<>();\n+            }\n+            data.addAll(images);\n+            notifyDataSetChanged();\n+        }\n+\n+        /**\n+         * Check the first item in the new list with old list and returns true if they are same\n+         * Its triggered on successful response of the fetch images API.\n+         * @param images\n+         */\n+        public boolean containsAll(List<Media> images){\n+            if (images == null || images.isEmpty()) {\n+                return false;\n+            }\n+            if (data == null) {\n+                data = new ArrayList<>();\n+                return false;\n+            }\n+            if (data.size() <= 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA1NTgyNg=="}, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NTAyODA4OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/depictions/GridViewAdapter.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwNToyMjowMFrOF5tVJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMToyNzo0MlrOF6BQSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA1NTg0NA==", "bodyText": "Is this intentional", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396055844", "createdAt": "2020-03-22T05:22:00Z", "author": {"login": "ashishkumar468"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/GridViewAdapter.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package fr.free.nrw.commons.depictions;\n+\n+import android.content.Context;\n+import android.text.TextUtils;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ArrayAdapter;\n+import android.widget.TextView;\n+\n+import androidx.annotation.Nullable;\n+\n+import com.facebook.drawee.view.SimpleDraweeView;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.R;\n+\n+/**\n+ * Adapter for Items in DepictionDetailsActivity\n+ */\n+public class GridViewAdapter extends ArrayAdapter {\n+\n+        private List<Media> data;\n+\n+        public GridViewAdapter(Context context, int layoutResourceId, List<Media> data) {\n+            super(context, layoutResourceId, data);\n+            this.data = data;\n+        }\n+\n+        /**\n+         * Adds more item to the list\n+         * Its triggered on scrolling down in the list\n+         * @param images\n+         */\n+        public void addItems(List<Media> images) {\n+            if (data == null) {\n+                data = new ArrayList<>();\n+            }\n+            data.addAll(images);\n+            notifyDataSetChanged();\n+        }\n+\n+        /**\n+         * Check the first item in the new list with old list and returns true if they are same\n+         * Its triggered on successful response of the fetch images API.\n+         * @param images\n+         */\n+        public boolean containsAll(List<Media> images){\n+            if (images == null || images.isEmpty()) {\n+                return false;\n+            }\n+            if (data == null) {\n+                data = new ArrayList<>();\n+                return false;\n+            }\n+            if (data.size() <= 0) {\n+                return false;\n+            }\n+            String fileName = data.get(0).getFilename();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMxMjkxOQ==", "bodyText": "How could I answer that?", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396312919", "createdAt": "2020-03-23T09:29:00Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/GridViewAdapter.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package fr.free.nrw.commons.depictions;\n+\n+import android.content.Context;\n+import android.text.TextUtils;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ArrayAdapter;\n+import android.widget.TextView;\n+\n+import androidx.annotation.Nullable;\n+\n+import com.facebook.drawee.view.SimpleDraweeView;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.R;\n+\n+/**\n+ * Adapter for Items in DepictionDetailsActivity\n+ */\n+public class GridViewAdapter extends ArrayAdapter {\n+\n+        private List<Media> data;\n+\n+        public GridViewAdapter(Context context, int layoutResourceId, List<Media> data) {\n+            super(context, layoutResourceId, data);\n+            this.data = data;\n+        }\n+\n+        /**\n+         * Adds more item to the list\n+         * Its triggered on scrolling down in the list\n+         * @param images\n+         */\n+        public void addItems(List<Media> images) {\n+            if (data == null) {\n+                data = new ArrayList<>();\n+            }\n+            data.addAll(images);\n+            notifyDataSetChanged();\n+        }\n+\n+        /**\n+         * Check the first item in the new list with old list and returns true if they are same\n+         * Its triggered on successful response of the fetch images API.\n+         * @param images\n+         */\n+        public boolean containsAll(List<Media> images){\n+            if (images == null || images.isEmpty()) {\n+                return false;\n+            }\n+            if (data == null) {\n+                data = new ArrayList<>();\n+                return false;\n+            }\n+            if (data.size() <= 0) {\n+                return false;\n+            }\n+            String fileName = data.get(0).getFilename();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA1NTg0NA=="}, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMxNjk3MQ==", "bodyText": "I guess the task here is to find out whether this line is correct or not.\nAt first look it is suspicious, so it is something that PR reviewers need to point out.", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396316971", "createdAt": "2020-03-23T09:35:36Z", "author": {"login": "nicolas-raoul"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/GridViewAdapter.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package fr.free.nrw.commons.depictions;\n+\n+import android.content.Context;\n+import android.text.TextUtils;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ArrayAdapter;\n+import android.widget.TextView;\n+\n+import androidx.annotation.Nullable;\n+\n+import com.facebook.drawee.view.SimpleDraweeView;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.R;\n+\n+/**\n+ * Adapter for Items in DepictionDetailsActivity\n+ */\n+public class GridViewAdapter extends ArrayAdapter {\n+\n+        private List<Media> data;\n+\n+        public GridViewAdapter(Context context, int layoutResourceId, List<Media> data) {\n+            super(context, layoutResourceId, data);\n+            this.data = data;\n+        }\n+\n+        /**\n+         * Adds more item to the list\n+         * Its triggered on scrolling down in the list\n+         * @param images\n+         */\n+        public void addItems(List<Media> images) {\n+            if (data == null) {\n+                data = new ArrayList<>();\n+            }\n+            data.addAll(images);\n+            notifyDataSetChanged();\n+        }\n+\n+        /**\n+         * Check the first item in the new list with old list and returns true if they are same\n+         * Its triggered on successful response of the fetch images API.\n+         * @param images\n+         */\n+        public boolean containsAll(List<Media> images){\n+            if (images == null || images.isEmpty()) {\n+                return false;\n+            }\n+            if (data == null) {\n+                data = new ArrayList<>();\n+                return false;\n+            }\n+            if (data.size() <= 0) {\n+                return false;\n+            }\n+            String fileName = data.get(0).getFilename();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA1NTg0NA=="}, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM4MjI4Mg==", "bodyText": "/**\n         * Check the first item in the new list with old list and returns true if they are same\n         * Its triggered on successful response of the fetch images API.\n         * @param images\n         */\n\nIt was 100% intended apparently", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396382282", "createdAt": "2020-03-23T11:27:42Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/GridViewAdapter.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package fr.free.nrw.commons.depictions;\n+\n+import android.content.Context;\n+import android.text.TextUtils;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ArrayAdapter;\n+import android.widget.TextView;\n+\n+import androidx.annotation.Nullable;\n+\n+import com.facebook.drawee.view.SimpleDraweeView;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.R;\n+\n+/**\n+ * Adapter for Items in DepictionDetailsActivity\n+ */\n+public class GridViewAdapter extends ArrayAdapter {\n+\n+        private List<Media> data;\n+\n+        public GridViewAdapter(Context context, int layoutResourceId, List<Media> data) {\n+            super(context, layoutResourceId, data);\n+            this.data = data;\n+        }\n+\n+        /**\n+         * Adds more item to the list\n+         * Its triggered on scrolling down in the list\n+         * @param images\n+         */\n+        public void addItems(List<Media> images) {\n+            if (data == null) {\n+                data = new ArrayList<>();\n+            }\n+            data.addAll(images);\n+            notifyDataSetChanged();\n+        }\n+\n+        /**\n+         * Check the first item in the new list with old list and returns true if they are same\n+         * Its triggered on successful response of the fetch images API.\n+         * @param images\n+         */\n+        public boolean containsAll(List<Media> images){\n+            if (images == null || images.isEmpty()) {\n+                return false;\n+            }\n+            if (data == null) {\n+                data = new ArrayList<>();\n+                return false;\n+            }\n+            if (data.size() <= 0) {\n+                return false;\n+            }\n+            String fileName = data.get(0).getFilename();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA1NTg0NA=="}, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NTAzMDEwOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/depictions/Media/DepictedImagesPresenter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwNToyNjoxN1rOF5tWEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMToyODozMlrOF6BSEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA1NjA4Mg==", "bodyText": "Should we consider replacing timeouts from over here, OKHTTP client does have timeout anyways", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396056082", "createdAt": "2020-03-22T05:26:17Z", "author": {"login": "ashishkumar468"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/Media/DepictedImagesPresenter.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package fr.free.nrw.commons.depictions.Media;\n+\n+import android.annotation.SuppressLint;\n+\n+import java.lang.reflect.Proxy;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.explore.depictions.DepictsClient;\n+import fr.free.nrw.commons.kvstore.JsonKvStore;\n+import fr.free.nrw.commons.media.MediaClient;\n+import io.reactivex.Scheduler;\n+import io.reactivex.disposables.CompositeDisposable;\n+import timber.log.Timber;\n+\n+import static fr.free.nrw.commons.di.CommonsApplicationModule.IO_THREAD;\n+import static fr.free.nrw.commons.di.CommonsApplicationModule.MAIN_THREAD;\n+\n+/**\n+ * Presenter for DepictedImagesFragment\n+ */\n+public class DepictedImagesPresenter implements DepictedImagesContract.UserActionListener {\n+\n+    private static final DepictedImagesContract.View DUMMY = (DepictedImagesContract.View) Proxy\n+            .newProxyInstance(\n+                    DepictedImagesContract.View.class.getClassLoader(),\n+                    new Class[]{DepictedImagesContract.View.class},\n+                    (proxy, method, methodArgs) -> null);\n+    private static int TIMEOUT_SECONDS = 15;\n+    DepictsClient depictsClient;\n+    MediaClient mediaClient;\n+    @Named(\"default_preferences\")\n+    JsonKvStore depictionKvStore;\n+    private final Scheduler ioScheduler;\n+    private final Scheduler mainThreadScheduler;\n+    private DepictedImagesContract.View view = DUMMY;\n+    private CompositeDisposable compositeDisposable = new CompositeDisposable();\n+    /**\n+     * Wikibase enitityId for the depicted Item\n+     * Ex: Q9394\n+     */\n+    private String entityId = null;\n+    private List<Media> queryList = new ArrayList<>();\n+\n+    @Inject\n+    public DepictedImagesPresenter(@Named(\"default_preferences\") JsonKvStore depictionKvStore, DepictsClient depictsClient, MediaClient mediaClient,  @Named(IO_THREAD) Scheduler ioScheduler,\n+                                   @Named(MAIN_THREAD) Scheduler mainThreadScheduler) {\n+        this.depictionKvStore = depictionKvStore;\n+        this.depictsClient = depictsClient;\n+        this.ioScheduler = ioScheduler;\n+        this.mainThreadScheduler = mainThreadScheduler;\n+        this.mediaClient = mediaClient;\n+    }\n+\n+    @Override\n+    public void onAttachView(DepictedImagesContract.View view) {\n+        this.view = view;\n+    }\n+\n+    @Override\n+    public void onDetachView() {\n+        this.view = DUMMY;\n+    }\n+\n+    /**\n+     * Checks for internet connection and then initializes the grid view with first 10 images of that depiction\n+     */\n+    @SuppressLint(\"CheckResult\")\n+    @Override\n+    public void initList(String entityId) {\n+        view.setLoadingStatus(true);\n+        view.progressBarVisible(true);\n+        view.setIsLastPage(false);\n+        compositeDisposable.add(depictsClient.fetchImagesForDepictedItem(entityId, 25, 0)\n+                .subscribeOn(ioScheduler)\n+                .observeOn(mainThreadScheduler)\n+                .timeout(TIMEOUT_SECONDS, TimeUnit.SECONDS)\n+                .subscribe(this::handleSuccess, this::handleError));\n+    }\n+\n+    /**\n+     * Fetches more images for the item and adds it to the grid view adapter\n+     */\n+    @SuppressLint(\"CheckResult\")\n+    @Override\n+    public void fetchMoreImages() {\n+        view.progressBarVisible(true);\n+        compositeDisposable.add(depictsClient.fetchImagesForDepictedItem(entityId, 25, queryList.size())\n+                .subscribeOn(ioScheduler)\n+                .observeOn(mainThreadScheduler)\n+                .timeout(TIMEOUT_SECONDS, TimeUnit.SECONDS)\n+                .subscribe(this::handlePaginationSuccess, this::handleError));\n+    }\n+\n+    /**\n+     * Handles the success scenario\n+     * it initializes the recycler view by adding items to the adapter\n+     */\n+    private void handlePaginationSuccess(List<Media> media) {\n+        queryList.addAll(media);\n+        view.progressBarVisible(false);\n+        view.addItemsToAdapter(media);\n+    }\n+\n+    /**\n+     * Logs and handles API error scenario\n+     *\n+     * @param throwable\n+     */\n+    public void handleError(Throwable throwable) {\n+        Timber.e(throwable, \"Error occurred while loading images inside items\");\n+        try {\n+            view.initErrorView();\n+            view.showSnackBar();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+\n+    }\n+\n+    /**\n+     * Handles the success scenario\n+     * On first load, it initializes the grid view. On subsequent loads, it adds items to the adapter\n+     * @param collection List of new Media to be displayed\n+     */\n+    public void handleSuccess(List<Media> collection) {\n+        if (collection == null || collection.isEmpty()) {\n+            if (queryList.isEmpty()) {\n+                view.initErrorView();\n+            } else {\n+                view.setIsLastPage(true);\n+            }\n+        } else {\n+            this.queryList.addAll(collection);\n+            view.handleSuccess(collection);\n+        }\n+    }\n+\n+    /**\n+     * fetch captions for the image using filename and replace title of on the image thumbnail(if captions are available)\n+     * else show filename\n+     */\n+    @Override\n+    public void replaceTitlesWithCaptions(String wikibaseIdentifier, int position) {\n+        compositeDisposable.add(mediaClient.getCaptionByWikibaseIdentifier(wikibaseIdentifier)\n+                .subscribeOn(ioScheduler)\n+                .observeOn(mainThreadScheduler)\n+                .timeout(TIMEOUT_SECONDS, TimeUnit.SECONDS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM4MjczOQ==", "bodyText": "happy to", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396382739", "createdAt": "2020-03-23T11:28:32Z", "author": {"login": "macgills"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/Media/DepictedImagesPresenter.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package fr.free.nrw.commons.depictions.Media;\n+\n+import android.annotation.SuppressLint;\n+\n+import java.lang.reflect.Proxy;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.explore.depictions.DepictsClient;\n+import fr.free.nrw.commons.kvstore.JsonKvStore;\n+import fr.free.nrw.commons.media.MediaClient;\n+import io.reactivex.Scheduler;\n+import io.reactivex.disposables.CompositeDisposable;\n+import timber.log.Timber;\n+\n+import static fr.free.nrw.commons.di.CommonsApplicationModule.IO_THREAD;\n+import static fr.free.nrw.commons.di.CommonsApplicationModule.MAIN_THREAD;\n+\n+/**\n+ * Presenter for DepictedImagesFragment\n+ */\n+public class DepictedImagesPresenter implements DepictedImagesContract.UserActionListener {\n+\n+    private static final DepictedImagesContract.View DUMMY = (DepictedImagesContract.View) Proxy\n+            .newProxyInstance(\n+                    DepictedImagesContract.View.class.getClassLoader(),\n+                    new Class[]{DepictedImagesContract.View.class},\n+                    (proxy, method, methodArgs) -> null);\n+    private static int TIMEOUT_SECONDS = 15;\n+    DepictsClient depictsClient;\n+    MediaClient mediaClient;\n+    @Named(\"default_preferences\")\n+    JsonKvStore depictionKvStore;\n+    private final Scheduler ioScheduler;\n+    private final Scheduler mainThreadScheduler;\n+    private DepictedImagesContract.View view = DUMMY;\n+    private CompositeDisposable compositeDisposable = new CompositeDisposable();\n+    /**\n+     * Wikibase enitityId for the depicted Item\n+     * Ex: Q9394\n+     */\n+    private String entityId = null;\n+    private List<Media> queryList = new ArrayList<>();\n+\n+    @Inject\n+    public DepictedImagesPresenter(@Named(\"default_preferences\") JsonKvStore depictionKvStore, DepictsClient depictsClient, MediaClient mediaClient,  @Named(IO_THREAD) Scheduler ioScheduler,\n+                                   @Named(MAIN_THREAD) Scheduler mainThreadScheduler) {\n+        this.depictionKvStore = depictionKvStore;\n+        this.depictsClient = depictsClient;\n+        this.ioScheduler = ioScheduler;\n+        this.mainThreadScheduler = mainThreadScheduler;\n+        this.mediaClient = mediaClient;\n+    }\n+\n+    @Override\n+    public void onAttachView(DepictedImagesContract.View view) {\n+        this.view = view;\n+    }\n+\n+    @Override\n+    public void onDetachView() {\n+        this.view = DUMMY;\n+    }\n+\n+    /**\n+     * Checks for internet connection and then initializes the grid view with first 10 images of that depiction\n+     */\n+    @SuppressLint(\"CheckResult\")\n+    @Override\n+    public void initList(String entityId) {\n+        view.setLoadingStatus(true);\n+        view.progressBarVisible(true);\n+        view.setIsLastPage(false);\n+        compositeDisposable.add(depictsClient.fetchImagesForDepictedItem(entityId, 25, 0)\n+                .subscribeOn(ioScheduler)\n+                .observeOn(mainThreadScheduler)\n+                .timeout(TIMEOUT_SECONDS, TimeUnit.SECONDS)\n+                .subscribe(this::handleSuccess, this::handleError));\n+    }\n+\n+    /**\n+     * Fetches more images for the item and adds it to the grid view adapter\n+     */\n+    @SuppressLint(\"CheckResult\")\n+    @Override\n+    public void fetchMoreImages() {\n+        view.progressBarVisible(true);\n+        compositeDisposable.add(depictsClient.fetchImagesForDepictedItem(entityId, 25, queryList.size())\n+                .subscribeOn(ioScheduler)\n+                .observeOn(mainThreadScheduler)\n+                .timeout(TIMEOUT_SECONDS, TimeUnit.SECONDS)\n+                .subscribe(this::handlePaginationSuccess, this::handleError));\n+    }\n+\n+    /**\n+     * Handles the success scenario\n+     * it initializes the recycler view by adding items to the adapter\n+     */\n+    private void handlePaginationSuccess(List<Media> media) {\n+        queryList.addAll(media);\n+        view.progressBarVisible(false);\n+        view.addItemsToAdapter(media);\n+    }\n+\n+    /**\n+     * Logs and handles API error scenario\n+     *\n+     * @param throwable\n+     */\n+    public void handleError(Throwable throwable) {\n+        Timber.e(throwable, \"Error occurred while loading images inside items\");\n+        try {\n+            view.initErrorView();\n+            view.showSnackBar();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+\n+    }\n+\n+    /**\n+     * Handles the success scenario\n+     * On first load, it initializes the grid view. On subsequent loads, it adds items to the adapter\n+     * @param collection List of new Media to be displayed\n+     */\n+    public void handleSuccess(List<Media> collection) {\n+        if (collection == null || collection.isEmpty()) {\n+            if (queryList.isEmpty()) {\n+                view.initErrorView();\n+            } else {\n+                view.setIsLastPage(true);\n+            }\n+        } else {\n+            this.queryList.addAll(collection);\n+            view.handleSuccess(collection);\n+        }\n+    }\n+\n+    /**\n+     * fetch captions for the image using filename and replace title of on the image thumbnail(if captions are available)\n+     * else show filename\n+     */\n+    @Override\n+    public void replaceTitlesWithCaptions(String wikibaseIdentifier, int position) {\n+        compositeDisposable.add(mediaClient.getCaptionByWikibaseIdentifier(wikibaseIdentifier)\n+                .subscribeOn(ioScheduler)\n+                .observeOn(mainThreadScheduler)\n+                .timeout(TIMEOUT_SECONDS, TimeUnit.SECONDS)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA1NjA4Mg=="}, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NTAzMTg0OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/depictions/WikidataItemDetailsActivity.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwNTozMDozNlrOF5tW4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwNTozMDozNlrOF5tW4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA1NjI4OA==", "bodyText": "use proper name for this", "url": "https://github.com/commons-app/apps-android-commons/pull/3553#discussion_r396056288", "createdAt": "2020-03-22T05:30:36Z", "author": {"login": "ashishkumar468"}, "path": "app/src/main/java/fr/free/nrw/commons/depictions/WikidataItemDetailsActivity.java", "diffHunk": "@@ -0,0 +1,204 @@\n+package fr.free.nrw.commons.depictions;\n+\n+import android.content.Context;\n+import android.content.Intent;\n+import android.os.Bundle;\n+import android.view.View;\n+import android.widget.AdapterView;\n+import android.widget.FrameLayout;\n+\n+import androidx.fragment.app.Fragment;\n+import androidx.fragment.app.FragmentManager;\n+import androidx.viewpager.widget.ViewPager;\n+\n+import com.google.android.material.tabs.TabLayout;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import butterknife.BindView;\n+import butterknife.ButterKnife;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.R;\n+import fr.free.nrw.commons.depictions.Media.DepictedImagesFragment;\n+import fr.free.nrw.commons.depictions.SubClass.SubDepictionListFragment;\n+import fr.free.nrw.commons.explore.ViewPagerAdapter;\n+import fr.free.nrw.commons.media.MediaDetailPagerFragment;\n+import fr.free.nrw.commons.theme.NavigationBaseActivity;\n+import fr.free.nrw.commons.upload.structure.depictions.DepictedItem;\n+\n+/**\n+ * Activity to show depiction media, parent classes and child classes of depicted items in Explore\n+ */\n+public class WikidataItemDetailsActivity extends NavigationBaseActivity implements MediaDetailPagerFragment.MediaDetailProvider, AdapterView.OnItemClickListener {\n+    private FragmentManager supportFragmentManager;\n+    private DepictedImagesFragment depictionImagesListFragment;\n+    private MediaDetailPagerFragment mediaDetails;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404bb0da60a745c5327b3ec438eb47ea8370010"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4223, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}