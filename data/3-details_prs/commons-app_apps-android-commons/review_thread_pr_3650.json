{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyNjI0ODcx", "number": 3650, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMDo0NjoxNFrODxlriw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMDo0NjoxNFrODxlriw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzI0MTcxOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/fr/free/nrw/commons/upload/FileProcessor.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMDo0NjoxNFrOGFI7Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMDo0NjoxNFrOGFI7Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA0MjI2Ng==", "bodyText": "Great! Actually whenever I need to search for items near a point, I always use linear radii progression, as it results in a square surface progression.", "url": "https://github.com/commons-app/apps-android-commons/pull/3650#discussion_r408042266", "createdAt": "2020-04-14T10:46:14Z", "author": {"login": "nicolas-raoul"}, "path": "app/src/main/java/fr/free/nrw/commons/upload/FileProcessor.kt", "diffHunk": "@@ -163,29 +173,44 @@ class FileProcessor @Inject constructor(\n      *\n      * @param imageCoordinates\n      */\n-    fun useImageCoords(imageCoordinates: ImageCoordinates) {\n+    fun prePopulateCategoriesAndDepictionsBy(imageCoordinates: ImageCoordinates) {\n         requireNotNull(imageCoordinates.decimalCoords)\n-        cacheController.setQtPoint(imageCoordinates.decLongitude, imageCoordinates.decLatitude)\n-        val displayCatList = cacheController.findCategory()\n-\n-        // If no categories found in cache, call MediaWiki API to match image coords with nearby Commons categories\n-        if (displayCatList.isEmpty()) {\n-            compositeDisposable.add(\n-                apiCall.request(imageCoordinates.decimalCoords)\n-                    .subscribeOn(Schedulers.io())\n-                    .observeOn(Schedulers.io())\n-                    .subscribe(\n-                        { gpsCategoryModel.categoryList = it },\n-                        {\n-                            Timber.e(it)\n-                            gpsCategoryModel.clear()\n-                        }\n-                    )\n+        compositeDisposable.add(\n+            apiCall.request(imageCoordinates.decimalCoords)\n+                .subscribeOn(Schedulers.io())\n+                .observeOn(Schedulers.io())\n+                .subscribe(\n+                    { gpsCategoryModel.categoryList = it },\n+                    {\n+                        Timber.e(it)\n+                        gpsCategoryModel.clear()\n+                    }\n+                )\n+        )\n+\n+        compositeDisposable.add(\n+            suggestNearbyDepictions(imageCoordinates)\n+        )\n+    }\n+\n+    private val radiiProgressionInMetres =\n+        (DEFAULT_SUGGESTION_RADIUS_IN_METRES..MAX_SUGGESTION_RADIUS_IN_METRES step RADIUS_STEP_SIZE_IN_METRES)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7700de66f7ab32ec78cf7fc12907f0637f4ea9ba"}, "originalPosition": 103}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4326, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}