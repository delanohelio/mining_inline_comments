{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3NjUzNTc1", "number": 346, "reviewThreads": {"totalCount": 52, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMDo1MzozM1rOEj2IUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDozMjoxMFrOEpQNKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDIyNDgzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataCollection.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMDo1MzozM1rOHScLmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDozMToxMFrOHa0GrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA5ODEzOA==", "bodyText": "We should be using com.azure.android.core.http.Response<T> as the type to represent a response with an associated strongly-typed response body object. Is there any reason we aren't doing that here?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r489098138", "createdAt": "2020-09-16T00:53:33Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataCollection.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+\n+import okhttp3.Response;\n+\n+/**\n+ * Represents a collection of pages where page data and response for retrieving it can be returned asynchronously\n+ * @param <T> type of the items in the page\n+ * @param <P> Page of items\n+ */\n+public class AsyncPagedDataCollection<T, P extends Page<T>> {\n+    private final AsyncPagedDataRetriever<T, P> pagedDataRetriever;\n+    private LinkedHashMap<String, PageAndResponse<P>> pages = new LinkedHashMap<String, PageAndResponse<P>>();\n+    private String firstPageId;\n+\n+    /**\n+     * Construction requires an asynchronous paged data provider\n+     * @param pagedDataRetriever an asynchronous page data provider\n+     */\n+    public AsyncPagedDataCollection(AsyncPagedDataRetriever<T, P> pagedDataRetriever) {\n+        this.pagedDataRetriever = pagedDataRetriever;\n+    }\n+\n+    private void cacheResponse(P page, Response response) {\n+        if (page.getPageId() == null) {\n+            return;\n+        }\n+        pages.put(page.getPageId(), new PageAndResponse<P>(page, response));\n+\n+        // setting previous page id should simplify implementation for androidx.arch.DataSource\n+        final Iterator<PageAndResponse<P>> iterator = pages.values().iterator();\n+        while(iterator.hasNext()){\n+            final P existingPage = iterator.next().page;\n+            if (page.getPageId().equals(existingPage.getNextPageId())){\n+                page.setPreviousPageId(existingPage.getPageId());\n+                break;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Gets first page in the collection along with the response retrieving the first page\n+     * @param callback a callback interface for handling the first page and its response\n+     */\n+    public void getFirstPage(Callback<P> callback) {\n+        if (firstPageId == null){\n+            pagedDataRetriever.getFirstPage(new Callback<P>() {\n+\n+                @Override\n+                public void onSuccess(P value, Response response) {\n+                    if (value == null) {\n+                        callback.onSuccess(value, response);\n+                        return;\n+                    }\n+\n+                    firstPageId = value.getPageId();\n+                    cacheResponse(value, response);\n+                    callback.onSuccess(value, response);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable t, Response response) {\n+                    callback.onFailure(t, response);\n+                }\n+            });\n+        }\n+        else {\n+            PageAndResponse<P> firstPageResponse = pages.get(firstPageId);\n+            callback.onSuccess(firstPageResponse.page, firstPageResponse.response);\n+        }\n+    }\n+\n+    /**\n+     * Retrieve a page by its id\n+     * @param pageId id of the page\n+     * @param callback callback interface for handling the page along with its response\n+     */\n+    public void getPage(String pageId, Callback<P> callback) {\n+        PageAndResponse<P> pageEntry = pages.get(pageId);\n+        if (pageEntry == null){\n+            pagedDataRetriever.getPage(pageId, new Callback<P>() {\n+                @Override\n+                public void onSuccess(P value, Response response) {\n+                    if (value == null) {\n+                        callback.onSuccess(null, response);\n+                    }\n+\n+                    cacheResponse(value, response);\n+                    callback.onSuccess(value, response);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable t, Response response) {\n+                    callback.onFailure(t, response);\n+                }\n+            });\n+        }\n+        else {\n+            callback.onSuccess(pageEntry.page, pageEntry.response);\n+        }\n+    }\n+\n+    private static class PageAndResponse<P> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwMjU4NA==", "bodyText": "My bad. I thought this was the old one. ;-)\nThe reason for PageAndResponse is this collection has an interface where getFirstPage and getPage both take a Callback<P> where both Page and okhttp3.Response are supposed to be returned. Unless we change the callback signature, we'd have to keep both in order to hand back the okhttp3.Response.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r489102584", "createdAt": "2020-09-16T01:10:31Z", "author": {"login": "JianpingChen"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataCollection.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+\n+import okhttp3.Response;\n+\n+/**\n+ * Represents a collection of pages where page data and response for retrieving it can be returned asynchronously\n+ * @param <T> type of the items in the page\n+ * @param <P> Page of items\n+ */\n+public class AsyncPagedDataCollection<T, P extends Page<T>> {\n+    private final AsyncPagedDataRetriever<T, P> pagedDataRetriever;\n+    private LinkedHashMap<String, PageAndResponse<P>> pages = new LinkedHashMap<String, PageAndResponse<P>>();\n+    private String firstPageId;\n+\n+    /**\n+     * Construction requires an asynchronous paged data provider\n+     * @param pagedDataRetriever an asynchronous page data provider\n+     */\n+    public AsyncPagedDataCollection(AsyncPagedDataRetriever<T, P> pagedDataRetriever) {\n+        this.pagedDataRetriever = pagedDataRetriever;\n+    }\n+\n+    private void cacheResponse(P page, Response response) {\n+        if (page.getPageId() == null) {\n+            return;\n+        }\n+        pages.put(page.getPageId(), new PageAndResponse<P>(page, response));\n+\n+        // setting previous page id should simplify implementation for androidx.arch.DataSource\n+        final Iterator<PageAndResponse<P>> iterator = pages.values().iterator();\n+        while(iterator.hasNext()){\n+            final P existingPage = iterator.next().page;\n+            if (page.getPageId().equals(existingPage.getNextPageId())){\n+                page.setPreviousPageId(existingPage.getPageId());\n+                break;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Gets first page in the collection along with the response retrieving the first page\n+     * @param callback a callback interface for handling the first page and its response\n+     */\n+    public void getFirstPage(Callback<P> callback) {\n+        if (firstPageId == null){\n+            pagedDataRetriever.getFirstPage(new Callback<P>() {\n+\n+                @Override\n+                public void onSuccess(P value, Response response) {\n+                    if (value == null) {\n+                        callback.onSuccess(value, response);\n+                        return;\n+                    }\n+\n+                    firstPageId = value.getPageId();\n+                    cacheResponse(value, response);\n+                    callback.onSuccess(value, response);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable t, Response response) {\n+                    callback.onFailure(t, response);\n+                }\n+            });\n+        }\n+        else {\n+            PageAndResponse<P> firstPageResponse = pages.get(firstPageId);\n+            callback.onSuccess(firstPageResponse.page, firstPageResponse.response);\n+        }\n+    }\n+\n+    /**\n+     * Retrieve a page by its id\n+     * @param pageId id of the page\n+     * @param callback callback interface for handling the page along with its response\n+     */\n+    public void getPage(String pageId, Callback<P> callback) {\n+        PageAndResponse<P> pageEntry = pages.get(pageId);\n+        if (pageEntry == null){\n+            pagedDataRetriever.getPage(pageId, new Callback<P>() {\n+                @Override\n+                public void onSuccess(P value, Response response) {\n+                    if (value == null) {\n+                        callback.onSuccess(null, response);\n+                    }\n+\n+                    cacheResponse(value, response);\n+                    callback.onSuccess(value, response);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable t, Response response) {\n+                    callback.onFailure(t, response);\n+                }\n+            });\n+        }\n+        else {\n+            callback.onSuccess(pageEntry.page, pageEntry.response);\n+        }\n+    }\n+\n+    private static class PageAndResponse<P> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA5ODEzOA=="}, "originalCommit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ5MDY2MA==", "bodyText": "Leaving as-is for this preview.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r490490660", "createdAt": "2020-09-17T19:07:02Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataCollection.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+\n+import okhttp3.Response;\n+\n+/**\n+ * Represents a collection of pages where page data and response for retrieving it can be returned asynchronously\n+ * @param <T> type of the items in the page\n+ * @param <P> Page of items\n+ */\n+public class AsyncPagedDataCollection<T, P extends Page<T>> {\n+    private final AsyncPagedDataRetriever<T, P> pagedDataRetriever;\n+    private LinkedHashMap<String, PageAndResponse<P>> pages = new LinkedHashMap<String, PageAndResponse<P>>();\n+    private String firstPageId;\n+\n+    /**\n+     * Construction requires an asynchronous paged data provider\n+     * @param pagedDataRetriever an asynchronous page data provider\n+     */\n+    public AsyncPagedDataCollection(AsyncPagedDataRetriever<T, P> pagedDataRetriever) {\n+        this.pagedDataRetriever = pagedDataRetriever;\n+    }\n+\n+    private void cacheResponse(P page, Response response) {\n+        if (page.getPageId() == null) {\n+            return;\n+        }\n+        pages.put(page.getPageId(), new PageAndResponse<P>(page, response));\n+\n+        // setting previous page id should simplify implementation for androidx.arch.DataSource\n+        final Iterator<PageAndResponse<P>> iterator = pages.values().iterator();\n+        while(iterator.hasNext()){\n+            final P existingPage = iterator.next().page;\n+            if (page.getPageId().equals(existingPage.getNextPageId())){\n+                page.setPreviousPageId(existingPage.getPageId());\n+                break;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Gets first page in the collection along with the response retrieving the first page\n+     * @param callback a callback interface for handling the first page and its response\n+     */\n+    public void getFirstPage(Callback<P> callback) {\n+        if (firstPageId == null){\n+            pagedDataRetriever.getFirstPage(new Callback<P>() {\n+\n+                @Override\n+                public void onSuccess(P value, Response response) {\n+                    if (value == null) {\n+                        callback.onSuccess(value, response);\n+                        return;\n+                    }\n+\n+                    firstPageId = value.getPageId();\n+                    cacheResponse(value, response);\n+                    callback.onSuccess(value, response);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable t, Response response) {\n+                    callback.onFailure(t, response);\n+                }\n+            });\n+        }\n+        else {\n+            PageAndResponse<P> firstPageResponse = pages.get(firstPageId);\n+            callback.onSuccess(firstPageResponse.page, firstPageResponse.response);\n+        }\n+    }\n+\n+    /**\n+     * Retrieve a page by its id\n+     * @param pageId id of the page\n+     * @param callback callback interface for handling the page along with its response\n+     */\n+    public void getPage(String pageId, Callback<P> callback) {\n+        PageAndResponse<P> pageEntry = pages.get(pageId);\n+        if (pageEntry == null){\n+            pagedDataRetriever.getPage(pageId, new Callback<P>() {\n+                @Override\n+                public void onSuccess(P value, Response response) {\n+                    if (value == null) {\n+                        callback.onSuccess(null, response);\n+                    }\n+\n+                    cacheResponse(value, response);\n+                    callback.onSuccess(value, response);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable t, Response response) {\n+                    callback.onFailure(t, response);\n+                }\n+            });\n+        }\n+        else {\n+            callback.onSuccess(pageEntry.page, pageEntry.response);\n+        }\n+    }\n+\n+    private static class PageAndResponse<P> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA5ODEzOA=="}, "originalCommit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3ODcwMA==", "bodyText": "Adding to this for later discussion: We can definitely handle the given okhttp3.Response in the callback and map its contents to our own Response<T> type. I think we did that in Storage at some point.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497878700", "createdAt": "2020-10-01T00:31:10Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataCollection.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+\n+import okhttp3.Response;\n+\n+/**\n+ * Represents a collection of pages where page data and response for retrieving it can be returned asynchronously\n+ * @param <T> type of the items in the page\n+ * @param <P> Page of items\n+ */\n+public class AsyncPagedDataCollection<T, P extends Page<T>> {\n+    private final AsyncPagedDataRetriever<T, P> pagedDataRetriever;\n+    private LinkedHashMap<String, PageAndResponse<P>> pages = new LinkedHashMap<String, PageAndResponse<P>>();\n+    private String firstPageId;\n+\n+    /**\n+     * Construction requires an asynchronous paged data provider\n+     * @param pagedDataRetriever an asynchronous page data provider\n+     */\n+    public AsyncPagedDataCollection(AsyncPagedDataRetriever<T, P> pagedDataRetriever) {\n+        this.pagedDataRetriever = pagedDataRetriever;\n+    }\n+\n+    private void cacheResponse(P page, Response response) {\n+        if (page.getPageId() == null) {\n+            return;\n+        }\n+        pages.put(page.getPageId(), new PageAndResponse<P>(page, response));\n+\n+        // setting previous page id should simplify implementation for androidx.arch.DataSource\n+        final Iterator<PageAndResponse<P>> iterator = pages.values().iterator();\n+        while(iterator.hasNext()){\n+            final P existingPage = iterator.next().page;\n+            if (page.getPageId().equals(existingPage.getNextPageId())){\n+                page.setPreviousPageId(existingPage.getPageId());\n+                break;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Gets first page in the collection along with the response retrieving the first page\n+     * @param callback a callback interface for handling the first page and its response\n+     */\n+    public void getFirstPage(Callback<P> callback) {\n+        if (firstPageId == null){\n+            pagedDataRetriever.getFirstPage(new Callback<P>() {\n+\n+                @Override\n+                public void onSuccess(P value, Response response) {\n+                    if (value == null) {\n+                        callback.onSuccess(value, response);\n+                        return;\n+                    }\n+\n+                    firstPageId = value.getPageId();\n+                    cacheResponse(value, response);\n+                    callback.onSuccess(value, response);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable t, Response response) {\n+                    callback.onFailure(t, response);\n+                }\n+            });\n+        }\n+        else {\n+            PageAndResponse<P> firstPageResponse = pages.get(firstPageId);\n+            callback.onSuccess(firstPageResponse.page, firstPageResponse.response);\n+        }\n+    }\n+\n+    /**\n+     * Retrieve a page by its id\n+     * @param pageId id of the page\n+     * @param callback callback interface for handling the page along with its response\n+     */\n+    public void getPage(String pageId, Callback<P> callback) {\n+        PageAndResponse<P> pageEntry = pages.get(pageId);\n+        if (pageEntry == null){\n+            pagedDataRetriever.getPage(pageId, new Callback<P>() {\n+                @Override\n+                public void onSuccess(P value, Response response) {\n+                    if (value == null) {\n+                        callback.onSuccess(null, response);\n+                    }\n+\n+                    cacheResponse(value, response);\n+                    callback.onSuccess(value, response);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable t, Response response) {\n+                    callback.onFailure(t, response);\n+                }\n+            });\n+        }\n+        else {\n+            callback.onSuccess(pageEntry.page, pageEntry.response);\n+        }\n+    }\n+\n+    private static class PageAndResponse<P> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA5ODEzOA=="}, "originalCommit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDIzOTMwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataRetriever.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMTowMTo0MlrOHScT7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxOTowNzoxMFrOHTxLaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwMDI3MQ==", "bodyText": "How is the pageId supposed to be communicated to the developer? Is it an opaque identifier (e.g. GUID)? I would expect getPage(int pageNumber, Callback callback) or something similar, otherwise the developer has to do book-keeping.\nAlternatively, why not keep the current page number in the instance's local state, and have a getNextPage(Callback callback) method (and a simple getter, getCurrentPageNumber()or some such) instead?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r489100271", "createdAt": "2020-09-16T01:01:42Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataRetriever.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents an asynchronous paged data provider with fixed page size\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public abstract class AsyncPagedDataRetriever<T, P extends Page<T>> {\n+    private final int pageSize;\n+\n+    /**\n+     * Constructor requires the fixed page size\n+     * @param pageSize size of the pages\n+     */\n+    public AsyncPagedDataRetriever(int pageSize){\n+        Objects.requireNonNull(pageSize);\n+        if (pageSize <= 0)\n+            throw new IllegalArgumentException(\"pageSize must be a positive integer\");\n+        this.pageSize = pageSize;\n+    }\n+\n+    /**\n+     * Gets the size of the page\n+     * @return size of the page\n+     */\n+    public int getPageSize(){\n+        return this.pageSize;\n+    }\n+\n+    /**\n+     * Retrieve the first page in the collection\n+     * @param callback callback function to handle the page data along with the response for retrieving it\n+     */\n+    public abstract void getFirstPage(Callback<P> callback);\n+\n+    /**\n+     * Retrieve a page with its id\n+     * @param pageId id of the page\n+     * @param callback callback function to handle the page data along with the response for retrieving it\n+     */\n+    public abstract void getPage(String pageId, Callback<P> callback);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwMDgxOA==", "bodyText": "I guess this comment isn't specific to this file, but just to the general design.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r489100818", "createdAt": "2020-09-16T01:03:50Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataRetriever.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents an asynchronous paged data provider with fixed page size\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public abstract class AsyncPagedDataRetriever<T, P extends Page<T>> {\n+    private final int pageSize;\n+\n+    /**\n+     * Constructor requires the fixed page size\n+     * @param pageSize size of the pages\n+     */\n+    public AsyncPagedDataRetriever(int pageSize){\n+        Objects.requireNonNull(pageSize);\n+        if (pageSize <= 0)\n+            throw new IllegalArgumentException(\"pageSize must be a positive integer\");\n+        this.pageSize = pageSize;\n+    }\n+\n+    /**\n+     * Gets the size of the page\n+     * @return size of the page\n+     */\n+    public int getPageSize(){\n+        return this.pageSize;\n+    }\n+\n+    /**\n+     * Retrieve the first page in the collection\n+     * @param callback callback function to handle the page data along with the response for retrieving it\n+     */\n+    public abstract void getFirstPage(Callback<P> callback);\n+\n+    /**\n+     * Retrieve a page with its id\n+     * @param pageId id of the page\n+     * @param callback callback function to handle the page data along with the response for retrieving it\n+     */\n+    public abstract void getPage(String pageId, Callback<P> callback);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwMDI3MQ=="}, "originalCommit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwNDA0MQ==", "bodyText": "For the need of autorest.android, the String id is meant to be opaque. I even had a page iterator function in the collection trying to hide the pageId altogether but it turned out to be overly complicated (in thread synchronization). So we agreed to remove the iterator implementation.\nWe looked at using this interface to implement androidx.arch.DataSource in my initial Draft PR. Having an opaque page id is more convenient than int id for that particular purpose. That's the reason we settled with an opaque string id.\nc.f https://developer.android.com/reference/androidx/paging/PageKeyedDataSource", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r489104041", "createdAt": "2020-09-16T01:15:43Z", "author": {"login": "JianpingChen"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataRetriever.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents an asynchronous paged data provider with fixed page size\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public abstract class AsyncPagedDataRetriever<T, P extends Page<T>> {\n+    private final int pageSize;\n+\n+    /**\n+     * Constructor requires the fixed page size\n+     * @param pageSize size of the pages\n+     */\n+    public AsyncPagedDataRetriever(int pageSize){\n+        Objects.requireNonNull(pageSize);\n+        if (pageSize <= 0)\n+            throw new IllegalArgumentException(\"pageSize must be a positive integer\");\n+        this.pageSize = pageSize;\n+    }\n+\n+    /**\n+     * Gets the size of the page\n+     * @return size of the page\n+     */\n+    public int getPageSize(){\n+        return this.pageSize;\n+    }\n+\n+    /**\n+     * Retrieve the first page in the collection\n+     * @param callback callback function to handle the page data along with the response for retrieving it\n+     */\n+    public abstract void getFirstPage(Callback<P> callback);\n+\n+    /**\n+     * Retrieve a page with its id\n+     * @param pageId id of the page\n+     * @param callback callback function to handle the page data along with the response for retrieving it\n+     */\n+    public abstract void getPage(String pageId, Callback<P> callback);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwMDI3MQ=="}, "originalCommit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczNzE5NQ==", "bodyText": "Thinking a bit more about it:\nThe paged collection = retrieve pages from service via network + caching of the pages.\nWondering, whether it makes sense to have the following signature:\n// group_1: calls go over network.\nvoid getFirstPage(Callback<Page<T>> callback);\nvoid getNextPage(Callback<Page<T>> callback);\n// group_2: an immutable map of cached pages.\nMap<String, Page<T>> getCachedPages();\n// an immutable list of items in the cached pages.\nList<T> getCachedItems();\nOnly the APIs that belongs to the group_1 provides access to the Response object.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r489737195", "createdAt": "2020-09-16T20:32:40Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataRetriever.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents an asynchronous paged data provider with fixed page size\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public abstract class AsyncPagedDataRetriever<T, P extends Page<T>> {\n+    private final int pageSize;\n+\n+    /**\n+     * Constructor requires the fixed page size\n+     * @param pageSize size of the pages\n+     */\n+    public AsyncPagedDataRetriever(int pageSize){\n+        Objects.requireNonNull(pageSize);\n+        if (pageSize <= 0)\n+            throw new IllegalArgumentException(\"pageSize must be a positive integer\");\n+        this.pageSize = pageSize;\n+    }\n+\n+    /**\n+     * Gets the size of the page\n+     * @return size of the page\n+     */\n+    public int getPageSize(){\n+        return this.pageSize;\n+    }\n+\n+    /**\n+     * Retrieve the first page in the collection\n+     * @param callback callback function to handle the page data along with the response for retrieving it\n+     */\n+    public abstract void getFirstPage(Callback<P> callback);\n+\n+    /**\n+     * Retrieve a page with its id\n+     * @param pageId id of the page\n+     * @param callback callback function to handle the page data along with the response for retrieving it\n+     */\n+    public abstract void getPage(String pageId, Callback<P> callback);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwMDI3MQ=="}, "originalCommit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ5MDcyOA==", "bodyText": "Leaving as-is for this preview.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r490490728", "createdAt": "2020-09-17T19:07:10Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataRetriever.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents an asynchronous paged data provider with fixed page size\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public abstract class AsyncPagedDataRetriever<T, P extends Page<T>> {\n+    private final int pageSize;\n+\n+    /**\n+     * Constructor requires the fixed page size\n+     * @param pageSize size of the pages\n+     */\n+    public AsyncPagedDataRetriever(int pageSize){\n+        Objects.requireNonNull(pageSize);\n+        if (pageSize <= 0)\n+            throw new IllegalArgumentException(\"pageSize must be a positive integer\");\n+        this.pageSize = pageSize;\n+    }\n+\n+    /**\n+     * Gets the size of the page\n+     * @return size of the page\n+     */\n+    public int getPageSize(){\n+        return this.pageSize;\n+    }\n+\n+    /**\n+     * Retrieve the first page in the collection\n+     * @param callback callback function to handle the page data along with the response for retrieving it\n+     */\n+    public abstract void getFirstPage(Callback<P> callback);\n+\n+    /**\n+     * Retrieve a page with its id\n+     * @param pageId id of the page\n+     * @param callback callback function to handle the page data along with the response for retrieving it\n+     */\n+    public abstract void getPage(String pageId, Callback<P> callback);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwMDI3MQ=="}, "originalCommit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDI0MzkzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseCollection.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMTowNDoyM1rOHScWqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxOTowODoxMVrOHTxNbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwMDk2OQ==", "bodyText": "Is this the sync version of AsyncPagedDataCollection? If so, they should have similar names. E.g. PagedDataCollection.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r489100969", "createdAt": "2020-09-16T01:04:23Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseCollection.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+/**\n+ * Represents a collection of pages where page and the response for retrieving it can be returned synchronously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataResponseCollection<T, P extends Page<T>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwNTM1OQ==", "bodyText": "There is a PagedDataCollection in util.paging. We can rename AsyncPagedDataCollection to AsyncPagedDataResponseCollection", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r489105359", "createdAt": "2020-09-16T01:20:23Z", "author": {"login": "JianpingChen"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseCollection.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+/**\n+ * Represents a collection of pages where page and the response for retrieving it can be returned synchronously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataResponseCollection<T, P extends Page<T>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwMDk2OQ=="}, "originalCommit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ5MTI0Ng==", "bodyText": "Okay, I understand why they are the way they are, no need to rename.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r490491246", "createdAt": "2020-09-17T19:08:11Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseCollection.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+/**\n+ * Represents a collection of pages where page and the response for retrieving it can be returned synchronously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataResponseCollection<T, P extends Page<T>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwMDk2OQ=="}, "originalCommit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDI0NDgzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseRetriever.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMTowNDo1N1rOHScXPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxOTowODoyNFrOHTxN5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwMTExNw==", "bodyText": "Likewise if this is the sync version of AsyncPagedDataRetriever, let's make this PagedDataRetriever.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r489101117", "createdAt": "2020-09-16T01:04:57Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseRetriever.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents a synchronized paged data provider with fixed page size that returns both page and response\n+ * @param <T> type of the items in the page\n+ * @param <P> type of the page\n+ */\n+public abstract class PagedDataResponseRetriever<T, P extends Page<T>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwNTY1Nw==", "bodyText": "There is a PagedDataRetriever in util.paging which does not return Response.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r489105657", "createdAt": "2020-09-16T01:21:30Z", "author": {"login": "JianpingChen"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseRetriever.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents a synchronized paged data provider with fixed page size that returns both page and response\n+ * @param <T> type of the items in the page\n+ * @param <P> type of the page\n+ */\n+public abstract class PagedDataResponseRetriever<T, P extends Page<T>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwMTExNw=="}, "originalCommit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ5MTM2Ng==", "bodyText": "Leaving as is", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r490491366", "createdAt": "2020-09-17T19:08:24Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseRetriever.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents a synchronized paged data provider with fixed page size that returns both page and response\n+ * @param <T> type of the items in the page\n+ * @param <P> type of the page\n+ */\n+public abstract class PagedDataResponseRetriever<T, P extends Page<T>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwMTExNw=="}, "originalCommit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDI0NTMwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseRetriever.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMTowNToxMVrOHScXhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMTowNToxMVrOHScXhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwMTE5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Represents a synchronized paged data provider with fixed page size that returns both page and response\n          \n          \n            \n             * Represents a synchronous paged data provider with fixed page size that returns both page and response", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r489101191", "createdAt": "2020-09-16T01:05:11Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseRetriever.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents a synchronized paged data provider with fixed page size that returns both page and response", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDI0NzQ3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMTowNjoyN1rOHScYxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMTowNjoyN1rOHScYxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwMTUxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Represents a collection of paged data with fixed page size where pages can be retrieved synchrounously\n          \n          \n            \n             * Represents a collection of paged data with fixed page size where pages can be retrieved synchronously", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r489101511", "createdAt": "2020-09-16T01:06:27Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+\n+/**\n+ * Represents a collection of paged data with fixed page size where pages can be retrieved synchrounously", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDI0OTIyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMTowNzoxNlrOHScZrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxOTowODo0MFrOHTxOdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwMTc0MQ==", "bodyText": "Not clear why there is a separate set of classes for paged data vs. paged data + response, but only for sync (for async there is only paged data + response).", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r489101741", "createdAt": "2020-09-16T01:07:16Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+\n+/**\n+ * Represents a collection of paged data with fixed page size where pages can be retrieved synchrounously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataCollection<T, P extends Page<T>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwNjk1NA==", "bodyText": "When autorest.android generates sync client, for each function in underlying service, e.g. service.getBlah(), sync client is supposed to have two versions of the same function in its interface, syncClient.getBlah(): Blah, and syncClient.getBlahWithResponse(): Response<Blah>. That's why we have two sets for sync client.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r489106954", "createdAt": "2020-09-16T01:26:17Z", "author": {"login": "JianpingChen"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+\n+/**\n+ * Represents a collection of paged data with fixed page size where pages can be retrieved synchrounously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataCollection<T, P extends Page<T>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwMTc0MQ=="}, "originalCommit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwNzY2MQ==", "bodyText": "For async client, the Callback<Blah> can return both Blah and okhttp3.Response. Therefore there is no need to have two function signatures for each service.getBlah function.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r489107661", "createdAt": "2020-09-16T01:28:44Z", "author": {"login": "JianpingChen"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+\n+/**\n+ * Represents a collection of paged data with fixed page size where pages can be retrieved synchrounously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataCollection<T, P extends Page<T>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwMTc0MQ=="}, "originalCommit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ5MTUwOQ==", "bodyText": "Leaving as-is for this preview.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r490491509", "createdAt": "2020-09-17T19:08:40Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+\n+/**\n+ * Represents a collection of paged data with fixed page size where pages can be retrieved synchrounously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataCollection<T, P extends Page<T>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwMTc0MQ=="}, "originalCommit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODk0ODQ5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/http/responsepaging/AsyncPagedDataCollectionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxODo1MDo1MFrOHTwn-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxODo1MDo1MFrOHTwn-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ4MTY1Nw==", "bodyText": "We need to add the license header here.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r490481657", "createdAt": "2020-09-17T18:50:50Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/http/responsepaging/AsyncPagedDataCollectionTest.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package com.azure.android.core.http.responsepaging;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db1ec16164cc6c5044910eec4dd5acb8042e4e21"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODk0ODY0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/http/responsepaging/PagedDataResponseCollectionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxODo1MDo1NVrOHTwoFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxODo1MDo1NVrOHTwoFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ4MTY4Ng==", "bodyText": "We need to add the license header here.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r490481686", "createdAt": "2020-09-17T18:50:55Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/http/responsepaging/PagedDataResponseCollectionTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package com.azure.android.core.http.responsepaging;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db1ec16164cc6c5044910eec4dd5acb8042e4e21"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODk0ODkwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/util/paging/PagedDataCollectionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxODo1MDo1OVrOHTwoPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxODo1MDo1OVrOHTwoPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ4MTcyNA==", "bodyText": "We need to add the license header here.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r490481724", "createdAt": "2020-09-17T18:50:59Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/util/paging/PagedDataCollectionTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package com.azure.android.core.util.paging;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db1ec16164cc6c5044910eec4dd5acb8042e4e21"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjYxNTI3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/Page.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjoxNjowMlrOHaxOyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjoxNjowMlrOHaxOyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzMTYyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    nextPageId = nextPageId;\n          \n          \n            \n                    this.nextPageId = nextPageId;", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497831624", "createdAt": "2020-09-30T22:16:02Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/Page.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a page of items\n+ * @param <T> type of the items in the page\n+ */\n+public class Page<T> {\n+    private final String pageId;\n+    private final List<T> items;\n+    private String nextPageId;\n+    private String previousPageId;\n+\n+    /**\n+     * Constructor requires page id and items\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items) {\n+        Objects.requireNonNull(pageId);\n+        Objects.requireNonNull(items);\n+        this.pageId = pageId;\n+        this.items = items;\n+    }\n+\n+    /**\n+     * Constructor with page id, items, and next page id\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     * @param nextPageId id of next page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items, String nextPageId) {\n+        this(pageId, items);\n+        nextPageId = nextPageId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjYxODkzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/Page.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjoxNzoyOFrOHaxQ_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjoxNzoyOFrOHaxQ_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzMjE5MA==", "bodyText": "For consistency.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return nextPageId;\n          \n          \n            \n                    return this.nextPageId;", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497832190", "createdAt": "2020-09-30T22:17:28Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/Page.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a page of items\n+ * @param <T> type of the items in the page\n+ */\n+public class Page<T> {\n+    private final String pageId;\n+    private final List<T> items;\n+    private String nextPageId;\n+    private String previousPageId;\n+\n+    /**\n+     * Constructor requires page id and items\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items) {\n+        Objects.requireNonNull(pageId);\n+        Objects.requireNonNull(items);\n+        this.pageId = pageId;\n+        this.items = items;\n+    }\n+\n+    /**\n+     * Constructor with page id, items, and next page id\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     * @param nextPageId id of next page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items, String nextPageId) {\n+        this(pageId, items);\n+        nextPageId = nextPageId;\n+    }\n+\n+    /**\n+     * Get the page id\n+     * @return id of the page\n+     */\n+    public String getPageId(){\n+        return this.pageId;\n+    }\n+\n+    /**\n+     * Get the items in the page\n+     * @return list of items in the page\n+     */\n+    public List<T> getItems() {\n+        return this.items;\n+    }\n+\n+    /**\n+     * Get an iterator for the items in the page\n+     * @return iterator for the items in the page\n+     */\n+    public Iterator<T> getIterator() {\n+        return items.iterator();\n+    }\n+\n+    /**\n+     * Set next page id\n+     * @param nextPageId id of the page next to this page\n+     * @return current page\n+     */\n+    public Page<T> setNextPageId(@NonNull String nextPageId) {\n+        this.nextPageId = nextPageId;\n+        return this;\n+    }\n+\n+    /**\n+     * Get id of the page next to this page\n+     * @return id of the next page\n+     */\n+    public String getNextPageId() {\n+        return nextPageId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjYxOTU2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/Page.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjoxNzo0NFrOHaxRXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjoxNzo0NFrOHaxRXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzMjI4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Set previous page id\n          \n          \n            \n                 * Set the previous page id", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497832285", "createdAt": "2020-09-30T22:17:44Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/Page.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a page of items\n+ * @param <T> type of the items in the page\n+ */\n+public class Page<T> {\n+    private final String pageId;\n+    private final List<T> items;\n+    private String nextPageId;\n+    private String previousPageId;\n+\n+    /**\n+     * Constructor requires page id and items\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items) {\n+        Objects.requireNonNull(pageId);\n+        Objects.requireNonNull(items);\n+        this.pageId = pageId;\n+        this.items = items;\n+    }\n+\n+    /**\n+     * Constructor with page id, items, and next page id\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     * @param nextPageId id of next page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items, String nextPageId) {\n+        this(pageId, items);\n+        nextPageId = nextPageId;\n+    }\n+\n+    /**\n+     * Get the page id\n+     * @return id of the page\n+     */\n+    public String getPageId(){\n+        return this.pageId;\n+    }\n+\n+    /**\n+     * Get the items in the page\n+     * @return list of items in the page\n+     */\n+    public List<T> getItems() {\n+        return this.items;\n+    }\n+\n+    /**\n+     * Get an iterator for the items in the page\n+     * @return iterator for the items in the page\n+     */\n+    public Iterator<T> getIterator() {\n+        return items.iterator();\n+    }\n+\n+    /**\n+     * Set next page id\n+     * @param nextPageId id of the page next to this page\n+     * @return current page\n+     */\n+    public Page<T> setNextPageId(@NonNull String nextPageId) {\n+        this.nextPageId = nextPageId;\n+        return this;\n+    }\n+\n+    /**\n+     * Get id of the page next to this page\n+     * @return id of the next page\n+     */\n+    public String getNextPageId() {\n+        return nextPageId;\n+    }\n+\n+    /**\n+     * Set previous page id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjYyMDM2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/Page.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjoxODowNVrOHaxR2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjoxODowNVrOHaxR2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzMjQxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Get id of the page before current page\n          \n          \n            \n                 * Get the previous page id", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497832410", "createdAt": "2020-09-30T22:18:05Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/Page.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a page of items\n+ * @param <T> type of the items in the page\n+ */\n+public class Page<T> {\n+    private final String pageId;\n+    private final List<T> items;\n+    private String nextPageId;\n+    private String previousPageId;\n+\n+    /**\n+     * Constructor requires page id and items\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items) {\n+        Objects.requireNonNull(pageId);\n+        Objects.requireNonNull(items);\n+        this.pageId = pageId;\n+        this.items = items;\n+    }\n+\n+    /**\n+     * Constructor with page id, items, and next page id\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     * @param nextPageId id of next page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items, String nextPageId) {\n+        this(pageId, items);\n+        nextPageId = nextPageId;\n+    }\n+\n+    /**\n+     * Get the page id\n+     * @return id of the page\n+     */\n+    public String getPageId(){\n+        return this.pageId;\n+    }\n+\n+    /**\n+     * Get the items in the page\n+     * @return list of items in the page\n+     */\n+    public List<T> getItems() {\n+        return this.items;\n+    }\n+\n+    /**\n+     * Get an iterator for the items in the page\n+     * @return iterator for the items in the page\n+     */\n+    public Iterator<T> getIterator() {\n+        return items.iterator();\n+    }\n+\n+    /**\n+     * Set next page id\n+     * @param nextPageId id of the page next to this page\n+     * @return current page\n+     */\n+    public Page<T> setNextPageId(@NonNull String nextPageId) {\n+        this.nextPageId = nextPageId;\n+        return this;\n+    }\n+\n+    /**\n+     * Get id of the page next to this page\n+     * @return id of the next page\n+     */\n+    public String getNextPageId() {\n+        return nextPageId;\n+    }\n+\n+    /**\n+     * Set previous page id\n+     * @param previousPageId id of the page before this page\n+     * @return current page\n+     */\n+    public Page<T> setPreviousPageId(@NonNull String previousPageId) {\n+        this.previousPageId = previousPageId;\n+        return this;\n+    }\n+\n+    /**\n+     * Get id of the page before current page", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjYyMjc0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/Page.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjoxOTowNVrOHaxTPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjoxOTowNVrOHaxTPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzMjc2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param nextPageId id of next page\n          \n          \n            \n                 * @param nextPageId id of the next page", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497832767", "createdAt": "2020-09-30T22:19:05Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/Page.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a page of items\n+ * @param <T> type of the items in the page\n+ */\n+public class Page<T> {\n+    private final String pageId;\n+    private final List<T> items;\n+    private String nextPageId;\n+    private String previousPageId;\n+\n+    /**\n+     * Constructor requires page id and items\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items) {\n+        Objects.requireNonNull(pageId);\n+        Objects.requireNonNull(items);\n+        this.pageId = pageId;\n+        this.items = items;\n+    }\n+\n+    /**\n+     * Constructor with page id, items, and next page id\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     * @param nextPageId id of next page", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjY0NjY3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/Page.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjoyODo0NlrOHaxhQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjoyODo0NlrOHaxhQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzNjM1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Set next page id\n          \n          \n            \n                 * Set the next page id", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497836355", "createdAt": "2020-09-30T22:28:46Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/Page.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a page of items\n+ * @param <T> type of the items in the page\n+ */\n+public class Page<T> {\n+    private final String pageId;\n+    private final List<T> items;\n+    private String nextPageId;\n+    private String previousPageId;\n+\n+    /**\n+     * Constructor requires page id and items\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items) {\n+        Objects.requireNonNull(pageId);\n+        Objects.requireNonNull(items);\n+        this.pageId = pageId;\n+        this.items = items;\n+    }\n+\n+    /**\n+     * Constructor with page id, items, and next page id\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     * @param nextPageId id of next page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items, String nextPageId) {\n+        this(pageId, items);\n+        nextPageId = nextPageId;\n+    }\n+\n+    /**\n+     * Get the page id\n+     * @return id of the page\n+     */\n+    public String getPageId(){\n+        return this.pageId;\n+    }\n+\n+    /**\n+     * Get the items in the page\n+     * @return list of items in the page\n+     */\n+    public List<T> getItems() {\n+        return this.items;\n+    }\n+\n+    /**\n+     * Get an iterator for the items in the page\n+     * @return iterator for the items in the page\n+     */\n+    public Iterator<T> getIterator() {\n+        return items.iterator();\n+    }\n+\n+    /**\n+     * Set next page id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjY0NzExOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/Page.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjoyODo1OFrOHaxhiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjoyODo1OFrOHaxhiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzNjQyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param nextPageId id of the page next to this page\n          \n          \n            \n                 * @param nextPageId id of the page after this page", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497836424", "createdAt": "2020-09-30T22:28:58Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/Page.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a page of items\n+ * @param <T> type of the items in the page\n+ */\n+public class Page<T> {\n+    private final String pageId;\n+    private final List<T> items;\n+    private String nextPageId;\n+    private String previousPageId;\n+\n+    /**\n+     * Constructor requires page id and items\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items) {\n+        Objects.requireNonNull(pageId);\n+        Objects.requireNonNull(items);\n+        this.pageId = pageId;\n+        this.items = items;\n+    }\n+\n+    /**\n+     * Constructor with page id, items, and next page id\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     * @param nextPageId id of next page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items, String nextPageId) {\n+        this(pageId, items);\n+        nextPageId = nextPageId;\n+    }\n+\n+    /**\n+     * Get the page id\n+     * @return id of the page\n+     */\n+    public String getPageId(){\n+        return this.pageId;\n+    }\n+\n+    /**\n+     * Get the items in the page\n+     * @return list of items in the page\n+     */\n+    public List<T> getItems() {\n+        return this.items;\n+    }\n+\n+    /**\n+     * Get an iterator for the items in the page\n+     * @return iterator for the items in the page\n+     */\n+    public Iterator<T> getIterator() {\n+        return items.iterator();\n+    }\n+\n+    /**\n+     * Set next page id\n+     * @param nextPageId id of the page next to this page", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjY0NzY3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/Page.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjoyOToxNFrOHaxh4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjoyOToxNFrOHaxh4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzNjUxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return current page\n          \n          \n            \n                 * @return this page", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497836512", "createdAt": "2020-09-30T22:29:14Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/Page.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a page of items\n+ * @param <T> type of the items in the page\n+ */\n+public class Page<T> {\n+    private final String pageId;\n+    private final List<T> items;\n+    private String nextPageId;\n+    private String previousPageId;\n+\n+    /**\n+     * Constructor requires page id and items\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items) {\n+        Objects.requireNonNull(pageId);\n+        Objects.requireNonNull(items);\n+        this.pageId = pageId;\n+        this.items = items;\n+    }\n+\n+    /**\n+     * Constructor with page id, items, and next page id\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     * @param nextPageId id of next page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items, String nextPageId) {\n+        this(pageId, items);\n+        nextPageId = nextPageId;\n+    }\n+\n+    /**\n+     * Get the page id\n+     * @return id of the page\n+     */\n+    public String getPageId(){\n+        return this.pageId;\n+    }\n+\n+    /**\n+     * Get the items in the page\n+     * @return list of items in the page\n+     */\n+    public List<T> getItems() {\n+        return this.items;\n+    }\n+\n+    /**\n+     * Get an iterator for the items in the page\n+     * @return iterator for the items in the page\n+     */\n+    public Iterator<T> getIterator() {\n+        return items.iterator();\n+    }\n+\n+    /**\n+     * Set next page id\n+     * @param nextPageId id of the page next to this page\n+     * @return current page", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjY0ODEwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/Page.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjoyOToyNlrOHaxiIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjoyOToyNlrOHaxiIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzNjU3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return current page\n          \n          \n            \n                 * @return this page", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497836576", "createdAt": "2020-09-30T22:29:26Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/Page.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a page of items\n+ * @param <T> type of the items in the page\n+ */\n+public class Page<T> {\n+    private final String pageId;\n+    private final List<T> items;\n+    private String nextPageId;\n+    private String previousPageId;\n+\n+    /**\n+     * Constructor requires page id and items\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items) {\n+        Objects.requireNonNull(pageId);\n+        Objects.requireNonNull(items);\n+        this.pageId = pageId;\n+        this.items = items;\n+    }\n+\n+    /**\n+     * Constructor with page id, items, and next page id\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     * @param nextPageId id of next page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items, String nextPageId) {\n+        this(pageId, items);\n+        nextPageId = nextPageId;\n+    }\n+\n+    /**\n+     * Get the page id\n+     * @return id of the page\n+     */\n+    public String getPageId(){\n+        return this.pageId;\n+    }\n+\n+    /**\n+     * Get the items in the page\n+     * @return list of items in the page\n+     */\n+    public List<T> getItems() {\n+        return this.items;\n+    }\n+\n+    /**\n+     * Get an iterator for the items in the page\n+     * @return iterator for the items in the page\n+     */\n+    public Iterator<T> getIterator() {\n+        return items.iterator();\n+    }\n+\n+    /**\n+     * Set next page id\n+     * @param nextPageId id of the page next to this page\n+     * @return current page\n+     */\n+    public Page<T> setNextPageId(@NonNull String nextPageId) {\n+        this.nextPageId = nextPageId;\n+        return this;\n+    }\n+\n+    /**\n+     * Get id of the page next to this page\n+     * @return id of the next page\n+     */\n+    public String getNextPageId() {\n+        return nextPageId;\n+    }\n+\n+    /**\n+     * Set previous page id\n+     * @param previousPageId id of the page before this page\n+     * @return current page", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjY1MDIyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/Page.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjozMDoxNlrOHaxjbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjozMDoxNlrOHaxjbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzNjkwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Get id of the page next to this page\n          \n          \n            \n                 * Get the next page id", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497836908", "createdAt": "2020-09-30T22:30:16Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/Page.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a page of items\n+ * @param <T> type of the items in the page\n+ */\n+public class Page<T> {\n+    private final String pageId;\n+    private final List<T> items;\n+    private String nextPageId;\n+    private String previousPageId;\n+\n+    /**\n+     * Constructor requires page id and items\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items) {\n+        Objects.requireNonNull(pageId);\n+        Objects.requireNonNull(items);\n+        this.pageId = pageId;\n+        this.items = items;\n+    }\n+\n+    /**\n+     * Constructor with page id, items, and next page id\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     * @param nextPageId id of next page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items, String nextPageId) {\n+        this(pageId, items);\n+        nextPageId = nextPageId;\n+    }\n+\n+    /**\n+     * Get the page id\n+     * @return id of the page\n+     */\n+    public String getPageId(){\n+        return this.pageId;\n+    }\n+\n+    /**\n+     * Get the items in the page\n+     * @return list of items in the page\n+     */\n+    public List<T> getItems() {\n+        return this.items;\n+    }\n+\n+    /**\n+     * Get an iterator for the items in the page\n+     * @return iterator for the items in the page\n+     */\n+    public Iterator<T> getIterator() {\n+        return items.iterator();\n+    }\n+\n+    /**\n+     * Set next page id\n+     * @param nextPageId id of the page next to this page\n+     * @return current page\n+     */\n+    public Page<T> setNextPageId(@NonNull String nextPageId) {\n+        this.nextPageId = nextPageId;\n+        return this;\n+    }\n+\n+    /**\n+     * Get id of the page next to this page", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjY1NDEzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/Page.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjozMTo0MFrOHaxlog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjozMTo0MFrOHaxlog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzNzQ3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return id of the next page\n          \n          \n            \n                 * @return id of the page after this page", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497837474", "createdAt": "2020-09-30T22:31:40Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/Page.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a page of items\n+ * @param <T> type of the items in the page\n+ */\n+public class Page<T> {\n+    private final String pageId;\n+    private final List<T> items;\n+    private String nextPageId;\n+    private String previousPageId;\n+\n+    /**\n+     * Constructor requires page id and items\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items) {\n+        Objects.requireNonNull(pageId);\n+        Objects.requireNonNull(items);\n+        this.pageId = pageId;\n+        this.items = items;\n+    }\n+\n+    /**\n+     * Constructor with page id, items, and next page id\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     * @param nextPageId id of next page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items, String nextPageId) {\n+        this(pageId, items);\n+        nextPageId = nextPageId;\n+    }\n+\n+    /**\n+     * Get the page id\n+     * @return id of the page\n+     */\n+    public String getPageId(){\n+        return this.pageId;\n+    }\n+\n+    /**\n+     * Get the items in the page\n+     * @return list of items in the page\n+     */\n+    public List<T> getItems() {\n+        return this.items;\n+    }\n+\n+    /**\n+     * Get an iterator for the items in the page\n+     * @return iterator for the items in the page\n+     */\n+    public Iterator<T> getIterator() {\n+        return items.iterator();\n+    }\n+\n+    /**\n+     * Set next page id\n+     * @param nextPageId id of the page next to this page\n+     * @return current page\n+     */\n+    public Page<T> setNextPageId(@NonNull String nextPageId) {\n+        this.nextPageId = nextPageId;\n+        return this;\n+    }\n+\n+    /**\n+     * Get id of the page next to this page\n+     * @return id of the next page", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjY2MDY4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataRetriever.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjozNDo0MlrOHaxpnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjozNToyOFrOHaxqsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzODQ5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Retrieve first page of the collection. Throws RuntimeException on failure\n          \n          \n            \n                 * Retrieve the first page of the collection", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497838493", "createdAt": "2020-09-30T22:34:42Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataRetriever.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents a synchronous paged data provider with fixed page size\n+ * @param <T> items in the page\n+ * @param <P> page of items\n+ */\n+public abstract class PagedDataRetriever<T, P extends Page<T>> {\n+\n+    /**\n+     * Retrieve first page of the collection. Throws RuntimeException on failure", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzODc3MA==", "bodyText": "Do we really need to state this throws a RuntimeException? The same question applies for all other interface methods that do this.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497838770", "createdAt": "2020-09-30T22:35:28Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataRetriever.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents a synchronous paged data provider with fixed page size\n+ * @param <T> items in the page\n+ * @param <P> page of items\n+ */\n+public abstract class PagedDataRetriever<T, P extends Page<T>> {\n+\n+    /**\n+     * Retrieve first page of the collection. Throws RuntimeException on failure", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzODQ5Mw=="}, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjY2NzM4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseRetriever.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjozODoxNlrOHaxuaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjozODoxNlrOHaxuaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzOTcyMw==", "bodyText": "I think it would look nice if we can add a link to both Page and Response in this Javadoc.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497839723", "createdAt": "2020-09-30T22:38:16Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseRetriever.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.util.paging.Page;\n+\n+/**\n+ * Represents a synchronous paged data provider with fixed page size that returns both page and response", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjY3Njk4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataRetriever.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjo0MTo1NFrOHaxzSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjo0MTo1NFrOHaxzSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0MDk3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Represents an asynchronous paged data provider with fixed page size\n          \n          \n            \n             * Represents an asynchronous paged data provider with a fixed page size", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497840971", "createdAt": "2020-09-30T22:41:54Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataRetriever.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.util.paging.Page;\n+\n+/**\n+ * Represents an asynchronous paged data provider with fixed page size", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjY3ODQ2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataRetriever.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjo0MjozMFrOHax0KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjo0MjozMFrOHax0KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0MTE5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @param <P> page that contains the items\n          \n          \n            \n             * @param <P> type of the page", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497841192", "createdAt": "2020-09-30T22:42:30Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataRetriever.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.util.paging.Page;\n+\n+/**\n+ * Represents an asynchronous paged data provider with fixed page size\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjY4MTk5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataRetriever.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjo0NDoxM1rOHax2Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjo0NDoxM1rOHax2Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0MTczNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param callback callback function to handle the page data along with the response for retrieving it\n          \n          \n            \n                 * @param callback callback function to handle the page data along with the response it comes with", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497841734", "createdAt": "2020-09-30T22:44:13Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataRetriever.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.util.paging.Page;\n+\n+/**\n+ * Represents an asynchronous paged data provider with fixed page size\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public abstract class AsyncPagedDataRetriever<T, P extends Page<T>> {\n+\n+    /**\n+     * Retrieve the first page in the collection\n+     * @param callback callback function to handle the page data along with the response for retrieving it", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjY4NTUzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjo0NTozMlrOHax4Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjo0NTozMlrOHax4Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0MjIzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Represents a collection of paged data with fixed page size where pages can be retrieved synchronously\n          \n          \n            \n             * Represents a collection of paged data with a fixed page size where pages can be retrieved synchronously", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497842234", "createdAt": "2020-09-30T22:45:32Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a collection of paged data with fixed page size where pages can be retrieved synchronously", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjY4NjA1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjo0NTo0NlrOHax4jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjo0NTo0NlrOHax4jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0MjMxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @param <P> page that contains the items\n          \n          \n            \n             * @param <P> type of the page", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497842318", "createdAt": "2020-09-30T22:45:46Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a collection of paged data with fixed page size where pages can be retrieved synchronously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjY4ODkwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjo0NzowN1rOHax6SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjo0NzowN1rOHax6SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0Mjc2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Constructor requires a synchronous paged data provider\n          \n          \n            \n                 * @param pagedDataRetriever paged data provider with fixed page size\n          \n          \n            \n                 * Constructor that requires a synchronous paged data provider\n          \n          \n            \n                 * @param pagedDataRetriever paged data provider with a fixed page size", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497842761", "createdAt": "2020-09-30T22:47:07Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a collection of paged data with fixed page size where pages can be retrieved synchronously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataCollection<T, P extends Page<T>> {\n+    private final PagedDataRetriever<T, P> pagedDataRetriever;\n+    private LinkedHashMap<String, P> pages = new LinkedHashMap<String, P>();\n+    private String firstPageId;\n+\n+    /**\n+     * Constructor requires a synchronous paged data provider\n+     * @param pagedDataRetriever paged data provider with fixed page size", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjY5MDk1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjo0Nzo1NFrOHax7Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjo0Nzo1NFrOHax7Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0MzA0Ng==", "bodyText": "For consistency\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    firstPageId = firstPage.getPageId();\n          \n          \n            \n                    this.firstPageId = firstPage.getPageId();", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497843046", "createdAt": "2020-09-30T22:47:54Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a collection of paged data with fixed page size where pages can be retrieved synchronously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataCollection<T, P extends Page<T>> {\n+    private final PagedDataRetriever<T, P> pagedDataRetriever;\n+    private LinkedHashMap<String, P> pages = new LinkedHashMap<String, P>();\n+    private String firstPageId;\n+\n+    /**\n+     * Constructor requires a synchronous paged data provider\n+     * @param pagedDataRetriever paged data provider with fixed page size\n+     */\n+    public PagedDataCollection(@NonNull PagedDataRetriever<T, P> pagedDataRetriever) {\n+        Objects.requireNonNull(pagedDataRetriever);\n+        this.pagedDataRetriever = pagedDataRetriever;\n+    }\n+\n+    /**\n+     * Retrieve the first page in the collection\n+     * @return First page of the collection\n+     */\n+    public P getFirstPage() {\n+        if (firstPageId != null) {\n+            return pages.get(firstPageId);\n+        }\n+        P firstPage = pagedDataRetriever.getFirstPage();\n+        firstPageId = firstPage.getPageId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjY5MTY2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjo0ODoxNVrOHax70w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjo0ODoxNVrOHax70w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0MzE1NQ==", "bodyText": "nit;\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return  firstPage;\n          \n          \n            \n                    return firstPage;", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497843155", "createdAt": "2020-09-30T22:48:15Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a collection of paged data with fixed page size where pages can be retrieved synchronously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataCollection<T, P extends Page<T>> {\n+    private final PagedDataRetriever<T, P> pagedDataRetriever;\n+    private LinkedHashMap<String, P> pages = new LinkedHashMap<String, P>();\n+    private String firstPageId;\n+\n+    /**\n+     * Constructor requires a synchronous paged data provider\n+     * @param pagedDataRetriever paged data provider with fixed page size\n+     */\n+    public PagedDataCollection(@NonNull PagedDataRetriever<T, P> pagedDataRetriever) {\n+        Objects.requireNonNull(pagedDataRetriever);\n+        this.pagedDataRetriever = pagedDataRetriever;\n+    }\n+\n+    /**\n+     * Retrieve the first page in the collection\n+     * @return First page of the collection\n+     */\n+    public P getFirstPage() {\n+        if (firstPageId != null) {\n+            return pages.get(firstPageId);\n+        }\n+        P firstPage = pagedDataRetriever.getFirstPage();\n+        firstPageId = firstPage.getPageId();\n+        pages.put(firstPage.getPageId(), firstPage);\n+        return  firstPage;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjcwMzEwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjo1MzoyN1rOHayCWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjo1MzoyN1rOHayCWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0NDgyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Retrieve a page with its id\n          \n          \n            \n                 * @param pageId id of the page\n          \n          \n            \n                 * @return page of data with the requested id\n          \n          \n            \n                 * Retrieve a page with the given id\n          \n          \n            \n                 * @param pageId id of the page to retrieve\n          \n          \n            \n                 * @return a page that matches the given id", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497844824", "createdAt": "2020-09-30T22:53:27Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a collection of paged data with fixed page size where pages can be retrieved synchronously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataCollection<T, P extends Page<T>> {\n+    private final PagedDataRetriever<T, P> pagedDataRetriever;\n+    private LinkedHashMap<String, P> pages = new LinkedHashMap<String, P>();\n+    private String firstPageId;\n+\n+    /**\n+     * Constructor requires a synchronous paged data provider\n+     * @param pagedDataRetriever paged data provider with fixed page size\n+     */\n+    public PagedDataCollection(@NonNull PagedDataRetriever<T, P> pagedDataRetriever) {\n+        Objects.requireNonNull(pagedDataRetriever);\n+        this.pagedDataRetriever = pagedDataRetriever;\n+    }\n+\n+    /**\n+     * Retrieve the first page in the collection\n+     * @return First page of the collection\n+     */\n+    public P getFirstPage() {\n+        if (firstPageId != null) {\n+            return pages.get(firstPageId);\n+        }\n+        P firstPage = pagedDataRetriever.getFirstPage();\n+        firstPageId = firstPage.getPageId();\n+        pages.put(firstPage.getPageId(), firstPage);\n+        return  firstPage;\n+    }\n+\n+    /**\n+     * Retrieve a page with its id\n+     * @param pageId id of the page\n+     * @return page of data with the requested id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjgxNDAwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseCollection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo0ODoyOVrOHazDJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo0ODoyOVrOHazDJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2MTQxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Retrieve a page synchronously along with the response for retrieving it using page id\n          \n          \n            \n                 * @param pageId id of the page\n          \n          \n            \n                 * @return page and the response for retrieving it\n          \n          \n            \n                 * Retrieve a page with the given id synchronously along with the response it comes with\n          \n          \n            \n                 * @param pageId id of the page to retrieve\n          \n          \n            \n                 * @return a response with page data for the given page id", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497861413", "createdAt": "2020-09-30T23:48:29Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseCollection.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a collection of pages where page and the response for retrieving it can be returned synchronously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataResponseCollection<T, P extends Page<T>> {\n+    private final PagedDataResponseRetriever<T, P> pagedDataRetriever;\n+    private LinkedHashMap<String, Response<P>> pages = new LinkedHashMap<String, Response<P>>();\n+    private String firstPageId;\n+\n+    /**\n+     * Constructor requires a page provider that returns page data and response synchronously\n+     * @param pagedDataRetriever synchronous paged data provider\n+     */\n+    public PagedDataResponseCollection(@NonNull PagedDataResponseRetriever<T, P> pagedDataRetriever) {\n+        Objects.requireNonNull(pagedDataRetriever);\n+        this.pagedDataRetriever = pagedDataRetriever;\n+    }\n+\n+    /**\n+     * Retrieves the first page in the collection synchronously\n+     * @return page data along with the response for retrieving the first page\n+     */\n+    public Response<P> getFirstPage() {\n+        if (firstPageId != null) {\n+            return pages.get(firstPageId);\n+        }\n+        Response<P> firstPageResponse = pagedDataRetriever.getFirstPage();\n+        if (firstPageResponse != null\n+            && firstPageResponse.getValue() != null\n+            && firstPageResponse.getValue().getPageId() != null) {\n+            firstPageId = firstPageResponse.getValue().getPageId();\n+            pages.put(firstPageId, firstPageResponse);\n+        }\n+        return  firstPageResponse;\n+    }\n+\n+    /**\n+     * Retrieve a page synchronously along with the response for retrieving it using page id\n+     * @param pageId id of the page\n+     * @return page and the response for retrieving it", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjgxNjA0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseRetriever.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo0OTo0MlrOHazEWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo0OTo0MlrOHazEWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2MTcyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Get a page by its id\n          \n          \n            \n                 * @param pageId id of the page\n          \n          \n            \n                 * @return a response with page data\n          \n          \n            \n                 * Retrieve a page with the given id along with the response it comes with\n          \n          \n            \n                 * @param pageId id of the page to retrieve\n          \n          \n            \n                 * @return a response with page data for the given page id", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497861720", "createdAt": "2020-09-30T23:49:42Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseRetriever.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.util.paging.Page;\n+\n+/**\n+ * Represents a synchronous paged data provider with fixed page size that returns both page and response\n+ * @param <T> type of the items in the page\n+ * @param <P> type of the page\n+ */\n+public abstract class PagedDataResponseRetriever<T, P extends Page<T>> {\n+\n+    /**\n+     * Get first page in the collection\n+     * @return a response with page data\n+     */\n+    public abstract Response<P> getFirstPage();\n+\n+    /**\n+     * Get a page by its id\n+     * @param pageId id of the page\n+     * @return a response with page data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjgxOTEwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataRetriever.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo1MTowMlrOHazF5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo1MTowMlrOHazF5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2MjExNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Retrieve page with the given id. Throws RuntimeException on failure\n          \n          \n            \n                 * @param pageId id of the page to retrieve\n          \n          \n            \n                 * @return page of items\n          \n          \n            \n                 * Retrieve a page with the given id\n          \n          \n            \n                 * @param pageId id of the page to retrieve\n          \n          \n            \n                 * @return a page that matches the given id", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497862116", "createdAt": "2020-09-30T23:51:02Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataRetriever.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents a synchronous paged data provider with fixed page size\n+ * @param <T> items in the page\n+ * @param <P> page of items\n+ */\n+public abstract class PagedDataRetriever<T, P extends Page<T>> {\n+\n+    /**\n+     * Retrieve first page of the collection. Throws RuntimeException on failure\n+     * @return the first page of the collection\n+     */\n+    public abstract P getFirstPage();\n+\n+    /**\n+     * Retrieve page with the given id. Throws RuntimeException on failure\n+     * @param pageId id of the page to retrieve\n+     * @return page of items", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjgyMzUwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataRetriever.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo1MzoxN1rOHazIcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo1MzoxN1rOHazIcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2Mjc2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Represents a synchronous paged data provider with fixed page size\n          \n          \n            \n             * @param <T> items in the page\n          \n          \n            \n             * @param <P> page of items\n          \n          \n            \n             * Represents a synchronous paged data provider with a fixed page size\n          \n          \n            \n             * @param <T> type of the items contained in the page\n          \n          \n            \n             * @param <P> type of the page", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497862768", "createdAt": "2020-09-30T23:53:17Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataRetriever.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents a synchronous paged data provider with fixed page size\n+ * @param <T> items in the page\n+ * @param <P> page of items", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjgzMDE4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseRetriever.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo1Njo0MFrOHazMLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo1Njo0MFrOHazMLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2MzcyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Represents a synchronous paged data provider with fixed page size that returns both page and response\n          \n          \n            \n             * @param <T> type of the items in the page\n          \n          \n            \n             * @param <P> type of the page\n          \n          \n            \n             * Represents a synchronous paged data provider with a fixed page size that returns both page and response\n          \n          \n            \n             * @param <T> type of the items contained in the page\n          \n          \n            \n             * @param <P> type of the page", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497863724", "createdAt": "2020-09-30T23:56:40Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseRetriever.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.util.paging.Page;\n+\n+/**\n+ * Represents a synchronous paged data provider with fixed page size that returns both page and response\n+ * @param <T> type of the items in the page\n+ * @param <P> type of the page", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjgzMTE0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseRetriever.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo1NzoxNFrOHazMuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo1NzoxNFrOHazMuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2Mzg2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Get first page in the collection\n          \n          \n            \n                 * @return a response with page data\n          \n          \n            \n                 * Retrieve the first page of the collection\n          \n          \n            \n                 * @return a response with page data for the first page of the collection", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497863867", "createdAt": "2020-09-30T23:57:14Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseRetriever.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.util.paging.Page;\n+\n+/**\n+ * Represents a synchronous paged data provider with fixed page size that returns both page and response\n+ * @param <T> type of the items in the page\n+ * @param <P> type of the page\n+ */\n+public abstract class PagedDataResponseRetriever<T, P extends Page<T>> {\n+\n+    /**\n+     * Get first page in the collection\n+     * @return a response with page data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjgzMzAwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseCollection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo1ODoxN1rOHazN2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo1ODoxN1rOHazN2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2NDE1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Retrieves the first page in the collection synchronously\n          \n          \n            \n                 * @return page data along with the response for retrieving the first page\n          \n          \n            \n                 * Retrieve the first page of the collection synchronously\n          \n          \n            \n                 * @return a response with page data for the first page of the collection", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497864155", "createdAt": "2020-09-30T23:58:17Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseCollection.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a collection of pages where page and the response for retrieving it can be returned synchronously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataResponseCollection<T, P extends Page<T>> {\n+    private final PagedDataResponseRetriever<T, P> pagedDataRetriever;\n+    private LinkedHashMap<String, Response<P>> pages = new LinkedHashMap<String, Response<P>>();\n+    private String firstPageId;\n+\n+    /**\n+     * Constructor requires a page provider that returns page data and response synchronously\n+     * @param pagedDataRetriever synchronous paged data provider\n+     */\n+    public PagedDataResponseCollection(@NonNull PagedDataResponseRetriever<T, P> pagedDataRetriever) {\n+        Objects.requireNonNull(pagedDataRetriever);\n+        this.pagedDataRetriever = pagedDataRetriever;\n+    }\n+\n+    /**\n+     * Retrieves the first page in the collection synchronously\n+     * @return page data along with the response for retrieving the first page", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjgzODUyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDowMDo1OFrOHazQ7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDowMDo1OFrOHazQ7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2NDk0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Retrieve the first page in the collection\n          \n          \n            \n                 * @return First page of the collection\n          \n          \n            \n                 * Retrieve the first page of the collection\n          \n          \n            \n                 * @return the first page of the collection", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497864942", "createdAt": "2020-10-01T00:00:58Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a collection of paged data with fixed page size where pages can be retrieved synchronously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataCollection<T, P extends Page<T>> {\n+    private final PagedDataRetriever<T, P> pagedDataRetriever;\n+    private LinkedHashMap<String, P> pages = new LinkedHashMap<String, P>();\n+    private String firstPageId;\n+\n+    /**\n+     * Constructor requires a synchronous paged data provider\n+     * @param pagedDataRetriever paged data provider with fixed page size\n+     */\n+    public PagedDataCollection(@NonNull PagedDataRetriever<T, P> pagedDataRetriever) {\n+        Objects.requireNonNull(pagedDataRetriever);\n+        this.pagedDataRetriever = pagedDataRetriever;\n+    }\n+\n+    /**\n+     * Retrieve the first page in the collection\n+     * @return First page of the collection", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjg0NTkzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDowNToxOFrOHazVSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDowNToxOFrOHazVSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2NjA1Ng==", "bodyText": "nit; We can use the value we just set.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    pages.put(firstPage.getPageId(), firstPage);\n          \n          \n            \n                    pages.put(firstPageId, firstPage);", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497866056", "createdAt": "2020-10-01T00:05:18Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a collection of paged data with fixed page size where pages can be retrieved synchronously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataCollection<T, P extends Page<T>> {\n+    private final PagedDataRetriever<T, P> pagedDataRetriever;\n+    private LinkedHashMap<String, P> pages = new LinkedHashMap<String, P>();\n+    private String firstPageId;\n+\n+    /**\n+     * Constructor requires a synchronous paged data provider\n+     * @param pagedDataRetriever paged data provider with fixed page size\n+     */\n+    public PagedDataCollection(@NonNull PagedDataRetriever<T, P> pagedDataRetriever) {\n+        Objects.requireNonNull(pagedDataRetriever);\n+        this.pagedDataRetriever = pagedDataRetriever;\n+    }\n+\n+    /**\n+     * Retrieve the first page in the collection\n+     * @return First page of the collection\n+     */\n+    public P getFirstPage() {\n+        if (firstPageId != null) {\n+            return pages.get(firstPageId);\n+        }\n+        P firstPage = pagedDataRetriever.getFirstPage();\n+        firstPageId = firstPage.getPageId();\n+        pages.put(firstPage.getPageId(), firstPage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjg0NzMxOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDowNjowN1rOHazWGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDowNjowN1rOHazWGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2NjI2NA==", "bodyText": "What happens if the given pageId is null? The annotation will not stop users from passing such a value.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    P page = pages.get(pageId);\n          \n          \n            \n                    Objects.requireNonNull(pageId);\n          \n          \n            \n                    P page = pages.get(pageId);", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497866264", "createdAt": "2020-10-01T00:06:07Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a collection of paged data with fixed page size where pages can be retrieved synchronously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataCollection<T, P extends Page<T>> {\n+    private final PagedDataRetriever<T, P> pagedDataRetriever;\n+    private LinkedHashMap<String, P> pages = new LinkedHashMap<String, P>();\n+    private String firstPageId;\n+\n+    /**\n+     * Constructor requires a synchronous paged data provider\n+     * @param pagedDataRetriever paged data provider with fixed page size\n+     */\n+    public PagedDataCollection(@NonNull PagedDataRetriever<T, P> pagedDataRetriever) {\n+        Objects.requireNonNull(pagedDataRetriever);\n+        this.pagedDataRetriever = pagedDataRetriever;\n+    }\n+\n+    /**\n+     * Retrieve the first page in the collection\n+     * @return First page of the collection\n+     */\n+    public P getFirstPage() {\n+        if (firstPageId != null) {\n+            return pages.get(firstPageId);\n+        }\n+        P firstPage = pagedDataRetriever.getFirstPage();\n+        firstPageId = firstPage.getPageId();\n+        pages.put(firstPage.getPageId(), firstPage);\n+        return  firstPage;\n+    }\n+\n+    /**\n+     * Retrieve a page with its id\n+     * @param pageId id of the page\n+     * @return page of data with the requested id\n+     */\n+    public P getPage(@NonNull String pageId) {\n+        P page = pages.get(pageId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjg1NTg0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoxMTowNlrOHazbJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoxMTowNlrOHazbJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2NzU1OQ==", "bodyText": "nit; we can just use the pageId given as an input parameter.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    pages.put(page.getPageId(), page);\n          \n          \n            \n                    pages.put(pageId, page);", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497867559", "createdAt": "2020-10-01T00:11:06Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a collection of paged data with fixed page size where pages can be retrieved synchronously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataCollection<T, P extends Page<T>> {\n+    private final PagedDataRetriever<T, P> pagedDataRetriever;\n+    private LinkedHashMap<String, P> pages = new LinkedHashMap<String, P>();\n+    private String firstPageId;\n+\n+    /**\n+     * Constructor requires a synchronous paged data provider\n+     * @param pagedDataRetriever paged data provider with fixed page size\n+     */\n+    public PagedDataCollection(@NonNull PagedDataRetriever<T, P> pagedDataRetriever) {\n+        Objects.requireNonNull(pagedDataRetriever);\n+        this.pagedDataRetriever = pagedDataRetriever;\n+    }\n+\n+    /**\n+     * Retrieve the first page in the collection\n+     * @return First page of the collection\n+     */\n+    public P getFirstPage() {\n+        if (firstPageId != null) {\n+            return pages.get(firstPageId);\n+        }\n+        P firstPage = pagedDataRetriever.getFirstPage();\n+        firstPageId = firstPage.getPageId();\n+        pages.put(firstPage.getPageId(), firstPage);\n+        return  firstPage;\n+    }\n+\n+    /**\n+     * Retrieve a page with its id\n+     * @param pageId id of the page\n+     * @return page of data with the requested id\n+     */\n+    public P getPage(@NonNull String pageId) {\n+        P page = pages.get(pageId);\n+        if (page != null) {\n+            return page;\n+        }\n+\n+        page = pagedDataRetriever.getPage(pageId);\n+        // setting previous page id should simplify implementation for androidx.arch.DataSource\n+        final Iterator<P> iterator = pages.values().iterator();\n+        while(iterator.hasNext()){\n+            final P existingPage = iterator.next();\n+            if (pageId.equals(existingPage.getNextPageId())) {\n+                page.setPreviousPageId(existingPage.getPageId());\n+                break;\n+            }\n+        }\n+        pages.put(page.getPageId(), page);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjg1NjYyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseCollection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoxMTozNlrOHazbkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoxMTozNlrOHazbkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2NzY2NQ==", "bodyText": "nit;\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return  firstPageResponse;\n          \n          \n            \n                    return firstPageResponse;", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497867665", "createdAt": "2020-10-01T00:11:36Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseCollection.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a collection of pages where page and the response for retrieving it can be returned synchronously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataResponseCollection<T, P extends Page<T>> {\n+    private final PagedDataResponseRetriever<T, P> pagedDataRetriever;\n+    private LinkedHashMap<String, Response<P>> pages = new LinkedHashMap<String, Response<P>>();\n+    private String firstPageId;\n+\n+    /**\n+     * Constructor requires a page provider that returns page data and response synchronously\n+     * @param pagedDataRetriever synchronous paged data provider\n+     */\n+    public PagedDataResponseCollection(@NonNull PagedDataResponseRetriever<T, P> pagedDataRetriever) {\n+        Objects.requireNonNull(pagedDataRetriever);\n+        this.pagedDataRetriever = pagedDataRetriever;\n+    }\n+\n+    /**\n+     * Retrieves the first page in the collection synchronously\n+     * @return page data along with the response for retrieving the first page\n+     */\n+    public Response<P> getFirstPage() {\n+        if (firstPageId != null) {\n+            return pages.get(firstPageId);\n+        }\n+        Response<P> firstPageResponse = pagedDataRetriever.getFirstPage();\n+        if (firstPageResponse != null\n+            && firstPageResponse.getValue() != null\n+            && firstPageResponse.getValue().getPageId() != null) {\n+            firstPageId = firstPageResponse.getValue().getPageId();\n+            pages.put(firstPageId, firstPageResponse);\n+        }\n+        return  firstPageResponse;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjg2MjEyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseCollection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoxNDo0NlrOHazeyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoxNDo0NlrOHazeyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2ODQ4OQ==", "bodyText": "nit; We can use the pageId given as an input parameter.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        pages.put(pageResponse.getValue().getPageId(), pageResponse);\n          \n          \n            \n                        pages.put(pageId, pageResponse);", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497868489", "createdAt": "2020-10-01T00:14:46Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseCollection.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a collection of pages where page and the response for retrieving it can be returned synchronously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataResponseCollection<T, P extends Page<T>> {\n+    private final PagedDataResponseRetriever<T, P> pagedDataRetriever;\n+    private LinkedHashMap<String, Response<P>> pages = new LinkedHashMap<String, Response<P>>();\n+    private String firstPageId;\n+\n+    /**\n+     * Constructor requires a page provider that returns page data and response synchronously\n+     * @param pagedDataRetriever synchronous paged data provider\n+     */\n+    public PagedDataResponseCollection(@NonNull PagedDataResponseRetriever<T, P> pagedDataRetriever) {\n+        Objects.requireNonNull(pagedDataRetriever);\n+        this.pagedDataRetriever = pagedDataRetriever;\n+    }\n+\n+    /**\n+     * Retrieves the first page in the collection synchronously\n+     * @return page data along with the response for retrieving the first page\n+     */\n+    public Response<P> getFirstPage() {\n+        if (firstPageId != null) {\n+            return pages.get(firstPageId);\n+        }\n+        Response<P> firstPageResponse = pagedDataRetriever.getFirstPage();\n+        if (firstPageResponse != null\n+            && firstPageResponse.getValue() != null\n+            && firstPageResponse.getValue().getPageId() != null) {\n+            firstPageId = firstPageResponse.getValue().getPageId();\n+            pages.put(firstPageId, firstPageResponse);\n+        }\n+        return  firstPageResponse;\n+    }\n+\n+    /**\n+     * Retrieve a page synchronously along with the response for retrieving it using page id\n+     * @param pageId id of the page\n+     * @return page and the response for retrieving it\n+     */\n+    public Response<P> getPage(@NonNull String pageId) {\n+        Objects.requireNonNull(pageId);\n+        Response<P> pageResponse = pages.get(pageId);\n+        if (pageResponse != null) {\n+            return pageResponse;\n+        }\n+\n+        pageResponse = pagedDataRetriever.getPage(pageId);\n+        if (pageResponse != null\n+            && pageResponse.getValue() != null\n+            && pageResponse.getValue().getPageId() != null) {\n+            // setting previous page id should simplify implementation for androidx.arch.DataSource\n+            final Iterator<Response<P>> iterator = pages.values().iterator();\n+            while (iterator.hasNext()) {\n+                final P existingPage = iterator.next().getValue();\n+                if (pageId.equals(existingPage.getNextPageId())) {\n+                    pageResponse.getValue().setPreviousPageId(existingPage.getPageId());\n+                    break;\n+                }\n+            }\n+            pages.put(pageResponse.getValue().getPageId(), pageResponse);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjg2Mzk5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataRetriever.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoxNToyMVrOHazf7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoxNToyMVrOHazf7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2ODc4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Retrieve a page with its id\n          \n          \n            \n                 * @param pageId id of the page\n          \n          \n            \n                 * @param callback callback function to handle the page data along with the response for retrieving it\n          \n          \n            \n                 * Retrieve a page with the given id\n          \n          \n            \n                 * @param pageId id of the page\n          \n          \n            \n                 * @param callback callback function to handle the page data along with the response it comes with", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497868782", "createdAt": "2020-10-01T00:15:21Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataRetriever.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.util.paging.Page;\n+\n+/**\n+ * Represents an asynchronous paged data provider with fixed page size\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public abstract class AsyncPagedDataRetriever<T, P extends Page<T>> {\n+\n+    /**\n+     * Retrieve the first page in the collection\n+     * @param callback callback function to handle the page data along with the response for retrieving it\n+     */\n+    public abstract void getFirstPage(Callback<P> callback);\n+\n+    /**\n+     * Retrieve a page with its id\n+     * @param pageId id of the page\n+     * @param callback callback function to handle the page data along with the response for retrieving it", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjg2OTM5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataCollection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoxNjo0NFrOHazjig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoxNjo0NFrOHazjig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2OTcwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Represents a collection of pages where page data and response for retrieving it can be returned asynchronously\n          \n          \n            \n             * @param <T> type of the items in the page\n          \n          \n            \n             * @param <P> Page of items\n          \n          \n            \n             * Represents a collection of pages where page data and the response it comes with it can be obtained asynchronously\n          \n          \n            \n             * @param <T> type of the items in the page\n          \n          \n            \n             * @param <P> type of the page", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497869706", "createdAt": "2020-10-01T00:16:44Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataCollection.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Objects;\n+\n+import okhttp3.Response;\n+\n+/**\n+ * Represents a collection of pages where page data and response for retrieving it can be returned asynchronously\n+ * @param <T> type of the items in the page\n+ * @param <P> Page of items", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjg3NzQxOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataCollection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoxOTowMlrOHazpCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoxOTowMlrOHazpCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3MTExMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Construction requires an asynchronous paged data provider\n          \n          \n            \n                 * @param asyncPagedDataRetriever an asynchronous page data provider\n          \n          \n            \n                 * Constructor requires an asynchronous paged data provider\n          \n          \n            \n                 * @param asyncPagedDataRetriever an asynchronous paged data provider", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497871112", "createdAt": "2020-10-01T00:19:02Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataCollection.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Objects;\n+\n+import okhttp3.Response;\n+\n+/**\n+ * Represents a collection of pages where page data and response for retrieving it can be returned asynchronously\n+ * @param <T> type of the items in the page\n+ * @param <P> Page of items\n+ */\n+public class AsyncPagedDataCollection<T, P extends Page<T>> {\n+    private final AsyncPagedDataRetriever<T, P> asyncPagedDataRetriever;\n+    private LinkedHashMap<String, PageAndResponse<P>> pages = new LinkedHashMap<String, PageAndResponse<P>>();\n+    private String firstPageId;\n+\n+    /**\n+     * Construction requires an asynchronous paged data provider\n+     * @param asyncPagedDataRetriever an asynchronous page data provider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjg4NTg5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataCollection.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoyMToxM1rOHazugQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoyMToxM1rOHazugQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3MjUxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Gets first page in the collection along with the response retrieving the first page\n          \n          \n            \n                 * @param callback a callback interface for handling the first page and its response\n          \n          \n            \n                 * Retrieve the first page of the collection along with the response it comes with\n          \n          \n            \n                 * @param callback callback interface for handling the first page and the response it comes with", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497872513", "createdAt": "2020-10-01T00:21:13Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataCollection.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Objects;\n+\n+import okhttp3.Response;\n+\n+/**\n+ * Represents a collection of pages where page data and response for retrieving it can be returned asynchronously\n+ * @param <T> type of the items in the page\n+ * @param <P> Page of items\n+ */\n+public class AsyncPagedDataCollection<T, P extends Page<T>> {\n+    private final AsyncPagedDataRetriever<T, P> asyncPagedDataRetriever;\n+    private LinkedHashMap<String, PageAndResponse<P>> pages = new LinkedHashMap<String, PageAndResponse<P>>();\n+    private String firstPageId;\n+\n+    /**\n+     * Construction requires an asynchronous paged data provider\n+     * @param asyncPagedDataRetriever an asynchronous page data provider\n+     */\n+    public AsyncPagedDataCollection(@NonNull AsyncPagedDataRetriever<T, P> asyncPagedDataRetriever) {\n+        Objects.requireNonNull(asyncPagedDataRetriever);\n+        this.asyncPagedDataRetriever = asyncPagedDataRetriever;\n+    }\n+\n+    private void cacheResponse(P page, Response response) {\n+        if (page.getPageId() == null) {\n+            return;\n+        }\n+        pages.put(page.getPageId(), new PageAndResponse<P>(page, response));\n+\n+        // setting previous page id should simplify implementation for androidx.arch.DataSource\n+        final Iterator<PageAndResponse<P>> iterator = pages.values().iterator();\n+        while(iterator.hasNext()){\n+            final P existingPage = iterator.next().page;\n+            if (page.getPageId().equals(existingPage.getNextPageId())){\n+                page.setPreviousPageId(existingPage.getPageId());\n+                break;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Gets first page in the collection along with the response retrieving the first page\n+     * @param callback a callback interface for handling the first page and its response", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjkwMDg3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseCollection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoyNTozNFrOHaz4cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxODo1Mjo0M1rOHbXASQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3NTA1Nw==", "bodyText": "How likely is it that the pageId turns out to be null? We don't check for nullness in the other PagedCollection classes.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497875057", "createdAt": "2020-10-01T00:25:34Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseCollection.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a collection of pages where page and the response for retrieving it can be returned synchronously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataResponseCollection<T, P extends Page<T>> {\n+    private final PagedDataResponseRetriever<T, P> pagedDataRetriever;\n+    private LinkedHashMap<String, Response<P>> pages = new LinkedHashMap<String, Response<P>>();\n+    private String firstPageId;\n+\n+    /**\n+     * Constructor requires a page provider that returns page data and response synchronously\n+     * @param pagedDataRetriever synchronous paged data provider\n+     */\n+    public PagedDataResponseCollection(@NonNull PagedDataResponseRetriever<T, P> pagedDataRetriever) {\n+        Objects.requireNonNull(pagedDataRetriever);\n+        this.pagedDataRetriever = pagedDataRetriever;\n+    }\n+\n+    /**\n+     * Retrieves the first page in the collection synchronously\n+     * @return page data along with the response for retrieving the first page\n+     */\n+    public Response<P> getFirstPage() {\n+        if (firstPageId != null) {\n+            return pages.get(firstPageId);\n+        }\n+        Response<P> firstPageResponse = pagedDataRetriever.getFirstPage();\n+        if (firstPageResponse != null\n+            && firstPageResponse.getValue() != null\n+            && firstPageResponse.getValue().getPageId() != null) {\n+            firstPageId = firstPageResponse.getValue().getPageId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ1MDUwNQ==", "bodyText": "Added null check wherever missing. Hope this resolves it", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r498450505", "createdAt": "2020-10-01T18:52:43Z", "author": {"login": "JianpingChen"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseCollection.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a collection of pages where page and the response for retrieving it can be returned synchronously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataResponseCollection<T, P extends Page<T>> {\n+    private final PagedDataResponseRetriever<T, P> pagedDataRetriever;\n+    private LinkedHashMap<String, Response<P>> pages = new LinkedHashMap<String, Response<P>>();\n+    private String firstPageId;\n+\n+    /**\n+     * Constructor requires a page provider that returns page data and response synchronously\n+     * @param pagedDataRetriever synchronous paged data provider\n+     */\n+    public PagedDataResponseCollection(@NonNull PagedDataResponseRetriever<T, P> pagedDataRetriever) {\n+        Objects.requireNonNull(pagedDataRetriever);\n+        this.pagedDataRetriever = pagedDataRetriever;\n+    }\n+\n+    /**\n+     * Retrieves the first page in the collection synchronously\n+     * @return page data along with the response for retrieving the first page\n+     */\n+    public Response<P> getFirstPage() {\n+        if (firstPageId != null) {\n+            return pages.get(firstPageId);\n+        }\n+        Response<P> firstPageResponse = pagedDataRetriever.getFirstPage();\n+        if (firstPageResponse != null\n+            && firstPageResponse.getValue() != null\n+            && firstPageResponse.getValue().getPageId() != null) {\n+            firstPageId = firstPageResponse.getValue().getPageId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3NTA1Nw=="}, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjkwNDEzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataCollection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoyNjoyOVrOHaz6pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoyNjoyOVrOHaz6pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3NTYyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Retrieve a page by its id\n          \n          \n            \n                 * @param pageId id of the page\n          \n          \n            \n                 * @param callback callback interface for handling the page along with its response\n          \n          \n            \n                 * Retrieve a page with the given id\n          \n          \n            \n                 * @param pageId id of the page\n          \n          \n            \n                 * @param callback callback interface for handling the page along with the response it comes with", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497875621", "createdAt": "2020-10-01T00:26:29Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataCollection.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Objects;\n+\n+import okhttp3.Response;\n+\n+/**\n+ * Represents a collection of pages where page data and response for retrieving it can be returned asynchronously\n+ * @param <T> type of the items in the page\n+ * @param <P> Page of items\n+ */\n+public class AsyncPagedDataCollection<T, P extends Page<T>> {\n+    private final AsyncPagedDataRetriever<T, P> asyncPagedDataRetriever;\n+    private LinkedHashMap<String, PageAndResponse<P>> pages = new LinkedHashMap<String, PageAndResponse<P>>();\n+    private String firstPageId;\n+\n+    /**\n+     * Construction requires an asynchronous paged data provider\n+     * @param asyncPagedDataRetriever an asynchronous page data provider\n+     */\n+    public AsyncPagedDataCollection(@NonNull AsyncPagedDataRetriever<T, P> asyncPagedDataRetriever) {\n+        Objects.requireNonNull(asyncPagedDataRetriever);\n+        this.asyncPagedDataRetriever = asyncPagedDataRetriever;\n+    }\n+\n+    private void cacheResponse(P page, Response response) {\n+        if (page.getPageId() == null) {\n+            return;\n+        }\n+        pages.put(page.getPageId(), new PageAndResponse<P>(page, response));\n+\n+        // setting previous page id should simplify implementation for androidx.arch.DataSource\n+        final Iterator<PageAndResponse<P>> iterator = pages.values().iterator();\n+        while(iterator.hasNext()){\n+            final P existingPage = iterator.next().page;\n+            if (page.getPageId().equals(existingPage.getNextPageId())){\n+                page.setPreviousPageId(existingPage.getPageId());\n+                break;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Gets first page in the collection along with the response retrieving the first page\n+     * @param callback a callback interface for handling the first page and its response\n+     */\n+    public void getFirstPage(@NonNull Callback<P> callback) {\n+        Objects.requireNonNull(callback);\n+        if (firstPageId == null){\n+            asyncPagedDataRetriever.getFirstPage(new Callback<P>() {\n+                @Override\n+                public void onSuccess(P value, Response response) {\n+                    if (value == null) {\n+                        callback.onSuccess(value, response);\n+                        return;\n+                    }\n+\n+                    firstPageId = value.getPageId();\n+                    cacheResponse(value, response);\n+                    callback.onSuccess(value, response);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable t, Response response) {\n+                    callback.onFailure(t, response);\n+                }\n+            });\n+        }\n+        else {\n+            PageAndResponse<P> firstPageResponse = pages.get(firstPageId);\n+            callback.onSuccess(firstPageResponse.page, firstPageResponse.response);\n+        }\n+    }\n+\n+    /**\n+     * Retrieve a page by its id\n+     * @param pageId id of the page\n+     * @param callback callback interface for handling the page along with its response", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjkyNTg3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataCollection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDozMjoxMFrOHa0JNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDozMjoxMFrOHa0JNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3OTM1MA==", "bodyText": "For consistency with getPage() below.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    callback.onSuccess(value, response);\n          \n          \n            \n                                    callback.onSuccess(null, response);", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497879350", "createdAt": "2020-10-01T00:32:10Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataCollection.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Objects;\n+\n+import okhttp3.Response;\n+\n+/**\n+ * Represents a collection of pages where page data and response for retrieving it can be returned asynchronously\n+ * @param <T> type of the items in the page\n+ * @param <P> Page of items\n+ */\n+public class AsyncPagedDataCollection<T, P extends Page<T>> {\n+    private final AsyncPagedDataRetriever<T, P> asyncPagedDataRetriever;\n+    private LinkedHashMap<String, PageAndResponse<P>> pages = new LinkedHashMap<String, PageAndResponse<P>>();\n+    private String firstPageId;\n+\n+    /**\n+     * Construction requires an asynchronous paged data provider\n+     * @param asyncPagedDataRetriever an asynchronous page data provider\n+     */\n+    public AsyncPagedDataCollection(@NonNull AsyncPagedDataRetriever<T, P> asyncPagedDataRetriever) {\n+        Objects.requireNonNull(asyncPagedDataRetriever);\n+        this.asyncPagedDataRetriever = asyncPagedDataRetriever;\n+    }\n+\n+    private void cacheResponse(P page, Response response) {\n+        if (page.getPageId() == null) {\n+            return;\n+        }\n+        pages.put(page.getPageId(), new PageAndResponse<P>(page, response));\n+\n+        // setting previous page id should simplify implementation for androidx.arch.DataSource\n+        final Iterator<PageAndResponse<P>> iterator = pages.values().iterator();\n+        while(iterator.hasNext()){\n+            final P existingPage = iterator.next().page;\n+            if (page.getPageId().equals(existingPage.getNextPageId())){\n+                page.setPreviousPageId(existingPage.getPageId());\n+                break;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Gets first page in the collection along with the response retrieving the first page\n+     * @param callback a callback interface for handling the first page and its response\n+     */\n+    public void getFirstPage(@NonNull Callback<P> callback) {\n+        Objects.requireNonNull(callback);\n+        if (firstPageId == null){\n+            asyncPagedDataRetriever.getFirstPage(new Callback<P>() {\n+                @Override\n+                public void onSuccess(P value, Response response) {\n+                    if (value == null) {\n+                        callback.onSuccess(value, response);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2244, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}