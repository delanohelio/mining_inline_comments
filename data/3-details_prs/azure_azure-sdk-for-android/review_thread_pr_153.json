{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyODY3NDc3", "number": 153, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjoyODozOVrODYAjwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMDowOTo1MlrODYTDsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTAxNTY4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/AndroidClientLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjoyODozOVrOFdn5JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMToyNzo1NlrOFdq_VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwNjYyOQ==", "bodyText": "nit; all caps needed only for static type, this could be just tag", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r366606629", "createdAt": "2020-01-14T22:28:39Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/AndroidClientLogger.java", "diffHunk": "@@ -0,0 +1,118 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util.logging;\n+\n+import android.util.Log;\n+\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is a fluent logger helper class that implements the {@link ClientLogger} interface.\n+ *\n+ * <p>This logger logs formattable messages that use {@code {}} as the placeholder. When a {@link Throwable throwable}\n+ * is the last argument of the format varargs and the logger is enabled for\n+ * {@link AndroidClientLogger#debug(String) debug}, the stack trace for the throwable is logged.</p>\n+ *\n+ * <p><strong>Log level hierarchy</strong></p>\n+ * <ol>\n+ * <li>{@link AndroidClientLogger#error(String) Error}</li>\n+ * <li>{@link AndroidClientLogger#warning(String) Warning}</li>\n+ * <li>{@link AndroidClientLogger#info(String) Info}</li>\n+ * <li>{@link AndroidClientLogger#debug(String) Verbose}</li>\n+ * </ol>\n+ *\n+ */\n+public class AndroidClientLogger implements ClientLogger{\n+    private final String TAG;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbcafee1bb3d37157627833e0db9d2147e84167d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY1NzM2NQ==", "bodyText": "You're right, I must have missed it :)", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r366657365", "createdAt": "2020-01-15T01:27:56Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/AndroidClientLogger.java", "diffHunk": "@@ -0,0 +1,118 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util.logging;\n+\n+import android.util.Log;\n+\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is a fluent logger helper class that implements the {@link ClientLogger} interface.\n+ *\n+ * <p>This logger logs formattable messages that use {@code {}} as the placeholder. When a {@link Throwable throwable}\n+ * is the last argument of the format varargs and the logger is enabled for\n+ * {@link AndroidClientLogger#debug(String) debug}, the stack trace for the throwable is logged.</p>\n+ *\n+ * <p><strong>Log level hierarchy</strong></p>\n+ * <ol>\n+ * <li>{@link AndroidClientLogger#error(String) Error}</li>\n+ * <li>{@link AndroidClientLogger#warning(String) Warning}</li>\n+ * <li>{@link AndroidClientLogger#info(String) Info}</li>\n+ * <li>{@link AndroidClientLogger#debug(String) Verbose}</li>\n+ * </ol>\n+ *\n+ */\n+public class AndroidClientLogger implements ClientLogger{\n+    private final String TAG;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwNjYyOQ=="}, "originalCommit": {"oid": "dbcafee1bb3d37157627833e0db9d2147e84167d"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTE5MDAyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/LogLevel.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzo1NToyM1rOFdpk_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMjozMzowOFrOFdr0QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYzNDIzNg==", "bodyText": "I vaguly recall once Brandon told about IntDef, so was looking into IntDef and learned that ProGuard by default optimize enum to int, so we should be fine with enum @bsiegel ?\nhttps://www.guardsquare.com/en/products/proguard/manual/usage/optimizations\nhttps://stackoverflow.com/a/32236950", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r366634236", "createdAt": "2020-01-14T23:55:23Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/LogLevel.java", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util.logging;\n+\n+/**\n+ * Enum which represent logging levels used in Azure SDKs.\n+ */\n+public enum LogLevel {\n+    /**\n+     * Indicates that log level is at verbose level.\n+     */\n+    DEBUG(1),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbcafee1bb3d37157627833e0db9d2147e84167d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYzNTc0Ng==", "bodyText": "Based on the discussion in that SO post, it seems like that optimization may not work, or at least it's very difficult to get ProGuard to enable it. I'd suggest going with IntDef etc. unless we find that to be super burdensome.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r366635746", "createdAt": "2020-01-15T00:00:52Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/LogLevel.java", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util.logging;\n+\n+/**\n+ * Enum which represent logging levels used in Azure SDKs.\n+ */\n+public enum LogLevel {\n+    /**\n+     * Indicates that log level is at verbose level.\n+     */\n+    DEBUG(1),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYzNDIzNg=="}, "originalCommit": {"oid": "dbcafee1bb3d37157627833e0db9d2147e84167d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYzNzY3Nw==", "bodyText": "Good catch Brandon!.  @vcolin7 please see this https://developer.android.com/reference/androidx/annotation/IntDef.html", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r366637677", "createdAt": "2020-01-15T00:08:23Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/LogLevel.java", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util.logging;\n+\n+/**\n+ * Enum which represent logging levels used in Azure SDKs.\n+ */\n+public enum LogLevel {\n+    /**\n+     * Indicates that log level is at verbose level.\n+     */\n+    DEBUG(1),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYzNDIzNg=="}, "originalCommit": {"oid": "dbcafee1bb3d37157627833e0db9d2147e84167d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY3MDkxMg==", "bodyText": "Done :)", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r366670912", "createdAt": "2020-01-15T02:33:08Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/LogLevel.java", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util.logging;\n+\n+/**\n+ * Enum which represent logging levels used in Azure SDKs.\n+ */\n+public enum LogLevel {\n+    /**\n+     * Indicates that log level is at verbose level.\n+     */\n+    DEBUG(1),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYzNDIzNg=="}, "originalCommit": {"oid": "dbcafee1bb3d37157627833e0db9d2147e84167d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Nzg5OTI2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/ClientLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOToxNzozM1rOFeDfaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOToxODozMVrOFeDhIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA1ODc5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Logs a message that at the {@code debug} log level.\n          \n          \n            \n                 * Logs a message at the {@code debug} log level.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367058795", "createdAt": "2020-01-15T19:17:33Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/ClientLogger.java", "diffHunk": "@@ -3,287 +3,112 @@\n \n package com.azure.android.core.util.logging;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.util.Arrays;\n-import java.util.Objects;\n-\n-/**\n- * This is a fluent logger helper class that wraps a pluggable {@link Logger}.\n- *\n- * <p>This logger logs formattable messages that use {@code {}} as the placeholder. When a {@link Throwable throwable}\n- * is the last argument of the format varargs and the logger is enabled for\n- * {@link ClientLogger#verbose(String, Object...) verbose}, the stack trace for the throwable is logged.</p>\n- *\n- * <p><strong>Log level hierarchy</strong></p>\n- * <ol>\n- * <li>{@link ClientLogger#error(String, Object...) Error}</li>\n- * <li>{@link ClientLogger#warning(String, Object...) Warning}</li>\n- * <li>{@link ClientLogger#info(String, Object...) Info}</li>\n- * <li>{@link ClientLogger#verbose(String, Object...) Verbose}</li>\n- * </ol>\n- *\n- */\n-public class ClientLogger {\n-    private final Logger logger;\n-\n-    /*\n-     * Indicates that log level is at verbose level.\n-     */\n-    private static final int VERBOSE_LEVEL = 1;\n-\n-    /*\n-     * Indicates that log level is at information level.\n-     */\n-    private static final int INFORMATIONAL_LEVEL = 2;\n-\n-    /*\n-     * Indicates that log level is at warning level.\n-     */\n-    private static final int WARNING_LEVEL = 3;\n-\n-    /*\n-     * Indicates that log level is at error level.\n-     */\n-    private static final int ERROR_LEVEL = 4;\n-\n-    /*\n-     * Indicates that logging is disabled.\n-     */\n-    private static final int DISABLED_LEVEL = 5;\n-\n+public interface ClientLogger {\n     /**\n-     * Retrieves a logger for the passed class using the {@link LoggerFactory}.\n+     * Logs a message that at the {@code debug} log level.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA1OTIzMg==", "bodyText": "Also need to make this same change in many other doc comments in this file", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367059232", "createdAt": "2020-01-15T19:18:31Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/ClientLogger.java", "diffHunk": "@@ -3,287 +3,112 @@\n \n package com.azure.android.core.util.logging;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.util.Arrays;\n-import java.util.Objects;\n-\n-/**\n- * This is a fluent logger helper class that wraps a pluggable {@link Logger}.\n- *\n- * <p>This logger logs formattable messages that use {@code {}} as the placeholder. When a {@link Throwable throwable}\n- * is the last argument of the format varargs and the logger is enabled for\n- * {@link ClientLogger#verbose(String, Object...) verbose}, the stack trace for the throwable is logged.</p>\n- *\n- * <p><strong>Log level hierarchy</strong></p>\n- * <ol>\n- * <li>{@link ClientLogger#error(String, Object...) Error}</li>\n- * <li>{@link ClientLogger#warning(String, Object...) Warning}</li>\n- * <li>{@link ClientLogger#info(String, Object...) Info}</li>\n- * <li>{@link ClientLogger#verbose(String, Object...) Verbose}</li>\n- * </ol>\n- *\n- */\n-public class ClientLogger {\n-    private final Logger logger;\n-\n-    /*\n-     * Indicates that log level is at verbose level.\n-     */\n-    private static final int VERBOSE_LEVEL = 1;\n-\n-    /*\n-     * Indicates that log level is at information level.\n-     */\n-    private static final int INFORMATIONAL_LEVEL = 2;\n-\n-    /*\n-     * Indicates that log level is at warning level.\n-     */\n-    private static final int WARNING_LEVEL = 3;\n-\n-    /*\n-     * Indicates that log level is at error level.\n-     */\n-    private static final int ERROR_LEVEL = 4;\n-\n-    /*\n-     * Indicates that logging is disabled.\n-     */\n-    private static final int DISABLED_LEVEL = 5;\n-\n+public interface ClientLogger {\n     /**\n-     * Retrieves a logger for the passed class using the {@link LoggerFactory}.\n+     * Logs a message that at the {@code debug} log level.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA1ODc5NQ=="}, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzkyNzEwOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/android/storage/common/interceptor/ResponseHeadersValidationInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOToyNzozMFrOFeDxYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOToyNzozMFrOFeDxYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA2MzM5Mw==", "bodyText": "This is probably not a useful log message. Thinking of the customer experience here, they don't really need to see a stack trace in logcat - this is just some validation that's happening in our pipeline. I would probably do two things:\n1.) Construct the message as a string and simply log it at error level.\n2.) Throw an HttpResponseException (RuntimeException here is no good) containing the same message.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367063393", "createdAt": "2020-01-15T19:27:30Z", "author": {"login": "bsiegel"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/android/storage/common/interceptor/ResponseHeadersValidationInterceptor.java", "diffHunk": "@@ -52,10 +72,14 @@ public Response intercept(@NotNull Chain chain) throws IOException {\n             String requestHeaderValue = request.header(headerName);\n \n             if (CoreUtils.isNullOrEmpty(responseHeaderValue) || !responseHeaderValue.equals(requestHeaderValue)) {\n-                throw logger.logExceptionAsError(new RuntimeException(String.format(\n+                RuntimeException exception = new RuntimeException(String.format(\n                     \"Unexpected header value. Expected response to echo '%s: %s'. Got value '%s'.\",\n                     headerName, requestHeaderValue, responseHeaderValue\n-                )));\n+                ));\n+\n+                logger.error(\"Exception found.\", exception);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Nzk0ODcwOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/android/storage/common/interceptor/ResponseHeadersValidationInterceptor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOTozNDo0M1rOFeD-4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMTo1MjozMlrOFeL5kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA2Njg1MA==", "bodyText": "This is okay, but I feel like it would be nice for customers to not have to know about any particular subclass of ClientLogger. Since we can now have static methods on interfaces, what do you think about adding a ClientLogger.getDefault(String tag / Class clazz) which returns an instance of AndroidClientLogger?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367066850", "createdAt": "2020-01-15T19:34:43Z", "author": {"login": "bsiegel"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/android/storage/common/interceptor/ResponseHeadersValidationInterceptor.java", "diffHunk": "@@ -18,27 +19,46 @@\n  * {@code Response}.\n  */\n public class ResponseHeadersValidationInterceptor implements Interceptor {\n-    private final ClientLogger logger = new ClientLogger(ResponseHeadersValidationInterceptor.class);\n+    private final ClientLogger logger;\n \n     private static final String CLIENT_ID_HEADER = \"x-ms-client-id\";\n     private static final String ENCRYPTION_KEY_SHA256_HEADER = \"x-ms-encryption-key-sha256\";\n \n     private final Collection<String> headerNames = new ArrayList<>();\n \n     /**\n-     * Constructor that adds two mandatory headers used by Storage.\n+     * Constructor that adds two mandatory headers used by Storage and uses the default {@link AndroidClientLogger}.\n      */\n     public ResponseHeadersValidationInterceptor() {\n+        this(new AndroidClientLogger(ResponseHeadersValidationInterceptor.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA3NzYyNw==", "bodyText": "The other advantage is that consumers don't have to import the AndroidClientLogger class.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367077627", "createdAt": "2020-01-15T19:58:07Z", "author": {"login": "bsiegel"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/android/storage/common/interceptor/ResponseHeadersValidationInterceptor.java", "diffHunk": "@@ -18,27 +19,46 @@\n  * {@code Response}.\n  */\n public class ResponseHeadersValidationInterceptor implements Interceptor {\n-    private final ClientLogger logger = new ClientLogger(ResponseHeadersValidationInterceptor.class);\n+    private final ClientLogger logger;\n \n     private static final String CLIENT_ID_HEADER = \"x-ms-client-id\";\n     private static final String ENCRYPTION_KEY_SHA256_HEADER = \"x-ms-encryption-key-sha256\";\n \n     private final Collection<String> headerNames = new ArrayList<>();\n \n     /**\n-     * Constructor that adds two mandatory headers used by Storage.\n+     * Constructor that adds two mandatory headers used by Storage and uses the default {@link AndroidClientLogger}.\n      */\n     public ResponseHeadersValidationInterceptor() {\n+        this(new AndroidClientLogger(ResponseHeadersValidationInterceptor.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA2Njg1MA=="}, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE5NjU2Mg==", "bodyText": "Sounds good, thanks for that suggestion :)", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367196562", "createdAt": "2020-01-16T01:52:32Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/android/storage/common/interceptor/ResponseHeadersValidationInterceptor.java", "diffHunk": "@@ -18,27 +19,46 @@\n  * {@code Response}.\n  */\n public class ResponseHeadersValidationInterceptor implements Interceptor {\n-    private final ClientLogger logger = new ClientLogger(ResponseHeadersValidationInterceptor.class);\n+    private final ClientLogger logger;\n \n     private static final String CLIENT_ID_HEADER = \"x-ms-client-id\";\n     private static final String ENCRYPTION_KEY_SHA256_HEADER = \"x-ms-encryption-key-sha256\";\n \n     private final Collection<String> headerNames = new ArrayList<>();\n \n     /**\n-     * Constructor that adds two mandatory headers used by Storage.\n+     * Constructor that adds two mandatory headers used by Storage and uses the default {@link AndroidClientLogger}.\n      */\n     public ResponseHeadersValidationInterceptor() {\n+        this(new AndroidClientLogger(ResponseHeadersValidationInterceptor.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA2Njg1MA=="}, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Nzk1MzM2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/ClientLogger.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOTozNjoyMFrOFeEB1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxOTowOTo0M1rOFekawQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA2NzYwNw==", "bodyText": "Guessing this snippet reference will also need to be updated (and the same for the other log level methods)", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367067607", "createdAt": "2020-01-15T19:36:20Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/ClientLogger.java", "diffHunk": "@@ -3,287 +3,112 @@\n \n package com.azure.android.core.util.logging;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.util.Arrays;\n-import java.util.Objects;\n-\n-/**\n- * This is a fluent logger helper class that wraps a pluggable {@link Logger}.\n- *\n- * <p>This logger logs formattable messages that use {@code {}} as the placeholder. When a {@link Throwable throwable}\n- * is the last argument of the format varargs and the logger is enabled for\n- * {@link ClientLogger#verbose(String, Object...) verbose}, the stack trace for the throwable is logged.</p>\n- *\n- * <p><strong>Log level hierarchy</strong></p>\n- * <ol>\n- * <li>{@link ClientLogger#error(String, Object...) Error}</li>\n- * <li>{@link ClientLogger#warning(String, Object...) Warning}</li>\n- * <li>{@link ClientLogger#info(String, Object...) Info}</li>\n- * <li>{@link ClientLogger#verbose(String, Object...) Verbose}</li>\n- * </ol>\n- *\n- */\n-public class ClientLogger {\n-    private final Logger logger;\n-\n-    /*\n-     * Indicates that log level is at verbose level.\n-     */\n-    private static final int VERBOSE_LEVEL = 1;\n-\n-    /*\n-     * Indicates that log level is at information level.\n-     */\n-    private static final int INFORMATIONAL_LEVEL = 2;\n-\n-    /*\n-     * Indicates that log level is at warning level.\n-     */\n-    private static final int WARNING_LEVEL = 3;\n-\n-    /*\n-     * Indicates that log level is at error level.\n-     */\n-    private static final int ERROR_LEVEL = 4;\n-\n-    /*\n-     * Indicates that logging is disabled.\n-     */\n-    private static final int DISABLED_LEVEL = 5;\n-\n+public interface ClientLogger {\n     /**\n-     * Retrieves a logger for the passed class using the {@link LoggerFactory}.\n+     * Logs a message that at the {@code debug} log level.\n      *\n-     * @param clazz Class creating the logger.\n-     */\n-    public ClientLogger(Class<?> clazz) {\n-        this(clazz.getName());\n-    }\n-\n-    /**\n-     * Retrieves a logger for the passed class name using the {@link LoggerFactory}.\n+     * <p><strong>Code samples</strong></p>\n+     *\n+     * <p>Logging a message at the debug log level.</p>\n+     * <p>\n+     * {@codesnippet com.azure.core.util.logging.clientLogger.info}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE5NTY3Mg==", "bodyText": "@bsiegel I brought this up the first time we reviewed the ClientLogger and we didn't really discussed it any further. I would prefer to remove all these references and add them when necessary, since no other piece of code has anything like it yet.\nKeep it simple. What do you think?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367195672", "createdAt": "2020-01-16T01:48:24Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/ClientLogger.java", "diffHunk": "@@ -3,287 +3,112 @@\n \n package com.azure.android.core.util.logging;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.util.Arrays;\n-import java.util.Objects;\n-\n-/**\n- * This is a fluent logger helper class that wraps a pluggable {@link Logger}.\n- *\n- * <p>This logger logs formattable messages that use {@code {}} as the placeholder. When a {@link Throwable throwable}\n- * is the last argument of the format varargs and the logger is enabled for\n- * {@link ClientLogger#verbose(String, Object...) verbose}, the stack trace for the throwable is logged.</p>\n- *\n- * <p><strong>Log level hierarchy</strong></p>\n- * <ol>\n- * <li>{@link ClientLogger#error(String, Object...) Error}</li>\n- * <li>{@link ClientLogger#warning(String, Object...) Warning}</li>\n- * <li>{@link ClientLogger#info(String, Object...) Info}</li>\n- * <li>{@link ClientLogger#verbose(String, Object...) Verbose}</li>\n- * </ol>\n- *\n- */\n-public class ClientLogger {\n-    private final Logger logger;\n-\n-    /*\n-     * Indicates that log level is at verbose level.\n-     */\n-    private static final int VERBOSE_LEVEL = 1;\n-\n-    /*\n-     * Indicates that log level is at information level.\n-     */\n-    private static final int INFORMATIONAL_LEVEL = 2;\n-\n-    /*\n-     * Indicates that log level is at warning level.\n-     */\n-    private static final int WARNING_LEVEL = 3;\n-\n-    /*\n-     * Indicates that log level is at error level.\n-     */\n-    private static final int ERROR_LEVEL = 4;\n-\n-    /*\n-     * Indicates that logging is disabled.\n-     */\n-    private static final int DISABLED_LEVEL = 5;\n-\n+public interface ClientLogger {\n     /**\n-     * Retrieves a logger for the passed class using the {@link LoggerFactory}.\n+     * Logs a message that at the {@code debug} log level.\n      *\n-     * @param clazz Class creating the logger.\n-     */\n-    public ClientLogger(Class<?> clazz) {\n-        this(clazz.getName());\n-    }\n-\n-    /**\n-     * Retrieves a logger for the passed class name using the {@link LoggerFactory}.\n+     * <p><strong>Code samples</strong></p>\n+     *\n+     * <p>Logging a message at the debug log level.</p>\n+     * <p>\n+     * {@codesnippet com.azure.core.util.logging.clientLogger.info}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA2NzYwNw=="}, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU5ODI3Mw==", "bodyText": "Sounds good to me, as part of march towards GA we will make sure to add snippets & snippet references. Until then I'm fine with them either being incorrect or missing.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367598273", "createdAt": "2020-01-16T19:09:43Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/ClientLogger.java", "diffHunk": "@@ -3,287 +3,112 @@\n \n package com.azure.android.core.util.logging;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.util.Arrays;\n-import java.util.Objects;\n-\n-/**\n- * This is a fluent logger helper class that wraps a pluggable {@link Logger}.\n- *\n- * <p>This logger logs formattable messages that use {@code {}} as the placeholder. When a {@link Throwable throwable}\n- * is the last argument of the format varargs and the logger is enabled for\n- * {@link ClientLogger#verbose(String, Object...) verbose}, the stack trace for the throwable is logged.</p>\n- *\n- * <p><strong>Log level hierarchy</strong></p>\n- * <ol>\n- * <li>{@link ClientLogger#error(String, Object...) Error}</li>\n- * <li>{@link ClientLogger#warning(String, Object...) Warning}</li>\n- * <li>{@link ClientLogger#info(String, Object...) Info}</li>\n- * <li>{@link ClientLogger#verbose(String, Object...) Verbose}</li>\n- * </ol>\n- *\n- */\n-public class ClientLogger {\n-    private final Logger logger;\n-\n-    /*\n-     * Indicates that log level is at verbose level.\n-     */\n-    private static final int VERBOSE_LEVEL = 1;\n-\n-    /*\n-     * Indicates that log level is at information level.\n-     */\n-    private static final int INFORMATIONAL_LEVEL = 2;\n-\n-    /*\n-     * Indicates that log level is at warning level.\n-     */\n-    private static final int WARNING_LEVEL = 3;\n-\n-    /*\n-     * Indicates that log level is at error level.\n-     */\n-    private static final int ERROR_LEVEL = 4;\n-\n-    /*\n-     * Indicates that logging is disabled.\n-     */\n-    private static final int DISABLED_LEVEL = 5;\n-\n+public interface ClientLogger {\n     /**\n-     * Retrieves a logger for the passed class using the {@link LoggerFactory}.\n+     * Logs a message that at the {@code debug} log level.\n      *\n-     * @param clazz Class creating the logger.\n-     */\n-    public ClientLogger(Class<?> clazz) {\n-        this(clazz.getName());\n-    }\n-\n-    /**\n-     * Retrieves a logger for the passed class name using the {@link LoggerFactory}.\n+     * <p><strong>Code samples</strong></p>\n+     *\n+     * <p>Logging a message at the debug log level.</p>\n+     * <p>\n+     * {@codesnippet com.azure.core.util.logging.clientLogger.info}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA2NzYwNw=="}, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Nzk1Nzg0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/AndroidClientLogger.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOTozNzo1NlrOFeEE0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMjozNzoyMFrOFeMdBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA2ODM2OQ==", "bodyText": "What's your feeling about moving these to a .impl subpackage? E.g. \"com.azure.android.core.util.logging.impl\"? And the same pattern for other places where we introduce an interface and then one or more platform-dependent implementations?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367068369", "createdAt": "2020-01-15T19:37:56Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/AndroidClientLogger.java", "diffHunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util.logging;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIwNTYzNw==", "bodyText": "I don't feel strongly about either keeping it as it is of creating a new package. My only concert would be that we have an .implementation package already which doesn't follow this principle. I remember someone raised a question about this package's purpose in one of our meetings to Jonathan but I can't honestly recall his reasoning. Would you mind shedding light on this again @JonathanGiles? :)", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367205637", "createdAt": "2020-01-16T02:37:20Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/AndroidClientLogger.java", "diffHunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util.logging;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA2ODM2OQ=="}, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Nzk1ODkyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/AndroidClientLogger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOTozODoxOVrOFeEFgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOTozODoxOVrOFeEFgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA2ODU0NQ==", "bodyText": "Unnecessary import from a now-unused dependency", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367068545", "createdAt": "2020-01-15T19:38:19Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/AndroidClientLogger.java", "diffHunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util.logging;\n+\n+import android.util.Log;\n+\n+import androidx.annotation.IntDef;\n+\n+import org.slf4j.LoggerFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Nzk2MzMxOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/AndroidClientLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOTozOTo0M1rOFeEILw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOTo0MTowOFrOFeEK2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA2OTIzMQ==", "bodyText": "This interface, and the setLogLevel and getLogLevel methods, should probably be a part of the ClientLogger interface. Any client logger will need to be able to have its log level changed.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367069231", "createdAt": "2020-01-15T19:39:43Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/AndroidClientLogger.java", "diffHunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util.logging;\n+\n+import android.util.Log;\n+\n+import androidx.annotation.IntDef;\n+\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+\n+/**\n+ * This is a fluent logger helper class that implements the {@link ClientLogger} interface.\n+ *\n+ * <p>This logger logs formattable messages that use {@code {}} as the placeholder. When a {@link Throwable throwable}\n+ * is the last argument of the format varargs and the logger is enabled for\n+ * {@link AndroidClientLogger#debug(String) debug}, the stack trace for the throwable is logged.</p>\n+ *\n+ * <p><strong>Log level hierarchy</strong></p>\n+ * <ol>\n+ * <li>{@link AndroidClientLogger#error(String) Error}</li>\n+ * <li>{@link AndroidClientLogger#warning(String) Warning}</li>\n+ * <li>{@link AndroidClientLogger#info(String) Info}</li>\n+ * <li>{@link AndroidClientLogger#debug(String) Verbose}</li>\n+ * </ol>\n+ */\n+public class AndroidClientLogger implements ClientLogger {\n+    /**\n+     * This interface represents the logging levels used in Azure SDKs.\n+     */\n+    @Retention(RetentionPolicy.SOURCE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA2OTkxMg==", "bodyText": "Also by convention, each member should start with the name of the interface it belongs to in SCREAMING_SNAKE_CASE e.g. \"LOG_LEVEL_DEBUG\".\nAdditionally thank you for providing me the opportunity to use the phrase \"screaming snake case\" :)", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367069912", "createdAt": "2020-01-15T19:41:08Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/AndroidClientLogger.java", "diffHunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util.logging;\n+\n+import android.util.Log;\n+\n+import androidx.annotation.IntDef;\n+\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+\n+/**\n+ * This is a fluent logger helper class that implements the {@link ClientLogger} interface.\n+ *\n+ * <p>This logger logs formattable messages that use {@code {}} as the placeholder. When a {@link Throwable throwable}\n+ * is the last argument of the format varargs and the logger is enabled for\n+ * {@link AndroidClientLogger#debug(String) debug}, the stack trace for the throwable is logged.</p>\n+ *\n+ * <p><strong>Log level hierarchy</strong></p>\n+ * <ol>\n+ * <li>{@link AndroidClientLogger#error(String) Error}</li>\n+ * <li>{@link AndroidClientLogger#warning(String) Warning}</li>\n+ * <li>{@link AndroidClientLogger#info(String) Info}</li>\n+ * <li>{@link AndroidClientLogger#debug(String) Verbose}</li>\n+ * </ol>\n+ */\n+public class AndroidClientLogger implements ClientLogger {\n+    /**\n+     * This interface represents the logging levels used in Azure SDKs.\n+     */\n+    @Retention(RetentionPolicy.SOURCE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA2OTIzMQ=="}, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Nzk3MTE2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/AndroidClientLogger.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOTo0MjozM1rOFeENRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxOToxMjoyOFrOFekfkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA3MDUzMw==", "bodyText": "What is the value in having a NOT_SET? We should just pick a reasonable default for the log level (currently iOS uses \"info\") when initializing this logger.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367070533", "createdAt": "2020-01-15T19:42:33Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/AndroidClientLogger.java", "diffHunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util.logging;\n+\n+import android.util.Log;\n+\n+import androidx.annotation.IntDef;\n+\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+\n+/**\n+ * This is a fluent logger helper class that implements the {@link ClientLogger} interface.\n+ *\n+ * <p>This logger logs formattable messages that use {@code {}} as the placeholder. When a {@link Throwable throwable}\n+ * is the last argument of the format varargs and the logger is enabled for\n+ * {@link AndroidClientLogger#debug(String) debug}, the stack trace for the throwable is logged.</p>\n+ *\n+ * <p><strong>Log level hierarchy</strong></p>\n+ * <ol>\n+ * <li>{@link AndroidClientLogger#error(String) Error}</li>\n+ * <li>{@link AndroidClientLogger#warning(String) Warning}</li>\n+ * <li>{@link AndroidClientLogger#info(String) Info}</li>\n+ * <li>{@link AndroidClientLogger#debug(String) Verbose}</li>\n+ * </ol>\n+ */\n+public class AndroidClientLogger implements ClientLogger {\n+    /**\n+     * This interface represents the logging levels used in Azure SDKs.\n+     */\n+    @Retention(RetentionPolicy.SOURCE)\n+    @IntDef({DEBUG, INFO, WARNING, ERROR, NOT_SET})\n+    public @interface LogLevel {}\n+\n+    /**\n+     * Indicates that log level is at the debug level.\n+     */\n+    public static final int DEBUG = 1;\n+\n+    /**\n+     * Indicates that log level is at the informational level.\n+     */\n+    public static final int INFO = 2;\n+\n+    /**\n+     * Indicates that log level is at the warning level.\n+     */\n+    public static final int WARNING = 3;\n+\n+    /**\n+     * Indicates that log level is at the error level.\n+     */\n+    public static final int ERROR = 4;\n+\n+    /**\n+     * Indicates that no log level is set.\n+     */\n+    public static final int NOT_SET = 5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxNTI3OA==", "bodyText": "@bsiegel This came from the Java SDK where they check if the level has not been set or is greater than even error so nothing is logged. I guess I don't really know what customers would prefer is the default behavior, but I think we can stick with INFO like you propose :)\nMaybe we could ask the Java folks why they chose this route as well.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367215278", "createdAt": "2020-01-16T03:27:41Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/AndroidClientLogger.java", "diffHunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util.logging;\n+\n+import android.util.Log;\n+\n+import androidx.annotation.IntDef;\n+\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+\n+/**\n+ * This is a fluent logger helper class that implements the {@link ClientLogger} interface.\n+ *\n+ * <p>This logger logs formattable messages that use {@code {}} as the placeholder. When a {@link Throwable throwable}\n+ * is the last argument of the format varargs and the logger is enabled for\n+ * {@link AndroidClientLogger#debug(String) debug}, the stack trace for the throwable is logged.</p>\n+ *\n+ * <p><strong>Log level hierarchy</strong></p>\n+ * <ol>\n+ * <li>{@link AndroidClientLogger#error(String) Error}</li>\n+ * <li>{@link AndroidClientLogger#warning(String) Warning}</li>\n+ * <li>{@link AndroidClientLogger#info(String) Info}</li>\n+ * <li>{@link AndroidClientLogger#debug(String) Verbose}</li>\n+ * </ol>\n+ */\n+public class AndroidClientLogger implements ClientLogger {\n+    /**\n+     * This interface represents the logging levels used in Azure SDKs.\n+     */\n+    @Retention(RetentionPolicy.SOURCE)\n+    @IntDef({DEBUG, INFO, WARNING, ERROR, NOT_SET})\n+    public @interface LogLevel {}\n+\n+    /**\n+     * Indicates that log level is at the debug level.\n+     */\n+    public static final int DEBUG = 1;\n+\n+    /**\n+     * Indicates that log level is at the informational level.\n+     */\n+    public static final int INFO = 2;\n+\n+    /**\n+     * Indicates that log level is at the warning level.\n+     */\n+    public static final int WARNING = 3;\n+\n+    /**\n+     * Indicates that log level is at the error level.\n+     */\n+    public static final int ERROR = 4;\n+\n+    /**\n+     * Indicates that no log level is set.\n+     */\n+    public static final int NOT_SET = 5;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA3MDUzMw=="}, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU5OTUwNw==", "bodyText": "Oh, it sounds like the solution for \"don't log anything\" is to set the level to NOT_SET (which is surprising to me - I would expect it to be called e.g. NONE).\nOn iOS we provide a ClientLoggers.none which is basically an implementation of the null object pattern - it's a ClientLogger which never actually logs anything.\nI could go either way on this. I don't remember seeing other logging frameworks where you turn off logging by changing the verbosity level, that's why it surprised me. Would love to hear opinions from the peanut gallery.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367599507", "createdAt": "2020-01-16T19:12:28Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/AndroidClientLogger.java", "diffHunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util.logging;\n+\n+import android.util.Log;\n+\n+import androidx.annotation.IntDef;\n+\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+\n+/**\n+ * This is a fluent logger helper class that implements the {@link ClientLogger} interface.\n+ *\n+ * <p>This logger logs formattable messages that use {@code {}} as the placeholder. When a {@link Throwable throwable}\n+ * is the last argument of the format varargs and the logger is enabled for\n+ * {@link AndroidClientLogger#debug(String) debug}, the stack trace for the throwable is logged.</p>\n+ *\n+ * <p><strong>Log level hierarchy</strong></p>\n+ * <ol>\n+ * <li>{@link AndroidClientLogger#error(String) Error}</li>\n+ * <li>{@link AndroidClientLogger#warning(String) Warning}</li>\n+ * <li>{@link AndroidClientLogger#info(String) Info}</li>\n+ * <li>{@link AndroidClientLogger#debug(String) Verbose}</li>\n+ * </ol>\n+ */\n+public class AndroidClientLogger implements ClientLogger {\n+    /**\n+     * This interface represents the logging levels used in Azure SDKs.\n+     */\n+    @Retention(RetentionPolicy.SOURCE)\n+    @IntDef({DEBUG, INFO, WARNING, ERROR, NOT_SET})\n+    public @interface LogLevel {}\n+\n+    /**\n+     * Indicates that log level is at the debug level.\n+     */\n+    public static final int DEBUG = 1;\n+\n+    /**\n+     * Indicates that log level is at the informational level.\n+     */\n+    public static final int INFO = 2;\n+\n+    /**\n+     * Indicates that log level is at the warning level.\n+     */\n+    public static final int WARNING = 3;\n+\n+    /**\n+     * Indicates that log level is at the error level.\n+     */\n+    public static final int ERROR = 4;\n+\n+    /**\n+     * Indicates that no log level is set.\n+     */\n+    public static final int NOT_SET = 5;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA3MDUzMw=="}, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODAwODgzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/AndroidClientLogger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOTo1NTo1NVrOFeEk8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOTo1NTo1NVrOFeEk8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA3NjU5NA==", "bodyText": "Need to update this comment and the one below", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367076594", "createdAt": "2020-01-15T19:55:55Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/AndroidClientLogger.java", "diffHunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util.logging;\n+\n+import android.util.Log;\n+\n+import androidx.annotation.IntDef;\n+\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+\n+/**\n+ * This is a fluent logger helper class that implements the {@link ClientLogger} interface.\n+ *\n+ * <p>This logger logs formattable messages that use {@code {}} as the placeholder. When a {@link Throwable throwable}\n+ * is the last argument of the format varargs and the logger is enabled for\n+ * {@link AndroidClientLogger#debug(String) debug}, the stack trace for the throwable is logged.</p>\n+ *\n+ * <p><strong>Log level hierarchy</strong></p>\n+ * <ol>\n+ * <li>{@link AndroidClientLogger#error(String) Error}</li>\n+ * <li>{@link AndroidClientLogger#warning(String) Warning}</li>\n+ * <li>{@link AndroidClientLogger#info(String) Info}</li>\n+ * <li>{@link AndroidClientLogger#debug(String) Verbose}</li>\n+ * </ol>\n+ */\n+public class AndroidClientLogger implements ClientLogger {\n+    /**\n+     * This interface represents the logging levels used in Azure SDKs.\n+     */\n+    @Retention(RetentionPolicy.SOURCE)\n+    @IntDef({DEBUG, INFO, WARNING, ERROR, NOT_SET})\n+    public @interface LogLevel {}\n+\n+    /**\n+     * Indicates that log level is at the debug level.\n+     */\n+    public static final int DEBUG = 1;\n+\n+    /**\n+     * Indicates that log level is at the informational level.\n+     */\n+    public static final int INFO = 2;\n+\n+    /**\n+     * Indicates that log level is at the warning level.\n+     */\n+    public static final int WARNING = 3;\n+\n+    /**\n+     * Indicates that log level is at the error level.\n+     */\n+    public static final int ERROR = 4;\n+\n+    /**\n+     * Indicates that no log level is set.\n+     */\n+    public static final int NOT_SET = 5;\n+\n+    private final String tag;\n+    private int logLevel;\n+\n+    /**\n+     * Retrieves a logger for the passed class using the {@link LoggerFactory}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODAxMTQ3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/AndroidClientLogger.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOTo1Njo0NlrOFeEmow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxOToxMzoxNFrOFekg9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA3NzAyNw==", "bodyText": "This should be annotated with the @LogLevel annotation", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367077027", "createdAt": "2020-01-15T19:56:46Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/AndroidClientLogger.java", "diffHunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util.logging;\n+\n+import android.util.Log;\n+\n+import androidx.annotation.IntDef;\n+\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+\n+/**\n+ * This is a fluent logger helper class that implements the {@link ClientLogger} interface.\n+ *\n+ * <p>This logger logs formattable messages that use {@code {}} as the placeholder. When a {@link Throwable throwable}\n+ * is the last argument of the format varargs and the logger is enabled for\n+ * {@link AndroidClientLogger#debug(String) debug}, the stack trace for the throwable is logged.</p>\n+ *\n+ * <p><strong>Log level hierarchy</strong></p>\n+ * <ol>\n+ * <li>{@link AndroidClientLogger#error(String) Error}</li>\n+ * <li>{@link AndroidClientLogger#warning(String) Warning}</li>\n+ * <li>{@link AndroidClientLogger#info(String) Info}</li>\n+ * <li>{@link AndroidClientLogger#debug(String) Verbose}</li>\n+ * </ol>\n+ */\n+public class AndroidClientLogger implements ClientLogger {\n+    /**\n+     * This interface represents the logging levels used in Azure SDKs.\n+     */\n+    @Retention(RetentionPolicy.SOURCE)\n+    @IntDef({DEBUG, INFO, WARNING, ERROR, NOT_SET})\n+    public @interface LogLevel {}\n+\n+    /**\n+     * Indicates that log level is at the debug level.\n+     */\n+    public static final int DEBUG = 1;\n+\n+    /**\n+     * Indicates that log level is at the informational level.\n+     */\n+    public static final int INFO = 2;\n+\n+    /**\n+     * Indicates that log level is at the warning level.\n+     */\n+    public static final int WARNING = 3;\n+\n+    /**\n+     * Indicates that log level is at the error level.\n+     */\n+    public static final int ERROR = 4;\n+\n+    /**\n+     * Indicates that no log level is set.\n+     */\n+    public static final int NOT_SET = 5;\n+\n+    private final String tag;\n+    private int logLevel;\n+\n+    /**\n+     * Retrieves a logger for the passed class using the {@link LoggerFactory}.\n+     *\n+     * @param clazz Class creating the logger.\n+     */\n+    public AndroidClientLogger(Class<?> clazz) {\n+        this(clazz.getName());\n+    }\n+\n+    /**\n+     * Retrieves a logger for the passed class name using the {@link LoggerFactory}.\n+     *\n+     * @param tag Class name creating the logger.\n+     */\n+    public AndroidClientLogger(String tag) {\n+        this.tag = tag;\n+    }\n+\n+    /**\n+     * Returns this logger's log level.\n+     *\n+     * @return The log level.\n+     */\n+    @LogLevel\n+    public int getLogLevel() {\n+        return logLevel;\n+    }\n+\n+    /**\n+     * Sets the log level for this logger.\n+     */\n+    public void setLogLevel(@LogLevel int logLevel) {\n+        this.logLevel = logLevel;\n+    }\n+\n+    public void debug(String message) {\n+        if (canLogAtLevel(DEBUG)) {\n+            Log.d(tag, message);\n+        }\n+    }\n+\n+    public void debug(String message, Throwable throwable) {\n+        if (canLogAtLevel(DEBUG)) {\n+            Log.d(tag, message, throwable);\n+        }\n+    }\n+\n+    public void info(String message) {\n+        if (canLogAtLevel(INFO)) {\n+            Log.i(tag, message);\n+        }\n+    }\n+\n+    public void info(String message, Throwable throwable) {\n+        if (canLogAtLevel(INFO)) {\n+            Log.i(tag, message, throwable);\n+        }\n+    }\n+\n+    public void warning(String message) {\n+        if (canLogAtLevel(WARNING)) {\n+            Log.w(tag, message);\n+        }\n+    }\n+\n+    public void warning(String message, Throwable throwable) {\n+        if (canLogAtLevel(WARNING)) {\n+            Log.w(tag, message, throwable);\n+        }\n+    }\n+\n+    public void error(String message) {\n+        if (canLogAtLevel(ERROR)) {\n+            Log.e(tag, message);\n+        }\n+    }\n+\n+    public void error(String message, Throwable throwable) {\n+        if (canLogAtLevel(ERROR)) {\n+            Log.e(tag, message, throwable);\n+        }\n+    }\n+\n+    /**\n+     * Determines if the logger supports logging at the given log level.\n+     *\n+     * @param logLevel Logging level to validate.\n+     * @return Flag indicating if the environment and logger are configured to support logging at the given log level.\n+     */\n+    private boolean canLogAtLevel(int logLevel) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIwMjY2Ng==", "bodyText": "@bsiegel I didn't do that since this is a private method and we control who calls it, but I think it doesn't hurt to use annotations to make explicitly clear what is expected in this method.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367202666", "createdAt": "2020-01-16T02:22:27Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/AndroidClientLogger.java", "diffHunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util.logging;\n+\n+import android.util.Log;\n+\n+import androidx.annotation.IntDef;\n+\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+\n+/**\n+ * This is a fluent logger helper class that implements the {@link ClientLogger} interface.\n+ *\n+ * <p>This logger logs formattable messages that use {@code {}} as the placeholder. When a {@link Throwable throwable}\n+ * is the last argument of the format varargs and the logger is enabled for\n+ * {@link AndroidClientLogger#debug(String) debug}, the stack trace for the throwable is logged.</p>\n+ *\n+ * <p><strong>Log level hierarchy</strong></p>\n+ * <ol>\n+ * <li>{@link AndroidClientLogger#error(String) Error}</li>\n+ * <li>{@link AndroidClientLogger#warning(String) Warning}</li>\n+ * <li>{@link AndroidClientLogger#info(String) Info}</li>\n+ * <li>{@link AndroidClientLogger#debug(String) Verbose}</li>\n+ * </ol>\n+ */\n+public class AndroidClientLogger implements ClientLogger {\n+    /**\n+     * This interface represents the logging levels used in Azure SDKs.\n+     */\n+    @Retention(RetentionPolicy.SOURCE)\n+    @IntDef({DEBUG, INFO, WARNING, ERROR, NOT_SET})\n+    public @interface LogLevel {}\n+\n+    /**\n+     * Indicates that log level is at the debug level.\n+     */\n+    public static final int DEBUG = 1;\n+\n+    /**\n+     * Indicates that log level is at the informational level.\n+     */\n+    public static final int INFO = 2;\n+\n+    /**\n+     * Indicates that log level is at the warning level.\n+     */\n+    public static final int WARNING = 3;\n+\n+    /**\n+     * Indicates that log level is at the error level.\n+     */\n+    public static final int ERROR = 4;\n+\n+    /**\n+     * Indicates that no log level is set.\n+     */\n+    public static final int NOT_SET = 5;\n+\n+    private final String tag;\n+    private int logLevel;\n+\n+    /**\n+     * Retrieves a logger for the passed class using the {@link LoggerFactory}.\n+     *\n+     * @param clazz Class creating the logger.\n+     */\n+    public AndroidClientLogger(Class<?> clazz) {\n+        this(clazz.getName());\n+    }\n+\n+    /**\n+     * Retrieves a logger for the passed class name using the {@link LoggerFactory}.\n+     *\n+     * @param tag Class name creating the logger.\n+     */\n+    public AndroidClientLogger(String tag) {\n+        this.tag = tag;\n+    }\n+\n+    /**\n+     * Returns this logger's log level.\n+     *\n+     * @return The log level.\n+     */\n+    @LogLevel\n+    public int getLogLevel() {\n+        return logLevel;\n+    }\n+\n+    /**\n+     * Sets the log level for this logger.\n+     */\n+    public void setLogLevel(@LogLevel int logLevel) {\n+        this.logLevel = logLevel;\n+    }\n+\n+    public void debug(String message) {\n+        if (canLogAtLevel(DEBUG)) {\n+            Log.d(tag, message);\n+        }\n+    }\n+\n+    public void debug(String message, Throwable throwable) {\n+        if (canLogAtLevel(DEBUG)) {\n+            Log.d(tag, message, throwable);\n+        }\n+    }\n+\n+    public void info(String message) {\n+        if (canLogAtLevel(INFO)) {\n+            Log.i(tag, message);\n+        }\n+    }\n+\n+    public void info(String message, Throwable throwable) {\n+        if (canLogAtLevel(INFO)) {\n+            Log.i(tag, message, throwable);\n+        }\n+    }\n+\n+    public void warning(String message) {\n+        if (canLogAtLevel(WARNING)) {\n+            Log.w(tag, message);\n+        }\n+    }\n+\n+    public void warning(String message, Throwable throwable) {\n+        if (canLogAtLevel(WARNING)) {\n+            Log.w(tag, message, throwable);\n+        }\n+    }\n+\n+    public void error(String message) {\n+        if (canLogAtLevel(ERROR)) {\n+            Log.e(tag, message);\n+        }\n+    }\n+\n+    public void error(String message, Throwable throwable) {\n+        if (canLogAtLevel(ERROR)) {\n+            Log.e(tag, message, throwable);\n+        }\n+    }\n+\n+    /**\n+     * Determines if the logger supports logging at the given log level.\n+     *\n+     * @param logLevel Logging level to validate.\n+     * @return Flag indicating if the environment and logger are configured to support logging at the given log level.\n+     */\n+    private boolean canLogAtLevel(int logLevel) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA3NzAyNw=="}, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU5OTg2MQ==", "bodyText": "Yep, at the very least it provides some nice intellisense when so annotated.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367599861", "createdAt": "2020-01-16T19:13:14Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/AndroidClientLogger.java", "diffHunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util.logging;\n+\n+import android.util.Log;\n+\n+import androidx.annotation.IntDef;\n+\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+\n+/**\n+ * This is a fluent logger helper class that implements the {@link ClientLogger} interface.\n+ *\n+ * <p>This logger logs formattable messages that use {@code {}} as the placeholder. When a {@link Throwable throwable}\n+ * is the last argument of the format varargs and the logger is enabled for\n+ * {@link AndroidClientLogger#debug(String) debug}, the stack trace for the throwable is logged.</p>\n+ *\n+ * <p><strong>Log level hierarchy</strong></p>\n+ * <ol>\n+ * <li>{@link AndroidClientLogger#error(String) Error}</li>\n+ * <li>{@link AndroidClientLogger#warning(String) Warning}</li>\n+ * <li>{@link AndroidClientLogger#info(String) Info}</li>\n+ * <li>{@link AndroidClientLogger#debug(String) Verbose}</li>\n+ * </ol>\n+ */\n+public class AndroidClientLogger implements ClientLogger {\n+    /**\n+     * This interface represents the logging levels used in Azure SDKs.\n+     */\n+    @Retention(RetentionPolicy.SOURCE)\n+    @IntDef({DEBUG, INFO, WARNING, ERROR, NOT_SET})\n+    public @interface LogLevel {}\n+\n+    /**\n+     * Indicates that log level is at the debug level.\n+     */\n+    public static final int DEBUG = 1;\n+\n+    /**\n+     * Indicates that log level is at the informational level.\n+     */\n+    public static final int INFO = 2;\n+\n+    /**\n+     * Indicates that log level is at the warning level.\n+     */\n+    public static final int WARNING = 3;\n+\n+    /**\n+     * Indicates that log level is at the error level.\n+     */\n+    public static final int ERROR = 4;\n+\n+    /**\n+     * Indicates that no log level is set.\n+     */\n+    public static final int NOT_SET = 5;\n+\n+    private final String tag;\n+    private int logLevel;\n+\n+    /**\n+     * Retrieves a logger for the passed class using the {@link LoggerFactory}.\n+     *\n+     * @param clazz Class creating the logger.\n+     */\n+    public AndroidClientLogger(Class<?> clazz) {\n+        this(clazz.getName());\n+    }\n+\n+    /**\n+     * Retrieves a logger for the passed class name using the {@link LoggerFactory}.\n+     *\n+     * @param tag Class name creating the logger.\n+     */\n+    public AndroidClientLogger(String tag) {\n+        this.tag = tag;\n+    }\n+\n+    /**\n+     * Returns this logger's log level.\n+     *\n+     * @return The log level.\n+     */\n+    @LogLevel\n+    public int getLogLevel() {\n+        return logLevel;\n+    }\n+\n+    /**\n+     * Sets the log level for this logger.\n+     */\n+    public void setLogLevel(@LogLevel int logLevel) {\n+        this.logLevel = logLevel;\n+    }\n+\n+    public void debug(String message) {\n+        if (canLogAtLevel(DEBUG)) {\n+            Log.d(tag, message);\n+        }\n+    }\n+\n+    public void debug(String message, Throwable throwable) {\n+        if (canLogAtLevel(DEBUG)) {\n+            Log.d(tag, message, throwable);\n+        }\n+    }\n+\n+    public void info(String message) {\n+        if (canLogAtLevel(INFO)) {\n+            Log.i(tag, message);\n+        }\n+    }\n+\n+    public void info(String message, Throwable throwable) {\n+        if (canLogAtLevel(INFO)) {\n+            Log.i(tag, message, throwable);\n+        }\n+    }\n+\n+    public void warning(String message) {\n+        if (canLogAtLevel(WARNING)) {\n+            Log.w(tag, message);\n+        }\n+    }\n+\n+    public void warning(String message, Throwable throwable) {\n+        if (canLogAtLevel(WARNING)) {\n+            Log.w(tag, message, throwable);\n+        }\n+    }\n+\n+    public void error(String message) {\n+        if (canLogAtLevel(ERROR)) {\n+            Log.e(tag, message);\n+        }\n+    }\n+\n+    public void error(String message, Throwable throwable) {\n+        if (canLogAtLevel(ERROR)) {\n+            Log.e(tag, message, throwable);\n+        }\n+    }\n+\n+    /**\n+     * Determines if the logger supports logging at the given log level.\n+     *\n+     * @param logLevel Logging level to validate.\n+     * @return Flag indicating if the environment and logger are configured to support logging at the given log level.\n+     */\n+    private boolean canLogAtLevel(int logLevel) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA3NzAyNw=="}, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODAxMjgwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/AndroidClientLogger.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOTo1NzoxOVrOFeEnig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxOToxNTo1OFrOFeklvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA3NzI1OA==", "bodyText": "I /think/ the proper signature for this is public @LogLevel int getLogLevel() but not sure - opinions?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367077258", "createdAt": "2020-01-15T19:57:19Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/AndroidClientLogger.java", "diffHunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util.logging;\n+\n+import android.util.Log;\n+\n+import androidx.annotation.IntDef;\n+\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+\n+/**\n+ * This is a fluent logger helper class that implements the {@link ClientLogger} interface.\n+ *\n+ * <p>This logger logs formattable messages that use {@code {}} as the placeholder. When a {@link Throwable throwable}\n+ * is the last argument of the format varargs and the logger is enabled for\n+ * {@link AndroidClientLogger#debug(String) debug}, the stack trace for the throwable is logged.</p>\n+ *\n+ * <p><strong>Log level hierarchy</strong></p>\n+ * <ol>\n+ * <li>{@link AndroidClientLogger#error(String) Error}</li>\n+ * <li>{@link AndroidClientLogger#warning(String) Warning}</li>\n+ * <li>{@link AndroidClientLogger#info(String) Info}</li>\n+ * <li>{@link AndroidClientLogger#debug(String) Verbose}</li>\n+ * </ol>\n+ */\n+public class AndroidClientLogger implements ClientLogger {\n+    /**\n+     * This interface represents the logging levels used in Azure SDKs.\n+     */\n+    @Retention(RetentionPolicy.SOURCE)\n+    @IntDef({DEBUG, INFO, WARNING, ERROR, NOT_SET})\n+    public @interface LogLevel {}\n+\n+    /**\n+     * Indicates that log level is at the debug level.\n+     */\n+    public static final int DEBUG = 1;\n+\n+    /**\n+     * Indicates that log level is at the informational level.\n+     */\n+    public static final int INFO = 2;\n+\n+    /**\n+     * Indicates that log level is at the warning level.\n+     */\n+    public static final int WARNING = 3;\n+\n+    /**\n+     * Indicates that log level is at the error level.\n+     */\n+    public static final int ERROR = 4;\n+\n+    /**\n+     * Indicates that no log level is set.\n+     */\n+    public static final int NOT_SET = 5;\n+\n+    private final String tag;\n+    private int logLevel;\n+\n+    /**\n+     * Retrieves a logger for the passed class using the {@link LoggerFactory}.\n+     *\n+     * @param clazz Class creating the logger.\n+     */\n+    public AndroidClientLogger(Class<?> clazz) {\n+        this(clazz.getName());\n+    }\n+\n+    /**\n+     * Retrieves a logger for the passed class name using the {@link LoggerFactory}.\n+     *\n+     * @param tag Class name creating the logger.\n+     */\n+    public AndroidClientLogger(String tag) {\n+        this.tag = tag;\n+    }\n+\n+    /**\n+     * Returns this logger's log level.\n+     *\n+     * @return The log level.\n+     */\n+    @LogLevel\n+    public int getLogLevel() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIwMjAwMQ==", "bodyText": "@bsiegel The documentation for IntDef shows this is the correct syntax. Here are some examples I found somewhere else.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367202001", "createdAt": "2020-01-16T02:19:10Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/AndroidClientLogger.java", "diffHunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util.logging;\n+\n+import android.util.Log;\n+\n+import androidx.annotation.IntDef;\n+\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+\n+/**\n+ * This is a fluent logger helper class that implements the {@link ClientLogger} interface.\n+ *\n+ * <p>This logger logs formattable messages that use {@code {}} as the placeholder. When a {@link Throwable throwable}\n+ * is the last argument of the format varargs and the logger is enabled for\n+ * {@link AndroidClientLogger#debug(String) debug}, the stack trace for the throwable is logged.</p>\n+ *\n+ * <p><strong>Log level hierarchy</strong></p>\n+ * <ol>\n+ * <li>{@link AndroidClientLogger#error(String) Error}</li>\n+ * <li>{@link AndroidClientLogger#warning(String) Warning}</li>\n+ * <li>{@link AndroidClientLogger#info(String) Info}</li>\n+ * <li>{@link AndroidClientLogger#debug(String) Verbose}</li>\n+ * </ol>\n+ */\n+public class AndroidClientLogger implements ClientLogger {\n+    /**\n+     * This interface represents the logging levels used in Azure SDKs.\n+     */\n+    @Retention(RetentionPolicy.SOURCE)\n+    @IntDef({DEBUG, INFO, WARNING, ERROR, NOT_SET})\n+    public @interface LogLevel {}\n+\n+    /**\n+     * Indicates that log level is at the debug level.\n+     */\n+    public static final int DEBUG = 1;\n+\n+    /**\n+     * Indicates that log level is at the informational level.\n+     */\n+    public static final int INFO = 2;\n+\n+    /**\n+     * Indicates that log level is at the warning level.\n+     */\n+    public static final int WARNING = 3;\n+\n+    /**\n+     * Indicates that log level is at the error level.\n+     */\n+    public static final int ERROR = 4;\n+\n+    /**\n+     * Indicates that no log level is set.\n+     */\n+    public static final int NOT_SET = 5;\n+\n+    private final String tag;\n+    private int logLevel;\n+\n+    /**\n+     * Retrieves a logger for the passed class using the {@link LoggerFactory}.\n+     *\n+     * @param clazz Class creating the logger.\n+     */\n+    public AndroidClientLogger(Class<?> clazz) {\n+        this(clazz.getName());\n+    }\n+\n+    /**\n+     * Retrieves a logger for the passed class name using the {@link LoggerFactory}.\n+     *\n+     * @param tag Class name creating the logger.\n+     */\n+    public AndroidClientLogger(String tag) {\n+        this.tag = tag;\n+    }\n+\n+    /**\n+     * Returns this logger's log level.\n+     *\n+     * @return The log level.\n+     */\n+    @LogLevel\n+    public int getLogLevel() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA3NzI1OA=="}, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIwMjE2MQ==", "bodyText": "Maybe what you propose also works, I haven't tried it though.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367202161", "createdAt": "2020-01-16T02:20:03Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/AndroidClientLogger.java", "diffHunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util.logging;\n+\n+import android.util.Log;\n+\n+import androidx.annotation.IntDef;\n+\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+\n+/**\n+ * This is a fluent logger helper class that implements the {@link ClientLogger} interface.\n+ *\n+ * <p>This logger logs formattable messages that use {@code {}} as the placeholder. When a {@link Throwable throwable}\n+ * is the last argument of the format varargs and the logger is enabled for\n+ * {@link AndroidClientLogger#debug(String) debug}, the stack trace for the throwable is logged.</p>\n+ *\n+ * <p><strong>Log level hierarchy</strong></p>\n+ * <ol>\n+ * <li>{@link AndroidClientLogger#error(String) Error}</li>\n+ * <li>{@link AndroidClientLogger#warning(String) Warning}</li>\n+ * <li>{@link AndroidClientLogger#info(String) Info}</li>\n+ * <li>{@link AndroidClientLogger#debug(String) Verbose}</li>\n+ * </ol>\n+ */\n+public class AndroidClientLogger implements ClientLogger {\n+    /**\n+     * This interface represents the logging levels used in Azure SDKs.\n+     */\n+    @Retention(RetentionPolicy.SOURCE)\n+    @IntDef({DEBUG, INFO, WARNING, ERROR, NOT_SET})\n+    public @interface LogLevel {}\n+\n+    /**\n+     * Indicates that log level is at the debug level.\n+     */\n+    public static final int DEBUG = 1;\n+\n+    /**\n+     * Indicates that log level is at the informational level.\n+     */\n+    public static final int INFO = 2;\n+\n+    /**\n+     * Indicates that log level is at the warning level.\n+     */\n+    public static final int WARNING = 3;\n+\n+    /**\n+     * Indicates that log level is at the error level.\n+     */\n+    public static final int ERROR = 4;\n+\n+    /**\n+     * Indicates that no log level is set.\n+     */\n+    public static final int NOT_SET = 5;\n+\n+    private final String tag;\n+    private int logLevel;\n+\n+    /**\n+     * Retrieves a logger for the passed class using the {@link LoggerFactory}.\n+     *\n+     * @param clazz Class creating the logger.\n+     */\n+    public AndroidClientLogger(Class<?> clazz) {\n+        this(clazz.getName());\n+    }\n+\n+    /**\n+     * Retrieves a logger for the passed class name using the {@link LoggerFactory}.\n+     *\n+     * @param tag Class name creating the logger.\n+     */\n+    public AndroidClientLogger(String tag) {\n+        this.tag = tag;\n+    }\n+\n+    /**\n+     * Returns this logger's log level.\n+     *\n+     * @return The log level.\n+     */\n+    @LogLevel\n+    public int getLogLevel() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA3NzI1OA=="}, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwMTA4Nw==", "bodyText": "Yep, quite right. Looked up the spec and that's the right place - because we have to annotate the method itself, since there is a way to annotate a method parameter but no way to annotate a method return type.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367601087", "createdAt": "2020-01-16T19:15:58Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/AndroidClientLogger.java", "diffHunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util.logging;\n+\n+import android.util.Log;\n+\n+import androidx.annotation.IntDef;\n+\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+\n+/**\n+ * This is a fluent logger helper class that implements the {@link ClientLogger} interface.\n+ *\n+ * <p>This logger logs formattable messages that use {@code {}} as the placeholder. When a {@link Throwable throwable}\n+ * is the last argument of the format varargs and the logger is enabled for\n+ * {@link AndroidClientLogger#debug(String) debug}, the stack trace for the throwable is logged.</p>\n+ *\n+ * <p><strong>Log level hierarchy</strong></p>\n+ * <ol>\n+ * <li>{@link AndroidClientLogger#error(String) Error}</li>\n+ * <li>{@link AndroidClientLogger#warning(String) Warning}</li>\n+ * <li>{@link AndroidClientLogger#info(String) Info}</li>\n+ * <li>{@link AndroidClientLogger#debug(String) Verbose}</li>\n+ * </ol>\n+ */\n+public class AndroidClientLogger implements ClientLogger {\n+    /**\n+     * This interface represents the logging levels used in Azure SDKs.\n+     */\n+    @Retention(RetentionPolicy.SOURCE)\n+    @IntDef({DEBUG, INFO, WARNING, ERROR, NOT_SET})\n+    public @interface LogLevel {}\n+\n+    /**\n+     * Indicates that log level is at the debug level.\n+     */\n+    public static final int DEBUG = 1;\n+\n+    /**\n+     * Indicates that log level is at the informational level.\n+     */\n+    public static final int INFO = 2;\n+\n+    /**\n+     * Indicates that log level is at the warning level.\n+     */\n+    public static final int WARNING = 3;\n+\n+    /**\n+     * Indicates that log level is at the error level.\n+     */\n+    public static final int ERROR = 4;\n+\n+    /**\n+     * Indicates that no log level is set.\n+     */\n+    public static final int NOT_SET = 5;\n+\n+    private final String tag;\n+    private int logLevel;\n+\n+    /**\n+     * Retrieves a logger for the passed class using the {@link LoggerFactory}.\n+     *\n+     * @param clazz Class creating the logger.\n+     */\n+    public AndroidClientLogger(Class<?> clazz) {\n+        this(clazz.getName());\n+    }\n+\n+    /**\n+     * Retrieves a logger for the passed class name using the {@link LoggerFactory}.\n+     *\n+     * @param tag Class name creating the logger.\n+     */\n+    public AndroidClientLogger(String tag) {\n+        this.tag = tag;\n+    }\n+\n+    /**\n+     * Returns this logger's log level.\n+     *\n+     * @return The log level.\n+     */\n+    @LogLevel\n+    public int getLogLevel() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA3NzI1OA=="}, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODAyNzE1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMDowMjozNFrOFeEwrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMDowMjozNFrOFeEwrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA3OTU5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return Long value indicating the content length of the Request or Response\n          \n          \n            \n                 * @return The content length of the Request or Response\n          \n      \n    \n    \n  \n\nThe type is encoded in the signature, let's not bother duplicating that in the documentation.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367079598", "createdAt": "2020-01-15T20:02:34Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogUtils.java", "diffHunk": "@@ -16,7 +19,7 @@\n      * Attempts to retrieve and parse the Content-Length header into a numeric representation.\n      *\n      * @param headers HTTP headers that are checked for containing Content-Length.\n-     * @return long value indicating the content length of the Request or Response\n+     * @return Long value indicating the content length of the Request or Response", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODAzMTQ0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogOptions.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMDowNDoxOFrOFeEzfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxOToyMjozNlrOFekyOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4MDMxOA==", "bodyText": "For iOS we just truncated this application ID. Should we just do the same here? I don't feel like it's worth throwing an error.\nAlso, regardless of whether you change this or not, we should make the limitation clear in the doc comment on L157.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367080318", "createdAt": "2020-01-15T20:04:18Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogOptions.java", "diffHunk": "@@ -146,17 +159,26 @@ public String getApplicationId() {\n      */\n     public LogOptions setApplicationId(final String applicationId) {\n         if (!CoreUtils.isNullOrEmpty(applicationId)) {\n+            RuntimeException exception;\n+\n             if (applicationId.length() > MAX_APPLICATION_ID_LENGTH) {\n-                throw logger\n-                    .logExceptionAsError(new IllegalArgumentException(\"'applicationId' length cannot be greater than \"\n-                        + MAX_APPLICATION_ID_LENGTH));\n+                exception = new IllegalArgumentException(\"'applicationId' length cannot be greater than \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4MjEwMQ==", "bodyText": "Ignore this comment (or at least apply it to the appropriate place in UserAgentInterceptor) if we remove this from LogOptions", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367082101", "createdAt": "2020-01-15T20:08:15Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogOptions.java", "diffHunk": "@@ -146,17 +159,26 @@ public String getApplicationId() {\n      */\n     public LogOptions setApplicationId(final String applicationId) {\n         if (!CoreUtils.isNullOrEmpty(applicationId)) {\n+            RuntimeException exception;\n+\n             if (applicationId.length() > MAX_APPLICATION_ID_LENGTH) {\n-                throw logger\n-                    .logExceptionAsError(new IllegalArgumentException(\"'applicationId' length cannot be greater than \"\n-                        + MAX_APPLICATION_ID_LENGTH));\n+                exception = new IllegalArgumentException(\"'applicationId' length cannot be greater than \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4MDMxOA=="}, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxODUyMg==", "bodyText": "I stated this on a different comment, but I think we should determine how undesirable it would be to have an incomplete or incorrect Application ID to determine the course of action.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367218522", "createdAt": "2020-01-16T03:46:00Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogOptions.java", "diffHunk": "@@ -146,17 +159,26 @@ public String getApplicationId() {\n      */\n     public LogOptions setApplicationId(final String applicationId) {\n         if (!CoreUtils.isNullOrEmpty(applicationId)) {\n+            RuntimeException exception;\n+\n             if (applicationId.length() > MAX_APPLICATION_ID_LENGTH) {\n-                throw logger\n-                    .logExceptionAsError(new IllegalArgumentException(\"'applicationId' length cannot be greater than \"\n-                        + MAX_APPLICATION_ID_LENGTH));\n+                exception = new IllegalArgumentException(\"'applicationId' length cannot be greater than \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4MDMxOA=="}, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwNDI4Mg==", "bodyText": "Yep, agreed. On iOS we have exactly the same problem, except worse because we accept the various options in the UserAgentPolicy initializer and most users don't expect constructors to throw exceptions.\nOne challenge is that for iOS we populate the applicationId as the bundle identifier if the user doesn't supply one. If the bundle identifier is > 24 characters, then the user will get an exception without ever doing anything related to the applicationId.\nFor Android I would think we'd want a similar default (probably group ID + artifact ID) for applicationId, so even though this isn't being set in a constructor, it'd still be surprising. Maybe let's chat with @adrianhall and see if he has some guidance.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367604282", "createdAt": "2020-01-16T19:22:36Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogOptions.java", "diffHunk": "@@ -146,17 +159,26 @@ public String getApplicationId() {\n      */\n     public LogOptions setApplicationId(final String applicationId) {\n         if (!CoreUtils.isNullOrEmpty(applicationId)) {\n+            RuntimeException exception;\n+\n             if (applicationId.length() > MAX_APPLICATION_ID_LENGTH) {\n-                throw logger\n-                    .logExceptionAsError(new IllegalArgumentException(\"'applicationId' length cannot be greater than \"\n-                        + MAX_APPLICATION_ID_LENGTH));\n+                exception = new IllegalArgumentException(\"'applicationId' length cannot be greater than \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4MDMxOA=="}, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODA0MTU5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogOptions.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMDowNzo0NlrOFeE5pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxOToyMDowOFrOFektXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4MTg5NQ==", "bodyText": "Actually why is this in LogOptions?  AFAIK the application ID is used only for the user agent interceptor.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367081895", "createdAt": "2020-01-15T20:07:46Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogOptions.java", "diffHunk": "@@ -146,17 +159,26 @@ public String getApplicationId() {\n      */\n     public LogOptions setApplicationId(final String applicationId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxNzYyMw==", "bodyText": "@bsiegel This was originally taken from the Java SDK. Could it be that they wanted to include the Application ID in the logs?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367217623", "createdAt": "2020-01-16T03:41:01Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogOptions.java", "diffHunk": "@@ -146,17 +159,26 @@ public String getApplicationId() {\n      */\n     public LogOptions setApplicationId(final String applicationId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4MTg5NQ=="}, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxNzg0NQ==", "bodyText": "Anyways, I will remove this from here for now and ask the Java team the reasoning behind this. If we see value in having it we can add it later.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367217845", "createdAt": "2020-01-16T03:42:15Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogOptions.java", "diffHunk": "@@ -146,17 +159,26 @@ public String getApplicationId() {\n      */\n     public LogOptions setApplicationId(final String applicationId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4MTg5NQ=="}, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwMzAzOA==", "bodyText": "Sounds good, as far as I know it's only used in that one place. If we find a use for it in logging we can always add it back.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367603038", "createdAt": "2020-01-16T19:20:08Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogOptions.java", "diffHunk": "@@ -146,17 +159,26 @@ public String getApplicationId() {\n      */\n     public LogOptions setApplicationId(final String applicationId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4MTg5NQ=="}, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODA0NjU3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogOptions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMDowOTo1MlrOFeE9Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMzo0Mzo1MlrOFeNN8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4Mjc1OQ==", "bodyText": "I'm trying to think of a better way to handle the assertions about the format of the application ID. Suggestions?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367082759", "createdAt": "2020-01-15T20:09:52Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogOptions.java", "diffHunk": "@@ -146,17 +159,26 @@ public String getApplicationId() {\n      */\n     public LogOptions setApplicationId(final String applicationId) {\n         if (!CoreUtils.isNullOrEmpty(applicationId)) {\n+            RuntimeException exception;\n+\n             if (applicationId.length() > MAX_APPLICATION_ID_LENGTH) {\n-                throw logger\n-                    .logExceptionAsError(new IllegalArgumentException(\"'applicationId' length cannot be greater than \"\n-                        + MAX_APPLICATION_ID_LENGTH));\n+                exception = new IllegalArgumentException(\"'applicationId' length cannot be greater than \"\n+                    + MAX_APPLICATION_ID_LENGTH);\n+\n+                logger.error(\"Error found when setting Application ID\", exception);\n+\n+                throw exception;\n             } else if (applicationId.contains(\" \")) {\n-                throw logger\n-                    .logExceptionAsError(new IllegalArgumentException(\"'applicationId' must not contain a space.\"));\n+                exception = new IllegalArgumentException(\"'applicationId' must not contain a space.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4Mjc4Mw==", "bodyText": "Ignore this comment (or at least apply it to the appropriate place in UserAgentInterceptor) if we remove this from LogOptions", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367082783", "createdAt": "2020-01-15T20:09:55Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogOptions.java", "diffHunk": "@@ -146,17 +159,26 @@ public String getApplicationId() {\n      */\n     public LogOptions setApplicationId(final String applicationId) {\n         if (!CoreUtils.isNullOrEmpty(applicationId)) {\n+            RuntimeException exception;\n+\n             if (applicationId.length() > MAX_APPLICATION_ID_LENGTH) {\n-                throw logger\n-                    .logExceptionAsError(new IllegalArgumentException(\"'applicationId' length cannot be greater than \"\n-                        + MAX_APPLICATION_ID_LENGTH));\n+                exception = new IllegalArgumentException(\"'applicationId' length cannot be greater than \"\n+                    + MAX_APPLICATION_ID_LENGTH);\n+\n+                logger.error(\"Error found when setting Application ID\", exception);\n+\n+                throw exception;\n             } else if (applicationId.contains(\" \")) {\n-                throw logger\n-                    .logExceptionAsError(new IllegalArgumentException(\"'applicationId' must not contain a space.\"));\n+                exception = new IllegalArgumentException(\"'applicationId' must not contain a space.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4Mjc1OQ=="}, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxODE2Mw==", "bodyText": "@bsiegel Aside from the User-Agent string, I'm not sure what we would want the Application ID for and how bad could it be if there is an error in the value passed on by customers. I'll ask the Java folks.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/153#discussion_r367218163", "createdAt": "2020-01-16T03:43:52Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogOptions.java", "diffHunk": "@@ -146,17 +159,26 @@ public String getApplicationId() {\n      */\n     public LogOptions setApplicationId(final String applicationId) {\n         if (!CoreUtils.isNullOrEmpty(applicationId)) {\n+            RuntimeException exception;\n+\n             if (applicationId.length() > MAX_APPLICATION_ID_LENGTH) {\n-                throw logger\n-                    .logExceptionAsError(new IllegalArgumentException(\"'applicationId' length cannot be greater than \"\n-                        + MAX_APPLICATION_ID_LENGTH));\n+                exception = new IllegalArgumentException(\"'applicationId' length cannot be greater than \"\n+                    + MAX_APPLICATION_ID_LENGTH);\n+\n+                logger.error(\"Error found when setting Application ID\", exception);\n+\n+                throw exception;\n             } else if (applicationId.contains(\" \")) {\n-                throw logger\n-                    .logExceptionAsError(new IllegalArgumentException(\"'applicationId' must not contain a space.\"));\n+                exception = new IllegalArgumentException(\"'applicationId' must not contain a space.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4Mjc1OQ=="}, "originalCommit": {"oid": "669c4dc05cb39d3a8066a6a23f40121b701b97af"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2450, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}