{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNzY5MDQw", "number": 399, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMDozNzoyMVrOEsMLvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxODo0Nzo0NFrOEupY_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzcyNDEyOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMDozNzoyMVrOHfX78A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNjoyNjowOFrOHhbTLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY2MDA4MA==", "bodyText": "can we correct the indentation?\nsame comment in StorageBlobServiceImpl.java updates.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/399#discussion_r502660080", "createdAt": "2020-10-09T20:37:21Z", "author": {"login": "anuchandy"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobAsyncClient.java", "diffHunk": "@@ -236,6 +239,55 @@ public void cancel(Context context, long transferId) {\n             .cancel(transferId);\n     }\n \n+    /**\n+     * Creates a new container within a storage account. If a container with the same name already exists, the operation\n+     * fails.\n+     *\n+     * @param containerName The container name.\n+     * @param callback      Callback that receives the response.\n+     */\n+    public void createContainer(String containerName,\n+                                CallbackWithHeader<Void, ContainerCreateHeaders> callback) {\n+        storageBlobServiceClient.createContainer(containerName, callback);\n+    }\n+\n+    /**\n+     * Creates a new container within a storage account. If a container with the same name already exists, the operation\n+     * fails.\n+     *\n+     * @param containerName         The container name.\n+     * @param timeout               The timeout parameter is expressed in seconds. For more information, see\n+     *                              &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n+     * @param metadata              Metadata to associate with the container.\n+     * @param publicAccessType      Specifies how the data in this container is available to the public. See the\n+     *                              x-ms-blob-public-access header in the Azure Docs for more information. Pass null\n+     *                              for no public access.\n+     * @param version               Specifies the version of the operation to use for this request.\n+     * @param requestId             Provides a client-generated, opaque value with a 1 KB character limit that is\n+     *                              recorded in the analytics logs when storage analytics logging is enabled.\n+     * @param cancellationToken     The token to request cancellation.\n+     * @param callback      Callback that receives the response.\n+     * @return The response information returned from the server when creating a container.\n+     */\n+    public void createContainer(String containerName,\n+                                                                   Integer timeout,\n+                                                                   Map<String, String> metadata,\n+                                                                   PublicAccessType publicAccessType,\n+                                                                   String version,\n+                                                                   String requestId,\n+                                                                   CancellationToken cancellationToken,\n+                                                                   CallbackWithHeader<Void, ContainerCreateHeaders> callback) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fd2db40775cd27af30e8e3d4a385b074be54728"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgxMjMzMg==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-android/pull/399#discussion_r504812332", "createdAt": "2020-10-14T16:26:08Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobAsyncClient.java", "diffHunk": "@@ -236,6 +239,55 @@ public void cancel(Context context, long transferId) {\n             .cancel(transferId);\n     }\n \n+    /**\n+     * Creates a new container within a storage account. If a container with the same name already exists, the operation\n+     * fails.\n+     *\n+     * @param containerName The container name.\n+     * @param callback      Callback that receives the response.\n+     */\n+    public void createContainer(String containerName,\n+                                CallbackWithHeader<Void, ContainerCreateHeaders> callback) {\n+        storageBlobServiceClient.createContainer(containerName, callback);\n+    }\n+\n+    /**\n+     * Creates a new container within a storage account. If a container with the same name already exists, the operation\n+     * fails.\n+     *\n+     * @param containerName         The container name.\n+     * @param timeout               The timeout parameter is expressed in seconds. For more information, see\n+     *                              &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n+     * @param metadata              Metadata to associate with the container.\n+     * @param publicAccessType      Specifies how the data in this container is available to the public. See the\n+     *                              x-ms-blob-public-access header in the Azure Docs for more information. Pass null\n+     *                              for no public access.\n+     * @param version               Specifies the version of the operation to use for this request.\n+     * @param requestId             Provides a client-generated, opaque value with a 1 KB character limit that is\n+     *                              recorded in the analytics logs when storage analytics logging is enabled.\n+     * @param cancellationToken     The token to request cancellation.\n+     * @param callback      Callback that receives the response.\n+     * @return The response information returned from the server when creating a container.\n+     */\n+    public void createContainer(String containerName,\n+                                                                   Integer timeout,\n+                                                                   Map<String, String> metadata,\n+                                                                   PublicAccessType publicAccessType,\n+                                                                   String version,\n+                                                                   String requestId,\n+                                                                   CancellationToken cancellationToken,\n+                                                                   CallbackWithHeader<Void, ContainerCreateHeaders> callback) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY2MDA4MA=="}, "originalCommit": {"oid": "7fd2db40775cd27af30e8e3d4a385b074be54728"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0Nzg4OTI4OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMTo1MToxMVrOHfZfEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNjoyNDoyNlrOHhbOrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4NTQ1OQ==", "bodyText": "I don't think Retrofit has the built-in support passing multi-headers i.e. x-ms-meta-*.\nOne way I can think of handling this is by leveraging Retrofit Tag, so create a class to be tagged StorageMultiHeaders.\nclass StorageMultiHeaders {\n   private String headerPrefix;\n   private Map<String, String> headers;\n\n   public StorageMultiHeaders(String headerPrefix, Map<String, String> headers) {\n       this.headerPrefix = headerPrefix;\n       this.headers = headers;\n   }\n\n   public String getHeaderPrefix() {..}\n   public Map<String, String> getHeaders() {..}\n}\n\n@PUT(\"{containerName}\")\nCall<ResponseBody> createContainer(\n  @Path(\"containerName\") String containerName,\n  @Query(\"timeout\") Integer timeout,\n  @Header(\"x-ms-meta-\") Map<String, String> metadata,\n  @Header(\"x-ms-blob-public-access\") PublicAccessType access,\n  @Header(\"x-ms-version\") String version,\n  @Header(\"x-ms-client-request-id\") String requestId,\n  @Query(\"restype\") String restype,\n  @Header(\"x-ms-default-encryption-scope\") String defaultEncryptionScope,\n  @Header(\"x-ms-deny-encryption-scope-override\") Boolean encryptionScopeOverridePrevented, \n  @Tag StorageMultiHeaders multiHeaders);\nthen when we call the service method, use StorageMultiHeaders type.\nStorageMultiHeaders multiHeaders = new StorageMultiHeaders(\"x-ms-meta-\", metadata);\nservice.createContainer(..., multiHeaders);\nand add an interceptor in the StorageBlobServiceImpl\nthis.service = serviceClientnewBuilder()\n    .addInterceptor(new Interceptor() {\n    @Override\n    public okhttp3.Response intercept(Chain chain) throws IOException {\n        StorageMultiHeaders multiHeaders\n                = chain.request().tag(StorageMultiHeaders.class);\n        if (multiHeaders != null) {\n            Request.Builder requestBuilder = chain.request().newBuilder();\n            Map<String, String> headers = multiHeaders.getHeaders();\n            for (Map.Entry<String, String> entry : headers.entrySet()) {\n                requestBuilder.addHeader(multiHeaders.getHeaderPrefix() + entry.getKey(), entry.getValue());\n            }\n            return chain.proceed(requestBuilder.build());\n        } else {\n            return chain.proceed(chain.request());\n        }\n    }\n   })\n    .getRetrofit().create(StorageBlobService.class);", "url": "https://github.com/Azure/azure-sdk-for-android/pull/399#discussion_r502685459", "createdAt": "2020-10-09T21:51:11Z", "author": {"login": "anuchandy"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -1556,6 +1693,17 @@ private static String readAsString(ResponseBody body) {\n     }\n \n     private interface StorageBlobService {\n+        @PUT(\"{containerName}\")\n+        Call<ResponseBody> createContainer(@Path(\"containerName\") String containerName,\n+                                                      @Query(\"timeout\") Integer timeout,\n+                                                      @Header(\"x-ms-meta-\") Map<String, String> metadata,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fd2db40775cd27af30e8e3d4a385b074be54728"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1NTU1MA==", "bodyText": "Yea I figured it was a long shot that retrofit supported our weird metadata prefix situation :). I kinda put that there as a place holder until we got some live tests going and could see a little more info. Now I'm there and have confirmed it doesn't work! I'll give your suggestion a shot and see where that gets us! Thanks for the head start!", "url": "https://github.com/Azure/azure-sdk-for-android/pull/399#discussion_r503555550", "createdAt": "2020-10-12T21:59:14Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -1556,6 +1693,17 @@ private static String readAsString(ResponseBody body) {\n     }\n \n     private interface StorageBlobService {\n+        @PUT(\"{containerName}\")\n+        Call<ResponseBody> createContainer(@Path(\"containerName\") String containerName,\n+                                                      @Query(\"timeout\") Integer timeout,\n+                                                      @Header(\"x-ms-meta-\") Map<String, String> metadata,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4NTQ1OQ=="}, "originalCommit": {"oid": "7fd2db40775cd27af30e8e3d4a385b074be54728"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgxMTE4MQ==", "bodyText": "Should be fixed", "url": "https://github.com/Azure/azure-sdk-for-android/pull/399#discussion_r504811181", "createdAt": "2020-10-14T16:24:26Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -1556,6 +1693,17 @@ private static String readAsString(ResponseBody body) {\n     }\n \n     private interface StorageBlobService {\n+        @PUT(\"{containerName}\")\n+        Call<ResponseBody> createContainer(@Path(\"containerName\") String containerName,\n+                                                      @Query(\"timeout\") Integer timeout,\n+                                                      @Header(\"x-ms-meta-\") Map<String, String> metadata,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4NTQ1OQ=="}, "originalCommit": {"oid": "7fd2db40775cd27af30e8e3d4a385b074be54728"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzQ1NjQwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/common/TestUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxODozOTo0MVrOHjL8jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNzoxODoxMFrOHkZBQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY1NzkzMw==", "bodyText": "can we replace all instances of UUID.randomUUID() with a method call? That way when we get to the point where we record, we can just change that method?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/399#discussion_r506657933", "createdAt": "2020-10-16T18:39:41Z", "author": {"login": "gapra-msft"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/common/TestUtils.java", "diffHunk": "@@ -1,29 +1,141 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n \n-package com.azure.android.core.common;\n+package com.azure.android.storage.blob;\n+\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.storage.blob.StorageBlobAsyncClient;\n+import com.azure.android.storage.blob.StorageBlobClient;\n+import com.azure.android.storage.blob.credential.SasTokenCredential;\n+import com.azure.android.storage.blob.interceptor.SasTokenCredentialInterceptor;\n+\n+import org.threeten.bp.OffsetDateTime;\n \n import java.io.PrintWriter;\n import java.io.StringWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Proxy;\n import java.util.List;\n import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n+import okhttp3.Headers;\n import okhttp3.Interceptor;\n import okhttp3.OkHttpClient;\n import okhttp3.Request;\n import okhttp3.mockwebserver.MockWebServer;\n \n+import static org.junit.Assert.assertFalse;\n+\n public final class TestUtils {\n     private TestUtils() {\n         // Empty constructor to prevent instantiation of this class.\n     }\n \n+    // ----------------------- CONSTANT VALUES ----------------------------\n+    /*\n+    The values below are used to create data-driven tests for access conditions.\n+     */\n+    static final OffsetDateTime oldDate = OffsetDateTime.now().minusDays(1);\n+\n+    static final OffsetDateTime newDate = OffsetDateTime.now().plusDays(1);\n+\n+\n+    // -------------------- GENERATING CLIENTS --------------------------\n+    public static StorageBlobClient.Builder initializeDefaultSyncBlobClientBuilder(Interceptor ... interceptors) {\n+        return initializeDefaultSyncBlobClientBuilder(enableFiddler(), interceptors);\n+    }\n+\n+    public static StorageBlobClient.Builder initializeDefaultSyncBlobClientBuilder(boolean enableFiddler,\n+                                                                                   Interceptor ... interceptors) {\n+        return new StorageBlobClient.Builder(getServiceBuilderWithOptionalProxy(enableFiddler, interceptors))\n+            .setBlobServiceUrl(getDefaultEndpointString(useHttps()))\n+            .setCredentialInterceptor(new SasTokenCredentialInterceptor(new SasTokenCredential(getDefaultSasToken())));\n+    }\n+\n+    public static StorageBlobAsyncClient.Builder initializeDefaultAsyncBlobClientBuilder(Interceptor ... interceptors) {\n+        return initializeDefaultAsyncBlobClientBuilder(enableFiddler(), interceptors);\n+    }\n+\n+    public static StorageBlobAsyncClient.Builder initializeDefaultAsyncBlobClientBuilder(boolean enableFiddler,\n+                                                                                         Interceptor ... interceptors) {\n+        return new StorageBlobAsyncClient.Builder(UUID.randomUUID().toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24ca631081e4a802f484b049fa859d1b6259f0ae"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY1ODE0Mw==", "bodyText": "Same idea with date time now", "url": "https://github.com/Azure/azure-sdk-for-android/pull/399#discussion_r506658143", "createdAt": "2020-10-16T18:40:04Z", "author": {"login": "gapra-msft"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/common/TestUtils.java", "diffHunk": "@@ -1,29 +1,141 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n \n-package com.azure.android.core.common;\n+package com.azure.android.storage.blob;\n+\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.storage.blob.StorageBlobAsyncClient;\n+import com.azure.android.storage.blob.StorageBlobClient;\n+import com.azure.android.storage.blob.credential.SasTokenCredential;\n+import com.azure.android.storage.blob.interceptor.SasTokenCredentialInterceptor;\n+\n+import org.threeten.bp.OffsetDateTime;\n \n import java.io.PrintWriter;\n import java.io.StringWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Proxy;\n import java.util.List;\n import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n+import okhttp3.Headers;\n import okhttp3.Interceptor;\n import okhttp3.OkHttpClient;\n import okhttp3.Request;\n import okhttp3.mockwebserver.MockWebServer;\n \n+import static org.junit.Assert.assertFalse;\n+\n public final class TestUtils {\n     private TestUtils() {\n         // Empty constructor to prevent instantiation of this class.\n     }\n \n+    // ----------------------- CONSTANT VALUES ----------------------------\n+    /*\n+    The values below are used to create data-driven tests for access conditions.\n+     */\n+    static final OffsetDateTime oldDate = OffsetDateTime.now().minusDays(1);\n+\n+    static final OffsetDateTime newDate = OffsetDateTime.now().plusDays(1);\n+\n+\n+    // -------------------- GENERATING CLIENTS --------------------------\n+    public static StorageBlobClient.Builder initializeDefaultSyncBlobClientBuilder(Interceptor ... interceptors) {\n+        return initializeDefaultSyncBlobClientBuilder(enableFiddler(), interceptors);\n+    }\n+\n+    public static StorageBlobClient.Builder initializeDefaultSyncBlobClientBuilder(boolean enableFiddler,\n+                                                                                   Interceptor ... interceptors) {\n+        return new StorageBlobClient.Builder(getServiceBuilderWithOptionalProxy(enableFiddler, interceptors))\n+            .setBlobServiceUrl(getDefaultEndpointString(useHttps()))\n+            .setCredentialInterceptor(new SasTokenCredentialInterceptor(new SasTokenCredential(getDefaultSasToken())));\n+    }\n+\n+    public static StorageBlobAsyncClient.Builder initializeDefaultAsyncBlobClientBuilder(Interceptor ... interceptors) {\n+        return initializeDefaultAsyncBlobClientBuilder(enableFiddler(), interceptors);\n+    }\n+\n+    public static StorageBlobAsyncClient.Builder initializeDefaultAsyncBlobClientBuilder(boolean enableFiddler,\n+                                                                                         Interceptor ... interceptors) {\n+        return new StorageBlobAsyncClient.Builder(UUID.randomUUID().toString(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY1NzkzMw=="}, "originalCommit": {"oid": "24ca631081e4a802f484b049fa859d1b6259f0ae"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyMDcwNA==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-android/pull/399#discussion_r507920704", "createdAt": "2020-10-19T17:18:10Z", "author": {"login": "rickle-msft"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/common/TestUtils.java", "diffHunk": "@@ -1,29 +1,141 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n \n-package com.azure.android.core.common;\n+package com.azure.android.storage.blob;\n+\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.storage.blob.StorageBlobAsyncClient;\n+import com.azure.android.storage.blob.StorageBlobClient;\n+import com.azure.android.storage.blob.credential.SasTokenCredential;\n+import com.azure.android.storage.blob.interceptor.SasTokenCredentialInterceptor;\n+\n+import org.threeten.bp.OffsetDateTime;\n \n import java.io.PrintWriter;\n import java.io.StringWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Proxy;\n import java.util.List;\n import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n+import okhttp3.Headers;\n import okhttp3.Interceptor;\n import okhttp3.OkHttpClient;\n import okhttp3.Request;\n import okhttp3.mockwebserver.MockWebServer;\n \n+import static org.junit.Assert.assertFalse;\n+\n public final class TestUtils {\n     private TestUtils() {\n         // Empty constructor to prevent instantiation of this class.\n     }\n \n+    // ----------------------- CONSTANT VALUES ----------------------------\n+    /*\n+    The values below are used to create data-driven tests for access conditions.\n+     */\n+    static final OffsetDateTime oldDate = OffsetDateTime.now().minusDays(1);\n+\n+    static final OffsetDateTime newDate = OffsetDateTime.now().plusDays(1);\n+\n+\n+    // -------------------- GENERATING CLIENTS --------------------------\n+    public static StorageBlobClient.Builder initializeDefaultSyncBlobClientBuilder(Interceptor ... interceptors) {\n+        return initializeDefaultSyncBlobClientBuilder(enableFiddler(), interceptors);\n+    }\n+\n+    public static StorageBlobClient.Builder initializeDefaultSyncBlobClientBuilder(boolean enableFiddler,\n+                                                                                   Interceptor ... interceptors) {\n+        return new StorageBlobClient.Builder(getServiceBuilderWithOptionalProxy(enableFiddler, interceptors))\n+            .setBlobServiceUrl(getDefaultEndpointString(useHttps()))\n+            .setCredentialInterceptor(new SasTokenCredentialInterceptor(new SasTokenCredential(getDefaultSasToken())));\n+    }\n+\n+    public static StorageBlobAsyncClient.Builder initializeDefaultAsyncBlobClientBuilder(Interceptor ... interceptors) {\n+        return initializeDefaultAsyncBlobClientBuilder(enableFiddler(), interceptors);\n+    }\n+\n+    public static StorageBlobAsyncClient.Builder initializeDefaultAsyncBlobClientBuilder(boolean enableFiddler,\n+                                                                                         Interceptor ... interceptors) {\n+        return new StorageBlobAsyncClient.Builder(UUID.randomUUID().toString(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY1NzkzMw=="}, "originalCommit": {"oid": "24ca631081e4a802f484b049fa859d1b6259f0ae"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzQ3OTE2OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/models/ContainerGetPropertiesHeaders.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxODo0NzoxNFrOHjMKrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxOTo1OTowM1rOHjOHiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2MTU1MA==", "bodyText": "TODO: Remove error code", "url": "https://github.com/Azure/azure-sdk-for-android/pull/399#discussion_r506661550", "createdAt": "2020-10-16T18:47:14Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/models/ContainerGetPropertiesHeaders.java", "diffHunk": "@@ -0,0 +1,506 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.models;\n+\n+import com.azure.android.core.annotation.HeaderCollection;\n+import com.azure.android.core.util.DateTimeRfc1123;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+\n+import org.threeten.bp.OffsetDateTime;\n+\n+import java.util.Map;\n+\n+/**\n+ * Defines headers for GetProperties operation.\n+ */\n+@JacksonXmlRootElement(localName = \"Container-GetProperties-Headers\")\n+public final class ContainerGetPropertiesHeaders {\n+    /*\n+     * The metadata property.\n+     */\n+    @HeaderCollection(\"x-ms-meta-\")\n+    private Map<String, String> metadata;\n+\n+    /*\n+     * The ETag contains a value that you can use to perform operations\n+     * conditionally. If the request version is 2011-08-18 or newer, the ETag\n+     * value will be in quotes.\n+     */\n+    @JsonProperty(value = \"ETag\")\n+    private String eTag;\n+\n+    /*\n+     * Returns the date and time the container was last modified. Any operation\n+     * that modifies the blob, including an update of the blob's metadata or\n+     * properties, changes the last-modified time of the blob.\n+     */\n+    @JsonProperty(value = \"Last-Modified\")\n+    private DateTimeRfc1123 lastModified;\n+\n+    /*\n+     * When a blob is leased, specifies whether the lease is of infinite or\n+     * fixed duration. Possible values include: 'infinite', 'fixed'\n+     */\n+    @JsonProperty(value = \"x-ms-lease-duration\")\n+    private LeaseDurationType leaseDuration;\n+\n+    /*\n+     * Lease state of the blob. Possible values include: 'available', 'leased',\n+     * 'expired', 'breaking', 'broken'\n+     */\n+    @JsonProperty(value = \"x-ms-lease-state\")\n+    private LeaseStateType leaseState;\n+\n+    /*\n+     * The current lease status of the blob. Possible values include: 'locked',\n+     * 'unlocked'\n+     */\n+    @JsonProperty(value = \"x-ms-lease-status\")\n+    private LeaseStatusType leaseStatus;\n+\n+    /*\n+     * If a client request id header is sent in the request, this header will\n+     * be present in the response with the same value.\n+     */\n+    @JsonProperty(value = \"x-ms-client-request-id\")\n+    private String clientRequestId;\n+\n+    /*\n+     * This header uniquely identifies the request that was made and can be\n+     * used for troubleshooting the request.\n+     */\n+    @JsonProperty(value = \"x-ms-request-id\")\n+    private String requestId;\n+\n+    /*\n+     * Indicates the version of the Blob service used to execute the request.\n+     * This header is returned for requests made against version 2009-09-19 and\n+     * above.\n+     */\n+    @JsonProperty(value = \"x-ms-version\")\n+    private String version;\n+\n+    /*\n+     * UTC date/time value generated by the service that indicates the time at\n+     * which the response was initiated\n+     */\n+    @JsonProperty(value = \"Date\")\n+    private DateTimeRfc1123 dateProperty;\n+\n+    /*\n+     * Indicated whether data in the container may be accessed publicly and the\n+     * level of access. Possible values include: 'container', 'blob'\n+     */\n+    @JsonProperty(value = \"x-ms-blob-public-access\")\n+    private PublicAccessType blobPublicAccess;\n+\n+    /*\n+     * Indicates whether the container has an immutability policy set on it.\n+     */\n+    @JsonProperty(value = \"x-ms-has-immutability-policy\")\n+    private Boolean hasImmutabilityPolicy;\n+\n+    /*\n+     * Indicates whether the container has a legal hold.\n+     */\n+    @JsonProperty(value = \"x-ms-has-legal-hold\")\n+    private Boolean hasLegalHold;\n+\n+    /*\n+     * The default encryption scope for the container.\n+     */\n+    @JsonProperty(value = \"x-ms-default-encryption-scope\")\n+    private String defaultEncryptionScope;\n+\n+    /*\n+     * Indicates whether the container's default encryption scope can be\n+     * overriden.\n+     */\n+    @JsonProperty(value = \"x-ms-deny-encryption-scope-override\")\n+    private Boolean denyEncryptionScopeOverride;\n+\n+    /*\n+     * The errorCode property.\n+     */\n+    @JsonProperty(value = \"x-ms-error-code\")\n+    private String errorCode;\n+\n+    /**\n+     * Get the metadata property: The metadata property.\n+     *\n+     * @return the metadata value.\n+     */\n+    public Map<String, String> getMetadata() {\n+        return this.metadata;\n+    }\n+\n+    /**\n+     * Set the metadata property: The metadata property.\n+     *\n+     * @param metadata the metadata value to set.\n+     * @return the ContainerGetPropertiesHeaders object itself.\n+     */\n+    public ContainerGetPropertiesHeaders setMetadata(Map<String, String> metadata) {\n+        this.metadata = metadata;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the eTag property: The ETag contains a value that you can use to\n+     * perform operations conditionally. If the request version is 2011-08-18\n+     * or newer, the ETag value will be in quotes.\n+     *\n+     * @return the eTag value.\n+     */\n+    public String getETag() {\n+        return this.eTag;\n+    }\n+\n+    /**\n+     * Set the eTag property: The ETag contains a value that you can use to\n+     * perform operations conditionally. If the request version is 2011-08-18\n+     * or newer, the ETag value will be in quotes.\n+     *\n+     * @param eTag the eTag value to set.\n+     * @return the ContainerGetPropertiesHeaders object itself.\n+     */\n+    public ContainerGetPropertiesHeaders setETag(String eTag) {\n+        this.eTag = eTag;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the lastModified property: Returns the date and time the container\n+     * was last modified. Any operation that modifies the blob, including an\n+     * update of the blob's metadata or properties, changes the last-modified\n+     * time of the blob.\n+     *\n+     * @return the lastModified value.\n+     */\n+    public OffsetDateTime getLastModified() {\n+        if (this.lastModified == null) {\n+            return null;\n+        }\n+        return this.lastModified.getDateTime();\n+    }\n+\n+    /**\n+     * Set the lastModified property: Returns the date and time the container\n+     * was last modified. Any operation that modifies the blob, including an\n+     * update of the blob's metadata or properties, changes the last-modified\n+     * time of the blob.\n+     *\n+     * @param lastModified the lastModified value to set.\n+     * @return the ContainerGetPropertiesHeaders object itself.\n+     */\n+    public ContainerGetPropertiesHeaders setLastModified(OffsetDateTime lastModified) {\n+        if (lastModified == null) {\n+            this.lastModified = null;\n+        } else {\n+            this.lastModified = new DateTimeRfc1123(lastModified);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Get the leaseDuration property: When a blob is leased, specifies whether\n+     * the lease is of infinite or fixed duration. Possible values include:\n+     * 'infinite', 'fixed'.\n+     *\n+     * @return the leaseDuration value.\n+     */\n+    public LeaseDurationType getLeaseDuration() {\n+        return this.leaseDuration;\n+    }\n+\n+    /**\n+     * Set the leaseDuration property: When a blob is leased, specifies whether\n+     * the lease is of infinite or fixed duration. Possible values include:\n+     * 'infinite', 'fixed'.\n+     *\n+     * @param leaseDuration the leaseDuration value to set.\n+     * @return the ContainerGetPropertiesHeaders object itself.\n+     */\n+    public ContainerGetPropertiesHeaders setLeaseDuration(LeaseDurationType leaseDuration) {\n+        this.leaseDuration = leaseDuration;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the leaseState property: Lease state of the blob. Possible values\n+     * include: 'available', 'leased', 'expired', 'breaking', 'broken'.\n+     *\n+     * @return the leaseState value.\n+     */\n+    public LeaseStateType getLeaseState() {\n+        return this.leaseState;\n+    }\n+\n+    /**\n+     * Set the leaseState property: Lease state of the blob. Possible values\n+     * include: 'available', 'leased', 'expired', 'breaking', 'broken'.\n+     *\n+     * @param leaseState the leaseState value to set.\n+     * @return the ContainerGetPropertiesHeaders object itself.\n+     */\n+    public ContainerGetPropertiesHeaders setLeaseState(LeaseStateType leaseState) {\n+        this.leaseState = leaseState;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the leaseStatus property: The current lease status of the blob.\n+     * Possible values include: 'locked', 'unlocked'.\n+     *\n+     * @return the leaseStatus value.\n+     */\n+    public LeaseStatusType getLeaseStatus() {\n+        return this.leaseStatus;\n+    }\n+\n+    /**\n+     * Set the leaseStatus property: The current lease status of the blob.\n+     * Possible values include: 'locked', 'unlocked'.\n+     *\n+     * @param leaseStatus the leaseStatus value to set.\n+     * @return the ContainerGetPropertiesHeaders object itself.\n+     */\n+    public ContainerGetPropertiesHeaders setLeaseStatus(LeaseStatusType leaseStatus) {\n+        this.leaseStatus = leaseStatus;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the clientRequestId property: If a client request id header is sent\n+     * in the request, this header will be present in the response with the\n+     * same value.\n+     *\n+     * @return the clientRequestId value.\n+     */\n+    public String getClientRequestId() {\n+        return this.clientRequestId;\n+    }\n+\n+    /**\n+     * Set the clientRequestId property: If a client request id header is sent\n+     * in the request, this header will be present in the response with the\n+     * same value.\n+     *\n+     * @param clientRequestId the clientRequestId value to set.\n+     * @return the ContainerGetPropertiesHeaders object itself.\n+     */\n+    public ContainerGetPropertiesHeaders setClientRequestId(String clientRequestId) {\n+        this.clientRequestId = clientRequestId;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the requestId property: This header uniquely identifies the request\n+     * that was made and can be used for troubleshooting the request.\n+     *\n+     * @return the requestId value.\n+     */\n+    public String getRequestId() {\n+        return this.requestId;\n+    }\n+\n+    /**\n+     * Set the requestId property: This header uniquely identifies the request\n+     * that was made and can be used for troubleshooting the request.\n+     *\n+     * @param requestId the requestId value to set.\n+     * @return the ContainerGetPropertiesHeaders object itself.\n+     */\n+    public ContainerGetPropertiesHeaders setRequestId(String requestId) {\n+        this.requestId = requestId;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the version property: Indicates the version of the Blob service used\n+     * to execute the request. This header is returned for requests made\n+     * against version 2009-09-19 and above.\n+     *\n+     * @return the version value.\n+     */\n+    public String getVersion() {\n+        return this.version;\n+    }\n+\n+    /**\n+     * Set the version property: Indicates the version of the Blob service used\n+     * to execute the request. This header is returned for requests made\n+     * against version 2009-09-19 and above.\n+     *\n+     * @param version the version value to set.\n+     * @return the ContainerGetPropertiesHeaders object itself.\n+     */\n+    public ContainerGetPropertiesHeaders setVersion(String version) {\n+        this.version = version;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the dateProperty property: UTC date/time value generated by the\n+     * service that indicates the time at which the response was initiated.\n+     *\n+     * @return the dateProperty value.\n+     */\n+    public OffsetDateTime getDateProperty() {\n+        if (this.dateProperty == null) {\n+            return null;\n+        }\n+        return this.dateProperty.getDateTime();\n+    }\n+\n+    /**\n+     * Set the dateProperty property: UTC date/time value generated by the\n+     * service that indicates the time at which the response was initiated.\n+     *\n+     * @param dateProperty the dateProperty value to set.\n+     * @return the ContainerGetPropertiesHeaders object itself.\n+     */\n+    public ContainerGetPropertiesHeaders setDateProperty(OffsetDateTime dateProperty) {\n+        if (dateProperty == null) {\n+            this.dateProperty = null;\n+        } else {\n+            this.dateProperty = new DateTimeRfc1123(dateProperty);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Get the blobPublicAccess property: Indicated whether data in the\n+     * container may be accessed publicly and the level of access. Possible\n+     * values include: 'container', 'blob'.\n+     *\n+     * @return the blobPublicAccess value.\n+     */\n+    public PublicAccessType getBlobPublicAccess() {\n+        return this.blobPublicAccess;\n+    }\n+\n+    /**\n+     * Set the blobPublicAccess property: Indicated whether data in the\n+     * container may be accessed publicly and the level of access. Possible\n+     * values include: 'container', 'blob'.\n+     *\n+     * @param blobPublicAccess the blobPublicAccess value to set.\n+     * @return the ContainerGetPropertiesHeaders object itself.\n+     */\n+    public ContainerGetPropertiesHeaders setBlobPublicAccess(PublicAccessType blobPublicAccess) {\n+        this.blobPublicAccess = blobPublicAccess;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the hasImmutabilityPolicy property: Indicates whether the container\n+     * has an immutability policy set on it.\n+     *\n+     * @return the hasImmutabilityPolicy value.\n+     */\n+    public Boolean hasImmutabilityPolicy() {\n+        return this.hasImmutabilityPolicy;\n+    }\n+\n+    /**\n+     * Set the hasImmutabilityPolicy property: Indicates whether the container\n+     * has an immutability policy set on it.\n+     *\n+     * @param hasImmutabilityPolicy the hasImmutabilityPolicy value to set.\n+     * @return the ContainerGetPropertiesHeaders object itself.\n+     */\n+    public ContainerGetPropertiesHeaders setHasImmutabilityPolicy(Boolean hasImmutabilityPolicy) {\n+        this.hasImmutabilityPolicy = hasImmutabilityPolicy;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the hasLegalHold property: Indicates whether the container has a\n+     * legal hold.\n+     *\n+     * @return the hasLegalHold value.\n+     */\n+    public Boolean hasLegalHold() {\n+        return this.hasLegalHold;\n+    }\n+\n+    /**\n+     * Set the hasLegalHold property: Indicates whether the container has a\n+     * legal hold.\n+     *\n+     * @param hasLegalHold the hasLegalHold value to set.\n+     * @return the ContainerGetPropertiesHeaders object itself.\n+     */\n+    public ContainerGetPropertiesHeaders setHasLegalHold(Boolean hasLegalHold) {\n+        this.hasLegalHold = hasLegalHold;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the defaultEncryptionScope property: The default encryption scope\n+     * for the container.\n+     *\n+     * @return the defaultEncryptionScope value.\n+     */\n+    public String getDefaultEncryptionScope() {\n+        return this.defaultEncryptionScope;\n+    }\n+\n+    /**\n+     * Set the defaultEncryptionScope property: The default encryption scope\n+     * for the container.\n+     *\n+     * @param defaultEncryptionScope the defaultEncryptionScope value to set.\n+     * @return the ContainerGetPropertiesHeaders object itself.\n+     */\n+    public ContainerGetPropertiesHeaders setDefaultEncryptionScope(String defaultEncryptionScope) {\n+        this.defaultEncryptionScope = defaultEncryptionScope;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the denyEncryptionScopeOverride property: Indicates whether the\n+     * container's default encryption scope can be overriden.\n+     *\n+     * @return the denyEncryptionScopeOverride value.\n+     */\n+    public Boolean isDenyEncryptionScopeOverride() {\n+        return this.denyEncryptionScopeOverride;\n+    }\n+\n+    /**\n+     * Set the denyEncryptionScopeOverride property: Indicates whether the\n+     * container's default encryption scope can be overriden.\n+     *\n+     * @param denyEncryptionScopeOverride the denyEncryptionScopeOverride value\n+     * to set.\n+     * @return the ContainerGetPropertiesHeaders object itself.\n+     */\n+    public ContainerGetPropertiesHeaders setDenyEncryptionScopeOverride(Boolean denyEncryptionScopeOverride) {\n+        this.denyEncryptionScopeOverride = denyEncryptionScopeOverride;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the errorCode property: The errorCode property.\n+     *\n+     * @return the errorCode value.\n+     */\n+    public String getErrorCode() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24ca631081e4a802f484b049fa859d1b6259f0ae"}, "originalPosition": 492}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY5MzUxMg==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-android/pull/399#discussion_r506693512", "createdAt": "2020-10-16T19:59:03Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/models/ContainerGetPropertiesHeaders.java", "diffHunk": "@@ -0,0 +1,506 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.models;\n+\n+import com.azure.android.core.annotation.HeaderCollection;\n+import com.azure.android.core.util.DateTimeRfc1123;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+\n+import org.threeten.bp.OffsetDateTime;\n+\n+import java.util.Map;\n+\n+/**\n+ * Defines headers for GetProperties operation.\n+ */\n+@JacksonXmlRootElement(localName = \"Container-GetProperties-Headers\")\n+public final class ContainerGetPropertiesHeaders {\n+    /*\n+     * The metadata property.\n+     */\n+    @HeaderCollection(\"x-ms-meta-\")\n+    private Map<String, String> metadata;\n+\n+    /*\n+     * The ETag contains a value that you can use to perform operations\n+     * conditionally. If the request version is 2011-08-18 or newer, the ETag\n+     * value will be in quotes.\n+     */\n+    @JsonProperty(value = \"ETag\")\n+    private String eTag;\n+\n+    /*\n+     * Returns the date and time the container was last modified. Any operation\n+     * that modifies the blob, including an update of the blob's metadata or\n+     * properties, changes the last-modified time of the blob.\n+     */\n+    @JsonProperty(value = \"Last-Modified\")\n+    private DateTimeRfc1123 lastModified;\n+\n+    /*\n+     * When a blob is leased, specifies whether the lease is of infinite or\n+     * fixed duration. Possible values include: 'infinite', 'fixed'\n+     */\n+    @JsonProperty(value = \"x-ms-lease-duration\")\n+    private LeaseDurationType leaseDuration;\n+\n+    /*\n+     * Lease state of the blob. Possible values include: 'available', 'leased',\n+     * 'expired', 'breaking', 'broken'\n+     */\n+    @JsonProperty(value = \"x-ms-lease-state\")\n+    private LeaseStateType leaseState;\n+\n+    /*\n+     * The current lease status of the blob. Possible values include: 'locked',\n+     * 'unlocked'\n+     */\n+    @JsonProperty(value = \"x-ms-lease-status\")\n+    private LeaseStatusType leaseStatus;\n+\n+    /*\n+     * If a client request id header is sent in the request, this header will\n+     * be present in the response with the same value.\n+     */\n+    @JsonProperty(value = \"x-ms-client-request-id\")\n+    private String clientRequestId;\n+\n+    /*\n+     * This header uniquely identifies the request that was made and can be\n+     * used for troubleshooting the request.\n+     */\n+    @JsonProperty(value = \"x-ms-request-id\")\n+    private String requestId;\n+\n+    /*\n+     * Indicates the version of the Blob service used to execute the request.\n+     * This header is returned for requests made against version 2009-09-19 and\n+     * above.\n+     */\n+    @JsonProperty(value = \"x-ms-version\")\n+    private String version;\n+\n+    /*\n+     * UTC date/time value generated by the service that indicates the time at\n+     * which the response was initiated\n+     */\n+    @JsonProperty(value = \"Date\")\n+    private DateTimeRfc1123 dateProperty;\n+\n+    /*\n+     * Indicated whether data in the container may be accessed publicly and the\n+     * level of access. Possible values include: 'container', 'blob'\n+     */\n+    @JsonProperty(value = \"x-ms-blob-public-access\")\n+    private PublicAccessType blobPublicAccess;\n+\n+    /*\n+     * Indicates whether the container has an immutability policy set on it.\n+     */\n+    @JsonProperty(value = \"x-ms-has-immutability-policy\")\n+    private Boolean hasImmutabilityPolicy;\n+\n+    /*\n+     * Indicates whether the container has a legal hold.\n+     */\n+    @JsonProperty(value = \"x-ms-has-legal-hold\")\n+    private Boolean hasLegalHold;\n+\n+    /*\n+     * The default encryption scope for the container.\n+     */\n+    @JsonProperty(value = \"x-ms-default-encryption-scope\")\n+    private String defaultEncryptionScope;\n+\n+    /*\n+     * Indicates whether the container's default encryption scope can be\n+     * overriden.\n+     */\n+    @JsonProperty(value = \"x-ms-deny-encryption-scope-override\")\n+    private Boolean denyEncryptionScopeOverride;\n+\n+    /*\n+     * The errorCode property.\n+     */\n+    @JsonProperty(value = \"x-ms-error-code\")\n+    private String errorCode;\n+\n+    /**\n+     * Get the metadata property: The metadata property.\n+     *\n+     * @return the metadata value.\n+     */\n+    public Map<String, String> getMetadata() {\n+        return this.metadata;\n+    }\n+\n+    /**\n+     * Set the metadata property: The metadata property.\n+     *\n+     * @param metadata the metadata value to set.\n+     * @return the ContainerGetPropertiesHeaders object itself.\n+     */\n+    public ContainerGetPropertiesHeaders setMetadata(Map<String, String> metadata) {\n+        this.metadata = metadata;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the eTag property: The ETag contains a value that you can use to\n+     * perform operations conditionally. If the request version is 2011-08-18\n+     * or newer, the ETag value will be in quotes.\n+     *\n+     * @return the eTag value.\n+     */\n+    public String getETag() {\n+        return this.eTag;\n+    }\n+\n+    /**\n+     * Set the eTag property: The ETag contains a value that you can use to\n+     * perform operations conditionally. If the request version is 2011-08-18\n+     * or newer, the ETag value will be in quotes.\n+     *\n+     * @param eTag the eTag value to set.\n+     * @return the ContainerGetPropertiesHeaders object itself.\n+     */\n+    public ContainerGetPropertiesHeaders setETag(String eTag) {\n+        this.eTag = eTag;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the lastModified property: Returns the date and time the container\n+     * was last modified. Any operation that modifies the blob, including an\n+     * update of the blob's metadata or properties, changes the last-modified\n+     * time of the blob.\n+     *\n+     * @return the lastModified value.\n+     */\n+    public OffsetDateTime getLastModified() {\n+        if (this.lastModified == null) {\n+            return null;\n+        }\n+        return this.lastModified.getDateTime();\n+    }\n+\n+    /**\n+     * Set the lastModified property: Returns the date and time the container\n+     * was last modified. Any operation that modifies the blob, including an\n+     * update of the blob's metadata or properties, changes the last-modified\n+     * time of the blob.\n+     *\n+     * @param lastModified the lastModified value to set.\n+     * @return the ContainerGetPropertiesHeaders object itself.\n+     */\n+    public ContainerGetPropertiesHeaders setLastModified(OffsetDateTime lastModified) {\n+        if (lastModified == null) {\n+            this.lastModified = null;\n+        } else {\n+            this.lastModified = new DateTimeRfc1123(lastModified);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Get the leaseDuration property: When a blob is leased, specifies whether\n+     * the lease is of infinite or fixed duration. Possible values include:\n+     * 'infinite', 'fixed'.\n+     *\n+     * @return the leaseDuration value.\n+     */\n+    public LeaseDurationType getLeaseDuration() {\n+        return this.leaseDuration;\n+    }\n+\n+    /**\n+     * Set the leaseDuration property: When a blob is leased, specifies whether\n+     * the lease is of infinite or fixed duration. Possible values include:\n+     * 'infinite', 'fixed'.\n+     *\n+     * @param leaseDuration the leaseDuration value to set.\n+     * @return the ContainerGetPropertiesHeaders object itself.\n+     */\n+    public ContainerGetPropertiesHeaders setLeaseDuration(LeaseDurationType leaseDuration) {\n+        this.leaseDuration = leaseDuration;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the leaseState property: Lease state of the blob. Possible values\n+     * include: 'available', 'leased', 'expired', 'breaking', 'broken'.\n+     *\n+     * @return the leaseState value.\n+     */\n+    public LeaseStateType getLeaseState() {\n+        return this.leaseState;\n+    }\n+\n+    /**\n+     * Set the leaseState property: Lease state of the blob. Possible values\n+     * include: 'available', 'leased', 'expired', 'breaking', 'broken'.\n+     *\n+     * @param leaseState the leaseState value to set.\n+     * @return the ContainerGetPropertiesHeaders object itself.\n+     */\n+    public ContainerGetPropertiesHeaders setLeaseState(LeaseStateType leaseState) {\n+        this.leaseState = leaseState;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the leaseStatus property: The current lease status of the blob.\n+     * Possible values include: 'locked', 'unlocked'.\n+     *\n+     * @return the leaseStatus value.\n+     */\n+    public LeaseStatusType getLeaseStatus() {\n+        return this.leaseStatus;\n+    }\n+\n+    /**\n+     * Set the leaseStatus property: The current lease status of the blob.\n+     * Possible values include: 'locked', 'unlocked'.\n+     *\n+     * @param leaseStatus the leaseStatus value to set.\n+     * @return the ContainerGetPropertiesHeaders object itself.\n+     */\n+    public ContainerGetPropertiesHeaders setLeaseStatus(LeaseStatusType leaseStatus) {\n+        this.leaseStatus = leaseStatus;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the clientRequestId property: If a client request id header is sent\n+     * in the request, this header will be present in the response with the\n+     * same value.\n+     *\n+     * @return the clientRequestId value.\n+     */\n+    public String getClientRequestId() {\n+        return this.clientRequestId;\n+    }\n+\n+    /**\n+     * Set the clientRequestId property: If a client request id header is sent\n+     * in the request, this header will be present in the response with the\n+     * same value.\n+     *\n+     * @param clientRequestId the clientRequestId value to set.\n+     * @return the ContainerGetPropertiesHeaders object itself.\n+     */\n+    public ContainerGetPropertiesHeaders setClientRequestId(String clientRequestId) {\n+        this.clientRequestId = clientRequestId;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the requestId property: This header uniquely identifies the request\n+     * that was made and can be used for troubleshooting the request.\n+     *\n+     * @return the requestId value.\n+     */\n+    public String getRequestId() {\n+        return this.requestId;\n+    }\n+\n+    /**\n+     * Set the requestId property: This header uniquely identifies the request\n+     * that was made and can be used for troubleshooting the request.\n+     *\n+     * @param requestId the requestId value to set.\n+     * @return the ContainerGetPropertiesHeaders object itself.\n+     */\n+    public ContainerGetPropertiesHeaders setRequestId(String requestId) {\n+        this.requestId = requestId;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the version property: Indicates the version of the Blob service used\n+     * to execute the request. This header is returned for requests made\n+     * against version 2009-09-19 and above.\n+     *\n+     * @return the version value.\n+     */\n+    public String getVersion() {\n+        return this.version;\n+    }\n+\n+    /**\n+     * Set the version property: Indicates the version of the Blob service used\n+     * to execute the request. This header is returned for requests made\n+     * against version 2009-09-19 and above.\n+     *\n+     * @param version the version value to set.\n+     * @return the ContainerGetPropertiesHeaders object itself.\n+     */\n+    public ContainerGetPropertiesHeaders setVersion(String version) {\n+        this.version = version;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the dateProperty property: UTC date/time value generated by the\n+     * service that indicates the time at which the response was initiated.\n+     *\n+     * @return the dateProperty value.\n+     */\n+    public OffsetDateTime getDateProperty() {\n+        if (this.dateProperty == null) {\n+            return null;\n+        }\n+        return this.dateProperty.getDateTime();\n+    }\n+\n+    /**\n+     * Set the dateProperty property: UTC date/time value generated by the\n+     * service that indicates the time at which the response was initiated.\n+     *\n+     * @param dateProperty the dateProperty value to set.\n+     * @return the ContainerGetPropertiesHeaders object itself.\n+     */\n+    public ContainerGetPropertiesHeaders setDateProperty(OffsetDateTime dateProperty) {\n+        if (dateProperty == null) {\n+            this.dateProperty = null;\n+        } else {\n+            this.dateProperty = new DateTimeRfc1123(dateProperty);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Get the blobPublicAccess property: Indicated whether data in the\n+     * container may be accessed publicly and the level of access. Possible\n+     * values include: 'container', 'blob'.\n+     *\n+     * @return the blobPublicAccess value.\n+     */\n+    public PublicAccessType getBlobPublicAccess() {\n+        return this.blobPublicAccess;\n+    }\n+\n+    /**\n+     * Set the blobPublicAccess property: Indicated whether data in the\n+     * container may be accessed publicly and the level of access. Possible\n+     * values include: 'container', 'blob'.\n+     *\n+     * @param blobPublicAccess the blobPublicAccess value to set.\n+     * @return the ContainerGetPropertiesHeaders object itself.\n+     */\n+    public ContainerGetPropertiesHeaders setBlobPublicAccess(PublicAccessType blobPublicAccess) {\n+        this.blobPublicAccess = blobPublicAccess;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the hasImmutabilityPolicy property: Indicates whether the container\n+     * has an immutability policy set on it.\n+     *\n+     * @return the hasImmutabilityPolicy value.\n+     */\n+    public Boolean hasImmutabilityPolicy() {\n+        return this.hasImmutabilityPolicy;\n+    }\n+\n+    /**\n+     * Set the hasImmutabilityPolicy property: Indicates whether the container\n+     * has an immutability policy set on it.\n+     *\n+     * @param hasImmutabilityPolicy the hasImmutabilityPolicy value to set.\n+     * @return the ContainerGetPropertiesHeaders object itself.\n+     */\n+    public ContainerGetPropertiesHeaders setHasImmutabilityPolicy(Boolean hasImmutabilityPolicy) {\n+        this.hasImmutabilityPolicy = hasImmutabilityPolicy;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the hasLegalHold property: Indicates whether the container has a\n+     * legal hold.\n+     *\n+     * @return the hasLegalHold value.\n+     */\n+    public Boolean hasLegalHold() {\n+        return this.hasLegalHold;\n+    }\n+\n+    /**\n+     * Set the hasLegalHold property: Indicates whether the container has a\n+     * legal hold.\n+     *\n+     * @param hasLegalHold the hasLegalHold value to set.\n+     * @return the ContainerGetPropertiesHeaders object itself.\n+     */\n+    public ContainerGetPropertiesHeaders setHasLegalHold(Boolean hasLegalHold) {\n+        this.hasLegalHold = hasLegalHold;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the defaultEncryptionScope property: The default encryption scope\n+     * for the container.\n+     *\n+     * @return the defaultEncryptionScope value.\n+     */\n+    public String getDefaultEncryptionScope() {\n+        return this.defaultEncryptionScope;\n+    }\n+\n+    /**\n+     * Set the defaultEncryptionScope property: The default encryption scope\n+     * for the container.\n+     *\n+     * @param defaultEncryptionScope the defaultEncryptionScope value to set.\n+     * @return the ContainerGetPropertiesHeaders object itself.\n+     */\n+    public ContainerGetPropertiesHeaders setDefaultEncryptionScope(String defaultEncryptionScope) {\n+        this.defaultEncryptionScope = defaultEncryptionScope;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the denyEncryptionScopeOverride property: Indicates whether the\n+     * container's default encryption scope can be overriden.\n+     *\n+     * @return the denyEncryptionScopeOverride value.\n+     */\n+    public Boolean isDenyEncryptionScopeOverride() {\n+        return this.denyEncryptionScopeOverride;\n+    }\n+\n+    /**\n+     * Set the denyEncryptionScopeOverride property: Indicates whether the\n+     * container's default encryption scope can be overriden.\n+     *\n+     * @param denyEncryptionScopeOverride the denyEncryptionScopeOverride value\n+     * to set.\n+     * @return the ContainerGetPropertiesHeaders object itself.\n+     */\n+    public ContainerGetPropertiesHeaders setDenyEncryptionScopeOverride(Boolean denyEncryptionScopeOverride) {\n+        this.denyEncryptionScopeOverride = denyEncryptionScopeOverride;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the errorCode property: The errorCode property.\n+     *\n+     * @return the errorCode value.\n+     */\n+    public String getErrorCode() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2MTU1MA=="}, "originalCommit": {"oid": "24ca631081e4a802f484b049fa859d1b6259f0ae"}, "originalPosition": 492}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzQ4MDk0OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/android/storage/blob/ContainerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxODo0Nzo0NFrOHjMLug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDowMDoyMVrOHjOJrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2MTgxOA==", "bodyText": "Add Copyright header?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/399#discussion_r506661818", "createdAt": "2020-10-16T18:47:44Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/android/storage/blob/ContainerTest.java", "diffHunk": "@@ -0,0 +1,368 @@\n+package com.azure.android.storage.blob;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24ca631081e4a802f484b049fa859d1b6259f0ae"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY5NDA2MA==", "bodyText": "For some reason it looked like none of the tests had these, so I just followed that, but I'll add it to the other test files, too.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/399#discussion_r506694060", "createdAt": "2020-10-16T20:00:21Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/android/storage/blob/ContainerTest.java", "diffHunk": "@@ -0,0 +1,368 @@\n+package com.azure.android.storage.blob;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2MTgxOA=="}, "originalCommit": {"oid": "24ca631081e4a802f484b049fa859d1b6259f0ae"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2306, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}