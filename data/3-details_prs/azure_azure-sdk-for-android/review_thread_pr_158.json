{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NjExMjc3", "number": 158, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMzo0MTowNFrODaA3-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMDoxNDoxM1rODaBOjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjAzODk5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/DeviceInformation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMzo0MTowNFrOFguziA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMzoyNTo0MlrOFi4HsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2NTYwOA==", "bodyText": "AndroidInformation type is package private so we should not link that type in javadoc.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/158#discussion_r369865608", "createdAt": "2020-01-22T23:41:04Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/DeviceInformation.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.azure.android.core.http.interceptor;\n+\n+import android.content.Context;\n+import android.content.res.Configuration;\n+\n+/**\n+ * Interface for an object that contains application, platform and locale information.\n+ */\n+public interface DeviceInformation {\n+    /**\n+     * Creates and returns a default {@link DeviceInformation} in the form of an {@link AndroidInformation} instance.\n+     *\n+     * @param configuration The application's context.\n+     * @param context       The system configuration.\n+     * @return An {@link AndroidInformation} instance.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf8ed6437d7bf5e6ef56154967be0edafbf89aea"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjExNTM3Ng==", "bodyText": "Removed this class and went back to using separate providers. Will add a way of getting a default provider while making the implementation package private in a separate PR.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/158#discussion_r372115376", "createdAt": "2020-01-28T23:25:42Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/DeviceInformation.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.azure.android.core.http.interceptor;\n+\n+import android.content.Context;\n+import android.content.res.Configuration;\n+\n+/**\n+ * Interface for an object that contains application, platform and locale information.\n+ */\n+public interface DeviceInformation {\n+    /**\n+     * Creates and returns a default {@link DeviceInformation} in the form of an {@link AndroidInformation} instance.\n+     *\n+     * @param configuration The application's context.\n+     * @param context       The system configuration.\n+     * @return An {@link AndroidInformation} instance.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2NTYwOA=="}, "originalCommit": {"oid": "bf8ed6437d7bf5e6ef56154967be0edafbf89aea"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjA0Mzg3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/annotation/JsonFlatten.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMzo0Mzo1M1rOFgu2kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo0Njo1MlrOFjVW5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2NjM4NA==", "bodyText": "We can remove this annotation type given we don't use flattening serializer and deserializer any more.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/158#discussion_r369866384", "createdAt": "2020-01-22T23:43:53Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/annotation/JsonFlatten.java", "diffHunk": "@@ -3,21 +3,17 @@\n \n package com.azure.android.core.annotation;\n \n-import static java.lang.annotation.RetentionPolicy.RUNTIME;\n-\n import java.lang.annotation.ElementType;\n import java.lang.annotation.Retention;\n import java.lang.annotation.Target;\n \n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n /**\n- * Annotation used for flattening properties separated by '.'.\n- *\n- * E.g. a property with JsonProperty value \"properties.value\"\n- * will have \"value\" property under the \"properties\" tree on\n- * the wire.\n- *\n+ * Annotation used for flattening properties separated by '.', e.g., a property with JsonProperty value\n+ * \"properties.value\" will have \"value\" property under the \"properties\" tree on the wire.\n  */\n @Retention(RUNTIME)\n @Target({ElementType.ANNOTATION_TYPE, ElementType.TYPE})\n public @interface JsonFlatten {\n-}\n\\ No newline at end of file\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf8ed6437d7bf5e6ef56154967be0edafbf89aea"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5NDQwNw==", "bodyText": "Will remove in a future PR, since this is already merged.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/158#discussion_r372594407", "createdAt": "2020-01-29T19:46:52Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/annotation/JsonFlatten.java", "diffHunk": "@@ -3,21 +3,17 @@\n \n package com.azure.android.core.annotation;\n \n-import static java.lang.annotation.RetentionPolicy.RUNTIME;\n-\n import java.lang.annotation.ElementType;\n import java.lang.annotation.Retention;\n import java.lang.annotation.Target;\n \n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n /**\n- * Annotation used for flattening properties separated by '.'.\n- *\n- * E.g. a property with JsonProperty value \"properties.value\"\n- * will have \"value\" property under the \"properties\" tree on\n- * the wire.\n- *\n+ * Annotation used for flattening properties separated by '.', e.g., a property with JsonProperty value\n+ * \"properties.value\" will have \"value\" property under the \"properties\" tree on the wire.\n  */\n @Retention(RUNTIME)\n @Target({ElementType.ANNOTATION_TYPE, ElementType.TYPE})\n public @interface JsonFlatten {\n-}\n\\ No newline at end of file\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2NjM4NA=="}, "originalCommit": {"oid": "bf8ed6437d7bf5e6ef56154967be0edafbf89aea"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjA1MjA3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/AndroidInformation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMzo0ODo1NVrOFgu7qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMzoyNjowNVrOFi4IPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2NzY5MQ==", "bodyText": "nit; this type is internal, its ok to have no doc for the overridden methods as we don't generate javadoc for internal types. We can just keep the class level and ctr level docs and remove rest.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/158#discussion_r369867691", "createdAt": "2020-01-22T23:48:55Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/AndroidInformation.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.azure.android.core.http.interceptor;\n+\n+import android.content.Context;\n+import android.content.pm.PackageManager;\n+import android.content.res.Configuration;\n+import android.os.Build;\n+\n+/**\n+ * Provider that contains device and application information extracted from {@link Configuration} and {@link Context}\n+ * objects, as well as the {@link Build} class.\n+ */\n+final class AndroidInformation implements DeviceInformation {\n+    private final Configuration configuration;\n+    private final Context context;\n+\n+    private int targetSdkVersion;\n+    private String applicationId;\n+    private String applicationVersion;\n+    private String language;\n+    private String systemRegion;\n+\n+    /**\n+     * Constructor that takes an application's {@link Context} and a system's {@link Configuration} object to extract\n+     * data from.\n+     *\n+     * @param configuration The application's context.\n+     * @param context       The system configuration.\n+     */\n+    AndroidInformation(Configuration configuration, Context context) {\n+        this.configuration = configuration;\n+        this.context = context;\n+        targetSdkVersion = -1;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public int getTargetSdkVersion() {\n+        if (targetSdkVersion == -1) {\n+            targetSdkVersion = context.getApplicationInfo().targetSdkVersion;\n+        }\n+\n+        return targetSdkVersion;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public String getApplicationId() {\n+        if (applicationId == null) {\n+            applicationId = context.getPackageName();\n+        }\n+\n+        return applicationId;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public String getApplicationVersion() {\n+        if (applicationVersion == null) {\n+            try {\n+                applicationVersion = context.getPackageManager().getPackageInfo(getApplicationId(), 0).versionName;\n+            } catch (PackageManager.NameNotFoundException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+\n+        return applicationVersion;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public String getDefaultSystemLanguage() {\n+        if (language == null) {\n+            // Using this instead of Configuration.getLocales() because it's not supported in anything less than\n+            // Android L24\n+            language = configuration.locale.getLanguage();\n+        }\n+\n+        return language;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public String getSystemRegion() {\n+        if (systemRegion == null) {\n+            // Using this instead of Configuration.getLocales() because it's not supported in anything less than\n+            // Android L24\n+            systemRegion = configuration.locale.getCountry();\n+        }\n+\n+        return systemRegion;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public String getManufacturer() {\n+        return Build.MANUFACTURER;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public String getModel() {\n+        return Build.MODEL;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public int getOsVersion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf8ed6437d7bf5e6ef56154967be0edafbf89aea"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjExNTUxNw==", "bodyText": "Good to know, thanks!", "url": "https://github.com/Azure/azure-sdk-for-android/pull/158#discussion_r372115517", "createdAt": "2020-01-28T23:26:05Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/AndroidInformation.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.azure.android.core.http.interceptor;\n+\n+import android.content.Context;\n+import android.content.pm.PackageManager;\n+import android.content.res.Configuration;\n+import android.os.Build;\n+\n+/**\n+ * Provider that contains device and application information extracted from {@link Configuration} and {@link Context}\n+ * objects, as well as the {@link Build} class.\n+ */\n+final class AndroidInformation implements DeviceInformation {\n+    private final Configuration configuration;\n+    private final Context context;\n+\n+    private int targetSdkVersion;\n+    private String applicationId;\n+    private String applicationVersion;\n+    private String language;\n+    private String systemRegion;\n+\n+    /**\n+     * Constructor that takes an application's {@link Context} and a system's {@link Configuration} object to extract\n+     * data from.\n+     *\n+     * @param configuration The application's context.\n+     * @param context       The system configuration.\n+     */\n+    AndroidInformation(Configuration configuration, Context context) {\n+        this.configuration = configuration;\n+        this.context = context;\n+        targetSdkVersion = -1;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public int getTargetSdkVersion() {\n+        if (targetSdkVersion == -1) {\n+            targetSdkVersion = context.getApplicationInfo().targetSdkVersion;\n+        }\n+\n+        return targetSdkVersion;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public String getApplicationId() {\n+        if (applicationId == null) {\n+            applicationId = context.getPackageName();\n+        }\n+\n+        return applicationId;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public String getApplicationVersion() {\n+        if (applicationVersion == null) {\n+            try {\n+                applicationVersion = context.getPackageManager().getPackageInfo(getApplicationId(), 0).versionName;\n+            } catch (PackageManager.NameNotFoundException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+\n+        return applicationVersion;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public String getDefaultSystemLanguage() {\n+        if (language == null) {\n+            // Using this instead of Configuration.getLocales() because it's not supported in anything less than\n+            // Android L24\n+            language = configuration.locale.getLanguage();\n+        }\n+\n+        return language;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public String getSystemRegion() {\n+        if (systemRegion == null) {\n+            // Using this instead of Configuration.getLocales() because it's not supported in anything less than\n+            // Android L24\n+            systemRegion = configuration.locale.getCountry();\n+        }\n+\n+        return systemRegion;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public String getManufacturer() {\n+        return Build.MANUFACTURER;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public String getModel() {\n+        return Build.MODEL;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public int getOsVersion() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2NzY5MQ=="}, "originalCommit": {"oid": "bf8ed6437d7bf5e6ef56154967be0edafbf89aea"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjA1ODkwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/internal/http/rest/RetrofitAPIClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMzo1MjoyNVrOFgu_ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTowNDowNFrOFjUDpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2ODczMA==", "bodyText": "we might want to revert to implementation based on team discussion.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/158#discussion_r369868730", "createdAt": "2020-01-22T23:52:25Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/internal/http/rest/RetrofitAPIClient.java", "diffHunk": "@@ -1,10 +1,10 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n \n-package com.azure.android.core.implementation.http.rest;\n+package com.azure.android.core.internal.http.rest;\n \n-import com.azure.android.core.implementation.util.serializer.SerializerAdapter;\n-import com.azure.android.core.implementation.util.serializer.SerializerEncoding;\n+import com.azure.android.core.internal.util.serializer.SerializerAdapter;\n+import com.azure.android.core.internal.util.serializer.SerializerEncoding;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf8ed6437d7bf5e6ef56154967be0edafbf89aea"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU3MzA5NA==", "bodyText": "Based on more recent discussions we'll stick with internal for now.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/158#discussion_r372573094", "createdAt": "2020-01-29T19:04:04Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/internal/http/rest/RetrofitAPIClient.java", "diffHunk": "@@ -1,10 +1,10 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n \n-package com.azure.android.core.implementation.http.rest;\n+package com.azure.android.core.internal.http.rest;\n \n-import com.azure.android.core.implementation.util.serializer.SerializerAdapter;\n-import com.azure.android.core.implementation.util.serializer.SerializerEncoding;\n+import com.azure.android.core.internal.util.serializer.SerializerAdapter;\n+import com.azure.android.core.internal.util.serializer.SerializerEncoding;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2ODczMA=="}, "originalCommit": {"oid": "bf8ed6437d7bf5e6ef56154967be0edafbf89aea"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjA2MDQ1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/Base64UrlSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMzo1MzowOVrOFgvAog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMzo1MzowOVrOFgvAog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2ODk2Mg==", "bodyText": "internal -> implementation. Please check other places as well.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/158#discussion_r369868962", "createdAt": "2020-01-22T23:53:09Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/Base64UrlSerializer.java", "diffHunk": "@@ -1,11 +1,12 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n \n-package com.azure.android.core.implementation.util.serializer;\n+package com.azure.android.core.internal.util.serializer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf8ed6437d7bf5e6ef56154967be0edafbf89aea"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjA4MTI2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/Base64Util.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMDowNTowMlrOFgvNhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOToxNTowOVrOFjUZRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3MjI2MQ==", "bodyText": "We shouldn't turn this to an interface given there is no use-case to implement it.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/158#discussion_r369872261", "createdAt": "2020-01-23T00:05:02Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/Base64Util.java", "diffHunk": "@@ -9,78 +9,76 @@\n /**\n  * Utility for Base64 encoding and decoding.\n  */\n-public final class Base64Util {\n+public interface Base64Util {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf8ed6437d7bf5e6ef56154967be0edafbf89aea"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU3ODYzMQ==", "bodyText": "This change was made to keep consistence with our CoreUtils implementation, which was decided to be an interface with only static methods as outlined in this comment.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/158#discussion_r372578631", "createdAt": "2020-01-29T19:15:09Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/Base64Util.java", "diffHunk": "@@ -9,78 +9,76 @@\n /**\n  * Utility for Base64 encoding and decoding.\n  */\n-public final class Base64Util {\n+public interface Base64Util {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3MjI2MQ=="}, "originalCommit": {"oid": "bf8ed6437d7bf5e6ef56154967be0edafbf89aea"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjA5Njc5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/AndroidClientLogger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMDoxNDoxNFrOFgvW4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMDoxNDoxNFrOFgvW4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3NDY1OA==", "bodyText": "nit; given this is internal type we can remove inherit-javadoc for all overriden methods", "url": "https://github.com/Azure/azure-sdk-for-android/pull/158#discussion_r369874658", "createdAt": "2020-01-23T00:14:14Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/AndroidClientLogger.java", "diffHunk": "@@ -61,48 +63,80 @@ public void setLogLevel(@LogLevel int logLevel) {\n         this.logLevel = logLevel;\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n     public void debug(String message) {\n         if (LOG_LEVEL_DEBUG >= this.logLevel) {\n             Log.d(tag, message);\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n     public void debug(String message, Throwable throwable) {\n         if (LOG_LEVEL_DEBUG >= this.logLevel) {\n             Log.d(tag, message, throwable);\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n     public void info(String message) {\n         if (LOG_LEVEL_INFO >= this.logLevel) {\n             Log.i(tag, message);\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n     public void info(String message, Throwable throwable) {\n         if (LOG_LEVEL_INFO >= this.logLevel) {\n             Log.i(tag, message, throwable);\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n     public void warning(String message) {\n         if (LOG_LEVEL_WARNING>= this.logLevel) {\n             Log.w(tag, message);\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf8ed6437d7bf5e6ef56154967be0edafbf89aea"}, "originalPosition": 108}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2456, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}