{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5NTU5NTQw", "number": 393, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzoyNTozOVrOErttVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMTo1Mjo1MlrOEwgUqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjczMTA4OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzoyNTozOVrOHeo2Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzoyNTozOVrOHeo2Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg4ODU5OQ==", "bodyText": "yes, this is needed for android :) a bit different from Java RestProxy.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/393#discussion_r501888599", "createdAt": "2020-10-08T17:25:39Z", "author": {"login": "anuchandy"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -1115,6 +1115,20 @@ private BlobSetTagsResponse setBlobTagsWithRestResponseIntern(String containerNa\n         BlobTags blobTags = new BlobTags();\n         blobTags.setBlobTagSet(blobTagSet);\n \n+        RequestBody tagsBody;\n+        try {\n+            tagsBody = RequestBody.create(MediaType.get(\"application/xml; charset=utf-8\"),\n+                serializerAdapter.serialize(blobTags, SerializerFormat.XML));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1edc8c4ce9a8cea99f7d4afdb36d0c4f3764c819"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0Mjc0NTQ3OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzoyOToyM1rOHeo_Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODoyNzoyNFrOHerOvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg5MDkxNA==", "bodyText": "Seems as per swagger, valid response code is 204", "url": "https://github.com/Azure/azure-sdk-for-android/pull/393#discussion_r501890914", "createdAt": "2020-10-08T17:29:23Z", "author": {"login": "anuchandy"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -1013,6 +1093,116 @@ public void onFailure(@NonNull Call<Void> call, @NonNull Throwable t) {\n         }\n     }\n \n+    private BlobSetTagsResponse setBlobTagsWithRestResponseIntern(String containerName,\n+                                                                  String blobName,\n+                                                                  Integer timeout,\n+                                                                  String versionId,\n+                                                                  String iftags,\n+                                                                  Map<String, String> tags,\n+                                                                  String version,\n+                                                                  String requestId,\n+                                                                  CancellationToken cancellationToken,\n+                                                                  CallbackWithHeader<Void, BlobSetTagsHeaders> callback) {\n+\n+        cancellationToken = cancellationToken == null ? CancellationToken.NONE : cancellationToken;\n+\n+        final String comp = \"tags\";\n+\n+        List<BlobTag> blobTagSet = new ArrayList<>(tags.size());\n+        for (Map.Entry<String, String> entry : tags.entrySet()) {\n+            blobTagSet.add(new BlobTag().setKey(entry.getKey()).setValue(entry.getValue()));\n+        }\n+        BlobTags blobTags = new BlobTags();\n+        blobTags.setBlobTagSet(blobTagSet);\n+\n+        RequestBody tagsBody;\n+        try {\n+            tagsBody = RequestBody.create(MediaType.get(\"application/xml; charset=utf-8\"),\n+                serializerAdapter.serialize(blobTags, SerializerFormat.XML));\n+        } catch (IOException ioe) {\n+            if (callback != null) {\n+                callback.onFailure(ioe, null);\n+\n+                return null;\n+            } else {\n+                throw new RuntimeException(ioe);\n+            }\n+        }\n+\n+        Call<ResponseBody> call = service.setBlobTags(containerName,\n+            blobName,\n+            timeout,\n+            versionId,\n+            null, // TODO: calculate Md5?\n+            null,\n+            iftags,\n+            XMS_VERSION,\n+            requestId,\n+            tagsBody,\n+            comp\n+        );\n+\n+        ((CancellationTokenImpl) cancellationToken).registerOnCancel(() -> {\n+            call.cancel();\n+        });\n+\n+        if (callback != null) {\n+            executeCall(call, new retrofit2.Callback<ResponseBody>() {\n+                @Override\n+                public void onResponse(@NonNull Call<ResponseBody> call, @NonNull Response<ResponseBody> response) {\n+                    if (response.isSuccessful()) {\n+                        if (response.code() == 200) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1edc8c4ce9a8cea99f7d4afdb36d0c4f3764c819"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkyNzYxMw==", "bodyText": "Nice catch :)", "url": "https://github.com/Azure/azure-sdk-for-android/pull/393#discussion_r501927613", "createdAt": "2020-10-08T18:27:24Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -1013,6 +1093,116 @@ public void onFailure(@NonNull Call<Void> call, @NonNull Throwable t) {\n         }\n     }\n \n+    private BlobSetTagsResponse setBlobTagsWithRestResponseIntern(String containerName,\n+                                                                  String blobName,\n+                                                                  Integer timeout,\n+                                                                  String versionId,\n+                                                                  String iftags,\n+                                                                  Map<String, String> tags,\n+                                                                  String version,\n+                                                                  String requestId,\n+                                                                  CancellationToken cancellationToken,\n+                                                                  CallbackWithHeader<Void, BlobSetTagsHeaders> callback) {\n+\n+        cancellationToken = cancellationToken == null ? CancellationToken.NONE : cancellationToken;\n+\n+        final String comp = \"tags\";\n+\n+        List<BlobTag> blobTagSet = new ArrayList<>(tags.size());\n+        for (Map.Entry<String, String> entry : tags.entrySet()) {\n+            blobTagSet.add(new BlobTag().setKey(entry.getKey()).setValue(entry.getValue()));\n+        }\n+        BlobTags blobTags = new BlobTags();\n+        blobTags.setBlobTagSet(blobTagSet);\n+\n+        RequestBody tagsBody;\n+        try {\n+            tagsBody = RequestBody.create(MediaType.get(\"application/xml; charset=utf-8\"),\n+                serializerAdapter.serialize(blobTags, SerializerFormat.XML));\n+        } catch (IOException ioe) {\n+            if (callback != null) {\n+                callback.onFailure(ioe, null);\n+\n+                return null;\n+            } else {\n+                throw new RuntimeException(ioe);\n+            }\n+        }\n+\n+        Call<ResponseBody> call = service.setBlobTags(containerName,\n+            blobName,\n+            timeout,\n+            versionId,\n+            null, // TODO: calculate Md5?\n+            null,\n+            iftags,\n+            XMS_VERSION,\n+            requestId,\n+            tagsBody,\n+            comp\n+        );\n+\n+        ((CancellationTokenImpl) cancellationToken).registerOnCancel(() -> {\n+            call.cancel();\n+        });\n+\n+        if (callback != null) {\n+            executeCall(call, new retrofit2.Callback<ResponseBody>() {\n+                @Override\n+                public void onResponse(@NonNull Call<ResponseBody> call, @NonNull Response<ResponseBody> response) {\n+                    if (response.isSuccessful()) {\n+                        if (response.code() == 200) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg5MDkxNA=="}, "originalCommit": {"oid": "1edc8c4ce9a8cea99f7d4afdb36d0c4f3764c819"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Mjc5NzY4OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobAsyncClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMToxNDozM1rOHmFzbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDoxMjozMVrOHmyGCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwMzAyMw==", "bodyText": "I don't know why the PR includes all a ton of other things, I guess I should just ignore them? I assume this PR only introduces the setBlobTags operations, correct?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/393#discussion_r509703023", "createdAt": "2020-10-21T21:14:33Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobAsyncClient.java", "diffHunk": "@@ -236,6 +249,140 @@ public void cancel(Context context, long transferId) {\n             .cancel(transferId);\n     }\n \n+    /**\n+     * Creates a new container within a storage account. If a container with the same name already exists, the operation\n+     * fails.\n+     *\n+     * @param containerName The container name.\n+     * @param callback      Callback that receives the response.\n+     */\n+    public void createContainer(String containerName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18794bc4744a1a9fb60671e89560792bd15d9e38"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyMTYyNQ==", "bodyText": "correct", "url": "https://github.com/Azure/azure-sdk-for-android/pull/393#discussion_r510421625", "createdAt": "2020-10-22T19:59:26Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobAsyncClient.java", "diffHunk": "@@ -236,6 +249,140 @@ public void cancel(Context context, long transferId) {\n             .cancel(transferId);\n     }\n \n+    /**\n+     * Creates a new container within a storage account. If a container with the same name already exists, the operation\n+     * fails.\n+     *\n+     * @param containerName The container name.\n+     * @param callback      Callback that receives the response.\n+     */\n+    public void createContainer(String containerName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwMzAyMw=="}, "originalCommit": {"oid": "18794bc4744a1a9fb60671e89560792bd15d9e38"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyODY4MQ==", "bodyText": "correct", "url": "https://github.com/Azure/azure-sdk-for-android/pull/393#discussion_r510428681", "createdAt": "2020-10-22T20:12:31Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobAsyncClient.java", "diffHunk": "@@ -236,6 +249,140 @@ public void cancel(Context context, long transferId) {\n             .cancel(transferId);\n     }\n \n+    /**\n+     * Creates a new container within a storage account. If a container with the same name already exists, the operation\n+     * fails.\n+     *\n+     * @param containerName The container name.\n+     * @param callback      Callback that receives the response.\n+     */\n+    public void createContainer(String containerName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwMzAyMw=="}, "originalCommit": {"oid": "18794bc4744a1a9fb60671e89560792bd15d9e38"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Mjk0ODAxOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMTo0ODoxNFrOHmHY2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDoxMjoxNFrOHmyFcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcyODk4NQ==", "bodyText": "Is this the newest Storage version? Where do we check this? Actually, I see different versions than what we had here.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/393#discussion_r509728985", "createdAt": "2020-10-21T21:48:14Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -59,20 +77,224 @@\n import retrofit2.http.PUT;\n import retrofit2.http.Path;\n import retrofit2.http.Query;\n+import retrofit2.http.Tag;\n \n /**\n  * PACKAGE PRIVATE CLASS AND METHODS\n  */\n final class StorageBlobServiceImpl {\n     private final StorageBlobService service;\n     private final SerializerAdapter serializerAdapter;\n-    private static String XMS_VERSION = \"2019-02-02\";\n+    private static String XMS_VERSION = \"2019-12-12\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18794bc4744a1a9fb60671e89560792bd15d9e38"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyODUzMA==", "bodyText": "The link you shared is for the resource manager/management plane. The version update here is for the data plane. It's not quite the latest, but it's the version that enabled tags.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/393#discussion_r510428530", "createdAt": "2020-10-22T20:12:14Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -59,20 +77,224 @@\n import retrofit2.http.PUT;\n import retrofit2.http.Path;\n import retrofit2.http.Query;\n+import retrofit2.http.Tag;\n \n /**\n  * PACKAGE PRIVATE CLASS AND METHODS\n  */\n final class StorageBlobServiceImpl {\n     private final StorageBlobService service;\n     private final SerializerAdapter serializerAdapter;\n-    private static String XMS_VERSION = \"2019-02-02\";\n+    private static String XMS_VERSION = \"2019-12-12\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcyODk4NQ=="}, "originalCommit": {"oid": "18794bc4744a1a9fb60671e89560792bd15d9e38"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Mjk2NjgzOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMTo1Mjo1MlrOHmHlHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDoxNDoyN1rOHmyKdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTczMjEyNw==", "bodyText": "We probably need to consider this in the MD5 PR.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/393#discussion_r509732127", "createdAt": "2020-10-21T21:52:52Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -1013,6 +1660,119 @@ public void onFailure(@NonNull Call<Void> call, @NonNull Throwable t) {\n         }\n     }\n \n+    private BlobSetTagsResponse setBlobTagsWithRestResponseIntern(String containerName,\n+                                                                  String blobName,\n+                                                                  Integer timeout,\n+                                                                  String versionId,\n+                                                                  String iftags,\n+                                                                  Map<String, String> tags,\n+                                                                  String version,\n+                                                                  String requestId,\n+                                                                  CancellationToken cancellationToken,\n+                                                                  CallbackWithHeader<Void, BlobSetTagsHeaders> callback) {\n+\n+        cancellationToken = cancellationToken == null ? CancellationToken.NONE : cancellationToken;\n+\n+        final String comp = \"tags\";\n+\n+        List<BlobTag> blobTagSet = null;\n+        if (tags != null) {\n+            blobTagSet = new ArrayList<>(tags.size());\n+            for (Map.Entry<String, String> entry : tags.entrySet()) {\n+                blobTagSet.add(new BlobTag().setKey(entry.getKey()).setValue(entry.getValue()));\n+            }\n+        }\n+        BlobTags blobTags = new BlobTags();\n+        blobTags.setBlobTagSet(blobTagSet);\n+\n+        RequestBody tagsBody;\n+        try {\n+            tagsBody = RequestBody.create(MediaType.get(\"application/xml; charset=utf-8\"),\n+                serializerAdapter.serialize(blobTags, SerializerFormat.XML));\n+        } catch (IOException ioe) {\n+            if (callback != null) {\n+                callback.onFailure(ioe, null);\n+\n+                return null;\n+            } else {\n+                throw new RuntimeException(ioe);\n+            }\n+        }\n+\n+        Call<ResponseBody> call = service.setBlobTags(containerName,\n+            blobName,\n+            timeout,\n+            versionId,\n+            null, // TODO: calculate Md5?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18794bc4744a1a9fb60671e89560792bd15d9e38"}, "originalPosition": 969}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyOTgxMg==", "bodyText": "On second thought, this isn't actually possible for us at this point because it's the md5 of the payload, but we can't calculate that until after the body is serialized, at which point it's out of our control. We could consider adding an interceptor that does that, but it would be a separate PR I think.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/393#discussion_r510429812", "createdAt": "2020-10-22T20:14:27Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -1013,6 +1660,119 @@ public void onFailure(@NonNull Call<Void> call, @NonNull Throwable t) {\n         }\n     }\n \n+    private BlobSetTagsResponse setBlobTagsWithRestResponseIntern(String containerName,\n+                                                                  String blobName,\n+                                                                  Integer timeout,\n+                                                                  String versionId,\n+                                                                  String iftags,\n+                                                                  Map<String, String> tags,\n+                                                                  String version,\n+                                                                  String requestId,\n+                                                                  CancellationToken cancellationToken,\n+                                                                  CallbackWithHeader<Void, BlobSetTagsHeaders> callback) {\n+\n+        cancellationToken = cancellationToken == null ? CancellationToken.NONE : cancellationToken;\n+\n+        final String comp = \"tags\";\n+\n+        List<BlobTag> blobTagSet = null;\n+        if (tags != null) {\n+            blobTagSet = new ArrayList<>(tags.size());\n+            for (Map.Entry<String, String> entry : tags.entrySet()) {\n+                blobTagSet.add(new BlobTag().setKey(entry.getKey()).setValue(entry.getValue()));\n+            }\n+        }\n+        BlobTags blobTags = new BlobTags();\n+        blobTags.setBlobTagSet(blobTagSet);\n+\n+        RequestBody tagsBody;\n+        try {\n+            tagsBody = RequestBody.create(MediaType.get(\"application/xml; charset=utf-8\"),\n+                serializerAdapter.serialize(blobTags, SerializerFormat.XML));\n+        } catch (IOException ioe) {\n+            if (callback != null) {\n+                callback.onFailure(ioe, null);\n+\n+                return null;\n+            } else {\n+                throw new RuntimeException(ioe);\n+            }\n+        }\n+\n+        Call<ResponseBody> call = service.setBlobTags(containerName,\n+            blobName,\n+            timeout,\n+            versionId,\n+            null, // TODO: calculate Md5?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTczMjEyNw=="}, "originalCommit": {"oid": "18794bc4744a1a9fb60671e89560792bd15d9e38"}, "originalPosition": 969}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2300, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}