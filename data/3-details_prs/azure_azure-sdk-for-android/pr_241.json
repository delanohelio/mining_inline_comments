{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNDYyOTMw", "number": 241, "title": "Transfer apis in storage client", "bodyText": "This PR updates the StorageBlobClient to expose transfer APIs (upload, download, pause, resume, cancel).\nThe StorageClient.Builder now allows setting the transfer constraints. Below shows how to create StorageBlobClient.\nStorageBlobClient client1 = new StorageBlobClient\n    .Builder(\"com.azure.android.storage.sample\")\n        .setBlobServiceUrl(storageConfiguration.getBlobServiceUrl())\n        .setRequiredNetworkType(NetworkType.CONNECTED)\n        .build();\nNote that the builder constructor now takes the \"storage client id\" that uniquely identifies the StorageBlobClient this builder creates. As part of executing build() it adds the created StorageBlobClient to the global map.\nWe continue to support creating a new StorageBlobClient from an existing client:\nStorageBlobClient client2 = client1\n    .newBuilder(\"com.azure.android.storage.sample.upload\")\n        .setCredentialInterceptor(authInterceptor)\n        .setRequiresBatteryNotLow(true)\n        .build();\nTransferClient has been updated to have a singleton instance. It is retrieve as:\nTransferClient transferClient = TransferClient.getInstance(context);    \nThis is similar to the way we get WorkManager:\nWorkManager workManager = WorkManager.getInstance(context);\nA TransferClient instance will not hold a reference to the context. Some read on the subject tells its a bad idea to keep context, so, like WorkManager, TransferClient uses the context for initialization and release it.\nSome notes on the PR:\n\n\nWe want to hide TransferClient for preview1, which means TransferClient and StorageBlobClient may have to exist in the same package. This PR won't move files around for this; just want this PR to highlight the concept, logic, API changes for easy review.\n\n\nThere are two new types UploadRequest|DownloadRequest; it is easy to merge these two but didn't do it - just following the existing design of separate internal types for upload|download. Also, these types are anyway going to be internal once #1 is addressed.", "createdAt": "2020-06-09T00:19:27Z", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241", "merged": true, "mergeCommit": {"oid": "ee6b440720171bea25d4a1255aa9c64278583566"}, "closed": true, "closedAt": "2020-06-22T21:56:02Z", "author": {"login": "anuchandy"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpZqTygH2gAyNDMxNDYyOTMwOjNhZWM5MWJkZGEwNzhlNzFjMjk0MzY0ZTJkMzE4MjQxM2U0ODU1ZWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsUwL6gFqTQzMjg5MjI5Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3aec91bdda078e71c294364e2d3182413e4855ef", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/3aec91bdda078e71c294364e2d3182413e4855ef", "committedDate": "2020-06-09T00:10:49Z", "message": "Enable transfer APIs in StorageBlobClient, Enable TransferClient singleton instance."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a66b4d6c2d0ab1e3f3002797d33f9eaa96ac734", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/1a66b4d6c2d0ab1e3f3002797d33f9eaa96ac734", "committedDate": "2020-06-09T00:11:45Z", "message": "updating TransferDatabase schema to latest."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f5768f660acc979aa0a6ddbcb88de151868d990", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/1f5768f660acc979aa0a6ddbcb88de151868d990", "committedDate": "2020-06-09T00:12:32Z", "message": "Updating sample to use the transfer APIs from StorageBlobClient."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37a383da9e19a7547c71252a4d42f0ea33e1ef5c", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/37a383da9e19a7547c71252a4d42f0ea33e1ef5c", "committedDate": "2020-06-09T01:49:43Z", "message": "continue to expose StorageClient.Builder that takes ServiceClientBuilder."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/138ae5b6d0078aafc1cff86d620e87b720020ff2", "committedDate": "2020-06-09T01:51:21Z", "message": "Updating test to use the updated StorageBlobClient.Builder that takes id."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5Mjc5NzI3", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#pullrequestreview-429279727", "createdAt": "2020-06-11T20:51:05Z", "commit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 53, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMDo1MTowNVrOGiuVGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMDo1NzoxNVrOGjRcGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA2MzgzMw==", "bodyText": "I'm not familiar with using synchronized with an instance of Object vs. what we had before. Would you mind explaining? :)", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439063833", "createdAt": "2020-06-11T20:51:05Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/TransferDatabase.java", "diffHunk": "@@ -52,11 +55,13 @@\n      * @return a shared {@link TransferDatabase} instance\n      */\n     @Ignore\n-    synchronized static TransferDatabase get(Context context) {\n-        if (db == null) {\n-            db = Room.databaseBuilder(context,\n-                TransferDatabase.class, \"transfersDB\").build();\n+    static TransferDatabase getInstance(Context context) {\n+        synchronized (INIT_LOCK) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEwNzMzMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param storageBlobClientId the unique id for the new {@link StorageBlobClient}.\n          \n          \n            \n                 *     This identifier is used to associate the {@link StorageBlobClient} with the upload, download transfers\n          \n          \n            \n                 *     it initiates. When a transfer is reloaded from disk (e.g. after an application crash), it can only be\n          \n          \n            \n                 *     resumed once a client with the same storageBlobClientId has been initialized.\n          \n          \n            \n                 * @param storageBlobClientId The unique ID for the new {@link StorageBlobClient}. This identifier is used to\n          \n          \n            \n                 *                            associate the {@link StorageBlobClient} with the upload and download transfers it\n          \n          \n            \n                 *                            initiates. When a transfer is reloaded from disk (e.g. after an application crash),\n          \n          \n            \n                 *                            it can only be resumed once a client with the same storageBlobClientId has been\n          \n          \n            \n                 *                            initialized.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439107333", "createdAt": "2020-06-11T22:33:36Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -35,21 +52,29 @@\n  * Client for Storage Blob service.\n  */\n public class StorageBlobClient {\n+    private final String id;\n     private final ServiceClient serviceClient;\n     private final StorageBlobServiceImpl storageBlobServiceClient;\n+    private final Constraints transferConstraints;\n \n-    private StorageBlobClient(ServiceClient serviceClient) {\n+    private StorageBlobClient(String id, ServiceClient serviceClient, Constraints transferConstraints) {\n+        this.id = id;\n         this.serviceClient = serviceClient;\n         this.storageBlobServiceClient = new StorageBlobServiceImpl(this.serviceClient);\n+        this.transferConstraints = transferConstraints;\n     }\n \n     /**\n      * Creates a new {@link Builder} with initial configuration copied from this {@link StorageBlobClient}.\n      *\n+     * @param storageBlobClientId the unique id for the new {@link StorageBlobClient}.\n+     *     This identifier is used to associate the {@link StorageBlobClient} with the upload, download transfers\n+     *     it initiates. When a transfer is reloaded from disk (e.g. after an application crash), it can only be\n+     *     resumed once a client with the same storageBlobClientId has been initialized.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEwNzQ2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public StorageBlobClient.Builder newBuilder(String  storageBlobClientId) {\n          \n          \n            \n                public StorageBlobClient.Builder newBuilder(String storageBlobClientId) {", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439107469", "createdAt": "2020-06-11T22:34:01Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -35,21 +52,29 @@\n  * Client for Storage Blob service.\n  */\n public class StorageBlobClient {\n+    private final String id;\n     private final ServiceClient serviceClient;\n     private final StorageBlobServiceImpl storageBlobServiceClient;\n+    private final Constraints transferConstraints;\n \n-    private StorageBlobClient(ServiceClient serviceClient) {\n+    private StorageBlobClient(String id, ServiceClient serviceClient, Constraints transferConstraints) {\n+        this.id = id;\n         this.serviceClient = serviceClient;\n         this.storageBlobServiceClient = new StorageBlobServiceImpl(this.serviceClient);\n+        this.transferConstraints = transferConstraints;\n     }\n \n     /**\n      * Creates a new {@link Builder} with initial configuration copied from this {@link StorageBlobClient}.\n      *\n+     * @param storageBlobClientId the unique id for the new {@link StorageBlobClient}.\n+     *     This identifier is used to associate the {@link StorageBlobClient} with the upload, download transfers\n+     *     it initiates. When a transfer is reloaded from disk (e.g. after an application crash), it can only be\n+     *     resumed once a client with the same storageBlobClientId has been initialized.\n      * @return A new {@link Builder}.\n      */\n-    public StorageBlobClient.Builder newBuilder() {\n-        return new Builder(this);\n+    public StorageBlobClient.Builder newBuilder(String  storageBlobClientId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEwODczNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A type specifying parameters for upload transfer that should be enqueued in {@link TransferClient}.\n          \n          \n            \n             * A type specifying parameters for an upload transfer that should be enqueued in {@link TransferClient}.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439108734", "createdAt": "2020-06-11T22:37:49Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/UploadRequest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+\n+import androidx.work.Constraints;\n+\n+import com.azure.android.core.util.CoreUtil;\n+\n+import java.io.File;\n+import java.util.Objects;\n+\n+/**\n+ * A type specifying parameters for upload transfer that should be enqueued in {@link TransferClient}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEwOTk4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the unique identifier of the blob storage client\n          \n          \n            \n                 * @return The unique identifier of the {@link com.azure.android.storage.blob.StorageBlobClient}.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439109988", "createdAt": "2020-06-11T22:41:28Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/UploadRequest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+\n+import androidx.work.Constraints;\n+\n+import com.azure.android.core.util.CoreUtil;\n+\n+import java.io.File;\n+import java.util.Objects;\n+\n+/**\n+ * A type specifying parameters for upload transfer that should be enqueued in {@link TransferClient}.\n+ */\n+public final class UploadRequest {\n+    private final String storageClientId;\n+    private final String containerName;\n+    private final String blobName;\n+    private final ReadableContent readableContent;\n+    private final Constraints constraints;\n+\n+    /**\n+     * Create UploadRequest.\n+     *\n+     * @param storageClientId identifies the the blob storage client for the upload\n+     * @param containerName the name of the container to upload the content to\n+     * @param blobName  the name of the target blob holding uploaded content\n+     * @param readableContent the object describing the content in the device that needs to be uploaded\n+     * @param constraints the constraints to be satisfied to execute the upload\n+     */\n+    private UploadRequest(String storageClientId,\n+                  String containerName,\n+                  String blobName,\n+                  ReadableContent readableContent,\n+                  Constraints constraints) {\n+        this.storageClientId = storageClientId;\n+        this.containerName = containerName;\n+        this.blobName = blobName;\n+        this.readableContent = readableContent;\n+        this.constraints = constraints;\n+    }\n+\n+    /**\n+     * Get the unique identifier of the blob storage client to be used for the upload.\n+     *\n+     * @return the unique identifier of the blob storage client", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyNTQ3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param storageBlobClientId the unique id of the {@link StorageBlobClient}\n          \n          \n            \n                 * @param storageBlobClient the blob storage client\n          \n          \n            \n                 * @throws IllegalArgumentException if a {@link StorageBlobClient} with the same id already exists in the map\n          \n          \n            \n                 * @param storageBlobClientId The unique ID of the {@link StorageBlobClient}.\n          \n          \n            \n                 * @param storageBlobClient The blob storage client.\n          \n          \n            \n                 * @throws IllegalArgumentException If a {@link StorageBlobClient} with the same ID already exists in the map.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439625476", "createdAt": "2020-06-12T20:22:00Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/StorageBlobClientMap.java", "diffHunk": "@@ -11,34 +13,75 @@\n import java.util.concurrent.ConcurrentHashMap;\n \n /**\n- * Package private.\n- *\n  * A map containing the {@link StorageBlobClient} to be used for low-level storage\n  * service calls.\n  */\n-final class StorageBlobClientMap {\n+public final class StorageBlobClientMap {\n     /**\n      * Map with key as user defined unique identifier and value as associated\n      * blob storage client.\n      */\n     private Map<String, StorageBlobClient> map = new ConcurrentHashMap<>();\n+    // The singleton instance of StorageBlobClientMap.\n+    private static StorageBlobClientMap INSTANCE = null;\n+    // An object to synchronize the creation of the singleton StorageBlobClientMap.\n+    private static final Object INIT_LOCK = new Object();\n+    // An object to synchronize the operation of adding an entry to the map.\n+    private static final Object ADD_LOCK = new Object();\n+    /**\n+     * Retrieves the singleton instance of {@link StorageBlobClientMap}.\n+     *\n+     * @return The singleton instance of {@link StorageBlobClientMap}.\n+     */\n+    public static @NonNull StorageBlobClientMap getInstance() {\n+        synchronized (INIT_LOCK) {\n+            if (INSTANCE == null) {\n+                INSTANCE = new StorageBlobClientMap();\n+            }\n+            return INSTANCE;\n+        }\n+    }\n+\n+    private StorageBlobClientMap() {\n+    }\n \n     /**\n-     * Copies all entries from the given map to this map.\n+     * Add a {@link StorageBlobClient} to this map.\n      *\n-     * @param storageBlobClientMap the blob storage client mapping to be stored in this map\n+     * @param storageBlobClientId the unique id of the {@link StorageBlobClient}\n+     * @param storageBlobClient the blob storage client\n+     * @throws IllegalArgumentException if a {@link StorageBlobClient} with the same id already exists in the map", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyNjg0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param constraints the constraints to be satisfied to run the download operation.\n          \n          \n            \n                 * @param constraints The constraints to be satisfied to run the download operation.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439626843", "createdAt": "2020-06-12T20:25:25Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/BlobDownloadEntity.java", "diffHunk": "@@ -105,17 +113,20 @@ public BlobDownloadEntity() {}\n      * @param blobName The blob name.\n      * @param blobSize The blob size.\n      * @param content Describes the content where the downloaded blob will be stored.\n+     * @param constraints the constraints to be satisfied to run the download operation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyNjkzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param constraints the constraints to be satisfied to run the upload operation\n          \n          \n            \n                 * @param constraints The constraints to be satisfied to run the upload operation.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439626932", "createdAt": "2020-06-12T20:25:39Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/BlobUploadEntity.java", "diffHunk": "@@ -96,16 +105,19 @@ public BlobUploadEntity() {}\n      * @param containerName the container name\n      * @param blobName the blob name\n      * @param content describes the content to be read while uploading\n+     * @param constraints the constraints to be satisfied to run the upload operation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyNzI3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param storageClientId identifies the the blob storage client for the download\n          \n          \n            \n                 * @param containerName the name of the container holding the blob to download\n          \n          \n            \n                 * @param blobName  the name of the blob to download\n          \n          \n            \n                 * @param writableContent the object describing the content in the device to store the downloaded blob\n          \n          \n            \n                 * @param constraints the constraints to be satisfied to execute the download\n          \n          \n            \n                 * @param storageClientId Identifies the {@link com.azure.android.storage.blob.StorageBlobClient} for the download.\n          \n          \n            \n                 * @param containerName   The name of the container holding the blob to download.\n          \n          \n            \n                 * @param blobName        The name of the blob to download.\n          \n          \n            \n                 * @param writableContent The object describing the content in the device to store the downloaded blob.\n          \n          \n            \n                 * @param constraints     The constraints to be satisfied to execute the download.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439627270", "createdAt": "2020-06-12T20:26:27Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/DownloadRequest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+\n+import androidx.work.Constraints;\n+\n+import com.azure.android.core.util.CoreUtil;\n+\n+import java.io.File;\n+import java.util.Objects;\n+\n+/**\n+ * A type specifying parameters for a download transfer that should be enqueued in {@link TransferClient}.\n+ */\n+public final class DownloadRequest {\n+    private final String storageClientId;\n+    private final String containerName;\n+    private final String blobName;\n+    private final WritableContent writableContent;\n+    private final Constraints constraints;\n+\n+    /**\n+     * Create DownloadRequest.\n+     *\n+     * @param storageClientId identifies the the blob storage client for the download\n+     * @param containerName the name of the container holding the blob to download\n+     * @param blobName  the name of the blob to download\n+     * @param writableContent the object describing the content in the device to store the downloaded blob\n+     * @param constraints the constraints to be satisfied to execute the download", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyNzQ2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private DownloadRequest(String storageClientId,\n          \n          \n            \n                                String containerName,\n          \n          \n            \n                                String blobName,\n          \n          \n            \n                                WritableContent writableContent,\n          \n          \n            \n                                Constraints constraints) {\n          \n          \n            \n                private DownloadRequest(String storageClientId,\n          \n          \n            \n                                        String containerName,\n          \n          \n            \n                                        String blobName,\n          \n          \n            \n                                        WritableContent writableContent,\n          \n          \n            \n                                        Constraints constraints) {", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439627462", "createdAt": "2020-06-12T20:26:59Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/DownloadRequest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+\n+import androidx.work.Constraints;\n+\n+import com.azure.android.core.util.CoreUtil;\n+\n+import java.io.File;\n+import java.util.Objects;\n+\n+/**\n+ * A type specifying parameters for a download transfer that should be enqueued in {@link TransferClient}.\n+ */\n+public final class DownloadRequest {\n+    private final String storageClientId;\n+    private final String containerName;\n+    private final String blobName;\n+    private final WritableContent writableContent;\n+    private final Constraints constraints;\n+\n+    /**\n+     * Create DownloadRequest.\n+     *\n+     * @param storageClientId identifies the the blob storage client for the download\n+     * @param containerName the name of the container holding the blob to download\n+     * @param blobName  the name of the blob to download\n+     * @param writableContent the object describing the content in the device to store the downloaded blob\n+     * @param constraints the constraints to be satisfied to execute the download\n+     */\n+    private DownloadRequest(String storageClientId,\n+                    String containerName,\n+                    String blobName,\n+                    WritableContent writableContent,\n+                    Constraints constraints) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyNzU5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the unique identifier of the blob storage client\n          \n          \n            \n                 * @return The unique identifier of the {@link com.azure.android.storage.blob.StorageBlobClient}.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439627593", "createdAt": "2020-06-12T20:27:17Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/DownloadRequest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+\n+import androidx.work.Constraints;\n+\n+import com.azure.android.core.util.CoreUtil;\n+\n+import java.io.File;\n+import java.util.Objects;\n+\n+/**\n+ * A type specifying parameters for a download transfer that should be enqueued in {@link TransferClient}.\n+ */\n+public final class DownloadRequest {\n+    private final String storageClientId;\n+    private final String containerName;\n+    private final String blobName;\n+    private final WritableContent writableContent;\n+    private final Constraints constraints;\n+\n+    /**\n+     * Create DownloadRequest.\n+     *\n+     * @param storageClientId identifies the the blob storage client for the download\n+     * @param containerName the name of the container holding the blob to download\n+     * @param blobName  the name of the blob to download\n+     * @param writableContent the object describing the content in the device to store the downloaded blob\n+     * @param constraints the constraints to be satisfied to execute the download\n+     */\n+    private DownloadRequest(String storageClientId,\n+                    String containerName,\n+                    String blobName,\n+                    WritableContent writableContent,\n+                    Constraints constraints) {\n+        this.storageClientId = storageClientId;\n+        this.containerName = containerName;\n+        this.blobName = blobName;\n+        this.writableContent = writableContent;\n+        this.constraints = constraints;\n+    }\n+\n+    /**\n+     * Get the unique identifier of the blob storage client to be used for the download.\n+     *\n+     * @return the unique identifier of the blob storage client", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyNzY4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the container name\n          \n          \n            \n                 * @return The container name.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439627689", "createdAt": "2020-06-12T20:27:30Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/DownloadRequest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+\n+import androidx.work.Constraints;\n+\n+import com.azure.android.core.util.CoreUtil;\n+\n+import java.io.File;\n+import java.util.Objects;\n+\n+/**\n+ * A type specifying parameters for a download transfer that should be enqueued in {@link TransferClient}.\n+ */\n+public final class DownloadRequest {\n+    private final String storageClientId;\n+    private final String containerName;\n+    private final String blobName;\n+    private final WritableContent writableContent;\n+    private final Constraints constraints;\n+\n+    /**\n+     * Create DownloadRequest.\n+     *\n+     * @param storageClientId identifies the the blob storage client for the download\n+     * @param containerName the name of the container holding the blob to download\n+     * @param blobName  the name of the blob to download\n+     * @param writableContent the object describing the content in the device to store the downloaded blob\n+     * @param constraints the constraints to be satisfied to execute the download\n+     */\n+    private DownloadRequest(String storageClientId,\n+                    String containerName,\n+                    String blobName,\n+                    WritableContent writableContent,\n+                    Constraints constraints) {\n+        this.storageClientId = storageClientId;\n+        this.containerName = containerName;\n+        this.blobName = blobName;\n+        this.writableContent = writableContent;\n+        this.constraints = constraints;\n+    }\n+\n+    /**\n+     * Get the unique identifier of the blob storage client to be used for the download.\n+     *\n+     * @return the unique identifier of the blob storage client\n+     */\n+    String getStorageClientId() {\n+        return this.storageClientId;\n+    }\n+\n+    /**\n+     * Get the name of the container holding the blob to download.\n+     *\n+     * @return the container name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyNzc1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the blob name\n          \n          \n            \n                 * @return The blob name.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439627750", "createdAt": "2020-06-12T20:27:41Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/DownloadRequest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+\n+import androidx.work.Constraints;\n+\n+import com.azure.android.core.util.CoreUtil;\n+\n+import java.io.File;\n+import java.util.Objects;\n+\n+/**\n+ * A type specifying parameters for a download transfer that should be enqueued in {@link TransferClient}.\n+ */\n+public final class DownloadRequest {\n+    private final String storageClientId;\n+    private final String containerName;\n+    private final String blobName;\n+    private final WritableContent writableContent;\n+    private final Constraints constraints;\n+\n+    /**\n+     * Create DownloadRequest.\n+     *\n+     * @param storageClientId identifies the the blob storage client for the download\n+     * @param containerName the name of the container holding the blob to download\n+     * @param blobName  the name of the blob to download\n+     * @param writableContent the object describing the content in the device to store the downloaded blob\n+     * @param constraints the constraints to be satisfied to execute the download\n+     */\n+    private DownloadRequest(String storageClientId,\n+                    String containerName,\n+                    String blobName,\n+                    WritableContent writableContent,\n+                    Constraints constraints) {\n+        this.storageClientId = storageClientId;\n+        this.containerName = containerName;\n+        this.blobName = blobName;\n+        this.writableContent = writableContent;\n+        this.constraints = constraints;\n+    }\n+\n+    /**\n+     * Get the unique identifier of the blob storage client to be used for the download.\n+     *\n+     * @return the unique identifier of the blob storage client\n+     */\n+    String getStorageClientId() {\n+        return this.storageClientId;\n+    }\n+\n+    /**\n+     * Get the name of the container holding the blob to download.\n+     *\n+     * @return the container name\n+     */\n+    String getContainerName() {\n+        return this.containerName;\n+    }\n+\n+    /**\n+     * Get the name of the blob to download.\n+     *\n+     * @return the blob name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyNzgxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the content description\n          \n          \n            \n                 * @return The content description.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439627813", "createdAt": "2020-06-12T20:27:51Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/DownloadRequest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+\n+import androidx.work.Constraints;\n+\n+import com.azure.android.core.util.CoreUtil;\n+\n+import java.io.File;\n+import java.util.Objects;\n+\n+/**\n+ * A type specifying parameters for a download transfer that should be enqueued in {@link TransferClient}.\n+ */\n+public final class DownloadRequest {\n+    private final String storageClientId;\n+    private final String containerName;\n+    private final String blobName;\n+    private final WritableContent writableContent;\n+    private final Constraints constraints;\n+\n+    /**\n+     * Create DownloadRequest.\n+     *\n+     * @param storageClientId identifies the the blob storage client for the download\n+     * @param containerName the name of the container holding the blob to download\n+     * @param blobName  the name of the blob to download\n+     * @param writableContent the object describing the content in the device to store the downloaded blob\n+     * @param constraints the constraints to be satisfied to execute the download\n+     */\n+    private DownloadRequest(String storageClientId,\n+                    String containerName,\n+                    String blobName,\n+                    WritableContent writableContent,\n+                    Constraints constraints) {\n+        this.storageClientId = storageClientId;\n+        this.containerName = containerName;\n+        this.blobName = blobName;\n+        this.writableContent = writableContent;\n+        this.constraints = constraints;\n+    }\n+\n+    /**\n+     * Get the unique identifier of the blob storage client to be used for the download.\n+     *\n+     * @return the unique identifier of the blob storage client\n+     */\n+    String getStorageClientId() {\n+        return this.storageClientId;\n+    }\n+\n+    /**\n+     * Get the name of the container holding the blob to download.\n+     *\n+     * @return the container name\n+     */\n+    String getContainerName() {\n+        return this.containerName;\n+    }\n+\n+    /**\n+     * Get the name of the blob to download.\n+     *\n+     * @return the blob name\n+     */\n+    String getBlobName() {\n+        return this.blobName;\n+    }\n+\n+    /**\n+     * Get the object describing the content in the device to store the downloaded blob.\n+     *\n+     * @return the content description", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyNzg4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the constraints\n          \n          \n            \n                 * @return The constraints.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439627888", "createdAt": "2020-06-12T20:28:01Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/DownloadRequest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+\n+import androidx.work.Constraints;\n+\n+import com.azure.android.core.util.CoreUtil;\n+\n+import java.io.File;\n+import java.util.Objects;\n+\n+/**\n+ * A type specifying parameters for a download transfer that should be enqueued in {@link TransferClient}.\n+ */\n+public final class DownloadRequest {\n+    private final String storageClientId;\n+    private final String containerName;\n+    private final String blobName;\n+    private final WritableContent writableContent;\n+    private final Constraints constraints;\n+\n+    /**\n+     * Create DownloadRequest.\n+     *\n+     * @param storageClientId identifies the the blob storage client for the download\n+     * @param containerName the name of the container holding the blob to download\n+     * @param blobName  the name of the blob to download\n+     * @param writableContent the object describing the content in the device to store the downloaded blob\n+     * @param constraints the constraints to be satisfied to execute the download\n+     */\n+    private DownloadRequest(String storageClientId,\n+                    String containerName,\n+                    String blobName,\n+                    WritableContent writableContent,\n+                    Constraints constraints) {\n+        this.storageClientId = storageClientId;\n+        this.containerName = containerName;\n+        this.blobName = blobName;\n+        this.writableContent = writableContent;\n+        this.constraints = constraints;\n+    }\n+\n+    /**\n+     * Get the unique identifier of the blob storage client to be used for the download.\n+     *\n+     * @return the unique identifier of the blob storage client\n+     */\n+    String getStorageClientId() {\n+        return this.storageClientId;\n+    }\n+\n+    /**\n+     * Get the name of the container holding the blob to download.\n+     *\n+     * @return the container name\n+     */\n+    String getContainerName() {\n+        return this.containerName;\n+    }\n+\n+    /**\n+     * Get the name of the blob to download.\n+     *\n+     * @return the blob name\n+     */\n+    String getBlobName() {\n+        return this.blobName;\n+    }\n+\n+    /**\n+     * Get the object describing the content in the device to store the downloaded blob.\n+     *\n+     * @return the content description\n+     */\n+    WritableContent getWritableContent() {\n+        return this.writableContent;\n+    }\n+\n+    /**\n+     * Get the constraints to be satisfied to execute the download.\n+     *\n+     * @return the constraints", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyODAwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * @param storageClientId the blob storage client id\n          \n          \n            \n                     * @return Builder with provided blob storage client id set\n          \n          \n            \n                     * @param storageClientId The blob storage client ID.\n          \n          \n            \n                     * @return Builder with provided blob storage client ID set.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439628004", "createdAt": "2020-06-12T20:28:19Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/DownloadRequest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+\n+import androidx.work.Constraints;\n+\n+import com.azure.android.core.util.CoreUtil;\n+\n+import java.io.File;\n+import java.util.Objects;\n+\n+/**\n+ * A type specifying parameters for a download transfer that should be enqueued in {@link TransferClient}.\n+ */\n+public final class DownloadRequest {\n+    private final String storageClientId;\n+    private final String containerName;\n+    private final String blobName;\n+    private final WritableContent writableContent;\n+    private final Constraints constraints;\n+\n+    /**\n+     * Create DownloadRequest.\n+     *\n+     * @param storageClientId identifies the the blob storage client for the download\n+     * @param containerName the name of the container holding the blob to download\n+     * @param blobName  the name of the blob to download\n+     * @param writableContent the object describing the content in the device to store the downloaded blob\n+     * @param constraints the constraints to be satisfied to execute the download\n+     */\n+    private DownloadRequest(String storageClientId,\n+                    String containerName,\n+                    String blobName,\n+                    WritableContent writableContent,\n+                    Constraints constraints) {\n+        this.storageClientId = storageClientId;\n+        this.containerName = containerName;\n+        this.blobName = blobName;\n+        this.writableContent = writableContent;\n+        this.constraints = constraints;\n+    }\n+\n+    /**\n+     * Get the unique identifier of the blob storage client to be used for the download.\n+     *\n+     * @return the unique identifier of the blob storage client\n+     */\n+    String getStorageClientId() {\n+        return this.storageClientId;\n+    }\n+\n+    /**\n+     * Get the name of the container holding the blob to download.\n+     *\n+     * @return the container name\n+     */\n+    String getContainerName() {\n+        return this.containerName;\n+    }\n+\n+    /**\n+     * Get the name of the blob to download.\n+     *\n+     * @return the blob name\n+     */\n+    String getBlobName() {\n+        return this.blobName;\n+    }\n+\n+    /**\n+     * Get the object describing the content in the device to store the downloaded blob.\n+     *\n+     * @return the content description\n+     */\n+    WritableContent getWritableContent() {\n+        return this.writableContent;\n+    }\n+\n+    /**\n+     * Get the constraints to be satisfied to execute the download.\n+     *\n+     * @return the constraints\n+     */\n+    Constraints getConstraints() {\n+        return this.constraints;\n+    }\n+\n+    /**\n+     * Builder for {@link DownloadRequest}.\n+     */\n+    public static final class Builder {\n+        private String storageClientId;\n+        private String containerName;\n+        private String blobName;\n+        private WritableContent writableContent;\n+        private Constraints constraints;\n+\n+        /**\n+         * Creates a {@link Builder}.\n+         */\n+        public Builder() {\n+        }\n+\n+        /**\n+         * Set the unique identifier of the blob storage client to be used for the download.\n+         *\n+         * @param storageClientId the blob storage client id\n+         * @return Builder with provided blob storage client id set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyODA5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * @param containerName the container name\n          \n          \n            \n                     * @return Builder with provided container name set\n          \n          \n            \n                     * @param containerName The container name.\n          \n          \n            \n                     * @return Builder with the provided container name set.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439628093", "createdAt": "2020-06-12T20:28:32Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/DownloadRequest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+\n+import androidx.work.Constraints;\n+\n+import com.azure.android.core.util.CoreUtil;\n+\n+import java.io.File;\n+import java.util.Objects;\n+\n+/**\n+ * A type specifying parameters for a download transfer that should be enqueued in {@link TransferClient}.\n+ */\n+public final class DownloadRequest {\n+    private final String storageClientId;\n+    private final String containerName;\n+    private final String blobName;\n+    private final WritableContent writableContent;\n+    private final Constraints constraints;\n+\n+    /**\n+     * Create DownloadRequest.\n+     *\n+     * @param storageClientId identifies the the blob storage client for the download\n+     * @param containerName the name of the container holding the blob to download\n+     * @param blobName  the name of the blob to download\n+     * @param writableContent the object describing the content in the device to store the downloaded blob\n+     * @param constraints the constraints to be satisfied to execute the download\n+     */\n+    private DownloadRequest(String storageClientId,\n+                    String containerName,\n+                    String blobName,\n+                    WritableContent writableContent,\n+                    Constraints constraints) {\n+        this.storageClientId = storageClientId;\n+        this.containerName = containerName;\n+        this.blobName = blobName;\n+        this.writableContent = writableContent;\n+        this.constraints = constraints;\n+    }\n+\n+    /**\n+     * Get the unique identifier of the blob storage client to be used for the download.\n+     *\n+     * @return the unique identifier of the blob storage client\n+     */\n+    String getStorageClientId() {\n+        return this.storageClientId;\n+    }\n+\n+    /**\n+     * Get the name of the container holding the blob to download.\n+     *\n+     * @return the container name\n+     */\n+    String getContainerName() {\n+        return this.containerName;\n+    }\n+\n+    /**\n+     * Get the name of the blob to download.\n+     *\n+     * @return the blob name\n+     */\n+    String getBlobName() {\n+        return this.blobName;\n+    }\n+\n+    /**\n+     * Get the object describing the content in the device to store the downloaded blob.\n+     *\n+     * @return the content description\n+     */\n+    WritableContent getWritableContent() {\n+        return this.writableContent;\n+    }\n+\n+    /**\n+     * Get the constraints to be satisfied to execute the download.\n+     *\n+     * @return the constraints\n+     */\n+    Constraints getConstraints() {\n+        return this.constraints;\n+    }\n+\n+    /**\n+     * Builder for {@link DownloadRequest}.\n+     */\n+    public static final class Builder {\n+        private String storageClientId;\n+        private String containerName;\n+        private String blobName;\n+        private WritableContent writableContent;\n+        private Constraints constraints;\n+\n+        /**\n+         * Creates a {@link Builder}.\n+         */\n+        public Builder() {\n+        }\n+\n+        /**\n+         * Set the unique identifier of the blob storage client to be used for the download.\n+         *\n+         * @param storageClientId the blob storage client id\n+         * @return Builder with provided blob storage client id set\n+         */\n+        public Builder storageClientId(String storageClientId) {\n+            this.storageClientId = storageClientId;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the name of the container holding the blob to download.\n+         *\n+         * @param containerName the container name\n+         * @return Builder with provided container name set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyODE5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * @param blobName the blob name\n          \n          \n            \n                     * @return Builder with provided blob name set\n          \n          \n            \n                     * @param blobName The blob name.\n          \n          \n            \n                     * @return Builder with the provided blob name set.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439628192", "createdAt": "2020-06-12T20:28:49Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/DownloadRequest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+\n+import androidx.work.Constraints;\n+\n+import com.azure.android.core.util.CoreUtil;\n+\n+import java.io.File;\n+import java.util.Objects;\n+\n+/**\n+ * A type specifying parameters for a download transfer that should be enqueued in {@link TransferClient}.\n+ */\n+public final class DownloadRequest {\n+    private final String storageClientId;\n+    private final String containerName;\n+    private final String blobName;\n+    private final WritableContent writableContent;\n+    private final Constraints constraints;\n+\n+    /**\n+     * Create DownloadRequest.\n+     *\n+     * @param storageClientId identifies the the blob storage client for the download\n+     * @param containerName the name of the container holding the blob to download\n+     * @param blobName  the name of the blob to download\n+     * @param writableContent the object describing the content in the device to store the downloaded blob\n+     * @param constraints the constraints to be satisfied to execute the download\n+     */\n+    private DownloadRequest(String storageClientId,\n+                    String containerName,\n+                    String blobName,\n+                    WritableContent writableContent,\n+                    Constraints constraints) {\n+        this.storageClientId = storageClientId;\n+        this.containerName = containerName;\n+        this.blobName = blobName;\n+        this.writableContent = writableContent;\n+        this.constraints = constraints;\n+    }\n+\n+    /**\n+     * Get the unique identifier of the blob storage client to be used for the download.\n+     *\n+     * @return the unique identifier of the blob storage client\n+     */\n+    String getStorageClientId() {\n+        return this.storageClientId;\n+    }\n+\n+    /**\n+     * Get the name of the container holding the blob to download.\n+     *\n+     * @return the container name\n+     */\n+    String getContainerName() {\n+        return this.containerName;\n+    }\n+\n+    /**\n+     * Get the name of the blob to download.\n+     *\n+     * @return the blob name\n+     */\n+    String getBlobName() {\n+        return this.blobName;\n+    }\n+\n+    /**\n+     * Get the object describing the content in the device to store the downloaded blob.\n+     *\n+     * @return the content description\n+     */\n+    WritableContent getWritableContent() {\n+        return this.writableContent;\n+    }\n+\n+    /**\n+     * Get the constraints to be satisfied to execute the download.\n+     *\n+     * @return the constraints\n+     */\n+    Constraints getConstraints() {\n+        return this.constraints;\n+    }\n+\n+    /**\n+     * Builder for {@link DownloadRequest}.\n+     */\n+    public static final class Builder {\n+        private String storageClientId;\n+        private String containerName;\n+        private String blobName;\n+        private WritableContent writableContent;\n+        private Constraints constraints;\n+\n+        /**\n+         * Creates a {@link Builder}.\n+         */\n+        public Builder() {\n+        }\n+\n+        /**\n+         * Set the unique identifier of the blob storage client to be used for the download.\n+         *\n+         * @param storageClientId the blob storage client id\n+         * @return Builder with provided blob storage client id set\n+         */\n+        public Builder storageClientId(String storageClientId) {\n+            this.storageClientId = storageClientId;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the name of the container holding the blob to download.\n+         *\n+         * @param containerName the container name\n+         * @return Builder with provided container name set\n+         */\n+        public Builder containerName(String containerName) {\n+            this.containerName = containerName;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the name of the blob to download.\n+         *\n+         * @param blobName the blob name\n+         * @return Builder with provided blob name set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyODI3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * @param file the file\n          \n          \n            \n                     * @return Builder with provided file set\n          \n          \n            \n                     * @param file The file.\n          \n          \n            \n                     * @return Builder with the provided file set.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439628275", "createdAt": "2020-06-12T20:29:03Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/DownloadRequest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+\n+import androidx.work.Constraints;\n+\n+import com.azure.android.core.util.CoreUtil;\n+\n+import java.io.File;\n+import java.util.Objects;\n+\n+/**\n+ * A type specifying parameters for a download transfer that should be enqueued in {@link TransferClient}.\n+ */\n+public final class DownloadRequest {\n+    private final String storageClientId;\n+    private final String containerName;\n+    private final String blobName;\n+    private final WritableContent writableContent;\n+    private final Constraints constraints;\n+\n+    /**\n+     * Create DownloadRequest.\n+     *\n+     * @param storageClientId identifies the the blob storage client for the download\n+     * @param containerName the name of the container holding the blob to download\n+     * @param blobName  the name of the blob to download\n+     * @param writableContent the object describing the content in the device to store the downloaded blob\n+     * @param constraints the constraints to be satisfied to execute the download\n+     */\n+    private DownloadRequest(String storageClientId,\n+                    String containerName,\n+                    String blobName,\n+                    WritableContent writableContent,\n+                    Constraints constraints) {\n+        this.storageClientId = storageClientId;\n+        this.containerName = containerName;\n+        this.blobName = blobName;\n+        this.writableContent = writableContent;\n+        this.constraints = constraints;\n+    }\n+\n+    /**\n+     * Get the unique identifier of the blob storage client to be used for the download.\n+     *\n+     * @return the unique identifier of the blob storage client\n+     */\n+    String getStorageClientId() {\n+        return this.storageClientId;\n+    }\n+\n+    /**\n+     * Get the name of the container holding the blob to download.\n+     *\n+     * @return the container name\n+     */\n+    String getContainerName() {\n+        return this.containerName;\n+    }\n+\n+    /**\n+     * Get the name of the blob to download.\n+     *\n+     * @return the blob name\n+     */\n+    String getBlobName() {\n+        return this.blobName;\n+    }\n+\n+    /**\n+     * Get the object describing the content in the device to store the downloaded blob.\n+     *\n+     * @return the content description\n+     */\n+    WritableContent getWritableContent() {\n+        return this.writableContent;\n+    }\n+\n+    /**\n+     * Get the constraints to be satisfied to execute the download.\n+     *\n+     * @return the constraints\n+     */\n+    Constraints getConstraints() {\n+        return this.constraints;\n+    }\n+\n+    /**\n+     * Builder for {@link DownloadRequest}.\n+     */\n+    public static final class Builder {\n+        private String storageClientId;\n+        private String containerName;\n+        private String blobName;\n+        private WritableContent writableContent;\n+        private Constraints constraints;\n+\n+        /**\n+         * Creates a {@link Builder}.\n+         */\n+        public Builder() {\n+        }\n+\n+        /**\n+         * Set the unique identifier of the blob storage client to be used for the download.\n+         *\n+         * @param storageClientId the blob storage client id\n+         * @return Builder with provided blob storage client id set\n+         */\n+        public Builder storageClientId(String storageClientId) {\n+            this.storageClientId = storageClientId;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the name of the container holding the blob to download.\n+         *\n+         * @param containerName the container name\n+         * @return Builder with provided container name set\n+         */\n+        public Builder containerName(String containerName) {\n+            this.containerName = containerName;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the name of the blob to download.\n+         *\n+         * @param blobName the blob name\n+         * @return Builder with provided blob name set\n+         */\n+        public Builder blobName(String blobName) {\n+            this.blobName = blobName;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the local file to download to.\n+         *\n+         * @param file the file\n+         * @return Builder with provided file set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyODM3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * @param context the application context\n          \n          \n            \n                     * @param uri The URI to the local content where the downloaded blob will be stored\n          \n          \n            \n                     * @return Builder with provided content description set\n          \n          \n            \n                     * @param context The application context.\n          \n          \n            \n                     * @param uri     The URI to the local content where the downloaded blob will be stored.\n          \n          \n            \n                     * @return Builder with the provided content description set.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439628373", "createdAt": "2020-06-12T20:29:18Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/DownloadRequest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+\n+import androidx.work.Constraints;\n+\n+import com.azure.android.core.util.CoreUtil;\n+\n+import java.io.File;\n+import java.util.Objects;\n+\n+/**\n+ * A type specifying parameters for a download transfer that should be enqueued in {@link TransferClient}.\n+ */\n+public final class DownloadRequest {\n+    private final String storageClientId;\n+    private final String containerName;\n+    private final String blobName;\n+    private final WritableContent writableContent;\n+    private final Constraints constraints;\n+\n+    /**\n+     * Create DownloadRequest.\n+     *\n+     * @param storageClientId identifies the the blob storage client for the download\n+     * @param containerName the name of the container holding the blob to download\n+     * @param blobName  the name of the blob to download\n+     * @param writableContent the object describing the content in the device to store the downloaded blob\n+     * @param constraints the constraints to be satisfied to execute the download\n+     */\n+    private DownloadRequest(String storageClientId,\n+                    String containerName,\n+                    String blobName,\n+                    WritableContent writableContent,\n+                    Constraints constraints) {\n+        this.storageClientId = storageClientId;\n+        this.containerName = containerName;\n+        this.blobName = blobName;\n+        this.writableContent = writableContent;\n+        this.constraints = constraints;\n+    }\n+\n+    /**\n+     * Get the unique identifier of the blob storage client to be used for the download.\n+     *\n+     * @return the unique identifier of the blob storage client\n+     */\n+    String getStorageClientId() {\n+        return this.storageClientId;\n+    }\n+\n+    /**\n+     * Get the name of the container holding the blob to download.\n+     *\n+     * @return the container name\n+     */\n+    String getContainerName() {\n+        return this.containerName;\n+    }\n+\n+    /**\n+     * Get the name of the blob to download.\n+     *\n+     * @return the blob name\n+     */\n+    String getBlobName() {\n+        return this.blobName;\n+    }\n+\n+    /**\n+     * Get the object describing the content in the device to store the downloaded blob.\n+     *\n+     * @return the content description\n+     */\n+    WritableContent getWritableContent() {\n+        return this.writableContent;\n+    }\n+\n+    /**\n+     * Get the constraints to be satisfied to execute the download.\n+     *\n+     * @return the constraints\n+     */\n+    Constraints getConstraints() {\n+        return this.constraints;\n+    }\n+\n+    /**\n+     * Builder for {@link DownloadRequest}.\n+     */\n+    public static final class Builder {\n+        private String storageClientId;\n+        private String containerName;\n+        private String blobName;\n+        private WritableContent writableContent;\n+        private Constraints constraints;\n+\n+        /**\n+         * Creates a {@link Builder}.\n+         */\n+        public Builder() {\n+        }\n+\n+        /**\n+         * Set the unique identifier of the blob storage client to be used for the download.\n+         *\n+         * @param storageClientId the blob storage client id\n+         * @return Builder with provided blob storage client id set\n+         */\n+        public Builder storageClientId(String storageClientId) {\n+            this.storageClientId = storageClientId;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the name of the container holding the blob to download.\n+         *\n+         * @param containerName the container name\n+         * @return Builder with provided container name set\n+         */\n+        public Builder containerName(String containerName) {\n+            this.containerName = containerName;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the name of the blob to download.\n+         *\n+         * @param blobName the blob name\n+         * @return Builder with provided blob name set\n+         */\n+        public Builder blobName(String blobName) {\n+            this.blobName = blobName;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the local file to download to.\n+         *\n+         * @param file the file\n+         * @return Builder with provided file set\n+         */\n+        public Builder file(File file) {\n+            Objects.requireNonNull(file, \"'file' cannot be null.\");\n+            if (this.writableContent != null && this.writableContent.isUsingContentResolver()) {\n+                throw new IllegalArgumentException(\"Both the contentUri and file cannot be set for the same request.\");\n+            }\n+            this.writableContent = new WritableContent(null, Uri.fromFile(file), false);\n+            return this;\n+        }\n+\n+        /**\n+         * Set the content in the device where the downloaded blob will be stored.\n+         *\n+         * @param context the application context\n+         * @param uri The URI to the local content where the downloaded blob will be stored\n+         * @return Builder with provided content description set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyODQ1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * @param constraints the constraints\n          \n          \n            \n                     * @return Builder with provided constraints set\n          \n          \n            \n                     * @param constraints The constraints.\n          \n          \n            \n                     * @return Builder with the provided constraints set.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439628458", "createdAt": "2020-06-12T20:29:31Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/DownloadRequest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+\n+import androidx.work.Constraints;\n+\n+import com.azure.android.core.util.CoreUtil;\n+\n+import java.io.File;\n+import java.util.Objects;\n+\n+/**\n+ * A type specifying parameters for a download transfer that should be enqueued in {@link TransferClient}.\n+ */\n+public final class DownloadRequest {\n+    private final String storageClientId;\n+    private final String containerName;\n+    private final String blobName;\n+    private final WritableContent writableContent;\n+    private final Constraints constraints;\n+\n+    /**\n+     * Create DownloadRequest.\n+     *\n+     * @param storageClientId identifies the the blob storage client for the download\n+     * @param containerName the name of the container holding the blob to download\n+     * @param blobName  the name of the blob to download\n+     * @param writableContent the object describing the content in the device to store the downloaded blob\n+     * @param constraints the constraints to be satisfied to execute the download\n+     */\n+    private DownloadRequest(String storageClientId,\n+                    String containerName,\n+                    String blobName,\n+                    WritableContent writableContent,\n+                    Constraints constraints) {\n+        this.storageClientId = storageClientId;\n+        this.containerName = containerName;\n+        this.blobName = blobName;\n+        this.writableContent = writableContent;\n+        this.constraints = constraints;\n+    }\n+\n+    /**\n+     * Get the unique identifier of the blob storage client to be used for the download.\n+     *\n+     * @return the unique identifier of the blob storage client\n+     */\n+    String getStorageClientId() {\n+        return this.storageClientId;\n+    }\n+\n+    /**\n+     * Get the name of the container holding the blob to download.\n+     *\n+     * @return the container name\n+     */\n+    String getContainerName() {\n+        return this.containerName;\n+    }\n+\n+    /**\n+     * Get the name of the blob to download.\n+     *\n+     * @return the blob name\n+     */\n+    String getBlobName() {\n+        return this.blobName;\n+    }\n+\n+    /**\n+     * Get the object describing the content in the device to store the downloaded blob.\n+     *\n+     * @return the content description\n+     */\n+    WritableContent getWritableContent() {\n+        return this.writableContent;\n+    }\n+\n+    /**\n+     * Get the constraints to be satisfied to execute the download.\n+     *\n+     * @return the constraints\n+     */\n+    Constraints getConstraints() {\n+        return this.constraints;\n+    }\n+\n+    /**\n+     * Builder for {@link DownloadRequest}.\n+     */\n+    public static final class Builder {\n+        private String storageClientId;\n+        private String containerName;\n+        private String blobName;\n+        private WritableContent writableContent;\n+        private Constraints constraints;\n+\n+        /**\n+         * Creates a {@link Builder}.\n+         */\n+        public Builder() {\n+        }\n+\n+        /**\n+         * Set the unique identifier of the blob storage client to be used for the download.\n+         *\n+         * @param storageClientId the blob storage client id\n+         * @return Builder with provided blob storage client id set\n+         */\n+        public Builder storageClientId(String storageClientId) {\n+            this.storageClientId = storageClientId;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the name of the container holding the blob to download.\n+         *\n+         * @param containerName the container name\n+         * @return Builder with provided container name set\n+         */\n+        public Builder containerName(String containerName) {\n+            this.containerName = containerName;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the name of the blob to download.\n+         *\n+         * @param blobName the blob name\n+         * @return Builder with provided blob name set\n+         */\n+        public Builder blobName(String blobName) {\n+            this.blobName = blobName;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the local file to download to.\n+         *\n+         * @param file the file\n+         * @return Builder with provided file set\n+         */\n+        public Builder file(File file) {\n+            Objects.requireNonNull(file, \"'file' cannot be null.\");\n+            if (this.writableContent != null && this.writableContent.isUsingContentResolver()) {\n+                throw new IllegalArgumentException(\"Both the contentUri and file cannot be set for the same request.\");\n+            }\n+            this.writableContent = new WritableContent(null, Uri.fromFile(file), false);\n+            return this;\n+        }\n+\n+        /**\n+         * Set the content in the device where the downloaded blob will be stored.\n+         *\n+         * @param context the application context\n+         * @param uri The URI to the local content where the downloaded blob will be stored\n+         * @return Builder with provided content description set\n+         */\n+        public Builder contentUri(Context context, Uri uri) {\n+            Objects.requireNonNull(context, \"'context' cannot be null.\");\n+            Objects.requireNonNull(uri, \"'uri' cannot be null.\");\n+            if (this.writableContent != null && !this.writableContent.isUsingContentResolver()) {\n+                throw new IllegalArgumentException(\"Both the contentUri and file cannot be set for the same request.\");\n+            }\n+            this.writableContent = new WritableContent(context, uri, true);\n+            return this;\n+        }\n+\n+        /**\n+         * Set the constraints to be satisfied to execute the download.\n+         *\n+         * @param constraints the constraints\n+         * @return Builder with provided constraints set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyODg3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param storageClientId identifies the the blob storage client for the upload\n          \n          \n            \n                 * @param containerName the name of the container to upload the content to\n          \n          \n            \n                 * @param blobName  the name of the target blob holding uploaded content\n          \n          \n            \n                 * @param readableContent the object describing the content in the device that needs to be uploaded\n          \n          \n            \n                 * @param constraints the constraints to be satisfied to execute the upload\n          \n          \n            \n                 * @param storageClientId Identifies the {@link com.azure.android.storage.blob.StorageBlobClient} for the upload.\n          \n          \n            \n                 * @param containerName   The name of the container to upload the content to.\n          \n          \n            \n                 * @param blobName        The name of the target blob holding the uploaded content.\n          \n          \n            \n                 * @param readableContent The object describing the content in the device that needs to be uploaded.\n          \n          \n            \n                 * @param constraints     The constraints to be satisfied to execute the upload.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439628878", "createdAt": "2020-06-12T20:30:31Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/UploadRequest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+\n+import androidx.work.Constraints;\n+\n+import com.azure.android.core.util.CoreUtil;\n+\n+import java.io.File;\n+import java.util.Objects;\n+\n+/**\n+ * A type specifying parameters for upload transfer that should be enqueued in {@link TransferClient}.\n+ */\n+public final class UploadRequest {\n+    private final String storageClientId;\n+    private final String containerName;\n+    private final String blobName;\n+    private final ReadableContent readableContent;\n+    private final Constraints constraints;\n+\n+    /**\n+     * Create UploadRequest.\n+     *\n+     * @param storageClientId identifies the the blob storage client for the upload\n+     * @param containerName the name of the container to upload the content to\n+     * @param blobName  the name of the target blob holding uploaded content\n+     * @param readableContent the object describing the content in the device that needs to be uploaded\n+     * @param constraints the constraints to be satisfied to execute the upload", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyODk2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private UploadRequest(String storageClientId,\n          \n          \n            \n                              String containerName,\n          \n          \n            \n                              String blobName,\n          \n          \n            \n                              ReadableContent readableContent,\n          \n          \n            \n                              Constraints constraints) {\n          \n          \n            \n                private UploadRequest(String storageClientId,\n          \n          \n            \n                                      String containerName,\n          \n          \n            \n                                      String blobName,\n          \n          \n            \n                                      ReadableContent readableContent,\n          \n          \n            \n                                      Constraints constraints) {", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439628968", "createdAt": "2020-06-12T20:30:45Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/UploadRequest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+\n+import androidx.work.Constraints;\n+\n+import com.azure.android.core.util.CoreUtil;\n+\n+import java.io.File;\n+import java.util.Objects;\n+\n+/**\n+ * A type specifying parameters for upload transfer that should be enqueued in {@link TransferClient}.\n+ */\n+public final class UploadRequest {\n+    private final String storageClientId;\n+    private final String containerName;\n+    private final String blobName;\n+    private final ReadableContent readableContent;\n+    private final Constraints constraints;\n+\n+    /**\n+     * Create UploadRequest.\n+     *\n+     * @param storageClientId identifies the the blob storage client for the upload\n+     * @param containerName the name of the container to upload the content to\n+     * @param blobName  the name of the target blob holding uploaded content\n+     * @param readableContent the object describing the content in the device that needs to be uploaded\n+     * @param constraints the constraints to be satisfied to execute the upload\n+     */\n+    private UploadRequest(String storageClientId,\n+                  String containerName,\n+                  String blobName,\n+                  ReadableContent readableContent,\n+                  Constraints constraints) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyOTEyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the container name\n          \n          \n            \n                 * @return The container name.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439629129", "createdAt": "2020-06-12T20:31:09Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/UploadRequest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+\n+import androidx.work.Constraints;\n+\n+import com.azure.android.core.util.CoreUtil;\n+\n+import java.io.File;\n+import java.util.Objects;\n+\n+/**\n+ * A type specifying parameters for upload transfer that should be enqueued in {@link TransferClient}.\n+ */\n+public final class UploadRequest {\n+    private final String storageClientId;\n+    private final String containerName;\n+    private final String blobName;\n+    private final ReadableContent readableContent;\n+    private final Constraints constraints;\n+\n+    /**\n+     * Create UploadRequest.\n+     *\n+     * @param storageClientId identifies the the blob storage client for the upload\n+     * @param containerName the name of the container to upload the content to\n+     * @param blobName  the name of the target blob holding uploaded content\n+     * @param readableContent the object describing the content in the device that needs to be uploaded\n+     * @param constraints the constraints to be satisfied to execute the upload\n+     */\n+    private UploadRequest(String storageClientId,\n+                  String containerName,\n+                  String blobName,\n+                  ReadableContent readableContent,\n+                  Constraints constraints) {\n+        this.storageClientId = storageClientId;\n+        this.containerName = containerName;\n+        this.blobName = blobName;\n+        this.readableContent = readableContent;\n+        this.constraints = constraints;\n+    }\n+\n+    /**\n+     * Get the unique identifier of the blob storage client to be used for the upload.\n+     *\n+     * @return the unique identifier of the blob storage client\n+     */\n+    String getStorageClientId() {\n+        return this.storageClientId;\n+    }\n+\n+    /**\n+     * Get the name of the container to upload the file to.\n+     *\n+     * @return the container name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyOTE4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the blob name\n          \n          \n            \n                 * @return The blob name.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439629188", "createdAt": "2020-06-12T20:31:18Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/UploadRequest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+\n+import androidx.work.Constraints;\n+\n+import com.azure.android.core.util.CoreUtil;\n+\n+import java.io.File;\n+import java.util.Objects;\n+\n+/**\n+ * A type specifying parameters for upload transfer that should be enqueued in {@link TransferClient}.\n+ */\n+public final class UploadRequest {\n+    private final String storageClientId;\n+    private final String containerName;\n+    private final String blobName;\n+    private final ReadableContent readableContent;\n+    private final Constraints constraints;\n+\n+    /**\n+     * Create UploadRequest.\n+     *\n+     * @param storageClientId identifies the the blob storage client for the upload\n+     * @param containerName the name of the container to upload the content to\n+     * @param blobName  the name of the target blob holding uploaded content\n+     * @param readableContent the object describing the content in the device that needs to be uploaded\n+     * @param constraints the constraints to be satisfied to execute the upload\n+     */\n+    private UploadRequest(String storageClientId,\n+                  String containerName,\n+                  String blobName,\n+                  ReadableContent readableContent,\n+                  Constraints constraints) {\n+        this.storageClientId = storageClientId;\n+        this.containerName = containerName;\n+        this.blobName = blobName;\n+        this.readableContent = readableContent;\n+        this.constraints = constraints;\n+    }\n+\n+    /**\n+     * Get the unique identifier of the blob storage client to be used for the upload.\n+     *\n+     * @return the unique identifier of the blob storage client\n+     */\n+    String getStorageClientId() {\n+        return this.storageClientId;\n+    }\n+\n+    /**\n+     * Get the name of the container to upload the file to.\n+     *\n+     * @return the container name\n+     */\n+    String getContainerName() {\n+        return this.containerName;\n+    }\n+\n+    /**\n+     * Get the name of the target blob holding uploaded file.\n+     *\n+     * @return the blob name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyOTI4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the content description\n          \n          \n            \n                 * @return The content description.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439629284", "createdAt": "2020-06-12T20:31:31Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/UploadRequest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+\n+import androidx.work.Constraints;\n+\n+import com.azure.android.core.util.CoreUtil;\n+\n+import java.io.File;\n+import java.util.Objects;\n+\n+/**\n+ * A type specifying parameters for upload transfer that should be enqueued in {@link TransferClient}.\n+ */\n+public final class UploadRequest {\n+    private final String storageClientId;\n+    private final String containerName;\n+    private final String blobName;\n+    private final ReadableContent readableContent;\n+    private final Constraints constraints;\n+\n+    /**\n+     * Create UploadRequest.\n+     *\n+     * @param storageClientId identifies the the blob storage client for the upload\n+     * @param containerName the name of the container to upload the content to\n+     * @param blobName  the name of the target blob holding uploaded content\n+     * @param readableContent the object describing the content in the device that needs to be uploaded\n+     * @param constraints the constraints to be satisfied to execute the upload\n+     */\n+    private UploadRequest(String storageClientId,\n+                  String containerName,\n+                  String blobName,\n+                  ReadableContent readableContent,\n+                  Constraints constraints) {\n+        this.storageClientId = storageClientId;\n+        this.containerName = containerName;\n+        this.blobName = blobName;\n+        this.readableContent = readableContent;\n+        this.constraints = constraints;\n+    }\n+\n+    /**\n+     * Get the unique identifier of the blob storage client to be used for the upload.\n+     *\n+     * @return the unique identifier of the blob storage client\n+     */\n+    String getStorageClientId() {\n+        return this.storageClientId;\n+    }\n+\n+    /**\n+     * Get the name of the container to upload the file to.\n+     *\n+     * @return the container name\n+     */\n+    String getContainerName() {\n+        return this.containerName;\n+    }\n+\n+    /**\n+     * Get the name of the target blob holding uploaded file.\n+     *\n+     * @return the blob name\n+     */\n+    String getBlobName() {\n+        return this.blobName;\n+    }\n+\n+    /**\n+     * Get the object describing the content in the device that needs to be uploaded.\n+     *\n+     * @return the content description", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyOTM4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the constraints\n          \n          \n            \n                 * @return The constraints.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439629384", "createdAt": "2020-06-12T20:31:44Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/UploadRequest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+\n+import androidx.work.Constraints;\n+\n+import com.azure.android.core.util.CoreUtil;\n+\n+import java.io.File;\n+import java.util.Objects;\n+\n+/**\n+ * A type specifying parameters for upload transfer that should be enqueued in {@link TransferClient}.\n+ */\n+public final class UploadRequest {\n+    private final String storageClientId;\n+    private final String containerName;\n+    private final String blobName;\n+    private final ReadableContent readableContent;\n+    private final Constraints constraints;\n+\n+    /**\n+     * Create UploadRequest.\n+     *\n+     * @param storageClientId identifies the the blob storage client for the upload\n+     * @param containerName the name of the container to upload the content to\n+     * @param blobName  the name of the target blob holding uploaded content\n+     * @param readableContent the object describing the content in the device that needs to be uploaded\n+     * @param constraints the constraints to be satisfied to execute the upload\n+     */\n+    private UploadRequest(String storageClientId,\n+                  String containerName,\n+                  String blobName,\n+                  ReadableContent readableContent,\n+                  Constraints constraints) {\n+        this.storageClientId = storageClientId;\n+        this.containerName = containerName;\n+        this.blobName = blobName;\n+        this.readableContent = readableContent;\n+        this.constraints = constraints;\n+    }\n+\n+    /**\n+     * Get the unique identifier of the blob storage client to be used for the upload.\n+     *\n+     * @return the unique identifier of the blob storage client\n+     */\n+    String getStorageClientId() {\n+        return this.storageClientId;\n+    }\n+\n+    /**\n+     * Get the name of the container to upload the file to.\n+     *\n+     * @return the container name\n+     */\n+    String getContainerName() {\n+        return this.containerName;\n+    }\n+\n+    /**\n+     * Get the name of the target blob holding uploaded file.\n+     *\n+     * @return the blob name\n+     */\n+    String getBlobName() {\n+        return this.blobName;\n+    }\n+\n+    /**\n+     * Get the object describing the content in the device that needs to be uploaded.\n+     *\n+     * @return the content description\n+     */\n+    ReadableContent getReadableContent() {\n+        return this.readableContent;\n+    }\n+\n+    /**\n+     * Get the constraints to be satisfied to execute the upload.\n+     *\n+     * @return the constraints", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyOTQ3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * @param storageClientId the blob storage client id\n          \n          \n            \n                     * @return Builder with provided blob storage client id set\n          \n          \n            \n                     * @param storageClientId The blob storage client ID.\n          \n          \n            \n                     * @return Builder with the provided blob storage client ID set.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439629476", "createdAt": "2020-06-12T20:31:58Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/UploadRequest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+\n+import androidx.work.Constraints;\n+\n+import com.azure.android.core.util.CoreUtil;\n+\n+import java.io.File;\n+import java.util.Objects;\n+\n+/**\n+ * A type specifying parameters for upload transfer that should be enqueued in {@link TransferClient}.\n+ */\n+public final class UploadRequest {\n+    private final String storageClientId;\n+    private final String containerName;\n+    private final String blobName;\n+    private final ReadableContent readableContent;\n+    private final Constraints constraints;\n+\n+    /**\n+     * Create UploadRequest.\n+     *\n+     * @param storageClientId identifies the the blob storage client for the upload\n+     * @param containerName the name of the container to upload the content to\n+     * @param blobName  the name of the target blob holding uploaded content\n+     * @param readableContent the object describing the content in the device that needs to be uploaded\n+     * @param constraints the constraints to be satisfied to execute the upload\n+     */\n+    private UploadRequest(String storageClientId,\n+                  String containerName,\n+                  String blobName,\n+                  ReadableContent readableContent,\n+                  Constraints constraints) {\n+        this.storageClientId = storageClientId;\n+        this.containerName = containerName;\n+        this.blobName = blobName;\n+        this.readableContent = readableContent;\n+        this.constraints = constraints;\n+    }\n+\n+    /**\n+     * Get the unique identifier of the blob storage client to be used for the upload.\n+     *\n+     * @return the unique identifier of the blob storage client\n+     */\n+    String getStorageClientId() {\n+        return this.storageClientId;\n+    }\n+\n+    /**\n+     * Get the name of the container to upload the file to.\n+     *\n+     * @return the container name\n+     */\n+    String getContainerName() {\n+        return this.containerName;\n+    }\n+\n+    /**\n+     * Get the name of the target blob holding uploaded file.\n+     *\n+     * @return the blob name\n+     */\n+    String getBlobName() {\n+        return this.blobName;\n+    }\n+\n+    /**\n+     * Get the object describing the content in the device that needs to be uploaded.\n+     *\n+     * @return the content description\n+     */\n+    ReadableContent getReadableContent() {\n+        return this.readableContent;\n+    }\n+\n+    /**\n+     * Get the constraints to be satisfied to execute the upload.\n+     *\n+     * @return the constraints\n+     */\n+    Constraints getConstraints() {\n+        return this.constraints;\n+    }\n+\n+    /**\n+     * Builder for {@link UploadRequest}.\n+     */\n+    public static final class Builder {\n+        private String storageClientId;\n+        private String containerName;\n+        private String blobName;\n+        private ReadableContent readableContent;\n+        private Constraints constraints;\n+\n+        /**\n+         * Creates a {@link Builder}.\n+         */\n+        public Builder() {\n+        }\n+\n+        /**\n+         * Set the unique identifier of the blob storage client to be used for the upload.\n+         *\n+         * @param storageClientId the blob storage client id\n+         * @return Builder with provided blob storage client id set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyOTUzMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * @param containerName the container name\n          \n          \n            \n                     * @return Builder with provided container name set\n          \n          \n            \n                     * @param containerName The container name.\n          \n          \n            \n                     * @return Builder with the provided container name set.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439629533", "createdAt": "2020-06-12T20:32:09Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/UploadRequest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+\n+import androidx.work.Constraints;\n+\n+import com.azure.android.core.util.CoreUtil;\n+\n+import java.io.File;\n+import java.util.Objects;\n+\n+/**\n+ * A type specifying parameters for upload transfer that should be enqueued in {@link TransferClient}.\n+ */\n+public final class UploadRequest {\n+    private final String storageClientId;\n+    private final String containerName;\n+    private final String blobName;\n+    private final ReadableContent readableContent;\n+    private final Constraints constraints;\n+\n+    /**\n+     * Create UploadRequest.\n+     *\n+     * @param storageClientId identifies the the blob storage client for the upload\n+     * @param containerName the name of the container to upload the content to\n+     * @param blobName  the name of the target blob holding uploaded content\n+     * @param readableContent the object describing the content in the device that needs to be uploaded\n+     * @param constraints the constraints to be satisfied to execute the upload\n+     */\n+    private UploadRequest(String storageClientId,\n+                  String containerName,\n+                  String blobName,\n+                  ReadableContent readableContent,\n+                  Constraints constraints) {\n+        this.storageClientId = storageClientId;\n+        this.containerName = containerName;\n+        this.blobName = blobName;\n+        this.readableContent = readableContent;\n+        this.constraints = constraints;\n+    }\n+\n+    /**\n+     * Get the unique identifier of the blob storage client to be used for the upload.\n+     *\n+     * @return the unique identifier of the blob storage client\n+     */\n+    String getStorageClientId() {\n+        return this.storageClientId;\n+    }\n+\n+    /**\n+     * Get the name of the container to upload the file to.\n+     *\n+     * @return the container name\n+     */\n+    String getContainerName() {\n+        return this.containerName;\n+    }\n+\n+    /**\n+     * Get the name of the target blob holding uploaded file.\n+     *\n+     * @return the blob name\n+     */\n+    String getBlobName() {\n+        return this.blobName;\n+    }\n+\n+    /**\n+     * Get the object describing the content in the device that needs to be uploaded.\n+     *\n+     * @return the content description\n+     */\n+    ReadableContent getReadableContent() {\n+        return this.readableContent;\n+    }\n+\n+    /**\n+     * Get the constraints to be satisfied to execute the upload.\n+     *\n+     * @return the constraints\n+     */\n+    Constraints getConstraints() {\n+        return this.constraints;\n+    }\n+\n+    /**\n+     * Builder for {@link UploadRequest}.\n+     */\n+    public static final class Builder {\n+        private String storageClientId;\n+        private String containerName;\n+        private String blobName;\n+        private ReadableContent readableContent;\n+        private Constraints constraints;\n+\n+        /**\n+         * Creates a {@link Builder}.\n+         */\n+        public Builder() {\n+        }\n+\n+        /**\n+         * Set the unique identifier of the blob storage client to be used for the upload.\n+         *\n+         * @param storageClientId the blob storage client id\n+         * @return Builder with provided blob storage client id set\n+         */\n+        public Builder storageClientId(String storageClientId) {\n+            this.storageClientId = storageClientId;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the name of the container to upload the file to.\n+         *\n+         * @param containerName the container name\n+         * @return Builder with provided container name set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyOTY1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * Set the name of the target blob holding uploaded file.\n          \n          \n            \n                     *\n          \n          \n            \n                     * @param blobName the blob name\n          \n          \n            \n                     * @return Builder with provided blob name set\n          \n          \n            \n                     * Set the name of the target blob holding the uploaded file.\n          \n          \n            \n                     *\n          \n          \n            \n                     * @param blobName The blob name.\n          \n          \n            \n                     * @return Builder with the provided blob name set.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439629652", "createdAt": "2020-06-12T20:32:29Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/UploadRequest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+\n+import androidx.work.Constraints;\n+\n+import com.azure.android.core.util.CoreUtil;\n+\n+import java.io.File;\n+import java.util.Objects;\n+\n+/**\n+ * A type specifying parameters for upload transfer that should be enqueued in {@link TransferClient}.\n+ */\n+public final class UploadRequest {\n+    private final String storageClientId;\n+    private final String containerName;\n+    private final String blobName;\n+    private final ReadableContent readableContent;\n+    private final Constraints constraints;\n+\n+    /**\n+     * Create UploadRequest.\n+     *\n+     * @param storageClientId identifies the the blob storage client for the upload\n+     * @param containerName the name of the container to upload the content to\n+     * @param blobName  the name of the target blob holding uploaded content\n+     * @param readableContent the object describing the content in the device that needs to be uploaded\n+     * @param constraints the constraints to be satisfied to execute the upload\n+     */\n+    private UploadRequest(String storageClientId,\n+                  String containerName,\n+                  String blobName,\n+                  ReadableContent readableContent,\n+                  Constraints constraints) {\n+        this.storageClientId = storageClientId;\n+        this.containerName = containerName;\n+        this.blobName = blobName;\n+        this.readableContent = readableContent;\n+        this.constraints = constraints;\n+    }\n+\n+    /**\n+     * Get the unique identifier of the blob storage client to be used for the upload.\n+     *\n+     * @return the unique identifier of the blob storage client\n+     */\n+    String getStorageClientId() {\n+        return this.storageClientId;\n+    }\n+\n+    /**\n+     * Get the name of the container to upload the file to.\n+     *\n+     * @return the container name\n+     */\n+    String getContainerName() {\n+        return this.containerName;\n+    }\n+\n+    /**\n+     * Get the name of the target blob holding uploaded file.\n+     *\n+     * @return the blob name\n+     */\n+    String getBlobName() {\n+        return this.blobName;\n+    }\n+\n+    /**\n+     * Get the object describing the content in the device that needs to be uploaded.\n+     *\n+     * @return the content description\n+     */\n+    ReadableContent getReadableContent() {\n+        return this.readableContent;\n+    }\n+\n+    /**\n+     * Get the constraints to be satisfied to execute the upload.\n+     *\n+     * @return the constraints\n+     */\n+    Constraints getConstraints() {\n+        return this.constraints;\n+    }\n+\n+    /**\n+     * Builder for {@link UploadRequest}.\n+     */\n+    public static final class Builder {\n+        private String storageClientId;\n+        private String containerName;\n+        private String blobName;\n+        private ReadableContent readableContent;\n+        private Constraints constraints;\n+\n+        /**\n+         * Creates a {@link Builder}.\n+         */\n+        public Builder() {\n+        }\n+\n+        /**\n+         * Set the unique identifier of the blob storage client to be used for the upload.\n+         *\n+         * @param storageClientId the blob storage client id\n+         * @return Builder with provided blob storage client id set\n+         */\n+        public Builder storageClientId(String storageClientId) {\n+            this.storageClientId = storageClientId;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the name of the container to upload the file to.\n+         *\n+         * @param containerName the container name\n+         * @return Builder with provided container name set\n+         */\n+        public Builder containerName(String containerName) {\n+            this.containerName = containerName;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the name of the target blob holding uploaded file.\n+         *\n+         * @param blobName the blob name\n+         * @return Builder with provided blob name set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyOTczMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * Set the file in the device to upload.\n          \n          \n            \n                     *\n          \n          \n            \n                     * @param file the file\n          \n          \n            \n                     * @return Builder with provided file set\n          \n          \n            \n                     * Set the local file to upload.\n          \n          \n            \n                     *\n          \n          \n            \n                     * @param file The file.\n          \n          \n            \n                     * @return Builder with the provided file set.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439629731", "createdAt": "2020-06-12T20:32:45Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/UploadRequest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+\n+import androidx.work.Constraints;\n+\n+import com.azure.android.core.util.CoreUtil;\n+\n+import java.io.File;\n+import java.util.Objects;\n+\n+/**\n+ * A type specifying parameters for upload transfer that should be enqueued in {@link TransferClient}.\n+ */\n+public final class UploadRequest {\n+    private final String storageClientId;\n+    private final String containerName;\n+    private final String blobName;\n+    private final ReadableContent readableContent;\n+    private final Constraints constraints;\n+\n+    /**\n+     * Create UploadRequest.\n+     *\n+     * @param storageClientId identifies the the blob storage client for the upload\n+     * @param containerName the name of the container to upload the content to\n+     * @param blobName  the name of the target blob holding uploaded content\n+     * @param readableContent the object describing the content in the device that needs to be uploaded\n+     * @param constraints the constraints to be satisfied to execute the upload\n+     */\n+    private UploadRequest(String storageClientId,\n+                  String containerName,\n+                  String blobName,\n+                  ReadableContent readableContent,\n+                  Constraints constraints) {\n+        this.storageClientId = storageClientId;\n+        this.containerName = containerName;\n+        this.blobName = blobName;\n+        this.readableContent = readableContent;\n+        this.constraints = constraints;\n+    }\n+\n+    /**\n+     * Get the unique identifier of the blob storage client to be used for the upload.\n+     *\n+     * @return the unique identifier of the blob storage client\n+     */\n+    String getStorageClientId() {\n+        return this.storageClientId;\n+    }\n+\n+    /**\n+     * Get the name of the container to upload the file to.\n+     *\n+     * @return the container name\n+     */\n+    String getContainerName() {\n+        return this.containerName;\n+    }\n+\n+    /**\n+     * Get the name of the target blob holding uploaded file.\n+     *\n+     * @return the blob name\n+     */\n+    String getBlobName() {\n+        return this.blobName;\n+    }\n+\n+    /**\n+     * Get the object describing the content in the device that needs to be uploaded.\n+     *\n+     * @return the content description\n+     */\n+    ReadableContent getReadableContent() {\n+        return this.readableContent;\n+    }\n+\n+    /**\n+     * Get the constraints to be satisfied to execute the upload.\n+     *\n+     * @return the constraints\n+     */\n+    Constraints getConstraints() {\n+        return this.constraints;\n+    }\n+\n+    /**\n+     * Builder for {@link UploadRequest}.\n+     */\n+    public static final class Builder {\n+        private String storageClientId;\n+        private String containerName;\n+        private String blobName;\n+        private ReadableContent readableContent;\n+        private Constraints constraints;\n+\n+        /**\n+         * Creates a {@link Builder}.\n+         */\n+        public Builder() {\n+        }\n+\n+        /**\n+         * Set the unique identifier of the blob storage client to be used for the upload.\n+         *\n+         * @param storageClientId the blob storage client id\n+         * @return Builder with provided blob storage client id set\n+         */\n+        public Builder storageClientId(String storageClientId) {\n+            this.storageClientId = storageClientId;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the name of the container to upload the file to.\n+         *\n+         * @param containerName the container name\n+         * @return Builder with provided container name set\n+         */\n+        public Builder containerName(String containerName) {\n+            this.containerName = containerName;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the name of the target blob holding uploaded file.\n+         *\n+         * @param blobName the blob name\n+         * @return Builder with provided blob name set\n+         */\n+        public Builder blobName(String blobName) {\n+            this.blobName = blobName;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the file in the device to upload.\n+         *\n+         * @param file the file\n+         * @return Builder with provided file set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyOTgzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * Set the content in the device to upload.\n          \n          \n            \n                     *\n          \n          \n            \n                     * @param context the application context\n          \n          \n            \n                     * @param uri URI to the Content to upload\n          \n          \n            \n                     * @return Builder with provided content description set\n          \n          \n            \n                     * Set the content in the device to upload from.\n          \n          \n            \n                     *\n          \n          \n            \n                     * @param context The application context.\n          \n          \n            \n                     * @param uri     The URI to the local content to upload.\n          \n          \n            \n                     * @return Builder with the provided content description set.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439629831", "createdAt": "2020-06-12T20:32:58Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/UploadRequest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+\n+import androidx.work.Constraints;\n+\n+import com.azure.android.core.util.CoreUtil;\n+\n+import java.io.File;\n+import java.util.Objects;\n+\n+/**\n+ * A type specifying parameters for upload transfer that should be enqueued in {@link TransferClient}.\n+ */\n+public final class UploadRequest {\n+    private final String storageClientId;\n+    private final String containerName;\n+    private final String blobName;\n+    private final ReadableContent readableContent;\n+    private final Constraints constraints;\n+\n+    /**\n+     * Create UploadRequest.\n+     *\n+     * @param storageClientId identifies the the blob storage client for the upload\n+     * @param containerName the name of the container to upload the content to\n+     * @param blobName  the name of the target blob holding uploaded content\n+     * @param readableContent the object describing the content in the device that needs to be uploaded\n+     * @param constraints the constraints to be satisfied to execute the upload\n+     */\n+    private UploadRequest(String storageClientId,\n+                  String containerName,\n+                  String blobName,\n+                  ReadableContent readableContent,\n+                  Constraints constraints) {\n+        this.storageClientId = storageClientId;\n+        this.containerName = containerName;\n+        this.blobName = blobName;\n+        this.readableContent = readableContent;\n+        this.constraints = constraints;\n+    }\n+\n+    /**\n+     * Get the unique identifier of the blob storage client to be used for the upload.\n+     *\n+     * @return the unique identifier of the blob storage client\n+     */\n+    String getStorageClientId() {\n+        return this.storageClientId;\n+    }\n+\n+    /**\n+     * Get the name of the container to upload the file to.\n+     *\n+     * @return the container name\n+     */\n+    String getContainerName() {\n+        return this.containerName;\n+    }\n+\n+    /**\n+     * Get the name of the target blob holding uploaded file.\n+     *\n+     * @return the blob name\n+     */\n+    String getBlobName() {\n+        return this.blobName;\n+    }\n+\n+    /**\n+     * Get the object describing the content in the device that needs to be uploaded.\n+     *\n+     * @return the content description\n+     */\n+    ReadableContent getReadableContent() {\n+        return this.readableContent;\n+    }\n+\n+    /**\n+     * Get the constraints to be satisfied to execute the upload.\n+     *\n+     * @return the constraints\n+     */\n+    Constraints getConstraints() {\n+        return this.constraints;\n+    }\n+\n+    /**\n+     * Builder for {@link UploadRequest}.\n+     */\n+    public static final class Builder {\n+        private String storageClientId;\n+        private String containerName;\n+        private String blobName;\n+        private ReadableContent readableContent;\n+        private Constraints constraints;\n+\n+        /**\n+         * Creates a {@link Builder}.\n+         */\n+        public Builder() {\n+        }\n+\n+        /**\n+         * Set the unique identifier of the blob storage client to be used for the upload.\n+         *\n+         * @param storageClientId the blob storage client id\n+         * @return Builder with provided blob storage client id set\n+         */\n+        public Builder storageClientId(String storageClientId) {\n+            this.storageClientId = storageClientId;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the name of the container to upload the file to.\n+         *\n+         * @param containerName the container name\n+         * @return Builder with provided container name set\n+         */\n+        public Builder containerName(String containerName) {\n+            this.containerName = containerName;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the name of the target blob holding uploaded file.\n+         *\n+         * @param blobName the blob name\n+         * @return Builder with provided blob name set\n+         */\n+        public Builder blobName(String blobName) {\n+            this.blobName = blobName;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the file in the device to upload.\n+         *\n+         * @param file the file\n+         * @return Builder with provided file set\n+         */\n+        public Builder file(File file) {\n+            Objects.requireNonNull(file, \"'file' cannot be null.\");\n+            if (this.readableContent != null && this.readableContent.isUsingContentResolver()) {\n+                throw new IllegalArgumentException(\"Both the contentUri and file cannot be set for the same request.\");\n+            }\n+            this.readableContent = new ReadableContent(null, Uri.fromFile(file), false);\n+            return this;\n+        }\n+\n+        /**\n+         * Set the content in the device to upload.\n+         *\n+         * @param context the application context\n+         * @param uri URI to the Content to upload\n+         * @return Builder with provided content description set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyOTkwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * @param constraints the constraints\n          \n          \n            \n                     * @return Builder with provided constraints set\n          \n          \n            \n                     * @param constraints The constraints.\n          \n          \n            \n                     * @return Builder with the provided constraints set.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439629905", "createdAt": "2020-06-12T20:33:09Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/UploadRequest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+\n+import androidx.work.Constraints;\n+\n+import com.azure.android.core.util.CoreUtil;\n+\n+import java.io.File;\n+import java.util.Objects;\n+\n+/**\n+ * A type specifying parameters for upload transfer that should be enqueued in {@link TransferClient}.\n+ */\n+public final class UploadRequest {\n+    private final String storageClientId;\n+    private final String containerName;\n+    private final String blobName;\n+    private final ReadableContent readableContent;\n+    private final Constraints constraints;\n+\n+    /**\n+     * Create UploadRequest.\n+     *\n+     * @param storageClientId identifies the the blob storage client for the upload\n+     * @param containerName the name of the container to upload the content to\n+     * @param blobName  the name of the target blob holding uploaded content\n+     * @param readableContent the object describing the content in the device that needs to be uploaded\n+     * @param constraints the constraints to be satisfied to execute the upload\n+     */\n+    private UploadRequest(String storageClientId,\n+                  String containerName,\n+                  String blobName,\n+                  ReadableContent readableContent,\n+                  Constraints constraints) {\n+        this.storageClientId = storageClientId;\n+        this.containerName = containerName;\n+        this.blobName = blobName;\n+        this.readableContent = readableContent;\n+        this.constraints = constraints;\n+    }\n+\n+    /**\n+     * Get the unique identifier of the blob storage client to be used for the upload.\n+     *\n+     * @return the unique identifier of the blob storage client\n+     */\n+    String getStorageClientId() {\n+        return this.storageClientId;\n+    }\n+\n+    /**\n+     * Get the name of the container to upload the file to.\n+     *\n+     * @return the container name\n+     */\n+    String getContainerName() {\n+        return this.containerName;\n+    }\n+\n+    /**\n+     * Get the name of the target blob holding uploaded file.\n+     *\n+     * @return the blob name\n+     */\n+    String getBlobName() {\n+        return this.blobName;\n+    }\n+\n+    /**\n+     * Get the object describing the content in the device that needs to be uploaded.\n+     *\n+     * @return the content description\n+     */\n+    ReadableContent getReadableContent() {\n+        return this.readableContent;\n+    }\n+\n+    /**\n+     * Get the constraints to be satisfied to execute the upload.\n+     *\n+     * @return the constraints\n+     */\n+    Constraints getConstraints() {\n+        return this.constraints;\n+    }\n+\n+    /**\n+     * Builder for {@link UploadRequest}.\n+     */\n+    public static final class Builder {\n+        private String storageClientId;\n+        private String containerName;\n+        private String blobName;\n+        private ReadableContent readableContent;\n+        private Constraints constraints;\n+\n+        /**\n+         * Creates a {@link Builder}.\n+         */\n+        public Builder() {\n+        }\n+\n+        /**\n+         * Set the unique identifier of the blob storage client to be used for the upload.\n+         *\n+         * @param storageClientId the blob storage client id\n+         * @return Builder with provided blob storage client id set\n+         */\n+        public Builder storageClientId(String storageClientId) {\n+            this.storageClientId = storageClientId;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the name of the container to upload the file to.\n+         *\n+         * @param containerName the container name\n+         * @return Builder with provided container name set\n+         */\n+        public Builder containerName(String containerName) {\n+            this.containerName = containerName;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the name of the target blob holding uploaded file.\n+         *\n+         * @param blobName the blob name\n+         * @return Builder with provided blob name set\n+         */\n+        public Builder blobName(String blobName) {\n+            this.blobName = blobName;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the file in the device to upload.\n+         *\n+         * @param file the file\n+         * @return Builder with provided file set\n+         */\n+        public Builder file(File file) {\n+            Objects.requireNonNull(file, \"'file' cannot be null.\");\n+            if (this.readableContent != null && this.readableContent.isUsingContentResolver()) {\n+                throw new IllegalArgumentException(\"Both the contentUri and file cannot be set for the same request.\");\n+            }\n+            this.readableContent = new ReadableContent(null, Uri.fromFile(file), false);\n+            return this;\n+        }\n+\n+        /**\n+         * Set the content in the device to upload.\n+         *\n+         * @param context the application context\n+         * @param uri URI to the Content to upload\n+         * @return Builder with provided content description set\n+         */\n+        public Builder contentUri(Context context, Uri uri) {\n+            Objects.requireNonNull(context, \"'context' cannot be null.\");\n+            Objects.requireNonNull(uri, \"'uri' cannot be null.\");\n+            if (this.readableContent != null && !this.readableContent.isUsingContentResolver()) {\n+                throw new IllegalArgumentException(\"Both the contentUri and file cannot be set for the same request.\");\n+            }\n+            this.readableContent = new ReadableContent(context, uri, true);\n+            return this;\n+        }\n+\n+        /**\n+         * Set the constraints to be satisfied to execute the upload.\n+         *\n+         * @param constraints the constraints\n+         * @return Builder with provided constraints set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyOTk3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * @return A {@link UploadRequest}.\n          \n          \n            \n                     * @return An {@link UploadRequest}.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439629972", "createdAt": "2020-06-12T20:33:19Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/UploadRequest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+\n+import androidx.work.Constraints;\n+\n+import com.azure.android.core.util.CoreUtil;\n+\n+import java.io.File;\n+import java.util.Objects;\n+\n+/**\n+ * A type specifying parameters for upload transfer that should be enqueued in {@link TransferClient}.\n+ */\n+public final class UploadRequest {\n+    private final String storageClientId;\n+    private final String containerName;\n+    private final String blobName;\n+    private final ReadableContent readableContent;\n+    private final Constraints constraints;\n+\n+    /**\n+     * Create UploadRequest.\n+     *\n+     * @param storageClientId identifies the the blob storage client for the upload\n+     * @param containerName the name of the container to upload the content to\n+     * @param blobName  the name of the target blob holding uploaded content\n+     * @param readableContent the object describing the content in the device that needs to be uploaded\n+     * @param constraints the constraints to be satisfied to execute the upload\n+     */\n+    private UploadRequest(String storageClientId,\n+                  String containerName,\n+                  String blobName,\n+                  ReadableContent readableContent,\n+                  Constraints constraints) {\n+        this.storageClientId = storageClientId;\n+        this.containerName = containerName;\n+        this.blobName = blobName;\n+        this.readableContent = readableContent;\n+        this.constraints = constraints;\n+    }\n+\n+    /**\n+     * Get the unique identifier of the blob storage client to be used for the upload.\n+     *\n+     * @return the unique identifier of the blob storage client\n+     */\n+    String getStorageClientId() {\n+        return this.storageClientId;\n+    }\n+\n+    /**\n+     * Get the name of the container to upload the file to.\n+     *\n+     * @return the container name\n+     */\n+    String getContainerName() {\n+        return this.containerName;\n+    }\n+\n+    /**\n+     * Get the name of the target blob holding uploaded file.\n+     *\n+     * @return the blob name\n+     */\n+    String getBlobName() {\n+        return this.blobName;\n+    }\n+\n+    /**\n+     * Get the object describing the content in the device that needs to be uploaded.\n+     *\n+     * @return the content description\n+     */\n+    ReadableContent getReadableContent() {\n+        return this.readableContent;\n+    }\n+\n+    /**\n+     * Get the constraints to be satisfied to execute the upload.\n+     *\n+     * @return the constraints\n+     */\n+    Constraints getConstraints() {\n+        return this.constraints;\n+    }\n+\n+    /**\n+     * Builder for {@link UploadRequest}.\n+     */\n+    public static final class Builder {\n+        private String storageClientId;\n+        private String containerName;\n+        private String blobName;\n+        private ReadableContent readableContent;\n+        private Constraints constraints;\n+\n+        /**\n+         * Creates a {@link Builder}.\n+         */\n+        public Builder() {\n+        }\n+\n+        /**\n+         * Set the unique identifier of the blob storage client to be used for the upload.\n+         *\n+         * @param storageClientId the blob storage client id\n+         * @return Builder with provided blob storage client id set\n+         */\n+        public Builder storageClientId(String storageClientId) {\n+            this.storageClientId = storageClientId;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the name of the container to upload the file to.\n+         *\n+         * @param containerName the container name\n+         * @return Builder with provided container name set\n+         */\n+        public Builder containerName(String containerName) {\n+            this.containerName = containerName;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the name of the target blob holding uploaded file.\n+         *\n+         * @param blobName the blob name\n+         * @return Builder with provided blob name set\n+         */\n+        public Builder blobName(String blobName) {\n+            this.blobName = blobName;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the file in the device to upload.\n+         *\n+         * @param file the file\n+         * @return Builder with provided file set\n+         */\n+        public Builder file(File file) {\n+            Objects.requireNonNull(file, \"'file' cannot be null.\");\n+            if (this.readableContent != null && this.readableContent.isUsingContentResolver()) {\n+                throw new IllegalArgumentException(\"Both the contentUri and file cannot be set for the same request.\");\n+            }\n+            this.readableContent = new ReadableContent(null, Uri.fromFile(file), false);\n+            return this;\n+        }\n+\n+        /**\n+         * Set the content in the device to upload.\n+         *\n+         * @param context the application context\n+         * @param uri URI to the Content to upload\n+         * @return Builder with provided content description set\n+         */\n+        public Builder contentUri(Context context, Uri uri) {\n+            Objects.requireNonNull(context, \"'context' cannot be null.\");\n+            Objects.requireNonNull(uri, \"'uri' cannot be null.\");\n+            if (this.readableContent != null && !this.readableContent.isUsingContentResolver()) {\n+                throw new IllegalArgumentException(\"Both the contentUri and file cannot be set for the same request.\");\n+            }\n+            this.readableContent = new ReadableContent(context, uri, true);\n+            return this;\n+        }\n+\n+        /**\n+         * Set the constraints to be satisfied to execute the upload.\n+         *\n+         * @param constraints the constraints\n+         * @return Builder with provided constraints set\n+         */\n+        public Builder constraints(Constraints constraints) {\n+            this.constraints = constraints;\n+            return this;\n+        }\n+\n+        /**\n+         * Builds a {@link UploadRequest} based on this {@link Builder}'s configuration.\n+         *\n+         * @return A {@link UploadRequest}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzMDYxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param context the application context\n          \n          \n            \n                 * @param containerName the container to upload the file to\n          \n          \n            \n                 * @param blobName the name of the target blob holding uploaded file\n          \n          \n            \n                 * @param file the local file to upload\n          \n          \n            \n                 * @return LiveData that streams {@link TransferInfo} describing current state of the transfer\n          \n          \n            \n                 * @param context       The application context.\n          \n          \n            \n                 * @param containerName The container to upload the file to.\n          \n          \n            \n                 * @param blobName      The name of the target blob holding the uploaded file.\n          \n          \n            \n                 * @param file          The local file to upload.\n          \n          \n            \n                 * @return A LiveData that streams {@link TransferInfo} describing the current state of the transfer.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439630615", "createdAt": "2020-06-12T20:35:04Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -61,6 +86,146 @@ public String getBlobServiceUrl() {\n         return this.serviceClient.getBaseUrl();\n     }\n \n+    /**\n+     * Upload the content of a file.\n+     *\n+     * @param context the application context\n+     * @param containerName the container to upload the file to\n+     * @param blobName the name of the target blob holding uploaded file\n+     * @param file the local file to upload\n+     * @return LiveData that streams {@link TransferInfo} describing current state of the transfer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzMDcyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Upload content identified by a given Uri.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @param context the application context\n          \n          \n            \n                 * @param containerName the container to upload the file to\n          \n          \n            \n                 * @param blobName the name of the target blob holding uploaded file\n          \n          \n            \n                 * @param contentUri URI to the Content to upload, the contentUri is resolved using\n          \n          \n            \n                 *   {@link android.content.ContentResolver#openAssetFileDescriptor(Uri, String)}\n          \n          \n            \n                 *   with mode as \"r\". The supported URI schemes are: 'content://', 'file://' and 'android.resource://'\n          \n          \n            \n                 * @return LiveData that streams {@link TransferInfo} describing current state of the transfer\n          \n          \n            \n                 * Upload content identified by a given URI.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @param context       The application context.\n          \n          \n            \n                 * @param containerName The container to upload the file to.\n          \n          \n            \n                 * @param blobName      The name of the target blob holding the uploaded file.\n          \n          \n            \n                 * @param contentUri    The URI to the Content to upload, the contentUri is resolved using\n          \n          \n            \n                 *                      {@link android.content.ContentResolver#openAssetFileDescriptor(Uri, String)} with mode as\n          \n          \n            \n                 *                      \"r\". The supported URI schemes are: 'content://', 'file://' and 'android.resource://'.\n          \n          \n            \n                 * @return A LiveData that streams {@link TransferInfo} describing the current state of the transfer.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439630726", "createdAt": "2020-06-12T20:35:20Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -61,6 +86,146 @@ public String getBlobServiceUrl() {\n         return this.serviceClient.getBaseUrl();\n     }\n \n+    /**\n+     * Upload the content of a file.\n+     *\n+     * @param context the application context\n+     * @param containerName the container to upload the file to\n+     * @param blobName the name of the target blob holding uploaded file\n+     * @param file the local file to upload\n+     * @return LiveData that streams {@link TransferInfo} describing current state of the transfer\n+     */\n+    public LiveData<TransferInfo> upload(Context context,\n+                                         String containerName,\n+                                         String blobName, File file) {\n+        final UploadRequest request = new UploadRequest.Builder()\n+            .storageClientId(this.id)\n+            .containerName(containerName)\n+            .blobName(blobName)\n+            .file(file)\n+            .constraints(this.transferConstraints)\n+            .build();\n+        return TransferClient.getInstance(context)\n+            .upload(request);\n+    }\n+\n+    /**\n+     * Upload content identified by a given Uri.\n+     *\n+     * @param context the application context\n+     * @param containerName the container to upload the file to\n+     * @param blobName the name of the target blob holding uploaded file\n+     * @param contentUri URI to the Content to upload, the contentUri is resolved using\n+     *   {@link android.content.ContentResolver#openAssetFileDescriptor(Uri, String)}\n+     *   with mode as \"r\". The supported URI schemes are: 'content://', 'file://' and 'android.resource://'\n+     * @return LiveData that streams {@link TransferInfo} describing current state of the transfer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzMDc5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param context the application context\n          \n          \n            \n                 * @param containerName The container to download the blob from.\n          \n          \n            \n                 * @param blobName The name of the target blob to download.\n          \n          \n            \n                 * @param file The local file to download to.\n          \n          \n            \n                 * @return LiveData that streams {@link TransferInfo} describing the current state of the download.\n          \n          \n            \n                 * @param context       The application context.\n          \n          \n            \n                 * @param containerName The container to download the blob from.\n          \n          \n            \n                 * @param blobName      The name of the target blob to download.\n          \n          \n            \n                 * @param file          The local file to download to.\n          \n          \n            \n                 * @return A LiveData that streams {@link TransferInfo} describing the current state of the download.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439630796", "createdAt": "2020-06-12T20:35:32Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -61,6 +86,146 @@ public String getBlobServiceUrl() {\n         return this.serviceClient.getBaseUrl();\n     }\n \n+    /**\n+     * Upload the content of a file.\n+     *\n+     * @param context the application context\n+     * @param containerName the container to upload the file to\n+     * @param blobName the name of the target blob holding uploaded file\n+     * @param file the local file to upload\n+     * @return LiveData that streams {@link TransferInfo} describing current state of the transfer\n+     */\n+    public LiveData<TransferInfo> upload(Context context,\n+                                         String containerName,\n+                                         String blobName, File file) {\n+        final UploadRequest request = new UploadRequest.Builder()\n+            .storageClientId(this.id)\n+            .containerName(containerName)\n+            .blobName(blobName)\n+            .file(file)\n+            .constraints(this.transferConstraints)\n+            .build();\n+        return TransferClient.getInstance(context)\n+            .upload(request);\n+    }\n+\n+    /**\n+     * Upload content identified by a given Uri.\n+     *\n+     * @param context the application context\n+     * @param containerName the container to upload the file to\n+     * @param blobName the name of the target blob holding uploaded file\n+     * @param contentUri URI to the Content to upload, the contentUri is resolved using\n+     *   {@link android.content.ContentResolver#openAssetFileDescriptor(Uri, String)}\n+     *   with mode as \"r\". The supported URI schemes are: 'content://', 'file://' and 'android.resource://'\n+     * @return LiveData that streams {@link TransferInfo} describing current state of the transfer\n+     */\n+    public LiveData<TransferInfo> upload(Context context,\n+                                         String containerName,\n+                                         String blobName,\n+                                         Uri contentUri) {\n+        final UploadRequest request = new UploadRequest.Builder()\n+            .storageClientId(this.id)\n+            .containerName(containerName)\n+            .blobName(blobName)\n+            .contentUri(context, contentUri)\n+            .constraints(this.transferConstraints)\n+            .build();\n+        return TransferClient.getInstance(context)\n+            .upload(request);\n+    }\n+\n+    /**\n+     * Download a blob.\n+     *\n+     * @param context the application context\n+     * @param containerName The container to download the blob from.\n+     * @param blobName The name of the target blob to download.\n+     * @param file The local file to download to.\n+     * @return LiveData that streams {@link TransferInfo} describing the current state of the download.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzMDkwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param context the application context\n          \n          \n            \n                 * @param containerName The container to download the blob from.\n          \n          \n            \n                 * @param blobName The name of the target blob to download.\n          \n          \n            \n                 * @param contentUri The URI to the local content where the downloaded blob will be stored.\n          \n          \n            \n                 * @return LiveData that streams {@link TransferInfo} describing the current state of the download.\n          \n          \n            \n                 * @param context       The application context.\n          \n          \n            \n                 * @param containerName The container to download the blob from.\n          \n          \n            \n                 * @param blobName      The name of the target blob to download.\n          \n          \n            \n                 * @param contentUri    The URI to the local content where the downloaded blob will be stored.\n          \n          \n            \n                 * @return LiveData that streams {@link TransferInfo} describing the current state of the download.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439630900", "createdAt": "2020-06-12T20:35:48Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -61,6 +86,146 @@ public String getBlobServiceUrl() {\n         return this.serviceClient.getBaseUrl();\n     }\n \n+    /**\n+     * Upload the content of a file.\n+     *\n+     * @param context the application context\n+     * @param containerName the container to upload the file to\n+     * @param blobName the name of the target blob holding uploaded file\n+     * @param file the local file to upload\n+     * @return LiveData that streams {@link TransferInfo} describing current state of the transfer\n+     */\n+    public LiveData<TransferInfo> upload(Context context,\n+                                         String containerName,\n+                                         String blobName, File file) {\n+        final UploadRequest request = new UploadRequest.Builder()\n+            .storageClientId(this.id)\n+            .containerName(containerName)\n+            .blobName(blobName)\n+            .file(file)\n+            .constraints(this.transferConstraints)\n+            .build();\n+        return TransferClient.getInstance(context)\n+            .upload(request);\n+    }\n+\n+    /**\n+     * Upload content identified by a given Uri.\n+     *\n+     * @param context the application context\n+     * @param containerName the container to upload the file to\n+     * @param blobName the name of the target blob holding uploaded file\n+     * @param contentUri URI to the Content to upload, the contentUri is resolved using\n+     *   {@link android.content.ContentResolver#openAssetFileDescriptor(Uri, String)}\n+     *   with mode as \"r\". The supported URI schemes are: 'content://', 'file://' and 'android.resource://'\n+     * @return LiveData that streams {@link TransferInfo} describing current state of the transfer\n+     */\n+    public LiveData<TransferInfo> upload(Context context,\n+                                         String containerName,\n+                                         String blobName,\n+                                         Uri contentUri) {\n+        final UploadRequest request = new UploadRequest.Builder()\n+            .storageClientId(this.id)\n+            .containerName(containerName)\n+            .blobName(blobName)\n+            .contentUri(context, contentUri)\n+            .constraints(this.transferConstraints)\n+            .build();\n+        return TransferClient.getInstance(context)\n+            .upload(request);\n+    }\n+\n+    /**\n+     * Download a blob.\n+     *\n+     * @param context the application context\n+     * @param containerName The container to download the blob from.\n+     * @param blobName The name of the target blob to download.\n+     * @param file The local file to download to.\n+     * @return LiveData that streams {@link TransferInfo} describing the current state of the download.\n+     */\n+    public LiveData<TransferInfo> download(Context context,\n+                                           String containerName,\n+                                           String blobName,\n+                                           File file) {\n+        final DownloadRequest request = new DownloadRequest.Builder()\n+            .storageClientId(this.id)\n+            .containerName(containerName)\n+            .blobName(blobName)\n+            .file(file)\n+            .constraints(this.transferConstraints)\n+            .build();\n+        return TransferClient.getInstance(context)\n+            .download(request);\n+    }\n+\n+    /**\n+     * Download a blob.\n+     *\n+     * @param context the application context\n+     * @param containerName The container to download the blob from.\n+     * @param blobName The name of the target blob to download.\n+     * @param contentUri The URI to the local content where the downloaded blob will be stored.\n+     * @return LiveData that streams {@link TransferInfo} describing the current state of the download.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzMTAzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Pause a transfer identified by the given transfer id. The pause operation\n          \n          \n            \n                 * is a best-effort, and a transfer that is already executing may continue to\n          \n          \n            \n                 * transfer.\n          \n          \n            \n                 *\n          \n          \n            \n                 * Upon successful scheduling of the pause, any observer observing on\n          \n          \n            \n                 * {@link LiveData<TransferInfo>} for this transfer receives a {@link TransferInfo}\n          \n          \n            \n                 * event with state {@link TransferInfo.State#USER_PAUSED}.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @param context the application context\n          \n          \n            \n                 * @param transferId the transfer id identifies the transfer to pause.\n          \n          \n            \n                 * Pause a transfer identified by the given transfer ID. The pause operation is a best-effort, and a transfer\n          \n          \n            \n                 * that is already executing may continue to transfer.\n          \n          \n            \n                 * <p>\n          \n          \n            \n                 * Upon successful scheduling of the pause, any observer observing on {@link LiveData<TransferInfo>} for this\n          \n          \n            \n                 * transfer receives a {@link TransferInfo} event with state {@link TransferInfo.State#USER_PAUSED}.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @param context    The application context.\n          \n          \n            \n                 * @param transferId The transfer ID identifies the transfer to pause.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439631035", "createdAt": "2020-06-12T20:36:05Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -61,6 +86,146 @@ public String getBlobServiceUrl() {\n         return this.serviceClient.getBaseUrl();\n     }\n \n+    /**\n+     * Upload the content of a file.\n+     *\n+     * @param context the application context\n+     * @param containerName the container to upload the file to\n+     * @param blobName the name of the target blob holding uploaded file\n+     * @param file the local file to upload\n+     * @return LiveData that streams {@link TransferInfo} describing current state of the transfer\n+     */\n+    public LiveData<TransferInfo> upload(Context context,\n+                                         String containerName,\n+                                         String blobName, File file) {\n+        final UploadRequest request = new UploadRequest.Builder()\n+            .storageClientId(this.id)\n+            .containerName(containerName)\n+            .blobName(blobName)\n+            .file(file)\n+            .constraints(this.transferConstraints)\n+            .build();\n+        return TransferClient.getInstance(context)\n+            .upload(request);\n+    }\n+\n+    /**\n+     * Upload content identified by a given Uri.\n+     *\n+     * @param context the application context\n+     * @param containerName the container to upload the file to\n+     * @param blobName the name of the target blob holding uploaded file\n+     * @param contentUri URI to the Content to upload, the contentUri is resolved using\n+     *   {@link android.content.ContentResolver#openAssetFileDescriptor(Uri, String)}\n+     *   with mode as \"r\". The supported URI schemes are: 'content://', 'file://' and 'android.resource://'\n+     * @return LiveData that streams {@link TransferInfo} describing current state of the transfer\n+     */\n+    public LiveData<TransferInfo> upload(Context context,\n+                                         String containerName,\n+                                         String blobName,\n+                                         Uri contentUri) {\n+        final UploadRequest request = new UploadRequest.Builder()\n+            .storageClientId(this.id)\n+            .containerName(containerName)\n+            .blobName(blobName)\n+            .contentUri(context, contentUri)\n+            .constraints(this.transferConstraints)\n+            .build();\n+        return TransferClient.getInstance(context)\n+            .upload(request);\n+    }\n+\n+    /**\n+     * Download a blob.\n+     *\n+     * @param context the application context\n+     * @param containerName The container to download the blob from.\n+     * @param blobName The name of the target blob to download.\n+     * @param file The local file to download to.\n+     * @return LiveData that streams {@link TransferInfo} describing the current state of the download.\n+     */\n+    public LiveData<TransferInfo> download(Context context,\n+                                           String containerName,\n+                                           String blobName,\n+                                           File file) {\n+        final DownloadRequest request = new DownloadRequest.Builder()\n+            .storageClientId(this.id)\n+            .containerName(containerName)\n+            .blobName(blobName)\n+            .file(file)\n+            .constraints(this.transferConstraints)\n+            .build();\n+        return TransferClient.getInstance(context)\n+            .download(request);\n+    }\n+\n+    /**\n+     * Download a blob.\n+     *\n+     * @param context the application context\n+     * @param containerName The container to download the blob from.\n+     * @param blobName The name of the target blob to download.\n+     * @param contentUri The URI to the local content where the downloaded blob will be stored.\n+     * @return LiveData that streams {@link TransferInfo} describing the current state of the download.\n+     */\n+    public LiveData<TransferInfo> download(Context context,\n+                                           String containerName,\n+                                           String blobName,\n+                                           Uri contentUri) {\n+        final DownloadRequest request = new DownloadRequest.Builder()\n+            .storageClientId(this.id)\n+            .containerName(containerName)\n+            .blobName(blobName)\n+            .contentUri(context, contentUri)\n+            .constraints(this.transferConstraints)\n+            .build();\n+        return TransferClient.getInstance(context)\n+            .download(request);\n+    }\n+\n+    /**\n+     * Pause a transfer identified by the given transfer id. The pause operation\n+     * is a best-effort, and a transfer that is already executing may continue to\n+     * transfer.\n+     *\n+     * Upon successful scheduling of the pause, any observer observing on\n+     * {@link LiveData<TransferInfo>} for this transfer receives a {@link TransferInfo}\n+     * event with state {@link TransferInfo.State#USER_PAUSED}.\n+     *\n+     * @param context the application context\n+     * @param transferId the transfer id identifies the transfer to pause.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzMTE1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param context the application context\n          \n          \n            \n                 * @param transferId the transfer id identifies the transfer to resume.\n          \n          \n            \n                 * @return LiveData that streams {@link TransferInfo} describing the current state of the transfer\n          \n          \n            \n                 * @param context    The application context\n          \n          \n            \n                 * @param transferId The transfer ID identifies the transfer to resume.\n          \n          \n            \n                 * @return A LiveData that streams {@link TransferInfo} describing the current state of the transfer.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439631150", "createdAt": "2020-06-12T20:36:20Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -61,6 +86,146 @@ public String getBlobServiceUrl() {\n         return this.serviceClient.getBaseUrl();\n     }\n \n+    /**\n+     * Upload the content of a file.\n+     *\n+     * @param context the application context\n+     * @param containerName the container to upload the file to\n+     * @param blobName the name of the target blob holding uploaded file\n+     * @param file the local file to upload\n+     * @return LiveData that streams {@link TransferInfo} describing current state of the transfer\n+     */\n+    public LiveData<TransferInfo> upload(Context context,\n+                                         String containerName,\n+                                         String blobName, File file) {\n+        final UploadRequest request = new UploadRequest.Builder()\n+            .storageClientId(this.id)\n+            .containerName(containerName)\n+            .blobName(blobName)\n+            .file(file)\n+            .constraints(this.transferConstraints)\n+            .build();\n+        return TransferClient.getInstance(context)\n+            .upload(request);\n+    }\n+\n+    /**\n+     * Upload content identified by a given Uri.\n+     *\n+     * @param context the application context\n+     * @param containerName the container to upload the file to\n+     * @param blobName the name of the target blob holding uploaded file\n+     * @param contentUri URI to the Content to upload, the contentUri is resolved using\n+     *   {@link android.content.ContentResolver#openAssetFileDescriptor(Uri, String)}\n+     *   with mode as \"r\". The supported URI schemes are: 'content://', 'file://' and 'android.resource://'\n+     * @return LiveData that streams {@link TransferInfo} describing current state of the transfer\n+     */\n+    public LiveData<TransferInfo> upload(Context context,\n+                                         String containerName,\n+                                         String blobName,\n+                                         Uri contentUri) {\n+        final UploadRequest request = new UploadRequest.Builder()\n+            .storageClientId(this.id)\n+            .containerName(containerName)\n+            .blobName(blobName)\n+            .contentUri(context, contentUri)\n+            .constraints(this.transferConstraints)\n+            .build();\n+        return TransferClient.getInstance(context)\n+            .upload(request);\n+    }\n+\n+    /**\n+     * Download a blob.\n+     *\n+     * @param context the application context\n+     * @param containerName The container to download the blob from.\n+     * @param blobName The name of the target blob to download.\n+     * @param file The local file to download to.\n+     * @return LiveData that streams {@link TransferInfo} describing the current state of the download.\n+     */\n+    public LiveData<TransferInfo> download(Context context,\n+                                           String containerName,\n+                                           String blobName,\n+                                           File file) {\n+        final DownloadRequest request = new DownloadRequest.Builder()\n+            .storageClientId(this.id)\n+            .containerName(containerName)\n+            .blobName(blobName)\n+            .file(file)\n+            .constraints(this.transferConstraints)\n+            .build();\n+        return TransferClient.getInstance(context)\n+            .download(request);\n+    }\n+\n+    /**\n+     * Download a blob.\n+     *\n+     * @param context the application context\n+     * @param containerName The container to download the blob from.\n+     * @param blobName The name of the target blob to download.\n+     * @param contentUri The URI to the local content where the downloaded blob will be stored.\n+     * @return LiveData that streams {@link TransferInfo} describing the current state of the download.\n+     */\n+    public LiveData<TransferInfo> download(Context context,\n+                                           String containerName,\n+                                           String blobName,\n+                                           Uri contentUri) {\n+        final DownloadRequest request = new DownloadRequest.Builder()\n+            .storageClientId(this.id)\n+            .containerName(containerName)\n+            .blobName(blobName)\n+            .contentUri(context, contentUri)\n+            .constraints(this.transferConstraints)\n+            .build();\n+        return TransferClient.getInstance(context)\n+            .download(request);\n+    }\n+\n+    /**\n+     * Pause a transfer identified by the given transfer id. The pause operation\n+     * is a best-effort, and a transfer that is already executing may continue to\n+     * transfer.\n+     *\n+     * Upon successful scheduling of the pause, any observer observing on\n+     * {@link LiveData<TransferInfo>} for this transfer receives a {@link TransferInfo}\n+     * event with state {@link TransferInfo.State#USER_PAUSED}.\n+     *\n+     * @param context the application context\n+     * @param transferId the transfer id identifies the transfer to pause.\n+     */\n+    public void pause(Context context, long transferId) {\n+        TransferClient.getInstance(context)\n+            .pause(transferId);\n+    }\n+\n+    /**\n+     * Resume a paused transfer.\n+     *\n+     * @param context the application context\n+     * @param transferId the transfer id identifies the transfer to resume.\n+     * @return LiveData that streams {@link TransferInfo} describing the current state of the transfer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzMTI4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *\n          \n          \n            \n                 * <p>", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439631280", "createdAt": "2020-06-12T20:36:41Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -61,6 +86,146 @@ public String getBlobServiceUrl() {\n         return this.serviceClient.getBaseUrl();\n     }\n \n+    /**\n+     * Upload the content of a file.\n+     *\n+     * @param context the application context\n+     * @param containerName the container to upload the file to\n+     * @param blobName the name of the target blob holding uploaded file\n+     * @param file the local file to upload\n+     * @return LiveData that streams {@link TransferInfo} describing current state of the transfer\n+     */\n+    public LiveData<TransferInfo> upload(Context context,\n+                                         String containerName,\n+                                         String blobName, File file) {\n+        final UploadRequest request = new UploadRequest.Builder()\n+            .storageClientId(this.id)\n+            .containerName(containerName)\n+            .blobName(blobName)\n+            .file(file)\n+            .constraints(this.transferConstraints)\n+            .build();\n+        return TransferClient.getInstance(context)\n+            .upload(request);\n+    }\n+\n+    /**\n+     * Upload content identified by a given Uri.\n+     *\n+     * @param context the application context\n+     * @param containerName the container to upload the file to\n+     * @param blobName the name of the target blob holding uploaded file\n+     * @param contentUri URI to the Content to upload, the contentUri is resolved using\n+     *   {@link android.content.ContentResolver#openAssetFileDescriptor(Uri, String)}\n+     *   with mode as \"r\". The supported URI schemes are: 'content://', 'file://' and 'android.resource://'\n+     * @return LiveData that streams {@link TransferInfo} describing current state of the transfer\n+     */\n+    public LiveData<TransferInfo> upload(Context context,\n+                                         String containerName,\n+                                         String blobName,\n+                                         Uri contentUri) {\n+        final UploadRequest request = new UploadRequest.Builder()\n+            .storageClientId(this.id)\n+            .containerName(containerName)\n+            .blobName(blobName)\n+            .contentUri(context, contentUri)\n+            .constraints(this.transferConstraints)\n+            .build();\n+        return TransferClient.getInstance(context)\n+            .upload(request);\n+    }\n+\n+    /**\n+     * Download a blob.\n+     *\n+     * @param context the application context\n+     * @param containerName The container to download the blob from.\n+     * @param blobName The name of the target blob to download.\n+     * @param file The local file to download to.\n+     * @return LiveData that streams {@link TransferInfo} describing the current state of the download.\n+     */\n+    public LiveData<TransferInfo> download(Context context,\n+                                           String containerName,\n+                                           String blobName,\n+                                           File file) {\n+        final DownloadRequest request = new DownloadRequest.Builder()\n+            .storageClientId(this.id)\n+            .containerName(containerName)\n+            .blobName(blobName)\n+            .file(file)\n+            .constraints(this.transferConstraints)\n+            .build();\n+        return TransferClient.getInstance(context)\n+            .download(request);\n+    }\n+\n+    /**\n+     * Download a blob.\n+     *\n+     * @param context the application context\n+     * @param containerName The container to download the blob from.\n+     * @param blobName The name of the target blob to download.\n+     * @param contentUri The URI to the local content where the downloaded blob will be stored.\n+     * @return LiveData that streams {@link TransferInfo} describing the current state of the download.\n+     */\n+    public LiveData<TransferInfo> download(Context context,\n+                                           String containerName,\n+                                           String blobName,\n+                                           Uri contentUri) {\n+        final DownloadRequest request = new DownloadRequest.Builder()\n+            .storageClientId(this.id)\n+            .containerName(containerName)\n+            .blobName(blobName)\n+            .contentUri(context, contentUri)\n+            .constraints(this.transferConstraints)\n+            .build();\n+        return TransferClient.getInstance(context)\n+            .download(request);\n+    }\n+\n+    /**\n+     * Pause a transfer identified by the given transfer id. The pause operation\n+     * is a best-effort, and a transfer that is already executing may continue to\n+     * transfer.\n+     *\n+     * Upon successful scheduling of the pause, any observer observing on\n+     * {@link LiveData<TransferInfo>} for this transfer receives a {@link TransferInfo}\n+     * event with state {@link TransferInfo.State#USER_PAUSED}.\n+     *\n+     * @param context the application context\n+     * @param transferId the transfer id identifies the transfer to pause.\n+     */\n+    public void pause(Context context, long transferId) {\n+        TransferClient.getInstance(context)\n+            .pause(transferId);\n+    }\n+\n+    /**\n+     * Resume a paused transfer.\n+     *\n+     * @param context the application context\n+     * @param transferId the transfer id identifies the transfer to resume.\n+     * @return LiveData that streams {@link TransferInfo} describing the current state of the transfer\n+     */\n+    public LiveData<TransferInfo> resume(Context context, long transferId) {\n+        return TransferClient.getInstance(context)\n+            .resume(transferId);\n+    }\n+\n+    /**\n+     * Cancel a transfer identified by the given transfer ID. The cancel operation is a best-effort, and a transfer\n+     * that is already executing may continue to transfer.\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzMTUxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * @param storageBlobClientId the unique id for the {@link StorageBlobClient} this builder builds.\n          \n          \n            \n                     *     This identifier is used to associate this {@link StorageBlobClient} with the upload, download transfers\n          \n          \n            \n                     *     it initiates. When a transfer is reloaded from disk (e.g. after an application crash), it can only be\n          \n          \n            \n                     *     resumed once a client with the same storageBlobClientId has been initialized.\n          \n          \n            \n                     * @param storageBlobClientId The unique ID for the {@link StorageBlobClient} this builder builds. This\n          \n          \n            \n                     *                            identifier is used to associate this {@link StorageBlobClient} with the upload and\n          \n          \n            \n                     *                            download transfers it initiates. When a transfer is reloaded from disk (e.g.\n          \n          \n            \n                     *                            after an application crash), it can only be resumed once a client with the same\n          \n          \n            \n                     *                            storageBlobClientId has been initialized.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439631519", "createdAt": "2020-06-12T20:37:13Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -551,13 +716,25 @@ public ServiceCall commitBlockListWithRestResponse(String containerName,\n      * Builder for {@link StorageBlobClient}.\n      */\n     public static class Builder {\n+        private final String storageBlobClientId;\n         private final ServiceClient.Builder serviceClientBuilder;\n+        private final Constraints.Builder transferConstraintsBuilder;\n+        private static final StorageBlobClientMap STORAGE_BLOB_CLIENTS;\n+\n+        static {\n+            STORAGE_BLOB_CLIENTS = StorageBlobClientMap.getInstance();\n+        }\n \n         /**\n          * Creates a {@link Builder}.\n+         *\n+         * @param storageBlobClientId the unique id for the {@link StorageBlobClient} this builder builds.\n+         *     This identifier is used to associate this {@link StorageBlobClient} with the upload, download transfers\n+         *     it initiates. When a transfer is reloaded from disk (e.g. after an application crash), it can only be\n+         *     resumed once a client with the same storageBlobClientId has been initialized.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzMTU4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * @param storageBlobClientId the unique id for the {@link StorageBlobClient} this builder builds.\n          \n          \n            \n                     * @param storageBlobClientId  The unique ID for the {@link StorageBlobClient} this builder builds.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439631588", "createdAt": "2020-06-12T20:37:24Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -567,18 +744,36 @@ public Builder() {\n          * Creates a {@link Builder} that uses the provided {@link com.azure.android.core.http.ServiceClient.Builder}\n          * to build a {@link ServiceClient} for the {@link StorageBlobClient}.\n          *\n+         * @param storageBlobClientId the unique id for the {@link StorageBlobClient} this builder builds.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzMTcxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * @return Builder with provided blob service url set\n          \n          \n            \n                     * @return An updated {@link Builder} with the provided blob service URL set.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439631715", "createdAt": "2020-06-12T20:37:43Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -567,18 +744,36 @@ public Builder() {\n          * Creates a {@link Builder} that uses the provided {@link com.azure.android.core.http.ServiceClient.Builder}\n          * to build a {@link ServiceClient} for the {@link StorageBlobClient}.\n          *\n+         * @param storageBlobClientId the unique id for the {@link StorageBlobClient} this builder builds.\n          * @param serviceClientBuilder The {@link com.azure.android.core.http.ServiceClient.Builder}.\n          */\n-        public Builder(ServiceClient.Builder serviceClientBuilder) {\n-            Objects.requireNonNull(serviceClientBuilder, \"serviceClientBuilder cannot be null.\");\n-            this.serviceClientBuilder = serviceClientBuilder;\n+        public Builder(String storageBlobClientId, ServiceClient.Builder serviceClientBuilder) {\n+            this(storageBlobClientId, serviceClientBuilder, new Constraints.Builder());\n+            this.transferConstraintsBuilder\n+                .setRequiredNetworkType(NetworkType.CONNECTED);\n+        }\n+\n+        private Builder(String storageBlobClientId,\n+                        ServiceClient.Builder serviceClientBuilder,\n+                        Constraints.Builder transferConstraintsBuilder) {\n+            if (CoreUtil.isNullOrEmpty(storageBlobClientId)) {\n+                throw new IllegalArgumentException(\"'storageBlobClientId' cannot be null or empty.\");\n+            }\n+            if (Builder.STORAGE_BLOB_CLIENTS.contains(storageBlobClientId)) {\n+                throw new IllegalArgumentException(\"A StorageBlobClient with id '\" + storageBlobClientId + \"' already exists.\");\n+            }\n+            this.storageBlobClientId = storageBlobClientId;\n+            this.serviceClientBuilder\n+                = Objects.requireNonNull(serviceClientBuilder, \"serviceClientBuilder cannot be null.\");\n+            this.transferConstraintsBuilder\n+                = Objects.requireNonNull(transferConstraintsBuilder, \"transferConstraintsBuilder cannot be null.\");\n         }\n \n         /**\n          * Sets the base URL for the {@link StorageBlobClient}.\n          *\n          * @param blobServiceUrl The blob service base URL.\n-         * @return An updated {@link Builder} with these settings applied.\n+         * @return Builder with provided blob service url set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 282}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzMTc1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * @return Builder with provided credentials interceptor set\n          \n          \n            \n                     * @return An updated {@link Builder} with the provided credentials interceptor set.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439631757", "createdAt": "2020-06-12T20:37:52Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -590,24 +785,120 @@ public Builder setBlobServiceUrl(String blobServiceUrl) {\n          * Sets an interceptor used to authenticate the blob service request.\n          *\n          * @param credentialInterceptor The credential interceptor.\n-         * @return An updated {@link Builder} with these settings applied.\n+         * @return Builder with provided credentials interceptor set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 291}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzMTg0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * Sets whether device should be charging for running the transfers.\n          \n          \n            \n                     * The default value is {@code false}.\n          \n          \n            \n                     *\n          \n          \n            \n                     * @param requiresCharging {@code true} if device must be charging for the transfer to run\n          \n          \n            \n                     * @return Builder with provided charging requirement set\n          \n          \n            \n                     * Sets whether device should be charging for running the transfers. The default value is {@code false}.\n          \n          \n            \n                     *\n          \n          \n            \n                     * @param requiresCharging {@code true} if the device must be charging for the transfer to run.\n          \n          \n            \n                     * @return An updated {@link Builder} with the provided charging requirement set.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439631849", "createdAt": "2020-06-12T20:38:05Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -590,24 +785,120 @@ public Builder setBlobServiceUrl(String blobServiceUrl) {\n          * Sets an interceptor used to authenticate the blob service request.\n          *\n          * @param credentialInterceptor The credential interceptor.\n-         * @return An updated {@link Builder} with these settings applied.\n+         * @return Builder with provided credentials interceptor set\n          */\n         public Builder setCredentialInterceptor(Interceptor credentialInterceptor) {\n             this.serviceClientBuilder.setCredentialsInterceptor(credentialInterceptor);\n             return this;\n         }\n \n+        /**\n+         * Sets whether device should be charging for running the transfers.\n+         * The default value is {@code false}.\n+         *\n+         * @param requiresCharging {@code true} if device must be charging for the transfer to run\n+         * @return Builder with provided charging requirement set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 303}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzMTk1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * Sets whether device should be idle for running the transfers.\n          \n          \n            \n                     * The default value is {@code false}.\n          \n          \n            \n                     *\n          \n          \n            \n                     * @param requiresDeviceIdle {@code true} if device must be idle for transfers to run\n          \n          \n            \n                     * @return An updated {@link Builder} with these settings applied.\n          \n          \n            \n                     * Sets whether device should be idle for running the transfers. The default value is {@code false}.\n          \n          \n            \n                     *\n          \n          \n            \n                     * @param requiresDeviceIdle {@code true} if the device must be idle for transfers to run.\n          \n          \n            \n                     * @return An updated {@link Builder} with the provided setting set.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439631952", "createdAt": "2020-06-12T20:38:20Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -590,24 +785,120 @@ public Builder setBlobServiceUrl(String blobServiceUrl) {\n          * Sets an interceptor used to authenticate the blob service request.\n          *\n          * @param credentialInterceptor The credential interceptor.\n-         * @return An updated {@link Builder} with these settings applied.\n+         * @return Builder with provided credentials interceptor set\n          */\n         public Builder setCredentialInterceptor(Interceptor credentialInterceptor) {\n             this.serviceClientBuilder.setCredentialsInterceptor(credentialInterceptor);\n             return this;\n         }\n \n+        /**\n+         * Sets whether device should be charging for running the transfers.\n+         * The default value is {@code false}.\n+         *\n+         * @param requiresCharging {@code true} if device must be charging for the transfer to run\n+         * @return Builder with provided charging requirement set\n+         */\n+        public Builder setRequiresCharging(boolean requiresCharging) {\n+            this.transferConstraintsBuilder.setRequiresCharging(requiresCharging);\n+            return this;\n+        }\n+\n+        /**\n+         * Sets whether device should be idle for running the transfers.\n+         * The default value is {@code false}.\n+         *\n+         * @param requiresDeviceIdle {@code true} if device must be idle for transfers to run\n+         * @return An updated {@link Builder} with these settings applied.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 315}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzMjAyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * Sets the particular {@link NetworkType} the device should be in for running\n          \n          \n            \n                     * the transfers.\n          \n          \n            \n                     *\n          \n          \n            \n                     * The default network type that {@link TransferClient} uses is {@link NetworkType#CONNECTED}.\n          \n          \n            \n                     *\n          \n          \n            \n                     * @param networkType The type of network required for transfers to run\n          \n          \n            \n                     * @return Builder with provided network type set\n          \n          \n            \n                     * Sets the particular {@link NetworkType} the device should be in for running the transfers.\n          \n          \n            \n                     * <p>\n          \n          \n            \n                     * The default network type that {@link TransferClient} uses is {@link NetworkType#CONNECTED}.\n          \n          \n            \n                     *\n          \n          \n            \n                     * @param networkType The type of network required for transfers to run.\n          \n          \n            \n                     * @return An updated {@link Builder} with the provided network type set.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439632025", "createdAt": "2020-06-12T20:38:32Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -590,24 +785,120 @@ public Builder setBlobServiceUrl(String blobServiceUrl) {\n          * Sets an interceptor used to authenticate the blob service request.\n          *\n          * @param credentialInterceptor The credential interceptor.\n-         * @return An updated {@link Builder} with these settings applied.\n+         * @return Builder with provided credentials interceptor set\n          */\n         public Builder setCredentialInterceptor(Interceptor credentialInterceptor) {\n             this.serviceClientBuilder.setCredentialsInterceptor(credentialInterceptor);\n             return this;\n         }\n \n+        /**\n+         * Sets whether device should be charging for running the transfers.\n+         * The default value is {@code false}.\n+         *\n+         * @param requiresCharging {@code true} if device must be charging for the transfer to run\n+         * @return Builder with provided charging requirement set\n+         */\n+        public Builder setRequiresCharging(boolean requiresCharging) {\n+            this.transferConstraintsBuilder.setRequiresCharging(requiresCharging);\n+            return this;\n+        }\n+\n+        /**\n+         * Sets whether device should be idle for running the transfers.\n+         * The default value is {@code false}.\n+         *\n+         * @param requiresDeviceIdle {@code true} if device must be idle for transfers to run\n+         * @return An updated {@link Builder} with these settings applied.\n+         */\n+        @RequiresApi(23)\n+        public Builder setRequiresDeviceIdle(boolean requiresDeviceIdle) {\n+            if (Build.VERSION.SDK_INT >= 23) {\n+                this.transferConstraintsBuilder.setRequiresDeviceIdle(requiresDeviceIdle);\n+            }\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the particular {@link NetworkType} the device should be in for running\n+         * the transfers.\n+         *\n+         * The default network type that {@link TransferClient} uses is {@link NetworkType#CONNECTED}.\n+         *\n+         * @param networkType The type of network required for transfers to run\n+         * @return Builder with provided network type set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 332}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzMjEwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * Sets whether device battery should be at an acceptable level for running the transfers.\n          \n          \n            \n                     * The default value is {@code false}.\n          \n          \n            \n                     *\n          \n          \n            \n                     * @param requiresBatteryNotLow {@code true} if the battery should be at an acceptable level\n          \n          \n            \n                     *                              for the transfers to run\n          \n          \n            \n                     * @return Builder with provided battery requirement set\n          \n          \n            \n                     * Sets whether device battery should be at an acceptable level for running the transfers. The default value\n          \n          \n            \n                     * is {@code false}.\n          \n          \n            \n                     *\n          \n          \n            \n                     * @param requiresBatteryNotLow {@code true} if the battery should be at an acceptable level for the\n          \n          \n            \n                     *                                          transfers to run.\n          \n          \n            \n                     * @return An updated {@link Builder} with the provided battery requirement set.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439632102", "createdAt": "2020-06-12T20:38:46Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -590,24 +785,120 @@ public Builder setBlobServiceUrl(String blobServiceUrl) {\n          * Sets an interceptor used to authenticate the blob service request.\n          *\n          * @param credentialInterceptor The credential interceptor.\n-         * @return An updated {@link Builder} with these settings applied.\n+         * @return Builder with provided credentials interceptor set\n          */\n         public Builder setCredentialInterceptor(Interceptor credentialInterceptor) {\n             this.serviceClientBuilder.setCredentialsInterceptor(credentialInterceptor);\n             return this;\n         }\n \n+        /**\n+         * Sets whether device should be charging for running the transfers.\n+         * The default value is {@code false}.\n+         *\n+         * @param requiresCharging {@code true} if device must be charging for the transfer to run\n+         * @return Builder with provided charging requirement set\n+         */\n+        public Builder setRequiresCharging(boolean requiresCharging) {\n+            this.transferConstraintsBuilder.setRequiresCharging(requiresCharging);\n+            return this;\n+        }\n+\n+        /**\n+         * Sets whether device should be idle for running the transfers.\n+         * The default value is {@code false}.\n+         *\n+         * @param requiresDeviceIdle {@code true} if device must be idle for transfers to run\n+         * @return An updated {@link Builder} with these settings applied.\n+         */\n+        @RequiresApi(23)\n+        public Builder setRequiresDeviceIdle(boolean requiresDeviceIdle) {\n+            if (Build.VERSION.SDK_INT >= 23) {\n+                this.transferConstraintsBuilder.setRequiresDeviceIdle(requiresDeviceIdle);\n+            }\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the particular {@link NetworkType} the device should be in for running\n+         * the transfers.\n+         *\n+         * The default network type that {@link TransferClient} uses is {@link NetworkType#CONNECTED}.\n+         *\n+         * @param networkType The type of network required for transfers to run\n+         * @return Builder with provided network type set\n+         */\n+        public Builder setRequiredNetworkType(@NonNull NetworkType networkType) {\n+            Objects.requireNonNull(networkType, \"'networkType' cannot be null.\");\n+            if (networkType == NetworkType.NOT_REQUIRED) {\n+                throw new IllegalArgumentException(\n+                    \"The network type NOT_REQUIRED is not a valid transfer configuration.\");\n+            }\n+            this.transferConstraintsBuilder.setRequiredNetworkType(networkType);\n+            return this;\n+        }\n+\n+        /**\n+         * Sets whether device battery should be at an acceptable level for running the transfers.\n+         * The default value is {@code false}.\n+         *\n+         * @param requiresBatteryNotLow {@code true} if the battery should be at an acceptable level\n+         *                              for the transfers to run\n+         * @return Builder with provided battery requirement set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 350}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzMjE4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     *                              a critical threshold for the transfer to run\n          \n          \n            \n                     * @return Builder with provided storage requirement set\n          \n          \n            \n                     *                              a critical threshold for the transfer to run.\n          \n          \n            \n                     * @return An updated {@link Builder} with the provided storage requirement set.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439632180", "createdAt": "2020-06-12T20:39:01Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -590,24 +785,120 @@ public Builder setBlobServiceUrl(String blobServiceUrl) {\n          * Sets an interceptor used to authenticate the blob service request.\n          *\n          * @param credentialInterceptor The credential interceptor.\n-         * @return An updated {@link Builder} with these settings applied.\n+         * @return Builder with provided credentials interceptor set\n          */\n         public Builder setCredentialInterceptor(Interceptor credentialInterceptor) {\n             this.serviceClientBuilder.setCredentialsInterceptor(credentialInterceptor);\n             return this;\n         }\n \n+        /**\n+         * Sets whether device should be charging for running the transfers.\n+         * The default value is {@code false}.\n+         *\n+         * @param requiresCharging {@code true} if device must be charging for the transfer to run\n+         * @return Builder with provided charging requirement set\n+         */\n+        public Builder setRequiresCharging(boolean requiresCharging) {\n+            this.transferConstraintsBuilder.setRequiresCharging(requiresCharging);\n+            return this;\n+        }\n+\n+        /**\n+         * Sets whether device should be idle for running the transfers.\n+         * The default value is {@code false}.\n+         *\n+         * @param requiresDeviceIdle {@code true} if device must be idle for transfers to run\n+         * @return An updated {@link Builder} with these settings applied.\n+         */\n+        @RequiresApi(23)\n+        public Builder setRequiresDeviceIdle(boolean requiresDeviceIdle) {\n+            if (Build.VERSION.SDK_INT >= 23) {\n+                this.transferConstraintsBuilder.setRequiresDeviceIdle(requiresDeviceIdle);\n+            }\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the particular {@link NetworkType} the device should be in for running\n+         * the transfers.\n+         *\n+         * The default network type that {@link TransferClient} uses is {@link NetworkType#CONNECTED}.\n+         *\n+         * @param networkType The type of network required for transfers to run\n+         * @return Builder with provided network type set\n+         */\n+        public Builder setRequiredNetworkType(@NonNull NetworkType networkType) {\n+            Objects.requireNonNull(networkType, \"'networkType' cannot be null.\");\n+            if (networkType == NetworkType.NOT_REQUIRED) {\n+                throw new IllegalArgumentException(\n+                    \"The network type NOT_REQUIRED is not a valid transfer configuration.\");\n+            }\n+            this.transferConstraintsBuilder.setRequiredNetworkType(networkType);\n+            return this;\n+        }\n+\n+        /**\n+         * Sets whether device battery should be at an acceptable level for running the transfers.\n+         * The default value is {@code false}.\n+         *\n+         * @param requiresBatteryNotLow {@code true} if the battery should be at an acceptable level\n+         *                              for the transfers to run\n+         * @return Builder with provided battery requirement set\n+         */\n+        public Builder setRequiresBatteryNotLow(boolean requiresBatteryNotLow) {\n+            this.transferConstraintsBuilder.setRequiresBatteryNotLow(requiresBatteryNotLow);\n+            return this;\n+        }\n+\n+        /**\n+         * Sets whether the device's available storage should be at an acceptable level for running\n+         * the transfers. The default value is {@code false}.\n+         *\n+         * @param requiresStorageNotLow {@code true} if the available storage should not be below a\n+         *                              a critical threshold for the transfer to run\n+         * @return Builder with provided storage requirement set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 363}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzNzE0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @throws IllegalStateException If underlying Database or WorkManager is not initialized properly\n          \n          \n            \n                 * @throws IllegalStateException If underlying Database or {@link WorkManager} is not initialized properly.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439637143", "createdAt": "2020-06-12T20:51:57Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/TransferClient.java", "diffHunk": "@@ -5,120 +5,97 @@\n \n import android.annotation.SuppressLint;\n import android.content.Context;\n-import android.net.Uri;\n-import android.os.Build;\n import android.util.Log;\n \n import androidx.annotation.MainThread;\n import androidx.annotation.NonNull;\n-import androidx.annotation.RequiresApi;\n import androidx.lifecycle.LiveData;\n import androidx.lifecycle.MutableLiveData;\n import androidx.lifecycle.Transformations;\n import androidx.work.Constraints;\n import androidx.work.Data;\n import androidx.work.ExistingWorkPolicy;\n import androidx.work.ListenableWorker;\n-import androidx.work.NetworkType;\n import androidx.work.OneTimeWorkRequest;\n import androidx.work.WorkManager;\n import androidx.work.impl.WorkManagerImpl;\n \n import com.azure.android.storage.blob.StorageBlobClient;\n \n-import java.io.File;\n-import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n-import java.util.concurrent.Executor;\n import java.util.concurrent.Executors;\n \n /**\n  * A type that exposes blob transfer APIs.\n  */\n-public class TransferClient {\n-    // the static shared map of StorageBlobClient instances for transfers, with package\n-    // scoped access. StorageBlobClient instances are added from TransferClient.Builder\n-    // and used by Upload|Download handlers.\n-    static final StorageBlobClientMap STORAGE_BLOB_CLIENTS = new StorageBlobClientMap();\n+public final class TransferClient {\n     private static final String TAG = TransferClient.class.getSimpleName();\n-    // the application context.\n-    private final Context context;\n-    // the constraints to meet to run the transfers.\n-    private final Constraints constraints;\n     // the executor for internal book keeping.\n     private SerialExecutor serialTaskExecutor;\n     // reference to the database holding transfer entities.\n     private final TransferDatabase db;\n+    // reference to the androidx work manager.\n+    private final WorkManager workManager;\n     // track the active (not collected by GC) Transfers.\n-    private final static TransferIdInfoLiveDataCache TRANSFER_ID_INFO_CACHE = new TransferIdInfoLiveDataCache();\n+    private final TransferIdInfoLiveDataCache transferIdInfoCache = new TransferIdInfoLiveDataCache();\n+    // The singleton TransferClient.\n+    private static TransferClient INSTANCE = null;\n+    // An object to synchronize the creation of the singleton TransferClient.\n+    private static final Object INIT_LOCK = new Object();\n+    // the static shared map of StorageBlobClient instances for transfers, with package\n+    // scoped access. StorageBlobClient instances are added from TransferClient.Builder\n+    // and used by Upload|Download handlers.\n+    static final StorageBlobClientMap STORAGE_BLOB_CLIENTS;\n \n-    /**\n-     * Creates a {@link TransferClient} that uses provided {@link StorageBlobClient}\n-     * for transfers.\n-     *\n-     * @param context the context\n-     * @param constraints the constraints to meet to run transfers\n-     * @param serialTaskExecutor the executor for all internal book keeping purposes\n-     * @param storageBlobClients the blob storage clients for transfers\n-     */\n-    private TransferClient(Context context,\n-                           Constraints constraints,\n-                           SerialExecutor serialTaskExecutor,\n-                           Map<String, StorageBlobClient> storageBlobClients) {\n-        this.context = context;\n-        this.constraints = constraints;\n-        this.serialTaskExecutor = serialTaskExecutor;\n-        this.db = TransferDatabase.get(context);\n-        STORAGE_BLOB_CLIENTS.putAll(storageBlobClients);\n+    static {\n+        STORAGE_BLOB_CLIENTS = StorageBlobClientMap.getInstance();\n     }\n \n     /**\n-     * Upload the content of a file.\n+     * Retrieves the singleton instance of {@link TransferClient}.\n      *\n-     * @param storageBlobClientId the identifier of the blob storage client to use for the upload\n-     * @param containerName the container to upload the file to\n-     * @param blobName the name of the target blob holding uploaded file\n-     * @param file the local file to upload\n-     * @return LiveData that streams {@link TransferInfo} describing current state of the transfer\n+     * @param context A {@link Context} for on-demand initialization.\n+     * @return The singleton instance of {@link TransferClient}.\n+     * @throws IllegalStateException If underlying Database or WorkManager is not initialized properly", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzODcxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param uploadRequest describes the upload request\n          \n          \n            \n                 * @param uploadRequest Describes the upload request.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439638713", "createdAt": "2020-06-12T20:56:14Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/TransferClient.java", "diffHunk": "@@ -5,120 +5,97 @@\n \n import android.annotation.SuppressLint;\n import android.content.Context;\n-import android.net.Uri;\n-import android.os.Build;\n import android.util.Log;\n \n import androidx.annotation.MainThread;\n import androidx.annotation.NonNull;\n-import androidx.annotation.RequiresApi;\n import androidx.lifecycle.LiveData;\n import androidx.lifecycle.MutableLiveData;\n import androidx.lifecycle.Transformations;\n import androidx.work.Constraints;\n import androidx.work.Data;\n import androidx.work.ExistingWorkPolicy;\n import androidx.work.ListenableWorker;\n-import androidx.work.NetworkType;\n import androidx.work.OneTimeWorkRequest;\n import androidx.work.WorkManager;\n import androidx.work.impl.WorkManagerImpl;\n \n import com.azure.android.storage.blob.StorageBlobClient;\n \n-import java.io.File;\n-import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n-import java.util.concurrent.Executor;\n import java.util.concurrent.Executors;\n \n /**\n  * A type that exposes blob transfer APIs.\n  */\n-public class TransferClient {\n-    // the static shared map of StorageBlobClient instances for transfers, with package\n-    // scoped access. StorageBlobClient instances are added from TransferClient.Builder\n-    // and used by Upload|Download handlers.\n-    static final StorageBlobClientMap STORAGE_BLOB_CLIENTS = new StorageBlobClientMap();\n+public final class TransferClient {\n     private static final String TAG = TransferClient.class.getSimpleName();\n-    // the application context.\n-    private final Context context;\n-    // the constraints to meet to run the transfers.\n-    private final Constraints constraints;\n     // the executor for internal book keeping.\n     private SerialExecutor serialTaskExecutor;\n     // reference to the database holding transfer entities.\n     private final TransferDatabase db;\n+    // reference to the androidx work manager.\n+    private final WorkManager workManager;\n     // track the active (not collected by GC) Transfers.\n-    private final static TransferIdInfoLiveDataCache TRANSFER_ID_INFO_CACHE = new TransferIdInfoLiveDataCache();\n+    private final TransferIdInfoLiveDataCache transferIdInfoCache = new TransferIdInfoLiveDataCache();\n+    // The singleton TransferClient.\n+    private static TransferClient INSTANCE = null;\n+    // An object to synchronize the creation of the singleton TransferClient.\n+    private static final Object INIT_LOCK = new Object();\n+    // the static shared map of StorageBlobClient instances for transfers, with package\n+    // scoped access. StorageBlobClient instances are added from TransferClient.Builder\n+    // and used by Upload|Download handlers.\n+    static final StorageBlobClientMap STORAGE_BLOB_CLIENTS;\n \n-    /**\n-     * Creates a {@link TransferClient} that uses provided {@link StorageBlobClient}\n-     * for transfers.\n-     *\n-     * @param context the context\n-     * @param constraints the constraints to meet to run transfers\n-     * @param serialTaskExecutor the executor for all internal book keeping purposes\n-     * @param storageBlobClients the blob storage clients for transfers\n-     */\n-    private TransferClient(Context context,\n-                           Constraints constraints,\n-                           SerialExecutor serialTaskExecutor,\n-                           Map<String, StorageBlobClient> storageBlobClients) {\n-        this.context = context;\n-        this.constraints = constraints;\n-        this.serialTaskExecutor = serialTaskExecutor;\n-        this.db = TransferDatabase.get(context);\n-        STORAGE_BLOB_CLIENTS.putAll(storageBlobClients);\n+    static {\n+        STORAGE_BLOB_CLIENTS = StorageBlobClientMap.getInstance();\n     }\n \n     /**\n-     * Upload the content of a file.\n+     * Retrieves the singleton instance of {@link TransferClient}.\n      *\n-     * @param storageBlobClientId the identifier of the blob storage client to use for the upload\n-     * @param containerName the container to upload the file to\n-     * @param blobName the name of the target blob holding uploaded file\n-     * @param file the local file to upload\n-     * @return LiveData that streams {@link TransferInfo} describing current state of the transfer\n+     * @param context A {@link Context} for on-demand initialization.\n+     * @return The singleton instance of {@link TransferClient}.\n+     * @throws IllegalStateException If underlying Database or WorkManager is not initialized properly\n      */\n-    public LiveData<TransferInfo> upload(String storageBlobClientId, String containerName, String blobName, File file) {\n-        // UI_Thread\n-        return upload(storageBlobClientId, containerName, blobName,\n-            new ReadableContent(this.context, Uri.fromFile(file), false));\n+    public static @NonNull TransferClient getInstance(@NonNull Context context) throws IllegalStateException {\n+        synchronized (INIT_LOCK) {\n+            if (INSTANCE == null) {\n+                INSTANCE = new TransferClient(context.getApplicationContext());\n+            }\n+            return INSTANCE;\n+        }\n     }\n \n     /**\n-     * Upload content identified by a given Uri.\n+     * Create an instance of {@link TransferClient}.\n      *\n-     * @param storageBlobClientId the identifier of the blob storage client to use for the upload\n-     * @param containerName the container to upload the file to\n-     * @param blobName the name of the target blob holding uploaded file\n-     * @param contentUri URI to the Content to upload, the contentUri is resolved using\n-     *   {@link android.content.ContentResolver#openAssetFileDescriptor(Uri, String)}\n-     *   with mode as \"r\". The supported URI schemes are: 'content://', 'file://' and 'android.resource://'\n-     * @return LiveData that streams {@link TransferInfo} describing current state of the transfer\n+     * @param applicationContext The application {@link Context} for on-demand initialization.\n      */\n-    public LiveData<TransferInfo> upload(String storageBlobClientId, String containerName, String blobName, Uri contentUri) {\n-        // UI_Thread\n-        return upload(storageBlobClientId, containerName, blobName,\n-            new ReadableContent(this.context, contentUri, true));\n+    @SuppressLint(\"RestrictedApi\")\n+    private TransferClient(Context applicationContext) {\n+        this.db = TransferDatabase.getInstance(applicationContext);\n+        this.workManager = WorkManager.getInstance(applicationContext);\n+        try {\n+            // Reference: https://github.com/Azure/azure-sdk-for-android/pull/203#discussion_r384854043\n+            //\n+            // Try to re-use the existing taskExecutor shared by WorkManager.\n+            WorkManagerImpl wmImpl = (WorkManagerImpl)this.workManager;\n+            this.serialTaskExecutor = new SerialExecutor(wmImpl.getConfiguration().getTaskExecutor());\n+        } catch (Exception ignored) {\n+            // Create our own small ThreadPoolExecutor if we can't.\n+            this.serialTaskExecutor = new SerialExecutor(Executors.newFixedThreadPool(2));\n+        }\n     }\n \n     /**\n      * Upload the content described by the given {@link ReadableContent}.\n      *\n-     * @param storageBlobClientId the identifier of the blob storage client to use for the upload\n-     * @param containerName the container to upload the file to\n-     * @param blobName the name of the target blob holding uploaded file\n-     * @param readableContent describes the Content to read and upload\n+     * @param uploadRequest describes the upload request", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzOTA2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param downloadRequest describes the download request\n          \n          \n            \n                 * @param downloadRequest Describes the download request.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#discussion_r439639067", "createdAt": "2020-06-12T20:57:15Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/TransferClient.java", "diffHunk": "@@ -168,56 +145,17 @@ private TransferClient(Context context,\n                     .postValue(TransferOperationResult.error(TransferOperationResult.Operation.UPLOAD_DOWNLOAD, e));\n             }\n         });\n-        // UI_Thread\n         return toCachedTransferInfoLiveData(transferOpResultLiveData, false);\n     }\n \n     /**\n      * Download a blob.\n      *\n-     * @param storageBlobClientId the identifier of the blob storage client to use for the download\n-     * @param containerName The container to download the blob from.\n-     * @param blobName The name of the target blob to download.\n-     * @param file The local file to download to.\n+     * @param downloadRequest describes the download request", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "138ae5b6d0078aafc1cff86d620e87b720020ff2"}, "originalPosition": 221}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7164788075145db7e3f815d2fa9693dc422733f", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/d7164788075145db7e3f815d2fa9693dc422733f", "committedDate": "2020-06-16T23:42:51Z", "message": "JavaDoc cleanup\n\nCo-authored-by: vcolin7 <vicolina@microsoft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "970f3bdffa60bcb0d6cbc8f03cc508aa3035c6cb", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/970f3bdffa60bcb0d6cbc8f03cc508aa3035c6cb", "committedDate": "2020-06-17T00:02:41Z", "message": "resolving conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8057a9b6ab2ffcbaacdefce8ad64706a6db498c", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/d8057a9b6ab2ffcbaacdefce8ad64706a6db498c", "committedDate": "2020-06-17T01:29:44Z", "message": "Correcting ref in javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyODkyMjkz", "url": "https://github.com/Azure/azure-sdk-for-android/pull/241#pullrequestreview-432892293", "createdAt": "2020-06-18T02:09:29Z", "commit": {"oid": "d8057a9b6ab2ffcbaacdefce8ad64706a6db498c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1330, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}