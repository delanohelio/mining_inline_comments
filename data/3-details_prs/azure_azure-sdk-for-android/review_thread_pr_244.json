{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzOTQyNjg2", "number": 244, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDoyNTozMVrOEGJu9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMTowNzo0M1rOEGKKPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODg2Mzg5OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDoyNTozMVrOGkxg4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMzozNDowOVrOGleb2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMzE1NA==", "bodyText": "seems its JavaDoc for different API.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441213154", "createdAt": "2020-06-17T00:25:31Z", "author": {"login": "anuchandy"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -547,6 +551,161 @@ public ServiceCall commitBlockListWithRestResponse(String containerName,\n             tier, callback);\n     }\n \n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @return The blob's metadata.\n+     */\n+    Void delete(String containerName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb0690a4e64d58dea4b38cba26a2968820cb75d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk0OTE0Nw==", "bodyText": "Thank you, I took the template from getBlobProperties and forgot to modify it.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441949147", "createdAt": "2020-06-18T03:34:09Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -547,6 +551,161 @@ public ServiceCall commitBlockListWithRestResponse(String containerName,\n             tier, callback);\n     }\n \n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @return The blob's metadata.\n+     */\n+    Void delete(String containerName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMzE1NA=="}, "originalCommit": {"oid": "feb0690a4e64d58dea4b38cba26a2968820cb75d"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODg2NDU2OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDoyNTo1MFrOGkxhRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDoyNTo1MFrOGkxhRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMzI1NA==", "bodyText": "Javadoc need to be fixed I think.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441213254", "createdAt": "2020-06-17T00:25:50Z", "author": {"login": "anuchandy"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -547,6 +551,161 @@ public ServiceCall commitBlockListWithRestResponse(String containerName,\n             tier, callback);\n     }\n \n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @return The blob's metadata.\n+     */\n+    Void delete(String containerName,\n+                String blobName) {\n+        return storageBlobServiceClient.delete(containerName,\n+            blobName);\n+    }\n+\n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @param callback      Callback that receives the response.\n+     */\n+    ServiceCall delete(String containerName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb0690a4e64d58dea4b38cba26a2968820cb75d"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODg2NjgyOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDoyNzowOFrOGkxiog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDoyNzowOFrOGkxiog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMzYwMg==", "bodyText": "Looks like this link \"(Set-Blob-Service-Properties.md)\" is invalid", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441213602", "createdAt": "2020-06-17T00:27:08Z", "author": {"login": "anuchandy"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -547,6 +551,161 @@ public ServiceCall commitBlockListWithRestResponse(String containerName,\n             tier, callback);\n     }\n \n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @return The blob's metadata.\n+     */\n+    Void delete(String containerName,\n+                String blobName) {\n+        return storageBlobServiceClient.delete(containerName,\n+            blobName);\n+    }\n+\n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @param callback      Callback that receives the response.\n+     */\n+    ServiceCall delete(String containerName,\n+                       String blobName,\n+                       Callback<Void> callback) {\n+        return storageBlobServiceClient.delete(containerName,\n+            blobName,\n+            callback);\n+    }\n+\n+    /**\n+     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently\n+     * removed from the storage account. If the storage account's soft delete feature is enabled, then, when a blob\n+     * is deleted, it is marked for deletion and becomes inaccessible immediately. However, the blob service retains\n+     * the blob or snapshot for the number of days specified by the DeleteRetentionPolicy section of [Storage service\n+     * properties] (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb0690a4e64d58dea4b38cba26a2968820cb75d"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODg2ODI3OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDoyNzo1N1rOGkxjgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDoyNzo1N1rOGkxjgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMzgyNg==", "bodyText": "missing return", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441213826", "createdAt": "2020-06-17T00:27:57Z", "author": {"login": "anuchandy"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -547,6 +551,161 @@ public ServiceCall commitBlockListWithRestResponse(String containerName,\n             tier, callback);\n     }\n \n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @return The blob's metadata.\n+     */\n+    Void delete(String containerName,\n+                String blobName) {\n+        return storageBlobServiceClient.delete(containerName,\n+            blobName);\n+    }\n+\n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @param callback      Callback that receives the response.\n+     */\n+    ServiceCall delete(String containerName,\n+                       String blobName,\n+                       Callback<Void> callback) {\n+        return storageBlobServiceClient.delete(containerName,\n+            blobName,\n+            callback);\n+    }\n+\n+    /**\n+     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently\n+     * removed from the storage account. If the storage account's soft delete feature is enabled, then, when a blob\n+     * is deleted, it is marked for deletion and becomes inaccessible immediately. However, the blob service retains\n+     * the blob or snapshot for the number of days specified by the DeleteRetentionPolicy section of [Storage service\n+     * properties] (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data\n+     * is permanently removed from the storage account. Note that you continue to be charged for the soft-deleted\n+     * blob's storage until it is permanently removed. Use the List Blobs API and specify the \"include=deleted\" query\n+     * parameter to discover which blobs and snapshots have been soft deleted. You can then use the Undelete Blob API\n+     * to restore a soft-deleted blob. All other operations on a soft-deleted blob or snapshot causes the service to\n+     * return an HTTP status code of 404 (ResourceNotFound). If the storage account's automatic snapshot feature is\n+     * enabled, then, when a blob is deleted, an automatic snapshot is created. The blob becomes inaccessible\n+     * immediately. All other operations on the blob causes the service to return an HTTP status code of 404\n+     * (ResourceNotFound). You can access automatic snapshot using snapshot timestamp or version id. You can restore\n+     * the blob by calling Put or Copy Blob API with automatic snapshot as source. Deleting automatic snapshot\n+     * requires shared key or special SAS/RBAC permissions.\n+     *\n+     * @param containerName     The container name.\n+     * @param blobName          The blob name.\n+     * @param snapshot          The snapshot parameter is an opaque DateTime value that, when present, specifies the\n+     *                          blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob\"&gt;Creating a Snapshot of a Blob.&lt;/a&gt;.\n+     * @param timeout           The timeout parameter is expressed in seconds. For more information, see\n+     *                          &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n+     * @param leaseId           If specified, the operation only succeeds if the resource's lease is active and\n+     *                          matches this ID.\n+     * @param deleteSnapshots   Required if the blob has associated snapshots. Specify one of the following two\n+     *                          options: include: Delete the base blob and all of its snapshots. only: Delete only the blob's snapshots and not the blob itself. Possible values include: 'include', 'only'.\n+     * @param ifModifiedSince   Specify this header value to operate only on a blob if it has been modified since the\n+     *                          specified date/time.\n+     * @param ifUnmodifiedSince Specify this header value to operate only on a blob if it has not been modified since\n+     *                          the specified date/time.\n+     * @param ifMatch           Specify an ETag value to operate only on blobs with a matching value.\n+     * @param ifNoneMatch       Specify an ETag value to operate only on blobs without a matching value.\n+     * @param requestId         Provides a client-generated, opaque value with a 1 KB character limit that is\n+     *                          recorded in the analytics logs when storage analytics logging is enabled.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb0690a4e64d58dea4b38cba26a2968820cb75d"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODg3MDM5OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDoyOToyMlrOGkxk4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMzo0OToyN1rOGlepyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxNDE3OA==", "bodyText": "before this detailed doc for delete, it will be helpful to have a short doc indicating this API delete the blob?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441214178", "createdAt": "2020-06-17T00:29:22Z", "author": {"login": "anuchandy"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -547,6 +551,161 @@ public ServiceCall commitBlockListWithRestResponse(String containerName,\n             tier, callback);\n     }\n \n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @return The blob's metadata.\n+     */\n+    Void delete(String containerName,\n+                String blobName) {\n+        return storageBlobServiceClient.delete(containerName,\n+            blobName);\n+    }\n+\n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @param callback      Callback that receives the response.\n+     */\n+    ServiceCall delete(String containerName,\n+                       String blobName,\n+                       Callback<Void> callback) {\n+        return storageBlobServiceClient.delete(containerName,\n+            blobName,\n+            callback);\n+    }\n+\n+    /**\n+     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb0690a4e64d58dea4b38cba26a2968820cb75d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk1MjcxNA==", "bodyText": "I think you are right. I'll add a more brief description.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441952714", "createdAt": "2020-06-18T03:49:27Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -547,6 +551,161 @@ public ServiceCall commitBlockListWithRestResponse(String containerName,\n             tier, callback);\n     }\n \n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @return The blob's metadata.\n+     */\n+    Void delete(String containerName,\n+                String blobName) {\n+        return storageBlobServiceClient.delete(containerName,\n+            blobName);\n+    }\n+\n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @param callback      Callback that receives the response.\n+     */\n+    ServiceCall delete(String containerName,\n+                       String blobName,\n+                       Callback<Void> callback) {\n+        return storageBlobServiceClient.delete(containerName,\n+            blobName,\n+            callback);\n+    }\n+\n+    /**\n+     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxNDE3OA=="}, "originalCommit": {"oid": "feb0690a4e64d58dea4b38cba26a2968820cb75d"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODg3MTE3OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDoyOTo1MFrOGkxlXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDoyOTo1MFrOGkxlXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxNDMwMA==", "bodyText": "missing return", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441214300", "createdAt": "2020-06-17T00:29:50Z", "author": {"login": "anuchandy"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -547,6 +551,161 @@ public ServiceCall commitBlockListWithRestResponse(String containerName,\n             tier, callback);\n     }\n \n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @return The blob's metadata.\n+     */\n+    Void delete(String containerName,\n+                String blobName) {\n+        return storageBlobServiceClient.delete(containerName,\n+            blobName);\n+    }\n+\n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @param callback      Callback that receives the response.\n+     */\n+    ServiceCall delete(String containerName,\n+                       String blobName,\n+                       Callback<Void> callback) {\n+        return storageBlobServiceClient.delete(containerName,\n+            blobName,\n+            callback);\n+    }\n+\n+    /**\n+     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently\n+     * removed from the storage account. If the storage account's soft delete feature is enabled, then, when a blob\n+     * is deleted, it is marked for deletion and becomes inaccessible immediately. However, the blob service retains\n+     * the blob or snapshot for the number of days specified by the DeleteRetentionPolicy section of [Storage service\n+     * properties] (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data\n+     * is permanently removed from the storage account. Note that you continue to be charged for the soft-deleted\n+     * blob's storage until it is permanently removed. Use the List Blobs API and specify the \"include=deleted\" query\n+     * parameter to discover which blobs and snapshots have been soft deleted. You can then use the Undelete Blob API\n+     * to restore a soft-deleted blob. All other operations on a soft-deleted blob or snapshot causes the service to\n+     * return an HTTP status code of 404 (ResourceNotFound). If the storage account's automatic snapshot feature is\n+     * enabled, then, when a blob is deleted, an automatic snapshot is created. The blob becomes inaccessible\n+     * immediately. All other operations on the blob causes the service to return an HTTP status code of 404\n+     * (ResourceNotFound). You can access automatic snapshot using snapshot timestamp or version id. You can restore\n+     * the blob by calling Put or Copy Blob API with automatic snapshot as source. Deleting automatic snapshot\n+     * requires shared key or special SAS/RBAC permissions.\n+     *\n+     * @param containerName     The container name.\n+     * @param blobName          The blob name.\n+     * @param snapshot          The snapshot parameter is an opaque DateTime value that, when present, specifies the\n+     *                          blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob\"&gt;Creating a Snapshot of a Blob.&lt;/a&gt;.\n+     * @param timeout           The timeout parameter is expressed in seconds. For more information, see\n+     *                          &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n+     * @param leaseId           If specified, the operation only succeeds if the resource's lease is active and\n+     *                          matches this ID.\n+     * @param deleteSnapshots   Required if the blob has associated snapshots. Specify one of the following two\n+     *                          options: include: Delete the base blob and all of its snapshots. only: Delete only the blob's snapshots and not the blob itself. Possible values include: 'include', 'only'.\n+     * @param ifModifiedSince   Specify this header value to operate only on a blob if it has been modified since the\n+     *                          specified date/time.\n+     * @param ifUnmodifiedSince Specify this header value to operate only on a blob if it has not been modified since\n+     *                          the specified date/time.\n+     * @param ifMatch           Specify an ETag value to operate only on blobs with a matching value.\n+     * @param ifNoneMatch       Specify an ETag value to operate only on blobs without a matching value.\n+     * @param requestId         Provides a client-generated, opaque value with a 1 KB character limit that is\n+     *                          recorded in the analytics logs when storage analytics logging is enabled.\n+     */\n+    BlobDeleteResponse deleteWithResponse(String containerName,\n+                                          String blobName,\n+                                          String snapshot,\n+                                          Integer timeout,\n+                                          String version,\n+                                          String leaseId,\n+                                          DeleteSnapshotsOptionType deleteSnapshots,\n+                                          OffsetDateTime ifModifiedSince,\n+                                          OffsetDateTime ifUnmodifiedSince,\n+                                          String ifMatch,\n+                                          String ifNoneMatch,\n+                                          String requestId) {\n+        return storageBlobServiceClient.deleteWithResponse(containerName,\n+            blobName,\n+            snapshot,\n+            timeout,\n+            version,\n+            leaseId,\n+            deleteSnapshots,\n+            ifModifiedSince,\n+            ifUnmodifiedSince,\n+            ifMatch,\n+            ifNoneMatch,\n+            requestId);\n+    }\n+\n+    /**\n+     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently\n+     * removed from the storage account. If the storage account's soft delete feature is enabled, then, when a blob\n+     * is deleted, it is marked for deletion and becomes inaccessible immediately. However, the blob service retains\n+     * the blob or snapshot for the number of days specified by the DeleteRetentionPolicy section of [Storage service\n+     * properties] (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data\n+     * is permanently removed from the storage account. Note that you continue to be charged for the soft-deleted\n+     * blob's storage until it is permanently removed. Use the List Blobs API and specify the \"include=deleted\" query\n+     * parameter to discover which blobs and snapshots have been soft deleted. You can then use the Undelete Blob API\n+     * to restore a soft-deleted blob. All other operations on a soft-deleted blob or snapshot causes the service to\n+     * return an HTTP status code of 404 (ResourceNotFound). If the storage account's automatic snapshot feature is\n+     * enabled, then, when a blob is deleted, an automatic snapshot is created. The blob becomes inaccessible\n+     * immediately. All other operations on the blob causes the service to return an HTTP status code of 404\n+     * (ResourceNotFound). You can access automatic snapshot using snapshot timestamp or version id. You can restore\n+     * the blob by calling Put or Copy Blob API with automatic snapshot as source. Deleting automatic snapshot\n+     * requires shared key or special SAS/RBAC permissions.\n+     *\n+     * @param containerName     The container name.\n+     * @param blobName          The blob name.\n+     * @param snapshot          The snapshot parameter is an opaque DateTime value that, when present, specifies the\n+     *                          blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob\"&gt;Creating a Snapshot of a Blob.&lt;/a&gt;.\n+     * @param timeout           The timeout parameter is expressed in seconds. For more information, see\n+     *                          &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n+     * @param leaseId           If specified, the operation only succeeds if the resource's lease is active and\n+     *                          matches this ID.\n+     * @param deleteSnapshots   Required if the blob has associated snapshots. Specify one of the following two\n+     *                          options: include: Delete the base blob and all of its snapshots. only: Delete only the blob's snapshots and not the blob itself. Possible values include: 'include', 'only'.\n+     * @param ifModifiedSince   Specify this header value to operate only on a blob if it has been modified since the\n+     *                          specified date/time.\n+     * @param ifUnmodifiedSince Specify this header value to operate only on a blob if it has not been modified since\n+     *                          the specified date/time.\n+     * @param ifMatch           Specify an ETag value to operate only on blobs with a matching value.\n+     * @param ifNoneMatch       Specify an ETag value to operate only on blobs without a matching value.\n+     * @param requestId         Provides a client-generated, opaque value with a 1 KB character limit that is\n+     *                          recorded in the analytics logs when storage analytics logging is enabled.\n+     * @param callback          Callback that receives the response.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb0690a4e64d58dea4b38cba26a2968820cb75d"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODg3MjQxOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDozMDoyOFrOGkxmDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDozMDoyOFrOGkxmDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxNDQ3OA==", "bodyText": "a short description of API before this detailed description will be helpful", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441214478", "createdAt": "2020-06-17T00:30:28Z", "author": {"login": "anuchandy"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -547,6 +551,161 @@ public ServiceCall commitBlockListWithRestResponse(String containerName,\n             tier, callback);\n     }\n \n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @return The blob's metadata.\n+     */\n+    Void delete(String containerName,\n+                String blobName) {\n+        return storageBlobServiceClient.delete(containerName,\n+            blobName);\n+    }\n+\n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @param callback      Callback that receives the response.\n+     */\n+    ServiceCall delete(String containerName,\n+                       String blobName,\n+                       Callback<Void> callback) {\n+        return storageBlobServiceClient.delete(containerName,\n+            blobName,\n+            callback);\n+    }\n+\n+    /**\n+     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently\n+     * removed from the storage account. If the storage account's soft delete feature is enabled, then, when a blob\n+     * is deleted, it is marked for deletion and becomes inaccessible immediately. However, the blob service retains\n+     * the blob or snapshot for the number of days specified by the DeleteRetentionPolicy section of [Storage service\n+     * properties] (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data\n+     * is permanently removed from the storage account. Note that you continue to be charged for the soft-deleted\n+     * blob's storage until it is permanently removed. Use the List Blobs API and specify the \"include=deleted\" query\n+     * parameter to discover which blobs and snapshots have been soft deleted. You can then use the Undelete Blob API\n+     * to restore a soft-deleted blob. All other operations on a soft-deleted blob or snapshot causes the service to\n+     * return an HTTP status code of 404 (ResourceNotFound). If the storage account's automatic snapshot feature is\n+     * enabled, then, when a blob is deleted, an automatic snapshot is created. The blob becomes inaccessible\n+     * immediately. All other operations on the blob causes the service to return an HTTP status code of 404\n+     * (ResourceNotFound). You can access automatic snapshot using snapshot timestamp or version id. You can restore\n+     * the blob by calling Put or Copy Blob API with automatic snapshot as source. Deleting automatic snapshot\n+     * requires shared key or special SAS/RBAC permissions.\n+     *\n+     * @param containerName     The container name.\n+     * @param blobName          The blob name.\n+     * @param snapshot          The snapshot parameter is an opaque DateTime value that, when present, specifies the\n+     *                          blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob\"&gt;Creating a Snapshot of a Blob.&lt;/a&gt;.\n+     * @param timeout           The timeout parameter is expressed in seconds. For more information, see\n+     *                          &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n+     * @param leaseId           If specified, the operation only succeeds if the resource's lease is active and\n+     *                          matches this ID.\n+     * @param deleteSnapshots   Required if the blob has associated snapshots. Specify one of the following two\n+     *                          options: include: Delete the base blob and all of its snapshots. only: Delete only the blob's snapshots and not the blob itself. Possible values include: 'include', 'only'.\n+     * @param ifModifiedSince   Specify this header value to operate only on a blob if it has been modified since the\n+     *                          specified date/time.\n+     * @param ifUnmodifiedSince Specify this header value to operate only on a blob if it has not been modified since\n+     *                          the specified date/time.\n+     * @param ifMatch           Specify an ETag value to operate only on blobs with a matching value.\n+     * @param ifNoneMatch       Specify an ETag value to operate only on blobs without a matching value.\n+     * @param requestId         Provides a client-generated, opaque value with a 1 KB character limit that is\n+     *                          recorded in the analytics logs when storage analytics logging is enabled.\n+     */\n+    BlobDeleteResponse deleteWithResponse(String containerName,\n+                                          String blobName,\n+                                          String snapshot,\n+                                          Integer timeout,\n+                                          String version,\n+                                          String leaseId,\n+                                          DeleteSnapshotsOptionType deleteSnapshots,\n+                                          OffsetDateTime ifModifiedSince,\n+                                          OffsetDateTime ifUnmodifiedSince,\n+                                          String ifMatch,\n+                                          String ifNoneMatch,\n+                                          String requestId) {\n+        return storageBlobServiceClient.deleteWithResponse(containerName,\n+            blobName,\n+            snapshot,\n+            timeout,\n+            version,\n+            leaseId,\n+            deleteSnapshots,\n+            ifModifiedSince,\n+            ifUnmodifiedSince,\n+            ifMatch,\n+            ifNoneMatch,\n+            requestId);\n+    }\n+\n+    /**\n+     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb0690a4e64d58dea4b38cba26a2968820cb75d"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODg3MzE0OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDozMDo0NlrOGkxmcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDozMDo0NlrOGkxmcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxNDU3Ng==", "bodyText": "same as previous comment invalid link I guess.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441214576", "createdAt": "2020-06-17T00:30:46Z", "author": {"login": "anuchandy"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -547,6 +551,161 @@ public ServiceCall commitBlockListWithRestResponse(String containerName,\n             tier, callback);\n     }\n \n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @return The blob's metadata.\n+     */\n+    Void delete(String containerName,\n+                String blobName) {\n+        return storageBlobServiceClient.delete(containerName,\n+            blobName);\n+    }\n+\n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @param callback      Callback that receives the response.\n+     */\n+    ServiceCall delete(String containerName,\n+                       String blobName,\n+                       Callback<Void> callback) {\n+        return storageBlobServiceClient.delete(containerName,\n+            blobName,\n+            callback);\n+    }\n+\n+    /**\n+     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently\n+     * removed from the storage account. If the storage account's soft delete feature is enabled, then, when a blob\n+     * is deleted, it is marked for deletion and becomes inaccessible immediately. However, the blob service retains\n+     * the blob or snapshot for the number of days specified by the DeleteRetentionPolicy section of [Storage service\n+     * properties] (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data\n+     * is permanently removed from the storage account. Note that you continue to be charged for the soft-deleted\n+     * blob's storage until it is permanently removed. Use the List Blobs API and specify the \"include=deleted\" query\n+     * parameter to discover which blobs and snapshots have been soft deleted. You can then use the Undelete Blob API\n+     * to restore a soft-deleted blob. All other operations on a soft-deleted blob or snapshot causes the service to\n+     * return an HTTP status code of 404 (ResourceNotFound). If the storage account's automatic snapshot feature is\n+     * enabled, then, when a blob is deleted, an automatic snapshot is created. The blob becomes inaccessible\n+     * immediately. All other operations on the blob causes the service to return an HTTP status code of 404\n+     * (ResourceNotFound). You can access automatic snapshot using snapshot timestamp or version id. You can restore\n+     * the blob by calling Put or Copy Blob API with automatic snapshot as source. Deleting automatic snapshot\n+     * requires shared key or special SAS/RBAC permissions.\n+     *\n+     * @param containerName     The container name.\n+     * @param blobName          The blob name.\n+     * @param snapshot          The snapshot parameter is an opaque DateTime value that, when present, specifies the\n+     *                          blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob\"&gt;Creating a Snapshot of a Blob.&lt;/a&gt;.\n+     * @param timeout           The timeout parameter is expressed in seconds. For more information, see\n+     *                          &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n+     * @param leaseId           If specified, the operation only succeeds if the resource's lease is active and\n+     *                          matches this ID.\n+     * @param deleteSnapshots   Required if the blob has associated snapshots. Specify one of the following two\n+     *                          options: include: Delete the base blob and all of its snapshots. only: Delete only the blob's snapshots and not the blob itself. Possible values include: 'include', 'only'.\n+     * @param ifModifiedSince   Specify this header value to operate only on a blob if it has been modified since the\n+     *                          specified date/time.\n+     * @param ifUnmodifiedSince Specify this header value to operate only on a blob if it has not been modified since\n+     *                          the specified date/time.\n+     * @param ifMatch           Specify an ETag value to operate only on blobs with a matching value.\n+     * @param ifNoneMatch       Specify an ETag value to operate only on blobs without a matching value.\n+     * @param requestId         Provides a client-generated, opaque value with a 1 KB character limit that is\n+     *                          recorded in the analytics logs when storage analytics logging is enabled.\n+     */\n+    BlobDeleteResponse deleteWithResponse(String containerName,\n+                                          String blobName,\n+                                          String snapshot,\n+                                          Integer timeout,\n+                                          String version,\n+                                          String leaseId,\n+                                          DeleteSnapshotsOptionType deleteSnapshots,\n+                                          OffsetDateTime ifModifiedSince,\n+                                          OffsetDateTime ifUnmodifiedSince,\n+                                          String ifMatch,\n+                                          String ifNoneMatch,\n+                                          String requestId) {\n+        return storageBlobServiceClient.deleteWithResponse(containerName,\n+            blobName,\n+            snapshot,\n+            timeout,\n+            version,\n+            leaseId,\n+            deleteSnapshots,\n+            ifModifiedSince,\n+            ifUnmodifiedSince,\n+            ifMatch,\n+            ifNoneMatch,\n+            requestId);\n+    }\n+\n+    /**\n+     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently\n+     * removed from the storage account. If the storage account's soft delete feature is enabled, then, when a blob\n+     * is deleted, it is marked for deletion and becomes inaccessible immediately. However, the blob service retains\n+     * the blob or snapshot for the number of days specified by the DeleteRetentionPolicy section of [Storage service\n+     * properties] (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb0690a4e64d58dea4b38cba26a2968820cb75d"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODg3NTEyOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDozMTo1M1rOGkxnog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDozMTo1M1rOGkxnog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxNDg4Mg==", "bodyText": "doc seems for getProperties.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441214882", "createdAt": "2020-06-17T00:31:53Z", "author": {"login": "anuchandy"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -682,6 +686,194 @@ ServiceCall commitBlockListWithRestResponse(String containerName,\n         return new ServiceCall(callAndOptionalResult.getCall());\n     }\n \n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @return The blob's metadata.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb0690a4e64d58dea4b38cba26a2968820cb75d"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODg5MDU3OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDo0MTo0NlrOGkxxOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDo0MTo0NlrOGkxxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxNzMzNw==", "bodyText": "this should be like below:\nString strContent = readAsString(response.body());\ncallback.onFailure(new BlobStorageException(strContent, response.raw()));\nthis snippet is consistent with the pattern we follow in other APIs and also we shouldn't add our own text to the error message: ref: #239 (comment)", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441217337", "createdAt": "2020-06-17T00:41:46Z", "author": {"login": "anuchandy"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -1335,6 +1446,96 @@ public void onFailure(Call<ResponseBody> call, Throwable t) {\n         }\n     }\n \n+    private CallAndOptionalResult<BlobDeleteResponse> deleteWithRestResponseIntern(String containerName,\n+                                                                                   String blobName,\n+                                                                                   String snapshot,\n+                                                                                   Integer timeout,\n+                                                                                   String version,\n+                                                                                   String leaseId,\n+                                                                                   DeleteSnapshotsOptionType deleteSnapshots,\n+                                                                                   OffsetDateTime ifModifiedSince,\n+                                                                                   OffsetDateTime ifUnmodifiedSince,\n+                                                                                   String ifMatch,\n+                                                                                   String ifNoneMatch,\n+                                                                                   String requestId,\n+                                                                                   Callback<BlobDeleteResponse> callback) {\n+        DateTimeRfc1123 ifModifiedSinceConverted = ifModifiedSince == null ? null :\n+            new DateTimeRfc1123(ifModifiedSince);\n+        DateTimeRfc1123 ifUnmodifiedSinceConverted = ifUnmodifiedSince == null ? null :\n+            new DateTimeRfc1123(ifUnmodifiedSince);\n+\n+        Call<Void> call = service.delete(containerName,\n+            blobName,\n+            snapshot,\n+            timeout,\n+            leaseId,\n+            deleteSnapshots,\n+            ifModifiedSinceConverted,\n+            ifUnmodifiedSinceConverted,\n+            ifMatch,\n+            ifNoneMatch,\n+            XMS_VERSION, // TODO: Replace with 'version'.\n+            requestId);\n+\n+        if (callback != null) {\n+            executeCall(call, new retrofit2.Callback<Void>() {\n+                @Override\n+                public void onResponse(@NonNull Call<Void> call, @NonNull Response<Void> response) {\n+                    if (response.isSuccessful()) {\n+                        if (response.code() >= 200 && response.code() < 300) {\n+                            BlobDeleteHeaders typedHeaders = deserializeHeaders(response.headers(),\n+                                BlobDeleteHeaders.class);\n+\n+                            callback.onResponse(new BlobDeleteResponse(response.raw().request(),\n+                                response.code(),\n+                                response.headers(),\n+                                response.body(),\n+                                typedHeaders));\n+                        } else {\n+                            callback.onFailure(new BlobStorageException(\"Response failed with error code: \" + response.code(),\n+                                response.raw()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb0690a4e64d58dea4b38cba26a2968820cb75d"}, "originalPosition": 609}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODg5NzMwOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDo0NToxMlrOGkx1KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDo0NToxMlrOGkx1KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxODM0NA==", "bodyText": "The only valid response status code for a successful delete is 202, all other code 2XX status code should hit else case.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441218344", "createdAt": "2020-06-17T00:45:12Z", "author": {"login": "anuchandy"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -1335,6 +1446,96 @@ public void onFailure(Call<ResponseBody> call, Throwable t) {\n         }\n     }\n \n+    private CallAndOptionalResult<BlobDeleteResponse> deleteWithRestResponseIntern(String containerName,\n+                                                                                   String blobName,\n+                                                                                   String snapshot,\n+                                                                                   Integer timeout,\n+                                                                                   String version,\n+                                                                                   String leaseId,\n+                                                                                   DeleteSnapshotsOptionType deleteSnapshots,\n+                                                                                   OffsetDateTime ifModifiedSince,\n+                                                                                   OffsetDateTime ifUnmodifiedSince,\n+                                                                                   String ifMatch,\n+                                                                                   String ifNoneMatch,\n+                                                                                   String requestId,\n+                                                                                   Callback<BlobDeleteResponse> callback) {\n+        DateTimeRfc1123 ifModifiedSinceConverted = ifModifiedSince == null ? null :\n+            new DateTimeRfc1123(ifModifiedSince);\n+        DateTimeRfc1123 ifUnmodifiedSinceConverted = ifUnmodifiedSince == null ? null :\n+            new DateTimeRfc1123(ifUnmodifiedSince);\n+\n+        Call<Void> call = service.delete(containerName,\n+            blobName,\n+            snapshot,\n+            timeout,\n+            leaseId,\n+            deleteSnapshots,\n+            ifModifiedSinceConverted,\n+            ifUnmodifiedSinceConverted,\n+            ifMatch,\n+            ifNoneMatch,\n+            XMS_VERSION, // TODO: Replace with 'version'.\n+            requestId);\n+\n+        if (callback != null) {\n+            executeCall(call, new retrofit2.Callback<Void>() {\n+                @Override\n+                public void onResponse(@NonNull Call<Void> call, @NonNull Response<Void> response) {\n+                    if (response.isSuccessful()) {\n+                        if (response.code() >= 200 && response.code() < 300) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb0690a4e64d58dea4b38cba26a2968820cb75d"}, "originalPosition": 598}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODkwMDMxOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDo0NzoxMVrOGkx3Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMTowMDozNVrOGkyEmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxODgzNA==", "bodyText": "Not sure why we check the range 200-300 for async delete and 200 for sync delete, as per swagger the only valid response status code for a successful delete is 202.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441218834", "createdAt": "2020-06-17T00:47:11Z", "author": {"login": "anuchandy"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -1335,6 +1446,96 @@ public void onFailure(Call<ResponseBody> call, Throwable t) {\n         }\n     }\n \n+    private CallAndOptionalResult<BlobDeleteResponse> deleteWithRestResponseIntern(String containerName,\n+                                                                                   String blobName,\n+                                                                                   String snapshot,\n+                                                                                   Integer timeout,\n+                                                                                   String version,\n+                                                                                   String leaseId,\n+                                                                                   DeleteSnapshotsOptionType deleteSnapshots,\n+                                                                                   OffsetDateTime ifModifiedSince,\n+                                                                                   OffsetDateTime ifUnmodifiedSince,\n+                                                                                   String ifMatch,\n+                                                                                   String ifNoneMatch,\n+                                                                                   String requestId,\n+                                                                                   Callback<BlobDeleteResponse> callback) {\n+        DateTimeRfc1123 ifModifiedSinceConverted = ifModifiedSince == null ? null :\n+            new DateTimeRfc1123(ifModifiedSince);\n+        DateTimeRfc1123 ifUnmodifiedSinceConverted = ifUnmodifiedSince == null ? null :\n+            new DateTimeRfc1123(ifUnmodifiedSince);\n+\n+        Call<Void> call = service.delete(containerName,\n+            blobName,\n+            snapshot,\n+            timeout,\n+            leaseId,\n+            deleteSnapshots,\n+            ifModifiedSinceConverted,\n+            ifUnmodifiedSinceConverted,\n+            ifMatch,\n+            ifNoneMatch,\n+            XMS_VERSION, // TODO: Replace with 'version'.\n+            requestId);\n+\n+        if (callback != null) {\n+            executeCall(call, new retrofit2.Callback<Void>() {\n+                @Override\n+                public void onResponse(@NonNull Call<Void> call, @NonNull Response<Void> response) {\n+                    if (response.isSuccessful()) {\n+                        if (response.code() >= 200 && response.code() < 300) {\n+                            BlobDeleteHeaders typedHeaders = deserializeHeaders(response.headers(),\n+                                BlobDeleteHeaders.class);\n+\n+                            callback.onResponse(new BlobDeleteResponse(response.raw().request(),\n+                                response.code(),\n+                                response.headers(),\n+                                response.body(),\n+                                typedHeaders));\n+                        } else {\n+                            callback.onFailure(new BlobStorageException(\"Response failed with error code: \" + response.code(),\n+                                response.raw()));\n+                        }\n+                    } else {\n+                        String strContent = readAsString(response.errorBody());\n+\n+                        callback.onFailure(new BlobStorageException(strContent, response.raw()));\n+                    }\n+                }\n+\n+                @Override\n+                public void onFailure(@NonNull Call<Void> call, @NonNull Throwable t) {\n+                    callback.onFailure(t);\n+                }\n+            });\n+\n+            return new CallAndOptionalResult<>(call, null);\n+        } else {\n+            Response<Void> response = executeCall(call);\n+\n+            if (response.isSuccessful()) {\n+                if (response.code() == 200) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb0690a4e64d58dea4b38cba26a2968820cb75d"}, "originalPosition": 629}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMjI5Nw==", "bodyText": "The java SDK API is here for reference.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441222297", "createdAt": "2020-06-17T01:00:35Z", "author": {"login": "anuchandy"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -1335,6 +1446,96 @@ public void onFailure(Call<ResponseBody> call, Throwable t) {\n         }\n     }\n \n+    private CallAndOptionalResult<BlobDeleteResponse> deleteWithRestResponseIntern(String containerName,\n+                                                                                   String blobName,\n+                                                                                   String snapshot,\n+                                                                                   Integer timeout,\n+                                                                                   String version,\n+                                                                                   String leaseId,\n+                                                                                   DeleteSnapshotsOptionType deleteSnapshots,\n+                                                                                   OffsetDateTime ifModifiedSince,\n+                                                                                   OffsetDateTime ifUnmodifiedSince,\n+                                                                                   String ifMatch,\n+                                                                                   String ifNoneMatch,\n+                                                                                   String requestId,\n+                                                                                   Callback<BlobDeleteResponse> callback) {\n+        DateTimeRfc1123 ifModifiedSinceConverted = ifModifiedSince == null ? null :\n+            new DateTimeRfc1123(ifModifiedSince);\n+        DateTimeRfc1123 ifUnmodifiedSinceConverted = ifUnmodifiedSince == null ? null :\n+            new DateTimeRfc1123(ifUnmodifiedSince);\n+\n+        Call<Void> call = service.delete(containerName,\n+            blobName,\n+            snapshot,\n+            timeout,\n+            leaseId,\n+            deleteSnapshots,\n+            ifModifiedSinceConverted,\n+            ifUnmodifiedSinceConverted,\n+            ifMatch,\n+            ifNoneMatch,\n+            XMS_VERSION, // TODO: Replace with 'version'.\n+            requestId);\n+\n+        if (callback != null) {\n+            executeCall(call, new retrofit2.Callback<Void>() {\n+                @Override\n+                public void onResponse(@NonNull Call<Void> call, @NonNull Response<Void> response) {\n+                    if (response.isSuccessful()) {\n+                        if (response.code() >= 200 && response.code() < 300) {\n+                            BlobDeleteHeaders typedHeaders = deserializeHeaders(response.headers(),\n+                                BlobDeleteHeaders.class);\n+\n+                            callback.onResponse(new BlobDeleteResponse(response.raw().request(),\n+                                response.code(),\n+                                response.headers(),\n+                                response.body(),\n+                                typedHeaders));\n+                        } else {\n+                            callback.onFailure(new BlobStorageException(\"Response failed with error code: \" + response.code(),\n+                                response.raw()));\n+                        }\n+                    } else {\n+                        String strContent = readAsString(response.errorBody());\n+\n+                        callback.onFailure(new BlobStorageException(strContent, response.raw()));\n+                    }\n+                }\n+\n+                @Override\n+                public void onFailure(@NonNull Call<Void> call, @NonNull Throwable t) {\n+                    callback.onFailure(t);\n+                }\n+            });\n+\n+            return new CallAndOptionalResult<>(call, null);\n+        } else {\n+            Response<Void> response = executeCall(call);\n+\n+            if (response.isSuccessful()) {\n+                if (response.code() == 200) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxODgzNA=="}, "originalCommit": {"oid": "feb0690a4e64d58dea4b38cba26a2968820cb75d"}, "originalPosition": 629}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODkwMTkzOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDo0ODoxNFrOGkx4HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDo0ODoxNFrOGkx4HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxOTEwMA==", "bodyText": "String strContent = readAsString(response.body());\ncallback.onFailure(new BlobStorageException(strContent, response.raw()));", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441219100", "createdAt": "2020-06-17T00:48:14Z", "author": {"login": "anuchandy"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -1335,6 +1446,96 @@ public void onFailure(Call<ResponseBody> call, Throwable t) {\n         }\n     }\n \n+    private CallAndOptionalResult<BlobDeleteResponse> deleteWithRestResponseIntern(String containerName,\n+                                                                                   String blobName,\n+                                                                                   String snapshot,\n+                                                                                   Integer timeout,\n+                                                                                   String version,\n+                                                                                   String leaseId,\n+                                                                                   DeleteSnapshotsOptionType deleteSnapshots,\n+                                                                                   OffsetDateTime ifModifiedSince,\n+                                                                                   OffsetDateTime ifUnmodifiedSince,\n+                                                                                   String ifMatch,\n+                                                                                   String ifNoneMatch,\n+                                                                                   String requestId,\n+                                                                                   Callback<BlobDeleteResponse> callback) {\n+        DateTimeRfc1123 ifModifiedSinceConverted = ifModifiedSince == null ? null :\n+            new DateTimeRfc1123(ifModifiedSince);\n+        DateTimeRfc1123 ifUnmodifiedSinceConverted = ifUnmodifiedSince == null ? null :\n+            new DateTimeRfc1123(ifUnmodifiedSince);\n+\n+        Call<Void> call = service.delete(containerName,\n+            blobName,\n+            snapshot,\n+            timeout,\n+            leaseId,\n+            deleteSnapshots,\n+            ifModifiedSinceConverted,\n+            ifUnmodifiedSinceConverted,\n+            ifMatch,\n+            ifNoneMatch,\n+            XMS_VERSION, // TODO: Replace with 'version'.\n+            requestId);\n+\n+        if (callback != null) {\n+            executeCall(call, new retrofit2.Callback<Void>() {\n+                @Override\n+                public void onResponse(@NonNull Call<Void> call, @NonNull Response<Void> response) {\n+                    if (response.isSuccessful()) {\n+                        if (response.code() >= 200 && response.code() < 300) {\n+                            BlobDeleteHeaders typedHeaders = deserializeHeaders(response.headers(),\n+                                BlobDeleteHeaders.class);\n+\n+                            callback.onResponse(new BlobDeleteResponse(response.raw().request(),\n+                                response.code(),\n+                                response.headers(),\n+                                response.body(),\n+                                typedHeaders));\n+                        } else {\n+                            callback.onFailure(new BlobStorageException(\"Response failed with error code: \" + response.code(),\n+                                response.raw()));\n+                        }\n+                    } else {\n+                        String strContent = readAsString(response.errorBody());\n+\n+                        callback.onFailure(new BlobStorageException(strContent, response.raw()));\n+                    }\n+                }\n+\n+                @Override\n+                public void onFailure(@NonNull Call<Void> call, @NonNull Throwable t) {\n+                    callback.onFailure(t);\n+                }\n+            });\n+\n+            return new CallAndOptionalResult<>(call, null);\n+        } else {\n+            Response<Void> response = executeCall(call);\n+\n+            if (response.isSuccessful()) {\n+                if (response.code() == 200) {\n+                    BlobDeleteHeaders headers = deserializeHeaders(response.headers(),\n+                        BlobDeleteHeaders.class);\n+\n+                    BlobDeleteResponse result = new BlobDeleteResponse(response.raw().request(),\n+                        response.code(),\n+                        response.headers(),\n+                        response.body(),\n+                        headers);\n+\n+                    return new CallAndOptionalResult<>(call, result);\n+                } else {\n+                    throw new BlobStorageException(\"Response failed with error code: \" + response.code(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb0690a4e64d58dea4b38cba26a2968820cb75d"}, "originalPosition": 641}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODkxMjI1OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/models/BlobDeleteHeaders.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDo1NDoyM1rOGkx-Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDo1NDoyM1rOGkx-Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMDY5OA==", "bodyText": "\"Code generated by\" txt might be misleading for Android case, we shouldn't include it in our files I guess.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441220698", "createdAt": "2020-06-17T00:54:23Z", "author": {"login": "anuchandy"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/models/BlobDeleteHeaders.java", "diffHunk": "@@ -0,0 +1,171 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb0690a4e64d58dea4b38cba26a2968820cb75d"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODkxNDEyOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/models/BlobDeleteResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDo1NTozNlrOGkx_eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDo1NTozNlrOGkx_eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMDk4NA==", "bodyText": "nit; we shouldn't include the txt \"Code generated by..\"", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441220984", "createdAt": "2020-06-17T00:55:36Z", "author": {"login": "anuchandy"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/models/BlobDeleteResponse.java", "diffHunk": "@@ -0,0 +1,32 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb0690a4e64d58dea4b38cba26a2968820cb75d"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODkxNTMwOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/models/DeleteSnapshotsOptionType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDo1NjoxMFrOGkyAJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDo1NjoxMFrOGkyAJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMTE1OA==", "bodyText": "same comment as above w.r.t auto-gen txt", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441221158", "createdAt": "2020-06-17T00:56:10Z", "author": {"login": "anuchandy"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/models/DeleteSnapshotsOptionType.java", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb0690a4e64d58dea4b38cba26a2968820cb75d"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODkyODMzOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMTowNDowNVrOGkyIIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMTowNjowNlrOGkyKGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzIwMw==", "bodyText": "This should be Call<ResponseBody> instead of  Call<Void>.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441223203", "createdAt": "2020-06-17T01:04:05Z", "author": {"login": "anuchandy"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -1335,6 +1446,96 @@ public void onFailure(Call<ResponseBody> call, Throwable t) {\n         }\n     }\n \n+    private CallAndOptionalResult<BlobDeleteResponse> deleteWithRestResponseIntern(String containerName,\n+                                                                                   String blobName,\n+                                                                                   String snapshot,\n+                                                                                   Integer timeout,\n+                                                                                   String version,\n+                                                                                   String leaseId,\n+                                                                                   DeleteSnapshotsOptionType deleteSnapshots,\n+                                                                                   OffsetDateTime ifModifiedSince,\n+                                                                                   OffsetDateTime ifUnmodifiedSince,\n+                                                                                   String ifMatch,\n+                                                                                   String ifNoneMatch,\n+                                                                                   String requestId,\n+                                                                                   Callback<BlobDeleteResponse> callback) {\n+        DateTimeRfc1123 ifModifiedSinceConverted = ifModifiedSince == null ? null :\n+            new DateTimeRfc1123(ifModifiedSince);\n+        DateTimeRfc1123 ifUnmodifiedSinceConverted = ifUnmodifiedSince == null ? null :\n+            new DateTimeRfc1123(ifUnmodifiedSince);\n+\n+        Call<Void> call = service.delete(containerName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb0690a4e64d58dea4b38cba26a2968820cb75d"}, "originalPosition": 580}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzcwNQ==", "bodyText": "The reason for \"ResponseBody\" is, we want later read the body if the delete fails i.e. if service returns non-202.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441223705", "createdAt": "2020-06-17T01:06:06Z", "author": {"login": "anuchandy"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -1335,6 +1446,96 @@ public void onFailure(Call<ResponseBody> call, Throwable t) {\n         }\n     }\n \n+    private CallAndOptionalResult<BlobDeleteResponse> deleteWithRestResponseIntern(String containerName,\n+                                                                                   String blobName,\n+                                                                                   String snapshot,\n+                                                                                   Integer timeout,\n+                                                                                   String version,\n+                                                                                   String leaseId,\n+                                                                                   DeleteSnapshotsOptionType deleteSnapshots,\n+                                                                                   OffsetDateTime ifModifiedSince,\n+                                                                                   OffsetDateTime ifUnmodifiedSince,\n+                                                                                   String ifMatch,\n+                                                                                   String ifNoneMatch,\n+                                                                                   String requestId,\n+                                                                                   Callback<BlobDeleteResponse> callback) {\n+        DateTimeRfc1123 ifModifiedSinceConverted = ifModifiedSince == null ? null :\n+            new DateTimeRfc1123(ifModifiedSince);\n+        DateTimeRfc1123 ifUnmodifiedSinceConverted = ifUnmodifiedSince == null ? null :\n+            new DateTimeRfc1123(ifUnmodifiedSince);\n+\n+        Call<Void> call = service.delete(containerName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzIwMw=="}, "originalCommit": {"oid": "feb0690a4e64d58dea4b38cba26a2968820cb75d"}, "originalPosition": 580}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODkyOTE1OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMTowNDo0MVrOGkyIqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODoyODowMVrOGl7Qsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzMzOQ==", "bodyText": "return type should be Call <ResponseBody>", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441223339", "createdAt": "2020-06-17T01:04:41Z", "author": {"login": "anuchandy"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -1485,5 +1686,19 @@ T getResult() {\n                                            @Header(\"x-ms-encryption-key\") String encryptionKey,\n                                            @Header(\"x-ms-encryption-key-sha256\") String encryptionKeySha256,\n                                            @Header(\"x-ms-encryption-algorithm\") EncryptionAlgorithmType encryptionAlgorithm);\n+\n+        @DELETE(\"{containerName}/{blob}\")\n+        Call<Void> delete(@Path(\"containerName\") String containerName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb0690a4e64d58dea4b38cba26a2968820cb75d"}, "originalPosition": 661}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk1NTI2OA==", "bodyText": "I assume we should also do this for APIs like getBlobProperties where we don't expect a body in a successful call, but there could be one in a failed call, right?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441955268", "createdAt": "2020-06-18T04:00:40Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -1485,5 +1686,19 @@ T getResult() {\n                                            @Header(\"x-ms-encryption-key\") String encryptionKey,\n                                            @Header(\"x-ms-encryption-key-sha256\") String encryptionKeySha256,\n                                            @Header(\"x-ms-encryption-algorithm\") EncryptionAlgorithmType encryptionAlgorithm);\n+\n+        @DELETE(\"{containerName}/{blob}\")\n+        Call<Void> delete(@Path(\"containerName\") String containerName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzMzOQ=="}, "originalCommit": {"oid": "feb0690a4e64d58dea4b38cba26a2968820cb75d"}, "originalPosition": 661}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk1OTA2OQ==", "bodyText": "Also, the reason I went with Void is because the Java API returns a Mono<Void> for the delete operation and the BlobDeleteResponse object.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441959069", "createdAt": "2020-06-18T04:17:18Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -1485,5 +1686,19 @@ T getResult() {\n                                            @Header(\"x-ms-encryption-key\") String encryptionKey,\n                                            @Header(\"x-ms-encryption-key-sha256\") String encryptionKeySha256,\n                                            @Header(\"x-ms-encryption-algorithm\") EncryptionAlgorithmType encryptionAlgorithm);\n+\n+        @DELETE(\"{containerName}/{blob}\")\n+        Call<Void> delete(@Path(\"containerName\") String containerName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzMzOQ=="}, "originalCommit": {"oid": "feb0690a4e64d58dea4b38cba26a2968820cb75d"}, "originalPosition": 661}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3OTg1Mw==", "bodyText": "I guess this means we want to return a Void at the public API level but a ResponseBody at the service interface level. Is this correct?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441979853", "createdAt": "2020-06-18T05:41:12Z", "author": {"login": "vcolin7"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -1485,5 +1686,19 @@ T getResult() {\n                                            @Header(\"x-ms-encryption-key\") String encryptionKey,\n                                            @Header(\"x-ms-encryption-key-sha256\") String encryptionKeySha256,\n                                            @Header(\"x-ms-encryption-algorithm\") EncryptionAlgorithmType encryptionAlgorithm);\n+\n+        @DELETE(\"{containerName}/{blob}\")\n+        Call<Void> delete(@Path(\"containerName\") String containerName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzMzOQ=="}, "originalCommit": {"oid": "feb0690a4e64d58dea4b38cba26a2968820cb75d"}, "originalPosition": 661}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyMTQyNw==", "bodyText": "I assume we should also do this for APIs like getBlobProperties where we don't expect a body in a successful call, but there could be one in a failed call, right?\nYes, it seems there is a similar bug in getBlobProperties as well, that needs to be fixed.\nI guess this means we want to return a Void at the public API level but a ResponseBody at the service interface level. Is this correct?\nright, like java SDK, from public API we return Void but in internal service interface we need ResponseBody so that we can read error body from it and throw.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r442421427", "createdAt": "2020-06-18T18:28:01Z", "author": {"login": "anuchandy"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -1485,5 +1686,19 @@ T getResult() {\n                                            @Header(\"x-ms-encryption-key\") String encryptionKey,\n                                            @Header(\"x-ms-encryption-key-sha256\") String encryptionKeySha256,\n                                            @Header(\"x-ms-encryption-algorithm\") EncryptionAlgorithmType encryptionAlgorithm);\n+\n+        @DELETE(\"{containerName}/{blob}\")\n+        Call<Void> delete(@Path(\"containerName\") String containerName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzMzOQ=="}, "originalCommit": {"oid": "feb0690a4e64d58dea4b38cba26a2968820cb75d"}, "originalPosition": 661}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODkzMjAzOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMTowNjozMFrOGkyKaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMTowNjozMFrOGkyKaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzc4NA==", "bodyText": "new retrofit2.Callback<ResponseBody>()", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441223784", "createdAt": "2020-06-17T01:06:30Z", "author": {"login": "anuchandy"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -1335,6 +1446,96 @@ public void onFailure(Call<ResponseBody> call, Throwable t) {\n         }\n     }\n \n+    private CallAndOptionalResult<BlobDeleteResponse> deleteWithRestResponseIntern(String containerName,\n+                                                                                   String blobName,\n+                                                                                   String snapshot,\n+                                                                                   Integer timeout,\n+                                                                                   String version,\n+                                                                                   String leaseId,\n+                                                                                   DeleteSnapshotsOptionType deleteSnapshots,\n+                                                                                   OffsetDateTime ifModifiedSince,\n+                                                                                   OffsetDateTime ifUnmodifiedSince,\n+                                                                                   String ifMatch,\n+                                                                                   String ifNoneMatch,\n+                                                                                   String requestId,\n+                                                                                   Callback<BlobDeleteResponse> callback) {\n+        DateTimeRfc1123 ifModifiedSinceConverted = ifModifiedSince == null ? null :\n+            new DateTimeRfc1123(ifModifiedSince);\n+        DateTimeRfc1123 ifUnmodifiedSinceConverted = ifUnmodifiedSince == null ? null :\n+            new DateTimeRfc1123(ifUnmodifiedSince);\n+\n+        Call<Void> call = service.delete(containerName,\n+            blobName,\n+            snapshot,\n+            timeout,\n+            leaseId,\n+            deleteSnapshots,\n+            ifModifiedSinceConverted,\n+            ifUnmodifiedSinceConverted,\n+            ifMatch,\n+            ifNoneMatch,\n+            XMS_VERSION, // TODO: Replace with 'version'.\n+            requestId);\n+\n+        if (callback != null) {\n+            executeCall(call, new retrofit2.Callback<Void>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb0690a4e64d58dea4b38cba26a2968820cb75d"}, "originalPosition": 594}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODkzMzcyOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMTowNzo0M1rOGkyLhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMTowNzo0M1rOGkyLhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyNDA2OQ==", "bodyText": "since we need to change from Call<Void> to Call<ResponseBody> here instead of response.body() it should be null.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441224069", "createdAt": "2020-06-17T01:07:43Z", "author": {"login": "anuchandy"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -1335,6 +1446,96 @@ public void onFailure(Call<ResponseBody> call, Throwable t) {\n         }\n     }\n \n+    private CallAndOptionalResult<BlobDeleteResponse> deleteWithRestResponseIntern(String containerName,\n+                                                                                   String blobName,\n+                                                                                   String snapshot,\n+                                                                                   Integer timeout,\n+                                                                                   String version,\n+                                                                                   String leaseId,\n+                                                                                   DeleteSnapshotsOptionType deleteSnapshots,\n+                                                                                   OffsetDateTime ifModifiedSince,\n+                                                                                   OffsetDateTime ifUnmodifiedSince,\n+                                                                                   String ifMatch,\n+                                                                                   String ifNoneMatch,\n+                                                                                   String requestId,\n+                                                                                   Callback<BlobDeleteResponse> callback) {\n+        DateTimeRfc1123 ifModifiedSinceConverted = ifModifiedSince == null ? null :\n+            new DateTimeRfc1123(ifModifiedSince);\n+        DateTimeRfc1123 ifUnmodifiedSinceConverted = ifUnmodifiedSince == null ? null :\n+            new DateTimeRfc1123(ifUnmodifiedSince);\n+\n+        Call<Void> call = service.delete(containerName,\n+            blobName,\n+            snapshot,\n+            timeout,\n+            leaseId,\n+            deleteSnapshots,\n+            ifModifiedSinceConverted,\n+            ifUnmodifiedSinceConverted,\n+            ifMatch,\n+            ifNoneMatch,\n+            XMS_VERSION, // TODO: Replace with 'version'.\n+            requestId);\n+\n+        if (callback != null) {\n+            executeCall(call, new retrofit2.Callback<Void>() {\n+                @Override\n+                public void onResponse(@NonNull Call<Void> call, @NonNull Response<Void> response) {\n+                    if (response.isSuccessful()) {\n+                        if (response.code() >= 200 && response.code() < 300) {\n+                            BlobDeleteHeaders typedHeaders = deserializeHeaders(response.headers(),\n+                                BlobDeleteHeaders.class);\n+\n+                            callback.onResponse(new BlobDeleteResponse(response.raw().request(),\n+                                response.code(),\n+                                response.headers(),\n+                                response.body(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb0690a4e64d58dea4b38cba26a2968820cb75d"}, "originalPosition": 605}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2409, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}