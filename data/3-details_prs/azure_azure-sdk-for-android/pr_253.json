{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2Mzg4NTQ1", "number": 253, "title": "Adding core RetryInterceptor that honors CancellationToken.cancel(), enables Fixed and Expotential stratgies", "bodyText": "", "createdAt": "2020-07-08T17:37:16Z", "url": "https://github.com/Azure/azure-sdk-for-android/pull/253", "merged": true, "mergeCommit": {"oid": "4cdf99151f0a5678562d84e7cae309881e98a3ee"}, "closed": true, "closedAt": "2020-07-09T20:49:45Z", "author": {"login": "anuchandy"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcy9-GWAH2gAyNDQ2Mzg4NTQ1OjdiMDQxNWEyMjA1YWVmMjhlMjc5OTQ4MzVlYWU3OGYwOTg4NTY2OTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABczTV8VgFqTQ0NTg2Njc3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7b0415a2205aef28e27994835eae78f098856692", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/7b0415a2205aef28e27994835eae78f098856692", "committedDate": "2020-07-08T17:34:20Z", "message": "Adding core RetryInterceptor that honors CancellationToken.cancel(), enables Fixed and Expotential stratgies"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MDgyMzY3", "url": "https://github.com/Azure/azure-sdk-for-android/pull/253#pullrequestreview-445082367", "createdAt": "2020-07-08T19:53:05Z", "commit": {"oid": "7b0415a2205aef28e27994835eae78f098856692"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxOTo1MzowNlrOGu3BxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMDoyMzo1NFrOGu9h3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc4OTI1Mg==", "bodyText": "Nit: Do we want to use cancelled or canceled? I know both are correct but just want to know which one we prefer for the sake of consistency.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/253#discussion_r451789252", "createdAt": "2020-07-08T19:53:06Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/ExceptionUtils.java", "diffHunk": "@@ -22,6 +22,11 @@\n     private ExceptionUtils() {\n     }\n \n+    /**\n+     * A singleton IOException representing cancellation error.\n+     */\n+    public static final IOException CALL_CANCELLED_IO_EXCEPTION = new IOException(\"Canceled.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b0415a2205aef28e27994835eae78f098856692"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg3OTUxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param chain Provide access to the response.\n          \n          \n            \n                 * @param chain Provides access to the response.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/253#discussion_r451879510", "createdAt": "2020-07-08T23:27:47Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java", "diffHunk": "@@ -0,0 +1,214 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.http.interceptor;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.internal.util.ExceptionUtils;\n+import com.azure.android.core.util.DateTimeRfc1123;\n+\n+import org.threeten.bp.Duration;\n+import org.threeten.bp.OffsetDateTime;\n+import org.threeten.bp.temporal.ChronoUnit;\n+\n+import java.io.IOException;\n+\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+/**\n+ * Pipeline interceptor that retries when a recoverable exception or HTTP error occurs.\n+ */\n+public class RetryInterceptor implements Interceptor {\n+    private final RetryStrategy retryStrategy;\n+\n+    /**\n+     * Creates {@link RetryInterceptor} with the provided {@link RetryStrategy}.\n+     *\n+     * @param retryStrategy The {@link RetryStrategy} used for retries.\n+     */\n+    public RetryInterceptor(RetryStrategy retryStrategy) {\n+        this.retryStrategy = retryStrategy;\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses fixed backoff delay retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param delay The fixed backoff delay applied before every retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor fixedDelay(int maxRetries, Duration delay) {\n+        return new RetryInterceptor(new FixedDelay(maxRetries, delay));\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses a default full jitter backoff\n+     * retry strategy.\n+     *\n+     * <p>\n+     * The retry strategy by default retries maximum 3 times, uses 800 milliseconds as\n+     * the default base delay and uses 8 seconds as default maximum backoff delay before a retry.\n+     *\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff() {\n+        return new RetryInterceptor(new ExponentialBackoff());\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses full jitter backoff retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param baseDelay The delay used as the coefficient for backoffs, also baseDelay will be the first backoff delay.\n+     * @param maxDelay The maximum backoff delay before a retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff(int maxRetries, Duration baseDelay, Duration maxDelay) {\n+        return new RetryInterceptor(new ExponentialBackoff(maxRetries, baseDelay, maxDelay));\n+    }\n+\n+    /**\n+     * Intercept any exception in the pipeline or the HTTP response error and retry if recoverable.\n+\n+     * @param chain Provide access to the response.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b0415a2205aef28e27994835eae78f098856692"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg3OTczNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Intercept any exception in the pipeline or the HTTP response error and retry if recoverable.\n          \n          \n            \n                 * Intercepts any exception in the pipeline or the HTTP response error and, if recoverable, retries sending the request.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/253#discussion_r451879736", "createdAt": "2020-07-08T23:28:31Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java", "diffHunk": "@@ -0,0 +1,214 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.http.interceptor;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.internal.util.ExceptionUtils;\n+import com.azure.android.core.util.DateTimeRfc1123;\n+\n+import org.threeten.bp.Duration;\n+import org.threeten.bp.OffsetDateTime;\n+import org.threeten.bp.temporal.ChronoUnit;\n+\n+import java.io.IOException;\n+\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+/**\n+ * Pipeline interceptor that retries when a recoverable exception or HTTP error occurs.\n+ */\n+public class RetryInterceptor implements Interceptor {\n+    private final RetryStrategy retryStrategy;\n+\n+    /**\n+     * Creates {@link RetryInterceptor} with the provided {@link RetryStrategy}.\n+     *\n+     * @param retryStrategy The {@link RetryStrategy} used for retries.\n+     */\n+    public RetryInterceptor(RetryStrategy retryStrategy) {\n+        this.retryStrategy = retryStrategy;\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses fixed backoff delay retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param delay The fixed backoff delay applied before every retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor fixedDelay(int maxRetries, Duration delay) {\n+        return new RetryInterceptor(new FixedDelay(maxRetries, delay));\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses a default full jitter backoff\n+     * retry strategy.\n+     *\n+     * <p>\n+     * The retry strategy by default retries maximum 3 times, uses 800 milliseconds as\n+     * the default base delay and uses 8 seconds as default maximum backoff delay before a retry.\n+     *\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff() {\n+        return new RetryInterceptor(new ExponentialBackoff());\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses full jitter backoff retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param baseDelay The delay used as the coefficient for backoffs, also baseDelay will be the first backoff delay.\n+     * @param maxDelay The maximum backoff delay before a retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff(int maxRetries, Duration baseDelay, Duration maxDelay) {\n+        return new RetryInterceptor(new ExponentialBackoff(maxRetries, baseDelay, maxDelay));\n+    }\n+\n+    /**\n+     * Intercept any exception in the pipeline or the HTTP response error and retry if recoverable.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b0415a2205aef28e27994835eae78f098856692"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg4MDY5Ng==", "bodyText": "It would be nice to have a comment explaining what these status codes mean, just like in RetryStrategy.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/253#discussion_r451880696", "createdAt": "2020-07-08T23:31:36Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java", "diffHunk": "@@ -0,0 +1,214 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.http.interceptor;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.internal.util.ExceptionUtils;\n+import com.azure.android.core.util.DateTimeRfc1123;\n+\n+import org.threeten.bp.Duration;\n+import org.threeten.bp.OffsetDateTime;\n+import org.threeten.bp.temporal.ChronoUnit;\n+\n+import java.io.IOException;\n+\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+/**\n+ * Pipeline interceptor that retries when a recoverable exception or HTTP error occurs.\n+ */\n+public class RetryInterceptor implements Interceptor {\n+    private final RetryStrategy retryStrategy;\n+\n+    /**\n+     * Creates {@link RetryInterceptor} with the provided {@link RetryStrategy}.\n+     *\n+     * @param retryStrategy The {@link RetryStrategy} used for retries.\n+     */\n+    public RetryInterceptor(RetryStrategy retryStrategy) {\n+        this.retryStrategy = retryStrategy;\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses fixed backoff delay retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param delay The fixed backoff delay applied before every retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor fixedDelay(int maxRetries, Duration delay) {\n+        return new RetryInterceptor(new FixedDelay(maxRetries, delay));\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses a default full jitter backoff\n+     * retry strategy.\n+     *\n+     * <p>\n+     * The retry strategy by default retries maximum 3 times, uses 800 milliseconds as\n+     * the default base delay and uses 8 seconds as default maximum backoff delay before a retry.\n+     *\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff() {\n+        return new RetryInterceptor(new ExponentialBackoff());\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses full jitter backoff retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param baseDelay The delay used as the coefficient for backoffs, also baseDelay will be the first backoff delay.\n+     * @param maxDelay The maximum backoff delay before a retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff(int maxRetries, Duration baseDelay, Duration maxDelay) {\n+        return new RetryInterceptor(new ExponentialBackoff(maxRetries, baseDelay, maxDelay));\n+    }\n+\n+    /**\n+     * Intercept any exception in the pipeline or the HTTP response error and retry if recoverable.\n+\n+     * @param chain Provide access to the response.\n+     *\n+     * @return Response from the next interceptor in the pipeline.\n+     * @throws IOException If the pipeline gets canceled or an IO error that cannot be\n+     * retried any more, for example, max retry limit reached.\n+     */\n+    @NonNull\n+    @Override\n+    public Response intercept(Chain chain) throws IOException {\n+        final Request request = chain.request();\n+\n+        int retryAttempts = 0;\n+        final int maxRetries = this.retryStrategy.getMaxRetries();\n+        do {\n+\n+            // Check for cancellation before Proceeding the chain.\n+            if (chain.call().isCanceled()) {\n+                throw ExceptionUtils.CALL_CANCELLED_IO_EXCEPTION;\n+            }\n+\n+            Response response = null;\n+            Exception exception = null;\n+            // Proceed.\n+            try {\n+                response = chain.proceed(request);\n+            } catch (Exception e) {\n+                exception = e;\n+            }\n+\n+            // Check for cancellation after Proceed.\n+            if (chain.call().isCanceled()) {\n+                try {\n+                    if (exception != null) {\n+                        // The later interceptors those executes as a result of above 'chain.proceed' may throw\n+                        // IOException(\"Cancelled\") [e.g. okhttp3.internal.http.RetryAndFollowUpInterceptor]\n+                        // if it identified that call is cancelled, we don't want to retry on such cases.\n+                        if (exception == ExceptionUtils.CALL_CANCELLED_IO_EXCEPTION) {\n+                            throw ExceptionUtils.CALL_CANCELLED_IO_EXCEPTION;\n+                        } else {\n+                            throw new IOException(\"Cancelled.\", exception);\n+                        }\n+                    } else {\n+                        throw ExceptionUtils.CALL_CANCELLED_IO_EXCEPTION;\n+                    }\n+                } finally {\n+                    if (response != null) {\n+                        // Close the current response before propagating Cancelled Exception.\n+                        response.close();\n+                    }\n+                }\n+            }\n+\n+            if (!this.shouldRetry(response, exception, retryAttempts)) {\n+                if (exception != null) {\n+                        throw new RuntimeException(exception);\n+                } else {\n+                    return response;\n+                }\n+            } else {\n+                final Duration duration;\n+                try {\n+                    duration = this.calculateRetryDelay(response, exception, retryAttempts);\n+                } finally {\n+                    if (response != null) {\n+                        // Close the current response before any retry.\n+                        response.close();\n+                    }\n+                }\n+\n+                // Check for cancellation before going into sleep.\n+                if (chain.call().isCanceled()) {\n+                    throw ExceptionUtils.CALL_CANCELLED_IO_EXCEPTION;\n+                }\n+\n+                try {\n+                    Thread.sleep(duration.toMillis());\n+                } catch (InterruptedException e) {\n+                    throw new RuntimeException(e);\n+                }\n+\n+                retryAttempts++;\n+            }\n+        } while (retryAttempts < maxRetries);\n+\n+        throw new RuntimeException(String.format(\"The max retries (%d times) for the service call is exceeded.\", maxRetries));\n+    }\n+\n+    /**\n+     * Determines the delay duration that should be waited before retrying.\n+     *\n+     * @param response The HTTP response.\n+     * @param exception The pipeline exception, if any.\n+     * @param retryAttempts The number of retry attempts so far made.\n+     * @return The delay duration.\n+     */\n+    public Duration calculateRetryDelay(Response response, Exception exception, int retryAttempts) {\n+        if (exception != null) {\n+            return this.retryStrategy.calculateRetryDelay(null, exception, retryAttempts);\n+        } else {\n+            final int code = response.code();\n+            if (code == 429) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b0415a2205aef28e27994835eae78f098856692"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg4MDcxMw==", "bodyText": "It would be nice to have a comment explaining what these status codes mean, just like in RetryStrategy.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/253#discussion_r451880713", "createdAt": "2020-07-08T23:31:41Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java", "diffHunk": "@@ -0,0 +1,214 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.http.interceptor;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.internal.util.ExceptionUtils;\n+import com.azure.android.core.util.DateTimeRfc1123;\n+\n+import org.threeten.bp.Duration;\n+import org.threeten.bp.OffsetDateTime;\n+import org.threeten.bp.temporal.ChronoUnit;\n+\n+import java.io.IOException;\n+\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+/**\n+ * Pipeline interceptor that retries when a recoverable exception or HTTP error occurs.\n+ */\n+public class RetryInterceptor implements Interceptor {\n+    private final RetryStrategy retryStrategy;\n+\n+    /**\n+     * Creates {@link RetryInterceptor} with the provided {@link RetryStrategy}.\n+     *\n+     * @param retryStrategy The {@link RetryStrategy} used for retries.\n+     */\n+    public RetryInterceptor(RetryStrategy retryStrategy) {\n+        this.retryStrategy = retryStrategy;\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses fixed backoff delay retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param delay The fixed backoff delay applied before every retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor fixedDelay(int maxRetries, Duration delay) {\n+        return new RetryInterceptor(new FixedDelay(maxRetries, delay));\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses a default full jitter backoff\n+     * retry strategy.\n+     *\n+     * <p>\n+     * The retry strategy by default retries maximum 3 times, uses 800 milliseconds as\n+     * the default base delay and uses 8 seconds as default maximum backoff delay before a retry.\n+     *\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff() {\n+        return new RetryInterceptor(new ExponentialBackoff());\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses full jitter backoff retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param baseDelay The delay used as the coefficient for backoffs, also baseDelay will be the first backoff delay.\n+     * @param maxDelay The maximum backoff delay before a retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff(int maxRetries, Duration baseDelay, Duration maxDelay) {\n+        return new RetryInterceptor(new ExponentialBackoff(maxRetries, baseDelay, maxDelay));\n+    }\n+\n+    /**\n+     * Intercept any exception in the pipeline or the HTTP response error and retry if recoverable.\n+\n+     * @param chain Provide access to the response.\n+     *\n+     * @return Response from the next interceptor in the pipeline.\n+     * @throws IOException If the pipeline gets canceled or an IO error that cannot be\n+     * retried any more, for example, max retry limit reached.\n+     */\n+    @NonNull\n+    @Override\n+    public Response intercept(Chain chain) throws IOException {\n+        final Request request = chain.request();\n+\n+        int retryAttempts = 0;\n+        final int maxRetries = this.retryStrategy.getMaxRetries();\n+        do {\n+\n+            // Check for cancellation before Proceeding the chain.\n+            if (chain.call().isCanceled()) {\n+                throw ExceptionUtils.CALL_CANCELLED_IO_EXCEPTION;\n+            }\n+\n+            Response response = null;\n+            Exception exception = null;\n+            // Proceed.\n+            try {\n+                response = chain.proceed(request);\n+            } catch (Exception e) {\n+                exception = e;\n+            }\n+\n+            // Check for cancellation after Proceed.\n+            if (chain.call().isCanceled()) {\n+                try {\n+                    if (exception != null) {\n+                        // The later interceptors those executes as a result of above 'chain.proceed' may throw\n+                        // IOException(\"Cancelled\") [e.g. okhttp3.internal.http.RetryAndFollowUpInterceptor]\n+                        // if it identified that call is cancelled, we don't want to retry on such cases.\n+                        if (exception == ExceptionUtils.CALL_CANCELLED_IO_EXCEPTION) {\n+                            throw ExceptionUtils.CALL_CANCELLED_IO_EXCEPTION;\n+                        } else {\n+                            throw new IOException(\"Cancelled.\", exception);\n+                        }\n+                    } else {\n+                        throw ExceptionUtils.CALL_CANCELLED_IO_EXCEPTION;\n+                    }\n+                } finally {\n+                    if (response != null) {\n+                        // Close the current response before propagating Cancelled Exception.\n+                        response.close();\n+                    }\n+                }\n+            }\n+\n+            if (!this.shouldRetry(response, exception, retryAttempts)) {\n+                if (exception != null) {\n+                        throw new RuntimeException(exception);\n+                } else {\n+                    return response;\n+                }\n+            } else {\n+                final Duration duration;\n+                try {\n+                    duration = this.calculateRetryDelay(response, exception, retryAttempts);\n+                } finally {\n+                    if (response != null) {\n+                        // Close the current response before any retry.\n+                        response.close();\n+                    }\n+                }\n+\n+                // Check for cancellation before going into sleep.\n+                if (chain.call().isCanceled()) {\n+                    throw ExceptionUtils.CALL_CANCELLED_IO_EXCEPTION;\n+                }\n+\n+                try {\n+                    Thread.sleep(duration.toMillis());\n+                } catch (InterruptedException e) {\n+                    throw new RuntimeException(e);\n+                }\n+\n+                retryAttempts++;\n+            }\n+        } while (retryAttempts < maxRetries);\n+\n+        throw new RuntimeException(String.format(\"The max retries (%d times) for the service call is exceeded.\", maxRetries));\n+    }\n+\n+    /**\n+     * Determines the delay duration that should be waited before retrying.\n+     *\n+     * @param response The HTTP response.\n+     * @param exception The pipeline exception, if any.\n+     * @param retryAttempts The number of retry attempts so far made.\n+     * @return The delay duration.\n+     */\n+    public Duration calculateRetryDelay(Response response, Exception exception, int retryAttempts) {\n+        if (exception != null) {\n+            return this.retryStrategy.calculateRetryDelay(null, exception, retryAttempts);\n+        } else {\n+            final int code = response.code();\n+            if (code == 429) {\n+                final String retryAfterHeader = response.header(\"x-ms-retry-after-ms\");\n+                if (retryAfterHeader != null) {\n+                    return Duration.of(Integer.parseInt(retryAfterHeader), ChronoUnit.MILLIS);\n+                }\n+            }\n+\n+            if (code == 429 || code == 503) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b0415a2205aef28e27994835eae78f098856692"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg5MDgxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @throws IOException If the pipeline gets canceled or an IO error that cannot be\n          \n          \n            \n                 * retried any more, for example, max retry limit reached.\n          \n          \n            \n                 * @throws IOException If the pipeline gets canceled or an there is an IO error that\n          \n          \n            \n                 * indicates the request cannot be retried any more, for example, max retry limit reached.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/253#discussion_r451890813", "createdAt": "2020-07-09T00:06:25Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java", "diffHunk": "@@ -0,0 +1,214 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.http.interceptor;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.internal.util.ExceptionUtils;\n+import com.azure.android.core.util.DateTimeRfc1123;\n+\n+import org.threeten.bp.Duration;\n+import org.threeten.bp.OffsetDateTime;\n+import org.threeten.bp.temporal.ChronoUnit;\n+\n+import java.io.IOException;\n+\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+/**\n+ * Pipeline interceptor that retries when a recoverable exception or HTTP error occurs.\n+ */\n+public class RetryInterceptor implements Interceptor {\n+    private final RetryStrategy retryStrategy;\n+\n+    /**\n+     * Creates {@link RetryInterceptor} with the provided {@link RetryStrategy}.\n+     *\n+     * @param retryStrategy The {@link RetryStrategy} used for retries.\n+     */\n+    public RetryInterceptor(RetryStrategy retryStrategy) {\n+        this.retryStrategy = retryStrategy;\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses fixed backoff delay retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param delay The fixed backoff delay applied before every retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor fixedDelay(int maxRetries, Duration delay) {\n+        return new RetryInterceptor(new FixedDelay(maxRetries, delay));\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses a default full jitter backoff\n+     * retry strategy.\n+     *\n+     * <p>\n+     * The retry strategy by default retries maximum 3 times, uses 800 milliseconds as\n+     * the default base delay and uses 8 seconds as default maximum backoff delay before a retry.\n+     *\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff() {\n+        return new RetryInterceptor(new ExponentialBackoff());\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses full jitter backoff retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param baseDelay The delay used as the coefficient for backoffs, also baseDelay will be the first backoff delay.\n+     * @param maxDelay The maximum backoff delay before a retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff(int maxRetries, Duration baseDelay, Duration maxDelay) {\n+        return new RetryInterceptor(new ExponentialBackoff(maxRetries, baseDelay, maxDelay));\n+    }\n+\n+    /**\n+     * Intercept any exception in the pipeline or the HTTP response error and retry if recoverable.\n+\n+     * @param chain Provide access to the response.\n+     *\n+     * @return Response from the next interceptor in the pipeline.\n+     * @throws IOException If the pipeline gets canceled or an IO error that cannot be\n+     * retried any more, for example, max retry limit reached.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b0415a2205aef28e27994835eae78f098856692"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg5MDk0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    // The later interceptors those executes as a result of above 'chain.proceed' may throw\n          \n          \n            \n                                    // The later interceptors that execute as a result of the above 'chain.proceed' may throw", "url": "https://github.com/Azure/azure-sdk-for-android/pull/253#discussion_r451890940", "createdAt": "2020-07-09T00:06:47Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java", "diffHunk": "@@ -0,0 +1,214 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.http.interceptor;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.internal.util.ExceptionUtils;\n+import com.azure.android.core.util.DateTimeRfc1123;\n+\n+import org.threeten.bp.Duration;\n+import org.threeten.bp.OffsetDateTime;\n+import org.threeten.bp.temporal.ChronoUnit;\n+\n+import java.io.IOException;\n+\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+/**\n+ * Pipeline interceptor that retries when a recoverable exception or HTTP error occurs.\n+ */\n+public class RetryInterceptor implements Interceptor {\n+    private final RetryStrategy retryStrategy;\n+\n+    /**\n+     * Creates {@link RetryInterceptor} with the provided {@link RetryStrategy}.\n+     *\n+     * @param retryStrategy The {@link RetryStrategy} used for retries.\n+     */\n+    public RetryInterceptor(RetryStrategy retryStrategy) {\n+        this.retryStrategy = retryStrategy;\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses fixed backoff delay retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param delay The fixed backoff delay applied before every retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor fixedDelay(int maxRetries, Duration delay) {\n+        return new RetryInterceptor(new FixedDelay(maxRetries, delay));\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses a default full jitter backoff\n+     * retry strategy.\n+     *\n+     * <p>\n+     * The retry strategy by default retries maximum 3 times, uses 800 milliseconds as\n+     * the default base delay and uses 8 seconds as default maximum backoff delay before a retry.\n+     *\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff() {\n+        return new RetryInterceptor(new ExponentialBackoff());\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses full jitter backoff retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param baseDelay The delay used as the coefficient for backoffs, also baseDelay will be the first backoff delay.\n+     * @param maxDelay The maximum backoff delay before a retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff(int maxRetries, Duration baseDelay, Duration maxDelay) {\n+        return new RetryInterceptor(new ExponentialBackoff(maxRetries, baseDelay, maxDelay));\n+    }\n+\n+    /**\n+     * Intercept any exception in the pipeline or the HTTP response error and retry if recoverable.\n+\n+     * @param chain Provide access to the response.\n+     *\n+     * @return Response from the next interceptor in the pipeline.\n+     * @throws IOException If the pipeline gets canceled or an IO error that cannot be\n+     * retried any more, for example, max retry limit reached.\n+     */\n+    @NonNull\n+    @Override\n+    public Response intercept(Chain chain) throws IOException {\n+        final Request request = chain.request();\n+\n+        int retryAttempts = 0;\n+        final int maxRetries = this.retryStrategy.getMaxRetries();\n+        do {\n+\n+            // Check for cancellation before Proceeding the chain.\n+            if (chain.call().isCanceled()) {\n+                throw ExceptionUtils.CALL_CANCELLED_IO_EXCEPTION;\n+            }\n+\n+            Response response = null;\n+            Exception exception = null;\n+            // Proceed.\n+            try {\n+                response = chain.proceed(request);\n+            } catch (Exception e) {\n+                exception = e;\n+            }\n+\n+            // Check for cancellation after Proceed.\n+            if (chain.call().isCanceled()) {\n+                try {\n+                    if (exception != null) {\n+                        // The later interceptors those executes as a result of above 'chain.proceed' may throw", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b0415a2205aef28e27994835eae78f098856692"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg5MTA0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    // if it identified that call is cancelled, we don't want to retry on such cases.\n          \n          \n            \n                                    // If it is identified that the call is cancelled, we don't want to retry on such cases.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/253#discussion_r451891040", "createdAt": "2020-07-09T00:07:10Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java", "diffHunk": "@@ -0,0 +1,214 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.http.interceptor;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.internal.util.ExceptionUtils;\n+import com.azure.android.core.util.DateTimeRfc1123;\n+\n+import org.threeten.bp.Duration;\n+import org.threeten.bp.OffsetDateTime;\n+import org.threeten.bp.temporal.ChronoUnit;\n+\n+import java.io.IOException;\n+\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+/**\n+ * Pipeline interceptor that retries when a recoverable exception or HTTP error occurs.\n+ */\n+public class RetryInterceptor implements Interceptor {\n+    private final RetryStrategy retryStrategy;\n+\n+    /**\n+     * Creates {@link RetryInterceptor} with the provided {@link RetryStrategy}.\n+     *\n+     * @param retryStrategy The {@link RetryStrategy} used for retries.\n+     */\n+    public RetryInterceptor(RetryStrategy retryStrategy) {\n+        this.retryStrategy = retryStrategy;\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses fixed backoff delay retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param delay The fixed backoff delay applied before every retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor fixedDelay(int maxRetries, Duration delay) {\n+        return new RetryInterceptor(new FixedDelay(maxRetries, delay));\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses a default full jitter backoff\n+     * retry strategy.\n+     *\n+     * <p>\n+     * The retry strategy by default retries maximum 3 times, uses 800 milliseconds as\n+     * the default base delay and uses 8 seconds as default maximum backoff delay before a retry.\n+     *\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff() {\n+        return new RetryInterceptor(new ExponentialBackoff());\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses full jitter backoff retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param baseDelay The delay used as the coefficient for backoffs, also baseDelay will be the first backoff delay.\n+     * @param maxDelay The maximum backoff delay before a retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff(int maxRetries, Duration baseDelay, Duration maxDelay) {\n+        return new RetryInterceptor(new ExponentialBackoff(maxRetries, baseDelay, maxDelay));\n+    }\n+\n+    /**\n+     * Intercept any exception in the pipeline or the HTTP response error and retry if recoverable.\n+\n+     * @param chain Provide access to the response.\n+     *\n+     * @return Response from the next interceptor in the pipeline.\n+     * @throws IOException If the pipeline gets canceled or an IO error that cannot be\n+     * retried any more, for example, max retry limit reached.\n+     */\n+    @NonNull\n+    @Override\n+    public Response intercept(Chain chain) throws IOException {\n+        final Request request = chain.request();\n+\n+        int retryAttempts = 0;\n+        final int maxRetries = this.retryStrategy.getMaxRetries();\n+        do {\n+\n+            // Check for cancellation before Proceeding the chain.\n+            if (chain.call().isCanceled()) {\n+                throw ExceptionUtils.CALL_CANCELLED_IO_EXCEPTION;\n+            }\n+\n+            Response response = null;\n+            Exception exception = null;\n+            // Proceed.\n+            try {\n+                response = chain.proceed(request);\n+            } catch (Exception e) {\n+                exception = e;\n+            }\n+\n+            // Check for cancellation after Proceed.\n+            if (chain.call().isCanceled()) {\n+                try {\n+                    if (exception != null) {\n+                        // The later interceptors those executes as a result of above 'chain.proceed' may throw\n+                        // IOException(\"Cancelled\") [e.g. okhttp3.internal.http.RetryAndFollowUpInterceptor]\n+                        // if it identified that call is cancelled, we don't want to retry on such cases.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b0415a2205aef28e27994835eae78f098856692"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg5NTY3MQ==", "bodyText": "Maybe it is obvious to people that you will get an interceptor with a specific type of delay with these static methods, however, I would change the name just to be a bit more explicit about it. Right now someone that only looks at the method name could think you are getting some sort of delay from this, instead of the interceptor itself.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static RetryInterceptor fixedDelay(int maxRetries, Duration delay) {\n          \n          \n            \n                public static RetryInterceptor withFixedDelay(int maxRetries, Duration delay) {\n          \n      \n    \n    \n  \n\nNot sure this is the best name for it, but I hope you get the idea :)", "url": "https://github.com/Azure/azure-sdk-for-android/pull/253#discussion_r451895671", "createdAt": "2020-07-09T00:23:32Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java", "diffHunk": "@@ -0,0 +1,214 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.http.interceptor;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.internal.util.ExceptionUtils;\n+import com.azure.android.core.util.DateTimeRfc1123;\n+\n+import org.threeten.bp.Duration;\n+import org.threeten.bp.OffsetDateTime;\n+import org.threeten.bp.temporal.ChronoUnit;\n+\n+import java.io.IOException;\n+\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+/**\n+ * Pipeline interceptor that retries when a recoverable exception or HTTP error occurs.\n+ */\n+public class RetryInterceptor implements Interceptor {\n+    private final RetryStrategy retryStrategy;\n+\n+    /**\n+     * Creates {@link RetryInterceptor} with the provided {@link RetryStrategy}.\n+     *\n+     * @param retryStrategy The {@link RetryStrategy} used for retries.\n+     */\n+    public RetryInterceptor(RetryStrategy retryStrategy) {\n+        this.retryStrategy = retryStrategy;\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses fixed backoff delay retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param delay The fixed backoff delay applied before every retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor fixedDelay(int maxRetries, Duration delay) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b0415a2205aef28e27994835eae78f098856692"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg5NTcwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static RetryInterceptor exponentialBackoff() {\n          \n          \n            \n                public static RetryInterceptor withExponentialBackoff() {", "url": "https://github.com/Azure/azure-sdk-for-android/pull/253#discussion_r451895706", "createdAt": "2020-07-09T00:23:39Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java", "diffHunk": "@@ -0,0 +1,214 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.http.interceptor;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.internal.util.ExceptionUtils;\n+import com.azure.android.core.util.DateTimeRfc1123;\n+\n+import org.threeten.bp.Duration;\n+import org.threeten.bp.OffsetDateTime;\n+import org.threeten.bp.temporal.ChronoUnit;\n+\n+import java.io.IOException;\n+\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+/**\n+ * Pipeline interceptor that retries when a recoverable exception or HTTP error occurs.\n+ */\n+public class RetryInterceptor implements Interceptor {\n+    private final RetryStrategy retryStrategy;\n+\n+    /**\n+     * Creates {@link RetryInterceptor} with the provided {@link RetryStrategy}.\n+     *\n+     * @param retryStrategy The {@link RetryStrategy} used for retries.\n+     */\n+    public RetryInterceptor(RetryStrategy retryStrategy) {\n+        this.retryStrategy = retryStrategy;\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses fixed backoff delay retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param delay The fixed backoff delay applied before every retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor fixedDelay(int maxRetries, Duration delay) {\n+        return new RetryInterceptor(new FixedDelay(maxRetries, delay));\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses a default full jitter backoff\n+     * retry strategy.\n+     *\n+     * <p>\n+     * The retry strategy by default retries maximum 3 times, uses 800 milliseconds as\n+     * the default base delay and uses 8 seconds as default maximum backoff delay before a retry.\n+     *\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b0415a2205aef28e27994835eae78f098856692"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg5NTc3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static RetryInterceptor exponentialBackoff(int maxRetries, Duration baseDelay, Duration maxDelay) {\n          \n          \n            \n                public static RetryInterceptor withExponentialBackoff(int maxRetries, Duration baseDelay, Duration maxDelay) {", "url": "https://github.com/Azure/azure-sdk-for-android/pull/253#discussion_r451895772", "createdAt": "2020-07-09T00:23:54Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java", "diffHunk": "@@ -0,0 +1,214 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.http.interceptor;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.internal.util.ExceptionUtils;\n+import com.azure.android.core.util.DateTimeRfc1123;\n+\n+import org.threeten.bp.Duration;\n+import org.threeten.bp.OffsetDateTime;\n+import org.threeten.bp.temporal.ChronoUnit;\n+\n+import java.io.IOException;\n+\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+/**\n+ * Pipeline interceptor that retries when a recoverable exception or HTTP error occurs.\n+ */\n+public class RetryInterceptor implements Interceptor {\n+    private final RetryStrategy retryStrategy;\n+\n+    /**\n+     * Creates {@link RetryInterceptor} with the provided {@link RetryStrategy}.\n+     *\n+     * @param retryStrategy The {@link RetryStrategy} used for retries.\n+     */\n+    public RetryInterceptor(RetryStrategy retryStrategy) {\n+        this.retryStrategy = retryStrategy;\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses fixed backoff delay retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param delay The fixed backoff delay applied before every retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor fixedDelay(int maxRetries, Duration delay) {\n+        return new RetryInterceptor(new FixedDelay(maxRetries, delay));\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses a default full jitter backoff\n+     * retry strategy.\n+     *\n+     * <p>\n+     * The retry strategy by default retries maximum 3 times, uses 800 milliseconds as\n+     * the default base delay and uses 8 seconds as default maximum backoff delay before a retry.\n+     *\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff() {\n+        return new RetryInterceptor(new ExponentialBackoff());\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses full jitter backoff retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param baseDelay The delay used as the coefficient for backoffs, also baseDelay will be the first backoff delay.\n+     * @param maxDelay The maximum backoff delay before a retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff(int maxRetries, Duration baseDelay, Duration maxDelay) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b0415a2205aef28e27994835eae78f098856692"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "913a23675b8ea543a1388a6c4dcafde3b3f8dc73", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/913a23675b8ea543a1388a6c4dcafde3b3f8dc73", "committedDate": "2020-07-09T06:45:45Z", "message": "Improve JavaDoc\n\nCo-authored-by: vcolin7 <vicolina@microsoft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b91c57f0f2e77f8a3aa400250398037e2b99b7eb", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/b91c57f0f2e77f8a3aa400250398037e2b99b7eb", "committedDate": "2020-07-09T06:56:19Z", "message": "Renaming RetryInterceptor factory methods to have \"with\" prefix.\n\nCo-authored-by: vcolin7 <vicolina@microsoft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5174f15df69f590f9436bc71cf179f0e4d16fe2c", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/5174f15df69f590f9436bc71cf179f0e4d16fe2c", "committedDate": "2020-07-09T08:01:39Z", "message": "Adding reference/comment for 429, 503 status-code."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1ODY2Nzc2", "url": "https://github.com/Azure/azure-sdk-for-android/pull/253#pullrequestreview-445866776", "createdAt": "2020-07-09T18:28:23Z", "commit": {"oid": "5174f15df69f590f9436bc71cf179f0e4d16fe2c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1355, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}