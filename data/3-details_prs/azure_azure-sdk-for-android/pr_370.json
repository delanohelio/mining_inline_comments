{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1ODgxNTQ3", "number": 370, "title": "Create initial version of Chat SDK for Android", "bodyText": "First version of Chat SDK created by autorest.android (work in progress)", "createdAt": "2020-10-01T01:00:16Z", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370", "merged": true, "mergeCommit": {"oid": "631949f8fc8a419cdaa0a4a9174af30c3ec7d98a"}, "closed": true, "closedAt": "2020-10-03T02:08:09Z", "author": {"login": "JianpingChen"}, "timelineItems": {"totalCount": 47, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOIIFpgFqTQ5OTk3MzgwOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOwupRAH2gAyNDk1ODgxNTQ3OmU3NmNkOWI5ZTAxNzg4NGE0NDNmMjAzMDJmYmMxYWFmY2EwMjE1Yjk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5OTczODA5", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#pullrequestreview-499973809", "createdAt": "2020-10-01T02:40:15Z", "commit": {"oid": "8021fdd8fe5372465b5bc9ef8588fb014a2432bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMjo0MDoxNVrOHa4oYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMjo0MDoxNVrOHa4oYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk1Mjg2Ng==", "bodyText": "Actual tests coming ?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r497952866", "createdAt": "2020-10-01T02:40:15Z", "author": {"login": "juancamilor"}, "path": "sdk/communication/chat/src/test/java/com/azure/communication/chat/ExampleUnitTest.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.azure.communication.chat;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * Example local unit test, which will execute on the development machine (host).\n+ *\n+ * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>\n+ */\n+public class ExampleUnitTest {\n+    @Test\n+    public void addition_isCorrect() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8021fdd8fe5372465b5bc9ef8588fb014a2432bb"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNTQwMDE4", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#pullrequestreview-500540018", "createdAt": "2020-10-01T16:51:34Z", "commit": {"oid": "8021fdd8fe5372465b5bc9ef8588fb014a2432bb"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjo1MTozNFrOHbTDUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzoxNDoyM1rOHbT0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM4NTc0NA==", "bodyText": "Is this an Android requirement, that all responses come via callbacks?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498385744", "createdAt": "2020-10-01T16:51:34Z", "author": {"login": "angiurgiu"}, "path": "sdk/communication/chat/src/main/java/com/azure/android/communication/chat/AzureCommunicationChatServiceAsyncClient.java", "diffHunk": "@@ -0,0 +1,490 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.android.communication.chat;\n+\n+import com.azure.android.communication.chat.implementation.AzureCommunicationChatServiceImpl;\n+import com.azure.android.communication.chat.models.AddChatThreadMembersOptions;\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatMessagesCollection;\n+import com.azure.android.communication.chat.models.ChatThread;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.communication.chat.models.ChatThreadMember;\n+import com.azure.android.communication.chat.models.ChatThreadMembersCollection;\n+import com.azure.android.communication.chat.models.ChatThreadsInfoCollection;\n+import com.azure.android.communication.chat.models.CreateChatThreadOptions;\n+import com.azure.android.communication.chat.models.ErrorException;\n+import com.azure.android.communication.chat.models.MultiStatusResponse;\n+import com.azure.android.communication.chat.models.ReadReceipt;\n+import com.azure.android.communication.chat.models.ReadReceiptsCollection;\n+import com.azure.android.communication.chat.models.SendChatMessageOptions;\n+import com.azure.android.communication.chat.models.SendChatMessageResult;\n+import com.azure.android.communication.chat.models.SendReadReceiptRequest;\n+import com.azure.android.communication.chat.models.UpdateChatMessageOptions;\n+import com.azure.android.communication.chat.models.UpdateChatThreadOptions;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.exception.HttpResponseException;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataRetriever;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseCollection;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseRetriever;\n+import com.azure.android.core.util.paging.Page;\n+import com.azure.android.core.util.paging.PagedDataCollection;\n+import com.azure.android.core.util.paging.PagedDataRetriever;\n+import okhttp3.Interceptor;\n+import okhttp3.RequestBody;\n+import okhttp3.ResponseBody;\n+import org.threeten.bp.OffsetDateTime;\n+import retrofit2.Call;\n+import retrofit2.http.Body;\n+import retrofit2.http.DELETE;\n+import retrofit2.http.GET;\n+import retrofit2.http.PATCH;\n+import retrofit2.http.Path;\n+import retrofit2.http.POST;\n+import retrofit2.http.Query;\n+\n+/**\n+ * Initializes a new instance of the asynchronous AzureCommunicationChatService type.\n+ */\n+public final class AzureCommunicationChatServiceAsyncClient {\n+    private AzureCommunicationChatServiceImpl serviceClient;\n+\n+    /**\n+     * Initializes an instance of AzureCommunicationChatService client.\n+     */\n+    AzureCommunicationChatServiceAsyncClient(AzureCommunicationChatServiceImpl serviceClient) {\n+        this.serviceClient = serviceClient;\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceipts(String chatThreadId, final Callback<Page<ReadReceipt>> callback) {\n+        this.serviceClient.listChatReadReceipts(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceiptsPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>> collectionCallback) {\n+        this.serviceClient.listChatReadReceiptsPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Sends a read receipt event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Thread id to send the read receipt event to.\n+     * @param body Request payload for sending a read receipt.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatReadReceipt(String chatThreadId, SendReadReceiptRequest body, final Callback<Void> callback) {\n+        this.serviceClient.sendChatReadReceipt(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Sends a message to a thread.\n+     * \n+     * @param chatThreadId The thread id to send the message to.\n+     * @param body Details of the message to send.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatMessage(String chatThreadId, SendChatMessageOptions body, final Callback<SendChatMessageResult> callback) {\n+        this.serviceClient.sendChatMessage(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, maxPageSize, startTime, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessagesPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>> collectionCallback, Integer maxPageSize, OffsetDateTime startTime) {\n+        this.serviceClient.listChatMessagesPagesAsync(chatThreadId, collectionCallback, maxPageSize, startTime);\n+    }\n+\n+    /**\n+     * Gets a message by id.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void getChatMessage(String chatThreadId, String chatMessageId, final Callback<ChatMessage> callback) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8021fdd8fe5372465b5bc9ef8588fb014a2432bb"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5MjExNw==", "bodyText": "I think these should be in an Options class, but I guess that can't be achieved with the autogenerated tool", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498392117", "createdAt": "2020-10-01T17:02:52Z", "author": {"login": "angiurgiu"}, "path": "sdk/communication/chat/src/main/java/com/azure/android/communication/chat/AzureCommunicationChatServiceAsyncClient.java", "diffHunk": "@@ -0,0 +1,490 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.android.communication.chat;\n+\n+import com.azure.android.communication.chat.implementation.AzureCommunicationChatServiceImpl;\n+import com.azure.android.communication.chat.models.AddChatThreadMembersOptions;\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatMessagesCollection;\n+import com.azure.android.communication.chat.models.ChatThread;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.communication.chat.models.ChatThreadMember;\n+import com.azure.android.communication.chat.models.ChatThreadMembersCollection;\n+import com.azure.android.communication.chat.models.ChatThreadsInfoCollection;\n+import com.azure.android.communication.chat.models.CreateChatThreadOptions;\n+import com.azure.android.communication.chat.models.ErrorException;\n+import com.azure.android.communication.chat.models.MultiStatusResponse;\n+import com.azure.android.communication.chat.models.ReadReceipt;\n+import com.azure.android.communication.chat.models.ReadReceiptsCollection;\n+import com.azure.android.communication.chat.models.SendChatMessageOptions;\n+import com.azure.android.communication.chat.models.SendChatMessageResult;\n+import com.azure.android.communication.chat.models.SendReadReceiptRequest;\n+import com.azure.android.communication.chat.models.UpdateChatMessageOptions;\n+import com.azure.android.communication.chat.models.UpdateChatThreadOptions;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.exception.HttpResponseException;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataRetriever;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseCollection;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseRetriever;\n+import com.azure.android.core.util.paging.Page;\n+import com.azure.android.core.util.paging.PagedDataCollection;\n+import com.azure.android.core.util.paging.PagedDataRetriever;\n+import okhttp3.Interceptor;\n+import okhttp3.RequestBody;\n+import okhttp3.ResponseBody;\n+import org.threeten.bp.OffsetDateTime;\n+import retrofit2.Call;\n+import retrofit2.http.Body;\n+import retrofit2.http.DELETE;\n+import retrofit2.http.GET;\n+import retrofit2.http.PATCH;\n+import retrofit2.http.Path;\n+import retrofit2.http.POST;\n+import retrofit2.http.Query;\n+\n+/**\n+ * Initializes a new instance of the asynchronous AzureCommunicationChatService type.\n+ */\n+public final class AzureCommunicationChatServiceAsyncClient {\n+    private AzureCommunicationChatServiceImpl serviceClient;\n+\n+    /**\n+     * Initializes an instance of AzureCommunicationChatService client.\n+     */\n+    AzureCommunicationChatServiceAsyncClient(AzureCommunicationChatServiceImpl serviceClient) {\n+        this.serviceClient = serviceClient;\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceipts(String chatThreadId, final Callback<Page<ReadReceipt>> callback) {\n+        this.serviceClient.listChatReadReceipts(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceiptsPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>> collectionCallback) {\n+        this.serviceClient.listChatReadReceiptsPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Sends a read receipt event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Thread id to send the read receipt event to.\n+     * @param body Request payload for sending a read receipt.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatReadReceipt(String chatThreadId, SendReadReceiptRequest body, final Callback<Void> callback) {\n+        this.serviceClient.sendChatReadReceipt(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Sends a message to a thread.\n+     * \n+     * @param chatThreadId The thread id to send the message to.\n+     * @param body Details of the message to send.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatMessage(String chatThreadId, SendChatMessageOptions body, final Callback<SendChatMessageResult> callback) {\n+        this.serviceClient.sendChatMessage(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, maxPageSize, startTime, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessagesPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>> collectionCallback, Integer maxPageSize, OffsetDateTime startTime) {\n+        this.serviceClient.listChatMessagesPagesAsync(chatThreadId, collectionCallback, maxPageSize, startTime);\n+    }\n+\n+    /**\n+     * Gets a message by id.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void getChatMessage(String chatThreadId, String chatMessageId, final Callback<ChatMessage> callback) {\n+        this.serviceClient.getChatMessage(chatThreadId, chatMessageId, callback);\n+    }\n+\n+    /**\n+     * Updates a message.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param body Details of the request to update the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void updateChatMessage(String chatThreadId, String chatMessageId, UpdateChatMessageOptions body, final Callback<Void> callback) {\n+        this.serviceClient.updateChatMessage(chatThreadId, chatMessageId, body, callback);\n+    }\n+\n+    /**\n+     * Deletes a message.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void deleteChatMessage(String chatThreadId, String chatMessageId, final Callback<Void> callback) {\n+        this.serviceClient.deleteChatMessage(chatThreadId, chatMessageId, callback);\n+    }\n+\n+    /**\n+     * Posts a typing event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Id of the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendTypingNotification(String chatThreadId, final Callback<Void> callback) {\n+        this.serviceClient.sendTypingNotification(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets the members of a thread.\n+     * \n+     * @param chatThreadId Thread id to get members for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembers(String chatThreadId, final Callback<Page<ChatThreadMember>> callback) {\n+        this.serviceClient.listChatThreadMembers(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets the members of a thread.\n+     * \n+     * @param chatThreadId Thread id to get members for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembersPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>> collectionCallback) {\n+        this.serviceClient.listChatThreadMembersPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Adds thread members to a thread. If members already exist, no change occurs.\n+     * \n+     * @param chatThreadId Id of the thread to add members to.\n+     * @param body Thread members to be added to the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void addChatThreadMembers(String chatThreadId, AddChatThreadMembersOptions body, final Callback<Void> callback) {\n+        this.serviceClient.addChatThreadMembers(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Remove a member from a thread.\n+     * \n+     * @param chatThreadId Thread id to remove the member from.\n+     * @param chatMemberId Id of the thread member to remove from the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void removeChatThreadMember(String chatThreadId, String chatMemberId, final Callback<Void> callback) {\n+        this.serviceClient.removeChatThreadMember(chatThreadId, chatMemberId, callback);\n+    }\n+\n+    /**\n+     * Creates a chat thread.\n+     * \n+     * @param body Request payload for creating a chat thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void createChatThread(CreateChatThreadOptions body, final Callback<MultiStatusResponse> callback) {\n+        this.serviceClient.createChatThread(body, callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param maxPageSize The maximum number of chat threads returned per page.\n+     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreads(Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatThreadInfo>> callback) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8021fdd8fe5372465b5bc9ef8588fb014a2432bb"}, "originalPosition": 293}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5NzA5MA==", "bodyText": "It's not ideal that we are returning this class (it's a list of mapping between id - status), so it won't be easy for the client to parse the thread id out of it.\nBut I know that it's something we can't do with auto-generated code :)", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498397090", "createdAt": "2020-10-01T17:12:18Z", "author": {"login": "angiurgiu"}, "path": "sdk/communication/chat/src/main/java/com/azure/android/communication/chat/AzureCommunicationChatServiceAsyncClient.java", "diffHunk": "@@ -0,0 +1,490 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.android.communication.chat;\n+\n+import com.azure.android.communication.chat.implementation.AzureCommunicationChatServiceImpl;\n+import com.azure.android.communication.chat.models.AddChatThreadMembersOptions;\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatMessagesCollection;\n+import com.azure.android.communication.chat.models.ChatThread;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.communication.chat.models.ChatThreadMember;\n+import com.azure.android.communication.chat.models.ChatThreadMembersCollection;\n+import com.azure.android.communication.chat.models.ChatThreadsInfoCollection;\n+import com.azure.android.communication.chat.models.CreateChatThreadOptions;\n+import com.azure.android.communication.chat.models.ErrorException;\n+import com.azure.android.communication.chat.models.MultiStatusResponse;\n+import com.azure.android.communication.chat.models.ReadReceipt;\n+import com.azure.android.communication.chat.models.ReadReceiptsCollection;\n+import com.azure.android.communication.chat.models.SendChatMessageOptions;\n+import com.azure.android.communication.chat.models.SendChatMessageResult;\n+import com.azure.android.communication.chat.models.SendReadReceiptRequest;\n+import com.azure.android.communication.chat.models.UpdateChatMessageOptions;\n+import com.azure.android.communication.chat.models.UpdateChatThreadOptions;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.exception.HttpResponseException;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataRetriever;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseCollection;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseRetriever;\n+import com.azure.android.core.util.paging.Page;\n+import com.azure.android.core.util.paging.PagedDataCollection;\n+import com.azure.android.core.util.paging.PagedDataRetriever;\n+import okhttp3.Interceptor;\n+import okhttp3.RequestBody;\n+import okhttp3.ResponseBody;\n+import org.threeten.bp.OffsetDateTime;\n+import retrofit2.Call;\n+import retrofit2.http.Body;\n+import retrofit2.http.DELETE;\n+import retrofit2.http.GET;\n+import retrofit2.http.PATCH;\n+import retrofit2.http.Path;\n+import retrofit2.http.POST;\n+import retrofit2.http.Query;\n+\n+/**\n+ * Initializes a new instance of the asynchronous AzureCommunicationChatService type.\n+ */\n+public final class AzureCommunicationChatServiceAsyncClient {\n+    private AzureCommunicationChatServiceImpl serviceClient;\n+\n+    /**\n+     * Initializes an instance of AzureCommunicationChatService client.\n+     */\n+    AzureCommunicationChatServiceAsyncClient(AzureCommunicationChatServiceImpl serviceClient) {\n+        this.serviceClient = serviceClient;\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceipts(String chatThreadId, final Callback<Page<ReadReceipt>> callback) {\n+        this.serviceClient.listChatReadReceipts(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceiptsPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>> collectionCallback) {\n+        this.serviceClient.listChatReadReceiptsPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Sends a read receipt event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Thread id to send the read receipt event to.\n+     * @param body Request payload for sending a read receipt.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatReadReceipt(String chatThreadId, SendReadReceiptRequest body, final Callback<Void> callback) {\n+        this.serviceClient.sendChatReadReceipt(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Sends a message to a thread.\n+     * \n+     * @param chatThreadId The thread id to send the message to.\n+     * @param body Details of the message to send.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatMessage(String chatThreadId, SendChatMessageOptions body, final Callback<SendChatMessageResult> callback) {\n+        this.serviceClient.sendChatMessage(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, maxPageSize, startTime, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessagesPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>> collectionCallback, Integer maxPageSize, OffsetDateTime startTime) {\n+        this.serviceClient.listChatMessagesPagesAsync(chatThreadId, collectionCallback, maxPageSize, startTime);\n+    }\n+\n+    /**\n+     * Gets a message by id.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void getChatMessage(String chatThreadId, String chatMessageId, final Callback<ChatMessage> callback) {\n+        this.serviceClient.getChatMessage(chatThreadId, chatMessageId, callback);\n+    }\n+\n+    /**\n+     * Updates a message.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param body Details of the request to update the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void updateChatMessage(String chatThreadId, String chatMessageId, UpdateChatMessageOptions body, final Callback<Void> callback) {\n+        this.serviceClient.updateChatMessage(chatThreadId, chatMessageId, body, callback);\n+    }\n+\n+    /**\n+     * Deletes a message.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void deleteChatMessage(String chatThreadId, String chatMessageId, final Callback<Void> callback) {\n+        this.serviceClient.deleteChatMessage(chatThreadId, chatMessageId, callback);\n+    }\n+\n+    /**\n+     * Posts a typing event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Id of the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendTypingNotification(String chatThreadId, final Callback<Void> callback) {\n+        this.serviceClient.sendTypingNotification(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets the members of a thread.\n+     * \n+     * @param chatThreadId Thread id to get members for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembers(String chatThreadId, final Callback<Page<ChatThreadMember>> callback) {\n+        this.serviceClient.listChatThreadMembers(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets the members of a thread.\n+     * \n+     * @param chatThreadId Thread id to get members for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembersPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>> collectionCallback) {\n+        this.serviceClient.listChatThreadMembersPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Adds thread members to a thread. If members already exist, no change occurs.\n+     * \n+     * @param chatThreadId Id of the thread to add members to.\n+     * @param body Thread members to be added to the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void addChatThreadMembers(String chatThreadId, AddChatThreadMembersOptions body, final Callback<Void> callback) {\n+        this.serviceClient.addChatThreadMembers(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Remove a member from a thread.\n+     * \n+     * @param chatThreadId Thread id to remove the member from.\n+     * @param chatMemberId Id of the thread member to remove from the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void removeChatThreadMember(String chatThreadId, String chatMemberId, final Callback<Void> callback) {\n+        this.serviceClient.removeChatThreadMember(chatThreadId, chatMemberId, callback);\n+    }\n+\n+    /**\n+     * Creates a chat thread.\n+     * \n+     * @param body Request payload for creating a chat thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void createChatThread(CreateChatThreadOptions body, final Callback<MultiStatusResponse> callback) {\n+        this.serviceClient.createChatThread(body, callback);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8021fdd8fe5372465b5bc9ef8588fb014a2432bb"}, "originalPosition": 280}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5NzY0MA==", "bodyText": "I think these should be private or protected, no?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498397640", "createdAt": "2020-10-01T17:13:18Z", "author": {"login": "angiurgiu"}, "path": "sdk/communication/chat/src/main/java/com/azure/android/communication/chat/AzureCommunicationChatServiceAsyncClient.java", "diffHunk": "@@ -0,0 +1,490 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.android.communication.chat;\n+\n+import com.azure.android.communication.chat.implementation.AzureCommunicationChatServiceImpl;\n+import com.azure.android.communication.chat.models.AddChatThreadMembersOptions;\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatMessagesCollection;\n+import com.azure.android.communication.chat.models.ChatThread;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.communication.chat.models.ChatThreadMember;\n+import com.azure.android.communication.chat.models.ChatThreadMembersCollection;\n+import com.azure.android.communication.chat.models.ChatThreadsInfoCollection;\n+import com.azure.android.communication.chat.models.CreateChatThreadOptions;\n+import com.azure.android.communication.chat.models.ErrorException;\n+import com.azure.android.communication.chat.models.MultiStatusResponse;\n+import com.azure.android.communication.chat.models.ReadReceipt;\n+import com.azure.android.communication.chat.models.ReadReceiptsCollection;\n+import com.azure.android.communication.chat.models.SendChatMessageOptions;\n+import com.azure.android.communication.chat.models.SendChatMessageResult;\n+import com.azure.android.communication.chat.models.SendReadReceiptRequest;\n+import com.azure.android.communication.chat.models.UpdateChatMessageOptions;\n+import com.azure.android.communication.chat.models.UpdateChatThreadOptions;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.exception.HttpResponseException;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataRetriever;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseCollection;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseRetriever;\n+import com.azure.android.core.util.paging.Page;\n+import com.azure.android.core.util.paging.PagedDataCollection;\n+import com.azure.android.core.util.paging.PagedDataRetriever;\n+import okhttp3.Interceptor;\n+import okhttp3.RequestBody;\n+import okhttp3.ResponseBody;\n+import org.threeten.bp.OffsetDateTime;\n+import retrofit2.Call;\n+import retrofit2.http.Body;\n+import retrofit2.http.DELETE;\n+import retrofit2.http.GET;\n+import retrofit2.http.PATCH;\n+import retrofit2.http.Path;\n+import retrofit2.http.POST;\n+import retrofit2.http.Query;\n+\n+/**\n+ * Initializes a new instance of the asynchronous AzureCommunicationChatService type.\n+ */\n+public final class AzureCommunicationChatServiceAsyncClient {\n+    private AzureCommunicationChatServiceImpl serviceClient;\n+\n+    /**\n+     * Initializes an instance of AzureCommunicationChatService client.\n+     */\n+    AzureCommunicationChatServiceAsyncClient(AzureCommunicationChatServiceImpl serviceClient) {\n+        this.serviceClient = serviceClient;\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceipts(String chatThreadId, final Callback<Page<ReadReceipt>> callback) {\n+        this.serviceClient.listChatReadReceipts(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceiptsPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>> collectionCallback) {\n+        this.serviceClient.listChatReadReceiptsPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Sends a read receipt event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Thread id to send the read receipt event to.\n+     * @param body Request payload for sending a read receipt.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatReadReceipt(String chatThreadId, SendReadReceiptRequest body, final Callback<Void> callback) {\n+        this.serviceClient.sendChatReadReceipt(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Sends a message to a thread.\n+     * \n+     * @param chatThreadId The thread id to send the message to.\n+     * @param body Details of the message to send.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatMessage(String chatThreadId, SendChatMessageOptions body, final Callback<SendChatMessageResult> callback) {\n+        this.serviceClient.sendChatMessage(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, maxPageSize, startTime, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessagesPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>> collectionCallback, Integer maxPageSize, OffsetDateTime startTime) {\n+        this.serviceClient.listChatMessagesPagesAsync(chatThreadId, collectionCallback, maxPageSize, startTime);\n+    }\n+\n+    /**\n+     * Gets a message by id.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void getChatMessage(String chatThreadId, String chatMessageId, final Callback<ChatMessage> callback) {\n+        this.serviceClient.getChatMessage(chatThreadId, chatMessageId, callback);\n+    }\n+\n+    /**\n+     * Updates a message.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param body Details of the request to update the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void updateChatMessage(String chatThreadId, String chatMessageId, UpdateChatMessageOptions body, final Callback<Void> callback) {\n+        this.serviceClient.updateChatMessage(chatThreadId, chatMessageId, body, callback);\n+    }\n+\n+    /**\n+     * Deletes a message.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void deleteChatMessage(String chatThreadId, String chatMessageId, final Callback<Void> callback) {\n+        this.serviceClient.deleteChatMessage(chatThreadId, chatMessageId, callback);\n+    }\n+\n+    /**\n+     * Posts a typing event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Id of the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendTypingNotification(String chatThreadId, final Callback<Void> callback) {\n+        this.serviceClient.sendTypingNotification(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets the members of a thread.\n+     * \n+     * @param chatThreadId Thread id to get members for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembers(String chatThreadId, final Callback<Page<ChatThreadMember>> callback) {\n+        this.serviceClient.listChatThreadMembers(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets the members of a thread.\n+     * \n+     * @param chatThreadId Thread id to get members for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembersPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>> collectionCallback) {\n+        this.serviceClient.listChatThreadMembersPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Adds thread members to a thread. If members already exist, no change occurs.\n+     * \n+     * @param chatThreadId Id of the thread to add members to.\n+     * @param body Thread members to be added to the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void addChatThreadMembers(String chatThreadId, AddChatThreadMembersOptions body, final Callback<Void> callback) {\n+        this.serviceClient.addChatThreadMembers(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Remove a member from a thread.\n+     * \n+     * @param chatThreadId Thread id to remove the member from.\n+     * @param chatMemberId Id of the thread member to remove from the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void removeChatThreadMember(String chatThreadId, String chatMemberId, final Callback<Void> callback) {\n+        this.serviceClient.removeChatThreadMember(chatThreadId, chatMemberId, callback);\n+    }\n+\n+    /**\n+     * Creates a chat thread.\n+     * \n+     * @param body Request payload for creating a chat thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void createChatThread(CreateChatThreadOptions body, final Callback<MultiStatusResponse> callback) {\n+        this.serviceClient.createChatThread(body, callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param maxPageSize The maximum number of chat threads returned per page.\n+     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreads(Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatThreadInfo>> callback) {\n+        this.serviceClient.listChatThreads(maxPageSize, startTime, callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreads(final Callback<Page<ChatThreadInfo>> callback) {\n+        this.serviceClient.listChatThreads(callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @param maxPageSize The maximum number of chat threads returned per page.\n+     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadsPages(final Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>> collectionCallback, Integer maxPageSize, OffsetDateTime startTime) {\n+        this.serviceClient.listChatThreadsPagesAsync(collectionCallback, maxPageSize, startTime);\n+    }\n+\n+    /**\n+     * Updates a thread's properties.\n+     * \n+     * @param chatThreadId The id of the thread to update.\n+     * @param body Request payload for updating a chat thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void updateChatThread(String chatThreadId, UpdateChatThreadOptions body, final Callback<Void> callback) {\n+        this.serviceClient.updateChatThread(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Gets a chat thread.\n+     * \n+     * @param chatThreadId Thread id to get.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void getChatThread(String chatThreadId, final Callback<ChatThread> callback) {\n+        this.serviceClient.getChatThread(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Deletes a thread.\n+     * \n+     * @param chatThreadId Thread id to delete.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void deleteChatThread(String chatThreadId, final Callback<Void> callback) {\n+        this.serviceClient.deleteChatThread(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Get the next page of items.\n+     * \n+     * @param nextLink null\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceiptsNext(String nextLink, final Callback<Page<ReadReceipt>> callback) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8021fdd8fe5372465b5bc9ef8588fb014a2432bb"}, "originalPosition": 372}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5ODI1Nw==", "bodyText": "What will the user agent be?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498398257", "createdAt": "2020-10-01T17:14:23Z", "author": {"login": "angiurgiu"}, "path": "sdk/communication/chat/src/main/java/com/azure/android/communication/chat/AzureCommunicationChatServiceAsyncClient.java", "diffHunk": "@@ -0,0 +1,490 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.android.communication.chat;\n+\n+import com.azure.android.communication.chat.implementation.AzureCommunicationChatServiceImpl;\n+import com.azure.android.communication.chat.models.AddChatThreadMembersOptions;\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatMessagesCollection;\n+import com.azure.android.communication.chat.models.ChatThread;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.communication.chat.models.ChatThreadMember;\n+import com.azure.android.communication.chat.models.ChatThreadMembersCollection;\n+import com.azure.android.communication.chat.models.ChatThreadsInfoCollection;\n+import com.azure.android.communication.chat.models.CreateChatThreadOptions;\n+import com.azure.android.communication.chat.models.ErrorException;\n+import com.azure.android.communication.chat.models.MultiStatusResponse;\n+import com.azure.android.communication.chat.models.ReadReceipt;\n+import com.azure.android.communication.chat.models.ReadReceiptsCollection;\n+import com.azure.android.communication.chat.models.SendChatMessageOptions;\n+import com.azure.android.communication.chat.models.SendChatMessageResult;\n+import com.azure.android.communication.chat.models.SendReadReceiptRequest;\n+import com.azure.android.communication.chat.models.UpdateChatMessageOptions;\n+import com.azure.android.communication.chat.models.UpdateChatThreadOptions;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.exception.HttpResponseException;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataRetriever;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseCollection;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseRetriever;\n+import com.azure.android.core.util.paging.Page;\n+import com.azure.android.core.util.paging.PagedDataCollection;\n+import com.azure.android.core.util.paging.PagedDataRetriever;\n+import okhttp3.Interceptor;\n+import okhttp3.RequestBody;\n+import okhttp3.ResponseBody;\n+import org.threeten.bp.OffsetDateTime;\n+import retrofit2.Call;\n+import retrofit2.http.Body;\n+import retrofit2.http.DELETE;\n+import retrofit2.http.GET;\n+import retrofit2.http.PATCH;\n+import retrofit2.http.Path;\n+import retrofit2.http.POST;\n+import retrofit2.http.Query;\n+\n+/**\n+ * Initializes a new instance of the asynchronous AzureCommunicationChatService type.\n+ */\n+public final class AzureCommunicationChatServiceAsyncClient {\n+    private AzureCommunicationChatServiceImpl serviceClient;\n+\n+    /**\n+     * Initializes an instance of AzureCommunicationChatService client.\n+     */\n+    AzureCommunicationChatServiceAsyncClient(AzureCommunicationChatServiceImpl serviceClient) {\n+        this.serviceClient = serviceClient;\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceipts(String chatThreadId, final Callback<Page<ReadReceipt>> callback) {\n+        this.serviceClient.listChatReadReceipts(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceiptsPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>> collectionCallback) {\n+        this.serviceClient.listChatReadReceiptsPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Sends a read receipt event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Thread id to send the read receipt event to.\n+     * @param body Request payload for sending a read receipt.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatReadReceipt(String chatThreadId, SendReadReceiptRequest body, final Callback<Void> callback) {\n+        this.serviceClient.sendChatReadReceipt(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Sends a message to a thread.\n+     * \n+     * @param chatThreadId The thread id to send the message to.\n+     * @param body Details of the message to send.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatMessage(String chatThreadId, SendChatMessageOptions body, final Callback<SendChatMessageResult> callback) {\n+        this.serviceClient.sendChatMessage(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, maxPageSize, startTime, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessagesPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>> collectionCallback, Integer maxPageSize, OffsetDateTime startTime) {\n+        this.serviceClient.listChatMessagesPagesAsync(chatThreadId, collectionCallback, maxPageSize, startTime);\n+    }\n+\n+    /**\n+     * Gets a message by id.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void getChatMessage(String chatThreadId, String chatMessageId, final Callback<ChatMessage> callback) {\n+        this.serviceClient.getChatMessage(chatThreadId, chatMessageId, callback);\n+    }\n+\n+    /**\n+     * Updates a message.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param body Details of the request to update the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void updateChatMessage(String chatThreadId, String chatMessageId, UpdateChatMessageOptions body, final Callback<Void> callback) {\n+        this.serviceClient.updateChatMessage(chatThreadId, chatMessageId, body, callback);\n+    }\n+\n+    /**\n+     * Deletes a message.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void deleteChatMessage(String chatThreadId, String chatMessageId, final Callback<Void> callback) {\n+        this.serviceClient.deleteChatMessage(chatThreadId, chatMessageId, callback);\n+    }\n+\n+    /**\n+     * Posts a typing event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Id of the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendTypingNotification(String chatThreadId, final Callback<Void> callback) {\n+        this.serviceClient.sendTypingNotification(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets the members of a thread.\n+     * \n+     * @param chatThreadId Thread id to get members for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembers(String chatThreadId, final Callback<Page<ChatThreadMember>> callback) {\n+        this.serviceClient.listChatThreadMembers(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets the members of a thread.\n+     * \n+     * @param chatThreadId Thread id to get members for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembersPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>> collectionCallback) {\n+        this.serviceClient.listChatThreadMembersPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Adds thread members to a thread. If members already exist, no change occurs.\n+     * \n+     * @param chatThreadId Id of the thread to add members to.\n+     * @param body Thread members to be added to the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void addChatThreadMembers(String chatThreadId, AddChatThreadMembersOptions body, final Callback<Void> callback) {\n+        this.serviceClient.addChatThreadMembers(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Remove a member from a thread.\n+     * \n+     * @param chatThreadId Thread id to remove the member from.\n+     * @param chatMemberId Id of the thread member to remove from the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void removeChatThreadMember(String chatThreadId, String chatMemberId, final Callback<Void> callback) {\n+        this.serviceClient.removeChatThreadMember(chatThreadId, chatMemberId, callback);\n+    }\n+\n+    /**\n+     * Creates a chat thread.\n+     * \n+     * @param body Request payload for creating a chat thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void createChatThread(CreateChatThreadOptions body, final Callback<MultiStatusResponse> callback) {\n+        this.serviceClient.createChatThread(body, callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param maxPageSize The maximum number of chat threads returned per page.\n+     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreads(Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatThreadInfo>> callback) {\n+        this.serviceClient.listChatThreads(maxPageSize, startTime, callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreads(final Callback<Page<ChatThreadInfo>> callback) {\n+        this.serviceClient.listChatThreads(callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @param maxPageSize The maximum number of chat threads returned per page.\n+     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadsPages(final Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>> collectionCallback, Integer maxPageSize, OffsetDateTime startTime) {\n+        this.serviceClient.listChatThreadsPagesAsync(collectionCallback, maxPageSize, startTime);\n+    }\n+\n+    /**\n+     * Updates a thread's properties.\n+     * \n+     * @param chatThreadId The id of the thread to update.\n+     * @param body Request payload for updating a chat thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void updateChatThread(String chatThreadId, UpdateChatThreadOptions body, final Callback<Void> callback) {\n+        this.serviceClient.updateChatThread(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Gets a chat thread.\n+     * \n+     * @param chatThreadId Thread id to get.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void getChatThread(String chatThreadId, final Callback<ChatThread> callback) {\n+        this.serviceClient.getChatThread(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Deletes a thread.\n+     * \n+     * @param chatThreadId Thread id to delete.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void deleteChatThread(String chatThreadId, final Callback<Void> callback) {\n+        this.serviceClient.deleteChatThread(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Get the next page of items.\n+     * \n+     * @param nextLink null\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceiptsNext(String nextLink, final Callback<Page<ReadReceipt>> callback) {\n+        this.serviceClient.listChatReadReceiptsNext(nextLink, callback);\n+    }\n+\n+    /**\n+     * Get the next page of items.\n+     * \n+     * @param nextLink null\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessagesNext(String nextLink, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessagesNext(nextLink, callback);\n+    }\n+\n+    /**\n+     * Get the next page of items.\n+     * \n+     * @param nextLink null\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembersNext(String nextLink, final Callback<Page<ChatThreadMember>> callback) {\n+        this.serviceClient.listChatThreadMembersNext(nextLink, callback);\n+    }\n+\n+    /**\n+     * Get the next page of items.\n+     * \n+     * @param nextLink null\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadsNext(String nextLink, final Callback<Page<ChatThreadInfo>> callback) {\n+        this.serviceClient.listChatThreadsNext(nextLink, callback);\n+    }\n+\n+    /**\n+     * A builder for creating a new instance of the AzureCommunicationChatServiceAsyncClient type.\n+     */\n+    public static final class Builder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8021fdd8fe5372465b5bc9ef8588fb014a2432bb"}, "originalPosition": 418}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e16941c69999f1126cd586a1c46673fc8debf32d", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/e16941c69999f1126cd586a1c46673fc8debf32d", "committedDate": "2020-10-01T20:55:20Z", "message": "Rebase from master after paging code merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b8139d9070439d132267c4379e462021af7fb52", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/5b8139d9070439d132267c4379e462021af7fb52", "committedDate": "2020-10-01T20:58:35Z", "message": "Remove page size from retriever constructors since it only makes it harder for autorest.android"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "902c180f84aed5033cbae0cd8633b908137da5df", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/902c180f84aed5033cbae0cd8633b908137da5df", "committedDate": "2020-10-01T20:58:35Z", "message": "Create preview version of Chat sdk for Android"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8396102e0d92f4773206520d9ba9d8ec697c3d4f", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/8396102e0d92f4773206520d9ba9d8ec697c3d4f", "committedDate": "2020-10-01T20:58:35Z", "message": "Update with latest swagger"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzM4NTg1", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#pullrequestreview-500738585", "createdAt": "2020-10-01T21:42:23Z", "commit": {"oid": "8396102e0d92f4773206520d9ba9d8ec697c3d4f"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMTo0MjoyM1rOHbbuIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMTo0Nzo0MlrOHbb2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyNzc3Nw==", "bodyText": "To release via pipeline, we also need ci.yml file. E.g. https://github.com/Azure/azure-sdk-for-android/blob/master/sdk/communication/ci.yml", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498527777", "createdAt": "2020-10-01T21:42:23Z", "author": {"login": "anuchandy"}, "path": "build.gradle", "diffHunk": "@@ -118,7 +118,7 @@ configure(subprojects.findAll { it.path.startsWith(':sdk:') && it.path.count(':'\n                     artifact javadocJar\n \n                     pom {\n-                        name = project.publishName\n+                        name = \"Microsoft Azure Android Client Library common code For Communication Service\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8396102e0d92f4773206520d9ba9d8ec697c3d4f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyODQyMg==", "bodyText": "<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.azure.android.communication.common\">\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n</manifest>", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498528422", "createdAt": "2020-10-01T21:44:05Z", "author": {"login": "anuchandy"}, "path": "sdk/communication/chat/src/main/AndroidManifest.xml", "diffHunk": "@@ -0,0 +1,5 @@\n+<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    package=\"com.azure.communication.chat\">\n+\n+    /", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8396102e0d92f4773206520d9ba9d8ec697c3d4f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyOTg0MQ==", "bodyText": "non-null pageId is for the first page I assume?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498529841", "createdAt": "2020-10-01T21:47:42Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "diffHunk": "@@ -51,7 +51,6 @@ public P getFirstPage() {\n      * @return a page that matches the given id\n      */\n     public P getPage(@NonNull String pageId) {\n-        Objects.requireNonNull(pageId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8396102e0d92f4773206520d9ba9d8ec697c3d4f"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzM0OTk2", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#pullrequestreview-500734996", "createdAt": "2020-10-01T21:35:23Z", "commit": {"oid": "8396102e0d92f4773206520d9ba9d8ec697c3d4f"}, "state": "COMMENTED", "comments": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMTozNToyM1rOHbbjLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjoyMjo1MlrOHbcjbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyNDk3NQ==", "bodyText": "I noticed the communication build.gradle file has a slight different name, should this say \"Communication Services\" or \"Communication Chat Services\" at the end?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498524975", "createdAt": "2020-10-01T21:35:23Z", "author": {"login": "vcolin7"}, "path": "build.gradle", "diffHunk": "@@ -118,7 +118,7 @@ configure(subprojects.findAll { it.path.startsWith(':sdk:') && it.path.count(':'\n                     artifact javadocJar\n \n                     pom {\n-                        name = project.publishName\n+                        name = \"Microsoft Azure Android Client Library common code For Communication Service\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8396102e0d92f4773206520d9ba9d8ec697c3d4f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyNTU4Mw==", "bodyText": "I wouldn't include the word code in the name to be published.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ext.publishName = \"Microsoft Azure Android Client Library code For Communication Chat Services\"\n          \n          \n            \n            ext.publishName = \"Microsoft Azure Android Client Library for Communication Chat Services\"", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498525583", "createdAt": "2020-10-01T21:36:55Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/chat/build.gradle", "diffHunk": "@@ -0,0 +1,26 @@\n+ext.publishName = \"Microsoft Azure Android Client Library code For Communication Chat Services\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8396102e0d92f4773206520d9ba9d8ec697c3d4f"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyNjQ2OA==", "bodyText": "Nitpicking here but if you have time it would look better if we can avoid having hardcoded versions for dependencies at this level. We usually define them at the top level build.gradle file.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498526468", "createdAt": "2020-10-01T21:39:01Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/chat/build.gradle", "diffHunk": "@@ -0,0 +1,26 @@\n+ext.publishName = \"Microsoft Azure Android Client Library code For Communication Chat Services\"\n+description = \"This package contains the Android client library common code for Microsoft Azure Communication Chat Service.\"\n+version = \"1.0.0-beta.1\"\n+ext.versionCode = 1\n+\n+android {\n+    defaultConfig {\n+        versionCode project.versionCode\n+        versionName project.version\n+    }\n+}\n+\n+dependencies {\n+    implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\n+    implementation 'androidx.appcompat:appcompat:1.2.0'\n+    implementation \"com.fasterxml.jackson.core:jackson-databind:$jacksonVersion\"\n+    implementation \"com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jacksonVersion\"\n+    implementation \"com.jakewharton.threetenabp:threetenabp:$threeTenAbpVersion\"\n+    implementation \"com.squareup.okhttp3:okhttp:$okHttpVersion\"\n+    implementation \"com.squareup.retrofit2:retrofit:$retrofitVersion\"\n+    implementation project(\":sdk:core:azure-core\")\n+    testImplementation 'junit:junit:4.12'\n+    androidTestImplementation 'androidx.test.ext:junit:1.1.2'\n+    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8396102e0d92f4773206520d9ba9d8ec697c3d4f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyNjc0Nw==", "bodyText": "Also, I wouldn't include the words \"common code\" in the name to be published. Maybe we can use the same ext.publishName inside communication/chat/build.gradle, unless that's a very different thing.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498526747", "createdAt": "2020-10-01T21:39:44Z", "author": {"login": "vcolin7"}, "path": "build.gradle", "diffHunk": "@@ -118,7 +118,7 @@ configure(subprojects.findAll { it.path.startsWith(':sdk:') && it.path.count(':'\n                     artifact javadocJar\n \n                     pom {\n-                        name = project.publishName\n+                        name = \"Microsoft Azure Android Client Library common code For Communication Service\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyNDk3NQ=="}, "originalCommit": {"oid": "8396102e0d92f4773206520d9ba9d8ec697c3d4f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyODU2Ng==", "bodyText": "If I recall correctly, there was a conversation talking about changing this to com.azure.android.communication.chat. I remember we were told that it was kind of a big change and could not be done for now but I was wondering if it was in the roadmap at some point.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498528566", "createdAt": "2020-10-01T21:44:27Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/chat/src/main/AndroidManifest.xml", "diffHunk": "@@ -0,0 +1,5 @@\n+<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    package=\"com.azure.communication.chat\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8396102e0d92f4773206520d9ba9d8ec697c3d4f"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyOTE3NA==", "bodyText": "Why was this null check removed? All other PagedCollections check for nullness if I am not mistaken.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498529174", "createdAt": "2020-10-01T21:45:54Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "diffHunk": "@@ -51,7 +51,6 @@ public P getFirstPage() {\n      * @return a page that matches the given id\n      */\n     public P getPage(@NonNull String pageId) {\n-        Objects.requireNonNull(pageId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8396102e0d92f4773206520d9ba9d8ec697c3d4f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyOTY3Ng==", "bodyText": "We probably want to rename this to something more specific like ChatErrorException or CommunicationChatErrorException to avoid collisions in the future.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498529676", "createdAt": "2020-10-01T21:47:14Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/chat/src/main/java/com/azure/android/communication/chat/models/ErrorException.java", "diffHunk": "@@ -0,0 +1,39 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.android.communication.chat.models;\n+\n+import com.azure.android.core.http.exception.HttpResponseException;\n+import okhttp3.Response;\n+\n+/**\n+ * Exception thrown for an invalid response with Error information.\n+ */\n+public final class ErrorException extends HttpResponseException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8396102e0d92f4773206520d9ba9d8ec697c3d4f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyOTg4Mw==", "bodyText": "Error is too vague. We probably want to rename this to something more specific like ChatError or CommunicationChatError to avoid collisions in the future.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498529883", "createdAt": "2020-10-01T21:47:49Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/chat/src/main/java/com/azure/android/communication/chat/models/Error.java", "diffHunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.android.communication.chat.models;\n+\n+import com.azure.android.core.annotation.Immutable;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.List;\n+\n+/**\n+ * The Error model.\n+ */\n+@Immutable\n+public final class Error {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8396102e0d92f4773206520d9ba9d8ec697c3d4f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzMDU0Mw==", "bodyText": "nit; It's interesting that this is the only package-info file where the first line had to be broken into 2 lines. What's the character limit in the code-gen tool for this?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498530543", "createdAt": "2020-10-01T21:49:38Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/chat/src/main/java/com/azure/android/communication/chat/implementation/package-info.java", "diffHunk": "@@ -0,0 +1,10 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+/**\n+ * Package containing the implementations and inner classes for\n+ * AzureCommunicationChatService.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8396102e0d92f4773206520d9ba9d8ec697c3d4f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzNDc5OQ==", "bodyText": "We may want to have a later talk about the guidelines on how to name these options bags for our public methods. I feel like it would be clearer for the user if this was called sendChatMessageOptions or something along those lines instead of body.\nAlso, I know that having all optional parameters in the options or not has been a contentious topic among our architects, so we might want to revisit this once there's a conclusion to that discussion.\nThese comments apply to all other places where we have options bags, also where they are named body.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498534799", "createdAt": "2020-10-01T22:02:01Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/chat/src/main/java/com/azure/android/communication/chat/AzureCommunicationChatServiceAsyncClient.java", "diffHunk": "@@ -0,0 +1,490 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.android.communication.chat;\n+\n+import com.azure.android.communication.chat.implementation.AzureCommunicationChatServiceImpl;\n+import com.azure.android.communication.chat.models.AddChatThreadMembersOptions;\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatMessagesCollection;\n+import com.azure.android.communication.chat.models.ChatThread;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.communication.chat.models.ChatThreadMember;\n+import com.azure.android.communication.chat.models.ChatThreadMembersCollection;\n+import com.azure.android.communication.chat.models.ChatThreadsInfoCollection;\n+import com.azure.android.communication.chat.models.CreateChatThreadOptions;\n+import com.azure.android.communication.chat.models.ErrorException;\n+import com.azure.android.communication.chat.models.MultiStatusResponse;\n+import com.azure.android.communication.chat.models.ReadReceipt;\n+import com.azure.android.communication.chat.models.ReadReceiptsCollection;\n+import com.azure.android.communication.chat.models.SendChatMessageOptions;\n+import com.azure.android.communication.chat.models.SendChatMessageResult;\n+import com.azure.android.communication.chat.models.SendReadReceiptRequest;\n+import com.azure.android.communication.chat.models.UpdateChatMessageOptions;\n+import com.azure.android.communication.chat.models.UpdateChatThreadOptions;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.exception.HttpResponseException;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataRetriever;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseCollection;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseRetriever;\n+import com.azure.android.core.util.paging.Page;\n+import com.azure.android.core.util.paging.PagedDataCollection;\n+import com.azure.android.core.util.paging.PagedDataRetriever;\n+import okhttp3.Interceptor;\n+import okhttp3.RequestBody;\n+import okhttp3.ResponseBody;\n+import org.threeten.bp.OffsetDateTime;\n+import retrofit2.Call;\n+import retrofit2.http.Body;\n+import retrofit2.http.DELETE;\n+import retrofit2.http.GET;\n+import retrofit2.http.PATCH;\n+import retrofit2.http.Path;\n+import retrofit2.http.POST;\n+import retrofit2.http.Query;\n+\n+/**\n+ * Initializes a new instance of the asynchronous AzureCommunicationChatService type.\n+ */\n+public final class AzureCommunicationChatServiceAsyncClient {\n+    private AzureCommunicationChatServiceImpl serviceClient;\n+\n+    /**\n+     * Initializes an instance of AzureCommunicationChatService client.\n+     */\n+    AzureCommunicationChatServiceAsyncClient(AzureCommunicationChatServiceImpl serviceClient) {\n+        this.serviceClient = serviceClient;\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceipts(String chatThreadId, final Callback<Page<ReadReceipt>> callback) {\n+        this.serviceClient.listChatReadReceipts(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceiptsPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>> collectionCallback) {\n+        this.serviceClient.listChatReadReceiptsPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Sends a read receipt event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Thread id to send the read receipt event to.\n+     * @param body Request payload for sending a read receipt.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatReadReceipt(String chatThreadId, SendReadReceiptRequest body, final Callback<Void> callback) {\n+        this.serviceClient.sendChatReadReceipt(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Sends a message to a thread.\n+     * \n+     * @param chatThreadId The thread id to send the message to.\n+     * @param body Details of the message to send.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatMessage(String chatThreadId, SendChatMessageOptions body, final Callback<SendChatMessageResult> callback) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8396102e0d92f4773206520d9ba9d8ec697c3d4f"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzNTMzMA==", "bodyText": "I think the callbacks should always be the last parameter in async calls, it would also stay consistent with the overload from line 128.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498535330", "createdAt": "2020-10-01T22:03:42Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/chat/src/main/java/com/azure/android/communication/chat/AzureCommunicationChatServiceAsyncClient.java", "diffHunk": "@@ -0,0 +1,490 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.android.communication.chat;\n+\n+import com.azure.android.communication.chat.implementation.AzureCommunicationChatServiceImpl;\n+import com.azure.android.communication.chat.models.AddChatThreadMembersOptions;\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatMessagesCollection;\n+import com.azure.android.communication.chat.models.ChatThread;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.communication.chat.models.ChatThreadMember;\n+import com.azure.android.communication.chat.models.ChatThreadMembersCollection;\n+import com.azure.android.communication.chat.models.ChatThreadsInfoCollection;\n+import com.azure.android.communication.chat.models.CreateChatThreadOptions;\n+import com.azure.android.communication.chat.models.ErrorException;\n+import com.azure.android.communication.chat.models.MultiStatusResponse;\n+import com.azure.android.communication.chat.models.ReadReceipt;\n+import com.azure.android.communication.chat.models.ReadReceiptsCollection;\n+import com.azure.android.communication.chat.models.SendChatMessageOptions;\n+import com.azure.android.communication.chat.models.SendChatMessageResult;\n+import com.azure.android.communication.chat.models.SendReadReceiptRequest;\n+import com.azure.android.communication.chat.models.UpdateChatMessageOptions;\n+import com.azure.android.communication.chat.models.UpdateChatThreadOptions;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.exception.HttpResponseException;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataRetriever;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseCollection;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseRetriever;\n+import com.azure.android.core.util.paging.Page;\n+import com.azure.android.core.util.paging.PagedDataCollection;\n+import com.azure.android.core.util.paging.PagedDataRetriever;\n+import okhttp3.Interceptor;\n+import okhttp3.RequestBody;\n+import okhttp3.ResponseBody;\n+import org.threeten.bp.OffsetDateTime;\n+import retrofit2.Call;\n+import retrofit2.http.Body;\n+import retrofit2.http.DELETE;\n+import retrofit2.http.GET;\n+import retrofit2.http.PATCH;\n+import retrofit2.http.Path;\n+import retrofit2.http.POST;\n+import retrofit2.http.Query;\n+\n+/**\n+ * Initializes a new instance of the asynchronous AzureCommunicationChatService type.\n+ */\n+public final class AzureCommunicationChatServiceAsyncClient {\n+    private AzureCommunicationChatServiceImpl serviceClient;\n+\n+    /**\n+     * Initializes an instance of AzureCommunicationChatService client.\n+     */\n+    AzureCommunicationChatServiceAsyncClient(AzureCommunicationChatServiceImpl serviceClient) {\n+        this.serviceClient = serviceClient;\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceipts(String chatThreadId, final Callback<Page<ReadReceipt>> callback) {\n+        this.serviceClient.listChatReadReceipts(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceiptsPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>> collectionCallback) {\n+        this.serviceClient.listChatReadReceiptsPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Sends a read receipt event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Thread id to send the read receipt event to.\n+     * @param body Request payload for sending a read receipt.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatReadReceipt(String chatThreadId, SendReadReceiptRequest body, final Callback<Void> callback) {\n+        this.serviceClient.sendChatReadReceipt(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Sends a message to a thread.\n+     * \n+     * @param chatThreadId The thread id to send the message to.\n+     * @param body Details of the message to send.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatMessage(String chatThreadId, SendChatMessageOptions body, final Callback<SendChatMessageResult> callback) {\n+        this.serviceClient.sendChatMessage(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, maxPageSize, startTime, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessagesPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>> collectionCallback, Integer maxPageSize, OffsetDateTime startTime) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8396102e0d92f4773206520d9ba9d8ec697c3d4f"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzNTc3MQ==", "bodyText": "Same think about having callbacks at the end of method signatures. I believe iOS does this as well.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498535771", "createdAt": "2020-10-01T22:05:01Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/chat/src/main/java/com/azure/android/communication/chat/AzureCommunicationChatServiceAsyncClient.java", "diffHunk": "@@ -0,0 +1,490 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.android.communication.chat;\n+\n+import com.azure.android.communication.chat.implementation.AzureCommunicationChatServiceImpl;\n+import com.azure.android.communication.chat.models.AddChatThreadMembersOptions;\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatMessagesCollection;\n+import com.azure.android.communication.chat.models.ChatThread;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.communication.chat.models.ChatThreadMember;\n+import com.azure.android.communication.chat.models.ChatThreadMembersCollection;\n+import com.azure.android.communication.chat.models.ChatThreadsInfoCollection;\n+import com.azure.android.communication.chat.models.CreateChatThreadOptions;\n+import com.azure.android.communication.chat.models.ErrorException;\n+import com.azure.android.communication.chat.models.MultiStatusResponse;\n+import com.azure.android.communication.chat.models.ReadReceipt;\n+import com.azure.android.communication.chat.models.ReadReceiptsCollection;\n+import com.azure.android.communication.chat.models.SendChatMessageOptions;\n+import com.azure.android.communication.chat.models.SendChatMessageResult;\n+import com.azure.android.communication.chat.models.SendReadReceiptRequest;\n+import com.azure.android.communication.chat.models.UpdateChatMessageOptions;\n+import com.azure.android.communication.chat.models.UpdateChatThreadOptions;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.exception.HttpResponseException;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataRetriever;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseCollection;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseRetriever;\n+import com.azure.android.core.util.paging.Page;\n+import com.azure.android.core.util.paging.PagedDataCollection;\n+import com.azure.android.core.util.paging.PagedDataRetriever;\n+import okhttp3.Interceptor;\n+import okhttp3.RequestBody;\n+import okhttp3.ResponseBody;\n+import org.threeten.bp.OffsetDateTime;\n+import retrofit2.Call;\n+import retrofit2.http.Body;\n+import retrofit2.http.DELETE;\n+import retrofit2.http.GET;\n+import retrofit2.http.PATCH;\n+import retrofit2.http.Path;\n+import retrofit2.http.POST;\n+import retrofit2.http.Query;\n+\n+/**\n+ * Initializes a new instance of the asynchronous AzureCommunicationChatService type.\n+ */\n+public final class AzureCommunicationChatServiceAsyncClient {\n+    private AzureCommunicationChatServiceImpl serviceClient;\n+\n+    /**\n+     * Initializes an instance of AzureCommunicationChatService client.\n+     */\n+    AzureCommunicationChatServiceAsyncClient(AzureCommunicationChatServiceImpl serviceClient) {\n+        this.serviceClient = serviceClient;\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceipts(String chatThreadId, final Callback<Page<ReadReceipt>> callback) {\n+        this.serviceClient.listChatReadReceipts(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceiptsPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>> collectionCallback) {\n+        this.serviceClient.listChatReadReceiptsPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Sends a read receipt event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Thread id to send the read receipt event to.\n+     * @param body Request payload for sending a read receipt.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatReadReceipt(String chatThreadId, SendReadReceiptRequest body, final Callback<Void> callback) {\n+        this.serviceClient.sendChatReadReceipt(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Sends a message to a thread.\n+     * \n+     * @param chatThreadId The thread id to send the message to.\n+     * @param body Details of the message to send.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatMessage(String chatThreadId, SendChatMessageOptions body, final Callback<SendChatMessageResult> callback) {\n+        this.serviceClient.sendChatMessage(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, maxPageSize, startTime, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessagesPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>> collectionCallback, Integer maxPageSize, OffsetDateTime startTime) {\n+        this.serviceClient.listChatMessagesPagesAsync(chatThreadId, collectionCallback, maxPageSize, startTime);\n+    }\n+\n+    /**\n+     * Gets a message by id.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void getChatMessage(String chatThreadId, String chatMessageId, final Callback<ChatMessage> callback) {\n+        this.serviceClient.getChatMessage(chatThreadId, chatMessageId, callback);\n+    }\n+\n+    /**\n+     * Updates a message.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param body Details of the request to update the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void updateChatMessage(String chatThreadId, String chatMessageId, UpdateChatMessageOptions body, final Callback<Void> callback) {\n+        this.serviceClient.updateChatMessage(chatThreadId, chatMessageId, body, callback);\n+    }\n+\n+    /**\n+     * Deletes a message.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void deleteChatMessage(String chatThreadId, String chatMessageId, final Callback<Void> callback) {\n+        this.serviceClient.deleteChatMessage(chatThreadId, chatMessageId, callback);\n+    }\n+\n+    /**\n+     * Posts a typing event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Id of the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendTypingNotification(String chatThreadId, final Callback<Void> callback) {\n+        this.serviceClient.sendTypingNotification(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets the members of a thread.\n+     * \n+     * @param chatThreadId Thread id to get members for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembers(String chatThreadId, final Callback<Page<ChatThreadMember>> callback) {\n+        this.serviceClient.listChatThreadMembers(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets the members of a thread.\n+     * \n+     * @param chatThreadId Thread id to get members for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembersPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>> collectionCallback) {\n+        this.serviceClient.listChatThreadMembersPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Adds thread members to a thread. If members already exist, no change occurs.\n+     * \n+     * @param chatThreadId Id of the thread to add members to.\n+     * @param body Thread members to be added to the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void addChatThreadMembers(String chatThreadId, AddChatThreadMembersOptions body, final Callback<Void> callback) {\n+        this.serviceClient.addChatThreadMembers(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Remove a member from a thread.\n+     * \n+     * @param chatThreadId Thread id to remove the member from.\n+     * @param chatMemberId Id of the thread member to remove from the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void removeChatThreadMember(String chatThreadId, String chatMemberId, final Callback<Void> callback) {\n+        this.serviceClient.removeChatThreadMember(chatThreadId, chatMemberId, callback);\n+    }\n+\n+    /**\n+     * Creates a chat thread.\n+     * \n+     * @param body Request payload for creating a chat thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void createChatThread(CreateChatThreadOptions body, final Callback<MultiStatusResponse> callback) {\n+        this.serviceClient.createChatThread(body, callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param maxPageSize The maximum number of chat threads returned per page.\n+     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreads(Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatThreadInfo>> callback) {\n+        this.serviceClient.listChatThreads(maxPageSize, startTime, callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreads(final Callback<Page<ChatThreadInfo>> callback) {\n+        this.serviceClient.listChatThreads(callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @param maxPageSize The maximum number of chat threads returned per page.\n+     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadsPages(final Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>> collectionCallback, Integer maxPageSize, OffsetDateTime startTime) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8396102e0d92f4773206520d9ba9d8ec697c3d4f"}, "originalPosition": 319}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzNjQ3Mw==", "bodyText": "Would we want to allow for users to provide other types of interceptors or would that be achieved by them adding them to the serviceClientBuilder and then passing that object to this builder?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498536473", "createdAt": "2020-10-01T22:07:18Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/chat/src/main/java/com/azure/android/communication/chat/AzureCommunicationChatServiceAsyncClient.java", "diffHunk": "@@ -0,0 +1,490 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.android.communication.chat;\n+\n+import com.azure.android.communication.chat.implementation.AzureCommunicationChatServiceImpl;\n+import com.azure.android.communication.chat.models.AddChatThreadMembersOptions;\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatMessagesCollection;\n+import com.azure.android.communication.chat.models.ChatThread;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.communication.chat.models.ChatThreadMember;\n+import com.azure.android.communication.chat.models.ChatThreadMembersCollection;\n+import com.azure.android.communication.chat.models.ChatThreadsInfoCollection;\n+import com.azure.android.communication.chat.models.CreateChatThreadOptions;\n+import com.azure.android.communication.chat.models.ErrorException;\n+import com.azure.android.communication.chat.models.MultiStatusResponse;\n+import com.azure.android.communication.chat.models.ReadReceipt;\n+import com.azure.android.communication.chat.models.ReadReceiptsCollection;\n+import com.azure.android.communication.chat.models.SendChatMessageOptions;\n+import com.azure.android.communication.chat.models.SendChatMessageResult;\n+import com.azure.android.communication.chat.models.SendReadReceiptRequest;\n+import com.azure.android.communication.chat.models.UpdateChatMessageOptions;\n+import com.azure.android.communication.chat.models.UpdateChatThreadOptions;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.exception.HttpResponseException;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataRetriever;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseCollection;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseRetriever;\n+import com.azure.android.core.util.paging.Page;\n+import com.azure.android.core.util.paging.PagedDataCollection;\n+import com.azure.android.core.util.paging.PagedDataRetriever;\n+import okhttp3.Interceptor;\n+import okhttp3.RequestBody;\n+import okhttp3.ResponseBody;\n+import org.threeten.bp.OffsetDateTime;\n+import retrofit2.Call;\n+import retrofit2.http.Body;\n+import retrofit2.http.DELETE;\n+import retrofit2.http.GET;\n+import retrofit2.http.PATCH;\n+import retrofit2.http.Path;\n+import retrofit2.http.POST;\n+import retrofit2.http.Query;\n+\n+/**\n+ * Initializes a new instance of the asynchronous AzureCommunicationChatService type.\n+ */\n+public final class AzureCommunicationChatServiceAsyncClient {\n+    private AzureCommunicationChatServiceImpl serviceClient;\n+\n+    /**\n+     * Initializes an instance of AzureCommunicationChatService client.\n+     */\n+    AzureCommunicationChatServiceAsyncClient(AzureCommunicationChatServiceImpl serviceClient) {\n+        this.serviceClient = serviceClient;\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceipts(String chatThreadId, final Callback<Page<ReadReceipt>> callback) {\n+        this.serviceClient.listChatReadReceipts(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceiptsPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>> collectionCallback) {\n+        this.serviceClient.listChatReadReceiptsPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Sends a read receipt event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Thread id to send the read receipt event to.\n+     * @param body Request payload for sending a read receipt.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatReadReceipt(String chatThreadId, SendReadReceiptRequest body, final Callback<Void> callback) {\n+        this.serviceClient.sendChatReadReceipt(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Sends a message to a thread.\n+     * \n+     * @param chatThreadId The thread id to send the message to.\n+     * @param body Details of the message to send.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatMessage(String chatThreadId, SendChatMessageOptions body, final Callback<SendChatMessageResult> callback) {\n+        this.serviceClient.sendChatMessage(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, maxPageSize, startTime, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessagesPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>> collectionCallback, Integer maxPageSize, OffsetDateTime startTime) {\n+        this.serviceClient.listChatMessagesPagesAsync(chatThreadId, collectionCallback, maxPageSize, startTime);\n+    }\n+\n+    /**\n+     * Gets a message by id.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void getChatMessage(String chatThreadId, String chatMessageId, final Callback<ChatMessage> callback) {\n+        this.serviceClient.getChatMessage(chatThreadId, chatMessageId, callback);\n+    }\n+\n+    /**\n+     * Updates a message.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param body Details of the request to update the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void updateChatMessage(String chatThreadId, String chatMessageId, UpdateChatMessageOptions body, final Callback<Void> callback) {\n+        this.serviceClient.updateChatMessage(chatThreadId, chatMessageId, body, callback);\n+    }\n+\n+    /**\n+     * Deletes a message.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void deleteChatMessage(String chatThreadId, String chatMessageId, final Callback<Void> callback) {\n+        this.serviceClient.deleteChatMessage(chatThreadId, chatMessageId, callback);\n+    }\n+\n+    /**\n+     * Posts a typing event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Id of the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendTypingNotification(String chatThreadId, final Callback<Void> callback) {\n+        this.serviceClient.sendTypingNotification(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets the members of a thread.\n+     * \n+     * @param chatThreadId Thread id to get members for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembers(String chatThreadId, final Callback<Page<ChatThreadMember>> callback) {\n+        this.serviceClient.listChatThreadMembers(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets the members of a thread.\n+     * \n+     * @param chatThreadId Thread id to get members for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembersPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>> collectionCallback) {\n+        this.serviceClient.listChatThreadMembersPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Adds thread members to a thread. If members already exist, no change occurs.\n+     * \n+     * @param chatThreadId Id of the thread to add members to.\n+     * @param body Thread members to be added to the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void addChatThreadMembers(String chatThreadId, AddChatThreadMembersOptions body, final Callback<Void> callback) {\n+        this.serviceClient.addChatThreadMembers(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Remove a member from a thread.\n+     * \n+     * @param chatThreadId Thread id to remove the member from.\n+     * @param chatMemberId Id of the thread member to remove from the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void removeChatThreadMember(String chatThreadId, String chatMemberId, final Callback<Void> callback) {\n+        this.serviceClient.removeChatThreadMember(chatThreadId, chatMemberId, callback);\n+    }\n+\n+    /**\n+     * Creates a chat thread.\n+     * \n+     * @param body Request payload for creating a chat thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void createChatThread(CreateChatThreadOptions body, final Callback<MultiStatusResponse> callback) {\n+        this.serviceClient.createChatThread(body, callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param maxPageSize The maximum number of chat threads returned per page.\n+     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreads(Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatThreadInfo>> callback) {\n+        this.serviceClient.listChatThreads(maxPageSize, startTime, callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreads(final Callback<Page<ChatThreadInfo>> callback) {\n+        this.serviceClient.listChatThreads(callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @param maxPageSize The maximum number of chat threads returned per page.\n+     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadsPages(final Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>> collectionCallback, Integer maxPageSize, OffsetDateTime startTime) {\n+        this.serviceClient.listChatThreadsPagesAsync(collectionCallback, maxPageSize, startTime);\n+    }\n+\n+    /**\n+     * Updates a thread's properties.\n+     * \n+     * @param chatThreadId The id of the thread to update.\n+     * @param body Request payload for updating a chat thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void updateChatThread(String chatThreadId, UpdateChatThreadOptions body, final Callback<Void> callback) {\n+        this.serviceClient.updateChatThread(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Gets a chat thread.\n+     * \n+     * @param chatThreadId Thread id to get.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void getChatThread(String chatThreadId, final Callback<ChatThread> callback) {\n+        this.serviceClient.getChatThread(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Deletes a thread.\n+     * \n+     * @param chatThreadId Thread id to delete.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void deleteChatThread(String chatThreadId, final Callback<Void> callback) {\n+        this.serviceClient.deleteChatThread(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Get the next page of items.\n+     * \n+     * @param nextLink null\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceiptsNext(String nextLink, final Callback<Page<ReadReceipt>> callback) {\n+        this.serviceClient.listChatReadReceiptsNext(nextLink, callback);\n+    }\n+\n+    /**\n+     * Get the next page of items.\n+     * \n+     * @param nextLink null\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessagesNext(String nextLink, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessagesNext(nextLink, callback);\n+    }\n+\n+    /**\n+     * Get the next page of items.\n+     * \n+     * @param nextLink null\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembersNext(String nextLink, final Callback<Page<ChatThreadMember>> callback) {\n+        this.serviceClient.listChatThreadMembersNext(nextLink, callback);\n+    }\n+\n+    /**\n+     * Get the next page of items.\n+     * \n+     * @param nextLink null\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadsNext(String nextLink, final Callback<Page<ChatThreadInfo>> callback) {\n+        this.serviceClient.listChatThreadsNext(nextLink, callback);\n+    }\n+\n+    /**\n+     * A builder for creating a new instance of the AzureCommunicationChatServiceAsyncClient type.\n+     */\n+    public static final class Builder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8396102e0d92f4773206520d9ba9d8ec697c3d4f"}, "originalPosition": 418}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzNjkwOA==", "bodyText": "In the future we might want to provide passing ServiceVersions types to our clients (e.g. ChatServiceVersion) type to allow for supporting multiple service versions, just like Java SDKs do.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498536908", "createdAt": "2020-10-01T22:08:46Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/chat/src/main/java/com/azure/android/communication/chat/implementation/AzureCommunicationChatServiceImpl.java", "diffHunk": "@@ -0,0 +1,2309 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.android.communication.chat.implementation;\n+\n+import com.azure.android.communication.chat.models.AddChatThreadMembersOptions;\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatMessagesCollection;\n+import com.azure.android.communication.chat.models.ChatThread;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.communication.chat.models.ChatThreadMember;\n+import com.azure.android.communication.chat.models.ChatThreadMembersCollection;\n+import com.azure.android.communication.chat.models.ChatThreadsInfoCollection;\n+import com.azure.android.communication.chat.models.CreateChatThreadOptions;\n+import com.azure.android.communication.chat.models.ErrorException;\n+import com.azure.android.communication.chat.models.MultiStatusResponse;\n+import com.azure.android.communication.chat.models.ReadReceipt;\n+import com.azure.android.communication.chat.models.ReadReceiptsCollection;\n+import com.azure.android.communication.chat.models.SendChatMessageOptions;\n+import com.azure.android.communication.chat.models.SendChatMessageResult;\n+import com.azure.android.communication.chat.models.SendReadReceiptRequest;\n+import com.azure.android.communication.chat.models.UpdateChatMessageOptions;\n+import com.azure.android.communication.chat.models.UpdateChatThreadOptions;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.exception.HttpResponseException;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataRetriever;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseCollection;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseRetriever;\n+import com.azure.android.core.internal.util.serializer.SerializerAdapter;\n+import com.azure.android.core.internal.util.serializer.SerializerFormat;\n+import com.azure.android.core.util.paging.Page;\n+import com.azure.android.core.util.paging.PagedDataCollection;\n+import com.azure.android.core.util.paging.PagedDataRetriever;\n+import okhttp3.RequestBody;\n+import okhttp3.ResponseBody;\n+import org.threeten.bp.OffsetDateTime;\n+import retrofit2.Call;\n+import retrofit2.http.Body;\n+import retrofit2.http.DELETE;\n+import retrofit2.http.GET;\n+import retrofit2.http.PATCH;\n+import retrofit2.http.Path;\n+import retrofit2.http.POST;\n+import retrofit2.http.Query;\n+\n+/**\n+ * Initializes a new instance of the AzureCommunicationChatService type.\n+ */\n+public final class AzureCommunicationChatServiceImpl {\n+    /**\n+     * The proxy service used to perform REST calls.\n+     */\n+    private final AzureCommunicationChatServiceService service;\n+\n+    /**\n+     * The serializer.\n+     */\n+    final SerializerAdapter serializerAdapter = SerializerAdapter.createDefault();\n+\n+    /**\n+     * The Azure Core generic ServiceClient to setup interceptors and produce retrofit proxy.\n+     */\n+    private ServiceClient serviceClient;\n+\n+    /**\n+     * Gets The Azure Core generic ServiceClient to setup interceptors and produce retrofit proxy.\n+     * \n+     * @return the serviceClient value.\n+     */\n+    public ServiceClient getServiceClient() {\n+        return this.serviceClient;\n+    }\n+\n+    /**\n+     * The endpoint of the Azure Communication resource.\n+     */\n+    private final String endpoint;\n+\n+    /**\n+     * Gets The endpoint of the Azure Communication resource.\n+     * \n+     * @return the endpoint value.\n+     */\n+    public String getEndpoint() {\n+        return this.endpoint;\n+    }\n+\n+    /**\n+     * Api Version.\n+     */\n+    private final String apiVersion;\n+\n+    /**\n+     * Gets Api Version.\n+     * \n+     * @return the apiVersion value.\n+     */\n+    public String getApiVersion() {\n+        return this.apiVersion;\n+    }\n+\n+    /**\n+     * Initializes an instance of AzureCommunicationChatService client.\n+     * \n+     * @param serviceClient The Azure Core generic ServiceClient to setup interceptors and produce retrofit proxy.\n+     * @param endpoint The endpoint of the Azure Communication resource.\n+     */\n+    public AzureCommunicationChatServiceImpl(ServiceClient serviceClient, String endpoint) {\n+        this.serviceClient = serviceClient;\n+        this.endpoint = endpoint;\n+        this.apiVersion = \"2020-09-21-preview2\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8396102e0d92f4773206520d9ba9d8ec697c3d4f"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzOTMwNQ==", "bodyText": "How sure are we that some of these calls won't throw a NullPointerException at some point?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498539305", "createdAt": "2020-10-01T22:16:14Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/chat/src/main/java/com/azure/android/communication/chat/implementation/AzureCommunicationChatServiceImpl.java", "diffHunk": "@@ -0,0 +1,2309 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.android.communication.chat.implementation;\n+\n+import com.azure.android.communication.chat.models.AddChatThreadMembersOptions;\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatMessagesCollection;\n+import com.azure.android.communication.chat.models.ChatThread;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.communication.chat.models.ChatThreadMember;\n+import com.azure.android.communication.chat.models.ChatThreadMembersCollection;\n+import com.azure.android.communication.chat.models.ChatThreadsInfoCollection;\n+import com.azure.android.communication.chat.models.CreateChatThreadOptions;\n+import com.azure.android.communication.chat.models.ErrorException;\n+import com.azure.android.communication.chat.models.MultiStatusResponse;\n+import com.azure.android.communication.chat.models.ReadReceipt;\n+import com.azure.android.communication.chat.models.ReadReceiptsCollection;\n+import com.azure.android.communication.chat.models.SendChatMessageOptions;\n+import com.azure.android.communication.chat.models.SendChatMessageResult;\n+import com.azure.android.communication.chat.models.SendReadReceiptRequest;\n+import com.azure.android.communication.chat.models.UpdateChatMessageOptions;\n+import com.azure.android.communication.chat.models.UpdateChatThreadOptions;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.exception.HttpResponseException;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataRetriever;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseCollection;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseRetriever;\n+import com.azure.android.core.internal.util.serializer.SerializerAdapter;\n+import com.azure.android.core.internal.util.serializer.SerializerFormat;\n+import com.azure.android.core.util.paging.Page;\n+import com.azure.android.core.util.paging.PagedDataCollection;\n+import com.azure.android.core.util.paging.PagedDataRetriever;\n+import okhttp3.RequestBody;\n+import okhttp3.ResponseBody;\n+import org.threeten.bp.OffsetDateTime;\n+import retrofit2.Call;\n+import retrofit2.http.Body;\n+import retrofit2.http.DELETE;\n+import retrofit2.http.GET;\n+import retrofit2.http.PATCH;\n+import retrofit2.http.Path;\n+import retrofit2.http.POST;\n+import retrofit2.http.Query;\n+\n+/**\n+ * Initializes a new instance of the AzureCommunicationChatService type.\n+ */\n+public final class AzureCommunicationChatServiceImpl {\n+    /**\n+     * The proxy service used to perform REST calls.\n+     */\n+    private final AzureCommunicationChatServiceService service;\n+\n+    /**\n+     * The serializer.\n+     */\n+    final SerializerAdapter serializerAdapter = SerializerAdapter.createDefault();\n+\n+    /**\n+     * The Azure Core generic ServiceClient to setup interceptors and produce retrofit proxy.\n+     */\n+    private ServiceClient serviceClient;\n+\n+    /**\n+     * Gets The Azure Core generic ServiceClient to setup interceptors and produce retrofit proxy.\n+     * \n+     * @return the serviceClient value.\n+     */\n+    public ServiceClient getServiceClient() {\n+        return this.serviceClient;\n+    }\n+\n+    /**\n+     * The endpoint of the Azure Communication resource.\n+     */\n+    private final String endpoint;\n+\n+    /**\n+     * Gets The endpoint of the Azure Communication resource.\n+     * \n+     * @return the endpoint value.\n+     */\n+    public String getEndpoint() {\n+        return this.endpoint;\n+    }\n+\n+    /**\n+     * Api Version.\n+     */\n+    private final String apiVersion;\n+\n+    /**\n+     * Gets Api Version.\n+     * \n+     * @return the apiVersion value.\n+     */\n+    public String getApiVersion() {\n+        return this.apiVersion;\n+    }\n+\n+    /**\n+     * Initializes an instance of AzureCommunicationChatService client.\n+     * \n+     * @param serviceClient The Azure Core generic ServiceClient to setup interceptors and produce retrofit proxy.\n+     * @param endpoint The endpoint of the Azure Communication resource.\n+     */\n+    public AzureCommunicationChatServiceImpl(ServiceClient serviceClient, String endpoint) {\n+        this.serviceClient = serviceClient;\n+        this.endpoint = endpoint;\n+        this.apiVersion = \"2020-09-21-preview2\";\n+        this.service = serviceClient.getRetrofit().create(AzureCommunicationChatServiceService.class);\n+    }\n+\n+    /**\n+     * The interface defining all the services for\n+     * AzureCommunicationChatService to be used by the proxy service to perform\n+     * REST calls.\n+     */\n+    private interface AzureCommunicationChatServiceService {\n+        @GET(\"/chat/threads/{chatThreadId}/readreceipts\")\n+        Call<ResponseBody> listChatReadReceipts(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion);\n+\n+        @POST(\"/chat/threads/{chatThreadId}/readreceipts\")\n+        Call<ResponseBody> sendChatReadReceipt(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion, @Body RequestBody body);\n+\n+        @POST(\"/chat/threads/{chatThreadId}/messages\")\n+        Call<ResponseBody> sendChatMessage(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion, @Body RequestBody body);\n+\n+        @GET(\"/chat/threads/{chatThreadId}/messages\")\n+        Call<ResponseBody> listChatMessages(@Path(\"chatThreadId\") String chatThreadId, @Query(\"maxPageSize\") Integer maxPageSize, @Query(\"startTime\") OffsetDateTime startTime, @Query(\"api-version\") String apiVersion);\n+\n+        @GET(\"/chat/threads/{chatThreadId}/messages/{chatMessageId}\")\n+        Call<ResponseBody> getChatMessage(@Path(\"chatThreadId\") String chatThreadId, @Path(\"chatMessageId\") String chatMessageId, @Query(\"api-version\") String apiVersion);\n+\n+        @PATCH(\"/chat/threads/{chatThreadId}/messages/{chatMessageId}\")\n+        Call<ResponseBody> updateChatMessage(@Path(\"chatThreadId\") String chatThreadId, @Path(\"chatMessageId\") String chatMessageId, @Query(\"api-version\") String apiVersion, @Body RequestBody body);\n+\n+        @DELETE(\"/chat/threads/{chatThreadId}/messages/{chatMessageId}\")\n+        Call<ResponseBody> deleteChatMessage(@Path(\"chatThreadId\") String chatThreadId, @Path(\"chatMessageId\") String chatMessageId, @Query(\"api-version\") String apiVersion);\n+\n+        @POST(\"/chat/threads/{chatThreadId}/typing\")\n+        Call<ResponseBody> sendTypingNotification(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion);\n+\n+        @GET(\"/chat/threads/{chatThreadId}/members\")\n+        Call<ResponseBody> listChatThreadMembers(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion);\n+\n+        @POST(\"/chat/threads/{chatThreadId}/members\")\n+        Call<ResponseBody> addChatThreadMembers(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion, @Body RequestBody body);\n+\n+        @DELETE(\"/chat/threads/{chatThreadId}/members/{chatMemberId}\")\n+        Call<ResponseBody> removeChatThreadMember(@Path(\"chatThreadId\") String chatThreadId, @Path(\"chatMemberId\") String chatMemberId, @Query(\"api-version\") String apiVersion);\n+\n+        @POST(\"/chat/threads\")\n+        Call<ResponseBody> createChatThread(@Query(\"api-version\") String apiVersion, @Body RequestBody body);\n+\n+        @GET(\"/chat/threads\")\n+        Call<ResponseBody> listChatThreads(@Query(\"maxPageSize\") Integer maxPageSize, @Query(\"startTime\") OffsetDateTime startTime, @Query(\"api-version\") String apiVersion);\n+\n+        @PATCH(\"/chat/threads/{chatThreadId}\")\n+        Call<ResponseBody> updateChatThread(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion, @Body RequestBody body);\n+\n+        @GET(\"/chat/threads/{chatThreadId}\")\n+        Call<ResponseBody> getChatThread(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion);\n+\n+        @DELETE(\"/chat/threads/{chatThreadId}\")\n+        Call<ResponseBody> deleteChatThread(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion);\n+\n+        @GET(\"{nextLink}\")\n+        Call<ResponseBody> listChatReadReceiptsNext(@Path(value = \"nextLink\", encoded = true) String nextLink);\n+\n+        @GET(\"{nextLink}\")\n+        Call<ResponseBody> listChatMessagesNext(@Path(value = \"nextLink\", encoded = true) String nextLink);\n+\n+        @GET(\"{nextLink}\")\n+        Call<ResponseBody> listChatThreadMembersNext(@Path(value = \"nextLink\", encoded = true) String nextLink);\n+\n+        @GET(\"{nextLink}\")\n+        Call<ResponseBody> listChatThreadsNext(@Path(value = \"nextLink\", encoded = true) String nextLink);\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceipts(String chatThreadId, final Callback<Page<ReadReceipt>> callback) {\n+        Call<ResponseBody> call = service.listChatReadReceipts(chatThreadId, this.getApiVersion());\n+        retrofit2.Callback<ResponseBody> retrofitCallback = new retrofit2.Callback<ResponseBody>() {\n+            @Override\n+            public void onResponse(Call<okhttp3.ResponseBody> call, retrofit2.Response<ResponseBody> response) {\n+                if (response.isSuccessful()) {\n+                    if (response.code() == 200) {\n+                        final ReadReceiptsCollection decodedResult;\n+                        try {\n+                            decodedResult = deserializeContent(response.headers(), response.body(), ReadReceiptsCollection.class);\n+                        } catch(Exception ex) {\n+                            callback.onFailure(ex, response.raw());\n+                            return;\n+                        }\n+                        callback.onSuccess(new Page<ReadReceipt>(response.raw().request().url().toString(), decodedResult.getValue(), decodedResult.getNextLink()), response.raw());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8396102e0d92f4773206520d9ba9d8ec697c3d4f"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzOTc5OQ==", "bodyText": "nit; Indentation turned out a little weird in methods like this one.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498539799", "createdAt": "2020-10-01T22:17:44Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/chat/src/main/java/com/azure/android/communication/chat/implementation/AzureCommunicationChatServiceImpl.java", "diffHunk": "@@ -0,0 +1,2309 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.android.communication.chat.implementation;\n+\n+import com.azure.android.communication.chat.models.AddChatThreadMembersOptions;\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatMessagesCollection;\n+import com.azure.android.communication.chat.models.ChatThread;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.communication.chat.models.ChatThreadMember;\n+import com.azure.android.communication.chat.models.ChatThreadMembersCollection;\n+import com.azure.android.communication.chat.models.ChatThreadsInfoCollection;\n+import com.azure.android.communication.chat.models.CreateChatThreadOptions;\n+import com.azure.android.communication.chat.models.ErrorException;\n+import com.azure.android.communication.chat.models.MultiStatusResponse;\n+import com.azure.android.communication.chat.models.ReadReceipt;\n+import com.azure.android.communication.chat.models.ReadReceiptsCollection;\n+import com.azure.android.communication.chat.models.SendChatMessageOptions;\n+import com.azure.android.communication.chat.models.SendChatMessageResult;\n+import com.azure.android.communication.chat.models.SendReadReceiptRequest;\n+import com.azure.android.communication.chat.models.UpdateChatMessageOptions;\n+import com.azure.android.communication.chat.models.UpdateChatThreadOptions;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.exception.HttpResponseException;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataRetriever;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseCollection;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseRetriever;\n+import com.azure.android.core.internal.util.serializer.SerializerAdapter;\n+import com.azure.android.core.internal.util.serializer.SerializerFormat;\n+import com.azure.android.core.util.paging.Page;\n+import com.azure.android.core.util.paging.PagedDataCollection;\n+import com.azure.android.core.util.paging.PagedDataRetriever;\n+import okhttp3.RequestBody;\n+import okhttp3.ResponseBody;\n+import org.threeten.bp.OffsetDateTime;\n+import retrofit2.Call;\n+import retrofit2.http.Body;\n+import retrofit2.http.DELETE;\n+import retrofit2.http.GET;\n+import retrofit2.http.PATCH;\n+import retrofit2.http.Path;\n+import retrofit2.http.POST;\n+import retrofit2.http.Query;\n+\n+/**\n+ * Initializes a new instance of the AzureCommunicationChatService type.\n+ */\n+public final class AzureCommunicationChatServiceImpl {\n+    /**\n+     * The proxy service used to perform REST calls.\n+     */\n+    private final AzureCommunicationChatServiceService service;\n+\n+    /**\n+     * The serializer.\n+     */\n+    final SerializerAdapter serializerAdapter = SerializerAdapter.createDefault();\n+\n+    /**\n+     * The Azure Core generic ServiceClient to setup interceptors and produce retrofit proxy.\n+     */\n+    private ServiceClient serviceClient;\n+\n+    /**\n+     * Gets The Azure Core generic ServiceClient to setup interceptors and produce retrofit proxy.\n+     * \n+     * @return the serviceClient value.\n+     */\n+    public ServiceClient getServiceClient() {\n+        return this.serviceClient;\n+    }\n+\n+    /**\n+     * The endpoint of the Azure Communication resource.\n+     */\n+    private final String endpoint;\n+\n+    /**\n+     * Gets The endpoint of the Azure Communication resource.\n+     * \n+     * @return the endpoint value.\n+     */\n+    public String getEndpoint() {\n+        return this.endpoint;\n+    }\n+\n+    /**\n+     * Api Version.\n+     */\n+    private final String apiVersion;\n+\n+    /**\n+     * Gets Api Version.\n+     * \n+     * @return the apiVersion value.\n+     */\n+    public String getApiVersion() {\n+        return this.apiVersion;\n+    }\n+\n+    /**\n+     * Initializes an instance of AzureCommunicationChatService client.\n+     * \n+     * @param serviceClient The Azure Core generic ServiceClient to setup interceptors and produce retrofit proxy.\n+     * @param endpoint The endpoint of the Azure Communication resource.\n+     */\n+    public AzureCommunicationChatServiceImpl(ServiceClient serviceClient, String endpoint) {\n+        this.serviceClient = serviceClient;\n+        this.endpoint = endpoint;\n+        this.apiVersion = \"2020-09-21-preview2\";\n+        this.service = serviceClient.getRetrofit().create(AzureCommunicationChatServiceService.class);\n+    }\n+\n+    /**\n+     * The interface defining all the services for\n+     * AzureCommunicationChatService to be used by the proxy service to perform\n+     * REST calls.\n+     */\n+    private interface AzureCommunicationChatServiceService {\n+        @GET(\"/chat/threads/{chatThreadId}/readreceipts\")\n+        Call<ResponseBody> listChatReadReceipts(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion);\n+\n+        @POST(\"/chat/threads/{chatThreadId}/readreceipts\")\n+        Call<ResponseBody> sendChatReadReceipt(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion, @Body RequestBody body);\n+\n+        @POST(\"/chat/threads/{chatThreadId}/messages\")\n+        Call<ResponseBody> sendChatMessage(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion, @Body RequestBody body);\n+\n+        @GET(\"/chat/threads/{chatThreadId}/messages\")\n+        Call<ResponseBody> listChatMessages(@Path(\"chatThreadId\") String chatThreadId, @Query(\"maxPageSize\") Integer maxPageSize, @Query(\"startTime\") OffsetDateTime startTime, @Query(\"api-version\") String apiVersion);\n+\n+        @GET(\"/chat/threads/{chatThreadId}/messages/{chatMessageId}\")\n+        Call<ResponseBody> getChatMessage(@Path(\"chatThreadId\") String chatThreadId, @Path(\"chatMessageId\") String chatMessageId, @Query(\"api-version\") String apiVersion);\n+\n+        @PATCH(\"/chat/threads/{chatThreadId}/messages/{chatMessageId}\")\n+        Call<ResponseBody> updateChatMessage(@Path(\"chatThreadId\") String chatThreadId, @Path(\"chatMessageId\") String chatMessageId, @Query(\"api-version\") String apiVersion, @Body RequestBody body);\n+\n+        @DELETE(\"/chat/threads/{chatThreadId}/messages/{chatMessageId}\")\n+        Call<ResponseBody> deleteChatMessage(@Path(\"chatThreadId\") String chatThreadId, @Path(\"chatMessageId\") String chatMessageId, @Query(\"api-version\") String apiVersion);\n+\n+        @POST(\"/chat/threads/{chatThreadId}/typing\")\n+        Call<ResponseBody> sendTypingNotification(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion);\n+\n+        @GET(\"/chat/threads/{chatThreadId}/members\")\n+        Call<ResponseBody> listChatThreadMembers(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion);\n+\n+        @POST(\"/chat/threads/{chatThreadId}/members\")\n+        Call<ResponseBody> addChatThreadMembers(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion, @Body RequestBody body);\n+\n+        @DELETE(\"/chat/threads/{chatThreadId}/members/{chatMemberId}\")\n+        Call<ResponseBody> removeChatThreadMember(@Path(\"chatThreadId\") String chatThreadId, @Path(\"chatMemberId\") String chatMemberId, @Query(\"api-version\") String apiVersion);\n+\n+        @POST(\"/chat/threads\")\n+        Call<ResponseBody> createChatThread(@Query(\"api-version\") String apiVersion, @Body RequestBody body);\n+\n+        @GET(\"/chat/threads\")\n+        Call<ResponseBody> listChatThreads(@Query(\"maxPageSize\") Integer maxPageSize, @Query(\"startTime\") OffsetDateTime startTime, @Query(\"api-version\") String apiVersion);\n+\n+        @PATCH(\"/chat/threads/{chatThreadId}\")\n+        Call<ResponseBody> updateChatThread(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion, @Body RequestBody body);\n+\n+        @GET(\"/chat/threads/{chatThreadId}\")\n+        Call<ResponseBody> getChatThread(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion);\n+\n+        @DELETE(\"/chat/threads/{chatThreadId}\")\n+        Call<ResponseBody> deleteChatThread(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion);\n+\n+        @GET(\"{nextLink}\")\n+        Call<ResponseBody> listChatReadReceiptsNext(@Path(value = \"nextLink\", encoded = true) String nextLink);\n+\n+        @GET(\"{nextLink}\")\n+        Call<ResponseBody> listChatMessagesNext(@Path(value = \"nextLink\", encoded = true) String nextLink);\n+\n+        @GET(\"{nextLink}\")\n+        Call<ResponseBody> listChatThreadMembersNext(@Path(value = \"nextLink\", encoded = true) String nextLink);\n+\n+        @GET(\"{nextLink}\")\n+        Call<ResponseBody> listChatThreadsNext(@Path(value = \"nextLink\", encoded = true) String nextLink);\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceipts(String chatThreadId, final Callback<Page<ReadReceipt>> callback) {\n+        Call<ResponseBody> call = service.listChatReadReceipts(chatThreadId, this.getApiVersion());\n+        retrofit2.Callback<ResponseBody> retrofitCallback = new retrofit2.Callback<ResponseBody>() {\n+            @Override\n+            public void onResponse(Call<okhttp3.ResponseBody> call, retrofit2.Response<ResponseBody> response) {\n+                if (response.isSuccessful()) {\n+                    if (response.code() == 200) {\n+                        final ReadReceiptsCollection decodedResult;\n+                        try {\n+                            decodedResult = deserializeContent(response.headers(), response.body(), ReadReceiptsCollection.class);\n+                        } catch(Exception ex) {\n+                            callback.onFailure(ex, response.raw());\n+                            return;\n+                        }\n+                        callback.onSuccess(new Page<ReadReceipt>(response.raw().request().url().toString(), decodedResult.getValue(), decodedResult.getNextLink()), response.raw());\n+                    } else {\n+                        final String strContent = readAsString(response.body());\n+                        callback.onFailure(new ErrorException(strContent, response.raw()), response.raw());\n+                    }\n+                } else {\n+                    final String strContent = readAsString(response.errorBody());\n+                    callback.onFailure(new HttpResponseException(strContent, response.raw()), response.raw());\n+                }\n+            }\n+\n+            @Override\n+            public void onFailure(Call<ResponseBody> call, Throwable t) {\n+                callback.onFailure(t, null);\n+            }\n+        };\n+        call.enqueue(retrofitCallback);\n+    }\n+\n+    private static final class ReadReceiptPageAsyncRetriever extends AsyncPagedDataRetriever<ReadReceipt, Page<ReadReceipt>> {\n+        private final String chatThreadId;\n+\n+        private final AzureCommunicationChatServiceImpl serviceClient;\n+\n+        public ReadReceiptPageAsyncRetriever(String chatThreadId, AzureCommunicationChatServiceImpl serviceClient) {\n+            this.chatThreadId = chatThreadId;\n+            this.serviceClient = serviceClient;\n+        }\n+\n+        public void getFirstPage(Callback<Page<ReadReceipt>> callback) {\n+            serviceClient.listChatReadReceipts(chatThreadId, callback);\n+        }\n+\n+        public void getPage(String pageId, Callback<Page<ReadReceipt>> callback) {\n+            serviceClient.listChatReadReceiptsNext(pageId, callback);\n+        }\n+    }\n+\n+    private static final class ReadReceiptPageResponseRetriever extends PagedDataResponseRetriever<ReadReceipt, Page<ReadReceipt>> {\n+        private final String chatThreadId;\n+\n+        private final AzureCommunicationChatServiceImpl serviceClient;\n+\n+        public ReadReceiptPageResponseRetriever(String chatThreadId, AzureCommunicationChatServiceImpl serviceClient) {\n+            this.chatThreadId = chatThreadId;\n+            this.serviceClient = serviceClient;\n+        }\n+\n+        public Response<Page<ReadReceipt>> getFirstPage() {\n+             return serviceClient.listChatReadReceiptsWithRestResponse(chatThreadId);\n+        }\n+\n+        public Response<Page<ReadReceipt>> getPage(String pageId) {\n+            return serviceClient.listChatReadReceiptsNextWithRestResponse(pageId);\n+        }\n+    }\n+\n+    private static final class ReadReceiptPageRetriever extends PagedDataRetriever<ReadReceipt, Page<ReadReceipt>> {\n+        private final String chatThreadId;\n+\n+        private final AzureCommunicationChatServiceImpl serviceClient;\n+\n+        public ReadReceiptPageRetriever(String chatThreadId, AzureCommunicationChatServiceImpl serviceClient) {\n+            this.chatThreadId = chatThreadId;\n+            this.serviceClient = serviceClient;\n+        }\n+\n+        public Page<ReadReceipt> getFirstPage() {\n+             return serviceClient.listChatReadReceiptsWithRestResponse(chatThreadId).getValue();\n+        }\n+\n+        public Page<ReadReceipt> getPage(String pageId) {\n+            return serviceClient.listChatReadReceiptsNextWithRestResponse(pageId).getValue();\n+        }\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return read receipts for a thread.\n+     */\n+    public Response<Page<ReadReceipt>> listChatReadReceiptsWithRestResponse(String chatThreadId) {\n+        final retrofit2.Response<ResponseBody> response = this.executeRetrofitCall(service.listChatReadReceipts(chatThreadId, this.getApiVersion()));\n+        if (response.isSuccessful()) {\n+            if (response.code() == 200) {\n+                final ReadReceiptsCollection decodedResult;\n+                try {\n+                    decodedResult = this.deserializeContent(response.headers(), response.body(), ReadReceiptsCollection.class);\n+                } catch(Exception ex) {\n+                    final String strContent = this.readAsString(response.body());\n+                    throw new ErrorException(strContent, response.raw());\n+                }\n+                return new Response<>(response.raw().request(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8396102e0d92f4773206520d9ba9d8ec697c3d4f"}, "originalPosition": 305}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0MDY3MA==", "bodyText": "typo\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Azure Communciation Service - Chat SDK for Android\n          \n          \n            \n            # Azure Communication Service - Chat SDK for Android", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498540670", "createdAt": "2020-10-01T22:20:22Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/chat/swagger/README.md", "diffHunk": "@@ -0,0 +1,37 @@\n+# Azure Communciation Service - Chat SDK for Android", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8396102e0d92f4773206520d9ba9d8ec697c3d4f"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0MTQyMw==", "bodyText": "I noticed the other (unit) test will be deleted, will we do that for this one as well?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498541423", "createdAt": "2020-10-01T22:22:52Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/chat/src/androidTest/java/com/azure/communication/chat/ExampleInstrumentedTest.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package com.azure.communication.chat;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8396102e0d92f4773206520d9ba9d8ec697c3d4f"}, "originalPosition": 2}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1af3a56e9230ef0ac8a6a4ae982bd333986973d", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/b1af3a56e9230ef0ac8a6a4ae982bd333986973d", "committedDate": "2020-10-01T22:29:41Z", "message": "Add basic CRUD tests for thread, message, member"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfa981bb59fd051a1b7a44ac11384d36bdce7b70", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/dfa981bb59fd051a1b7a44ac11384d36bdce7b70", "committedDate": "2020-10-01T22:34:13Z", "message": "Remove sample test file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bae6f1cbae4f7b8f4c5d2b5b985f719f7194a76a", "author": {"user": {"login": "JianpingChen", "name": "Jianping Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/bae6f1cbae4f7b8f4c5d2b5b985f719f7194a76a", "committedDate": "2020-10-01T22:35:10Z", "message": "Update sdk/communication/chat/swagger/README.md\n\nCo-authored-by: vcolin7 <vicolina@microsoft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0303e221e07b317e6ffb52e653946cba826a58ec", "author": {"user": {"login": "JianpingChen", "name": "Jianping Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/0303e221e07b317e6ffb52e653946cba826a58ec", "committedDate": "2020-10-01T22:42:23Z", "message": "Update sdk/communication/chat/build.gradle\n\nCo-authored-by: vcolin7 <vicolina@microsoft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10bd9ae54c71528c724e6ec0cb0ed660d4ec6c5b", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/10bd9ae54c71528c724e6ec0cb0ed660d4ec6c5b", "committedDate": "2020-10-01T23:46:38Z", "message": "Fix android manifest for Chat"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd109f931da51887c416febd34767086c8862fc0", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/dd109f931da51887c416febd34767086c8862fc0", "committedDate": "2020-10-01T23:58:51Z", "message": "revert a merge error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "288751cabba7103e1880bca876c808976cf10ec5", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/288751cabba7103e1880bca876c808976cf10ec5", "committedDate": "2020-10-02T00:04:14Z", "message": "revert a mistaken change to root gradle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13924627028833d4ecea57297e7e7873b51812ce", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/13924627028833d4ecea57297e7e7873b51812ce", "committedDate": "2020-10-02T00:06:58Z", "message": "revert a mistaken change to root gradle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5844d66c34e644a6b501f2a2a574a723b3135f0", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/c5844d66c34e644a6b501f2a2a574a723b3135f0", "committedDate": "2020-10-02T16:56:43Z", "message": "Add unit tests for different paging collections; remove integration tests since the token will expire"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMzEyOTQ3", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#pullrequestreview-501312947", "createdAt": "2020-10-02T17:19:08Z", "commit": {"oid": "c5844d66c34e644a6b501f2a2a574a723b3135f0"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzoxOTowOFrOHb1fHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzoyODoyNFrOHb1wdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0OTkxOQ==", "bodyText": "It looks like this works but later we can probably look to make these tests more readable without nesting so many callbacks that are declared in place.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498949919", "createdAt": "2020-10-02T17:19:08Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/chat/src/test/java/com/azure/android/communication/chat/chatAsyncClientTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+package com.azure.android.communication.chat;\n+\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.util.paging.Page;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+import org.threeten.bp.OffsetDateTime;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import okhttp3.Response;\n+import okhttp3.mockwebserver.MockResponse;\n+import okhttp3.mockwebserver.MockWebServer;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+\n+public class chatAsyncClientTest {\n+\n+    private static final MockWebServer mockWebServer = new MockWebServer();\n+    private static final String BASE_URL = mockWebServer.url(\"/\").toString();\n+    private static AzureCommunicationChatServiceAsyncClient chatServiceAsyncClient =\n+        new AzureCommunicationChatServiceAsyncClient.Builder()\n+            .serviceClientBuilder(new ServiceClient.Builder().setBaseUrl(BASE_URL))\n+            .build();\n+\n+    @After\n+    public void tearDown() throws InterruptedException {\n+        // For ensuring the responses enqueued are consumed before making the next call.\n+        mockWebServer.takeRequest(20, TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Test\n+    public void listThreadPages() {\n+        mockThreadsResponse(5);\n+\n+        chatServiceAsyncClient.listChatThreadsPages(new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+            @Override\n+            public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> result, Response response) {\n+                AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> asyncPagedDataCollection = result;\n+                asyncPagedDataCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+                    @Override\n+                    public void onSuccess(Page<ChatThreadInfo> result, Response response) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5844d66c34e644a6b501f2a2a574a723b3135f0"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1MTU1Ng==", "bodyText": "I believe there's a JUnit method that's called fail() for cases like this.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498951556", "createdAt": "2020-10-02T17:22:34Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/chat/src/test/java/com/azure/android/communication/chat/chatAsyncClientTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+package com.azure.android.communication.chat;\n+\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.util.paging.Page;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+import org.threeten.bp.OffsetDateTime;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import okhttp3.Response;\n+import okhttp3.mockwebserver.MockResponse;\n+import okhttp3.mockwebserver.MockWebServer;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+\n+public class chatAsyncClientTest {\n+\n+    private static final MockWebServer mockWebServer = new MockWebServer();\n+    private static final String BASE_URL = mockWebServer.url(\"/\").toString();\n+    private static AzureCommunicationChatServiceAsyncClient chatServiceAsyncClient =\n+        new AzureCommunicationChatServiceAsyncClient.Builder()\n+            .serviceClientBuilder(new ServiceClient.Builder().setBaseUrl(BASE_URL))\n+            .build();\n+\n+    @After\n+    public void tearDown() throws InterruptedException {\n+        // For ensuring the responses enqueued are consumed before making the next call.\n+        mockWebServer.takeRequest(20, TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Test\n+    public void listThreadPages() {\n+        mockThreadsResponse(5);\n+\n+        chatServiceAsyncClient.listChatThreadsPages(new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+            @Override\n+            public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> result, Response response) {\n+                AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> asyncPagedDataCollection = result;\n+                asyncPagedDataCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+                    @Override\n+                    public void onSuccess(Page<ChatThreadInfo> result, Response response) {\n+                        assertEquals(5, result.getItems().size());\n+                        mockThreadsResponse(3);\n+                        asyncPagedDataCollection.getPage(result.getNextPageId(), new Callback<Page<ChatThreadInfo>>() {\n+                            @Override\n+                            public void onSuccess(Page<ChatThreadInfo> result, Response response) {\n+                                assertEquals(3, result.getItems().size());\n+\n+                                 asyncPagedDataCollection.getPage(result.getPreviousPageId(), new Callback<Page<ChatThreadInfo>>() {\n+                                    @Override\n+                                    public void onSuccess(Page<ChatThreadInfo> result, Response response) {\n+                                        assertEquals(5, result.getItems().size());\n+                                    }\n+\n+                                    @Override\n+                                    public void onFailure(Throwable throwable, Response response) {\n+                                        assertTrue(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5844d66c34e644a6b501f2a2a574a723b3135f0"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1MjE1Mg==", "bodyText": "nit; Indentation's funky here. Nothing major.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                             asyncPagedDataCollection.getPage(result.getPreviousPageId(), new Callback<Page<ChatThreadInfo>>() {\n          \n          \n            \n                                            asyncPagedDataCollection.getPage(result.getPreviousPageId(), new Callback<Page<ChatThreadInfo>>() {", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498952152", "createdAt": "2020-10-02T17:23:51Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/chat/src/test/java/com/azure/android/communication/chat/chatAsyncClientTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+package com.azure.android.communication.chat;\n+\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.util.paging.Page;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+import org.threeten.bp.OffsetDateTime;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import okhttp3.Response;\n+import okhttp3.mockwebserver.MockResponse;\n+import okhttp3.mockwebserver.MockWebServer;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+\n+public class chatAsyncClientTest {\n+\n+    private static final MockWebServer mockWebServer = new MockWebServer();\n+    private static final String BASE_URL = mockWebServer.url(\"/\").toString();\n+    private static AzureCommunicationChatServiceAsyncClient chatServiceAsyncClient =\n+        new AzureCommunicationChatServiceAsyncClient.Builder()\n+            .serviceClientBuilder(new ServiceClient.Builder().setBaseUrl(BASE_URL))\n+            .build();\n+\n+    @After\n+    public void tearDown() throws InterruptedException {\n+        // For ensuring the responses enqueued are consumed before making the next call.\n+        mockWebServer.takeRequest(20, TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Test\n+    public void listThreadPages() {\n+        mockThreadsResponse(5);\n+\n+        chatServiceAsyncClient.listChatThreadsPages(new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+            @Override\n+            public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> result, Response response) {\n+                AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> asyncPagedDataCollection = result;\n+                asyncPagedDataCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+                    @Override\n+                    public void onSuccess(Page<ChatThreadInfo> result, Response response) {\n+                        assertEquals(5, result.getItems().size());\n+                        mockThreadsResponse(3);\n+                        asyncPagedDataCollection.getPage(result.getNextPageId(), new Callback<Page<ChatThreadInfo>>() {\n+                            @Override\n+                            public void onSuccess(Page<ChatThreadInfo> result, Response response) {\n+                                assertEquals(3, result.getItems().size());\n+\n+                                 asyncPagedDataCollection.getPage(result.getPreviousPageId(), new Callback<Page<ChatThreadInfo>>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5844d66c34e644a6b501f2a2a574a723b3135f0"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1MjU4Nw==", "bodyText": "I don't think we need to define this variable if we have result already. We could rename result in the callback declaration to something like pagedCollection.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498952587", "createdAt": "2020-10-02T17:24:46Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/chat/src/test/java/com/azure/android/communication/chat/chatAsyncClientTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+package com.azure.android.communication.chat;\n+\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.util.paging.Page;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+import org.threeten.bp.OffsetDateTime;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import okhttp3.Response;\n+import okhttp3.mockwebserver.MockResponse;\n+import okhttp3.mockwebserver.MockWebServer;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+\n+public class chatAsyncClientTest {\n+\n+    private static final MockWebServer mockWebServer = new MockWebServer();\n+    private static final String BASE_URL = mockWebServer.url(\"/\").toString();\n+    private static AzureCommunicationChatServiceAsyncClient chatServiceAsyncClient =\n+        new AzureCommunicationChatServiceAsyncClient.Builder()\n+            .serviceClientBuilder(new ServiceClient.Builder().setBaseUrl(BASE_URL))\n+            .build();\n+\n+    @After\n+    public void tearDown() throws InterruptedException {\n+        // For ensuring the responses enqueued are consumed before making the next call.\n+        mockWebServer.takeRequest(20, TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Test\n+    public void listThreadPages() {\n+        mockThreadsResponse(5);\n+\n+        chatServiceAsyncClient.listChatThreadsPages(new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+            @Override\n+            public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> result, Response response) {\n+                AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> asyncPagedDataCollection = result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5844d66c34e644a6b501f2a2a574a723b3135f0"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1NDM1OQ==", "bodyText": "Same comment about declaring a new variable based on result.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498954359", "createdAt": "2020-10-02T17:28:24Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/chat/src/test/java/com/azure/android/communication/chat/chatAsyncClientTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+package com.azure.android.communication.chat;\n+\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.util.paging.Page;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+import org.threeten.bp.OffsetDateTime;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import okhttp3.Response;\n+import okhttp3.mockwebserver.MockResponse;\n+import okhttp3.mockwebserver.MockWebServer;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+\n+public class chatAsyncClientTest {\n+\n+    private static final MockWebServer mockWebServer = new MockWebServer();\n+    private static final String BASE_URL = mockWebServer.url(\"/\").toString();\n+    private static AzureCommunicationChatServiceAsyncClient chatServiceAsyncClient =\n+        new AzureCommunicationChatServiceAsyncClient.Builder()\n+            .serviceClientBuilder(new ServiceClient.Builder().setBaseUrl(BASE_URL))\n+            .build();\n+\n+    @After\n+    public void tearDown() throws InterruptedException {\n+        // For ensuring the responses enqueued are consumed before making the next call.\n+        mockWebServer.takeRequest(20, TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Test\n+    public void listThreadPages() {\n+        mockThreadsResponse(5);\n+\n+        chatServiceAsyncClient.listChatThreadsPages(new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+            @Override\n+            public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> result, Response response) {\n+                AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> asyncPagedDataCollection = result;\n+                asyncPagedDataCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+                    @Override\n+                    public void onSuccess(Page<ChatThreadInfo> result, Response response) {\n+                        assertEquals(5, result.getItems().size());\n+                        mockThreadsResponse(3);\n+                        asyncPagedDataCollection.getPage(result.getNextPageId(), new Callback<Page<ChatThreadInfo>>() {\n+                            @Override\n+                            public void onSuccess(Page<ChatThreadInfo> result, Response response) {\n+                                assertEquals(3, result.getItems().size());\n+\n+                                 asyncPagedDataCollection.getPage(result.getPreviousPageId(), new Callback<Page<ChatThreadInfo>>() {\n+                                    @Override\n+                                    public void onSuccess(Page<ChatThreadInfo> result, Response response) {\n+                                        assertEquals(5, result.getItems().size());\n+                                    }\n+\n+                                    @Override\n+                                    public void onFailure(Throwable throwable, Response response) {\n+                                        assertTrue(false);\n+                                    }\n+                                });\n+                            }\n+\n+                            @Override\n+                            public void onFailure(Throwable throwable, Response response) {\n+                                assertTrue(false);\n+                            }\n+                        });\n+                    }\n+\n+                    @Override\n+                    public void onFailure(Throwable throwable, Response response) {\n+                        assertTrue(false);\n+                    }\n+                });\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                assertTrue(false);\n+            }\n+        }, 5, OffsetDateTime.now());\n+\n+    }\n+\n+    @Test\n+    public void listThreadMessagePages() {\n+        mockMessagesResponse(5);\n+\n+        chatServiceAsyncClient.listChatMessagesPages(\"threadId\", new Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>>() {\n+            @Override\n+            public void onSuccess(AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> result, Response response) {\n+                AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> asyncPagedDataCollection = result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5844d66c34e644a6b501f2a2a574a723b3135f0"}, "originalPosition": 98}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3530f1b0782bbd71cb1f8b242127cf6d129190b8", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/3530f1b0782bbd71cb1f8b242127cf6d129190b8", "committedDate": "2020-10-02T17:52:05Z", "message": "Rename chat folder to azure-communication-chat; Update swagger README.md to link to swagger; Regenerate with swagger link"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "180f46e8cf305095aa0595a1280017d8d70f1f4f", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/180f46e8cf305095aa0595a1280017d8d70f1f4f", "committedDate": "2020-10-02T18:05:52Z", "message": "Update ci.yml to publish chat sdk"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cccd63b6b6eb4af70e178dca0c50481ed561dc7", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/6cccd63b6b6eb4af70e178dca0c50481ed561dc7", "committedDate": "2020-10-02T18:15:50Z", "message": "Minor changes in test code according to review feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMzY0MDk0", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#pullrequestreview-501364094", "createdAt": "2020-10-02T18:37:52Z", "commit": {"oid": "6cccd63b6b6eb4af70e178dca0c50481ed561dc7"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODozNzo1MlrOHb33jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODozODowNVrOHb337g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4ODk0Mw==", "bodyText": "should we manually move the Callback as the last param for now and fix codegen later.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498988943", "createdAt": "2020-10-02T18:37:52Z", "author": {"login": "anuchandy"}, "path": "sdk/communication/azure-communication-chat/src/main/java/com/azure/android/communication/chat/AzureCommunicationChatServiceAsyncClient.java", "diffHunk": "@@ -0,0 +1,490 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.android.communication.chat;\n+\n+import com.azure.android.communication.chat.implementation.AzureCommunicationChatServiceImpl;\n+import com.azure.android.communication.chat.models.AddChatThreadMembersRequest;\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatMessagesCollection;\n+import com.azure.android.communication.chat.models.ChatThread;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.communication.chat.models.ChatThreadMember;\n+import com.azure.android.communication.chat.models.ChatThreadMembersCollection;\n+import com.azure.android.communication.chat.models.ChatThreadsInfoCollection;\n+import com.azure.android.communication.chat.models.CreateChatThreadRequest;\n+import com.azure.android.communication.chat.models.ErrorException;\n+import com.azure.android.communication.chat.models.MultiStatusResponse;\n+import com.azure.android.communication.chat.models.ReadReceipt;\n+import com.azure.android.communication.chat.models.ReadReceiptsCollection;\n+import com.azure.android.communication.chat.models.SendChatMessageRequest;\n+import com.azure.android.communication.chat.models.SendChatMessageResult;\n+import com.azure.android.communication.chat.models.SendReadReceiptRequest;\n+import com.azure.android.communication.chat.models.UpdateChatMessageRequest;\n+import com.azure.android.communication.chat.models.UpdateChatThreadRequest;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.exception.HttpResponseException;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataRetriever;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseCollection;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseRetriever;\n+import com.azure.android.core.util.paging.Page;\n+import com.azure.android.core.util.paging.PagedDataCollection;\n+import com.azure.android.core.util.paging.PagedDataRetriever;\n+import okhttp3.Interceptor;\n+import okhttp3.RequestBody;\n+import okhttp3.ResponseBody;\n+import org.threeten.bp.OffsetDateTime;\n+import retrofit2.Call;\n+import retrofit2.http.Body;\n+import retrofit2.http.DELETE;\n+import retrofit2.http.GET;\n+import retrofit2.http.PATCH;\n+import retrofit2.http.Path;\n+import retrofit2.http.POST;\n+import retrofit2.http.Query;\n+\n+/**\n+ * Initializes a new instance of the asynchronous AzureCommunicationChatService type.\n+ */\n+public final class AzureCommunicationChatServiceAsyncClient {\n+    private AzureCommunicationChatServiceImpl serviceClient;\n+\n+    /**\n+     * Initializes an instance of AzureCommunicationChatService client.\n+     */\n+    AzureCommunicationChatServiceAsyncClient(AzureCommunicationChatServiceImpl serviceClient) {\n+        this.serviceClient = serviceClient;\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceipts(String chatThreadId, final Callback<Page<ReadReceipt>> callback) {\n+        this.serviceClient.listChatReadReceipts(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceiptsPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>> collectionCallback) {\n+        this.serviceClient.listChatReadReceiptsPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Sends a read receipt event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Thread id to send the read receipt event to.\n+     * @param body Request payload for sending a read receipt.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatReadReceipt(String chatThreadId, SendReadReceiptRequest body, final Callback<Void> callback) {\n+        this.serviceClient.sendChatReadReceipt(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Sends a message to a thread.\n+     * \n+     * @param chatThreadId The thread id to send the message to.\n+     * @param body Details of the message to send.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatMessage(String chatThreadId, SendChatMessageRequest body, final Callback<SendChatMessageResult> callback) {\n+        this.serviceClient.sendChatMessage(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, maxPageSize, startTime, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessagesPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>> collectionCallback, Integer maxPageSize, OffsetDateTime startTime) {\n+        this.serviceClient.listChatMessagesPagesAsync(chatThreadId, collectionCallback, maxPageSize, startTime);\n+    }\n+\n+    /**\n+     * Gets a message by id.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void getChatMessage(String chatThreadId, String chatMessageId, final Callback<ChatMessage> callback) {\n+        this.serviceClient.getChatMessage(chatThreadId, chatMessageId, callback);\n+    }\n+\n+    /**\n+     * Updates a message.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param body Details of the request to update the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void updateChatMessage(String chatThreadId, String chatMessageId, UpdateChatMessageRequest body, final Callback<Void> callback) {\n+        this.serviceClient.updateChatMessage(chatThreadId, chatMessageId, body, callback);\n+    }\n+\n+    /**\n+     * Deletes a message.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void deleteChatMessage(String chatThreadId, String chatMessageId, final Callback<Void> callback) {\n+        this.serviceClient.deleteChatMessage(chatThreadId, chatMessageId, callback);\n+    }\n+\n+    /**\n+     * Posts a typing event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Id of the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendTypingNotification(String chatThreadId, final Callback<Void> callback) {\n+        this.serviceClient.sendTypingNotification(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets the members of a thread.\n+     * \n+     * @param chatThreadId Thread id to get members for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembers(String chatThreadId, final Callback<Page<ChatThreadMember>> callback) {\n+        this.serviceClient.listChatThreadMembers(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets the members of a thread.\n+     * \n+     * @param chatThreadId Thread id to get members for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembersPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>> collectionCallback) {\n+        this.serviceClient.listChatThreadMembersPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Adds thread members to a thread. If members already exist, no change occurs.\n+     * \n+     * @param chatThreadId Id of the thread to add members to.\n+     * @param body Thread members to be added to the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void addChatThreadMembers(String chatThreadId, AddChatThreadMembersRequest body, final Callback<Void> callback) {\n+        this.serviceClient.addChatThreadMembers(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Remove a member from a thread.\n+     * \n+     * @param chatThreadId Thread id to remove the member from.\n+     * @param chatMemberId Id of the thread member to remove from the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void removeChatThreadMember(String chatThreadId, String chatMemberId, final Callback<Void> callback) {\n+        this.serviceClient.removeChatThreadMember(chatThreadId, chatMemberId, callback);\n+    }\n+\n+    /**\n+     * Creates a chat thread.\n+     * \n+     * @param body Request payload for creating a chat thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void createChatThread(CreateChatThreadRequest body, final Callback<MultiStatusResponse> callback) {\n+        this.serviceClient.createChatThread(body, callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param maxPageSize The maximum number of chat threads returned per page.\n+     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreads(Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatThreadInfo>> callback) {\n+        this.serviceClient.listChatThreads(maxPageSize, startTime, callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreads(final Callback<Page<ChatThreadInfo>> callback) {\n+        this.serviceClient.listChatThreads(callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @param maxPageSize The maximum number of chat threads returned per page.\n+     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadsPages(final Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>> collectionCallback, Integer maxPageSize, OffsetDateTime startTime) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cccd63b6b6eb4af70e178dca0c50481ed561dc7"}, "originalPosition": 319}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4OTAzOA==", "bodyText": "same comment for other affected places", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498989038", "createdAt": "2020-10-02T18:38:05Z", "author": {"login": "anuchandy"}, "path": "sdk/communication/azure-communication-chat/src/main/java/com/azure/android/communication/chat/AzureCommunicationChatServiceAsyncClient.java", "diffHunk": "@@ -0,0 +1,490 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.android.communication.chat;\n+\n+import com.azure.android.communication.chat.implementation.AzureCommunicationChatServiceImpl;\n+import com.azure.android.communication.chat.models.AddChatThreadMembersRequest;\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatMessagesCollection;\n+import com.azure.android.communication.chat.models.ChatThread;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.communication.chat.models.ChatThreadMember;\n+import com.azure.android.communication.chat.models.ChatThreadMembersCollection;\n+import com.azure.android.communication.chat.models.ChatThreadsInfoCollection;\n+import com.azure.android.communication.chat.models.CreateChatThreadRequest;\n+import com.azure.android.communication.chat.models.ErrorException;\n+import com.azure.android.communication.chat.models.MultiStatusResponse;\n+import com.azure.android.communication.chat.models.ReadReceipt;\n+import com.azure.android.communication.chat.models.ReadReceiptsCollection;\n+import com.azure.android.communication.chat.models.SendChatMessageRequest;\n+import com.azure.android.communication.chat.models.SendChatMessageResult;\n+import com.azure.android.communication.chat.models.SendReadReceiptRequest;\n+import com.azure.android.communication.chat.models.UpdateChatMessageRequest;\n+import com.azure.android.communication.chat.models.UpdateChatThreadRequest;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.exception.HttpResponseException;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataRetriever;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseCollection;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseRetriever;\n+import com.azure.android.core.util.paging.Page;\n+import com.azure.android.core.util.paging.PagedDataCollection;\n+import com.azure.android.core.util.paging.PagedDataRetriever;\n+import okhttp3.Interceptor;\n+import okhttp3.RequestBody;\n+import okhttp3.ResponseBody;\n+import org.threeten.bp.OffsetDateTime;\n+import retrofit2.Call;\n+import retrofit2.http.Body;\n+import retrofit2.http.DELETE;\n+import retrofit2.http.GET;\n+import retrofit2.http.PATCH;\n+import retrofit2.http.Path;\n+import retrofit2.http.POST;\n+import retrofit2.http.Query;\n+\n+/**\n+ * Initializes a new instance of the asynchronous AzureCommunicationChatService type.\n+ */\n+public final class AzureCommunicationChatServiceAsyncClient {\n+    private AzureCommunicationChatServiceImpl serviceClient;\n+\n+    /**\n+     * Initializes an instance of AzureCommunicationChatService client.\n+     */\n+    AzureCommunicationChatServiceAsyncClient(AzureCommunicationChatServiceImpl serviceClient) {\n+        this.serviceClient = serviceClient;\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceipts(String chatThreadId, final Callback<Page<ReadReceipt>> callback) {\n+        this.serviceClient.listChatReadReceipts(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceiptsPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>> collectionCallback) {\n+        this.serviceClient.listChatReadReceiptsPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Sends a read receipt event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Thread id to send the read receipt event to.\n+     * @param body Request payload for sending a read receipt.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatReadReceipt(String chatThreadId, SendReadReceiptRequest body, final Callback<Void> callback) {\n+        this.serviceClient.sendChatReadReceipt(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Sends a message to a thread.\n+     * \n+     * @param chatThreadId The thread id to send the message to.\n+     * @param body Details of the message to send.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatMessage(String chatThreadId, SendChatMessageRequest body, final Callback<SendChatMessageResult> callback) {\n+        this.serviceClient.sendChatMessage(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, maxPageSize, startTime, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessagesPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>> collectionCallback, Integer maxPageSize, OffsetDateTime startTime) {\n+        this.serviceClient.listChatMessagesPagesAsync(chatThreadId, collectionCallback, maxPageSize, startTime);\n+    }\n+\n+    /**\n+     * Gets a message by id.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void getChatMessage(String chatThreadId, String chatMessageId, final Callback<ChatMessage> callback) {\n+        this.serviceClient.getChatMessage(chatThreadId, chatMessageId, callback);\n+    }\n+\n+    /**\n+     * Updates a message.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param body Details of the request to update the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void updateChatMessage(String chatThreadId, String chatMessageId, UpdateChatMessageRequest body, final Callback<Void> callback) {\n+        this.serviceClient.updateChatMessage(chatThreadId, chatMessageId, body, callback);\n+    }\n+\n+    /**\n+     * Deletes a message.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void deleteChatMessage(String chatThreadId, String chatMessageId, final Callback<Void> callback) {\n+        this.serviceClient.deleteChatMessage(chatThreadId, chatMessageId, callback);\n+    }\n+\n+    /**\n+     * Posts a typing event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Id of the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendTypingNotification(String chatThreadId, final Callback<Void> callback) {\n+        this.serviceClient.sendTypingNotification(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets the members of a thread.\n+     * \n+     * @param chatThreadId Thread id to get members for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembers(String chatThreadId, final Callback<Page<ChatThreadMember>> callback) {\n+        this.serviceClient.listChatThreadMembers(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets the members of a thread.\n+     * \n+     * @param chatThreadId Thread id to get members for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembersPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>> collectionCallback) {\n+        this.serviceClient.listChatThreadMembersPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Adds thread members to a thread. If members already exist, no change occurs.\n+     * \n+     * @param chatThreadId Id of the thread to add members to.\n+     * @param body Thread members to be added to the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void addChatThreadMembers(String chatThreadId, AddChatThreadMembersRequest body, final Callback<Void> callback) {\n+        this.serviceClient.addChatThreadMembers(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Remove a member from a thread.\n+     * \n+     * @param chatThreadId Thread id to remove the member from.\n+     * @param chatMemberId Id of the thread member to remove from the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void removeChatThreadMember(String chatThreadId, String chatMemberId, final Callback<Void> callback) {\n+        this.serviceClient.removeChatThreadMember(chatThreadId, chatMemberId, callback);\n+    }\n+\n+    /**\n+     * Creates a chat thread.\n+     * \n+     * @param body Request payload for creating a chat thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void createChatThread(CreateChatThreadRequest body, final Callback<MultiStatusResponse> callback) {\n+        this.serviceClient.createChatThread(body, callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param maxPageSize The maximum number of chat threads returned per page.\n+     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreads(Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatThreadInfo>> callback) {\n+        this.serviceClient.listChatThreads(maxPageSize, startTime, callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreads(final Callback<Page<ChatThreadInfo>> callback) {\n+        this.serviceClient.listChatThreads(callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @param maxPageSize The maximum number of chat threads returned per page.\n+     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadsPages(final Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>> collectionCallback, Integer maxPageSize, OffsetDateTime startTime) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4ODk0Mw=="}, "originalCommit": {"oid": "6cccd63b6b6eb4af70e178dca0c50481ed561dc7"}, "originalPosition": 319}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dd6298de177eff041c91349e7d70b5f6606dcc7", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/2dd6298de177eff041c91349e7d70b5f6606dcc7", "committedDate": "2020-10-02T19:11:48Z", "message": "Manually fix a codegen issue with parameter sequence"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca811dd21175b1ef5bbbcb6956b4c4a94aa6eb92", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/ca811dd21175b1ef5bbbcb6956b4c4a94aa6eb92", "committedDate": "2020-10-02T21:14:47Z", "message": "ACS Chat SDK Readme"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c739751951371b645255371b9008db8859096a8", "author": {"user": {"login": "JianpingChen", "name": "Jianping Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/1c739751951371b645255371b9008db8859096a8", "committedDate": "2020-10-02T21:21:56Z", "message": "Merge pull request #1 from anuchandy/readme-chat\n\nACS Chat SDK Readme"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50b499f8d153441c69f146a77bab4f2f18c3a9a1", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/50b499f8d153441c69f146a77bab4f2f18c3a9a1", "committedDate": "2020-10-02T21:55:32Z", "message": "Add change log"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNDY4OTIy", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#pullrequestreview-501468922", "createdAt": "2020-10-02T21:57:27Z", "commit": {"oid": "50b499f8d153441c69f146a77bab4f2f18c3a9a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMTo1NzoyOFrOHb8obg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMTo1NzoyOFrOHb8obg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2Njk5MA==", "bodyText": "I think this should be beta.2. Should not it? All the packages should be incremented to 2 now", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499066990", "createdAt": "2020-10-02T21:57:28Z", "author": {"login": "RezaJooyandeh"}, "path": "sdk/communication/azure-communication-chat/CHANGELOG.md", "diffHunk": "@@ -0,0 +1,13 @@\n+# Release History\n+\n+## 1.0.0-beta.2 (Unreleased)\n+\n+\n+## 1.0.0-beta.1 (2020-09-22)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50b499f8d153441c69f146a77bab4f2f18c3a9a1"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNDYzNjc2", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#pullrequestreview-501463676", "createdAt": "2020-10-02T21:43:02Z", "commit": {"oid": "1c739751951371b645255371b9008db8859096a8"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMTo0MzowMlrOHb8YXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMTo0OTo0NVrOHb8fzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2Mjg3OQ==", "bodyText": "Extra line?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499062879", "createdAt": "2020-10-02T21:43:02Z", "author": {"login": "JianpingChen"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,712 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource)\n+  higher to use this library.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c739751951371b645255371b9008db8859096a8"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2NDc4MA==", "bodyText": "\"> 21\", blankspace", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499064780", "createdAt": "2020-10-02T21:49:45Z", "author": {"login": "JianpingChen"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,712 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource)\n+  higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must\n+  be configured to\n+  [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features)\n+  to use this library. Java 8 language features that require a target API level >21 are not used, nor are any Java 8+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c739751951371b645255371b9008db8859096a8"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNDc4NzI0", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#pullrequestreview-501478724", "createdAt": "2020-10-02T22:27:15Z", "commit": {"oid": "50b499f8d153441c69f146a77bab4f2f18c3a9a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMjoyNzoxNVrOHb9G1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMjoyNzoxNVrOHb9G1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3NDc3Mg==", "bodyText": "This should be a H2 under 'Key Concepts'", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499074772", "createdAt": "2020-10-02T22:27:15Z", "author": {"login": "bsiegel"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,712 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource)\n+  higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must\n+  be configured to\n+  [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features)\n+  to use this library. Java 8 language features that require a target API level >21 are not used, nor are any Java 8+\n+  APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## User and User Access Tokens", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50b499f8d153441c69f146a77bab4f2f18c3a9a1"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNDc5MjQ1", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#pullrequestreview-501479245", "createdAt": "2020-10-02T22:28:56Z", "commit": {"oid": "50b499f8d153441c69f146a77bab4f2f18c3a9a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMjoyODo1NlrOHb9IhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMjoyODo1NlrOHb9IhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3NTIwNQ==", "bodyText": "You should have some prose in here before your sample.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499075205", "createdAt": "2020-10-02T22:28:56Z", "author": {"login": "bsiegel"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,712 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource)\n+  higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must\n+  be configured to\n+  [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features)\n+  to use this library. Java 8 language features that require a target API level >21 are not used, nor are any Java 8+\n+  APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## User and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Create the AzureCommunicationChatClient\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50b499f8d153441c69f146a77bab4f2f18c3a9a1"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNDc5NzMz", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#pullrequestreview-501479733", "createdAt": "2020-10-02T22:30:28Z", "commit": {"oid": "50b499f8d153441c69f146a77bab4f2f18c3a9a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMjozMDoyOVrOHb9KSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMjozMDoyOVrOHb9KSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3NTY1Nw==", "bodyText": "Let's make these H3 or H4s so that it renders better.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499075657", "createdAt": "2020-10-02T22:30:29Z", "author": {"login": "bsiegel"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,712 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource)\n+  higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must\n+  be configured to\n+  [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features)\n+  to use this library. Java 8 language features that require a target API level >21 are not used, nor are any Java 8+\n+  APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## User and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Create the AzureCommunicationChatClient\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages.\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50b499f8d153441c69f146a77bab4f2f18c3a9a1"}, "originalPosition": 88}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c573b5db32478fcbf94b2bc951bea8601426d28", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/0c573b5db32478fcbf94b2bc951bea8601426d28", "committedDate": "2020-10-02T22:32:01Z", "message": "Update changelog for the release"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNDgwNTY2", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#pullrequestreview-501480566", "createdAt": "2020-10-02T22:33:36Z", "commit": {"oid": "50b499f8d153441c69f146a77bab4f2f18c3a9a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMjozMzozNlrOHb9NEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMjozMzozNlrOHb9NEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3NjM3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The client raises via Callback.onFailure.\n          \n          \n            \n            When an error occurs, the client calls the callback's `onFailure` method. You can use the provided `Throwable` to act upon the failure.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499076370", "createdAt": "2020-10-02T22:33:36Z", "author": {"login": "bsiegel"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,712 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource)\n+  higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must\n+  be configured to\n+  [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features)\n+  to use this library. Java 8 language features that require a target API level >21 are not used, nor are any Java 8+\n+  APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## User and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Create the AzureCommunicationChatClient\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages.\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+## Thread Operations\n+\n+### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection,\n+                          Response response) {\n+     // pageCollection enables enumerating list of threads.                       \n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+                       AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+## Message Operations\n+\n+### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+//  The display name of the sender, if null i.e. not specified, an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'normal' or 'high', \n+// if null i.e. not specified, 'normal' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {\n+    @Override\n+    public void onSuccess(ChatMessage result, Response response) {\n+        // `ChatMessage` is the response returned from getting a message.\n+        final String content = result.getContent();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### List messages\n+\n+Use the `listChatMessages` method to retrieve messages in a thread.\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+        \n+client.listChatMessagesPages(threadId,\n+    maxPageSize,\n+    startTime,\n+    new Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>>() {\n+        @Override\n+        public void onSuccess(AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection,\n+                            Response response) {\n+            // pageCollection enables enumerating list of messages.\n+            pageCollection.getFirstPage(new Callback<Page<ChatMessage>>() {\n+                @Override\n+                public void onSuccess(Page<ChatMessage> firstPage, Response response) {\n+                    for (ChatMessage message : firstPage.getItems()) {\n+                        //TODO: Take further action\n+                    }\n+                    retrieveNextMessagePages(firstPage.getPageId(), pageCollection);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable throwable, Response response) {\n+                    // TODO: Display error message.\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+});\n+\n+void retrieveNextMessagePages(String nextPageId,\n+                              AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatMessage>>() {\n+        @Override\n+        public void onSuccess(Page<ChatMessage> nextPage, Response response) {\n+            for (ChatMessage thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMessagePages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+\n+```\n+\n+### Update a message\n+\n+Use the `update` method to update a message in a thread.\n+\n+```java\n+// The message content to be updated.\n+final String content = \"updated message\";\n+// The message priority level, such as 'normal' or 'high', if null i.e. not specified, \n+// 'normal' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+//  The model to pass to update method.\n+UpdateChatMessageRequest message = new UpdateChatMessageRequest()\n+    .setContent(content)\n+    .setPriority(priority);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.updateChatMessage(threadId,\n+    messageId,\n+    message, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Delete a message\n+\n+Use the `deleteChatMessage` method to delete a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.deleteChatMessage(threadId, messageId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+## Thread Member Operations\n+\n+### Get thread members\n+\n+Use the `listChatThreadMembers` method to retrieve the members participating in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.listChatThreadMembersPages(threadId,\n+    new Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadMember,\n+        Page<ChatThreadMember>> firstPage,\n+        Response response) {\n+         // pageCollection enables enumerating list of chat members.\n+         pageCollection.getFirstPage(new Callback<Page<ChatThreadMember>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadMember> firstPage, Response response) {\n+                for (ChatThreadMember member : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextMembersPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+         }\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextMembersPages(String nextPageId,\n+                              AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadMember>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadMember> nextPage, Response response) {\n+            for (ChatThreadMember member : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMembersPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+### Add thread members\n+\n+Use the `add` method to add members to a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"a new member\";\n+members.add(new ChatThreadMember().setId(id).setDisplayName(displayName));\n+// The model to pass to add method.\n+AddChatThreadMembersRequest threadMembers = new AddChatThreadMembersRequest()\n+    .setMembers(members);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.addChatThreadMembers(threadId, threadMembers, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Remove a thread member\n+\n+Use the `removeChatThreadMember` method to remove a member from a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the member.\n+final String memberId = \"<member_id>\";\n+client.removeChatThreadMember(threadId, memberId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+## Events Operations\n+\n+### Send a typing notification\n+\n+Use the `sendTypingNotification` method to post a typing notification event to a thread, on behalf of a user.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendTypingNotification(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Send read receipt\n+\n+Use the `send` method to post a read receipt event to a thread, on behalf of a user.\n+\n+```java\n+// The unique ID of the member.\n+final String messageId = \"<message_id>\";\n+// The model to be passed to send method.\n+SendReadReceiptRequest readReceipt = new SendReadReceiptRequest()\n+    .setChatMessageId(messageId);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatReadReceipt(threadId, readReceipt, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Get read receipts\n+\n+Use the `listChatReadReceipts` method to retrieve read receipts for a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.listChatReadReceiptsPages(threadId,\n+    new Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ReadReceipt,\n+        Page<ReadReceipt>> result,\n+        Response response) {\n+         // pageCollection enables enumerating list of chat members.\n+         pageCollection.getFirstPage(new Callback<Page<ReadReceipt>>() {\n+            @Override\n+            public void onSuccess(Page<ReadReceipt> firstPage, Response response) {\n+                for (ReadReceipt receipt : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextReceiptsPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+         }\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextReceiptsPages(String nextPageId,\n+                              AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ReadReceipt>>() {\n+        @Override\n+        public void onSuccess(Page<ReadReceipt> nextPage, Response response) {\n+            for (ReadReceipt receipt : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextReceiptsPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+# Troubleshooting\n+\n+## General\n+\n+The client raises via Callback.onFailure.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50b499f8d153441c69f146a77bab4f2f18c3a9a1"}, "originalPosition": 691}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNDgwNzU5", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#pullrequestreview-501480759", "createdAt": "2020-10-02T22:34:18Z", "commit": {"oid": "50b499f8d153441c69f146a77bab4f2f18c3a9a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMjozNDoxOFrOHb9NxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMjozNDoxOFrOHb9NxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3NjU0OA==", "bodyText": "Just copy the URL from another library (e.g. storage) and change the URL-encoded parts of the path to match the path of this README.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499076548", "createdAt": "2020-10-02T22:34:18Z", "author": {"login": "bsiegel"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,712 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource)\n+  higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must\n+  be configured to\n+  [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features)\n+  to use this library. Java 8 language features that require a target API level >21 are not used, nor are any Java 8+\n+  APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## User and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Create the AzureCommunicationChatClient\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages.\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+## Thread Operations\n+\n+### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection,\n+                          Response response) {\n+     // pageCollection enables enumerating list of threads.                       \n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+                       AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+## Message Operations\n+\n+### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+//  The display name of the sender, if null i.e. not specified, an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'normal' or 'high', \n+// if null i.e. not specified, 'normal' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {\n+    @Override\n+    public void onSuccess(ChatMessage result, Response response) {\n+        // `ChatMessage` is the response returned from getting a message.\n+        final String content = result.getContent();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### List messages\n+\n+Use the `listChatMessages` method to retrieve messages in a thread.\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+        \n+client.listChatMessagesPages(threadId,\n+    maxPageSize,\n+    startTime,\n+    new Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>>() {\n+        @Override\n+        public void onSuccess(AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection,\n+                            Response response) {\n+            // pageCollection enables enumerating list of messages.\n+            pageCollection.getFirstPage(new Callback<Page<ChatMessage>>() {\n+                @Override\n+                public void onSuccess(Page<ChatMessage> firstPage, Response response) {\n+                    for (ChatMessage message : firstPage.getItems()) {\n+                        //TODO: Take further action\n+                    }\n+                    retrieveNextMessagePages(firstPage.getPageId(), pageCollection);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable throwable, Response response) {\n+                    // TODO: Display error message.\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+});\n+\n+void retrieveNextMessagePages(String nextPageId,\n+                              AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatMessage>>() {\n+        @Override\n+        public void onSuccess(Page<ChatMessage> nextPage, Response response) {\n+            for (ChatMessage thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMessagePages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+\n+```\n+\n+### Update a message\n+\n+Use the `update` method to update a message in a thread.\n+\n+```java\n+// The message content to be updated.\n+final String content = \"updated message\";\n+// The message priority level, such as 'normal' or 'high', if null i.e. not specified, \n+// 'normal' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+//  The model to pass to update method.\n+UpdateChatMessageRequest message = new UpdateChatMessageRequest()\n+    .setContent(content)\n+    .setPriority(priority);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.updateChatMessage(threadId,\n+    messageId,\n+    message, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Delete a message\n+\n+Use the `deleteChatMessage` method to delete a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.deleteChatMessage(threadId, messageId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+## Thread Member Operations\n+\n+### Get thread members\n+\n+Use the `listChatThreadMembers` method to retrieve the members participating in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.listChatThreadMembersPages(threadId,\n+    new Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadMember,\n+        Page<ChatThreadMember>> firstPage,\n+        Response response) {\n+         // pageCollection enables enumerating list of chat members.\n+         pageCollection.getFirstPage(new Callback<Page<ChatThreadMember>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadMember> firstPage, Response response) {\n+                for (ChatThreadMember member : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextMembersPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+         }\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextMembersPages(String nextPageId,\n+                              AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadMember>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadMember> nextPage, Response response) {\n+            for (ChatThreadMember member : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMembersPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+### Add thread members\n+\n+Use the `add` method to add members to a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"a new member\";\n+members.add(new ChatThreadMember().setId(id).setDisplayName(displayName));\n+// The model to pass to add method.\n+AddChatThreadMembersRequest threadMembers = new AddChatThreadMembersRequest()\n+    .setMembers(members);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.addChatThreadMembers(threadId, threadMembers, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Remove a thread member\n+\n+Use the `removeChatThreadMember` method to remove a member from a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the member.\n+final String memberId = \"<member_id>\";\n+client.removeChatThreadMember(threadId, memberId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+## Events Operations\n+\n+### Send a typing notification\n+\n+Use the `sendTypingNotification` method to post a typing notification event to a thread, on behalf of a user.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendTypingNotification(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Send read receipt\n+\n+Use the `send` method to post a read receipt event to a thread, on behalf of a user.\n+\n+```java\n+// The unique ID of the member.\n+final String messageId = \"<message_id>\";\n+// The model to be passed to send method.\n+SendReadReceiptRequest readReceipt = new SendReadReceiptRequest()\n+    .setChatMessageId(messageId);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatReadReceipt(threadId, readReceipt, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Get read receipts\n+\n+Use the `listChatReadReceipts` method to retrieve read receipts for a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.listChatReadReceiptsPages(threadId,\n+    new Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ReadReceipt,\n+        Page<ReadReceipt>> result,\n+        Response response) {\n+         // pageCollection enables enumerating list of chat members.\n+         pageCollection.getFirstPage(new Callback<Page<ReadReceipt>>() {\n+            @Override\n+            public void onSuccess(Page<ReadReceipt> firstPage, Response response) {\n+                for (ReadReceipt receipt : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextReceiptsPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+         }\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextReceiptsPages(String nextPageId,\n+                              AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ReadReceipt>>() {\n+        @Override\n+        public void onSuccess(Page<ReadReceipt> nextPage, Response response) {\n+            for (ReadReceipt receipt : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextReceiptsPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+# Troubleshooting\n+\n+## General\n+\n+The client raises via Callback.onFailure.\n+\n+```java\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+# Next steps\n+\n+More sample code should go here, along with links out to the appropriate example tests.\n+\n+# Contributing\n+This project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n+\n+When you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n+\n+This project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n+\n+![Impressions](TODO: Find impressions URL)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50b499f8d153441c69f146a77bab4f2f18c3a9a1"}, "originalPosition": 712}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8ee94873993ac87ede033159abde15b3038f6dc", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/b8ee94873993ac87ede033159abde15b3038f6dc", "committedDate": "2020-10-02T22:45:24Z", "message": "Update chat gradle and changelog for correct version"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNDYyMTY2", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#pullrequestreview-501462166", "createdAt": "2020-10-02T21:39:02Z", "commit": {"oid": "1c739751951371b645255371b9008db8859096a8"}, "state": "DISMISSED", "comments": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMTozOTowMlrOHb8Tiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMjo1Mjo1MlrOHb9d2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2MTY0Mw==", "bodyText": "Is this a typo or missing something? The \"higher\" part feels out of place with the previous sentence.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499061643", "createdAt": "2020-10-02T21:39:02Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,712 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource)\n+  higher to use this library.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c739751951371b645255371b9008db8859096a8"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2MTcyMw==", "bodyText": "If possible, I would prefer to keep paragraphs to one line in the .md file like other libraries. Not a hard requirement though.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499061723", "createdAt": "2020-10-02T21:39:15Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,712 @@\n+# Azure Communication Chat Service client library for Android", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c739751951371b645255371b9008db8859096a8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3MjM5Ng==", "bodyText": "Should we clarify what GA stands for?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499072396", "createdAt": "2020-10-02T22:17:17Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,712 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource)\n+  higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must\n+  be configured to\n+  [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features)\n+  to use this library. Java 8 language features that require a target API level >21 are not used, nor are any Java 8+\n+  APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c739751951371b645255371b9008db8859096a8"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3MzIzMA==", "bodyText": "There's a typo (1.0.0-bata.1) in you comment @JianpingChen.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499073230", "createdAt": "2020-10-02T22:20:47Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/CHANGELOG.md", "diffHunk": "@@ -0,0 +1,13 @@\n+# Release History\n+\n+## 1.0.0-beta.2 (Unreleased)\n+\n+\n+## 1.0.0-beta.1 (2020-09-22)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2Njk5MA=="}, "originalCommit": {"oid": "50b499f8d153441c69f146a77bab4f2f18c3a9a1"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3NjI2OA==", "bodyText": "This might confuse users if they picked a different programming language for getting their access token, we should make it language agnostic.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // The CommunicationUser.identifier you created before, required.\n          \n          \n            \n            // The communication user id you created before, required.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499076268", "createdAt": "2020-10-02T22:33:09Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,712 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource)\n+  higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must\n+  be configured to\n+  [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features)\n+  to use this library. Java 8 language features that require a target API level >21 are not used, nor are any Java 8+\n+  APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## User and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Create the AzureCommunicationChatClient\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages.\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+## Thread Operations\n+\n+### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50b499f8d153441c69f146a77bab4f2f18c3a9a1"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3NzM5NA==", "bodyText": "nit;\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // The thread start time to consider in the query, optional\n          \n          \n            \n            // The thread start time to consider in the query, optional.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499077394", "createdAt": "2020-10-02T22:38:12Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,712 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource)\n+  higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must\n+  be configured to\n+  [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features)\n+  to use this library. Java 8 language features that require a target API level >21 are not used, nor are any Java 8+\n+  APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## User and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Create the AzureCommunicationChatClient\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages.\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+## Thread Operations\n+\n+### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50b499f8d153441c69f146a77bab4f2f18c3a9a1"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3NzQ2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // The model to pass to create method.\n          \n          \n            \n            // The model to pass to the create method.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499077461", "createdAt": "2020-10-02T22:38:35Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,712 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource)\n+  higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must\n+  be configured to\n+  [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features)\n+  to use this library. Java 8 language features that require a target API level >21 are not used, nor are any Java 8+\n+  APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## User and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Create the AzureCommunicationChatClient\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages.\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+## Thread Operations\n+\n+### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to create method.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50b499f8d153441c69f146a77bab4f2f18c3a9a1"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3Nzk3NA==", "bodyText": "nit;\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Use the `getChatThread` method to retrieve a thread.\n          \n          \n            \n            ```java\n          \n          \n            \n            Use the `getChatThread` method to retrieve a thread.\n          \n          \n            \n            \n          \n          \n            \n            ```java", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499077974", "createdAt": "2020-10-02T22:40:45Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,712 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource)\n+  higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must\n+  be configured to\n+  [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features)\n+  to use this library. Java 8 language features that require a target API level >21 are not used, nor are any Java 8+\n+  APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## User and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Create the AzureCommunicationChatClient\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages.\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+## Thread Operations\n+\n+### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+```java", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50b499f8d153441c69f146a77bab4f2f18c3a9a1"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3ODEzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 // pageCollection enables enumerating list of threads.                       \n          \n          \n            \n                 // pageCollection enables enumerating a list of threads.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499078139", "createdAt": "2020-10-02T22:41:26Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,712 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource)\n+  higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must\n+  be configured to\n+  [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features)\n+  to use this library. Java 8 language features that require a target API level >21 are not used, nor are any Java 8+\n+  APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## User and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Create the AzureCommunicationChatClient\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages.\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+## Thread Operations\n+\n+### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection,\n+                          Response response) {\n+     // pageCollection enables enumerating list of threads.                       ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50b499f8d153441c69f146a77bab4f2f18c3a9a1"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3ODM4MQ==", "bodyText": "The indentation looks strange in the web viewer, is this how it looks in an IDE?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499078381", "createdAt": "2020-10-02T22:42:29Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,712 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource)\n+  higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must\n+  be configured to\n+  [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features)\n+  to use this library. Java 8 language features that require a target API level >21 are not used, nor are any Java 8+\n+  APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## User and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Create the AzureCommunicationChatClient\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages.\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+## Thread Operations\n+\n+### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection,\n+                          Response response) {\n+     // pageCollection enables enumerating list of threads.                       \n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+                       AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50b499f8d153441c69f146a77bab4f2f18c3a9a1"}, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3ODU4Mw==", "bodyText": "nit;\n\n  \n    \n      \n        Suggested change", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499078583", "createdAt": "2020-10-02T22:43:21Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,712 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource)\n+  higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must\n+  be configured to\n+  [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features)\n+  to use this library. Java 8 language features that require a target API level >21 are not used, nor are any Java 8+\n+  APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## User and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Create the AzureCommunicationChatClient\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages.\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+## Thread Operations\n+\n+### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection,\n+                          Response response) {\n+     // pageCollection enables enumerating list of threads.                       \n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+                       AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50b499f8d153441c69f146a77bab4f2f18c3a9a1"}, "originalPosition": 271}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3ODcwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //  The display name of the sender, if null i.e. not specified, an empty name will be set.\n          \n          \n            \n            // The display name of the sender, if null (i.e. not specified), an empty name will be set.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499078702", "createdAt": "2020-10-02T22:43:58Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,712 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource)\n+  higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must\n+  be configured to\n+  [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features)\n+  to use this library. Java 8 language features that require a target API level >21 are not used, nor are any Java 8+\n+  APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## User and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Create the AzureCommunicationChatClient\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages.\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+## Thread Operations\n+\n+### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection,\n+                          Response response) {\n+     // pageCollection enables enumerating list of threads.                       \n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+                       AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+## Message Operations\n+\n+### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+//  The display name of the sender, if null i.e. not specified, an empty name will be set.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50b499f8d153441c69f146a77bab4f2f18c3a9a1"}, "originalPosition": 296}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3OTExNw==", "bodyText": "Are priority levels lowercase? I saw they were uppercase in the iOS README.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499079117", "createdAt": "2020-10-02T22:45:43Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,712 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource)\n+  higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must\n+  be configured to\n+  [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features)\n+  to use this library. Java 8 language features that require a target API level >21 are not used, nor are any Java 8+\n+  APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## User and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Create the AzureCommunicationChatClient\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages.\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+## Thread Operations\n+\n+### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection,\n+                          Response response) {\n+     // pageCollection enables enumerating list of threads.                       \n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+                       AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+## Message Operations\n+\n+### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+//  The display name of the sender, if null i.e. not specified, an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'normal' or 'high', \n+// if null i.e. not specified, 'normal' will be set.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50b499f8d153441c69f146a77bab4f2f18c3a9a1"}, "originalPosition": 299}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3OTY2OA==", "bodyText": "nit;\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ```java\n          \n          \n            \n            \n          \n          \n            \n            ```java", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499079668", "createdAt": "2020-10-02T22:48:17Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,712 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource)\n+  higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must\n+  be configured to\n+  [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features)\n+  to use this library. Java 8 language features that require a target API level >21 are not used, nor are any Java 8+\n+  APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## User and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Create the AzureCommunicationChatClient\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages.\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+## Thread Operations\n+\n+### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection,\n+                          Response response) {\n+     // pageCollection enables enumerating list of threads.                       \n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+                       AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+## Message Operations\n+\n+### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+//  The display name of the sender, if null i.e. not specified, an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'normal' or 'high', \n+// if null i.e. not specified, 'normal' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {\n+    @Override\n+    public void onSuccess(ChatMessage result, Response response) {\n+        // `ChatMessage` is the response returned from getting a message.\n+        final String content = result.getContent();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### List messages\n+\n+Use the `listChatMessages` method to retrieve messages in a thread.\n+```java", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50b499f8d153441c69f146a77bab4f2f18c3a9a1"}, "originalPosition": 354}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3OTc5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // The thread start time to consider in the query, optional\n          \n          \n            \n            // The thread start time to consider in the query, optional.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499079798", "createdAt": "2020-10-02T22:48:54Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,712 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource)\n+  higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must\n+  be configured to\n+  [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features)\n+  to use this library. Java 8 language features that require a target API level >21 are not used, nor are any Java 8+\n+  APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## User and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Create the AzureCommunicationChatClient\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages.\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+## Thread Operations\n+\n+### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection,\n+                          Response response) {\n+     // pageCollection enables enumerating list of threads.                       \n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+                       AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+## Message Operations\n+\n+### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+//  The display name of the sender, if null i.e. not specified, an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'normal' or 'high', \n+// if null i.e. not specified, 'normal' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {\n+    @Override\n+    public void onSuccess(ChatMessage result, Response response) {\n+        // `ChatMessage` is the response returned from getting a message.\n+        final String content = result.getContent();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### List messages\n+\n+Use the `listChatMessages` method to retrieve messages in a thread.\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50b499f8d153441c69f146a77bab4f2f18c3a9a1"}, "originalPosition": 357}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4MDAwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // if null i.e. not specified, 'normal' will be set.\n          \n          \n            \n            // if null (i.e. not specified), 'normal' will be set.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499080008", "createdAt": "2020-10-02T22:49:54Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,712 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource)\n+  higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must\n+  be configured to\n+  [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features)\n+  to use this library. Java 8 language features that require a target API level >21 are not used, nor are any Java 8+\n+  APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## User and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Create the AzureCommunicationChatClient\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages.\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+## Thread Operations\n+\n+### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection,\n+                          Response response) {\n+     // pageCollection enables enumerating list of threads.                       \n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+                       AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+## Message Operations\n+\n+### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+//  The display name of the sender, if null i.e. not specified, an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'normal' or 'high', \n+// if null i.e. not specified, 'normal' will be set.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50b499f8d153441c69f146a77bab4f2f18c3a9a1"}, "originalPosition": 299}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4MDE2Mw==", "bodyText": "Let's make sure the indentation is correct.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499080163", "createdAt": "2020-10-02T22:50:36Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,712 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource)\n+  higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must\n+  be configured to\n+  [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features)\n+  to use this library. Java 8 language features that require a target API level >21 are not used, nor are any Java 8+\n+  APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## User and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Create the AzureCommunicationChatClient\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages.\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+## Thread Operations\n+\n+### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection,\n+                          Response response) {\n+     // pageCollection enables enumerating list of threads.                       \n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+                       AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+## Message Operations\n+\n+### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+//  The display name of the sender, if null i.e. not specified, an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'normal' or 'high', \n+// if null i.e. not specified, 'normal' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {\n+    @Override\n+    public void onSuccess(ChatMessage result, Response response) {\n+        // `ChatMessage` is the response returned from getting a message.\n+        final String content = result.getContent();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### List messages\n+\n+Use the `listChatMessages` method to retrieve messages in a thread.\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+        \n+client.listChatMessagesPages(threadId,\n+    maxPageSize,\n+    startTime,\n+    new Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>>() {\n+        @Override\n+        public void onSuccess(AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection,\n+                            Response response) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50b499f8d153441c69f146a77bab4f2f18c3a9a1"}, "originalPosition": 368}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4MDI2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // The message priority level, such as 'normal' or 'high', if null i.e. not specified, \n          \n          \n            \n            // The message priority level, such as 'normal' or 'high', if null (i.e. not specified),", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499080265", "createdAt": "2020-10-02T22:51:03Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,712 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource)\n+  higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must\n+  be configured to\n+  [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features)\n+  to use this library. Java 8 language features that require a target API level >21 are not used, nor are any Java 8+\n+  APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## User and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Create the AzureCommunicationChatClient\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages.\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+## Thread Operations\n+\n+### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection,\n+                          Response response) {\n+     // pageCollection enables enumerating list of threads.                       \n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+                       AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+## Message Operations\n+\n+### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+//  The display name of the sender, if null i.e. not specified, an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'normal' or 'high', \n+// if null i.e. not specified, 'normal' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {\n+    @Override\n+    public void onSuccess(ChatMessage result, Response response) {\n+        // `ChatMessage` is the response returned from getting a message.\n+        final String content = result.getContent();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### List messages\n+\n+Use the `listChatMessages` method to retrieve messages in a thread.\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+        \n+client.listChatMessagesPages(threadId,\n+    maxPageSize,\n+    startTime,\n+    new Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>>() {\n+        @Override\n+        public void onSuccess(AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection,\n+                            Response response) {\n+            // pageCollection enables enumerating list of messages.\n+            pageCollection.getFirstPage(new Callback<Page<ChatMessage>>() {\n+                @Override\n+                public void onSuccess(Page<ChatMessage> firstPage, Response response) {\n+                    for (ChatMessage message : firstPage.getItems()) {\n+                        //TODO: Take further action\n+                    }\n+                    retrieveNextMessagePages(firstPage.getPageId(), pageCollection);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable throwable, Response response) {\n+                    // TODO: Display error message.\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+});\n+\n+void retrieveNextMessagePages(String nextPageId,\n+                              AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatMessage>>() {\n+        @Override\n+        public void onSuccess(Page<ChatMessage> nextPage, Response response) {\n+            for (ChatMessage thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMessagePages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+\n+```\n+\n+### Update a message\n+\n+Use the `update` method to update a message in a thread.\n+\n+```java\n+// The message content to be updated.\n+final String content = \"updated message\";\n+// The message priority level, such as 'normal' or 'high', if null i.e. not specified, ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50b499f8d153441c69f146a77bab4f2f18c3a9a1"}, "originalPosition": 421}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4MDQxNw==", "bodyText": "Indentation.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499080417", "createdAt": "2020-10-02T22:51:43Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,712 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource)\n+  higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must\n+  be configured to\n+  [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features)\n+  to use this library. Java 8 language features that require a target API level >21 are not used, nor are any Java 8+\n+  APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## User and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Create the AzureCommunicationChatClient\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages.\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+## Thread Operations\n+\n+### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection,\n+                          Response response) {\n+     // pageCollection enables enumerating list of threads.                       \n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+                       AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+## Message Operations\n+\n+### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+//  The display name of the sender, if null i.e. not specified, an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'normal' or 'high', \n+// if null i.e. not specified, 'normal' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {\n+    @Override\n+    public void onSuccess(ChatMessage result, Response response) {\n+        // `ChatMessage` is the response returned from getting a message.\n+        final String content = result.getContent();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### List messages\n+\n+Use the `listChatMessages` method to retrieve messages in a thread.\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+        \n+client.listChatMessagesPages(threadId,\n+    maxPageSize,\n+    startTime,\n+    new Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>>() {\n+        @Override\n+        public void onSuccess(AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection,\n+                            Response response) {\n+            // pageCollection enables enumerating list of messages.\n+            pageCollection.getFirstPage(new Callback<Page<ChatMessage>>() {\n+                @Override\n+                public void onSuccess(Page<ChatMessage> firstPage, Response response) {\n+                    for (ChatMessage message : firstPage.getItems()) {\n+                        //TODO: Take further action\n+                    }\n+                    retrieveNextMessagePages(firstPage.getPageId(), pageCollection);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable throwable, Response response) {\n+                    // TODO: Display error message.\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+});\n+\n+void retrieveNextMessagePages(String nextPageId,\n+                              AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatMessage>>() {\n+        @Override\n+        public void onSuccess(Page<ChatMessage> nextPage, Response response) {\n+            for (ChatMessage thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMessagePages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+\n+```\n+\n+### Update a message\n+\n+Use the `update` method to update a message in a thread.\n+\n+```java\n+// The message content to be updated.\n+final String content = \"updated message\";\n+// The message priority level, such as 'normal' or 'high', if null i.e. not specified, \n+// 'normal' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+//  The model to pass to update method.\n+UpdateChatMessageRequest message = new UpdateChatMessageRequest()\n+    .setContent(content)\n+    .setPriority(priority);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.updateChatMessage(threadId,\n+    messageId,\n+    message, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Delete a message\n+\n+Use the `deleteChatMessage` method to delete a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.deleteChatMessage(threadId, messageId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+## Thread Member Operations\n+\n+### Get thread members\n+\n+Use the `listChatThreadMembers` method to retrieve the members participating in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.listChatThreadMembersPages(threadId,\n+    new Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadMember,\n+        Page<ChatThreadMember>> firstPage,\n+        Response response) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50b499f8d153441c69f146a77bab4f2f18c3a9a1"}, "originalPosition": 484}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4MDUyMA==", "bodyText": "Indentation.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499080520", "createdAt": "2020-10-02T22:52:20Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,712 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource)\n+  higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must\n+  be configured to\n+  [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features)\n+  to use this library. Java 8 language features that require a target API level >21 are not used, nor are any Java 8+\n+  APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## User and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Create the AzureCommunicationChatClient\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages.\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+## Thread Operations\n+\n+### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection,\n+                          Response response) {\n+     // pageCollection enables enumerating list of threads.                       \n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+                       AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+## Message Operations\n+\n+### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+//  The display name of the sender, if null i.e. not specified, an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'normal' or 'high', \n+// if null i.e. not specified, 'normal' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {\n+    @Override\n+    public void onSuccess(ChatMessage result, Response response) {\n+        // `ChatMessage` is the response returned from getting a message.\n+        final String content = result.getContent();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### List messages\n+\n+Use the `listChatMessages` method to retrieve messages in a thread.\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+        \n+client.listChatMessagesPages(threadId,\n+    maxPageSize,\n+    startTime,\n+    new Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>>() {\n+        @Override\n+        public void onSuccess(AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection,\n+                            Response response) {\n+            // pageCollection enables enumerating list of messages.\n+            pageCollection.getFirstPage(new Callback<Page<ChatMessage>>() {\n+                @Override\n+                public void onSuccess(Page<ChatMessage> firstPage, Response response) {\n+                    for (ChatMessage message : firstPage.getItems()) {\n+                        //TODO: Take further action\n+                    }\n+                    retrieveNextMessagePages(firstPage.getPageId(), pageCollection);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable throwable, Response response) {\n+                    // TODO: Display error message.\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+});\n+\n+void retrieveNextMessagePages(String nextPageId,\n+                              AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatMessage>>() {\n+        @Override\n+        public void onSuccess(Page<ChatMessage> nextPage, Response response) {\n+            for (ChatMessage thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMessagePages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+\n+```\n+\n+### Update a message\n+\n+Use the `update` method to update a message in a thread.\n+\n+```java\n+// The message content to be updated.\n+final String content = \"updated message\";\n+// The message priority level, such as 'normal' or 'high', if null i.e. not specified, \n+// 'normal' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+//  The model to pass to update method.\n+UpdateChatMessageRequest message = new UpdateChatMessageRequest()\n+    .setContent(content)\n+    .setPriority(priority);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.updateChatMessage(threadId,\n+    messageId,\n+    message, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Delete a message\n+\n+Use the `deleteChatMessage` method to delete a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.deleteChatMessage(threadId, messageId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+## Thread Member Operations\n+\n+### Get thread members\n+\n+Use the `listChatThreadMembers` method to retrieve the members participating in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.listChatThreadMembersPages(threadId,\n+    new Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadMember,\n+        Page<ChatThreadMember>> firstPage,\n+        Response response) {\n+         // pageCollection enables enumerating list of chat members.\n+         pageCollection.getFirstPage(new Callback<Page<ChatThreadMember>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadMember> firstPage, Response response) {\n+                for (ChatThreadMember member : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextMembersPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+         }\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextMembersPages(String nextPageId,\n+                              AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadMember>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadMember> nextPage, Response response) {\n+            for (ChatThreadMember member : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMembersPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+### Add thread members\n+\n+Use the `add` method to add members to a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"a new member\";\n+members.add(new ChatThreadMember().setId(id).setDisplayName(displayName));\n+// The model to pass to add method.\n+AddChatThreadMembersRequest threadMembers = new AddChatThreadMembersRequest()\n+    .setMembers(members);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.addChatThreadMembers(threadId, threadMembers, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Remove a thread member\n+\n+Use the `removeChatThreadMember` method to remove a member from a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the member.\n+final String memberId = \"<member_id>\";\n+client.removeChatThreadMember(threadId, memberId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+## Events Operations\n+\n+### Send a typing notification\n+\n+Use the `sendTypingNotification` method to post a typing notification event to a thread, on behalf of a user.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendTypingNotification(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Send read receipt\n+\n+Use the `send` method to post a read receipt event to a thread, on behalf of a user.\n+\n+```java\n+// The unique ID of the member.\n+final String messageId = \"<message_id>\";\n+// The model to be passed to send method.\n+SendReadReceiptRequest readReceipt = new SendReadReceiptRequest()\n+    .setChatMessageId(messageId);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatReadReceipt(threadId, readReceipt, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Get read receipts\n+\n+Use the `listChatReadReceipts` method to retrieve read receipts for a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.listChatReadReceiptsPages(threadId,\n+    new Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ReadReceipt,\n+        Page<ReadReceipt>> result,\n+        Response response) {\n+         // pageCollection enables enumerating list of chat members.\n+         pageCollection.getFirstPage(new Callback<Page<ReadReceipt>>() {\n+            @Override\n+            public void onSuccess(Page<ReadReceipt> firstPage, Response response) {\n+                for (ReadReceipt receipt : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextReceiptsPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+         }\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextReceiptsPages(String nextPageId,\n+                              AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>> pageCollection) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50b499f8d153441c69f146a77bab4f2f18c3a9a1"}, "originalPosition": 667}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4MDY2NA==", "bodyText": "nit;\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n          \n          \n            \n            This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499080664", "createdAt": "2020-10-02T22:52:52Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,712 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource)\n+  higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must\n+  be configured to\n+  [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features)\n+  to use this library. Java 8 language features that require a target API level >21 are not used, nor are any Java 8+\n+  APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## User and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Create the AzureCommunicationChatClient\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages.\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+## Thread Operations\n+\n+### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection,\n+                          Response response) {\n+     // pageCollection enables enumerating list of threads.                       \n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+                       AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+## Message Operations\n+\n+### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+//  The display name of the sender, if null i.e. not specified, an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'normal' or 'high', \n+// if null i.e. not specified, 'normal' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {\n+    @Override\n+    public void onSuccess(ChatMessage result, Response response) {\n+        // `ChatMessage` is the response returned from getting a message.\n+        final String content = result.getContent();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### List messages\n+\n+Use the `listChatMessages` method to retrieve messages in a thread.\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+        \n+client.listChatMessagesPages(threadId,\n+    maxPageSize,\n+    startTime,\n+    new Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>>() {\n+        @Override\n+        public void onSuccess(AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection,\n+                            Response response) {\n+            // pageCollection enables enumerating list of messages.\n+            pageCollection.getFirstPage(new Callback<Page<ChatMessage>>() {\n+                @Override\n+                public void onSuccess(Page<ChatMessage> firstPage, Response response) {\n+                    for (ChatMessage message : firstPage.getItems()) {\n+                        //TODO: Take further action\n+                    }\n+                    retrieveNextMessagePages(firstPage.getPageId(), pageCollection);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable throwable, Response response) {\n+                    // TODO: Display error message.\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+});\n+\n+void retrieveNextMessagePages(String nextPageId,\n+                              AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatMessage>>() {\n+        @Override\n+        public void onSuccess(Page<ChatMessage> nextPage, Response response) {\n+            for (ChatMessage thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMessagePages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+\n+```\n+\n+### Update a message\n+\n+Use the `update` method to update a message in a thread.\n+\n+```java\n+// The message content to be updated.\n+final String content = \"updated message\";\n+// The message priority level, such as 'normal' or 'high', if null i.e. not specified, \n+// 'normal' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+//  The model to pass to update method.\n+UpdateChatMessageRequest message = new UpdateChatMessageRequest()\n+    .setContent(content)\n+    .setPriority(priority);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.updateChatMessage(threadId,\n+    messageId,\n+    message, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Delete a message\n+\n+Use the `deleteChatMessage` method to delete a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.deleteChatMessage(threadId, messageId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+## Thread Member Operations\n+\n+### Get thread members\n+\n+Use the `listChatThreadMembers` method to retrieve the members participating in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.listChatThreadMembersPages(threadId,\n+    new Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadMember,\n+        Page<ChatThreadMember>> firstPage,\n+        Response response) {\n+         // pageCollection enables enumerating list of chat members.\n+         pageCollection.getFirstPage(new Callback<Page<ChatThreadMember>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadMember> firstPage, Response response) {\n+                for (ChatThreadMember member : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextMembersPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+         }\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextMembersPages(String nextPageId,\n+                              AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadMember>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadMember> nextPage, Response response) {\n+            for (ChatThreadMember member : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMembersPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+### Add thread members\n+\n+Use the `add` method to add members to a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"a new member\";\n+members.add(new ChatThreadMember().setId(id).setDisplayName(displayName));\n+// The model to pass to add method.\n+AddChatThreadMembersRequest threadMembers = new AddChatThreadMembersRequest()\n+    .setMembers(members);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.addChatThreadMembers(threadId, threadMembers, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Remove a thread member\n+\n+Use the `removeChatThreadMember` method to remove a member from a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the member.\n+final String memberId = \"<member_id>\";\n+client.removeChatThreadMember(threadId, memberId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+## Events Operations\n+\n+### Send a typing notification\n+\n+Use the `sendTypingNotification` method to post a typing notification event to a thread, on behalf of a user.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendTypingNotification(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Send read receipt\n+\n+Use the `send` method to post a read receipt event to a thread, on behalf of a user.\n+\n+```java\n+// The unique ID of the member.\n+final String messageId = \"<message_id>\";\n+// The model to be passed to send method.\n+SendReadReceiptRequest readReceipt = new SendReadReceiptRequest()\n+    .setChatMessageId(messageId);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatReadReceipt(threadId, readReceipt, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Get read receipts\n+\n+Use the `listChatReadReceipts` method to retrieve read receipts for a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.listChatReadReceiptsPages(threadId,\n+    new Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ReadReceipt,\n+        Page<ReadReceipt>> result,\n+        Response response) {\n+         // pageCollection enables enumerating list of chat members.\n+         pageCollection.getFirstPage(new Callback<Page<ReadReceipt>>() {\n+            @Override\n+            public void onSuccess(Page<ReadReceipt> firstPage, Response response) {\n+                for (ReadReceipt receipt : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextReceiptsPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+         }\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextReceiptsPages(String nextPageId,\n+                              AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ReadReceipt>>() {\n+        @Override\n+        public void onSuccess(Page<ReadReceipt> nextPage, Response response) {\n+            for (ReadReceipt receipt : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextReceiptsPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+# Troubleshooting\n+\n+## General\n+\n+The client raises via Callback.onFailure.\n+\n+```java\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+# Next steps\n+\n+More sample code should go here, along with links out to the appropriate example tests.\n+\n+# Contributing\n+This project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50b499f8d153441c69f146a77bab4f2f18c3a9a1"}, "originalPosition": 706}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77224ae47ed6674258a55526e4dd772b1e6336dd", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/77224ae47ed6674258a55526e4dd772b1e6336dd", "committedDate": "2020-10-02T23:13:26Z", "message": "Apply README review suggestions\n\nCo-authored-by: vcolin7 <vicolina@microsoft.com>\nCo-authored-by: Brandon Siegel <96068+bsiegel@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c605eb27023610978815d1215d85e002bc0a9065", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/c605eb27023610978815d1215d85e002bc0a9065", "committedDate": "2020-10-02T23:24:30Z", "message": "Update changelog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e729456186922fcab4eba2f1158cbab3694d174", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/5e729456186922fcab4eba2f1158cbab3694d174", "committedDate": "2020-10-02T23:24:54Z", "message": "Merge branch 'jiach/chatSdk' of https://github.com/JianpingChen/azure-sdk-for-android into jiach/chatSdk"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3156092136752b777ad4af7cd7af8afa3924386e", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/3156092136752b777ad4af7cd7af8afa3924386e", "committedDate": "2020-10-02T23:53:55Z", "message": "Readme: cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "633db281a391fbef9b463bf0eafea7b634c9e804", "author": {"user": {"login": "JianpingChen", "name": "Jianping Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/633db281a391fbef9b463bf0eafea7b634c9e804", "committedDate": "2020-10-02T23:56:10Z", "message": "Merge pull request #3 from anuchandy/readme-update-3\n\nReadme: cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8364424432166930561b2856ae35d14d39520f3", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/b8364424432166930561b2856ae35d14d39520f3", "committedDate": "2020-10-03T00:09:40Z", "message": "removing locale from readme link"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bae2e3158868d9765c2e0294a466f5eeef25c564", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/bae2e3158868d9765c2e0294a466f5eeef25c564", "committedDate": "2020-10-03T00:38:00Z", "message": "last touch for the changelog"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNTA1NDM3", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#pullrequestreview-501505437", "createdAt": "2020-10-03T00:41:07Z", "commit": {"oid": "bae2e3158868d9765c2e0294a466f5eeef25c564"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNTAxNjY5", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#pullrequestreview-501501669", "createdAt": "2020-10-03T00:12:59Z", "commit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "state": "DISMISSED", "comments": {"totalCount": 48, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoxMjo1OVrOHb-Viw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDo0Njo0NVrOHb-nHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDkyMw==", "bodyText": "Is it \"Service\" or \"Services\"?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499094923", "createdAt": "2020-10-03T00:12:59Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/build.gradle", "diffHunk": "@@ -0,0 +1,27 @@\n+ext.publishName = \"Microsoft Azure Android Client Library for Communication Chat Services\"\n+description = \"This package contains the Android client library common code for Microsoft Azure Communication Chat Service.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDk4NA==", "bodyText": "We should avoid using hardcoded versions in build.gradle files.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499094984", "createdAt": "2020-10-03T00:13:32Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/build.gradle", "diffHunk": "@@ -0,0 +1,27 @@\n+ext.publishName = \"Microsoft Azure Android Client Library for Communication Chat Services\"\n+description = \"This package contains the Android client library common code for Microsoft Azure Communication Chat Service.\"\n+version = \"1.0.0-beta.2\"\n+ext.versionCode = 1\n+\n+android {\n+    defaultConfig {\n+        versionCode project.versionCode\n+        versionName project.version\n+    }\n+}\n+\n+dependencies {\n+    implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\n+    implementation 'androidx.appcompat:appcompat:1.2.0'\n+    implementation \"com.fasterxml.jackson.core:jackson-databind:$jacksonVersion\"\n+    implementation \"com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jacksonVersion\"\n+    implementation \"com.jakewharton.threetenabp:threetenabp:$threeTenAbpVersion\"\n+    implementation \"com.squareup.okhttp3:okhttp:$okHttpVersion\"\n+    implementation \"com.squareup.retrofit2:retrofit:$retrofitVersion\"\n+    implementation project(\":sdk:core:azure-core\")\n+    testImplementation \"junit:junit:$jUnitVersion\"\n+    testImplementation \"com.squareup.okhttp3:mockwebserver:$okHttpVersion\"\n+    androidTestImplementation \"androidx.test.ext:junit:1.1.2\"\n+    androidTestImplementation \"androidx.test.espresso:espresso-core:3.3.0\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NTA4Mg==", "bodyText": "Is it Chat Service or Chat Services?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499095082", "createdAt": "2020-10-03T00:14:15Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NTMyMg==", "bodyText": "We use the word plugin both with the first letter in uppercase and lowercase. We should stick to one for the sake of consistency.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499095322", "createdAt": "2020-10-03T00:15:45Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NTM3OA==", "bodyText": "I think the official name uses lowercase for \"plugin\".", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499095378", "createdAt": "2020-10-03T00:16:10Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NTMyMg=="}, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NTQzMA==", "bodyText": "If the current version of the library is this one then why does the CHANGELOG show 1.0.0-beta.2?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499095430", "createdAt": "2020-10-03T00:16:38Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NTUyMg==", "bodyText": "Should this say \"build files\" instead of \"build scripts\"?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499095522", "createdAt": "2020-10-03T00:17:18Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NTY4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n          \n          \n            \n            Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create an `AzureCommunicationChatClient`.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499095685", "createdAt": "2020-10-03T00:18:34Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NTgxOA==", "bodyText": "Equals sign should be in the same line as variable name declaration. Also fixed indentation.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            AzureCommunicationChatServiceAsyncClient client\n          \n          \n            \n                = new AzureCommunicationChatServiceAsyncClient.Builder()\n          \n          \n            \n                .endpoint(endpoint)\n          \n          \n            \n                .credentialInterceptor(chain -> chain.proceed(chain.request()\n          \n          \n            \n                    .newBuilder()\n          \n          \n            \n                    .header(HttpHeader.AUTHORIZATION, userAccessToken)\n          \n          \n            \n                    .build());\n          \n          \n            \n            AzureCommunicationChatServiceAsyncClient client =\n          \n          \n            \n                new AzureCommunicationChatServiceAsyncClient.Builder()\n          \n          \n            \n                    .endpoint(endpoint)\n          \n          \n            \n                    .credentialInterceptor(chain -> chain.proceed(chain.request()\n          \n          \n            \n                        .newBuilder()\n          \n          \n            \n                        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n          \n          \n            \n                        .build());", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499095818", "createdAt": "2020-10-03T00:19:28Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NjA4Mw==", "bodyText": "Maybe we should also say \"Send a read receipt\". What do you think?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499096083", "createdAt": "2020-10-03T00:21:24Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NjEzMg==", "bodyText": "nit; For consistency.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // The communication user id you created before, required.\n          \n          \n            \n            // The communication user ID you created before, required.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499096132", "createdAt": "2020-10-03T00:21:48Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NjMwOQ==", "bodyText": "Is it common to see these TODO items in code samples to imply that the user can/should do something here? The first time I read them I thought there were some pending things to add here by us.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499096309", "createdAt": "2020-10-03T00:23:07Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NjQxOA==", "bodyText": "nit;\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    //TODO: Take further action\n          \n          \n            \n                    // TODO: Take further action.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499096418", "createdAt": "2020-10-03T00:23:46Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NjQ2Mg==", "bodyText": "nit;\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (IndividualStatusResponse  status : statusList) {\n          \n          \n            \n                    for (IndividualStatusResponse status : statusList) {", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499096462", "createdAt": "2020-10-03T00:24:10Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NjY4Nw==", "bodyText": "nit;\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                //TODO: Take further action\n          \n          \n            \n                                // TODO: Take further action.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499096687", "createdAt": "2020-10-03T00:25:50Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5Njc2MQ==", "bodyText": "nit;\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            //TODO: Take further action\n          \n          \n            \n                            // TODO: Take further action.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499096761", "createdAt": "2020-10-03T00:26:36Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NjgxMQ==", "bodyText": "nit;\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    //TODO: Take further action\n          \n          \n            \n                    // TODO: Take further action.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499096811", "createdAt": "2020-10-03T00:27:04Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 261}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NjgyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Use `deleteChatThread` method to delete a thread.\n          \n          \n            \n            Use the `deleteChatThread` method to delete a thread.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499096826", "createdAt": "2020-10-03T00:27:16Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5Njg0Nw==", "bodyText": "nit;\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    //TODO: Take further action\n          \n          \n            \n                    // TODO: Take further action.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499096847", "createdAt": "2020-10-03T00:27:28Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 281}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NjkxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // The message priority level, such as 'NORMAL' or 'HIIGH', \n          \n          \n            \n            // The message priority level, such as 'NORMAL' or 'HIGH',", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499096911", "createdAt": "2020-10-03T00:27:53Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Message Operations\n+\n+#### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+// The display name of the sender, if null (i.e. not specified), an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'NORMAL' or 'HIIGH', ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 301}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5Njk2Nw==", "bodyText": "nit;\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    //TODO: Take further action\n          \n          \n            \n                    // TODO: Take further action.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499096967", "createdAt": "2020-10-03T00:28:12Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Message Operations\n+\n+#### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+// The display name of the sender, if null (i.e. not specified), an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'NORMAL' or 'HIIGH', \n+// if null (i.e. not specified), 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 317}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NzA0OA==", "bodyText": "We can have all 3 arguments in the same line.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499097048", "createdAt": "2020-10-03T00:28:46Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Message Operations\n+\n+#### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+// The display name of the sender, if null (i.e. not specified), an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'NORMAL' or 'HIIGH', \n+// if null (i.e. not specified), 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 339}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NzMxOQ==", "bodyText": "nit;\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    //TODO: Take further action\n          \n          \n            \n                                    // TODO: Take further action.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499097319", "createdAt": "2020-10-03T00:30:51Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Message Operations\n+\n+#### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+// The display name of the sender, if null (i.e. not specified), an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'NORMAL' or 'HIIGH', \n+// if null (i.e. not specified), 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {\n+    @Override\n+    public void onSuccess(ChatMessage result, Response response) {\n+        // `ChatMessage` is the response returned from getting a message.\n+        final String content = result.getContent();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List messages\n+\n+Use the `listChatMessages` method to retrieve messages in a thread.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+        \n+client.listChatMessagesPages(threadId,\n+    maxPageSize,\n+    startTime,\n+    new Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>>() {\n+        @Override\n+        public void onSuccess(AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection,\n+            Response response) {\n+            // pageCollection enables enumerating list of messages.\n+            pageCollection.getFirstPage(new Callback<Page<ChatMessage>>() {\n+                @Override\n+                public void onSuccess(Page<ChatMessage> firstPage, Response response) {\n+                    for (ChatMessage message : firstPage.getItems()) {\n+                        //TODO: Take further action", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 378}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NzM0Mg==", "bodyText": "nit;\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            //TODO: Take further action\n          \n          \n            \n                            // TODO: Take further action.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499097342", "createdAt": "2020-10-03T00:31:04Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Message Operations\n+\n+#### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+// The display name of the sender, if null (i.e. not specified), an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'NORMAL' or 'HIIGH', \n+// if null (i.e. not specified), 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {\n+    @Override\n+    public void onSuccess(ChatMessage result, Response response) {\n+        // `ChatMessage` is the response returned from getting a message.\n+        final String content = result.getContent();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List messages\n+\n+Use the `listChatMessages` method to retrieve messages in a thread.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+        \n+client.listChatMessagesPages(threadId,\n+    maxPageSize,\n+    startTime,\n+    new Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>>() {\n+        @Override\n+        public void onSuccess(AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection,\n+            Response response) {\n+            // pageCollection enables enumerating list of messages.\n+            pageCollection.getFirstPage(new Callback<Page<ChatMessage>>() {\n+                @Override\n+                public void onSuccess(Page<ChatMessage> firstPage, Response response) {\n+                    for (ChatMessage message : firstPage.getItems()) {\n+                        //TODO: Take further action\n+                    }\n+                    retrieveNextMessagePages(firstPage.getPageId(), pageCollection);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable throwable, Response response) {\n+                    // TODO: Display error message.\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+});\n+\n+void retrieveNextMessagePages(String nextPageId,\n+    AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatMessage>>() {\n+        @Override\n+        public void onSuccess(Page<ChatMessage> nextPage, Response response) {\n+            for (ChatMessage thread : nextPage.getItems()) {\n+                //TODO: Take further action", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 402}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NzQxOA==", "bodyText": "nit;\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            \n          \n          \n            \n            ```\n          \n          \n            \n            }", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499097418", "createdAt": "2020-10-03T00:31:29Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Message Operations\n+\n+#### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+// The display name of the sender, if null (i.e. not specified), an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'NORMAL' or 'HIIGH', \n+// if null (i.e. not specified), 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {\n+    @Override\n+    public void onSuccess(ChatMessage result, Response response) {\n+        // `ChatMessage` is the response returned from getting a message.\n+        final String content = result.getContent();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List messages\n+\n+Use the `listChatMessages` method to retrieve messages in a thread.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+        \n+client.listChatMessagesPages(threadId,\n+    maxPageSize,\n+    startTime,\n+    new Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>>() {\n+        @Override\n+        public void onSuccess(AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection,\n+            Response response) {\n+            // pageCollection enables enumerating list of messages.\n+            pageCollection.getFirstPage(new Callback<Page<ChatMessage>>() {\n+                @Override\n+                public void onSuccess(Page<ChatMessage> firstPage, Response response) {\n+                    for (ChatMessage message : firstPage.getItems()) {\n+                        //TODO: Take further action\n+                    }\n+                    retrieveNextMessagePages(firstPage.getPageId(), pageCollection);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable throwable, Response response) {\n+                    // TODO: Display error message.\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+});\n+\n+void retrieveNextMessagePages(String nextPageId,\n+    AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatMessage>>() {\n+        @Override\n+        public void onSuccess(Page<ChatMessage> nextPage, Response response) {\n+            for (ChatMessage thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMessagePages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 416}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NzQ0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //  The model to pass to update method.\n          \n          \n            \n            //  The model to pass to the update method.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499097442", "createdAt": "2020-10-03T00:31:48Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Message Operations\n+\n+#### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+// The display name of the sender, if null (i.e. not specified), an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'NORMAL' or 'HIIGH', \n+// if null (i.e. not specified), 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {\n+    @Override\n+    public void onSuccess(ChatMessage result, Response response) {\n+        // `ChatMessage` is the response returned from getting a message.\n+        final String content = result.getContent();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List messages\n+\n+Use the `listChatMessages` method to retrieve messages in a thread.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+        \n+client.listChatMessagesPages(threadId,\n+    maxPageSize,\n+    startTime,\n+    new Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>>() {\n+        @Override\n+        public void onSuccess(AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection,\n+            Response response) {\n+            // pageCollection enables enumerating list of messages.\n+            pageCollection.getFirstPage(new Callback<Page<ChatMessage>>() {\n+                @Override\n+                public void onSuccess(Page<ChatMessage> firstPage, Response response) {\n+                    for (ChatMessage message : firstPage.getItems()) {\n+                        //TODO: Take further action\n+                    }\n+                    retrieveNextMessagePages(firstPage.getPageId(), pageCollection);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable throwable, Response response) {\n+                    // TODO: Display error message.\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+});\n+\n+void retrieveNextMessagePages(String nextPageId,\n+    AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatMessage>>() {\n+        @Override\n+        public void onSuccess(Page<ChatMessage> nextPage, Response response) {\n+            for (ChatMessage thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMessagePages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+\n+```\n+\n+#### Update a message\n+\n+Use the `update` method to update a message in a thread.\n+\n+```java\n+// The message content to be updated.\n+final String content = \"updated message\";\n+// The message priority level, such as 'NORMAL' or 'HIGH', if null (i.e. not specified), \n+// 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+//  The model to pass to update method.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 428}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NzY5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 // pageCollection enables enumerating a list of threads.\n          \n          \n            \n                 pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n          \n          \n            \n                    // pageCollection enables enumerating a list of threads.\n          \n          \n            \n                    pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499097698", "createdAt": "2020-10-03T00:33:45Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5Nzc2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // The model to pass to update method.\n          \n          \n            \n            // The model to pass to the update method.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499097764", "createdAt": "2020-10-03T00:34:17Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 252}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NzgwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // The model to pass to add method.\n          \n          \n            \n            // The model to pass to the add method.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499097806", "createdAt": "2020-10-03T00:34:43Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Message Operations\n+\n+#### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+// The display name of the sender, if null (i.e. not specified), an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'NORMAL' or 'HIIGH', \n+// if null (i.e. not specified), 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {\n+    @Override\n+    public void onSuccess(ChatMessage result, Response response) {\n+        // `ChatMessage` is the response returned from getting a message.\n+        final String content = result.getContent();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List messages\n+\n+Use the `listChatMessages` method to retrieve messages in a thread.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+        \n+client.listChatMessagesPages(threadId,\n+    maxPageSize,\n+    startTime,\n+    new Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>>() {\n+        @Override\n+        public void onSuccess(AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection,\n+            Response response) {\n+            // pageCollection enables enumerating list of messages.\n+            pageCollection.getFirstPage(new Callback<Page<ChatMessage>>() {\n+                @Override\n+                public void onSuccess(Page<ChatMessage> firstPage, Response response) {\n+                    for (ChatMessage message : firstPage.getItems()) {\n+                        //TODO: Take further action\n+                    }\n+                    retrieveNextMessagePages(firstPage.getPageId(), pageCollection);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable throwable, Response response) {\n+                    // TODO: Display error message.\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+});\n+\n+void retrieveNextMessagePages(String nextPageId,\n+    AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatMessage>>() {\n+        @Override\n+        public void onSuccess(Page<ChatMessage> nextPage, Response response) {\n+            for (ChatMessage thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMessagePages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+\n+```\n+\n+#### Update a message\n+\n+Use the `update` method to update a message in a thread.\n+\n+```java\n+// The message content to be updated.\n+final String content = \"updated message\";\n+// The message priority level, such as 'NORMAL' or 'HIGH', if null (i.e. not specified), \n+// 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+//  The model to pass to update method.\n+UpdateChatMessageRequest message = new UpdateChatMessageRequest()\n+    .setContent(content)\n+    .setPriority(priority);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.updateChatMessage(threadId,\n+    messageId,\n+    message, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a message\n+\n+Use the `deleteChatMessage` method to delete a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.deleteChatMessage(threadId, messageId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Thread Member Operations\n+\n+#### Get thread members\n+\n+Use the `listChatThreadMembers` method to retrieve the members participating in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.listChatThreadMembersPages(threadId,\n+    new Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>> firstPage,\n+        Response response) {\n+         // pageCollection enables enumerating list of chat members.\n+         pageCollection.getFirstPage(new Callback<Page<ChatThreadMember>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadMember> firstPage, Response response) {\n+                for (ChatThreadMember member : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextMembersPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+         }\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextMembersPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadMember>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadMember> nextPage, Response response) {\n+            for (ChatThreadMember member : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMembersPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Add thread members\n+\n+Use the `add` method to add members to a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"a new member\";\n+members.add(new ChatThreadMember().setId(id).setDisplayName(displayName));\n+// The model to pass to add method.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 544}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5Nzk3Mw==", "bodyText": "nit;\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    //TODO: Take further action\n          \n          \n            \n                    // TODO: Take further action.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499097973", "createdAt": "2020-10-03T00:35:59Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Message Operations\n+\n+#### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+// The display name of the sender, if null (i.e. not specified), an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'NORMAL' or 'HIIGH', \n+// if null (i.e. not specified), 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {\n+    @Override\n+    public void onSuccess(ChatMessage result, Response response) {\n+        // `ChatMessage` is the response returned from getting a message.\n+        final String content = result.getContent();\n+        //TODO: Take further action", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 344}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5ODEyMw==", "bodyText": "These parameters can be in one line.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499098123", "createdAt": "2020-10-03T00:37:11Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Message Operations\n+\n+#### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+// The display name of the sender, if null (i.e. not specified), an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'NORMAL' or 'HIIGH', \n+// if null (i.e. not specified), 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {\n+    @Override\n+    public void onSuccess(ChatMessage result, Response response) {\n+        // `ChatMessage` is the response returned from getting a message.\n+        final String content = result.getContent();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List messages\n+\n+Use the `listChatMessages` method to retrieve messages in a thread.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+        \n+client.listChatMessagesPages(threadId,\n+    maxPageSize,\n+    startTime,\n+    new Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>>() {\n+        @Override\n+        public void onSuccess(AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection,\n+            Response response) {\n+            // pageCollection enables enumerating list of messages.\n+            pageCollection.getFirstPage(new Callback<Page<ChatMessage>>() {\n+                @Override\n+                public void onSuccess(Page<ChatMessage> firstPage, Response response) {\n+                    for (ChatMessage message : firstPage.getItems()) {\n+                        //TODO: Take further action\n+                    }\n+                    retrieveNextMessagePages(firstPage.getPageId(), pageCollection);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable throwable, Response response) {\n+                    // TODO: Display error message.\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+});\n+\n+void retrieveNextMessagePages(String nextPageId,\n+    AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatMessage>>() {\n+        @Override\n+        public void onSuccess(Page<ChatMessage> nextPage, Response response) {\n+            for (ChatMessage thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMessagePages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+\n+```\n+\n+#### Update a message\n+\n+Use the `update` method to update a message in a thread.\n+\n+```java\n+// The message content to be updated.\n+final String content = \"updated message\";\n+// The message priority level, such as 'NORMAL' or 'HIGH', if null (i.e. not specified), \n+// 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+//  The model to pass to update method.\n+UpdateChatMessageRequest message = new UpdateChatMessageRequest()\n+    .setContent(content)\n+    .setPriority(priority);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.updateChatMessage(threadId,\n+    messageId,\n+    message, new Callback<Void>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 439}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5ODEzNg==", "bodyText": "nit;\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    //TODO: Take further action\n          \n          \n            \n                    // TODO: Take further action.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499098136", "createdAt": "2020-10-03T00:37:22Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Message Operations\n+\n+#### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+// The display name of the sender, if null (i.e. not specified), an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'NORMAL' or 'HIIGH', \n+// if null (i.e. not specified), 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {\n+    @Override\n+    public void onSuccess(ChatMessage result, Response response) {\n+        // `ChatMessage` is the response returned from getting a message.\n+        final String content = result.getContent();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List messages\n+\n+Use the `listChatMessages` method to retrieve messages in a thread.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+        \n+client.listChatMessagesPages(threadId,\n+    maxPageSize,\n+    startTime,\n+    new Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>>() {\n+        @Override\n+        public void onSuccess(AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection,\n+            Response response) {\n+            // pageCollection enables enumerating list of messages.\n+            pageCollection.getFirstPage(new Callback<Page<ChatMessage>>() {\n+                @Override\n+                public void onSuccess(Page<ChatMessage> firstPage, Response response) {\n+                    for (ChatMessage message : firstPage.getItems()) {\n+                        //TODO: Take further action\n+                    }\n+                    retrieveNextMessagePages(firstPage.getPageId(), pageCollection);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable throwable, Response response) {\n+                    // TODO: Display error message.\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+});\n+\n+void retrieveNextMessagePages(String nextPageId,\n+    AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatMessage>>() {\n+        @Override\n+        public void onSuccess(Page<ChatMessage> nextPage, Response response) {\n+            for (ChatMessage thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMessagePages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+\n+```\n+\n+#### Update a message\n+\n+Use the `update` method to update a message in a thread.\n+\n+```java\n+// The message content to be updated.\n+final String content = \"updated message\";\n+// The message priority level, such as 'NORMAL' or 'HIGH', if null (i.e. not specified), \n+// 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+//  The model to pass to update method.\n+UpdateChatMessageRequest message = new UpdateChatMessageRequest()\n+    .setContent(content)\n+    .setPriority(priority);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.updateChatMessage(threadId,\n+    messageId,\n+    message, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 442}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5ODM0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            final String messageId = \"message_id\";\n          \n          \n            \n            final String messageId = \"<message_id>\";", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499098349", "createdAt": "2020-10-03T00:39:07Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Message Operations\n+\n+#### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+// The display name of the sender, if null (i.e. not specified), an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'NORMAL' or 'HIIGH', \n+// if null (i.e. not specified), 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {\n+    @Override\n+    public void onSuccess(ChatMessage result, Response response) {\n+        // `ChatMessage` is the response returned from getting a message.\n+        final String content = result.getContent();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List messages\n+\n+Use the `listChatMessages` method to retrieve messages in a thread.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+        \n+client.listChatMessagesPages(threadId,\n+    maxPageSize,\n+    startTime,\n+    new Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>>() {\n+        @Override\n+        public void onSuccess(AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection,\n+            Response response) {\n+            // pageCollection enables enumerating list of messages.\n+            pageCollection.getFirstPage(new Callback<Page<ChatMessage>>() {\n+                @Override\n+                public void onSuccess(Page<ChatMessage> firstPage, Response response) {\n+                    for (ChatMessage message : firstPage.getItems()) {\n+                        //TODO: Take further action\n+                    }\n+                    retrieveNextMessagePages(firstPage.getPageId(), pageCollection);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable throwable, Response response) {\n+                    // TODO: Display error message.\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+});\n+\n+void retrieveNextMessagePages(String nextPageId,\n+    AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatMessage>>() {\n+        @Override\n+        public void onSuccess(Page<ChatMessage> nextPage, Response response) {\n+            for (ChatMessage thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMessagePages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+\n+```\n+\n+#### Update a message\n+\n+Use the `update` method to update a message in a thread.\n+\n+```java\n+// The message content to be updated.\n+final String content = \"updated message\";\n+// The message priority level, such as 'NORMAL' or 'HIGH', if null (i.e. not specified), \n+// 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+//  The model to pass to update method.\n+UpdateChatMessageRequest message = new UpdateChatMessageRequest()\n+    .setContent(content)\n+    .setPriority(priority);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 436}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5ODM4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            final String messageId = \"message_id\";\n          \n          \n            \n            final String messageId = \"<message_id>\";", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499098386", "createdAt": "2020-10-03T00:39:21Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Message Operations\n+\n+#### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+// The display name of the sender, if null (i.e. not specified), an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'NORMAL' or 'HIIGH', \n+// if null (i.e. not specified), 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {\n+    @Override\n+    public void onSuccess(ChatMessage result, Response response) {\n+        // `ChatMessage` is the response returned from getting a message.\n+        final String content = result.getContent();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List messages\n+\n+Use the `listChatMessages` method to retrieve messages in a thread.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+        \n+client.listChatMessagesPages(threadId,\n+    maxPageSize,\n+    startTime,\n+    new Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>>() {\n+        @Override\n+        public void onSuccess(AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection,\n+            Response response) {\n+            // pageCollection enables enumerating list of messages.\n+            pageCollection.getFirstPage(new Callback<Page<ChatMessage>>() {\n+                @Override\n+                public void onSuccess(Page<ChatMessage> firstPage, Response response) {\n+                    for (ChatMessage message : firstPage.getItems()) {\n+                        //TODO: Take further action\n+                    }\n+                    retrieveNextMessagePages(firstPage.getPageId(), pageCollection);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable throwable, Response response) {\n+                    // TODO: Display error message.\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+});\n+\n+void retrieveNextMessagePages(String nextPageId,\n+    AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatMessage>>() {\n+        @Override\n+        public void onSuccess(Page<ChatMessage> nextPage, Response response) {\n+            for (ChatMessage thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMessagePages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+\n+```\n+\n+#### Update a message\n+\n+Use the `update` method to update a message in a thread.\n+\n+```java\n+// The message content to be updated.\n+final String content = \"updated message\";\n+// The message priority level, such as 'NORMAL' or 'HIGH', if null (i.e. not specified), \n+// 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+//  The model to pass to update method.\n+UpdateChatMessageRequest message = new UpdateChatMessageRequest()\n+    .setContent(content)\n+    .setPriority(priority);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.updateChatMessage(threadId,\n+    messageId,\n+    message, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a message\n+\n+Use the `deleteChatMessage` method to delete a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 460}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5ODM5OQ==", "bodyText": "nit;\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    //TODO: Take further action\n          \n          \n            \n                    // TODO: Take further action.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499098399", "createdAt": "2020-10-03T00:39:32Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Message Operations\n+\n+#### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+// The display name of the sender, if null (i.e. not specified), an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'NORMAL' or 'HIIGH', \n+// if null (i.e. not specified), 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {\n+    @Override\n+    public void onSuccess(ChatMessage result, Response response) {\n+        // `ChatMessage` is the response returned from getting a message.\n+        final String content = result.getContent();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List messages\n+\n+Use the `listChatMessages` method to retrieve messages in a thread.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+        \n+client.listChatMessagesPages(threadId,\n+    maxPageSize,\n+    startTime,\n+    new Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>>() {\n+        @Override\n+        public void onSuccess(AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection,\n+            Response response) {\n+            // pageCollection enables enumerating list of messages.\n+            pageCollection.getFirstPage(new Callback<Page<ChatMessage>>() {\n+                @Override\n+                public void onSuccess(Page<ChatMessage> firstPage, Response response) {\n+                    for (ChatMessage message : firstPage.getItems()) {\n+                        //TODO: Take further action\n+                    }\n+                    retrieveNextMessagePages(firstPage.getPageId(), pageCollection);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable throwable, Response response) {\n+                    // TODO: Display error message.\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+});\n+\n+void retrieveNextMessagePages(String nextPageId,\n+    AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatMessage>>() {\n+        @Override\n+        public void onSuccess(Page<ChatMessage> nextPage, Response response) {\n+            for (ChatMessage thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMessagePages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+\n+```\n+\n+#### Update a message\n+\n+Use the `update` method to update a message in a thread.\n+\n+```java\n+// The message content to be updated.\n+final String content = \"updated message\";\n+// The message priority level, such as 'NORMAL' or 'HIGH', if null (i.e. not specified), \n+// 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+//  The model to pass to update method.\n+UpdateChatMessageRequest message = new UpdateChatMessageRequest()\n+    .setContent(content)\n+    .setPriority(priority);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.updateChatMessage(threadId,\n+    messageId,\n+    message, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a message\n+\n+Use the `deleteChatMessage` method to delete a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.deleteChatMessage(threadId, messageId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 464}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5ODUwMw==", "bodyText": "nit;\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                //TODO: Take further action\n          \n          \n            \n                                // TODO: Take further action.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499098503", "createdAt": "2020-10-03T00:40:13Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Message Operations\n+\n+#### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+// The display name of the sender, if null (i.e. not specified), an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'NORMAL' or 'HIIGH', \n+// if null (i.e. not specified), 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {\n+    @Override\n+    public void onSuccess(ChatMessage result, Response response) {\n+        // `ChatMessage` is the response returned from getting a message.\n+        final String content = result.getContent();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List messages\n+\n+Use the `listChatMessages` method to retrieve messages in a thread.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+        \n+client.listChatMessagesPages(threadId,\n+    maxPageSize,\n+    startTime,\n+    new Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>>() {\n+        @Override\n+        public void onSuccess(AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection,\n+            Response response) {\n+            // pageCollection enables enumerating list of messages.\n+            pageCollection.getFirstPage(new Callback<Page<ChatMessage>>() {\n+                @Override\n+                public void onSuccess(Page<ChatMessage> firstPage, Response response) {\n+                    for (ChatMessage message : firstPage.getItems()) {\n+                        //TODO: Take further action\n+                    }\n+                    retrieveNextMessagePages(firstPage.getPageId(), pageCollection);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable throwable, Response response) {\n+                    // TODO: Display error message.\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+});\n+\n+void retrieveNextMessagePages(String nextPageId,\n+    AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatMessage>>() {\n+        @Override\n+        public void onSuccess(Page<ChatMessage> nextPage, Response response) {\n+            for (ChatMessage thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMessagePages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+\n+```\n+\n+#### Update a message\n+\n+Use the `update` method to update a message in a thread.\n+\n+```java\n+// The message content to be updated.\n+final String content = \"updated message\";\n+// The message priority level, such as 'NORMAL' or 'HIGH', if null (i.e. not specified), \n+// 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+//  The model to pass to update method.\n+UpdateChatMessageRequest message = new UpdateChatMessageRequest()\n+    .setContent(content)\n+    .setPriority(priority);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.updateChatMessage(threadId,\n+    messageId,\n+    message, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a message\n+\n+Use the `deleteChatMessage` method to delete a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.deleteChatMessage(threadId, messageId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Thread Member Operations\n+\n+#### Get thread members\n+\n+Use the `listChatThreadMembers` method to retrieve the members participating in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.listChatThreadMembersPages(threadId,\n+    new Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>> firstPage,\n+        Response response) {\n+         // pageCollection enables enumerating list of chat members.\n+         pageCollection.getFirstPage(new Callback<Page<ChatThreadMember>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadMember> firstPage, Response response) {\n+                for (ChatThreadMember member : firstPage.getItems()) {\n+                    //TODO: Take further action", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 493}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5ODUzMQ==", "bodyText": "nit;\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            //TODO: Take further action\n          \n          \n            \n                            // TODO: Take further action.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499098531", "createdAt": "2020-10-03T00:40:28Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Message Operations\n+\n+#### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+// The display name of the sender, if null (i.e. not specified), an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'NORMAL' or 'HIIGH', \n+// if null (i.e. not specified), 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {\n+    @Override\n+    public void onSuccess(ChatMessage result, Response response) {\n+        // `ChatMessage` is the response returned from getting a message.\n+        final String content = result.getContent();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List messages\n+\n+Use the `listChatMessages` method to retrieve messages in a thread.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+        \n+client.listChatMessagesPages(threadId,\n+    maxPageSize,\n+    startTime,\n+    new Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>>() {\n+        @Override\n+        public void onSuccess(AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection,\n+            Response response) {\n+            // pageCollection enables enumerating list of messages.\n+            pageCollection.getFirstPage(new Callback<Page<ChatMessage>>() {\n+                @Override\n+                public void onSuccess(Page<ChatMessage> firstPage, Response response) {\n+                    for (ChatMessage message : firstPage.getItems()) {\n+                        //TODO: Take further action\n+                    }\n+                    retrieveNextMessagePages(firstPage.getPageId(), pageCollection);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable throwable, Response response) {\n+                    // TODO: Display error message.\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+});\n+\n+void retrieveNextMessagePages(String nextPageId,\n+    AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatMessage>>() {\n+        @Override\n+        public void onSuccess(Page<ChatMessage> nextPage, Response response) {\n+            for (ChatMessage thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMessagePages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+\n+```\n+\n+#### Update a message\n+\n+Use the `update` method to update a message in a thread.\n+\n+```java\n+// The message content to be updated.\n+final String content = \"updated message\";\n+// The message priority level, such as 'NORMAL' or 'HIGH', if null (i.e. not specified), \n+// 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+//  The model to pass to update method.\n+UpdateChatMessageRequest message = new UpdateChatMessageRequest()\n+    .setContent(content)\n+    .setPriority(priority);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.updateChatMessage(threadId,\n+    messageId,\n+    message, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a message\n+\n+Use the `deleteChatMessage` method to delete a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.deleteChatMessage(threadId, messageId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Thread Member Operations\n+\n+#### Get thread members\n+\n+Use the `listChatThreadMembers` method to retrieve the members participating in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.listChatThreadMembersPages(threadId,\n+    new Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>> firstPage,\n+        Response response) {\n+         // pageCollection enables enumerating list of chat members.\n+         pageCollection.getFirstPage(new Callback<Page<ChatThreadMember>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadMember> firstPage, Response response) {\n+                for (ChatThreadMember member : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextMembersPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+         }\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextMembersPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadMember>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadMember> nextPage, Response response) {\n+            for (ChatThreadMember member : nextPage.getItems()) {\n+                //TODO: Take further action", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 517}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5ODU5NA==", "bodyText": "nit;\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    //TODO: Take further action\n          \n          \n            \n                    // TODO: Take further action.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499098594", "createdAt": "2020-10-03T00:40:54Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Message Operations\n+\n+#### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+// The display name of the sender, if null (i.e. not specified), an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'NORMAL' or 'HIIGH', \n+// if null (i.e. not specified), 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {\n+    @Override\n+    public void onSuccess(ChatMessage result, Response response) {\n+        // `ChatMessage` is the response returned from getting a message.\n+        final String content = result.getContent();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List messages\n+\n+Use the `listChatMessages` method to retrieve messages in a thread.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+        \n+client.listChatMessagesPages(threadId,\n+    maxPageSize,\n+    startTime,\n+    new Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>>() {\n+        @Override\n+        public void onSuccess(AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection,\n+            Response response) {\n+            // pageCollection enables enumerating list of messages.\n+            pageCollection.getFirstPage(new Callback<Page<ChatMessage>>() {\n+                @Override\n+                public void onSuccess(Page<ChatMessage> firstPage, Response response) {\n+                    for (ChatMessage message : firstPage.getItems()) {\n+                        //TODO: Take further action\n+                    }\n+                    retrieveNextMessagePages(firstPage.getPageId(), pageCollection);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable throwable, Response response) {\n+                    // TODO: Display error message.\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+});\n+\n+void retrieveNextMessagePages(String nextPageId,\n+    AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatMessage>>() {\n+        @Override\n+        public void onSuccess(Page<ChatMessage> nextPage, Response response) {\n+            for (ChatMessage thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMessagePages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+\n+```\n+\n+#### Update a message\n+\n+Use the `update` method to update a message in a thread.\n+\n+```java\n+// The message content to be updated.\n+final String content = \"updated message\";\n+// The message priority level, such as 'NORMAL' or 'HIGH', if null (i.e. not specified), \n+// 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+//  The model to pass to update method.\n+UpdateChatMessageRequest message = new UpdateChatMessageRequest()\n+    .setContent(content)\n+    .setPriority(priority);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.updateChatMessage(threadId,\n+    messageId,\n+    message, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a message\n+\n+Use the `deleteChatMessage` method to delete a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.deleteChatMessage(threadId, messageId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Thread Member Operations\n+\n+#### Get thread members\n+\n+Use the `listChatThreadMembers` method to retrieve the members participating in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.listChatThreadMembersPages(threadId,\n+    new Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>> firstPage,\n+        Response response) {\n+         // pageCollection enables enumerating list of chat members.\n+         pageCollection.getFirstPage(new Callback<Page<ChatThreadMember>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadMember> firstPage, Response response) {\n+                for (ChatThreadMember member : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextMembersPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+         }\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextMembersPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadMember>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadMember> nextPage, Response response) {\n+            for (ChatThreadMember member : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMembersPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Add thread members\n+\n+Use the `add` method to add members to a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"a new member\";\n+members.add(new ChatThreadMember().setId(id).setDisplayName(displayName));\n+// The model to pass to add method.\n+AddChatThreadMembersRequest threadMembers = new AddChatThreadMembersRequest()\n+    .setMembers(members);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.addChatThreadMembers(threadId, threadMembers, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 553}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5ODYyOQ==", "bodyText": "nit;\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    //TODO: Take further action\n          \n          \n            \n                    // TODO: Take further action.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499098629", "createdAt": "2020-10-03T00:41:09Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Message Operations\n+\n+#### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+// The display name of the sender, if null (i.e. not specified), an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'NORMAL' or 'HIIGH', \n+// if null (i.e. not specified), 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {\n+    @Override\n+    public void onSuccess(ChatMessage result, Response response) {\n+        // `ChatMessage` is the response returned from getting a message.\n+        final String content = result.getContent();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List messages\n+\n+Use the `listChatMessages` method to retrieve messages in a thread.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+        \n+client.listChatMessagesPages(threadId,\n+    maxPageSize,\n+    startTime,\n+    new Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>>() {\n+        @Override\n+        public void onSuccess(AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection,\n+            Response response) {\n+            // pageCollection enables enumerating list of messages.\n+            pageCollection.getFirstPage(new Callback<Page<ChatMessage>>() {\n+                @Override\n+                public void onSuccess(Page<ChatMessage> firstPage, Response response) {\n+                    for (ChatMessage message : firstPage.getItems()) {\n+                        //TODO: Take further action\n+                    }\n+                    retrieveNextMessagePages(firstPage.getPageId(), pageCollection);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable throwable, Response response) {\n+                    // TODO: Display error message.\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+});\n+\n+void retrieveNextMessagePages(String nextPageId,\n+    AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatMessage>>() {\n+        @Override\n+        public void onSuccess(Page<ChatMessage> nextPage, Response response) {\n+            for (ChatMessage thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMessagePages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+\n+```\n+\n+#### Update a message\n+\n+Use the `update` method to update a message in a thread.\n+\n+```java\n+// The message content to be updated.\n+final String content = \"updated message\";\n+// The message priority level, such as 'NORMAL' or 'HIGH', if null (i.e. not specified), \n+// 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+//  The model to pass to update method.\n+UpdateChatMessageRequest message = new UpdateChatMessageRequest()\n+    .setContent(content)\n+    .setPriority(priority);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.updateChatMessage(threadId,\n+    messageId,\n+    message, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a message\n+\n+Use the `deleteChatMessage` method to delete a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.deleteChatMessage(threadId, messageId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Thread Member Operations\n+\n+#### Get thread members\n+\n+Use the `listChatThreadMembers` method to retrieve the members participating in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.listChatThreadMembersPages(threadId,\n+    new Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>> firstPage,\n+        Response response) {\n+         // pageCollection enables enumerating list of chat members.\n+         pageCollection.getFirstPage(new Callback<Page<ChatThreadMember>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadMember> firstPage, Response response) {\n+                for (ChatThreadMember member : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextMembersPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+         }\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextMembersPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadMember>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadMember> nextPage, Response response) {\n+            for (ChatThreadMember member : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMembersPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Add thread members\n+\n+Use the `add` method to add members to a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"a new member\";\n+members.add(new ChatThreadMember().setId(id).setDisplayName(displayName));\n+// The model to pass to add method.\n+AddChatThreadMembersRequest threadMembers = new AddChatThreadMembersRequest()\n+    .setMembers(members);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.addChatThreadMembers(threadId, threadMembers, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Remove a thread member\n+\n+Use the `removeChatThreadMember` method to remove a member from a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the member.\n+final String memberId = \"<member_id>\";\n+client.removeChatThreadMember(threadId, memberId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 575}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5ODY3Mg==", "bodyText": "nit;\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    //TODO: Take further action\n          \n          \n            \n                    // TODO: Take further action.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499098672", "createdAt": "2020-10-03T00:41:33Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Message Operations\n+\n+#### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+// The display name of the sender, if null (i.e. not specified), an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'NORMAL' or 'HIIGH', \n+// if null (i.e. not specified), 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {\n+    @Override\n+    public void onSuccess(ChatMessage result, Response response) {\n+        // `ChatMessage` is the response returned from getting a message.\n+        final String content = result.getContent();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List messages\n+\n+Use the `listChatMessages` method to retrieve messages in a thread.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+        \n+client.listChatMessagesPages(threadId,\n+    maxPageSize,\n+    startTime,\n+    new Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>>() {\n+        @Override\n+        public void onSuccess(AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection,\n+            Response response) {\n+            // pageCollection enables enumerating list of messages.\n+            pageCollection.getFirstPage(new Callback<Page<ChatMessage>>() {\n+                @Override\n+                public void onSuccess(Page<ChatMessage> firstPage, Response response) {\n+                    for (ChatMessage message : firstPage.getItems()) {\n+                        //TODO: Take further action\n+                    }\n+                    retrieveNextMessagePages(firstPage.getPageId(), pageCollection);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable throwable, Response response) {\n+                    // TODO: Display error message.\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+});\n+\n+void retrieveNextMessagePages(String nextPageId,\n+    AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatMessage>>() {\n+        @Override\n+        public void onSuccess(Page<ChatMessage> nextPage, Response response) {\n+            for (ChatMessage thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMessagePages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+\n+```\n+\n+#### Update a message\n+\n+Use the `update` method to update a message in a thread.\n+\n+```java\n+// The message content to be updated.\n+final String content = \"updated message\";\n+// The message priority level, such as 'NORMAL' or 'HIGH', if null (i.e. not specified), \n+// 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+//  The model to pass to update method.\n+UpdateChatMessageRequest message = new UpdateChatMessageRequest()\n+    .setContent(content)\n+    .setPriority(priority);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.updateChatMessage(threadId,\n+    messageId,\n+    message, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a message\n+\n+Use the `deleteChatMessage` method to delete a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.deleteChatMessage(threadId, messageId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Thread Member Operations\n+\n+#### Get thread members\n+\n+Use the `listChatThreadMembers` method to retrieve the members participating in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.listChatThreadMembersPages(threadId,\n+    new Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>> firstPage,\n+        Response response) {\n+         // pageCollection enables enumerating list of chat members.\n+         pageCollection.getFirstPage(new Callback<Page<ChatThreadMember>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadMember> firstPage, Response response) {\n+                for (ChatThreadMember member : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextMembersPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+         }\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextMembersPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadMember>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadMember> nextPage, Response response) {\n+            for (ChatThreadMember member : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMembersPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Add thread members\n+\n+Use the `add` method to add members to a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"a new member\";\n+members.add(new ChatThreadMember().setId(id).setDisplayName(displayName));\n+// The model to pass to add method.\n+AddChatThreadMembersRequest threadMembers = new AddChatThreadMembersRequest()\n+    .setMembers(members);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.addChatThreadMembers(threadId, threadMembers, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Remove a thread member\n+\n+Use the `removeChatThreadMember` method to remove a member from a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the member.\n+final String memberId = \"<member_id>\";\n+client.removeChatThreadMember(threadId, memberId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Events Operations\n+\n+#### Send a typing notification\n+\n+Use the `sendTypingNotification` method to post a typing notification event to a thread, on behalf of a user.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendTypingNotification(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 597}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5ODcwNw==", "bodyText": "nit;\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // The model to be passed to send method.\n          \n          \n            \n            // The model to be passed to the send method.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499098707", "createdAt": "2020-10-03T00:41:49Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Message Operations\n+\n+#### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+// The display name of the sender, if null (i.e. not specified), an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'NORMAL' or 'HIIGH', \n+// if null (i.e. not specified), 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {\n+    @Override\n+    public void onSuccess(ChatMessage result, Response response) {\n+        // `ChatMessage` is the response returned from getting a message.\n+        final String content = result.getContent();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List messages\n+\n+Use the `listChatMessages` method to retrieve messages in a thread.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+        \n+client.listChatMessagesPages(threadId,\n+    maxPageSize,\n+    startTime,\n+    new Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>>() {\n+        @Override\n+        public void onSuccess(AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection,\n+            Response response) {\n+            // pageCollection enables enumerating list of messages.\n+            pageCollection.getFirstPage(new Callback<Page<ChatMessage>>() {\n+                @Override\n+                public void onSuccess(Page<ChatMessage> firstPage, Response response) {\n+                    for (ChatMessage message : firstPage.getItems()) {\n+                        //TODO: Take further action\n+                    }\n+                    retrieveNextMessagePages(firstPage.getPageId(), pageCollection);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable throwable, Response response) {\n+                    // TODO: Display error message.\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+});\n+\n+void retrieveNextMessagePages(String nextPageId,\n+    AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatMessage>>() {\n+        @Override\n+        public void onSuccess(Page<ChatMessage> nextPage, Response response) {\n+            for (ChatMessage thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMessagePages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+\n+```\n+\n+#### Update a message\n+\n+Use the `update` method to update a message in a thread.\n+\n+```java\n+// The message content to be updated.\n+final String content = \"updated message\";\n+// The message priority level, such as 'NORMAL' or 'HIGH', if null (i.e. not specified), \n+// 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+//  The model to pass to update method.\n+UpdateChatMessageRequest message = new UpdateChatMessageRequest()\n+    .setContent(content)\n+    .setPriority(priority);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.updateChatMessage(threadId,\n+    messageId,\n+    message, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a message\n+\n+Use the `deleteChatMessage` method to delete a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.deleteChatMessage(threadId, messageId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Thread Member Operations\n+\n+#### Get thread members\n+\n+Use the `listChatThreadMembers` method to retrieve the members participating in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.listChatThreadMembersPages(threadId,\n+    new Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>> firstPage,\n+        Response response) {\n+         // pageCollection enables enumerating list of chat members.\n+         pageCollection.getFirstPage(new Callback<Page<ChatThreadMember>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadMember> firstPage, Response response) {\n+                for (ChatThreadMember member : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextMembersPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+         }\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextMembersPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadMember>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadMember> nextPage, Response response) {\n+            for (ChatThreadMember member : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMembersPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Add thread members\n+\n+Use the `add` method to add members to a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"a new member\";\n+members.add(new ChatThreadMember().setId(id).setDisplayName(displayName));\n+// The model to pass to add method.\n+AddChatThreadMembersRequest threadMembers = new AddChatThreadMembersRequest()\n+    .setMembers(members);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.addChatThreadMembers(threadId, threadMembers, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Remove a thread member\n+\n+Use the `removeChatThreadMember` method to remove a member from a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the member.\n+final String memberId = \"<member_id>\";\n+client.removeChatThreadMember(threadId, memberId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Events Operations\n+\n+#### Send a typing notification\n+\n+Use the `sendTypingNotification` method to post a typing notification event to a thread, on behalf of a user.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendTypingNotification(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Send read receipt\n+\n+Use the `send` method to post a read receipt event to a thread, on behalf of a user.\n+\n+```java\n+// The unique ID of the member.\n+final String messageId = \"<message_id>\";\n+// The model to be passed to send method.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 614}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5ODczOQ==", "bodyText": "nit;\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    //TODO: Take further action\n          \n          \n            \n                    // TODO: Take further action.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499098739", "createdAt": "2020-10-03T00:42:02Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Message Operations\n+\n+#### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+// The display name of the sender, if null (i.e. not specified), an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'NORMAL' or 'HIIGH', \n+// if null (i.e. not specified), 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {\n+    @Override\n+    public void onSuccess(ChatMessage result, Response response) {\n+        // `ChatMessage` is the response returned from getting a message.\n+        final String content = result.getContent();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List messages\n+\n+Use the `listChatMessages` method to retrieve messages in a thread.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+        \n+client.listChatMessagesPages(threadId,\n+    maxPageSize,\n+    startTime,\n+    new Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>>() {\n+        @Override\n+        public void onSuccess(AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection,\n+            Response response) {\n+            // pageCollection enables enumerating list of messages.\n+            pageCollection.getFirstPage(new Callback<Page<ChatMessage>>() {\n+                @Override\n+                public void onSuccess(Page<ChatMessage> firstPage, Response response) {\n+                    for (ChatMessage message : firstPage.getItems()) {\n+                        //TODO: Take further action\n+                    }\n+                    retrieveNextMessagePages(firstPage.getPageId(), pageCollection);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable throwable, Response response) {\n+                    // TODO: Display error message.\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+});\n+\n+void retrieveNextMessagePages(String nextPageId,\n+    AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatMessage>>() {\n+        @Override\n+        public void onSuccess(Page<ChatMessage> nextPage, Response response) {\n+            for (ChatMessage thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMessagePages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+\n+```\n+\n+#### Update a message\n+\n+Use the `update` method to update a message in a thread.\n+\n+```java\n+// The message content to be updated.\n+final String content = \"updated message\";\n+// The message priority level, such as 'NORMAL' or 'HIGH', if null (i.e. not specified), \n+// 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+//  The model to pass to update method.\n+UpdateChatMessageRequest message = new UpdateChatMessageRequest()\n+    .setContent(content)\n+    .setPriority(priority);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.updateChatMessage(threadId,\n+    messageId,\n+    message, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a message\n+\n+Use the `deleteChatMessage` method to delete a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.deleteChatMessage(threadId, messageId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Thread Member Operations\n+\n+#### Get thread members\n+\n+Use the `listChatThreadMembers` method to retrieve the members participating in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.listChatThreadMembersPages(threadId,\n+    new Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>> firstPage,\n+        Response response) {\n+         // pageCollection enables enumerating list of chat members.\n+         pageCollection.getFirstPage(new Callback<Page<ChatThreadMember>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadMember> firstPage, Response response) {\n+                for (ChatThreadMember member : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextMembersPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+         }\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextMembersPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadMember>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadMember> nextPage, Response response) {\n+            for (ChatThreadMember member : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMembersPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Add thread members\n+\n+Use the `add` method to add members to a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"a new member\";\n+members.add(new ChatThreadMember().setId(id).setDisplayName(displayName));\n+// The model to pass to add method.\n+AddChatThreadMembersRequest threadMembers = new AddChatThreadMembersRequest()\n+    .setMembers(members);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.addChatThreadMembers(threadId, threadMembers, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Remove a thread member\n+\n+Use the `removeChatThreadMember` method to remove a member from a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the member.\n+final String memberId = \"<member_id>\";\n+client.removeChatThreadMember(threadId, memberId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Events Operations\n+\n+#### Send a typing notification\n+\n+Use the `sendTypingNotification` method to post a typing notification event to a thread, on behalf of a user.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendTypingNotification(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Send read receipt\n+\n+Use the `send` method to post a read receipt event to a thread, on behalf of a user.\n+\n+```java\n+// The unique ID of the member.\n+final String messageId = \"<message_id>\";\n+// The model to be passed to send method.\n+SendReadReceiptRequest readReceipt = new SendReadReceiptRequest()\n+    .setChatMessageId(messageId);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatReadReceipt(threadId, readReceipt, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 623}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5ODc3MQ==", "bodyText": "nit;\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                //TODO: Take further action\n          \n          \n            \n                                // TODO: Take further action.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499098771", "createdAt": "2020-10-03T00:42:19Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Message Operations\n+\n+#### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+// The display name of the sender, if null (i.e. not specified), an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'NORMAL' or 'HIIGH', \n+// if null (i.e. not specified), 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {\n+    @Override\n+    public void onSuccess(ChatMessage result, Response response) {\n+        // `ChatMessage` is the response returned from getting a message.\n+        final String content = result.getContent();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List messages\n+\n+Use the `listChatMessages` method to retrieve messages in a thread.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+        \n+client.listChatMessagesPages(threadId,\n+    maxPageSize,\n+    startTime,\n+    new Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>>() {\n+        @Override\n+        public void onSuccess(AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection,\n+            Response response) {\n+            // pageCollection enables enumerating list of messages.\n+            pageCollection.getFirstPage(new Callback<Page<ChatMessage>>() {\n+                @Override\n+                public void onSuccess(Page<ChatMessage> firstPage, Response response) {\n+                    for (ChatMessage message : firstPage.getItems()) {\n+                        //TODO: Take further action\n+                    }\n+                    retrieveNextMessagePages(firstPage.getPageId(), pageCollection);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable throwable, Response response) {\n+                    // TODO: Display error message.\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+});\n+\n+void retrieveNextMessagePages(String nextPageId,\n+    AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatMessage>>() {\n+        @Override\n+        public void onSuccess(Page<ChatMessage> nextPage, Response response) {\n+            for (ChatMessage thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMessagePages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+\n+```\n+\n+#### Update a message\n+\n+Use the `update` method to update a message in a thread.\n+\n+```java\n+// The message content to be updated.\n+final String content = \"updated message\";\n+// The message priority level, such as 'NORMAL' or 'HIGH', if null (i.e. not specified), \n+// 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+//  The model to pass to update method.\n+UpdateChatMessageRequest message = new UpdateChatMessageRequest()\n+    .setContent(content)\n+    .setPriority(priority);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.updateChatMessage(threadId,\n+    messageId,\n+    message, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a message\n+\n+Use the `deleteChatMessage` method to delete a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.deleteChatMessage(threadId, messageId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Thread Member Operations\n+\n+#### Get thread members\n+\n+Use the `listChatThreadMembers` method to retrieve the members participating in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.listChatThreadMembersPages(threadId,\n+    new Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>> firstPage,\n+        Response response) {\n+         // pageCollection enables enumerating list of chat members.\n+         pageCollection.getFirstPage(new Callback<Page<ChatThreadMember>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadMember> firstPage, Response response) {\n+                for (ChatThreadMember member : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextMembersPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+         }\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextMembersPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadMember>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadMember> nextPage, Response response) {\n+            for (ChatThreadMember member : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMembersPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Add thread members\n+\n+Use the `add` method to add members to a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"a new member\";\n+members.add(new ChatThreadMember().setId(id).setDisplayName(displayName));\n+// The model to pass to add method.\n+AddChatThreadMembersRequest threadMembers = new AddChatThreadMembersRequest()\n+    .setMembers(members);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.addChatThreadMembers(threadId, threadMembers, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Remove a thread member\n+\n+Use the `removeChatThreadMember` method to remove a member from a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the member.\n+final String memberId = \"<member_id>\";\n+client.removeChatThreadMember(threadId, memberId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Events Operations\n+\n+#### Send a typing notification\n+\n+Use the `sendTypingNotification` method to post a typing notification event to a thread, on behalf of a user.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendTypingNotification(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Send read receipt\n+\n+Use the `send` method to post a read receipt event to a thread, on behalf of a user.\n+\n+```java\n+// The unique ID of the member.\n+final String messageId = \"<message_id>\";\n+// The model to be passed to send method.\n+SendReadReceiptRequest readReceipt = new SendReadReceiptRequest()\n+    .setChatMessageId(messageId);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatReadReceipt(threadId, readReceipt, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get read receipts\n+\n+Use the `listChatReadReceipts` method to retrieve read receipts for a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.listChatReadReceiptsPages(threadId,\n+    new Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>> result,\n+        Response response) {\n+         // pageCollection enables enumerating list of chat members.\n+         pageCollection.getFirstPage(new Callback<Page<ReadReceipt>>() {\n+            @Override\n+            public void onSuccess(Page<ReadReceipt> firstPage, Response response) {\n+                for (ReadReceipt receipt : firstPage.getItems()) {\n+                    //TODO: Take further action", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 650}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5ODgwMg==", "bodyText": "nit;\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            //TODO: Take further action\n          \n          \n            \n                            // TODO: Take further action.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499098802", "createdAt": "2020-10-03T00:42:32Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Message Operations\n+\n+#### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+// The display name of the sender, if null (i.e. not specified), an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'NORMAL' or 'HIIGH', \n+// if null (i.e. not specified), 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {\n+    @Override\n+    public void onSuccess(ChatMessage result, Response response) {\n+        // `ChatMessage` is the response returned from getting a message.\n+        final String content = result.getContent();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List messages\n+\n+Use the `listChatMessages` method to retrieve messages in a thread.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+        \n+client.listChatMessagesPages(threadId,\n+    maxPageSize,\n+    startTime,\n+    new Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>>() {\n+        @Override\n+        public void onSuccess(AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection,\n+            Response response) {\n+            // pageCollection enables enumerating list of messages.\n+            pageCollection.getFirstPage(new Callback<Page<ChatMessage>>() {\n+                @Override\n+                public void onSuccess(Page<ChatMessage> firstPage, Response response) {\n+                    for (ChatMessage message : firstPage.getItems()) {\n+                        //TODO: Take further action\n+                    }\n+                    retrieveNextMessagePages(firstPage.getPageId(), pageCollection);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable throwable, Response response) {\n+                    // TODO: Display error message.\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+});\n+\n+void retrieveNextMessagePages(String nextPageId,\n+    AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatMessage>>() {\n+        @Override\n+        public void onSuccess(Page<ChatMessage> nextPage, Response response) {\n+            for (ChatMessage thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMessagePages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+\n+```\n+\n+#### Update a message\n+\n+Use the `update` method to update a message in a thread.\n+\n+```java\n+// The message content to be updated.\n+final String content = \"updated message\";\n+// The message priority level, such as 'NORMAL' or 'HIGH', if null (i.e. not specified), \n+// 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+//  The model to pass to update method.\n+UpdateChatMessageRequest message = new UpdateChatMessageRequest()\n+    .setContent(content)\n+    .setPriority(priority);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.updateChatMessage(threadId,\n+    messageId,\n+    message, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a message\n+\n+Use the `deleteChatMessage` method to delete a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.deleteChatMessage(threadId, messageId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Thread Member Operations\n+\n+#### Get thread members\n+\n+Use the `listChatThreadMembers` method to retrieve the members participating in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.listChatThreadMembersPages(threadId,\n+    new Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>> firstPage,\n+        Response response) {\n+         // pageCollection enables enumerating list of chat members.\n+         pageCollection.getFirstPage(new Callback<Page<ChatThreadMember>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadMember> firstPage, Response response) {\n+                for (ChatThreadMember member : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextMembersPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+         }\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextMembersPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadMember>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadMember> nextPage, Response response) {\n+            for (ChatThreadMember member : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMembersPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Add thread members\n+\n+Use the `add` method to add members to a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"a new member\";\n+members.add(new ChatThreadMember().setId(id).setDisplayName(displayName));\n+// The model to pass to add method.\n+AddChatThreadMembersRequest threadMembers = new AddChatThreadMembersRequest()\n+    .setMembers(members);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.addChatThreadMembers(threadId, threadMembers, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Remove a thread member\n+\n+Use the `removeChatThreadMember` method to remove a member from a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the member.\n+final String memberId = \"<member_id>\";\n+client.removeChatThreadMember(threadId, memberId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Events Operations\n+\n+#### Send a typing notification\n+\n+Use the `sendTypingNotification` method to post a typing notification event to a thread, on behalf of a user.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendTypingNotification(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Send read receipt\n+\n+Use the `send` method to post a read receipt event to a thread, on behalf of a user.\n+\n+```java\n+// The unique ID of the member.\n+final String messageId = \"<message_id>\";\n+// The model to be passed to send method.\n+SendReadReceiptRequest readReceipt = new SendReadReceiptRequest()\n+    .setChatMessageId(messageId);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatReadReceipt(threadId, readReceipt, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get read receipts\n+\n+Use the `listChatReadReceipts` method to retrieve read receipts for a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.listChatReadReceiptsPages(threadId,\n+    new Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>> result,\n+        Response response) {\n+         // pageCollection enables enumerating list of chat members.\n+         pageCollection.getFirstPage(new Callback<Page<ReadReceipt>>() {\n+            @Override\n+            public void onSuccess(Page<ReadReceipt> firstPage, Response response) {\n+                for (ReadReceipt receipt : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextReceiptsPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+         }\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextReceiptsPages(String nextPageId,\n+    AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ReadReceipt>>() {\n+        @Override\n+        public void onSuccess(Page<ReadReceipt> nextPage, Response response) {\n+            for (ReadReceipt receipt : nextPage.getItems()) {\n+                //TODO: Take further action", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 674}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5OTA0Mw==", "bodyText": "Maybe we can change this based on the context.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // TODO: Display error message.\n          \n          \n            \n                    // TODO: Handle error.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499099043", "createdAt": "2020-10-03T00:44:23Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Message Operations\n+\n+#### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+// The display name of the sender, if null (i.e. not specified), an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'NORMAL' or 'HIIGH', \n+// if null (i.e. not specified), 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {\n+    @Override\n+    public void onSuccess(ChatMessage result, Response response) {\n+        // `ChatMessage` is the response returned from getting a message.\n+        final String content = result.getContent();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List messages\n+\n+Use the `listChatMessages` method to retrieve messages in a thread.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+        \n+client.listChatMessagesPages(threadId,\n+    maxPageSize,\n+    startTime,\n+    new Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>>() {\n+        @Override\n+        public void onSuccess(AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection,\n+            Response response) {\n+            // pageCollection enables enumerating list of messages.\n+            pageCollection.getFirstPage(new Callback<Page<ChatMessage>>() {\n+                @Override\n+                public void onSuccess(Page<ChatMessage> firstPage, Response response) {\n+                    for (ChatMessage message : firstPage.getItems()) {\n+                        //TODO: Take further action\n+                    }\n+                    retrieveNextMessagePages(firstPage.getPageId(), pageCollection);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable throwable, Response response) {\n+                    // TODO: Display error message.\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+});\n+\n+void retrieveNextMessagePages(String nextPageId,\n+    AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatMessage>>() {\n+        @Override\n+        public void onSuccess(Page<ChatMessage> nextPage, Response response) {\n+            for (ChatMessage thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMessagePages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+\n+```\n+\n+#### Update a message\n+\n+Use the `update` method to update a message in a thread.\n+\n+```java\n+// The message content to be updated.\n+final String content = \"updated message\";\n+// The message priority level, such as 'NORMAL' or 'HIGH', if null (i.e. not specified), \n+// 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+//  The model to pass to update method.\n+UpdateChatMessageRequest message = new UpdateChatMessageRequest()\n+    .setContent(content)\n+    .setPriority(priority);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.updateChatMessage(threadId,\n+    messageId,\n+    message, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a message\n+\n+Use the `deleteChatMessage` method to delete a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.deleteChatMessage(threadId, messageId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Thread Member Operations\n+\n+#### Get thread members\n+\n+Use the `listChatThreadMembers` method to retrieve the members participating in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.listChatThreadMembersPages(threadId,\n+    new Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>> firstPage,\n+        Response response) {\n+         // pageCollection enables enumerating list of chat members.\n+         pageCollection.getFirstPage(new Callback<Page<ChatThreadMember>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadMember> firstPage, Response response) {\n+                for (ChatThreadMember member : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextMembersPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+         }\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextMembersPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadMember>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadMember> nextPage, Response response) {\n+            for (ChatThreadMember member : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMembersPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Add thread members\n+\n+Use the `add` method to add members to a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"a new member\";\n+members.add(new ChatThreadMember().setId(id).setDisplayName(displayName));\n+// The model to pass to add method.\n+AddChatThreadMembersRequest threadMembers = new AddChatThreadMembersRequest()\n+    .setMembers(members);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.addChatThreadMembers(threadId, threadMembers, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Remove a thread member\n+\n+Use the `removeChatThreadMember` method to remove a member from a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the member.\n+final String memberId = \"<member_id>\";\n+client.removeChatThreadMember(threadId, memberId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Events Operations\n+\n+#### Send a typing notification\n+\n+Use the `sendTypingNotification` method to post a typing notification event to a thread, on behalf of a user.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendTypingNotification(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Send read receipt\n+\n+Use the `send` method to post a read receipt event to a thread, on behalf of a user.\n+\n+```java\n+// The unique ID of the member.\n+final String messageId = \"<message_id>\";\n+// The model to be passed to send method.\n+SendReadReceiptRequest readReceipt = new SendReadReceiptRequest()\n+    .setChatMessageId(messageId);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatReadReceipt(threadId, readReceipt, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get read receipts\n+\n+Use the `listChatReadReceipts` method to retrieve read receipts for a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.listChatReadReceiptsPages(threadId,\n+    new Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>> result,\n+        Response response) {\n+         // pageCollection enables enumerating list of chat members.\n+         pageCollection.getFirstPage(new Callback<Page<ReadReceipt>>() {\n+            @Override\n+            public void onSuccess(Page<ReadReceipt> firstPage, Response response) {\n+                for (ReadReceipt receipt : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextReceiptsPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+         }\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextReceiptsPages(String nextPageId,\n+    AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ReadReceipt>>() {\n+        @Override\n+        public void onSuccess(Page<ReadReceipt> nextPage, Response response) {\n+            for (ReadReceipt receipt : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextReceiptsPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+# Troubleshooting\n+\n+## General\n+\n+When an error occurs, the client calls the callback's `onFailure` method. You can use the provided `Throwable` to act upon the failure.\n+\n+```java\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 698}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5OTA4Ng==", "bodyText": "I'm thinking we could probably do this for all other instances where onFailure() is present. What do you think?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499099086", "createdAt": "2020-10-03T00:44:55Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Message Operations\n+\n+#### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+// The display name of the sender, if null (i.e. not specified), an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'NORMAL' or 'HIIGH', \n+// if null (i.e. not specified), 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {\n+    @Override\n+    public void onSuccess(ChatMessage result, Response response) {\n+        // `ChatMessage` is the response returned from getting a message.\n+        final String content = result.getContent();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List messages\n+\n+Use the `listChatMessages` method to retrieve messages in a thread.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+        \n+client.listChatMessagesPages(threadId,\n+    maxPageSize,\n+    startTime,\n+    new Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>>() {\n+        @Override\n+        public void onSuccess(AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection,\n+            Response response) {\n+            // pageCollection enables enumerating list of messages.\n+            pageCollection.getFirstPage(new Callback<Page<ChatMessage>>() {\n+                @Override\n+                public void onSuccess(Page<ChatMessage> firstPage, Response response) {\n+                    for (ChatMessage message : firstPage.getItems()) {\n+                        //TODO: Take further action\n+                    }\n+                    retrieveNextMessagePages(firstPage.getPageId(), pageCollection);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable throwable, Response response) {\n+                    // TODO: Display error message.\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+});\n+\n+void retrieveNextMessagePages(String nextPageId,\n+    AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatMessage>>() {\n+        @Override\n+        public void onSuccess(Page<ChatMessage> nextPage, Response response) {\n+            for (ChatMessage thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMessagePages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+\n+```\n+\n+#### Update a message\n+\n+Use the `update` method to update a message in a thread.\n+\n+```java\n+// The message content to be updated.\n+final String content = \"updated message\";\n+// The message priority level, such as 'NORMAL' or 'HIGH', if null (i.e. not specified), \n+// 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+//  The model to pass to update method.\n+UpdateChatMessageRequest message = new UpdateChatMessageRequest()\n+    .setContent(content)\n+    .setPriority(priority);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.updateChatMessage(threadId,\n+    messageId,\n+    message, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a message\n+\n+Use the `deleteChatMessage` method to delete a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.deleteChatMessage(threadId, messageId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Thread Member Operations\n+\n+#### Get thread members\n+\n+Use the `listChatThreadMembers` method to retrieve the members participating in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.listChatThreadMembersPages(threadId,\n+    new Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>> firstPage,\n+        Response response) {\n+         // pageCollection enables enumerating list of chat members.\n+         pageCollection.getFirstPage(new Callback<Page<ChatThreadMember>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadMember> firstPage, Response response) {\n+                for (ChatThreadMember member : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextMembersPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+         }\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextMembersPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadMember>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadMember> nextPage, Response response) {\n+            for (ChatThreadMember member : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMembersPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Add thread members\n+\n+Use the `add` method to add members to a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"a new member\";\n+members.add(new ChatThreadMember().setId(id).setDisplayName(displayName));\n+// The model to pass to add method.\n+AddChatThreadMembersRequest threadMembers = new AddChatThreadMembersRequest()\n+    .setMembers(members);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.addChatThreadMembers(threadId, threadMembers, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Remove a thread member\n+\n+Use the `removeChatThreadMember` method to remove a member from a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the member.\n+final String memberId = \"<member_id>\";\n+client.removeChatThreadMember(threadId, memberId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Events Operations\n+\n+#### Send a typing notification\n+\n+Use the `sendTypingNotification` method to post a typing notification event to a thread, on behalf of a user.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendTypingNotification(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Send read receipt\n+\n+Use the `send` method to post a read receipt event to a thread, on behalf of a user.\n+\n+```java\n+// The unique ID of the member.\n+final String messageId = \"<message_id>\";\n+// The model to be passed to send method.\n+SendReadReceiptRequest readReceipt = new SendReadReceiptRequest()\n+    .setChatMessageId(messageId);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatReadReceipt(threadId, readReceipt, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get read receipts\n+\n+Use the `listChatReadReceipts` method to retrieve read receipts for a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.listChatReadReceiptsPages(threadId,\n+    new Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>> result,\n+        Response response) {\n+         // pageCollection enables enumerating list of chat members.\n+         pageCollection.getFirstPage(new Callback<Page<ReadReceipt>>() {\n+            @Override\n+            public void onSuccess(Page<ReadReceipt> firstPage, Response response) {\n+                for (ReadReceipt receipt : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextReceiptsPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+         }\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextReceiptsPages(String nextPageId,\n+    AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ReadReceipt>>() {\n+        @Override\n+        public void onSuccess(Page<ReadReceipt> nextPage, Response response) {\n+            for (ReadReceipt receipt : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextReceiptsPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+# Troubleshooting\n+\n+## General\n+\n+When an error occurs, the client calls the callback's `onFailure` method. You can use the provided `Throwable` to act upon the failure.\n+\n+```java\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5OTA0Mw=="}, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 698}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5OTMzNA==", "bodyText": "Did this mean to say \"along with links out to the appropriate code samples.\" at the end? Or maybe \"sample tests\"?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499099334", "createdAt": "2020-10-03T00:46:05Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Message Operations\n+\n+#### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+// The display name of the sender, if null (i.e. not specified), an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'NORMAL' or 'HIIGH', \n+// if null (i.e. not specified), 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {\n+    @Override\n+    public void onSuccess(ChatMessage result, Response response) {\n+        // `ChatMessage` is the response returned from getting a message.\n+        final String content = result.getContent();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List messages\n+\n+Use the `listChatMessages` method to retrieve messages in a thread.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+        \n+client.listChatMessagesPages(threadId,\n+    maxPageSize,\n+    startTime,\n+    new Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>>() {\n+        @Override\n+        public void onSuccess(AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection,\n+            Response response) {\n+            // pageCollection enables enumerating list of messages.\n+            pageCollection.getFirstPage(new Callback<Page<ChatMessage>>() {\n+                @Override\n+                public void onSuccess(Page<ChatMessage> firstPage, Response response) {\n+                    for (ChatMessage message : firstPage.getItems()) {\n+                        //TODO: Take further action\n+                    }\n+                    retrieveNextMessagePages(firstPage.getPageId(), pageCollection);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable throwable, Response response) {\n+                    // TODO: Display error message.\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+});\n+\n+void retrieveNextMessagePages(String nextPageId,\n+    AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatMessage>>() {\n+        @Override\n+        public void onSuccess(Page<ChatMessage> nextPage, Response response) {\n+            for (ChatMessage thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMessagePages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+\n+```\n+\n+#### Update a message\n+\n+Use the `update` method to update a message in a thread.\n+\n+```java\n+// The message content to be updated.\n+final String content = \"updated message\";\n+// The message priority level, such as 'NORMAL' or 'HIGH', if null (i.e. not specified), \n+// 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+//  The model to pass to update method.\n+UpdateChatMessageRequest message = new UpdateChatMessageRequest()\n+    .setContent(content)\n+    .setPriority(priority);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.updateChatMessage(threadId,\n+    messageId,\n+    message, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a message\n+\n+Use the `deleteChatMessage` method to delete a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.deleteChatMessage(threadId, messageId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Thread Member Operations\n+\n+#### Get thread members\n+\n+Use the `listChatThreadMembers` method to retrieve the members participating in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.listChatThreadMembersPages(threadId,\n+    new Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>> firstPage,\n+        Response response) {\n+         // pageCollection enables enumerating list of chat members.\n+         pageCollection.getFirstPage(new Callback<Page<ChatThreadMember>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadMember> firstPage, Response response) {\n+                for (ChatThreadMember member : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextMembersPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+         }\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextMembersPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadMember>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadMember> nextPage, Response response) {\n+            for (ChatThreadMember member : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMembersPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Add thread members\n+\n+Use the `add` method to add members to a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"a new member\";\n+members.add(new ChatThreadMember().setId(id).setDisplayName(displayName));\n+// The model to pass to add method.\n+AddChatThreadMembersRequest threadMembers = new AddChatThreadMembersRequest()\n+    .setMembers(members);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.addChatThreadMembers(threadId, threadMembers, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Remove a thread member\n+\n+Use the `removeChatThreadMember` method to remove a member from a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the member.\n+final String memberId = \"<member_id>\";\n+client.removeChatThreadMember(threadId, memberId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Events Operations\n+\n+#### Send a typing notification\n+\n+Use the `sendTypingNotification` method to post a typing notification event to a thread, on behalf of a user.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendTypingNotification(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Send read receipt\n+\n+Use the `send` method to post a read receipt event to a thread, on behalf of a user.\n+\n+```java\n+// The unique ID of the member.\n+final String messageId = \"<message_id>\";\n+// The model to be passed to send method.\n+SendReadReceiptRequest readReceipt = new SendReadReceiptRequest()\n+    .setChatMessageId(messageId);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatReadReceipt(threadId, readReceipt, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get read receipts\n+\n+Use the `listChatReadReceipts` method to retrieve read receipts for a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.listChatReadReceiptsPages(threadId,\n+    new Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>> result,\n+        Response response) {\n+         // pageCollection enables enumerating list of chat members.\n+         pageCollection.getFirstPage(new Callback<Page<ReadReceipt>>() {\n+            @Override\n+            public void onSuccess(Page<ReadReceipt> firstPage, Response response) {\n+                for (ReadReceipt receipt : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextReceiptsPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+         }\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextReceiptsPages(String nextPageId,\n+    AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ReadReceipt>>() {\n+        @Override\n+        public void onSuccess(Page<ReadReceipt> nextPage, Response response) {\n+            for (ReadReceipt receipt : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextReceiptsPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+# Troubleshooting\n+\n+## General\n+\n+When an error occurs, the client calls the callback's `onFailure` method. You can use the provided `Throwable` to act upon the failure.\n+\n+```java\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+# Next steps\n+\n+More sample code should go here, along with links out to the appropriate example tests.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 705}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5OTQyMA==", "bodyText": "We should agree to a standard about if we will have one empty line after any header or not, just to be consistent. Not required for this release.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499099420", "createdAt": "2020-10-03T00:46:45Z", "author": {"login": "vcolin7"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -0,0 +1,714 @@\n+# Azure Communication Chat Service client library for Android\n+This package contains the Android SDK for Azure Communication Services for Chat.\n+Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview).\n+\n+# Getting started\n+\n+## Prerequisites\n+\n+* You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this library.\n+* An Azure Communication Resource, learn how to create one from [Create an Azure Communication Resource](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource).\n+* The client libraries natively target Android API level 21. Your application's minSdkVersion must be set to 21 or higher to use this library.\n+* The library is written in Java 8. Your application must be built with Android Gradle Plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n+\n+### Versions available\n+The current version of this library is **1.0.0-beta.1**.\n+\n+> Note: The SDK is currently in **beta**. The API surface and feature sets are subject to change at any time before **GA**. We do not currently recommend them for production use.\n+\n+### Install the library\n+To install the Azure client libraries for Android, add them as dependencies within your\n+[Gradle](#add-a-dependency-with-gradle) or\n+[Maven](#add-a-dependency-with-maven) build scripts.\n+\n+#### Add a dependency with Gradle\n+To import the library into your project using the [Gradle](https://gradle.org/) build system, follow the instructions in [Add build dependencies](https://developer.android.com/studio/build/dependencies):\n+\n+Add an `implementation` configuration to the `dependencies` block of your app's `build.gradle` or `build.gradle.kts` file, specifying the library's name and the version you wish to use:\n+\n+```gradle\n+// build.gradle\n+dependencies {\n+    ...\n+    implementation \"com.azure.android:azure-communication-chat:1.0.0-beta.1\"\n+}\n+\n+// build.gradle.kts\n+dependencies {\n+    ...\n+    implementation(\"com.azure.android:azure-communication-chat:1.0.0-beta.1\")\n+}\n+```\n+\n+#### Add a dependency with Maven\n+To import the library into your project using the [Maven](https://maven.apache.org/) build system, add it to the `dependencies` section of your app's `pom.xml` file, specifying its artifact ID and the version you wish to use:\n+\n+```xml\n+<dependency>\n+  <groupId>com.azure.android</groupId>\n+  <artifactId>azure-communication-chat</artifactId>\n+  <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+## Create the AzureCommunicationChatClient\n+\n+Use the `AzureCommunicationChatServiceAsyncClient.Builder` to configure and create `AzureCommunicationChatClient`.\n+\n+```java\n+import com.azure.android.communication.chat.AzureCommunicationChatServiceAsyncClient;\n+import com.azure.android.core.http.HttpHeader;\n+\n+final String endpoint = \"https://<resource>.communication.azure.com\";\n+final String userAccessToken = \"<user_access_token>\";\n+\n+AzureCommunicationChatServiceAsyncClient client\n+    = new AzureCommunicationChatServiceAsyncClient.Builder()\n+    .endpoint(endpoint)\n+    .credentialInterceptor(chain -> chain.proceed(chain.request()\n+        .newBuilder()\n+        .header(HttpHeader.AUTHORIZATION, userAccessToken)\n+        .build());\n+```\n+\n+# Key concepts\n+\n+## Users and User Access Tokens\n+\n+User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n+\n+The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+\n+## Chat Thread\n+\n+A chat conversation is represented by a chat thread. Each user in the thread is called a thread member. Thread members can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near real-time updates for when others are typing and when they have read the messages. To learn more, read about chat concepts [here](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts).\n+\n+# Chat operations\n+\n+Once you initialize an `AzureCommunicationChatClient` class, you can perform the following chat operations:\n+\n+## Thread Operations\n+\n+- [Create a thread](#create-a-thread)\n+- [Get a thread](#get-a-thread)\n+- [List threads](#list-threads)\n+- [Update a thread](#update-a-thread)\n+- [Delete a thread](#delete-a-thread)\n+\n+## Message Operations\n+\n+- [Send a message](#send-a-message)\n+- [Get a message](#get-a-message)\n+- [List messages](#list-messages)\n+- [Update a message](#update-a-message)\n+- [Delete a message](#delete-a-message)\n+\n+## Thread Member Operations\n+\n+- [Get thread members](#get-thread-members)\n+- [Add thread members](#add-thread-members)\n+- [Remove a thread member](#remove-a-thread-member)\n+\n+## Events Operations\n+\n+- [Send a typing notification](#send-a-typing-notification)\n+- [Send read receipt](#send-read-receipt)\n+- [Get read receipts](#get-read-receipts)\n+\n+# Examples\n+\n+### Thread Operations\n+\n+#### Create a thread\n+\n+Use the `create` method to create a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The communication user id you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"initial member\";\n+members.add(new ChatThreadMember()\n+    .setId(id)\n+    .setDisplayName(displayName));\n+\n+// The topic for the thread.\n+final String topic = \"General\";\n+// The model to pass to the create method.\n+CreateChatThreadRequest thread = new CreateChatThreadRequest()\n+    .setTopic(topic)\n+    .setMembers(members);\n+\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onSuccess(MultiStatusResponse result, okhttp3.Response response) {\n+        // MultiStatusResponse is the result returned from creating a thread.\n+        // It has a 'multipleStatus' property which represents a list of IndividualStatusResponse.\n+        String threadId;\n+        List<IndividualStatusResponse> statusList = result.getMultipleStatus();\n+        for (IndividualStatusResponse  status : statusList) {\n+            if (status.getId().endsWith(\"@thread.v2\")\n+                && status.getType().contentEquals(\"Thread\")) {\n+                threadId = status.getId();\n+                break;\n+            }\n+        }\n+        // TODO: Take further action.\n+    }\n+\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a thread\n+\n+Use the `getChatThread` method to retrieve a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.getChatThread(threadId, new Callback<ChatThread>() {\n+    @Override\n+    public void onSuccess(ChatThread thread, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List threads\n+\n+Use the `listChatThreads` method to retrieve a list of threads.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+client.listChatThreadsPages(maxPageSize, startTime,\n+    new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo,\n+        Page<ChatThreadInfo>> pageCollection,\n+        Response response) {\n+     // pageCollection enables enumerating a list of threads.\n+     pageCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadInfo> firstPage, Response response) {\n+                for (ChatThreadInfo thread : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextThreadPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextThreadPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadInfo>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadInfo> nextPage, Response response) {\n+            for (ChatThreadInfo thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextThreadPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Update a thread\n+\n+Use the `update` method to update a thread's properties.\n+\n+```java\n+// The new topic for the thread.\n+final String topic = \"updated topic\";\n+// The model to pass to update method.\n+UpdateChatThreadRequest thread = new UpdateChatThreadRequest()\n+    .setTopic(topic);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.updateChatThread(threadId, thread, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a thread\n+\n+Use `deleteChatThread` method to delete a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.deleteChatThread(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Message Operations\n+\n+#### Send a message\n+\n+Use the `send` method to send a message to a thread.\n+```java\n+// The chat message content, required.\n+final String content = \"Test message 1\";\n+// The display name of the sender, if null (i.e. not specified), an empty name will be set.\n+final String senderDisplayName = \"An important person\";\n+// The message priority level, such as 'NORMAL' or 'HIIGH', \n+// if null (i.e. not specified), 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+SendChatMessageRequest message = new SendChatMessageRequest()\n+    .setPriority(priority)\n+    .setContent(content)\n+    .setSenderDisplayName(senderDisplayName);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatMessage(threadId, message, new Callback<SendChatMessageResult>() {\n+    @Override\n+    public void onSuccess(SendChatMessageResult result, Response response) {\n+        // SendChatMessageResult is the response returned from sending a message, it contains an id, \n+        // which is the unique ID of the message.\n+        final String chatMessageId = result.getId();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get a message\n+\n+Use the `getChatMessage` method to retrieve a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String chatMessageId = \"<message_id>\";\n+\n+client.getChatMessage(threadId,\n+    chatMessageId,\n+    new Callback<ChatMessage>() {\n+    @Override\n+    public void onSuccess(ChatMessage result, Response response) {\n+        // `ChatMessage` is the response returned from getting a message.\n+        final String content = result.getContent();\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### List messages\n+\n+Use the `listChatMessages` method to retrieve messages in a thread.\n+\n+```java\n+// The maximum number of messages to be returned per page, optional.\n+final int maxPageSize = 10;\n+// The thread start time to consider in the query, optional.\n+final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-08T00:00:00Z\");\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+        \n+client.listChatMessagesPages(threadId,\n+    maxPageSize,\n+    startTime,\n+    new Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>>() {\n+        @Override\n+        public void onSuccess(AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection,\n+            Response response) {\n+            // pageCollection enables enumerating list of messages.\n+            pageCollection.getFirstPage(new Callback<Page<ChatMessage>>() {\n+                @Override\n+                public void onSuccess(Page<ChatMessage> firstPage, Response response) {\n+                    for (ChatMessage message : firstPage.getItems()) {\n+                        //TODO: Take further action\n+                    }\n+                    retrieveNextMessagePages(firstPage.getPageId(), pageCollection);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable throwable, Response response) {\n+                    // TODO: Display error message.\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+});\n+\n+void retrieveNextMessagePages(String nextPageId,\n+    AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatMessage>>() {\n+        @Override\n+        public void onSuccess(Page<ChatMessage> nextPage, Response response) {\n+            for (ChatMessage thread : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMessagePages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+\n+```\n+\n+#### Update a message\n+\n+Use the `update` method to update a message in a thread.\n+\n+```java\n+// The message content to be updated.\n+final String content = \"updated message\";\n+// The message priority level, such as 'NORMAL' or 'HIGH', if null (i.e. not specified), \n+// 'NORMAL' will be set.\n+final ChatMessagePriority priority = ChatMessagePriority.HIGH;\n+//  The model to pass to update method.\n+UpdateChatMessageRequest message = new UpdateChatMessageRequest()\n+    .setContent(content)\n+    .setPriority(priority);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.updateChatMessage(threadId,\n+    messageId,\n+    message, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Delete a message\n+\n+Use the `deleteChatMessage` method to delete a message in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the message.\n+final String messageId = \"message_id\";\n+client.deleteChatMessage(threadId, messageId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Thread Member Operations\n+\n+#### Get thread members\n+\n+Use the `listChatThreadMembers` method to retrieve the members participating in a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.listChatThreadMembersPages(threadId,\n+    new Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>> firstPage,\n+        Response response) {\n+         // pageCollection enables enumerating list of chat members.\n+         pageCollection.getFirstPage(new Callback<Page<ChatThreadMember>>() {\n+            @Override\n+            public void onSuccess(Page<ChatThreadMember> firstPage, Response response) {\n+                for (ChatThreadMember member : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextMembersPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+         }\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextMembersPages(String nextPageId,\n+    AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ChatThreadMember>>() {\n+        @Override\n+        public void onSuccess(Page<ChatThreadMember> nextPage, Response response) {\n+            for (ChatThreadMember member : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextMembersPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+#### Add thread members\n+\n+Use the `add` method to add members to a thread.\n+\n+```java\n+//  The list of ChatThreadMember to be added to the thread.\n+List<ChatThreadMember> members = new ArrayList<>();\n+// The CommunicationUser.identifier you created before, required.\n+final String id = \"<user_id>\";\n+// The display name for the thread member.\n+final String displayName = \"a new member\";\n+members.add(new ChatThreadMember().setId(id).setDisplayName(displayName));\n+// The model to pass to add method.\n+AddChatThreadMembersRequest threadMembers = new AddChatThreadMembersRequest()\n+    .setMembers(members);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.addChatThreadMembers(threadId, threadMembers, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Remove a thread member\n+\n+Use the `removeChatThreadMember` method to remove a member from a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+// The unique ID of the member.\n+final String memberId = \"<member_id>\";\n+client.removeChatThreadMember(threadId, memberId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+### Events Operations\n+\n+#### Send a typing notification\n+\n+Use the `sendTypingNotification` method to post a typing notification event to a thread, on behalf of a user.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendTypingNotification(threadId, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Send read receipt\n+\n+Use the `send` method to post a read receipt event to a thread, on behalf of a user.\n+\n+```java\n+// The unique ID of the member.\n+final String messageId = \"<message_id>\";\n+// The model to be passed to send method.\n+SendReadReceiptRequest readReceipt = new SendReadReceiptRequest()\n+    .setChatMessageId(messageId);\n+\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.sendChatReadReceipt(threadId, readReceipt, new Callback<Void>() {\n+    @Override\n+    public void onSuccess(Void result, Response response) {\n+        //TODO: Take further action\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+#### Get read receipts\n+\n+Use the `listChatReadReceipts` method to retrieve read receipts for a thread.\n+\n+```java\n+// The unique ID of the thread.\n+final String threadId = \"<thread_id>\";\n+client.listChatReadReceiptsPages(threadId,\n+    new Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>>() {\n+    @Override\n+    public void onSuccess(AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>> result,\n+        Response response) {\n+         // pageCollection enables enumerating list of chat members.\n+         pageCollection.getFirstPage(new Callback<Page<ReadReceipt>>() {\n+            @Override\n+            public void onSuccess(Page<ReadReceipt> firstPage, Response response) {\n+                for (ReadReceipt receipt : firstPage.getItems()) {\n+                    //TODO: Take further action\n+                }\n+                retrieveNextReceiptsPages(firstPage.getPageId(), pageCollection);\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                // TODO: Display error message.\n+            }\n+         }\n+    }\n+\n+    @Override\n+    public void onFailure(Throwable throwable, Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+\n+void retrieveNextReceiptsPages(String nextPageId,\n+    AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>> pageCollection) {\n+    pageCollection.getPage(nextPageId, new Callback<Page<ReadReceipt>>() {\n+        @Override\n+        public void onSuccess(Page<ReadReceipt> nextPage, Response response) {\n+            for (ReadReceipt receipt : nextPage.getItems()) {\n+                //TODO: Take further action\n+            }\n+            if (nextPage.getPageId() != null) {\n+                retrieveNextReceiptsPages(nextPage.getPageId(), pageCollection);\n+            }\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+            // TODO: Display error message.\n+        }\n+    });\n+}\n+```\n+\n+# Troubleshooting\n+\n+## General\n+\n+When an error occurs, the client calls the callback's `onFailure` method. You can use the provided `Throwable` to act upon the failure.\n+\n+```java\n+client.createChatThread(thread, new Callback<MultiStatusResponse>() {\n+    public void onFailure(Throwable throwable, okhttp3.Response response) {\n+        // TODO: Display error message.\n+    }\n+});\n+```\n+\n+# Next steps\n+\n+More sample code should go here, along with links out to the appropriate example tests.\n+\n+# Contributing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8364424432166930561b2856ae35d14d39520f3"}, "originalPosition": 707}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43bb7ebf521c6c316a869da37e6871de9cc46d7a", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/43bb7ebf521c6c316a869da37e6871de9cc46d7a", "committedDate": "2020-10-03T01:15:34Z", "message": "README details and gradle comment should be consistent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e76cd9b9e017884a443f20302fbc1aafca0215b9", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/e76cd9b9e017884a443f20302fbc1aafca0215b9", "committedDate": "2020-10-03T01:58:34Z", "message": "README updates according to feedback"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1233, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}