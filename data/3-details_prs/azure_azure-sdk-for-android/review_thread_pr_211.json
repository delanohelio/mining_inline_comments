{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxOTYwNTM1", "number": 211, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMToxMTozOFrODlQj6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMToyMzo1M1rODlQsMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzk1MjQwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMToxMTozOFrOFyDRmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMDoyODoyMVrOFyo5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAyNjc3OQ==", "bodyText": "What was causing this warning? It doesn't seem like it should be triggering.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/211#discussion_r388026779", "createdAt": "2020-03-05T01:11:38Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogUtils.java", "diffHunk": "@@ -40,33 +30,45 @@ static long getContentLength(Headers headers) {\n      * @return \"Log body\" if the body should be logged in its entirety, otherwise a message indicating why the body\n      * was not logged is returned.\n      */\n-    static String evaluateBody(Headers headers) {\n+    @SuppressWarnings(\"ConstantConditions\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7d7ecc07e7625df9c67856c57058d9e9ddb9a54"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyODA5OQ==", "bodyText": "The IDE kept complaining about the call to contentType().toString() in lines 46 and 50. To get rid of it I just pushed a small change where we create a variable containing the result of calling responseBody.contentType() and use it to call toString().", "url": "https://github.com/Azure/azure-sdk-for-android/pull/211#discussion_r388628099", "createdAt": "2020-03-05T23:38:22Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogUtils.java", "diffHunk": "@@ -40,33 +30,45 @@ static long getContentLength(Headers headers) {\n      * @return \"Log body\" if the body should be logged in its entirety, otherwise a message indicating why the body\n      * was not logged is returned.\n      */\n-    static String evaluateBody(Headers headers) {\n+    @SuppressWarnings(\"ConstantConditions\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAyNjc3OQ=="}, "originalCommit": {"oid": "f7d7ecc07e7625df9c67856c57058d9e9ddb9a54"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY0MzEyNQ==", "bodyText": "Going to check out this PR and see what the heck is going on there because I can't see any reason why that would generate this warning.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/211#discussion_r388643125", "createdAt": "2020-03-06T00:28:21Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogUtils.java", "diffHunk": "@@ -40,33 +30,45 @@ static long getContentLength(Headers headers) {\n      * @return \"Log body\" if the body should be logged in its entirety, otherwise a message indicating why the body\n      * was not logged is returned.\n      */\n-    static String evaluateBody(Headers headers) {\n+    @SuppressWarnings(\"ConstantConditions\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAyNjc3OQ=="}, "originalCommit": {"oid": "f7d7ecc07e7625df9c67856c57058d9e9ddb9a54"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzk1NTI4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LoggingInterceptor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMToxMzoxOFrOFyDTkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMDozMTowNlrOFyo9aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAyNzI4MQ==", "bodyText": "Why do these headers get special treatment?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/211#discussion_r388027281", "createdAt": "2020-03-05T01:13:18Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LoggingInterceptor.java", "diffHunk": "@@ -96,24 +103,42 @@ public Response intercept(@NonNull Chain chain) throws IOException {\n      *\n      * @param request The HTTP request being sent to Azure.\n      */\n-    private void logRequest(final Request request) {\n+    private void logRequest(final Request request) throws IOException {\n         HttpUrl url = request.url();\n \n-        logger.info(\"--> [\" + request.header(CLIENT_REQUEST_ID) + \"]\"); // Request ID\n+        logger.info(\"--> [\" + request.header(REQUEST_ID_HEADER) + \"]\"); // Request ID\n         logger.info(request.method() + \" \" + url.encodedPath() + LogUtils.getRedactedQueryString(url,\n             allowedQueryParameterNames)); // URL path + query\n         logger.info(\"Host: \" + url.scheme() + \"://\" + url.host()); // URL host\n \n         // TODO: Add log level guard for headers and body.\n-        logHeaders(request.headers());\n-\n-        String bodyEvaluation = LogUtils.evaluateBody(request.headers());\n         RequestBody requestBody = request.body();\n+        boolean contentTypeLogged = false;\n+        boolean contentLengthLogged = false;\n+\n+        // According to the OkHttp documentation, the request body headers are only present when this is installed as a\n+        // network interceptor.\n+        // https://github.com/square/okhttp/blob/b189a382bccc1b9a01d4672210b69680d73b4306/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java#L173\n+        if (requestBody != null) {\n+            if (requestBody.contentType() != null  && allowedHeaderNames.contains(CONTENT_TYPE_HEADER)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7d7ecc07e7625df9c67856c57058d9e9ddb9a54"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYzMTI2MA==", "bodyText": "It's an additional way of getting this information since it is possible that the Content-Type or Content-Length are not present in the request or response headers. The RequestBody or ResponseBody objects do an attempt at determining this information by examining the body to be sent or that was received.\nOkHttp's HttpLoggingInterceptor checks only for the body and not the headers. Perhaps we could do this as a secondary check after looking in the headers first. What do you think?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/211#discussion_r388631260", "createdAt": "2020-03-05T23:49:43Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LoggingInterceptor.java", "diffHunk": "@@ -96,24 +103,42 @@ public Response intercept(@NonNull Chain chain) throws IOException {\n      *\n      * @param request The HTTP request being sent to Azure.\n      */\n-    private void logRequest(final Request request) {\n+    private void logRequest(final Request request) throws IOException {\n         HttpUrl url = request.url();\n \n-        logger.info(\"--> [\" + request.header(CLIENT_REQUEST_ID) + \"]\"); // Request ID\n+        logger.info(\"--> [\" + request.header(REQUEST_ID_HEADER) + \"]\"); // Request ID\n         logger.info(request.method() + \" \" + url.encodedPath() + LogUtils.getRedactedQueryString(url,\n             allowedQueryParameterNames)); // URL path + query\n         logger.info(\"Host: \" + url.scheme() + \"://\" + url.host()); // URL host\n \n         // TODO: Add log level guard for headers and body.\n-        logHeaders(request.headers());\n-\n-        String bodyEvaluation = LogUtils.evaluateBody(request.headers());\n         RequestBody requestBody = request.body();\n+        boolean contentTypeLogged = false;\n+        boolean contentLengthLogged = false;\n+\n+        // According to the OkHttp documentation, the request body headers are only present when this is installed as a\n+        // network interceptor.\n+        // https://github.com/square/okhttp/blob/b189a382bccc1b9a01d4672210b69680d73b4306/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java#L173\n+        if (requestBody != null) {\n+            if (requestBody.contentType() != null  && allowedHeaderNames.contains(CONTENT_TYPE_HEADER)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAyNzI4MQ=="}, "originalCommit": {"oid": "f7d7ecc07e7625df9c67856c57058d9e9ddb9a54"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY0NDIwMA==", "bodyText": "If the Content-Type or Content-Length are not present in the headers, we don't need to \"synthesize\" them for logging purposes.\nThe only reason I could see needing to do that is if OkHTTP itself adds those headers, but it hasn't done so yet (by the time our logging interceptor is called). Which is pretty annoying if that's the case, since interceptors should be able to assume the headers list is finalized by the time they receive the request or response. If that's what's going on, we can keep this code but I think we could probably refactor it a bit to make it more clear. I'll poke at this while I have the PR checked out as mentioned above.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/211#discussion_r388644200", "createdAt": "2020-03-06T00:31:06Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LoggingInterceptor.java", "diffHunk": "@@ -96,24 +103,42 @@ public Response intercept(@NonNull Chain chain) throws IOException {\n      *\n      * @param request The HTTP request being sent to Azure.\n      */\n-    private void logRequest(final Request request) {\n+    private void logRequest(final Request request) throws IOException {\n         HttpUrl url = request.url();\n \n-        logger.info(\"--> [\" + request.header(CLIENT_REQUEST_ID) + \"]\"); // Request ID\n+        logger.info(\"--> [\" + request.header(REQUEST_ID_HEADER) + \"]\"); // Request ID\n         logger.info(request.method() + \" \" + url.encodedPath() + LogUtils.getRedactedQueryString(url,\n             allowedQueryParameterNames)); // URL path + query\n         logger.info(\"Host: \" + url.scheme() + \"://\" + url.host()); // URL host\n \n         // TODO: Add log level guard for headers and body.\n-        logHeaders(request.headers());\n-\n-        String bodyEvaluation = LogUtils.evaluateBody(request.headers());\n         RequestBody requestBody = request.body();\n+        boolean contentTypeLogged = false;\n+        boolean contentLengthLogged = false;\n+\n+        // According to the OkHttp documentation, the request body headers are only present when this is installed as a\n+        // network interceptor.\n+        // https://github.com/square/okhttp/blob/b189a382bccc1b9a01d4672210b69680d73b4306/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java#L173\n+        if (requestBody != null) {\n+            if (requestBody.contentType() != null  && allowedHeaderNames.contains(CONTENT_TYPE_HEADER)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAyNzI4MQ=="}, "originalCommit": {"oid": "f7d7ecc07e7625df9c67856c57058d9e9ddb9a54"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzk3MzYzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMToyMzo1NFrOFyDfFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMzo1Mzo0MFrOFyoPuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzMDIyOQ==", "bodyText": "Definitely need to get rid of this magic string. Even if we made this into a constant, it's still a little suspicious. Why not name this method something like getBodySummary() and then if it returns null log the body text, otherwise log the summary?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/211#discussion_r388030229", "createdAt": "2020-03-05T01:23:54Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogUtils.java", "diffHunk": "@@ -40,33 +30,45 @@ static long getContentLength(Headers headers) {\n      * @return \"Log body\" if the body should be logged in its entirety, otherwise a message indicating why the body", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7d7ecc07e7625df9c67856c57058d9e9ddb9a54"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYzMjUwNA==", "bodyText": "I did think about doing this the first time I wrote this method but I cannot recall why I changed it, maybe it was because of how I named it at the time (evaluateBody()) and didn't want to return null (like if it was an error) as a type of evaluation.\nI actually like the naming and strategy you propose, so I'm going to change it to that.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/211#discussion_r388632504", "createdAt": "2020-03-05T23:53:40Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogUtils.java", "diffHunk": "@@ -40,33 +30,45 @@ static long getContentLength(Headers headers) {\n      * @return \"Log body\" if the body should be logged in its entirety, otherwise a message indicating why the body", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzMDIyOQ=="}, "originalCommit": {"oid": "f7d7ecc07e7625df9c67856c57058d9e9ddb9a54"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2344, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}