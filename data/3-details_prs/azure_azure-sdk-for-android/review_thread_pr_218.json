{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4MTQ1MTU0", "number": 218, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjo1NzozNlrODozpZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODoxODowM1rODo1fEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTE1ODE1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/DurationSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjo1NzozNlrOF3la6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOToyNDo0N1rOF3qxPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyOTA5Nw==", "bodyText": "Duration.ofMillis(0) could be made a constant, no need to instantiate an instance each time this needs to be checked.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393829097", "createdAt": "2020-03-17T16:57:36Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/DurationSerializer.java", "diffHunk": "@@ -46,14 +46,14 @@ public static String toString(Duration duration) {\n         String result = null;\n \n         if (duration != null) {\n-            if (duration.get(ChronoUnit.MILLIS) == 0) {\n+            if (duration == Duration.ofMillis(0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxNjczMg==", "bodyText": "Good idea.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393916732", "createdAt": "2020-03-17T19:24:47Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/DurationSerializer.java", "diffHunk": "@@ -46,14 +46,14 @@ public static String toString(Duration duration) {\n         String result = null;\n \n         if (duration != null) {\n-            if (duration.get(ChronoUnit.MILLIS) == 0) {\n+            if (duration == Duration.ofMillis(0)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyOTA5Nw=="}, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTE2NjY5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/DurationSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjo1OTozOVrOF3lgcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOTo1ODozMFrOF3r2HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzMDUxNA==", "bodyText": "Does Duration.get(ChronoUnit) and Duration.toX result in the same thing? Reading the documentation for this class is a bit unclear on whether a duration of 1 year and 7 days will result in both being the same.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393830514", "createdAt": "2020-03-17T16:59:39Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/DurationSerializer.java", "diffHunk": "@@ -46,14 +46,14 @@ public static String toString(Duration duration) {\n         String result = null;\n \n         if (duration != null) {\n-            if (duration.get(ChronoUnit.MILLIS) == 0) {\n+            if (duration == Duration.ofMillis(0)) {\n                 result = \"PT0S\";\n             } else {\n                 final StringBuilder builder = new StringBuilder();\n \n                 builder.append('P');\n \n-                final long days = duration.get(ChronoUnit.DAYS);\n+                final long days = duration.toDays();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkzNDM2NA==", "bodyText": "Originally our DurationSerializer class was written using Duration.get(ChronoUnit) to obtain days, hours, minutes, and everything else. Unfortunately, we didn't realize right away that this does not work with the dependency we are using (ThreeTenBP). There the get method looks like this, where only seconds and nanoseconds are supported. Looking at the rest of the class using toDays, toHours and the others seemed pretty straightforward if we subtract the amounts obtained from the Duration object.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393934364", "createdAt": "2020-03-17T19:58:30Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/DurationSerializer.java", "diffHunk": "@@ -46,14 +46,14 @@ public static String toString(Duration duration) {\n         String result = null;\n \n         if (duration != null) {\n-            if (duration.get(ChronoUnit.MILLIS) == 0) {\n+            if (duration == Duration.ofMillis(0)) {\n                 result = \"PT0S\";\n             } else {\n                 final StringBuilder builder = new StringBuilder();\n \n                 builder.append('P');\n \n-                final long days = duration.get(ChronoUnit.DAYS);\n+                final long days = duration.toDays();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzMDUxNA=="}, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTE3NDU4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/JacksonAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzowMTozOFrOF3llvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMTowNjozMVrOF3uD-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzMTg2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!iterator.hasNext()) {\n          \n          \n            \n                        return \"\";\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    final StringBuilder stringBuilder = new StringBuilder();\n          \n          \n            \n                    stringBuilder.append(iterator.next());\n          \n          \n            \n            \n          \n          \n            \n                    while (iterator.hasNext()) {\n          \n          \n            \n                        stringBuilder.append(delimiter);\n          \n          \n            \n                        stringBuilder.append(iterator.next());\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    return stringBuilder.toString();\n          \n          \n            \n                    final StringBuilder stringBuilder = new StringBuilder();\n          \n          \n            \n                    \n          \n          \n            \n                    while (iterator.hasNext()) {\n          \n          \n            \n                        stringBuilder.append(delimiter);\n          \n          \n            \n                        stringBuilder.append(iterator.next());\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    return stringBuilder.toString();", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393831868", "createdAt": "2020-03-17T17:01:38Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/JacksonAdapter.java", "diffHunk": "@@ -309,4 +302,22 @@ private String serializeRaw(Object object) {\n             return null;\n         }\n     }\n+\n+    private static String join(@NonNull CharSequence delimiter, @NonNull Iterable tokens) {\n+        final Iterator<?> iterator = tokens.iterator();\n+\n+        if (!iterator.hasNext()) {\n+            return \"\";\n+        }\n+\n+        final StringBuilder stringBuilder = new StringBuilder();\n+        stringBuilder.append(iterator.next());\n+\n+        while (iterator.hasNext()) {\n+            stringBuilder.append(delimiter);\n+            stringBuilder.append(iterator.next());\n+        }\n+\n+        return stringBuilder.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk3MDY4MQ==", "bodyText": "I think we need stringBuilder.append(iterator.next()) because if not the string will start with a delimiter, hence why we check if the iterator has a next at the beginning to add the first element before the delimiters.\nAn alternative would be using the code you propose but removing the last delimiter from the StringBuilder.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393970681", "createdAt": "2020-03-17T21:06:31Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/JacksonAdapter.java", "diffHunk": "@@ -309,4 +302,22 @@ private String serializeRaw(Object object) {\n             return null;\n         }\n     }\n+\n+    private static String join(@NonNull CharSequence delimiter, @NonNull Iterable tokens) {\n+        final Iterator<?> iterator = tokens.iterator();\n+\n+        if (!iterator.hasNext()) {\n+            return \"\";\n+        }\n+\n+        final StringBuilder stringBuilder = new StringBuilder();\n+        stringBuilder.append(iterator.next());\n+\n+        while (iterator.hasNext()) {\n+            stringBuilder.append(delimiter);\n+            stringBuilder.append(iterator.next());\n+        }\n+\n+        return stringBuilder.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzMTg2OA=="}, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTE3ODcwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/JacksonAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzowMjo0M1rOF3lojg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMDo0NDoyOVrOF3tTxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzMjU5MA==", "bodyText": "Any reason this was made into a local version instead of using TextUtils?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393832590", "createdAt": "2020-03-17T17:02:43Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/JacksonAdapter.java", "diffHunk": "@@ -309,4 +302,22 @@ private String serializeRaw(Object object) {\n             return null;\n         }\n     }\n+\n+    private static String join(@NonNull CharSequence delimiter, @NonNull Iterable tokens) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk1ODM0Mg==", "bodyText": "TextUtils is an Android framework class and thus we cannot access its full functionality when running unit tests. Since the alternative String.join() is only available for a late Android version, I figured writing a simple method to join would be the best way to get around this problem.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393958342", "createdAt": "2020-03-17T20:44:29Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/JacksonAdapter.java", "diffHunk": "@@ -309,4 +302,22 @@ private String serializeRaw(Object object) {\n             return null;\n         }\n     }\n+\n+    private static String join(@NonNull CharSequence delimiter, @NonNull Iterable tokens) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzMjU5MA=="}, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTE5NjgzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/http/interceptor/LoggingInterceptorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzowNzoyNlrOF3l0dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOToyNjo1NVrOF3q1jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNTYzNw==", "bodyText": "Does this class need the copyright header?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393835637", "createdAt": "2020-03-17T17:07:26Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/http/interceptor/LoggingInterceptorTest.java", "diffHunk": "@@ -1,6 +1,7 @@\n package com.azure.android.core.http.interceptor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxNzgzNg==", "bodyText": "I didn't notice it didn't have the header the first time around. Will add it.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393917836", "createdAt": "2020-03-17T19:26:55Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/http/interceptor/LoggingInterceptorTest.java", "diffHunk": "@@ -1,6 +1,7 @@\n package com.azure.android.core.http.interceptor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNTYzNw=="}, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTE5NzQ0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/JacksonAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzowNzozN1rOF3l02g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMDoxNDowOFrOF3sVhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNTczOA==", "bodyText": "Does this class need the copyright header?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393835738", "createdAt": "2020-03-17T17:07:37Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/JacksonAdapter.java", "diffHunk": "@@ -1,8 +1,9 @@\n package com.azure.android.core.internal.util.serializer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk0MjQwNQ==", "bodyText": "See first response about the copyright header.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393942405", "createdAt": "2020-03-17T20:14:08Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/JacksonAdapter.java", "diffHunk": "@@ -1,8 +1,9 @@\n package com.azure.android.core.internal.util.serializer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNTczOA=="}, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTE5ODAzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/Base64UrlSerializerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzowNzo0NFrOF3l1Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMDoxNDoxNVrOF3sVsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNTgxOQ==", "bodyText": "Does this class need the copyright header?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393835819", "createdAt": "2020-03-17T17:07:44Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/Base64UrlSerializerTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package com.azure.android.core.internal.util.serializer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk0MjQ0OQ==", "bodyText": "See first response about the copyright header.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393942449", "createdAt": "2020-03-17T20:14:15Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/Base64UrlSerializerTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package com.azure.android.core.internal.util.serializer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNTgxOQ=="}, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTE5ODU3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/ByteArraySerializerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzowNzo1MFrOF3l1fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMDoxNDowNVrOF3sVaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNTkwMg==", "bodyText": "Does this class need the copyright header?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393835902", "createdAt": "2020-03-17T17:07:50Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/ByteArraySerializerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.azure.android.core.internal.util.serializer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk0MjM3Ng==", "bodyText": "See first response about the copyright header.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393942376", "createdAt": "2020-03-17T20:14:05Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/ByteArraySerializerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.azure.android.core.internal.util.serializer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNTkwMg=="}, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTE5OTA0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DateTimeRfc1123SerializerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzowNzo1OFrOF3l12Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMDoxNDowMlrOF3sVWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNTk5Mw==", "bodyText": "Does this class need the copyright header?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393835993", "createdAt": "2020-03-17T17:07:58Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DateTimeRfc1123SerializerTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.azure.android.core.internal.util.serializer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk0MjM2MA==", "bodyText": "See first response about the copyright header.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393942360", "createdAt": "2020-03-17T20:14:02Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DateTimeRfc1123SerializerTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.azure.android.core.internal.util.serializer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNTk5Mw=="}, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTE5OTM1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DateTimeSerializerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzowODowNFrOF3l2Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMDoxMzo1OVrOF3sVRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNjA0Nw==", "bodyText": "Does this class need the copyright header?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393836047", "createdAt": "2020-03-17T17:08:04Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DateTimeSerializerTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package com.azure.android.core.internal.util.serializer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk0MjM0MA==", "bodyText": "See first response about the copyright header.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393942340", "createdAt": "2020-03-17T20:13:59Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DateTimeSerializerTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package com.azure.android.core.internal.util.serializer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNjA0Nw=="}, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTE5OTkxOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DurationSerializerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzowODoxM1rOF3l2dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMDoxMzo1N1rOF3sVLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNjE0OQ==", "bodyText": "Does this class need the copyright header?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393836149", "createdAt": "2020-03-17T17:08:13Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DurationSerializerTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.azure.android.core.internal.util.serializer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk0MjMxOQ==", "bodyText": "See first response about the copyright header.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393942319", "createdAt": "2020-03-17T20:13:57Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DurationSerializerTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.azure.android.core.internal.util.serializer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNjE0OQ=="}, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTIwMDM2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/JacksonAdapterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzowODoyMFrOF3l2uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOToyNzowMVrOF3q1uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNjIxOQ==", "bodyText": "Does this class need the copyright header?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393836219", "createdAt": "2020-03-17T17:08:20Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/JacksonAdapterTest.java", "diffHunk": "@@ -0,0 +1,215 @@\n+package com.azure.android.core.internal.util.serializer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxNzg4Mw==", "bodyText": "See first response about the copyright header.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393917883", "createdAt": "2020-03-17T19:27:01Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/JacksonAdapterTest.java", "diffHunk": "@@ -0,0 +1,215 @@\n+package com.azure.android.core.internal.util.serializer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNjIxOQ=="}, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTIwNDU1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/SerializerFormatTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzowOToyOFrOF3l5eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOToyNzoyNVrOF3q2ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNjkyMg==", "bodyText": "Does this class need the copyright header?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393836922", "createdAt": "2020-03-17T17:09:28Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/SerializerFormatTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.azure.android.core.internal.util.serializer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxODA5MA==", "bodyText": "See first response about the copyright header.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393918090", "createdAt": "2020-03-17T19:27:25Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/SerializerFormatTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.azure.android.core.internal.util.serializer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNjkyMg=="}, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTIwNDk5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/StringBuilderOutputStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzowOTozNVrOF3l5wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOToyNzozM1rOF3q2yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNjk5Mw==", "bodyText": "Does this class need the copyright header?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393836993", "createdAt": "2020-03-17T17:09:35Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/StringBuilderOutputStream.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package com.azure.android.core.internal.util.serializer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxODE1Mw==", "bodyText": "See first response about the copyright header.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393918153", "createdAt": "2020-03-17T19:27:33Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/StringBuilderOutputStream.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package com.azure.android.core.internal.util.serializer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNjk5Mw=="}, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTIwNTQ5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/TestHeaders.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzowOTo0MFrOF3l6CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOToyNzozNVrOF3q22Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNzA2NQ==", "bodyText": "Does this class need the copyright header?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393837065", "createdAt": "2020-03-17T17:09:40Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/TestHeaders.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.azure.android.core.internal.util.serializer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxODE2OQ==", "bodyText": "See first response about the copyright header.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393918169", "createdAt": "2020-03-17T19:27:35Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/TestHeaders.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.azure.android.core.internal.util.serializer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNzA2NQ=="}, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTIwNTg1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/TestModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzowOTo0N1rOF3l6Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOToyNzozOFrOF3q29A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNzEzNQ==", "bodyText": "Does this class need the copyright header?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393837135", "createdAt": "2020-03-17T17:09:47Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/TestModel.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.azure.android.core.internal.util.serializer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxODE5Ng==", "bodyText": "See first response about the copyright header.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393918196", "createdAt": "2020-03-17T19:27:38Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/TestModel.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.azure.android.core.internal.util.serializer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNzEzNQ=="}, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTQyNDY3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/ByteArraySerializerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODowODo0M1rOF3oK5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMDo1NDo1NVrOF3tr1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3NDE1MA==", "bodyText": "Does this need to be the object type of byte?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393874150", "createdAt": "2020-03-17T18:08:43Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/ByteArraySerializerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.azure.android.core.internal.util.serializer;\n+\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.junit.Test;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class ByteArraySerializerTest {\n+\n+    @Test\n+    public void test_getModule() {\n+        SimpleModule module = ByteArraySerializer.getModule();\n+\n+        assertNotNull(module);\n+    }\n+\n+    @Test\n+    public void test_serialize() throws IOException {\n+        Byte[] byteObjects = new Byte[] { 84, 101, 115, 116, 32, 115, 116, 114, 105, 110, 103 };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk2NDUwMQ==", "bodyText": "Yes. The serialize method we override in ByteArraySerializer expects a Byte[] object.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393964501", "createdAt": "2020-03-17T20:54:55Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/ByteArraySerializerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.azure.android.core.internal.util.serializer;\n+\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.junit.Test;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class ByteArraySerializerTest {\n+\n+    @Test\n+    public void test_getModule() {\n+        SimpleModule module = ByteArraySerializer.getModule();\n+\n+        assertNotNull(module);\n+    }\n+\n+    @Test\n+    public void test_serialize() throws IOException {\n+        Byte[] byteObjects = new Byte[] { 84, 101, 115, 116, 32, 115, 116, 114, 105, 110, 103 };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3NDE1MA=="}, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTQzMzI2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/ByteArraySerializerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODoxMDo1MlrOF3oQIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMDo1NTowOFrOF3tsSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3NTQ5MQ==", "bodyText": "Mind putting a comment on the byte arrays that mentions their UTF-8 string representation? It'll make the tests more understandable, right now I can't really make heads or tails on whether this is correct since it is just sequences of numbers.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393875491", "createdAt": "2020-03-17T18:10:52Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/ByteArraySerializerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.azure.android.core.internal.util.serializer;\n+\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.junit.Test;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class ByteArraySerializerTest {\n+\n+    @Test\n+    public void test_getModule() {\n+        SimpleModule module = ByteArraySerializer.getModule();\n+\n+        assertNotNull(module);\n+    }\n+\n+    @Test\n+    public void test_serialize() throws IOException {\n+        Byte[] byteObjects = new Byte[] { 84, 101, 115, 116, 32, 115, 116, 114, 105, 110, 103 };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk2NDYxOA==", "bodyText": "Sure thing.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393964618", "createdAt": "2020-03-17T20:55:08Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/ByteArraySerializerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.azure.android.core.internal.util.serializer;\n+\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.junit.Test;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class ByteArraySerializerTest {\n+\n+    @Test\n+    public void test_getModule() {\n+        SimpleModule module = ByteArraySerializer.getModule();\n+\n+        assertNotNull(module);\n+    }\n+\n+    @Test\n+    public void test_serialize() throws IOException {\n+        Byte[] byteObjects = new Byte[] { 84, 101, 115, 116, 32, 115, 116, 114, 105, 110, 103 };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3NTQ5MQ=="}, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTQ0MDI2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DateTimeRfc1123SerializerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODoxMjo1M1rOF3oUoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxOToyMDoxMVrOF4TiSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3NjY0MQ==", "bodyText": "Mind adding a test for non-DateTimeRfc1123 or malformed representations being passed into this serializer? Would it be able to handle an ISO8601 date? What happens if GMT is missing from the date string? Could it handle a different time zone offset?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393876641", "createdAt": "2020-03-17T18:12:53Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DateTimeRfc1123SerializerTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.azure.android.core.internal.util.serializer;\n+\n+import com.azure.android.core.util.DateTimeRfc1123;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.junit.Test;\n+import org.threeten.bp.LocalDateTime;\n+import org.threeten.bp.OffsetDateTime;\n+import org.threeten.bp.ZoneId;\n+import org.threeten.bp.ZoneOffset;\n+import org.threeten.bp.format.DateTimeFormatter;\n+\n+import java.io.IOException;\n+import java.util.Locale;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class DateTimeRfc1123SerializerTest {\n+    public static final DateTimeFormatter RFC1123_DATE_TIME_FORMATTER =\n+        DateTimeFormatter.ofPattern(\"EEE, dd MMM yyyy HH:mm:ss 'GMT'\").withZone(ZoneId.of(\"UTC\")).withLocale(Locale.US);\n+\n+    @Test\n+    public void test_getModule() {\n+        SimpleModule module = DateTimeRfc1123Serializer.getModule();\n+\n+        assertNotNull(module);\n+    }\n+\n+    @Test\n+    public void serializeDateTimeRfc1123() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk4MDk2NQ==", "bodyText": "From what I've noticed playing around with this serializer it only accepts DateTimeRfc1123 objects. To create an instance of this class you need either an OffsetDateTime instance or a correctly formatted string, which make me believe it could not accept a malformed representation. An exception would be thrown from OffsetDateTime when trying to use an invalid date, formatter o zone offset.\nNot sure about the ISO date though, will look into it.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393980965", "createdAt": "2020-03-17T21:27:43Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DateTimeRfc1123SerializerTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.azure.android.core.internal.util.serializer;\n+\n+import com.azure.android.core.util.DateTimeRfc1123;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.junit.Test;\n+import org.threeten.bp.LocalDateTime;\n+import org.threeten.bp.OffsetDateTime;\n+import org.threeten.bp.ZoneId;\n+import org.threeten.bp.ZoneOffset;\n+import org.threeten.bp.format.DateTimeFormatter;\n+\n+import java.io.IOException;\n+import java.util.Locale;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class DateTimeRfc1123SerializerTest {\n+    public static final DateTimeFormatter RFC1123_DATE_TIME_FORMATTER =\n+        DateTimeFormatter.ofPattern(\"EEE, dd MMM yyyy HH:mm:ss 'GMT'\").withZone(ZoneId.of(\"UTC\")).withLocale(Locale.US);\n+\n+    @Test\n+    public void test_getModule() {\n+        SimpleModule module = DateTimeRfc1123Serializer.getModule();\n+\n+        assertNotNull(module);\n+    }\n+\n+    @Test\n+    public void serializeDateTimeRfc1123() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3NjY0MQ=="}, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4NDY0OQ==", "bodyText": "Ah, nevermind, if it can only accept DateTimeRfc1123 objects there is no need to test with ISO8601.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r394584649", "createdAt": "2020-03-18T19:20:11Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DateTimeRfc1123SerializerTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.azure.android.core.internal.util.serializer;\n+\n+import com.azure.android.core.util.DateTimeRfc1123;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.junit.Test;\n+import org.threeten.bp.LocalDateTime;\n+import org.threeten.bp.OffsetDateTime;\n+import org.threeten.bp.ZoneId;\n+import org.threeten.bp.ZoneOffset;\n+import org.threeten.bp.format.DateTimeFormatter;\n+\n+import java.io.IOException;\n+import java.util.Locale;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class DateTimeRfc1123SerializerTest {\n+    public static final DateTimeFormatter RFC1123_DATE_TIME_FORMATTER =\n+        DateTimeFormatter.ofPattern(\"EEE, dd MMM yyyy HH:mm:ss 'GMT'\").withZone(ZoneId.of(\"UTC\")).withLocale(Locale.US);\n+\n+    @Test\n+    public void test_getModule() {\n+        SimpleModule module = DateTimeRfc1123Serializer.getModule();\n+\n+        assertNotNull(module);\n+    }\n+\n+    @Test\n+    public void serializeDateTimeRfc1123() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3NjY0MQ=="}, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTQ0NjQxOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DateTimeSerializerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODoxNDozMlrOF3oYmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMTowMDozOFrOF3t4DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3NzY1OQ==", "bodyText": "This appears to be duplicated", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393877659", "createdAt": "2020-03-17T18:14:32Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DateTimeSerializerTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package com.azure.android.core.internal.util.serializer;\n+\n+import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n+import com.fasterxml.jackson.core.Base64Variants;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializationConfig;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.cfg.BaseSettings;\n+import com.fasterxml.jackson.databind.cfg.ConfigOverrides;\n+import com.fasterxml.jackson.databind.introspect.Annotated;\n+import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;\n+import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\n+import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;\n+import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;\n+import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.fasterxml.jackson.databind.ser.SerializerFactory;\n+import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n+import com.fasterxml.jackson.databind.util.RootNameLookup;\n+import com.fasterxml.jackson.databind.util.StdDateFormat;\n+\n+import org.junit.Test;\n+import org.threeten.bp.LocalDateTime;\n+import org.threeten.bp.OffsetDateTime;\n+import org.threeten.bp.ZoneId;\n+import org.threeten.bp.ZoneOffset;\n+import org.threeten.bp.format.DateTimeFormatter;\n+\n+import java.io.IOException;\n+import java.util.Locale;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class DateTimeSerializerTest {\n+    private static final DateTimeFormatter RFC1123_DATE_TIME_FORMATTER =\n+        DateTimeFormatter.ofPattern(\"EEE, dd MMM yyyy HH:mm:ss 'GMT'\").withZone(ZoneId.of(\"UTC\")).withLocale(Locale.US);\n+\n+    @Test\n+    public void test_getModule() {\n+        SimpleModule module = DateTimeSerializer.getModule();\n+\n+        assertNotNull(module);\n+    }\n+\n+    @Test\n+    public void serializeDateTime_asNumber() throws IOException {\n+        // DateTime\n+        String testDate = \"Tue, 25 Feb 2020 00:59:22 GMT\";\n+        OffsetDateTime dateTime =\n+            OffsetDateTime.of(LocalDateTime.parse(testDate, RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC);\n+\n+        // JsonGenerator and target OutputStream\n+        StringBuilderOutputStream outputStream = new StringBuilderOutputStream();\n+        JsonGenerator jsonGenerator = new JsonFactory().createGenerator(outputStream);\n+\n+        // SerializerProvider\n+        BaseSettings baseSettings = new BaseSettings(null, new JacksonAnnotationIntrospector(), null,\n+            TypeFactory.defaultInstance(), null, StdDateFormat.instance, null, Locale.getDefault(), null,\n+            Base64Variants.getDefaultVariant());\n+        SerializationConfig serializationConfig = new SerializationConfig(\n+            baseSettings.withClassIntrospector(new BasicClassIntrospector()), new StdSubtypeResolver(),\n+            new SimpleMixInResolver(null), new RootNameLookup(), new ConfigOverrides());\n+        SerializerProvider serializerProvider = new SerializerProvider() {\n+            @Override\n+            public WritableObjectId findObjectId(Object forPojo, ObjectIdGenerator<?> generatorType) {\n+                return null;\n+            }\n+\n+            @Override\n+            public JsonSerializer<Object> serializerInstance(Annotated annotated, Object serDef) throws JsonMappingException {\n+                return null;\n+            }\n+\n+            @Override\n+            public Object includeFilterInstance(BeanPropertyDefinition forProperty, Class<?> filterClass) throws JsonMappingException {\n+                return null;\n+            }\n+\n+            @Override\n+            public boolean includeFilterSuppressNulls(Object filter) throws JsonMappingException {\n+                return false;\n+            }\n+        };\n+        SerializerProvider serializerProviderStub =\n+            new SerializerProviderStub(serializerProvider, serializationConfig, null);\n+\n+        // Actual serialization\n+        new DateTimeSerializer().serialize(dateTime, jsonGenerator, serializerProviderStub);\n+        jsonGenerator.flush();\n+\n+        assertEquals(\"1582592362000\", outputStream.toString());\n+    }\n+\n+    @Test\n+    public void serializeDateTime_asString() throws IOException {\n+        //DateTime\n+        String testDate = \"Tue, 25 Feb 2020 00:59:22 GMT\";\n+        OffsetDateTime dateTime =\n+            OffsetDateTime.of(LocalDateTime.parse(testDate, RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC);\n+\n+        // JsonGenerator and target OutputStream\n+        StringBuilderOutputStream outputStream = new StringBuilderOutputStream();\n+        JsonGenerator jsonGenerator = new JsonFactory().createGenerator(outputStream);\n+\n+        // SerializerProvider\n+        BaseSettings baseSettings = new BaseSettings(null, new JacksonAnnotationIntrospector(), null,\n+            TypeFactory.defaultInstance(), null, StdDateFormat.instance, null, Locale.getDefault(), null,\n+            Base64Variants.getDefaultVariant());\n+        SerializationConfig serializationConfig = new SerializationConfig(\n+            baseSettings.withClassIntrospector(new BasicClassIntrospector()), new StdSubtypeResolver(),\n+            new SimpleMixInResolver(null), new RootNameLookup(), new ConfigOverrides());\n+        serializationConfig = serializationConfig.without(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n+        SerializerProvider serializerProvider = new SerializerProvider() {\n+            @Override\n+            public WritableObjectId findObjectId(Object forPojo, ObjectIdGenerator<?> generatorType) {\n+                return null;\n+            }\n+\n+            @Override\n+            public JsonSerializer<Object> serializerInstance(Annotated annotated, Object serDef) throws JsonMappingException {\n+                return null;\n+            }\n+\n+            @Override\n+            public Object includeFilterInstance(BeanPropertyDefinition forProperty, Class<?> filterClass) throws JsonMappingException {\n+                return null;\n+            }\n+\n+            @Override\n+            public boolean includeFilterSuppressNulls(Object filter) throws JsonMappingException {\n+                return false;\n+            }\n+        };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk2NzYyOQ==", "bodyText": "I'll refactor the SerializerProviderStub class to include a constructor that creates an object like this, this way we avoid code duplication and make it easier to read what's going on.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393967629", "createdAt": "2020-03-17T21:00:38Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DateTimeSerializerTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package com.azure.android.core.internal.util.serializer;\n+\n+import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n+import com.fasterxml.jackson.core.Base64Variants;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializationConfig;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.cfg.BaseSettings;\n+import com.fasterxml.jackson.databind.cfg.ConfigOverrides;\n+import com.fasterxml.jackson.databind.introspect.Annotated;\n+import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;\n+import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\n+import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;\n+import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;\n+import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.fasterxml.jackson.databind.ser.SerializerFactory;\n+import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n+import com.fasterxml.jackson.databind.util.RootNameLookup;\n+import com.fasterxml.jackson.databind.util.StdDateFormat;\n+\n+import org.junit.Test;\n+import org.threeten.bp.LocalDateTime;\n+import org.threeten.bp.OffsetDateTime;\n+import org.threeten.bp.ZoneId;\n+import org.threeten.bp.ZoneOffset;\n+import org.threeten.bp.format.DateTimeFormatter;\n+\n+import java.io.IOException;\n+import java.util.Locale;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class DateTimeSerializerTest {\n+    private static final DateTimeFormatter RFC1123_DATE_TIME_FORMATTER =\n+        DateTimeFormatter.ofPattern(\"EEE, dd MMM yyyy HH:mm:ss 'GMT'\").withZone(ZoneId.of(\"UTC\")).withLocale(Locale.US);\n+\n+    @Test\n+    public void test_getModule() {\n+        SimpleModule module = DateTimeSerializer.getModule();\n+\n+        assertNotNull(module);\n+    }\n+\n+    @Test\n+    public void serializeDateTime_asNumber() throws IOException {\n+        // DateTime\n+        String testDate = \"Tue, 25 Feb 2020 00:59:22 GMT\";\n+        OffsetDateTime dateTime =\n+            OffsetDateTime.of(LocalDateTime.parse(testDate, RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC);\n+\n+        // JsonGenerator and target OutputStream\n+        StringBuilderOutputStream outputStream = new StringBuilderOutputStream();\n+        JsonGenerator jsonGenerator = new JsonFactory().createGenerator(outputStream);\n+\n+        // SerializerProvider\n+        BaseSettings baseSettings = new BaseSettings(null, new JacksonAnnotationIntrospector(), null,\n+            TypeFactory.defaultInstance(), null, StdDateFormat.instance, null, Locale.getDefault(), null,\n+            Base64Variants.getDefaultVariant());\n+        SerializationConfig serializationConfig = new SerializationConfig(\n+            baseSettings.withClassIntrospector(new BasicClassIntrospector()), new StdSubtypeResolver(),\n+            new SimpleMixInResolver(null), new RootNameLookup(), new ConfigOverrides());\n+        SerializerProvider serializerProvider = new SerializerProvider() {\n+            @Override\n+            public WritableObjectId findObjectId(Object forPojo, ObjectIdGenerator<?> generatorType) {\n+                return null;\n+            }\n+\n+            @Override\n+            public JsonSerializer<Object> serializerInstance(Annotated annotated, Object serDef) throws JsonMappingException {\n+                return null;\n+            }\n+\n+            @Override\n+            public Object includeFilterInstance(BeanPropertyDefinition forProperty, Class<?> filterClass) throws JsonMappingException {\n+                return null;\n+            }\n+\n+            @Override\n+            public boolean includeFilterSuppressNulls(Object filter) throws JsonMappingException {\n+                return false;\n+            }\n+        };\n+        SerializerProvider serializerProviderStub =\n+            new SerializerProviderStub(serializerProvider, serializationConfig, null);\n+\n+        // Actual serialization\n+        new DateTimeSerializer().serialize(dateTime, jsonGenerator, serializerProviderStub);\n+        jsonGenerator.flush();\n+\n+        assertEquals(\"1582592362000\", outputStream.toString());\n+    }\n+\n+    @Test\n+    public void serializeDateTime_asString() throws IOException {\n+        //DateTime\n+        String testDate = \"Tue, 25 Feb 2020 00:59:22 GMT\";\n+        OffsetDateTime dateTime =\n+            OffsetDateTime.of(LocalDateTime.parse(testDate, RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC);\n+\n+        // JsonGenerator and target OutputStream\n+        StringBuilderOutputStream outputStream = new StringBuilderOutputStream();\n+        JsonGenerator jsonGenerator = new JsonFactory().createGenerator(outputStream);\n+\n+        // SerializerProvider\n+        BaseSettings baseSettings = new BaseSettings(null, new JacksonAnnotationIntrospector(), null,\n+            TypeFactory.defaultInstance(), null, StdDateFormat.instance, null, Locale.getDefault(), null,\n+            Base64Variants.getDefaultVariant());\n+        SerializationConfig serializationConfig = new SerializationConfig(\n+            baseSettings.withClassIntrospector(new BasicClassIntrospector()), new StdSubtypeResolver(),\n+            new SimpleMixInResolver(null), new RootNameLookup(), new ConfigOverrides());\n+        serializationConfig = serializationConfig.without(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n+        SerializerProvider serializerProvider = new SerializerProvider() {\n+            @Override\n+            public WritableObjectId findObjectId(Object forPojo, ObjectIdGenerator<?> generatorType) {\n+                return null;\n+            }\n+\n+            @Override\n+            public JsonSerializer<Object> serializerInstance(Annotated annotated, Object serDef) throws JsonMappingException {\n+                return null;\n+            }\n+\n+            @Override\n+            public Object includeFilterInstance(BeanPropertyDefinition forProperty, Class<?> filterClass) throws JsonMappingException {\n+                return null;\n+            }\n+\n+            @Override\n+            public boolean includeFilterSuppressNulls(Object filter) throws JsonMappingException {\n+                return false;\n+            }\n+        };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3NzY1OQ=="}, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTQ1OTM5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DurationSerializerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODoxODowM1rOF3ohAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMTowMToyM1rOF3t53A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3OTgwOQ==", "bodyText": "Are there tests for a duration deserializer?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393879809", "createdAt": "2020-03-17T18:18:03Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DurationSerializerTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.azure.android.core.internal.util.serializer;\n+\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.junit.Test;\n+import org.threeten.bp.Duration;\n+\n+import java.io.IOException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class DurationSerializerTest {\n+    @Test\n+    public void test_getModule() {\n+        SimpleModule module = DurationSerializer.getModule();\n+\n+        assertNotNull(module);\n+    }\n+\n+    @Test\n+    public void serializeDuration() throws IOException {\n+        StringBuilderOutputStream outputStream = new StringBuilderOutputStream();\n+        JsonGenerator jsonGenerator = new JsonFactory().createGenerator(outputStream);\n+        DurationSerializer durationSerializer = new DurationSerializer();\n+\n+        durationSerializer.serialize(Duration.ofDays(3), jsonGenerator, null);\n+        jsonGenerator.flush();\n+\n+        assertEquals(\"\\\"P3D\\\"\", outputStream.toString());\n+    }\n+\n+    @Test\n+    public void duration_ofDays_toString() {\n+        assertEquals(\"P5D\", DurationSerializer.toString(Duration.ofDays(5)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk2ODA5Mg==", "bodyText": "No, we currently do not have a DurationDeserializer class.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393968092", "createdAt": "2020-03-17T21:01:23Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DurationSerializerTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.azure.android.core.internal.util.serializer;\n+\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.junit.Test;\n+import org.threeten.bp.Duration;\n+\n+import java.io.IOException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class DurationSerializerTest {\n+    @Test\n+    public void test_getModule() {\n+        SimpleModule module = DurationSerializer.getModule();\n+\n+        assertNotNull(module);\n+    }\n+\n+    @Test\n+    public void serializeDuration() throws IOException {\n+        StringBuilderOutputStream outputStream = new StringBuilderOutputStream();\n+        JsonGenerator jsonGenerator = new JsonFactory().createGenerator(outputStream);\n+        DurationSerializer durationSerializer = new DurationSerializer();\n+\n+        durationSerializer.serialize(Duration.ofDays(3), jsonGenerator, null);\n+        jsonGenerator.flush();\n+\n+        assertEquals(\"\\\"P3D\\\"\", outputStream.toString());\n+    }\n+\n+    @Test\n+    public void duration_ofDays_toString() {\n+        assertEquals(\"P5D\", DurationSerializer.toString(Duration.ofDays(5)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3OTgwOQ=="}, "originalCommit": {"oid": "f63b20c9b079f5e2f3157d557db0b7c179fb9001"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2351, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}