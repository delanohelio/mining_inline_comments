{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3NjUzNTc1", "number": 346, "title": "Create a new PR for paging support in Android core", "bodyText": "Add basic paging support.\nDesign goals:\n\nSupport autorest.android generating Async client. Required classes: Page, AsyncPagedDataRetriever, AsyncPagedDataCollection\nSupport autorest.android generating Sync client. Required classes: Page, PagedDataCollection, PagedDataRetriever, PagedDataResponseCollection, PagedDataResponseRetriever", "createdAt": "2020-09-16T00:42:31Z", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346", "merged": true, "mergeCommit": {"oid": "612db7cf5c9f09f6aeb0f41b8bd2560bdf380d74"}, "closed": true, "closedAt": "2020-10-01T20:19:22Z", "author": {"login": "JianpingChen"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJRnAsgFqTQ4OTIwMTM2Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOWydUAFqTUwMDY2NTM0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MjAxMzY3", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#pullrequestreview-489201367", "createdAt": "2020-09-16T00:53:33Z", "commit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMDo1MzozM1rOHScLmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMDo1MzozM1rOHScLmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA5ODEzOA==", "bodyText": "We should be using com.azure.android.core.http.Response<T> as the type to represent a response with an associated strongly-typed response body object. Is there any reason we aren't doing that here?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r489098138", "createdAt": "2020-09-16T00:53:33Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataCollection.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+\n+import okhttp3.Response;\n+\n+/**\n+ * Represents a collection of pages where page data and response for retrieving it can be returned asynchronously\n+ * @param <T> type of the items in the page\n+ * @param <P> Page of items\n+ */\n+public class AsyncPagedDataCollection<T, P extends Page<T>> {\n+    private final AsyncPagedDataRetriever<T, P> pagedDataRetriever;\n+    private LinkedHashMap<String, PageAndResponse<P>> pages = new LinkedHashMap<String, PageAndResponse<P>>();\n+    private String firstPageId;\n+\n+    /**\n+     * Construction requires an asynchronous paged data provider\n+     * @param pagedDataRetriever an asynchronous page data provider\n+     */\n+    public AsyncPagedDataCollection(AsyncPagedDataRetriever<T, P> pagedDataRetriever) {\n+        this.pagedDataRetriever = pagedDataRetriever;\n+    }\n+\n+    private void cacheResponse(P page, Response response) {\n+        if (page.getPageId() == null) {\n+            return;\n+        }\n+        pages.put(page.getPageId(), new PageAndResponse<P>(page, response));\n+\n+        // setting previous page id should simplify implementation for androidx.arch.DataSource\n+        final Iterator<PageAndResponse<P>> iterator = pages.values().iterator();\n+        while(iterator.hasNext()){\n+            final P existingPage = iterator.next().page;\n+            if (page.getPageId().equals(existingPage.getNextPageId())){\n+                page.setPreviousPageId(existingPage.getPageId());\n+                break;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Gets first page in the collection along with the response retrieving the first page\n+     * @param callback a callback interface for handling the first page and its response\n+     */\n+    public void getFirstPage(Callback<P> callback) {\n+        if (firstPageId == null){\n+            pagedDataRetriever.getFirstPage(new Callback<P>() {\n+\n+                @Override\n+                public void onSuccess(P value, Response response) {\n+                    if (value == null) {\n+                        callback.onSuccess(value, response);\n+                        return;\n+                    }\n+\n+                    firstPageId = value.getPageId();\n+                    cacheResponse(value, response);\n+                    callback.onSuccess(value, response);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable t, Response response) {\n+                    callback.onFailure(t, response);\n+                }\n+            });\n+        }\n+        else {\n+            PageAndResponse<P> firstPageResponse = pages.get(firstPageId);\n+            callback.onSuccess(firstPageResponse.page, firstPageResponse.response);\n+        }\n+    }\n+\n+    /**\n+     * Retrieve a page by its id\n+     * @param pageId id of the page\n+     * @param callback callback interface for handling the page along with its response\n+     */\n+    public void getPage(String pageId, Callback<P> callback) {\n+        PageAndResponse<P> pageEntry = pages.get(pageId);\n+        if (pageEntry == null){\n+            pagedDataRetriever.getPage(pageId, new Callback<P>() {\n+                @Override\n+                public void onSuccess(P value, Response response) {\n+                    if (value == null) {\n+                        callback.onSuccess(null, response);\n+                    }\n+\n+                    cacheResponse(value, response);\n+                    callback.onSuccess(value, response);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable t, Response response) {\n+                    callback.onFailure(t, response);\n+                }\n+            });\n+        }\n+        else {\n+            callback.onSuccess(pageEntry.page, pageEntry.response);\n+        }\n+    }\n+\n+    private static class PageAndResponse<P> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "originalPosition": 112}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MjAzNzk0", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#pullrequestreview-489203794", "createdAt": "2020-09-16T01:01:42Z", "commit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMTowMTo0MlrOHScT7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMTowMTo0MlrOHScT7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwMDI3MQ==", "bodyText": "How is the pageId supposed to be communicated to the developer? Is it an opaque identifier (e.g. GUID)? I would expect getPage(int pageNumber, Callback callback) or something similar, otherwise the developer has to do book-keeping.\nAlternatively, why not keep the current page number in the instance's local state, and have a getNextPage(Callback callback) method (and a simple getter, getCurrentPageNumber()or some such) instead?", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r489100271", "createdAt": "2020-09-16T01:01:42Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataRetriever.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents an asynchronous paged data provider with fixed page size\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public abstract class AsyncPagedDataRetriever<T, P extends Page<T>> {\n+    private final int pageSize;\n+\n+    /**\n+     * Constructor requires the fixed page size\n+     * @param pageSize size of the pages\n+     */\n+    public AsyncPagedDataRetriever(int pageSize){\n+        Objects.requireNonNull(pageSize);\n+        if (pageSize <= 0)\n+            throw new IllegalArgumentException(\"pageSize must be a positive integer\");\n+        this.pageSize = pageSize;\n+    }\n+\n+    /**\n+     * Gets the size of the page\n+     * @return size of the page\n+     */\n+    public int getPageSize(){\n+        return this.pageSize;\n+    }\n+\n+    /**\n+     * Retrieve the first page in the collection\n+     * @param callback callback function to handle the page data along with the response for retrieving it\n+     */\n+    public abstract void getFirstPage(Callback<P> callback);\n+\n+    /**\n+     * Retrieve a page with its id\n+     * @param pageId id of the page\n+     * @param callback callback function to handle the page data along with the response for retrieving it\n+     */\n+    public abstract void getPage(String pageId, Callback<P> callback);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MjA0NTY1", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#pullrequestreview-489204565", "createdAt": "2020-09-16T01:04:23Z", "commit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMTowNDoyM1rOHScWqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMTowNDoyM1rOHScWqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwMDk2OQ==", "bodyText": "Is this the sync version of AsyncPagedDataCollection? If so, they should have similar names. E.g. PagedDataCollection.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r489100969", "createdAt": "2020-09-16T01:04:23Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseCollection.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+/**\n+ * Represents a collection of pages where page and the response for retrieving it can be returned synchronously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataResponseCollection<T, P extends Page<T>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MjA0NzU3", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#pullrequestreview-489204757", "createdAt": "2020-09-16T01:04:57Z", "commit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMTowNDo1N1rOHScXPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMTowNDo1N1rOHScXPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwMTExNw==", "bodyText": "Likewise if this is the sync version of AsyncPagedDataRetriever, let's make this PagedDataRetriever.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r489101117", "createdAt": "2020-09-16T01:04:57Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseRetriever.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents a synchronized paged data provider with fixed page size that returns both page and response\n+ * @param <T> type of the items in the page\n+ * @param <P> type of the page\n+ */\n+public abstract class PagedDataResponseRetriever<T, P extends Page<T>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MjA0ODQ1", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#pullrequestreview-489204845", "createdAt": "2020-09-16T01:05:11Z", "commit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMTowNToxMVrOHScXhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMTowNToxMVrOHScXhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwMTE5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Represents a synchronized paged data provider with fixed page size that returns both page and response\n          \n          \n            \n             * Represents a synchronous paged data provider with fixed page size that returns both page and response", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r489101191", "createdAt": "2020-09-16T01:05:11Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseRetriever.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents a synchronized paged data provider with fixed page size that returns both page and response", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MjA1MTgw", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#pullrequestreview-489205180", "createdAt": "2020-09-16T01:06:27Z", "commit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMTowNjoyN1rOHScYxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMTowNjoyN1rOHScYxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwMTUxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Represents a collection of paged data with fixed page size where pages can be retrieved synchrounously\n          \n          \n            \n             * Represents a collection of paged data with fixed page size where pages can be retrieved synchronously", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r489101511", "createdAt": "2020-09-16T01:06:27Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+\n+/**\n+ * Represents a collection of paged data with fixed page size where pages can be retrieved synchrounously", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MjA1NDI5", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#pullrequestreview-489205429", "createdAt": "2020-09-16T01:07:16Z", "commit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMTowNzoxNlrOHScZrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMTowNzoxNlrOHScZrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwMTc0MQ==", "bodyText": "Not clear why there is a separate set of classes for paged data vs. paged data + response, but only for sync (for async there is only paged data + response).", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r489101741", "createdAt": "2020-09-16T01:07:16Z", "author": {"login": "bsiegel"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+\n+/**\n+ * Represents a collection of paged data with fixed page size where pages can be retrieved synchrounously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataCollection<T, P extends Page<T>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwODkxMTA0", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#pullrequestreview-490891104", "createdAt": "2020-09-17T18:50:50Z", "commit": {"oid": "db1ec16164cc6c5044910eec4dd5acb8042e4e21"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxODo1MDo1MFrOHTwn-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxODo1MDo1OVrOHTwoPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ4MTY1Nw==", "bodyText": "We need to add the license header here.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r490481657", "createdAt": "2020-09-17T18:50:50Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/http/responsepaging/AsyncPagedDataCollectionTest.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package com.azure.android.core.http.responsepaging;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db1ec16164cc6c5044910eec4dd5acb8042e4e21"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ4MTY4Ng==", "bodyText": "We need to add the license header here.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r490481686", "createdAt": "2020-09-17T18:50:55Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/http/responsepaging/PagedDataResponseCollectionTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package com.azure.android.core.http.responsepaging;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db1ec16164cc6c5044910eec4dd5acb8042e4e21"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ4MTcyNA==", "bodyText": "We need to add the license header here.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r490481724", "createdAt": "2020-09-17T18:50:59Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/util/paging/PagedDataCollectionTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package com.azure.android.core.util.paging;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db1ec16164cc6c5044910eec4dd5acb8042e4e21"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af6f9428c9a5d225c1e7261be5e0af9b0e57213d", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/af6f9428c9a5d225c1e7261be5e0af9b0e57213d", "committedDate": "2020-09-23T00:09:17Z", "message": "Create a new PR for paging support in Android core"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9bdcb9d2251ac473e42056a7b0bdbf9f7a65c45", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/e9bdcb9d2251ac473e42056a7b0bdbf9f7a65c45", "committedDate": "2020-09-23T00:09:17Z", "message": "Fix JavaDoc typos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d836a45471460352aa30f58c2f90257ee864c10d", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/d836a45471460352aa30f58c2f90257ee864c10d", "committedDate": "2020-09-23T00:09:18Z", "message": "Add NonNull annotation and Objects.requiredNonNull"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "571f62bc4a70ff8d7dd133847e9fe5a8525a14fe", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/571f62bc4a70ff8d7dd133847e9fe5a8525a14fe", "committedDate": "2020-09-23T00:09:18Z", "message": "Fix a JavaDoc inconsistency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb3a502f32a6269502c9175d7a7e6522712e7fd9", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/eb3a502f32a6269502c9175d7a7e6522712e7fd9", "committedDate": "2020-09-24T00:23:03Z", "message": "Create a new PR for paging support in Android core"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0aa2c90cd900e8ce640a66a4248d2347db8f82d9", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/0aa2c90cd900e8ce640a66a4248d2347db8f82d9", "committedDate": "2020-09-24T00:24:31Z", "message": "Add license to test code files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "874a04da7c8e28de23a04e8d491bcc2fa0631650", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/874a04da7c8e28de23a04e8d491bcc2fa0631650", "committedDate": "2020-09-24T00:24:31Z", "message": "Add another constructor for convenience"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/499768ae9c9108a2615e8787a7326a29a5781bae", "committedDate": "2020-09-28T16:15:29Z", "message": "Remove page size from retriever constructors since it only makes it harder for autorest.android"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5ODUwMzAy", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#pullrequestreview-499850302", "createdAt": "2020-09-30T22:16:01Z", "commit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "state": "COMMENTED", "comments": {"totalCount": 44, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjoxNjowMlrOHaxOyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDozMjoxMFrOHa0JNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzMTYyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    nextPageId = nextPageId;\n          \n          \n            \n                    this.nextPageId = nextPageId;", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497831624", "createdAt": "2020-09-30T22:16:02Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/Page.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a page of items\n+ * @param <T> type of the items in the page\n+ */\n+public class Page<T> {\n+    private final String pageId;\n+    private final List<T> items;\n+    private String nextPageId;\n+    private String previousPageId;\n+\n+    /**\n+     * Constructor requires page id and items\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items) {\n+        Objects.requireNonNull(pageId);\n+        Objects.requireNonNull(items);\n+        this.pageId = pageId;\n+        this.items = items;\n+    }\n+\n+    /**\n+     * Constructor with page id, items, and next page id\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     * @param nextPageId id of next page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items, String nextPageId) {\n+        this(pageId, items);\n+        nextPageId = nextPageId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzMjE5MA==", "bodyText": "For consistency.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return nextPageId;\n          \n          \n            \n                    return this.nextPageId;", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497832190", "createdAt": "2020-09-30T22:17:28Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/Page.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a page of items\n+ * @param <T> type of the items in the page\n+ */\n+public class Page<T> {\n+    private final String pageId;\n+    private final List<T> items;\n+    private String nextPageId;\n+    private String previousPageId;\n+\n+    /**\n+     * Constructor requires page id and items\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items) {\n+        Objects.requireNonNull(pageId);\n+        Objects.requireNonNull(items);\n+        this.pageId = pageId;\n+        this.items = items;\n+    }\n+\n+    /**\n+     * Constructor with page id, items, and next page id\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     * @param nextPageId id of next page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items, String nextPageId) {\n+        this(pageId, items);\n+        nextPageId = nextPageId;\n+    }\n+\n+    /**\n+     * Get the page id\n+     * @return id of the page\n+     */\n+    public String getPageId(){\n+        return this.pageId;\n+    }\n+\n+    /**\n+     * Get the items in the page\n+     * @return list of items in the page\n+     */\n+    public List<T> getItems() {\n+        return this.items;\n+    }\n+\n+    /**\n+     * Get an iterator for the items in the page\n+     * @return iterator for the items in the page\n+     */\n+    public Iterator<T> getIterator() {\n+        return items.iterator();\n+    }\n+\n+    /**\n+     * Set next page id\n+     * @param nextPageId id of the page next to this page\n+     * @return current page\n+     */\n+    public Page<T> setNextPageId(@NonNull String nextPageId) {\n+        this.nextPageId = nextPageId;\n+        return this;\n+    }\n+\n+    /**\n+     * Get id of the page next to this page\n+     * @return id of the next page\n+     */\n+    public String getNextPageId() {\n+        return nextPageId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzMjI4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Set previous page id\n          \n          \n            \n                 * Set the previous page id", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497832285", "createdAt": "2020-09-30T22:17:44Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/Page.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a page of items\n+ * @param <T> type of the items in the page\n+ */\n+public class Page<T> {\n+    private final String pageId;\n+    private final List<T> items;\n+    private String nextPageId;\n+    private String previousPageId;\n+\n+    /**\n+     * Constructor requires page id and items\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items) {\n+        Objects.requireNonNull(pageId);\n+        Objects.requireNonNull(items);\n+        this.pageId = pageId;\n+        this.items = items;\n+    }\n+\n+    /**\n+     * Constructor with page id, items, and next page id\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     * @param nextPageId id of next page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items, String nextPageId) {\n+        this(pageId, items);\n+        nextPageId = nextPageId;\n+    }\n+\n+    /**\n+     * Get the page id\n+     * @return id of the page\n+     */\n+    public String getPageId(){\n+        return this.pageId;\n+    }\n+\n+    /**\n+     * Get the items in the page\n+     * @return list of items in the page\n+     */\n+    public List<T> getItems() {\n+        return this.items;\n+    }\n+\n+    /**\n+     * Get an iterator for the items in the page\n+     * @return iterator for the items in the page\n+     */\n+    public Iterator<T> getIterator() {\n+        return items.iterator();\n+    }\n+\n+    /**\n+     * Set next page id\n+     * @param nextPageId id of the page next to this page\n+     * @return current page\n+     */\n+    public Page<T> setNextPageId(@NonNull String nextPageId) {\n+        this.nextPageId = nextPageId;\n+        return this;\n+    }\n+\n+    /**\n+     * Get id of the page next to this page\n+     * @return id of the next page\n+     */\n+    public String getNextPageId() {\n+        return nextPageId;\n+    }\n+\n+    /**\n+     * Set previous page id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzMjQxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Get id of the page before current page\n          \n          \n            \n                 * Get the previous page id", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497832410", "createdAt": "2020-09-30T22:18:05Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/Page.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a page of items\n+ * @param <T> type of the items in the page\n+ */\n+public class Page<T> {\n+    private final String pageId;\n+    private final List<T> items;\n+    private String nextPageId;\n+    private String previousPageId;\n+\n+    /**\n+     * Constructor requires page id and items\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items) {\n+        Objects.requireNonNull(pageId);\n+        Objects.requireNonNull(items);\n+        this.pageId = pageId;\n+        this.items = items;\n+    }\n+\n+    /**\n+     * Constructor with page id, items, and next page id\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     * @param nextPageId id of next page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items, String nextPageId) {\n+        this(pageId, items);\n+        nextPageId = nextPageId;\n+    }\n+\n+    /**\n+     * Get the page id\n+     * @return id of the page\n+     */\n+    public String getPageId(){\n+        return this.pageId;\n+    }\n+\n+    /**\n+     * Get the items in the page\n+     * @return list of items in the page\n+     */\n+    public List<T> getItems() {\n+        return this.items;\n+    }\n+\n+    /**\n+     * Get an iterator for the items in the page\n+     * @return iterator for the items in the page\n+     */\n+    public Iterator<T> getIterator() {\n+        return items.iterator();\n+    }\n+\n+    /**\n+     * Set next page id\n+     * @param nextPageId id of the page next to this page\n+     * @return current page\n+     */\n+    public Page<T> setNextPageId(@NonNull String nextPageId) {\n+        this.nextPageId = nextPageId;\n+        return this;\n+    }\n+\n+    /**\n+     * Get id of the page next to this page\n+     * @return id of the next page\n+     */\n+    public String getNextPageId() {\n+        return nextPageId;\n+    }\n+\n+    /**\n+     * Set previous page id\n+     * @param previousPageId id of the page before this page\n+     * @return current page\n+     */\n+    public Page<T> setPreviousPageId(@NonNull String previousPageId) {\n+        this.previousPageId = previousPageId;\n+        return this;\n+    }\n+\n+    /**\n+     * Get id of the page before current page", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzMjc2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param nextPageId id of next page\n          \n          \n            \n                 * @param nextPageId id of the next page", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497832767", "createdAt": "2020-09-30T22:19:05Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/Page.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a page of items\n+ * @param <T> type of the items in the page\n+ */\n+public class Page<T> {\n+    private final String pageId;\n+    private final List<T> items;\n+    private String nextPageId;\n+    private String previousPageId;\n+\n+    /**\n+     * Constructor requires page id and items\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items) {\n+        Objects.requireNonNull(pageId);\n+        Objects.requireNonNull(items);\n+        this.pageId = pageId;\n+        this.items = items;\n+    }\n+\n+    /**\n+     * Constructor with page id, items, and next page id\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     * @param nextPageId id of next page", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzNjM1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Set next page id\n          \n          \n            \n                 * Set the next page id", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497836355", "createdAt": "2020-09-30T22:28:46Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/Page.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a page of items\n+ * @param <T> type of the items in the page\n+ */\n+public class Page<T> {\n+    private final String pageId;\n+    private final List<T> items;\n+    private String nextPageId;\n+    private String previousPageId;\n+\n+    /**\n+     * Constructor requires page id and items\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items) {\n+        Objects.requireNonNull(pageId);\n+        Objects.requireNonNull(items);\n+        this.pageId = pageId;\n+        this.items = items;\n+    }\n+\n+    /**\n+     * Constructor with page id, items, and next page id\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     * @param nextPageId id of next page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items, String nextPageId) {\n+        this(pageId, items);\n+        nextPageId = nextPageId;\n+    }\n+\n+    /**\n+     * Get the page id\n+     * @return id of the page\n+     */\n+    public String getPageId(){\n+        return this.pageId;\n+    }\n+\n+    /**\n+     * Get the items in the page\n+     * @return list of items in the page\n+     */\n+    public List<T> getItems() {\n+        return this.items;\n+    }\n+\n+    /**\n+     * Get an iterator for the items in the page\n+     * @return iterator for the items in the page\n+     */\n+    public Iterator<T> getIterator() {\n+        return items.iterator();\n+    }\n+\n+    /**\n+     * Set next page id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzNjQyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param nextPageId id of the page next to this page\n          \n          \n            \n                 * @param nextPageId id of the page after this page", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497836424", "createdAt": "2020-09-30T22:28:58Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/Page.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a page of items\n+ * @param <T> type of the items in the page\n+ */\n+public class Page<T> {\n+    private final String pageId;\n+    private final List<T> items;\n+    private String nextPageId;\n+    private String previousPageId;\n+\n+    /**\n+     * Constructor requires page id and items\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items) {\n+        Objects.requireNonNull(pageId);\n+        Objects.requireNonNull(items);\n+        this.pageId = pageId;\n+        this.items = items;\n+    }\n+\n+    /**\n+     * Constructor with page id, items, and next page id\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     * @param nextPageId id of next page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items, String nextPageId) {\n+        this(pageId, items);\n+        nextPageId = nextPageId;\n+    }\n+\n+    /**\n+     * Get the page id\n+     * @return id of the page\n+     */\n+    public String getPageId(){\n+        return this.pageId;\n+    }\n+\n+    /**\n+     * Get the items in the page\n+     * @return list of items in the page\n+     */\n+    public List<T> getItems() {\n+        return this.items;\n+    }\n+\n+    /**\n+     * Get an iterator for the items in the page\n+     * @return iterator for the items in the page\n+     */\n+    public Iterator<T> getIterator() {\n+        return items.iterator();\n+    }\n+\n+    /**\n+     * Set next page id\n+     * @param nextPageId id of the page next to this page", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzNjUxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return current page\n          \n          \n            \n                 * @return this page", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497836512", "createdAt": "2020-09-30T22:29:14Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/Page.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a page of items\n+ * @param <T> type of the items in the page\n+ */\n+public class Page<T> {\n+    private final String pageId;\n+    private final List<T> items;\n+    private String nextPageId;\n+    private String previousPageId;\n+\n+    /**\n+     * Constructor requires page id and items\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items) {\n+        Objects.requireNonNull(pageId);\n+        Objects.requireNonNull(items);\n+        this.pageId = pageId;\n+        this.items = items;\n+    }\n+\n+    /**\n+     * Constructor with page id, items, and next page id\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     * @param nextPageId id of next page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items, String nextPageId) {\n+        this(pageId, items);\n+        nextPageId = nextPageId;\n+    }\n+\n+    /**\n+     * Get the page id\n+     * @return id of the page\n+     */\n+    public String getPageId(){\n+        return this.pageId;\n+    }\n+\n+    /**\n+     * Get the items in the page\n+     * @return list of items in the page\n+     */\n+    public List<T> getItems() {\n+        return this.items;\n+    }\n+\n+    /**\n+     * Get an iterator for the items in the page\n+     * @return iterator for the items in the page\n+     */\n+    public Iterator<T> getIterator() {\n+        return items.iterator();\n+    }\n+\n+    /**\n+     * Set next page id\n+     * @param nextPageId id of the page next to this page\n+     * @return current page", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzNjU3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return current page\n          \n          \n            \n                 * @return this page", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497836576", "createdAt": "2020-09-30T22:29:26Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/Page.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a page of items\n+ * @param <T> type of the items in the page\n+ */\n+public class Page<T> {\n+    private final String pageId;\n+    private final List<T> items;\n+    private String nextPageId;\n+    private String previousPageId;\n+\n+    /**\n+     * Constructor requires page id and items\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items) {\n+        Objects.requireNonNull(pageId);\n+        Objects.requireNonNull(items);\n+        this.pageId = pageId;\n+        this.items = items;\n+    }\n+\n+    /**\n+     * Constructor with page id, items, and next page id\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     * @param nextPageId id of next page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items, String nextPageId) {\n+        this(pageId, items);\n+        nextPageId = nextPageId;\n+    }\n+\n+    /**\n+     * Get the page id\n+     * @return id of the page\n+     */\n+    public String getPageId(){\n+        return this.pageId;\n+    }\n+\n+    /**\n+     * Get the items in the page\n+     * @return list of items in the page\n+     */\n+    public List<T> getItems() {\n+        return this.items;\n+    }\n+\n+    /**\n+     * Get an iterator for the items in the page\n+     * @return iterator for the items in the page\n+     */\n+    public Iterator<T> getIterator() {\n+        return items.iterator();\n+    }\n+\n+    /**\n+     * Set next page id\n+     * @param nextPageId id of the page next to this page\n+     * @return current page\n+     */\n+    public Page<T> setNextPageId(@NonNull String nextPageId) {\n+        this.nextPageId = nextPageId;\n+        return this;\n+    }\n+\n+    /**\n+     * Get id of the page next to this page\n+     * @return id of the next page\n+     */\n+    public String getNextPageId() {\n+        return nextPageId;\n+    }\n+\n+    /**\n+     * Set previous page id\n+     * @param previousPageId id of the page before this page\n+     * @return current page", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzNjkwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Get id of the page next to this page\n          \n          \n            \n                 * Get the next page id", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497836908", "createdAt": "2020-09-30T22:30:16Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/Page.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a page of items\n+ * @param <T> type of the items in the page\n+ */\n+public class Page<T> {\n+    private final String pageId;\n+    private final List<T> items;\n+    private String nextPageId;\n+    private String previousPageId;\n+\n+    /**\n+     * Constructor requires page id and items\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items) {\n+        Objects.requireNonNull(pageId);\n+        Objects.requireNonNull(items);\n+        this.pageId = pageId;\n+        this.items = items;\n+    }\n+\n+    /**\n+     * Constructor with page id, items, and next page id\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     * @param nextPageId id of next page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items, String nextPageId) {\n+        this(pageId, items);\n+        nextPageId = nextPageId;\n+    }\n+\n+    /**\n+     * Get the page id\n+     * @return id of the page\n+     */\n+    public String getPageId(){\n+        return this.pageId;\n+    }\n+\n+    /**\n+     * Get the items in the page\n+     * @return list of items in the page\n+     */\n+    public List<T> getItems() {\n+        return this.items;\n+    }\n+\n+    /**\n+     * Get an iterator for the items in the page\n+     * @return iterator for the items in the page\n+     */\n+    public Iterator<T> getIterator() {\n+        return items.iterator();\n+    }\n+\n+    /**\n+     * Set next page id\n+     * @param nextPageId id of the page next to this page\n+     * @return current page\n+     */\n+    public Page<T> setNextPageId(@NonNull String nextPageId) {\n+        this.nextPageId = nextPageId;\n+        return this;\n+    }\n+\n+    /**\n+     * Get id of the page next to this page", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzNzQ3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return id of the next page\n          \n          \n            \n                 * @return id of the page after this page", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497837474", "createdAt": "2020-09-30T22:31:40Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/Page.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a page of items\n+ * @param <T> type of the items in the page\n+ */\n+public class Page<T> {\n+    private final String pageId;\n+    private final List<T> items;\n+    private String nextPageId;\n+    private String previousPageId;\n+\n+    /**\n+     * Constructor requires page id and items\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items) {\n+        Objects.requireNonNull(pageId);\n+        Objects.requireNonNull(items);\n+        this.pageId = pageId;\n+        this.items = items;\n+    }\n+\n+    /**\n+     * Constructor with page id, items, and next page id\n+     * @param pageId id of the page\n+     * @param items items in the page\n+     * @param nextPageId id of next page\n+     */\n+    public Page(@NonNull String pageId, @NonNull List<T> items, String nextPageId) {\n+        this(pageId, items);\n+        nextPageId = nextPageId;\n+    }\n+\n+    /**\n+     * Get the page id\n+     * @return id of the page\n+     */\n+    public String getPageId(){\n+        return this.pageId;\n+    }\n+\n+    /**\n+     * Get the items in the page\n+     * @return list of items in the page\n+     */\n+    public List<T> getItems() {\n+        return this.items;\n+    }\n+\n+    /**\n+     * Get an iterator for the items in the page\n+     * @return iterator for the items in the page\n+     */\n+    public Iterator<T> getIterator() {\n+        return items.iterator();\n+    }\n+\n+    /**\n+     * Set next page id\n+     * @param nextPageId id of the page next to this page\n+     * @return current page\n+     */\n+    public Page<T> setNextPageId(@NonNull String nextPageId) {\n+        this.nextPageId = nextPageId;\n+        return this;\n+    }\n+\n+    /**\n+     * Get id of the page next to this page\n+     * @return id of the next page", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzODQ5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Retrieve first page of the collection. Throws RuntimeException on failure\n          \n          \n            \n                 * Retrieve the first page of the collection", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497838493", "createdAt": "2020-09-30T22:34:42Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataRetriever.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents a synchronous paged data provider with fixed page size\n+ * @param <T> items in the page\n+ * @param <P> page of items\n+ */\n+public abstract class PagedDataRetriever<T, P extends Page<T>> {\n+\n+    /**\n+     * Retrieve first page of the collection. Throws RuntimeException on failure", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzODc3MA==", "bodyText": "Do we really need to state this throws a RuntimeException? The same question applies for all other interface methods that do this.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497838770", "createdAt": "2020-09-30T22:35:28Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataRetriever.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents a synchronous paged data provider with fixed page size\n+ * @param <T> items in the page\n+ * @param <P> page of items\n+ */\n+public abstract class PagedDataRetriever<T, P extends Page<T>> {\n+\n+    /**\n+     * Retrieve first page of the collection. Throws RuntimeException on failure", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzODQ5Mw=="}, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzOTcyMw==", "bodyText": "I think it would look nice if we can add a link to both Page and Response in this Javadoc.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497839723", "createdAt": "2020-09-30T22:38:16Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseRetriever.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.util.paging.Page;\n+\n+/**\n+ * Represents a synchronous paged data provider with fixed page size that returns both page and response", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0MDk3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Represents an asynchronous paged data provider with fixed page size\n          \n          \n            \n             * Represents an asynchronous paged data provider with a fixed page size", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497840971", "createdAt": "2020-09-30T22:41:54Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataRetriever.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.util.paging.Page;\n+\n+/**\n+ * Represents an asynchronous paged data provider with fixed page size", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0MTE5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @param <P> page that contains the items\n          \n          \n            \n             * @param <P> type of the page", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497841192", "createdAt": "2020-09-30T22:42:30Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataRetriever.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.util.paging.Page;\n+\n+/**\n+ * Represents an asynchronous paged data provider with fixed page size\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0MTczNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param callback callback function to handle the page data along with the response for retrieving it\n          \n          \n            \n                 * @param callback callback function to handle the page data along with the response it comes with", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497841734", "createdAt": "2020-09-30T22:44:13Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataRetriever.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.util.paging.Page;\n+\n+/**\n+ * Represents an asynchronous paged data provider with fixed page size\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public abstract class AsyncPagedDataRetriever<T, P extends Page<T>> {\n+\n+    /**\n+     * Retrieve the first page in the collection\n+     * @param callback callback function to handle the page data along with the response for retrieving it", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0MjIzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Represents a collection of paged data with fixed page size where pages can be retrieved synchronously\n          \n          \n            \n             * Represents a collection of paged data with a fixed page size where pages can be retrieved synchronously", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497842234", "createdAt": "2020-09-30T22:45:32Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a collection of paged data with fixed page size where pages can be retrieved synchronously", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0MjMxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @param <P> page that contains the items\n          \n          \n            \n             * @param <P> type of the page", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497842318", "createdAt": "2020-09-30T22:45:46Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a collection of paged data with fixed page size where pages can be retrieved synchronously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0Mjc2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Constructor requires a synchronous paged data provider\n          \n          \n            \n                 * @param pagedDataRetriever paged data provider with fixed page size\n          \n          \n            \n                 * Constructor that requires a synchronous paged data provider\n          \n          \n            \n                 * @param pagedDataRetriever paged data provider with a fixed page size", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497842761", "createdAt": "2020-09-30T22:47:07Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a collection of paged data with fixed page size where pages can be retrieved synchronously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataCollection<T, P extends Page<T>> {\n+    private final PagedDataRetriever<T, P> pagedDataRetriever;\n+    private LinkedHashMap<String, P> pages = new LinkedHashMap<String, P>();\n+    private String firstPageId;\n+\n+    /**\n+     * Constructor requires a synchronous paged data provider\n+     * @param pagedDataRetriever paged data provider with fixed page size", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0MzA0Ng==", "bodyText": "For consistency\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    firstPageId = firstPage.getPageId();\n          \n          \n            \n                    this.firstPageId = firstPage.getPageId();", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497843046", "createdAt": "2020-09-30T22:47:54Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a collection of paged data with fixed page size where pages can be retrieved synchronously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataCollection<T, P extends Page<T>> {\n+    private final PagedDataRetriever<T, P> pagedDataRetriever;\n+    private LinkedHashMap<String, P> pages = new LinkedHashMap<String, P>();\n+    private String firstPageId;\n+\n+    /**\n+     * Constructor requires a synchronous paged data provider\n+     * @param pagedDataRetriever paged data provider with fixed page size\n+     */\n+    public PagedDataCollection(@NonNull PagedDataRetriever<T, P> pagedDataRetriever) {\n+        Objects.requireNonNull(pagedDataRetriever);\n+        this.pagedDataRetriever = pagedDataRetriever;\n+    }\n+\n+    /**\n+     * Retrieve the first page in the collection\n+     * @return First page of the collection\n+     */\n+    public P getFirstPage() {\n+        if (firstPageId != null) {\n+            return pages.get(firstPageId);\n+        }\n+        P firstPage = pagedDataRetriever.getFirstPage();\n+        firstPageId = firstPage.getPageId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0MzE1NQ==", "bodyText": "nit;\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return  firstPage;\n          \n          \n            \n                    return firstPage;", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497843155", "createdAt": "2020-09-30T22:48:15Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a collection of paged data with fixed page size where pages can be retrieved synchronously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataCollection<T, P extends Page<T>> {\n+    private final PagedDataRetriever<T, P> pagedDataRetriever;\n+    private LinkedHashMap<String, P> pages = new LinkedHashMap<String, P>();\n+    private String firstPageId;\n+\n+    /**\n+     * Constructor requires a synchronous paged data provider\n+     * @param pagedDataRetriever paged data provider with fixed page size\n+     */\n+    public PagedDataCollection(@NonNull PagedDataRetriever<T, P> pagedDataRetriever) {\n+        Objects.requireNonNull(pagedDataRetriever);\n+        this.pagedDataRetriever = pagedDataRetriever;\n+    }\n+\n+    /**\n+     * Retrieve the first page in the collection\n+     * @return First page of the collection\n+     */\n+    public P getFirstPage() {\n+        if (firstPageId != null) {\n+            return pages.get(firstPageId);\n+        }\n+        P firstPage = pagedDataRetriever.getFirstPage();\n+        firstPageId = firstPage.getPageId();\n+        pages.put(firstPage.getPageId(), firstPage);\n+        return  firstPage;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0NDgyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Retrieve a page with its id\n          \n          \n            \n                 * @param pageId id of the page\n          \n          \n            \n                 * @return page of data with the requested id\n          \n          \n            \n                 * Retrieve a page with the given id\n          \n          \n            \n                 * @param pageId id of the page to retrieve\n          \n          \n            \n                 * @return a page that matches the given id", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497844824", "createdAt": "2020-09-30T22:53:27Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a collection of paged data with fixed page size where pages can be retrieved synchronously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataCollection<T, P extends Page<T>> {\n+    private final PagedDataRetriever<T, P> pagedDataRetriever;\n+    private LinkedHashMap<String, P> pages = new LinkedHashMap<String, P>();\n+    private String firstPageId;\n+\n+    /**\n+     * Constructor requires a synchronous paged data provider\n+     * @param pagedDataRetriever paged data provider with fixed page size\n+     */\n+    public PagedDataCollection(@NonNull PagedDataRetriever<T, P> pagedDataRetriever) {\n+        Objects.requireNonNull(pagedDataRetriever);\n+        this.pagedDataRetriever = pagedDataRetriever;\n+    }\n+\n+    /**\n+     * Retrieve the first page in the collection\n+     * @return First page of the collection\n+     */\n+    public P getFirstPage() {\n+        if (firstPageId != null) {\n+            return pages.get(firstPageId);\n+        }\n+        P firstPage = pagedDataRetriever.getFirstPage();\n+        firstPageId = firstPage.getPageId();\n+        pages.put(firstPage.getPageId(), firstPage);\n+        return  firstPage;\n+    }\n+\n+    /**\n+     * Retrieve a page with its id\n+     * @param pageId id of the page\n+     * @return page of data with the requested id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2MTQxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Retrieve a page synchronously along with the response for retrieving it using page id\n          \n          \n            \n                 * @param pageId id of the page\n          \n          \n            \n                 * @return page and the response for retrieving it\n          \n          \n            \n                 * Retrieve a page with the given id synchronously along with the response it comes with\n          \n          \n            \n                 * @param pageId id of the page to retrieve\n          \n          \n            \n                 * @return a response with page data for the given page id", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497861413", "createdAt": "2020-09-30T23:48:29Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseCollection.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a collection of pages where page and the response for retrieving it can be returned synchronously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataResponseCollection<T, P extends Page<T>> {\n+    private final PagedDataResponseRetriever<T, P> pagedDataRetriever;\n+    private LinkedHashMap<String, Response<P>> pages = new LinkedHashMap<String, Response<P>>();\n+    private String firstPageId;\n+\n+    /**\n+     * Constructor requires a page provider that returns page data and response synchronously\n+     * @param pagedDataRetriever synchronous paged data provider\n+     */\n+    public PagedDataResponseCollection(@NonNull PagedDataResponseRetriever<T, P> pagedDataRetriever) {\n+        Objects.requireNonNull(pagedDataRetriever);\n+        this.pagedDataRetriever = pagedDataRetriever;\n+    }\n+\n+    /**\n+     * Retrieves the first page in the collection synchronously\n+     * @return page data along with the response for retrieving the first page\n+     */\n+    public Response<P> getFirstPage() {\n+        if (firstPageId != null) {\n+            return pages.get(firstPageId);\n+        }\n+        Response<P> firstPageResponse = pagedDataRetriever.getFirstPage();\n+        if (firstPageResponse != null\n+            && firstPageResponse.getValue() != null\n+            && firstPageResponse.getValue().getPageId() != null) {\n+            firstPageId = firstPageResponse.getValue().getPageId();\n+            pages.put(firstPageId, firstPageResponse);\n+        }\n+        return  firstPageResponse;\n+    }\n+\n+    /**\n+     * Retrieve a page synchronously along with the response for retrieving it using page id\n+     * @param pageId id of the page\n+     * @return page and the response for retrieving it", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2MTcyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Get a page by its id\n          \n          \n            \n                 * @param pageId id of the page\n          \n          \n            \n                 * @return a response with page data\n          \n          \n            \n                 * Retrieve a page with the given id along with the response it comes with\n          \n          \n            \n                 * @param pageId id of the page to retrieve\n          \n          \n            \n                 * @return a response with page data for the given page id", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497861720", "createdAt": "2020-09-30T23:49:42Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseRetriever.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.util.paging.Page;\n+\n+/**\n+ * Represents a synchronous paged data provider with fixed page size that returns both page and response\n+ * @param <T> type of the items in the page\n+ * @param <P> type of the page\n+ */\n+public abstract class PagedDataResponseRetriever<T, P extends Page<T>> {\n+\n+    /**\n+     * Get first page in the collection\n+     * @return a response with page data\n+     */\n+    public abstract Response<P> getFirstPage();\n+\n+    /**\n+     * Get a page by its id\n+     * @param pageId id of the page\n+     * @return a response with page data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2MjExNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Retrieve page with the given id. Throws RuntimeException on failure\n          \n          \n            \n                 * @param pageId id of the page to retrieve\n          \n          \n            \n                 * @return page of items\n          \n          \n            \n                 * Retrieve a page with the given id\n          \n          \n            \n                 * @param pageId id of the page to retrieve\n          \n          \n            \n                 * @return a page that matches the given id", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497862116", "createdAt": "2020-09-30T23:51:02Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataRetriever.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents a synchronous paged data provider with fixed page size\n+ * @param <T> items in the page\n+ * @param <P> page of items\n+ */\n+public abstract class PagedDataRetriever<T, P extends Page<T>> {\n+\n+    /**\n+     * Retrieve first page of the collection. Throws RuntimeException on failure\n+     * @return the first page of the collection\n+     */\n+    public abstract P getFirstPage();\n+\n+    /**\n+     * Retrieve page with the given id. Throws RuntimeException on failure\n+     * @param pageId id of the page to retrieve\n+     * @return page of items", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2Mjc2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Represents a synchronous paged data provider with fixed page size\n          \n          \n            \n             * @param <T> items in the page\n          \n          \n            \n             * @param <P> page of items\n          \n          \n            \n             * Represents a synchronous paged data provider with a fixed page size\n          \n          \n            \n             * @param <T> type of the items contained in the page\n          \n          \n            \n             * @param <P> type of the page", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497862768", "createdAt": "2020-09-30T23:53:17Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataRetriever.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents a synchronous paged data provider with fixed page size\n+ * @param <T> items in the page\n+ * @param <P> page of items", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2MzcyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Represents a synchronous paged data provider with fixed page size that returns both page and response\n          \n          \n            \n             * @param <T> type of the items in the page\n          \n          \n            \n             * @param <P> type of the page\n          \n          \n            \n             * Represents a synchronous paged data provider with a fixed page size that returns both page and response\n          \n          \n            \n             * @param <T> type of the items contained in the page\n          \n          \n            \n             * @param <P> type of the page", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497863724", "createdAt": "2020-09-30T23:56:40Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseRetriever.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.util.paging.Page;\n+\n+/**\n+ * Represents a synchronous paged data provider with fixed page size that returns both page and response\n+ * @param <T> type of the items in the page\n+ * @param <P> type of the page", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2Mzg2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Get first page in the collection\n          \n          \n            \n                 * @return a response with page data\n          \n          \n            \n                 * Retrieve the first page of the collection\n          \n          \n            \n                 * @return a response with page data for the first page of the collection", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497863867", "createdAt": "2020-09-30T23:57:14Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseRetriever.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.util.paging.Page;\n+\n+/**\n+ * Represents a synchronous paged data provider with fixed page size that returns both page and response\n+ * @param <T> type of the items in the page\n+ * @param <P> type of the page\n+ */\n+public abstract class PagedDataResponseRetriever<T, P extends Page<T>> {\n+\n+    /**\n+     * Get first page in the collection\n+     * @return a response with page data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2NDE1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Retrieves the first page in the collection synchronously\n          \n          \n            \n                 * @return page data along with the response for retrieving the first page\n          \n          \n            \n                 * Retrieve the first page of the collection synchronously\n          \n          \n            \n                 * @return a response with page data for the first page of the collection", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497864155", "createdAt": "2020-09-30T23:58:17Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseCollection.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a collection of pages where page and the response for retrieving it can be returned synchronously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataResponseCollection<T, P extends Page<T>> {\n+    private final PagedDataResponseRetriever<T, P> pagedDataRetriever;\n+    private LinkedHashMap<String, Response<P>> pages = new LinkedHashMap<String, Response<P>>();\n+    private String firstPageId;\n+\n+    /**\n+     * Constructor requires a page provider that returns page data and response synchronously\n+     * @param pagedDataRetriever synchronous paged data provider\n+     */\n+    public PagedDataResponseCollection(@NonNull PagedDataResponseRetriever<T, P> pagedDataRetriever) {\n+        Objects.requireNonNull(pagedDataRetriever);\n+        this.pagedDataRetriever = pagedDataRetriever;\n+    }\n+\n+    /**\n+     * Retrieves the first page in the collection synchronously\n+     * @return page data along with the response for retrieving the first page", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2NDk0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Retrieve the first page in the collection\n          \n          \n            \n                 * @return First page of the collection\n          \n          \n            \n                 * Retrieve the first page of the collection\n          \n          \n            \n                 * @return the first page of the collection", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497864942", "createdAt": "2020-10-01T00:00:58Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a collection of paged data with fixed page size where pages can be retrieved synchronously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataCollection<T, P extends Page<T>> {\n+    private final PagedDataRetriever<T, P> pagedDataRetriever;\n+    private LinkedHashMap<String, P> pages = new LinkedHashMap<String, P>();\n+    private String firstPageId;\n+\n+    /**\n+     * Constructor requires a synchronous paged data provider\n+     * @param pagedDataRetriever paged data provider with fixed page size\n+     */\n+    public PagedDataCollection(@NonNull PagedDataRetriever<T, P> pagedDataRetriever) {\n+        Objects.requireNonNull(pagedDataRetriever);\n+        this.pagedDataRetriever = pagedDataRetriever;\n+    }\n+\n+    /**\n+     * Retrieve the first page in the collection\n+     * @return First page of the collection", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2NjA1Ng==", "bodyText": "nit; We can use the value we just set.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    pages.put(firstPage.getPageId(), firstPage);\n          \n          \n            \n                    pages.put(firstPageId, firstPage);", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497866056", "createdAt": "2020-10-01T00:05:18Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a collection of paged data with fixed page size where pages can be retrieved synchronously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataCollection<T, P extends Page<T>> {\n+    private final PagedDataRetriever<T, P> pagedDataRetriever;\n+    private LinkedHashMap<String, P> pages = new LinkedHashMap<String, P>();\n+    private String firstPageId;\n+\n+    /**\n+     * Constructor requires a synchronous paged data provider\n+     * @param pagedDataRetriever paged data provider with fixed page size\n+     */\n+    public PagedDataCollection(@NonNull PagedDataRetriever<T, P> pagedDataRetriever) {\n+        Objects.requireNonNull(pagedDataRetriever);\n+        this.pagedDataRetriever = pagedDataRetriever;\n+    }\n+\n+    /**\n+     * Retrieve the first page in the collection\n+     * @return First page of the collection\n+     */\n+    public P getFirstPage() {\n+        if (firstPageId != null) {\n+            return pages.get(firstPageId);\n+        }\n+        P firstPage = pagedDataRetriever.getFirstPage();\n+        firstPageId = firstPage.getPageId();\n+        pages.put(firstPage.getPageId(), firstPage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2NjI2NA==", "bodyText": "What happens if the given pageId is null? The annotation will not stop users from passing such a value.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    P page = pages.get(pageId);\n          \n          \n            \n                    Objects.requireNonNull(pageId);\n          \n          \n            \n                    P page = pages.get(pageId);", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497866264", "createdAt": "2020-10-01T00:06:07Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a collection of paged data with fixed page size where pages can be retrieved synchronously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataCollection<T, P extends Page<T>> {\n+    private final PagedDataRetriever<T, P> pagedDataRetriever;\n+    private LinkedHashMap<String, P> pages = new LinkedHashMap<String, P>();\n+    private String firstPageId;\n+\n+    /**\n+     * Constructor requires a synchronous paged data provider\n+     * @param pagedDataRetriever paged data provider with fixed page size\n+     */\n+    public PagedDataCollection(@NonNull PagedDataRetriever<T, P> pagedDataRetriever) {\n+        Objects.requireNonNull(pagedDataRetriever);\n+        this.pagedDataRetriever = pagedDataRetriever;\n+    }\n+\n+    /**\n+     * Retrieve the first page in the collection\n+     * @return First page of the collection\n+     */\n+    public P getFirstPage() {\n+        if (firstPageId != null) {\n+            return pages.get(firstPageId);\n+        }\n+        P firstPage = pagedDataRetriever.getFirstPage();\n+        firstPageId = firstPage.getPageId();\n+        pages.put(firstPage.getPageId(), firstPage);\n+        return  firstPage;\n+    }\n+\n+    /**\n+     * Retrieve a page with its id\n+     * @param pageId id of the page\n+     * @return page of data with the requested id\n+     */\n+    public P getPage(@NonNull String pageId) {\n+        P page = pages.get(pageId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2NzU1OQ==", "bodyText": "nit; we can just use the pageId given as an input parameter.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    pages.put(page.getPageId(), page);\n          \n          \n            \n                    pages.put(pageId, page);", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497867559", "createdAt": "2020-10-01T00:11:06Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.util.paging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a collection of paged data with fixed page size where pages can be retrieved synchronously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataCollection<T, P extends Page<T>> {\n+    private final PagedDataRetriever<T, P> pagedDataRetriever;\n+    private LinkedHashMap<String, P> pages = new LinkedHashMap<String, P>();\n+    private String firstPageId;\n+\n+    /**\n+     * Constructor requires a synchronous paged data provider\n+     * @param pagedDataRetriever paged data provider with fixed page size\n+     */\n+    public PagedDataCollection(@NonNull PagedDataRetriever<T, P> pagedDataRetriever) {\n+        Objects.requireNonNull(pagedDataRetriever);\n+        this.pagedDataRetriever = pagedDataRetriever;\n+    }\n+\n+    /**\n+     * Retrieve the first page in the collection\n+     * @return First page of the collection\n+     */\n+    public P getFirstPage() {\n+        if (firstPageId != null) {\n+            return pages.get(firstPageId);\n+        }\n+        P firstPage = pagedDataRetriever.getFirstPage();\n+        firstPageId = firstPage.getPageId();\n+        pages.put(firstPage.getPageId(), firstPage);\n+        return  firstPage;\n+    }\n+\n+    /**\n+     * Retrieve a page with its id\n+     * @param pageId id of the page\n+     * @return page of data with the requested id\n+     */\n+    public P getPage(@NonNull String pageId) {\n+        P page = pages.get(pageId);\n+        if (page != null) {\n+            return page;\n+        }\n+\n+        page = pagedDataRetriever.getPage(pageId);\n+        // setting previous page id should simplify implementation for androidx.arch.DataSource\n+        final Iterator<P> iterator = pages.values().iterator();\n+        while(iterator.hasNext()){\n+            final P existingPage = iterator.next();\n+            if (pageId.equals(existingPage.getNextPageId())) {\n+                page.setPreviousPageId(existingPage.getPageId());\n+                break;\n+            }\n+        }\n+        pages.put(page.getPageId(), page);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2NzY2NQ==", "bodyText": "nit;\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return  firstPageResponse;\n          \n          \n            \n                    return firstPageResponse;", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497867665", "createdAt": "2020-10-01T00:11:36Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseCollection.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a collection of pages where page and the response for retrieving it can be returned synchronously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataResponseCollection<T, P extends Page<T>> {\n+    private final PagedDataResponseRetriever<T, P> pagedDataRetriever;\n+    private LinkedHashMap<String, Response<P>> pages = new LinkedHashMap<String, Response<P>>();\n+    private String firstPageId;\n+\n+    /**\n+     * Constructor requires a page provider that returns page data and response synchronously\n+     * @param pagedDataRetriever synchronous paged data provider\n+     */\n+    public PagedDataResponseCollection(@NonNull PagedDataResponseRetriever<T, P> pagedDataRetriever) {\n+        Objects.requireNonNull(pagedDataRetriever);\n+        this.pagedDataRetriever = pagedDataRetriever;\n+    }\n+\n+    /**\n+     * Retrieves the first page in the collection synchronously\n+     * @return page data along with the response for retrieving the first page\n+     */\n+    public Response<P> getFirstPage() {\n+        if (firstPageId != null) {\n+            return pages.get(firstPageId);\n+        }\n+        Response<P> firstPageResponse = pagedDataRetriever.getFirstPage();\n+        if (firstPageResponse != null\n+            && firstPageResponse.getValue() != null\n+            && firstPageResponse.getValue().getPageId() != null) {\n+            firstPageId = firstPageResponse.getValue().getPageId();\n+            pages.put(firstPageId, firstPageResponse);\n+        }\n+        return  firstPageResponse;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2ODQ4OQ==", "bodyText": "nit; We can use the pageId given as an input parameter.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        pages.put(pageResponse.getValue().getPageId(), pageResponse);\n          \n          \n            \n                        pages.put(pageId, pageResponse);", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497868489", "createdAt": "2020-10-01T00:14:46Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseCollection.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a collection of pages where page and the response for retrieving it can be returned synchronously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataResponseCollection<T, P extends Page<T>> {\n+    private final PagedDataResponseRetriever<T, P> pagedDataRetriever;\n+    private LinkedHashMap<String, Response<P>> pages = new LinkedHashMap<String, Response<P>>();\n+    private String firstPageId;\n+\n+    /**\n+     * Constructor requires a page provider that returns page data and response synchronously\n+     * @param pagedDataRetriever synchronous paged data provider\n+     */\n+    public PagedDataResponseCollection(@NonNull PagedDataResponseRetriever<T, P> pagedDataRetriever) {\n+        Objects.requireNonNull(pagedDataRetriever);\n+        this.pagedDataRetriever = pagedDataRetriever;\n+    }\n+\n+    /**\n+     * Retrieves the first page in the collection synchronously\n+     * @return page data along with the response for retrieving the first page\n+     */\n+    public Response<P> getFirstPage() {\n+        if (firstPageId != null) {\n+            return pages.get(firstPageId);\n+        }\n+        Response<P> firstPageResponse = pagedDataRetriever.getFirstPage();\n+        if (firstPageResponse != null\n+            && firstPageResponse.getValue() != null\n+            && firstPageResponse.getValue().getPageId() != null) {\n+            firstPageId = firstPageResponse.getValue().getPageId();\n+            pages.put(firstPageId, firstPageResponse);\n+        }\n+        return  firstPageResponse;\n+    }\n+\n+    /**\n+     * Retrieve a page synchronously along with the response for retrieving it using page id\n+     * @param pageId id of the page\n+     * @return page and the response for retrieving it\n+     */\n+    public Response<P> getPage(@NonNull String pageId) {\n+        Objects.requireNonNull(pageId);\n+        Response<P> pageResponse = pages.get(pageId);\n+        if (pageResponse != null) {\n+            return pageResponse;\n+        }\n+\n+        pageResponse = pagedDataRetriever.getPage(pageId);\n+        if (pageResponse != null\n+            && pageResponse.getValue() != null\n+            && pageResponse.getValue().getPageId() != null) {\n+            // setting previous page id should simplify implementation for androidx.arch.DataSource\n+            final Iterator<Response<P>> iterator = pages.values().iterator();\n+            while (iterator.hasNext()) {\n+                final P existingPage = iterator.next().getValue();\n+                if (pageId.equals(existingPage.getNextPageId())) {\n+                    pageResponse.getValue().setPreviousPageId(existingPage.getPageId());\n+                    break;\n+                }\n+            }\n+            pages.put(pageResponse.getValue().getPageId(), pageResponse);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2ODc4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Retrieve a page with its id\n          \n          \n            \n                 * @param pageId id of the page\n          \n          \n            \n                 * @param callback callback function to handle the page data along with the response for retrieving it\n          \n          \n            \n                 * Retrieve a page with the given id\n          \n          \n            \n                 * @param pageId id of the page\n          \n          \n            \n                 * @param callback callback function to handle the page data along with the response it comes with", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497868782", "createdAt": "2020-10-01T00:15:21Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataRetriever.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.util.paging.Page;\n+\n+/**\n+ * Represents an asynchronous paged data provider with fixed page size\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public abstract class AsyncPagedDataRetriever<T, P extends Page<T>> {\n+\n+    /**\n+     * Retrieve the first page in the collection\n+     * @param callback callback function to handle the page data along with the response for retrieving it\n+     */\n+    public abstract void getFirstPage(Callback<P> callback);\n+\n+    /**\n+     * Retrieve a page with its id\n+     * @param pageId id of the page\n+     * @param callback callback function to handle the page data along with the response for retrieving it", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2OTcwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Represents a collection of pages where page data and response for retrieving it can be returned asynchronously\n          \n          \n            \n             * @param <T> type of the items in the page\n          \n          \n            \n             * @param <P> Page of items\n          \n          \n            \n             * Represents a collection of pages where page data and the response it comes with it can be obtained asynchronously\n          \n          \n            \n             * @param <T> type of the items in the page\n          \n          \n            \n             * @param <P> type of the page", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497869706", "createdAt": "2020-10-01T00:16:44Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataCollection.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Objects;\n+\n+import okhttp3.Response;\n+\n+/**\n+ * Represents a collection of pages where page data and response for retrieving it can be returned asynchronously\n+ * @param <T> type of the items in the page\n+ * @param <P> Page of items", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3MTExMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Construction requires an asynchronous paged data provider\n          \n          \n            \n                 * @param asyncPagedDataRetriever an asynchronous page data provider\n          \n          \n            \n                 * Constructor requires an asynchronous paged data provider\n          \n          \n            \n                 * @param asyncPagedDataRetriever an asynchronous paged data provider", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497871112", "createdAt": "2020-10-01T00:19:02Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataCollection.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Objects;\n+\n+import okhttp3.Response;\n+\n+/**\n+ * Represents a collection of pages where page data and response for retrieving it can be returned asynchronously\n+ * @param <T> type of the items in the page\n+ * @param <P> Page of items\n+ */\n+public class AsyncPagedDataCollection<T, P extends Page<T>> {\n+    private final AsyncPagedDataRetriever<T, P> asyncPagedDataRetriever;\n+    private LinkedHashMap<String, PageAndResponse<P>> pages = new LinkedHashMap<String, PageAndResponse<P>>();\n+    private String firstPageId;\n+\n+    /**\n+     * Construction requires an asynchronous paged data provider\n+     * @param asyncPagedDataRetriever an asynchronous page data provider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3MjUxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Gets first page in the collection along with the response retrieving the first page\n          \n          \n            \n                 * @param callback a callback interface for handling the first page and its response\n          \n          \n            \n                 * Retrieve the first page of the collection along with the response it comes with\n          \n          \n            \n                 * @param callback callback interface for handling the first page and the response it comes with", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497872513", "createdAt": "2020-10-01T00:21:13Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataCollection.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Objects;\n+\n+import okhttp3.Response;\n+\n+/**\n+ * Represents a collection of pages where page data and response for retrieving it can be returned asynchronously\n+ * @param <T> type of the items in the page\n+ * @param <P> Page of items\n+ */\n+public class AsyncPagedDataCollection<T, P extends Page<T>> {\n+    private final AsyncPagedDataRetriever<T, P> asyncPagedDataRetriever;\n+    private LinkedHashMap<String, PageAndResponse<P>> pages = new LinkedHashMap<String, PageAndResponse<P>>();\n+    private String firstPageId;\n+\n+    /**\n+     * Construction requires an asynchronous paged data provider\n+     * @param asyncPagedDataRetriever an asynchronous page data provider\n+     */\n+    public AsyncPagedDataCollection(@NonNull AsyncPagedDataRetriever<T, P> asyncPagedDataRetriever) {\n+        Objects.requireNonNull(asyncPagedDataRetriever);\n+        this.asyncPagedDataRetriever = asyncPagedDataRetriever;\n+    }\n+\n+    private void cacheResponse(P page, Response response) {\n+        if (page.getPageId() == null) {\n+            return;\n+        }\n+        pages.put(page.getPageId(), new PageAndResponse<P>(page, response));\n+\n+        // setting previous page id should simplify implementation for androidx.arch.DataSource\n+        final Iterator<PageAndResponse<P>> iterator = pages.values().iterator();\n+        while(iterator.hasNext()){\n+            final P existingPage = iterator.next().page;\n+            if (page.getPageId().equals(existingPage.getNextPageId())){\n+                page.setPreviousPageId(existingPage.getPageId());\n+                break;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Gets first page in the collection along with the response retrieving the first page\n+     * @param callback a callback interface for handling the first page and its response", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3NTA1Nw==", "bodyText": "How likely is it that the pageId turns out to be null? We don't check for nullness in the other PagedCollection classes.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497875057", "createdAt": "2020-10-01T00:25:34Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/PagedDataResponseCollection.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a collection of pages where page and the response for retrieving it can be returned synchronously\n+ * @param <T> type of the items contained in the page\n+ * @param <P> page that contains the items\n+ */\n+public class PagedDataResponseCollection<T, P extends Page<T>> {\n+    private final PagedDataResponseRetriever<T, P> pagedDataRetriever;\n+    private LinkedHashMap<String, Response<P>> pages = new LinkedHashMap<String, Response<P>>();\n+    private String firstPageId;\n+\n+    /**\n+     * Constructor requires a page provider that returns page data and response synchronously\n+     * @param pagedDataRetriever synchronous paged data provider\n+     */\n+    public PagedDataResponseCollection(@NonNull PagedDataResponseRetriever<T, P> pagedDataRetriever) {\n+        Objects.requireNonNull(pagedDataRetriever);\n+        this.pagedDataRetriever = pagedDataRetriever;\n+    }\n+\n+    /**\n+     * Retrieves the first page in the collection synchronously\n+     * @return page data along with the response for retrieving the first page\n+     */\n+    public Response<P> getFirstPage() {\n+        if (firstPageId != null) {\n+            return pages.get(firstPageId);\n+        }\n+        Response<P> firstPageResponse = pagedDataRetriever.getFirstPage();\n+        if (firstPageResponse != null\n+            && firstPageResponse.getValue() != null\n+            && firstPageResponse.getValue().getPageId() != null) {\n+            firstPageId = firstPageResponse.getValue().getPageId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3NTYyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Retrieve a page by its id\n          \n          \n            \n                 * @param pageId id of the page\n          \n          \n            \n                 * @param callback callback interface for handling the page along with its response\n          \n          \n            \n                 * Retrieve a page with the given id\n          \n          \n            \n                 * @param pageId id of the page\n          \n          \n            \n                 * @param callback callback interface for handling the page along with the response it comes with", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497875621", "createdAt": "2020-10-01T00:26:29Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataCollection.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Objects;\n+\n+import okhttp3.Response;\n+\n+/**\n+ * Represents a collection of pages where page data and response for retrieving it can be returned asynchronously\n+ * @param <T> type of the items in the page\n+ * @param <P> Page of items\n+ */\n+public class AsyncPagedDataCollection<T, P extends Page<T>> {\n+    private final AsyncPagedDataRetriever<T, P> asyncPagedDataRetriever;\n+    private LinkedHashMap<String, PageAndResponse<P>> pages = new LinkedHashMap<String, PageAndResponse<P>>();\n+    private String firstPageId;\n+\n+    /**\n+     * Construction requires an asynchronous paged data provider\n+     * @param asyncPagedDataRetriever an asynchronous page data provider\n+     */\n+    public AsyncPagedDataCollection(@NonNull AsyncPagedDataRetriever<T, P> asyncPagedDataRetriever) {\n+        Objects.requireNonNull(asyncPagedDataRetriever);\n+        this.asyncPagedDataRetriever = asyncPagedDataRetriever;\n+    }\n+\n+    private void cacheResponse(P page, Response response) {\n+        if (page.getPageId() == null) {\n+            return;\n+        }\n+        pages.put(page.getPageId(), new PageAndResponse<P>(page, response));\n+\n+        // setting previous page id should simplify implementation for androidx.arch.DataSource\n+        final Iterator<PageAndResponse<P>> iterator = pages.values().iterator();\n+        while(iterator.hasNext()){\n+            final P existingPage = iterator.next().page;\n+            if (page.getPageId().equals(existingPage.getNextPageId())){\n+                page.setPreviousPageId(existingPage.getPageId());\n+                break;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Gets first page in the collection along with the response retrieving the first page\n+     * @param callback a callback interface for handling the first page and its response\n+     */\n+    public void getFirstPage(@NonNull Callback<P> callback) {\n+        Objects.requireNonNull(callback);\n+        if (firstPageId == null){\n+            asyncPagedDataRetriever.getFirstPage(new Callback<P>() {\n+                @Override\n+                public void onSuccess(P value, Response response) {\n+                    if (value == null) {\n+                        callback.onSuccess(value, response);\n+                        return;\n+                    }\n+\n+                    firstPageId = value.getPageId();\n+                    cacheResponse(value, response);\n+                    callback.onSuccess(value, response);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable t, Response response) {\n+                    callback.onFailure(t, response);\n+                }\n+            });\n+        }\n+        else {\n+            PageAndResponse<P> firstPageResponse = pages.get(firstPageId);\n+            callback.onSuccess(firstPageResponse.page, firstPageResponse.response);\n+        }\n+    }\n+\n+    /**\n+     * Retrieve a page by its id\n+     * @param pageId id of the page\n+     * @param callback callback interface for handling the page along with its response", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3ODcwMA==", "bodyText": "Adding to this for later discussion: We can definitely handle the given okhttp3.Response in the callback and map its contents to our own Response<T> type. I think we did that in Storage at some point.", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497878700", "createdAt": "2020-10-01T00:31:10Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataCollection.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+\n+import okhttp3.Response;\n+\n+/**\n+ * Represents a collection of pages where page data and response for retrieving it can be returned asynchronously\n+ * @param <T> type of the items in the page\n+ * @param <P> Page of items\n+ */\n+public class AsyncPagedDataCollection<T, P extends Page<T>> {\n+    private final AsyncPagedDataRetriever<T, P> pagedDataRetriever;\n+    private LinkedHashMap<String, PageAndResponse<P>> pages = new LinkedHashMap<String, PageAndResponse<P>>();\n+    private String firstPageId;\n+\n+    /**\n+     * Construction requires an asynchronous paged data provider\n+     * @param pagedDataRetriever an asynchronous page data provider\n+     */\n+    public AsyncPagedDataCollection(AsyncPagedDataRetriever<T, P> pagedDataRetriever) {\n+        this.pagedDataRetriever = pagedDataRetriever;\n+    }\n+\n+    private void cacheResponse(P page, Response response) {\n+        if (page.getPageId() == null) {\n+            return;\n+        }\n+        pages.put(page.getPageId(), new PageAndResponse<P>(page, response));\n+\n+        // setting previous page id should simplify implementation for androidx.arch.DataSource\n+        final Iterator<PageAndResponse<P>> iterator = pages.values().iterator();\n+        while(iterator.hasNext()){\n+            final P existingPage = iterator.next().page;\n+            if (page.getPageId().equals(existingPage.getNextPageId())){\n+                page.setPreviousPageId(existingPage.getPageId());\n+                break;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Gets first page in the collection along with the response retrieving the first page\n+     * @param callback a callback interface for handling the first page and its response\n+     */\n+    public void getFirstPage(Callback<P> callback) {\n+        if (firstPageId == null){\n+            pagedDataRetriever.getFirstPage(new Callback<P>() {\n+\n+                @Override\n+                public void onSuccess(P value, Response response) {\n+                    if (value == null) {\n+                        callback.onSuccess(value, response);\n+                        return;\n+                    }\n+\n+                    firstPageId = value.getPageId();\n+                    cacheResponse(value, response);\n+                    callback.onSuccess(value, response);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable t, Response response) {\n+                    callback.onFailure(t, response);\n+                }\n+            });\n+        }\n+        else {\n+            PageAndResponse<P> firstPageResponse = pages.get(firstPageId);\n+            callback.onSuccess(firstPageResponse.page, firstPageResponse.response);\n+        }\n+    }\n+\n+    /**\n+     * Retrieve a page by its id\n+     * @param pageId id of the page\n+     * @param callback callback interface for handling the page along with its response\n+     */\n+    public void getPage(String pageId, Callback<P> callback) {\n+        PageAndResponse<P> pageEntry = pages.get(pageId);\n+        if (pageEntry == null){\n+            pagedDataRetriever.getPage(pageId, new Callback<P>() {\n+                @Override\n+                public void onSuccess(P value, Response response) {\n+                    if (value == null) {\n+                        callback.onSuccess(null, response);\n+                    }\n+\n+                    cacheResponse(value, response);\n+                    callback.onSuccess(value, response);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable t, Response response) {\n+                    callback.onFailure(t, response);\n+                }\n+            });\n+        }\n+        else {\n+            callback.onSuccess(pageEntry.page, pageEntry.response);\n+        }\n+    }\n+\n+    private static class PageAndResponse<P> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA5ODEzOA=="}, "originalCommit": {"oid": "e9419dd2934c799b184e02f396f36ec864d736a1"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3OTM1MA==", "bodyText": "For consistency with getPage() below.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    callback.onSuccess(value, response);\n          \n          \n            \n                                    callback.onSuccess(null, response);", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#discussion_r497879350", "createdAt": "2020-10-01T00:32:10Z", "author": {"login": "vcolin7"}, "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataCollection.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ */\n+package com.azure.android.core.http.responsepaging;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.util.paging.Page;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Objects;\n+\n+import okhttp3.Response;\n+\n+/**\n+ * Represents a collection of pages where page data and response for retrieving it can be returned asynchronously\n+ * @param <T> type of the items in the page\n+ * @param <P> Page of items\n+ */\n+public class AsyncPagedDataCollection<T, P extends Page<T>> {\n+    private final AsyncPagedDataRetriever<T, P> asyncPagedDataRetriever;\n+    private LinkedHashMap<String, PageAndResponse<P>> pages = new LinkedHashMap<String, PageAndResponse<P>>();\n+    private String firstPageId;\n+\n+    /**\n+     * Construction requires an asynchronous paged data provider\n+     * @param asyncPagedDataRetriever an asynchronous page data provider\n+     */\n+    public AsyncPagedDataCollection(@NonNull AsyncPagedDataRetriever<T, P> asyncPagedDataRetriever) {\n+        Objects.requireNonNull(asyncPagedDataRetriever);\n+        this.asyncPagedDataRetriever = asyncPagedDataRetriever;\n+    }\n+\n+    private void cacheResponse(P page, Response response) {\n+        if (page.getPageId() == null) {\n+            return;\n+        }\n+        pages.put(page.getPageId(), new PageAndResponse<P>(page, response));\n+\n+        // setting previous page id should simplify implementation for androidx.arch.DataSource\n+        final Iterator<PageAndResponse<P>> iterator = pages.values().iterator();\n+        while(iterator.hasNext()){\n+            final P existingPage = iterator.next().page;\n+            if (page.getPageId().equals(existingPage.getNextPageId())){\n+                page.setPreviousPageId(existingPage.getPageId());\n+                break;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Gets first page in the collection along with the response retrieving the first page\n+     * @param callback a callback interface for handling the first page and its response\n+     */\n+    public void getFirstPage(@NonNull Callback<P> callback) {\n+        Objects.requireNonNull(callback);\n+        if (firstPageId == null){\n+            asyncPagedDataRetriever.getFirstPage(new Callback<P>() {\n+                @Override\n+                public void onSuccess(P value, Response response) {\n+                    if (value == null) {\n+                        callback.onSuccess(value, response);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499768ae9c9108a2615e8787a7326a29a5781bae"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ce1e9cb0864b7bf4e9161235258b275ed04c2b8", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/5ce1e9cb0864b7bf4e9161235258b275ed04c2b8", "committedDate": "2020-10-01T02:18:48Z", "message": "Fix JavaDoc according to review feedback; Add null check before caching"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "804bab9dbf42b824d4e47128f79eb1cb4374b411", "author": {"user": {"login": "JianpingChen", "name": "Jianping Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/804bab9dbf42b824d4e47128f79eb1cb4374b411", "committedDate": "2020-10-01T18:43:57Z", "message": "Update sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataCollection.java\n\nCo-authored-by: vcolin7 <vicolina@microsoft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4df81124301f6cdcb7fec151883e0ed01b97dd7", "author": {"user": {"login": "JianpingChen", "name": "Jianping Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/f4df81124301f6cdcb7fec151883e0ed01b97dd7", "committedDate": "2020-10-01T18:45:04Z", "message": "Update sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataCollection.java\n\nCo-authored-by: vcolin7 <vicolina@microsoft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a246db9b6938e250f7ef2d7db29906d5c6b38be", "author": {"user": {"login": "JianpingChen", "name": "Jianping Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/4a246db9b6938e250f7ef2d7db29906d5c6b38be", "committedDate": "2020-10-01T18:45:49Z", "message": "Update sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataRetriever.java\n\nCo-authored-by: vcolin7 <vicolina@microsoft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f592028253590144111ef621f0f01fac4d9b0746", "author": {"user": {"login": "JianpingChen", "name": "Jianping Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/f592028253590144111ef621f0f01fac4d9b0746", "committedDate": "2020-10-01T18:47:13Z", "message": "Update sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataRetriever.java\n\nCo-authored-by: vcolin7 <vicolina@microsoft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "480fdc02b1ff9f938bdc3e6192be5083fe83f4cf", "author": {"user": {"login": "JianpingChen", "name": "Jianping Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/480fdc02b1ff9f938bdc3e6192be5083fe83f4cf", "committedDate": "2020-10-01T18:47:56Z", "message": "Update sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataCollection.java\n\nCo-authored-by: vcolin7 <vicolina@microsoft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76efa14c70f151a9f9575300ccba9ba6dfe00213", "author": {"user": {"login": "JianpingChen", "name": "Jianping Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/76efa14c70f151a9f9575300ccba9ba6dfe00213", "committedDate": "2020-10-01T18:48:29Z", "message": "Update sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataCollection.java\n\nCo-authored-by: vcolin7 <vicolina@microsoft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da29fdde6c9f511b813f0ba2ec3a0bc0e537c1e5", "author": {"user": {"login": "JianpingChen", "name": "Jianping Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/da29fdde6c9f511b813f0ba2ec3a0bc0e537c1e5", "committedDate": "2020-10-01T18:48:59Z", "message": "Update sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataRetriever.java\n\nCo-authored-by: vcolin7 <vicolina@microsoft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e924e08705c2d565ddbf746c35a651b431d8bdce", "author": {"user": {"login": "JianpingChen", "name": "Jianping Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/e924e08705c2d565ddbf746c35a651b431d8bdce", "committedDate": "2020-10-01T18:49:18Z", "message": "Update sdk/core/azure-core/src/main/java/com/azure/android/core/http/responsepaging/AsyncPagedDataRetriever.java\n\nCo-authored-by: vcolin7 <vicolina@microsoft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b04f43f99ba8734d44f36425adeb325eb6ba2da", "author": {"user": {"login": "JianpingChen", "name": "Jianping Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-android/commit/8b04f43f99ba8734d44f36425adeb325eb6ba2da", "committedDate": "2020-10-01T18:56:18Z", "message": "Apply suggestions from code review\n\nCo-authored-by: vcolin7 <vicolina@microsoft.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNjY1MzQ4", "url": "https://github.com/Azure/azure-sdk-for-android/pull/346#pullrequestreview-500665348", "createdAt": "2020-10-01T19:45:12Z", "commit": {"oid": "8b04f43f99ba8734d44f36425adeb325eb6ba2da"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1225, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}