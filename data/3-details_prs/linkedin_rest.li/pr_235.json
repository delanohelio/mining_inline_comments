{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzOTUzODE0", "number": 235, "title": "Add extensionSchema validation task", "bodyText": "Add extensionSchema validation task\n\nthis PR is doing basic schema validation for extension schemas.\nthe field annotation validation will leverage annotation processor, it will be done in a following PR.\n\n\nManual tested the task in other MP.", "createdAt": "2020-03-26T04:45:34Z", "url": "https://github.com/linkedin/rest.li/pull/235", "merged": true, "mergeCommit": {"oid": "8bb8f34a3c27eb122beeb7db681e2005844b62fe"}, "closed": true, "closedAt": "2020-03-31T04:32:55Z", "author": {"login": "nickibi"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRUvkLgBqjMxNjY2ODk5Nzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcS62lZABqjMxODE0MTEwNjg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ff129fae38caffe88e0cc2f35a1869c5c7aae4b6", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/ff129fae38caffe88e0cc2f35a1869c5c7aae4b6", "committedDate": "2020-03-26T04:43:30Z", "message": "Update Pegesus plugin"}, "afterCommit": {"oid": "f0209d8176af3a4ea0e1b88e3bc32ce4c7596df6", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/f0209d8176af3a4ea0e1b88e3bc32ce4c7596df6", "committedDate": "2020-03-26T04:46:48Z", "message": "Add extension schema validation tasks\nUpdate Pegesus plugin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNzE0MzM5", "url": "https://github.com/linkedin/rest.li/pull/235#pullrequestreview-381714339", "createdAt": "2020-03-26T05:39:50Z", "commit": {"oid": "f0209d8176af3a4ea0e1b88e3bc32ce4c7596df6"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNTozOTo1MFrOF74CJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNTo1MjowOFrOF74PMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMyODM1Ng==", "bodyText": "add some debug?", "url": "https://github.com/linkedin/rest.li/pull/235#discussion_r398328356", "createdAt": "2020-03-26T05:39:50Z", "author": {"login": "junchuanwang"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -913,6 +921,41 @@ protected void configureGeneratedSourcesAndJavadoc(Project project)\n     }\n   }\n \n+  protected void configureExtensionSchemaValidation(Project project, SourceSet sourceSet)\n+  {\n+    // extension schema  directory\n+    File extensionSchemaDir = project.file(getExtensionSchemaPath(project, sourceSet));\n+\n+    if (SharedFileUtils.getSuffixedFiles(project, extensionSchemaDir, PDL_FILE_SUFFIX).isEmpty())\n+    {\n+      return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0209d8176af3a4ea0e1b88e3bc32ce4c7596df6"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMzMDMxNw==", "bodyText": "Where is this used? I didn't see", "url": "https://github.com/linkedin/rest.li/pull/235#discussion_r398330317", "createdAt": "2020-03-26T05:47:14Z", "author": {"login": "junchuanwang"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -721,6 +722,11 @@ public void apply(Project project)\n     // and validate.\n     Configuration schemaAnnotationHandler = configurations.maybeCreate(\"schemaAnnotationHandler\");\n \n+    // configuration for parsing and validating extension schemas during build time.\n+    //\n+    // publish extension schemas into extension schema Jar once the validation passes.\n+    Configuration extensionSchema = configurations.maybeCreate(\"extensionSchema\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0209d8176af3a4ea0e1b88e3bc32ce4c7596df6"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMzMDYzMQ==", "bodyText": "Rename this to end with \"cmdLineApp\" to follow convention.", "url": "https://github.com/linkedin/rest.li/pull/235#discussion_r398330631", "createdAt": "2020-03-26T05:48:10Z", "author": {"login": "junchuanwang"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidation.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.data;\n+\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaResolver;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.RecordDataSchema;\n+import com.linkedin.data.schema.grammar.PdlSchemaParser;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.GnuParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.OptionBuilder;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ExtensionSchemaValidation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0209d8176af3a4ea0e1b88e3bc32ce4c7596df6"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMzMDgyOA==", "bodyText": "nits: Wrong arguments", "url": "https://github.com/linkedin/rest.li/pull/235#discussion_r398330828", "createdAt": "2020-03-26T05:48:47Z", "author": {"login": "junchuanwang"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidation.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.data;\n+\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaResolver;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.RecordDataSchema;\n+import com.linkedin.data.schema.grammar.PdlSchemaParser;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.GnuParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.OptionBuilder;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ExtensionSchemaValidation\n+{\n+  private static final Logger _logger = LoggerFactory.getLogger(ExtensionSchemaValidation.class);\n+  private static final Options _options = new Options();\n+  private static final String _pdl = \"pdl\";\n+\n+  static\n+  {\n+    _options.addOption(OptionBuilder.withLongOpt(\"help\")\n+        .withDescription(\"Print help\")\n+        .create('h'));\n+  }\n+\n+  public static void main(String[] args) throws Exception\n+  {\n+    try {\n+      final CommandLineParser parser = new GnuParser();\n+      CommandLine cl = parser.parse(_options, args);\n+\n+      if (cl.hasOption('h'))\n+      {\n+        help();\n+        System.exit(0);\n+      }\n+\n+      String[] cliArgs = cl.getArgs();\n+      if (cliArgs.length != 2)\n+      {\n+        _logger.error(\"Wrong argument given\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0209d8176af3a4ea0e1b88e3bc32ce4c7596df6"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMzMTI1OQ==", "bodyText": "Should give the reason", "url": "https://github.com/linkedin/rest.li/pull/235#discussion_r398331259", "createdAt": "2020-03-26T05:50:27Z", "author": {"login": "junchuanwang"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidation.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.data;\n+\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaResolver;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.RecordDataSchema;\n+import com.linkedin.data.schema.grammar.PdlSchemaParser;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.GnuParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.OptionBuilder;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ExtensionSchemaValidation\n+{\n+  private static final Logger _logger = LoggerFactory.getLogger(ExtensionSchemaValidation.class);\n+  private static final Options _options = new Options();\n+  private static final String _pdl = \"pdl\";\n+\n+  static\n+  {\n+    _options.addOption(OptionBuilder.withLongOpt(\"help\")\n+        .withDescription(\"Print help\")\n+        .create('h'));\n+  }\n+\n+  public static void main(String[] args) throws Exception\n+  {\n+    try {\n+      final CommandLineParser parser = new GnuParser();\n+      CommandLine cl = parser.parse(_options, args);\n+\n+      if (cl.hasOption('h'))\n+      {\n+        help();\n+        System.exit(0);\n+      }\n+\n+      String[] cliArgs = cl.getArgs();\n+      if (cliArgs.length != 2)\n+      {\n+        _logger.error(\"Wrong argument given\");\n+        help();\n+        System.exit(1);\n+      }\n+      int i = 0;\n+      String resolverPath = cliArgs[i++];\n+      String inputPath = cliArgs[i];\n+\n+      File inputDir = new File(inputPath);\n+\n+      if (!inputDir.exists() || !inputDir.canRead()) {\n+        _logger.error(\"Input directory does not exist or cannot be read: \" + inputDir.getAbsolutePath());\n+        System.exit(1);\n+      }\n+\n+      parseAndValidateExtensionSchemas(resolverPath, inputDir);\n+    }\n+    catch (ParseException e)\n+    {\n+      _logger.error(\"Invalid arguments: \" + e.getMessage());\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static void parseAndValidateExtensionSchemas(String resolverPath, File inputDir) throws IOException\n+  {\n+    // Parse each extension schema and validate it\n+    Iterator<File> iterator = FileUtils.iterateFiles(inputDir, new String[]{_pdl}, true);\n+    while(iterator.hasNext())\n+    {\n+      File inputFile = iterator.next();\n+      DataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(resolverPath);\n+      PdlSchemaParser parser = new PdlSchemaParser(resolver);\n+      parser.parse(new FileInputStream(inputFile));\n+      if (parser.hasError())\n+      {\n+        _logger.error(parser.errorMessage());\n+        System.exit(1);\n+      }\n+\n+      List<DataSchema> topLevelDataSchemas = parser.topLevelDataSchemas();\n+      if (topLevelDataSchemas == null || topLevelDataSchemas.isEmpty() || topLevelDataSchemas.size() > 1)\n+      {\n+        _logger.error(\"Could not parse extension schema : \" + inputFile.getAbsolutePath());\n+        System.exit(1);\n+      }\n+      DataSchema topLevelDataSchema = topLevelDataSchemas.get(0);\n+      if (!(topLevelDataSchema instanceof NamedDataSchema))\n+      {\n+        _logger.error(\"Invalid extension schema : \" + inputFile.getAbsolutePath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0209d8176af3a4ea0e1b88e3bc32ce4c7596df6"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMzMTQ2Nw==", "bodyText": "\"dot\" needs to be at the beginning of the line", "url": "https://github.com/linkedin/rest.li/pull/235#discussion_r398331467", "createdAt": "2020-03-26T05:51:19Z", "author": {"login": "junchuanwang"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidation.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.data;\n+\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaResolver;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.RecordDataSchema;\n+import com.linkedin.data.schema.grammar.PdlSchemaParser;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.GnuParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.OptionBuilder;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ExtensionSchemaValidation\n+{\n+  private static final Logger _logger = LoggerFactory.getLogger(ExtensionSchemaValidation.class);\n+  private static final Options _options = new Options();\n+  private static final String _pdl = \"pdl\";\n+\n+  static\n+  {\n+    _options.addOption(OptionBuilder.withLongOpt(\"help\")\n+        .withDescription(\"Print help\")\n+        .create('h'));\n+  }\n+\n+  public static void main(String[] args) throws Exception\n+  {\n+    try {\n+      final CommandLineParser parser = new GnuParser();\n+      CommandLine cl = parser.parse(_options, args);\n+\n+      if (cl.hasOption('h'))\n+      {\n+        help();\n+        System.exit(0);\n+      }\n+\n+      String[] cliArgs = cl.getArgs();\n+      if (cliArgs.length != 2)\n+      {\n+        _logger.error(\"Wrong argument given\");\n+        help();\n+        System.exit(1);\n+      }\n+      int i = 0;\n+      String resolverPath = cliArgs[i++];\n+      String inputPath = cliArgs[i];\n+\n+      File inputDir = new File(inputPath);\n+\n+      if (!inputDir.exists() || !inputDir.canRead()) {\n+        _logger.error(\"Input directory does not exist or cannot be read: \" + inputDir.getAbsolutePath());\n+        System.exit(1);\n+      }\n+\n+      parseAndValidateExtensionSchemas(resolverPath, inputDir);\n+    }\n+    catch (ParseException e)\n+    {\n+      _logger.error(\"Invalid arguments: \" + e.getMessage());\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static void parseAndValidateExtensionSchemas(String resolverPath, File inputDir) throws IOException\n+  {\n+    // Parse each extension schema and validate it\n+    Iterator<File> iterator = FileUtils.iterateFiles(inputDir, new String[]{_pdl}, true);\n+    while(iterator.hasNext())\n+    {\n+      File inputFile = iterator.next();\n+      DataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(resolverPath);\n+      PdlSchemaParser parser = new PdlSchemaParser(resolver);\n+      parser.parse(new FileInputStream(inputFile));\n+      if (parser.hasError())\n+      {\n+        _logger.error(parser.errorMessage());\n+        System.exit(1);\n+      }\n+\n+      List<DataSchema> topLevelDataSchemas = parser.topLevelDataSchemas();\n+      if (topLevelDataSchemas == null || topLevelDataSchemas.isEmpty() || topLevelDataSchemas.size() > 1)\n+      {\n+        _logger.error(\"Could not parse extension schema : \" + inputFile.getAbsolutePath());\n+        System.exit(1);\n+      }\n+      DataSchema topLevelDataSchema = topLevelDataSchemas.get(0);\n+      if (!(topLevelDataSchema instanceof NamedDataSchema))\n+      {\n+        _logger.error(\"Invalid extension schema : \" + inputFile.getAbsolutePath());\n+        System.exit(1);\n+      }\n+      if (!((NamedDataSchema) topLevelDataSchema).getFullName().endsWith(\"Extensions\"))\n+      {\n+        _logger.error(\"Invalid extension schema name : [{}]. The name of the extension schema must be <baseSchemaName> + 'Extensions'\", ((NamedDataSchema) topLevelDataSchema).getFullName());\n+        System.exit(1);\n+      }\n+\n+      List<NamedDataSchema> includes = ((RecordDataSchema)topLevelDataSchema).getInclude();\n+      // TODO: Check includes schemas can only be the resource schemas\n+\n+      List<RecordDataSchema.Field> extensionSchemaFields = ((RecordDataSchema)topLevelDataSchema).getFields().\n+          stream().", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0209d8176af3a4ea0e1b88e3bc32ce4c7596df6"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMzMTY5OA==", "bodyText": "uncessary parenthesis, also can be add to last line, no need to split", "url": "https://github.com/linkedin/rest.li/pull/235#discussion_r398331698", "createdAt": "2020-03-26T05:52:08Z", "author": {"login": "junchuanwang"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidation.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.data;\n+\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaResolver;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.RecordDataSchema;\n+import com.linkedin.data.schema.grammar.PdlSchemaParser;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.GnuParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.OptionBuilder;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ExtensionSchemaValidation\n+{\n+  private static final Logger _logger = LoggerFactory.getLogger(ExtensionSchemaValidation.class);\n+  private static final Options _options = new Options();\n+  private static final String _pdl = \"pdl\";\n+\n+  static\n+  {\n+    _options.addOption(OptionBuilder.withLongOpt(\"help\")\n+        .withDescription(\"Print help\")\n+        .create('h'));\n+  }\n+\n+  public static void main(String[] args) throws Exception\n+  {\n+    try {\n+      final CommandLineParser parser = new GnuParser();\n+      CommandLine cl = parser.parse(_options, args);\n+\n+      if (cl.hasOption('h'))\n+      {\n+        help();\n+        System.exit(0);\n+      }\n+\n+      String[] cliArgs = cl.getArgs();\n+      if (cliArgs.length != 2)\n+      {\n+        _logger.error(\"Wrong argument given\");\n+        help();\n+        System.exit(1);\n+      }\n+      int i = 0;\n+      String resolverPath = cliArgs[i++];\n+      String inputPath = cliArgs[i];\n+\n+      File inputDir = new File(inputPath);\n+\n+      if (!inputDir.exists() || !inputDir.canRead()) {\n+        _logger.error(\"Input directory does not exist or cannot be read: \" + inputDir.getAbsolutePath());\n+        System.exit(1);\n+      }\n+\n+      parseAndValidateExtensionSchemas(resolverPath, inputDir);\n+    }\n+    catch (ParseException e)\n+    {\n+      _logger.error(\"Invalid arguments: \" + e.getMessage());\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static void parseAndValidateExtensionSchemas(String resolverPath, File inputDir) throws IOException\n+  {\n+    // Parse each extension schema and validate it\n+    Iterator<File> iterator = FileUtils.iterateFiles(inputDir, new String[]{_pdl}, true);\n+    while(iterator.hasNext())\n+    {\n+      File inputFile = iterator.next();\n+      DataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(resolverPath);\n+      PdlSchemaParser parser = new PdlSchemaParser(resolver);\n+      parser.parse(new FileInputStream(inputFile));\n+      if (parser.hasError())\n+      {\n+        _logger.error(parser.errorMessage());\n+        System.exit(1);\n+      }\n+\n+      List<DataSchema> topLevelDataSchemas = parser.topLevelDataSchemas();\n+      if (topLevelDataSchemas == null || topLevelDataSchemas.isEmpty() || topLevelDataSchemas.size() > 1)\n+      {\n+        _logger.error(\"Could not parse extension schema : \" + inputFile.getAbsolutePath());\n+        System.exit(1);\n+      }\n+      DataSchema topLevelDataSchema = topLevelDataSchemas.get(0);\n+      if (!(topLevelDataSchema instanceof NamedDataSchema))\n+      {\n+        _logger.error(\"Invalid extension schema : \" + inputFile.getAbsolutePath());\n+        System.exit(1);\n+      }\n+      if (!((NamedDataSchema) topLevelDataSchema).getFullName().endsWith(\"Extensions\"))\n+      {\n+        _logger.error(\"Invalid extension schema name : [{}]. The name of the extension schema must be <baseSchemaName> + 'Extensions'\", ((NamedDataSchema) topLevelDataSchema).getFullName());\n+        System.exit(1);\n+      }\n+\n+      List<NamedDataSchema> includes = ((RecordDataSchema)topLevelDataSchema).getInclude();\n+      // TODO: Check includes schemas can only be the resource schemas\n+\n+      List<RecordDataSchema.Field> extensionSchemaFields = ((RecordDataSchema)topLevelDataSchema).getFields().\n+          stream().\n+          filter(\n+              f -> !((RecordDataSchema) topLevelDataSchema).isFieldFromIncludes(f))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0209d8176af3a4ea0e1b88e3bc32ce4c7596df6"}, "originalPosition": 134}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNDIzOTMw", "url": "https://github.com/linkedin/rest.li/pull/235#pullrequestreview-382423930", "createdAt": "2020-03-26T21:11:58Z", "commit": {"oid": "f0209d8176af3a4ea0e1b88e3bc32ce4c7596df6"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MjEzOTgy", "url": "https://github.com/linkedin/rest.li/pull/235#pullrequestreview-384213982", "createdAt": "2020-03-30T20:41:47Z", "commit": {"oid": "e17899b7f75cd86f18c4c61951bb0f9c968ec5d4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a3e8f3731ea3a6eadac85d0f042fc23d80d6fa7", "author": {"user": {"login": "nickibi", "name": "Yingjie Bi"}}, "url": "https://github.com/linkedin/rest.li/commit/9a3e8f3731ea3a6eadac85d0f042fc23d80d6fa7", "committedDate": "2020-03-30T20:44:57Z", "message": "Add extensionSchema validation task\n - this PR is doing basic schema validation, the field annoation validation will be done in a following PR."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bd9d7eb96cd6e68219858013ed727fa14368945", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/2bd9d7eb96cd6e68219858013ed727fa14368945", "committedDate": "2020-03-30T20:44:57Z", "message": "Add extension schema validation tasks\nUpdate Pegesus plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd4c860468f4e0345df13211c23e450d9c7b5355", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/dd4c860468f4e0345df13211c23e450d9c7b5355", "committedDate": "2020-03-30T20:44:57Z", "message": "Address code review feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c836db9a3bb5d046bfeae6464b96bdd7e8d3b3f0", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/c836db9a3bb5d046bfeae6464b96bdd7e8d3b3f0", "committedDate": "2020-03-30T20:44:57Z", "message": "Update ExtensionSchemaValidation class name to ExtensionSchemaValidationCmdLineApp"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MzYxNzEx", "url": "https://github.com/linkedin/rest.li/pull/235#pullrequestreview-384361711", "createdAt": "2020-03-31T02:29:56Z", "commit": {"oid": "f25ff7e26e5fd7c0037fcd21bc4448d4a48c139e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMjoyOTo1N1rOF-DDnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMjozNTozNFrOF-DJCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYwNjExMQ==", "bodyText": "I'd rename this to configureExtensionSchemaValidationAndPublishTasks as this is not just validating (also publishing jars)", "url": "https://github.com/linkedin/rest.li/pull/235#discussion_r400606111", "createdAt": "2020-03-31T02:29:57Z", "author": {"login": "karthikbalasub"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -913,6 +921,41 @@ protected void configureGeneratedSourcesAndJavadoc(Project project)\n     }\n   }\n \n+  protected void configureExtensionSchemaValidation(Project project, SourceSet sourceSet)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f25ff7e26e5fd7c0037fcd21bc4448d4a48c139e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYwNzQ5OQ==", "bodyText": "li-pegasus (in opensource)", "url": "https://github.com/linkedin/rest.li/pull/235#discussion_r400607499", "createdAt": "2020-03-31T02:35:34Z", "author": {"login": "karthikbalasub"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/tasks/ValidateExtensionSchemaTask.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.pegasus.gradle.tasks;\n+\n+import com.linkedin.pegasus.gradle.PathingJarUtil;\n+import com.linkedin.pegasus.gradle.PegasusPlugin;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.file.FileCollection;\n+import org.gradle.api.file.FileTree;\n+import org.gradle.api.tasks.CacheableTask;\n+import org.gradle.api.tasks.Classpath;\n+import org.gradle.api.tasks.InputDirectory;\n+import org.gradle.api.tasks.PathSensitive;\n+import org.gradle.api.tasks.PathSensitivity;\n+import org.gradle.api.tasks.SkipWhenEmpty;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import static com.linkedin.pegasus.gradle.SharedFileUtils.*;\n+\n+/**\n+ * Validate extension schemas.\n+ *\n+ * To use this plugin, add these three lines to your build.gradle:\n+ * <pre>\n+ * apply plugin: 'li-pegasus2'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f25ff7e26e5fd7c0037fcd21bc4448d4a48c139e"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a516efd98aca8832b106a19f96dd293aab584803", "author": {"user": {"login": "nickibi", "name": "Yingjie Bi"}}, "url": "https://github.com/linkedin/rest.li/commit/a516efd98aca8832b106a19f96dd293aab584803", "committedDate": "2020-03-31T03:47:53Z", "message": "Add extensionSchema validation task\n - this PR is doing basic schema validation, the field annoation validation will be done in a following PR."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5dcf4db120f7d2660732a68462ea9dd54b8fc2c3", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/5dcf4db120f7d2660732a68462ea9dd54b8fc2c3", "committedDate": "2020-03-31T03:49:17Z", "message": "Add extension schema validation tasks\nUpdate Pegesus plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d993fd0cde4feeef376122e8342050d44fe93a35", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/d993fd0cde4feeef376122e8342050d44fe93a35", "committedDate": "2020-03-31T03:49:20Z", "message": "Address code review feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "949f9c490b0350a145812fb2cc9ad5a3eb0c2859", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/949f9c490b0350a145812fb2cc9ad5a3eb0c2859", "committedDate": "2020-03-31T03:49:20Z", "message": "Update ExtensionSchemaValidation class name to ExtensionSchemaValidationCmdLineApp"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f6ac4a4f05e41dfc3ce5c1a42cdab551723b7c15", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/f6ac4a4f05e41dfc3ce5c1a42cdab551723b7c15", "committedDate": "2020-03-31T03:22:33Z", "message": "Addressed code review feedback"}, "afterCommit": {"oid": "949f9c490b0350a145812fb2cc9ad5a3eb0c2859", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/949f9c490b0350a145812fb2cc9ad5a3eb0c2859", "committedDate": "2020-03-31T03:49:20Z", "message": "Update ExtensionSchemaValidation class name to ExtensionSchemaValidationCmdLineApp"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 13, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}