{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3NzAwMzA3", "number": 381, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDo0OToxN1rOEYSyQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQyMTo1NzoxM1rOEY1-4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTA5MDU2OnYy", "diffSide": "RIGHT", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDo0OToxOFrOHAjazg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMToxMToyMVrOHAkWEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM0MjM1MA==", "bodyText": "It would make more sense if it was called validateExtensionSchemas IMO", "url": "https://github.com/linkedin/rest.li/pull/381#discussion_r470342350", "createdAt": "2020-08-14T00:49:18Z", "author": {"login": "evanw555"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -1693,6 +1646,34 @@ protected GenerateDataTemplateTask configureDataTemplateGeneration(Project proje\n     prepareLegacySchemasForPublishTask.dependsOn(destroyStaleFiles);\n     dataTemplateJarDepends.add(prepareLegacySchemasForPublishTask);\n \n+    // extension schema directory\n+    File extensionSchemaDir = project.file(getExtensionSchemaPath(project, sourceSet));\n+\n+    if (!SharedFileUtils.getSuffixedFiles(project, extensionSchemaDir, PDL_FILE_SUFFIX).isEmpty()) {\n+      // Validate extension schemas if extension schemas are provided.\n+      ValidateExtensionSchemaTask validateExtensionSchemaTask = project.getTasks()\n+          .create(sourceSet.getTaskName(\"validate\", \"ExtensionSchema\"), ValidateExtensionSchemaTask.class, task -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4df68aee6e917cf095bd08e6a07c6cf52d801cdd"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM1NzUyMw==", "bodyText": "fixed", "url": "https://github.com/linkedin/rest.li/pull/381#discussion_r470357523", "createdAt": "2020-08-14T01:11:21Z", "author": {"login": "nickibi"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -1693,6 +1646,34 @@ protected GenerateDataTemplateTask configureDataTemplateGeneration(Project proje\n     prepareLegacySchemasForPublishTask.dependsOn(destroyStaleFiles);\n     dataTemplateJarDepends.add(prepareLegacySchemasForPublishTask);\n \n+    // extension schema directory\n+    File extensionSchemaDir = project.file(getExtensionSchemaPath(project, sourceSet));\n+\n+    if (!SharedFileUtils.getSuffixedFiles(project, extensionSchemaDir, PDL_FILE_SUFFIX).isEmpty()) {\n+      // Validate extension schemas if extension schemas are provided.\n+      ValidateExtensionSchemaTask validateExtensionSchemaTask = project.getTasks()\n+          .create(sourceSet.getTaskName(\"validate\", \"ExtensionSchema\"), ValidateExtensionSchemaTask.class, task -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM0MjM1MA=="}, "originalCommit": {"oid": "4df68aee6e917cf095bd08e6a07c6cf52d801cdd"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTA5ODEyOnYy", "diffSide": "RIGHT", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDo1MToxNFrOHAjgAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMTowMToxMVrOHAj69g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM0MzY4MA==", "bodyText": "So we're only supporting extensions as PDLs from the get-go? Good \ud83d\ude03", "url": "https://github.com/linkedin/rest.li/pull/381#discussion_r470343680", "createdAt": "2020-08-14T00:51:14Z", "author": {"login": "evanw555"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -1693,6 +1646,34 @@ protected GenerateDataTemplateTask configureDataTemplateGeneration(Project proje\n     prepareLegacySchemasForPublishTask.dependsOn(destroyStaleFiles);\n     dataTemplateJarDepends.add(prepareLegacySchemasForPublishTask);\n \n+    // extension schema directory\n+    File extensionSchemaDir = project.file(getExtensionSchemaPath(project, sourceSet));\n+\n+    if (!SharedFileUtils.getSuffixedFiles(project, extensionSchemaDir, PDL_FILE_SUFFIX).isEmpty()) {\n+      // Validate extension schemas if extension schemas are provided.\n+      ValidateExtensionSchemaTask validateExtensionSchemaTask = project.getTasks()\n+          .create(sourceSet.getTaskName(\"validate\", \"ExtensionSchema\"), ValidateExtensionSchemaTask.class, task -> {\n+            task.setInputDir(extensionSchemaDir);\n+            task.setResolverPath(\n+                getDataModelConfig(project, sourceSet).plus(project.files(getDataSchemaPath(project, sourceSet))));\n+            task.setClassPath(project.getConfigurations().getByName(\"pegasusPlugin\"));\n+            if (isPropertyTrue(project, ENABLE_ARG_FILE)) {\n+              task.setEnableArgFile(true);\n+            }\n+          });\n+\n+      Task prepareExtensionSchemasForPublishTask = project.getTasks()\n+          .create(sourceSet.getName() + \"CopyExtensionSchemas\", Sync.class, task ->\n+          {\n+            task.from(extensionSchemaDir, syncSpec -> syncSpec.include(\"**/*\" + PDL_FILE_SUFFIX));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4df68aee6e917cf095bd08e6a07c6cf52d801cdd"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM1MDU4Mg==", "bodyText": "Yes, this feature is only supported for PDL.", "url": "https://github.com/linkedin/rest.li/pull/381#discussion_r470350582", "createdAt": "2020-08-14T01:01:11Z", "author": {"login": "nickibi"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -1693,6 +1646,34 @@ protected GenerateDataTemplateTask configureDataTemplateGeneration(Project proje\n     prepareLegacySchemasForPublishTask.dependsOn(destroyStaleFiles);\n     dataTemplateJarDepends.add(prepareLegacySchemasForPublishTask);\n \n+    // extension schema directory\n+    File extensionSchemaDir = project.file(getExtensionSchemaPath(project, sourceSet));\n+\n+    if (!SharedFileUtils.getSuffixedFiles(project, extensionSchemaDir, PDL_FILE_SUFFIX).isEmpty()) {\n+      // Validate extension schemas if extension schemas are provided.\n+      ValidateExtensionSchemaTask validateExtensionSchemaTask = project.getTasks()\n+          .create(sourceSet.getTaskName(\"validate\", \"ExtensionSchema\"), ValidateExtensionSchemaTask.class, task -> {\n+            task.setInputDir(extensionSchemaDir);\n+            task.setResolverPath(\n+                getDataModelConfig(project, sourceSet).plus(project.files(getDataSchemaPath(project, sourceSet))));\n+            task.setClassPath(project.getConfigurations().getByName(\"pegasusPlugin\"));\n+            if (isPropertyTrue(project, ENABLE_ARG_FILE)) {\n+              task.setEnableArgFile(true);\n+            }\n+          });\n+\n+      Task prepareExtensionSchemasForPublishTask = project.getTasks()\n+          .create(sourceSet.getName() + \"CopyExtensionSchemas\", Sync.class, task ->\n+          {\n+            task.from(extensionSchemaDir, syncSpec -> syncSpec.include(\"**/*\" + PDL_FILE_SUFFIX));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM0MzY4MA=="}, "originalCommit": {"oid": "4df68aee6e917cf095bd08e6a07c6cf52d801cdd"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTMyNjU3OnYy", "diffSide": "RIGHT", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMjo0NToxMVrOHAlsbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwNDoxMToxNFrOHBHllg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM3OTYzMQ==", "bodyText": "nit: move \"pegasusPlugin\" to constants", "url": "https://github.com/linkedin/rest.li/pull/381#discussion_r470379631", "createdAt": "2020-08-14T02:45:11Z", "author": {"login": "aman1309"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -1693,6 +1646,34 @@ protected GenerateDataTemplateTask configureDataTemplateGeneration(Project proje\n     prepareLegacySchemasForPublishTask.dependsOn(destroyStaleFiles);\n     dataTemplateJarDepends.add(prepareLegacySchemasForPublishTask);\n \n+    // extension schema directory\n+    File extensionSchemaDir = project.file(getExtensionSchemaPath(project, sourceSet));\n+\n+    if (!SharedFileUtils.getSuffixedFiles(project, extensionSchemaDir, PDL_FILE_SUFFIX).isEmpty()) {\n+      // Validate extension schemas if extension schemas are provided.\n+      ValidateExtensionSchemaTask validateExtensionSchemaTask = project.getTasks()\n+          .create(sourceSet.getTaskName(\"validate\", \"ExtensionSchemas\"), ValidateExtensionSchemaTask.class, task -> {\n+            task.setInputDir(extensionSchemaDir);\n+            task.setResolverPath(\n+                getDataModelConfig(project, sourceSet).plus(project.files(getDataSchemaPath(project, sourceSet))));\n+            task.setClassPath(project.getConfigurations().getByName(\"pegasusPlugin\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8572cface14bf50b2065789632647e177022d73b"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzNDkzNA==", "bodyText": "Used constants instead.", "url": "https://github.com/linkedin/rest.li/pull/381#discussion_r470934934", "createdAt": "2020-08-15T04:11:14Z", "author": {"login": "nickibi"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -1693,6 +1646,34 @@ protected GenerateDataTemplateTask configureDataTemplateGeneration(Project proje\n     prepareLegacySchemasForPublishTask.dependsOn(destroyStaleFiles);\n     dataTemplateJarDepends.add(prepareLegacySchemasForPublishTask);\n \n+    // extension schema directory\n+    File extensionSchemaDir = project.file(getExtensionSchemaPath(project, sourceSet));\n+\n+    if (!SharedFileUtils.getSuffixedFiles(project, extensionSchemaDir, PDL_FILE_SUFFIX).isEmpty()) {\n+      // Validate extension schemas if extension schemas are provided.\n+      ValidateExtensionSchemaTask validateExtensionSchemaTask = project.getTasks()\n+          .create(sourceSet.getTaskName(\"validate\", \"ExtensionSchemas\"), ValidateExtensionSchemaTask.class, task -> {\n+            task.setInputDir(extensionSchemaDir);\n+            task.setResolverPath(\n+                getDataModelConfig(project, sourceSet).plus(project.files(getDataSchemaPath(project, sourceSet))));\n+            task.setClassPath(project.getConfigurations().getByName(\"pegasusPlugin\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM3OTYzMQ=="}, "originalCommit": {"oid": "8572cface14bf50b2065789632647e177022d73b"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTU4NTkwOnYy", "diffSide": "RIGHT", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNToyNToxOVrOHAn9rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwNDoxMToyMlrOHBHlmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQxNjgxNA==", "bodyText": "I think in rest.li the left curly brace is in next line", "url": "https://github.com/linkedin/rest.li/pull/381#discussion_r470416814", "createdAt": "2020-08-14T05:25:19Z", "author": {"login": "BrianPin"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -1693,6 +1646,34 @@ protected GenerateDataTemplateTask configureDataTemplateGeneration(Project proje\n     prepareLegacySchemasForPublishTask.dependsOn(destroyStaleFiles);\n     dataTemplateJarDepends.add(prepareLegacySchemasForPublishTask);\n \n+    // extension schema directory\n+    File extensionSchemaDir = project.file(getExtensionSchemaPath(project, sourceSet));\n+\n+    if (!SharedFileUtils.getSuffixedFiles(project, extensionSchemaDir, PDL_FILE_SUFFIX).isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8572cface14bf50b2065789632647e177022d73b"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcyOTU4OQ==", "bodyText": "Good catch.", "url": "https://github.com/linkedin/rest.li/pull/381#discussion_r470729589", "createdAt": "2020-08-14T16:30:29Z", "author": {"login": "nickibi"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -1693,6 +1646,34 @@ protected GenerateDataTemplateTask configureDataTemplateGeneration(Project proje\n     prepareLegacySchemasForPublishTask.dependsOn(destroyStaleFiles);\n     dataTemplateJarDepends.add(prepareLegacySchemasForPublishTask);\n \n+    // extension schema directory\n+    File extensionSchemaDir = project.file(getExtensionSchemaPath(project, sourceSet));\n+\n+    if (!SharedFileUtils.getSuffixedFiles(project, extensionSchemaDir, PDL_FILE_SUFFIX).isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQxNjgxNA=="}, "originalCommit": {"oid": "8572cface14bf50b2065789632647e177022d73b"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzNDkzNw==", "bodyText": "Fixed", "url": "https://github.com/linkedin/rest.li/pull/381#discussion_r470934937", "createdAt": "2020-08-15T04:11:22Z", "author": {"login": "nickibi"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -1693,6 +1646,34 @@ protected GenerateDataTemplateTask configureDataTemplateGeneration(Project proje\n     prepareLegacySchemasForPublishTask.dependsOn(destroyStaleFiles);\n     dataTemplateJarDepends.add(prepareLegacySchemasForPublishTask);\n \n+    // extension schema directory\n+    File extensionSchemaDir = project.file(getExtensionSchemaPath(project, sourceSet));\n+\n+    if (!SharedFileUtils.getSuffixedFiles(project, extensionSchemaDir, PDL_FILE_SUFFIX).isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQxNjgxNA=="}, "originalCommit": {"oid": "8572cface14bf50b2065789632647e177022d73b"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTU5MTE4OnYy", "diffSide": "RIGHT", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNToyODoxNVrOHAoAmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwNDoxMTo0MFrOHBHltg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQxNzU2MQ==", "bodyText": "Question, what is the previous task of task: prepareExtensionSchemasForPublishTask and what is the next task?\nI feel prepare should be part of some task, not itself a task. But let me know if I miss understand something.", "url": "https://github.com/linkedin/rest.li/pull/381#discussion_r470417561", "createdAt": "2020-08-14T05:28:15Z", "author": {"login": "BrianPin"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -1693,6 +1646,34 @@ protected GenerateDataTemplateTask configureDataTemplateGeneration(Project proje\n     prepareLegacySchemasForPublishTask.dependsOn(destroyStaleFiles);\n     dataTemplateJarDepends.add(prepareLegacySchemasForPublishTask);\n \n+    // extension schema directory\n+    File extensionSchemaDir = project.file(getExtensionSchemaPath(project, sourceSet));\n+\n+    if (!SharedFileUtils.getSuffixedFiles(project, extensionSchemaDir, PDL_FILE_SUFFIX).isEmpty()) {\n+      // Validate extension schemas if extension schemas are provided.\n+      ValidateExtensionSchemaTask validateExtensionSchemaTask = project.getTasks()\n+          .create(sourceSet.getTaskName(\"validate\", \"ExtensionSchemas\"), ValidateExtensionSchemaTask.class, task -> {\n+            task.setInputDir(extensionSchemaDir);\n+            task.setResolverPath(\n+                getDataModelConfig(project, sourceSet).plus(project.files(getDataSchemaPath(project, sourceSet))));\n+            task.setClassPath(project.getConfigurations().getByName(\"pegasusPlugin\"));\n+            if (isPropertyTrue(project, ENABLE_ARG_FILE)) {\n+              task.setEnableArgFile(true);\n+            }\n+          });\n+\n+      Task prepareExtensionSchemasForPublishTask = project.getTasks()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8572cface14bf50b2065789632647e177022d73b"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQxODExNA==", "bodyText": "I see validateExtensionSchemaTask and copyPdscSchemasTask is the previous task of this one.", "url": "https://github.com/linkedin/rest.li/pull/381#discussion_r470418114", "createdAt": "2020-08-14T05:30:28Z", "author": {"login": "BrianPin"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -1693,6 +1646,34 @@ protected GenerateDataTemplateTask configureDataTemplateGeneration(Project proje\n     prepareLegacySchemasForPublishTask.dependsOn(destroyStaleFiles);\n     dataTemplateJarDepends.add(prepareLegacySchemasForPublishTask);\n \n+    // extension schema directory\n+    File extensionSchemaDir = project.file(getExtensionSchemaPath(project, sourceSet));\n+\n+    if (!SharedFileUtils.getSuffixedFiles(project, extensionSchemaDir, PDL_FILE_SUFFIX).isEmpty()) {\n+      // Validate extension schemas if extension schemas are provided.\n+      ValidateExtensionSchemaTask validateExtensionSchemaTask = project.getTasks()\n+          .create(sourceSet.getTaskName(\"validate\", \"ExtensionSchemas\"), ValidateExtensionSchemaTask.class, task -> {\n+            task.setInputDir(extensionSchemaDir);\n+            task.setResolverPath(\n+                getDataModelConfig(project, sourceSet).plus(project.files(getDataSchemaPath(project, sourceSet))));\n+            task.setClassPath(project.getConfigurations().getByName(\"pegasusPlugin\"));\n+            if (isPropertyTrue(project, ENABLE_ARG_FILE)) {\n+              task.setEnableArgFile(true);\n+            }\n+          });\n+\n+      Task prepareExtensionSchemasForPublishTask = project.getTasks()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQxNzU2MQ=="}, "originalCommit": {"oid": "8572cface14bf50b2065789632647e177022d73b"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzNDk2Ng==", "bodyText": "Discussed offline, not a question any more.", "url": "https://github.com/linkedin/rest.li/pull/381#discussion_r470934966", "createdAt": "2020-08-15T04:11:40Z", "author": {"login": "nickibi"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -1693,6 +1646,34 @@ protected GenerateDataTemplateTask configureDataTemplateGeneration(Project proje\n     prepareLegacySchemasForPublishTask.dependsOn(destroyStaleFiles);\n     dataTemplateJarDepends.add(prepareLegacySchemasForPublishTask);\n \n+    // extension schema directory\n+    File extensionSchemaDir = project.file(getExtensionSchemaPath(project, sourceSet));\n+\n+    if (!SharedFileUtils.getSuffixedFiles(project, extensionSchemaDir, PDL_FILE_SUFFIX).isEmpty()) {\n+      // Validate extension schemas if extension schemas are provided.\n+      ValidateExtensionSchemaTask validateExtensionSchemaTask = project.getTasks()\n+          .create(sourceSet.getTaskName(\"validate\", \"ExtensionSchemas\"), ValidateExtensionSchemaTask.class, task -> {\n+            task.setInputDir(extensionSchemaDir);\n+            task.setResolverPath(\n+                getDataModelConfig(project, sourceSet).plus(project.files(getDataSchemaPath(project, sourceSet))));\n+            task.setClassPath(project.getConfigurations().getByName(\"pegasusPlugin\"));\n+            if (isPropertyTrue(project, ENABLE_ARG_FILE)) {\n+              task.setEnableArgFile(true);\n+            }\n+          });\n+\n+      Task prepareExtensionSchemasForPublishTask = project.getTasks()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQxNzU2MQ=="}, "originalCommit": {"oid": "8572cface14bf50b2065789632647e177022d73b"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzgzNjk0OnYy", "diffSide": "RIGHT", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQyMjozNjo1MlrOHBOBpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwMDozMTozMVrOHBOflQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA0MDQyMA==", "bodyText": "There is a hardcoded \"extensions\"  literal in the function getExtensionSchemaPath, I feel it will be left alone if we somehow decide to refactor all the extension schema path to something else. And there is probably somewhere else use the same purpose identifier \"extensions\" , if we can create or find existing identifier that represent \"extensions\" path then it will be ideal.", "url": "https://github.com/linkedin/rest.li/pull/381#discussion_r471040420", "createdAt": "2020-08-15T22:36:52Z", "author": {"login": "BrianPin"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -1693,6 +1648,37 @@ protected GenerateDataTemplateTask configureDataTemplateGeneration(Project proje\n     prepareLegacySchemasForPublishTask.dependsOn(destroyStaleFiles);\n     dataTemplateJarDepends.add(prepareLegacySchemasForPublishTask);\n \n+    // extension schema directory\n+    File extensionSchemaDir = project.file(getExtensionSchemaPath(project, sourceSet));\n+\n+    if (!SharedFileUtils.getSuffixedFiles(project, extensionSchemaDir, PDL_FILE_SUFFIX).isEmpty())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a927a2fa11fdec9076a0496be86cdb6880ca7b9c"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA0NzA3Mw==", "bodyText": "For the first question, are you talking about we should make \"extensions\" as a constant\uff1fI could update it to use constant instead. \"extensions\" directory is like \"pegasus\" directory, we defined how the schema directory will be structured. Also we provide the config to customers, if they prefer to use other directory for extension schemas. I think what you said should not be a problem here.", "url": "https://github.com/linkedin/rest.li/pull/381#discussion_r471047073", "createdAt": "2020-08-16T00:16:35Z", "author": {"login": "nickibi"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -1693,6 +1648,37 @@ protected GenerateDataTemplateTask configureDataTemplateGeneration(Project proje\n     prepareLegacySchemasForPublishTask.dependsOn(destroyStaleFiles);\n     dataTemplateJarDepends.add(prepareLegacySchemasForPublishTask);\n \n+    // extension schema directory\n+    File extensionSchemaDir = project.file(getExtensionSchemaPath(project, sourceSet));\n+\n+    if (!SharedFileUtils.getSuffixedFiles(project, extensionSchemaDir, PDL_FILE_SUFFIX).isEmpty())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA0MDQyMA=="}, "originalCommit": {"oid": "a927a2fa11fdec9076a0496be86cdb6880ca7b9c"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA0ODA4NQ==", "bodyText": "I checked PegasusPlugin, we defined all the \"getDirectoryPath\" methods in this way, e.g pegasus, idl, snapshot etc. For coding style consistent purpose, I would prefer to leave it as-is. We may need to clean the code to use constants all over the places, that should be in a separate PR.", "url": "https://github.com/linkedin/rest.li/pull/381#discussion_r471048085", "createdAt": "2020-08-16T00:31:31Z", "author": {"login": "nickibi"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -1693,6 +1648,37 @@ protected GenerateDataTemplateTask configureDataTemplateGeneration(Project proje\n     prepareLegacySchemasForPublishTask.dependsOn(destroyStaleFiles);\n     dataTemplateJarDepends.add(prepareLegacySchemasForPublishTask);\n \n+    // extension schema directory\n+    File extensionSchemaDir = project.file(getExtensionSchemaPath(project, sourceSet));\n+\n+    if (!SharedFileUtils.getSuffixedFiles(project, extensionSchemaDir, PDL_FILE_SUFFIX).isEmpty())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA0MDQyMA=="}, "originalCommit": {"oid": "a927a2fa11fdec9076a0496be86cdb6880ca7b9c"}, "originalPosition": 220}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Mzg1Mjk5OnYy", "diffSide": "RIGHT", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQyMzowNDo0M1rOHBOI4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwMDowODoxNFrOHBOZPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA0MjI3NA==", "bodyText": "in gradle, copy and sync task are alike except sync will remove existing files in the destination dir.\nI think maybe in this we should use sync task instead of copy to remove existing data template to keep the destination dir clean?", "url": "https://github.com/linkedin/rest.li/pull/381#discussion_r471042274", "createdAt": "2020-08-15T23:04:43Z", "author": {"login": "BrianPin"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -1710,6 +1696,11 @@ protected GenerateDataTemplateTask configureDataTemplateGeneration(Project proje\n               copySpec.eachFile(fileCopyDetails ->\n                   fileCopyDetails.setPath(TRANSLATED_SCHEMAS_DIR + File.separatorChar + fileCopyDetails.getPath())));\n \n+          // Copy all extension schemas as-is into the root extensions directory in the JAR\n+          task.from(publishableExtensionSchemasBuildDir, copySpec ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a927a2fa11fdec9076a0496be86cdb6880ca7b9c"}, "originalPosition": 256}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA0NjQ2Mw==", "bodyText": "I thought about removing schemas from destination dir. However, I think for debugging purpose, we should keep the schema in the build dir. So that we clearly know what has been packed in the data template jar.", "url": "https://github.com/linkedin/rest.li/pull/381#discussion_r471046463", "createdAt": "2020-08-16T00:08:14Z", "author": {"login": "nickibi"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -1710,6 +1696,11 @@ protected GenerateDataTemplateTask configureDataTemplateGeneration(Project proje\n               copySpec.eachFile(fileCopyDetails ->\n                   fileCopyDetails.setPath(TRANSLATED_SCHEMAS_DIR + File.separatorChar + fileCopyDetails.getPath())));\n \n+          // Copy all extension schemas as-is into the root extensions directory in the JAR\n+          task.from(publishableExtensionSchemasBuildDir, copySpec ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA0MjI3NA=="}, "originalCommit": {"oid": "a927a2fa11fdec9076a0496be86cdb6880ca7b9c"}, "originalPosition": 256}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDg1NzMwOnYy", "diffSide": "RIGHT", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQyMTo1NzoxM1rOHBVi-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQyMjowMzoyNVrOHBVlRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE2MzY0MA==", "bodyText": "Do you think using this chance you can edit this comment to explain this configuration better? It doesn not look very intuitive to let the user know what classes should be added to this configuration and when they are used (one needs to check the code)", "url": "https://github.com/linkedin/rest.li/pull/381#discussion_r471163640", "createdAt": "2020-08-16T21:57:13Z", "author": {"login": "junchuanwang"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -669,7 +671,7 @@ public void apply(Project project)\n     ConfigurationContainer configurations = project.getConfigurations();\n \n     // configuration for getting the required classes to make pegasus call main methods", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a927a2fa11fdec9076a0496be86cdb6880ca7b9c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE2NDIyOQ==", "bodyText": "We agree with you the comment is not that intuitive. But it is out of scope of this change. We'd better address it in another PR.", "url": "https://github.com/linkedin/rest.li/pull/381#discussion_r471164229", "createdAt": "2020-08-16T22:03:25Z", "author": {"login": "nickibi"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -669,7 +671,7 @@ public void apply(Project project)\n     ConfigurationContainer configurations = project.getConfigurations();\n \n     // configuration for getting the required classes to make pegasus call main methods", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE2MzY0MA=="}, "originalCommit": {"oid": "a927a2fa11fdec9076a0496be86cdb6880ca7b9c"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 306, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}