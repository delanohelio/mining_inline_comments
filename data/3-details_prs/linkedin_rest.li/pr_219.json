{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MzkxMjM3", "number": 219, "title": "Introduce an object creation timeout to completely de-couple channel creation from channelPool", "bodyText": "Introduce an object creation timeout to completely de-couple channel creation from channelPooll\nRemove retry during failure\nFix ssl handshake timeout isssue", "createdAt": "2020-03-12T18:01:08Z", "url": "https://github.com/linkedin/rest.li/pull/219", "merged": true, "mergeCommit": {"oid": "66ac9743c1345eb7196a481b6dda36aa124e7f19"}, "closed": true, "closedAt": "2020-03-12T22:10:01Z", "author": {"login": "nizarm"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcNApSuAFqTM3MzgzMTMzNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcNC1PwAFqTM3MzkyMzY1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczODMxMzM2", "url": "https://github.com/linkedin/rest.li/pull/219#pullrequestreview-373831336", "createdAt": "2020-03-12T19:12:11Z", "commit": {"oid": "642144b82c48b317830e69732b5366e0547a864b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxOToxMjoxMVrOF1rwxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxOToxMjoxMVrOF1rwxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgzNTg0Ng==", "bodyText": "This looks like a duplicate of TimeoutCallback. Can you just reuse that?", "url": "https://github.com/linkedin/rest.li/pull/219#discussion_r391835846", "createdAt": "2020-03-12T19:12:11Z", "author": {"login": "cx-super"}, "path": "r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java", "diffHunk": "@@ -816,6 +831,40 @@ public long getTime()\n     }\n   }\n \n+  private class ObjectCreationTimeoutCallback implements Callback<T>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "642144b82c48b317830e69732b5366e0547a864b"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "390ff61e8fe9d5ffd86d92955fa5bc5ebcf751de", "author": {"user": {"login": "nizarm", "name": "Nizar Mankulangara"}}, "url": "https://github.com/linkedin/rest.li/commit/390ff61e8fe9d5ffd86d92955fa5bc5ebcf751de", "committedDate": "2020-03-12T19:59:52Z", "message": "Introduce an object creation timeout to completely de-couple channel pool from the behaviour of object creator (lifecycle). This will make sure that channel pool always claim its objects slot if the object creator did not return in time. Fix the SSL Completion event handling. Fix the error handling when channel creation fails so that it wont create a retry creation task in the rate limitor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "642144b82c48b317830e69732b5366e0547a864b", "author": {"user": {"login": "nizarm", "name": "Nizar Mankulangara"}}, "url": "https://github.com/linkedin/rest.li/commit/642144b82c48b317830e69732b5366e0547a864b", "committedDate": "2020-03-12T17:52:08Z", "message": "Introduce an object creation timeout to completely de-couple channel pool from the behaviour of object creator (lifecycle). This will make sure that channel pool always claim its objects slot if the object creator did not return in time. Fix the SSL Completion event handling. Fix the error handling when channel creation fails so that it wont create a retry creation task in the rate limitor"}, "afterCommit": {"oid": "390ff61e8fe9d5ffd86d92955fa5bc5ebcf751de", "author": {"user": {"login": "nizarm", "name": "Nizar Mankulangara"}}, "url": "https://github.com/linkedin/rest.li/commit/390ff61e8fe9d5ffd86d92955fa5bc5ebcf751de", "committedDate": "2020-03-12T19:59:52Z", "message": "Introduce an object creation timeout to completely de-couple channel pool from the behaviour of object creator (lifecycle). This will make sure that channel pool always claim its objects slot if the object creator did not return in time. Fix the SSL Completion event handling. Fix the error handling when channel creation fails so that it wont create a retry creation task in the rate limitor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczNzkzOTgx", "url": "https://github.com/linkedin/rest.li/pull/219#pullrequestreview-373793981", "createdAt": "2020-03-12T18:16:17Z", "commit": {"oid": "642144b82c48b317830e69732b5366e0547a864b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODoxNjoxN1rOF1p9uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDoyNjoxNFrOF1uMkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwNjM5NQ==", "bodyText": "s/withing/within", "url": "https://github.com/linkedin/rest.li/pull/219#discussion_r391806395", "createdAt": "2020-03-12T18:16:17Z", "author": {"login": "ssheng"}, "path": "r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java", "diffHunk": "@@ -646,8 +648,10 @@ public void run(final SimpleCallback callback)\n           return;\n         }\n \n-        _lifecycle.create(new Callback<T>()\n-        {\n+        // Lets not trust the _lifecycle to timely return a response here.\n+        // Embedding the callback inside a timeout callback (ObjectCreationTimeoutCallback)\n+        // to force a response withing creationTimeout deadline to reclaim the object slot in the pool", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "642144b82c48b317830e69732b5366e0547a864b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg3NTczMA==", "bodyText": "Why is this moved down?", "url": "https://github.com/linkedin/rest.li/pull/219#discussion_r391875730", "createdAt": "2020-03-12T20:26:14Z", "author": {"login": "ssheng"}, "path": "r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java", "diffHunk": "@@ -698,17 +709,24 @@ public void onError(final Throwable e)\n                 LOG.error(\"Encountered error while invoking error waiter callback\", ex);\n               }\n             }\n+\n+            // Now after cancelling all the pending tasks, lets make sure to back off on the creation\n+            _rateLimiter.incrementPeriod();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "390ff61e8fe9d5ffd86d92955fa5bc5ebcf751de"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczODg1ODM5", "url": "https://github.com/linkedin/rest.li/pull/219#pullrequestreview-373885839", "createdAt": "2020-03-12T20:41:26Z", "commit": {"oid": "390ff61e8fe9d5ffd86d92955fa5bc5ebcf751de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDo0MToyNlrOF1unbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDo0MToyNlrOF1unbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg4MjYwNA==", "bodyText": "Do we have guarantee that cause() is not null?", "url": "https://github.com/linkedin/rest.li/pull/219#discussion_r391882604", "createdAt": "2020-03-12T20:41:26Z", "author": {"login": "ssheng"}, "path": "r2-netty/src/main/java/com/linkedin/r2/transport/http/client/common/ChannelPoolLifecycle.java", "diffHunk": "@@ -118,19 +118,24 @@ public void create(final Callback<Channel> channelCallback)\n         @Override\n         public void userEventTriggered(ChannelHandlerContext ctx, Object evt)\n         {\n-          if(evt == SslHandshakeCompletionEvent.SUCCESS){\n+          if(evt == SslHandshakeCompletionEvent.SUCCESS)\n+          {\n             channelCallback.onSuccess(c);\n             c.pipeline().remove(CHANNELPOOL_SSL_CALLBACK_HANDLER);\n           }\n+          else if (evt instanceof SslHandshakeCompletionEvent)\n+          {\n+            Throwable sslException = ((SslHandshakeCompletionEvent) evt).cause();\n+            onError(channelCallback, sslException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "390ff61e8fe9d5ffd86d92955fa5bc5ebcf751de"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczODk5OTIx", "url": "https://github.com/linkedin/rest.li/pull/219#pullrequestreview-373899921", "createdAt": "2020-03-12T21:05:59Z", "commit": {"oid": "390ff61e8fe9d5ffd86d92955fa5bc5ebcf751de"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczOTIzNjUy", "url": "https://github.com/linkedin/rest.li/pull/219#pullrequestreview-373923652", "createdAt": "2020-03-12T21:45:04Z", "commit": {"oid": "390ff61e8fe9d5ffd86d92955fa5bc5ebcf751de"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4996, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}