{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4MzMxMjcx", "number": 297, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMjozMzoyNFrOD8tiBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjo1ODoyN1rOD9CVZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTg3MTQxOnYy", "diffSide": "RIGHT", "path": "r2-netty/src/main/java/com/linkedin/r2/netty/client/http2/Http2ChannelLifecycle.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMjozMzoyNFrOGV0d3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzo1MDowOFrOGXBmqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUzMjg5Mg==", "bodyText": "private static final int DEFAULT_CHANNEL_CREATION_TIMEOUT_MS", "url": "https://github.com/linkedin/rest.li/pull/297#discussion_r425532892", "createdAt": "2020-05-15T02:33:24Z", "author": {"login": "xuli-in"}, "path": "r2-netty/src/main/java/com/linkedin/r2/netty/client/http2/Http2ChannelLifecycle.java", "diffHunk": "@@ -51,13 +53,15 @@\n class Http2ChannelLifecycle implements AsyncPool.Lifecycle<Channel>\n {\n   private static final Logger LOG = LoggerFactory.getLogger(Http2ChannelLifecycle.class);\n+  public static final int DEFAULT_OBJECT_CREATION_TIMEOUT = 10000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f0c390390b339f31728477818392342f14cd12e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc5NjcxMw==", "bodyText": "Fixed", "url": "https://github.com/linkedin/rest.li/pull/297#discussion_r426796713", "createdAt": "2020-05-18T17:50:08Z", "author": {"login": "nizarm"}, "path": "r2-netty/src/main/java/com/linkedin/r2/netty/client/http2/Http2ChannelLifecycle.java", "diffHunk": "@@ -51,13 +53,15 @@\n class Http2ChannelLifecycle implements AsyncPool.Lifecycle<Channel>\n {\n   private static final Logger LOG = LoggerFactory.getLogger(Http2ChannelLifecycle.class);\n+  public static final int DEFAULT_OBJECT_CREATION_TIMEOUT = 10000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUzMjg5Mg=="}, "originalCommit": {"oid": "4f0c390390b339f31728477818392342f14cd12e"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTkyMTgzOnYy", "diffSide": "RIGHT", "path": "r2-netty/src/main/java/com/linkedin/r2/netty/client/http2/Http2ChannelLifecycle.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMzowNTozNlrOGV08sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODo1NTo1MFrOGXDrbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU0MDc4Ng==", "bodyText": "Log error before callback.onError?", "url": "https://github.com/linkedin/rest.li/pull/297#discussion_r425540786", "createdAt": "2020-05-15T03:05:36Z", "author": {"login": "xuli-in"}, "path": "r2-netty/src/main/java/com/linkedin/r2/netty/client/http2/Http2ChannelLifecycle.java", "diffHunk": "@@ -186,11 +191,20 @@ private void notifyWaiters(Throwable e)\n    */\n   private void doBootstrapParentChannel(Callback<Channel> callback)\n   {\n-    _parentChannelLifecycle.create(new Callback<Channel>() {\n+    // Lets not trust the _parentChannelLifecycle to timely return a response here.\n+    // Embedding the callback inside a timeout callback (ObjectCreationTimeoutCallback)\n+    // to force a response within creationTimeout deadline\n+    _parentChannelLifecycle.create(new TimeoutCallback<>(_scheduler, _creationTimeout, TimeUnit.MILLISECONDS, new Callback<Channel>() {\n       @Override\n       public void onError(Throwable error)\n       {\n         callback.onError(error);\n+\n+        // Make sure to log the object creation timeout error\n+        if (error instanceof ObjectCreationTimeoutException)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f0c390390b339f31728477818392342f14cd12e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc5NzExNQ==", "bodyText": "This is intentionally placed after the callback to reduce any latency impact on the retriable error response as this request gets retried.", "url": "https://github.com/linkedin/rest.li/pull/297#discussion_r426797115", "createdAt": "2020-05-18T17:50:52Z", "author": {"login": "nizarm"}, "path": "r2-netty/src/main/java/com/linkedin/r2/netty/client/http2/Http2ChannelLifecycle.java", "diffHunk": "@@ -186,11 +191,20 @@ private void notifyWaiters(Throwable e)\n    */\n   private void doBootstrapParentChannel(Callback<Channel> callback)\n   {\n-    _parentChannelLifecycle.create(new Callback<Channel>() {\n+    // Lets not trust the _parentChannelLifecycle to timely return a response here.\n+    // Embedding the callback inside a timeout callback (ObjectCreationTimeoutCallback)\n+    // to force a response within creationTimeout deadline\n+    _parentChannelLifecycle.create(new TimeoutCallback<>(_scheduler, _creationTimeout, TimeUnit.MILLISECONDS, new Callback<Channel>() {\n       @Override\n       public void onError(Throwable error)\n       {\n         callback.onError(error);\n+\n+        // Make sure to log the object creation timeout error\n+        if (error instanceof ObjectCreationTimeoutException)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU0MDc4Ng=="}, "originalCommit": {"oid": "4f0c390390b339f31728477818392342f14cd12e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzMDcwMQ==", "bodyText": "ok", "url": "https://github.com/linkedin/rest.li/pull/297#discussion_r426830701", "createdAt": "2020-05-18T18:55:50Z", "author": {"login": "xuli-in"}, "path": "r2-netty/src/main/java/com/linkedin/r2/netty/client/http2/Http2ChannelLifecycle.java", "diffHunk": "@@ -186,11 +191,20 @@ private void notifyWaiters(Throwable e)\n    */\n   private void doBootstrapParentChannel(Callback<Channel> callback)\n   {\n-    _parentChannelLifecycle.create(new Callback<Channel>() {\n+    // Lets not trust the _parentChannelLifecycle to timely return a response here.\n+    // Embedding the callback inside a timeout callback (ObjectCreationTimeoutCallback)\n+    // to force a response within creationTimeout deadline\n+    _parentChannelLifecycle.create(new TimeoutCallback<>(_scheduler, _creationTimeout, TimeUnit.MILLISECONDS, new Callback<Channel>() {\n       @Override\n       public void onError(Throwable error)\n       {\n         callback.onError(error);\n+\n+        // Make sure to log the object creation timeout error\n+        if (error instanceof ObjectCreationTimeoutException)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU0MDc4Ng=="}, "originalCommit": {"oid": "4f0c390390b339f31728477818392342f14cd12e"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzI3OTc0OnYy", "diffSide": "RIGHT", "path": "r2-netty/src/main/java/com/linkedin/r2/netty/client/http2/Http2ChannelLifecycle.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjo1ODoyN1rOGWV6jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzo1MToxOFrOGXBpHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4MDkxMQ==", "bodyText": "creationTimeoutMs?", "url": "https://github.com/linkedin/rest.li/pull/297#discussion_r426080911", "createdAt": "2020-05-15T22:58:27Z", "author": {"login": "FreCap"}, "path": "r2-netty/src/main/java/com/linkedin/r2/netty/client/http2/Http2ChannelLifecycle.java", "diffHunk": "@@ -51,13 +53,15 @@\n class Http2ChannelLifecycle implements AsyncPool.Lifecycle<Channel>\n {\n   private static final Logger LOG = LoggerFactory.getLogger(Http2ChannelLifecycle.class);\n+  public static final int DEFAULT_OBJECT_CREATION_TIMEOUT = 10000;\n \n   private final SocketAddress _address;\n   private final ScheduledExecutorService _scheduler;\n   private final Clock _clock;\n   private final boolean _ssl;\n   private final long _maxContentLength;\n   private final long _idleTimeout;\n+  private final long _creationTimeout;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f0c390390b339f31728477818392342f14cd12e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc5NzM0MA==", "bodyText": "Fixed", "url": "https://github.com/linkedin/rest.li/pull/297#discussion_r426797340", "createdAt": "2020-05-18T17:51:18Z", "author": {"login": "nizarm"}, "path": "r2-netty/src/main/java/com/linkedin/r2/netty/client/http2/Http2ChannelLifecycle.java", "diffHunk": "@@ -51,13 +53,15 @@\n class Http2ChannelLifecycle implements AsyncPool.Lifecycle<Channel>\n {\n   private static final Logger LOG = LoggerFactory.getLogger(Http2ChannelLifecycle.class);\n+  public static final int DEFAULT_OBJECT_CREATION_TIMEOUT = 10000;\n \n   private final SocketAddress _address;\n   private final ScheduledExecutorService _scheduler;\n   private final Clock _clock;\n   private final boolean _ssl;\n   private final long _maxContentLength;\n   private final long _idleTimeout;\n+  private final long _creationTimeout;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4MDkxMQ=="}, "originalCommit": {"oid": "4f0c390390b339f31728477818392342f14cd12e"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 449, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}