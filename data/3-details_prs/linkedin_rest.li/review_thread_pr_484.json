{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1MDI0MDMz", "number": 484, "reviewThreads": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMTozMDoxN1rOE8dzfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNTozOTowN1rOFHBsWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODM4MzM1OnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMTozMDoxN1rOH4mSbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODo0OTo1N1rOH8I4lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEwOTYxNA==", "bodyText": "Should we break the loop once it is true?", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r529109614", "createdAt": "2020-11-24T01:30:17Z", "author": {"login": "rachelhanhan"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -254,16 +330,33 @@ public void onError(Throwable e)\n \n     private boolean isRetryException(Throwable e)\n     {\n-      return ExceptionUtils.indexOfType(e, RetriableRequestException.class) != -1;\n+      Throwable[] throwables = ExceptionUtils.getThrowables(e);\n+      boolean hasRetriableRequestException = false;\n+\n+      for (Throwable throwable: throwables)\n+      {\n+        if (throwable instanceof RetriableRequestException)\n+        {\n+          hasRetriableRequestException = true;\n+\n+          if (((RetriableRequestException) throwable).getDoNotRetryOverride())\n+          {\n+            return false;\n+          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "953e75ce34050540b34cbe9ca271e2c00da8a383"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc3MjM5Nw==", "bodyText": "Or just return true if the override isn't present", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r529772397", "createdAt": "2020-11-24T17:59:16Z", "author": {"login": "bbarkley"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -254,16 +330,33 @@ public void onError(Throwable e)\n \n     private boolean isRetryException(Throwable e)\n     {\n-      return ExceptionUtils.indexOfType(e, RetriableRequestException.class) != -1;\n+      Throwable[] throwables = ExceptionUtils.getThrowables(e);\n+      boolean hasRetriableRequestException = false;\n+\n+      for (Throwable throwable: throwables)\n+      {\n+        if (throwable instanceof RetriableRequestException)\n+        {\n+          hasRetriableRequestException = true;\n+\n+          if (((RetriableRequestException) throwable).getDoNotRetryOverride())\n+          {\n+            return false;\n+          }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEwOTYxNA=="}, "originalCommit": {"oid": "953e75ce34050540b34cbe9ca271e2c00da8a383"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgyMjE2NQ==", "bodyText": "Fixed", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r532822165", "createdAt": "2020-11-30T18:49:57Z", "author": {"login": "rickzx"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -254,16 +330,33 @@ public void onError(Throwable e)\n \n     private boolean isRetryException(Throwable e)\n     {\n-      return ExceptionUtils.indexOfType(e, RetriableRequestException.class) != -1;\n+      Throwable[] throwables = ExceptionUtils.getThrowables(e);\n+      boolean hasRetriableRequestException = false;\n+\n+      for (Throwable throwable: throwables)\n+      {\n+        if (throwable instanceof RetriableRequestException)\n+        {\n+          hasRetriableRequestException = true;\n+\n+          if (((RetriableRequestException) throwable).getDoNotRetryOverride())\n+          {\n+            return false;\n+          }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEwOTYxNA=="}, "originalCommit": {"oid": "953e75ce34050540b34cbe9ca271e2c00da8a383"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODQwMzQxOnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/D2ClientBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMTozOTo1MFrOH4meTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODo1NDozOVrOH8JDJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTExMjY1NA==", "bodyText": "I kind of forgot what's the granularity of the D2Client, if a host is making calls to 50 different downstream d2Services, does it use one instance of D2Client or 50 instances of D2Clients?\nThe further questions is that what's  the granularity of the client side retry ratio? Is it one ratio for each d2Service, or a downstream service can be penalized by another downstream?", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r529112654", "createdAt": "2020-11-24T01:39:50Z", "author": {"login": "rachelhanhan"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/D2ClientBuilder.java", "diffHunk": "@@ -146,6 +146,8 @@ public D2Client build()\n                   _config._executorService,\n                   _config.retry,\n                   _config.retryLimit,\n+                  _config.maxClientRequestRetryRatio,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "953e75ce34050540b34cbe9ca271e2c00da8a383"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTExMzg4Nw==", "bodyText": "A follow up question is that should this be a client-defined ratio or server-defined ratio in lps d2, pros and cons?", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r529113887", "createdAt": "2020-11-24T01:43:42Z", "author": {"login": "rachelhanhan"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/D2ClientBuilder.java", "diffHunk": "@@ -146,6 +146,8 @@ public D2Client build()\n                   _config._executorService,\n                   _config.retry,\n                   _config.retryLimit,\n+                  _config.maxClientRequestRetryRatio,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTExMjY1NA=="}, "originalCommit": {"oid": "953e75ce34050540b34cbe9ca271e2c00da8a383"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgyNDg2OA==", "bodyText": "There's only one D2Client per war making calls to different downstream service endpoints. I think it makes more sense to track retry ratio individually for each downstream endpoint. The latest commit uses a map to track retry info for each extracted service name.\nThe ratio should be defined by the server in the TransportClientProperties, because service owners have the best knowledge of how much retry traffic is allowed. This is also reflected in the latest commit.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r532824868", "createdAt": "2020-11-30T18:54:39Z", "author": {"login": "rickzx"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/D2ClientBuilder.java", "diffHunk": "@@ -146,6 +146,8 @@ public D2Client build()\n                   _config._executorService,\n                   _config.retry,\n                   _config.retryLimit,\n+                  _config.maxClientRequestRetryRatio,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTExMjY1NA=="}, "originalCommit": {"oid": "953e75ce34050540b34cbe9ca271e2c00da8a383"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODQzMjgzOnYy", "diffSide": "RIGHT", "path": "r2-core/src/main/java/com/linkedin/r2/RetriableRequestException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMTo0OTozM1rOH4myCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODo1NDo0OFrOH8JDmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTExNzcwNw==", "bodyText": "Let's add java doc for this, so that we know what this override means", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r529117707", "createdAt": "2020-11-24T01:49:33Z", "author": {"login": "rachelhanhan"}, "path": "r2-core/src/main/java/com/linkedin/r2/RetriableRequestException.java", "diffHunk": "@@ -66,4 +68,14 @@ public RetriableRequestException(Throwable cause)\n   {\n     super(cause);\n   }\n+\n+  public void setDoNotRetryOverride(boolean doNotRetryOverride)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "953e75ce34050540b34cbe9ca271e2c00da8a383"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgyNDk4Nw==", "bodyText": "Added", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r532824987", "createdAt": "2020-11-30T18:54:48Z", "author": {"login": "rickzx"}, "path": "r2-core/src/main/java/com/linkedin/r2/RetriableRequestException.java", "diffHunk": "@@ -66,4 +68,14 @@ public RetriableRequestException(Throwable cause)\n   {\n     super(cause);\n   }\n+\n+  public void setDoNotRetryOverride(boolean doNotRetryOverride)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTExNzcwNw=="}, "originalCommit": {"oid": "953e75ce34050540b34cbe9ca271e2c00da8a383"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODQ4Njc4OnYy", "diffSide": "RIGHT", "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ServerRetryFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMTo1OTozNlrOH4nXbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODo1NzoxNlrOH8JJZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEyNzI3Nw==", "bodyText": "Should we only obtain the lock if we hit the update time? Otherwise we obtain the lock on each individual request", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r529127277", "createdAt": "2020-11-24T01:59:36Z", "author": {"login": "rachelhanhan"}, "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ServerRetryFilter.java", "diffHunk": "@@ -74,14 +129,132 @@ public void onStreamError(Throwable ex,\n     {\n       if (cause instanceof RetriableRequestException)\n       {\n+        updateRetryDecision();\n+\n         String message = cause.getMessage();\n-        LOG.debug(\"RetriableRequestException caught! Error message: {}\", message);\n-        wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        if (_doNotRetry)\n+        {\n+          LOG.debug(\"Max request retry ratio exceeded! Will not retry. Error message: {}\", message);\n+          wireAttrs.remove(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY);\n+        }\n+        else\n+        {\n+          LOG.debug(\"RetriableRequestException caught! Do retry. Error message: {}\", message);\n+          wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        }\n         break;\n       }\n       cause = cause.getCause();\n     }\n \n     nextFilter.onError(ex, requestContext, wireAttrs);\n   }\n+\n+  private int getRetryAttempts(Request req)\n+  {\n+    String retryAttemptsHeader = req.getHeader(HttpConstants.HEADER_NUMBER_OF_RETRY_ATTEMPTS);\n+    return retryAttemptsHeader == null ? 0 : Integer.parseInt(retryAttemptsHeader);\n+  }\n+\n+  private void updateRetryDecision()\n+  {\n+    long currentTime = _clock.currentTimeMillis();\n+\n+    synchronized (_lock)\n+    {\n+      // Check if the current interval is stale\n+      if (currentTime >= _lastRollOverTime + _updateIntervalMs)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "953e75ce34050540b34cbe9ca271e2c00da8a383"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgyNjQ2OA==", "bodyText": "The lock is to protect two threads from entering the critical section simultaneously. If we put the lock inside the \"if\" block, then two threads might both pass the staleness check and begin to update the tracker. Anyways, I rewrote the synchronization logic by centralizing it in the tracker. Please take a look.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r532826468", "createdAt": "2020-11-30T18:57:16Z", "author": {"login": "rickzx"}, "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ServerRetryFilter.java", "diffHunk": "@@ -74,14 +129,132 @@ public void onStreamError(Throwable ex,\n     {\n       if (cause instanceof RetriableRequestException)\n       {\n+        updateRetryDecision();\n+\n         String message = cause.getMessage();\n-        LOG.debug(\"RetriableRequestException caught! Error message: {}\", message);\n-        wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        if (_doNotRetry)\n+        {\n+          LOG.debug(\"Max request retry ratio exceeded! Will not retry. Error message: {}\", message);\n+          wireAttrs.remove(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY);\n+        }\n+        else\n+        {\n+          LOG.debug(\"RetriableRequestException caught! Do retry. Error message: {}\", message);\n+          wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        }\n         break;\n       }\n       cause = cause.getCause();\n     }\n \n     nextFilter.onError(ex, requestContext, wireAttrs);\n   }\n+\n+  private int getRetryAttempts(Request req)\n+  {\n+    String retryAttemptsHeader = req.getHeader(HttpConstants.HEADER_NUMBER_OF_RETRY_ATTEMPTS);\n+    return retryAttemptsHeader == null ? 0 : Integer.parseInt(retryAttemptsHeader);\n+  }\n+\n+  private void updateRetryDecision()\n+  {\n+    long currentTime = _clock.currentTimeMillis();\n+\n+    synchronized (_lock)\n+    {\n+      // Check if the current interval is stale\n+      if (currentTime >= _lastRollOverTime + _updateIntervalMs)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEyNzI3Nw=="}, "originalCommit": {"oid": "953e75ce34050540b34cbe9ca271e2c00da8a383"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjIxNjA3OnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjo1NTowMlrOH5MJaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODo1NzozM1rOH8JKDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyOTg5Nw==", "bodyText": "More readable IMO:\npublic static final long DEFAULT_UPDATE_INTERVAL_MS = TimeUnit.SECONDS(5).toMillis();", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r529729897", "createdAt": "2020-11-24T16:55:02Z", "author": {"login": "bbarkley"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -59,15 +62,39 @@\n  */\n public class RetryClient extends D2ClientDelegator\n {\n+  public static final long DEFAULT_UPDATE_INTERVAL_MS = 5000L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "953e75ce34050540b34cbe9ca271e2c00da8a383"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgyNjYzNg==", "bodyText": "Fixed", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r532826636", "createdAt": "2020-11-30T18:57:33Z", "author": {"login": "rickzx"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -59,15 +62,39 @@\n  */\n public class RetryClient extends D2ClientDelegator\n {\n+  public static final long DEFAULT_UPDATE_INTERVAL_MS = 5000L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyOTg5Nw=="}, "originalCommit": {"oid": "953e75ce34050540b34cbe9ca271e2c00da8a383"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjQzMjQ5OnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzo0NTo1N1rOH5OOkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTowNTozMFrOH8JcqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc2Mzk4Ng==", "bodyText": "If the number of retry attempts is zero can we omit this header? Same for below.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r529763986", "createdAt": "2020-11-24T17:45:57Z", "author": {"login": "bbarkley"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -154,11 +216,14 @@ public void onSuccess(ByteString result)\n     }\n \n     @Override\n-    public boolean doRetryRequest(StreamRequest request, RequestContext context)\n+    public boolean doRetryRequest(StreamRequest request, RequestContext context, int numberOfRetryAttempts)\n     {\n       if (_recorded == true && _content != null)\n       {\n-        final StreamRequest newRequest = request.builder().build(EntityStreams.newEntityStream(new ByteStringWriter(_content)));\n+        final StreamRequest newRequest = request.builder()\n+            .addHeaderValue(HttpConstants.HEADER_NUMBER_OF_RETRY_ATTEMPTS, Integer.toString(numberOfRetryAttempts))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "953e75ce34050540b34cbe9ca271e2c00da8a383"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzMTQwMA==", "bodyText": "Actually, this function will only be called when the request is being retried, so the attempt here is at least 1. But I made another change in restRequest and streamRequest to still send the header when the attempt is zero. See below", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r532831400", "createdAt": "2020-11-30T19:05:30Z", "author": {"login": "rickzx"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -154,11 +216,14 @@ public void onSuccess(ByteString result)\n     }\n \n     @Override\n-    public boolean doRetryRequest(StreamRequest request, RequestContext context)\n+    public boolean doRetryRequest(StreamRequest request, RequestContext context, int numberOfRetryAttempts)\n     {\n       if (_recorded == true && _content != null)\n       {\n-        final StreamRequest newRequest = request.builder().build(EntityStreams.newEntityStream(new ByteStringWriter(_content)));\n+        final StreamRequest newRequest = request.builder()\n+            .addHeaderValue(HttpConstants.HEADER_NUMBER_OF_RETRY_ATTEMPTS, Integer.toString(numberOfRetryAttempts))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc2Mzk4Ng=="}, "originalCommit": {"oid": "953e75ce34050540b34cbe9ca271e2c00da8a383"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjQ0NDAyOnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzo0ODo1MVrOH5OVuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTowNTo0M1rOH8JdKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc2NTgxNw==", "bodyText": "Would suggest changing \"happens\" to happened or occurred", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r529765817", "createdAt": "2020-11-24T17:48:51Z", "author": {"login": "bbarkley"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -234,9 +303,16 @@ public void onError(Throwable e)\n             int attempts = exclusionSet.size();\n             if (attempts <= _limit)\n             {\n-              LOG.warn(\"A retriable exception happens. Going to retry. This is attempt {}. Current exclusion set: \",\n-                  attempts, \". Current exclusion set: \" + exclusionSet);\n-              retry = doRetryRequest(_request, _context);\n+              if (isBelowClientRetryRatio())\n+              {\n+                LOG.warn(\"A retriable exception happens. Going to retry. This is attempt {}. Current exclusion set: {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "953e75ce34050540b34cbe9ca271e2c00da8a383"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzMTUyOA==", "bodyText": "Fixed", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r532831528", "createdAt": "2020-11-30T19:05:43Z", "author": {"login": "rickzx"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -234,9 +303,16 @@ public void onError(Throwable e)\n             int attempts = exclusionSet.size();\n             if (attempts <= _limit)\n             {\n-              LOG.warn(\"A retriable exception happens. Going to retry. This is attempt {}. Current exclusion set: \",\n-                  attempts, \". Current exclusion set: \" + exclusionSet);\n-              retry = doRetryRequest(_request, _context);\n+              if (isBelowClientRetryRatio())\n+              {\n+                LOG.warn(\"A retriable exception happens. Going to retry. This is attempt {}. Current exclusion set: {}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc2NTgxNw=="}, "originalCommit": {"oid": "953e75ce34050540b34cbe9ca271e2c00da8a383"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjYwODYwOnYy", "diffSide": "RIGHT", "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ClientRetryFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODoyODoyNFrOH5P4Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTowNTo1MlrOH8Jdeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5MTAzNA==", "bodyText": "You're modifying the exception here, but not doing anything with it. Is this supposed to call nextFilter.onError?", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r529791034", "createdAt": "2020-11-24T18:28:24Z", "author": {"login": "bbarkley"}, "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ClientRetryFilter.java", "diffHunk": "@@ -73,9 +74,13 @@ public void onStreamError(Throwable ex,\n     {\n       nextFilter.onError(new RetriableRequestException(retryAttr), requestContext, wireAttrs);\n     }\n-    else\n-    {\n-      nextFilter.onError(ex, requestContext, wireAttrs);\n+    else {\n+      Throwable[] throwables = ExceptionUtils.getThrowables(ex);\n+      for (Throwable throwable : throwables) {\n+        if (throwable instanceof RetriableRequestException) {\n+          ((RetriableRequestException) throwable).setDoNotRetryOverride(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "953e75ce34050540b34cbe9ca271e2c00da8a383"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzMTYxMA==", "bodyText": "Fixed", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r532831610", "createdAt": "2020-11-30T19:05:52Z", "author": {"login": "rickzx"}, "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ClientRetryFilter.java", "diffHunk": "@@ -73,9 +74,13 @@ public void onStreamError(Throwable ex,\n     {\n       nextFilter.onError(new RetriableRequestException(retryAttr), requestContext, wireAttrs);\n     }\n-    else\n-    {\n-      nextFilter.onError(ex, requestContext, wireAttrs);\n+    else {\n+      Throwable[] throwables = ExceptionUtils.getThrowables(ex);\n+      for (Throwable throwable : throwables) {\n+        if (throwable instanceof RetriableRequestException) {\n+          ((RetriableRequestException) throwable).setDoNotRetryOverride(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5MTAzNA=="}, "originalCommit": {"oid": "953e75ce34050540b34cbe9ca271e2c00da8a383"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjYxNDU0OnYy", "diffSide": "RIGHT", "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ServerRetryFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODoyOTo1NlrOH5P73g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTowNTo1OVrOH8Jdsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5MTk2Ng==", "bodyText": "Consider TimeUnit.SECONDS.toMillis(5)", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r529791966", "createdAt": "2020-11-24T18:29:56Z", "author": {"login": "bbarkley"}, "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ServerRetryFilter.java", "diffHunk": "@@ -45,6 +49,57 @@\n public class ServerRetryFilter implements RestFilter, StreamFilter\n {\n   private static final Logger LOG = LoggerFactory.getLogger(ServerRetryFilter.class);\n+  private static final int DEFAULT_RETRY_LIMIT = 3;\n+  private static final long DEFAULT_UPDATE_INTERVAL_MS = 5000L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "953e75ce34050540b34cbe9ca271e2c00da8a383"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzMTY2Ng==", "bodyText": "Fixed", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r532831666", "createdAt": "2020-11-30T19:05:59Z", "author": {"login": "rickzx"}, "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ServerRetryFilter.java", "diffHunk": "@@ -45,6 +49,57 @@\n public class ServerRetryFilter implements RestFilter, StreamFilter\n {\n   private static final Logger LOG = LoggerFactory.getLogger(ServerRetryFilter.class);\n+  private static final int DEFAULT_RETRY_LIMIT = 3;\n+  private static final long DEFAULT_UPDATE_INTERVAL_MS = 5000L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5MTk2Ng=="}, "originalCommit": {"oid": "953e75ce34050540b34cbe9ca271e2c00da8a383"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjgzMjc1OnYy", "diffSide": "RIGHT", "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ServerRetryFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOToyODo1OFrOH5SBHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOToxMjo1MVrOH8JtaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgyNjA3OQ==", "bodyText": "We're going to need to think about how to roll this out safely when not all clients have been updated. For example if we have an overload filter and change it to use Retriable exceptions the clients that are on this new version will behave correctly, but any that are on an older version will blindly retry without having a concept of the client retry ratio (and not providing data to the server about often it has had to retry).\nOne option is to use the presence of the number of retry attempts header as an indicator that the client is participating in the retry tracking (and so my earlier suggestion of omitting the header if the value is zero won't work). In that case an overload filter would not want to use the retriable exception unless it knew the client was up to date.\nIt would be nice to centralize that logic here. We could add a flag to RetriableRequestException, or use a different exception to indicate that the client should only retry if it's up to date.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r529826079", "createdAt": "2020-11-24T19:28:58Z", "author": {"login": "bbarkley"}, "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ServerRetryFilter.java", "diffHunk": "@@ -74,14 +129,132 @@ public void onStreamError(Throwable ex,\n     {\n       if (cause instanceof RetriableRequestException)\n       {\n+        updateRetryDecision();\n+\n         String message = cause.getMessage();\n-        LOG.debug(\"RetriableRequestException caught! Error message: {}\", message);\n-        wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        if (_doNotRetry)\n+        {\n+          LOG.debug(\"Max request retry ratio exceeded! Will not retry. Error message: {}\", message);\n+          wireAttrs.remove(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY);\n+        }\n+        else\n+        {\n+          LOG.debug(\"RetriableRequestException caught! Do retry. Error message: {}\", message);\n+          wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "953e75ce34050540b34cbe9ca271e2c00da8a383"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzNTY4OA==", "bodyText": "Good catch. I agree that using the retry attempts header would be the most efficient way to do this. But adding a flag to RetriableRequestException will not work because the older clients will just ignore the flag and still blindly retry all the RetriableRequestExceptions. One option is to have the overload filter watch for the retry-attempts header, and return RetriableRequestException only when the header is present.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r532835688", "createdAt": "2020-11-30T19:12:51Z", "author": {"login": "rickzx"}, "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ServerRetryFilter.java", "diffHunk": "@@ -74,14 +129,132 @@ public void onStreamError(Throwable ex,\n     {\n       if (cause instanceof RetriableRequestException)\n       {\n+        updateRetryDecision();\n+\n         String message = cause.getMessage();\n-        LOG.debug(\"RetriableRequestException caught! Error message: {}\", message);\n-        wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        if (_doNotRetry)\n+        {\n+          LOG.debug(\"Max request retry ratio exceeded! Will not retry. Error message: {}\", message);\n+          wireAttrs.remove(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY);\n+        }\n+        else\n+        {\n+          LOG.debug(\"RetriableRequestException caught! Do retry. Error message: {}\", message);\n+          wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgyNjA3OQ=="}, "originalCommit": {"oid": "953e75ce34050540b34cbe9ca271e2c00da8a383"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzA3MzI5OnYy", "diffSide": "RIGHT", "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ServerRetryFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDozODozMFrOH5USag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOToxNTo0OFrOH8Jz9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2MzI3NA==", "bodyText": "If the header is absent should it be counted as zero? This depends on whether we're omitting the header if it's zero or not. If we're not omitting it (and it's looking like we might need to include it to know if the client is participating) then I think we should ignore requests that don't have the header. Otherwise we can get a very skewed version of the situation where clients that aren't tracking things are counted as reporting zero, when they really don't have the data at all and therefore shouldn't be considered in calculating the ratio.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r529863274", "createdAt": "2020-11-24T20:38:30Z", "author": {"login": "bbarkley"}, "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ServerRetryFilter.java", "diffHunk": "@@ -74,14 +129,132 @@ public void onStreamError(Throwable ex,\n     {\n       if (cause instanceof RetriableRequestException)\n       {\n+        updateRetryDecision();\n+\n         String message = cause.getMessage();\n-        LOG.debug(\"RetriableRequestException caught! Error message: {}\", message);\n-        wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        if (_doNotRetry)\n+        {\n+          LOG.debug(\"Max request retry ratio exceeded! Will not retry. Error message: {}\", message);\n+          wireAttrs.remove(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY);\n+        }\n+        else\n+        {\n+          LOG.debug(\"RetriableRequestException caught! Do retry. Error message: {}\", message);\n+          wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        }\n         break;\n       }\n       cause = cause.getCause();\n     }\n \n     nextFilter.onError(ex, requestContext, wireAttrs);\n   }\n+\n+  private int getRetryAttempts(Request req)\n+  {\n+    String retryAttemptsHeader = req.getHeader(HttpConstants.HEADER_NUMBER_OF_RETRY_ATTEMPTS);\n+    return retryAttemptsHeader == null ? 0 : Integer.parseInt(retryAttemptsHeader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "953e75ce34050540b34cbe9ca271e2c00da8a383"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzNzM2NA==", "bodyText": "Agreed. In the latest commit, RetryClient still sends the retry attempts header when the attempt is zero. And the ServerRetryTracker only counts the attempts if the header is present. This way, the tracker more accurately represents the retry ratio of the participating clients.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r532837364", "createdAt": "2020-11-30T19:15:48Z", "author": {"login": "rickzx"}, "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ServerRetryFilter.java", "diffHunk": "@@ -74,14 +129,132 @@ public void onStreamError(Throwable ex,\n     {\n       if (cause instanceof RetriableRequestException)\n       {\n+        updateRetryDecision();\n+\n         String message = cause.getMessage();\n-        LOG.debug(\"RetriableRequestException caught! Error message: {}\", message);\n-        wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        if (_doNotRetry)\n+        {\n+          LOG.debug(\"Max request retry ratio exceeded! Will not retry. Error message: {}\", message);\n+          wireAttrs.remove(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY);\n+        }\n+        else\n+        {\n+          LOG.debug(\"RetriableRequestException caught! Do retry. Error message: {}\", message);\n+          wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        }\n         break;\n       }\n       cause = cause.getCause();\n     }\n \n     nextFilter.onError(ex, requestContext, wireAttrs);\n   }\n+\n+  private int getRetryAttempts(Request req)\n+  {\n+    String retryAttemptsHeader = req.getHeader(HttpConstants.HEADER_NUMBER_OF_RETRY_ATTEMPTS);\n+    return retryAttemptsHeader == null ? 0 : Integer.parseInt(retryAttemptsHeader);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2MzI3NA=="}, "originalCommit": {"oid": "953e75ce34050540b34cbe9ca271e2c00da8a383"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzg1MjUxOnYy", "diffSide": "RIGHT", "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ServerRetryFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzoxMzozMFrOH5b7Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOToxNzo0OFrOH8J4pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk4ODQ0Ng==", "bodyText": "The concurrency safety of this class is a little hard to follow currently. It looks like things should be safe, because you are using this and rollOverStats while holding a lock, and add and rollOverStats are synchronized and should be safe to use together. It would be nice to have the safety be much clearer though.\nOne option would be to make this synchronized for clarity. This will introduce contention with calls to add, but the method is small and should execute quickly, and not very frequently. Another option would be to consolidate this into a rolloverStatsAsNeededAndGetRetryRatio where this class can manage the thread safety and use separate locks to guard the list and the array. Finally you could just document the current behavior with comments.\nWhichever way you choose I'd suggest annotating the class with @ThreadSafe or @NotThreadSafe, and annotate the fields accessed concurrently with @GuardedBy.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r529988446", "createdAt": "2020-11-24T23:13:30Z", "author": {"login": "bbarkley"}, "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ServerRetryFilter.java", "diffHunk": "@@ -74,14 +129,132 @@ public void onStreamError(Throwable ex,\n     {\n       if (cause instanceof RetriableRequestException)\n       {\n+        updateRetryDecision();\n+\n         String message = cause.getMessage();\n-        LOG.debug(\"RetriableRequestException caught! Error message: {}\", message);\n-        wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        if (_doNotRetry)\n+        {\n+          LOG.debug(\"Max request retry ratio exceeded! Will not retry. Error message: {}\", message);\n+          wireAttrs.remove(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY);\n+        }\n+        else\n+        {\n+          LOG.debug(\"RetriableRequestException caught! Do retry. Error message: {}\", message);\n+          wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        }\n         break;\n       }\n       cause = cause.getCause();\n     }\n \n     nextFilter.onError(ex, requestContext, wireAttrs);\n   }\n+\n+  private int getRetryAttempts(Request req)\n+  {\n+    String retryAttemptsHeader = req.getHeader(HttpConstants.HEADER_NUMBER_OF_RETRY_ATTEMPTS);\n+    return retryAttemptsHeader == null ? 0 : Integer.parseInt(retryAttemptsHeader);\n+  }\n+\n+  private void updateRetryDecision()\n+  {\n+    long currentTime = _clock.currentTimeMillis();\n+\n+    synchronized (_lock)\n+    {\n+      // Check if the current interval is stale\n+      if (currentTime >= _lastRollOverTime + _updateIntervalMs)\n+      {\n+          // Rollover stale intervals until the current interval is reached\n+          for (long time = currentTime; time >= _lastRollOverTime + _updateIntervalMs; time -= _updateIntervalMs)\n+          {\n+            _serverRetryTracker.rollOverStats();\n+          }\n+\n+          _doNotRetry = _serverRetryTracker.getRetryRatio() > _maxRequestRetryRatio;\n+          _lastRollOverTime = currentTime;\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Stores the number of requests categorized by number of retry attempts. It uses the information to estimate\n+   * a ratio of how many requests are being retried in the cluster. The ratio is then compared with\n+   * {@link ServerRetryFilter#_maxRequestRetryRatio} to make a decision on whether or not to retry in the\n+   * next interval. When calculating the ratio, it looks at the last {@link ServerRetryTracker#_aggregatedIntervalNum}\n+   * intervals by aggregating the recorded requests.\n+   */\n+  private static class ServerRetryTracker\n+  {\n+    private final int _retryLimit;\n+    private final int _aggregatedIntervalNum;\n+\n+    private final LinkedList<int[]> _retryAttemptsCounter;\n+    private final int[] _aggregatedRetryAttemptsCounter;\n+\n+    private ServerRetryTracker(int retryLimit, int aggregatedIntervalNum)\n+    {\n+      _retryLimit = retryLimit;\n+      _aggregatedIntervalNum = aggregatedIntervalNum;\n+\n+      _aggregatedRetryAttemptsCounter = new int[_retryLimit + 1];\n+      _retryAttemptsCounter = new LinkedList<>();\n+      _retryAttemptsCounter.add(new int[_retryLimit + 1]);\n+    }\n+\n+    public synchronized void add(int numberOfRetryAttempts)\n+    {\n+      if (numberOfRetryAttempts <= _retryLimit)\n+      {\n+        _retryAttemptsCounter.getLast()[numberOfRetryAttempts] += 1;\n+      } else\n+      {\n+        LOG.warn(\"Unexpected number of retry attempts: \" + numberOfRetryAttempts + \", current retry limit: \" + _retryLimit);\n+      }\n+    }\n+\n+    public synchronized void rollOverStats()\n+    {\n+      // rollover the current interval to the aggregated counter\n+      int[] intervalToAggregate = _retryAttemptsCounter.getLast();\n+      for (int i = 0; i < _retryLimit; i++)\n+      {\n+        _aggregatedRetryAttemptsCounter[i] += intervalToAggregate[i];\n+      }\n+\n+      if (_retryAttemptsCounter.size() > _aggregatedIntervalNum)\n+      {\n+        // discard the oldest interval\n+        int[] intervalToDiscard = _retryAttemptsCounter.removeFirst();\n+        for (int i = 0; i < _retryLimit; i++)\n+        {\n+          _aggregatedRetryAttemptsCounter[i] -= intervalToDiscard[i];\n+        }\n+      }\n+\n+      // append a new interval\n+      _retryAttemptsCounter.addLast(new int[_retryLimit + 1]);\n+    }\n+\n+    public double getRetryRatio()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "953e75ce34050540b34cbe9ca271e2c00da8a383"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzODU2Nw==", "bodyText": "I rewrote the thread-safety logic in both RetryClient and ServerRetryFilter, and annotated them with @ThreadSafe and @GuardedBy. Hopefully it's cleaner this time.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r532838567", "createdAt": "2020-11-30T19:17:48Z", "author": {"login": "rickzx"}, "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ServerRetryFilter.java", "diffHunk": "@@ -74,14 +129,132 @@ public void onStreamError(Throwable ex,\n     {\n       if (cause instanceof RetriableRequestException)\n       {\n+        updateRetryDecision();\n+\n         String message = cause.getMessage();\n-        LOG.debug(\"RetriableRequestException caught! Error message: {}\", message);\n-        wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        if (_doNotRetry)\n+        {\n+          LOG.debug(\"Max request retry ratio exceeded! Will not retry. Error message: {}\", message);\n+          wireAttrs.remove(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY);\n+        }\n+        else\n+        {\n+          LOG.debug(\"RetriableRequestException caught! Do retry. Error message: {}\", message);\n+          wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        }\n         break;\n       }\n       cause = cause.getCause();\n     }\n \n     nextFilter.onError(ex, requestContext, wireAttrs);\n   }\n+\n+  private int getRetryAttempts(Request req)\n+  {\n+    String retryAttemptsHeader = req.getHeader(HttpConstants.HEADER_NUMBER_OF_RETRY_ATTEMPTS);\n+    return retryAttemptsHeader == null ? 0 : Integer.parseInt(retryAttemptsHeader);\n+  }\n+\n+  private void updateRetryDecision()\n+  {\n+    long currentTime = _clock.currentTimeMillis();\n+\n+    synchronized (_lock)\n+    {\n+      // Check if the current interval is stale\n+      if (currentTime >= _lastRollOverTime + _updateIntervalMs)\n+      {\n+          // Rollover stale intervals until the current interval is reached\n+          for (long time = currentTime; time >= _lastRollOverTime + _updateIntervalMs; time -= _updateIntervalMs)\n+          {\n+            _serverRetryTracker.rollOverStats();\n+          }\n+\n+          _doNotRetry = _serverRetryTracker.getRetryRatio() > _maxRequestRetryRatio;\n+          _lastRollOverTime = currentTime;\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Stores the number of requests categorized by number of retry attempts. It uses the information to estimate\n+   * a ratio of how many requests are being retried in the cluster. The ratio is then compared with\n+   * {@link ServerRetryFilter#_maxRequestRetryRatio} to make a decision on whether or not to retry in the\n+   * next interval. When calculating the ratio, it looks at the last {@link ServerRetryTracker#_aggregatedIntervalNum}\n+   * intervals by aggregating the recorded requests.\n+   */\n+  private static class ServerRetryTracker\n+  {\n+    private final int _retryLimit;\n+    private final int _aggregatedIntervalNum;\n+\n+    private final LinkedList<int[]> _retryAttemptsCounter;\n+    private final int[] _aggregatedRetryAttemptsCounter;\n+\n+    private ServerRetryTracker(int retryLimit, int aggregatedIntervalNum)\n+    {\n+      _retryLimit = retryLimit;\n+      _aggregatedIntervalNum = aggregatedIntervalNum;\n+\n+      _aggregatedRetryAttemptsCounter = new int[_retryLimit + 1];\n+      _retryAttemptsCounter = new LinkedList<>();\n+      _retryAttemptsCounter.add(new int[_retryLimit + 1]);\n+    }\n+\n+    public synchronized void add(int numberOfRetryAttempts)\n+    {\n+      if (numberOfRetryAttempts <= _retryLimit)\n+      {\n+        _retryAttemptsCounter.getLast()[numberOfRetryAttempts] += 1;\n+      } else\n+      {\n+        LOG.warn(\"Unexpected number of retry attempts: \" + numberOfRetryAttempts + \", current retry limit: \" + _retryLimit);\n+      }\n+    }\n+\n+    public synchronized void rollOverStats()\n+    {\n+      // rollover the current interval to the aggregated counter\n+      int[] intervalToAggregate = _retryAttemptsCounter.getLast();\n+      for (int i = 0; i < _retryLimit; i++)\n+      {\n+        _aggregatedRetryAttemptsCounter[i] += intervalToAggregate[i];\n+      }\n+\n+      if (_retryAttemptsCounter.size() > _aggregatedIntervalNum)\n+      {\n+        // discard the oldest interval\n+        int[] intervalToDiscard = _retryAttemptsCounter.removeFirst();\n+        for (int i = 0; i < _retryLimit; i++)\n+        {\n+          _aggregatedRetryAttemptsCounter[i] -= intervalToDiscard[i];\n+        }\n+      }\n+\n+      // append a new interval\n+      _retryAttemptsCounter.addLast(new int[_retryLimit + 1]);\n+    }\n+\n+    public double getRetryRatio()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk4ODQ0Ng=="}, "originalCommit": {"oid": "953e75ce34050540b34cbe9ca271e2c00da8a383"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzg1NTM1OnYy", "diffSide": "RIGHT", "path": "r2-core/src/main/java/com/linkedin/r2/transport/http/common/HttpConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzoxNDowMVrOH5b9MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOToxNzo1OFrOH8J5DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk4ODkxMw==", "bodyText": "Suggest changing \"Retries\" to \"Retry\"", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r529988913", "createdAt": "2020-11-24T23:14:01Z", "author": {"login": "bbarkley"}, "path": "r2-core/src/main/java/com/linkedin/r2/transport/http/common/HttpConstants.java", "diffHunk": "@@ -11,6 +11,11 @@\n    */\n   public static final String HEADER_RESPONSE_COMPRESSION_THRESHOLD = \"X-Response-Compression-Threshold\";\n \n+  /**\n+   * Custom header for the number of retries.\n+   */\n+  public static final String HEADER_NUMBER_OF_RETRY_ATTEMPTS = \"X-Number-Of-Retries-Attempts\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "953e75ce34050540b34cbe9ca271e2c00da8a383"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzODY2OQ==", "bodyText": "Fixed", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r532838669", "createdAt": "2020-11-30T19:17:58Z", "author": {"login": "rickzx"}, "path": "r2-core/src/main/java/com/linkedin/r2/transport/http/common/HttpConstants.java", "diffHunk": "@@ -11,6 +11,11 @@\n    */\n   public static final String HEADER_RESPONSE_COMPRESSION_THRESHOLD = \"X-Response-Compression-Threshold\";\n \n+  /**\n+   * Custom header for the number of retries.\n+   */\n+  public static final String HEADER_NUMBER_OF_RETRY_ATTEMPTS = \"X-Number-Of-Retries-Attempts\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk4ODkxMw=="}, "originalCommit": {"oid": "953e75ce34050540b34cbe9ca271e2c00da8a383"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjM3NjE2OnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMTozMDowNVrOIA7jqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzozNDoyMVrOIDVHYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0NjY5Ng==", "bodyText": "I saw that when we invoke CallTracker.startCall, it's doing a lot more than just counting retry count and total call count, it's also counts the latency, outstanding latency and other stuff. Is this a little bit heavy for retry ratio? Especially that the CallTracker is used again in TrackerClient to track each server host's performance, this may defeat the purpose of CallTracker.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r537846696", "createdAt": "2020-12-07T21:30:05Z", "author": {"login": "rachelhanhan"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -59,15 +75,31 @@\n  */\n public class RetryClient extends D2ClientDelegator\n {\n+  public static final long DEFAULT_UPDATE_INTERVAL_MS = TimeUnit.SECONDS.toMillis(5);\n   private static final Logger LOG = LoggerFactory.getLogger(RetryClient.class);\n \n+  private final Clock _clock;\n+  private final LoadBalancer _balancer;\n   private final int _limit;\n+  private final long _updateIntervalMs;\n \n-  public RetryClient(D2Client d2Client, int limit)\n+  Map<String, CallTracker> _retryTrackerMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "543f3a0fb1badcec4ad15fe263df3e9b6e954ec8"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2MjU5NQ==", "bodyText": "Addressed. Use a separate light-weight CallTracker for RetryClient. Leave it to container to handle monitoring metrics.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r540362595", "createdAt": "2020-12-10T17:34:21Z", "author": {"login": "rickzx"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -59,15 +75,31 @@\n  */\n public class RetryClient extends D2ClientDelegator\n {\n+  public static final long DEFAULT_UPDATE_INTERVAL_MS = TimeUnit.SECONDS.toMillis(5);\n   private static final Logger LOG = LoggerFactory.getLogger(RetryClient.class);\n \n+  private final Clock _clock;\n+  private final LoadBalancer _balancer;\n   private final int _limit;\n+  private final long _updateIntervalMs;\n \n-  public RetryClient(D2Client d2Client, int limit)\n+  Map<String, CallTracker> _retryTrackerMap;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0NjY5Ng=="}, "originalCommit": {"oid": "543f3a0fb1badcec4ad15fe263df3e9b6e954ec8"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjM4NjM3OnYy", "diffSide": "RIGHT", "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ClientRetryFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMTozMjo0MlrOIA7pmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzozMjoxMVrOIDVBmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0ODIxOA==", "bodyText": "Break this loop if one throwable is retriable?", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r537848218", "createdAt": "2020-12-07T21:32:42Z", "author": {"login": "rachelhanhan"}, "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ClientRetryFilter.java", "diffHunk": "@@ -73,8 +74,13 @@ public void onStreamError(Throwable ex,\n     {\n       nextFilter.onError(new RetriableRequestException(retryAttr), requestContext, wireAttrs);\n     }\n-    else\n-    {\n+    else {\n+      Throwable[] throwables = ExceptionUtils.getThrowables(ex);\n+      for (Throwable throwable : throwables) {\n+        if (throwable instanceof RetriableRequestException) {\n+          ((RetriableRequestException) throwable).setDoNotRetryOverride(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "543f3a0fb1badcec4ad15fe263df3e9b6e954ec8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2MTExNA==", "bodyText": "Fixed", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r540361114", "createdAt": "2020-12-10T17:32:11Z", "author": {"login": "rickzx"}, "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ClientRetryFilter.java", "diffHunk": "@@ -73,8 +74,13 @@ public void onStreamError(Throwable ex,\n     {\n       nextFilter.onError(new RetriableRequestException(retryAttr), requestContext, wireAttrs);\n     }\n-    else\n-    {\n+    else {\n+      Throwable[] throwables = ExceptionUtils.getThrowables(ex);\n+      for (Throwable throwable : throwables) {\n+        if (throwable instanceof RetriableRequestException) {\n+          ((RetriableRequestException) throwable).setDoNotRetryOverride(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0ODIxOA=="}, "originalCommit": {"oid": "543f3a0fb1badcec4ad15fe263df3e9b6e954ec8"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjQ1NTkwOnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/TrackerClientImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMTo0OTo0NlrOIA8RAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzozMjowMlrOIDVBNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg1ODMwNQ==", "bodyText": "I'm a little bit confused, what's the purpose of tracking # of retries in TrackerClient here? Each trackerClient corresponds to one server host, do we need to track retry count on server host basis?", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r537858305", "createdAt": "2020-12-07T21:49:46Z", "author": {"login": "rachelhanhan"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/TrackerClientImpl.java", "diffHunk": "@@ -307,4 +309,17 @@ else if (throwable instanceof StreamException)\n     }\n     return false;\n   }\n+\n+  private CallCompletion startCall(Request request)\n+  {\n+    String retryHeader = request.getHeader(HttpConstants.HEADER_NUMBER_OF_RETRY_ATTEMPTS);\n+    if (retryHeader != null && Integer.parseInt(retryHeader) > 0)\n+    {\n+      return _callTracker.startCall(true);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "543f3a0fb1badcec4ad15fe263df3e9b6e954ec8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2MTAxNQ==", "bodyText": "This change is reverted", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r540361015", "createdAt": "2020-12-10T17:32:02Z", "author": {"login": "rickzx"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/TrackerClientImpl.java", "diffHunk": "@@ -307,4 +309,17 @@ else if (throwable instanceof StreamException)\n     }\n     return false;\n   }\n+\n+  private CallCompletion startCall(Request request)\n+  {\n+    String retryHeader = request.getHeader(HttpConstants.HEADER_NUMBER_OF_RETRY_ATTEMPTS);\n+    if (retryHeader != null && Integer.parseInt(retryHeader) > 0)\n+    {\n+      return _callTracker.startCall(true);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg1ODMwNQ=="}, "originalCommit": {"oid": "543f3a0fb1badcec4ad15fe263df3e9b6e954ec8"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzE4ODgyOnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTozMDozMFrOIBCoZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMzoxNzoxMFrOICzm9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2MjU5Nw==", "bodyText": "I'm not that familiar with the different abstraction levels of D2 and if this client could be used by more than one thread. If so this should be a ConcurrentHashMap and for clarity the declared type should be ConcurrentMap", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r537962597", "createdAt": "2020-12-08T01:30:30Z", "author": {"login": "bbarkley"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -59,15 +75,31 @@\n  */\n public class RetryClient extends D2ClientDelegator\n {\n+  public static final long DEFAULT_UPDATE_INTERVAL_MS = TimeUnit.SECONDS.toMillis(5);\n   private static final Logger LOG = LoggerFactory.getLogger(RetryClient.class);\n \n+  private final Clock _clock;\n+  private final LoadBalancer _balancer;\n   private final int _limit;\n+  private final long _updateIntervalMs;\n \n-  public RetryClient(D2Client d2Client, int limit)\n+  Map<String, CallTracker> _retryTrackerMap;\n+\n+  public RetryClient(D2Client d2Client, LoadBalancer balancer, int limit)\n+  {\n+    this(d2Client, balancer, limit, DEFAULT_UPDATE_INTERVAL_MS, SystemClock.instance());\n+  }\n+\n+  public RetryClient(D2Client d2Client, LoadBalancer balancer, int limit, long updateIntervalMs, Clock clock)\n   {\n     super(d2Client);\n+    _balancer = balancer;\n     _limit = limit;\n-    LOG.debug(\"Retry client created with limit set to: \", _limit);\n+    _updateIntervalMs = updateIntervalMs;\n+    _clock = clock;\n+    _retryTrackerMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "543f3a0fb1badcec4ad15fe263df3e9b6e954ec8"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxMzYyMA==", "bodyText": "Fixed", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r539813620", "createdAt": "2020-12-10T03:17:10Z", "author": {"login": "rickzx"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -59,15 +75,31 @@\n  */\n public class RetryClient extends D2ClientDelegator\n {\n+  public static final long DEFAULT_UPDATE_INTERVAL_MS = TimeUnit.SECONDS.toMillis(5);\n   private static final Logger LOG = LoggerFactory.getLogger(RetryClient.class);\n \n+  private final Clock _clock;\n+  private final LoadBalancer _balancer;\n   private final int _limit;\n+  private final long _updateIntervalMs;\n \n-  public RetryClient(D2Client d2Client, int limit)\n+  Map<String, CallTracker> _retryTrackerMap;\n+\n+  public RetryClient(D2Client d2Client, LoadBalancer balancer, int limit)\n+  {\n+    this(d2Client, balancer, limit, DEFAULT_UPDATE_INTERVAL_MS, SystemClock.instance());\n+  }\n+\n+  public RetryClient(D2Client d2Client, LoadBalancer balancer, int limit, long updateIntervalMs, Clock clock)\n   {\n     super(d2Client);\n+    _balancer = balancer;\n     _limit = limit;\n-    LOG.debug(\"Retry client created with limit set to: \", _limit);\n+    _updateIntervalMs = updateIntervalMs;\n+    _clock = clock;\n+    _retryTrackerMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2MjU5Nw=="}, "originalCommit": {"oid": "543f3a0fb1badcec4ad15fe263df3e9b6e954ec8"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzI5MjI1OnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMjowNzo0OFrOIBDilQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzozNToxNVrOIDVJ1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk3NzQ5Mw==", "bodyText": "I agree with Ruxin's other comment that CallTracker seems pretty heavyweight here. I also don't think it will handle the data in the way that you want. It's meant for reporting stats at intervals, but AFAIK can't report across intervals which I think is called for here. For example if the interval is 10s and we're near the end of the current interval at 8s that means the stats are from a window that started 18s ago (I believe it only reports on data from an interval that has completed, not the current interval). But we want to know how many retry attempts there were in the last 10s right? I believe the CallTracker will only give you data in the context of a rotating window, not a sliding one. I would think we would want this data to be as up to date as possible.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r537977493", "createdAt": "2020-12-08T02:07:48Z", "author": {"login": "bbarkley"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -59,15 +75,31 @@\n  */\n public class RetryClient extends D2ClientDelegator\n {\n+  public static final long DEFAULT_UPDATE_INTERVAL_MS = TimeUnit.SECONDS.toMillis(5);\n   private static final Logger LOG = LoggerFactory.getLogger(RetryClient.class);\n \n+  private final Clock _clock;\n+  private final LoadBalancer _balancer;\n   private final int _limit;\n+  private final long _updateIntervalMs;\n \n-  public RetryClient(D2Client d2Client, int limit)\n+  Map<String, CallTracker> _retryTrackerMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "543f3a0fb1badcec4ad15fe263df3e9b6e954ec8"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2MzIyMw==", "bodyText": "Addressed. Use a light-weight sliding-window CallTracker for RetryClient. Leave it to container to handle monitoring metrics.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r540363223", "createdAt": "2020-12-10T17:35:15Z", "author": {"login": "rickzx"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -59,15 +75,31 @@\n  */\n public class RetryClient extends D2ClientDelegator\n {\n+  public static final long DEFAULT_UPDATE_INTERVAL_MS = TimeUnit.SECONDS.toMillis(5);\n   private static final Logger LOG = LoggerFactory.getLogger(RetryClient.class);\n \n+  private final Clock _clock;\n+  private final LoadBalancer _balancer;\n   private final int _limit;\n+  private final long _updateIntervalMs;\n \n-  public RetryClient(D2Client d2Client, int limit)\n+  Map<String, CallTracker> _retryTrackerMap;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk3NzQ5Mw=="}, "originalCommit": {"oid": "543f3a0fb1badcec4ad15fe263df3e9b6e954ec8"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzM3MjY0OnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMjozOTowOVrOIBEOWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMzoyMzozN1rOICzvYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk4ODY5Nw==", "bodyText": "It looks like getLoadBalancedServiceProperties without providing a callback is deprecated which may be because it makes a call out to get the data? If so maybe this should be cached and not called on each error.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r537988697", "createdAt": "2020-12-08T02:39:09Z", "author": {"login": "bbarkley"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -231,12 +302,34 @@ public void onError(Throwable e)\n           }\n           else\n           {\n+            double maxClientRequestRetryRatio;\n+            try\n+            {\n+              Map<String, Object> transportClientProperties =\n+                  _balancer.getLoadBalancedServiceProperties(_serviceName).getTransportClientProperties();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "543f3a0fb1badcec4ad15fe263df3e9b6e954ec8"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxNTc3Ng==", "bodyText": "I checked the implementation of getLoadBalancedServiceProperties. It will register a listener on ZK properties event bus only if the service has not already been listened on. And after the listener is registered, subsequent call to getLoadBalancedServiceProperties will directly read the properties from LoadBalancerState, which is a local variable. The RequestTimeoutClient is using the same API to get TransportClientProperties: \n  \n    \n      rest.li/d2/src/main/java/com/linkedin/d2/balancer/clients/RequestTimeoutClient.java\n    \n    \n         Line 150\n      in\n      9999958\n    \n    \n    \n    \n\n        \n          \n           _balancer.getLoadBalancedServiceProperties(serviceName).getTransportClientProperties(); \n        \n    \n  \n\n.\nThe method without a callback is deprecated because we want it to be async. I changed the impl here to use the callback version.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r539815776", "createdAt": "2020-12-10T03:23:37Z", "author": {"login": "rickzx"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -231,12 +302,34 @@ public void onError(Throwable e)\n           }\n           else\n           {\n+            double maxClientRequestRetryRatio;\n+            try\n+            {\n+              Map<String, Object> transportClientProperties =\n+                  _balancer.getLoadBalancedServiceProperties(_serviceName).getTransportClientProperties();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk4ODY5Nw=="}, "originalCommit": {"oid": "543f3a0fb1badcec4ad15fe263df3e9b6e954ec8"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzM5MDY3OnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMjo0NTo1M1rOIBEYMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzozNzoxNFrOIDVP9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk5MTIxOA==", "bodyText": "If retry is false we will be calling endCall here and also endCallWithError below which doesn't seem right.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r537991218", "createdAt": "2020-12-08T02:45:53Z", "author": {"login": "bbarkley"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -231,12 +302,34 @@ public void onError(Throwable e)\n           }\n           else\n           {\n+            double maxClientRequestRetryRatio;\n+            try\n+            {\n+              Map<String, Object> transportClientProperties =\n+                  _balancer.getLoadBalancedServiceProperties(_serviceName).getTransportClientProperties();\n+              maxClientRequestRetryRatio = MapUtil.getWithDefault(transportClientProperties, PropertyKeys.HTTP_MAX_CLIENT_REQUEST_RETRY_RATIO,\n+                  HttpClientFactory.DEFAULT_MAX_CLIENT_REQUEST_RETRY_RATIO, Double.class);\n+            } catch (ServiceUnavailableException ex)\n+            {\n+              LOG.warn(\"Failed to fetch transportClientProperties \", ex);\n+              maxClientRequestRetryRatio = HttpClientFactory.DEFAULT_MAX_CLIENT_REQUEST_RETRY_RATIO;\n+            }\n+\n             int attempts = exclusionSet.size();\n             if (attempts <= _limit)\n             {\n-              LOG.warn(\"A retriable exception happens. Going to retry. This is attempt {}. Current exclusion set: \",\n-                  attempts, \". Current exclusion set: \" + exclusionSet);\n-              retry = doRetryRequest(_request, _context);\n+              CallTracker callTracker = _retryTrackerMap.get(_serviceName);\n+              if (callTracker.getCallStats().getRetryRate() <= maxClientRequestRetryRatio)\n+              {\n+                LOG.warn(\"A retriable exception occurred. Going to retry. This is attempt {}. Current exclusion set: {}\",\n+                    attempts, exclusionSet);\n+                _callCompletion.endCall();\n+                retry = doRetryRequest(_request, _context, attempts);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "543f3a0fb1badcec4ad15fe263df3e9b6e954ec8"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2NDc5MA==", "bodyText": "Both are removed in the latest commit", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r540364790", "createdAt": "2020-12-10T17:37:14Z", "author": {"login": "rickzx"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -231,12 +302,34 @@ public void onError(Throwable e)\n           }\n           else\n           {\n+            double maxClientRequestRetryRatio;\n+            try\n+            {\n+              Map<String, Object> transportClientProperties =\n+                  _balancer.getLoadBalancedServiceProperties(_serviceName).getTransportClientProperties();\n+              maxClientRequestRetryRatio = MapUtil.getWithDefault(transportClientProperties, PropertyKeys.HTTP_MAX_CLIENT_REQUEST_RETRY_RATIO,\n+                  HttpClientFactory.DEFAULT_MAX_CLIENT_REQUEST_RETRY_RATIO, Double.class);\n+            } catch (ServiceUnavailableException ex)\n+            {\n+              LOG.warn(\"Failed to fetch transportClientProperties \", ex);\n+              maxClientRequestRetryRatio = HttpClientFactory.DEFAULT_MAX_CLIENT_REQUEST_RETRY_RATIO;\n+            }\n+\n             int attempts = exclusionSet.size();\n             if (attempts <= _limit)\n             {\n-              LOG.warn(\"A retriable exception happens. Going to retry. This is attempt {}. Current exclusion set: \",\n-                  attempts, \". Current exclusion set: \" + exclusionSet);\n-              retry = doRetryRequest(_request, _context);\n+              CallTracker callTracker = _retryTrackerMap.get(_serviceName);\n+              if (callTracker.getCallStats().getRetryRate() <= maxClientRequestRetryRatio)\n+              {\n+                LOG.warn(\"A retriable exception occurred. Going to retry. This is attempt {}. Current exclusion set: {}\",\n+                    attempts, exclusionSet);\n+                _callCompletion.endCall();\n+                retry = doRetryRequest(_request, _context, attempts);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk5MTIxOA=="}, "originalCommit": {"oid": "543f3a0fb1badcec4ad15fe263df3e9b6e954ec8"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3ODE2MDA2OnYy", "diffSide": "RIGHT", "path": "degrader/src/main/java/com/linkedin/util/degrader/CallTracker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNzozMDowM1rOIBK1Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzozNzo0NFrOIDVRqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA5Njk2Ng==", "bodyText": "As noted above this doesn't seem like the best fit for a metrics class to use. It also seems like a poor fit based on the changes needed to the interface here and associated class. This is a fairly generic type that also happens to mirror an internal LI class and interface. Adding something specific to the retry use case seems like a design smell, and diverging from the internal implementation also should be avoided if possible IMO.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r538096966", "createdAt": "2020-12-08T07:30:03Z", "author": {"login": "bbarkley"}, "path": "degrader/src/main/java/com/linkedin/util/degrader/CallTracker.java", "diffHunk": "@@ -115,11 +121,18 @@\n   void trackCallWithError(long duration);\n \n   /**\n-   * Indicates the start of a method invocation\n+   * Indicates the start of a non-retry method invocation\n    * @return an object that can be used to indicate completion of the call\n    */\n   CallCompletion startCall();\n \n+  /**\n+   * Indicates the start of a method invocation\n+   * @param isRetry whether the call is a retry\n+   * @return an object that can be used to indicate completion of the call\n+   */\n+  CallCompletion startCall(boolean isRetry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "543f3a0fb1badcec4ad15fe263df3e9b6e954ec8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2NTIyNg==", "bodyText": "Removed retry-related stuff in default CallTracker", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r540365226", "createdAt": "2020-12-10T17:37:44Z", "author": {"login": "rickzx"}, "path": "degrader/src/main/java/com/linkedin/util/degrader/CallTracker.java", "diffHunk": "@@ -115,11 +121,18 @@\n   void trackCallWithError(long duration);\n \n   /**\n-   * Indicates the start of a method invocation\n+   * Indicates the start of a non-retry method invocation\n    * @return an object that can be used to indicate completion of the call\n    */\n   CallCompletion startCall();\n \n+  /**\n+   * Indicates the start of a method invocation\n+   * @param isRetry whether the call is a retry\n+   * @return an object that can be used to indicate completion of the call\n+   */\n+  CallCompletion startCall(boolean isRetry);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA5Njk2Ng=="}, "originalCommit": {"oid": "543f3a0fb1badcec4ad15fe263df3e9b6e954ec8"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzEwMDA0OnYy", "diffSide": "RIGHT", "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ServerRetryFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjozMzo0N1rOICd9hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMzoyNDozMVrOICzwnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ1ODk1MQ==", "bodyText": "This class has enough logic and edge cases that it should have a decent set of unit tests IMO, and potentially be pulled out to a top level class.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r539458951", "createdAt": "2020-12-09T16:33:47Z", "author": {"login": "bbarkley"}, "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ServerRetryFilter.java", "diffHunk": "@@ -75,13 +116,160 @@ public void onStreamError(Throwable ex,\n       if (cause instanceof RetriableRequestException)\n       {\n         String message = cause.getMessage();\n-        LOG.debug(\"RetriableRequestException caught! Error message: {}\", message);\n-        wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        if (_serverRetryTracker.isBelowRetryRatio())\n+        {\n+          LOG.debug(\"RetriableRequestException caught! Do retry. Error message: {}\", message);\n+          wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        }\n+        else\n+        {\n+          LOG.debug(\"Max request retry ratio exceeded! Will not retry. Error message: {}\", message);\n+          wireAttrs.remove(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY);\n+        }\n         break;\n       }\n       cause = cause.getCause();\n     }\n \n     nextFilter.onError(ex, requestContext, wireAttrs);\n   }\n+\n+  private void updateRetryTracker(Request req)\n+  {\n+    String retryAttemptsHeader = req.getHeader(HttpConstants.HEADER_NUMBER_OF_RETRY_ATTEMPTS);\n+    if (retryAttemptsHeader != null)\n+    {\n+      _serverRetryTracker.add(Integer.parseInt(retryAttemptsHeader));\n+    }\n+  }\n+\n+  /**\n+   * Stores the number of requests categorized by number of retry attempts. It uses the information to estimate\n+   * a ratio of how many requests are being retried in the cluster. The ratio is then compared with\n+   * {@link ServerRetryTracker#_maxRequestRetryRatio} to make a decision on whether or not to retry in the\n+   * next interval. When calculating the ratio, it looks at the last {@link ServerRetryTracker#_aggregatedIntervalNum}\n+   * intervals by aggregating the recorded requests.\n+   */\n+  private static class ServerRetryTracker", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "543f3a0fb1badcec4ad15fe263df3e9b6e954ec8"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxNjA5Mg==", "bodyText": "I separate out ServerRetryTracker from ServerRetryFilter into the r2 util package. Added a test suite.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r539816092", "createdAt": "2020-12-10T03:24:31Z", "author": {"login": "rickzx"}, "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ServerRetryFilter.java", "diffHunk": "@@ -75,13 +116,160 @@ public void onStreamError(Throwable ex,\n       if (cause instanceof RetriableRequestException)\n       {\n         String message = cause.getMessage();\n-        LOG.debug(\"RetriableRequestException caught! Error message: {}\", message);\n-        wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        if (_serverRetryTracker.isBelowRetryRatio())\n+        {\n+          LOG.debug(\"RetriableRequestException caught! Do retry. Error message: {}\", message);\n+          wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        }\n+        else\n+        {\n+          LOG.debug(\"Max request retry ratio exceeded! Will not retry. Error message: {}\", message);\n+          wireAttrs.remove(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY);\n+        }\n         break;\n       }\n       cause = cause.getCause();\n     }\n \n     nextFilter.onError(ex, requestContext, wireAttrs);\n   }\n+\n+  private void updateRetryTracker(Request req)\n+  {\n+    String retryAttemptsHeader = req.getHeader(HttpConstants.HEADER_NUMBER_OF_RETRY_ATTEMPTS);\n+    if (retryAttemptsHeader != null)\n+    {\n+      _serverRetryTracker.add(Integer.parseInt(retryAttemptsHeader));\n+    }\n+  }\n+\n+  /**\n+   * Stores the number of requests categorized by number of retry attempts. It uses the information to estimate\n+   * a ratio of how many requests are being retried in the cluster. The ratio is then compared with\n+   * {@link ServerRetryTracker#_maxRequestRetryRatio} to make a decision on whether or not to retry in the\n+   * next interval. When calculating the ratio, it looks at the last {@link ServerRetryTracker#_aggregatedIntervalNum}\n+   * intervals by aggregating the recorded requests.\n+   */\n+  private static class ServerRetryTracker", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ1ODk1MQ=="}, "originalCommit": {"oid": "543f3a0fb1badcec4ad15fe263df3e9b6e954ec8"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzIzMzQyOnYy", "diffSide": "RIGHT", "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ServerRetryFilter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo1ODoxNFrOICfM7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzozODowOVrOIDVS8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3OTI3OQ==", "bodyText": "Is this necessary to do here? The add call happening on each request with the header will be doing this already, so I would think it would only be needed if the majority of clients haven't updated (so that their interval data will be current if there aren't recent requests coming in from updated clients), or if there is a concern that there aren't many requests coming in, and they are very long running, in which case the initial state calculated by add will be out of date.\nIf the first issue is the concern I'd suggest pulling this up to do conditionally in processError if the header wasn't present.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r539479279", "createdAt": "2020-12-09T16:58:14Z", "author": {"login": "bbarkley"}, "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ServerRetryFilter.java", "diffHunk": "@@ -75,13 +116,160 @@ public void onStreamError(Throwable ex,\n       if (cause instanceof RetriableRequestException)\n       {\n         String message = cause.getMessage();\n-        LOG.debug(\"RetriableRequestException caught! Error message: {}\", message);\n-        wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        if (_serverRetryTracker.isBelowRetryRatio())\n+        {\n+          LOG.debug(\"RetriableRequestException caught! Do retry. Error message: {}\", message);\n+          wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        }\n+        else\n+        {\n+          LOG.debug(\"Max request retry ratio exceeded! Will not retry. Error message: {}\", message);\n+          wireAttrs.remove(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY);\n+        }\n         break;\n       }\n       cause = cause.getCause();\n     }\n \n     nextFilter.onError(ex, requestContext, wireAttrs);\n   }\n+\n+  private void updateRetryTracker(Request req)\n+  {\n+    String retryAttemptsHeader = req.getHeader(HttpConstants.HEADER_NUMBER_OF_RETRY_ATTEMPTS);\n+    if (retryAttemptsHeader != null)\n+    {\n+      _serverRetryTracker.add(Integer.parseInt(retryAttemptsHeader));\n+    }\n+  }\n+\n+  /**\n+   * Stores the number of requests categorized by number of retry attempts. It uses the information to estimate\n+   * a ratio of how many requests are being retried in the cluster. The ratio is then compared with\n+   * {@link ServerRetryTracker#_maxRequestRetryRatio} to make a decision on whether or not to retry in the\n+   * next interval. When calculating the ratio, it looks at the last {@link ServerRetryTracker#_aggregatedIntervalNum}\n+   * intervals by aggregating the recorded requests.\n+   */\n+  private static class ServerRetryTracker\n+  {\n+    private final int _retryLimit;\n+    private final int _aggregatedIntervalNum;\n+    private final double _maxRequestRetryRatio;\n+    private final long _updateIntervalMs;\n+    private final Clock _clock;\n+\n+    private final Object _counterLock = new Object();\n+    private final Object _updateLock = new Object();\n+\n+    @GuardedBy(\"_updateLock\")\n+    private volatile long _lastRollOverTime;\n+    private boolean _isBelowRetryRatio;\n+\n+    @GuardedBy(\"_counterLock\")\n+    private final LinkedList<int[]> _retryAttemptsCounter;\n+    private final int[] _aggregatedRetryAttemptsCounter;\n+\n+    private ServerRetryTracker(int retryLimit, int aggregatedIntervalNum, double maxRequestRetryRatio, long updateIntervalMs, Clock clock)\n+    {\n+      _retryLimit = retryLimit;\n+      _aggregatedIntervalNum = aggregatedIntervalNum;\n+      _maxRequestRetryRatio = maxRequestRetryRatio;\n+      _updateIntervalMs = updateIntervalMs;\n+      _clock = clock;\n+\n+      _aggregatedRetryAttemptsCounter = new int[_retryLimit + 1];\n+      _retryAttemptsCounter = new LinkedList<>();\n+      _retryAttemptsCounter.add(new int[_retryLimit + 1]);\n+    }\n+\n+    public void add(int numberOfRetryAttempts)\n+    {\n+      if (numberOfRetryAttempts <= _retryLimit)\n+      {\n+        synchronized (_counterLock)\n+        {\n+          _retryAttemptsCounter.getLast()[numberOfRetryAttempts] += 1;\n+        }\n+      } else\n+      {\n+        LOG.warn(\"Unexpected number of retry attempts: \" + numberOfRetryAttempts + \", current retry limit: \" + _retryLimit);\n+      }\n+\n+      updateRetryDecision();\n+    }\n+\n+    public void rollOverStats()\n+    {\n+      // rollover the current interval to the aggregated counter\n+      synchronized (_counterLock)\n+      {\n+        int[] intervalToAggregate = _retryAttemptsCounter.getLast();\n+        for (int i = 0; i < _retryLimit; i++)\n+        {\n+          _aggregatedRetryAttemptsCounter[i] += intervalToAggregate[i];\n+        }\n+\n+        if (_retryAttemptsCounter.size() > _aggregatedIntervalNum)\n+        {\n+          // discard the oldest interval\n+          int[] intervalToDiscard = _retryAttemptsCounter.removeFirst();\n+          for (int i = 0; i < _retryLimit; i++)\n+          {\n+            _aggregatedRetryAttemptsCounter[i] -= intervalToDiscard[i];\n+          }\n+        }\n+\n+        // append a new interval\n+        _retryAttemptsCounter.addLast(new int[_retryLimit + 1]);\n+      }\n+    }\n+\n+    public boolean isBelowRetryRatio()\n+    {\n+      updateRetryDecision();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "543f3a0fb1badcec4ad15fe263df3e9b6e954ec8"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxNjc4MA==", "bodyText": "This is necessary because if there aren't many requests coming in for a period of time, the information in the tracker is stale. The next time we make the retry decision, we have to first rollover the stale windows.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r539816780", "createdAt": "2020-12-10T03:26:27Z", "author": {"login": "rickzx"}, "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ServerRetryFilter.java", "diffHunk": "@@ -75,13 +116,160 @@ public void onStreamError(Throwable ex,\n       if (cause instanceof RetriableRequestException)\n       {\n         String message = cause.getMessage();\n-        LOG.debug(\"RetriableRequestException caught! Error message: {}\", message);\n-        wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        if (_serverRetryTracker.isBelowRetryRatio())\n+        {\n+          LOG.debug(\"RetriableRequestException caught! Do retry. Error message: {}\", message);\n+          wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        }\n+        else\n+        {\n+          LOG.debug(\"Max request retry ratio exceeded! Will not retry. Error message: {}\", message);\n+          wireAttrs.remove(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY);\n+        }\n         break;\n       }\n       cause = cause.getCause();\n     }\n \n     nextFilter.onError(ex, requestContext, wireAttrs);\n   }\n+\n+  private void updateRetryTracker(Request req)\n+  {\n+    String retryAttemptsHeader = req.getHeader(HttpConstants.HEADER_NUMBER_OF_RETRY_ATTEMPTS);\n+    if (retryAttemptsHeader != null)\n+    {\n+      _serverRetryTracker.add(Integer.parseInt(retryAttemptsHeader));\n+    }\n+  }\n+\n+  /**\n+   * Stores the number of requests categorized by number of retry attempts. It uses the information to estimate\n+   * a ratio of how many requests are being retried in the cluster. The ratio is then compared with\n+   * {@link ServerRetryTracker#_maxRequestRetryRatio} to make a decision on whether or not to retry in the\n+   * next interval. When calculating the ratio, it looks at the last {@link ServerRetryTracker#_aggregatedIntervalNum}\n+   * intervals by aggregating the recorded requests.\n+   */\n+  private static class ServerRetryTracker\n+  {\n+    private final int _retryLimit;\n+    private final int _aggregatedIntervalNum;\n+    private final double _maxRequestRetryRatio;\n+    private final long _updateIntervalMs;\n+    private final Clock _clock;\n+\n+    private final Object _counterLock = new Object();\n+    private final Object _updateLock = new Object();\n+\n+    @GuardedBy(\"_updateLock\")\n+    private volatile long _lastRollOverTime;\n+    private boolean _isBelowRetryRatio;\n+\n+    @GuardedBy(\"_counterLock\")\n+    private final LinkedList<int[]> _retryAttemptsCounter;\n+    private final int[] _aggregatedRetryAttemptsCounter;\n+\n+    private ServerRetryTracker(int retryLimit, int aggregatedIntervalNum, double maxRequestRetryRatio, long updateIntervalMs, Clock clock)\n+    {\n+      _retryLimit = retryLimit;\n+      _aggregatedIntervalNum = aggregatedIntervalNum;\n+      _maxRequestRetryRatio = maxRequestRetryRatio;\n+      _updateIntervalMs = updateIntervalMs;\n+      _clock = clock;\n+\n+      _aggregatedRetryAttemptsCounter = new int[_retryLimit + 1];\n+      _retryAttemptsCounter = new LinkedList<>();\n+      _retryAttemptsCounter.add(new int[_retryLimit + 1]);\n+    }\n+\n+    public void add(int numberOfRetryAttempts)\n+    {\n+      if (numberOfRetryAttempts <= _retryLimit)\n+      {\n+        synchronized (_counterLock)\n+        {\n+          _retryAttemptsCounter.getLast()[numberOfRetryAttempts] += 1;\n+        }\n+      } else\n+      {\n+        LOG.warn(\"Unexpected number of retry attempts: \" + numberOfRetryAttempts + \", current retry limit: \" + _retryLimit);\n+      }\n+\n+      updateRetryDecision();\n+    }\n+\n+    public void rollOverStats()\n+    {\n+      // rollover the current interval to the aggregated counter\n+      synchronized (_counterLock)\n+      {\n+        int[] intervalToAggregate = _retryAttemptsCounter.getLast();\n+        for (int i = 0; i < _retryLimit; i++)\n+        {\n+          _aggregatedRetryAttemptsCounter[i] += intervalToAggregate[i];\n+        }\n+\n+        if (_retryAttemptsCounter.size() > _aggregatedIntervalNum)\n+        {\n+          // discard the oldest interval\n+          int[] intervalToDiscard = _retryAttemptsCounter.removeFirst();\n+          for (int i = 0; i < _retryLimit; i++)\n+          {\n+            _aggregatedRetryAttemptsCounter[i] -= intervalToDiscard[i];\n+          }\n+        }\n+\n+        // append a new interval\n+        _retryAttemptsCounter.addLast(new int[_retryLimit + 1]);\n+      }\n+    }\n+\n+    public boolean isBelowRetryRatio()\n+    {\n+      updateRetryDecision();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3OTI3OQ=="}, "originalCommit": {"oid": "543f3a0fb1badcec4ad15fe263df3e9b6e954ec8"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgzMjcyNw==", "bodyText": "Right, but that staleness would only apply if it was an older client not sending the header right? So the calculation at the end of the request can be skipped on requests when it's performed at the beginning.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r539832727", "createdAt": "2020-12-10T04:16:33Z", "author": {"login": "bbarkley"}, "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ServerRetryFilter.java", "diffHunk": "@@ -75,13 +116,160 @@ public void onStreamError(Throwable ex,\n       if (cause instanceof RetriableRequestException)\n       {\n         String message = cause.getMessage();\n-        LOG.debug(\"RetriableRequestException caught! Error message: {}\", message);\n-        wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        if (_serverRetryTracker.isBelowRetryRatio())\n+        {\n+          LOG.debug(\"RetriableRequestException caught! Do retry. Error message: {}\", message);\n+          wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        }\n+        else\n+        {\n+          LOG.debug(\"Max request retry ratio exceeded! Will not retry. Error message: {}\", message);\n+          wireAttrs.remove(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY);\n+        }\n         break;\n       }\n       cause = cause.getCause();\n     }\n \n     nextFilter.onError(ex, requestContext, wireAttrs);\n   }\n+\n+  private void updateRetryTracker(Request req)\n+  {\n+    String retryAttemptsHeader = req.getHeader(HttpConstants.HEADER_NUMBER_OF_RETRY_ATTEMPTS);\n+    if (retryAttemptsHeader != null)\n+    {\n+      _serverRetryTracker.add(Integer.parseInt(retryAttemptsHeader));\n+    }\n+  }\n+\n+  /**\n+   * Stores the number of requests categorized by number of retry attempts. It uses the information to estimate\n+   * a ratio of how many requests are being retried in the cluster. The ratio is then compared with\n+   * {@link ServerRetryTracker#_maxRequestRetryRatio} to make a decision on whether or not to retry in the\n+   * next interval. When calculating the ratio, it looks at the last {@link ServerRetryTracker#_aggregatedIntervalNum}\n+   * intervals by aggregating the recorded requests.\n+   */\n+  private static class ServerRetryTracker\n+  {\n+    private final int _retryLimit;\n+    private final int _aggregatedIntervalNum;\n+    private final double _maxRequestRetryRatio;\n+    private final long _updateIntervalMs;\n+    private final Clock _clock;\n+\n+    private final Object _counterLock = new Object();\n+    private final Object _updateLock = new Object();\n+\n+    @GuardedBy(\"_updateLock\")\n+    private volatile long _lastRollOverTime;\n+    private boolean _isBelowRetryRatio;\n+\n+    @GuardedBy(\"_counterLock\")\n+    private final LinkedList<int[]> _retryAttemptsCounter;\n+    private final int[] _aggregatedRetryAttemptsCounter;\n+\n+    private ServerRetryTracker(int retryLimit, int aggregatedIntervalNum, double maxRequestRetryRatio, long updateIntervalMs, Clock clock)\n+    {\n+      _retryLimit = retryLimit;\n+      _aggregatedIntervalNum = aggregatedIntervalNum;\n+      _maxRequestRetryRatio = maxRequestRetryRatio;\n+      _updateIntervalMs = updateIntervalMs;\n+      _clock = clock;\n+\n+      _aggregatedRetryAttemptsCounter = new int[_retryLimit + 1];\n+      _retryAttemptsCounter = new LinkedList<>();\n+      _retryAttemptsCounter.add(new int[_retryLimit + 1]);\n+    }\n+\n+    public void add(int numberOfRetryAttempts)\n+    {\n+      if (numberOfRetryAttempts <= _retryLimit)\n+      {\n+        synchronized (_counterLock)\n+        {\n+          _retryAttemptsCounter.getLast()[numberOfRetryAttempts] += 1;\n+        }\n+      } else\n+      {\n+        LOG.warn(\"Unexpected number of retry attempts: \" + numberOfRetryAttempts + \", current retry limit: \" + _retryLimit);\n+      }\n+\n+      updateRetryDecision();\n+    }\n+\n+    public void rollOverStats()\n+    {\n+      // rollover the current interval to the aggregated counter\n+      synchronized (_counterLock)\n+      {\n+        int[] intervalToAggregate = _retryAttemptsCounter.getLast();\n+        for (int i = 0; i < _retryLimit; i++)\n+        {\n+          _aggregatedRetryAttemptsCounter[i] += intervalToAggregate[i];\n+        }\n+\n+        if (_retryAttemptsCounter.size() > _aggregatedIntervalNum)\n+        {\n+          // discard the oldest interval\n+          int[] intervalToDiscard = _retryAttemptsCounter.removeFirst();\n+          for (int i = 0; i < _retryLimit; i++)\n+          {\n+            _aggregatedRetryAttemptsCounter[i] -= intervalToDiscard[i];\n+          }\n+        }\n+\n+        // append a new interval\n+        _retryAttemptsCounter.addLast(new int[_retryLimit + 1]);\n+      }\n+    }\n+\n+    public boolean isBelowRetryRatio()\n+    {\n+      updateRetryDecision();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3OTI3OQ=="}, "originalCommit": {"oid": "543f3a0fb1badcec4ad15fe263df3e9b6e954ec8"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2NTU1NA==", "bodyText": "Right. Removed updateRetryDecision here", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r540365554", "createdAt": "2020-12-10T17:38:09Z", "author": {"login": "rickzx"}, "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ServerRetryFilter.java", "diffHunk": "@@ -75,13 +116,160 @@ public void onStreamError(Throwable ex,\n       if (cause instanceof RetriableRequestException)\n       {\n         String message = cause.getMessage();\n-        LOG.debug(\"RetriableRequestException caught! Error message: {}\", message);\n-        wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        if (_serverRetryTracker.isBelowRetryRatio())\n+        {\n+          LOG.debug(\"RetriableRequestException caught! Do retry. Error message: {}\", message);\n+          wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        }\n+        else\n+        {\n+          LOG.debug(\"Max request retry ratio exceeded! Will not retry. Error message: {}\", message);\n+          wireAttrs.remove(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY);\n+        }\n         break;\n       }\n       cause = cause.getCause();\n     }\n \n     nextFilter.onError(ex, requestContext, wireAttrs);\n   }\n+\n+  private void updateRetryTracker(Request req)\n+  {\n+    String retryAttemptsHeader = req.getHeader(HttpConstants.HEADER_NUMBER_OF_RETRY_ATTEMPTS);\n+    if (retryAttemptsHeader != null)\n+    {\n+      _serverRetryTracker.add(Integer.parseInt(retryAttemptsHeader));\n+    }\n+  }\n+\n+  /**\n+   * Stores the number of requests categorized by number of retry attempts. It uses the information to estimate\n+   * a ratio of how many requests are being retried in the cluster. The ratio is then compared with\n+   * {@link ServerRetryTracker#_maxRequestRetryRatio} to make a decision on whether or not to retry in the\n+   * next interval. When calculating the ratio, it looks at the last {@link ServerRetryTracker#_aggregatedIntervalNum}\n+   * intervals by aggregating the recorded requests.\n+   */\n+  private static class ServerRetryTracker\n+  {\n+    private final int _retryLimit;\n+    private final int _aggregatedIntervalNum;\n+    private final double _maxRequestRetryRatio;\n+    private final long _updateIntervalMs;\n+    private final Clock _clock;\n+\n+    private final Object _counterLock = new Object();\n+    private final Object _updateLock = new Object();\n+\n+    @GuardedBy(\"_updateLock\")\n+    private volatile long _lastRollOverTime;\n+    private boolean _isBelowRetryRatio;\n+\n+    @GuardedBy(\"_counterLock\")\n+    private final LinkedList<int[]> _retryAttemptsCounter;\n+    private final int[] _aggregatedRetryAttemptsCounter;\n+\n+    private ServerRetryTracker(int retryLimit, int aggregatedIntervalNum, double maxRequestRetryRatio, long updateIntervalMs, Clock clock)\n+    {\n+      _retryLimit = retryLimit;\n+      _aggregatedIntervalNum = aggregatedIntervalNum;\n+      _maxRequestRetryRatio = maxRequestRetryRatio;\n+      _updateIntervalMs = updateIntervalMs;\n+      _clock = clock;\n+\n+      _aggregatedRetryAttemptsCounter = new int[_retryLimit + 1];\n+      _retryAttemptsCounter = new LinkedList<>();\n+      _retryAttemptsCounter.add(new int[_retryLimit + 1]);\n+    }\n+\n+    public void add(int numberOfRetryAttempts)\n+    {\n+      if (numberOfRetryAttempts <= _retryLimit)\n+      {\n+        synchronized (_counterLock)\n+        {\n+          _retryAttemptsCounter.getLast()[numberOfRetryAttempts] += 1;\n+        }\n+      } else\n+      {\n+        LOG.warn(\"Unexpected number of retry attempts: \" + numberOfRetryAttempts + \", current retry limit: \" + _retryLimit);\n+      }\n+\n+      updateRetryDecision();\n+    }\n+\n+    public void rollOverStats()\n+    {\n+      // rollover the current interval to the aggregated counter\n+      synchronized (_counterLock)\n+      {\n+        int[] intervalToAggregate = _retryAttemptsCounter.getLast();\n+        for (int i = 0; i < _retryLimit; i++)\n+        {\n+          _aggregatedRetryAttemptsCounter[i] += intervalToAggregate[i];\n+        }\n+\n+        if (_retryAttemptsCounter.size() > _aggregatedIntervalNum)\n+        {\n+          // discard the oldest interval\n+          int[] intervalToDiscard = _retryAttemptsCounter.removeFirst();\n+          for (int i = 0; i < _retryLimit; i++)\n+          {\n+            _aggregatedRetryAttemptsCounter[i] -= intervalToDiscard[i];\n+          }\n+        }\n+\n+        // append a new interval\n+        _retryAttemptsCounter.addLast(new int[_retryLimit + 1]);\n+      }\n+    }\n+\n+    public boolean isBelowRetryRatio()\n+    {\n+      updateRetryDecision();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3OTI3OQ=="}, "originalCommit": {"oid": "543f3a0fb1badcec4ad15fe263df3e9b6e954ec8"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzI1MTkzOnYy", "diffSide": "RIGHT", "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ServerRetryFilter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzowMToyN1rOICfXvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMzoxMjowN1rOIFw1_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ4MjA0Ng==", "bodyText": "Is this protecting against malicious clients? Why would we be getting a value that is above the limit? If something is misconfigured and clients are trying more than they should I would think we would want to track this as another entry for the max number of retries that are allowed instead of ignoring it.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r539482046", "createdAt": "2020-12-09T17:01:27Z", "author": {"login": "bbarkley"}, "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ServerRetryFilter.java", "diffHunk": "@@ -75,13 +116,160 @@ public void onStreamError(Throwable ex,\n       if (cause instanceof RetriableRequestException)\n       {\n         String message = cause.getMessage();\n-        LOG.debug(\"RetriableRequestException caught! Error message: {}\", message);\n-        wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        if (_serverRetryTracker.isBelowRetryRatio())\n+        {\n+          LOG.debug(\"RetriableRequestException caught! Do retry. Error message: {}\", message);\n+          wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        }\n+        else\n+        {\n+          LOG.debug(\"Max request retry ratio exceeded! Will not retry. Error message: {}\", message);\n+          wireAttrs.remove(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY);\n+        }\n         break;\n       }\n       cause = cause.getCause();\n     }\n \n     nextFilter.onError(ex, requestContext, wireAttrs);\n   }\n+\n+  private void updateRetryTracker(Request req)\n+  {\n+    String retryAttemptsHeader = req.getHeader(HttpConstants.HEADER_NUMBER_OF_RETRY_ATTEMPTS);\n+    if (retryAttemptsHeader != null)\n+    {\n+      _serverRetryTracker.add(Integer.parseInt(retryAttemptsHeader));\n+    }\n+  }\n+\n+  /**\n+   * Stores the number of requests categorized by number of retry attempts. It uses the information to estimate\n+   * a ratio of how many requests are being retried in the cluster. The ratio is then compared with\n+   * {@link ServerRetryTracker#_maxRequestRetryRatio} to make a decision on whether or not to retry in the\n+   * next interval. When calculating the ratio, it looks at the last {@link ServerRetryTracker#_aggregatedIntervalNum}\n+   * intervals by aggregating the recorded requests.\n+   */\n+  private static class ServerRetryTracker\n+  {\n+    private final int _retryLimit;\n+    private final int _aggregatedIntervalNum;\n+    private final double _maxRequestRetryRatio;\n+    private final long _updateIntervalMs;\n+    private final Clock _clock;\n+\n+    private final Object _counterLock = new Object();\n+    private final Object _updateLock = new Object();\n+\n+    @GuardedBy(\"_updateLock\")\n+    private volatile long _lastRollOverTime;\n+    private boolean _isBelowRetryRatio;\n+\n+    @GuardedBy(\"_counterLock\")\n+    private final LinkedList<int[]> _retryAttemptsCounter;\n+    private final int[] _aggregatedRetryAttemptsCounter;\n+\n+    private ServerRetryTracker(int retryLimit, int aggregatedIntervalNum, double maxRequestRetryRatio, long updateIntervalMs, Clock clock)\n+    {\n+      _retryLimit = retryLimit;\n+      _aggregatedIntervalNum = aggregatedIntervalNum;\n+      _maxRequestRetryRatio = maxRequestRetryRatio;\n+      _updateIntervalMs = updateIntervalMs;\n+      _clock = clock;\n+\n+      _aggregatedRetryAttemptsCounter = new int[_retryLimit + 1];\n+      _retryAttemptsCounter = new LinkedList<>();\n+      _retryAttemptsCounter.add(new int[_retryLimit + 1]);\n+    }\n+\n+    public void add(int numberOfRetryAttempts)\n+    {\n+      if (numberOfRetryAttempts <= _retryLimit)\n+      {\n+        synchronized (_counterLock)\n+        {\n+          _retryAttemptsCounter.getLast()[numberOfRetryAttempts] += 1;\n+        }\n+      } else\n+      {\n+        LOG.warn(\"Unexpected number of retry attempts: \" + numberOfRetryAttempts + \", current retry limit: \" + _retryLimit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "543f3a0fb1badcec4ad15fe263df3e9b6e954ec8"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg2OTQzNw==", "bodyText": "This is to account for a config discrepancy between client and server. Client and server can both configure their own retry limit, so potentially, the client-side config can have a higher value than the server-side config. Do we want to fail the request if the number of attempts is higher than the server-side config value? Or should the server still handle this request? @rachelhanhan @bbarkley @ssheng Any thoughts on this?\nI think not adding this request to RetryTracker will help improve efficiency because we can use a fix-sized array instead of a resizable list. And really, requests with high retry attempts should be extremely rare. We can already infer the retry ratio from the requests with lower retry attempts.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r539869437", "createdAt": "2020-12-10T06:03:09Z", "author": {"login": "rickzx"}, "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ServerRetryFilter.java", "diffHunk": "@@ -75,13 +116,160 @@ public void onStreamError(Throwable ex,\n       if (cause instanceof RetriableRequestException)\n       {\n         String message = cause.getMessage();\n-        LOG.debug(\"RetriableRequestException caught! Error message: {}\", message);\n-        wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        if (_serverRetryTracker.isBelowRetryRatio())\n+        {\n+          LOG.debug(\"RetriableRequestException caught! Do retry. Error message: {}\", message);\n+          wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        }\n+        else\n+        {\n+          LOG.debug(\"Max request retry ratio exceeded! Will not retry. Error message: {}\", message);\n+          wireAttrs.remove(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY);\n+        }\n         break;\n       }\n       cause = cause.getCause();\n     }\n \n     nextFilter.onError(ex, requestContext, wireAttrs);\n   }\n+\n+  private void updateRetryTracker(Request req)\n+  {\n+    String retryAttemptsHeader = req.getHeader(HttpConstants.HEADER_NUMBER_OF_RETRY_ATTEMPTS);\n+    if (retryAttemptsHeader != null)\n+    {\n+      _serverRetryTracker.add(Integer.parseInt(retryAttemptsHeader));\n+    }\n+  }\n+\n+  /**\n+   * Stores the number of requests categorized by number of retry attempts. It uses the information to estimate\n+   * a ratio of how many requests are being retried in the cluster. The ratio is then compared with\n+   * {@link ServerRetryTracker#_maxRequestRetryRatio} to make a decision on whether or not to retry in the\n+   * next interval. When calculating the ratio, it looks at the last {@link ServerRetryTracker#_aggregatedIntervalNum}\n+   * intervals by aggregating the recorded requests.\n+   */\n+  private static class ServerRetryTracker\n+  {\n+    private final int _retryLimit;\n+    private final int _aggregatedIntervalNum;\n+    private final double _maxRequestRetryRatio;\n+    private final long _updateIntervalMs;\n+    private final Clock _clock;\n+\n+    private final Object _counterLock = new Object();\n+    private final Object _updateLock = new Object();\n+\n+    @GuardedBy(\"_updateLock\")\n+    private volatile long _lastRollOverTime;\n+    private boolean _isBelowRetryRatio;\n+\n+    @GuardedBy(\"_counterLock\")\n+    private final LinkedList<int[]> _retryAttemptsCounter;\n+    private final int[] _aggregatedRetryAttemptsCounter;\n+\n+    private ServerRetryTracker(int retryLimit, int aggregatedIntervalNum, double maxRequestRetryRatio, long updateIntervalMs, Clock clock)\n+    {\n+      _retryLimit = retryLimit;\n+      _aggregatedIntervalNum = aggregatedIntervalNum;\n+      _maxRequestRetryRatio = maxRequestRetryRatio;\n+      _updateIntervalMs = updateIntervalMs;\n+      _clock = clock;\n+\n+      _aggregatedRetryAttemptsCounter = new int[_retryLimit + 1];\n+      _retryAttemptsCounter = new LinkedList<>();\n+      _retryAttemptsCounter.add(new int[_retryLimit + 1]);\n+    }\n+\n+    public void add(int numberOfRetryAttempts)\n+    {\n+      if (numberOfRetryAttempts <= _retryLimit)\n+      {\n+        synchronized (_counterLock)\n+        {\n+          _retryAttemptsCounter.getLast()[numberOfRetryAttempts] += 1;\n+        }\n+      } else\n+      {\n+        LOG.warn(\"Unexpected number of retry attempts: \" + numberOfRetryAttempts + \", current retry limit: \" + _retryLimit);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ4MjA0Ng=="}, "originalCommit": {"oid": "543f3a0fb1badcec4ad15fe263df3e9b6e954ec8"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg5OTQ0Ng==", "bodyText": "I agree we shouldn't support tracking data for any number of retry requests - if the current count is greater than the retry limit we can just treat it as the retry limit max.\nThough potentially we should be rejecting the request if the count is higher than what the service wants to allow. Is the server side limit used for anything other than tracking?", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r539899446", "createdAt": "2020-12-10T06:40:41Z", "author": {"login": "bbarkley"}, "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ServerRetryFilter.java", "diffHunk": "@@ -75,13 +116,160 @@ public void onStreamError(Throwable ex,\n       if (cause instanceof RetriableRequestException)\n       {\n         String message = cause.getMessage();\n-        LOG.debug(\"RetriableRequestException caught! Error message: {}\", message);\n-        wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        if (_serverRetryTracker.isBelowRetryRatio())\n+        {\n+          LOG.debug(\"RetriableRequestException caught! Do retry. Error message: {}\", message);\n+          wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        }\n+        else\n+        {\n+          LOG.debug(\"Max request retry ratio exceeded! Will not retry. Error message: {}\", message);\n+          wireAttrs.remove(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY);\n+        }\n         break;\n       }\n       cause = cause.getCause();\n     }\n \n     nextFilter.onError(ex, requestContext, wireAttrs);\n   }\n+\n+  private void updateRetryTracker(Request req)\n+  {\n+    String retryAttemptsHeader = req.getHeader(HttpConstants.HEADER_NUMBER_OF_RETRY_ATTEMPTS);\n+    if (retryAttemptsHeader != null)\n+    {\n+      _serverRetryTracker.add(Integer.parseInt(retryAttemptsHeader));\n+    }\n+  }\n+\n+  /**\n+   * Stores the number of requests categorized by number of retry attempts. It uses the information to estimate\n+   * a ratio of how many requests are being retried in the cluster. The ratio is then compared with\n+   * {@link ServerRetryTracker#_maxRequestRetryRatio} to make a decision on whether or not to retry in the\n+   * next interval. When calculating the ratio, it looks at the last {@link ServerRetryTracker#_aggregatedIntervalNum}\n+   * intervals by aggregating the recorded requests.\n+   */\n+  private static class ServerRetryTracker\n+  {\n+    private final int _retryLimit;\n+    private final int _aggregatedIntervalNum;\n+    private final double _maxRequestRetryRatio;\n+    private final long _updateIntervalMs;\n+    private final Clock _clock;\n+\n+    private final Object _counterLock = new Object();\n+    private final Object _updateLock = new Object();\n+\n+    @GuardedBy(\"_updateLock\")\n+    private volatile long _lastRollOverTime;\n+    private boolean _isBelowRetryRatio;\n+\n+    @GuardedBy(\"_counterLock\")\n+    private final LinkedList<int[]> _retryAttemptsCounter;\n+    private final int[] _aggregatedRetryAttemptsCounter;\n+\n+    private ServerRetryTracker(int retryLimit, int aggregatedIntervalNum, double maxRequestRetryRatio, long updateIntervalMs, Clock clock)\n+    {\n+      _retryLimit = retryLimit;\n+      _aggregatedIntervalNum = aggregatedIntervalNum;\n+      _maxRequestRetryRatio = maxRequestRetryRatio;\n+      _updateIntervalMs = updateIntervalMs;\n+      _clock = clock;\n+\n+      _aggregatedRetryAttemptsCounter = new int[_retryLimit + 1];\n+      _retryAttemptsCounter = new LinkedList<>();\n+      _retryAttemptsCounter.add(new int[_retryLimit + 1]);\n+    }\n+\n+    public void add(int numberOfRetryAttempts)\n+    {\n+      if (numberOfRetryAttempts <= _retryLimit)\n+      {\n+        synchronized (_counterLock)\n+        {\n+          _retryAttemptsCounter.getLast()[numberOfRetryAttempts] += 1;\n+        }\n+      } else\n+      {\n+        LOG.warn(\"Unexpected number of retry attempts: \" + numberOfRetryAttempts + \", current retry limit: \" + _retryLimit);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ4MjA0Ng=="}, "originalCommit": {"oid": "543f3a0fb1badcec4ad15fe263df3e9b6e954ec8"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkxNDA0Nw==", "bodyText": "Fixed by treating it as the retry limit max. The server side limit is used only for tracking now. One reason for the server to still handle the request above the limit is that it already defines through TransportClientProperties the max ratio of retry request a client could send. I think it's reasonable to let the client decide the per-request retry limit.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r542914047", "createdAt": "2020-12-14T23:12:07Z", "author": {"login": "rickzx"}, "path": "r2-core/src/main/java/com/linkedin/r2/filter/transport/ServerRetryFilter.java", "diffHunk": "@@ -75,13 +116,160 @@ public void onStreamError(Throwable ex,\n       if (cause instanceof RetriableRequestException)\n       {\n         String message = cause.getMessage();\n-        LOG.debug(\"RetriableRequestException caught! Error message: {}\", message);\n-        wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        if (_serverRetryTracker.isBelowRetryRatio())\n+        {\n+          LOG.debug(\"RetriableRequestException caught! Do retry. Error message: {}\", message);\n+          wireAttrs.put(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY, message);\n+        }\n+        else\n+        {\n+          LOG.debug(\"Max request retry ratio exceeded! Will not retry. Error message: {}\", message);\n+          wireAttrs.remove(R2Constants.RETRY_MESSAGE_ATTRIBUTE_KEY);\n+        }\n         break;\n       }\n       cause = cause.getCause();\n     }\n \n     nextFilter.onError(ex, requestContext, wireAttrs);\n   }\n+\n+  private void updateRetryTracker(Request req)\n+  {\n+    String retryAttemptsHeader = req.getHeader(HttpConstants.HEADER_NUMBER_OF_RETRY_ATTEMPTS);\n+    if (retryAttemptsHeader != null)\n+    {\n+      _serverRetryTracker.add(Integer.parseInt(retryAttemptsHeader));\n+    }\n+  }\n+\n+  /**\n+   * Stores the number of requests categorized by number of retry attempts. It uses the information to estimate\n+   * a ratio of how many requests are being retried in the cluster. The ratio is then compared with\n+   * {@link ServerRetryTracker#_maxRequestRetryRatio} to make a decision on whether or not to retry in the\n+   * next interval. When calculating the ratio, it looks at the last {@link ServerRetryTracker#_aggregatedIntervalNum}\n+   * intervals by aggregating the recorded requests.\n+   */\n+  private static class ServerRetryTracker\n+  {\n+    private final int _retryLimit;\n+    private final int _aggregatedIntervalNum;\n+    private final double _maxRequestRetryRatio;\n+    private final long _updateIntervalMs;\n+    private final Clock _clock;\n+\n+    private final Object _counterLock = new Object();\n+    private final Object _updateLock = new Object();\n+\n+    @GuardedBy(\"_updateLock\")\n+    private volatile long _lastRollOverTime;\n+    private boolean _isBelowRetryRatio;\n+\n+    @GuardedBy(\"_counterLock\")\n+    private final LinkedList<int[]> _retryAttemptsCounter;\n+    private final int[] _aggregatedRetryAttemptsCounter;\n+\n+    private ServerRetryTracker(int retryLimit, int aggregatedIntervalNum, double maxRequestRetryRatio, long updateIntervalMs, Clock clock)\n+    {\n+      _retryLimit = retryLimit;\n+      _aggregatedIntervalNum = aggregatedIntervalNum;\n+      _maxRequestRetryRatio = maxRequestRetryRatio;\n+      _updateIntervalMs = updateIntervalMs;\n+      _clock = clock;\n+\n+      _aggregatedRetryAttemptsCounter = new int[_retryLimit + 1];\n+      _retryAttemptsCounter = new LinkedList<>();\n+      _retryAttemptsCounter.add(new int[_retryLimit + 1]);\n+    }\n+\n+    public void add(int numberOfRetryAttempts)\n+    {\n+      if (numberOfRetryAttempts <= _retryLimit)\n+      {\n+        synchronized (_counterLock)\n+        {\n+          _retryAttemptsCounter.getLast()[numberOfRetryAttempts] += 1;\n+        }\n+      } else\n+      {\n+        LOG.warn(\"Unexpected number of retry attempts: \" + numberOfRetryAttempts + \", current retry limit: \" + _retryLimit);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ4MjA0Ng=="}, "originalCommit": {"oid": "543f3a0fb1badcec4ad15fe263df3e9b6e954ec8"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzMxNTY0OnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODowNDoyOVrOIDWdOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwNDoyNzo0OVrOIEaaTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM4NDU3MQ==", "bodyText": "When you get the _transportClientProperties in async manner, you will not immediately obtain the value. After you invoke _balancer.getLoadBalancedServiceProperties asynchronously, I think when you execute to line 312, for sure it will be null, we should notify a callback instead.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r540384571", "createdAt": "2020-12-10T18:04:29Z", "author": {"login": "rachelhanhan"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -231,12 +296,43 @@ public void onError(Throwable e)\n           }\n           else\n           {\n+            double maxClientRequestRetryRatio;\n+            _balancer.getLoadBalancedServiceProperties(_serviceName, new Callback<ServiceProperties>() {\n+              @Override\n+              public void onError(Throwable e) {\n+                LOG.warn(\"Failed to fetch transportClientProperties \", e);\n+              }\n+\n+              @Override\n+              public void onSuccess(ServiceProperties result) {\n+                _transportClientProperties = result.getTransportClientProperties();\n+              }\n+            });\n+\n+            if (_transportClientProperties == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "180dc7f6631ec3375e02cefc68e39f7f723877be"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ5NzkzNA==", "bodyText": "Fixed. Make isBelowRetryRatio an async call as well.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r541497934", "createdAt": "2020-12-12T04:27:49Z", "author": {"login": "rickzx"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -231,12 +296,43 @@ public void onError(Throwable e)\n           }\n           else\n           {\n+            double maxClientRequestRetryRatio;\n+            _balancer.getLoadBalancedServiceProperties(_serviceName, new Callback<ServiceProperties>() {\n+              @Override\n+              public void onError(Throwable e) {\n+                LOG.warn(\"Failed to fetch transportClientProperties \", e);\n+              }\n+\n+              @Override\n+              public void onSuccess(ServiceProperties result) {\n+                _transportClientProperties = result.getTransportClientProperties();\n+              }\n+            });\n+\n+            if (_transportClientProperties == null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM4NDU3MQ=="}, "originalCommit": {"oid": "180dc7f6631ec3375e02cefc68e39f7f723877be"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzM3MTI5OnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODoxNzoxMlrOIDW-Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwNDoyODowMlrOIEaaWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5MzAxOA==", "bodyText": "I feel using int[2] to track total count and retry count is a bit implicit without java docs, can we use a new data structure to represent the count?", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r540393018", "createdAt": "2020-12-10T18:17:12Z", "author": {"login": "rachelhanhan"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -254,16 +350,134 @@ public void onError(Throwable e)\n \n     private boolean isRetryException(Throwable e)\n     {\n-      return ExceptionUtils.indexOfType(e, RetriableRequestException.class) != -1;\n+      Throwable[] throwables = ExceptionUtils.getThrowables(e);\n+\n+      for (Throwable throwable: throwables)\n+      {\n+        if (throwable instanceof RetriableRequestException)\n+        {\n+          return !((RetriableRequestException) throwable).getDoNotRetryOverride();\n+        }\n+      }\n+\n+      return false;\n     }\n \n     /**\n      * Retries a specific request.\n      *\n      * @param request Request to retry.\n      * @param context Context of the retry request.\n+     * @param numberOfRetryAttempts Number of retry attempts.\n      * @return {@code true} if a request can be retried; {@code false} otherwise;\n      */\n-    public abstract boolean doRetryRequest(REQ request, RequestContext context);\n+    public abstract boolean doRetryRequest(REQ request, RequestContext context, int numberOfRetryAttempts);\n+  }\n+\n+  @ThreadSafe\n+  private static class ClientRetryTracker\n+  {\n+    private static final int COUNTER_TOTAL_COUNT_INDEX = 0;\n+    private static final int COUNTER_RETRY_COUNT_INDEX = 1;\n+\n+    private final int _aggregatedIntervalNum;\n+    private final long _updateIntervalMs;\n+    private final Clock _clock;\n+\n+    private final Object _counterLock = new Object();\n+    private final Object _updateLock = new Object();\n+\n+    @GuardedBy(\"_updateLock\")\n+    private volatile long _lastRollOverTime;\n+    private double _currentAggregatedRetryRatio;\n+\n+    @GuardedBy(\"_counterLock\")\n+    private final LinkedList<int[]> _retryCounter;\n+    private final int[] _aggregatedRetryCounter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "180dc7f6631ec3375e02cefc68e39f7f723877be"}, "originalPosition": 290}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ5Nzk0Nw==", "bodyText": "Fixed. Added a RetryCounter impl.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r541497947", "createdAt": "2020-12-12T04:28:02Z", "author": {"login": "rickzx"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -254,16 +350,134 @@ public void onError(Throwable e)\n \n     private boolean isRetryException(Throwable e)\n     {\n-      return ExceptionUtils.indexOfType(e, RetriableRequestException.class) != -1;\n+      Throwable[] throwables = ExceptionUtils.getThrowables(e);\n+\n+      for (Throwable throwable: throwables)\n+      {\n+        if (throwable instanceof RetriableRequestException)\n+        {\n+          return !((RetriableRequestException) throwable).getDoNotRetryOverride();\n+        }\n+      }\n+\n+      return false;\n     }\n \n     /**\n      * Retries a specific request.\n      *\n      * @param request Request to retry.\n      * @param context Context of the retry request.\n+     * @param numberOfRetryAttempts Number of retry attempts.\n      * @return {@code true} if a request can be retried; {@code false} otherwise;\n      */\n-    public abstract boolean doRetryRequest(REQ request, RequestContext context);\n+    public abstract boolean doRetryRequest(REQ request, RequestContext context, int numberOfRetryAttempts);\n+  }\n+\n+  @ThreadSafe\n+  private static class ClientRetryTracker\n+  {\n+    private static final int COUNTER_TOTAL_COUNT_INDEX = 0;\n+    private static final int COUNTER_RETRY_COUNT_INDEX = 1;\n+\n+    private final int _aggregatedIntervalNum;\n+    private final long _updateIntervalMs;\n+    private final Clock _clock;\n+\n+    private final Object _counterLock = new Object();\n+    private final Object _updateLock = new Object();\n+\n+    @GuardedBy(\"_updateLock\")\n+    private volatile long _lastRollOverTime;\n+    private double _currentAggregatedRetryRatio;\n+\n+    @GuardedBy(\"_counterLock\")\n+    private final LinkedList<int[]> _retryCounter;\n+    private final int[] _aggregatedRetryCounter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5MzAxOA=="}, "originalCommit": {"oid": "180dc7f6631ec3375e02cefc68e39f7f723877be"}, "originalPosition": 290}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzUyODY1OnYy", "diffSide": "RIGHT", "path": "r2-core/src/main/java/com/linkedin/r2/util/ServerRetryTracker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODo1NDozOVrOIDYb1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwNDoyODoxMFrOIEaaYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQxNjk4Mg==", "bodyText": "Wondering why isn't this line under the counterlock?", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r540416982", "createdAt": "2020-12-10T18:54:39Z", "author": {"login": "rachelhanhan"}, "path": "r2-core/src/main/java/com/linkedin/r2/util/ServerRetryTracker.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.r2.util;\n+\n+import com.linkedin.util.clock.Clock;\n+import java.util.LinkedList;\n+import org.checkerframework.checker.lock.qual.GuardedBy;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Stores the number of requests categorized by number of retry attempts. It uses the information to estimate\n+ * a ratio of how many requests are being retried in the cluster. The ratio is then compared with\n+ * {@link ServerRetryTracker#_maxRequestRetryRatio} to make a decision on whether or not to retry in the\n+ * next interval. When calculating the ratio, it looks at the last {@link ServerRetryTracker#_aggregatedIntervalNum}\n+ * intervals by aggregating the recorded requests.\n+ */\n+public class ServerRetryTracker\n+{\n+  private static final Logger LOG = LoggerFactory.getLogger(ServerRetryTracker.class);\n+  private final int _retryLimit;\n+  private final int _aggregatedIntervalNum;\n+  private final double _maxRequestRetryRatio;\n+  private final long _updateIntervalMs;\n+  private final Clock _clock;\n+\n+  private final Object _counterLock = new Object();\n+  private final Object _updateLock = new Object();\n+\n+  @GuardedBy(\"_updateLock\")\n+  private volatile long _lastRollOverTime;\n+  private boolean _isBelowRetryRatio;\n+\n+  @GuardedBy(\"_counterLock\")\n+  private final LinkedList<int[]> _retryAttemptsCounter;\n+  private final int[] _aggregatedRetryAttemptsCounter;\n+\n+  public ServerRetryTracker(int retryLimit, int aggregatedIntervalNum, double maxRequestRetryRatio, long updateIntervalMs, Clock clock)\n+  {\n+    _retryLimit = retryLimit;\n+    _aggregatedIntervalNum = aggregatedIntervalNum;\n+    _maxRequestRetryRatio = maxRequestRetryRatio;\n+    _updateIntervalMs = updateIntervalMs;\n+    _clock = clock;\n+\n+    _lastRollOverTime = clock.currentTimeMillis();\n+    _isBelowRetryRatio = true;\n+\n+    _aggregatedRetryAttemptsCounter = new int[_retryLimit + 1];\n+    _retryAttemptsCounter = new LinkedList<>();\n+    _retryAttemptsCounter.add(new int[_retryLimit + 1]);\n+  }\n+\n+  public void add(int numberOfRetryAttempts)\n+  {\n+    if (numberOfRetryAttempts <= _retryLimit)\n+    {\n+      synchronized (_counterLock)\n+      {\n+        _retryAttemptsCounter.getLast()[numberOfRetryAttempts] += 1;\n+      }\n+    } else\n+    {\n+      LOG.warn(\"Unexpected number of retry attempts: \" + numberOfRetryAttempts + \", current retry limit: \" + _retryLimit);\n+      _retryAttemptsCounter.getLast()[_retryLimit] += 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "180dc7f6631ec3375e02cefc68e39f7f723877be"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ5Nzk1NA==", "bodyText": "Good catch. Fixed", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r541497954", "createdAt": "2020-12-12T04:28:10Z", "author": {"login": "rickzx"}, "path": "r2-core/src/main/java/com/linkedin/r2/util/ServerRetryTracker.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.r2.util;\n+\n+import com.linkedin.util.clock.Clock;\n+import java.util.LinkedList;\n+import org.checkerframework.checker.lock.qual.GuardedBy;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Stores the number of requests categorized by number of retry attempts. It uses the information to estimate\n+ * a ratio of how many requests are being retried in the cluster. The ratio is then compared with\n+ * {@link ServerRetryTracker#_maxRequestRetryRatio} to make a decision on whether or not to retry in the\n+ * next interval. When calculating the ratio, it looks at the last {@link ServerRetryTracker#_aggregatedIntervalNum}\n+ * intervals by aggregating the recorded requests.\n+ */\n+public class ServerRetryTracker\n+{\n+  private static final Logger LOG = LoggerFactory.getLogger(ServerRetryTracker.class);\n+  private final int _retryLimit;\n+  private final int _aggregatedIntervalNum;\n+  private final double _maxRequestRetryRatio;\n+  private final long _updateIntervalMs;\n+  private final Clock _clock;\n+\n+  private final Object _counterLock = new Object();\n+  private final Object _updateLock = new Object();\n+\n+  @GuardedBy(\"_updateLock\")\n+  private volatile long _lastRollOverTime;\n+  private boolean _isBelowRetryRatio;\n+\n+  @GuardedBy(\"_counterLock\")\n+  private final LinkedList<int[]> _retryAttemptsCounter;\n+  private final int[] _aggregatedRetryAttemptsCounter;\n+\n+  public ServerRetryTracker(int retryLimit, int aggregatedIntervalNum, double maxRequestRetryRatio, long updateIntervalMs, Clock clock)\n+  {\n+    _retryLimit = retryLimit;\n+    _aggregatedIntervalNum = aggregatedIntervalNum;\n+    _maxRequestRetryRatio = maxRequestRetryRatio;\n+    _updateIntervalMs = updateIntervalMs;\n+    _clock = clock;\n+\n+    _lastRollOverTime = clock.currentTimeMillis();\n+    _isBelowRetryRatio = true;\n+\n+    _aggregatedRetryAttemptsCounter = new int[_retryLimit + 1];\n+    _retryAttemptsCounter = new LinkedList<>();\n+    _retryAttemptsCounter.add(new int[_retryLimit + 1]);\n+  }\n+\n+  public void add(int numberOfRetryAttempts)\n+  {\n+    if (numberOfRetryAttempts <= _retryLimit)\n+    {\n+      synchronized (_counterLock)\n+      {\n+        _retryAttemptsCounter.getLast()[numberOfRetryAttempts] += 1;\n+      }\n+    } else\n+    {\n+      LOG.warn(\"Unexpected number of retry attempts: \" + numberOfRetryAttempts + \", current retry limit: \" + _retryLimit);\n+      _retryAttemptsCounter.getLast()[_retryLimit] += 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQxNjk4Mg=="}, "originalCommit": {"oid": "180dc7f6631ec3375e02cefc68e39f7f723877be"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTE5ODcxOnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODoyNTowMVrOIFeTmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMzowMjo0NVrOIFweoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYxMDMzMA==", "bodyText": "minor: this line seems redundant", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r542610330", "createdAt": "2020-12-14T18:25:01Z", "author": {"login": "rachelhanhan"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -254,16 +338,201 @@ public void onError(Throwable e)\n \n     private boolean isRetryException(Throwable e)\n     {\n-      return ExceptionUtils.indexOfType(e, RetriableRequestException.class) != -1;\n+      Throwable[] throwables = ExceptionUtils.getThrowables(e);\n+\n+      for (Throwable throwable: throwables)\n+      {\n+        if (throwable instanceof RetriableRequestException)\n+        {\n+          return !((RetriableRequestException) throwable).getDoNotRetryOverride();\n+        }\n+      }\n+\n+      return false;\n     }\n \n     /**\n      * Retries a specific request.\n      *\n      * @param request Request to retry.\n      * @param context Context of the retry request.\n+     * @param numberOfRetryAttempts Number of retry attempts.\n      * @return {@code true} if a request can be retried; {@code false} otherwise;\n      */\n-    public abstract boolean doRetryRequest(REQ request, RequestContext context);\n+    public abstract boolean doRetryRequest(REQ request, RequestContext context, int numberOfRetryAttempts);\n+  }\n+\n+  @ThreadSafe\n+  private class ClientRetryTracker\n+  {\n+    private final int _aggregatedIntervalNum;\n+    private final long _updateIntervalMs;\n+    private final Clock _clock;\n+    private final String _serviceName;\n+\n+    private final Object _counterLock = new Object();\n+    private final Object _updateLock = new Object();\n+\n+    @GuardedBy(\"_updateLock\")\n+    private volatile long _lastRollOverTime;\n+    private double _currentAggregatedRetryRatio;\n+\n+    @GuardedBy(\"_counterLock\")\n+    private final LinkedList<RetryCounter> _retryCounter;\n+    private final RetryCounter _aggregatedRetryCounter;\n+\n+    private ClientRetryTracker(int aggregatedIntervalNum, long updateIntervalMs, Clock clock, String serviceName)\n+    {\n+      _aggregatedIntervalNum = aggregatedIntervalNum;\n+      _updateIntervalMs = updateIntervalMs;\n+      _clock = clock;\n+      _serviceName = serviceName;\n+\n+      _lastRollOverTime = clock.currentTimeMillis();\n+      _currentAggregatedRetryRatio = 0;\n+\n+      _aggregatedRetryCounter = new RetryCounter();\n+      _retryCounter = new LinkedList<>();\n+      _retryCounter.add(new RetryCounter());\n+    }\n+\n+    public void add(boolean isRetry)\n+    {\n+      synchronized (_counterLock)\n+      {\n+        if (isRetry)\n+        {\n+          _retryCounter.getLast().addToRetryRequestCount(1);\n+        }\n+\n+        _retryCounter.getLast().addToTotalRequestCount(1);\n+      }\n+      updateRetryDecision();\n+    }\n+\n+    public void rollOverStats()\n+    {\n+      // rollover the current interval to the aggregated counter\n+      synchronized (_counterLock)\n+      {\n+        RetryCounter intervalToAggregate = _retryCounter.getLast();\n+        _aggregatedRetryCounter.addToTotalRequestCount(intervalToAggregate.getTotalRequestCount());\n+        _aggregatedRetryCounter.addToRetryRequestCount(intervalToAggregate.getRetryRequestCount());\n+\n+        if (_retryCounter.size() > _aggregatedIntervalNum)\n+        {\n+          // discard the oldest interval\n+          RetryCounter intervalToDiscard = _retryCounter.removeFirst();\n+          _aggregatedRetryCounter.subtractFromTotalRequestCount(intervalToDiscard.getTotalRequestCount());\n+          _aggregatedRetryCounter.subtractFromRetryRequestCount(intervalToDiscard.getRetryRequestCount());;\n+        }\n+\n+        // append a new interval\n+        _retryCounter.addLast(new RetryCounter());\n+      }\n+    }\n+\n+    public void isBelowRetryRatio(SuccessCallback<Boolean> callback)\n+    {\n+      _balancer.getLoadBalancedServiceProperties(_serviceName, new Callback<ServiceProperties>()\n+      {\n+        @Override\n+        public void onError(Throwable e)\n+        {\n+          LOG.warn(\"Failed to fetch transportClientProperties \", e);\n+          double maxClientRequestRetryRatio = HttpClientFactory.DEFAULT_MAX_CLIENT_REQUEST_RETRY_RATIO;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "daeaece4e560b0c27feaa4a62404cdf7700fa0d5"}, "originalPosition": 334}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkwODA2NQ==", "bodyText": "Fixed", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r542908065", "createdAt": "2020-12-14T23:02:45Z", "author": {"login": "rickzx"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -254,16 +338,201 @@ public void onError(Throwable e)\n \n     private boolean isRetryException(Throwable e)\n     {\n-      return ExceptionUtils.indexOfType(e, RetriableRequestException.class) != -1;\n+      Throwable[] throwables = ExceptionUtils.getThrowables(e);\n+\n+      for (Throwable throwable: throwables)\n+      {\n+        if (throwable instanceof RetriableRequestException)\n+        {\n+          return !((RetriableRequestException) throwable).getDoNotRetryOverride();\n+        }\n+      }\n+\n+      return false;\n     }\n \n     /**\n      * Retries a specific request.\n      *\n      * @param request Request to retry.\n      * @param context Context of the retry request.\n+     * @param numberOfRetryAttempts Number of retry attempts.\n      * @return {@code true} if a request can be retried; {@code false} otherwise;\n      */\n-    public abstract boolean doRetryRequest(REQ request, RequestContext context);\n+    public abstract boolean doRetryRequest(REQ request, RequestContext context, int numberOfRetryAttempts);\n+  }\n+\n+  @ThreadSafe\n+  private class ClientRetryTracker\n+  {\n+    private final int _aggregatedIntervalNum;\n+    private final long _updateIntervalMs;\n+    private final Clock _clock;\n+    private final String _serviceName;\n+\n+    private final Object _counterLock = new Object();\n+    private final Object _updateLock = new Object();\n+\n+    @GuardedBy(\"_updateLock\")\n+    private volatile long _lastRollOverTime;\n+    private double _currentAggregatedRetryRatio;\n+\n+    @GuardedBy(\"_counterLock\")\n+    private final LinkedList<RetryCounter> _retryCounter;\n+    private final RetryCounter _aggregatedRetryCounter;\n+\n+    private ClientRetryTracker(int aggregatedIntervalNum, long updateIntervalMs, Clock clock, String serviceName)\n+    {\n+      _aggregatedIntervalNum = aggregatedIntervalNum;\n+      _updateIntervalMs = updateIntervalMs;\n+      _clock = clock;\n+      _serviceName = serviceName;\n+\n+      _lastRollOverTime = clock.currentTimeMillis();\n+      _currentAggregatedRetryRatio = 0;\n+\n+      _aggregatedRetryCounter = new RetryCounter();\n+      _retryCounter = new LinkedList<>();\n+      _retryCounter.add(new RetryCounter());\n+    }\n+\n+    public void add(boolean isRetry)\n+    {\n+      synchronized (_counterLock)\n+      {\n+        if (isRetry)\n+        {\n+          _retryCounter.getLast().addToRetryRequestCount(1);\n+        }\n+\n+        _retryCounter.getLast().addToTotalRequestCount(1);\n+      }\n+      updateRetryDecision();\n+    }\n+\n+    public void rollOverStats()\n+    {\n+      // rollover the current interval to the aggregated counter\n+      synchronized (_counterLock)\n+      {\n+        RetryCounter intervalToAggregate = _retryCounter.getLast();\n+        _aggregatedRetryCounter.addToTotalRequestCount(intervalToAggregate.getTotalRequestCount());\n+        _aggregatedRetryCounter.addToRetryRequestCount(intervalToAggregate.getRetryRequestCount());\n+\n+        if (_retryCounter.size() > _aggregatedIntervalNum)\n+        {\n+          // discard the oldest interval\n+          RetryCounter intervalToDiscard = _retryCounter.removeFirst();\n+          _aggregatedRetryCounter.subtractFromTotalRequestCount(intervalToDiscard.getTotalRequestCount());\n+          _aggregatedRetryCounter.subtractFromRetryRequestCount(intervalToDiscard.getRetryRequestCount());;\n+        }\n+\n+        // append a new interval\n+        _retryCounter.addLast(new RetryCounter());\n+      }\n+    }\n+\n+    public void isBelowRetryRatio(SuccessCallback<Boolean> callback)\n+    {\n+      _balancer.getLoadBalancedServiceProperties(_serviceName, new Callback<ServiceProperties>()\n+      {\n+        @Override\n+        public void onError(Throwable e)\n+        {\n+          LOG.warn(\"Failed to fetch transportClientProperties \", e);\n+          double maxClientRequestRetryRatio = HttpClientFactory.DEFAULT_MAX_CLIENT_REQUEST_RETRY_RATIO;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYxMDMzMA=="}, "originalCommit": {"oid": "daeaece4e560b0c27feaa4a62404cdf7700fa0d5"}, "originalPosition": 334}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTIyMTk3OnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODoyODoxMFrOIFeiRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMzowNjo0NlrOIFwsIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYxNDA4Nw==", "bodyText": "Minor: if you always operate on total and retry count together, maybe you can merge these 2 lines into 2 method? Will leave the decision to you", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r542614087", "createdAt": "2020-12-14T18:28:10Z", "author": {"login": "rachelhanhan"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -254,16 +338,201 @@ public void onError(Throwable e)\n \n     private boolean isRetryException(Throwable e)\n     {\n-      return ExceptionUtils.indexOfType(e, RetriableRequestException.class) != -1;\n+      Throwable[] throwables = ExceptionUtils.getThrowables(e);\n+\n+      for (Throwable throwable: throwables)\n+      {\n+        if (throwable instanceof RetriableRequestException)\n+        {\n+          return !((RetriableRequestException) throwable).getDoNotRetryOverride();\n+        }\n+      }\n+\n+      return false;\n     }\n \n     /**\n      * Retries a specific request.\n      *\n      * @param request Request to retry.\n      * @param context Context of the retry request.\n+     * @param numberOfRetryAttempts Number of retry attempts.\n      * @return {@code true} if a request can be retried; {@code false} otherwise;\n      */\n-    public abstract boolean doRetryRequest(REQ request, RequestContext context);\n+    public abstract boolean doRetryRequest(REQ request, RequestContext context, int numberOfRetryAttempts);\n+  }\n+\n+  @ThreadSafe\n+  private class ClientRetryTracker\n+  {\n+    private final int _aggregatedIntervalNum;\n+    private final long _updateIntervalMs;\n+    private final Clock _clock;\n+    private final String _serviceName;\n+\n+    private final Object _counterLock = new Object();\n+    private final Object _updateLock = new Object();\n+\n+    @GuardedBy(\"_updateLock\")\n+    private volatile long _lastRollOverTime;\n+    private double _currentAggregatedRetryRatio;\n+\n+    @GuardedBy(\"_counterLock\")\n+    private final LinkedList<RetryCounter> _retryCounter;\n+    private final RetryCounter _aggregatedRetryCounter;\n+\n+    private ClientRetryTracker(int aggregatedIntervalNum, long updateIntervalMs, Clock clock, String serviceName)\n+    {\n+      _aggregatedIntervalNum = aggregatedIntervalNum;\n+      _updateIntervalMs = updateIntervalMs;\n+      _clock = clock;\n+      _serviceName = serviceName;\n+\n+      _lastRollOverTime = clock.currentTimeMillis();\n+      _currentAggregatedRetryRatio = 0;\n+\n+      _aggregatedRetryCounter = new RetryCounter();\n+      _retryCounter = new LinkedList<>();\n+      _retryCounter.add(new RetryCounter());\n+    }\n+\n+    public void add(boolean isRetry)\n+    {\n+      synchronized (_counterLock)\n+      {\n+        if (isRetry)\n+        {\n+          _retryCounter.getLast().addToRetryRequestCount(1);\n+        }\n+\n+        _retryCounter.getLast().addToTotalRequestCount(1);\n+      }\n+      updateRetryDecision();\n+    }\n+\n+    public void rollOverStats()\n+    {\n+      // rollover the current interval to the aggregated counter\n+      synchronized (_counterLock)\n+      {\n+        RetryCounter intervalToAggregate = _retryCounter.getLast();\n+        _aggregatedRetryCounter.addToTotalRequestCount(intervalToAggregate.getTotalRequestCount());\n+        _aggregatedRetryCounter.addToRetryRequestCount(intervalToAggregate.getRetryRequestCount());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "daeaece4e560b0c27feaa4a62404cdf7700fa0d5"}, "originalPosition": 311}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkxMTUyMg==", "bodyText": "I feel like the current API of RetryCounter is clearer by separating out total request with retry request. Here I need to call the two methods separately https://github.com/linkedin/rest.li/pull/484/files#diff-fb1d5cedc2fd04937e39f9188139915da2a2ae4aa9c736de7503973cc85c4b6eR419", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r542911522", "createdAt": "2020-12-14T23:06:46Z", "author": {"login": "rickzx"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -254,16 +338,201 @@ public void onError(Throwable e)\n \n     private boolean isRetryException(Throwable e)\n     {\n-      return ExceptionUtils.indexOfType(e, RetriableRequestException.class) != -1;\n+      Throwable[] throwables = ExceptionUtils.getThrowables(e);\n+\n+      for (Throwable throwable: throwables)\n+      {\n+        if (throwable instanceof RetriableRequestException)\n+        {\n+          return !((RetriableRequestException) throwable).getDoNotRetryOverride();\n+        }\n+      }\n+\n+      return false;\n     }\n \n     /**\n      * Retries a specific request.\n      *\n      * @param request Request to retry.\n      * @param context Context of the retry request.\n+     * @param numberOfRetryAttempts Number of retry attempts.\n      * @return {@code true} if a request can be retried; {@code false} otherwise;\n      */\n-    public abstract boolean doRetryRequest(REQ request, RequestContext context);\n+    public abstract boolean doRetryRequest(REQ request, RequestContext context, int numberOfRetryAttempts);\n+  }\n+\n+  @ThreadSafe\n+  private class ClientRetryTracker\n+  {\n+    private final int _aggregatedIntervalNum;\n+    private final long _updateIntervalMs;\n+    private final Clock _clock;\n+    private final String _serviceName;\n+\n+    private final Object _counterLock = new Object();\n+    private final Object _updateLock = new Object();\n+\n+    @GuardedBy(\"_updateLock\")\n+    private volatile long _lastRollOverTime;\n+    private double _currentAggregatedRetryRatio;\n+\n+    @GuardedBy(\"_counterLock\")\n+    private final LinkedList<RetryCounter> _retryCounter;\n+    private final RetryCounter _aggregatedRetryCounter;\n+\n+    private ClientRetryTracker(int aggregatedIntervalNum, long updateIntervalMs, Clock clock, String serviceName)\n+    {\n+      _aggregatedIntervalNum = aggregatedIntervalNum;\n+      _updateIntervalMs = updateIntervalMs;\n+      _clock = clock;\n+      _serviceName = serviceName;\n+\n+      _lastRollOverTime = clock.currentTimeMillis();\n+      _currentAggregatedRetryRatio = 0;\n+\n+      _aggregatedRetryCounter = new RetryCounter();\n+      _retryCounter = new LinkedList<>();\n+      _retryCounter.add(new RetryCounter());\n+    }\n+\n+    public void add(boolean isRetry)\n+    {\n+      synchronized (_counterLock)\n+      {\n+        if (isRetry)\n+        {\n+          _retryCounter.getLast().addToRetryRequestCount(1);\n+        }\n+\n+        _retryCounter.getLast().addToTotalRequestCount(1);\n+      }\n+      updateRetryDecision();\n+    }\n+\n+    public void rollOverStats()\n+    {\n+      // rollover the current interval to the aggregated counter\n+      synchronized (_counterLock)\n+      {\n+        RetryCounter intervalToAggregate = _retryCounter.getLast();\n+        _aggregatedRetryCounter.addToTotalRequestCount(intervalToAggregate.getTotalRequestCount());\n+        _aggregatedRetryCounter.addToRetryRequestCount(intervalToAggregate.getRetryRequestCount());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYxNDA4Nw=="}, "originalCommit": {"oid": "daeaece4e560b0c27feaa4a62404cdf7700fa0d5"}, "originalPosition": 311}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjkxNzIxOnYy", "diffSide": "RIGHT", "path": "d2-schemas/src/main/pegasus/com/linkedin/d2/D2TransportClientProperties.pdl", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOToxNzozN1rOIGAs8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODoyMDo0MFrOIGZbtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE3Mzg3Mw==", "bodyText": "The code is setting a default of 0.2 for this, any reason why it cannot be added in the schema?", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r543173873", "createdAt": "2020-12-15T09:17:37Z", "author": {"login": "karthikbalasub"}, "path": "d2-schemas/src/main/pegasus/com/linkedin/d2/D2TransportClientProperties.pdl", "diffHunk": "@@ -141,4 +141,9 @@ record D2TransportClientProperties {\n      */\n     HTTP_2\n   }\n+\n+  /**\n+   * Maximum ratio of retry requests to total requests per client\n+   */\n+  maxClientRequestRetryRatio: optional double", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "227c34372ba4d107eb7028dbeaa79e3f8f58a5ef"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU3OTA2Mw==", "bodyText": "As with other D2 config properties defined in the schema, the default value is defined in two places: in Pegasus factory and in global d2.src config. So the default value can then be easily discovered by D2 config services (e.g. d2-config-service, maestro), and also be tuned easily if needed. We don't wan't to define it directly in the schema because it creates an additional source of truth of the default value.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r543579063", "createdAt": "2020-12-15T18:20:40Z", "author": {"login": "rickzx"}, "path": "d2-schemas/src/main/pegasus/com/linkedin/d2/D2TransportClientProperties.pdl", "diffHunk": "@@ -141,4 +141,9 @@ record D2TransportClientProperties {\n      */\n     HTTP_2\n   }\n+\n+  /**\n+   * Maximum ratio of retry requests to total requests per client\n+   */\n+  maxClientRequestRetryRatio: optional double", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE3Mzg3Mw=="}, "originalCommit": {"oid": "227c34372ba4d107eb7028dbeaa79e3f8f58a5ef"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjkxOTE4OnYy", "diffSide": "RIGHT", "path": "d2-schemas/src/main/pegasus/com/linkedin/d2/D2TransportClientProperties.pdl", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOToxODowM1rOIGAuGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODoyNzo0OVrOIGZuug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE3NDE3MQ==", "bodyText": "Is this config applicable only when retry is enabled? If so, please document that here.\nAlso why are other retry configs (retry, retryLimit, Interval) etc not part of the client properties?", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r543174171", "createdAt": "2020-12-15T09:18:03Z", "author": {"login": "karthikbalasub"}, "path": "d2-schemas/src/main/pegasus/com/linkedin/d2/D2TransportClientProperties.pdl", "diffHunk": "@@ -141,4 +141,9 @@ record D2TransportClientProperties {\n      */\n     HTTP_2\n   }\n+\n+  /**\n+   * Maximum ratio of retry requests to total requests per client", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "227c34372ba4d107eb7028dbeaa79e3f8f58a5ef"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU4MzkzMA==", "bodyText": "Updated the documentation:\n/**\n\nService desired maximum ratio of retry requests to total requests per client. The retry ratio is applied\nonly when D2 RetryClient is enabled.\n*/\n\nBecause the other retry configs (retry, retryLimit, updateInterval) are defined on the client-side, in application.cfg. But maxClientRequestRetryRatio is a service-desired property, which is defined on the server-side and pass to the client via zookeeper.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r543583930", "createdAt": "2020-12-15T18:27:49Z", "author": {"login": "rickzx"}, "path": "d2-schemas/src/main/pegasus/com/linkedin/d2/D2TransportClientProperties.pdl", "diffHunk": "@@ -141,4 +141,9 @@ record D2TransportClientProperties {\n      */\n     HTTP_2\n   }\n+\n+  /**\n+   * Maximum ratio of retry requests to total requests per client", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE3NDE3MQ=="}, "originalCommit": {"oid": "227c34372ba4d107eb7028dbeaa79e3f8f58a5ef"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjU0MDcyOnYy", "diffSide": "RIGHT", "path": "r2-core/src/main/java/com/linkedin/r2/util/ServerRetryTracker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMTo1OTo1MlrOIGh5BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMjo1NTo1NVrOIGqp6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcxNzYzNg==", "bodyText": "Really minor, but I'd suggest reworking this to avoid duplicating the increment logic and making the intention clearer:\nif (numAttempts > _retryLimit) {\n  LOG.warn(...)\n  numAttempts = _retryLimit;\n}\n... // synchronize/increment logic", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r543717636", "createdAt": "2020-12-15T21:59:52Z", "author": {"login": "bbarkley"}, "path": "r2-core/src/main/java/com/linkedin/r2/util/ServerRetryTracker.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.r2.util;\n+\n+import com.linkedin.util.clock.Clock;\n+import java.util.LinkedList;\n+import org.checkerframework.checker.lock.qual.GuardedBy;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Stores the number of requests categorized by number of retry attempts. It uses the information to estimate\n+ * a ratio of how many requests are being retried in the cluster. The ratio is then compared with\n+ * {@link ServerRetryTracker#_maxRequestRetryRatio} to make a decision on whether or not to retry in the\n+ * next interval. When calculating the ratio, it looks at the last {@link ServerRetryTracker#_aggregatedIntervalNum}\n+ * intervals by aggregating the recorded requests.\n+ */\n+public class ServerRetryTracker\n+{\n+  private static final Logger LOG = LoggerFactory.getLogger(ServerRetryTracker.class);\n+  private final int _retryLimit;\n+  private final int _aggregatedIntervalNum;\n+  private final double _maxRequestRetryRatio;\n+  private final long _updateIntervalMs;\n+  private final Clock _clock;\n+\n+  private final Object _counterLock = new Object();\n+  private final Object _updateLock = new Object();\n+\n+  @GuardedBy(\"_updateLock\")\n+  private volatile long _lastRollOverTime;\n+  private boolean _isBelowRetryRatio;\n+\n+  @GuardedBy(\"_counterLock\")\n+  private final LinkedList<int[]> _retryAttemptsCounter;\n+  private final int[] _aggregatedRetryAttemptsCounter;\n+\n+  public ServerRetryTracker(int retryLimit, int aggregatedIntervalNum, double maxRequestRetryRatio, long updateIntervalMs, Clock clock)\n+  {\n+    _retryLimit = retryLimit;\n+    _aggregatedIntervalNum = aggregatedIntervalNum;\n+    _maxRequestRetryRatio = maxRequestRetryRatio;\n+    _updateIntervalMs = updateIntervalMs;\n+    _clock = clock;\n+\n+    _lastRollOverTime = clock.currentTimeMillis();\n+    _isBelowRetryRatio = true;\n+\n+    _aggregatedRetryAttemptsCounter = new int[_retryLimit + 1];\n+    _retryAttemptsCounter = new LinkedList<>();\n+    _retryAttemptsCounter.add(new int[_retryLimit + 1]);\n+  }\n+\n+  public void add(int numberOfRetryAttempts)\n+  {\n+    if (numberOfRetryAttempts <= _retryLimit)\n+    {\n+      synchronized (_counterLock)\n+      {\n+        _retryAttemptsCounter.getLast()[numberOfRetryAttempts] += 1;\n+      }\n+    } else\n+    {\n+      LOG.warn(\"Unexpected number of retry attempts: \" + numberOfRetryAttempts + \", current retry limit: \" + _retryLimit);\n+      synchronized (_counterLock)\n+      {\n+        _retryAttemptsCounter.getLast()[_retryLimit] += 1;\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "227c34372ba4d107eb7028dbeaa79e3f8f58a5ef"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg2MTIyNQ==", "bodyText": "Fixed", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r543861225", "createdAt": "2020-12-16T02:55:55Z", "author": {"login": "rickzx"}, "path": "r2-core/src/main/java/com/linkedin/r2/util/ServerRetryTracker.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.r2.util;\n+\n+import com.linkedin.util.clock.Clock;\n+import java.util.LinkedList;\n+import org.checkerframework.checker.lock.qual.GuardedBy;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Stores the number of requests categorized by number of retry attempts. It uses the information to estimate\n+ * a ratio of how many requests are being retried in the cluster. The ratio is then compared with\n+ * {@link ServerRetryTracker#_maxRequestRetryRatio} to make a decision on whether or not to retry in the\n+ * next interval. When calculating the ratio, it looks at the last {@link ServerRetryTracker#_aggregatedIntervalNum}\n+ * intervals by aggregating the recorded requests.\n+ */\n+public class ServerRetryTracker\n+{\n+  private static final Logger LOG = LoggerFactory.getLogger(ServerRetryTracker.class);\n+  private final int _retryLimit;\n+  private final int _aggregatedIntervalNum;\n+  private final double _maxRequestRetryRatio;\n+  private final long _updateIntervalMs;\n+  private final Clock _clock;\n+\n+  private final Object _counterLock = new Object();\n+  private final Object _updateLock = new Object();\n+\n+  @GuardedBy(\"_updateLock\")\n+  private volatile long _lastRollOverTime;\n+  private boolean _isBelowRetryRatio;\n+\n+  @GuardedBy(\"_counterLock\")\n+  private final LinkedList<int[]> _retryAttemptsCounter;\n+  private final int[] _aggregatedRetryAttemptsCounter;\n+\n+  public ServerRetryTracker(int retryLimit, int aggregatedIntervalNum, double maxRequestRetryRatio, long updateIntervalMs, Clock clock)\n+  {\n+    _retryLimit = retryLimit;\n+    _aggregatedIntervalNum = aggregatedIntervalNum;\n+    _maxRequestRetryRatio = maxRequestRetryRatio;\n+    _updateIntervalMs = updateIntervalMs;\n+    _clock = clock;\n+\n+    _lastRollOverTime = clock.currentTimeMillis();\n+    _isBelowRetryRatio = true;\n+\n+    _aggregatedRetryAttemptsCounter = new int[_retryLimit + 1];\n+    _retryAttemptsCounter = new LinkedList<>();\n+    _retryAttemptsCounter.add(new int[_retryLimit + 1]);\n+  }\n+\n+  public void add(int numberOfRetryAttempts)\n+  {\n+    if (numberOfRetryAttempts <= _retryLimit)\n+    {\n+      synchronized (_counterLock)\n+      {\n+        _retryAttemptsCounter.getLast()[numberOfRetryAttempts] += 1;\n+      }\n+    } else\n+    {\n+      LOG.warn(\"Unexpected number of retry attempts: \" + numberOfRetryAttempts + \", current retry limit: \" + _retryLimit);\n+      synchronized (_counterLock)\n+      {\n+        _retryAttemptsCounter.getLast()[_retryLimit] += 1;\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcxNzYzNg=="}, "originalCommit": {"oid": "227c34372ba4d107eb7028dbeaa79e3f8f58a5ef"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjY0MjEwOnYy", "diffSide": "RIGHT", "path": "r2-core/src/test/java/com/linkedin/r2/util/TestServerRetryTracker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjoyNjo1NlrOIGizeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMjo1NjowNVrOIGqqbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzczMjYwMQ==", "bodyText": "Can you also add some simple tests covering retry limits of 0 and 1?", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r543732601", "createdAt": "2020-12-15T22:26:56Z", "author": {"login": "bbarkley"}, "path": "r2-core/src/test/java/com/linkedin/r2/util/TestServerRetryTracker.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.r2.util;\n+\n+import com.linkedin.r2.filter.transport.ServerRetryFilter;\n+import com.linkedin.util.clock.SettableClock;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestServerRetryTracker\n+{\n+  private ServerRetryTracker _serverRetryTracker;\n+  private SettableClock _clock;\n+\n+  @BeforeMethod\n+  public void setUp()\n+  {\n+    _clock = new SettableClock();\n+    _serverRetryTracker = new ServerRetryTracker(ServerRetryFilter.DEFAULT_RETRY_LIMIT,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "227c34372ba4d107eb7028dbeaa79e3f8f58a5ef"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg2MTM1Nw==", "bodyText": "Added", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r543861357", "createdAt": "2020-12-16T02:56:05Z", "author": {"login": "rickzx"}, "path": "r2-core/src/test/java/com/linkedin/r2/util/TestServerRetryTracker.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.r2.util;\n+\n+import com.linkedin.r2.filter.transport.ServerRetryFilter;\n+import com.linkedin.util.clock.SettableClock;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestServerRetryTracker\n+{\n+  private ServerRetryTracker _serverRetryTracker;\n+  private SettableClock _clock;\n+\n+  @BeforeMethod\n+  public void setUp()\n+  {\n+    _clock = new SettableClock();\n+    _serverRetryTracker = new ServerRetryTracker(ServerRetryFilter.DEFAULT_RETRY_LIMIT,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzczMjYwMQ=="}, "originalCommit": {"oid": "227c34372ba4d107eb7028dbeaa79e3f8f58a5ef"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjY2ODExOnYy", "diffSide": "RIGHT", "path": "r2-core/src/test/java/com/linkedin/r2/util/TestServerRetryTracker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjozNDozMlrOIGjC2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMjo1Nzo1MVrOIGqwTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzczNjUzNw==", "bodyText": "This test is doing a LOT. With unit tests it's best to write small focused tests that exercise one condition/scenario/code path, which makes it easier to understand the purpose of the test as well as often making it easier to track down what is breaking (if one large test is failing but there are actually three asserts that are failing it's less obvious than three separate tests failing).\nI'd suggest pulling the multiple window scenarios into separate tests at least.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r543736537", "createdAt": "2020-12-15T22:34:32Z", "author": {"login": "bbarkley"}, "path": "r2-core/src/test/java/com/linkedin/r2/util/TestServerRetryTracker.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.r2.util;\n+\n+import com.linkedin.r2.filter.transport.ServerRetryFilter;\n+import com.linkedin.util.clock.SettableClock;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestServerRetryTracker\n+{\n+  private ServerRetryTracker _serverRetryTracker;\n+  private SettableClock _clock;\n+\n+  @BeforeMethod\n+  public void setUp()\n+  {\n+    _clock = new SettableClock();\n+    _serverRetryTracker = new ServerRetryTracker(ServerRetryFilter.DEFAULT_RETRY_LIMIT,\n+        ServerRetryFilter.DEFAULT_AGGREGATED_INTERVAL_NUM, ServerRetryFilter.DEFAULT_MAX_REQUEST_RETRY_RATIO,\n+        ServerRetryFilter.DEFAULT_UPDATE_INTERVAL_MS, _clock);\n+  }\n+\n+  @Test\n+  public void testEmptyServerRetryTracker()\n+  {\n+    for (int i = 0; i < 10; i++)\n+    {\n+      Assert.assertTrue(_serverRetryTracker.isBelowRetryRatio());\n+      Assert.assertEquals(_serverRetryTracker.getRetryRatio(),0.0, 0.0001);\n+      _clock.addDuration(ServerRetryFilter.DEFAULT_UPDATE_INTERVAL_MS);\n+    }\n+  }\n+\n+  @Test\n+  public void testServerRetryTracker()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "227c34372ba4d107eb7028dbeaa79e3f8f58a5ef"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg2Mjg2Mw==", "bodyText": "It's kind of hard to separate out the multiple window scenarios because it builds upon the single window case. After separating it out in the latest commit, the test case is still pretty lengthy.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r543862863", "createdAt": "2020-12-16T02:57:51Z", "author": {"login": "rickzx"}, "path": "r2-core/src/test/java/com/linkedin/r2/util/TestServerRetryTracker.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.r2.util;\n+\n+import com.linkedin.r2.filter.transport.ServerRetryFilter;\n+import com.linkedin.util.clock.SettableClock;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestServerRetryTracker\n+{\n+  private ServerRetryTracker _serverRetryTracker;\n+  private SettableClock _clock;\n+\n+  @BeforeMethod\n+  public void setUp()\n+  {\n+    _clock = new SettableClock();\n+    _serverRetryTracker = new ServerRetryTracker(ServerRetryFilter.DEFAULT_RETRY_LIMIT,\n+        ServerRetryFilter.DEFAULT_AGGREGATED_INTERVAL_NUM, ServerRetryFilter.DEFAULT_MAX_REQUEST_RETRY_RATIO,\n+        ServerRetryFilter.DEFAULT_UPDATE_INTERVAL_MS, _clock);\n+  }\n+\n+  @Test\n+  public void testEmptyServerRetryTracker()\n+  {\n+    for (int i = 0; i < 10; i++)\n+    {\n+      Assert.assertTrue(_serverRetryTracker.isBelowRetryRatio());\n+      Assert.assertEquals(_serverRetryTracker.getRetryRatio(),0.0, 0.0001);\n+      _clock.addDuration(ServerRetryFilter.DEFAULT_UPDATE_INTERVAL_MS);\n+    }\n+  }\n+\n+  @Test\n+  public void testServerRetryTracker()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzczNjUzNw=="}, "originalCommit": {"oid": "227c34372ba4d107eb7028dbeaa79e3f8f58a5ef"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjY3Mzc3OnYy", "diffSide": "RIGHT", "path": "r2-core/src/main/java/com/linkedin/r2/util/ServerRetryTracker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjozNjoxM1rOIGjGLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMjo1Nzo1OVrOIGqwxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzczNzM4OA==", "bodyText": "I didn't see this covered in the test cases - probably worth adding.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r543737388", "createdAt": "2020-12-15T22:36:13Z", "author": {"login": "bbarkley"}, "path": "r2-core/src/main/java/com/linkedin/r2/util/ServerRetryTracker.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.r2.util;\n+\n+import com.linkedin.util.clock.Clock;\n+import java.util.LinkedList;\n+import org.checkerframework.checker.lock.qual.GuardedBy;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Stores the number of requests categorized by number of retry attempts. It uses the information to estimate\n+ * a ratio of how many requests are being retried in the cluster. The ratio is then compared with\n+ * {@link ServerRetryTracker#_maxRequestRetryRatio} to make a decision on whether or not to retry in the\n+ * next interval. When calculating the ratio, it looks at the last {@link ServerRetryTracker#_aggregatedIntervalNum}\n+ * intervals by aggregating the recorded requests.\n+ */\n+public class ServerRetryTracker\n+{\n+  private static final Logger LOG = LoggerFactory.getLogger(ServerRetryTracker.class);\n+  private final int _retryLimit;\n+  private final int _aggregatedIntervalNum;\n+  private final double _maxRequestRetryRatio;\n+  private final long _updateIntervalMs;\n+  private final Clock _clock;\n+\n+  private final Object _counterLock = new Object();\n+  private final Object _updateLock = new Object();\n+\n+  @GuardedBy(\"_updateLock\")\n+  private volatile long _lastRollOverTime;\n+  private boolean _isBelowRetryRatio;\n+\n+  @GuardedBy(\"_counterLock\")\n+  private final LinkedList<int[]> _retryAttemptsCounter;\n+  private final int[] _aggregatedRetryAttemptsCounter;\n+\n+  public ServerRetryTracker(int retryLimit, int aggregatedIntervalNum, double maxRequestRetryRatio, long updateIntervalMs, Clock clock)\n+  {\n+    _retryLimit = retryLimit;\n+    _aggregatedIntervalNum = aggregatedIntervalNum;\n+    _maxRequestRetryRatio = maxRequestRetryRatio;\n+    _updateIntervalMs = updateIntervalMs;\n+    _clock = clock;\n+\n+    _lastRollOverTime = clock.currentTimeMillis();\n+    _isBelowRetryRatio = true;\n+\n+    _aggregatedRetryAttemptsCounter = new int[_retryLimit + 1];\n+    _retryAttemptsCounter = new LinkedList<>();\n+    _retryAttemptsCounter.add(new int[_retryLimit + 1]);\n+  }\n+\n+  public void add(int numberOfRetryAttempts)\n+  {\n+    if (numberOfRetryAttempts <= _retryLimit)\n+    {\n+      synchronized (_counterLock)\n+      {\n+        _retryAttemptsCounter.getLast()[numberOfRetryAttempts] += 1;\n+      }\n+    } else\n+    {\n+      LOG.warn(\"Unexpected number of retry attempts: \" + numberOfRetryAttempts + \", current retry limit: \" + _retryLimit);\n+      synchronized (_counterLock)\n+      {\n+        _retryAttemptsCounter.getLast()[_retryLimit] += 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "227c34372ba4d107eb7028dbeaa79e3f8f58a5ef"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg2Mjk4MQ==", "bodyText": "Added", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r543862981", "createdAt": "2020-12-16T02:57:59Z", "author": {"login": "rickzx"}, "path": "r2-core/src/main/java/com/linkedin/r2/util/ServerRetryTracker.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.r2.util;\n+\n+import com.linkedin.util.clock.Clock;\n+import java.util.LinkedList;\n+import org.checkerframework.checker.lock.qual.GuardedBy;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Stores the number of requests categorized by number of retry attempts. It uses the information to estimate\n+ * a ratio of how many requests are being retried in the cluster. The ratio is then compared with\n+ * {@link ServerRetryTracker#_maxRequestRetryRatio} to make a decision on whether or not to retry in the\n+ * next interval. When calculating the ratio, it looks at the last {@link ServerRetryTracker#_aggregatedIntervalNum}\n+ * intervals by aggregating the recorded requests.\n+ */\n+public class ServerRetryTracker\n+{\n+  private static final Logger LOG = LoggerFactory.getLogger(ServerRetryTracker.class);\n+  private final int _retryLimit;\n+  private final int _aggregatedIntervalNum;\n+  private final double _maxRequestRetryRatio;\n+  private final long _updateIntervalMs;\n+  private final Clock _clock;\n+\n+  private final Object _counterLock = new Object();\n+  private final Object _updateLock = new Object();\n+\n+  @GuardedBy(\"_updateLock\")\n+  private volatile long _lastRollOverTime;\n+  private boolean _isBelowRetryRatio;\n+\n+  @GuardedBy(\"_counterLock\")\n+  private final LinkedList<int[]> _retryAttemptsCounter;\n+  private final int[] _aggregatedRetryAttemptsCounter;\n+\n+  public ServerRetryTracker(int retryLimit, int aggregatedIntervalNum, double maxRequestRetryRatio, long updateIntervalMs, Clock clock)\n+  {\n+    _retryLimit = retryLimit;\n+    _aggregatedIntervalNum = aggregatedIntervalNum;\n+    _maxRequestRetryRatio = maxRequestRetryRatio;\n+    _updateIntervalMs = updateIntervalMs;\n+    _clock = clock;\n+\n+    _lastRollOverTime = clock.currentTimeMillis();\n+    _isBelowRetryRatio = true;\n+\n+    _aggregatedRetryAttemptsCounter = new int[_retryLimit + 1];\n+    _retryAttemptsCounter = new LinkedList<>();\n+    _retryAttemptsCounter.add(new int[_retryLimit + 1]);\n+  }\n+\n+  public void add(int numberOfRetryAttempts)\n+  {\n+    if (numberOfRetryAttempts <= _retryLimit)\n+    {\n+      synchronized (_counterLock)\n+      {\n+        _retryAttemptsCounter.getLast()[numberOfRetryAttempts] += 1;\n+      }\n+    } else\n+    {\n+      LOG.warn(\"Unexpected number of retry attempts: \" + numberOfRetryAttempts + \", current retry limit: \" + _retryLimit);\n+      synchronized (_counterLock)\n+      {\n+        _retryAttemptsCounter.getLast()[_retryLimit] += 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzczNzM4OA=="}, "originalCommit": {"oid": "227c34372ba4d107eb7028dbeaa79e3f8f58a5ef"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzgyMTg1OnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMDo1NzoxMFrOIIIfbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwODozNTowNVrOIIYGEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM5ODYzNg==", "bodyText": "Probably want to use computeIfAbsent here - otherwise the tracker will be created each time even if it's not needed.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r545398636", "createdAt": "2020-12-17T20:57:10Z", "author": {"login": "bbarkley"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -108,8 +148,21 @@ public void streamRequest(StreamRequest request, Callback<StreamResponse> callba\n   @Override\n   public void streamRequest(StreamRequest request, RequestContext requestContext, Callback<StreamResponse> callback)\n   {\n-    final Callback<StreamResponse> transportCallback = new StreamRetryRequestCallback(request, requestContext, callback);\n-    _d2Client.streamRequest(request, requestContext, transportCallback);\n+    StreamRequest newRequest = request.builder()\n+        .addHeaderValue(HttpConstants.HEADER_NUMBER_OF_RETRY_ATTEMPTS, \"0\")\n+        .build(request.getEntityStream());\n+    ClientRetryTracker retryTracker = updateRetryTracker(newRequest.getURI(), false);\n+    final Callback<StreamResponse> transportCallback = new StreamRetryRequestCallback(newRequest, requestContext, callback, retryTracker);\n+    _d2Client.streamRequest(newRequest, requestContext, transportCallback);\n+  }\n+\n+  private ClientRetryTracker updateRetryTracker(URI uri, boolean isRetry)\n+  {\n+    String serviceName = LoadBalancerUtil.getServiceNameFromUri(uri);\n+    _retryTrackerMap.putIfAbsent(serviceName, new ClientRetryTracker(_aggregatedIntervalNum, _updateIntervalMs, _clock, serviceName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1f9f26799106bb12de486b173645518b16a9c1b"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTY1NDI4OQ==", "bodyText": "Thanks for pointing this out. Good to learn that computeIfAbsent takes a mapping function so the Tracker object will not be created unless needed.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r545654289", "createdAt": "2020-12-18T08:35:05Z", "author": {"login": "rickzx"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -108,8 +148,21 @@ public void streamRequest(StreamRequest request, Callback<StreamResponse> callba\n   @Override\n   public void streamRequest(StreamRequest request, RequestContext requestContext, Callback<StreamResponse> callback)\n   {\n-    final Callback<StreamResponse> transportCallback = new StreamRetryRequestCallback(request, requestContext, callback);\n-    _d2Client.streamRequest(request, requestContext, transportCallback);\n+    StreamRequest newRequest = request.builder()\n+        .addHeaderValue(HttpConstants.HEADER_NUMBER_OF_RETRY_ATTEMPTS, \"0\")\n+        .build(request.getEntityStream());\n+    ClientRetryTracker retryTracker = updateRetryTracker(newRequest.getURI(), false);\n+    final Callback<StreamResponse> transportCallback = new StreamRetryRequestCallback(newRequest, requestContext, callback, retryTracker);\n+    _d2Client.streamRequest(newRequest, requestContext, transportCallback);\n+  }\n+\n+  private ClientRetryTracker updateRetryTracker(URI uri, boolean isRetry)\n+  {\n+    String serviceName = LoadBalancerUtil.getServiceNameFromUri(uri);\n+    _retryTrackerMap.putIfAbsent(serviceName, new ClientRetryTracker(_aggregatedIntervalNum, _updateIntervalMs, _clock, serviceName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM5ODYzNg=="}, "originalCommit": {"oid": "b1f9f26799106bb12de486b173645518b16a9c1b"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTA5NjM0OnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNToyNzoyMVrOIITn9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwODozNToxMFrOIIYGgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU4MTA0Ng==", "bodyText": "Minor: if the _updateLock is guarding it there should be a separate annotation for it", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r545581046", "createdAt": "2020-12-18T05:27:21Z", "author": {"login": "bbarkley"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -254,16 +334,200 @@ public void onError(Throwable e)\n \n     private boolean isRetryException(Throwable e)\n     {\n-      return ExceptionUtils.indexOfType(e, RetriableRequestException.class) != -1;\n+      Throwable[] throwables = ExceptionUtils.getThrowables(e);\n+\n+      for (Throwable throwable: throwables)\n+      {\n+        if (throwable instanceof RetriableRequestException)\n+        {\n+          return !((RetriableRequestException) throwable).getDoNotRetryOverride();\n+        }\n+      }\n+\n+      return false;\n     }\n \n     /**\n      * Retries a specific request.\n      *\n      * @param request Request to retry.\n      * @param context Context of the retry request.\n+     * @param numberOfRetryAttempts Number of retry attempts.\n      * @return {@code true} if a request can be retried; {@code false} otherwise;\n      */\n-    public abstract boolean doRetryRequest(REQ request, RequestContext context);\n+    public abstract boolean doRetryRequest(REQ request, RequestContext context, int numberOfRetryAttempts);\n+  }\n+\n+  @ThreadSafe\n+  private class ClientRetryTracker\n+  {\n+    private final int _aggregatedIntervalNum;\n+    private final long _updateIntervalMs;\n+    private final Clock _clock;\n+    private final String _serviceName;\n+\n+    private final Object _counterLock = new Object();\n+    private final Object _updateLock = new Object();\n+\n+    @GuardedBy(\"_updateLock\")\n+    private volatile long _lastRollOverTime;\n+    private double _currentAggregatedRetryRatio;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1f9f26799106bb12de486b173645518b16a9c1b"}, "originalPosition": 274}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTY1NDQwMQ==", "bodyText": "Fixed", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r545654401", "createdAt": "2020-12-18T08:35:10Z", "author": {"login": "rickzx"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -254,16 +334,200 @@ public void onError(Throwable e)\n \n     private boolean isRetryException(Throwable e)\n     {\n-      return ExceptionUtils.indexOfType(e, RetriableRequestException.class) != -1;\n+      Throwable[] throwables = ExceptionUtils.getThrowables(e);\n+\n+      for (Throwable throwable: throwables)\n+      {\n+        if (throwable instanceof RetriableRequestException)\n+        {\n+          return !((RetriableRequestException) throwable).getDoNotRetryOverride();\n+        }\n+      }\n+\n+      return false;\n     }\n \n     /**\n      * Retries a specific request.\n      *\n      * @param request Request to retry.\n      * @param context Context of the retry request.\n+     * @param numberOfRetryAttempts Number of retry attempts.\n      * @return {@code true} if a request can be retried; {@code false} otherwise;\n      */\n-    public abstract boolean doRetryRequest(REQ request, RequestContext context);\n+    public abstract boolean doRetryRequest(REQ request, RequestContext context, int numberOfRetryAttempts);\n+  }\n+\n+  @ThreadSafe\n+  private class ClientRetryTracker\n+  {\n+    private final int _aggregatedIntervalNum;\n+    private final long _updateIntervalMs;\n+    private final Clock _clock;\n+    private final String _serviceName;\n+\n+    private final Object _counterLock = new Object();\n+    private final Object _updateLock = new Object();\n+\n+    @GuardedBy(\"_updateLock\")\n+    private volatile long _lastRollOverTime;\n+    private double _currentAggregatedRetryRatio;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU4MTA0Ng=="}, "originalCommit": {"oid": "b1f9f26799106bb12de486b173645518b16a9c1b"}, "originalPosition": 274}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTA5NzQ0OnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNToyNzo0NVrOIITogg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwODozNToxNVrOIIYG8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU4MTE4Ng==", "bodyText": "Same as above - additional annotation if the lock protects this", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r545581186", "createdAt": "2020-12-18T05:27:45Z", "author": {"login": "bbarkley"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -254,16 +334,200 @@ public void onError(Throwable e)\n \n     private boolean isRetryException(Throwable e)\n     {\n-      return ExceptionUtils.indexOfType(e, RetriableRequestException.class) != -1;\n+      Throwable[] throwables = ExceptionUtils.getThrowables(e);\n+\n+      for (Throwable throwable: throwables)\n+      {\n+        if (throwable instanceof RetriableRequestException)\n+        {\n+          return !((RetriableRequestException) throwable).getDoNotRetryOverride();\n+        }\n+      }\n+\n+      return false;\n     }\n \n     /**\n      * Retries a specific request.\n      *\n      * @param request Request to retry.\n      * @param context Context of the retry request.\n+     * @param numberOfRetryAttempts Number of retry attempts.\n      * @return {@code true} if a request can be retried; {@code false} otherwise;\n      */\n-    public abstract boolean doRetryRequest(REQ request, RequestContext context);\n+    public abstract boolean doRetryRequest(REQ request, RequestContext context, int numberOfRetryAttempts);\n+  }\n+\n+  @ThreadSafe\n+  private class ClientRetryTracker\n+  {\n+    private final int _aggregatedIntervalNum;\n+    private final long _updateIntervalMs;\n+    private final Clock _clock;\n+    private final String _serviceName;\n+\n+    private final Object _counterLock = new Object();\n+    private final Object _updateLock = new Object();\n+\n+    @GuardedBy(\"_updateLock\")\n+    private volatile long _lastRollOverTime;\n+    private double _currentAggregatedRetryRatio;\n+\n+    @GuardedBy(\"_counterLock\")\n+    private final LinkedList<RetryCounter> _retryCounter;\n+    private final RetryCounter _aggregatedRetryCounter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1f9f26799106bb12de486b173645518b16a9c1b"}, "originalPosition": 278}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTY1NDUxMw==", "bodyText": "Fixed", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r545654513", "createdAt": "2020-12-18T08:35:15Z", "author": {"login": "rickzx"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -254,16 +334,200 @@ public void onError(Throwable e)\n \n     private boolean isRetryException(Throwable e)\n     {\n-      return ExceptionUtils.indexOfType(e, RetriableRequestException.class) != -1;\n+      Throwable[] throwables = ExceptionUtils.getThrowables(e);\n+\n+      for (Throwable throwable: throwables)\n+      {\n+        if (throwable instanceof RetriableRequestException)\n+        {\n+          return !((RetriableRequestException) throwable).getDoNotRetryOverride();\n+        }\n+      }\n+\n+      return false;\n     }\n \n     /**\n      * Retries a specific request.\n      *\n      * @param request Request to retry.\n      * @param context Context of the retry request.\n+     * @param numberOfRetryAttempts Number of retry attempts.\n      * @return {@code true} if a request can be retried; {@code false} otherwise;\n      */\n-    public abstract boolean doRetryRequest(REQ request, RequestContext context);\n+    public abstract boolean doRetryRequest(REQ request, RequestContext context, int numberOfRetryAttempts);\n+  }\n+\n+  @ThreadSafe\n+  private class ClientRetryTracker\n+  {\n+    private final int _aggregatedIntervalNum;\n+    private final long _updateIntervalMs;\n+    private final Clock _clock;\n+    private final String _serviceName;\n+\n+    private final Object _counterLock = new Object();\n+    private final Object _updateLock = new Object();\n+\n+    @GuardedBy(\"_updateLock\")\n+    private volatile long _lastRollOverTime;\n+    private double _currentAggregatedRetryRatio;\n+\n+    @GuardedBy(\"_counterLock\")\n+    private final LinkedList<RetryCounter> _retryCounter;\n+    private final RetryCounter _aggregatedRetryCounter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU4MTE4Ng=="}, "originalCommit": {"oid": "b1f9f26799106bb12de486b173645518b16a9c1b"}, "originalPosition": 278}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTEyMDkxOnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNTozOTowN1rOIIT1Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzo0MTozMVrOIIsaDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU4NDQzMA==", "bodyText": "Is this making a call out to something like ZK to get this data? If so doing this on each invocation that could add a lot of latency. Ideally the result would be cached with some TTL (or maybe just fetched once the first time - do we expect this to change in ZK?).", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r545584430", "createdAt": "2020-12-18T05:39:07Z", "author": {"login": "bbarkley"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -254,16 +334,200 @@ public void onError(Throwable e)\n \n     private boolean isRetryException(Throwable e)\n     {\n-      return ExceptionUtils.indexOfType(e, RetriableRequestException.class) != -1;\n+      Throwable[] throwables = ExceptionUtils.getThrowables(e);\n+\n+      for (Throwable throwable: throwables)\n+      {\n+        if (throwable instanceof RetriableRequestException)\n+        {\n+          return !((RetriableRequestException) throwable).getDoNotRetryOverride();\n+        }\n+      }\n+\n+      return false;\n     }\n \n     /**\n      * Retries a specific request.\n      *\n      * @param request Request to retry.\n      * @param context Context of the retry request.\n+     * @param numberOfRetryAttempts Number of retry attempts.\n      * @return {@code true} if a request can be retried; {@code false} otherwise;\n      */\n-    public abstract boolean doRetryRequest(REQ request, RequestContext context);\n+    public abstract boolean doRetryRequest(REQ request, RequestContext context, int numberOfRetryAttempts);\n+  }\n+\n+  @ThreadSafe\n+  private class ClientRetryTracker\n+  {\n+    private final int _aggregatedIntervalNum;\n+    private final long _updateIntervalMs;\n+    private final Clock _clock;\n+    private final String _serviceName;\n+\n+    private final Object _counterLock = new Object();\n+    private final Object _updateLock = new Object();\n+\n+    @GuardedBy(\"_updateLock\")\n+    private volatile long _lastRollOverTime;\n+    private double _currentAggregatedRetryRatio;\n+\n+    @GuardedBy(\"_counterLock\")\n+    private final LinkedList<RetryCounter> _retryCounter;\n+    private final RetryCounter _aggregatedRetryCounter;\n+\n+    private ClientRetryTracker(int aggregatedIntervalNum, long updateIntervalMs, Clock clock, String serviceName)\n+    {\n+      _aggregatedIntervalNum = aggregatedIntervalNum;\n+      _updateIntervalMs = updateIntervalMs;\n+      _clock = clock;\n+      _serviceName = serviceName;\n+\n+      _lastRollOverTime = clock.currentTimeMillis();\n+      _currentAggregatedRetryRatio = 0;\n+\n+      _aggregatedRetryCounter = new RetryCounter();\n+      _retryCounter = new LinkedList<>();\n+      _retryCounter.add(new RetryCounter());\n+    }\n+\n+    public void add(boolean isRetry)\n+    {\n+      synchronized (_counterLock)\n+      {\n+        if (isRetry)\n+        {\n+          _retryCounter.getLast().addToRetryRequestCount(1);\n+        }\n+\n+        _retryCounter.getLast().addToTotalRequestCount(1);\n+      }\n+      updateRetryDecision();\n+    }\n+\n+    public void rollOverStats()\n+    {\n+      // rollover the current interval to the aggregated counter\n+      synchronized (_counterLock)\n+      {\n+        RetryCounter intervalToAggregate = _retryCounter.getLast();\n+        _aggregatedRetryCounter.addToTotalRequestCount(intervalToAggregate.getTotalRequestCount());\n+        _aggregatedRetryCounter.addToRetryRequestCount(intervalToAggregate.getRetryRequestCount());\n+\n+        if (_retryCounter.size() > _aggregatedIntervalNum)\n+        {\n+          // discard the oldest interval\n+          RetryCounter intervalToDiscard = _retryCounter.removeFirst();\n+          _aggregatedRetryCounter.subtractFromTotalRequestCount(intervalToDiscard.getTotalRequestCount());\n+          _aggregatedRetryCounter.subtractFromRetryRequestCount(intervalToDiscard.getRetryRequestCount());\n+        }\n+\n+        // append a new interval\n+        _retryCounter.addLast(new RetryCounter());\n+      }\n+    }\n+\n+    public void isBelowRetryRatio(SuccessCallback<Boolean> callback)\n+    {\n+      _balancer.getLoadBalancedServiceProperties(_serviceName, new Callback<ServiceProperties>()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1f9f26799106bb12de486b173645518b16a9c1b"}, "originalPosition": 333}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTY2NTcwOQ==", "bodyText": "It will only make a call to ZK the first time getting data from a downstream service. At the same time, it will also register a listener to ZK for property updates. The subsequent calls will just read from the local LoadBalancerState.", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r545665709", "createdAt": "2020-12-18T08:46:13Z", "author": {"login": "rickzx"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -254,16 +334,200 @@ public void onError(Throwable e)\n \n     private boolean isRetryException(Throwable e)\n     {\n-      return ExceptionUtils.indexOfType(e, RetriableRequestException.class) != -1;\n+      Throwable[] throwables = ExceptionUtils.getThrowables(e);\n+\n+      for (Throwable throwable: throwables)\n+      {\n+        if (throwable instanceof RetriableRequestException)\n+        {\n+          return !((RetriableRequestException) throwable).getDoNotRetryOverride();\n+        }\n+      }\n+\n+      return false;\n     }\n \n     /**\n      * Retries a specific request.\n      *\n      * @param request Request to retry.\n      * @param context Context of the retry request.\n+     * @param numberOfRetryAttempts Number of retry attempts.\n      * @return {@code true} if a request can be retried; {@code false} otherwise;\n      */\n-    public abstract boolean doRetryRequest(REQ request, RequestContext context);\n+    public abstract boolean doRetryRequest(REQ request, RequestContext context, int numberOfRetryAttempts);\n+  }\n+\n+  @ThreadSafe\n+  private class ClientRetryTracker\n+  {\n+    private final int _aggregatedIntervalNum;\n+    private final long _updateIntervalMs;\n+    private final Clock _clock;\n+    private final String _serviceName;\n+\n+    private final Object _counterLock = new Object();\n+    private final Object _updateLock = new Object();\n+\n+    @GuardedBy(\"_updateLock\")\n+    private volatile long _lastRollOverTime;\n+    private double _currentAggregatedRetryRatio;\n+\n+    @GuardedBy(\"_counterLock\")\n+    private final LinkedList<RetryCounter> _retryCounter;\n+    private final RetryCounter _aggregatedRetryCounter;\n+\n+    private ClientRetryTracker(int aggregatedIntervalNum, long updateIntervalMs, Clock clock, String serviceName)\n+    {\n+      _aggregatedIntervalNum = aggregatedIntervalNum;\n+      _updateIntervalMs = updateIntervalMs;\n+      _clock = clock;\n+      _serviceName = serviceName;\n+\n+      _lastRollOverTime = clock.currentTimeMillis();\n+      _currentAggregatedRetryRatio = 0;\n+\n+      _aggregatedRetryCounter = new RetryCounter();\n+      _retryCounter = new LinkedList<>();\n+      _retryCounter.add(new RetryCounter());\n+    }\n+\n+    public void add(boolean isRetry)\n+    {\n+      synchronized (_counterLock)\n+      {\n+        if (isRetry)\n+        {\n+          _retryCounter.getLast().addToRetryRequestCount(1);\n+        }\n+\n+        _retryCounter.getLast().addToTotalRequestCount(1);\n+      }\n+      updateRetryDecision();\n+    }\n+\n+    public void rollOverStats()\n+    {\n+      // rollover the current interval to the aggregated counter\n+      synchronized (_counterLock)\n+      {\n+        RetryCounter intervalToAggregate = _retryCounter.getLast();\n+        _aggregatedRetryCounter.addToTotalRequestCount(intervalToAggregate.getTotalRequestCount());\n+        _aggregatedRetryCounter.addToRetryRequestCount(intervalToAggregate.getRetryRequestCount());\n+\n+        if (_retryCounter.size() > _aggregatedIntervalNum)\n+        {\n+          // discard the oldest interval\n+          RetryCounter intervalToDiscard = _retryCounter.removeFirst();\n+          _aggregatedRetryCounter.subtractFromTotalRequestCount(intervalToDiscard.getTotalRequestCount());\n+          _aggregatedRetryCounter.subtractFromRetryRequestCount(intervalToDiscard.getRetryRequestCount());\n+        }\n+\n+        // append a new interval\n+        _retryCounter.addLast(new RetryCounter());\n+      }\n+    }\n+\n+    public void isBelowRetryRatio(SuccessCallback<Boolean> callback)\n+    {\n+      _balancer.getLoadBalancedServiceProperties(_serviceName, new Callback<ServiceProperties>()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU4NDQzMA=="}, "originalCommit": {"oid": "b1f9f26799106bb12de486b173645518b16a9c1b"}, "originalPosition": 333}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk4NzA4Nw==", "bodyText": "Thanks for clarifying", "url": "https://github.com/linkedin/rest.li/pull/484#discussion_r545987087", "createdAt": "2020-12-18T17:41:31Z", "author": {"login": "bbarkley"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/RetryClient.java", "diffHunk": "@@ -254,16 +334,200 @@ public void onError(Throwable e)\n \n     private boolean isRetryException(Throwable e)\n     {\n-      return ExceptionUtils.indexOfType(e, RetriableRequestException.class) != -1;\n+      Throwable[] throwables = ExceptionUtils.getThrowables(e);\n+\n+      for (Throwable throwable: throwables)\n+      {\n+        if (throwable instanceof RetriableRequestException)\n+        {\n+          return !((RetriableRequestException) throwable).getDoNotRetryOverride();\n+        }\n+      }\n+\n+      return false;\n     }\n \n     /**\n      * Retries a specific request.\n      *\n      * @param request Request to retry.\n      * @param context Context of the retry request.\n+     * @param numberOfRetryAttempts Number of retry attempts.\n      * @return {@code true} if a request can be retried; {@code false} otherwise;\n      */\n-    public abstract boolean doRetryRequest(REQ request, RequestContext context);\n+    public abstract boolean doRetryRequest(REQ request, RequestContext context, int numberOfRetryAttempts);\n+  }\n+\n+  @ThreadSafe\n+  private class ClientRetryTracker\n+  {\n+    private final int _aggregatedIntervalNum;\n+    private final long _updateIntervalMs;\n+    private final Clock _clock;\n+    private final String _serviceName;\n+\n+    private final Object _counterLock = new Object();\n+    private final Object _updateLock = new Object();\n+\n+    @GuardedBy(\"_updateLock\")\n+    private volatile long _lastRollOverTime;\n+    private double _currentAggregatedRetryRatio;\n+\n+    @GuardedBy(\"_counterLock\")\n+    private final LinkedList<RetryCounter> _retryCounter;\n+    private final RetryCounter _aggregatedRetryCounter;\n+\n+    private ClientRetryTracker(int aggregatedIntervalNum, long updateIntervalMs, Clock clock, String serviceName)\n+    {\n+      _aggregatedIntervalNum = aggregatedIntervalNum;\n+      _updateIntervalMs = updateIntervalMs;\n+      _clock = clock;\n+      _serviceName = serviceName;\n+\n+      _lastRollOverTime = clock.currentTimeMillis();\n+      _currentAggregatedRetryRatio = 0;\n+\n+      _aggregatedRetryCounter = new RetryCounter();\n+      _retryCounter = new LinkedList<>();\n+      _retryCounter.add(new RetryCounter());\n+    }\n+\n+    public void add(boolean isRetry)\n+    {\n+      synchronized (_counterLock)\n+      {\n+        if (isRetry)\n+        {\n+          _retryCounter.getLast().addToRetryRequestCount(1);\n+        }\n+\n+        _retryCounter.getLast().addToTotalRequestCount(1);\n+      }\n+      updateRetryDecision();\n+    }\n+\n+    public void rollOverStats()\n+    {\n+      // rollover the current interval to the aggregated counter\n+      synchronized (_counterLock)\n+      {\n+        RetryCounter intervalToAggregate = _retryCounter.getLast();\n+        _aggregatedRetryCounter.addToTotalRequestCount(intervalToAggregate.getTotalRequestCount());\n+        _aggregatedRetryCounter.addToRetryRequestCount(intervalToAggregate.getRetryRequestCount());\n+\n+        if (_retryCounter.size() > _aggregatedIntervalNum)\n+        {\n+          // discard the oldest interval\n+          RetryCounter intervalToDiscard = _retryCounter.removeFirst();\n+          _aggregatedRetryCounter.subtractFromTotalRequestCount(intervalToDiscard.getTotalRequestCount());\n+          _aggregatedRetryCounter.subtractFromRetryRequestCount(intervalToDiscard.getRetryRequestCount());\n+        }\n+\n+        // append a new interval\n+        _retryCounter.addLast(new RetryCounter());\n+      }\n+    }\n+\n+    public void isBelowRetryRatio(SuccessCallback<Boolean> callback)\n+    {\n+      _balancer.getLoadBalancedServiceProperties(_serviceName, new Callback<ServiceProperties>()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU4NDQzMA=="}, "originalCommit": {"oid": "b1f9f26799106bb12de486b173645518b16a9c1b"}, "originalPosition": 333}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 279, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}