{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MTUwMTUw", "number": 356, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTowMzo0NFrOEVIQ2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMDoxNDozN1rOEVJwpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTkwOTM3OnYy", "diffSide": "RIGHT", "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTowMzo0NFrOG7tjkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMTowNTowOFrOG7xeTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2NTU1Mg==", "bodyText": "Can we make this backward compatible change by introducing an overloaded method?", "url": "https://github.com/linkedin/rest.li/pull/356#discussion_r465265552", "createdAt": "2020-08-04T19:03:44Z", "author": {"login": "nizarm"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -130,7 +130,7 @@ private static RestResponseBuilder encodeResult(String mimeType,\n     return builder;\n   }\n \n-  public static RestException buildRestException(RestLiResponseException restLiResponseException)\n+  public static RestException buildRestException(RestLiResponseException restLiResponseException, boolean writableStackTrace)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e691a625b7bc3084827cb772d7bb892224437be2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMyOTc0Mw==", "bodyText": "Thanks. Updated", "url": "https://github.com/linkedin/rest.li/pull/356#discussion_r465329743", "createdAt": "2020-08-04T21:05:08Z", "author": {"login": "xuli-in"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -130,7 +130,7 @@ private static RestResponseBuilder encodeResult(String mimeType,\n     return builder;\n   }\n \n-  public static RestException buildRestException(RestLiResponseException restLiResponseException)\n+  public static RestException buildRestException(RestLiResponseException restLiResponseException, boolean writableStackTrace)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2NTU1Mg=="}, "originalCommit": {"oid": "e691a625b7bc3084827cb772d7bb892224437be2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjE1NDYwOnYy", "diffSide": "RIGHT", "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMDoxNDozN1rOG7v6WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMToxMTo0OVrOG7xrGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMwNDE1Mg==", "bodyText": "Shouldn't the cause.toString() end up printing the entire stack trace? You probably just want to include the exception message for 'message' parameter (cause.getMessage())", "url": "https://github.com/linkedin/rest.li/pull/356#discussion_r465304152", "createdAt": "2020-08-04T20:14:37Z", "author": {"login": "nizarm"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -148,7 +148,8 @@ public static RestException buildRestException(RestLiResponseException restLiRes\n     }\n \n     RestResponse restResponse = responseBuilder.build();\n-    return new RestException(restResponse, restLiResponseException.getCause());\n+    Throwable cause = restLiResponseException.getCause();\n+    return new RestException(restResponse, cause==null ? null : cause.toString(), cause, writableStackTrace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e691a625b7bc3084827cb772d7bb892224437be2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMzMDU5MQ==", "bodyText": "public Throwable(Throwable cause) {\n    fillInStackTrace();\n    detailMessage = (cause==null ? null : cause.toString());\n    this.cause = cause;\n}\n\nI am thinking of keep the message the same as before and per throwable that is use cause.toString()", "url": "https://github.com/linkedin/rest.li/pull/356#discussion_r465330591", "createdAt": "2020-08-04T21:06:52Z", "author": {"login": "xuli-in"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -148,7 +148,8 @@ public static RestException buildRestException(RestLiResponseException restLiRes\n     }\n \n     RestResponse restResponse = responseBuilder.build();\n-    return new RestException(restResponse, restLiResponseException.getCause());\n+    Throwable cause = restLiResponseException.getCause();\n+    return new RestException(restResponse, cause==null ? null : cause.toString(), cause, writableStackTrace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMwNDE1Mg=="}, "originalCommit": {"oid": "e691a625b7bc3084827cb772d7bb892224437be2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMzMzAxOA==", "bodyText": "For RestLiServiceException, the toString is overritten and not include stacktrace.", "url": "https://github.com/linkedin/rest.li/pull/356#discussion_r465333018", "createdAt": "2020-08-04T21:11:49Z", "author": {"login": "xuli-in"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -148,7 +148,8 @@ public static RestException buildRestException(RestLiResponseException restLiRes\n     }\n \n     RestResponse restResponse = responseBuilder.build();\n-    return new RestException(restResponse, restLiResponseException.getCause());\n+    Throwable cause = restLiResponseException.getCause();\n+    return new RestException(restResponse, cause==null ? null : cause.toString(), cause, writableStackTrace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMwNDE1Mg=="}, "originalCommit": {"oid": "e691a625b7bc3084827cb772d7bb892224437be2"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 533, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}