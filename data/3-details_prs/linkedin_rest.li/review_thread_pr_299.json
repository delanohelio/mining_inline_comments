{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MzQzNTQz", "number": 299, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODoyNjoyMFrOD9ga8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMTowNzowOFrOD9jYow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODIwOTEyOnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODoyNjoyMFrOGXCwpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0MDo0MFrOGXV8Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgxNTY1NA==", "bodyText": "Eventhough TargetService hint is deprecated - should we include that int he debug (Host override/TargetService Hint found) until we completely remove the TargetService?", "url": "https://github.com/linkedin/rest.li/pull/299#discussion_r426815654", "createdAt": "2020-05-18T18:26:20Z", "author": {"login": "nizarm"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancer.java", "diffHunk": "@@ -201,16 +210,17 @@ public void getClient(Request request, RequestContext requestContext, Callback<T\n         }\n         else\n         {\n-          _log.debug(\"service hint found, using generic client for target: {}\", targetService);\n-\n-          TransportClient transportClient = _state.getClient(serviceName, targetService.getScheme());\n+          URI target = override == null ? targetService : URI.create(override + service.getPath());\n+          _log.debug(\"Host override found, using generic client for target: {}\", target);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63e7e0b8fc42d131f608696637112887c49f5fd7"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyOTg1OA==", "bodyText": "Added as suggested.", "url": "https://github.com/linkedin/rest.li/pull/299#discussion_r427129858", "createdAt": "2020-05-19T08:40:40Z", "author": {"login": "ssheng"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancer.java", "diffHunk": "@@ -201,16 +210,17 @@ public void getClient(Request request, RequestContext requestContext, Callback<T\n         }\n         else\n         {\n-          _log.debug(\"service hint found, using generic client for target: {}\", targetService);\n-\n-          TransportClient transportClient = _state.getClient(serviceName, targetService.getScheme());\n+          URI target = override == null ? targetService : URI.create(override + service.getPath());\n+          _log.debug(\"Host override found, using generic client for target: {}\", target);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgxNTY1NA=="}, "originalCommit": {"oid": "63e7e0b8fc42d131f608696637112887c49f5fd7"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODIxMjI3OnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODoyNzoyNVrOGXCysg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODoyNzoyNVrOGXCysg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgxNjE3OA==", "bodyText": "Ditto - should we include TargetService in the error until we completely remove the TargetHost?", "url": "https://github.com/linkedin/rest.li/pull/299#discussion_r426816178", "createdAt": "2020-05-18T18:27:25Z", "author": {"login": "nizarm"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancer.java", "diffHunk": "@@ -201,16 +210,17 @@ public void getClient(Request request, RequestContext requestContext, Callback<T\n         }\n         else\n         {\n-          _log.debug(\"service hint found, using generic client for target: {}\", targetService);\n-\n-          TransportClient transportClient = _state.getClient(serviceName, targetService.getScheme());\n+          URI target = override == null ? targetService : URI.create(override + service.getPath());\n+          _log.debug(\"Host override found, using generic client for target: {}\", target);\n+          TransportClient transportClient = _state.getClient(serviceName, target.getScheme());\n           if (transportClient == null)\n           {\n             throw new ServiceUnavailableException(serviceName,\n-                \"PEGA_1001. Cannot find transportClient for service \" + serviceName + \" and scheme: \" + targetService.getScheme()\n-                    + \" with service hint\" + targetService);\n+                \"PEGA_1001. Cannot find transportClient for service \" + serviceName + \" and scheme: \" + target.getScheme()\n+                    + \" with host override \" + target);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63e7e0b8fc42d131f608696637112887c49f5fd7"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODIzNzkwOnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODozNTozOFrOGXDCkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxOTozNDo1M1rOGXvo6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyMDI0MQ==", "bodyText": "Do we need to make sure override variable ends with '/' here, to make sure that servicepath is added as a proper suffix?", "url": "https://github.com/linkedin/rest.li/pull/299#discussion_r426820241", "createdAt": "2020-05-18T18:35:38Z", "author": {"login": "nizarm"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancer.java", "diffHunk": "@@ -201,16 +210,17 @@ public void getClient(Request request, RequestContext requestContext, Callback<T\n         }\n         else\n         {\n-          _log.debug(\"service hint found, using generic client for target: {}\", targetService);\n-\n-          TransportClient transportClient = _state.getClient(serviceName, targetService.getScheme());\n+          URI target = override == null ? targetService : URI.create(override + service.getPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63e7e0b8fc42d131f608696637112887c49f5fd7"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg5MTY0OQ==", "bodyText": "Given that override takes precedence, and there are many applications use targetService for now, we probably want to log a warning message here if both present?", "url": "https://github.com/linkedin/rest.li/pull/299#discussion_r426891649", "createdAt": "2020-05-18T21:02:54Z", "author": {"login": "cx-super"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancer.java", "diffHunk": "@@ -201,16 +210,17 @@ public void getClient(Request request, RequestContext requestContext, Callback<T\n         }\n         else\n         {\n-          _log.debug(\"service hint found, using generic client for target: {}\", targetService);\n-\n-          TransportClient transportClient = _state.getClient(serviceName, targetService.getScheme());\n+          URI target = override == null ? targetService : URI.create(override + service.getPath());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyMDI0MQ=="}, "originalCommit": {"oid": "63e7e0b8fc42d131f608696637112887c49f5fd7"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExMDIxMg==", "bodyText": "@nizarm's question, unit test shows that we don't have to. I will add another test to test with a '/' at the end.\n@ChaoLinkedIn, I'll address this comment in the comment below.", "url": "https://github.com/linkedin/rest.li/pull/299#discussion_r427110212", "createdAt": "2020-05-19T08:10:11Z", "author": {"login": "ssheng"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancer.java", "diffHunk": "@@ -201,16 +210,17 @@ public void getClient(Request request, RequestContext requestContext, Callback<T\n         }\n         else\n         {\n-          _log.debug(\"service hint found, using generic client for target: {}\", targetService);\n-\n-          TransportClient transportClient = _state.getClient(serviceName, targetService.getScheme());\n+          URI target = override == null ? targetService : URI.create(override + service.getPath());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyMDI0MQ=="}, "originalCommit": {"oid": "63e7e0b8fc42d131f608696637112887c49f5fd7"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU1MDk1Mg==", "bodyText": "thanks", "url": "https://github.com/linkedin/rest.li/pull/299#discussion_r427550952", "createdAt": "2020-05-19T19:34:53Z", "author": {"login": "nizarm"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancer.java", "diffHunk": "@@ -201,16 +210,17 @@ public void getClient(Request request, RequestContext requestContext, Callback<T\n         }\n         else\n         {\n-          _log.debug(\"service hint found, using generic client for target: {}\", targetService);\n-\n-          TransportClient transportClient = _state.getClient(serviceName, targetService.getScheme());\n+          URI target = override == null ? targetService : URI.create(override + service.getPath());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyMDI0MQ=="}, "originalCommit": {"oid": "63e7e0b8fc42d131f608696637112887c49f5fd7"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODMxMDc4OnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/util/HostOverrideList.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODo1ODoyOVrOGXDwxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODowMzo0NVrOGXUgWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzMjA2OQ==", "bodyText": "if (this.equals(WILDCARD_KEY)) {\n return true;\n}\n?", "url": "https://github.com/linkedin/rest.li/pull/299#discussion_r426832069", "createdAt": "2020-05-18T18:58:29Z", "author": {"login": "nizarm"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/util/HostOverrideList.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.d2.balancer.util;\n+\n+import com.linkedin.util.ArgumentUtil;\n+import java.net.URI;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+\n+/**\n+ * Stores the list of host overrides for cluster and services. The order of the overrides are stored in the same\n+ * order as the additions. Checks for the first match and return the overridden {@link URI}.\n+ */\n+public class HostOverrideList\n+{\n+  private Map<Key, URI> _overrides = new LinkedHashMap<>();\n+\n+  public void addClusterOverride(String cluster, URI uri) {\n+    ArgumentUtil.notNull(cluster, \"cluster\");\n+    ArgumentUtil.notNull(uri, \"uri\");\n+    _overrides.put(new Key(cluster, null), uri);\n+  }\n+\n+  public void addServiceOverride(String service, URI uri) {\n+    ArgumentUtil.notNull(service, \"service\");\n+    ArgumentUtil.notNull(uri, \"uri\");\n+    _overrides.put(new Key(null, service), uri);\n+  }\n+\n+  public void addOverride(URI uri) {\n+    ArgumentUtil.notNull(uri, \"uri\");\n+    _overrides.put(Key.WILDCARD_KEY, uri);\n+  }\n+\n+  /**\n+   * Gets the overridden URI for the given cluster and service.\n+   * @param cluster Cluster name of the override.\n+   * @param service Service name of the override.\n+   * @return The overridden URI for the given cluster and service; {@code null} otherwise.\n+   */\n+  public URI getOverride(String cluster, String service)\n+  {\n+    for (Map.Entry<Key, URI> override : _overrides.entrySet())\n+    {\n+      if (override.getKey().match(cluster, service)) {\n+        return override.getValue();\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Key implementation of the override map. Key includes a cluster and a service name. If either cluster or\n+   * service is {@code null}, then the null cluster or service is treated as a wildcard.\n+   */\n+  private static class Key {\n+    private static final Key WILDCARD_KEY = new Key(null, null);\n+    private final String _cluster;\n+    private final String _service;\n+\n+    public Key(String cluster, String service) {\n+      _cluster = cluster;\n+      _service = service;\n+    }\n+\n+    /**\n+     * Checks if the provided cluster and service names match this key.\n+     * @param cluster Cluster name to check against.\n+     * @param service Service name to check against.\n+     * @return {@code True} if provided cluster and service name match the key; {@code false} otherwise.\n+     */\n+    public boolean match(String cluster, String service) {\n+      if (_cluster == null && _service == null) {\n+        return true;\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63e7e0b8fc42d131f608696637112887c49f5fd7"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEwNjM5NQ==", "bodyText": "Better, I think we can just use ==.", "url": "https://github.com/linkedin/rest.li/pull/299#discussion_r427106395", "createdAt": "2020-05-19T08:03:45Z", "author": {"login": "ssheng"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/util/HostOverrideList.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.d2.balancer.util;\n+\n+import com.linkedin.util.ArgumentUtil;\n+import java.net.URI;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+\n+/**\n+ * Stores the list of host overrides for cluster and services. The order of the overrides are stored in the same\n+ * order as the additions. Checks for the first match and return the overridden {@link URI}.\n+ */\n+public class HostOverrideList\n+{\n+  private Map<Key, URI> _overrides = new LinkedHashMap<>();\n+\n+  public void addClusterOverride(String cluster, URI uri) {\n+    ArgumentUtil.notNull(cluster, \"cluster\");\n+    ArgumentUtil.notNull(uri, \"uri\");\n+    _overrides.put(new Key(cluster, null), uri);\n+  }\n+\n+  public void addServiceOverride(String service, URI uri) {\n+    ArgumentUtil.notNull(service, \"service\");\n+    ArgumentUtil.notNull(uri, \"uri\");\n+    _overrides.put(new Key(null, service), uri);\n+  }\n+\n+  public void addOverride(URI uri) {\n+    ArgumentUtil.notNull(uri, \"uri\");\n+    _overrides.put(Key.WILDCARD_KEY, uri);\n+  }\n+\n+  /**\n+   * Gets the overridden URI for the given cluster and service.\n+   * @param cluster Cluster name of the override.\n+   * @param service Service name of the override.\n+   * @return The overridden URI for the given cluster and service; {@code null} otherwise.\n+   */\n+  public URI getOverride(String cluster, String service)\n+  {\n+    for (Map.Entry<Key, URI> override : _overrides.entrySet())\n+    {\n+      if (override.getKey().match(cluster, service)) {\n+        return override.getValue();\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Key implementation of the override map. Key includes a cluster and a service name. If either cluster or\n+   * service is {@code null}, then the null cluster or service is treated as a wildcard.\n+   */\n+  private static class Key {\n+    private static final Key WILDCARD_KEY = new Key(null, null);\n+    private final String _cluster;\n+    private final String _service;\n+\n+    public Key(String cluster, String service) {\n+      _cluster = cluster;\n+      _service = service;\n+    }\n+\n+    /**\n+     * Checks if the provided cluster and service names match this key.\n+     * @param cluster Cluster name to check against.\n+     * @param service Service name to check against.\n+     * @return {@code True} if provided cluster and service name match the key; {@code false} otherwise.\n+     */\n+    public boolean match(String cluster, String service) {\n+      if (_cluster == null && _service == null) {\n+        return true;\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzMjA2OQ=="}, "originalCommit": {"oid": "63e7e0b8fc42d131f608696637112887c49f5fd7"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODU5NTc1OnYy", "diffSide": "RIGHT", "path": "d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDozMjo0NFrOGXGi2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxOTo0MzowN1rOGXv6Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3NzY1OQ==", "bodyText": "Can we also have a test with override value with an ending slash URI.create(\"http://override/path/\")", "url": "https://github.com/linkedin/rest.li/pull/299#discussion_r426877659", "createdAt": "2020-05-18T20:32:44Z", "author": {"login": "nizarm"}, "path": "d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java", "diffHunk": "@@ -623,6 +626,113 @@ public void testGetClient() throws Exception\n     loadBalancer.getClient(uriRequest, requestContextWithHint);\n   }\n \n+  /**\n+   * Tests getClient() when with host override list specified in the request context.\n+   * @throws Exception\n+   */\n+  @Test\n+  public void testGetClientHostOverrideList() throws Exception\n+  {\n+    Map<String, LoadBalancerStrategyFactory<? extends LoadBalancerStrategy>> loadBalancerStrategyFactories =\n+        new HashMap<>();\n+    Map<String, TransportClientFactory> clientFactories = new HashMap<>();\n+    List<String> prioritizedSchemes = new ArrayList<>();\n+\n+    MockStore<ServiceProperties> serviceRegistry = new MockStore<>();\n+    MockStore<ClusterProperties> clusterRegistry = new MockStore<>();\n+    MockStore<UriProperties> uriRegistry = new MockStore<>();\n+\n+    ScheduledExecutorService executorService = new SynchronousExecutorService();\n+\n+    loadBalancerStrategyFactories.put(\"degrader\", new DegraderLoadBalancerStrategyFactoryV3());\n+    clientFactories.put(PropertyKeys.HTTP_SCHEME, new DoNothingClientFactory());\n+\n+    SimpleLoadBalancerState state =\n+        new SimpleLoadBalancerState(executorService,\n+            uriRegistry,\n+            clusterRegistry,\n+            serviceRegistry,\n+            clientFactories,\n+            loadBalancerStrategyFactories);\n+\n+    SimpleLoadBalancer loadBalancer =\n+        new SimpleLoadBalancer(state, 5, TimeUnit.SECONDS, _d2Executor);\n+\n+    FutureCallback<None> balancerCallback = new FutureCallback<None>();\n+    loadBalancer.start(balancerCallback);\n+    balancerCallback.get();\n+\n+    Map<Integer, PartitionData> partitionData = new HashMap<Integer, PartitionData>(1);\n+    partitionData.put(DEFAULT_PARTITION_ID, new PartitionData(1d));\n+    Map<URI, Map<Integer, PartitionData>> uriData = new HashMap<URI, Map<Integer, PartitionData>>(2);\n+    uriData.put(URI.create(\"http://host1/path\"), partitionData);\n+\n+    prioritizedSchemes.add(PropertyKeys.HTTP_SCHEME);\n+\n+    String cluster1 = \"Cluster1\";\n+    String cluster2 = \"Cluster2\";\n+    String service1 = \"service1\";\n+    String service2 = \"service2\";\n+\n+    clusterRegistry.put(cluster1, new ClusterProperties(cluster1, Collections.emptyList(),\n+        Collections.emptyMap(), new HashSet<>(), NullPartitionProperties.getInstance()));\n+\n+    serviceRegistry.put(service1, new ServiceProperties(service1,\n+        cluster1,\n+        \"/service1Path\",\n+        Arrays.asList(\"degrader\"),\n+        Collections.<String,Object>emptyMap(),\n+        null,\n+        null,\n+        prioritizedSchemes,\n+        null));\n+    uriRegistry.put(cluster1, new UriProperties(cluster1, uriData));\n+\n+    URI override = URI.create(\"http://override/path\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63e7e0b8fc42d131f608696637112887c49f5fd7"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExODYyMQ==", "bodyText": "Turned out the implementation is quite fragile that adding a suffix '' will break the behavior. Given that the normal D2 path leverages the same concatenation. I recommend that we fix that all together in a different PR.", "url": "https://github.com/linkedin/rest.li/pull/299#discussion_r427118621", "createdAt": "2020-05-19T08:23:41Z", "author": {"login": "ssheng"}, "path": "d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java", "diffHunk": "@@ -623,6 +626,113 @@ public void testGetClient() throws Exception\n     loadBalancer.getClient(uriRequest, requestContextWithHint);\n   }\n \n+  /**\n+   * Tests getClient() when with host override list specified in the request context.\n+   * @throws Exception\n+   */\n+  @Test\n+  public void testGetClientHostOverrideList() throws Exception\n+  {\n+    Map<String, LoadBalancerStrategyFactory<? extends LoadBalancerStrategy>> loadBalancerStrategyFactories =\n+        new HashMap<>();\n+    Map<String, TransportClientFactory> clientFactories = new HashMap<>();\n+    List<String> prioritizedSchemes = new ArrayList<>();\n+\n+    MockStore<ServiceProperties> serviceRegistry = new MockStore<>();\n+    MockStore<ClusterProperties> clusterRegistry = new MockStore<>();\n+    MockStore<UriProperties> uriRegistry = new MockStore<>();\n+\n+    ScheduledExecutorService executorService = new SynchronousExecutorService();\n+\n+    loadBalancerStrategyFactories.put(\"degrader\", new DegraderLoadBalancerStrategyFactoryV3());\n+    clientFactories.put(PropertyKeys.HTTP_SCHEME, new DoNothingClientFactory());\n+\n+    SimpleLoadBalancerState state =\n+        new SimpleLoadBalancerState(executorService,\n+            uriRegistry,\n+            clusterRegistry,\n+            serviceRegistry,\n+            clientFactories,\n+            loadBalancerStrategyFactories);\n+\n+    SimpleLoadBalancer loadBalancer =\n+        new SimpleLoadBalancer(state, 5, TimeUnit.SECONDS, _d2Executor);\n+\n+    FutureCallback<None> balancerCallback = new FutureCallback<None>();\n+    loadBalancer.start(balancerCallback);\n+    balancerCallback.get();\n+\n+    Map<Integer, PartitionData> partitionData = new HashMap<Integer, PartitionData>(1);\n+    partitionData.put(DEFAULT_PARTITION_ID, new PartitionData(1d));\n+    Map<URI, Map<Integer, PartitionData>> uriData = new HashMap<URI, Map<Integer, PartitionData>>(2);\n+    uriData.put(URI.create(\"http://host1/path\"), partitionData);\n+\n+    prioritizedSchemes.add(PropertyKeys.HTTP_SCHEME);\n+\n+    String cluster1 = \"Cluster1\";\n+    String cluster2 = \"Cluster2\";\n+    String service1 = \"service1\";\n+    String service2 = \"service2\";\n+\n+    clusterRegistry.put(cluster1, new ClusterProperties(cluster1, Collections.emptyList(),\n+        Collections.emptyMap(), new HashSet<>(), NullPartitionProperties.getInstance()));\n+\n+    serviceRegistry.put(service1, new ServiceProperties(service1,\n+        cluster1,\n+        \"/service1Path\",\n+        Arrays.asList(\"degrader\"),\n+        Collections.<String,Object>emptyMap(),\n+        null,\n+        null,\n+        prioritizedSchemes,\n+        null));\n+    uriRegistry.put(cluster1, new UriProperties(cluster1, uriData));\n+\n+    URI override = URI.create(\"http://override/path\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3NzY1OQ=="}, "originalCommit": {"oid": "63e7e0b8fc42d131f608696637112887c49f5fd7"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU1NTQyMw==", "bodyText": "sure", "url": "https://github.com/linkedin/rest.li/pull/299#discussion_r427555423", "createdAt": "2020-05-19T19:43:07Z", "author": {"login": "nizarm"}, "path": "d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java", "diffHunk": "@@ -623,6 +626,113 @@ public void testGetClient() throws Exception\n     loadBalancer.getClient(uriRequest, requestContextWithHint);\n   }\n \n+  /**\n+   * Tests getClient() when with host override list specified in the request context.\n+   * @throws Exception\n+   */\n+  @Test\n+  public void testGetClientHostOverrideList() throws Exception\n+  {\n+    Map<String, LoadBalancerStrategyFactory<? extends LoadBalancerStrategy>> loadBalancerStrategyFactories =\n+        new HashMap<>();\n+    Map<String, TransportClientFactory> clientFactories = new HashMap<>();\n+    List<String> prioritizedSchemes = new ArrayList<>();\n+\n+    MockStore<ServiceProperties> serviceRegistry = new MockStore<>();\n+    MockStore<ClusterProperties> clusterRegistry = new MockStore<>();\n+    MockStore<UriProperties> uriRegistry = new MockStore<>();\n+\n+    ScheduledExecutorService executorService = new SynchronousExecutorService();\n+\n+    loadBalancerStrategyFactories.put(\"degrader\", new DegraderLoadBalancerStrategyFactoryV3());\n+    clientFactories.put(PropertyKeys.HTTP_SCHEME, new DoNothingClientFactory());\n+\n+    SimpleLoadBalancerState state =\n+        new SimpleLoadBalancerState(executorService,\n+            uriRegistry,\n+            clusterRegistry,\n+            serviceRegistry,\n+            clientFactories,\n+            loadBalancerStrategyFactories);\n+\n+    SimpleLoadBalancer loadBalancer =\n+        new SimpleLoadBalancer(state, 5, TimeUnit.SECONDS, _d2Executor);\n+\n+    FutureCallback<None> balancerCallback = new FutureCallback<None>();\n+    loadBalancer.start(balancerCallback);\n+    balancerCallback.get();\n+\n+    Map<Integer, PartitionData> partitionData = new HashMap<Integer, PartitionData>(1);\n+    partitionData.put(DEFAULT_PARTITION_ID, new PartitionData(1d));\n+    Map<URI, Map<Integer, PartitionData>> uriData = new HashMap<URI, Map<Integer, PartitionData>>(2);\n+    uriData.put(URI.create(\"http://host1/path\"), partitionData);\n+\n+    prioritizedSchemes.add(PropertyKeys.HTTP_SCHEME);\n+\n+    String cluster1 = \"Cluster1\";\n+    String cluster2 = \"Cluster2\";\n+    String service1 = \"service1\";\n+    String service2 = \"service2\";\n+\n+    clusterRegistry.put(cluster1, new ClusterProperties(cluster1, Collections.emptyList(),\n+        Collections.emptyMap(), new HashSet<>(), NullPartitionProperties.getInstance()));\n+\n+    serviceRegistry.put(service1, new ServiceProperties(service1,\n+        cluster1,\n+        \"/service1Path\",\n+        Arrays.asList(\"degrader\"),\n+        Collections.<String,Object>emptyMap(),\n+        null,\n+        null,\n+        prioritizedSchemes,\n+        null));\n+    uriRegistry.put(cluster1, new UriProperties(cluster1, uriData));\n+\n+    URI override = URI.create(\"http://override/path\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3NzY1OQ=="}, "originalCommit": {"oid": "63e7e0b8fc42d131f608696637112887c49f5fd7"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODY4NDYyOnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/util/HostOverrideList.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMTowMzoyN1rOGXHaeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNzowNzoyMlrOGXSnog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg5MTg5Ng==", "bodyText": "HostOverrides or HostOverriders?", "url": "https://github.com/linkedin/rest.li/pull/299#discussion_r426891896", "createdAt": "2020-05-18T21:03:27Z", "author": {"login": "cx-super"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/util/HostOverrideList.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.d2.balancer.util;\n+\n+import com.linkedin.util.ArgumentUtil;\n+import java.net.URI;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+\n+/**\n+ * Stores the list of host overrides for cluster and services. The order of the overrides are stored in the same\n+ * order as the additions. Checks for the first match and return the overridden {@link URI}.\n+ */\n+public class HostOverrideList", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63e7e0b8fc42d131f608696637112887c49f5fd7"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA3NTQ5MA==", "bodyText": "I wanted the word list to imply order of override. HostOverrides is fine, too, if you feel strong about the naming.", "url": "https://github.com/linkedin/rest.li/pull/299#discussion_r427075490", "createdAt": "2020-05-19T07:07:22Z", "author": {"login": "ssheng"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/util/HostOverrideList.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.d2.balancer.util;\n+\n+import com.linkedin.util.ArgumentUtil;\n+import java.net.URI;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+\n+/**\n+ * Stores the list of host overrides for cluster and services. The order of the overrides are stored in the same\n+ * order as the additions. Checks for the first match and return the overridden {@link URI}.\n+ */\n+public class HostOverrideList", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg5MTg5Ng=="}, "originalCommit": {"oid": "63e7e0b8fc42d131f608696637112887c49f5fd7"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODY5NDc1OnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/util/HostOverrideList.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMTowNzowOFrOGXHgtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNzoxMTo1MVrOGXSvuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg5MzQ5NA==", "bodyText": "Since the overrides could be supplied by different app, what if there are conflicts?", "url": "https://github.com/linkedin/rest.li/pull/299#discussion_r426893494", "createdAt": "2020-05-18T21:07:08Z", "author": {"login": "cx-super"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/util/HostOverrideList.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.d2.balancer.util;\n+\n+import com.linkedin.util.ArgumentUtil;\n+import java.net.URI;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+\n+/**\n+ * Stores the list of host overrides for cluster and services. The order of the overrides are stored in the same\n+ * order as the additions. Checks for the first match and return the overridden {@link URI}.\n+ */\n+public class HostOverrideList\n+{\n+  private Map<Key, URI> _overrides = new LinkedHashMap<>();\n+\n+  public void addClusterOverride(String cluster, URI uri) {\n+    ArgumentUtil.notNull(cluster, \"cluster\");\n+    ArgumentUtil.notNull(uri, \"uri\");\n+    _overrides.put(new Key(cluster, null), uri);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63e7e0b8fc42d131f608696637112887c49f5fd7"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA3NzU2MA==", "bodyText": "It won't be supplied by different apps since only the current app can add the override. However, it may be supplied by different places in the code. A solution I can think of is having a state of the list such that the first caller can add to the list and seal the list. The second caller will receive an exception adding to a sealed list. Another option is to expose the list contents to the caller so they can decide where to add the override. I don't particularly like either one as both add significant complexity to the logic.", "url": "https://github.com/linkedin/rest.li/pull/299#discussion_r427077560", "createdAt": "2020-05-19T07:11:51Z", "author": {"login": "ssheng"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/util/HostOverrideList.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.d2.balancer.util;\n+\n+import com.linkedin.util.ArgumentUtil;\n+import java.net.URI;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+\n+/**\n+ * Stores the list of host overrides for cluster and services. The order of the overrides are stored in the same\n+ * order as the additions. Checks for the first match and return the overridden {@link URI}.\n+ */\n+public class HostOverrideList\n+{\n+  private Map<Key, URI> _overrides = new LinkedHashMap<>();\n+\n+  public void addClusterOverride(String cluster, URI uri) {\n+    ArgumentUtil.notNull(cluster, \"cluster\");\n+    ArgumentUtil.notNull(uri, \"uri\");\n+    _overrides.put(new Key(cluster, null), uri);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg5MzQ5NA=="}, "originalCommit": {"oid": "63e7e0b8fc42d131f608696637112887c49f5fd7"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 452, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}