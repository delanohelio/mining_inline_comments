{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NTUyNzM0", "number": 217, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzoyNjo1NFrODnLLFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNDoyNTo1MFrODpv2dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDA0MTE2OnYy", "diffSide": "RIGHT", "path": "restli-int-test-api/src/main/snapshot/com.linkedin.restli.examples.greetings.client.typerefCustomDoubleAssociationKeyResource.snapshot.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzoyNjo1NFrOF1BQ7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOToxODo1OFrOF1FTHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzOTU2NA==", "bodyText": "Question. Why is not not \"[0-9]\\.[0-9]\"   how many digits are allowed after the \".\"?", "url": "https://github.com/linkedin/rest.li/pull/217#discussion_r391139564", "createdAt": "2020-03-11T17:26:54Z", "author": {"login": "junchuanwang"}, "path": "restli-int-test-api/src/main/snapshot/com.linkedin.restli.examples.greetings.client.typerefCustomDoubleAssociationKeyResource.snapshot.json", "diffHunk": "@@ -26,6 +26,11 @@\n     \"ref\" : \"double\",\n     \"java\" : {\n       \"class\" : \"com.linkedin.restli.examples.custom.types.CustomDouble\"\n+    },\n+    \"validate\" : {\n+      \"regex\" : {\n+        \"regex\" : \"[0-9]*\\\\.[0-9]\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2803d65a133fa4dbf5d81c8fce358e0d3984f3d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwNTY2Mw==", "bodyText": "yup that is only 1", "url": "https://github.com/linkedin/rest.li/pull/217#discussion_r391205663", "createdAt": "2020-03-11T19:18:58Z", "author": {"login": "aman1309"}, "path": "restli-int-test-api/src/main/snapshot/com.linkedin.restli.examples.greetings.client.typerefCustomDoubleAssociationKeyResource.snapshot.json", "diffHunk": "@@ -26,6 +26,11 @@\n     \"ref\" : \"double\",\n     \"java\" : {\n       \"class\" : \"com.linkedin.restli.examples.custom.types.CustomDouble\"\n+    },\n+    \"validate\" : {\n+      \"regex\" : {\n+        \"regex\" : \"[0-9]*\\\\.[0-9]\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzOTU2NA=="}, "originalCommit": {"oid": "b2803d65a133fa4dbf5d81c8fce358e0d3984f3d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTU5MTY2OnYy", "diffSide": "RIGHT", "path": "restli-server/src/main/java/com/linkedin/restli/server/config/ResourceMethodConfigImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMzozMTowOFrOF1QL3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNzo0Njo1OVrOF1o9-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM4NDAzMA==", "bodyText": "My last question before giving a ship:\nWhy is this public? Is this used anywhere?", "url": "https://github.com/linkedin/rest.li/pull/217#discussion_r391384030", "createdAt": "2020-03-12T03:31:08Z", "author": {"login": "junchuanwang"}, "path": "restli-server/src/main/java/com/linkedin/restli/server/config/ResourceMethodConfigImpl.java", "diffHunk": "@@ -10,15 +10,17 @@\n  *\n  * @author mnchen\n  */\n-class ResourceMethodConfigImpl implements ResourceMethodConfig\n+public class ResourceMethodConfigImpl implements ResourceMethodConfig", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2803d65a133fa4dbf5d81c8fce358e0d3984f3d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ1NzIyOA==", "bodyText": "this is need for RoutingResult default initialization.", "url": "https://github.com/linkedin/rest.li/pull/217#discussion_r391457228", "createdAt": "2020-03-12T08:13:33Z", "author": {"login": "aman1309"}, "path": "restli-server/src/main/java/com/linkedin/restli/server/config/ResourceMethodConfigImpl.java", "diffHunk": "@@ -10,15 +10,17 @@\n  *\n  * @author mnchen\n  */\n-class ResourceMethodConfigImpl implements ResourceMethodConfig\n+public class ResourceMethodConfigImpl implements ResourceMethodConfig", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM4NDAzMA=="}, "originalCommit": {"oid": "b2803d65a133fa4dbf5d81c8fce358e0d3984f3d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc4MjIzOA==", "bodyText": "sorry I still didn't quite get why package private is not enough.\nAren't they in the same package? RoutingResult  is in the parent package of ResourceMethodConfigImpl ?", "url": "https://github.com/linkedin/rest.li/pull/217#discussion_r391782238", "createdAt": "2020-03-12T17:34:12Z", "author": {"login": "junchuanwang"}, "path": "restli-server/src/main/java/com/linkedin/restli/server/config/ResourceMethodConfigImpl.java", "diffHunk": "@@ -10,15 +10,17 @@\n  *\n  * @author mnchen\n  */\n-class ResourceMethodConfigImpl implements ResourceMethodConfig\n+public class ResourceMethodConfigImpl implements ResourceMethodConfig", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM4NDAzMA=="}, "originalCommit": {"oid": "b2803d65a133fa4dbf5d81c8fce358e0d3984f3d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc5MDA3NA==", "bodyText": "routingresult is not in same package", "url": "https://github.com/linkedin/rest.li/pull/217#discussion_r391790074", "createdAt": "2020-03-12T17:46:59Z", "author": {"login": "aman1309"}, "path": "restli-server/src/main/java/com/linkedin/restli/server/config/ResourceMethodConfigImpl.java", "diffHunk": "@@ -10,15 +10,17 @@\n  *\n  * @author mnchen\n  */\n-class ResourceMethodConfigImpl implements ResourceMethodConfig\n+public class ResourceMethodConfigImpl implements ResourceMethodConfig", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM4NDAzMA=="}, "originalCommit": {"oid": "b2803d65a133fa4dbf5d81c8fce358e0d3984f3d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDUxMTkyOnYy", "diffSide": "RIGHT", "path": "restli-server/src/main/java/com/linkedin/restli/server/config/ResourceMethodConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMjo0NTowN1rOF2kI4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNToxNzoyNVrOF3g91g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc1OTUyMQ==", "bodyText": "Replying to your comment on the last PR:\n\nResource keys are identifiers for entity on which the resource takes action on.\nthere are two configs here one to validate keys in the path, 2nd in method level config which validates keys in batch requests or resource method argument/params\n\nSo are you saying that the service-level config only determines whether to validate path keys? And the method-level config determines whether to validate the key (either from the path or query param) passed into the resource method invocation? If so, then this naming is confusing and doesn't seem to align with this logic. If my assessment is correct, then a name like RestLiConfig#shouldValidatePathKeys and RestLiMethodConfig#shouldValidateResourceKeys are more intuitive.\nAlso, since these are interfaces meant for public consumption, this should be thoroughly clarified via javadocs on the getters and setters of both configs.", "url": "https://github.com/linkedin/rest.li/pull/217#discussion_r392759521", "createdAt": "2020-03-16T02:45:07Z", "author": {"login": "evanw555"}, "path": "restli-server/src/main/java/com/linkedin/restli/server/config/ResourceMethodConfig.java", "diffHunk": "@@ -21,4 +21,9 @@\n    * Config for whether this method will need to validate query parameters.\n    */\n   boolean shouldValidateQueryParams();\n+\n+  /**\n+   * Config for whether this method will need to validate path/resource keys.\n+   */\n+  boolean shouldValidateResourceKeyParams();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2803d65a133fa4dbf5d81c8fce358e0d3984f3d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1NjExOA==", "bodyText": "shouldValidateResourceKeys at all places. updated docs", "url": "https://github.com/linkedin/rest.li/pull/217#discussion_r393756118", "createdAt": "2020-03-17T15:17:25Z", "author": {"login": "aman1309"}, "path": "restli-server/src/main/java/com/linkedin/restli/server/config/ResourceMethodConfig.java", "diffHunk": "@@ -21,4 +21,9 @@\n    * Config for whether this method will need to validate query parameters.\n    */\n   boolean shouldValidateQueryParams();\n+\n+  /**\n+   * Config for whether this method will need to validate path/resource keys.\n+   */\n+  boolean shouldValidateResourceKeyParams();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc1OTUyMQ=="}, "originalCommit": {"oid": "b2803d65a133fa4dbf5d81c8fce358e0d3984f3d"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDkzMTg3OnYy", "diffSide": "RIGHT", "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/util/ArgumentUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjowMzozN1rOF3jG4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjowMzozN1rOF3jG4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc5MTIwMQ==", "bodyText": "in pegasus we align method parameters in code style, can you fix this?", "url": "https://github.com/linkedin/rest.li/pull/217#discussion_r393791201", "createdAt": "2020-03-17T16:03:37Z", "author": {"login": "junchuanwang"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/util/ArgumentUtils.java", "diffHunk": "@@ -507,16 +559,25 @@ public static Object parseSimplePathKey(final String value,\n     }\n   }\n \n+  public static Object convertSimpleValue(final String value,\n+      final DataSchema schema,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c52157a62630edd7c82df9a7b3c513903e4a8d57"}, "originalPosition": 284}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTU0NzczOnYy", "diffSide": "RIGHT", "path": "restli-server/src/main/java/com/linkedin/restli/server/config/ResourceMethodConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo0MzowM1rOF3pazA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo0MzowM1rOF3pazA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5NDYwNA==", "bodyText": "nit: this should be pluralized, right? Based on my understanding, there can be multiple keys per method call (e.g. batch method)", "url": "https://github.com/linkedin/rest.li/pull/217#discussion_r393894604", "createdAt": "2020-03-17T18:43:03Z", "author": {"login": "evanw555"}, "path": "restli-server/src/main/java/com/linkedin/restli/server/config/ResourceMethodConfig.java", "diffHunk": "@@ -21,4 +21,9 @@\n    * Config for whether this method will need to validate query parameters.\n    */\n   boolean shouldValidateQueryParams();\n+\n+  /**\n+   * Config for whether this method will need to validate path/resource keys.\n+   */\n+  boolean shouldValidateResourceKey();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c52157a62630edd7c82df9a7b3c513903e4a8d57"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTU1MTg0OnYy", "diffSide": "RIGHT", "path": "restli-server/src/main/java/com/linkedin/restli/server/config/RestLiMethodConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo0NDoxOFrOF3pdig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo0NDoxOFrOF3pdig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5NTMwNg==", "bodyText": "nit: same as other comment.", "url": "https://github.com/linkedin/rest.li/pull/217#discussion_r393895306", "createdAt": "2020-03-17T18:44:18Z", "author": {"login": "evanw555"}, "path": "restli-server/src/main/java/com/linkedin/restli/server/config/RestLiMethodConfig.java", "diffHunk": "@@ -19,4 +18,9 @@\n    * Gets whether query parameter validation against its parameter data template is enabled\n    */\n   boolean shouldValidateQueryParams();\n+\n+  /**\n+   * Gets whether resource/path keys validation against its parameter data template is enabled\n+   */\n+  boolean shouldValidateResourceKey();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c52157a62630edd7c82df9a7b3c513903e4a8d57"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjgzNDQ0OnYy", "diffSide": "RIGHT", "path": "restli-server/src/main/java/com/linkedin/restli/server/config/ResourceMethodConfigImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDozNDoxOFrOF32FUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDozNDoxOFrOF32FUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwMjA5Ng==", "bodyText": "nit: update this string", "url": "https://github.com/linkedin/rest.li/pull/217#discussion_r394102096", "createdAt": "2020-03-18T04:34:18Z", "author": {"login": "evanw555"}, "path": "restli-server/src/main/java/com/linkedin/restli/server/config/ResourceMethodConfigImpl.java", "diffHunk": "@@ -31,26 +33,46 @@ public boolean shouldValidateQueryParams() {\n     return _validateQueryParams;\n   }\n \n+  @Override\n+  public boolean shouldValidateResourceKeys() {\n+    return _validateResourceKeys;\n+  }\n+\n   @Override\n   public String toString()\n   {\n     return \"ResourceMethodConfigImpl{\" +\n-            \"_timeoutMs=\" + _timeoutMs +\n-            '}';\n+          \"_timeoutMs=\" + _timeoutMs +\n+          \", _validateQueryParams=\" + _validateQueryParams +\n+          \", _validateResourceKeyParams=\" + _validateResourceKeys +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07d3503cd4b317b40ce156a5080f453aaf4bd303"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjgzNDY3OnYy", "diffSide": "RIGHT", "path": "restli-server/src/main/java/com/linkedin/restli/server/config/RestLiMethodConfigImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDozNDozMVrOF32FdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDozNDozMVrOF32FdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwMjEzMg==", "bodyText": "nit: update this variable", "url": "https://github.com/linkedin/rest.li/pull/217#discussion_r394102132", "createdAt": "2020-03-18T04:34:31Z", "author": {"login": "evanw555"}, "path": "restli-server/src/main/java/com/linkedin/restli/server/config/RestLiMethodConfigImpl.java", "diffHunk": "@@ -6,11 +6,13 @@\n {\n   private final Map<String, Long> _timeoutMsConfig;\n   private boolean _validateQueryParams;\n+  private boolean _validateResourceKeyParams;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07d3503cd4b317b40ce156a5080f453aaf4bd303"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTAyMTk4OnYy", "diffSide": "RIGHT", "path": "restli-common/src/main/java/com/linkedin/restli/common/ComplexResourceKey.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNDoyNTo1MFrOF5HZnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNDoyNTo1MFrOF5HZnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQzNDM5OQ==", "bodyText": "@karthikbalasub  this is code which introduced the bug", "url": "https://github.com/linkedin/rest.li/pull/217#discussion_r395434399", "createdAt": "2020-03-20T04:25:50Z", "author": {"login": "aman1309"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/ComplexResourceKey.java", "diffHunk": "@@ -319,16 +356,24 @@ public void makeReadOnly()\n   }\n \n   private static RecordTemplate validateDataMap(DataMap dataMap,\n-                                                TypeSpec<? extends RecordTemplate> spec)\n+                                                TypeSpec<? extends RecordTemplate> spec,\n+                                                boolean enforceValidation)\n   {\n     RecordTemplate recordTemplate = wrapWithSchema(dataMap, spec);\n     // Validate against the class schema with FixupMode.STRING_TO_PRIMITIVE to parse the\n     // strings into the\n     // corresponding primitive types.\n-    ValidateDataAgainstSchema.validate(recordTemplate.data(),\n-                                       recordTemplate.schema(),\n-                                       new ValidationOptions(RequiredMode.CAN_BE_ABSENT_IF_HAS_DEFAULT,\n-                                                             CoercionMode.STRING_TO_PRIMITIVE));\n+    DataSchemaAnnotationValidator validator = new DataSchemaAnnotationValidator(recordTemplate.schema());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed716a67c7abfc437a34267dfd1eacb28db1868a"}, "originalPosition": 125}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 622, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}