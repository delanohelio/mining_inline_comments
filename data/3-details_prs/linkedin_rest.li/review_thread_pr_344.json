{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyOTk3NzY5", "number": 344, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMToyOTo0N1rOEKqtxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNDoyMDoyMlrOEKvVKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjIxMDYwOnYy", "diffSide": "RIGHT", "path": "li-protobuf/src/main/java/com/linkedin/data/protobuf/Utf8Utils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMToyOTo0N1rOGr1-iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMTo0ODo0M1rOGr2crg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNjMxNQ==", "bodyText": "add bool param doc", "url": "https://github.com/linkedin/rest.li/pull/344#discussion_r448626315", "createdAt": "2020-07-01T21:29:47Z", "author": {"login": "aman1309"}, "path": "li-protobuf/src/main/java/com/linkedin/data/protobuf/Utf8Utils.java", "diffHunk": "@@ -134,6 +137,40 @@ public static int lookupUtfTable(int initialByte)\n    *                                        {@code bytes.length - offset}\n    */\n   public static int encode(CharSequence in, byte[] out, int offset, int length)\n+  {\n+    return encode(in, out, offset, length, false);\n+  }\n+\n+  /**\n+   * Encodes an input character sequence ({@code in}) to UTF-8 in the target array ({@code out}).\n+   * For a string, this method is similar to\n+   *\n+   * <pre>{@code\n+   * byte[] a = string.getBytes(UTF_8);\n+   * System.arraycopy(a, 0, bytes, offset, a.length);\n+   * return offset + a.length;\n+   * }</pre>\n+   * <p>\n+   * but is more efficient in both time and space. If tolerateInvalidSurrogatePairs is set to true, then\n+   * this method replaces unpaired surrogates with the default replacement character, else\n+   * this method throws {@link IllegalArgumentException}.\n+   *\n+   * <p>To ensure sufficient space in the output buffer, either call {@link #encodedLength} to\n+   * compute the exact amount needed, or leave room for {@code Utf8.MAX_BYTES_PER_CHAR *\n+   * sequence.length()}, which is the largest possible number of bytes that any input can be\n+   * encoded to.\n+   *\n+   * @param in     the input character sequence to be encoded\n+   * @param out    the target array\n+   * @param offset the starting offset in {@code bytes} to start writing at\n+   * @param length the length of the {@code bytes}, starting from {@code offset}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d48fb64e704cde1c766255434495d6b2fafa9bba"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzNDAzMA==", "bodyText": "Fixed", "url": "https://github.com/linkedin/rest.li/pull/344#discussion_r448634030", "createdAt": "2020-07-01T21:48:43Z", "author": {"login": "karthikrg"}, "path": "li-protobuf/src/main/java/com/linkedin/data/protobuf/Utf8Utils.java", "diffHunk": "@@ -134,6 +137,40 @@ public static int lookupUtfTable(int initialByte)\n    *                                        {@code bytes.length - offset}\n    */\n   public static int encode(CharSequence in, byte[] out, int offset, int length)\n+  {\n+    return encode(in, out, offset, length, false);\n+  }\n+\n+  /**\n+   * Encodes an input character sequence ({@code in}) to UTF-8 in the target array ({@code out}).\n+   * For a string, this method is similar to\n+   *\n+   * <pre>{@code\n+   * byte[] a = string.getBytes(UTF_8);\n+   * System.arraycopy(a, 0, bytes, offset, a.length);\n+   * return offset + a.length;\n+   * }</pre>\n+   * <p>\n+   * but is more efficient in both time and space. If tolerateInvalidSurrogatePairs is set to true, then\n+   * this method replaces unpaired surrogates with the default replacement character, else\n+   * this method throws {@link IllegalArgumentException}.\n+   *\n+   * <p>To ensure sufficient space in the output buffer, either call {@link #encodedLength} to\n+   * compute the exact amount needed, or leave room for {@code Utf8.MAX_BYTES_PER_CHAR *\n+   * sequence.length()}, which is the largest possible number of bytes that any input can be\n+   * encoded to.\n+   *\n+   * @param in     the input character sequence to be encoded\n+   * @param out    the target array\n+   * @param offset the starting offset in {@code bytes} to start writing at\n+   * @param length the length of the {@code bytes}, starting from {@code offset}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNjMxNQ=="}, "originalCommit": {"oid": "d48fb64e704cde1c766255434495d6b2fafa9bba"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Njk2NjgyOnYy", "diffSide": "RIGHT", "path": "CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNDoyMDoyMlrOGr86bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNDoyMDoyMlrOGr86bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODczOTk1MA==", "bodyText": "this should be 29.4.3", "url": "https://github.com/linkedin/rest.li/pull/344#discussion_r448739950", "createdAt": "2020-07-02T04:20:22Z", "author": {"login": "karthikbalasub"}, "path": "CHANGELOG.md", "diffHunk": "@@ -14,6 +14,9 @@ and what APIs have changed, if applicable.\n \n ## [Unreleased]\n \n+## [29.4.2] - 2020-07-01", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66f86c8a97480d4eee3bfabc30d67534fb644940"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 515, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}