{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMwOTEzMzA1", "number": 323, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMTozNTozNlrOEDorLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzo1MDoyN1rOED_e7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjQ3NTk3OnYy", "diffSide": "RIGHT", "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMTozNTozNlrOGgxRsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMToyNzo1NVrOGg1rLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxNDk2MA==", "bodyText": "can you test using PDL? not to say pdsc is not good for this kind of testing, But since we are migrating to PDL. Need to make sure PDL is actually working. Also if we use PDL now, we don't need to worry about later they are migrated in this MP", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437014960", "createdAt": "2020-06-08T21:35:36Z", "author": {"login": "junchuanwang"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +210,78 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  @DataProvider(name = \"withMultiDataTemplateCases\")\n+  private Object[][] createDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b9bcb1c1c900c2ed53ddefe26bc0f8d4ff81c0"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA4NzAyMA==", "bodyText": "Yes, PDL cases are added", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437087020", "createdAt": "2020-06-09T01:27:55Z", "author": {"login": "BrianPin"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +210,78 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  @DataProvider(name = \"withMultiDataTemplateCases\")\n+  private Object[][] createDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\"},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxNDk2MA=="}, "originalCommit": {"oid": "d4b9bcb1c1c900c2ed53ddefe26bc0f8d4ff81c0"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjQ3NzkyOnYy", "diffSide": "RIGHT", "path": "generator/src/main/java/com/linkedin/pegasus/generator/TemplateSpecGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMTozNjoyNlrOGgxTAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMToyNzo0MlrOGg1qtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxNTI5Ng==", "bodyText": "as we discussed offline, Please confirm if the inline typeref's dataSchemaLocation is also using enclosingSchema's location.", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437015296", "createdAt": "2020-06-08T21:36:26Z", "author": {"login": "junchuanwang"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/TemplateSpecGenerator.java", "diffHunk": "@@ -712,6 +712,7 @@ private ClassTemplateSpec generateFixed(FixedDataSchema schema)\n \n   private TyperefTemplateSpec generateTyperef(TyperefDataSchema schema, TyperefDataSchema originalTyperefSchema)\n   {\n+    pushCurrentLocation(_schemaResolver.nameToDataSchemaLocations().get(schema.getFullName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b9bcb1c1c900c2ed53ddefe26bc0f8d4ff81c0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA4NjkwMA==", "bodyText": "Junchuan, I confirmed this in my new added test case", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437086900", "createdAt": "2020-06-09T01:27:42Z", "author": {"login": "BrianPin"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/TemplateSpecGenerator.java", "diffHunk": "@@ -712,6 +712,7 @@ private ClassTemplateSpec generateFixed(FixedDataSchema schema)\n \n   private TyperefTemplateSpec generateTyperef(TyperefDataSchema schema, TyperefDataSchema originalTyperefSchema)\n   {\n+    pushCurrentLocation(_schemaResolver.nameToDataSchemaLocations().get(schema.getFullName()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxNTI5Ng=="}, "originalCommit": {"oid": "d4b9bcb1c1c900c2ed53ddefe26bc0f8d4ff81c0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzExNjM2OnYy", "diffSide": "RIGHT", "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMzoxODowMlrOGg3Y0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMzoxODowMlrOGg3Y0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExNTA4OQ==", "bodyText": "I think the only 2 cases you need are\n{\"BRecord.pdl\", \"InlineRecord.java\"},\n{\"InlineRecord.java\", \"BRecord.pdl\"},\"\nUnless you want to test duplicates  like you have here.", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437115089", "createdAt": "2020-06-09T03:18:02Z", "author": {"login": "Astro03"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +208,123 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  @DataProvider(name = \"with_typeref_field_in_record_pdsc\")\n+  private Object[][] createDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+            {\"PremiumService.pdsc\", \"IsoDuration.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_typeref_field_in_record_pdsc\")\n+  public void testDataTemplateGenerationOrderWithResolver(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  @DataProvider(name = \"with_typeref_field_in_record_pdl\")\n+  private Object[][] createCasesWithTyperefFieldInRecord()\n+  {\n+    return new Object[][]\n+        {\n+            {\"AField.pdl\", \"ARecord.pdl\", \"AField.java\", \"ARecord.java\"},\n+            {\"ARecord.pdl\", \"AField.pdl\", \"AField.java\", \"ARecord.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_typeref_field_in_record_pdl\")\n+  public void testCasesWithTyperefFieldInRecord(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  @DataProvider(name = \"with_inline_field_in_record_pdl\")\n+  private Object[][] createCasesWithInlineFieldInRecord()\n+  {\n+    return new Object[][]\n+        {\n+            {\"BRecord.pdl\", \"InlineRecord.java\", \"BRecord.java\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzExNzQ1OnYy", "diffSide": "RIGHT", "path": "generator/src/test/resources/generator/BRecord.pdl", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMzoxODo1MlrOGg3ZjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwODowNDoxNlrOGg9ZyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExNTI3Ng==", "bodyText": "nit: newline to end the file", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437115276", "createdAt": "2020-06-09T03:18:52Z", "author": {"login": "Astro03"}, "path": "generator/src/test/resources/generator/BRecord.pdl", "diffHunk": "@@ -0,0 +1,3 @@\n+record BRecord {\n+  bField: record InlineRecord {}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIxMzY0MA==", "bodyText": "done", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437213640", "createdAt": "2020-06-09T08:04:16Z", "author": {"login": "BrianPin"}, "path": "generator/src/test/resources/generator/BRecord.pdl", "diffHunk": "@@ -0,0 +1,3 @@\n+record BRecord {\n+  bField: record InlineRecord {}\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExNTI3Ng=="}, "originalCommit": {"oid": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzExOTE3OnYy", "diffSide": "RIGHT", "path": "generator/src/test/resources/referenceJava/BRecord.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMzoxOTo1N1rOGg3amw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwODowNDo1MlrOGg9bPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExNTU0Nw==", "bodyText": "nit: fill javadoc comment out?", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437115547", "createdAt": "2020-06-09T03:19:57Z", "author": {"login": "Astro03"}, "path": "generator/src/test/resources/referenceJava/BRecord.java", "diffHunk": "@@ -0,0 +1,135 @@\n+import java.util.List;\n+import javax.annotation.Generated;\n+import javax.annotation.Nonnull;\n+import com.linkedin.data.DataMap;\n+import com.linkedin.data.schema.PathSpec;\n+import com.linkedin.data.schema.RecordDataSchema;\n+import com.linkedin.data.schema.SchemaFormatType;\n+import com.linkedin.data.template.DataTemplateUtil;\n+import com.linkedin.data.template.GetMode;\n+import com.linkedin.data.template.RecordTemplate;\n+import com.linkedin.data.template.SetMode;\n+\n+\n+/**\n+ * ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIxNDAxMw==", "bodyText": "this is removed (by addressing Karthik's comment)", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437214013", "createdAt": "2020-06-09T08:04:52Z", "author": {"login": "BrianPin"}, "path": "generator/src/test/resources/referenceJava/BRecord.java", "diffHunk": "@@ -0,0 +1,135 @@\n+import java.util.List;\n+import javax.annotation.Generated;\n+import javax.annotation.Nonnull;\n+import com.linkedin.data.DataMap;\n+import com.linkedin.data.schema.PathSpec;\n+import com.linkedin.data.schema.RecordDataSchema;\n+import com.linkedin.data.schema.SchemaFormatType;\n+import com.linkedin.data.template.DataTemplateUtil;\n+import com.linkedin.data.template.GetMode;\n+import com.linkedin.data.template.RecordTemplate;\n+import com.linkedin.data.template.SetMode;\n+\n+\n+/**\n+ * ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExNTU0Nw=="}, "originalCommit": {"oid": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzEyMzE2OnYy", "diffSide": "RIGHT", "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMzoyMjoyOVrOGg3c-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwODowNjozN1rOGg9fKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExNjE1Mw==", "bodyText": "nit: testDataTemplateGenerationDeterminism  (the Deterministic in the sentence doesn't make sense)", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437116153", "createdAt": "2020-06-09T03:22:29Z", "author": {"login": "Astro03"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +208,123 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  @DataProvider(name = \"with_typeref_field_in_record_pdsc\")\n+  private Object[][] createDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+            {\"PremiumService.pdsc\", \"IsoDuration.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_typeref_field_in_record_pdsc\")\n+  public void testDataTemplateGenerationOrderWithResolver(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  @DataProvider(name = \"with_typeref_field_in_record_pdl\")\n+  private Object[][] createCasesWithTyperefFieldInRecord()\n+  {\n+    return new Object[][]\n+        {\n+            {\"AField.pdl\", \"ARecord.pdl\", \"AField.java\", \"ARecord.java\"},\n+            {\"ARecord.pdl\", \"AField.pdl\", \"AField.java\", \"ARecord.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_typeref_field_in_record_pdl\")\n+  public void testCasesWithTyperefFieldInRecord(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  @DataProvider(name = \"with_inline_field_in_record_pdl\")\n+  private Object[][] createCasesWithInlineFieldInRecord()\n+  {\n+    return new Object[][]\n+        {\n+            {\"BRecord.pdl\", \"InlineRecord.java\", \"BRecord.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_inline_field_in_record_pdl\")\n+  public void testCasesWithInlineFieldInRecord(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 1);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 1, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  private void testDataTemplateGenerationDeterministic(String[] pegasusFilenames, String[] javaFilenames)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIxNTAxNw==", "bodyText": "thanks, addressed", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437215017", "createdAt": "2020-06-09T08:06:37Z", "author": {"login": "BrianPin"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +208,123 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  @DataProvider(name = \"with_typeref_field_in_record_pdsc\")\n+  private Object[][] createDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+            {\"PremiumService.pdsc\", \"IsoDuration.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_typeref_field_in_record_pdsc\")\n+  public void testDataTemplateGenerationOrderWithResolver(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  @DataProvider(name = \"with_typeref_field_in_record_pdl\")\n+  private Object[][] createCasesWithTyperefFieldInRecord()\n+  {\n+    return new Object[][]\n+        {\n+            {\"AField.pdl\", \"ARecord.pdl\", \"AField.java\", \"ARecord.java\"},\n+            {\"ARecord.pdl\", \"AField.pdl\", \"AField.java\", \"ARecord.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_typeref_field_in_record_pdl\")\n+  public void testCasesWithTyperefFieldInRecord(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  @DataProvider(name = \"with_inline_field_in_record_pdl\")\n+  private Object[][] createCasesWithInlineFieldInRecord()\n+  {\n+    return new Object[][]\n+        {\n+            {\"BRecord.pdl\", \"InlineRecord.java\", \"BRecord.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_inline_field_in_record_pdl\")\n+  public void testCasesWithInlineFieldInRecord(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 1);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 1, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  private void testDataTemplateGenerationDeterministic(String[] pegasusFilenames, String[] javaFilenames)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExNjE1Mw=="}, "originalCommit": {"oid": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzEzNjI2OnYy", "diffSide": "RIGHT", "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMzozMTowNVrOGg3kyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjoyMTozM1rOGhScog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExODE1NQ==", "bodyText": "Oh, sorry, I just realized what you are doing with all these tests.\nSince you only really have one test with a nuance on the inputs, the better practice would be to have 1 DataProvider with your different tests as it's inputs.\ni.e.\ndata resolver\n{\n// typered fields with pdsc files\n{ ...}\n{...}\n// typeref field with pdl files\n{ ...}\n{ ... }\n// inline field with pdsc files\n{ ...}\n{...}\n//inline field with pdl files\n{ ...}\n{ ...}\n}\nthen your test would be just the one test you had.", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437118155", "createdAt": "2020-06-09T03:31:05Z", "author": {"login": "Astro03"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +208,123 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  @DataProvider(name = \"with_typeref_field_in_record_pdsc\")\n+  private Object[][] createDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+            {\"PremiumService.pdsc\", \"IsoDuration.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_typeref_field_in_record_pdsc\")\n+  public void testDataTemplateGenerationOrderWithResolver(String[] testArgs)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIxNTIyMQ==", "bodyText": "Yes, thanks, addressed into a single data provider \"test_schema_permutation_deterministic\"", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437215221", "createdAt": "2020-06-09T08:07:01Z", "author": {"login": "BrianPin"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +208,123 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  @DataProvider(name = \"with_typeref_field_in_record_pdsc\")\n+  private Object[][] createDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+            {\"PremiumService.pdsc\", \"IsoDuration.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_typeref_field_in_record_pdsc\")\n+  public void testDataTemplateGenerationOrderWithResolver(String[] testArgs)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExODE1NQ=="}, "originalCommit": {"oid": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU1ODQzNA==", "bodyText": "I see that you changed to a single data provider but you still have only 1 input arrray into your test, then within your test, you split it up by dividing by 2.\nYou should have two separate arrays, one for each variable. It makes it a lot easier to understand the logic within your code/test.", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437558434", "createdAt": "2020-06-09T16:21:33Z", "author": {"login": "Astro03"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +208,123 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  @DataProvider(name = \"with_typeref_field_in_record_pdsc\")\n+  private Object[][] createDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+            {\"PremiumService.pdsc\", \"IsoDuration.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_typeref_field_in_record_pdsc\")\n+  public void testDataTemplateGenerationOrderWithResolver(String[] testArgs)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExODE1NQ=="}, "originalCommit": {"oid": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzM0ODU4OnYy", "diffSide": "RIGHT", "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNTo0NToxMlrOGg5kOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjozNjo1OFrOGhTC9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1MDc3Ng==", "bodyText": "A better way to test this (and avoid having to update java files everytime code generation logic changes) is to take two arrays of Pegasus schemas as input (in different order) and then generate the source files and compare they are same.", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437150776", "createdAt": "2020-06-09T05:45:12Z", "author": {"login": "karthikbalasub"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +208,123 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  @DataProvider(name = \"with_typeref_field_in_record_pdsc\")\n+  private Object[][] createDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+            {\"PremiumService.pdsc\", \"IsoDuration.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_typeref_field_in_record_pdsc\")\n+  public void testDataTemplateGenerationOrderWithResolver(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  @DataProvider(name = \"with_typeref_field_in_record_pdl\")\n+  private Object[][] createCasesWithTyperefFieldInRecord()\n+  {\n+    return new Object[][]\n+        {\n+            {\"AField.pdl\", \"ARecord.pdl\", \"AField.java\", \"ARecord.java\"},\n+            {\"ARecord.pdl\", \"AField.pdl\", \"AField.java\", \"ARecord.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_typeref_field_in_record_pdl\")\n+  public void testCasesWithTyperefFieldInRecord(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  @DataProvider(name = \"with_inline_field_in_record_pdl\")\n+  private Object[][] createCasesWithInlineFieldInRecord()\n+  {\n+    return new Object[][]\n+        {\n+            {\"BRecord.pdl\", \"InlineRecord.java\", \"BRecord.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_inline_field_in_record_pdl\")\n+  public void testCasesWithInlineFieldInRecord(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 1);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 1, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  private void testDataTemplateGenerationDeterministic(String[] pegasusFilenames, String[] javaFilenames)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2MDE0Ng==", "bodyText": "That was my first attempt, sometime today in my chat with Astro, I changed to current way.\nI think ...... I can do the original way", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437160146", "createdAt": "2020-06-09T06:13:24Z", "author": {"login": "BrianPin"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +208,123 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  @DataProvider(name = \"with_typeref_field_in_record_pdsc\")\n+  private Object[][] createDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+            {\"PremiumService.pdsc\", \"IsoDuration.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_typeref_field_in_record_pdsc\")\n+  public void testDataTemplateGenerationOrderWithResolver(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  @DataProvider(name = \"with_typeref_field_in_record_pdl\")\n+  private Object[][] createCasesWithTyperefFieldInRecord()\n+  {\n+    return new Object[][]\n+        {\n+            {\"AField.pdl\", \"ARecord.pdl\", \"AField.java\", \"ARecord.java\"},\n+            {\"ARecord.pdl\", \"AField.pdl\", \"AField.java\", \"ARecord.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_typeref_field_in_record_pdl\")\n+  public void testCasesWithTyperefFieldInRecord(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  @DataProvider(name = \"with_inline_field_in_record_pdl\")\n+  private Object[][] createCasesWithInlineFieldInRecord()\n+  {\n+    return new Object[][]\n+        {\n+            {\"BRecord.pdl\", \"InlineRecord.java\", \"BRecord.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_inline_field_in_record_pdl\")\n+  public void testCasesWithInlineFieldInRecord(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 1);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 1, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  private void testDataTemplateGenerationDeterministic(String[] pegasusFilenames, String[] javaFilenames)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1MDc3Ng=="}, "originalCommit": {"oid": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2MzQwMQ==", "bodyText": "I think you can just generate MD5 for all the generated files together by xor-ing individual MD5s and compare. It would be simpler than current logic.\nSee https://stackoverflow.com/questions/47253864/order-independent-hash-in-java", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437163401", "createdAt": "2020-06-09T06:22:17Z", "author": {"login": "karthikbalasub"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +208,123 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  @DataProvider(name = \"with_typeref_field_in_record_pdsc\")\n+  private Object[][] createDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+            {\"PremiumService.pdsc\", \"IsoDuration.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_typeref_field_in_record_pdsc\")\n+  public void testDataTemplateGenerationOrderWithResolver(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  @DataProvider(name = \"with_typeref_field_in_record_pdl\")\n+  private Object[][] createCasesWithTyperefFieldInRecord()\n+  {\n+    return new Object[][]\n+        {\n+            {\"AField.pdl\", \"ARecord.pdl\", \"AField.java\", \"ARecord.java\"},\n+            {\"ARecord.pdl\", \"AField.pdl\", \"AField.java\", \"ARecord.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_typeref_field_in_record_pdl\")\n+  public void testCasesWithTyperefFieldInRecord(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  @DataProvider(name = \"with_inline_field_in_record_pdl\")\n+  private Object[][] createCasesWithInlineFieldInRecord()\n+  {\n+    return new Object[][]\n+        {\n+            {\"BRecord.pdl\", \"InlineRecord.java\", \"BRecord.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_inline_field_in_record_pdl\")\n+  public void testCasesWithInlineFieldInRecord(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 1);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 1, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  private void testDataTemplateGenerationDeterministic(String[] pegasusFilenames, String[] javaFilenames)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1MDc3Ng=="}, "originalCommit": {"oid": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2ODI0NQ==", "bodyText": "I was talking about this comment. What did i suggest?", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437568245", "createdAt": "2020-06-09T16:36:58Z", "author": {"login": "Astro03"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +208,123 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  @DataProvider(name = \"with_typeref_field_in_record_pdsc\")\n+  private Object[][] createDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+            {\"PremiumService.pdsc\", \"IsoDuration.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_typeref_field_in_record_pdsc\")\n+  public void testDataTemplateGenerationOrderWithResolver(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  @DataProvider(name = \"with_typeref_field_in_record_pdl\")\n+  private Object[][] createCasesWithTyperefFieldInRecord()\n+  {\n+    return new Object[][]\n+        {\n+            {\"AField.pdl\", \"ARecord.pdl\", \"AField.java\", \"ARecord.java\"},\n+            {\"ARecord.pdl\", \"AField.pdl\", \"AField.java\", \"ARecord.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_typeref_field_in_record_pdl\")\n+  public void testCasesWithTyperefFieldInRecord(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  @DataProvider(name = \"with_inline_field_in_record_pdl\")\n+  private Object[][] createCasesWithInlineFieldInRecord()\n+  {\n+    return new Object[][]\n+        {\n+            {\"BRecord.pdl\", \"InlineRecord.java\", \"BRecord.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_inline_field_in_record_pdl\")\n+  public void testCasesWithInlineFieldInRecord(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 1);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 1, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  private void testDataTemplateGenerationDeterministic(String[] pegasusFilenames, String[] javaFilenames)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1MDc3Ng=="}, "originalCommit": {"oid": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDIzMTA3OnYy", "diffSide": "RIGHT", "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDowMTowOFrOGhCJ4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzozOTo0M1rOGhVVEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5MTQ5MA==", "bodyText": "I suggest you return two arrays of strings as input.\nEg\n{{\"IsoDuration.pdsc\", \"PremiumService.pdsc\"}, {\"PremiumService.pdsc\", \"IsoDuration.pdsc\"}}\n\nAnd add a comment explaining why order is important for this test.", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437291490", "createdAt": "2020-06-09T10:01:08Z", "author": {"login": "karthikbalasub"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +206,62 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  @DataProvider(name = \"test_schema_permutation_deterministic\")\n+  private Object[][] createPermutedDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.pdsc\"},\n+            {\"AField.pdl\", \"ARecord.pdl\", \"ARecord.pdl\", \"AField.pdl\"},\n+            {\"BRecord.pdl\", \"BField.pdl\", \"BField.pdl\", \"BRecord.pdl\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "daf1944372684acf7166584d36b176fd99230d17"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYwNTY0OA==", "bodyText": "Both of the two points are addressed, I added a comment on the DataProvider, Please let me know if the comment is clear", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437605648", "createdAt": "2020-06-09T17:39:43Z", "author": {"login": "BrianPin"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +206,62 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  @DataProvider(name = \"test_schema_permutation_deterministic\")\n+  private Object[][] createPermutedDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.pdsc\"},\n+            {\"AField.pdl\", \"ARecord.pdl\", \"ARecord.pdl\", \"AField.pdl\"},\n+            {\"BRecord.pdl\", \"BField.pdl\", \"BField.pdl\", \"BRecord.pdl\"},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5MTQ5MA=="}, "originalCommit": {"oid": "daf1944372684acf7166584d36b176fd99230d17"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDI0MjE5OnYy", "diffSide": "RIGHT", "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDowNDowOFrOGhCQ0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzo0NzozMVrOGhVnTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5MzI2Ng==", "bodyText": "Is this guaranteed to return the files sorted alphabetically?", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437293266", "createdAt": "2020-06-09T10:04:08Z", "author": {"login": "karthikbalasub"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +206,62 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  @DataProvider(name = \"test_schema_permutation_deterministic\")\n+  private Object[][] createPermutedDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.pdsc\"},\n+            {\"AField.pdl\", \"ARecord.pdl\", \"ARecord.pdl\", \"AField.pdl\"},\n+            {\"BRecord.pdl\", \"BField.pdl\", \"BField.pdl\", \"BRecord.pdl\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"test_schema_permutation_deterministic\")\n+  public void testDataTemplateGenerationDeterminism(String[] testArgs)\n+      throws Exception\n+  {\n+    int permuteLength = testArgs.length / 2;\n+    String[] pegasusFilenames1 = Arrays.copyOfRange(testArgs, 0, permuteLength);\n+    String[] pegasusFilenames2 = Arrays.copyOfRange(testArgs, permuteLength, testArgs.length);\n+    File[] generatedFiles1 = generateDataTemplateFiles(pegasusFilenames1);\n+    File[] generatedFiles2 = generateDataTemplateFiles(pegasusFilenames2);\n+    checkGeneratedFilesConsistency(generatedFiles1, generatedFiles2);\n+  }\n+\n+  private File[] generateDataTemplateFiles(String[] pegasusFilenames) throws Exception\n+  {\n+    File tempDir = Files.createTempDirectory(\"restli\").toFile();\n+    File argFile = new File(tempDir, \"resolverPath\");\n+    Files.write(argFile.toPath(), Collections.singletonList(pegasusDir));\n+    System.setProperty(AbstractGenerator.GENERATOR_RESOLVER_PATH, String.format(\"@%s\", argFile.toPath()));\n+    String tempDirectoryPath1 = _tempDir.getAbsolutePath();\n+    String[] mainArgs = new String[pegasusFilenames.length + 1];\n+    mainArgs[0] = tempDirectoryPath1;\n+    for (int i = 0; i < pegasusFilenames.length; i++)\n+    {\n+      mainArgs[i+1] = new File(pegasusDir + FS + pegasusFilenames[i]).getAbsolutePath();\n+    }\n+    PegasusDataTemplateGenerator.main(mainArgs);\n+    File[] generatedFiles = _tempDir.listFiles((File dir, String name) -> name.endsWith(\".java\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "daf1944372684acf7166584d36b176fd99230d17"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYwNjQ4Mg==", "bodyText": "the returning files are not needed to be sorted, (if it sorts that is fine), the requirement is that for two consecutive calls of _tempDir.listFiles , the  returning files order shall be the same.", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437606482", "createdAt": "2020-06-09T17:41:05Z", "author": {"login": "BrianPin"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +206,62 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  @DataProvider(name = \"test_schema_permutation_deterministic\")\n+  private Object[][] createPermutedDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.pdsc\"},\n+            {\"AField.pdl\", \"ARecord.pdl\", \"ARecord.pdl\", \"AField.pdl\"},\n+            {\"BRecord.pdl\", \"BField.pdl\", \"BField.pdl\", \"BRecord.pdl\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"test_schema_permutation_deterministic\")\n+  public void testDataTemplateGenerationDeterminism(String[] testArgs)\n+      throws Exception\n+  {\n+    int permuteLength = testArgs.length / 2;\n+    String[] pegasusFilenames1 = Arrays.copyOfRange(testArgs, 0, permuteLength);\n+    String[] pegasusFilenames2 = Arrays.copyOfRange(testArgs, permuteLength, testArgs.length);\n+    File[] generatedFiles1 = generateDataTemplateFiles(pegasusFilenames1);\n+    File[] generatedFiles2 = generateDataTemplateFiles(pegasusFilenames2);\n+    checkGeneratedFilesConsistency(generatedFiles1, generatedFiles2);\n+  }\n+\n+  private File[] generateDataTemplateFiles(String[] pegasusFilenames) throws Exception\n+  {\n+    File tempDir = Files.createTempDirectory(\"restli\").toFile();\n+    File argFile = new File(tempDir, \"resolverPath\");\n+    Files.write(argFile.toPath(), Collections.singletonList(pegasusDir));\n+    System.setProperty(AbstractGenerator.GENERATOR_RESOLVER_PATH, String.format(\"@%s\", argFile.toPath()));\n+    String tempDirectoryPath1 = _tempDir.getAbsolutePath();\n+    String[] mainArgs = new String[pegasusFilenames.length + 1];\n+    mainArgs[0] = tempDirectoryPath1;\n+    for (int i = 0; i < pegasusFilenames.length; i++)\n+    {\n+      mainArgs[i+1] = new File(pegasusDir + FS + pegasusFilenames[i]).getAbsolutePath();\n+    }\n+    PegasusDataTemplateGenerator.main(mainArgs);\n+    File[] generatedFiles = _tempDir.listFiles((File dir, String name) -> name.endsWith(\".java\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5MzI2Ng=="}, "originalCommit": {"oid": "daf1944372684acf7166584d36b176fd99230d17"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxMDMxOA==", "bodyText": "I don't see that consecutive calls would return the same order: https://docs.oracle.com/javase/7/docs/api/java/io/File.html#listFiles()\nI suggest sorting the generateFiles array to be sure this cannot cause flakiness.", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437610318", "createdAt": "2020-06-09T17:47:31Z", "author": {"login": "karthikbalasub"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +206,62 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  @DataProvider(name = \"test_schema_permutation_deterministic\")\n+  private Object[][] createPermutedDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.pdsc\"},\n+            {\"AField.pdl\", \"ARecord.pdl\", \"ARecord.pdl\", \"AField.pdl\"},\n+            {\"BRecord.pdl\", \"BField.pdl\", \"BField.pdl\", \"BRecord.pdl\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"test_schema_permutation_deterministic\")\n+  public void testDataTemplateGenerationDeterminism(String[] testArgs)\n+      throws Exception\n+  {\n+    int permuteLength = testArgs.length / 2;\n+    String[] pegasusFilenames1 = Arrays.copyOfRange(testArgs, 0, permuteLength);\n+    String[] pegasusFilenames2 = Arrays.copyOfRange(testArgs, permuteLength, testArgs.length);\n+    File[] generatedFiles1 = generateDataTemplateFiles(pegasusFilenames1);\n+    File[] generatedFiles2 = generateDataTemplateFiles(pegasusFilenames2);\n+    checkGeneratedFilesConsistency(generatedFiles1, generatedFiles2);\n+  }\n+\n+  private File[] generateDataTemplateFiles(String[] pegasusFilenames) throws Exception\n+  {\n+    File tempDir = Files.createTempDirectory(\"restli\").toFile();\n+    File argFile = new File(tempDir, \"resolverPath\");\n+    Files.write(argFile.toPath(), Collections.singletonList(pegasusDir));\n+    System.setProperty(AbstractGenerator.GENERATOR_RESOLVER_PATH, String.format(\"@%s\", argFile.toPath()));\n+    String tempDirectoryPath1 = _tempDir.getAbsolutePath();\n+    String[] mainArgs = new String[pegasusFilenames.length + 1];\n+    mainArgs[0] = tempDirectoryPath1;\n+    for (int i = 0; i < pegasusFilenames.length; i++)\n+    {\n+      mainArgs[i+1] = new File(pegasusDir + FS + pegasusFilenames[i]).getAbsolutePath();\n+    }\n+    PegasusDataTemplateGenerator.main(mainArgs);\n+    File[] generatedFiles = _tempDir.listFiles((File dir, String name) -> name.endsWith(\".java\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5MzI2Ng=="}, "originalCommit": {"oid": "daf1944372684acf7166584d36b176fd99230d17"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjE4NjUzOnYy", "diffSide": "RIGHT", "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestTemplateSpecGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzo0Mjo1MlrOGhVceg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzo0Mjo1MlrOGhVceg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYwNzU0Ng==", "bodyText": "This change here is happening is only because the test wasn't need to mock the schema location before, now it has to, so I have to patch this test, it is not because of any additional logic change", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437607546", "createdAt": "2020-06-09T17:42:52Z", "author": {"login": "BrianPin"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestTemplateSpecGenerator.java", "diffHunk": "@@ -72,14 +74,18 @@\n   private AtomicInteger _uniqueNumberGenerator;\n   @Mock\n   private DataSchemaResolver _resolver;\n-  @Mock\n   private DataSchemaLocation _location;\n \n   @BeforeMethod\n   public void initMocks() {\n     MockitoAnnotations.initMocks(this);\n     _uniqueNumberGenerator = new AtomicInteger();\n-    Mockito.when(_resolver.nameToDataSchemaLocations()).thenReturn(Collections.singletonMap(INPUT_SCHEMA_NAME, _location));\n+    _location = new StringDataSchemaLocation(\"location\");\n+    HashMap<String, DataSchemaLocation> schemaToLocation = new HashMap<>();\n+    schemaToLocation.put(INPUT_SCHEMA_NAME, _location);\n+    schemaToLocation.put(CUSTOM_TYPE_1.getFullName(), _location);\n+    schemaToLocation.put(CUSTOM_TYPE_2.getFullName(), _location);\n+    Mockito.when(_resolver.nameToDataSchemaLocations()).thenReturn(schemaToLocation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "387e8f5da5715c676ef045d4233ab036ba3bdfd9"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjIxMjkzOnYy", "diffSide": "RIGHT", "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzo1MDoyN1rOGhVtuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMTo0NzozMFrOGhiEWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxMTk2Mw==", "bodyText": "I guess I made a mistake in my suggestion, what I wanted is for this method to take 2 args:\n(String[] inputSchemasOrder1, String[] inputSchemasOrder2)", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437611963", "createdAt": "2020-06-09T17:50:27Z", "author": {"login": "karthikbalasub"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +206,64 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  /**\n+   *\n+   * @return an array of test cases where each case has two array of test schema file names. Those file names are\n+   *   in the different permutations of same group of test schema files\n+   */\n+  @DataProvider(name = \"test_schema_permutation_determinisim\")\n+  private Object[][] createPermutedDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {new String[]{\"IsoDuration.pdsc\", \"PremiumService.pdsc\"}, new String[]{\"PremiumService.pdsc\", \"IsoDuration.pdsc\"}},\n+            {new String[]{\"AField.pdl\", \"ARecord.pdl\"}, new String[]{\"ARecord.pdl\", \"AField.pdl\"}},\n+            {new String[]{\"BRecord.pdl\", \"BField.pdl\"}, new String[]{\"BField.pdl\", \"BRecord.pdl\"}},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"test_schema_permutation_determinisim\")\n+  public void testDataTemplateGenerationDeterminism(String[][] testArgs)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "387e8f5da5715c676ef045d4233ab036ba3bdfd9"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYyNDI4NQ==", "bodyText": "I agree, is this not how this test framework organizes the inputs for DataProviders?", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437624285", "createdAt": "2020-06-09T18:11:46Z", "author": {"login": "Astro03"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +206,64 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  /**\n+   *\n+   * @return an array of test cases where each case has two array of test schema file names. Those file names are\n+   *   in the different permutations of same group of test schema files\n+   */\n+  @DataProvider(name = \"test_schema_permutation_determinisim\")\n+  private Object[][] createPermutedDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {new String[]{\"IsoDuration.pdsc\", \"PremiumService.pdsc\"}, new String[]{\"PremiumService.pdsc\", \"IsoDuration.pdsc\"}},\n+            {new String[]{\"AField.pdl\", \"ARecord.pdl\"}, new String[]{\"ARecord.pdl\", \"AField.pdl\"}},\n+            {new String[]{\"BRecord.pdl\", \"BField.pdl\"}, new String[]{\"BField.pdl\", \"BRecord.pdl\"}},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"test_schema_permutation_determinisim\")\n+  public void testDataTemplateGenerationDeterminism(String[][] testArgs)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxMTk2Mw=="}, "originalCommit": {"oid": "387e8f5da5715c676ef045d4233ab036ba3bdfd9"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgxNDM2MQ==", "bodyText": "This is addressed", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437814361", "createdAt": "2020-06-10T01:47:30Z", "author": {"login": "BrianPin"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +206,64 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  /**\n+   *\n+   * @return an array of test cases where each case has two array of test schema file names. Those file names are\n+   *   in the different permutations of same group of test schema files\n+   */\n+  @DataProvider(name = \"test_schema_permutation_determinisim\")\n+  private Object[][] createPermutedDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {new String[]{\"IsoDuration.pdsc\", \"PremiumService.pdsc\"}, new String[]{\"PremiumService.pdsc\", \"IsoDuration.pdsc\"}},\n+            {new String[]{\"AField.pdl\", \"ARecord.pdl\"}, new String[]{\"ARecord.pdl\", \"AField.pdl\"}},\n+            {new String[]{\"BRecord.pdl\", \"BField.pdl\"}, new String[]{\"BField.pdl\", \"BRecord.pdl\"}},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"test_schema_permutation_determinisim\")\n+  public void testDataTemplateGenerationDeterminism(String[][] testArgs)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxMTk2Mw=="}, "originalCommit": {"oid": "387e8f5da5715c676ef045d4233ab036ba3bdfd9"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 494, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}