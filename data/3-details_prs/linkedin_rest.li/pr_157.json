{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MTY5OTQx", "number": 157, "title": "Update Data Schema Doc to add PDL content.", "bodyText": "This PR is updating Data Schema Doc to add PDL content.\n\nremove Data-Schema-and Templates page\nRe-organize the previous content into 2 parts : Data Schemas and Data.\n\n\nData Schemas contains PDL Syntax, PDSC Syntax, Avro Translation and Java Binding.\nData contains \"How Data is Serialized for Transport\" and \"How Data is Represented in Memory\".", "createdAt": "2020-01-04T01:20:48Z", "url": "https://github.com/linkedin/rest.li/pull/157", "merged": true, "mergeCommit": {"oid": "1903cb8e38d76df0327ef1b2b8d4ed62c47e0140"}, "closed": true, "closedAt": "2020-01-10T23:38:01Z", "author": {"login": "nickibi"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb24G96AH2gAyMzU5MTY5OTQxOmY2ZmI0NGQzOWMyZGQwYzVhNDA0ZmQ1MDIwODZkNDQ5Y2ExNDgzNTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb5HCbaAFqTM0MTQ3MTUxMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f6fb44d39c2dd0c5a404fd502086d449ca148358", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/f6fb44d39c2dd0c5a404fd502086d449ca148358", "committedDate": "2020-01-04T00:49:08Z", "message": "Update Data Schema doc to add PDL content"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/82a73b73d1e48aef68cf4d59ab52ba082f38f2e8", "committedDate": "2020-01-04T01:08:56Z", "message": "Update Data Schema doc to add PDL content"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4OTE4NDEz", "url": "https://github.com/linkedin/rest.li/pull/157#pullrequestreview-338918413", "createdAt": "2020-01-06T21:52:49Z", "commit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "state": "COMMENTED", "comments": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMTo1Mjo0OVrOFaqVGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMjoxOTo1N1rOFauYVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUwMDgyNA==", "bodyText": "This is not correct. doc is not specific to enums. Also for enum symbol docs, we just use java comment syntax /**...*/", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363500824", "createdAt": "2020-01-06T21:52:49Z", "author": {"login": "karthikbalasub"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema\n+    (required).\n+  - `namespace` qualifies the namespace for the named\n+    schema.\n+  - `package` qualifies the language binding\n+    namespace for the named schema (optional). If this is not specified,\n+    language  bindingclass for the named schema will use `namespace` as\n+    its default namespace.\n+  - `doc` provides documentation to the user of this\n+    named schema (optional).\n+  - `import` qualifies the name of object which is used in the schema.(optional).\n+\n+The named schemas with type \u201cenum\u201d also supports a `doc`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUwMTcwMQ==", "bodyText": "PDL doesn't have type as attribute anymore, we just allow the actual type (enum, record or typeref) to be used at the top level.", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363501701", "createdAt": "2020-01-06T21:55:10Z", "author": {"login": "karthikbalasub"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUwMTg3OA==", "bodyText": "same here, there is no name attribute, name is now part of the type definition.", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363501878", "createdAt": "2020-01-06T21:55:39Z", "author": {"login": "karthikbalasub"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUwMjM4NA==", "bodyText": "doc is no longer an atribute, we just use javadoc style comments for doc.", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363502384", "createdAt": "2020-01-06T21:56:53Z", "author": {"login": "karthikbalasub"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema\n+    (required).\n+  - `namespace` qualifies the namespace for the named\n+    schema.\n+  - `package` qualifies the language binding\n+    namespace for the named schema (optional). If this is not specified,\n+    language  bindingclass for the named schema will use `namespace` as\n+    its default namespace.\n+  - `doc` provides documentation to the user of this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUwMjc3OA==", "bodyText": "I think we can delete this section as each sub-section has specific examples.", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363502778", "createdAt": "2020-01-06T21:57:56Z", "author": {"login": "karthikbalasub"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema\n+    (required).\n+  - `namespace` qualifies the namespace for the named\n+    schema.\n+  - `package` qualifies the language binding\n+    namespace for the named schema (optional). If this is not specified,\n+    language  bindingclass for the named schema will use `namespace` as\n+    its default namespace.\n+  - `doc` provides documentation to the user of this\n+    named schema (optional).\n+  - `import` qualifies the name of object which is used in the schema.(optional).\n+\n+The named schemas with type \u201cenum\u201d also supports a `doc`\n+attribute to provide documentation for each enum symbol.\n+\n+**Note:** Due to the addition of doclint in JDK8, anything under the\n+`doc`  attribute must be W3C HTML 4.01 compliant. This is\n+because the contents of this string will appear as Javadocs in the\n+generated Java \u2018data template\u2019 classes later. Please take this into\n+consideration when writing your documentation.\n+\n+The following are a few example schemas and their file names.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2Mzg0Nw==", "bodyText": "Import should be a separate section outside records.", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363563847", "createdAt": "2020-01-07T02:01:41Z", "author": {"login": "karthikbalasub"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema\n+    (required).\n+  - `namespace` qualifies the namespace for the named\n+    schema.\n+  - `package` qualifies the language binding\n+    namespace for the named schema (optional). If this is not specified,\n+    language  bindingclass for the named schema will use `namespace` as\n+    its default namespace.\n+  - `doc` provides documentation to the user of this\n+    named schema (optional).\n+  - `import` qualifies the name of object which is used in the schema.(optional).\n+\n+The named schemas with type \u201cenum\u201d also supports a `doc`\n+attribute to provide documentation for each enum symbol.\n+\n+**Note:** Due to the addition of doclint in JDK8, anything under the\n+`doc`  attribute must be W3C HTML 4.01 compliant. This is\n+because the contents of this string will appear as Javadocs in the\n+generated Java \u2018data template\u2019 classes later. Please take this into\n+consideration when writing your documentation.\n+\n+The following are a few example schemas and their file names.\n+\n+\n+com/linkedin/pegasus/generator/examples/Foo.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, \n+    /**\n+     * A foo record\n+     */\n+    record Foo {\n+      intField: int\n+      longField: long\n+      floatField: float\n+      doubleField: double\n+      bytesField: bytes\n+      stringField: string\n+      intArrayField: array[int]\n+      stringMapField: map[string, string]\n+      unionField: union[int, string, Foo, array[string], map[string, long]]\n+    }, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/FooWithNamespaceOverride.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+package com.linkedin.pegasus.generator.examples.`record`\n+\n+/**\n+ * A foo record\n+ */\n+record FooWithNamespaceOverride {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  fruitsField: Fruits\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, Fruits, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/Fruits.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  /**\n+   * A red, yellow or green fruit.\n+   */\n+  APPLE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  BANANA\n+\n+  /**\n+   * An orange fruit.\n+   */\n+  ORANGE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  PINEAPPLE\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/MD5.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * MD5\n+ */\n+fixed MD5 16\n+```\n+\n+com/linkedin/pegasus/generator/examples/StringList.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A list of strings\n+ */\n+record StringList {\n+  element: string\n+  next: optional \n+\n+    /**\n+     * A list of strings\n+     */\n+    record StringList {\n+      element: string\n+      next: optional StringList\n+    }\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/InlinedExample.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Example on how you can declare an enum and a record inside another record\n+ */\n+record InlinedExample {\n+\n+  /**\n+   * This is how we inline enum declaration without creating a new pdl file\n+   */\n+  @symbolDocs.FOO = \"It's a foo!\"\n+  @symbolDocs.NONE = \"It's a baz!\"\n+  @symbolDocs.HASH = \"It's a bar!\"\n+  myEnumField: enum EnumDeclarationInTheSameFile {\n+    FOO\n+    BAR\n+    BAZ\n+  }\n+\n+  /**\n+   * A regular string\n+   */\n+  stringField: string\n+\n+  /**\n+   * A regular int\n+   */\n+  intField: int\n+\n+  /**\n+   * In this example we will declare a record and an enum inside a union\n+   */\n+  UnionFieldWithInlineRecordAndEnum: optional union[record myRecord {\n+\n+    /**\n+     * random int field\n+     */\n+    foo1: int\n+\n+    /**\n+     * random int field\n+     */\n+    foo2: int\n+  }, \n+    /**\n+     * Random enum\n+     */\n+    enum anotherEnum {\n+\n+      /**\n+       * description about FOOFOO\n+       */\n+      FOOFOO\n+\n+      /**\n+       * description about BARBAR\n+       */\n+      BARBAR\n+    }]\n+}\n+```\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive type, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+A optional field may have default value.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example : \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+\n+### Import", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 335}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2Mzk0Ng==", "bodyText": "Same for this as this applies to all types, not just records", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363563946", "createdAt": "2020-01-07T02:02:15Z", "author": {"login": "karthikbalasub"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema\n+    (required).\n+  - `namespace` qualifies the namespace for the named\n+    schema.\n+  - `package` qualifies the language binding\n+    namespace for the named schema (optional). If this is not specified,\n+    language  bindingclass for the named schema will use `namespace` as\n+    its default namespace.\n+  - `doc` provides documentation to the user of this\n+    named schema (optional).\n+  - `import` qualifies the name of object which is used in the schema.(optional).\n+\n+The named schemas with type \u201cenum\u201d also supports a `doc`\n+attribute to provide documentation for each enum symbol.\n+\n+**Note:** Due to the addition of doclint in JDK8, anything under the\n+`doc`  attribute must be W3C HTML 4.01 compliant. This is\n+because the contents of this string will appear as Javadocs in the\n+generated Java \u2018data template\u2019 classes later. Please take this into\n+consideration when writing your documentation.\n+\n+The following are a few example schemas and their file names.\n+\n+\n+com/linkedin/pegasus/generator/examples/Foo.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, \n+    /**\n+     * A foo record\n+     */\n+    record Foo {\n+      intField: int\n+      longField: long\n+      floatField: float\n+      doubleField: double\n+      bytesField: bytes\n+      stringField: string\n+      intArrayField: array[int]\n+      stringMapField: map[string, string]\n+      unionField: union[int, string, Foo, array[string], map[string, long]]\n+    }, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/FooWithNamespaceOverride.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+package com.linkedin.pegasus.generator.examples.`record`\n+\n+/**\n+ * A foo record\n+ */\n+record FooWithNamespaceOverride {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  fruitsField: Fruits\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, Fruits, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/Fruits.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  /**\n+   * A red, yellow or green fruit.\n+   */\n+  APPLE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  BANANA\n+\n+  /**\n+   * An orange fruit.\n+   */\n+  ORANGE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  PINEAPPLE\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/MD5.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * MD5\n+ */\n+fixed MD5 16\n+```\n+\n+com/linkedin/pegasus/generator/examples/StringList.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A list of strings\n+ */\n+record StringList {\n+  element: string\n+  next: optional \n+\n+    /**\n+     * A list of strings\n+     */\n+    record StringList {\n+      element: string\n+      next: optional StringList\n+    }\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/InlinedExample.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Example on how you can declare an enum and a record inside another record\n+ */\n+record InlinedExample {\n+\n+  /**\n+   * This is how we inline enum declaration without creating a new pdl file\n+   */\n+  @symbolDocs.FOO = \"It's a foo!\"\n+  @symbolDocs.NONE = \"It's a baz!\"\n+  @symbolDocs.HASH = \"It's a bar!\"\n+  myEnumField: enum EnumDeclarationInTheSameFile {\n+    FOO\n+    BAR\n+    BAZ\n+  }\n+\n+  /**\n+   * A regular string\n+   */\n+  stringField: string\n+\n+  /**\n+   * A regular int\n+   */\n+  intField: int\n+\n+  /**\n+   * In this example we will declare a record and an enum inside a union\n+   */\n+  UnionFieldWithInlineRecordAndEnum: optional union[record myRecord {\n+\n+    /**\n+     * random int field\n+     */\n+    foo1: int\n+\n+    /**\n+     * random int field\n+     */\n+    foo2: int\n+  }, \n+    /**\n+     * Random enum\n+     */\n+    enum anotherEnum {\n+\n+      /**\n+       * description about FOOFOO\n+       */\n+      FOOFOO\n+\n+      /**\n+       * description about BARBAR\n+       */\n+      BARBAR\n+    }]\n+}\n+```\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive type, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+A optional field may have default value.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example : \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+\n+### Import\n+\n+1. If the type is outside the root namespace of the document, you need to add it as an import.\n+\n+2. If the type is declared outside the document, you need to add it as an import.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.imports\n+\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record Example {\n+  /**\n+   * Requires an import since this type is outside the root namespace and is not declared in this file.\n+   */\n+  externalOutsideNS: Simple\n+}\n+```\n+\n+**Note:** \n+- When multiple referenced types with the same unqualified name may be imported, \n+the type with the alphabetically first namespace is chosen. \n+(e.g. \"com.a.b.c.Foo\" is chosen over \"com.x.y.z.Foo\") \n+\n+- Any type that is not imported and is not within the namespace from which it's referenced must be referenced by\n+fully qualified name.\n+\n+\n+### Deprecation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 364}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2NDA2Mg==", "bodyText": "Comment is wrong, f1 and b1 are switched", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363564062", "createdAt": "2020-01-07T02:02:58Z", "author": {"login": "karthikbalasub"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema\n+    (required).\n+  - `namespace` qualifies the namespace for the named\n+    schema.\n+  - `package` qualifies the language binding\n+    namespace for the named schema (optional). If this is not specified,\n+    language  bindingclass for the named schema will use `namespace` as\n+    its default namespace.\n+  - `doc` provides documentation to the user of this\n+    named schema (optional).\n+  - `import` qualifies the name of object which is used in the schema.(optional).\n+\n+The named schemas with type \u201cenum\u201d also supports a `doc`\n+attribute to provide documentation for each enum symbol.\n+\n+**Note:** Due to the addition of doclint in JDK8, anything under the\n+`doc`  attribute must be W3C HTML 4.01 compliant. This is\n+because the contents of this string will appear as Javadocs in the\n+generated Java \u2018data template\u2019 classes later. Please take this into\n+consideration when writing your documentation.\n+\n+The following are a few example schemas and their file names.\n+\n+\n+com/linkedin/pegasus/generator/examples/Foo.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, \n+    /**\n+     * A foo record\n+     */\n+    record Foo {\n+      intField: int\n+      longField: long\n+      floatField: float\n+      doubleField: double\n+      bytesField: bytes\n+      stringField: string\n+      intArrayField: array[int]\n+      stringMapField: map[string, string]\n+      unionField: union[int, string, Foo, array[string], map[string, long]]\n+    }, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/FooWithNamespaceOverride.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+package com.linkedin.pegasus.generator.examples.`record`\n+\n+/**\n+ * A foo record\n+ */\n+record FooWithNamespaceOverride {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  fruitsField: Fruits\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, Fruits, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/Fruits.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  /**\n+   * A red, yellow or green fruit.\n+   */\n+  APPLE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  BANANA\n+\n+  /**\n+   * An orange fruit.\n+   */\n+  ORANGE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  PINEAPPLE\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/MD5.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * MD5\n+ */\n+fixed MD5 16\n+```\n+\n+com/linkedin/pegasus/generator/examples/StringList.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A list of strings\n+ */\n+record StringList {\n+  element: string\n+  next: optional \n+\n+    /**\n+     * A list of strings\n+     */\n+    record StringList {\n+      element: string\n+      next: optional StringList\n+    }\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/InlinedExample.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Example on how you can declare an enum and a record inside another record\n+ */\n+record InlinedExample {\n+\n+  /**\n+   * This is how we inline enum declaration without creating a new pdl file\n+   */\n+  @symbolDocs.FOO = \"It's a foo!\"\n+  @symbolDocs.NONE = \"It's a baz!\"\n+  @symbolDocs.HASH = \"It's a bar!\"\n+  myEnumField: enum EnumDeclarationInTheSameFile {\n+    FOO\n+    BAR\n+    BAZ\n+  }\n+\n+  /**\n+   * A regular string\n+   */\n+  stringField: string\n+\n+  /**\n+   * A regular int\n+   */\n+  intField: int\n+\n+  /**\n+   * In this example we will declare a record and an enum inside a union\n+   */\n+  UnionFieldWithInlineRecordAndEnum: optional union[record myRecord {\n+\n+    /**\n+     * random int field\n+     */\n+    foo1: int\n+\n+    /**\n+     * random int field\n+     */\n+    foo2: int\n+  }, \n+    /**\n+     * Random enum\n+     */\n+    enum anotherEnum {\n+\n+      /**\n+       * description about FOOFOO\n+       */\n+      FOOFOO\n+\n+      /**\n+       * description about BARBAR\n+       */\n+      BARBAR\n+    }]\n+}\n+```\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive type, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+A optional field may have default value.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example : \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+\n+### Import\n+\n+1. If the type is outside the root namespace of the document, you need to add it as an import.\n+\n+2. If the type is declared outside the document, you need to add it as an import.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.imports\n+\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record Example {\n+  /**\n+   * Requires an import since this type is outside the root namespace and is not declared in this file.\n+   */\n+  externalOutsideNS: Simple\n+}\n+```\n+\n+**Note:** \n+- When multiple referenced types with the same unqualified name may be imported, \n+the type with the alphabetically first namespace is chosen. \n+(e.g. \"com.a.b.c.Foo\" is chosen over \"com.x.y.z.Foo\") \n+\n+- Any type that is not imported and is not within the namespace from which it's referenced must be referenced by\n+fully qualified name.\n+\n+\n+### Deprecation\n+Types and fields can be deprecated by adding @deprecated annotation.\n+\n+For example :\n+\n+```\n+@deprecated = \"Use record X instead.\"\n+record Example {\n+  @deprecated = \"Use field x instead.\"\n+  field: string\n+}\n+```\n+\n+### Including fields\n+\n+Record can include fields from other record.\n+\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields f1 from itself and b1 from Bar", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 387}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2NDgwNQ==", "bodyText": "include an example with multiple includes", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363564805", "createdAt": "2020-01-07T02:06:58Z", "author": {"login": "karthikbalasub"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema\n+    (required).\n+  - `namespace` qualifies the namespace for the named\n+    schema.\n+  - `package` qualifies the language binding\n+    namespace for the named schema (optional). If this is not specified,\n+    language  bindingclass for the named schema will use `namespace` as\n+    its default namespace.\n+  - `doc` provides documentation to the user of this\n+    named schema (optional).\n+  - `import` qualifies the name of object which is used in the schema.(optional).\n+\n+The named schemas with type \u201cenum\u201d also supports a `doc`\n+attribute to provide documentation for each enum symbol.\n+\n+**Note:** Due to the addition of doclint in JDK8, anything under the\n+`doc`  attribute must be W3C HTML 4.01 compliant. This is\n+because the contents of this string will appear as Javadocs in the\n+generated Java \u2018data template\u2019 classes later. Please take this into\n+consideration when writing your documentation.\n+\n+The following are a few example schemas and their file names.\n+\n+\n+com/linkedin/pegasus/generator/examples/Foo.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, \n+    /**\n+     * A foo record\n+     */\n+    record Foo {\n+      intField: int\n+      longField: long\n+      floatField: float\n+      doubleField: double\n+      bytesField: bytes\n+      stringField: string\n+      intArrayField: array[int]\n+      stringMapField: map[string, string]\n+      unionField: union[int, string, Foo, array[string], map[string, long]]\n+    }, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/FooWithNamespaceOverride.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+package com.linkedin.pegasus.generator.examples.`record`\n+\n+/**\n+ * A foo record\n+ */\n+record FooWithNamespaceOverride {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  fruitsField: Fruits\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, Fruits, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/Fruits.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  /**\n+   * A red, yellow or green fruit.\n+   */\n+  APPLE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  BANANA\n+\n+  /**\n+   * An orange fruit.\n+   */\n+  ORANGE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  PINEAPPLE\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/MD5.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * MD5\n+ */\n+fixed MD5 16\n+```\n+\n+com/linkedin/pegasus/generator/examples/StringList.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A list of strings\n+ */\n+record StringList {\n+  element: string\n+  next: optional \n+\n+    /**\n+     * A list of strings\n+     */\n+    record StringList {\n+      element: string\n+      next: optional StringList\n+    }\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/InlinedExample.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Example on how you can declare an enum and a record inside another record\n+ */\n+record InlinedExample {\n+\n+  /**\n+   * This is how we inline enum declaration without creating a new pdl file\n+   */\n+  @symbolDocs.FOO = \"It's a foo!\"\n+  @symbolDocs.NONE = \"It's a baz!\"\n+  @symbolDocs.HASH = \"It's a bar!\"\n+  myEnumField: enum EnumDeclarationInTheSameFile {\n+    FOO\n+    BAR\n+    BAZ\n+  }\n+\n+  /**\n+   * A regular string\n+   */\n+  stringField: string\n+\n+  /**\n+   * A regular int\n+   */\n+  intField: int\n+\n+  /**\n+   * In this example we will declare a record and an enum inside a union\n+   */\n+  UnionFieldWithInlineRecordAndEnum: optional union[record myRecord {\n+\n+    /**\n+     * random int field\n+     */\n+    foo1: int\n+\n+    /**\n+     * random int field\n+     */\n+    foo2: int\n+  }, \n+    /**\n+     * Random enum\n+     */\n+    enum anotherEnum {\n+\n+      /**\n+       * description about FOOFOO\n+       */\n+      FOOFOO\n+\n+      /**\n+       * description about BARBAR\n+       */\n+      BARBAR\n+    }]\n+}\n+```\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive type, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+A optional field may have default value.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example : \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+\n+### Import\n+\n+1. If the type is outside the root namespace of the document, you need to add it as an import.\n+\n+2. If the type is declared outside the document, you need to add it as an import.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.imports\n+\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record Example {\n+  /**\n+   * Requires an import since this type is outside the root namespace and is not declared in this file.\n+   */\n+  externalOutsideNS: Simple\n+}\n+```\n+\n+**Note:** \n+- When multiple referenced types with the same unqualified name may be imported, \n+the type with the alphabetically first namespace is chosen. \n+(e.g. \"com.a.b.c.Foo\" is chosen over \"com.x.y.z.Foo\") \n+\n+- Any type that is not imported and is not within the namespace from which it's referenced must be referenced by\n+fully qualified name.\n+\n+\n+### Deprecation\n+Types and fields can be deprecated by adding @deprecated annotation.\n+\n+For example :\n+\n+```\n+@deprecated = \"Use record X instead.\"\n+record Example {\n+  @deprecated = \"Use field x instead.\"\n+  field: string\n+}\n+```\n+\n+### Including fields\n+\n+Record can include fields from other record.\n+\n+For example : ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 381}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2NDg4OA==", "bodyText": "Update text: include fields from one or more other records.", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363564888", "createdAt": "2020-01-07T02:07:28Z", "author": {"login": "karthikbalasub"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema\n+    (required).\n+  - `namespace` qualifies the namespace for the named\n+    schema.\n+  - `package` qualifies the language binding\n+    namespace for the named schema (optional). If this is not specified,\n+    language  bindingclass for the named schema will use `namespace` as\n+    its default namespace.\n+  - `doc` provides documentation to the user of this\n+    named schema (optional).\n+  - `import` qualifies the name of object which is used in the schema.(optional).\n+\n+The named schemas with type \u201cenum\u201d also supports a `doc`\n+attribute to provide documentation for each enum symbol.\n+\n+**Note:** Due to the addition of doclint in JDK8, anything under the\n+`doc`  attribute must be W3C HTML 4.01 compliant. This is\n+because the contents of this string will appear as Javadocs in the\n+generated Java \u2018data template\u2019 classes later. Please take this into\n+consideration when writing your documentation.\n+\n+The following are a few example schemas and their file names.\n+\n+\n+com/linkedin/pegasus/generator/examples/Foo.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, \n+    /**\n+     * A foo record\n+     */\n+    record Foo {\n+      intField: int\n+      longField: long\n+      floatField: float\n+      doubleField: double\n+      bytesField: bytes\n+      stringField: string\n+      intArrayField: array[int]\n+      stringMapField: map[string, string]\n+      unionField: union[int, string, Foo, array[string], map[string, long]]\n+    }, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/FooWithNamespaceOverride.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+package com.linkedin.pegasus.generator.examples.`record`\n+\n+/**\n+ * A foo record\n+ */\n+record FooWithNamespaceOverride {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  fruitsField: Fruits\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, Fruits, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/Fruits.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  /**\n+   * A red, yellow or green fruit.\n+   */\n+  APPLE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  BANANA\n+\n+  /**\n+   * An orange fruit.\n+   */\n+  ORANGE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  PINEAPPLE\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/MD5.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * MD5\n+ */\n+fixed MD5 16\n+```\n+\n+com/linkedin/pegasus/generator/examples/StringList.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A list of strings\n+ */\n+record StringList {\n+  element: string\n+  next: optional \n+\n+    /**\n+     * A list of strings\n+     */\n+    record StringList {\n+      element: string\n+      next: optional StringList\n+    }\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/InlinedExample.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Example on how you can declare an enum and a record inside another record\n+ */\n+record InlinedExample {\n+\n+  /**\n+   * This is how we inline enum declaration without creating a new pdl file\n+   */\n+  @symbolDocs.FOO = \"It's a foo!\"\n+  @symbolDocs.NONE = \"It's a baz!\"\n+  @symbolDocs.HASH = \"It's a bar!\"\n+  myEnumField: enum EnumDeclarationInTheSameFile {\n+    FOO\n+    BAR\n+    BAZ\n+  }\n+\n+  /**\n+   * A regular string\n+   */\n+  stringField: string\n+\n+  /**\n+   * A regular int\n+   */\n+  intField: int\n+\n+  /**\n+   * In this example we will declare a record and an enum inside a union\n+   */\n+  UnionFieldWithInlineRecordAndEnum: optional union[record myRecord {\n+\n+    /**\n+     * random int field\n+     */\n+    foo1: int\n+\n+    /**\n+     * random int field\n+     */\n+    foo2: int\n+  }, \n+    /**\n+     * Random enum\n+     */\n+    enum anotherEnum {\n+\n+      /**\n+       * description about FOOFOO\n+       */\n+      FOOFOO\n+\n+      /**\n+       * description about BARBAR\n+       */\n+      BARBAR\n+    }]\n+}\n+```\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive type, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+A optional field may have default value.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example : \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+\n+### Import\n+\n+1. If the type is outside the root namespace of the document, you need to add it as an import.\n+\n+2. If the type is declared outside the document, you need to add it as an import.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.imports\n+\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record Example {\n+  /**\n+   * Requires an import since this type is outside the root namespace and is not declared in this file.\n+   */\n+  externalOutsideNS: Simple\n+}\n+```\n+\n+**Note:** \n+- When multiple referenced types with the same unqualified name may be imported, \n+the type with the alphabetically first namespace is chosen. \n+(e.g. \"com.a.b.c.Foo\" is chosen over \"com.x.y.z.Foo\") \n+\n+- Any type that is not imported and is not within the namespace from which it's referenced must be referenced by\n+fully qualified name.\n+\n+\n+### Deprecation\n+Types and fields can be deprecated by adding @deprecated annotation.\n+\n+For example :\n+\n+```\n+@deprecated = \"Use record X instead.\"\n+record Example {\n+  @deprecated = \"Use field x instead.\"\n+  field: string\n+}\n+```\n+\n+### Including fields\n+\n+Record can include fields from other record.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 379}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2NTgyNQ==", "bodyText": "Include example for specifying default values", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363565825", "createdAt": "2020-01-07T02:12:28Z", "author": {"login": "karthikbalasub"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema\n+    (required).\n+  - `namespace` qualifies the namespace for the named\n+    schema.\n+  - `package` qualifies the language binding\n+    namespace for the named schema (optional). If this is not specified,\n+    language  bindingclass for the named schema will use `namespace` as\n+    its default namespace.\n+  - `doc` provides documentation to the user of this\n+    named schema (optional).\n+  - `import` qualifies the name of object which is used in the schema.(optional).\n+\n+The named schemas with type \u201cenum\u201d also supports a `doc`\n+attribute to provide documentation for each enum symbol.\n+\n+**Note:** Due to the addition of doclint in JDK8, anything under the\n+`doc`  attribute must be W3C HTML 4.01 compliant. This is\n+because the contents of this string will appear as Javadocs in the\n+generated Java \u2018data template\u2019 classes later. Please take this into\n+consideration when writing your documentation.\n+\n+The following are a few example schemas and their file names.\n+\n+\n+com/linkedin/pegasus/generator/examples/Foo.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, \n+    /**\n+     * A foo record\n+     */\n+    record Foo {\n+      intField: int\n+      longField: long\n+      floatField: float\n+      doubleField: double\n+      bytesField: bytes\n+      stringField: string\n+      intArrayField: array[int]\n+      stringMapField: map[string, string]\n+      unionField: union[int, string, Foo, array[string], map[string, long]]\n+    }, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/FooWithNamespaceOverride.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+package com.linkedin.pegasus.generator.examples.`record`\n+\n+/**\n+ * A foo record\n+ */\n+record FooWithNamespaceOverride {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  fruitsField: Fruits\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, Fruits, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/Fruits.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  /**\n+   * A red, yellow or green fruit.\n+   */\n+  APPLE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  BANANA\n+\n+  /**\n+   * An orange fruit.\n+   */\n+  ORANGE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  PINEAPPLE\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/MD5.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * MD5\n+ */\n+fixed MD5 16\n+```\n+\n+com/linkedin/pegasus/generator/examples/StringList.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A list of strings\n+ */\n+record StringList {\n+  element: string\n+  next: optional \n+\n+    /**\n+     * A list of strings\n+     */\n+    record StringList {\n+      element: string\n+      next: optional StringList\n+    }\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/InlinedExample.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Example on how you can declare an enum and a record inside another record\n+ */\n+record InlinedExample {\n+\n+  /**\n+   * This is how we inline enum declaration without creating a new pdl file\n+   */\n+  @symbolDocs.FOO = \"It's a foo!\"\n+  @symbolDocs.NONE = \"It's a baz!\"\n+  @symbolDocs.HASH = \"It's a bar!\"\n+  myEnumField: enum EnumDeclarationInTheSameFile {\n+    FOO\n+    BAR\n+    BAZ\n+  }\n+\n+  /**\n+   * A regular string\n+   */\n+  stringField: string\n+\n+  /**\n+   * A regular int\n+   */\n+  intField: int\n+\n+  /**\n+   * In this example we will declare a record and an enum inside a union\n+   */\n+  UnionFieldWithInlineRecordAndEnum: optional union[record myRecord {\n+\n+    /**\n+     * random int field\n+     */\n+    foo1: int\n+\n+    /**\n+     * random int field\n+     */\n+    foo2: int\n+  }, \n+    /**\n+     * Random enum\n+     */\n+    enum anotherEnum {\n+\n+      /**\n+       * description about FOOFOO\n+       */\n+      FOOFOO\n+\n+      /**\n+       * description about BARBAR\n+       */\n+      BARBAR\n+    }]\n+}\n+```\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive type, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+A optional field may have default value.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example : \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+\n+### Import\n+\n+1. If the type is outside the root namespace of the document, you need to add it as an import.\n+\n+2. If the type is declared outside the document, you need to add it as an import.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.imports\n+\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record Example {\n+  /**\n+   * Requires an import since this type is outside the root namespace and is not declared in this file.\n+   */\n+  externalOutsideNS: Simple\n+}\n+```\n+\n+**Note:** \n+- When multiple referenced types with the same unqualified name may be imported, \n+the type with the alphabetically first namespace is chosen. \n+(e.g. \"com.a.b.c.Foo\" is chosen over \"com.x.y.z.Foo\") \n+\n+- Any type that is not imported and is not within the namespace from which it's referenced must be referenced by\n+fully qualified name.\n+\n+\n+### Deprecation\n+Types and fields can be deprecated by adding @deprecated annotation.\n+\n+For example :\n+\n+```\n+@deprecated = \"Use record X instead.\"\n+record Example {\n+  @deprecated = \"Use field x instead.\"\n+  field: string\n+}\n+```\n+\n+### Including fields\n+\n+Record can include fields from other record.\n+\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields f1 from itself and b1 from Bar\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Properties\n+Properties can be used to present arbitrary datas and added to records, fields and enums.\n+\n+For example : \n+```\n+@prop = \"value\"\n+record Fruits {\n+  @validate.regex.regex = \"^(yes|no)$\"\n+  field: string\n+}\n+```\n+#### Property values can be any valid JSON type:\n+\n+For example : \n+```\n+@prop = 1\n+```\n+```\n+@prop = \"string\"\n+```\n+```\n+@prop = [1, 2, 3]\n+```\n+```\n+@prop = { \"a\": 1\", \"b\": { \"c\": true }}\n+```\n+\n+#### Property keys can expressed as paths:\n+\n+For example : \n+```\n+@java.class = \"org.joda.DateTime\"\n+@java.coercerClass = \"org.example.DateTimeCoercer\"\n+```\n+\n+The dot seperate keys format is equivalent to JSON value format.\n+\n+The above dot seperate keys example is equivalent to the following JSON value example :\n+```\n+@java = {\n+  \"class\": \"org.joda.DateTime\",\n+  \"coercerClass\": \"org.example.DateTimeCoercer\"\n+}\n+```\n+\n+### Escaping\n+There are some keywords which are reserved in Pegasus. If you have to use them to define any names, you need to put them in backticks : ` `.\n+\n+#### Keyword Escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PdlKeywordEscaping {\n+  `namespace`: string\n+  `record`: string\n+  `null`: string\n+  `enum`: string\n+  recordName: record `record` { }\n+}\n+```\n+\n+#### Namespace/Package escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping.`record`\n+package com.linkedin.pegasus.generator.test.idl.escaping.override.`typeref`\n+\n+/**\n+ * Ensures that the namespace and package are properly escaped at the root as well as in scoped named-type declarations.\n+ */\n+record NamespacePackageEscaping {\n+  x: {\n+    namespace com.x.y.z.`enum`\n+    package com.a.b.c.`fixed`\n+\n+    record Foo {}\n+  }\n+}\n+```\n+\n+#### Property key escaping \n+\n+If you want Pegasus to treat property key name with dots as one string key, please use backticks to escape such string.\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PropertyKeyEscaping {\n+  @`namespace` = \"foo.bar\"\n+  @`test.path` = 1\n+  @validate.`com.linkedin.CustomValidator` = \"foo\"\n+  aField: string\n+}\n+```\n+\n+\n+## Primitive Types\n+\n+The Pegasus primitive types are : int, long, float, double, boolean, string and bytes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 503}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2NTg2OA==", "bodyText": "Include examples with defaults", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363565868", "createdAt": "2020-01-07T02:12:42Z", "author": {"login": "karthikbalasub"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema\n+    (required).\n+  - `namespace` qualifies the namespace for the named\n+    schema.\n+  - `package` qualifies the language binding\n+    namespace for the named schema (optional). If this is not specified,\n+    language  bindingclass for the named schema will use `namespace` as\n+    its default namespace.\n+  - `doc` provides documentation to the user of this\n+    named schema (optional).\n+  - `import` qualifies the name of object which is used in the schema.(optional).\n+\n+The named schemas with type \u201cenum\u201d also supports a `doc`\n+attribute to provide documentation for each enum symbol.\n+\n+**Note:** Due to the addition of doclint in JDK8, anything under the\n+`doc`  attribute must be W3C HTML 4.01 compliant. This is\n+because the contents of this string will appear as Javadocs in the\n+generated Java \u2018data template\u2019 classes later. Please take this into\n+consideration when writing your documentation.\n+\n+The following are a few example schemas and their file names.\n+\n+\n+com/linkedin/pegasus/generator/examples/Foo.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, \n+    /**\n+     * A foo record\n+     */\n+    record Foo {\n+      intField: int\n+      longField: long\n+      floatField: float\n+      doubleField: double\n+      bytesField: bytes\n+      stringField: string\n+      intArrayField: array[int]\n+      stringMapField: map[string, string]\n+      unionField: union[int, string, Foo, array[string], map[string, long]]\n+    }, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/FooWithNamespaceOverride.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+package com.linkedin.pegasus.generator.examples.`record`\n+\n+/**\n+ * A foo record\n+ */\n+record FooWithNamespaceOverride {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  fruitsField: Fruits\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, Fruits, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/Fruits.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  /**\n+   * A red, yellow or green fruit.\n+   */\n+  APPLE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  BANANA\n+\n+  /**\n+   * An orange fruit.\n+   */\n+  ORANGE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  PINEAPPLE\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/MD5.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * MD5\n+ */\n+fixed MD5 16\n+```\n+\n+com/linkedin/pegasus/generator/examples/StringList.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A list of strings\n+ */\n+record StringList {\n+  element: string\n+  next: optional \n+\n+    /**\n+     * A list of strings\n+     */\n+    record StringList {\n+      element: string\n+      next: optional StringList\n+    }\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/InlinedExample.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Example on how you can declare an enum and a record inside another record\n+ */\n+record InlinedExample {\n+\n+  /**\n+   * This is how we inline enum declaration without creating a new pdl file\n+   */\n+  @symbolDocs.FOO = \"It's a foo!\"\n+  @symbolDocs.NONE = \"It's a baz!\"\n+  @symbolDocs.HASH = \"It's a bar!\"\n+  myEnumField: enum EnumDeclarationInTheSameFile {\n+    FOO\n+    BAR\n+    BAZ\n+  }\n+\n+  /**\n+   * A regular string\n+   */\n+  stringField: string\n+\n+  /**\n+   * A regular int\n+   */\n+  intField: int\n+\n+  /**\n+   * In this example we will declare a record and an enum inside a union\n+   */\n+  UnionFieldWithInlineRecordAndEnum: optional union[record myRecord {\n+\n+    /**\n+     * random int field\n+     */\n+    foo1: int\n+\n+    /**\n+     * random int field\n+     */\n+    foo2: int\n+  }, \n+    /**\n+     * Random enum\n+     */\n+    enum anotherEnum {\n+\n+      /**\n+       * description about FOOFOO\n+       */\n+      FOOFOO\n+\n+      /**\n+       * description about BARBAR\n+       */\n+      BARBAR\n+    }]\n+}\n+```\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive type, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+A optional field may have default value.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example : \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+\n+### Import\n+\n+1. If the type is outside the root namespace of the document, you need to add it as an import.\n+\n+2. If the type is declared outside the document, you need to add it as an import.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.imports\n+\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record Example {\n+  /**\n+   * Requires an import since this type is outside the root namespace and is not declared in this file.\n+   */\n+  externalOutsideNS: Simple\n+}\n+```\n+\n+**Note:** \n+- When multiple referenced types with the same unqualified name may be imported, \n+the type with the alphabetically first namespace is chosen. \n+(e.g. \"com.a.b.c.Foo\" is chosen over \"com.x.y.z.Foo\") \n+\n+- Any type that is not imported and is not within the namespace from which it's referenced must be referenced by\n+fully qualified name.\n+\n+\n+### Deprecation\n+Types and fields can be deprecated by adding @deprecated annotation.\n+\n+For example :\n+\n+```\n+@deprecated = \"Use record X instead.\"\n+record Example {\n+  @deprecated = \"Use field x instead.\"\n+  field: string\n+}\n+```\n+\n+### Including fields\n+\n+Record can include fields from other record.\n+\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields f1 from itself and b1 from Bar\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Properties\n+Properties can be used to present arbitrary datas and added to records, fields and enums.\n+\n+For example : \n+```\n+@prop = \"value\"\n+record Fruits {\n+  @validate.regex.regex = \"^(yes|no)$\"\n+  field: string\n+}\n+```\n+#### Property values can be any valid JSON type:\n+\n+For example : \n+```\n+@prop = 1\n+```\n+```\n+@prop = \"string\"\n+```\n+```\n+@prop = [1, 2, 3]\n+```\n+```\n+@prop = { \"a\": 1\", \"b\": { \"c\": true }}\n+```\n+\n+#### Property keys can expressed as paths:\n+\n+For example : \n+```\n+@java.class = \"org.joda.DateTime\"\n+@java.coercerClass = \"org.example.DateTimeCoercer\"\n+```\n+\n+The dot seperate keys format is equivalent to JSON value format.\n+\n+The above dot seperate keys example is equivalent to the following JSON value example :\n+```\n+@java = {\n+  \"class\": \"org.joda.DateTime\",\n+  \"coercerClass\": \"org.example.DateTimeCoercer\"\n+}\n+```\n+\n+### Escaping\n+There are some keywords which are reserved in Pegasus. If you have to use them to define any names, you need to put them in backticks : ` `.\n+\n+#### Keyword Escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PdlKeywordEscaping {\n+  `namespace`: string\n+  `record`: string\n+  `null`: string\n+  `enum`: string\n+  recordName: record `record` { }\n+}\n+```\n+\n+#### Namespace/Package escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping.`record`\n+package com.linkedin.pegasus.generator.test.idl.escaping.override.`typeref`\n+\n+/**\n+ * Ensures that the namespace and package are properly escaped at the root as well as in scoped named-type declarations.\n+ */\n+record NamespacePackageEscaping {\n+  x: {\n+    namespace com.x.y.z.`enum`\n+    package com.a.b.c.`fixed`\n+\n+    record Foo {}\n+  }\n+}\n+```\n+\n+#### Property key escaping \n+\n+If you want Pegasus to treat property key name with dots as one string key, please use backticks to escape such string.\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PropertyKeyEscaping {\n+  @`namespace` = \"foo.bar\"\n+  @`test.path` = 1\n+  @validate.`com.linkedin.CustomValidator` = \"foo\"\n+  aField: string\n+}\n+```\n+\n+\n+## Primitive Types\n+\n+The Pegasus primitive types are : int, long, float, double, boolean, string and bytes.\n+\n+For Example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithPrimitives {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  booleanField: boolean\n+  stringField: string\n+  bytesField: bytes\n+}\n+```\n+\n+## Array Type\n+\n+Pegesus Arrays are defined within a items type.\n+\n+For Example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+record WithPrimitivesArray {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 528}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2NTk0OA==", "bodyText": "Same here, example for defaults", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363565948", "createdAt": "2020-01-07T02:13:11Z", "author": {"login": "karthikbalasub"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema\n+    (required).\n+  - `namespace` qualifies the namespace for the named\n+    schema.\n+  - `package` qualifies the language binding\n+    namespace for the named schema (optional). If this is not specified,\n+    language  bindingclass for the named schema will use `namespace` as\n+    its default namespace.\n+  - `doc` provides documentation to the user of this\n+    named schema (optional).\n+  - `import` qualifies the name of object which is used in the schema.(optional).\n+\n+The named schemas with type \u201cenum\u201d also supports a `doc`\n+attribute to provide documentation for each enum symbol.\n+\n+**Note:** Due to the addition of doclint in JDK8, anything under the\n+`doc`  attribute must be W3C HTML 4.01 compliant. This is\n+because the contents of this string will appear as Javadocs in the\n+generated Java \u2018data template\u2019 classes later. Please take this into\n+consideration when writing your documentation.\n+\n+The following are a few example schemas and their file names.\n+\n+\n+com/linkedin/pegasus/generator/examples/Foo.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, \n+    /**\n+     * A foo record\n+     */\n+    record Foo {\n+      intField: int\n+      longField: long\n+      floatField: float\n+      doubleField: double\n+      bytesField: bytes\n+      stringField: string\n+      intArrayField: array[int]\n+      stringMapField: map[string, string]\n+      unionField: union[int, string, Foo, array[string], map[string, long]]\n+    }, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/FooWithNamespaceOverride.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+package com.linkedin.pegasus.generator.examples.`record`\n+\n+/**\n+ * A foo record\n+ */\n+record FooWithNamespaceOverride {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  fruitsField: Fruits\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, Fruits, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/Fruits.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  /**\n+   * A red, yellow or green fruit.\n+   */\n+  APPLE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  BANANA\n+\n+  /**\n+   * An orange fruit.\n+   */\n+  ORANGE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  PINEAPPLE\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/MD5.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * MD5\n+ */\n+fixed MD5 16\n+```\n+\n+com/linkedin/pegasus/generator/examples/StringList.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A list of strings\n+ */\n+record StringList {\n+  element: string\n+  next: optional \n+\n+    /**\n+     * A list of strings\n+     */\n+    record StringList {\n+      element: string\n+      next: optional StringList\n+    }\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/InlinedExample.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Example on how you can declare an enum and a record inside another record\n+ */\n+record InlinedExample {\n+\n+  /**\n+   * This is how we inline enum declaration without creating a new pdl file\n+   */\n+  @symbolDocs.FOO = \"It's a foo!\"\n+  @symbolDocs.NONE = \"It's a baz!\"\n+  @symbolDocs.HASH = \"It's a bar!\"\n+  myEnumField: enum EnumDeclarationInTheSameFile {\n+    FOO\n+    BAR\n+    BAZ\n+  }\n+\n+  /**\n+   * A regular string\n+   */\n+  stringField: string\n+\n+  /**\n+   * A regular int\n+   */\n+  intField: int\n+\n+  /**\n+   * In this example we will declare a record and an enum inside a union\n+   */\n+  UnionFieldWithInlineRecordAndEnum: optional union[record myRecord {\n+\n+    /**\n+     * random int field\n+     */\n+    foo1: int\n+\n+    /**\n+     * random int field\n+     */\n+    foo2: int\n+  }, \n+    /**\n+     * Random enum\n+     */\n+    enum anotherEnum {\n+\n+      /**\n+       * description about FOOFOO\n+       */\n+      FOOFOO\n+\n+      /**\n+       * description about BARBAR\n+       */\n+      BARBAR\n+    }]\n+}\n+```\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive type, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+A optional field may have default value.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example : \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+\n+### Import\n+\n+1. If the type is outside the root namespace of the document, you need to add it as an import.\n+\n+2. If the type is declared outside the document, you need to add it as an import.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.imports\n+\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record Example {\n+  /**\n+   * Requires an import since this type is outside the root namespace and is not declared in this file.\n+   */\n+  externalOutsideNS: Simple\n+}\n+```\n+\n+**Note:** \n+- When multiple referenced types with the same unqualified name may be imported, \n+the type with the alphabetically first namespace is chosen. \n+(e.g. \"com.a.b.c.Foo\" is chosen over \"com.x.y.z.Foo\") \n+\n+- Any type that is not imported and is not within the namespace from which it's referenced must be referenced by\n+fully qualified name.\n+\n+\n+### Deprecation\n+Types and fields can be deprecated by adding @deprecated annotation.\n+\n+For example :\n+\n+```\n+@deprecated = \"Use record X instead.\"\n+record Example {\n+  @deprecated = \"Use field x instead.\"\n+  field: string\n+}\n+```\n+\n+### Including fields\n+\n+Record can include fields from other record.\n+\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields f1 from itself and b1 from Bar\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Properties\n+Properties can be used to present arbitrary datas and added to records, fields and enums.\n+\n+For example : \n+```\n+@prop = \"value\"\n+record Fruits {\n+  @validate.regex.regex = \"^(yes|no)$\"\n+  field: string\n+}\n+```\n+#### Property values can be any valid JSON type:\n+\n+For example : \n+```\n+@prop = 1\n+```\n+```\n+@prop = \"string\"\n+```\n+```\n+@prop = [1, 2, 3]\n+```\n+```\n+@prop = { \"a\": 1\", \"b\": { \"c\": true }}\n+```\n+\n+#### Property keys can expressed as paths:\n+\n+For example : \n+```\n+@java.class = \"org.joda.DateTime\"\n+@java.coercerClass = \"org.example.DateTimeCoercer\"\n+```\n+\n+The dot seperate keys format is equivalent to JSON value format.\n+\n+The above dot seperate keys example is equivalent to the following JSON value example :\n+```\n+@java = {\n+  \"class\": \"org.joda.DateTime\",\n+  \"coercerClass\": \"org.example.DateTimeCoercer\"\n+}\n+```\n+\n+### Escaping\n+There are some keywords which are reserved in Pegasus. If you have to use them to define any names, you need to put them in backticks : ` `.\n+\n+#### Keyword Escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PdlKeywordEscaping {\n+  `namespace`: string\n+  `record`: string\n+  `null`: string\n+  `enum`: string\n+  recordName: record `record` { }\n+}\n+```\n+\n+#### Namespace/Package escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping.`record`\n+package com.linkedin.pegasus.generator.test.idl.escaping.override.`typeref`\n+\n+/**\n+ * Ensures that the namespace and package are properly escaped at the root as well as in scoped named-type declarations.\n+ */\n+record NamespacePackageEscaping {\n+  x: {\n+    namespace com.x.y.z.`enum`\n+    package com.a.b.c.`fixed`\n+\n+    record Foo {}\n+  }\n+}\n+```\n+\n+#### Property key escaping \n+\n+If you want Pegasus to treat property key name with dots as one string key, please use backticks to escape such string.\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PropertyKeyEscaping {\n+  @`namespace` = \"foo.bar\"\n+  @`test.path` = 1\n+  @validate.`com.linkedin.CustomValidator` = \"foo\"\n+  aField: string\n+}\n+```\n+\n+\n+## Primitive Types\n+\n+The Pegasus primitive types are : int, long, float, double, boolean, string and bytes.\n+\n+For Example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithPrimitives {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  booleanField: boolean\n+  stringField: string\n+  bytesField: bytes\n+}\n+```\n+\n+## Array Type\n+\n+Pegesus Arrays are defined within a items type.\n+\n+For Example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+record WithPrimitivesArray {\n+  ints: array[int]\n+  longs: array[long]\n+  floats: array[float]\n+  doubles: array[double]\n+  booleans: array[boolean]\n+  strings: array[string]\n+  bytes: array[bytes]\n+}\n+```\n+\n+Record Arrays :\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+\n+record WithRecordArray {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 547}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2NTk5MA==", "bodyText": "defaults", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363565990", "createdAt": "2020-01-07T02:13:23Z", "author": {"login": "karthikbalasub"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema\n+    (required).\n+  - `namespace` qualifies the namespace for the named\n+    schema.\n+  - `package` qualifies the language binding\n+    namespace for the named schema (optional). If this is not specified,\n+    language  bindingclass for the named schema will use `namespace` as\n+    its default namespace.\n+  - `doc` provides documentation to the user of this\n+    named schema (optional).\n+  - `import` qualifies the name of object which is used in the schema.(optional).\n+\n+The named schemas with type \u201cenum\u201d also supports a `doc`\n+attribute to provide documentation for each enum symbol.\n+\n+**Note:** Due to the addition of doclint in JDK8, anything under the\n+`doc`  attribute must be W3C HTML 4.01 compliant. This is\n+because the contents of this string will appear as Javadocs in the\n+generated Java \u2018data template\u2019 classes later. Please take this into\n+consideration when writing your documentation.\n+\n+The following are a few example schemas and their file names.\n+\n+\n+com/linkedin/pegasus/generator/examples/Foo.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, \n+    /**\n+     * A foo record\n+     */\n+    record Foo {\n+      intField: int\n+      longField: long\n+      floatField: float\n+      doubleField: double\n+      bytesField: bytes\n+      stringField: string\n+      intArrayField: array[int]\n+      stringMapField: map[string, string]\n+      unionField: union[int, string, Foo, array[string], map[string, long]]\n+    }, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/FooWithNamespaceOverride.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+package com.linkedin.pegasus.generator.examples.`record`\n+\n+/**\n+ * A foo record\n+ */\n+record FooWithNamespaceOverride {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  fruitsField: Fruits\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, Fruits, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/Fruits.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  /**\n+   * A red, yellow or green fruit.\n+   */\n+  APPLE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  BANANA\n+\n+  /**\n+   * An orange fruit.\n+   */\n+  ORANGE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  PINEAPPLE\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/MD5.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * MD5\n+ */\n+fixed MD5 16\n+```\n+\n+com/linkedin/pegasus/generator/examples/StringList.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A list of strings\n+ */\n+record StringList {\n+  element: string\n+  next: optional \n+\n+    /**\n+     * A list of strings\n+     */\n+    record StringList {\n+      element: string\n+      next: optional StringList\n+    }\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/InlinedExample.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Example on how you can declare an enum and a record inside another record\n+ */\n+record InlinedExample {\n+\n+  /**\n+   * This is how we inline enum declaration without creating a new pdl file\n+   */\n+  @symbolDocs.FOO = \"It's a foo!\"\n+  @symbolDocs.NONE = \"It's a baz!\"\n+  @symbolDocs.HASH = \"It's a bar!\"\n+  myEnumField: enum EnumDeclarationInTheSameFile {\n+    FOO\n+    BAR\n+    BAZ\n+  }\n+\n+  /**\n+   * A regular string\n+   */\n+  stringField: string\n+\n+  /**\n+   * A regular int\n+   */\n+  intField: int\n+\n+  /**\n+   * In this example we will declare a record and an enum inside a union\n+   */\n+  UnionFieldWithInlineRecordAndEnum: optional union[record myRecord {\n+\n+    /**\n+     * random int field\n+     */\n+    foo1: int\n+\n+    /**\n+     * random int field\n+     */\n+    foo2: int\n+  }, \n+    /**\n+     * Random enum\n+     */\n+    enum anotherEnum {\n+\n+      /**\n+       * description about FOOFOO\n+       */\n+      FOOFOO\n+\n+      /**\n+       * description about BARBAR\n+       */\n+      BARBAR\n+    }]\n+}\n+```\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive type, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+A optional field may have default value.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example : \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+\n+### Import\n+\n+1. If the type is outside the root namespace of the document, you need to add it as an import.\n+\n+2. If the type is declared outside the document, you need to add it as an import.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.imports\n+\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record Example {\n+  /**\n+   * Requires an import since this type is outside the root namespace and is not declared in this file.\n+   */\n+  externalOutsideNS: Simple\n+}\n+```\n+\n+**Note:** \n+- When multiple referenced types with the same unqualified name may be imported, \n+the type with the alphabetically first namespace is chosen. \n+(e.g. \"com.a.b.c.Foo\" is chosen over \"com.x.y.z.Foo\") \n+\n+- Any type that is not imported and is not within the namespace from which it's referenced must be referenced by\n+fully qualified name.\n+\n+\n+### Deprecation\n+Types and fields can be deprecated by adding @deprecated annotation.\n+\n+For example :\n+\n+```\n+@deprecated = \"Use record X instead.\"\n+record Example {\n+  @deprecated = \"Use field x instead.\"\n+  field: string\n+}\n+```\n+\n+### Including fields\n+\n+Record can include fields from other record.\n+\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields f1 from itself and b1 from Bar\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Properties\n+Properties can be used to present arbitrary datas and added to records, fields and enums.\n+\n+For example : \n+```\n+@prop = \"value\"\n+record Fruits {\n+  @validate.regex.regex = \"^(yes|no)$\"\n+  field: string\n+}\n+```\n+#### Property values can be any valid JSON type:\n+\n+For example : \n+```\n+@prop = 1\n+```\n+```\n+@prop = \"string\"\n+```\n+```\n+@prop = [1, 2, 3]\n+```\n+```\n+@prop = { \"a\": 1\", \"b\": { \"c\": true }}\n+```\n+\n+#### Property keys can expressed as paths:\n+\n+For example : \n+```\n+@java.class = \"org.joda.DateTime\"\n+@java.coercerClass = \"org.example.DateTimeCoercer\"\n+```\n+\n+The dot seperate keys format is equivalent to JSON value format.\n+\n+The above dot seperate keys example is equivalent to the following JSON value example :\n+```\n+@java = {\n+  \"class\": \"org.joda.DateTime\",\n+  \"coercerClass\": \"org.example.DateTimeCoercer\"\n+}\n+```\n+\n+### Escaping\n+There are some keywords which are reserved in Pegasus. If you have to use them to define any names, you need to put them in backticks : ` `.\n+\n+#### Keyword Escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PdlKeywordEscaping {\n+  `namespace`: string\n+  `record`: string\n+  `null`: string\n+  `enum`: string\n+  recordName: record `record` { }\n+}\n+```\n+\n+#### Namespace/Package escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping.`record`\n+package com.linkedin.pegasus.generator.test.idl.escaping.override.`typeref`\n+\n+/**\n+ * Ensures that the namespace and package are properly escaped at the root as well as in scoped named-type declarations.\n+ */\n+record NamespacePackageEscaping {\n+  x: {\n+    namespace com.x.y.z.`enum`\n+    package com.a.b.c.`fixed`\n+\n+    record Foo {}\n+  }\n+}\n+```\n+\n+#### Property key escaping \n+\n+If you want Pegasus to treat property key name with dots as one string key, please use backticks to escape such string.\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PropertyKeyEscaping {\n+  @`namespace` = \"foo.bar\"\n+  @`test.path` = 1\n+  @validate.`com.linkedin.CustomValidator` = \"foo\"\n+  aField: string\n+}\n+```\n+\n+\n+## Primitive Types\n+\n+The Pegasus primitive types are : int, long, float, double, boolean, string and bytes.\n+\n+For Example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithPrimitives {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  booleanField: boolean\n+  stringField: string\n+  bytesField: bytes\n+}\n+```\n+\n+## Array Type\n+\n+Pegesus Arrays are defined within a items type.\n+\n+For Example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+record WithPrimitivesArray {\n+  ints: array[int]\n+  longs: array[long]\n+  floats: array[float]\n+  doubles: array[double]\n+  booleans: array[boolean]\n+  strings: array[string]\n+  bytes: array[bytes]\n+}\n+```\n+\n+Record Arrays :\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+\n+record WithRecordArray {\n+  empties: array[Empty]\n+  fruits: array[Fruits]\n+}\n+```\n+\n+\n+## Map Type\n+\n+Pegasus maps are defined with a values type and an optional key type.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+record WithPrimitivesMap {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 562}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2NjA3MQ==", "bodyText": "This can be removed, not really adding value", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363566071", "createdAt": "2020-01-07T02:13:48Z", "author": {"login": "karthikbalasub"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema\n+    (required).\n+  - `namespace` qualifies the namespace for the named\n+    schema.\n+  - `package` qualifies the language binding\n+    namespace for the named schema (optional). If this is not specified,\n+    language  bindingclass for the named schema will use `namespace` as\n+    its default namespace.\n+  - `doc` provides documentation to the user of this\n+    named schema (optional).\n+  - `import` qualifies the name of object which is used in the schema.(optional).\n+\n+The named schemas with type \u201cenum\u201d also supports a `doc`\n+attribute to provide documentation for each enum symbol.\n+\n+**Note:** Due to the addition of doclint in JDK8, anything under the\n+`doc`  attribute must be W3C HTML 4.01 compliant. This is\n+because the contents of this string will appear as Javadocs in the\n+generated Java \u2018data template\u2019 classes later. Please take this into\n+consideration when writing your documentation.\n+\n+The following are a few example schemas and their file names.\n+\n+\n+com/linkedin/pegasus/generator/examples/Foo.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, \n+    /**\n+     * A foo record\n+     */\n+    record Foo {\n+      intField: int\n+      longField: long\n+      floatField: float\n+      doubleField: double\n+      bytesField: bytes\n+      stringField: string\n+      intArrayField: array[int]\n+      stringMapField: map[string, string]\n+      unionField: union[int, string, Foo, array[string], map[string, long]]\n+    }, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/FooWithNamespaceOverride.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+package com.linkedin.pegasus.generator.examples.`record`\n+\n+/**\n+ * A foo record\n+ */\n+record FooWithNamespaceOverride {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  fruitsField: Fruits\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, Fruits, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/Fruits.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  /**\n+   * A red, yellow or green fruit.\n+   */\n+  APPLE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  BANANA\n+\n+  /**\n+   * An orange fruit.\n+   */\n+  ORANGE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  PINEAPPLE\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/MD5.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * MD5\n+ */\n+fixed MD5 16\n+```\n+\n+com/linkedin/pegasus/generator/examples/StringList.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A list of strings\n+ */\n+record StringList {\n+  element: string\n+  next: optional \n+\n+    /**\n+     * A list of strings\n+     */\n+    record StringList {\n+      element: string\n+      next: optional StringList\n+    }\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/InlinedExample.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Example on how you can declare an enum and a record inside another record\n+ */\n+record InlinedExample {\n+\n+  /**\n+   * This is how we inline enum declaration without creating a new pdl file\n+   */\n+  @symbolDocs.FOO = \"It's a foo!\"\n+  @symbolDocs.NONE = \"It's a baz!\"\n+  @symbolDocs.HASH = \"It's a bar!\"\n+  myEnumField: enum EnumDeclarationInTheSameFile {\n+    FOO\n+    BAR\n+    BAZ\n+  }\n+\n+  /**\n+   * A regular string\n+   */\n+  stringField: string\n+\n+  /**\n+   * A regular int\n+   */\n+  intField: int\n+\n+  /**\n+   * In this example we will declare a record and an enum inside a union\n+   */\n+  UnionFieldWithInlineRecordAndEnum: optional union[record myRecord {\n+\n+    /**\n+     * random int field\n+     */\n+    foo1: int\n+\n+    /**\n+     * random int field\n+     */\n+    foo2: int\n+  }, \n+    /**\n+     * Random enum\n+     */\n+    enum anotherEnum {\n+\n+      /**\n+       * description about FOOFOO\n+       */\n+      FOOFOO\n+\n+      /**\n+       * description about BARBAR\n+       */\n+      BARBAR\n+    }]\n+}\n+```\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive type, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+A optional field may have default value.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example : \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+\n+### Import\n+\n+1. If the type is outside the root namespace of the document, you need to add it as an import.\n+\n+2. If the type is declared outside the document, you need to add it as an import.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.imports\n+\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record Example {\n+  /**\n+   * Requires an import since this type is outside the root namespace and is not declared in this file.\n+   */\n+  externalOutsideNS: Simple\n+}\n+```\n+\n+**Note:** \n+- When multiple referenced types with the same unqualified name may be imported, \n+the type with the alphabetically first namespace is chosen. \n+(e.g. \"com.a.b.c.Foo\" is chosen over \"com.x.y.z.Foo\") \n+\n+- Any type that is not imported and is not within the namespace from which it's referenced must be referenced by\n+fully qualified name.\n+\n+\n+### Deprecation\n+Types and fields can be deprecated by adding @deprecated annotation.\n+\n+For example :\n+\n+```\n+@deprecated = \"Use record X instead.\"\n+record Example {\n+  @deprecated = \"Use field x instead.\"\n+  field: string\n+}\n+```\n+\n+### Including fields\n+\n+Record can include fields from other record.\n+\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields f1 from itself and b1 from Bar\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Properties\n+Properties can be used to present arbitrary datas and added to records, fields and enums.\n+\n+For example : \n+```\n+@prop = \"value\"\n+record Fruits {\n+  @validate.regex.regex = \"^(yes|no)$\"\n+  field: string\n+}\n+```\n+#### Property values can be any valid JSON type:\n+\n+For example : \n+```\n+@prop = 1\n+```\n+```\n+@prop = \"string\"\n+```\n+```\n+@prop = [1, 2, 3]\n+```\n+```\n+@prop = { \"a\": 1\", \"b\": { \"c\": true }}\n+```\n+\n+#### Property keys can expressed as paths:\n+\n+For example : \n+```\n+@java.class = \"org.joda.DateTime\"\n+@java.coercerClass = \"org.example.DateTimeCoercer\"\n+```\n+\n+The dot seperate keys format is equivalent to JSON value format.\n+\n+The above dot seperate keys example is equivalent to the following JSON value example :\n+```\n+@java = {\n+  \"class\": \"org.joda.DateTime\",\n+  \"coercerClass\": \"org.example.DateTimeCoercer\"\n+}\n+```\n+\n+### Escaping\n+There are some keywords which are reserved in Pegasus. If you have to use them to define any names, you need to put them in backticks : ` `.\n+\n+#### Keyword Escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PdlKeywordEscaping {\n+  `namespace`: string\n+  `record`: string\n+  `null`: string\n+  `enum`: string\n+  recordName: record `record` { }\n+}\n+```\n+\n+#### Namespace/Package escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping.`record`\n+package com.linkedin.pegasus.generator.test.idl.escaping.override.`typeref`\n+\n+/**\n+ * Ensures that the namespace and package are properly escaped at the root as well as in scoped named-type declarations.\n+ */\n+record NamespacePackageEscaping {\n+  x: {\n+    namespace com.x.y.z.`enum`\n+    package com.a.b.c.`fixed`\n+\n+    record Foo {}\n+  }\n+}\n+```\n+\n+#### Property key escaping \n+\n+If you want Pegasus to treat property key name with dots as one string key, please use backticks to escape such string.\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PropertyKeyEscaping {\n+  @`namespace` = \"foo.bar\"\n+  @`test.path` = 1\n+  @validate.`com.linkedin.CustomValidator` = \"foo\"\n+  aField: string\n+}\n+```\n+\n+\n+## Primitive Types\n+\n+The Pegasus primitive types are : int, long, float, double, boolean, string and bytes.\n+\n+For Example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithPrimitives {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  booleanField: boolean\n+  stringField: string\n+  bytesField: bytes\n+}\n+```\n+\n+## Array Type\n+\n+Pegesus Arrays are defined within a items type.\n+\n+For Example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+record WithPrimitivesArray {\n+  ints: array[int]\n+  longs: array[long]\n+  floats: array[float]\n+  doubles: array[double]\n+  booleans: array[boolean]\n+  strings: array[string]\n+  bytes: array[bytes]\n+}\n+```\n+\n+Record Arrays :\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+\n+record WithRecordArray {\n+  empties: array[Empty]\n+  fruits: array[Fruits]\n+}\n+```\n+\n+\n+## Map Type\n+\n+Pegasus maps are defined with a values type and an optional key type.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+record WithPrimitivesMap {\n+  ints: map[string, int]\n+  longs: map[string, long]\n+  floats: map[string, float]\n+  doubles: map[string, double]\n+  booleans: map[string, boolean]\n+  strings: map[string, string]\n+  bytes: map[string, bytes]\n+}\n+```\n+Custom Types Map :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 572}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2NjI4OA==", "bodyText": "Include a section for inlined records, with examples including how to specify default value.", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363566288", "createdAt": "2020-01-07T02:15:03Z", "author": {"login": "karthikbalasub"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema\n+    (required).\n+  - `namespace` qualifies the namespace for the named\n+    schema.\n+  - `package` qualifies the language binding\n+    namespace for the named schema (optional). If this is not specified,\n+    language  bindingclass for the named schema will use `namespace` as\n+    its default namespace.\n+  - `doc` provides documentation to the user of this\n+    named schema (optional).\n+  - `import` qualifies the name of object which is used in the schema.(optional).\n+\n+The named schemas with type \u201cenum\u201d also supports a `doc`\n+attribute to provide documentation for each enum symbol.\n+\n+**Note:** Due to the addition of doclint in JDK8, anything under the\n+`doc`  attribute must be W3C HTML 4.01 compliant. This is\n+because the contents of this string will appear as Javadocs in the\n+generated Java \u2018data template\u2019 classes later. Please take this into\n+consideration when writing your documentation.\n+\n+The following are a few example schemas and their file names.\n+\n+\n+com/linkedin/pegasus/generator/examples/Foo.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, \n+    /**\n+     * A foo record\n+     */\n+    record Foo {\n+      intField: int\n+      longField: long\n+      floatField: float\n+      doubleField: double\n+      bytesField: bytes\n+      stringField: string\n+      intArrayField: array[int]\n+      stringMapField: map[string, string]\n+      unionField: union[int, string, Foo, array[string], map[string, long]]\n+    }, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/FooWithNamespaceOverride.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+package com.linkedin.pegasus.generator.examples.`record`\n+\n+/**\n+ * A foo record\n+ */\n+record FooWithNamespaceOverride {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  fruitsField: Fruits\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, Fruits, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/Fruits.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  /**\n+   * A red, yellow or green fruit.\n+   */\n+  APPLE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  BANANA\n+\n+  /**\n+   * An orange fruit.\n+   */\n+  ORANGE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  PINEAPPLE\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/MD5.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * MD5\n+ */\n+fixed MD5 16\n+```\n+\n+com/linkedin/pegasus/generator/examples/StringList.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A list of strings\n+ */\n+record StringList {\n+  element: string\n+  next: optional \n+\n+    /**\n+     * A list of strings\n+     */\n+    record StringList {\n+      element: string\n+      next: optional StringList\n+    }\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/InlinedExample.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Example on how you can declare an enum and a record inside another record\n+ */\n+record InlinedExample {\n+\n+  /**\n+   * This is how we inline enum declaration without creating a new pdl file\n+   */\n+  @symbolDocs.FOO = \"It's a foo!\"\n+  @symbolDocs.NONE = \"It's a baz!\"\n+  @symbolDocs.HASH = \"It's a bar!\"\n+  myEnumField: enum EnumDeclarationInTheSameFile {\n+    FOO\n+    BAR\n+    BAZ\n+  }\n+\n+  /**\n+   * A regular string\n+   */\n+  stringField: string\n+\n+  /**\n+   * A regular int\n+   */\n+  intField: int\n+\n+  /**\n+   * In this example we will declare a record and an enum inside a union\n+   */\n+  UnionFieldWithInlineRecordAndEnum: optional union[record myRecord {\n+\n+    /**\n+     * random int field\n+     */\n+    foo1: int\n+\n+    /**\n+     * random int field\n+     */\n+    foo2: int\n+  }, \n+    /**\n+     * Random enum\n+     */\n+    enum anotherEnum {\n+\n+      /**\n+       * description about FOOFOO\n+       */\n+      FOOFOO\n+\n+      /**\n+       * description about BARBAR\n+       */\n+      BARBAR\n+    }]\n+}\n+```\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive type, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+A optional field may have default value.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 309}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2NjcwMw==", "bodyText": "Like we discussed, we need to keep the details here to be specific to the syntax. Just use a simple sentence to explain what a typeref is and remove the other details.", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363566703", "createdAt": "2020-01-07T02:17:25Z", "author": {"login": "karthikbalasub"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema\n+    (required).\n+  - `namespace` qualifies the namespace for the named\n+    schema.\n+  - `package` qualifies the language binding\n+    namespace for the named schema (optional). If this is not specified,\n+    language  bindingclass for the named schema will use `namespace` as\n+    its default namespace.\n+  - `doc` provides documentation to the user of this\n+    named schema (optional).\n+  - `import` qualifies the name of object which is used in the schema.(optional).\n+\n+The named schemas with type \u201cenum\u201d also supports a `doc`\n+attribute to provide documentation for each enum symbol.\n+\n+**Note:** Due to the addition of doclint in JDK8, anything under the\n+`doc`  attribute must be W3C HTML 4.01 compliant. This is\n+because the contents of this string will appear as Javadocs in the\n+generated Java \u2018data template\u2019 classes later. Please take this into\n+consideration when writing your documentation.\n+\n+The following are a few example schemas and their file names.\n+\n+\n+com/linkedin/pegasus/generator/examples/Foo.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, \n+    /**\n+     * A foo record\n+     */\n+    record Foo {\n+      intField: int\n+      longField: long\n+      floatField: float\n+      doubleField: double\n+      bytesField: bytes\n+      stringField: string\n+      intArrayField: array[int]\n+      stringMapField: map[string, string]\n+      unionField: union[int, string, Foo, array[string], map[string, long]]\n+    }, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/FooWithNamespaceOverride.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+package com.linkedin.pegasus.generator.examples.`record`\n+\n+/**\n+ * A foo record\n+ */\n+record FooWithNamespaceOverride {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  fruitsField: Fruits\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, Fruits, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/Fruits.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  /**\n+   * A red, yellow or green fruit.\n+   */\n+  APPLE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  BANANA\n+\n+  /**\n+   * An orange fruit.\n+   */\n+  ORANGE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  PINEAPPLE\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/MD5.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * MD5\n+ */\n+fixed MD5 16\n+```\n+\n+com/linkedin/pegasus/generator/examples/StringList.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A list of strings\n+ */\n+record StringList {\n+  element: string\n+  next: optional \n+\n+    /**\n+     * A list of strings\n+     */\n+    record StringList {\n+      element: string\n+      next: optional StringList\n+    }\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/InlinedExample.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Example on how you can declare an enum and a record inside another record\n+ */\n+record InlinedExample {\n+\n+  /**\n+   * This is how we inline enum declaration without creating a new pdl file\n+   */\n+  @symbolDocs.FOO = \"It's a foo!\"\n+  @symbolDocs.NONE = \"It's a baz!\"\n+  @symbolDocs.HASH = \"It's a bar!\"\n+  myEnumField: enum EnumDeclarationInTheSameFile {\n+    FOO\n+    BAR\n+    BAZ\n+  }\n+\n+  /**\n+   * A regular string\n+   */\n+  stringField: string\n+\n+  /**\n+   * A regular int\n+   */\n+  intField: int\n+\n+  /**\n+   * In this example we will declare a record and an enum inside a union\n+   */\n+  UnionFieldWithInlineRecordAndEnum: optional union[record myRecord {\n+\n+    /**\n+     * random int field\n+     */\n+    foo1: int\n+\n+    /**\n+     * random int field\n+     */\n+    foo2: int\n+  }, \n+    /**\n+     * Random enum\n+     */\n+    enum anotherEnum {\n+\n+      /**\n+       * description about FOOFOO\n+       */\n+      FOOFOO\n+\n+      /**\n+       * description about BARBAR\n+       */\n+      BARBAR\n+    }]\n+}\n+```\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive type, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+A optional field may have default value.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example : \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+\n+### Import\n+\n+1. If the type is outside the root namespace of the document, you need to add it as an import.\n+\n+2. If the type is declared outside the document, you need to add it as an import.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.imports\n+\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record Example {\n+  /**\n+   * Requires an import since this type is outside the root namespace and is not declared in this file.\n+   */\n+  externalOutsideNS: Simple\n+}\n+```\n+\n+**Note:** \n+- When multiple referenced types with the same unqualified name may be imported, \n+the type with the alphabetically first namespace is chosen. \n+(e.g. \"com.a.b.c.Foo\" is chosen over \"com.x.y.z.Foo\") \n+\n+- Any type that is not imported and is not within the namespace from which it's referenced must be referenced by\n+fully qualified name.\n+\n+\n+### Deprecation\n+Types and fields can be deprecated by adding @deprecated annotation.\n+\n+For example :\n+\n+```\n+@deprecated = \"Use record X instead.\"\n+record Example {\n+  @deprecated = \"Use field x instead.\"\n+  field: string\n+}\n+```\n+\n+### Including fields\n+\n+Record can include fields from other record.\n+\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields f1 from itself and b1 from Bar\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Properties\n+Properties can be used to present arbitrary datas and added to records, fields and enums.\n+\n+For example : \n+```\n+@prop = \"value\"\n+record Fruits {\n+  @validate.regex.regex = \"^(yes|no)$\"\n+  field: string\n+}\n+```\n+#### Property values can be any valid JSON type:\n+\n+For example : \n+```\n+@prop = 1\n+```\n+```\n+@prop = \"string\"\n+```\n+```\n+@prop = [1, 2, 3]\n+```\n+```\n+@prop = { \"a\": 1\", \"b\": { \"c\": true }}\n+```\n+\n+#### Property keys can expressed as paths:\n+\n+For example : \n+```\n+@java.class = \"org.joda.DateTime\"\n+@java.coercerClass = \"org.example.DateTimeCoercer\"\n+```\n+\n+The dot seperate keys format is equivalent to JSON value format.\n+\n+The above dot seperate keys example is equivalent to the following JSON value example :\n+```\n+@java = {\n+  \"class\": \"org.joda.DateTime\",\n+  \"coercerClass\": \"org.example.DateTimeCoercer\"\n+}\n+```\n+\n+### Escaping\n+There are some keywords which are reserved in Pegasus. If you have to use them to define any names, you need to put them in backticks : ` `.\n+\n+#### Keyword Escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PdlKeywordEscaping {\n+  `namespace`: string\n+  `record`: string\n+  `null`: string\n+  `enum`: string\n+  recordName: record `record` { }\n+}\n+```\n+\n+#### Namespace/Package escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping.`record`\n+package com.linkedin.pegasus.generator.test.idl.escaping.override.`typeref`\n+\n+/**\n+ * Ensures that the namespace and package are properly escaped at the root as well as in scoped named-type declarations.\n+ */\n+record NamespacePackageEscaping {\n+  x: {\n+    namespace com.x.y.z.`enum`\n+    package com.a.b.c.`fixed`\n+\n+    record Foo {}\n+  }\n+}\n+```\n+\n+#### Property key escaping \n+\n+If you want Pegasus to treat property key name with dots as one string key, please use backticks to escape such string.\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PropertyKeyEscaping {\n+  @`namespace` = \"foo.bar\"\n+  @`test.path` = 1\n+  @validate.`com.linkedin.CustomValidator` = \"foo\"\n+  aField: string\n+}\n+```\n+\n+\n+## Primitive Types\n+\n+The Pegasus primitive types are : int, long, float, double, boolean, string and bytes.\n+\n+For Example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithPrimitives {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  booleanField: boolean\n+  stringField: string\n+  bytesField: bytes\n+}\n+```\n+\n+## Array Type\n+\n+Pegesus Arrays are defined within a items type.\n+\n+For Example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+record WithPrimitivesArray {\n+  ints: array[int]\n+  longs: array[long]\n+  floats: array[float]\n+  doubles: array[double]\n+  booleans: array[boolean]\n+  strings: array[string]\n+  bytes: array[bytes]\n+}\n+```\n+\n+Record Arrays :\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+\n+record WithRecordArray {\n+  empties: array[Empty]\n+  fruits: array[Fruits]\n+}\n+```\n+\n+\n+## Map Type\n+\n+Pegasus maps are defined with a values type and an optional key type.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+record WithPrimitivesMap {\n+  ints: map[string, int]\n+  longs: map[string, long]\n+  floats: map[string, float]\n+  doubles: map[string, double]\n+  booleans: map[string, boolean]\n+  strings: map[string, string]\n+  bytes: map[string, bytes]\n+}\n+```\n+Custom Types Map :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+import com.linkedin.pegasus.generator.test.idl.customtypes.CustomInt\n+\n+record WithCustomTypesMap {\n+  ints: map[string, CustomInt]\n+}\n+```\n+\n+Complex Types Map :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+import com.linkedin.pegasus.generator.test.idl.`fixed`.Fixed8\n+\n+record WithComplexTypesMap {\n+  empties: map[string, Empty]\n+  fruits: map[string, Fruits]\n+  arrays: map[string, array[Simple]]\n+  maps: map[string, map[string, Simple]]\n+  unions: map[\n+    string,\n+    typeref WithComplexTypesMapUnion = union[int, string, Simple]\n+  ]\n+  `fixed`: map[string, Fixed8]\n+}\n+```\n+\n+**Note**: \n+The key must always be \"string\".\n+\n+\n+## Union Type\n+\n+A union type may be defined with any number of member types. Each member may be any pegasus type except union type. \n+Each member can be primitive, record, enum map or array type.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.unions\n+\n+record WithPrimitivesUnion {\n+  `union`: union[int, long, float, double, boolean, string, bytes]\n+}\n+```\n+\n+The member type names also serve as the \u201cmember keys\u201d (also called as \u201cunion tags\u201d), and identify which union member type data holds.\n+To define a field of a record containing a union of two other records, we would define:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Question {\n+  answerFormat: union[MultipleChoice, TextEntry]\n+}\n+```\n+\n+### Union with aliases\n+Union members can optionally be given an alias. Aliases can be used to create unions with members of the same type or to give better naming for union members.\n+\n+Aliased unions would be defines as :\n+```\n+union [alias: type, ...]\n+```\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Question {\n+ answerFormat: union[   \n+   multipleChoice: MultipleChoice,\n+   shortAnswer: string,\n+   longAnswer: string\n+ ]\n+}\n+```\n+In the above example, the union answerFormat has three members, with two string type members differentiated using the aliases (shortAnswer and longAnswer). When aliases are used, the alias becomes the \"member key\" for the union members and will be used in the wire format. \n+\n+## Enum Type\n+\n+Enums types may contain any number of symbols. \n+\n+For example :\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+enum Fruits {\n+  APPLE\n+  BANANA\n+  ORANGE\n+  PINEAPPLE\n+}\n+```\n+\n+Enums can be referenced in other schemas by name.\n+\n+For example :\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record FruitBasket {\n+  fruit: Fruits\n+}\n+```\n+\n+Enums can also be referenced in other schemas by inlining their type definition. \n+\n+For example :\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record FruitBasket {\n+  fruit: enum Fruits { APPLE, BANANA, ORANGE }\n+} \n+```\n+\n+### Enum documentation, deprecation and properties\n+Doc comments, @deprecation and properties can be added directly to enum symbols. \n+\n+For example :\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  @color = \"red\"\n+  APPLE\n+\n+  /**\n+   * A yummy fruit.\n+   */\n+  @color = \"yellow\"\n+  BANANA\n+\n+  @deprecated\n+  @color = \"orange\"\n+  ORANGE\n+}\n+```\n+\n+### Enum defaults\n+To specify defaults, specify the enum value as string.\n+\n+For example :\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record FruitBasket {\n+  fruit: enum Fruits { APPLE, BANANA, ORANGE } = \"APPLE\"\n+} \n+```\n+\n+\n+The default value can also be defined as following exmaple:\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record FruitBasket {\n+  fruit: Fruits = \"APPLE\"\n+} \n+```\n+\n+## Typerefs\n+Pegasus supports a new schema type known as a typeref. A typeref is like", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 749}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2Njk2NQ==", "bodyText": "This is not referencing, this is actually inline defining of the enum.", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363566965", "createdAt": "2020-01-07T02:18:44Z", "author": {"login": "karthikbalasub"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema\n+    (required).\n+  - `namespace` qualifies the namespace for the named\n+    schema.\n+  - `package` qualifies the language binding\n+    namespace for the named schema (optional). If this is not specified,\n+    language  bindingclass for the named schema will use `namespace` as\n+    its default namespace.\n+  - `doc` provides documentation to the user of this\n+    named schema (optional).\n+  - `import` qualifies the name of object which is used in the schema.(optional).\n+\n+The named schemas with type \u201cenum\u201d also supports a `doc`\n+attribute to provide documentation for each enum symbol.\n+\n+**Note:** Due to the addition of doclint in JDK8, anything under the\n+`doc`  attribute must be W3C HTML 4.01 compliant. This is\n+because the contents of this string will appear as Javadocs in the\n+generated Java \u2018data template\u2019 classes later. Please take this into\n+consideration when writing your documentation.\n+\n+The following are a few example schemas and their file names.\n+\n+\n+com/linkedin/pegasus/generator/examples/Foo.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, \n+    /**\n+     * A foo record\n+     */\n+    record Foo {\n+      intField: int\n+      longField: long\n+      floatField: float\n+      doubleField: double\n+      bytesField: bytes\n+      stringField: string\n+      intArrayField: array[int]\n+      stringMapField: map[string, string]\n+      unionField: union[int, string, Foo, array[string], map[string, long]]\n+    }, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/FooWithNamespaceOverride.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+package com.linkedin.pegasus.generator.examples.`record`\n+\n+/**\n+ * A foo record\n+ */\n+record FooWithNamespaceOverride {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  fruitsField: Fruits\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, Fruits, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/Fruits.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  /**\n+   * A red, yellow or green fruit.\n+   */\n+  APPLE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  BANANA\n+\n+  /**\n+   * An orange fruit.\n+   */\n+  ORANGE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  PINEAPPLE\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/MD5.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * MD5\n+ */\n+fixed MD5 16\n+```\n+\n+com/linkedin/pegasus/generator/examples/StringList.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A list of strings\n+ */\n+record StringList {\n+  element: string\n+  next: optional \n+\n+    /**\n+     * A list of strings\n+     */\n+    record StringList {\n+      element: string\n+      next: optional StringList\n+    }\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/InlinedExample.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Example on how you can declare an enum and a record inside another record\n+ */\n+record InlinedExample {\n+\n+  /**\n+   * This is how we inline enum declaration without creating a new pdl file\n+   */\n+  @symbolDocs.FOO = \"It's a foo!\"\n+  @symbolDocs.NONE = \"It's a baz!\"\n+  @symbolDocs.HASH = \"It's a bar!\"\n+  myEnumField: enum EnumDeclarationInTheSameFile {\n+    FOO\n+    BAR\n+    BAZ\n+  }\n+\n+  /**\n+   * A regular string\n+   */\n+  stringField: string\n+\n+  /**\n+   * A regular int\n+   */\n+  intField: int\n+\n+  /**\n+   * In this example we will declare a record and an enum inside a union\n+   */\n+  UnionFieldWithInlineRecordAndEnum: optional union[record myRecord {\n+\n+    /**\n+     * random int field\n+     */\n+    foo1: int\n+\n+    /**\n+     * random int field\n+     */\n+    foo2: int\n+  }, \n+    /**\n+     * Random enum\n+     */\n+    enum anotherEnum {\n+\n+      /**\n+       * description about FOOFOO\n+       */\n+      FOOFOO\n+\n+      /**\n+       * description about BARBAR\n+       */\n+      BARBAR\n+    }]\n+}\n+```\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive type, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+A optional field may have default value.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example : \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+\n+### Import\n+\n+1. If the type is outside the root namespace of the document, you need to add it as an import.\n+\n+2. If the type is declared outside the document, you need to add it as an import.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.imports\n+\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record Example {\n+  /**\n+   * Requires an import since this type is outside the root namespace and is not declared in this file.\n+   */\n+  externalOutsideNS: Simple\n+}\n+```\n+\n+**Note:** \n+- When multiple referenced types with the same unqualified name may be imported, \n+the type with the alphabetically first namespace is chosen. \n+(e.g. \"com.a.b.c.Foo\" is chosen over \"com.x.y.z.Foo\") \n+\n+- Any type that is not imported and is not within the namespace from which it's referenced must be referenced by\n+fully qualified name.\n+\n+\n+### Deprecation\n+Types and fields can be deprecated by adding @deprecated annotation.\n+\n+For example :\n+\n+```\n+@deprecated = \"Use record X instead.\"\n+record Example {\n+  @deprecated = \"Use field x instead.\"\n+  field: string\n+}\n+```\n+\n+### Including fields\n+\n+Record can include fields from other record.\n+\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields f1 from itself and b1 from Bar\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Properties\n+Properties can be used to present arbitrary datas and added to records, fields and enums.\n+\n+For example : \n+```\n+@prop = \"value\"\n+record Fruits {\n+  @validate.regex.regex = \"^(yes|no)$\"\n+  field: string\n+}\n+```\n+#### Property values can be any valid JSON type:\n+\n+For example : \n+```\n+@prop = 1\n+```\n+```\n+@prop = \"string\"\n+```\n+```\n+@prop = [1, 2, 3]\n+```\n+```\n+@prop = { \"a\": 1\", \"b\": { \"c\": true }}\n+```\n+\n+#### Property keys can expressed as paths:\n+\n+For example : \n+```\n+@java.class = \"org.joda.DateTime\"\n+@java.coercerClass = \"org.example.DateTimeCoercer\"\n+```\n+\n+The dot seperate keys format is equivalent to JSON value format.\n+\n+The above dot seperate keys example is equivalent to the following JSON value example :\n+```\n+@java = {\n+  \"class\": \"org.joda.DateTime\",\n+  \"coercerClass\": \"org.example.DateTimeCoercer\"\n+}\n+```\n+\n+### Escaping\n+There are some keywords which are reserved in Pegasus. If you have to use them to define any names, you need to put them in backticks : ` `.\n+\n+#### Keyword Escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PdlKeywordEscaping {\n+  `namespace`: string\n+  `record`: string\n+  `null`: string\n+  `enum`: string\n+  recordName: record `record` { }\n+}\n+```\n+\n+#### Namespace/Package escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping.`record`\n+package com.linkedin.pegasus.generator.test.idl.escaping.override.`typeref`\n+\n+/**\n+ * Ensures that the namespace and package are properly escaped at the root as well as in scoped named-type declarations.\n+ */\n+record NamespacePackageEscaping {\n+  x: {\n+    namespace com.x.y.z.`enum`\n+    package com.a.b.c.`fixed`\n+\n+    record Foo {}\n+  }\n+}\n+```\n+\n+#### Property key escaping \n+\n+If you want Pegasus to treat property key name with dots as one string key, please use backticks to escape such string.\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PropertyKeyEscaping {\n+  @`namespace` = \"foo.bar\"\n+  @`test.path` = 1\n+  @validate.`com.linkedin.CustomValidator` = \"foo\"\n+  aField: string\n+}\n+```\n+\n+\n+## Primitive Types\n+\n+The Pegasus primitive types are : int, long, float, double, boolean, string and bytes.\n+\n+For Example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithPrimitives {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  booleanField: boolean\n+  stringField: string\n+  bytesField: bytes\n+}\n+```\n+\n+## Array Type\n+\n+Pegesus Arrays are defined within a items type.\n+\n+For Example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+record WithPrimitivesArray {\n+  ints: array[int]\n+  longs: array[long]\n+  floats: array[float]\n+  doubles: array[double]\n+  booleans: array[boolean]\n+  strings: array[string]\n+  bytes: array[bytes]\n+}\n+```\n+\n+Record Arrays :\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+\n+record WithRecordArray {\n+  empties: array[Empty]\n+  fruits: array[Fruits]\n+}\n+```\n+\n+\n+## Map Type\n+\n+Pegasus maps are defined with a values type and an optional key type.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+record WithPrimitivesMap {\n+  ints: map[string, int]\n+  longs: map[string, long]\n+  floats: map[string, float]\n+  doubles: map[string, double]\n+  booleans: map[string, boolean]\n+  strings: map[string, string]\n+  bytes: map[string, bytes]\n+}\n+```\n+Custom Types Map :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+import com.linkedin.pegasus.generator.test.idl.customtypes.CustomInt\n+\n+record WithCustomTypesMap {\n+  ints: map[string, CustomInt]\n+}\n+```\n+\n+Complex Types Map :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+import com.linkedin.pegasus.generator.test.idl.`fixed`.Fixed8\n+\n+record WithComplexTypesMap {\n+  empties: map[string, Empty]\n+  fruits: map[string, Fruits]\n+  arrays: map[string, array[Simple]]\n+  maps: map[string, map[string, Simple]]\n+  unions: map[\n+    string,\n+    typeref WithComplexTypesMapUnion = union[int, string, Simple]\n+  ]\n+  `fixed`: map[string, Fixed8]\n+}\n+```\n+\n+**Note**: \n+The key must always be \"string\".\n+\n+\n+## Union Type\n+\n+A union type may be defined with any number of member types. Each member may be any pegasus type except union type. \n+Each member can be primitive, record, enum map or array type.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.unions\n+\n+record WithPrimitivesUnion {\n+  `union`: union[int, long, float, double, boolean, string, bytes]\n+}\n+```\n+\n+The member type names also serve as the \u201cmember keys\u201d (also called as \u201cunion tags\u201d), and identify which union member type data holds.\n+To define a field of a record containing a union of two other records, we would define:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Question {\n+  answerFormat: union[MultipleChoice, TextEntry]\n+}\n+```\n+\n+### Union with aliases\n+Union members can optionally be given an alias. Aliases can be used to create unions with members of the same type or to give better naming for union members.\n+\n+Aliased unions would be defines as :\n+```\n+union [alias: type, ...]\n+```\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Question {\n+ answerFormat: union[   \n+   multipleChoice: MultipleChoice,\n+   shortAnswer: string,\n+   longAnswer: string\n+ ]\n+}\n+```\n+In the above example, the union answerFormat has three members, with two string type members differentiated using the aliases (shortAnswer and longAnswer). When aliases are used, the alias becomes the \"member key\" for the union members and will be used in the wire format. \n+\n+## Enum Type\n+\n+Enums types may contain any number of symbols. \n+\n+For example :\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+enum Fruits {\n+  APPLE\n+  BANANA\n+  ORANGE\n+  PINEAPPLE\n+}\n+```\n+\n+Enums can be referenced in other schemas by name.\n+\n+For example :\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record FruitBasket {\n+  fruit: Fruits\n+}\n+```\n+\n+Enums can also be referenced in other schemas by inlining their type definition. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 684}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2NzA0NA==", "bodyText": "Include an example with default", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363567044", "createdAt": "2020-01-07T02:19:09Z", "author": {"login": "karthikbalasub"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema\n+    (required).\n+  - `namespace` qualifies the namespace for the named\n+    schema.\n+  - `package` qualifies the language binding\n+    namespace for the named schema (optional). If this is not specified,\n+    language  bindingclass for the named schema will use `namespace` as\n+    its default namespace.\n+  - `doc` provides documentation to the user of this\n+    named schema (optional).\n+  - `import` qualifies the name of object which is used in the schema.(optional).\n+\n+The named schemas with type \u201cenum\u201d also supports a `doc`\n+attribute to provide documentation for each enum symbol.\n+\n+**Note:** Due to the addition of doclint in JDK8, anything under the\n+`doc`  attribute must be W3C HTML 4.01 compliant. This is\n+because the contents of this string will appear as Javadocs in the\n+generated Java \u2018data template\u2019 classes later. Please take this into\n+consideration when writing your documentation.\n+\n+The following are a few example schemas and their file names.\n+\n+\n+com/linkedin/pegasus/generator/examples/Foo.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, \n+    /**\n+     * A foo record\n+     */\n+    record Foo {\n+      intField: int\n+      longField: long\n+      floatField: float\n+      doubleField: double\n+      bytesField: bytes\n+      stringField: string\n+      intArrayField: array[int]\n+      stringMapField: map[string, string]\n+      unionField: union[int, string, Foo, array[string], map[string, long]]\n+    }, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/FooWithNamespaceOverride.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+package com.linkedin.pegasus.generator.examples.`record`\n+\n+/**\n+ * A foo record\n+ */\n+record FooWithNamespaceOverride {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  fruitsField: Fruits\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, Fruits, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/Fruits.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  /**\n+   * A red, yellow or green fruit.\n+   */\n+  APPLE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  BANANA\n+\n+  /**\n+   * An orange fruit.\n+   */\n+  ORANGE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  PINEAPPLE\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/MD5.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * MD5\n+ */\n+fixed MD5 16\n+```\n+\n+com/linkedin/pegasus/generator/examples/StringList.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A list of strings\n+ */\n+record StringList {\n+  element: string\n+  next: optional \n+\n+    /**\n+     * A list of strings\n+     */\n+    record StringList {\n+      element: string\n+      next: optional StringList\n+    }\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/InlinedExample.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Example on how you can declare an enum and a record inside another record\n+ */\n+record InlinedExample {\n+\n+  /**\n+   * This is how we inline enum declaration without creating a new pdl file\n+   */\n+  @symbolDocs.FOO = \"It's a foo!\"\n+  @symbolDocs.NONE = \"It's a baz!\"\n+  @symbolDocs.HASH = \"It's a bar!\"\n+  myEnumField: enum EnumDeclarationInTheSameFile {\n+    FOO\n+    BAR\n+    BAZ\n+  }\n+\n+  /**\n+   * A regular string\n+   */\n+  stringField: string\n+\n+  /**\n+   * A regular int\n+   */\n+  intField: int\n+\n+  /**\n+   * In this example we will declare a record and an enum inside a union\n+   */\n+  UnionFieldWithInlineRecordAndEnum: optional union[record myRecord {\n+\n+    /**\n+     * random int field\n+     */\n+    foo1: int\n+\n+    /**\n+     * random int field\n+     */\n+    foo2: int\n+  }, \n+    /**\n+     * Random enum\n+     */\n+    enum anotherEnum {\n+\n+      /**\n+       * description about FOOFOO\n+       */\n+      FOOFOO\n+\n+      /**\n+       * description about BARBAR\n+       */\n+      BARBAR\n+    }]\n+}\n+```\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive type, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+A optional field may have default value.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example : \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+\n+### Import\n+\n+1. If the type is outside the root namespace of the document, you need to add it as an import.\n+\n+2. If the type is declared outside the document, you need to add it as an import.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.imports\n+\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record Example {\n+  /**\n+   * Requires an import since this type is outside the root namespace and is not declared in this file.\n+   */\n+  externalOutsideNS: Simple\n+}\n+```\n+\n+**Note:** \n+- When multiple referenced types with the same unqualified name may be imported, \n+the type with the alphabetically first namespace is chosen. \n+(e.g. \"com.a.b.c.Foo\" is chosen over \"com.x.y.z.Foo\") \n+\n+- Any type that is not imported and is not within the namespace from which it's referenced must be referenced by\n+fully qualified name.\n+\n+\n+### Deprecation\n+Types and fields can be deprecated by adding @deprecated annotation.\n+\n+For example :\n+\n+```\n+@deprecated = \"Use record X instead.\"\n+record Example {\n+  @deprecated = \"Use field x instead.\"\n+  field: string\n+}\n+```\n+\n+### Including fields\n+\n+Record can include fields from other record.\n+\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields f1 from itself and b1 from Bar\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Properties\n+Properties can be used to present arbitrary datas and added to records, fields and enums.\n+\n+For example : \n+```\n+@prop = \"value\"\n+record Fruits {\n+  @validate.regex.regex = \"^(yes|no)$\"\n+  field: string\n+}\n+```\n+#### Property values can be any valid JSON type:\n+\n+For example : \n+```\n+@prop = 1\n+```\n+```\n+@prop = \"string\"\n+```\n+```\n+@prop = [1, 2, 3]\n+```\n+```\n+@prop = { \"a\": 1\", \"b\": { \"c\": true }}\n+```\n+\n+#### Property keys can expressed as paths:\n+\n+For example : \n+```\n+@java.class = \"org.joda.DateTime\"\n+@java.coercerClass = \"org.example.DateTimeCoercer\"\n+```\n+\n+The dot seperate keys format is equivalent to JSON value format.\n+\n+The above dot seperate keys example is equivalent to the following JSON value example :\n+```\n+@java = {\n+  \"class\": \"org.joda.DateTime\",\n+  \"coercerClass\": \"org.example.DateTimeCoercer\"\n+}\n+```\n+\n+### Escaping\n+There are some keywords which are reserved in Pegasus. If you have to use them to define any names, you need to put them in backticks : ` `.\n+\n+#### Keyword Escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PdlKeywordEscaping {\n+  `namespace`: string\n+  `record`: string\n+  `null`: string\n+  `enum`: string\n+  recordName: record `record` { }\n+}\n+```\n+\n+#### Namespace/Package escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping.`record`\n+package com.linkedin.pegasus.generator.test.idl.escaping.override.`typeref`\n+\n+/**\n+ * Ensures that the namespace and package are properly escaped at the root as well as in scoped named-type declarations.\n+ */\n+record NamespacePackageEscaping {\n+  x: {\n+    namespace com.x.y.z.`enum`\n+    package com.a.b.c.`fixed`\n+\n+    record Foo {}\n+  }\n+}\n+```\n+\n+#### Property key escaping \n+\n+If you want Pegasus to treat property key name with dots as one string key, please use backticks to escape such string.\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PropertyKeyEscaping {\n+  @`namespace` = \"foo.bar\"\n+  @`test.path` = 1\n+  @validate.`com.linkedin.CustomValidator` = \"foo\"\n+  aField: string\n+}\n+```\n+\n+\n+## Primitive Types\n+\n+The Pegasus primitive types are : int, long, float, double, boolean, string and bytes.\n+\n+For Example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithPrimitives {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  booleanField: boolean\n+  stringField: string\n+  bytesField: bytes\n+}\n+```\n+\n+## Array Type\n+\n+Pegesus Arrays are defined within a items type.\n+\n+For Example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+record WithPrimitivesArray {\n+  ints: array[int]\n+  longs: array[long]\n+  floats: array[float]\n+  doubles: array[double]\n+  booleans: array[boolean]\n+  strings: array[string]\n+  bytes: array[bytes]\n+}\n+```\n+\n+Record Arrays :\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+\n+record WithRecordArray {\n+  empties: array[Empty]\n+  fruits: array[Fruits]\n+}\n+```\n+\n+\n+## Map Type\n+\n+Pegasus maps are defined with a values type and an optional key type.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+record WithPrimitivesMap {\n+  ints: map[string, int]\n+  longs: map[string, long]\n+  floats: map[string, float]\n+  doubles: map[string, double]\n+  booleans: map[string, boolean]\n+  strings: map[string, string]\n+  bytes: map[string, bytes]\n+}\n+```\n+Custom Types Map :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+import com.linkedin.pegasus.generator.test.idl.customtypes.CustomInt\n+\n+record WithCustomTypesMap {\n+  ints: map[string, CustomInt]\n+}\n+```\n+\n+Complex Types Map :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+import com.linkedin.pegasus.generator.test.idl.`fixed`.Fixed8\n+\n+record WithComplexTypesMap {\n+  empties: map[string, Empty]\n+  fruits: map[string, Fruits]\n+  arrays: map[string, array[Simple]]\n+  maps: map[string, map[string, Simple]]\n+  unions: map[\n+    string,\n+    typeref WithComplexTypesMapUnion = union[int, string, Simple]\n+  ]\n+  `fixed`: map[string, Fixed8]\n+}\n+```\n+\n+**Note**: \n+The key must always be \"string\".\n+\n+\n+## Union Type\n+\n+A union type may be defined with any number of member types. Each member may be any pegasus type except union type. \n+Each member can be primitive, record, enum map or array type.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.unions\n+\n+record WithPrimitivesUnion {\n+  `union`: union[int, long, float, double, boolean, string, bytes]\n+}\n+```\n+\n+The member type names also serve as the \u201cmember keys\u201d (also called as \u201cunion tags\u201d), and identify which union member type data holds.\n+To define a field of a record containing a union of two other records, we would define:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Question {\n+  answerFormat: union[MultipleChoice, TextEntry]\n+}\n+```\n+\n+### Union with aliases\n+Union members can optionally be given an alias. Aliases can be used to create unions with members of the same type or to give better naming for union members.\n+\n+Aliased unions would be defines as :\n+```\n+union [alias: type, ...]\n+```\n+\n+For example :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 641}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2NzE5MQ==", "bodyText": "Suggest picking a different name for the field to avoid confusion", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363567191", "createdAt": "2020-01-07T02:19:57Z", "author": {"login": "karthikbalasub"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema\n+    (required).\n+  - `namespace` qualifies the namespace for the named\n+    schema.\n+  - `package` qualifies the language binding\n+    namespace for the named schema (optional). If this is not specified,\n+    language  bindingclass for the named schema will use `namespace` as\n+    its default namespace.\n+  - `doc` provides documentation to the user of this\n+    named schema (optional).\n+  - `import` qualifies the name of object which is used in the schema.(optional).\n+\n+The named schemas with type \u201cenum\u201d also supports a `doc`\n+attribute to provide documentation for each enum symbol.\n+\n+**Note:** Due to the addition of doclint in JDK8, anything under the\n+`doc`  attribute must be W3C HTML 4.01 compliant. This is\n+because the contents of this string will appear as Javadocs in the\n+generated Java \u2018data template\u2019 classes later. Please take this into\n+consideration when writing your documentation.\n+\n+The following are a few example schemas and their file names.\n+\n+\n+com/linkedin/pegasus/generator/examples/Foo.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, \n+    /**\n+     * A foo record\n+     */\n+    record Foo {\n+      intField: int\n+      longField: long\n+      floatField: float\n+      doubleField: double\n+      bytesField: bytes\n+      stringField: string\n+      intArrayField: array[int]\n+      stringMapField: map[string, string]\n+      unionField: union[int, string, Foo, array[string], map[string, long]]\n+    }, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/FooWithNamespaceOverride.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+package com.linkedin.pegasus.generator.examples.`record`\n+\n+/**\n+ * A foo record\n+ */\n+record FooWithNamespaceOverride {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  fruitsField: Fruits\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, Fruits, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/Fruits.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  /**\n+   * A red, yellow or green fruit.\n+   */\n+  APPLE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  BANANA\n+\n+  /**\n+   * An orange fruit.\n+   */\n+  ORANGE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  PINEAPPLE\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/MD5.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * MD5\n+ */\n+fixed MD5 16\n+```\n+\n+com/linkedin/pegasus/generator/examples/StringList.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A list of strings\n+ */\n+record StringList {\n+  element: string\n+  next: optional \n+\n+    /**\n+     * A list of strings\n+     */\n+    record StringList {\n+      element: string\n+      next: optional StringList\n+    }\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/InlinedExample.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Example on how you can declare an enum and a record inside another record\n+ */\n+record InlinedExample {\n+\n+  /**\n+   * This is how we inline enum declaration without creating a new pdl file\n+   */\n+  @symbolDocs.FOO = \"It's a foo!\"\n+  @symbolDocs.NONE = \"It's a baz!\"\n+  @symbolDocs.HASH = \"It's a bar!\"\n+  myEnumField: enum EnumDeclarationInTheSameFile {\n+    FOO\n+    BAR\n+    BAZ\n+  }\n+\n+  /**\n+   * A regular string\n+   */\n+  stringField: string\n+\n+  /**\n+   * A regular int\n+   */\n+  intField: int\n+\n+  /**\n+   * In this example we will declare a record and an enum inside a union\n+   */\n+  UnionFieldWithInlineRecordAndEnum: optional union[record myRecord {\n+\n+    /**\n+     * random int field\n+     */\n+    foo1: int\n+\n+    /**\n+     * random int field\n+     */\n+    foo2: int\n+  }, \n+    /**\n+     * Random enum\n+     */\n+    enum anotherEnum {\n+\n+      /**\n+       * description about FOOFOO\n+       */\n+      FOOFOO\n+\n+      /**\n+       * description about BARBAR\n+       */\n+      BARBAR\n+    }]\n+}\n+```\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive type, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+A optional field may have default value.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example : \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+\n+### Import\n+\n+1. If the type is outside the root namespace of the document, you need to add it as an import.\n+\n+2. If the type is declared outside the document, you need to add it as an import.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.imports\n+\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record Example {\n+  /**\n+   * Requires an import since this type is outside the root namespace and is not declared in this file.\n+   */\n+  externalOutsideNS: Simple\n+}\n+```\n+\n+**Note:** \n+- When multiple referenced types with the same unqualified name may be imported, \n+the type with the alphabetically first namespace is chosen. \n+(e.g. \"com.a.b.c.Foo\" is chosen over \"com.x.y.z.Foo\") \n+\n+- Any type that is not imported and is not within the namespace from which it's referenced must be referenced by\n+fully qualified name.\n+\n+\n+### Deprecation\n+Types and fields can be deprecated by adding @deprecated annotation.\n+\n+For example :\n+\n+```\n+@deprecated = \"Use record X instead.\"\n+record Example {\n+  @deprecated = \"Use field x instead.\"\n+  field: string\n+}\n+```\n+\n+### Including fields\n+\n+Record can include fields from other record.\n+\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields f1 from itself and b1 from Bar\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Properties\n+Properties can be used to present arbitrary datas and added to records, fields and enums.\n+\n+For example : \n+```\n+@prop = \"value\"\n+record Fruits {\n+  @validate.regex.regex = \"^(yes|no)$\"\n+  field: string\n+}\n+```\n+#### Property values can be any valid JSON type:\n+\n+For example : \n+```\n+@prop = 1\n+```\n+```\n+@prop = \"string\"\n+```\n+```\n+@prop = [1, 2, 3]\n+```\n+```\n+@prop = { \"a\": 1\", \"b\": { \"c\": true }}\n+```\n+\n+#### Property keys can expressed as paths:\n+\n+For example : \n+```\n+@java.class = \"org.joda.DateTime\"\n+@java.coercerClass = \"org.example.DateTimeCoercer\"\n+```\n+\n+The dot seperate keys format is equivalent to JSON value format.\n+\n+The above dot seperate keys example is equivalent to the following JSON value example :\n+```\n+@java = {\n+  \"class\": \"org.joda.DateTime\",\n+  \"coercerClass\": \"org.example.DateTimeCoercer\"\n+}\n+```\n+\n+### Escaping\n+There are some keywords which are reserved in Pegasus. If you have to use them to define any names, you need to put them in backticks : ` `.\n+\n+#### Keyword Escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PdlKeywordEscaping {\n+  `namespace`: string\n+  `record`: string\n+  `null`: string\n+  `enum`: string\n+  recordName: record `record` { }\n+}\n+```\n+\n+#### Namespace/Package escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping.`record`\n+package com.linkedin.pegasus.generator.test.idl.escaping.override.`typeref`\n+\n+/**\n+ * Ensures that the namespace and package are properly escaped at the root as well as in scoped named-type declarations.\n+ */\n+record NamespacePackageEscaping {\n+  x: {\n+    namespace com.x.y.z.`enum`\n+    package com.a.b.c.`fixed`\n+\n+    record Foo {}\n+  }\n+}\n+```\n+\n+#### Property key escaping \n+\n+If you want Pegasus to treat property key name with dots as one string key, please use backticks to escape such string.\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PropertyKeyEscaping {\n+  @`namespace` = \"foo.bar\"\n+  @`test.path` = 1\n+  @validate.`com.linkedin.CustomValidator` = \"foo\"\n+  aField: string\n+}\n+```\n+\n+\n+## Primitive Types\n+\n+The Pegasus primitive types are : int, long, float, double, boolean, string and bytes.\n+\n+For Example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithPrimitives {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  booleanField: boolean\n+  stringField: string\n+  bytesField: bytes\n+}\n+```\n+\n+## Array Type\n+\n+Pegesus Arrays are defined within a items type.\n+\n+For Example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+record WithPrimitivesArray {\n+  ints: array[int]\n+  longs: array[long]\n+  floats: array[float]\n+  doubles: array[double]\n+  booleans: array[boolean]\n+  strings: array[string]\n+  bytes: array[bytes]\n+}\n+```\n+\n+Record Arrays :\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+\n+record WithRecordArray {\n+  empties: array[Empty]\n+  fruits: array[Fruits]\n+}\n+```\n+\n+\n+## Map Type\n+\n+Pegasus maps are defined with a values type and an optional key type.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+record WithPrimitivesMap {\n+  ints: map[string, int]\n+  longs: map[string, long]\n+  floats: map[string, float]\n+  doubles: map[string, double]\n+  booleans: map[string, boolean]\n+  strings: map[string, string]\n+  bytes: map[string, bytes]\n+}\n+```\n+Custom Types Map :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+import com.linkedin.pegasus.generator.test.idl.customtypes.CustomInt\n+\n+record WithCustomTypesMap {\n+  ints: map[string, CustomInt]\n+}\n+```\n+\n+Complex Types Map :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+import com.linkedin.pegasus.generator.test.idl.`fixed`.Fixed8\n+\n+record WithComplexTypesMap {\n+  empties: map[string, Empty]\n+  fruits: map[string, Fruits]\n+  arrays: map[string, array[Simple]]\n+  maps: map[string, map[string, Simple]]\n+  unions: map[\n+    string,\n+    typeref WithComplexTypesMapUnion = union[int, string, Simple]\n+  ]\n+  `fixed`: map[string, Fixed8]\n+}\n+```\n+\n+**Note**: \n+The key must always be \"string\".\n+\n+\n+## Union Type\n+\n+A union type may be defined with any number of member types. Each member may be any pegasus type except union type. \n+Each member can be primitive, record, enum map or array type.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.unions\n+\n+record WithPrimitivesUnion {\n+  `union`: union[int, long, float, double, boolean, string, bytes]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 619}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MDA0MjQ5", "url": "https://github.com/linkedin/rest.li/pull/157#pullrequestreview-339004249", "createdAt": "2020-01-07T02:36:32Z", "commit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "state": "COMMENTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMjozNjozM1rOFauj8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMzowMTowMlrOFauz7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3MDE2Mg==", "bodyText": "Same as Karthik's comments. This section doesn't make sense because PDL schemas don't have \"attributes\" as JSON keys. These things are defined using specific constructs in the syntax.", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363570162", "createdAt": "2020-01-07T02:36:33Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3MDY2NQ==", "bodyText": "These are both incorrect; imports are not required at all. Imports are only used for convenience to avoid writing whole FQNs.", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363570665", "createdAt": "2020-01-07T02:39:22Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema\n+    (required).\n+  - `namespace` qualifies the namespace for the named\n+    schema.\n+  - `package` qualifies the language binding\n+    namespace for the named schema (optional). If this is not specified,\n+    language  bindingclass for the named schema will use `namespace` as\n+    its default namespace.\n+  - `doc` provides documentation to the user of this\n+    named schema (optional).\n+  - `import` qualifies the name of object which is used in the schema.(optional).\n+\n+The named schemas with type \u201cenum\u201d also supports a `doc`\n+attribute to provide documentation for each enum symbol.\n+\n+**Note:** Due to the addition of doclint in JDK8, anything under the\n+`doc`  attribute must be W3C HTML 4.01 compliant. This is\n+because the contents of this string will appear as Javadocs in the\n+generated Java \u2018data template\u2019 classes later. Please take this into\n+consideration when writing your documentation.\n+\n+The following are a few example schemas and their file names.\n+\n+\n+com/linkedin/pegasus/generator/examples/Foo.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, \n+    /**\n+     * A foo record\n+     */\n+    record Foo {\n+      intField: int\n+      longField: long\n+      floatField: float\n+      doubleField: double\n+      bytesField: bytes\n+      stringField: string\n+      intArrayField: array[int]\n+      stringMapField: map[string, string]\n+      unionField: union[int, string, Foo, array[string], map[string, long]]\n+    }, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/FooWithNamespaceOverride.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+package com.linkedin.pegasus.generator.examples.`record`\n+\n+/**\n+ * A foo record\n+ */\n+record FooWithNamespaceOverride {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  fruitsField: Fruits\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, Fruits, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/Fruits.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  /**\n+   * A red, yellow or green fruit.\n+   */\n+  APPLE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  BANANA\n+\n+  /**\n+   * An orange fruit.\n+   */\n+  ORANGE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  PINEAPPLE\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/MD5.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * MD5\n+ */\n+fixed MD5 16\n+```\n+\n+com/linkedin/pegasus/generator/examples/StringList.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A list of strings\n+ */\n+record StringList {\n+  element: string\n+  next: optional \n+\n+    /**\n+     * A list of strings\n+     */\n+    record StringList {\n+      element: string\n+      next: optional StringList\n+    }\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/InlinedExample.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Example on how you can declare an enum and a record inside another record\n+ */\n+record InlinedExample {\n+\n+  /**\n+   * This is how we inline enum declaration without creating a new pdl file\n+   */\n+  @symbolDocs.FOO = \"It's a foo!\"\n+  @symbolDocs.NONE = \"It's a baz!\"\n+  @symbolDocs.HASH = \"It's a bar!\"\n+  myEnumField: enum EnumDeclarationInTheSameFile {\n+    FOO\n+    BAR\n+    BAZ\n+  }\n+\n+  /**\n+   * A regular string\n+   */\n+  stringField: string\n+\n+  /**\n+   * A regular int\n+   */\n+  intField: int\n+\n+  /**\n+   * In this example we will declare a record and an enum inside a union\n+   */\n+  UnionFieldWithInlineRecordAndEnum: optional union[record myRecord {\n+\n+    /**\n+     * random int field\n+     */\n+    foo1: int\n+\n+    /**\n+     * random int field\n+     */\n+    foo2: int\n+  }, \n+    /**\n+     * Random enum\n+     */\n+    enum anotherEnum {\n+\n+      /**\n+       * description about FOOFOO\n+       */\n+      FOOFOO\n+\n+      /**\n+       * description about BARBAR\n+       */\n+      BARBAR\n+    }]\n+}\n+```\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive type, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+A optional field may have default value.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example : \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+\n+### Import\n+\n+1. If the type is outside the root namespace of the document, you need to add it as an import.\n+\n+2. If the type is declared outside the document, you need to add it as an import.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 339}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3MTAzMg==", "bodyText": "This is misleading and also confusing. The alphabetical rule you're describing is only used by the encoder. Anyone writing PDL can import a type even if it's alphabetically after another type with the same simple name. I'd suggest just removing this point since it doesn't apply to how the parser interprets PDL.", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363571032", "createdAt": "2020-01-07T02:41:38Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema\n+    (required).\n+  - `namespace` qualifies the namespace for the named\n+    schema.\n+  - `package` qualifies the language binding\n+    namespace for the named schema (optional). If this is not specified,\n+    language  bindingclass for the named schema will use `namespace` as\n+    its default namespace.\n+  - `doc` provides documentation to the user of this\n+    named schema (optional).\n+  - `import` qualifies the name of object which is used in the schema.(optional).\n+\n+The named schemas with type \u201cenum\u201d also supports a `doc`\n+attribute to provide documentation for each enum symbol.\n+\n+**Note:** Due to the addition of doclint in JDK8, anything under the\n+`doc`  attribute must be W3C HTML 4.01 compliant. This is\n+because the contents of this string will appear as Javadocs in the\n+generated Java \u2018data template\u2019 classes later. Please take this into\n+consideration when writing your documentation.\n+\n+The following are a few example schemas and their file names.\n+\n+\n+com/linkedin/pegasus/generator/examples/Foo.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, \n+    /**\n+     * A foo record\n+     */\n+    record Foo {\n+      intField: int\n+      longField: long\n+      floatField: float\n+      doubleField: double\n+      bytesField: bytes\n+      stringField: string\n+      intArrayField: array[int]\n+      stringMapField: map[string, string]\n+      unionField: union[int, string, Foo, array[string], map[string, long]]\n+    }, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/FooWithNamespaceOverride.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+package com.linkedin.pegasus.generator.examples.`record`\n+\n+/**\n+ * A foo record\n+ */\n+record FooWithNamespaceOverride {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  fruitsField: Fruits\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, Fruits, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/Fruits.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  /**\n+   * A red, yellow or green fruit.\n+   */\n+  APPLE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  BANANA\n+\n+  /**\n+   * An orange fruit.\n+   */\n+  ORANGE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  PINEAPPLE\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/MD5.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * MD5\n+ */\n+fixed MD5 16\n+```\n+\n+com/linkedin/pegasus/generator/examples/StringList.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A list of strings\n+ */\n+record StringList {\n+  element: string\n+  next: optional \n+\n+    /**\n+     * A list of strings\n+     */\n+    record StringList {\n+      element: string\n+      next: optional StringList\n+    }\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/InlinedExample.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Example on how you can declare an enum and a record inside another record\n+ */\n+record InlinedExample {\n+\n+  /**\n+   * This is how we inline enum declaration without creating a new pdl file\n+   */\n+  @symbolDocs.FOO = \"It's a foo!\"\n+  @symbolDocs.NONE = \"It's a baz!\"\n+  @symbolDocs.HASH = \"It's a bar!\"\n+  myEnumField: enum EnumDeclarationInTheSameFile {\n+    FOO\n+    BAR\n+    BAZ\n+  }\n+\n+  /**\n+   * A regular string\n+   */\n+  stringField: string\n+\n+  /**\n+   * A regular int\n+   */\n+  intField: int\n+\n+  /**\n+   * In this example we will declare a record and an enum inside a union\n+   */\n+  UnionFieldWithInlineRecordAndEnum: optional union[record myRecord {\n+\n+    /**\n+     * random int field\n+     */\n+    foo1: int\n+\n+    /**\n+     * random int field\n+     */\n+    foo2: int\n+  }, \n+    /**\n+     * Random enum\n+     */\n+    enum anotherEnum {\n+\n+      /**\n+       * description about FOOFOO\n+       */\n+      FOOFOO\n+\n+      /**\n+       * description about BARBAR\n+       */\n+      BARBAR\n+    }]\n+}\n+```\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive type, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+A optional field may have default value.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example : \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+\n+### Import\n+\n+1. If the type is outside the root namespace of the document, you need to add it as an import.\n+\n+2. If the type is declared outside the document, you need to add it as an import.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.imports\n+\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record Example {\n+  /**\n+   * Requires an import since this type is outside the root namespace and is not declared in this file.\n+   */\n+  externalOutsideNS: Simple\n+}\n+```\n+\n+**Note:** \n+- When multiple referenced types with the same unqualified name may be imported, \n+the type with the alphabetically first namespace is chosen. \n+(e.g. \"com.a.b.c.Foo\" is chosen over \"com.x.y.z.Foo\") ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 358}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3MTMzNA==", "bodyText": "You should probably just replace this with an explanation of what imports are (i.e. optional statements which allow you to avoid writing whole FQNs, similar to in Java). You should also include below the three rules which dictate the kinds of imports that result in parser errors.", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363571334", "createdAt": "2020-01-07T02:43:33Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema\n+    (required).\n+  - `namespace` qualifies the namespace for the named\n+    schema.\n+  - `package` qualifies the language binding\n+    namespace for the named schema (optional). If this is not specified,\n+    language  bindingclass for the named schema will use `namespace` as\n+    its default namespace.\n+  - `doc` provides documentation to the user of this\n+    named schema (optional).\n+  - `import` qualifies the name of object which is used in the schema.(optional).\n+\n+The named schemas with type \u201cenum\u201d also supports a `doc`\n+attribute to provide documentation for each enum symbol.\n+\n+**Note:** Due to the addition of doclint in JDK8, anything under the\n+`doc`  attribute must be W3C HTML 4.01 compliant. This is\n+because the contents of this string will appear as Javadocs in the\n+generated Java \u2018data template\u2019 classes later. Please take this into\n+consideration when writing your documentation.\n+\n+The following are a few example schemas and their file names.\n+\n+\n+com/linkedin/pegasus/generator/examples/Foo.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, \n+    /**\n+     * A foo record\n+     */\n+    record Foo {\n+      intField: int\n+      longField: long\n+      floatField: float\n+      doubleField: double\n+      bytesField: bytes\n+      stringField: string\n+      intArrayField: array[int]\n+      stringMapField: map[string, string]\n+      unionField: union[int, string, Foo, array[string], map[string, long]]\n+    }, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/FooWithNamespaceOverride.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+package com.linkedin.pegasus.generator.examples.`record`\n+\n+/**\n+ * A foo record\n+ */\n+record FooWithNamespaceOverride {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  fruitsField: Fruits\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, Fruits, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/Fruits.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  /**\n+   * A red, yellow or green fruit.\n+   */\n+  APPLE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  BANANA\n+\n+  /**\n+   * An orange fruit.\n+   */\n+  ORANGE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  PINEAPPLE\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/MD5.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * MD5\n+ */\n+fixed MD5 16\n+```\n+\n+com/linkedin/pegasus/generator/examples/StringList.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A list of strings\n+ */\n+record StringList {\n+  element: string\n+  next: optional \n+\n+    /**\n+     * A list of strings\n+     */\n+    record StringList {\n+      element: string\n+      next: optional StringList\n+    }\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/InlinedExample.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Example on how you can declare an enum and a record inside another record\n+ */\n+record InlinedExample {\n+\n+  /**\n+   * This is how we inline enum declaration without creating a new pdl file\n+   */\n+  @symbolDocs.FOO = \"It's a foo!\"\n+  @symbolDocs.NONE = \"It's a baz!\"\n+  @symbolDocs.HASH = \"It's a bar!\"\n+  myEnumField: enum EnumDeclarationInTheSameFile {\n+    FOO\n+    BAR\n+    BAZ\n+  }\n+\n+  /**\n+   * A regular string\n+   */\n+  stringField: string\n+\n+  /**\n+   * A regular int\n+   */\n+  intField: int\n+\n+  /**\n+   * In this example we will declare a record and an enum inside a union\n+   */\n+  UnionFieldWithInlineRecordAndEnum: optional union[record myRecord {\n+\n+    /**\n+     * random int field\n+     */\n+    foo1: int\n+\n+    /**\n+     * random int field\n+     */\n+    foo2: int\n+  }, \n+    /**\n+     * Random enum\n+     */\n+    enum anotherEnum {\n+\n+      /**\n+       * description about FOOFOO\n+       */\n+      FOOFOO\n+\n+      /**\n+       * description about BARBAR\n+       */\n+      BARBAR\n+    }]\n+}\n+```\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive type, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+A optional field may have default value.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example : \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+\n+### Import\n+\n+1. If the type is outside the root namespace of the document, you need to add it as an import.\n+\n+2. If the type is declared outside the document, you need to add it as an import.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3MDY2NQ=="}, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 339}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3MTQ4MQ==", "bodyText": "+1, explain how this works for all types, enum symbols, and record fields (also union members maybe?)", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363571481", "createdAt": "2020-01-07T02:44:25Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema\n+    (required).\n+  - `namespace` qualifies the namespace for the named\n+    schema.\n+  - `package` qualifies the language binding\n+    namespace for the named schema (optional). If this is not specified,\n+    language  bindingclass for the named schema will use `namespace` as\n+    its default namespace.\n+  - `doc` provides documentation to the user of this\n+    named schema (optional).\n+  - `import` qualifies the name of object which is used in the schema.(optional).\n+\n+The named schemas with type \u201cenum\u201d also supports a `doc`\n+attribute to provide documentation for each enum symbol.\n+\n+**Note:** Due to the addition of doclint in JDK8, anything under the\n+`doc`  attribute must be W3C HTML 4.01 compliant. This is\n+because the contents of this string will appear as Javadocs in the\n+generated Java \u2018data template\u2019 classes later. Please take this into\n+consideration when writing your documentation.\n+\n+The following are a few example schemas and their file names.\n+\n+\n+com/linkedin/pegasus/generator/examples/Foo.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, \n+    /**\n+     * A foo record\n+     */\n+    record Foo {\n+      intField: int\n+      longField: long\n+      floatField: float\n+      doubleField: double\n+      bytesField: bytes\n+      stringField: string\n+      intArrayField: array[int]\n+      stringMapField: map[string, string]\n+      unionField: union[int, string, Foo, array[string], map[string, long]]\n+    }, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/FooWithNamespaceOverride.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+package com.linkedin.pegasus.generator.examples.`record`\n+\n+/**\n+ * A foo record\n+ */\n+record FooWithNamespaceOverride {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  fruitsField: Fruits\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, Fruits, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/Fruits.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  /**\n+   * A red, yellow or green fruit.\n+   */\n+  APPLE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  BANANA\n+\n+  /**\n+   * An orange fruit.\n+   */\n+  ORANGE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  PINEAPPLE\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/MD5.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * MD5\n+ */\n+fixed MD5 16\n+```\n+\n+com/linkedin/pegasus/generator/examples/StringList.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A list of strings\n+ */\n+record StringList {\n+  element: string\n+  next: optional \n+\n+    /**\n+     * A list of strings\n+     */\n+    record StringList {\n+      element: string\n+      next: optional StringList\n+    }\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/InlinedExample.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Example on how you can declare an enum and a record inside another record\n+ */\n+record InlinedExample {\n+\n+  /**\n+   * This is how we inline enum declaration without creating a new pdl file\n+   */\n+  @symbolDocs.FOO = \"It's a foo!\"\n+  @symbolDocs.NONE = \"It's a baz!\"\n+  @symbolDocs.HASH = \"It's a bar!\"\n+  myEnumField: enum EnumDeclarationInTheSameFile {\n+    FOO\n+    BAR\n+    BAZ\n+  }\n+\n+  /**\n+   * A regular string\n+   */\n+  stringField: string\n+\n+  /**\n+   * A regular int\n+   */\n+  intField: int\n+\n+  /**\n+   * In this example we will declare a record and an enum inside a union\n+   */\n+  UnionFieldWithInlineRecordAndEnum: optional union[record myRecord {\n+\n+    /**\n+     * random int field\n+     */\n+    foo1: int\n+\n+    /**\n+     * random int field\n+     */\n+    foo2: int\n+  }, \n+    /**\n+     * Random enum\n+     */\n+    enum anotherEnum {\n+\n+      /**\n+       * description about FOOFOO\n+       */\n+      FOOFOO\n+\n+      /**\n+       * description about BARBAR\n+       */\n+      BARBAR\n+    }]\n+}\n+```\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive type, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+A optional field may have default value.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example : \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+\n+### Import\n+\n+1. If the type is outside the root namespace of the document, you need to add it as an import.\n+\n+2. If the type is declared outside the document, you need to add it as an import.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.imports\n+\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record Example {\n+  /**\n+   * Requires an import since this type is outside the root namespace and is not declared in this file.\n+   */\n+  externalOutsideNS: Simple\n+}\n+```\n+\n+**Note:** \n+- When multiple referenced types with the same unqualified name may be imported, \n+the type with the alphabetically first namespace is chosen. \n+(e.g. \"com.a.b.c.Foo\" is chosen over \"com.x.y.z.Foo\") \n+\n+- Any type that is not imported and is not within the namespace from which it's referenced must be referenced by\n+fully qualified name.\n+\n+\n+### Deprecation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2Mzk0Ng=="}, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 364}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3MTU5NQ==", "bodyText": "You should also explain that includes can be done after the definition as well (include-before vs include-after)", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363571595", "createdAt": "2020-01-07T02:45:14Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema\n+    (required).\n+  - `namespace` qualifies the namespace for the named\n+    schema.\n+  - `package` qualifies the language binding\n+    namespace for the named schema (optional). If this is not specified,\n+    language  bindingclass for the named schema will use `namespace` as\n+    its default namespace.\n+  - `doc` provides documentation to the user of this\n+    named schema (optional).\n+  - `import` qualifies the name of object which is used in the schema.(optional).\n+\n+The named schemas with type \u201cenum\u201d also supports a `doc`\n+attribute to provide documentation for each enum symbol.\n+\n+**Note:** Due to the addition of doclint in JDK8, anything under the\n+`doc`  attribute must be W3C HTML 4.01 compliant. This is\n+because the contents of this string will appear as Javadocs in the\n+generated Java \u2018data template\u2019 classes later. Please take this into\n+consideration when writing your documentation.\n+\n+The following are a few example schemas and their file names.\n+\n+\n+com/linkedin/pegasus/generator/examples/Foo.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, \n+    /**\n+     * A foo record\n+     */\n+    record Foo {\n+      intField: int\n+      longField: long\n+      floatField: float\n+      doubleField: double\n+      bytesField: bytes\n+      stringField: string\n+      intArrayField: array[int]\n+      stringMapField: map[string, string]\n+      unionField: union[int, string, Foo, array[string], map[string, long]]\n+    }, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/FooWithNamespaceOverride.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+package com.linkedin.pegasus.generator.examples.`record`\n+\n+/**\n+ * A foo record\n+ */\n+record FooWithNamespaceOverride {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  fruitsField: Fruits\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, Fruits, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/Fruits.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  /**\n+   * A red, yellow or green fruit.\n+   */\n+  APPLE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  BANANA\n+\n+  /**\n+   * An orange fruit.\n+   */\n+  ORANGE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  PINEAPPLE\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/MD5.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * MD5\n+ */\n+fixed MD5 16\n+```\n+\n+com/linkedin/pegasus/generator/examples/StringList.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A list of strings\n+ */\n+record StringList {\n+  element: string\n+  next: optional \n+\n+    /**\n+     * A list of strings\n+     */\n+    record StringList {\n+      element: string\n+      next: optional StringList\n+    }\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/InlinedExample.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Example on how you can declare an enum and a record inside another record\n+ */\n+record InlinedExample {\n+\n+  /**\n+   * This is how we inline enum declaration without creating a new pdl file\n+   */\n+  @symbolDocs.FOO = \"It's a foo!\"\n+  @symbolDocs.NONE = \"It's a baz!\"\n+  @symbolDocs.HASH = \"It's a bar!\"\n+  myEnumField: enum EnumDeclarationInTheSameFile {\n+    FOO\n+    BAR\n+    BAZ\n+  }\n+\n+  /**\n+   * A regular string\n+   */\n+  stringField: string\n+\n+  /**\n+   * A regular int\n+   */\n+  intField: int\n+\n+  /**\n+   * In this example we will declare a record and an enum inside a union\n+   */\n+  UnionFieldWithInlineRecordAndEnum: optional union[record myRecord {\n+\n+    /**\n+     * random int field\n+     */\n+    foo1: int\n+\n+    /**\n+     * random int field\n+     */\n+    foo2: int\n+  }, \n+    /**\n+     * Random enum\n+     */\n+    enum anotherEnum {\n+\n+      /**\n+       * description about FOOFOO\n+       */\n+      FOOFOO\n+\n+      /**\n+       * description about BARBAR\n+       */\n+      BARBAR\n+    }]\n+}\n+```\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive type, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+A optional field may have default value.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example : \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+\n+### Import\n+\n+1. If the type is outside the root namespace of the document, you need to add it as an import.\n+\n+2. If the type is declared outside the document, you need to add it as an import.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.imports\n+\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record Example {\n+  /**\n+   * Requires an import since this type is outside the root namespace and is not declared in this file.\n+   */\n+  externalOutsideNS: Simple\n+}\n+```\n+\n+**Note:** \n+- When multiple referenced types with the same unqualified name may be imported, \n+the type with the alphabetically first namespace is chosen. \n+(e.g. \"com.a.b.c.Foo\" is chosen over \"com.x.y.z.Foo\") \n+\n+- Any type that is not imported and is not within the namespace from which it's referenced must be referenced by\n+fully qualified name.\n+\n+\n+### Deprecation\n+Types and fields can be deprecated by adding @deprecated annotation.\n+\n+For example :\n+\n+```\n+@deprecated = \"Use record X instead.\"\n+record Example {\n+  @deprecated = \"Use field x instead.\"\n+  field: string\n+}\n+```\n+\n+### Including fields", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 377}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3MTc5OQ==", "bodyText": "Include example showing that properties without explicit values (e.g. @prop) can be used, and explain that this results in a value of true.", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363571799", "createdAt": "2020-01-07T02:46:17Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema\n+    (required).\n+  - `namespace` qualifies the namespace for the named\n+    schema.\n+  - `package` qualifies the language binding\n+    namespace for the named schema (optional). If this is not specified,\n+    language  bindingclass for the named schema will use `namespace` as\n+    its default namespace.\n+  - `doc` provides documentation to the user of this\n+    named schema (optional).\n+  - `import` qualifies the name of object which is used in the schema.(optional).\n+\n+The named schemas with type \u201cenum\u201d also supports a `doc`\n+attribute to provide documentation for each enum symbol.\n+\n+**Note:** Due to the addition of doclint in JDK8, anything under the\n+`doc`  attribute must be W3C HTML 4.01 compliant. This is\n+because the contents of this string will appear as Javadocs in the\n+generated Java \u2018data template\u2019 classes later. Please take this into\n+consideration when writing your documentation.\n+\n+The following are a few example schemas and their file names.\n+\n+\n+com/linkedin/pegasus/generator/examples/Foo.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, \n+    /**\n+     * A foo record\n+     */\n+    record Foo {\n+      intField: int\n+      longField: long\n+      floatField: float\n+      doubleField: double\n+      bytesField: bytes\n+      stringField: string\n+      intArrayField: array[int]\n+      stringMapField: map[string, string]\n+      unionField: union[int, string, Foo, array[string], map[string, long]]\n+    }, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/FooWithNamespaceOverride.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+package com.linkedin.pegasus.generator.examples.`record`\n+\n+/**\n+ * A foo record\n+ */\n+record FooWithNamespaceOverride {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  fruitsField: Fruits\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, Fruits, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/Fruits.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  /**\n+   * A red, yellow or green fruit.\n+   */\n+  APPLE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  BANANA\n+\n+  /**\n+   * An orange fruit.\n+   */\n+  ORANGE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  PINEAPPLE\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/MD5.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * MD5\n+ */\n+fixed MD5 16\n+```\n+\n+com/linkedin/pegasus/generator/examples/StringList.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A list of strings\n+ */\n+record StringList {\n+  element: string\n+  next: optional \n+\n+    /**\n+     * A list of strings\n+     */\n+    record StringList {\n+      element: string\n+      next: optional StringList\n+    }\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/InlinedExample.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Example on how you can declare an enum and a record inside another record\n+ */\n+record InlinedExample {\n+\n+  /**\n+   * This is how we inline enum declaration without creating a new pdl file\n+   */\n+  @symbolDocs.FOO = \"It's a foo!\"\n+  @symbolDocs.NONE = \"It's a baz!\"\n+  @symbolDocs.HASH = \"It's a bar!\"\n+  myEnumField: enum EnumDeclarationInTheSameFile {\n+    FOO\n+    BAR\n+    BAZ\n+  }\n+\n+  /**\n+   * A regular string\n+   */\n+  stringField: string\n+\n+  /**\n+   * A regular int\n+   */\n+  intField: int\n+\n+  /**\n+   * In this example we will declare a record and an enum inside a union\n+   */\n+  UnionFieldWithInlineRecordAndEnum: optional union[record myRecord {\n+\n+    /**\n+     * random int field\n+     */\n+    foo1: int\n+\n+    /**\n+     * random int field\n+     */\n+    foo2: int\n+  }, \n+    /**\n+     * Random enum\n+     */\n+    enum anotherEnum {\n+\n+      /**\n+       * description about FOOFOO\n+       */\n+      FOOFOO\n+\n+      /**\n+       * description about BARBAR\n+       */\n+      BARBAR\n+    }]\n+}\n+```\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive type, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+A optional field may have default value.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example : \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+\n+### Import\n+\n+1. If the type is outside the root namespace of the document, you need to add it as an import.\n+\n+2. If the type is declared outside the document, you need to add it as an import.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.imports\n+\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record Example {\n+  /**\n+   * Requires an import since this type is outside the root namespace and is not declared in this file.\n+   */\n+  externalOutsideNS: Simple\n+}\n+```\n+\n+**Note:** \n+- When multiple referenced types with the same unqualified name may be imported, \n+the type with the alphabetically first namespace is chosen. \n+(e.g. \"com.a.b.c.Foo\" is chosen over \"com.x.y.z.Foo\") \n+\n+- Any type that is not imported and is not within the namespace from which it's referenced must be referenced by\n+fully qualified name.\n+\n+\n+### Deprecation\n+Types and fields can be deprecated by adding @deprecated annotation.\n+\n+For example :\n+\n+```\n+@deprecated = \"Use record X instead.\"\n+record Example {\n+  @deprecated = \"Use field x instead.\"\n+  field: string\n+}\n+```\n+\n+### Including fields\n+\n+Record can include fields from other record.\n+\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields f1 from itself and b1 from Bar\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Properties\n+Properties can be used to present arbitrary datas and added to records, fields and enums.\n+\n+For example : \n+```\n+@prop = \"value\"\n+record Fruits {\n+  @validate.regex.regex = \"^(yes|no)$\"\n+  field: string\n+}\n+```\n+#### Property values can be any valid JSON type:\n+\n+For example : ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 416}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3MjA4NA==", "bodyText": "I'd suggest using a more clear example. This example is confusing because there are only two segments in the path, and the value also happens to represent a path as well. Something like @a.b.c = 10 is good, because then the expanded @a = {\"b\": {\"c\": 10}} is exaggerated.", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363572084", "createdAt": "2020-01-07T02:48:07Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema\n+    (required).\n+  - `namespace` qualifies the namespace for the named\n+    schema.\n+  - `package` qualifies the language binding\n+    namespace for the named schema (optional). If this is not specified,\n+    language  bindingclass for the named schema will use `namespace` as\n+    its default namespace.\n+  - `doc` provides documentation to the user of this\n+    named schema (optional).\n+  - `import` qualifies the name of object which is used in the schema.(optional).\n+\n+The named schemas with type \u201cenum\u201d also supports a `doc`\n+attribute to provide documentation for each enum symbol.\n+\n+**Note:** Due to the addition of doclint in JDK8, anything under the\n+`doc`  attribute must be W3C HTML 4.01 compliant. This is\n+because the contents of this string will appear as Javadocs in the\n+generated Java \u2018data template\u2019 classes later. Please take this into\n+consideration when writing your documentation.\n+\n+The following are a few example schemas and their file names.\n+\n+\n+com/linkedin/pegasus/generator/examples/Foo.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, \n+    /**\n+     * A foo record\n+     */\n+    record Foo {\n+      intField: int\n+      longField: long\n+      floatField: float\n+      doubleField: double\n+      bytesField: bytes\n+      stringField: string\n+      intArrayField: array[int]\n+      stringMapField: map[string, string]\n+      unionField: union[int, string, Foo, array[string], map[string, long]]\n+    }, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/FooWithNamespaceOverride.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+package com.linkedin.pegasus.generator.examples.`record`\n+\n+/**\n+ * A foo record\n+ */\n+record FooWithNamespaceOverride {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  fruitsField: Fruits\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, Fruits, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/Fruits.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  /**\n+   * A red, yellow or green fruit.\n+   */\n+  APPLE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  BANANA\n+\n+  /**\n+   * An orange fruit.\n+   */\n+  ORANGE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  PINEAPPLE\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/MD5.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * MD5\n+ */\n+fixed MD5 16\n+```\n+\n+com/linkedin/pegasus/generator/examples/StringList.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A list of strings\n+ */\n+record StringList {\n+  element: string\n+  next: optional \n+\n+    /**\n+     * A list of strings\n+     */\n+    record StringList {\n+      element: string\n+      next: optional StringList\n+    }\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/InlinedExample.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Example on how you can declare an enum and a record inside another record\n+ */\n+record InlinedExample {\n+\n+  /**\n+   * This is how we inline enum declaration without creating a new pdl file\n+   */\n+  @symbolDocs.FOO = \"It's a foo!\"\n+  @symbolDocs.NONE = \"It's a baz!\"\n+  @symbolDocs.HASH = \"It's a bar!\"\n+  myEnumField: enum EnumDeclarationInTheSameFile {\n+    FOO\n+    BAR\n+    BAZ\n+  }\n+\n+  /**\n+   * A regular string\n+   */\n+  stringField: string\n+\n+  /**\n+   * A regular int\n+   */\n+  intField: int\n+\n+  /**\n+   * In this example we will declare a record and an enum inside a union\n+   */\n+  UnionFieldWithInlineRecordAndEnum: optional union[record myRecord {\n+\n+    /**\n+     * random int field\n+     */\n+    foo1: int\n+\n+    /**\n+     * random int field\n+     */\n+    foo2: int\n+  }, \n+    /**\n+     * Random enum\n+     */\n+    enum anotherEnum {\n+\n+      /**\n+       * description about FOOFOO\n+       */\n+      FOOFOO\n+\n+      /**\n+       * description about BARBAR\n+       */\n+      BARBAR\n+    }]\n+}\n+```\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive type, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+A optional field may have default value.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example : \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+\n+### Import\n+\n+1. If the type is outside the root namespace of the document, you need to add it as an import.\n+\n+2. If the type is declared outside the document, you need to add it as an import.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.imports\n+\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record Example {\n+  /**\n+   * Requires an import since this type is outside the root namespace and is not declared in this file.\n+   */\n+  externalOutsideNS: Simple\n+}\n+```\n+\n+**Note:** \n+- When multiple referenced types with the same unqualified name may be imported, \n+the type with the alphabetically first namespace is chosen. \n+(e.g. \"com.a.b.c.Foo\" is chosen over \"com.x.y.z.Foo\") \n+\n+- Any type that is not imported and is not within the namespace from which it's referenced must be referenced by\n+fully qualified name.\n+\n+\n+### Deprecation\n+Types and fields can be deprecated by adding @deprecated annotation.\n+\n+For example :\n+\n+```\n+@deprecated = \"Use record X instead.\"\n+record Example {\n+  @deprecated = \"Use field x instead.\"\n+  field: string\n+}\n+```\n+\n+### Including fields\n+\n+Record can include fields from other record.\n+\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields f1 from itself and b1 from Bar\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Properties\n+Properties can be used to present arbitrary datas and added to records, fields and enums.\n+\n+For example : \n+```\n+@prop = \"value\"\n+record Fruits {\n+  @validate.regex.regex = \"^(yes|no)$\"\n+  field: string\n+}\n+```\n+#### Property values can be any valid JSON type:\n+\n+For example : \n+```\n+@prop = 1\n+```\n+```\n+@prop = \"string\"\n+```\n+```\n+@prop = [1, 2, 3]\n+```\n+```\n+@prop = { \"a\": 1\", \"b\": { \"c\": true }}\n+```\n+\n+#### Property keys can expressed as paths:\n+\n+For example : \n+```\n+@java.class = \"org.joda.DateTime\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 434}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3MjM2NQ==", "bodyText": "+1, especially for bytes (e.g. \"\\u0007\") because I was confused about this for a little while myself.", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363572365", "createdAt": "2020-01-07T02:49:49Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema\n+    (required).\n+  - `namespace` qualifies the namespace for the named\n+    schema.\n+  - `package` qualifies the language binding\n+    namespace for the named schema (optional). If this is not specified,\n+    language  bindingclass for the named schema will use `namespace` as\n+    its default namespace.\n+  - `doc` provides documentation to the user of this\n+    named schema (optional).\n+  - `import` qualifies the name of object which is used in the schema.(optional).\n+\n+The named schemas with type \u201cenum\u201d also supports a `doc`\n+attribute to provide documentation for each enum symbol.\n+\n+**Note:** Due to the addition of doclint in JDK8, anything under the\n+`doc`  attribute must be W3C HTML 4.01 compliant. This is\n+because the contents of this string will appear as Javadocs in the\n+generated Java \u2018data template\u2019 classes later. Please take this into\n+consideration when writing your documentation.\n+\n+The following are a few example schemas and their file names.\n+\n+\n+com/linkedin/pegasus/generator/examples/Foo.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, \n+    /**\n+     * A foo record\n+     */\n+    record Foo {\n+      intField: int\n+      longField: long\n+      floatField: float\n+      doubleField: double\n+      bytesField: bytes\n+      stringField: string\n+      intArrayField: array[int]\n+      stringMapField: map[string, string]\n+      unionField: union[int, string, Foo, array[string], map[string, long]]\n+    }, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/FooWithNamespaceOverride.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+package com.linkedin.pegasus.generator.examples.`record`\n+\n+/**\n+ * A foo record\n+ */\n+record FooWithNamespaceOverride {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  fruitsField: Fruits\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, Fruits, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/Fruits.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  /**\n+   * A red, yellow or green fruit.\n+   */\n+  APPLE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  BANANA\n+\n+  /**\n+   * An orange fruit.\n+   */\n+  ORANGE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  PINEAPPLE\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/MD5.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * MD5\n+ */\n+fixed MD5 16\n+```\n+\n+com/linkedin/pegasus/generator/examples/StringList.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A list of strings\n+ */\n+record StringList {\n+  element: string\n+  next: optional \n+\n+    /**\n+     * A list of strings\n+     */\n+    record StringList {\n+      element: string\n+      next: optional StringList\n+    }\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/InlinedExample.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Example on how you can declare an enum and a record inside another record\n+ */\n+record InlinedExample {\n+\n+  /**\n+   * This is how we inline enum declaration without creating a new pdl file\n+   */\n+  @symbolDocs.FOO = \"It's a foo!\"\n+  @symbolDocs.NONE = \"It's a baz!\"\n+  @symbolDocs.HASH = \"It's a bar!\"\n+  myEnumField: enum EnumDeclarationInTheSameFile {\n+    FOO\n+    BAR\n+    BAZ\n+  }\n+\n+  /**\n+   * A regular string\n+   */\n+  stringField: string\n+\n+  /**\n+   * A regular int\n+   */\n+  intField: int\n+\n+  /**\n+   * In this example we will declare a record and an enum inside a union\n+   */\n+  UnionFieldWithInlineRecordAndEnum: optional union[record myRecord {\n+\n+    /**\n+     * random int field\n+     */\n+    foo1: int\n+\n+    /**\n+     * random int field\n+     */\n+    foo2: int\n+  }, \n+    /**\n+     * Random enum\n+     */\n+    enum anotherEnum {\n+\n+      /**\n+       * description about FOOFOO\n+       */\n+      FOOFOO\n+\n+      /**\n+       * description about BARBAR\n+       */\n+      BARBAR\n+    }]\n+}\n+```\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive type, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+A optional field may have default value.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example : \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+\n+### Import\n+\n+1. If the type is outside the root namespace of the document, you need to add it as an import.\n+\n+2. If the type is declared outside the document, you need to add it as an import.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.imports\n+\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record Example {\n+  /**\n+   * Requires an import since this type is outside the root namespace and is not declared in this file.\n+   */\n+  externalOutsideNS: Simple\n+}\n+```\n+\n+**Note:** \n+- When multiple referenced types with the same unqualified name may be imported, \n+the type with the alphabetically first namespace is chosen. \n+(e.g. \"com.a.b.c.Foo\" is chosen over \"com.x.y.z.Foo\") \n+\n+- Any type that is not imported and is not within the namespace from which it's referenced must be referenced by\n+fully qualified name.\n+\n+\n+### Deprecation\n+Types and fields can be deprecated by adding @deprecated annotation.\n+\n+For example :\n+\n+```\n+@deprecated = \"Use record X instead.\"\n+record Example {\n+  @deprecated = \"Use field x instead.\"\n+  field: string\n+}\n+```\n+\n+### Including fields\n+\n+Record can include fields from other record.\n+\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields f1 from itself and b1 from Bar\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Properties\n+Properties can be used to present arbitrary datas and added to records, fields and enums.\n+\n+For example : \n+```\n+@prop = \"value\"\n+record Fruits {\n+  @validate.regex.regex = \"^(yes|no)$\"\n+  field: string\n+}\n+```\n+#### Property values can be any valid JSON type:\n+\n+For example : \n+```\n+@prop = 1\n+```\n+```\n+@prop = \"string\"\n+```\n+```\n+@prop = [1, 2, 3]\n+```\n+```\n+@prop = { \"a\": 1\", \"b\": { \"c\": true }}\n+```\n+\n+#### Property keys can expressed as paths:\n+\n+For example : \n+```\n+@java.class = \"org.joda.DateTime\"\n+@java.coercerClass = \"org.example.DateTimeCoercer\"\n+```\n+\n+The dot seperate keys format is equivalent to JSON value format.\n+\n+The above dot seperate keys example is equivalent to the following JSON value example :\n+```\n+@java = {\n+  \"class\": \"org.joda.DateTime\",\n+  \"coercerClass\": \"org.example.DateTimeCoercer\"\n+}\n+```\n+\n+### Escaping\n+There are some keywords which are reserved in Pegasus. If you have to use them to define any names, you need to put them in backticks : ` `.\n+\n+#### Keyword Escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PdlKeywordEscaping {\n+  `namespace`: string\n+  `record`: string\n+  `null`: string\n+  `enum`: string\n+  recordName: record `record` { }\n+}\n+```\n+\n+#### Namespace/Package escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping.`record`\n+package com.linkedin.pegasus.generator.test.idl.escaping.override.`typeref`\n+\n+/**\n+ * Ensures that the namespace and package are properly escaped at the root as well as in scoped named-type declarations.\n+ */\n+record NamespacePackageEscaping {\n+  x: {\n+    namespace com.x.y.z.`enum`\n+    package com.a.b.c.`fixed`\n+\n+    record Foo {}\n+  }\n+}\n+```\n+\n+#### Property key escaping \n+\n+If you want Pegasus to treat property key name with dots as one string key, please use backticks to escape such string.\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PropertyKeyEscaping {\n+  @`namespace` = \"foo.bar\"\n+  @`test.path` = 1\n+  @validate.`com.linkedin.CustomValidator` = \"foo\"\n+  aField: string\n+}\n+```\n+\n+\n+## Primitive Types\n+\n+The Pegasus primitive types are : int, long, float, double, boolean, string and bytes.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2NTgyNQ=="}, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 503}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3MjY4NA==", "bodyText": "typo: \"separate\". Same as below. Also reword this sentence because it's a little unclear.", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363572684", "createdAt": "2020-01-07T02:51:38Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema\n+    (required).\n+  - `namespace` qualifies the namespace for the named\n+    schema.\n+  - `package` qualifies the language binding\n+    namespace for the named schema (optional). If this is not specified,\n+    language  bindingclass for the named schema will use `namespace` as\n+    its default namespace.\n+  - `doc` provides documentation to the user of this\n+    named schema (optional).\n+  - `import` qualifies the name of object which is used in the schema.(optional).\n+\n+The named schemas with type \u201cenum\u201d also supports a `doc`\n+attribute to provide documentation for each enum symbol.\n+\n+**Note:** Due to the addition of doclint in JDK8, anything under the\n+`doc`  attribute must be W3C HTML 4.01 compliant. This is\n+because the contents of this string will appear as Javadocs in the\n+generated Java \u2018data template\u2019 classes later. Please take this into\n+consideration when writing your documentation.\n+\n+The following are a few example schemas and their file names.\n+\n+\n+com/linkedin/pegasus/generator/examples/Foo.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, \n+    /**\n+     * A foo record\n+     */\n+    record Foo {\n+      intField: int\n+      longField: long\n+      floatField: float\n+      doubleField: double\n+      bytesField: bytes\n+      stringField: string\n+      intArrayField: array[int]\n+      stringMapField: map[string, string]\n+      unionField: union[int, string, Foo, array[string], map[string, long]]\n+    }, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/FooWithNamespaceOverride.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+package com.linkedin.pegasus.generator.examples.`record`\n+\n+/**\n+ * A foo record\n+ */\n+record FooWithNamespaceOverride {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  fruitsField: Fruits\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, Fruits, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/Fruits.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  /**\n+   * A red, yellow or green fruit.\n+   */\n+  APPLE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  BANANA\n+\n+  /**\n+   * An orange fruit.\n+   */\n+  ORANGE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  PINEAPPLE\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/MD5.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * MD5\n+ */\n+fixed MD5 16\n+```\n+\n+com/linkedin/pegasus/generator/examples/StringList.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A list of strings\n+ */\n+record StringList {\n+  element: string\n+  next: optional \n+\n+    /**\n+     * A list of strings\n+     */\n+    record StringList {\n+      element: string\n+      next: optional StringList\n+    }\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/InlinedExample.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Example on how you can declare an enum and a record inside another record\n+ */\n+record InlinedExample {\n+\n+  /**\n+   * This is how we inline enum declaration without creating a new pdl file\n+   */\n+  @symbolDocs.FOO = \"It's a foo!\"\n+  @symbolDocs.NONE = \"It's a baz!\"\n+  @symbolDocs.HASH = \"It's a bar!\"\n+  myEnumField: enum EnumDeclarationInTheSameFile {\n+    FOO\n+    BAR\n+    BAZ\n+  }\n+\n+  /**\n+   * A regular string\n+   */\n+  stringField: string\n+\n+  /**\n+   * A regular int\n+   */\n+  intField: int\n+\n+  /**\n+   * In this example we will declare a record and an enum inside a union\n+   */\n+  UnionFieldWithInlineRecordAndEnum: optional union[record myRecord {\n+\n+    /**\n+     * random int field\n+     */\n+    foo1: int\n+\n+    /**\n+     * random int field\n+     */\n+    foo2: int\n+  }, \n+    /**\n+     * Random enum\n+     */\n+    enum anotherEnum {\n+\n+      /**\n+       * description about FOOFOO\n+       */\n+      FOOFOO\n+\n+      /**\n+       * description about BARBAR\n+       */\n+      BARBAR\n+    }]\n+}\n+```\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive type, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+A optional field may have default value.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example : \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+\n+### Import\n+\n+1. If the type is outside the root namespace of the document, you need to add it as an import.\n+\n+2. If the type is declared outside the document, you need to add it as an import.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.imports\n+\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record Example {\n+  /**\n+   * Requires an import since this type is outside the root namespace and is not declared in this file.\n+   */\n+  externalOutsideNS: Simple\n+}\n+```\n+\n+**Note:** \n+- When multiple referenced types with the same unqualified name may be imported, \n+the type with the alphabetically first namespace is chosen. \n+(e.g. \"com.a.b.c.Foo\" is chosen over \"com.x.y.z.Foo\") \n+\n+- Any type that is not imported and is not within the namespace from which it's referenced must be referenced by\n+fully qualified name.\n+\n+\n+### Deprecation\n+Types and fields can be deprecated by adding @deprecated annotation.\n+\n+For example :\n+\n+```\n+@deprecated = \"Use record X instead.\"\n+record Example {\n+  @deprecated = \"Use field x instead.\"\n+  field: string\n+}\n+```\n+\n+### Including fields\n+\n+Record can include fields from other record.\n+\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields f1 from itself and b1 from Bar\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Properties\n+Properties can be used to present arbitrary datas and added to records, fields and enums.\n+\n+For example : \n+```\n+@prop = \"value\"\n+record Fruits {\n+  @validate.regex.regex = \"^(yes|no)$\"\n+  field: string\n+}\n+```\n+#### Property values can be any valid JSON type:\n+\n+For example : \n+```\n+@prop = 1\n+```\n+```\n+@prop = \"string\"\n+```\n+```\n+@prop = [1, 2, 3]\n+```\n+```\n+@prop = { \"a\": 1\", \"b\": { \"c\": true }}\n+```\n+\n+#### Property keys can expressed as paths:\n+\n+For example : \n+```\n+@java.class = \"org.joda.DateTime\"\n+@java.coercerClass = \"org.example.DateTimeCoercer\"\n+```\n+\n+The dot seperate keys format is equivalent to JSON value format.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 438}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3Mjg2Ng==", "bodyText": "nit: don't put a space between the word and the parenthesis. This applies to all other instances in this doc.", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363572866", "createdAt": "2020-01-07T02:52:43Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema\n+    (required).\n+  - `namespace` qualifies the namespace for the named\n+    schema.\n+  - `package` qualifies the language binding\n+    namespace for the named schema (optional). If this is not specified,\n+    language  bindingclass for the named schema will use `namespace` as\n+    its default namespace.\n+  - `doc` provides documentation to the user of this\n+    named schema (optional).\n+  - `import` qualifies the name of object which is used in the schema.(optional).\n+\n+The named schemas with type \u201cenum\u201d also supports a `doc`\n+attribute to provide documentation for each enum symbol.\n+\n+**Note:** Due to the addition of doclint in JDK8, anything under the\n+`doc`  attribute must be W3C HTML 4.01 compliant. This is\n+because the contents of this string will appear as Javadocs in the\n+generated Java \u2018data template\u2019 classes later. Please take this into\n+consideration when writing your documentation.\n+\n+The following are a few example schemas and their file names.\n+\n+\n+com/linkedin/pegasus/generator/examples/Foo.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, \n+    /**\n+     * A foo record\n+     */\n+    record Foo {\n+      intField: int\n+      longField: long\n+      floatField: float\n+      doubleField: double\n+      bytesField: bytes\n+      stringField: string\n+      intArrayField: array[int]\n+      stringMapField: map[string, string]\n+      unionField: union[int, string, Foo, array[string], map[string, long]]\n+    }, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/FooWithNamespaceOverride.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+package com.linkedin.pegasus.generator.examples.`record`\n+\n+/**\n+ * A foo record\n+ */\n+record FooWithNamespaceOverride {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  fruitsField: Fruits\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, Fruits, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/Fruits.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  /**\n+   * A red, yellow or green fruit.\n+   */\n+  APPLE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  BANANA\n+\n+  /**\n+   * An orange fruit.\n+   */\n+  ORANGE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  PINEAPPLE\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/MD5.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * MD5\n+ */\n+fixed MD5 16\n+```\n+\n+com/linkedin/pegasus/generator/examples/StringList.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A list of strings\n+ */\n+record StringList {\n+  element: string\n+  next: optional \n+\n+    /**\n+     * A list of strings\n+     */\n+    record StringList {\n+      element: string\n+      next: optional StringList\n+    }\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/InlinedExample.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Example on how you can declare an enum and a record inside another record\n+ */\n+record InlinedExample {\n+\n+  /**\n+   * This is how we inline enum declaration without creating a new pdl file\n+   */\n+  @symbolDocs.FOO = \"It's a foo!\"\n+  @symbolDocs.NONE = \"It's a baz!\"\n+  @symbolDocs.HASH = \"It's a bar!\"\n+  myEnumField: enum EnumDeclarationInTheSameFile {\n+    FOO\n+    BAR\n+    BAZ\n+  }\n+\n+  /**\n+   * A regular string\n+   */\n+  stringField: string\n+\n+  /**\n+   * A regular int\n+   */\n+  intField: int\n+\n+  /**\n+   * In this example we will declare a record and an enum inside a union\n+   */\n+  UnionFieldWithInlineRecordAndEnum: optional union[record myRecord {\n+\n+    /**\n+     * random int field\n+     */\n+    foo1: int\n+\n+    /**\n+     * random int field\n+     */\n+    foo2: int\n+  }, \n+    /**\n+     * Random enum\n+     */\n+    enum anotherEnum {\n+\n+      /**\n+       * description about FOOFOO\n+       */\n+      FOOFOO\n+\n+      /**\n+       * description about BARBAR\n+       */\n+      BARBAR\n+    }]\n+}\n+```\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive type, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+A optional field may have default value.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example : \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+\n+### Import\n+\n+1. If the type is outside the root namespace of the document, you need to add it as an import.\n+\n+2. If the type is declared outside the document, you need to add it as an import.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.imports\n+\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record Example {\n+  /**\n+   * Requires an import since this type is outside the root namespace and is not declared in this file.\n+   */\n+  externalOutsideNS: Simple\n+}\n+```\n+\n+**Note:** \n+- When multiple referenced types with the same unqualified name may be imported, \n+the type with the alphabetically first namespace is chosen. \n+(e.g. \"com.a.b.c.Foo\" is chosen over \"com.x.y.z.Foo\") \n+\n+- Any type that is not imported and is not within the namespace from which it's referenced must be referenced by\n+fully qualified name.\n+\n+\n+### Deprecation\n+Types and fields can be deprecated by adding @deprecated annotation.\n+\n+For example :\n+\n+```\n+@deprecated = \"Use record X instead.\"\n+record Example {\n+  @deprecated = \"Use field x instead.\"\n+  field: string\n+}\n+```\n+\n+### Including fields\n+\n+Record can include fields from other record.\n+\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields f1 from itself and b1 from Bar\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Properties\n+Properties can be used to present arbitrary datas and added to records, fields and enums.\n+\n+For example : \n+```\n+@prop = \"value\"\n+record Fruits {\n+  @validate.regex.regex = \"^(yes|no)$\"\n+  field: string\n+}\n+```\n+#### Property values can be any valid JSON type:\n+\n+For example : \n+```\n+@prop = 1\n+```\n+```\n+@prop = \"string\"\n+```\n+```\n+@prop = [1, 2, 3]\n+```\n+```\n+@prop = { \"a\": 1\", \"b\": { \"c\": true }}\n+```\n+\n+#### Property keys can expressed as paths:\n+\n+For example : \n+```\n+@java.class = \"org.joda.DateTime\"\n+@java.coercerClass = \"org.example.DateTimeCoercer\"\n+```\n+\n+The dot seperate keys format is equivalent to JSON value format.\n+\n+The above dot seperate keys example is equivalent to the following JSON value example :\n+```\n+@java = {\n+  \"class\": \"org.joda.DateTime\",\n+  \"coercerClass\": \"org.example.DateTimeCoercer\"\n+}\n+```\n+\n+### Escaping\n+There are some keywords which are reserved in Pegasus. If you have to use them to define any names, you need to put them in backticks : ` `.\n+\n+#### Keyword Escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PdlKeywordEscaping {\n+  `namespace`: string\n+  `record`: string\n+  `null`: string\n+  `enum`: string\n+  recordName: record `record` { }\n+}\n+```\n+\n+#### Namespace/Package escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping.`record`\n+package com.linkedin.pegasus.generator.test.idl.escaping.override.`typeref`\n+\n+/**\n+ * Ensures that the namespace and package are properly escaped at the root as well as in scoped named-type declarations.\n+ */\n+record NamespacePackageEscaping {\n+  x: {\n+    namespace com.x.y.z.`enum`\n+    package com.a.b.c.`fixed`\n+\n+    record Foo {}\n+  }\n+}\n+```\n+\n+#### Property key escaping \n+\n+If you want Pegasus to treat property key name with dots as one string key, please use backticks to escape such string.\n+For example : ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 487}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3MzE2MA==", "bodyText": "This sentence doesn't really make sense. Maybe say \"Pegasus Arrays are defined as a collection of a particular \"items\" type\"?", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363573160", "createdAt": "2020-01-07T02:54:29Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema\n+    (required).\n+  - `namespace` qualifies the namespace for the named\n+    schema.\n+  - `package` qualifies the language binding\n+    namespace for the named schema (optional). If this is not specified,\n+    language  bindingclass for the named schema will use `namespace` as\n+    its default namespace.\n+  - `doc` provides documentation to the user of this\n+    named schema (optional).\n+  - `import` qualifies the name of object which is used in the schema.(optional).\n+\n+The named schemas with type \u201cenum\u201d also supports a `doc`\n+attribute to provide documentation for each enum symbol.\n+\n+**Note:** Due to the addition of doclint in JDK8, anything under the\n+`doc`  attribute must be W3C HTML 4.01 compliant. This is\n+because the contents of this string will appear as Javadocs in the\n+generated Java \u2018data template\u2019 classes later. Please take this into\n+consideration when writing your documentation.\n+\n+The following are a few example schemas and their file names.\n+\n+\n+com/linkedin/pegasus/generator/examples/Foo.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, \n+    /**\n+     * A foo record\n+     */\n+    record Foo {\n+      intField: int\n+      longField: long\n+      floatField: float\n+      doubleField: double\n+      bytesField: bytes\n+      stringField: string\n+      intArrayField: array[int]\n+      stringMapField: map[string, string]\n+      unionField: union[int, string, Foo, array[string], map[string, long]]\n+    }, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/FooWithNamespaceOverride.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+package com.linkedin.pegasus.generator.examples.`record`\n+\n+/**\n+ * A foo record\n+ */\n+record FooWithNamespaceOverride {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  fruitsField: Fruits\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, Fruits, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/Fruits.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  /**\n+   * A red, yellow or green fruit.\n+   */\n+  APPLE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  BANANA\n+\n+  /**\n+   * An orange fruit.\n+   */\n+  ORANGE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  PINEAPPLE\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/MD5.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * MD5\n+ */\n+fixed MD5 16\n+```\n+\n+com/linkedin/pegasus/generator/examples/StringList.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A list of strings\n+ */\n+record StringList {\n+  element: string\n+  next: optional \n+\n+    /**\n+     * A list of strings\n+     */\n+    record StringList {\n+      element: string\n+      next: optional StringList\n+    }\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/InlinedExample.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Example on how you can declare an enum and a record inside another record\n+ */\n+record InlinedExample {\n+\n+  /**\n+   * This is how we inline enum declaration without creating a new pdl file\n+   */\n+  @symbolDocs.FOO = \"It's a foo!\"\n+  @symbolDocs.NONE = \"It's a baz!\"\n+  @symbolDocs.HASH = \"It's a bar!\"\n+  myEnumField: enum EnumDeclarationInTheSameFile {\n+    FOO\n+    BAR\n+    BAZ\n+  }\n+\n+  /**\n+   * A regular string\n+   */\n+  stringField: string\n+\n+  /**\n+   * A regular int\n+   */\n+  intField: int\n+\n+  /**\n+   * In this example we will declare a record and an enum inside a union\n+   */\n+  UnionFieldWithInlineRecordAndEnum: optional union[record myRecord {\n+\n+    /**\n+     * random int field\n+     */\n+    foo1: int\n+\n+    /**\n+     * random int field\n+     */\n+    foo2: int\n+  }, \n+    /**\n+     * Random enum\n+     */\n+    enum anotherEnum {\n+\n+      /**\n+       * description about FOOFOO\n+       */\n+      FOOFOO\n+\n+      /**\n+       * description about BARBAR\n+       */\n+      BARBAR\n+    }]\n+}\n+```\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive type, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+A optional field may have default value.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example : \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+\n+### Import\n+\n+1. If the type is outside the root namespace of the document, you need to add it as an import.\n+\n+2. If the type is declared outside the document, you need to add it as an import.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.imports\n+\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record Example {\n+  /**\n+   * Requires an import since this type is outside the root namespace and is not declared in this file.\n+   */\n+  externalOutsideNS: Simple\n+}\n+```\n+\n+**Note:** \n+- When multiple referenced types with the same unqualified name may be imported, \n+the type with the alphabetically first namespace is chosen. \n+(e.g. \"com.a.b.c.Foo\" is chosen over \"com.x.y.z.Foo\") \n+\n+- Any type that is not imported and is not within the namespace from which it's referenced must be referenced by\n+fully qualified name.\n+\n+\n+### Deprecation\n+Types and fields can be deprecated by adding @deprecated annotation.\n+\n+For example :\n+\n+```\n+@deprecated = \"Use record X instead.\"\n+record Example {\n+  @deprecated = \"Use field x instead.\"\n+  field: string\n+}\n+```\n+\n+### Including fields\n+\n+Record can include fields from other record.\n+\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields f1 from itself and b1 from Bar\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Properties\n+Properties can be used to present arbitrary datas and added to records, fields and enums.\n+\n+For example : \n+```\n+@prop = \"value\"\n+record Fruits {\n+  @validate.regex.regex = \"^(yes|no)$\"\n+  field: string\n+}\n+```\n+#### Property values can be any valid JSON type:\n+\n+For example : \n+```\n+@prop = 1\n+```\n+```\n+@prop = \"string\"\n+```\n+```\n+@prop = [1, 2, 3]\n+```\n+```\n+@prop = { \"a\": 1\", \"b\": { \"c\": true }}\n+```\n+\n+#### Property keys can expressed as paths:\n+\n+For example : \n+```\n+@java.class = \"org.joda.DateTime\"\n+@java.coercerClass = \"org.example.DateTimeCoercer\"\n+```\n+\n+The dot seperate keys format is equivalent to JSON value format.\n+\n+The above dot seperate keys example is equivalent to the following JSON value example :\n+```\n+@java = {\n+  \"class\": \"org.joda.DateTime\",\n+  \"coercerClass\": \"org.example.DateTimeCoercer\"\n+}\n+```\n+\n+### Escaping\n+There are some keywords which are reserved in Pegasus. If you have to use them to define any names, you need to put them in backticks : ` `.\n+\n+#### Keyword Escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PdlKeywordEscaping {\n+  `namespace`: string\n+  `record`: string\n+  `null`: string\n+  `enum`: string\n+  recordName: record `record` { }\n+}\n+```\n+\n+#### Namespace/Package escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping.`record`\n+package com.linkedin.pegasus.generator.test.idl.escaping.override.`typeref`\n+\n+/**\n+ * Ensures that the namespace and package are properly escaped at the root as well as in scoped named-type declarations.\n+ */\n+record NamespacePackageEscaping {\n+  x: {\n+    namespace com.x.y.z.`enum`\n+    package com.a.b.c.`fixed`\n+\n+    record Foo {}\n+  }\n+}\n+```\n+\n+#### Property key escaping \n+\n+If you want Pegasus to treat property key name with dots as one string key, please use backticks to escape such string.\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PropertyKeyEscaping {\n+  @`namespace` = \"foo.bar\"\n+  @`test.path` = 1\n+  @validate.`com.linkedin.CustomValidator` = \"foo\"\n+  aField: string\n+}\n+```\n+\n+\n+## Primitive Types\n+\n+The Pegasus primitive types are : int, long, float, double, boolean, string and bytes.\n+\n+For Example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithPrimitives {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  booleanField: boolean\n+  stringField: string\n+  bytesField: bytes\n+}\n+```\n+\n+## Array Type\n+\n+Pegesus Arrays are defined within a items type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 522}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3MzM5MQ==", "bodyText": "nit: don't use the at-sign, just say deprecation.", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363573391", "createdAt": "2020-01-07T02:55:57Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema\n+    (required).\n+  - `namespace` qualifies the namespace for the named\n+    schema.\n+  - `package` qualifies the language binding\n+    namespace for the named schema (optional). If this is not specified,\n+    language  bindingclass for the named schema will use `namespace` as\n+    its default namespace.\n+  - `doc` provides documentation to the user of this\n+    named schema (optional).\n+  - `import` qualifies the name of object which is used in the schema.(optional).\n+\n+The named schemas with type \u201cenum\u201d also supports a `doc`\n+attribute to provide documentation for each enum symbol.\n+\n+**Note:** Due to the addition of doclint in JDK8, anything under the\n+`doc`  attribute must be W3C HTML 4.01 compliant. This is\n+because the contents of this string will appear as Javadocs in the\n+generated Java \u2018data template\u2019 classes later. Please take this into\n+consideration when writing your documentation.\n+\n+The following are a few example schemas and their file names.\n+\n+\n+com/linkedin/pegasus/generator/examples/Foo.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, \n+    /**\n+     * A foo record\n+     */\n+    record Foo {\n+      intField: int\n+      longField: long\n+      floatField: float\n+      doubleField: double\n+      bytesField: bytes\n+      stringField: string\n+      intArrayField: array[int]\n+      stringMapField: map[string, string]\n+      unionField: union[int, string, Foo, array[string], map[string, long]]\n+    }, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/FooWithNamespaceOverride.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+package com.linkedin.pegasus.generator.examples.`record`\n+\n+/**\n+ * A foo record\n+ */\n+record FooWithNamespaceOverride {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  fruitsField: Fruits\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, Fruits, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/Fruits.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  /**\n+   * A red, yellow or green fruit.\n+   */\n+  APPLE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  BANANA\n+\n+  /**\n+   * An orange fruit.\n+   */\n+  ORANGE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  PINEAPPLE\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/MD5.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * MD5\n+ */\n+fixed MD5 16\n+```\n+\n+com/linkedin/pegasus/generator/examples/StringList.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A list of strings\n+ */\n+record StringList {\n+  element: string\n+  next: optional \n+\n+    /**\n+     * A list of strings\n+     */\n+    record StringList {\n+      element: string\n+      next: optional StringList\n+    }\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/InlinedExample.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Example on how you can declare an enum and a record inside another record\n+ */\n+record InlinedExample {\n+\n+  /**\n+   * This is how we inline enum declaration without creating a new pdl file\n+   */\n+  @symbolDocs.FOO = \"It's a foo!\"\n+  @symbolDocs.NONE = \"It's a baz!\"\n+  @symbolDocs.HASH = \"It's a bar!\"\n+  myEnumField: enum EnumDeclarationInTheSameFile {\n+    FOO\n+    BAR\n+    BAZ\n+  }\n+\n+  /**\n+   * A regular string\n+   */\n+  stringField: string\n+\n+  /**\n+   * A regular int\n+   */\n+  intField: int\n+\n+  /**\n+   * In this example we will declare a record and an enum inside a union\n+   */\n+  UnionFieldWithInlineRecordAndEnum: optional union[record myRecord {\n+\n+    /**\n+     * random int field\n+     */\n+    foo1: int\n+\n+    /**\n+     * random int field\n+     */\n+    foo2: int\n+  }, \n+    /**\n+     * Random enum\n+     */\n+    enum anotherEnum {\n+\n+      /**\n+       * description about FOOFOO\n+       */\n+      FOOFOO\n+\n+      /**\n+       * description about BARBAR\n+       */\n+      BARBAR\n+    }]\n+}\n+```\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive type, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+A optional field may have default value.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example : \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+\n+### Import\n+\n+1. If the type is outside the root namespace of the document, you need to add it as an import.\n+\n+2. If the type is declared outside the document, you need to add it as an import.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.imports\n+\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record Example {\n+  /**\n+   * Requires an import since this type is outside the root namespace and is not declared in this file.\n+   */\n+  externalOutsideNS: Simple\n+}\n+```\n+\n+**Note:** \n+- When multiple referenced types with the same unqualified name may be imported, \n+the type with the alphabetically first namespace is chosen. \n+(e.g. \"com.a.b.c.Foo\" is chosen over \"com.x.y.z.Foo\") \n+\n+- Any type that is not imported and is not within the namespace from which it's referenced must be referenced by\n+fully qualified name.\n+\n+\n+### Deprecation\n+Types and fields can be deprecated by adding @deprecated annotation.\n+\n+For example :\n+\n+```\n+@deprecated = \"Use record X instead.\"\n+record Example {\n+  @deprecated = \"Use field x instead.\"\n+  field: string\n+}\n+```\n+\n+### Including fields\n+\n+Record can include fields from other record.\n+\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields f1 from itself and b1 from Bar\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Properties\n+Properties can be used to present arbitrary datas and added to records, fields and enums.\n+\n+For example : \n+```\n+@prop = \"value\"\n+record Fruits {\n+  @validate.regex.regex = \"^(yes|no)$\"\n+  field: string\n+}\n+```\n+#### Property values can be any valid JSON type:\n+\n+For example : \n+```\n+@prop = 1\n+```\n+```\n+@prop = \"string\"\n+```\n+```\n+@prop = [1, 2, 3]\n+```\n+```\n+@prop = { \"a\": 1\", \"b\": { \"c\": true }}\n+```\n+\n+#### Property keys can expressed as paths:\n+\n+For example : \n+```\n+@java.class = \"org.joda.DateTime\"\n+@java.coercerClass = \"org.example.DateTimeCoercer\"\n+```\n+\n+The dot seperate keys format is equivalent to JSON value format.\n+\n+The above dot seperate keys example is equivalent to the following JSON value example :\n+```\n+@java = {\n+  \"class\": \"org.joda.DateTime\",\n+  \"coercerClass\": \"org.example.DateTimeCoercer\"\n+}\n+```\n+\n+### Escaping\n+There are some keywords which are reserved in Pegasus. If you have to use them to define any names, you need to put them in backticks : ` `.\n+\n+#### Keyword Escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PdlKeywordEscaping {\n+  `namespace`: string\n+  `record`: string\n+  `null`: string\n+  `enum`: string\n+  recordName: record `record` { }\n+}\n+```\n+\n+#### Namespace/Package escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping.`record`\n+package com.linkedin.pegasus.generator.test.idl.escaping.override.`typeref`\n+\n+/**\n+ * Ensures that the namespace and package are properly escaped at the root as well as in scoped named-type declarations.\n+ */\n+record NamespacePackageEscaping {\n+  x: {\n+    namespace com.x.y.z.`enum`\n+    package com.a.b.c.`fixed`\n+\n+    record Foo {}\n+  }\n+}\n+```\n+\n+#### Property key escaping \n+\n+If you want Pegasus to treat property key name with dots as one string key, please use backticks to escape such string.\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PropertyKeyEscaping {\n+  @`namespace` = \"foo.bar\"\n+  @`test.path` = 1\n+  @validate.`com.linkedin.CustomValidator` = \"foo\"\n+  aField: string\n+}\n+```\n+\n+\n+## Primitive Types\n+\n+The Pegasus primitive types are : int, long, float, double, boolean, string and bytes.\n+\n+For Example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithPrimitives {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  booleanField: boolean\n+  stringField: string\n+  bytesField: bytes\n+}\n+```\n+\n+## Array Type\n+\n+Pegesus Arrays are defined within a items type.\n+\n+For Example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+record WithPrimitivesArray {\n+  ints: array[int]\n+  longs: array[long]\n+  floats: array[float]\n+  doubles: array[double]\n+  booleans: array[boolean]\n+  strings: array[string]\n+  bytes: array[bytes]\n+}\n+```\n+\n+Record Arrays :\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+\n+record WithRecordArray {\n+  empties: array[Empty]\n+  fruits: array[Fruits]\n+}\n+```\n+\n+\n+## Map Type\n+\n+Pegasus maps are defined with a values type and an optional key type.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+record WithPrimitivesMap {\n+  ints: map[string, int]\n+  longs: map[string, long]\n+  floats: map[string, float]\n+  doubles: map[string, double]\n+  booleans: map[string, boolean]\n+  strings: map[string, string]\n+  bytes: map[string, bytes]\n+}\n+```\n+Custom Types Map :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+import com.linkedin.pegasus.generator.test.idl.customtypes.CustomInt\n+\n+record WithCustomTypesMap {\n+  ints: map[string, CustomInt]\n+}\n+```\n+\n+Complex Types Map :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+import com.linkedin.pegasus.generator.test.idl.`fixed`.Fixed8\n+\n+record WithComplexTypesMap {\n+  empties: map[string, Empty]\n+  fruits: map[string, Fruits]\n+  arrays: map[string, array[Simple]]\n+  maps: map[string, map[string, Simple]]\n+  unions: map[\n+    string,\n+    typeref WithComplexTypesMapUnion = union[int, string, Simple]\n+  ]\n+  `fixed`: map[string, Fixed8]\n+}\n+```\n+\n+**Note**: \n+The key must always be \"string\".\n+\n+\n+## Union Type\n+\n+A union type may be defined with any number of member types. Each member may be any pegasus type except union type. \n+Each member can be primitive, record, enum map or array type.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.unions\n+\n+record WithPrimitivesUnion {\n+  `union`: union[int, long, float, double, boolean, string, bytes]\n+}\n+```\n+\n+The member type names also serve as the \u201cmember keys\u201d (also called as \u201cunion tags\u201d), and identify which union member type data holds.\n+To define a field of a record containing a union of two other records, we would define:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Question {\n+  answerFormat: union[MultipleChoice, TextEntry]\n+}\n+```\n+\n+### Union with aliases\n+Union members can optionally be given an alias. Aliases can be used to create unions with members of the same type or to give better naming for union members.\n+\n+Aliased unions would be defines as :\n+```\n+union [alias: type, ...]\n+```\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Question {\n+ answerFormat: union[   \n+   multipleChoice: MultipleChoice,\n+   shortAnswer: string,\n+   longAnswer: string\n+ ]\n+}\n+```\n+In the above example, the union answerFormat has three members, with two string type members differentiated using the aliases (shortAnswer and longAnswer). When aliases are used, the alias becomes the \"member key\" for the union members and will be used in the wire format. \n+\n+## Enum Type\n+\n+Enums types may contain any number of symbols. \n+\n+For example :\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+enum Fruits {\n+  APPLE\n+  BANANA\n+  ORANGE\n+  PINEAPPLE\n+}\n+```\n+\n+Enums can be referenced in other schemas by name.\n+\n+For example :\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record FruitBasket {\n+  fruit: Fruits\n+}\n+```\n+\n+Enums can also be referenced in other schemas by inlining their type definition. \n+\n+For example :\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record FruitBasket {\n+  fruit: enum Fruits { APPLE, BANANA, ORANGE }\n+} \n+```\n+\n+### Enum documentation, deprecation and properties\n+Doc comments, @deprecation and properties can be added directly to enum symbols. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 697}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3MzUwOQ==", "bodyText": "reword: \"Aliased unions are defined as:\"", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363573509", "createdAt": "2020-01-07T02:56:41Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema\n+    (required).\n+  - `namespace` qualifies the namespace for the named\n+    schema.\n+  - `package` qualifies the language binding\n+    namespace for the named schema (optional). If this is not specified,\n+    language  bindingclass for the named schema will use `namespace` as\n+    its default namespace.\n+  - `doc` provides documentation to the user of this\n+    named schema (optional).\n+  - `import` qualifies the name of object which is used in the schema.(optional).\n+\n+The named schemas with type \u201cenum\u201d also supports a `doc`\n+attribute to provide documentation for each enum symbol.\n+\n+**Note:** Due to the addition of doclint in JDK8, anything under the\n+`doc`  attribute must be W3C HTML 4.01 compliant. This is\n+because the contents of this string will appear as Javadocs in the\n+generated Java \u2018data template\u2019 classes later. Please take this into\n+consideration when writing your documentation.\n+\n+The following are a few example schemas and their file names.\n+\n+\n+com/linkedin/pegasus/generator/examples/Foo.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, \n+    /**\n+     * A foo record\n+     */\n+    record Foo {\n+      intField: int\n+      longField: long\n+      floatField: float\n+      doubleField: double\n+      bytesField: bytes\n+      stringField: string\n+      intArrayField: array[int]\n+      stringMapField: map[string, string]\n+      unionField: union[int, string, Foo, array[string], map[string, long]]\n+    }, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/FooWithNamespaceOverride.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+package com.linkedin.pegasus.generator.examples.`record`\n+\n+/**\n+ * A foo record\n+ */\n+record FooWithNamespaceOverride {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  fruitsField: Fruits\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, Fruits, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/Fruits.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  /**\n+   * A red, yellow or green fruit.\n+   */\n+  APPLE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  BANANA\n+\n+  /**\n+   * An orange fruit.\n+   */\n+  ORANGE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  PINEAPPLE\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/MD5.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * MD5\n+ */\n+fixed MD5 16\n+```\n+\n+com/linkedin/pegasus/generator/examples/StringList.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A list of strings\n+ */\n+record StringList {\n+  element: string\n+  next: optional \n+\n+    /**\n+     * A list of strings\n+     */\n+    record StringList {\n+      element: string\n+      next: optional StringList\n+    }\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/InlinedExample.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Example on how you can declare an enum and a record inside another record\n+ */\n+record InlinedExample {\n+\n+  /**\n+   * This is how we inline enum declaration without creating a new pdl file\n+   */\n+  @symbolDocs.FOO = \"It's a foo!\"\n+  @symbolDocs.NONE = \"It's a baz!\"\n+  @symbolDocs.HASH = \"It's a bar!\"\n+  myEnumField: enum EnumDeclarationInTheSameFile {\n+    FOO\n+    BAR\n+    BAZ\n+  }\n+\n+  /**\n+   * A regular string\n+   */\n+  stringField: string\n+\n+  /**\n+   * A regular int\n+   */\n+  intField: int\n+\n+  /**\n+   * In this example we will declare a record and an enum inside a union\n+   */\n+  UnionFieldWithInlineRecordAndEnum: optional union[record myRecord {\n+\n+    /**\n+     * random int field\n+     */\n+    foo1: int\n+\n+    /**\n+     * random int field\n+     */\n+    foo2: int\n+  }, \n+    /**\n+     * Random enum\n+     */\n+    enum anotherEnum {\n+\n+      /**\n+       * description about FOOFOO\n+       */\n+      FOOFOO\n+\n+      /**\n+       * description about BARBAR\n+       */\n+      BARBAR\n+    }]\n+}\n+```\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive type, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+A optional field may have default value.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example : \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+\n+### Import\n+\n+1. If the type is outside the root namespace of the document, you need to add it as an import.\n+\n+2. If the type is declared outside the document, you need to add it as an import.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.imports\n+\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record Example {\n+  /**\n+   * Requires an import since this type is outside the root namespace and is not declared in this file.\n+   */\n+  externalOutsideNS: Simple\n+}\n+```\n+\n+**Note:** \n+- When multiple referenced types with the same unqualified name may be imported, \n+the type with the alphabetically first namespace is chosen. \n+(e.g. \"com.a.b.c.Foo\" is chosen over \"com.x.y.z.Foo\") \n+\n+- Any type that is not imported and is not within the namespace from which it's referenced must be referenced by\n+fully qualified name.\n+\n+\n+### Deprecation\n+Types and fields can be deprecated by adding @deprecated annotation.\n+\n+For example :\n+\n+```\n+@deprecated = \"Use record X instead.\"\n+record Example {\n+  @deprecated = \"Use field x instead.\"\n+  field: string\n+}\n+```\n+\n+### Including fields\n+\n+Record can include fields from other record.\n+\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields f1 from itself and b1 from Bar\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Properties\n+Properties can be used to present arbitrary datas and added to records, fields and enums.\n+\n+For example : \n+```\n+@prop = \"value\"\n+record Fruits {\n+  @validate.regex.regex = \"^(yes|no)$\"\n+  field: string\n+}\n+```\n+#### Property values can be any valid JSON type:\n+\n+For example : \n+```\n+@prop = 1\n+```\n+```\n+@prop = \"string\"\n+```\n+```\n+@prop = [1, 2, 3]\n+```\n+```\n+@prop = { \"a\": 1\", \"b\": { \"c\": true }}\n+```\n+\n+#### Property keys can expressed as paths:\n+\n+For example : \n+```\n+@java.class = \"org.joda.DateTime\"\n+@java.coercerClass = \"org.example.DateTimeCoercer\"\n+```\n+\n+The dot seperate keys format is equivalent to JSON value format.\n+\n+The above dot seperate keys example is equivalent to the following JSON value example :\n+```\n+@java = {\n+  \"class\": \"org.joda.DateTime\",\n+  \"coercerClass\": \"org.example.DateTimeCoercer\"\n+}\n+```\n+\n+### Escaping\n+There are some keywords which are reserved in Pegasus. If you have to use them to define any names, you need to put them in backticks : ` `.\n+\n+#### Keyword Escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PdlKeywordEscaping {\n+  `namespace`: string\n+  `record`: string\n+  `null`: string\n+  `enum`: string\n+  recordName: record `record` { }\n+}\n+```\n+\n+#### Namespace/Package escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping.`record`\n+package com.linkedin.pegasus.generator.test.idl.escaping.override.`typeref`\n+\n+/**\n+ * Ensures that the namespace and package are properly escaped at the root as well as in scoped named-type declarations.\n+ */\n+record NamespacePackageEscaping {\n+  x: {\n+    namespace com.x.y.z.`enum`\n+    package com.a.b.c.`fixed`\n+\n+    record Foo {}\n+  }\n+}\n+```\n+\n+#### Property key escaping \n+\n+If you want Pegasus to treat property key name with dots as one string key, please use backticks to escape such string.\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PropertyKeyEscaping {\n+  @`namespace` = \"foo.bar\"\n+  @`test.path` = 1\n+  @validate.`com.linkedin.CustomValidator` = \"foo\"\n+  aField: string\n+}\n+```\n+\n+\n+## Primitive Types\n+\n+The Pegasus primitive types are : int, long, float, double, boolean, string and bytes.\n+\n+For Example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithPrimitives {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  booleanField: boolean\n+  stringField: string\n+  bytesField: bytes\n+}\n+```\n+\n+## Array Type\n+\n+Pegesus Arrays are defined within a items type.\n+\n+For Example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+record WithPrimitivesArray {\n+  ints: array[int]\n+  longs: array[long]\n+  floats: array[float]\n+  doubles: array[double]\n+  booleans: array[boolean]\n+  strings: array[string]\n+  bytes: array[bytes]\n+}\n+```\n+\n+Record Arrays :\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+\n+record WithRecordArray {\n+  empties: array[Empty]\n+  fruits: array[Fruits]\n+}\n+```\n+\n+\n+## Map Type\n+\n+Pegasus maps are defined with a values type and an optional key type.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+record WithPrimitivesMap {\n+  ints: map[string, int]\n+  longs: map[string, long]\n+  floats: map[string, float]\n+  doubles: map[string, double]\n+  booleans: map[string, boolean]\n+  strings: map[string, string]\n+  bytes: map[string, bytes]\n+}\n+```\n+Custom Types Map :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+import com.linkedin.pegasus.generator.test.idl.customtypes.CustomInt\n+\n+record WithCustomTypesMap {\n+  ints: map[string, CustomInt]\n+}\n+```\n+\n+Complex Types Map :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+import com.linkedin.pegasus.generator.test.idl.`fixed`.Fixed8\n+\n+record WithComplexTypesMap {\n+  empties: map[string, Empty]\n+  fruits: map[string, Fruits]\n+  arrays: map[string, array[Simple]]\n+  maps: map[string, map[string, Simple]]\n+  unions: map[\n+    string,\n+    typeref WithComplexTypesMapUnion = union[int, string, Simple]\n+  ]\n+  `fixed`: map[string, Fixed8]\n+}\n+```\n+\n+**Note**: \n+The key must always be \"string\".\n+\n+\n+## Union Type\n+\n+A union type may be defined with any number of member types. Each member may be any pegasus type except union type. \n+Each member can be primitive, record, enum map or array type.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.unions\n+\n+record WithPrimitivesUnion {\n+  `union`: union[int, long, float, double, boolean, string, bytes]\n+}\n+```\n+\n+The member type names also serve as the \u201cmember keys\u201d (also called as \u201cunion tags\u201d), and identify which union member type data holds.\n+To define a field of a record containing a union of two other records, we would define:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Question {\n+  answerFormat: union[MultipleChoice, TextEntry]\n+}\n+```\n+\n+### Union with aliases\n+Union members can optionally be given an alias. Aliases can be used to create unions with members of the same type or to give better naming for union members.\n+\n+Aliased unions would be defines as :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 636}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3Mzc4MA==", "bodyText": "I notice you've left the little \u3002character in some places in place of a period. Please replace with a period in all places.", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363573780", "createdAt": "2020-01-07T02:58:12Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema\n+    (required).\n+  - `namespace` qualifies the namespace for the named\n+    schema.\n+  - `package` qualifies the language binding\n+    namespace for the named schema (optional). If this is not specified,\n+    language  bindingclass for the named schema will use `namespace` as\n+    its default namespace.\n+  - `doc` provides documentation to the user of this\n+    named schema (optional).\n+  - `import` qualifies the name of object which is used in the schema.(optional).\n+\n+The named schemas with type \u201cenum\u201d also supports a `doc`\n+attribute to provide documentation for each enum symbol.\n+\n+**Note:** Due to the addition of doclint in JDK8, anything under the\n+`doc`  attribute must be W3C HTML 4.01 compliant. This is\n+because the contents of this string will appear as Javadocs in the\n+generated Java \u2018data template\u2019 classes later. Please take this into\n+consideration when writing your documentation.\n+\n+The following are a few example schemas and their file names.\n+\n+\n+com/linkedin/pegasus/generator/examples/Foo.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, \n+    /**\n+     * A foo record\n+     */\n+    record Foo {\n+      intField: int\n+      longField: long\n+      floatField: float\n+      doubleField: double\n+      bytesField: bytes\n+      stringField: string\n+      intArrayField: array[int]\n+      stringMapField: map[string, string]\n+      unionField: union[int, string, Foo, array[string], map[string, long]]\n+    }, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/FooWithNamespaceOverride.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+package com.linkedin.pegasus.generator.examples.`record`\n+\n+/**\n+ * A foo record\n+ */\n+record FooWithNamespaceOverride {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  fruitsField: Fruits\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, Fruits, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/Fruits.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  /**\n+   * A red, yellow or green fruit.\n+   */\n+  APPLE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  BANANA\n+\n+  /**\n+   * An orange fruit.\n+   */\n+  ORANGE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  PINEAPPLE\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/MD5.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * MD5\n+ */\n+fixed MD5 16\n+```\n+\n+com/linkedin/pegasus/generator/examples/StringList.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A list of strings\n+ */\n+record StringList {\n+  element: string\n+  next: optional \n+\n+    /**\n+     * A list of strings\n+     */\n+    record StringList {\n+      element: string\n+      next: optional StringList\n+    }\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/InlinedExample.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Example on how you can declare an enum and a record inside another record\n+ */\n+record InlinedExample {\n+\n+  /**\n+   * This is how we inline enum declaration without creating a new pdl file\n+   */\n+  @symbolDocs.FOO = \"It's a foo!\"\n+  @symbolDocs.NONE = \"It's a baz!\"\n+  @symbolDocs.HASH = \"It's a bar!\"\n+  myEnumField: enum EnumDeclarationInTheSameFile {\n+    FOO\n+    BAR\n+    BAZ\n+  }\n+\n+  /**\n+   * A regular string\n+   */\n+  stringField: string\n+\n+  /**\n+   * A regular int\n+   */\n+  intField: int\n+\n+  /**\n+   * In this example we will declare a record and an enum inside a union\n+   */\n+  UnionFieldWithInlineRecordAndEnum: optional union[record myRecord {\n+\n+    /**\n+     * random int field\n+     */\n+    foo1: int\n+\n+    /**\n+     * random int field\n+     */\n+    foo2: int\n+  }, \n+    /**\n+     * Random enum\n+     */\n+    enum anotherEnum {\n+\n+      /**\n+       * description about FOOFOO\n+       */\n+      FOOFOO\n+\n+      /**\n+       * description about BARBAR\n+       */\n+      BARBAR\n+    }]\n+}\n+```\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive type, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+A optional field may have default value.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example : \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+\n+### Import\n+\n+1. If the type is outside the root namespace of the document, you need to add it as an import.\n+\n+2. If the type is declared outside the document, you need to add it as an import.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.imports\n+\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record Example {\n+  /**\n+   * Requires an import since this type is outside the root namespace and is not declared in this file.\n+   */\n+  externalOutsideNS: Simple\n+}\n+```\n+\n+**Note:** \n+- When multiple referenced types with the same unqualified name may be imported, \n+the type with the alphabetically first namespace is chosen. \n+(e.g. \"com.a.b.c.Foo\" is chosen over \"com.x.y.z.Foo\") \n+\n+- Any type that is not imported and is not within the namespace from which it's referenced must be referenced by\n+fully qualified name.\n+\n+\n+### Deprecation\n+Types and fields can be deprecated by adding @deprecated annotation.\n+\n+For example :\n+\n+```\n+@deprecated = \"Use record X instead.\"\n+record Example {\n+  @deprecated = \"Use field x instead.\"\n+  field: string\n+}\n+```\n+\n+### Including fields\n+\n+Record can include fields from other record.\n+\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields f1 from itself and b1 from Bar\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Properties\n+Properties can be used to present arbitrary datas and added to records, fields and enums.\n+\n+For example : \n+```\n+@prop = \"value\"\n+record Fruits {\n+  @validate.regex.regex = \"^(yes|no)$\"\n+  field: string\n+}\n+```\n+#### Property values can be any valid JSON type:\n+\n+For example : \n+```\n+@prop = 1\n+```\n+```\n+@prop = \"string\"\n+```\n+```\n+@prop = [1, 2, 3]\n+```\n+```\n+@prop = { \"a\": 1\", \"b\": { \"c\": true }}\n+```\n+\n+#### Property keys can expressed as paths:\n+\n+For example : \n+```\n+@java.class = \"org.joda.DateTime\"\n+@java.coercerClass = \"org.example.DateTimeCoercer\"\n+```\n+\n+The dot seperate keys format is equivalent to JSON value format.\n+\n+The above dot seperate keys example is equivalent to the following JSON value example :\n+```\n+@java = {\n+  \"class\": \"org.joda.DateTime\",\n+  \"coercerClass\": \"org.example.DateTimeCoercer\"\n+}\n+```\n+\n+### Escaping\n+There are some keywords which are reserved in Pegasus. If you have to use them to define any names, you need to put them in backticks : ` `.\n+\n+#### Keyword Escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PdlKeywordEscaping {\n+  `namespace`: string\n+  `record`: string\n+  `null`: string\n+  `enum`: string\n+  recordName: record `record` { }\n+}\n+```\n+\n+#### Namespace/Package escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping.`record`\n+package com.linkedin.pegasus.generator.test.idl.escaping.override.`typeref`\n+\n+/**\n+ * Ensures that the namespace and package are properly escaped at the root as well as in scoped named-type declarations.\n+ */\n+record NamespacePackageEscaping {\n+  x: {\n+    namespace com.x.y.z.`enum`\n+    package com.a.b.c.`fixed`\n+\n+    record Foo {}\n+  }\n+}\n+```\n+\n+#### Property key escaping \n+\n+If you want Pegasus to treat property key name with dots as one string key, please use backticks to escape such string.\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PropertyKeyEscaping {\n+  @`namespace` = \"foo.bar\"\n+  @`test.path` = 1\n+  @validate.`com.linkedin.CustomValidator` = \"foo\"\n+  aField: string\n+}\n+```\n+\n+\n+## Primitive Types\n+\n+The Pegasus primitive types are : int, long, float, double, boolean, string and bytes.\n+\n+For Example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithPrimitives {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  booleanField: boolean\n+  stringField: string\n+  bytesField: bytes\n+}\n+```\n+\n+## Array Type\n+\n+Pegesus Arrays are defined within a items type.\n+\n+For Example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+record WithPrimitivesArray {\n+  ints: array[int]\n+  longs: array[long]\n+  floats: array[float]\n+  doubles: array[double]\n+  booleans: array[boolean]\n+  strings: array[string]\n+  bytes: array[bytes]\n+}\n+```\n+\n+Record Arrays :\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+\n+record WithRecordArray {\n+  empties: array[Empty]\n+  fruits: array[Fruits]\n+}\n+```\n+\n+\n+## Map Type\n+\n+Pegasus maps are defined with a values type and an optional key type.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+record WithPrimitivesMap {\n+  ints: map[string, int]\n+  longs: map[string, long]\n+  floats: map[string, float]\n+  doubles: map[string, double]\n+  booleans: map[string, boolean]\n+  strings: map[string, string]\n+  bytes: map[string, bytes]\n+}\n+```\n+Custom Types Map :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+import com.linkedin.pegasus.generator.test.idl.customtypes.CustomInt\n+\n+record WithCustomTypesMap {\n+  ints: map[string, CustomInt]\n+}\n+```\n+\n+Complex Types Map :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+import com.linkedin.pegasus.generator.test.idl.`fixed`.Fixed8\n+\n+record WithComplexTypesMap {\n+  empties: map[string, Empty]\n+  fruits: map[string, Fruits]\n+  arrays: map[string, array[Simple]]\n+  maps: map[string, map[string, Simple]]\n+  unions: map[\n+    string,\n+    typeref WithComplexTypesMapUnion = union[int, string, Simple]\n+  ]\n+  `fixed`: map[string, Fixed8]\n+}\n+```\n+\n+**Note**: \n+The key must always be \"string\".\n+\n+\n+## Union Type\n+\n+A union type may be defined with any number of member types. Each member may be any pegasus type except union type. \n+Each member can be primitive, record, enum map or array type.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.unions\n+\n+record WithPrimitivesUnion {\n+  `union`: union[int, long, float, double, boolean, string, bytes]\n+}\n+```\n+\n+The member type names also serve as the \u201cmember keys\u201d (also called as \u201cunion tags\u201d), and identify which union member type data holds.\n+To define a field of a record containing a union of two other records, we would define:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Question {\n+  answerFormat: union[MultipleChoice, TextEntry]\n+}\n+```\n+\n+### Union with aliases\n+Union members can optionally be given an alias. Aliases can be used to create unions with members of the same type or to give better naming for union members.\n+\n+Aliased unions would be defines as :\n+```\n+union [alias: type, ...]\n+```\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Question {\n+ answerFormat: union[   \n+   multipleChoice: MultipleChoice,\n+   shortAnswer: string,\n+   longAnswer: string\n+ ]\n+}\n+```\n+In the above example, the union answerFormat has three members, with two string type members differentiated using the aliases (shortAnswer and longAnswer). When aliases are used, the alias becomes the \"member key\" for the union members and will be used in the wire format. \n+\n+## Enum Type\n+\n+Enums types may contain any number of symbols. \n+\n+For example :\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+enum Fruits {\n+  APPLE\n+  BANANA\n+  ORANGE\n+  PINEAPPLE\n+}\n+```\n+\n+Enums can be referenced in other schemas by name.\n+\n+For example :\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record FruitBasket {\n+  fruit: Fruits\n+}\n+```\n+\n+Enums can also be referenced in other schemas by inlining their type definition. \n+\n+For example :\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record FruitBasket {\n+  fruit: enum Fruits { APPLE, BANANA, ORANGE }\n+} \n+```\n+\n+### Enum documentation, deprecation and properties\n+Doc comments, @deprecation and properties can be added directly to enum symbols. \n+\n+For example :\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  @color = \"red\"\n+  APPLE\n+\n+  /**\n+   * A yummy fruit.\n+   */\n+  @color = \"yellow\"\n+  BANANA\n+\n+  @deprecated\n+  @color = \"orange\"\n+  ORANGE\n+}\n+```\n+\n+### Enum defaults\n+To specify defaults, specify the enum value as string.\n+\n+For example :\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record FruitBasket {\n+  fruit: enum Fruits { APPLE, BANANA, ORANGE } = \"APPLE\"\n+} \n+```\n+\n+\n+The default value can also be defined as following exmaple:\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record FruitBasket {\n+  fruit: Fruits = \"APPLE\"\n+} \n+```\n+\n+## Typerefs\n+Pegasus supports a new schema type known as a typeref. A typeref is like\n+a typedef in C. It does not declare a new type but declares an alias to\n+an existing type.\n+\n+  - Typerefs are useful for differentiating different uses of the same\n+    type. For example, we can use to a typeref to differentiate a string\n+    field that holds an URN (uniform resource name) from an arbitrary\n+    string value or a long field that holds an epoch time in\n+    milliseconds from a generic long value.\n+  - A typeref allows additional meta-data to be associated with\n+    primitive and unnamed types. This meta-data can be used to provide\n+    documentation or support custom properties.\n+  - A typeref provides a way to refer to common unnamed types such as\n+    arrays, maps, and unions. Without typerefs, users may have to wrap\n+    these unnamed types with a record in order to address them.\n+    Alternatively, users may cut-and-paste common type declarations,\n+    resulting in unnecessary duplication and potentially causing\n+    inconsistencies if future changes are not propagated correctly to\n+    all copies.\n+\n+\n+### Provide a name for a union, map, or array. So that it can be referenced by name\u3002\n+\n+It is very useful, because unions, maps and arrays cannot be named directly like records and enums.\n+\n+For example :\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+typeref AnswerTypes = union[MultipleChoice, TextEntry]\n+\n+```\n+\n+Typerefs can be referred to from any other type using the name\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 783}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3NDI1Mw==", "bodyText": "These headers seem odd because there's no context. It's as if they're supposed to be in a list of \"reasons to use typerefs\". You could either make a section that's explicit about this, or you can just reword the headers to something like Typerefs can be used to name anonymous types, Typerefs can provide additional clarity when using primitive types, and Typerefs can be used to specify custom types and coercers (though this last one should probably be moved to another Java-specific page, perhaps you can do that later).", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r363574253", "createdAt": "2020-01-07T03:01:02Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,828 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Typerefs](#typerefs)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+The named schema declarations support the following attributes: \n+\n+  - `type` provides the type of the named schema\n+    (required).\n+  - `name` provides the name of the named schema\n+    (required).\n+  - `namespace` qualifies the namespace for the named\n+    schema.\n+  - `package` qualifies the language binding\n+    namespace for the named schema (optional). If this is not specified,\n+    language  bindingclass for the named schema will use `namespace` as\n+    its default namespace.\n+  - `doc` provides documentation to the user of this\n+    named schema (optional).\n+  - `import` qualifies the name of object which is used in the schema.(optional).\n+\n+The named schemas with type \u201cenum\u201d also supports a `doc`\n+attribute to provide documentation for each enum symbol.\n+\n+**Note:** Due to the addition of doclint in JDK8, anything under the\n+`doc`  attribute must be W3C HTML 4.01 compliant. This is\n+because the contents of this string will appear as Javadocs in the\n+generated Java \u2018data template\u2019 classes later. Please take this into\n+consideration when writing your documentation.\n+\n+The following are a few example schemas and their file names.\n+\n+\n+com/linkedin/pegasus/generator/examples/Foo.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, \n+    /**\n+     * A foo record\n+     */\n+    record Foo {\n+      intField: int\n+      longField: long\n+      floatField: float\n+      doubleField: double\n+      bytesField: bytes\n+      stringField: string\n+      intArrayField: array[int]\n+      stringMapField: map[string, string]\n+      unionField: union[int, string, Foo, array[string], map[string, long]]\n+    }, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/FooWithNamespaceOverride.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+package com.linkedin.pegasus.generator.examples.`record`\n+\n+/**\n+ * A foo record\n+ */\n+record FooWithNamespaceOverride {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  bytesField: bytes\n+  stringField: string\n+  fruitsField: Fruits\n+  intArrayField: array[int]\n+  stringMapField: map[string, string]\n+  unionField: union[int, string, Fruits, array[string], map[string, long]]\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/Fruits.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  /**\n+   * A red, yellow or green fruit.\n+   */\n+  APPLE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  BANANA\n+\n+  /**\n+   * An orange fruit.\n+   */\n+  ORANGE\n+\n+  /**\n+   * A yellow fruit.\n+   */\n+  PINEAPPLE\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/MD5.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * MD5\n+ */\n+fixed MD5 16\n+```\n+\n+com/linkedin/pegasus/generator/examples/StringList.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A list of strings\n+ */\n+record StringList {\n+  element: string\n+  next: optional \n+\n+    /**\n+     * A list of strings\n+     */\n+    record StringList {\n+      element: string\n+      next: optional StringList\n+    }\n+}\n+```\n+\n+com/linkedin/pegasus/generator/examples/InlinedExample.pdl\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Example on how you can declare an enum and a record inside another record\n+ */\n+record InlinedExample {\n+\n+  /**\n+   * This is how we inline enum declaration without creating a new pdl file\n+   */\n+  @symbolDocs.FOO = \"It's a foo!\"\n+  @symbolDocs.NONE = \"It's a baz!\"\n+  @symbolDocs.HASH = \"It's a bar!\"\n+  myEnumField: enum EnumDeclarationInTheSameFile {\n+    FOO\n+    BAR\n+    BAZ\n+  }\n+\n+  /**\n+   * A regular string\n+   */\n+  stringField: string\n+\n+  /**\n+   * A regular int\n+   */\n+  intField: int\n+\n+  /**\n+   * In this example we will declare a record and an enum inside a union\n+   */\n+  UnionFieldWithInlineRecordAndEnum: optional union[record myRecord {\n+\n+    /**\n+     * random int field\n+     */\n+    foo1: int\n+\n+    /**\n+     * random int field\n+     */\n+    foo2: int\n+  }, \n+    /**\n+     * Random enum\n+     */\n+    enum anotherEnum {\n+\n+      /**\n+       * description about FOOFOO\n+       */\n+      FOOFOO\n+\n+      /**\n+       * description about BARBAR\n+       */\n+      BARBAR\n+    }]\n+}\n+```\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive type, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+A optional field may have default value.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example : \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+\n+### Import\n+\n+1. If the type is outside the root namespace of the document, you need to add it as an import.\n+\n+2. If the type is declared outside the document, you need to add it as an import.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.imports\n+\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record Example {\n+  /**\n+   * Requires an import since this type is outside the root namespace and is not declared in this file.\n+   */\n+  externalOutsideNS: Simple\n+}\n+```\n+\n+**Note:** \n+- When multiple referenced types with the same unqualified name may be imported, \n+the type with the alphabetically first namespace is chosen. \n+(e.g. \"com.a.b.c.Foo\" is chosen over \"com.x.y.z.Foo\") \n+\n+- Any type that is not imported and is not within the namespace from which it's referenced must be referenced by\n+fully qualified name.\n+\n+\n+### Deprecation\n+Types and fields can be deprecated by adding @deprecated annotation.\n+\n+For example :\n+\n+```\n+@deprecated = \"Use record X instead.\"\n+record Example {\n+  @deprecated = \"Use field x instead.\"\n+  field: string\n+}\n+```\n+\n+### Including fields\n+\n+Record can include fields from other record.\n+\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields f1 from itself and b1 from Bar\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Properties\n+Properties can be used to present arbitrary datas and added to records, fields and enums.\n+\n+For example : \n+```\n+@prop = \"value\"\n+record Fruits {\n+  @validate.regex.regex = \"^(yes|no)$\"\n+  field: string\n+}\n+```\n+#### Property values can be any valid JSON type:\n+\n+For example : \n+```\n+@prop = 1\n+```\n+```\n+@prop = \"string\"\n+```\n+```\n+@prop = [1, 2, 3]\n+```\n+```\n+@prop = { \"a\": 1\", \"b\": { \"c\": true }}\n+```\n+\n+#### Property keys can expressed as paths:\n+\n+For example : \n+```\n+@java.class = \"org.joda.DateTime\"\n+@java.coercerClass = \"org.example.DateTimeCoercer\"\n+```\n+\n+The dot seperate keys format is equivalent to JSON value format.\n+\n+The above dot seperate keys example is equivalent to the following JSON value example :\n+```\n+@java = {\n+  \"class\": \"org.joda.DateTime\",\n+  \"coercerClass\": \"org.example.DateTimeCoercer\"\n+}\n+```\n+\n+### Escaping\n+There are some keywords which are reserved in Pegasus. If you have to use them to define any names, you need to put them in backticks : ` `.\n+\n+#### Keyword Escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PdlKeywordEscaping {\n+  `namespace`: string\n+  `record`: string\n+  `null`: string\n+  `enum`: string\n+  recordName: record `record` { }\n+}\n+```\n+\n+#### Namespace/Package escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping.`record`\n+package com.linkedin.pegasus.generator.test.idl.escaping.override.`typeref`\n+\n+/**\n+ * Ensures that the namespace and package are properly escaped at the root as well as in scoped named-type declarations.\n+ */\n+record NamespacePackageEscaping {\n+  x: {\n+    namespace com.x.y.z.`enum`\n+    package com.a.b.c.`fixed`\n+\n+    record Foo {}\n+  }\n+}\n+```\n+\n+#### Property key escaping \n+\n+If you want Pegasus to treat property key name with dots as one string key, please use backticks to escape such string.\n+For example : \n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PropertyKeyEscaping {\n+  @`namespace` = \"foo.bar\"\n+  @`test.path` = 1\n+  @validate.`com.linkedin.CustomValidator` = \"foo\"\n+  aField: string\n+}\n+```\n+\n+\n+## Primitive Types\n+\n+The Pegasus primitive types are : int, long, float, double, boolean, string and bytes.\n+\n+For Example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithPrimitives {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  booleanField: boolean\n+  stringField: string\n+  bytesField: bytes\n+}\n+```\n+\n+## Array Type\n+\n+Pegesus Arrays are defined within a items type.\n+\n+For Example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+record WithPrimitivesArray {\n+  ints: array[int]\n+  longs: array[long]\n+  floats: array[float]\n+  doubles: array[double]\n+  booleans: array[boolean]\n+  strings: array[string]\n+  bytes: array[bytes]\n+}\n+```\n+\n+Record Arrays :\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+\n+record WithRecordArray {\n+  empties: array[Empty]\n+  fruits: array[Fruits]\n+}\n+```\n+\n+\n+## Map Type\n+\n+Pegasus maps are defined with a values type and an optional key type.\n+\n+For example : \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+record WithPrimitivesMap {\n+  ints: map[string, int]\n+  longs: map[string, long]\n+  floats: map[string, float]\n+  doubles: map[string, double]\n+  booleans: map[string, boolean]\n+  strings: map[string, string]\n+  bytes: map[string, bytes]\n+}\n+```\n+Custom Types Map :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+import com.linkedin.pegasus.generator.test.idl.customtypes.CustomInt\n+\n+record WithCustomTypesMap {\n+  ints: map[string, CustomInt]\n+}\n+```\n+\n+Complex Types Map :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+import com.linkedin.pegasus.generator.test.idl.`fixed`.Fixed8\n+\n+record WithComplexTypesMap {\n+  empties: map[string, Empty]\n+  fruits: map[string, Fruits]\n+  arrays: map[string, array[Simple]]\n+  maps: map[string, map[string, Simple]]\n+  unions: map[\n+    string,\n+    typeref WithComplexTypesMapUnion = union[int, string, Simple]\n+  ]\n+  `fixed`: map[string, Fixed8]\n+}\n+```\n+\n+**Note**: \n+The key must always be \"string\".\n+\n+\n+## Union Type\n+\n+A union type may be defined with any number of member types. Each member may be any pegasus type except union type. \n+Each member can be primitive, record, enum map or array type.\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.unions\n+\n+record WithPrimitivesUnion {\n+  `union`: union[int, long, float, double, boolean, string, bytes]\n+}\n+```\n+\n+The member type names also serve as the \u201cmember keys\u201d (also called as \u201cunion tags\u201d), and identify which union member type data holds.\n+To define a field of a record containing a union of two other records, we would define:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Question {\n+  answerFormat: union[MultipleChoice, TextEntry]\n+}\n+```\n+\n+### Union with aliases\n+Union members can optionally be given an alias. Aliases can be used to create unions with members of the same type or to give better naming for union members.\n+\n+Aliased unions would be defines as :\n+```\n+union [alias: type, ...]\n+```\n+\n+For example :\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Question {\n+ answerFormat: union[   \n+   multipleChoice: MultipleChoice,\n+   shortAnswer: string,\n+   longAnswer: string\n+ ]\n+}\n+```\n+In the above example, the union answerFormat has three members, with two string type members differentiated using the aliases (shortAnswer and longAnswer). When aliases are used, the alias becomes the \"member key\" for the union members and will be used in the wire format. \n+\n+## Enum Type\n+\n+Enums types may contain any number of symbols. \n+\n+For example :\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+enum Fruits {\n+  APPLE\n+  BANANA\n+  ORANGE\n+  PINEAPPLE\n+}\n+```\n+\n+Enums can be referenced in other schemas by name.\n+\n+For example :\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record FruitBasket {\n+  fruit: Fruits\n+}\n+```\n+\n+Enums can also be referenced in other schemas by inlining their type definition. \n+\n+For example :\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record FruitBasket {\n+  fruit: enum Fruits { APPLE, BANANA, ORANGE }\n+} \n+```\n+\n+### Enum documentation, deprecation and properties\n+Doc comments, @deprecation and properties can be added directly to enum symbols. \n+\n+For example :\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  @color = \"red\"\n+  APPLE\n+\n+  /**\n+   * A yummy fruit.\n+   */\n+  @color = \"yellow\"\n+  BANANA\n+\n+  @deprecated\n+  @color = \"orange\"\n+  ORANGE\n+}\n+```\n+\n+### Enum defaults\n+To specify defaults, specify the enum value as string.\n+\n+For example :\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record FruitBasket {\n+  fruit: enum Fruits { APPLE, BANANA, ORANGE } = \"APPLE\"\n+} \n+```\n+\n+\n+The default value can also be defined as following exmaple:\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record FruitBasket {\n+  fruit: Fruits = \"APPLE\"\n+} \n+```\n+\n+## Typerefs\n+Pegasus supports a new schema type known as a typeref. A typeref is like\n+a typedef in C. It does not declare a new type but declares an alias to\n+an existing type.\n+\n+  - Typerefs are useful for differentiating different uses of the same\n+    type. For example, we can use to a typeref to differentiate a string\n+    field that holds an URN (uniform resource name) from an arbitrary\n+    string value or a long field that holds an epoch time in\n+    milliseconds from a generic long value.\n+  - A typeref allows additional meta-data to be associated with\n+    primitive and unnamed types. This meta-data can be used to provide\n+    documentation or support custom properties.\n+  - A typeref provides a way to refer to common unnamed types such as\n+    arrays, maps, and unions. Without typerefs, users may have to wrap\n+    these unnamed types with a record in order to address them.\n+    Alternatively, users may cut-and-paste common type declarations,\n+    resulting in unnecessary duplication and potentially causing\n+    inconsistencies if future changes are not propagated correctly to\n+    all copies.\n+\n+\n+### Provide a name for a union, map, or array. So that it can be referenced by name\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a73b73d1e48aef68cf4d59ab52ba082f38f2e8"}, "originalPosition": 770}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39493d1217f39ab7379a6af4c9405315ffa1befa", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/39493d1217f39ab7379a6af4c9405315ffa1befa", "committedDate": "2020-01-08T21:39:25Z", "message": "Update Data Schema doc to add PDL content"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwMjAzNDky", "url": "https://github.com/linkedin/rest.li/pull/157#pullrequestreview-340203492", "createdAt": "2020-01-08T23:07:32Z", "commit": {"oid": "39493d1217f39ab7379a6af4c9405315ffa1befa"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMzowNzozM1rOFbmnKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMzoyMzo0M1rOFbm6EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ4ODQ4OA==", "bodyText": "maps, arrays or other records", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r364488488", "createdAt": "2020-01-08T23:07:33Z", "author": {"login": "karthikbalasub"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,819 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Map Type](#map_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Fixed Type](#fixed_type)\n+-   [Typerefs](#typerefs)\n+-   [Namespace](#namespace\\)\n+-   [Import](#import)\n+-   [Deprecation](#deprecation)\n+-   [Package](#package)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+Pegasus supports different types of schemas: [Records](#record_type), [Primitive types](#record_type), [Enums](#enum_type), [Arrays](#array_type), [Maps](#map_type), [Unions](#union_type), [Fixed](#fixed_type) and [Typerefs](#typerefs). \n+Please check the following documentations for details.\n+\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive types, enums, unions, maps and arrays.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39493d1217f39ab7379a6af4c9405315ffa1befa"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ4ODc0Mg==", "bodyText": "remove this as optional is introduced in the next step", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r364488742", "createdAt": "2020-01-08T23:08:22Z", "author": {"login": "karthikbalasub"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,819 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Map Type](#map_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Fixed Type](#fixed_type)\n+-   [Typerefs](#typerefs)\n+-   [Namespace](#namespace\\)\n+-   [Import](#import)\n+-   [Deprecation](#deprecation)\n+-   [Package](#package)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+Pegasus supports different types of schemas: [Records](#record_type), [Primitive types](#record_type), [Enums](#enum_type), [Arrays](#array_type), [Maps](#map_type), [Unions](#union_type), [Fixed](#fixed_type) and [Typerefs](#typerefs). \n+Please check the following documentations for details.\n+\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive types, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39493d1217f39ab7379a6af4c9405315ffa1befa"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ4ODg0OQ==", "bodyText": "Add a doc to explain this field is optional.", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r364488849", "createdAt": "2020-01-08T23:08:44Z", "author": {"login": "karthikbalasub"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,819 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Map Type](#map_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Fixed Type](#fixed_type)\n+-   [Typerefs](#typerefs)\n+-   [Namespace](#namespace\\)\n+-   [Import](#import)\n+-   [Deprecation](#deprecation)\n+-   [Package](#package)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+Pegasus supports different types of schemas: [Records](#record_type), [Primitive types](#record_type), [Enums](#enum_type), [Arrays](#array_type), [Maps](#map_type), [Unions](#union_type), [Fixed](#fixed_type) and [Typerefs](#typerefs). \n+Please check the following documentations for details.\n+\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive types, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39493d1217f39ab7379a6af4c9405315ffa1befa"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ4OTI3Ng==", "bodyText": "An optional", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r364489276", "createdAt": "2020-01-08T23:10:13Z", "author": {"login": "karthikbalasub"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,819 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Map Type](#map_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Fixed Type](#fixed_type)\n+-   [Typerefs](#typerefs)\n+-   [Namespace](#namespace\\)\n+-   [Import](#import)\n+-   [Deprecation](#deprecation)\n+-   [Package](#package)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+Pegasus supports different types of schemas: [Records](#record_type), [Primitive types](#record_type), [Enums](#enum_type), [Arrays](#array_type), [Maps](#map_type), [Unions](#union_type), [Fixed](#fixed_type) and [Typerefs](#typerefs). \n+Please check the following documentations for details.\n+\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive types, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+A optional field may have default value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39493d1217f39ab7379a6af4c9405315ffa1befa"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ5MDI4NA==", "bodyText": "What I meant was the default value for the field that defines the inline record.\neg,\nrecord WithInlineRecord {\ninline: record InlineRecord {\nvalue: int\n} = {\"value\": 1}\ninlineOptional: optional record InlineOptionalRecord {\nvalue: string\n} = {\"value\": \"default-value\"}\n}", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r364490284", "createdAt": "2020-01-08T23:13:33Z", "author": {"login": "karthikbalasub"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,819 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Map Type](#map_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Fixed Type](#fixed_type)\n+-   [Typerefs](#typerefs)\n+-   [Namespace](#namespace\\)\n+-   [Import](#import)\n+-   [Deprecation](#deprecation)\n+-   [Package](#package)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+Pegasus supports different types of schemas: [Records](#record_type), [Primitive types](#record_type), [Enums](#enum_type), [Arrays](#array_type), [Maps](#map_type), [Unions](#union_type), [Fixed](#fixed_type) and [Typerefs](#typerefs). \n+Please check the following documentations for details.\n+\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive types, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+A optional field may have default value.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Inline Record\n+\n+A record can contain inline records.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithInlineRecord {\n+  inline: record InlineRecord {\n+    value: int\n+  }\n+  inlineOptional: optional record InlineOptionalRecord {\n+    value: string\n+  }\n+}\n+```\n+\n+Inline record can also contains default values.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39493d1217f39ab7379a6af4c9405315ffa1befa"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ5MzMyOQ==", "bodyText": "arbitrary data", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r364493329", "createdAt": "2020-01-08T23:23:43Z", "author": {"login": "karthikbalasub"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,819 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Map Type](#map_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Fixed Type](#fixed_type)\n+-   [Typerefs](#typerefs)\n+-   [Namespace](#namespace\\)\n+-   [Import](#import)\n+-   [Deprecation](#deprecation)\n+-   [Package](#package)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+Pegasus supports different types of schemas: [Records](#record_type), [Primitive types](#record_type), [Enums](#enum_type), [Arrays](#array_type), [Maps](#map_type), [Unions](#union_type), [Fixed](#fixed_type) and [Typerefs](#typerefs). \n+Please check the following documentations for details.\n+\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive types, enums, unions, maps and arrays.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field2: optional int\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+A optional field may have default value.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Inline Record\n+\n+A record can contain inline records.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithInlineRecord {\n+  inline: record InlineRecord {\n+    value: int\n+  }\n+  inlineOptional: optional record InlineOptionalRecord {\n+    value: string\n+  }\n+}\n+```\n+\n+Inline record can also contains default values.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   /**\n+    * A inline record\n+    */\n+   inlinedRecord: record Boo {\n+      message: string = \"Hello\"\n+   }\n+}\n+```\n+\n+Inline records can aslo be union members.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.unions\n+\n+record UnionWithInlineRecord {\n+  value = union[\n+\n+    record InlineRecord {\n+      value: optional int\n+    },\n+\n+    record InlineRecord2 {}\n+  ]\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example: \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+### Including fields\n+\n+Record can include fields from one or more other records..\n+\n+For example: \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields b1 from itself and f1 from Foo\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+\n+Multiple includes example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo and Simple, Bar will have fields b1 from itself, f1 from Foo and s1 from Simple\n+ */\n+record Bar includes Foo, Simple {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Simple {\n+  s1: string\n+}\n+```\n+\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Properties\n+Properties can be used to present arbitrary datas and added to records, fields and enums.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39493d1217f39ab7379a6af4c9405315ffa1befa"}, "originalPosition": 231}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f25fee15c63e8abeae12c10eafedca1b47adc26a", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/f25fee15c63e8abeae12c10eafedca1b47adc26a", "committedDate": "2020-01-09T00:25:22Z", "message": "Update Data Schema doc to add PDL content"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwNzI3ODIz", "url": "https://github.com/linkedin/rest.li/pull/157#pullrequestreview-340727823", "createdAt": "2020-01-09T18:32:43Z", "commit": {"oid": "f25fee15c63e8abeae12c10eafedca1b47adc26a"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxODozMjo0M1rOFb_dbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxODozNzo0NlrOFb_l6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5NTU5Nw==", "bodyText": "nit: update some examples to include more than one value in the default", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r364895597", "createdAt": "2020-01-09T18:32:43Z", "author": {"login": "karthikbalasub"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,819 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Map Type](#map_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Fixed Type](#fixed_type)\n+-   [Typerefs](#typerefs)\n+-   [Namespace](#namespace\\)\n+-   [Import](#import)\n+-   [Deprecation](#deprecation)\n+-   [Package](#package)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+Pegasus supports different types of schemas: [Records](#record_type), [Primitive types](#record_type), [Enums](#enum_type), [Arrays](#array_type), [Maps](#map_type), [Unions](#union_type), [Fixed](#fixed_type) and [Typerefs](#typerefs). \n+Please check the following documentations for details.\n+\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive types, enums, unions, maps arrays or other records.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   /**\n+    * field2 is an optional field.\n+    */\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+An optional field may have default value.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Inline Record\n+\n+A record can contain inline records.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithInlineRecord {\n+  inline: record InlineRecord {\n+    value: int\n+  }\n+  inlineOptional: optional record InlineOptionalRecord {\n+    value: string\n+  }\n+}\n+```\n+\n+Default value can be set up for a field that defines the inline records.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record WithInlineRecord {\n+\n+    inline: record InlineRecord {\n+      value: int\n+    } = { \"value\" : 1 }\n+\n+    inlineOptional: optional record InlineOptionalRecord {\n+      value: string\n+    } = { \"value\" : \"default-value\" }\n+}\n+```\n+\n+Inline records can aslo be union members.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.unions\n+\n+record UnionWithInlineRecord {\n+  value = union[\n+\n+    record InlineRecord {\n+      value: optional int\n+    },\n+\n+    record InlineRecord2 {}\n+  ]\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example: \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+### Including fields\n+\n+Record can include fields from one or more other records..\n+\n+For example: \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields b1 from itself and f1 from Foo\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+\n+Multiple includes example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo and Simple, Bar will have fields b1 from itself, f1 from Foo and s1 from Simple\n+ */\n+record Bar includes Foo, Simple {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Simple {\n+  s1: string\n+}\n+```\n+\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Properties\n+Properties can be used to present arbitrary data and added to records, fields and enums.\n+\n+For example: \n+```\n+@prop = \"value\"\n+record Fruits {\n+  @validate.regex.regex = \"^(yes|no)$\"\n+  field: string\n+}\n+```\n+#### Property values can be any valid JSON type:\n+\n+For example: \n+```\n+@prop = 1\n+```\n+```\n+@prop = \"string\"\n+```\n+```\n+@prop = [1, 2, 3]\n+```\n+```\n+@prop = { \"a\": 1\", \"b\": { \"c\": true }}\n+\n+```\n+#### Property values can also be empty: \n+\n+If you don't indicate an explicity property value, it will resuilt in an implicity value of `true`.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+@prop\n+record Foo {\n+  f1: string\n+}\n+```\n+#### Property keys can be expressed as JSON:\n+\n+For example: \n+```\n+@a = {\n+  \"b\": {\n+    \"c\": {\n+      \"d\": {\n+        \"e\": {\n+          \"f\": false\n+        }\n+      }\n+    }\n+  }\n+}\n+```\n+\n+#### Property keys can be expressed as paths:\n+\n+The JSON style property key is complicated to write and read, so we provide a shorthand - the dot separate format to express the property keys.\n+\n+The following example is equivalent to the previous JSON example:\n+\n+```\n+@a.b.c.d.e.f = false\n+```\n+\n+### Escaping\n+There are some keywords which are reserved in Pegasus. If you have to use them to define any names, you need to put them in backticks : ` `.\n+\n+#### Keyword Escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PdlKeywordEscaping {\n+  `namespace`: string\n+  `record`: string\n+  `null`: string\n+  `enum`: string\n+  recordName: record `record` { }\n+}\n+```\n+\n+#### Namespace/Package escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping.`record`\n+package com.linkedin.pegasus.generator.test.idl.escaping.override.`typeref`\n+\n+/**\n+ * Ensures that the namespace and package are properly escaped at the root as well as in scoped named-type declarations.\n+ */\n+record NamespacePackageEscaping {\n+  x: {\n+    namespace com.x.y.z.`enum`\n+    package com.a.b.c.`fixed`\n+\n+    record Foo {}\n+  }\n+}\n+```\n+\n+#### Property key escaping \n+\n+If you want Pegasus to treat property key name with dots as one string key, please use backticks to escape such string.\n+For example: \n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PropertyKeyEscaping {\n+  @`namespace` = \"foo.bar\"\n+  @`test.path` = 1\n+  @validate.`com.linkedin.CustomValidator` = \"foo\"\n+  aField: string\n+}\n+```\n+\n+\n+## Primitive Types\n+\n+The Pegasus primitive types are : int, long, float, double, boolean, string and bytes.\n+\n+For Example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithPrimitives {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  booleanField: boolean\n+  stringField: string\n+  bytesField: bytes\n+}\n+```\n+\n+Primitive types with default values:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithPrimitiveDefaults {\n+  intWithDefault: int = 1\n+  longWithDefault: long = 3000000000\n+  floatWithDefault: float = 3.3\n+  doubleWithDefault: double = 4.4E38\n+  booleanWithDefault: boolean = true\n+  stringWithDefault: string = \"DEFAULT\"\n+  bytesWithDefault: bytes = \"\\u0007\"\n+}\n+```\n+\n+\n+## Array Type\n+\n+Pegasus Arrays are defined as a collection of a particular \"items\" type.\n+\n+For Example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+record WithPrimitivesArray {\n+  ints: array[int]\n+  longs: array[long]\n+  floats: array[float]\n+  doubles: array[double]\n+  booleans: array[boolean]\n+  strings: array[string]\n+  bytes: array[bytes]\n+}\n+```\n+\n+Primitive arrays with default values: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+record WithPrimitivesArrayDefaults {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f25fee15c63e8abeae12c10eafedca1b47adc26a"}, "originalPosition": 408}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5NjA5OA==", "bodyText": "Fruits here is enum, not a record, I think you can change the text to say \"Record or Enum arrays:\"", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r364896098", "createdAt": "2020-01-09T18:33:54Z", "author": {"login": "karthikbalasub"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,819 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Map Type](#map_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Fixed Type](#fixed_type)\n+-   [Typerefs](#typerefs)\n+-   [Namespace](#namespace\\)\n+-   [Import](#import)\n+-   [Deprecation](#deprecation)\n+-   [Package](#package)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+Pegasus supports different types of schemas: [Records](#record_type), [Primitive types](#record_type), [Enums](#enum_type), [Arrays](#array_type), [Maps](#map_type), [Unions](#union_type), [Fixed](#fixed_type) and [Typerefs](#typerefs). \n+Please check the following documentations for details.\n+\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive types, enums, unions, maps arrays or other records.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   /**\n+    * field2 is an optional field.\n+    */\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+An optional field may have default value.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Inline Record\n+\n+A record can contain inline records.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithInlineRecord {\n+  inline: record InlineRecord {\n+    value: int\n+  }\n+  inlineOptional: optional record InlineOptionalRecord {\n+    value: string\n+  }\n+}\n+```\n+\n+Default value can be set up for a field that defines the inline records.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record WithInlineRecord {\n+\n+    inline: record InlineRecord {\n+      value: int\n+    } = { \"value\" : 1 }\n+\n+    inlineOptional: optional record InlineOptionalRecord {\n+      value: string\n+    } = { \"value\" : \"default-value\" }\n+}\n+```\n+\n+Inline records can aslo be union members.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.unions\n+\n+record UnionWithInlineRecord {\n+  value = union[\n+\n+    record InlineRecord {\n+      value: optional int\n+    },\n+\n+    record InlineRecord2 {}\n+  ]\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example: \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+### Including fields\n+\n+Record can include fields from one or more other records..\n+\n+For example: \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields b1 from itself and f1 from Foo\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+\n+Multiple includes example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo and Simple, Bar will have fields b1 from itself, f1 from Foo and s1 from Simple\n+ */\n+record Bar includes Foo, Simple {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Simple {\n+  s1: string\n+}\n+```\n+\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Properties\n+Properties can be used to present arbitrary data and added to records, fields and enums.\n+\n+For example: \n+```\n+@prop = \"value\"\n+record Fruits {\n+  @validate.regex.regex = \"^(yes|no)$\"\n+  field: string\n+}\n+```\n+#### Property values can be any valid JSON type:\n+\n+For example: \n+```\n+@prop = 1\n+```\n+```\n+@prop = \"string\"\n+```\n+```\n+@prop = [1, 2, 3]\n+```\n+```\n+@prop = { \"a\": 1\", \"b\": { \"c\": true }}\n+\n+```\n+#### Property values can also be empty: \n+\n+If you don't indicate an explicity property value, it will resuilt in an implicity value of `true`.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+@prop\n+record Foo {\n+  f1: string\n+}\n+```\n+#### Property keys can be expressed as JSON:\n+\n+For example: \n+```\n+@a = {\n+  \"b\": {\n+    \"c\": {\n+      \"d\": {\n+        \"e\": {\n+          \"f\": false\n+        }\n+      }\n+    }\n+  }\n+}\n+```\n+\n+#### Property keys can be expressed as paths:\n+\n+The JSON style property key is complicated to write and read, so we provide a shorthand - the dot separate format to express the property keys.\n+\n+The following example is equivalent to the previous JSON example:\n+\n+```\n+@a.b.c.d.e.f = false\n+```\n+\n+### Escaping\n+There are some keywords which are reserved in Pegasus. If you have to use them to define any names, you need to put them in backticks : ` `.\n+\n+#### Keyword Escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PdlKeywordEscaping {\n+  `namespace`: string\n+  `record`: string\n+  `null`: string\n+  `enum`: string\n+  recordName: record `record` { }\n+}\n+```\n+\n+#### Namespace/Package escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping.`record`\n+package com.linkedin.pegasus.generator.test.idl.escaping.override.`typeref`\n+\n+/**\n+ * Ensures that the namespace and package are properly escaped at the root as well as in scoped named-type declarations.\n+ */\n+record NamespacePackageEscaping {\n+  x: {\n+    namespace com.x.y.z.`enum`\n+    package com.a.b.c.`fixed`\n+\n+    record Foo {}\n+  }\n+}\n+```\n+\n+#### Property key escaping \n+\n+If you want Pegasus to treat property key name with dots as one string key, please use backticks to escape such string.\n+For example: \n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PropertyKeyEscaping {\n+  @`namespace` = \"foo.bar\"\n+  @`test.path` = 1\n+  @validate.`com.linkedin.CustomValidator` = \"foo\"\n+  aField: string\n+}\n+```\n+\n+\n+## Primitive Types\n+\n+The Pegasus primitive types are : int, long, float, double, boolean, string and bytes.\n+\n+For Example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithPrimitives {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  booleanField: boolean\n+  stringField: string\n+  bytesField: bytes\n+}\n+```\n+\n+Primitive types with default values:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithPrimitiveDefaults {\n+  intWithDefault: int = 1\n+  longWithDefault: long = 3000000000\n+  floatWithDefault: float = 3.3\n+  doubleWithDefault: double = 4.4E38\n+  booleanWithDefault: boolean = true\n+  stringWithDefault: string = \"DEFAULT\"\n+  bytesWithDefault: bytes = \"\\u0007\"\n+}\n+```\n+\n+\n+## Array Type\n+\n+Pegasus Arrays are defined as a collection of a particular \"items\" type.\n+\n+For Example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+record WithPrimitivesArray {\n+  ints: array[int]\n+  longs: array[long]\n+  floats: array[float]\n+  doubles: array[double]\n+  booleans: array[boolean]\n+  strings: array[string]\n+  bytes: array[bytes]\n+}\n+```\n+\n+Primitive arrays with default values: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+record WithPrimitivesArrayDefaults {\n+  ints: array[int] = [1]\n+  longs: array[long] = [3000000000]\n+  floats: array[float] = [3.3]\n+  doubles: array[double] = [4.4E38]\n+  booleans: array[boolean] = [true]\n+  strings: array[string] = [\"hello\"]\n+  bytes: array[bytes] = [\"\\u0007\"]\n+}\n+```\n+\n+Record arrays:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+\n+record WithRecordArray {\n+  empties: array[Empty]\n+  fruits: array[Fruits]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f25fee15c63e8abeae12c10eafedca1b47adc26a"}, "originalPosition": 428}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5NjQyNQ==", "bodyText": "Same here, include an example with multiple map entries", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r364896425", "createdAt": "2020-01-09T18:34:40Z", "author": {"login": "karthikbalasub"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,819 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Map Type](#map_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Fixed Type](#fixed_type)\n+-   [Typerefs](#typerefs)\n+-   [Namespace](#namespace\\)\n+-   [Import](#import)\n+-   [Deprecation](#deprecation)\n+-   [Package](#package)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+Pegasus supports different types of schemas: [Records](#record_type), [Primitive types](#record_type), [Enums](#enum_type), [Arrays](#array_type), [Maps](#map_type), [Unions](#union_type), [Fixed](#fixed_type) and [Typerefs](#typerefs). \n+Please check the following documentations for details.\n+\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive types, enums, unions, maps arrays or other records.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   /**\n+    * field2 is an optional field.\n+    */\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+An optional field may have default value.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Inline Record\n+\n+A record can contain inline records.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithInlineRecord {\n+  inline: record InlineRecord {\n+    value: int\n+  }\n+  inlineOptional: optional record InlineOptionalRecord {\n+    value: string\n+  }\n+}\n+```\n+\n+Default value can be set up for a field that defines the inline records.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record WithInlineRecord {\n+\n+    inline: record InlineRecord {\n+      value: int\n+    } = { \"value\" : 1 }\n+\n+    inlineOptional: optional record InlineOptionalRecord {\n+      value: string\n+    } = { \"value\" : \"default-value\" }\n+}\n+```\n+\n+Inline records can aslo be union members.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.unions\n+\n+record UnionWithInlineRecord {\n+  value = union[\n+\n+    record InlineRecord {\n+      value: optional int\n+    },\n+\n+    record InlineRecord2 {}\n+  ]\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example: \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+### Including fields\n+\n+Record can include fields from one or more other records..\n+\n+For example: \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields b1 from itself and f1 from Foo\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+\n+Multiple includes example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo and Simple, Bar will have fields b1 from itself, f1 from Foo and s1 from Simple\n+ */\n+record Bar includes Foo, Simple {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Simple {\n+  s1: string\n+}\n+```\n+\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Properties\n+Properties can be used to present arbitrary data and added to records, fields and enums.\n+\n+For example: \n+```\n+@prop = \"value\"\n+record Fruits {\n+  @validate.regex.regex = \"^(yes|no)$\"\n+  field: string\n+}\n+```\n+#### Property values can be any valid JSON type:\n+\n+For example: \n+```\n+@prop = 1\n+```\n+```\n+@prop = \"string\"\n+```\n+```\n+@prop = [1, 2, 3]\n+```\n+```\n+@prop = { \"a\": 1\", \"b\": { \"c\": true }}\n+\n+```\n+#### Property values can also be empty: \n+\n+If you don't indicate an explicity property value, it will resuilt in an implicity value of `true`.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+@prop\n+record Foo {\n+  f1: string\n+}\n+```\n+#### Property keys can be expressed as JSON:\n+\n+For example: \n+```\n+@a = {\n+  \"b\": {\n+    \"c\": {\n+      \"d\": {\n+        \"e\": {\n+          \"f\": false\n+        }\n+      }\n+    }\n+  }\n+}\n+```\n+\n+#### Property keys can be expressed as paths:\n+\n+The JSON style property key is complicated to write and read, so we provide a shorthand - the dot separate format to express the property keys.\n+\n+The following example is equivalent to the previous JSON example:\n+\n+```\n+@a.b.c.d.e.f = false\n+```\n+\n+### Escaping\n+There are some keywords which are reserved in Pegasus. If you have to use them to define any names, you need to put them in backticks : ` `.\n+\n+#### Keyword Escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PdlKeywordEscaping {\n+  `namespace`: string\n+  `record`: string\n+  `null`: string\n+  `enum`: string\n+  recordName: record `record` { }\n+}\n+```\n+\n+#### Namespace/Package escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping.`record`\n+package com.linkedin.pegasus.generator.test.idl.escaping.override.`typeref`\n+\n+/**\n+ * Ensures that the namespace and package are properly escaped at the root as well as in scoped named-type declarations.\n+ */\n+record NamespacePackageEscaping {\n+  x: {\n+    namespace com.x.y.z.`enum`\n+    package com.a.b.c.`fixed`\n+\n+    record Foo {}\n+  }\n+}\n+```\n+\n+#### Property key escaping \n+\n+If you want Pegasus to treat property key name with dots as one string key, please use backticks to escape such string.\n+For example: \n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PropertyKeyEscaping {\n+  @`namespace` = \"foo.bar\"\n+  @`test.path` = 1\n+  @validate.`com.linkedin.CustomValidator` = \"foo\"\n+  aField: string\n+}\n+```\n+\n+\n+## Primitive Types\n+\n+The Pegasus primitive types are : int, long, float, double, boolean, string and bytes.\n+\n+For Example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithPrimitives {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  booleanField: boolean\n+  stringField: string\n+  bytesField: bytes\n+}\n+```\n+\n+Primitive types with default values:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithPrimitiveDefaults {\n+  intWithDefault: int = 1\n+  longWithDefault: long = 3000000000\n+  floatWithDefault: float = 3.3\n+  doubleWithDefault: double = 4.4E38\n+  booleanWithDefault: boolean = true\n+  stringWithDefault: string = \"DEFAULT\"\n+  bytesWithDefault: bytes = \"\\u0007\"\n+}\n+```\n+\n+\n+## Array Type\n+\n+Pegasus Arrays are defined as a collection of a particular \"items\" type.\n+\n+For Example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+record WithPrimitivesArray {\n+  ints: array[int]\n+  longs: array[long]\n+  floats: array[float]\n+  doubles: array[double]\n+  booleans: array[boolean]\n+  strings: array[string]\n+  bytes: array[bytes]\n+}\n+```\n+\n+Primitive arrays with default values: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+record WithPrimitivesArrayDefaults {\n+  ints: array[int] = [1]\n+  longs: array[long] = [3000000000]\n+  floats: array[float] = [3.3]\n+  doubles: array[double] = [4.4E38]\n+  booleans: array[boolean] = [true]\n+  strings: array[string] = [\"hello\"]\n+  bytes: array[bytes] = [\"\\u0007\"]\n+}\n+```\n+\n+Record arrays:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+\n+record WithRecordArray {\n+  empties: array[Empty]\n+  fruits: array[Fruits]\n+}\n+```\n+\n+Record arrays with default values: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record WithRecordArrayDefaults {\n+  empties: array[Simple] = [{ \"message\": \"defaults!\" }]\n+  fruits: array[Fruits] = [\"APPLE\"]\n+}\n+```\n+\n+\n+## Map Type\n+\n+Pegasus maps are defined with a values type and an optional key type.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+record WithPrimitivesMap {\n+  ints: map[string, int]\n+  longs: map[string, long]\n+  floats: map[string, float]\n+  doubles: map[string, double]\n+  booleans: map[string, boolean]\n+  strings: map[string, string]\n+  bytes: map[string, bytes]\n+}\n+```\n+\n+Primitive maps with default values: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+record WithPrimitivesMapDefaults {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f25fee15c63e8abeae12c10eafedca1b47adc26a"}, "originalPosition": 469}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5NzM4Nw==", "bodyText": "Suggested rewording:\nA union type may be defined with any number of member types. Member type can be primitive, record, enum, map or array. Unions are not allowed as members inside an union.", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r364897387", "createdAt": "2020-01-09T18:36:46Z", "author": {"login": "karthikbalasub"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,819 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Map Type](#map_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Fixed Type](#fixed_type)\n+-   [Typerefs](#typerefs)\n+-   [Namespace](#namespace\\)\n+-   [Import](#import)\n+-   [Deprecation](#deprecation)\n+-   [Package](#package)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+Pegasus supports different types of schemas: [Records](#record_type), [Primitive types](#record_type), [Enums](#enum_type), [Arrays](#array_type), [Maps](#map_type), [Unions](#union_type), [Fixed](#fixed_type) and [Typerefs](#typerefs). \n+Please check the following documentations for details.\n+\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive types, enums, unions, maps arrays or other records.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   /**\n+    * field2 is an optional field.\n+    */\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+An optional field may have default value.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Inline Record\n+\n+A record can contain inline records.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithInlineRecord {\n+  inline: record InlineRecord {\n+    value: int\n+  }\n+  inlineOptional: optional record InlineOptionalRecord {\n+    value: string\n+  }\n+}\n+```\n+\n+Default value can be set up for a field that defines the inline records.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record WithInlineRecord {\n+\n+    inline: record InlineRecord {\n+      value: int\n+    } = { \"value\" : 1 }\n+\n+    inlineOptional: optional record InlineOptionalRecord {\n+      value: string\n+    } = { \"value\" : \"default-value\" }\n+}\n+```\n+\n+Inline records can aslo be union members.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.unions\n+\n+record UnionWithInlineRecord {\n+  value = union[\n+\n+    record InlineRecord {\n+      value: optional int\n+    },\n+\n+    record InlineRecord2 {}\n+  ]\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example: \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+### Including fields\n+\n+Record can include fields from one or more other records..\n+\n+For example: \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields b1 from itself and f1 from Foo\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+\n+Multiple includes example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo and Simple, Bar will have fields b1 from itself, f1 from Foo and s1 from Simple\n+ */\n+record Bar includes Foo, Simple {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Simple {\n+  s1: string\n+}\n+```\n+\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Properties\n+Properties can be used to present arbitrary data and added to records, fields and enums.\n+\n+For example: \n+```\n+@prop = \"value\"\n+record Fruits {\n+  @validate.regex.regex = \"^(yes|no)$\"\n+  field: string\n+}\n+```\n+#### Property values can be any valid JSON type:\n+\n+For example: \n+```\n+@prop = 1\n+```\n+```\n+@prop = \"string\"\n+```\n+```\n+@prop = [1, 2, 3]\n+```\n+```\n+@prop = { \"a\": 1\", \"b\": { \"c\": true }}\n+\n+```\n+#### Property values can also be empty: \n+\n+If you don't indicate an explicity property value, it will resuilt in an implicity value of `true`.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+@prop\n+record Foo {\n+  f1: string\n+}\n+```\n+#### Property keys can be expressed as JSON:\n+\n+For example: \n+```\n+@a = {\n+  \"b\": {\n+    \"c\": {\n+      \"d\": {\n+        \"e\": {\n+          \"f\": false\n+        }\n+      }\n+    }\n+  }\n+}\n+```\n+\n+#### Property keys can be expressed as paths:\n+\n+The JSON style property key is complicated to write and read, so we provide a shorthand - the dot separate format to express the property keys.\n+\n+The following example is equivalent to the previous JSON example:\n+\n+```\n+@a.b.c.d.e.f = false\n+```\n+\n+### Escaping\n+There are some keywords which are reserved in Pegasus. If you have to use them to define any names, you need to put them in backticks : ` `.\n+\n+#### Keyword Escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PdlKeywordEscaping {\n+  `namespace`: string\n+  `record`: string\n+  `null`: string\n+  `enum`: string\n+  recordName: record `record` { }\n+}\n+```\n+\n+#### Namespace/Package escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping.`record`\n+package com.linkedin.pegasus.generator.test.idl.escaping.override.`typeref`\n+\n+/**\n+ * Ensures that the namespace and package are properly escaped at the root as well as in scoped named-type declarations.\n+ */\n+record NamespacePackageEscaping {\n+  x: {\n+    namespace com.x.y.z.`enum`\n+    package com.a.b.c.`fixed`\n+\n+    record Foo {}\n+  }\n+}\n+```\n+\n+#### Property key escaping \n+\n+If you want Pegasus to treat property key name with dots as one string key, please use backticks to escape such string.\n+For example: \n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PropertyKeyEscaping {\n+  @`namespace` = \"foo.bar\"\n+  @`test.path` = 1\n+  @validate.`com.linkedin.CustomValidator` = \"foo\"\n+  aField: string\n+}\n+```\n+\n+\n+## Primitive Types\n+\n+The Pegasus primitive types are : int, long, float, double, boolean, string and bytes.\n+\n+For Example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithPrimitives {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  booleanField: boolean\n+  stringField: string\n+  bytesField: bytes\n+}\n+```\n+\n+Primitive types with default values:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithPrimitiveDefaults {\n+  intWithDefault: int = 1\n+  longWithDefault: long = 3000000000\n+  floatWithDefault: float = 3.3\n+  doubleWithDefault: double = 4.4E38\n+  booleanWithDefault: boolean = true\n+  stringWithDefault: string = \"DEFAULT\"\n+  bytesWithDefault: bytes = \"\\u0007\"\n+}\n+```\n+\n+\n+## Array Type\n+\n+Pegasus Arrays are defined as a collection of a particular \"items\" type.\n+\n+For Example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+record WithPrimitivesArray {\n+  ints: array[int]\n+  longs: array[long]\n+  floats: array[float]\n+  doubles: array[double]\n+  booleans: array[boolean]\n+  strings: array[string]\n+  bytes: array[bytes]\n+}\n+```\n+\n+Primitive arrays with default values: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+record WithPrimitivesArrayDefaults {\n+  ints: array[int] = [1]\n+  longs: array[long] = [3000000000]\n+  floats: array[float] = [3.3]\n+  doubles: array[double] = [4.4E38]\n+  booleans: array[boolean] = [true]\n+  strings: array[string] = [\"hello\"]\n+  bytes: array[bytes] = [\"\\u0007\"]\n+}\n+```\n+\n+Record arrays:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+\n+record WithRecordArray {\n+  empties: array[Empty]\n+  fruits: array[Fruits]\n+}\n+```\n+\n+Record arrays with default values: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record WithRecordArrayDefaults {\n+  empties: array[Simple] = [{ \"message\": \"defaults!\" }]\n+  fruits: array[Fruits] = [\"APPLE\"]\n+}\n+```\n+\n+\n+## Map Type\n+\n+Pegasus maps are defined with a values type and an optional key type.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+record WithPrimitivesMap {\n+  ints: map[string, int]\n+  longs: map[string, long]\n+  floats: map[string, float]\n+  doubles: map[string, double]\n+  booleans: map[string, boolean]\n+  strings: map[string, string]\n+  bytes: map[string, bytes]\n+}\n+```\n+\n+Primitive maps with default values: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+record WithPrimitivesMapDefaults {\n+  ints: map[string, int] = { \"int\": 1 }\n+  longs: map[string, long] = { \"long\": 3000000000 }\n+  floats: map[string, float] = { \"float\": 3.3 }\n+  doubles: map[string, double] = { \"double\": 4.4E38 }\n+  booleans: map[string, boolean] = { \"boolean\": true }\n+  strings: map[string, string] = { \"string\": \"hello\" }\n+  bytes: map[string, bytes] = { \"bytes\": \"\\u0007\" }\n+}\n+```\n+\n+Complex Types Map:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+import com.linkedin.pegasus.generator.test.idl.`fixed`.Fixed8\n+\n+record WithComplexTypesMap {\n+  empties: map[string, Empty]\n+  fruits: map[string, Fruits]\n+  arrays: map[string, array[Simple]]\n+  maps: map[string, map[string, Simple]]\n+  unions: map[\n+    string,\n+    typeref WithComplexTypesMapUnion = union[int, string, Simple]\n+  ]\n+  `fixed`: map[string, Fixed8]\n+}\n+```\n+\n+**Note**: \n+The key must always be \"string\".\n+\n+\n+## Union Type\n+\n+A union type may be defined with any number of member types. Each member may be any pegasus type except union type. \n+Each member can be primitive, record, enum, map or array type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f25fee15c63e8abeae12c10eafedca1b47adc26a"}, "originalPosition": 509}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5Nzc3MA==", "bodyText": "Include a default value in the example", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r364897770", "createdAt": "2020-01-09T18:37:46Z", "author": {"login": "karthikbalasub"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,819 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Map Type](#map_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Fixed Type](#fixed_type)\n+-   [Typerefs](#typerefs)\n+-   [Namespace](#namespace\\)\n+-   [Import](#import)\n+-   [Deprecation](#deprecation)\n+-   [Package](#package)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+Pegasus supports different types of schemas: [Records](#record_type), [Primitive types](#record_type), [Enums](#enum_type), [Arrays](#array_type), [Maps](#map_type), [Unions](#union_type), [Fixed](#fixed_type) and [Typerefs](#typerefs). \n+Please check the following documentations for details.\n+\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive types, enums, unions, maps arrays or other records.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   /**\n+    * field2 is an optional field.\n+    */\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+An optional field may have default value.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Inline Record\n+\n+A record can contain inline records.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithInlineRecord {\n+  inline: record InlineRecord {\n+    value: int\n+  }\n+  inlineOptional: optional record InlineOptionalRecord {\n+    value: string\n+  }\n+}\n+```\n+\n+Default value can be set up for a field that defines the inline records.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record WithInlineRecord {\n+\n+    inline: record InlineRecord {\n+      value: int\n+    } = { \"value\" : 1 }\n+\n+    inlineOptional: optional record InlineOptionalRecord {\n+      value: string\n+    } = { \"value\" : \"default-value\" }\n+}\n+```\n+\n+Inline records can aslo be union members.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.unions\n+\n+record UnionWithInlineRecord {\n+  value = union[\n+\n+    record InlineRecord {\n+      value: optional int\n+    },\n+\n+    record InlineRecord2 {}\n+  ]\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example: \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+### Including fields\n+\n+Record can include fields from one or more other records..\n+\n+For example: \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields b1 from itself and f1 from Foo\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+\n+Multiple includes example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo and Simple, Bar will have fields b1 from itself, f1 from Foo and s1 from Simple\n+ */\n+record Bar includes Foo, Simple {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Simple {\n+  s1: string\n+}\n+```\n+\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Properties\n+Properties can be used to present arbitrary data and added to records, fields and enums.\n+\n+For example: \n+```\n+@prop = \"value\"\n+record Fruits {\n+  @validate.regex.regex = \"^(yes|no)$\"\n+  field: string\n+}\n+```\n+#### Property values can be any valid JSON type:\n+\n+For example: \n+```\n+@prop = 1\n+```\n+```\n+@prop = \"string\"\n+```\n+```\n+@prop = [1, 2, 3]\n+```\n+```\n+@prop = { \"a\": 1\", \"b\": { \"c\": true }}\n+\n+```\n+#### Property values can also be empty: \n+\n+If you don't indicate an explicity property value, it will resuilt in an implicity value of `true`.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+@prop\n+record Foo {\n+  f1: string\n+}\n+```\n+#### Property keys can be expressed as JSON:\n+\n+For example: \n+```\n+@a = {\n+  \"b\": {\n+    \"c\": {\n+      \"d\": {\n+        \"e\": {\n+          \"f\": false\n+        }\n+      }\n+    }\n+  }\n+}\n+```\n+\n+#### Property keys can be expressed as paths:\n+\n+The JSON style property key is complicated to write and read, so we provide a shorthand - the dot separate format to express the property keys.\n+\n+The following example is equivalent to the previous JSON example:\n+\n+```\n+@a.b.c.d.e.f = false\n+```\n+\n+### Escaping\n+There are some keywords which are reserved in Pegasus. If you have to use them to define any names, you need to put them in backticks : ` `.\n+\n+#### Keyword Escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PdlKeywordEscaping {\n+  `namespace`: string\n+  `record`: string\n+  `null`: string\n+  `enum`: string\n+  recordName: record `record` { }\n+}\n+```\n+\n+#### Namespace/Package escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping.`record`\n+package com.linkedin.pegasus.generator.test.idl.escaping.override.`typeref`\n+\n+/**\n+ * Ensures that the namespace and package are properly escaped at the root as well as in scoped named-type declarations.\n+ */\n+record NamespacePackageEscaping {\n+  x: {\n+    namespace com.x.y.z.`enum`\n+    package com.a.b.c.`fixed`\n+\n+    record Foo {}\n+  }\n+}\n+```\n+\n+#### Property key escaping \n+\n+If you want Pegasus to treat property key name with dots as one string key, please use backticks to escape such string.\n+For example: \n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PropertyKeyEscaping {\n+  @`namespace` = \"foo.bar\"\n+  @`test.path` = 1\n+  @validate.`com.linkedin.CustomValidator` = \"foo\"\n+  aField: string\n+}\n+```\n+\n+\n+## Primitive Types\n+\n+The Pegasus primitive types are : int, long, float, double, boolean, string and bytes.\n+\n+For Example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithPrimitives {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  booleanField: boolean\n+  stringField: string\n+  bytesField: bytes\n+}\n+```\n+\n+Primitive types with default values:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithPrimitiveDefaults {\n+  intWithDefault: int = 1\n+  longWithDefault: long = 3000000000\n+  floatWithDefault: float = 3.3\n+  doubleWithDefault: double = 4.4E38\n+  booleanWithDefault: boolean = true\n+  stringWithDefault: string = \"DEFAULT\"\n+  bytesWithDefault: bytes = \"\\u0007\"\n+}\n+```\n+\n+\n+## Array Type\n+\n+Pegasus Arrays are defined as a collection of a particular \"items\" type.\n+\n+For Example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+record WithPrimitivesArray {\n+  ints: array[int]\n+  longs: array[long]\n+  floats: array[float]\n+  doubles: array[double]\n+  booleans: array[boolean]\n+  strings: array[string]\n+  bytes: array[bytes]\n+}\n+```\n+\n+Primitive arrays with default values: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+record WithPrimitivesArrayDefaults {\n+  ints: array[int] = [1]\n+  longs: array[long] = [3000000000]\n+  floats: array[float] = [3.3]\n+  doubles: array[double] = [4.4E38]\n+  booleans: array[boolean] = [true]\n+  strings: array[string] = [\"hello\"]\n+  bytes: array[bytes] = [\"\\u0007\"]\n+}\n+```\n+\n+Record arrays:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+\n+record WithRecordArray {\n+  empties: array[Empty]\n+  fruits: array[Fruits]\n+}\n+```\n+\n+Record arrays with default values: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record WithRecordArrayDefaults {\n+  empties: array[Simple] = [{ \"message\": \"defaults!\" }]\n+  fruits: array[Fruits] = [\"APPLE\"]\n+}\n+```\n+\n+\n+## Map Type\n+\n+Pegasus maps are defined with a values type and an optional key type.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+record WithPrimitivesMap {\n+  ints: map[string, int]\n+  longs: map[string, long]\n+  floats: map[string, float]\n+  doubles: map[string, double]\n+  booleans: map[string, boolean]\n+  strings: map[string, string]\n+  bytes: map[string, bytes]\n+}\n+```\n+\n+Primitive maps with default values: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+record WithPrimitivesMapDefaults {\n+  ints: map[string, int] = { \"int\": 1 }\n+  longs: map[string, long] = { \"long\": 3000000000 }\n+  floats: map[string, float] = { \"float\": 3.3 }\n+  doubles: map[string, double] = { \"double\": 4.4E38 }\n+  booleans: map[string, boolean] = { \"boolean\": true }\n+  strings: map[string, string] = { \"string\": \"hello\" }\n+  bytes: map[string, bytes] = { \"bytes\": \"\\u0007\" }\n+}\n+```\n+\n+Complex Types Map:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+import com.linkedin.pegasus.generator.test.idl.`fixed`.Fixed8\n+\n+record WithComplexTypesMap {\n+  empties: map[string, Empty]\n+  fruits: map[string, Fruits]\n+  arrays: map[string, array[Simple]]\n+  maps: map[string, map[string, Simple]]\n+  unions: map[\n+    string,\n+    typeref WithComplexTypesMapUnion = union[int, string, Simple]\n+  ]\n+  `fixed`: map[string, Fixed8]\n+}\n+```\n+\n+**Note**: \n+The key must always be \"string\".\n+\n+\n+## Union Type\n+\n+A union type may be defined with any number of member types. Each member may be any pegasus type except union type. \n+Each member can be primitive, record, enum, map or array type.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.unions\n+\n+record WithPrimitivesUnion {\n+  value: union[int, long, float, double, boolean, string, bytes]\n+}\n+```\n+\n+The member type names also serve as the \u201cmember keys\u201d (also called as \u201cunion tags\u201d), and identify which union member type data holds.\n+To define a field of a record containing a union of two other records, we would define:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Question {\n+  answerFormat: union[MultipleChoice, TextEntry]\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f25fee15c63e8abeae12c10eafedca1b47adc26a"}, "originalPosition": 527}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85af80bc1fe0c3a6ff5ec07e42aaf84e39017817", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/85af80bc1fe0c3a6ff5ec07e42aaf84e39017817", "committedDate": "2020-01-09T21:40:56Z", "message": "Update Data Schema doc to add PDL content"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4241a14b75fb8f1c9d76054c6358b67c9c15f80a", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/4241a14b75fb8f1c9d76054c6358b67c9c15f80a", "committedDate": "2020-01-09T22:04:05Z", "message": "Update Data Schema doc to add PDL content"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b296b37030d1444ab9afd5686a84f78a2fb5b01c", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/b296b37030d1444ab9afd5686a84f78a2fb5b01c", "committedDate": "2020-01-09T22:29:29Z", "message": "Update the union with default value example"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwODgxODEx", "url": "https://github.com/linkedin/rest.li/pull/157#pullrequestreview-340881811", "createdAt": "2020-01-09T23:37:26Z", "commit": {"oid": "b296b37030d1444ab9afd5686a84f78a2fb5b01c"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMzozNzoyNlrOFcGlQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwMToxMjoxNFrOFcH7oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAxMjI5MQ==", "bodyText": "I wouldn't necessarily say PDL is less verbose. I would say it's more concise.", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r365012291", "createdAt": "2020-01-09T23:37:26Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,843 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Map Type](#map_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Fixed Type](#fixed_type)\n+-   [Typerefs](#typerefs)\n+-   [Namespace](#namespace\\)\n+-   [Import](#import)\n+-   [Deprecation](#deprecation)\n+-   [Package](#package)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b296b37030d1444ab9afd5686a84f78a2fb5b01c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAxMzIxMg==", "bodyText": "nit: \"Inline Records\"", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r365013212", "createdAt": "2020-01-09T23:40:54Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,843 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Map Type](#map_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Fixed Type](#fixed_type)\n+-   [Typerefs](#typerefs)\n+-   [Namespace](#namespace\\)\n+-   [Import](#import)\n+-   [Deprecation](#deprecation)\n+-   [Package](#package)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+Pegasus supports different types of schemas: [Records](#record_type), [Primitive types](#record_type), [Enums](#enum_type), [Arrays](#array_type), [Maps](#map_type), [Unions](#union_type), [Fixed](#fixed_type) and [Typerefs](#typerefs). \n+Please check the following documentations for details.\n+\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive types, enums, unions, maps arrays or other records.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   /**\n+    * field2 is an optional field.\n+    */\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+An optional field may have default value.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Inline Record", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b296b37030d1444ab9afd5686a84f78a2fb5b01c"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAxNDUzOQ==", "bodyText": "Explain that the default value for a field is represented as the JSON value for the field's type. This relates to the inlined record default section below.", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r365014539", "createdAt": "2020-01-09T23:46:34Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,843 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Map Type](#map_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Fixed Type](#fixed_type)\n+-   [Typerefs](#typerefs)\n+-   [Namespace](#namespace\\)\n+-   [Import](#import)\n+-   [Deprecation](#deprecation)\n+-   [Package](#package)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+Pegasus supports different types of schemas: [Records](#record_type), [Primitive types](#record_type), [Enums](#enum_type), [Arrays](#array_type), [Maps](#map_type), [Unions](#union_type), [Fixed](#fixed_type) and [Typerefs](#typerefs). \n+Please check the following documentations for details.\n+\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive types, enums, unions, maps arrays or other records.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   /**\n+    * field2 is an optional field.\n+    */\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b296b37030d1444ab9afd5686a84f78a2fb5b01c"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAzMDQwMg==", "bodyText": "Reword: The default value of inlined records can be expressed using its serialized JSON representation.", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r365030402", "createdAt": "2020-01-10T00:53:55Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,843 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Map Type](#map_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Fixed Type](#fixed_type)\n+-   [Typerefs](#typerefs)\n+-   [Namespace](#namespace\\)\n+-   [Import](#import)\n+-   [Deprecation](#deprecation)\n+-   [Package](#package)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+Pegasus supports different types of schemas: [Records](#record_type), [Primitive types](#record_type), [Enums](#enum_type), [Arrays](#array_type), [Maps](#map_type), [Unions](#union_type), [Fixed](#fixed_type) and [Typerefs](#typerefs). \n+Please check the following documentations for details.\n+\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive types, enums, unions, maps arrays or other records.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   /**\n+    * field2 is an optional field.\n+    */\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+An optional field may have default value.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Inline Record\n+\n+A record can contain inline records.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithInlineRecord {\n+  inline: record InlineRecord {\n+    value: int\n+  }\n+  inlineOptional: optional record InlineOptionalRecord {\n+    value: string\n+  }\n+}\n+```\n+\n+Default value can be set up for a field that defines the inline records.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b296b37030d1444ab9afd5686a84f78a2fb5b01c"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAzMDY3OQ==", "bodyText": "I'd suggest renaming the field to something other than value, the reason being that someone who sees this may think that \"value\" is a special keyword. Maybe just make it someField or something.", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r365030679", "createdAt": "2020-01-10T00:55:05Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,843 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Map Type](#map_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Fixed Type](#fixed_type)\n+-   [Typerefs](#typerefs)\n+-   [Namespace](#namespace\\)\n+-   [Import](#import)\n+-   [Deprecation](#deprecation)\n+-   [Package](#package)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+Pegasus supports different types of schemas: [Records](#record_type), [Primitive types](#record_type), [Enums](#enum_type), [Arrays](#array_type), [Maps](#map_type), [Unions](#union_type), [Fixed](#fixed_type) and [Typerefs](#typerefs). \n+Please check the following documentations for details.\n+\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive types, enums, unions, maps arrays or other records.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   /**\n+    * field2 is an optional field.\n+    */\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+An optional field may have default value.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Inline Record\n+\n+A record can contain inline records.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithInlineRecord {\n+  inline: record InlineRecord {\n+    value: int\n+  }\n+  inlineOptional: optional record InlineOptionalRecord {\n+    value: string\n+  }\n+}\n+```\n+\n+Default value can be set up for a field that defines the inline records.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record WithInlineRecord {\n+\n+    inline: record InlineRecord {\n+      value: int\n+    } = { \"value\" : 1 }\n+\n+    inlineOptional: optional record InlineOptionalRecord {\n+      value: string\n+    } = { \"value\" : \"default-value\" }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b296b37030d1444ab9afd5686a84f78a2fb5b01c"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAzMDcxMw==", "bodyText": "typo: also", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r365030713", "createdAt": "2020-01-10T00:55:13Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,843 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Map Type](#map_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Fixed Type](#fixed_type)\n+-   [Typerefs](#typerefs)\n+-   [Namespace](#namespace\\)\n+-   [Import](#import)\n+-   [Deprecation](#deprecation)\n+-   [Package](#package)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+Pegasus supports different types of schemas: [Records](#record_type), [Primitive types](#record_type), [Enums](#enum_type), [Arrays](#array_type), [Maps](#map_type), [Unions](#union_type), [Fixed](#fixed_type) and [Typerefs](#typerefs). \n+Please check the following documentations for details.\n+\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive types, enums, unions, maps arrays or other records.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   /**\n+    * field2 is an optional field.\n+    */\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+An optional field may have default value.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Inline Record\n+\n+A record can contain inline records.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithInlineRecord {\n+  inline: record InlineRecord {\n+    value: int\n+  }\n+  inlineOptional: optional record InlineOptionalRecord {\n+    value: string\n+  }\n+}\n+```\n+\n+Default value can be set up for a field that defines the inline records.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record WithInlineRecord {\n+\n+    inline: record InlineRecord {\n+      value: int\n+    } = { \"value\" : 1 }\n+\n+    inlineOptional: optional record InlineOptionalRecord {\n+      value: string\n+    } = { \"value\" : \"default-value\" }\n+}\n+```\n+\n+Inline records can aslo be union members.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b296b37030d1444ab9afd5686a84f78a2fb5b01c"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAzMTg2MA==", "bodyText": "As I mentioned offline, make this its own top-level section to describe the mechanics of properties. Then also add blurbs about adding properties to individual sections (e.g. enum symbols, record fields, aliased union members, etc.)", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r365031860", "createdAt": "2020-01-10T01:00:21Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,843 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Map Type](#map_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Fixed Type](#fixed_type)\n+-   [Typerefs](#typerefs)\n+-   [Namespace](#namespace\\)\n+-   [Import](#import)\n+-   [Deprecation](#deprecation)\n+-   [Package](#package)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+Pegasus supports different types of schemas: [Records](#record_type), [Primitive types](#record_type), [Enums](#enum_type), [Arrays](#array_type), [Maps](#map_type), [Unions](#union_type), [Fixed](#fixed_type) and [Typerefs](#typerefs). \n+Please check the following documentations for details.\n+\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive types, enums, unions, maps arrays or other records.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   /**\n+    * field2 is an optional field.\n+    */\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+An optional field may have default value.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Inline Record\n+\n+A record can contain inline records.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithInlineRecord {\n+  inline: record InlineRecord {\n+    value: int\n+  }\n+  inlineOptional: optional record InlineOptionalRecord {\n+    value: string\n+  }\n+}\n+```\n+\n+Default value can be set up for a field that defines the inline records.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record WithInlineRecord {\n+\n+    inline: record InlineRecord {\n+      value: int\n+    } = { \"value\" : 1 }\n+\n+    inlineOptional: optional record InlineOptionalRecord {\n+      value: string\n+    } = { \"value\" : \"default-value\" }\n+}\n+```\n+\n+Inline records can aslo be union members.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.unions\n+\n+record UnionWithInlineRecord {\n+  value = union[\n+\n+    record InlineRecord {\n+      value: optional int\n+    },\n+\n+    record InlineRecord2 {}\n+  ]\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example: \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+### Including fields\n+\n+Record can include fields from one or more other records..\n+\n+For example: \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields b1 from itself and f1 from Foo\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+\n+Multiple includes example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo and Simple, Bar will have fields b1 from itself, f1 from Foo and s1 from Simple\n+ */\n+record Bar includes Foo, Simple {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Simple {\n+  s1: string\n+}\n+```\n+\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Properties", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b296b37030d1444ab9afd5686a84f78a2fb5b01c"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAzMjA4Mw==", "bodyText": "Remove y on \"implicity\" and \"explicity\"", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r365032083", "createdAt": "2020-01-10T01:01:03Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,843 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Map Type](#map_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Fixed Type](#fixed_type)\n+-   [Typerefs](#typerefs)\n+-   [Namespace](#namespace\\)\n+-   [Import](#import)\n+-   [Deprecation](#deprecation)\n+-   [Package](#package)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+Pegasus supports different types of schemas: [Records](#record_type), [Primitive types](#record_type), [Enums](#enum_type), [Arrays](#array_type), [Maps](#map_type), [Unions](#union_type), [Fixed](#fixed_type) and [Typerefs](#typerefs). \n+Please check the following documentations for details.\n+\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive types, enums, unions, maps arrays or other records.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   /**\n+    * field2 is an optional field.\n+    */\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+An optional field may have default value.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Inline Record\n+\n+A record can contain inline records.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithInlineRecord {\n+  inline: record InlineRecord {\n+    value: int\n+  }\n+  inlineOptional: optional record InlineOptionalRecord {\n+    value: string\n+  }\n+}\n+```\n+\n+Default value can be set up for a field that defines the inline records.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record WithInlineRecord {\n+\n+    inline: record InlineRecord {\n+      value: int\n+    } = { \"value\" : 1 }\n+\n+    inlineOptional: optional record InlineOptionalRecord {\n+      value: string\n+    } = { \"value\" : \"default-value\" }\n+}\n+```\n+\n+Inline records can aslo be union members.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.unions\n+\n+record UnionWithInlineRecord {\n+  value = union[\n+\n+    record InlineRecord {\n+      value: optional int\n+    },\n+\n+    record InlineRecord2 {}\n+  ]\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example: \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+### Including fields\n+\n+Record can include fields from one or more other records..\n+\n+For example: \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields b1 from itself and f1 from Foo\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+\n+Multiple includes example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo and Simple, Bar will have fields b1 from itself, f1 from Foo and s1 from Simple\n+ */\n+record Bar includes Foo, Simple {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Simple {\n+  s1: string\n+}\n+```\n+\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Properties\n+Properties can be used to present arbitrary data and added to records, fields and enums.\n+\n+For example: \n+```\n+@prop = \"value\"\n+record Fruits {\n+  @validate.regex.regex = \"^(yes|no)$\"\n+  field: string\n+}\n+```\n+#### Property values can be any valid JSON type:\n+\n+For example: \n+```\n+@prop = 1\n+```\n+```\n+@prop = \"string\"\n+```\n+```\n+@prop = [1, 2, 3]\n+```\n+```\n+@prop = { \"a\": 1\", \"b\": { \"c\": true }}\n+\n+```\n+#### Property values can also be empty: \n+\n+If you don't indicate an explicity property value, it will resuilt in an implicity value of `true`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b296b37030d1444ab9afd5686a84f78a2fb5b01c"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAzMjUxOQ==", "bodyText": "I can see that you copied many of these examples from the unit tests. The namespaces are a little lengthy. Wherever the namespace doesn't matter, make it something simple like com.example.models", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r365032519", "createdAt": "2020-01-10T01:02:59Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,843 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Map Type](#map_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Fixed Type](#fixed_type)\n+-   [Typerefs](#typerefs)\n+-   [Namespace](#namespace\\)\n+-   [Import](#import)\n+-   [Deprecation](#deprecation)\n+-   [Package](#package)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+Pegasus supports different types of schemas: [Records](#record_type), [Primitive types](#record_type), [Enums](#enum_type), [Arrays](#array_type), [Maps](#map_type), [Unions](#union_type), [Fixed](#fixed_type) and [Typerefs](#typerefs). \n+Please check the following documentations for details.\n+\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive types, enums, unions, maps arrays or other records.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   /**\n+    * field2 is an optional field.\n+    */\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+An optional field may have default value.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Inline Record\n+\n+A record can contain inline records.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithInlineRecord {\n+  inline: record InlineRecord {\n+    value: int\n+  }\n+  inlineOptional: optional record InlineOptionalRecord {\n+    value: string\n+  }\n+}\n+```\n+\n+Default value can be set up for a field that defines the inline records.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record WithInlineRecord {\n+\n+    inline: record InlineRecord {\n+      value: int\n+    } = { \"value\" : 1 }\n+\n+    inlineOptional: optional record InlineOptionalRecord {\n+      value: string\n+    } = { \"value\" : \"default-value\" }\n+}\n+```\n+\n+Inline records can aslo be union members.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.unions\n+\n+record UnionWithInlineRecord {\n+  value = union[\n+\n+    record InlineRecord {\n+      value: optional int\n+    },\n+\n+    record InlineRecord2 {}\n+  ]\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example: \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+### Including fields\n+\n+Record can include fields from one or more other records..\n+\n+For example: \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields b1 from itself and f1 from Foo\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+\n+Multiple includes example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo and Simple, Bar will have fields b1 from itself, f1 from Foo and s1 from Simple\n+ */\n+record Bar includes Foo, Simple {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Simple {\n+  s1: string\n+}\n+```\n+\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Properties\n+Properties can be used to present arbitrary data and added to records, fields and enums.\n+\n+For example: \n+```\n+@prop = \"value\"\n+record Fruits {\n+  @validate.regex.regex = \"^(yes|no)$\"\n+  field: string\n+}\n+```\n+#### Property values can be any valid JSON type:\n+\n+For example: \n+```\n+@prop = 1\n+```\n+```\n+@prop = \"string\"\n+```\n+```\n+@prop = [1, 2, 3]\n+```\n+```\n+@prop = { \"a\": 1\", \"b\": { \"c\": true }}\n+\n+```\n+#### Property values can also be empty: \n+\n+If you don't indicate an explicity property value, it will resuilt in an implicity value of `true`.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+@prop\n+record Foo {\n+  f1: string\n+}\n+```\n+#### Property keys can be expressed as JSON:\n+\n+For example: \n+```\n+@a = {\n+  \"b\": {\n+    \"c\": {\n+      \"d\": {\n+        \"e\": {\n+          \"f\": false\n+        }\n+      }\n+    }\n+  }\n+}\n+```\n+\n+#### Property keys can be expressed as paths:\n+\n+The JSON style property key is complicated to write and read, so we provide a shorthand - the dot separate format to express the property keys.\n+\n+The following example is equivalent to the previous JSON example:\n+\n+```\n+@a.b.c.d.e.f = false\n+```\n+\n+### Escaping\n+There are some keywords which are reserved in Pegasus. If you have to use them to define any names, you need to put them in backticks : ` `.\n+\n+#### Keyword Escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b296b37030d1444ab9afd5686a84f78a2fb5b01c"}, "originalPosition": 303}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAzMjY1MQ==", "bodyText": "Also explain that escaping property keys can be used to escape reserved keywords such as \"namespace\" or \"record\"", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r365032651", "createdAt": "2020-01-10T01:03:37Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,843 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Map Type](#map_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Fixed Type](#fixed_type)\n+-   [Typerefs](#typerefs)\n+-   [Namespace](#namespace\\)\n+-   [Import](#import)\n+-   [Deprecation](#deprecation)\n+-   [Package](#package)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+Pegasus supports different types of schemas: [Records](#record_type), [Primitive types](#record_type), [Enums](#enum_type), [Arrays](#array_type), [Maps](#map_type), [Unions](#union_type), [Fixed](#fixed_type) and [Typerefs](#typerefs). \n+Please check the following documentations for details.\n+\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive types, enums, unions, maps arrays or other records.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   /**\n+    * field2 is an optional field.\n+    */\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+An optional field may have default value.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Inline Record\n+\n+A record can contain inline records.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithInlineRecord {\n+  inline: record InlineRecord {\n+    value: int\n+  }\n+  inlineOptional: optional record InlineOptionalRecord {\n+    value: string\n+  }\n+}\n+```\n+\n+Default value can be set up for a field that defines the inline records.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record WithInlineRecord {\n+\n+    inline: record InlineRecord {\n+      value: int\n+    } = { \"value\" : 1 }\n+\n+    inlineOptional: optional record InlineOptionalRecord {\n+      value: string\n+    } = { \"value\" : \"default-value\" }\n+}\n+```\n+\n+Inline records can aslo be union members.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.unions\n+\n+record UnionWithInlineRecord {\n+  value = union[\n+\n+    record InlineRecord {\n+      value: optional int\n+    },\n+\n+    record InlineRecord2 {}\n+  ]\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example: \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+### Including fields\n+\n+Record can include fields from one or more other records..\n+\n+For example: \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields b1 from itself and f1 from Foo\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+\n+Multiple includes example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo and Simple, Bar will have fields b1 from itself, f1 from Foo and s1 from Simple\n+ */\n+record Bar includes Foo, Simple {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Simple {\n+  s1: string\n+}\n+```\n+\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Properties\n+Properties can be used to present arbitrary data and added to records, fields and enums.\n+\n+For example: \n+```\n+@prop = \"value\"\n+record Fruits {\n+  @validate.regex.regex = \"^(yes|no)$\"\n+  field: string\n+}\n+```\n+#### Property values can be any valid JSON type:\n+\n+For example: \n+```\n+@prop = 1\n+```\n+```\n+@prop = \"string\"\n+```\n+```\n+@prop = [1, 2, 3]\n+```\n+```\n+@prop = { \"a\": 1\", \"b\": { \"c\": true }}\n+\n+```\n+#### Property values can also be empty: \n+\n+If you don't indicate an explicity property value, it will resuilt in an implicity value of `true`.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+@prop\n+record Foo {\n+  f1: string\n+}\n+```\n+#### Property keys can be expressed as JSON:\n+\n+For example: \n+```\n+@a = {\n+  \"b\": {\n+    \"c\": {\n+      \"d\": {\n+        \"e\": {\n+          \"f\": false\n+        }\n+      }\n+    }\n+  }\n+}\n+```\n+\n+#### Property keys can be expressed as paths:\n+\n+The JSON style property key is complicated to write and read, so we provide a shorthand - the dot separate format to express the property keys.\n+\n+The following example is equivalent to the previous JSON example:\n+\n+```\n+@a.b.c.d.e.f = false\n+```\n+\n+### Escaping\n+There are some keywords which are reserved in Pegasus. If you have to use them to define any names, you need to put them in backticks : ` `.\n+\n+#### Keyword Escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PdlKeywordEscaping {\n+  `namespace`: string\n+  `record`: string\n+  `null`: string\n+  `enum`: string\n+  recordName: record `record` { }\n+}\n+```\n+\n+#### Namespace/Package escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping.`record`\n+package com.linkedin.pegasus.generator.test.idl.escaping.override.`typeref`\n+\n+/**\n+ * Ensures that the namespace and package are properly escaped at the root as well as in scoped named-type declarations.\n+ */\n+record NamespacePackageEscaping {\n+  x: {\n+    namespace com.x.y.z.`enum`\n+    package com.a.b.c.`fixed`\n+\n+    record Foo {}\n+  }\n+}\n+```\n+\n+#### Property key escaping \n+\n+If you want Pegasus to treat property key name with dots as one string key, please use backticks to escape such string.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b296b37030d1444ab9afd5686a84f78a2fb5b01c"}, "originalPosition": 335}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAzMzEyMw==", "bodyText": "Reword: Maps are defined with a key type and a value type. The value type can be any valid PDL type, but currently only string is supported for the key type.", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r365033123", "createdAt": "2020-01-10T01:05:49Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,843 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Map Type](#map_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Fixed Type](#fixed_type)\n+-   [Typerefs](#typerefs)\n+-   [Namespace](#namespace\\)\n+-   [Import](#import)\n+-   [Deprecation](#deprecation)\n+-   [Package](#package)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+Pegasus supports different types of schemas: [Records](#record_type), [Primitive types](#record_type), [Enums](#enum_type), [Arrays](#array_type), [Maps](#map_type), [Unions](#union_type), [Fixed](#fixed_type) and [Typerefs](#typerefs). \n+Please check the following documentations for details.\n+\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive types, enums, unions, maps arrays or other records.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   /**\n+    * field2 is an optional field.\n+    */\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+An optional field may have default value.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Inline Record\n+\n+A record can contain inline records.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithInlineRecord {\n+  inline: record InlineRecord {\n+    value: int\n+  }\n+  inlineOptional: optional record InlineOptionalRecord {\n+    value: string\n+  }\n+}\n+```\n+\n+Default value can be set up for a field that defines the inline records.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record WithInlineRecord {\n+\n+    inline: record InlineRecord {\n+      value: int\n+    } = { \"value\" : 1 }\n+\n+    inlineOptional: optional record InlineOptionalRecord {\n+      value: string\n+    } = { \"value\" : \"default-value\" }\n+}\n+```\n+\n+Inline records can aslo be union members.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.unions\n+\n+record UnionWithInlineRecord {\n+  value = union[\n+\n+    record InlineRecord {\n+      value: optional int\n+    },\n+\n+    record InlineRecord2 {}\n+  ]\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example: \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+### Including fields\n+\n+Record can include fields from one or more other records..\n+\n+For example: \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields b1 from itself and f1 from Foo\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+\n+Multiple includes example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo and Simple, Bar will have fields b1 from itself, f1 from Foo and s1 from Simple\n+ */\n+record Bar includes Foo, Simple {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Simple {\n+  s1: string\n+}\n+```\n+\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Properties\n+Properties can be used to present arbitrary data and added to records, fields and enums.\n+\n+For example: \n+```\n+@prop = \"value\"\n+record Fruits {\n+  @validate.regex.regex = \"^(yes|no)$\"\n+  field: string\n+}\n+```\n+#### Property values can be any valid JSON type:\n+\n+For example: \n+```\n+@prop = 1\n+```\n+```\n+@prop = \"string\"\n+```\n+```\n+@prop = [1, 2, 3]\n+```\n+```\n+@prop = { \"a\": 1\", \"b\": { \"c\": true }}\n+\n+```\n+#### Property values can also be empty: \n+\n+If you don't indicate an explicity property value, it will resuilt in an implicity value of `true`.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+@prop\n+record Foo {\n+  f1: string\n+}\n+```\n+#### Property keys can be expressed as JSON:\n+\n+For example: \n+```\n+@a = {\n+  \"b\": {\n+    \"c\": {\n+      \"d\": {\n+        \"e\": {\n+          \"f\": false\n+        }\n+      }\n+    }\n+  }\n+}\n+```\n+\n+#### Property keys can be expressed as paths:\n+\n+The JSON style property key is complicated to write and read, so we provide a shorthand - the dot separate format to express the property keys.\n+\n+The following example is equivalent to the previous JSON example:\n+\n+```\n+@a.b.c.d.e.f = false\n+```\n+\n+### Escaping\n+There are some keywords which are reserved in Pegasus. If you have to use them to define any names, you need to put them in backticks : ` `.\n+\n+#### Keyword Escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PdlKeywordEscaping {\n+  `namespace`: string\n+  `record`: string\n+  `null`: string\n+  `enum`: string\n+  recordName: record `record` { }\n+}\n+```\n+\n+#### Namespace/Package escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping.`record`\n+package com.linkedin.pegasus.generator.test.idl.escaping.override.`typeref`\n+\n+/**\n+ * Ensures that the namespace and package are properly escaped at the root as well as in scoped named-type declarations.\n+ */\n+record NamespacePackageEscaping {\n+  x: {\n+    namespace com.x.y.z.`enum`\n+    package com.a.b.c.`fixed`\n+\n+    record Foo {}\n+  }\n+}\n+```\n+\n+#### Property key escaping \n+\n+If you want Pegasus to treat property key name with dots as one string key, please use backticks to escape such string.\n+For example: \n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PropertyKeyEscaping {\n+  @`namespace` = \"foo.bar\"\n+  @`test.path` = 1\n+  @validate.`com.linkedin.CustomValidator` = \"foo\"\n+  aField: string\n+}\n+```\n+\n+\n+## Primitive Types\n+\n+The Pegasus primitive types are : int, long, float, double, boolean, string and bytes.\n+\n+For Example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithPrimitives {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  booleanField: boolean\n+  stringField: string\n+  bytesField: bytes\n+}\n+```\n+\n+Primitive types with default values:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithPrimitiveDefaults {\n+  intWithDefault: int = 1\n+  longWithDefault: long = 3000000000\n+  floatWithDefault: float = 3.3\n+  doubleWithDefault: double = 4.4E38\n+  booleanWithDefault: boolean = true\n+  stringWithDefault: string = \"DEFAULT\"\n+  bytesWithDefault: bytes = \"\\u0007\"\n+}\n+```\n+\n+\n+## Array Type\n+\n+Pegasus Arrays are defined as a collection of a particular \"items\" type.\n+\n+For Example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+record WithPrimitivesArray {\n+  ints: array[int]\n+  longs: array[long]\n+  floats: array[float]\n+  doubles: array[double]\n+  booleans: array[boolean]\n+  strings: array[string]\n+  bytes: array[bytes]\n+}\n+```\n+\n+Primitive arrays with default values: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+record WithPrimitivesArrayDefaults {\n+  ints: array[int] = [1, 2, 3]\n+  longs: array[long] = [3000000000, 4000000000]\n+  floats: array[float] = [3.3, 2.5]\n+  doubles: array[double] = [4.4E38, 3.1E24]\n+  booleans: array[boolean] = [true, false]\n+  strings: array[string] = [\"hello\"]\n+  bytes: array[bytes] = [\"\\u0007\"]\n+}\n+```\n+\n+Record or Enum arrays:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+\n+record WithRecordAndEnumArrays {\n+  empties: array[Empty]\n+  fruits: array[Fruits]\n+}\n+```\n+\n+Record or Enum arrays with default values: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record WithRecordAndEnumDefaults {\n+  empties: array[Simple] = [{ \"message\": \"defaults!\" }]\n+  fruits: array[Fruits] = [\"APPLE\", \"ORANGE\"]\n+}\n+```\n+\n+\n+## Map Type\n+\n+Pegasus maps are defined with a values type and an optional key type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b296b37030d1444ab9afd5686a84f78a2fb5b01c"}, "originalPosition": 448}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAzMzc5Nw==", "bodyText": "Show that aliased union members can have doc strings and custom properties. Clarify that this is not supported for non-aliased union members.\nExplain that either ALL union members must be aliased, or NONE at all. Having a \"heterogeneously aliased union\" is not allowed (the only exception is that the \"null\" member may be non-aliased, but you can leave this out because it seems like we plan on removing support for this).", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r365033797", "createdAt": "2020-01-10T01:09:06Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,843 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Map Type](#map_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Fixed Type](#fixed_type)\n+-   [Typerefs](#typerefs)\n+-   [Namespace](#namespace\\)\n+-   [Import](#import)\n+-   [Deprecation](#deprecation)\n+-   [Package](#package)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+Pegasus supports different types of schemas: [Records](#record_type), [Primitive types](#record_type), [Enums](#enum_type), [Arrays](#array_type), [Maps](#map_type), [Unions](#union_type), [Fixed](#fixed_type) and [Typerefs](#typerefs). \n+Please check the following documentations for details.\n+\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive types, enums, unions, maps arrays or other records.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   /**\n+    * field2 is an optional field.\n+    */\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+An optional field may have default value.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Inline Record\n+\n+A record can contain inline records.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithInlineRecord {\n+  inline: record InlineRecord {\n+    value: int\n+  }\n+  inlineOptional: optional record InlineOptionalRecord {\n+    value: string\n+  }\n+}\n+```\n+\n+Default value can be set up for a field that defines the inline records.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record WithInlineRecord {\n+\n+    inline: record InlineRecord {\n+      value: int\n+    } = { \"value\" : 1 }\n+\n+    inlineOptional: optional record InlineOptionalRecord {\n+      value: string\n+    } = { \"value\" : \"default-value\" }\n+}\n+```\n+\n+Inline records can aslo be union members.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.unions\n+\n+record UnionWithInlineRecord {\n+  value = union[\n+\n+    record InlineRecord {\n+      value: optional int\n+    },\n+\n+    record InlineRecord2 {}\n+  ]\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example: \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+### Including fields\n+\n+Record can include fields from one or more other records..\n+\n+For example: \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields b1 from itself and f1 from Foo\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+\n+Multiple includes example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo and Simple, Bar will have fields b1 from itself, f1 from Foo and s1 from Simple\n+ */\n+record Bar includes Foo, Simple {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Simple {\n+  s1: string\n+}\n+```\n+\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Properties\n+Properties can be used to present arbitrary data and added to records, fields and enums.\n+\n+For example: \n+```\n+@prop = \"value\"\n+record Fruits {\n+  @validate.regex.regex = \"^(yes|no)$\"\n+  field: string\n+}\n+```\n+#### Property values can be any valid JSON type:\n+\n+For example: \n+```\n+@prop = 1\n+```\n+```\n+@prop = \"string\"\n+```\n+```\n+@prop = [1, 2, 3]\n+```\n+```\n+@prop = { \"a\": 1\", \"b\": { \"c\": true }}\n+\n+```\n+#### Property values can also be empty: \n+\n+If you don't indicate an explicity property value, it will resuilt in an implicity value of `true`.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+@prop\n+record Foo {\n+  f1: string\n+}\n+```\n+#### Property keys can be expressed as JSON:\n+\n+For example: \n+```\n+@a = {\n+  \"b\": {\n+    \"c\": {\n+      \"d\": {\n+        \"e\": {\n+          \"f\": false\n+        }\n+      }\n+    }\n+  }\n+}\n+```\n+\n+#### Property keys can be expressed as paths:\n+\n+The JSON style property key is complicated to write and read, so we provide a shorthand - the dot separate format to express the property keys.\n+\n+The following example is equivalent to the previous JSON example:\n+\n+```\n+@a.b.c.d.e.f = false\n+```\n+\n+### Escaping\n+There are some keywords which are reserved in Pegasus. If you have to use them to define any names, you need to put them in backticks : ` `.\n+\n+#### Keyword Escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PdlKeywordEscaping {\n+  `namespace`: string\n+  `record`: string\n+  `null`: string\n+  `enum`: string\n+  recordName: record `record` { }\n+}\n+```\n+\n+#### Namespace/Package escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping.`record`\n+package com.linkedin.pegasus.generator.test.idl.escaping.override.`typeref`\n+\n+/**\n+ * Ensures that the namespace and package are properly escaped at the root as well as in scoped named-type declarations.\n+ */\n+record NamespacePackageEscaping {\n+  x: {\n+    namespace com.x.y.z.`enum`\n+    package com.a.b.c.`fixed`\n+\n+    record Foo {}\n+  }\n+}\n+```\n+\n+#### Property key escaping \n+\n+If you want Pegasus to treat property key name with dots as one string key, please use backticks to escape such string.\n+For example: \n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PropertyKeyEscaping {\n+  @`namespace` = \"foo.bar\"\n+  @`test.path` = 1\n+  @validate.`com.linkedin.CustomValidator` = \"foo\"\n+  aField: string\n+}\n+```\n+\n+\n+## Primitive Types\n+\n+The Pegasus primitive types are : int, long, float, double, boolean, string and bytes.\n+\n+For Example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithPrimitives {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  booleanField: boolean\n+  stringField: string\n+  bytesField: bytes\n+}\n+```\n+\n+Primitive types with default values:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithPrimitiveDefaults {\n+  intWithDefault: int = 1\n+  longWithDefault: long = 3000000000\n+  floatWithDefault: float = 3.3\n+  doubleWithDefault: double = 4.4E38\n+  booleanWithDefault: boolean = true\n+  stringWithDefault: string = \"DEFAULT\"\n+  bytesWithDefault: bytes = \"\\u0007\"\n+}\n+```\n+\n+\n+## Array Type\n+\n+Pegasus Arrays are defined as a collection of a particular \"items\" type.\n+\n+For Example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+record WithPrimitivesArray {\n+  ints: array[int]\n+  longs: array[long]\n+  floats: array[float]\n+  doubles: array[double]\n+  booleans: array[boolean]\n+  strings: array[string]\n+  bytes: array[bytes]\n+}\n+```\n+\n+Primitive arrays with default values: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+record WithPrimitivesArrayDefaults {\n+  ints: array[int] = [1, 2, 3]\n+  longs: array[long] = [3000000000, 4000000000]\n+  floats: array[float] = [3.3, 2.5]\n+  doubles: array[double] = [4.4E38, 3.1E24]\n+  booleans: array[boolean] = [true, false]\n+  strings: array[string] = [\"hello\"]\n+  bytes: array[bytes] = [\"\\u0007\"]\n+}\n+```\n+\n+Record or Enum arrays:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+\n+record WithRecordAndEnumArrays {\n+  empties: array[Empty]\n+  fruits: array[Fruits]\n+}\n+```\n+\n+Record or Enum arrays with default values: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record WithRecordAndEnumDefaults {\n+  empties: array[Simple] = [{ \"message\": \"defaults!\" }]\n+  fruits: array[Fruits] = [\"APPLE\", \"ORANGE\"]\n+}\n+```\n+\n+\n+## Map Type\n+\n+Pegasus maps are defined with a values type and an optional key type.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+record WithPrimitivesMap {\n+  ints: map[string, int]\n+  longs: map[string, long]\n+  floats: map[string, float]\n+  doubles: map[string, double]\n+  booleans: map[string, boolean]\n+  strings: map[string, string]\n+  bytes: map[string, bytes]\n+}\n+```\n+\n+Primitive maps with default values: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+record WithPrimitivesMapDefaults {\n+  ints: map[string, int] = { \"int1\": 1, \"int2\": 2, \"int3\": 3 }\n+  longs: map[string, long] = { \"long1\": 3000000000, \"long2\": 4000000000 }\n+  floats: map[string, float] = { \"float1\": 3.3, \"float2\": 2.1 }\n+  doubles: map[string, double] = {\"double1\": 4.4E38, \"double2\": 3.1E24}\n+  booleans: map[string, boolean] = { \"boolean1\": true, \"boolean2\": true, \"boolean3\": false }\n+  strings: map[string, string] = { \"string1\": \"hello\", \"string2\": \"world\" }\n+  bytes: map[string, bytes] = { \"bytes\": \"\\u0007\" }\n+}\n+```\n+\n+Complex Types Map:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+import com.linkedin.pegasus.generator.test.idl.`fixed`.Fixed8\n+\n+record WithComplexTypesMap {\n+  empties: map[string, Empty]\n+  fruits: map[string, Fruits]\n+  arrays: map[string, array[Simple]]\n+  maps: map[string, map[string, Simple]]\n+  unions: map[\n+    string,\n+    typeref WithComplexTypesMapUnion = union[int, string, Simple]\n+  ]\n+  `fixed`: map[string, Fixed8]\n+}\n+```\n+\n+**Note**: \n+The key must always be \"string\".\n+\n+\n+## Union Type\n+\n+A union type may be defined with any number of member types. Member type can be primitive, record, enum, map or array. Unions are not allowed as members inside an union.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.unions\n+\n+record WithPrimitivesUnion {\n+  value: union[int, long, float, double, boolean, string, bytes]\n+}\n+```\n+\n+The member type names also serve as the \u201cmember keys\u201d (also called as \u201cunion tags\u201d), and identify which union member type data holds.\n+To define a field of a record containing a union of two other records, we would define:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Question {\n+  answerFormat: union[MultipleChoice, TextEntry]\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record MultipleChoice {\n+  answer: string\n+}\n+```\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record TextEntry {\n+  text: string\n+}\n+```\n+\n+Union with default value:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Question {\n+  answerFormat: union[MultipleChoice, TextEntry] = {\"com.linkedin.pegasus.generator.examples.MultipleChoice\" : {\"answer\" : \"A\"}}\n+}\n+```\n+### Union with aliases", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b296b37030d1444ab9afd5686a84f78a2fb5b01c"}, "originalPosition": 552}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAzNDAxMQ==", "bodyText": "Also explain that this feature is useful for cases where a union contains multiple different typerefs with the same underlying type. This use case is not supported with a non-aliased union.", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r365034011", "createdAt": "2020-01-10T01:10:15Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,843 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Map Type](#map_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Fixed Type](#fixed_type)\n+-   [Typerefs](#typerefs)\n+-   [Namespace](#namespace\\)\n+-   [Import](#import)\n+-   [Deprecation](#deprecation)\n+-   [Package](#package)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+Pegasus supports different types of schemas: [Records](#record_type), [Primitive types](#record_type), [Enums](#enum_type), [Arrays](#array_type), [Maps](#map_type), [Unions](#union_type), [Fixed](#fixed_type) and [Typerefs](#typerefs). \n+Please check the following documentations for details.\n+\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive types, enums, unions, maps arrays or other records.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   /**\n+    * field2 is an optional field.\n+    */\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+An optional field may have default value.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Inline Record\n+\n+A record can contain inline records.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithInlineRecord {\n+  inline: record InlineRecord {\n+    value: int\n+  }\n+  inlineOptional: optional record InlineOptionalRecord {\n+    value: string\n+  }\n+}\n+```\n+\n+Default value can be set up for a field that defines the inline records.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record WithInlineRecord {\n+\n+    inline: record InlineRecord {\n+      value: int\n+    } = { \"value\" : 1 }\n+\n+    inlineOptional: optional record InlineOptionalRecord {\n+      value: string\n+    } = { \"value\" : \"default-value\" }\n+}\n+```\n+\n+Inline records can aslo be union members.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.unions\n+\n+record UnionWithInlineRecord {\n+  value = union[\n+\n+    record InlineRecord {\n+      value: optional int\n+    },\n+\n+    record InlineRecord2 {}\n+  ]\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example: \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+### Including fields\n+\n+Record can include fields from one or more other records..\n+\n+For example: \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields b1 from itself and f1 from Foo\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+\n+Multiple includes example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo and Simple, Bar will have fields b1 from itself, f1 from Foo and s1 from Simple\n+ */\n+record Bar includes Foo, Simple {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Simple {\n+  s1: string\n+}\n+```\n+\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Properties\n+Properties can be used to present arbitrary data and added to records, fields and enums.\n+\n+For example: \n+```\n+@prop = \"value\"\n+record Fruits {\n+  @validate.regex.regex = \"^(yes|no)$\"\n+  field: string\n+}\n+```\n+#### Property values can be any valid JSON type:\n+\n+For example: \n+```\n+@prop = 1\n+```\n+```\n+@prop = \"string\"\n+```\n+```\n+@prop = [1, 2, 3]\n+```\n+```\n+@prop = { \"a\": 1\", \"b\": { \"c\": true }}\n+\n+```\n+#### Property values can also be empty: \n+\n+If you don't indicate an explicity property value, it will resuilt in an implicity value of `true`.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+@prop\n+record Foo {\n+  f1: string\n+}\n+```\n+#### Property keys can be expressed as JSON:\n+\n+For example: \n+```\n+@a = {\n+  \"b\": {\n+    \"c\": {\n+      \"d\": {\n+        \"e\": {\n+          \"f\": false\n+        }\n+      }\n+    }\n+  }\n+}\n+```\n+\n+#### Property keys can be expressed as paths:\n+\n+The JSON style property key is complicated to write and read, so we provide a shorthand - the dot separate format to express the property keys.\n+\n+The following example is equivalent to the previous JSON example:\n+\n+```\n+@a.b.c.d.e.f = false\n+```\n+\n+### Escaping\n+There are some keywords which are reserved in Pegasus. If you have to use them to define any names, you need to put them in backticks : ` `.\n+\n+#### Keyword Escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PdlKeywordEscaping {\n+  `namespace`: string\n+  `record`: string\n+  `null`: string\n+  `enum`: string\n+  recordName: record `record` { }\n+}\n+```\n+\n+#### Namespace/Package escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping.`record`\n+package com.linkedin.pegasus.generator.test.idl.escaping.override.`typeref`\n+\n+/**\n+ * Ensures that the namespace and package are properly escaped at the root as well as in scoped named-type declarations.\n+ */\n+record NamespacePackageEscaping {\n+  x: {\n+    namespace com.x.y.z.`enum`\n+    package com.a.b.c.`fixed`\n+\n+    record Foo {}\n+  }\n+}\n+```\n+\n+#### Property key escaping \n+\n+If you want Pegasus to treat property key name with dots as one string key, please use backticks to escape such string.\n+For example: \n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PropertyKeyEscaping {\n+  @`namespace` = \"foo.bar\"\n+  @`test.path` = 1\n+  @validate.`com.linkedin.CustomValidator` = \"foo\"\n+  aField: string\n+}\n+```\n+\n+\n+## Primitive Types\n+\n+The Pegasus primitive types are : int, long, float, double, boolean, string and bytes.\n+\n+For Example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithPrimitives {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  booleanField: boolean\n+  stringField: string\n+  bytesField: bytes\n+}\n+```\n+\n+Primitive types with default values:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithPrimitiveDefaults {\n+  intWithDefault: int = 1\n+  longWithDefault: long = 3000000000\n+  floatWithDefault: float = 3.3\n+  doubleWithDefault: double = 4.4E38\n+  booleanWithDefault: boolean = true\n+  stringWithDefault: string = \"DEFAULT\"\n+  bytesWithDefault: bytes = \"\\u0007\"\n+}\n+```\n+\n+\n+## Array Type\n+\n+Pegasus Arrays are defined as a collection of a particular \"items\" type.\n+\n+For Example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+record WithPrimitivesArray {\n+  ints: array[int]\n+  longs: array[long]\n+  floats: array[float]\n+  doubles: array[double]\n+  booleans: array[boolean]\n+  strings: array[string]\n+  bytes: array[bytes]\n+}\n+```\n+\n+Primitive arrays with default values: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+record WithPrimitivesArrayDefaults {\n+  ints: array[int] = [1, 2, 3]\n+  longs: array[long] = [3000000000, 4000000000]\n+  floats: array[float] = [3.3, 2.5]\n+  doubles: array[double] = [4.4E38, 3.1E24]\n+  booleans: array[boolean] = [true, false]\n+  strings: array[string] = [\"hello\"]\n+  bytes: array[bytes] = [\"\\u0007\"]\n+}\n+```\n+\n+Record or Enum arrays:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+\n+record WithRecordAndEnumArrays {\n+  empties: array[Empty]\n+  fruits: array[Fruits]\n+}\n+```\n+\n+Record or Enum arrays with default values: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record WithRecordAndEnumDefaults {\n+  empties: array[Simple] = [{ \"message\": \"defaults!\" }]\n+  fruits: array[Fruits] = [\"APPLE\", \"ORANGE\"]\n+}\n+```\n+\n+\n+## Map Type\n+\n+Pegasus maps are defined with a values type and an optional key type.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+record WithPrimitivesMap {\n+  ints: map[string, int]\n+  longs: map[string, long]\n+  floats: map[string, float]\n+  doubles: map[string, double]\n+  booleans: map[string, boolean]\n+  strings: map[string, string]\n+  bytes: map[string, bytes]\n+}\n+```\n+\n+Primitive maps with default values: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+record WithPrimitivesMapDefaults {\n+  ints: map[string, int] = { \"int1\": 1, \"int2\": 2, \"int3\": 3 }\n+  longs: map[string, long] = { \"long1\": 3000000000, \"long2\": 4000000000 }\n+  floats: map[string, float] = { \"float1\": 3.3, \"float2\": 2.1 }\n+  doubles: map[string, double] = {\"double1\": 4.4E38, \"double2\": 3.1E24}\n+  booleans: map[string, boolean] = { \"boolean1\": true, \"boolean2\": true, \"boolean3\": false }\n+  strings: map[string, string] = { \"string1\": \"hello\", \"string2\": \"world\" }\n+  bytes: map[string, bytes] = { \"bytes\": \"\\u0007\" }\n+}\n+```\n+\n+Complex Types Map:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+import com.linkedin.pegasus.generator.test.idl.`fixed`.Fixed8\n+\n+record WithComplexTypesMap {\n+  empties: map[string, Empty]\n+  fruits: map[string, Fruits]\n+  arrays: map[string, array[Simple]]\n+  maps: map[string, map[string, Simple]]\n+  unions: map[\n+    string,\n+    typeref WithComplexTypesMapUnion = union[int, string, Simple]\n+  ]\n+  `fixed`: map[string, Fixed8]\n+}\n+```\n+\n+**Note**: \n+The key must always be \"string\".\n+\n+\n+## Union Type\n+\n+A union type may be defined with any number of member types. Member type can be primitive, record, enum, map or array. Unions are not allowed as members inside an union.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.unions\n+\n+record WithPrimitivesUnion {\n+  value: union[int, long, float, double, boolean, string, bytes]\n+}\n+```\n+\n+The member type names also serve as the \u201cmember keys\u201d (also called as \u201cunion tags\u201d), and identify which union member type data holds.\n+To define a field of a record containing a union of two other records, we would define:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Question {\n+  answerFormat: union[MultipleChoice, TextEntry]\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record MultipleChoice {\n+  answer: string\n+}\n+```\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record TextEntry {\n+  text: string\n+}\n+```\n+\n+Union with default value:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Question {\n+  answerFormat: union[MultipleChoice, TextEntry] = {\"com.linkedin.pegasus.generator.examples.MultipleChoice\" : {\"answer\" : \"A\"}}\n+}\n+```\n+### Union with aliases\n+Union members can optionally be given an alias. Aliases can be used to create unions with members of the same type or to give better naming for union members.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b296b37030d1444ab9afd5686a84f78a2fb5b01c"}, "originalPosition": 553}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAzNDQwMA==", "bodyText": "In general in the documentation, escape code-like text such as \"@deprecated\" with the backtick so that it shows up like @deprecated", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r365034400", "createdAt": "2020-01-10T01:12:14Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,843 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl__schema_definition)\n+-   [Creating a Schema](#creating_a_schema)\n+-   [Record Type](#record_type)\n+-   [Primitive Types](#primitive_type)\n+-   [Array Type](#array_type)\n+-   [Map Type](#map_type)\n+-   [Union Type](#union_type)\n+-   [Enum Type](#enum_type)\n+-   [Fixed Type](#fixed_type)\n+-   [Typerefs](#typerefs)\n+-   [Namespace](#namespace\\)\n+-   [Import](#import)\n+-   [Deprecation](#deprecation)\n+-   [Package](#package)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and less verbose than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+Pegasus supports different types of schemas: [Records](#record_type), [Primitive types](#record_type), [Enums](#enum_type), [Arrays](#array_type), [Maps](#map_type), [Unions](#union_type), [Fixed](#fixed_type) and [Typerefs](#typerefs). \n+Please check the following documentations for details.\n+\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive types, enums, unions, maps arrays or other records.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   /**\n+    * field2 is an optional field.\n+    */\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+An optional field may have default value.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Inline Record\n+\n+A record can contain inline records.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithInlineRecord {\n+  inline: record InlineRecord {\n+    value: int\n+  }\n+  inlineOptional: optional record InlineOptionalRecord {\n+    value: string\n+  }\n+}\n+```\n+\n+Default value can be set up for a field that defines the inline records.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record WithInlineRecord {\n+\n+    inline: record InlineRecord {\n+      value: int\n+    } = { \"value\" : 1 }\n+\n+    inlineOptional: optional record InlineOptionalRecord {\n+      value: string\n+    } = { \"value\" : \"default-value\" }\n+}\n+```\n+\n+Inline records can aslo be union members.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.unions\n+\n+record UnionWithInlineRecord {\n+  value = union[\n+\n+    record InlineRecord {\n+      value: optional int\n+    },\n+\n+    record InlineRecord2 {}\n+  ]\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example: \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+### Including fields\n+\n+Record can include fields from one or more other records..\n+\n+For example: \n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields b1 from itself and f1 from Foo\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+\n+Multiple includes example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * Bar includes fields of Foo and Simple, Bar will have fields b1 from itself, f1 from Foo and s1 from Simple\n+ */\n+record Bar includes Foo, Simple {\n+  b1: string\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Simple {\n+  s1: string\n+}\n+```\n+\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Properties\n+Properties can be used to present arbitrary data and added to records, fields and enums.\n+\n+For example: \n+```\n+@prop = \"value\"\n+record Fruits {\n+  @validate.regex.regex = \"^(yes|no)$\"\n+  field: string\n+}\n+```\n+#### Property values can be any valid JSON type:\n+\n+For example: \n+```\n+@prop = 1\n+```\n+```\n+@prop = \"string\"\n+```\n+```\n+@prop = [1, 2, 3]\n+```\n+```\n+@prop = { \"a\": 1\", \"b\": { \"c\": true }}\n+\n+```\n+#### Property values can also be empty: \n+\n+If you don't indicate an explicity property value, it will resuilt in an implicity value of `true`.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+@prop\n+record Foo {\n+  f1: string\n+}\n+```\n+#### Property keys can be expressed as JSON:\n+\n+For example: \n+```\n+@a = {\n+  \"b\": {\n+    \"c\": {\n+      \"d\": {\n+        \"e\": {\n+          \"f\": false\n+        }\n+      }\n+    }\n+  }\n+}\n+```\n+\n+#### Property keys can be expressed as paths:\n+\n+The JSON style property key is complicated to write and read, so we provide a shorthand - the dot separate format to express the property keys.\n+\n+The following example is equivalent to the previous JSON example:\n+\n+```\n+@a.b.c.d.e.f = false\n+```\n+\n+### Escaping\n+There are some keywords which are reserved in Pegasus. If you have to use them to define any names, you need to put them in backticks : ` `.\n+\n+#### Keyword Escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PdlKeywordEscaping {\n+  `namespace`: string\n+  `record`: string\n+  `null`: string\n+  `enum`: string\n+  recordName: record `record` { }\n+}\n+```\n+\n+#### Namespace/Package escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping.`record`\n+package com.linkedin.pegasus.generator.test.idl.escaping.override.`typeref`\n+\n+/**\n+ * Ensures that the namespace and package are properly escaped at the root as well as in scoped named-type declarations.\n+ */\n+record NamespacePackageEscaping {\n+  x: {\n+    namespace com.x.y.z.`enum`\n+    package com.a.b.c.`fixed`\n+\n+    record Foo {}\n+  }\n+}\n+```\n+\n+#### Property key escaping \n+\n+If you want Pegasus to treat property key name with dots as one string key, please use backticks to escape such string.\n+For example: \n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping\n+\n+record PropertyKeyEscaping {\n+  @`namespace` = \"foo.bar\"\n+  @`test.path` = 1\n+  @validate.`com.linkedin.CustomValidator` = \"foo\"\n+  aField: string\n+}\n+```\n+\n+\n+## Primitive Types\n+\n+The Pegasus primitive types are : int, long, float, double, boolean, string and bytes.\n+\n+For Example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithPrimitives {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  booleanField: boolean\n+  stringField: string\n+  bytesField: bytes\n+}\n+```\n+\n+Primitive types with default values:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.records\n+\n+record WithPrimitiveDefaults {\n+  intWithDefault: int = 1\n+  longWithDefault: long = 3000000000\n+  floatWithDefault: float = 3.3\n+  doubleWithDefault: double = 4.4E38\n+  booleanWithDefault: boolean = true\n+  stringWithDefault: string = \"DEFAULT\"\n+  bytesWithDefault: bytes = \"\\u0007\"\n+}\n+```\n+\n+\n+## Array Type\n+\n+Pegasus Arrays are defined as a collection of a particular \"items\" type.\n+\n+For Example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+record WithPrimitivesArray {\n+  ints: array[int]\n+  longs: array[long]\n+  floats: array[float]\n+  doubles: array[double]\n+  booleans: array[boolean]\n+  strings: array[string]\n+  bytes: array[bytes]\n+}\n+```\n+\n+Primitive arrays with default values: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+record WithPrimitivesArrayDefaults {\n+  ints: array[int] = [1, 2, 3]\n+  longs: array[long] = [3000000000, 4000000000]\n+  floats: array[float] = [3.3, 2.5]\n+  doubles: array[double] = [4.4E38, 3.1E24]\n+  booleans: array[boolean] = [true, false]\n+  strings: array[string] = [\"hello\"]\n+  bytes: array[bytes] = [\"\\u0007\"]\n+}\n+```\n+\n+Record or Enum arrays:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+\n+record WithRecordAndEnumArrays {\n+  empties: array[Empty]\n+  fruits: array[Fruits]\n+}\n+```\n+\n+Record or Enum arrays with default values: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record WithRecordAndEnumDefaults {\n+  empties: array[Simple] = [{ \"message\": \"defaults!\" }]\n+  fruits: array[Fruits] = [\"APPLE\", \"ORANGE\"]\n+}\n+```\n+\n+\n+## Map Type\n+\n+Pegasus maps are defined with a values type and an optional key type.\n+\n+For example: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+record WithPrimitivesMap {\n+  ints: map[string, int]\n+  longs: map[string, long]\n+  floats: map[string, float]\n+  doubles: map[string, double]\n+  booleans: map[string, boolean]\n+  strings: map[string, string]\n+  bytes: map[string, bytes]\n+}\n+```\n+\n+Primitive maps with default values: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+record WithPrimitivesMapDefaults {\n+  ints: map[string, int] = { \"int1\": 1, \"int2\": 2, \"int3\": 3 }\n+  longs: map[string, long] = { \"long1\": 3000000000, \"long2\": 4000000000 }\n+  floats: map[string, float] = { \"float1\": 3.3, \"float2\": 2.1 }\n+  doubles: map[string, double] = {\"double1\": 4.4E38, \"double2\": 3.1E24}\n+  booleans: map[string, boolean] = { \"boolean1\": true, \"boolean2\": true, \"boolean3\": false }\n+  strings: map[string, string] = { \"string1\": \"hello\", \"string2\": \"world\" }\n+  bytes: map[string, bytes] = { \"bytes\": \"\\u0007\" }\n+}\n+```\n+\n+Complex Types Map:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+import com.linkedin.pegasus.generator.test.idl.`fixed`.Fixed8\n+\n+record WithComplexTypesMap {\n+  empties: map[string, Empty]\n+  fruits: map[string, Fruits]\n+  arrays: map[string, array[Simple]]\n+  maps: map[string, map[string, Simple]]\n+  unions: map[\n+    string,\n+    typeref WithComplexTypesMapUnion = union[int, string, Simple]\n+  ]\n+  `fixed`: map[string, Fixed8]\n+}\n+```\n+\n+**Note**: \n+The key must always be \"string\".\n+\n+\n+## Union Type\n+\n+A union type may be defined with any number of member types. Member type can be primitive, record, enum, map or array. Unions are not allowed as members inside an union.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.unions\n+\n+record WithPrimitivesUnion {\n+  value: union[int, long, float, double, boolean, string, bytes]\n+}\n+```\n+\n+The member type names also serve as the \u201cmember keys\u201d (also called as \u201cunion tags\u201d), and identify which union member type data holds.\n+To define a field of a record containing a union of two other records, we would define:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Question {\n+  answerFormat: union[MultipleChoice, TextEntry]\n+}\n+```\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record MultipleChoice {\n+  answer: string\n+}\n+```\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record TextEntry {\n+  text: string\n+}\n+```\n+\n+Union with default value:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Question {\n+  answerFormat: union[MultipleChoice, TextEntry] = {\"com.linkedin.pegasus.generator.examples.MultipleChoice\" : {\"answer\" : \"A\"}}\n+}\n+```\n+### Union with aliases\n+Union members can optionally be given an alias. Aliases can be used to create unions with members of the same type or to give better naming for union members.\n+\n+Aliased unions are defined as :\n+```\n+union [alias: type, ...]\n+```\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Question {\n+ answerFormat: union[   \n+   multipleChoice: MultipleChoice,\n+   shortAnswer: string,\n+   longAnswer: string\n+ ]\n+}\n+```\n+\n+Union with aliases with default value:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record QuestionDefault {\n+ answerFormat: union[   \n+   shortAnswer: string,\n+   longAnswer: string,\n+   multipleChoice: MultipleChoice\n+ ] = { \"shortAnswer\": \"short answer.\" }\n+}\n+```\n+\n+In the above example, the union answerFormat has three members, with two string type members differentiated using the aliases (shortAnswer and longAnswer). When aliases are used, the alias becomes the \"member key\" for the union members and will be used in the wire format. \n+\n+\n+## Enum Type\n+\n+Enums types may contain any number of symbols. \n+\n+For example:\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+enum Fruits {\n+  APPLE\n+  BANANA\n+  ORANGE\n+  PINEAPPLE\n+}\n+```\n+\n+Enums can be referenced in other schemas by name.\n+\n+For example:\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record FruitBasket {\n+  fruit: Fruits\n+}\n+```\n+\n+Enum can also be inline defined.\n+\n+For example:\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record FruitBasket {\n+  fruit: enum Fruits { APPLE, BANANA, ORANGE }\n+} \n+```\n+\n+### Enum documentation, deprecation and properties\n+Doc comments, deprecation and properties can be added directly to enum symbols. \n+\n+For example:\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  @color = \"red\"\n+  APPLE\n+\n+  /**\n+   * A yummy fruit.\n+   */\n+  @color = \"yellow\"\n+  BANANA\n+\n+  @deprecated\n+  @color = \"orange\"\n+  ORANGE\n+}\n+```\n+\n+### Enum defaults\n+To specify defaults, specify the enum value as string.\n+\n+For example:\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record FruitBasket {\n+  fruit: enum Fruits { APPLE, BANANA, ORANGE } = \"APPLE\"\n+} \n+```\n+\n+\n+The default value can also be defined as following exmaple:\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record FruitBasket {\n+  fruit: Fruits = \"APPLE\"\n+} \n+```\n+\n+## Fixed Type\n+\n+Fixed type is used to define schema with fixed size of bytes. \n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+fixed MD5 16\n+```\n+In the above example, `16` is the defined size of bytes for MD5 schema.\n+\n+\n+## Typerefs\n+Pegasus supports a new schema type known as a typeref. A typeref is like\n+a typedef in C. It does not declare a new type but declares an alias to\n+an existing type.\n+\n+### Typerefs can be used to name anonymous types.\n+\n+It is very useful, because unions, maps and arrays cannot be named directly like records and enums.\n+\n+For example:\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+typeref AnswerTypes = union[MultipleChoice, TextEntry]\n+\n+```\n+\n+Typerefs can be referred to from any other type using the name.\n+\n+For example:\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Question {\n+  answerFormat: AnswerTypes\n+}\n+```\n+      \n+\n+### Typerefs can provide additional clarity when using primitive types.\n+\n+For example:\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+typeref UnixTimestamp = long\n+```\n+\n+### Typerefs can be used to specify custom types and coercers\n+For example, Joda time has a convenient DateTime class. If we wish to use this class in Java to represent date times, all we need to do is define a pegasus custom type that binds to it:\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+@java.class = \"org.joda.time.DateTime\"\n+@java.coercerClass = \"com.linkedin.example.DateTimeCoercer\"\n+typeref DateTime = string\n+```\n+The coercer is responsible for converting the pegasus \u201creferenced\u201d type, in this case \"string\" to the Joda DateTime class:\n+\n+Once a custom type is defined, it can be used in any type. \n+\n+For example, to use the DateTime custom type in a record:\n+\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Fortune {\n+  createdAt: DateTime\n+} \n+```\n+\n+## Namespace\n+\n+Namespace is used to qualify the namespace for the named schema.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+record Foo {}\n+```\n+\n+## Import\n+\n+Imports are optional statements which allow you to avoid wirting the full qualified names, similar to in Java.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.imports\n+\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record Example {\n+  /**\n+   * Requires an import since this type is outside the root namespace and is not declared in this file.\n+   */\n+  externalOutsideNS: Simple\n+}\n+```\n+\n+**Note:** \n+- Any type that is not imported and is not within the namespace from which it's referenced must be referenced by\n+fully qualified name.\n+- Using imports in the following ways will lead to PDL parser errors. You should avoid to do so.\n+1. Importing types declared inside the document.\n+2. Importing types within the root namespace of the document.\n+3. Declaring types that conflict with existing imports.\n+\n+## Deprecation\n+\n+All types, enum symbols and record fields can be deprecated by adding @deprecated annotation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b296b37030d1444ab9afd5686a84f78a2fb5b01c"}, "originalPosition": 799}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ff79e2096716be9cf8023eb30af10991f90f085", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/9ff79e2096716be9cf8023eb30af10991f90f085", "committedDate": "2020-01-10T04:13:47Z", "message": "Update the union with default value example"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd6532824b305b8f8a43b8de3d0bd3f5e256c7c1", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/fd6532824b305b8f8a43b8de3d0bd3f5e256c7c1", "committedDate": "2020-01-10T04:16:59Z", "message": "Address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxMzY3OTQy", "url": "https://github.com/linkedin/rest.li/pull/157#pullrequestreview-341367942", "createdAt": "2020-01-10T19:15:05Z", "commit": {"oid": "fd6532824b305b8f8a43b8de3d0bd3f5e256c7c1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNDY0ODky", "url": "https://github.com/linkedin/rest.li/pull/157#pullrequestreview-341464892", "createdAt": "2020-01-10T22:55:40Z", "commit": {"oid": "fd6532824b305b8f8a43b8de3d0bd3f5e256c7c1"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMjo1NTo0MFrOFciEzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMjo1ODoyNFrOFciHmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ2MjczMg==", "bodyText": "Needlessly complicated. Code snippet can just say @prop", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r365462732", "createdAt": "2020-01-10T22:55:40Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,876 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl-schema-definition)\n+-   [Creating a Schema](#creating-a-schema)\n+-   [Record Type](#record-type)\n+-   [Primitive Types](#primitive-type)\n+-   [Array Type](#array-type)\n+-   [Map Type](#map-type)\n+-   [Union Type](#union-type)\n+-   [Enum Type](#enum-type)\n+-   [Fixed Type](#fixed-type)\n+-   [Typerefs](#typerefs)\n+-   [Namespace](#namespace)\n+-   [Import](#import)\n+-   [Deprecation](#deprecation)\n+-   [Package](#package)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and more concise than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+Pegasus supports different types of schemas: [Records](#record-type), [Primitive types](#primitive-type), [Enums](#enum-type), [Arrays](#array-type), [Maps](#map-type), [Unions](#union-type), [Fixed](#fixed-type) and [Typerefs](#typerefs). \n+Please check the following documentations for details.\n+\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive types, enums, unions, maps arrays or other records.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example:\n+```\n+namespace com.example.models\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   /**\n+    * field2 is an optional field.\n+    */\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values. The default value for a field is represented as the JSON value for the field's type.\n+\n+For example:\n+```\n+namespace com.example.models\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+An optional field may have default value.\n+\n+For example: \n+```\n+namespace com.example.models\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Inline Records\n+\n+A record can contain inline records.\n+\n+For example:\n+```\n+namespace com.example.models\n+\n+record WithInlineRecord {\n+  inline: record InlineRecord {\n+    someField: int\n+  }\n+  inlineOptional: optional record InlineOptionalRecord {\n+    someField: string\n+  }\n+}\n+```\n+\n+The default value of inlined records can be expressed using its serialized JSON representation.\n+\n+For example: \n+```\n+namespace com.example.models\n+\n+record WithInlineRecord {\n+\n+    inline: record InlineRecord {\n+      someField: int\n+    } = { \"someField\": 1 }\n+\n+    inlineOptional: optional record InlineOptionalRecord {\n+      someField: string\n+    } = { \"someField\": \"default-value\" }\n+}\n+```\n+\n+Inline records can also be union members.\n+\n+For example:\n+```\n+namespace ccom.example.models\n+\n+record UnionWithInlineRecord {\n+  value = union[\n+\n+    record InlineRecord {\n+      value: optional int\n+    },\n+\n+    record InlineRecord2 {}\n+  ]\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example: \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+### Including fields\n+\n+Record can include fields from one or more other records..\n+\n+For example: \n+\n+```\n+namespace com.example.models\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields b1 from itself and f1 from Foo\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.example.models\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+\n+Multiple includes example:\n+```\n+namespace com.example.models\n+\n+/**\n+ * Bar includes fields of Foo and Simple, Bar will have fields b1 from itself, f1 from Foo and s1 from Simple\n+ */\n+record Bar includes Foo, Simple {\n+  b1: string\n+}\n+```\n+```\n+namespace com.example.models\n+\n+record Simple {\n+  s1: string\n+}\n+```\n+\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Escaping\n+There are some keywords which are reserved in Pegasus. If you have to use them to define any names, you need to put them in backticks: ` `.\n+\n+#### Keyword Escaping\n+\n+```\n+namespace com.example.models\n+\n+record PdlKeywordEscaping {\n+  `namespace`: string\n+  `record`: string\n+  `null`: string\n+  `enum`: string\n+  recordName: record `record` { }\n+}\n+```\n+\n+#### Namespace/Package escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping.`record`\n+package com.linkedin.pegasus.generator.test.idl.escaping.override.`typeref`\n+\n+/**\n+ * Ensures that the namespace and package are properly escaped at the root as well as in scoped named-type declarations.\n+ */\n+record NamespacePackageEscaping {\n+  x: {\n+    namespace com.x.y.z.`enum`\n+    package com.a.b.c.`fixed`\n+\n+    record Foo {}\n+  }\n+}\n+```\n+\n+#### Property key escaping \n+\n+If you want Pegasus to treat property key name with dots as one string key, please use backticks to escape such string. Escaping property keys can also be used to escape reserved keywords such as \"namespace\" or \"record\".\n+\n+For example: \n+\n+```\n+namespace com.example.models\n+\n+record PropertyKeyEscaping {\n+  @`namespace` = \"foo.bar\"\n+  @`test.path` = 1\n+  @validate.`com.linkedin.CustomValidator` = \"foo\"\n+  aField: string\n+}\n+```\n+\n+\n+## Primitive Types\n+\n+The Pegasus primitive types are: int, long, float, double, boolean, string and bytes.\n+\n+For Example:\n+```\n+namespace com.example.models\n+\n+record WithPrimitives {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  booleanField: boolean\n+  stringField: string\n+  bytesField: bytes\n+}\n+```\n+\n+Primitive types with default values:\n+```\n+namespace com.example.models\n+\n+record WithPrimitiveDefaults {\n+  intWithDefault: int = 1\n+  longWithDefault: long = 3000000000\n+  floatWithDefault: float = 3.3\n+  doubleWithDefault: double = 4.4E38\n+  booleanWithDefault: boolean = true\n+  stringWithDefault: string = \"DEFAULT\"\n+  bytesWithDefault: bytes = \"\\u0007\"\n+}\n+```\n+\n+\n+## Array Type\n+\n+Pegasus Arrays are defined as a collection of a particular \"items\" type.\n+\n+For Example: \n+```\n+namespace com.example.models\n+\n+record WithPrimitivesArray {\n+  ints: array[int]\n+  longs: array[long]\n+  floats: array[float]\n+  doubles: array[double]\n+  booleans: array[boolean]\n+  strings: array[string]\n+  bytes: array[bytes]\n+}\n+```\n+\n+Primitive arrays with default values: \n+```\n+namespace com.example.models\n+\n+record WithPrimitivesArrayDefaults {\n+  ints: array[int] = [1, 2, 3]\n+  longs: array[long] = [3000000000, 4000000000]\n+  floats: array[float] = [3.3, 2.5]\n+  doubles: array[double] = [4.4E38, 3.1E24]\n+  booleans: array[boolean] = [true, false]\n+  strings: array[string] = [\"hello\"]\n+  bytes: array[bytes] = [\"\\u0007\"]\n+}\n+```\n+\n+Record or Enum arrays:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+\n+record WithRecordAndEnumArrays {\n+  empties: array[Empty]\n+  fruits: array[Fruits]\n+}\n+```\n+\n+Record or Enum arrays with default values: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record WithRecordAndEnumDefaults {\n+  empties: array[Simple] = [{ \"message\": \"defaults!\" }]\n+  fruits: array[Fruits] = [\"APPLE\", \"ORANGE\"]\n+}\n+```\n+\n+\n+## Map Type\n+\n+Maps are defined with a key type and a value type. The value type can be any valid PDL type, but currently only `string` is supported for the key type.\n+\n+For example: \n+```\n+namespace com.example.models\n+\n+record WithPrimitivesMap {\n+  ints: map[string, int]\n+  longs: map[string, long]\n+  floats: map[string, float]\n+  doubles: map[string, double]\n+  booleans: map[string, boolean]\n+  strings: map[string, string]\n+  bytes: map[string, bytes]\n+}\n+```\n+\n+Primitive maps with default values: \n+```\n+namespace com.example.models\n+\n+record WithPrimitivesMapDefaults {\n+  ints: map[string, int] = { \"int1\": 1, \"int2\": 2, \"int3\": 3 }\n+  longs: map[string, long] = { \"long1\": 3000000000, \"long2\": 4000000000 }\n+  floats: map[string, float] = { \"float1\": 3.3, \"float2\": 2.1 }\n+  doubles: map[string, double] = {\"double1\": 4.4E38, \"double2\": 3.1E24}\n+  booleans: map[string, boolean] = { \"boolean1\": true, \"boolean2\": true, \"boolean3\": false }\n+  strings: map[string, string] = { \"string1\": \"hello\", \"string2\": \"world\" }\n+  bytes: map[string, bytes] = { \"bytes\": \"\\u0007\" }\n+}\n+```\n+\n+Complex Types Map:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+import com.linkedin.pegasus.generator.test.idl.`fixed`.Fixed8\n+\n+record WithComplexTypesMap {\n+  empties: map[string, Empty]\n+  fruits: map[string, Fruits]\n+  arrays: map[string, array[Simple]]\n+  maps: map[string, map[string, Simple]]\n+  unions: map[\n+    string,\n+    typeref WithComplexTypesMapUnion = union[int, string, Simple]\n+  ]\n+  `fixed`: map[string, Fixed8]\n+}\n+```\n+\n+## Union Type\n+\n+A union type may be defined with any number of member types. Member type can be primitive, record, enum, map or array. Unions are not allowed as members inside an union.\n+\n+For example:\n+```\n+namespace com.example.models\n+\n+record WithPrimitivesUnion {\n+  value: union[int, long, float, double, boolean, string, bytes]\n+}\n+```\n+\n+The member type names also serve as the \u201cmember keys\u201d (also called as \u201cunion tags\u201d), and identify which union member type data holds.\n+To define a field of a record containing a union of two other records, we would define:\n+```\n+namespace com.example.models\n+\n+record Question {\n+  answerFormat: union[MultipleChoice, TextEntry]\n+}\n+```\n+```\n+namespace com.example.models\n+\n+record MultipleChoice {\n+  answer: string\n+}\n+```\n+\n+```\n+namespace com.example.models\n+\n+record TextEntry {\n+  text: string\n+}\n+```\n+\n+Union with default value:\n+```\n+namespace com.example.models\n+\n+record Question {\n+  answerFormat: union[MultipleChoice, TextEntry] = {\"com.linkedin.pegasus.generator.examples.MultipleChoice\": {\"answer\": \"A\"}}\n+}\n+```\n+### Union with aliases\n+Union members can optionally be given an alias. Aliases can be used to create unions with members of the same type or to give better naming for union members. Union with aliases is useful for cases where a union contains multiple different typerefs with the same underlying type. This use case is not supported with a non-aliased union.\n+\n+Aliased unions are defined as:\n+```\n+union [alias: type, ...]\n+```\n+\n+For example:\n+```\n+namespace com.example.models\n+\n+record Question {\n+ answerFormat: union[   \n+   multipleChoice: MultipleChoice,\n+   /**\n+     * Doc for shortAnswer.\n+     */\n+   shortAnswer: string,\n+   @customProperty = \"property for longAnswer.\"\n+   longAnswer: string\n+ ]\n+}\n+```\n+**Aliased union members can have doc strings and custom properties. This is not supported for non-aliased union members.**\n+\n+\n+Union with aliases with default value:\n+```\n+namespace com.example.models\n+\n+record QuestionDefault {\n+ answerFormat: union[ \n+   shortAnswer: string,\n+   longAnswer: string,\n+   multipleChoice: MultipleChoice\n+ ] = { \"shortAnswer\": \"short answer.\" }\n+}\n+```\n+\n+In the above example, the union answerFormat has three members, with two string type members differentiated using the aliases (shortAnswer and longAnswer). When aliases are used, the alias becomes the \"member key\" for the union members and will be used in the wire format. \n+\n+**Note:**\n+Either ALL union members must be aliased, or NONE at all.\n+\n+## Enum Type\n+\n+Enums types may contain any number of symbols. \n+\n+For example:\n+\n+```\n+namespace com.example.models\n+\n+enum Fruits {\n+  APPLE\n+  BANANA\n+  ORANGE\n+  PINEAPPLE\n+}\n+```\n+\n+Enums can be referenced in other schemas by name.\n+\n+For example:\n+\n+```\n+namespace com.example.models\n+\n+record FruitBasket {\n+  fruit: Fruits\n+}\n+```\n+\n+Enum can also be inline defined.\n+\n+For example:\n+\n+```\n+namespace com.example.models\n+\n+record FruitBasket {\n+  fruit: enum Fruits { APPLE, BANANA, ORANGE }\n+} \n+```\n+\n+### Enum documentation, deprecation and properties\n+Doc comments, deprecation and properties can be added directly to enum symbols. \n+\n+For example:\n+\n+```\n+namespace com.example.models\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  @color = \"red\"\n+  APPLE\n+\n+  /**\n+   * A yummy fruit.\n+   */\n+  @color = \"yellow\"\n+  BANANA\n+\n+  @deprecated\n+  @color = \"orange\"\n+  ORANGE\n+}\n+```\n+\n+### Enum defaults\n+To specify defaults, specify the enum value as string.\n+\n+For example:\n+\n+```\n+namespace com.example.models\n+\n+record FruitBasket {\n+  fruit: enum Fruits { APPLE, BANANA, ORANGE } = \"APPLE\"\n+} \n+```\n+\n+\n+The default value can also be defined as following exmaple:\n+\n+```\n+namespace com.example.models\n+\n+record FruitBasket {\n+  fruit: Fruits = \"APPLE\"\n+} \n+```\n+\n+## Fixed Type\n+\n+Fixed type is used to define schema with fixed size of bytes. \n+\n+For example:\n+```\n+namespace com.example.models\n+\n+fixed MD5 16\n+```\n+In the above example, `16` is the defined size of bytes for MD5 schema.\n+\n+\n+## Typerefs\n+Pegasus supports a new schema type known as a typeref. A typeref is like\n+a typedef in C. It does not declare a new type but declares an alias to\n+an existing type.\n+\n+### Typerefs can be used to name anonymous types.\n+\n+It is very useful, because unions, maps and arrays cannot be named directly like records and enums.\n+\n+For example:\n+\n+```\n+namespace com.example.models\n+\n+typeref AnswerTypes = union[MultipleChoice, TextEntry]\n+\n+```\n+\n+Typerefs can be referred to from any other type using the name.\n+\n+For example:\n+\n+```\n+namespace com.example.models\n+\n+record Question {\n+  answerFormat: AnswerTypes\n+}\n+```\n+      \n+\n+### Typerefs can provide additional clarity when using primitive types.\n+\n+For example:\n+\n+```\n+namespace com.example.models\n+\n+typeref UnixTimestamp = long\n+```\n+\n+### Typerefs can be used to specify custom types and coercers\n+For example, Joda time has a convenient DateTime class. If we wish to use this class in Java to represent date times, all we need to do is define a pegasus custom type that binds to it:\n+\n+```\n+namespace com.example.models\n+\n+@java.class = \"org.joda.time.DateTime\"\n+@java.coercerClass = \"com.linkedin.example.DateTimeCoercer\"\n+typeref DateTime = string\n+```\n+The coercer is responsible for converting the pegasus \u201creferenced\u201d type, in this case \"string\" to the Joda DateTime class:\n+\n+Once a custom type is defined, it can be used in any type. \n+\n+For example, to use the DateTime custom type in a record:\n+\n+```\n+namespace com.example.models\n+\n+record Fortune {\n+  createdAt: DateTime\n+} \n+```\n+\n+## Namespace\n+\n+Namespace is used to qualify the namespace for the named schema.\n+\n+For example:\n+```\n+namespace com.example.models\n+\n+record Foo {}\n+```\n+\n+## Import\n+\n+Imports are optional statements which allow you to avoid wirting the full qualified names, similar to in Java.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.imports\n+\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record Example {\n+  /**\n+   * Requires an import since this type is outside the root namespace and is not declared in this file.\n+   */\n+  externalOutsideNS: Simple\n+}\n+```\n+\n+**Note:** \n+- Any type that is not imported and is not within the namespace from which it's referenced must be referenced by\n+fully qualified name.\n+- Using imports in the following ways will lead to PDL parser errors. You should avoid to do so.\n+1. Importing types declared inside the document.\n+2. Importing types within the root namespace of the document.\n+3. Declaring types that conflict with existing imports.\n+\n+## Properties\n+Properties can be used to present arbitrary data and added to records, record fields, enums, enum symbols, aliased union members.\n+\n+Add properties to record and record field:\n+```\n+@prop = \"value\"\n+record Fruits {\n+  @validate.regex.regex = \"^(yes|no)$\"\n+  field: string\n+}\n+```\n+\n+Add properties to enum and enum symbols:\n+```\n+@prop = \"value\"\n+enum Fruits {\n+  @color = \"red\"\n+  APPLE\n+\n+  @color = \"orange\"\n+  ORANGE\n+\n+  @color = \"yellow\"\n+  BANANA\n+}\n+```\n+\n+Add properties to aliased union members:\n+```\n+record Question {\n+ answerFormat: union[\n+   @prop\n+   multipleChoice: MultipleChoice,\n+   shortAnswer: string,\n+   longAnswer: string\n+ ]\n+}\n+```\n+\n+### Property values can be any valid JSON type:\n+\n+For example:\n+```\n+@prop = 1\n+```\n+```\n+@prop = \"string\"\n+```\n+```\n+@prop = [1, 2, 3]\n+```\n+```\n+@prop = { \"a\": 1\", \"b\": { \"c\": true }}\n+\n+```\n+### Property values can also be empty:\n+\n+If you don't indicate an explicit property value, it will resuilt in an implicit value of `true`.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.examples\n+\n+@prop\n+record Foo {\n+  f1: string\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd6532824b305b8f8a43b8de3d0bd3f5e256c7c1"}, "originalPosition": 801}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ2MjgxNg==", "bodyText": "typo: result", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r365462816", "createdAt": "2020-01-10T22:55:52Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,876 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl-schema-definition)\n+-   [Creating a Schema](#creating-a-schema)\n+-   [Record Type](#record-type)\n+-   [Primitive Types](#primitive-type)\n+-   [Array Type](#array-type)\n+-   [Map Type](#map-type)\n+-   [Union Type](#union-type)\n+-   [Enum Type](#enum-type)\n+-   [Fixed Type](#fixed-type)\n+-   [Typerefs](#typerefs)\n+-   [Namespace](#namespace)\n+-   [Import](#import)\n+-   [Deprecation](#deprecation)\n+-   [Package](#package)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and more concise than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+Pegasus supports different types of schemas: [Records](#record-type), [Primitive types](#primitive-type), [Enums](#enum-type), [Arrays](#array-type), [Maps](#map-type), [Unions](#union-type), [Fixed](#fixed-type) and [Typerefs](#typerefs). \n+Please check the following documentations for details.\n+\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive types, enums, unions, maps arrays or other records.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example:\n+```\n+namespace com.example.models\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   /**\n+    * field2 is an optional field.\n+    */\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values. The default value for a field is represented as the JSON value for the field's type.\n+\n+For example:\n+```\n+namespace com.example.models\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   field2: string = \"message\"\n+}\n+```\n+\n+An optional field may have default value.\n+\n+For example: \n+```\n+namespace com.example.models\n+\n+record WithOptionalPrimitiveDefault {\n+  intWithDefault: optional int = 1\n+}\n+```\n+\n+### Inline Records\n+\n+A record can contain inline records.\n+\n+For example:\n+```\n+namespace com.example.models\n+\n+record WithInlineRecord {\n+  inline: record InlineRecord {\n+    someField: int\n+  }\n+  inlineOptional: optional record InlineOptionalRecord {\n+    someField: string\n+  }\n+}\n+```\n+\n+The default value of inlined records can be expressed using its serialized JSON representation.\n+\n+For example: \n+```\n+namespace com.example.models\n+\n+record WithInlineRecord {\n+\n+    inline: record InlineRecord {\n+      someField: int\n+    } = { \"someField\": 1 }\n+\n+    inlineOptional: optional record InlineOptionalRecord {\n+      someField: string\n+    } = { \"someField\": \"default-value\" }\n+}\n+```\n+\n+Inline records can also be union members.\n+\n+For example:\n+```\n+namespace ccom.example.models\n+\n+record UnionWithInlineRecord {\n+  value = union[\n+\n+    record InlineRecord {\n+      value: optional int\n+    },\n+\n+    record InlineRecord2 {}\n+  ]\n+}\n+```\n+\n+### Doc Strings\n+\n+Types and fields may be documented using \u201cdoc strings\u201d.\n+\n+For example: \n+```\n+/**\n+ * Doc strings may be added to types. This doc should describe the purposes\n+ * of the Example type.\n+ */\n+record Example {\n+  /**\n+   * Doc strings may also be added to fields.\n+   */\n+   field1: string\n+\n+   /** Doc strings can be single line.*/\n+   field2: int\n+}\n+```\n+\n+**Note:**\n+If you use Java comment style for doc string, e.g \"// Doc String\", those doc strings will not be stored in in-memory schema.\n+\n+### Including fields\n+\n+Record can include fields from one or more other records..\n+\n+For example: \n+\n+```\n+namespace com.example.models\n+\n+/**\n+ * Bar includes fields of Foo, Bar will have fields b1 from itself and f1 from Foo\n+ */\n+record Bar includes Foo {\n+  b1: string\n+}\n+```\n+```\n+namespace com.example.models\n+\n+record Foo {\n+  f1: string\n+}\n+```\n+\n+Multiple includes example:\n+```\n+namespace com.example.models\n+\n+/**\n+ * Bar includes fields of Foo and Simple, Bar will have fields b1 from itself, f1 from Foo and s1 from Simple\n+ */\n+record Bar includes Foo, Simple {\n+  b1: string\n+}\n+```\n+```\n+namespace com.example.models\n+\n+record Simple {\n+  s1: string\n+}\n+```\n+\n+In pegasus, field inclusion does not imply inheritance, it is merely a convenience to reduce duplication when writing schemas.\n+\n+\n+### Escaping\n+There are some keywords which are reserved in Pegasus. If you have to use them to define any names, you need to put them in backticks: ` `.\n+\n+#### Keyword Escaping\n+\n+```\n+namespace com.example.models\n+\n+record PdlKeywordEscaping {\n+  `namespace`: string\n+  `record`: string\n+  `null`: string\n+  `enum`: string\n+  recordName: record `record` { }\n+}\n+```\n+\n+#### Namespace/Package escaping\n+\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.escaping.`record`\n+package com.linkedin.pegasus.generator.test.idl.escaping.override.`typeref`\n+\n+/**\n+ * Ensures that the namespace and package are properly escaped at the root as well as in scoped named-type declarations.\n+ */\n+record NamespacePackageEscaping {\n+  x: {\n+    namespace com.x.y.z.`enum`\n+    package com.a.b.c.`fixed`\n+\n+    record Foo {}\n+  }\n+}\n+```\n+\n+#### Property key escaping \n+\n+If you want Pegasus to treat property key name with dots as one string key, please use backticks to escape such string. Escaping property keys can also be used to escape reserved keywords such as \"namespace\" or \"record\".\n+\n+For example: \n+\n+```\n+namespace com.example.models\n+\n+record PropertyKeyEscaping {\n+  @`namespace` = \"foo.bar\"\n+  @`test.path` = 1\n+  @validate.`com.linkedin.CustomValidator` = \"foo\"\n+  aField: string\n+}\n+```\n+\n+\n+## Primitive Types\n+\n+The Pegasus primitive types are: int, long, float, double, boolean, string and bytes.\n+\n+For Example:\n+```\n+namespace com.example.models\n+\n+record WithPrimitives {\n+  intField: int\n+  longField: long\n+  floatField: float\n+  doubleField: double\n+  booleanField: boolean\n+  stringField: string\n+  bytesField: bytes\n+}\n+```\n+\n+Primitive types with default values:\n+```\n+namespace com.example.models\n+\n+record WithPrimitiveDefaults {\n+  intWithDefault: int = 1\n+  longWithDefault: long = 3000000000\n+  floatWithDefault: float = 3.3\n+  doubleWithDefault: double = 4.4E38\n+  booleanWithDefault: boolean = true\n+  stringWithDefault: string = \"DEFAULT\"\n+  bytesWithDefault: bytes = \"\\u0007\"\n+}\n+```\n+\n+\n+## Array Type\n+\n+Pegasus Arrays are defined as a collection of a particular \"items\" type.\n+\n+For Example: \n+```\n+namespace com.example.models\n+\n+record WithPrimitivesArray {\n+  ints: array[int]\n+  longs: array[long]\n+  floats: array[float]\n+  doubles: array[double]\n+  booleans: array[boolean]\n+  strings: array[string]\n+  bytes: array[bytes]\n+}\n+```\n+\n+Primitive arrays with default values: \n+```\n+namespace com.example.models\n+\n+record WithPrimitivesArrayDefaults {\n+  ints: array[int] = [1, 2, 3]\n+  longs: array[long] = [3000000000, 4000000000]\n+  floats: array[float] = [3.3, 2.5]\n+  doubles: array[double] = [4.4E38, 3.1E24]\n+  booleans: array[boolean] = [true, false]\n+  strings: array[string] = [\"hello\"]\n+  bytes: array[bytes] = [\"\\u0007\"]\n+}\n+```\n+\n+Record or Enum arrays:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+\n+record WithRecordAndEnumArrays {\n+  empties: array[Empty]\n+  fruits: array[Fruits]\n+}\n+```\n+\n+Record or Enum arrays with default values: \n+```\n+namespace com.linkedin.pegasus.generator.test.idl.arrays\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record WithRecordAndEnumDefaults {\n+  empties: array[Simple] = [{ \"message\": \"defaults!\" }]\n+  fruits: array[Fruits] = [\"APPLE\", \"ORANGE\"]\n+}\n+```\n+\n+\n+## Map Type\n+\n+Maps are defined with a key type and a value type. The value type can be any valid PDL type, but currently only `string` is supported for the key type.\n+\n+For example: \n+```\n+namespace com.example.models\n+\n+record WithPrimitivesMap {\n+  ints: map[string, int]\n+  longs: map[string, long]\n+  floats: map[string, float]\n+  doubles: map[string, double]\n+  booleans: map[string, boolean]\n+  strings: map[string, string]\n+  bytes: map[string, bytes]\n+}\n+```\n+\n+Primitive maps with default values: \n+```\n+namespace com.example.models\n+\n+record WithPrimitivesMapDefaults {\n+  ints: map[string, int] = { \"int1\": 1, \"int2\": 2, \"int3\": 3 }\n+  longs: map[string, long] = { \"long1\": 3000000000, \"long2\": 4000000000 }\n+  floats: map[string, float] = { \"float1\": 3.3, \"float2\": 2.1 }\n+  doubles: map[string, double] = {\"double1\": 4.4E38, \"double2\": 3.1E24}\n+  booleans: map[string, boolean] = { \"boolean1\": true, \"boolean2\": true, \"boolean3\": false }\n+  strings: map[string, string] = { \"string1\": \"hello\", \"string2\": \"world\" }\n+  bytes: map[string, bytes] = { \"bytes\": \"\\u0007\" }\n+}\n+```\n+\n+Complex Types Map:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.maps\n+\n+import com.linkedin.pegasus.generator.test.idl.enums.Fruits\n+import com.linkedin.pegasus.generator.test.idl.records.Empty\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+import com.linkedin.pegasus.generator.test.idl.`fixed`.Fixed8\n+\n+record WithComplexTypesMap {\n+  empties: map[string, Empty]\n+  fruits: map[string, Fruits]\n+  arrays: map[string, array[Simple]]\n+  maps: map[string, map[string, Simple]]\n+  unions: map[\n+    string,\n+    typeref WithComplexTypesMapUnion = union[int, string, Simple]\n+  ]\n+  `fixed`: map[string, Fixed8]\n+}\n+```\n+\n+## Union Type\n+\n+A union type may be defined with any number of member types. Member type can be primitive, record, enum, map or array. Unions are not allowed as members inside an union.\n+\n+For example:\n+```\n+namespace com.example.models\n+\n+record WithPrimitivesUnion {\n+  value: union[int, long, float, double, boolean, string, bytes]\n+}\n+```\n+\n+The member type names also serve as the \u201cmember keys\u201d (also called as \u201cunion tags\u201d), and identify which union member type data holds.\n+To define a field of a record containing a union of two other records, we would define:\n+```\n+namespace com.example.models\n+\n+record Question {\n+  answerFormat: union[MultipleChoice, TextEntry]\n+}\n+```\n+```\n+namespace com.example.models\n+\n+record MultipleChoice {\n+  answer: string\n+}\n+```\n+\n+```\n+namespace com.example.models\n+\n+record TextEntry {\n+  text: string\n+}\n+```\n+\n+Union with default value:\n+```\n+namespace com.example.models\n+\n+record Question {\n+  answerFormat: union[MultipleChoice, TextEntry] = {\"com.linkedin.pegasus.generator.examples.MultipleChoice\": {\"answer\": \"A\"}}\n+}\n+```\n+### Union with aliases\n+Union members can optionally be given an alias. Aliases can be used to create unions with members of the same type or to give better naming for union members. Union with aliases is useful for cases where a union contains multiple different typerefs with the same underlying type. This use case is not supported with a non-aliased union.\n+\n+Aliased unions are defined as:\n+```\n+union [alias: type, ...]\n+```\n+\n+For example:\n+```\n+namespace com.example.models\n+\n+record Question {\n+ answerFormat: union[   \n+   multipleChoice: MultipleChoice,\n+   /**\n+     * Doc for shortAnswer.\n+     */\n+   shortAnswer: string,\n+   @customProperty = \"property for longAnswer.\"\n+   longAnswer: string\n+ ]\n+}\n+```\n+**Aliased union members can have doc strings and custom properties. This is not supported for non-aliased union members.**\n+\n+\n+Union with aliases with default value:\n+```\n+namespace com.example.models\n+\n+record QuestionDefault {\n+ answerFormat: union[ \n+   shortAnswer: string,\n+   longAnswer: string,\n+   multipleChoice: MultipleChoice\n+ ] = { \"shortAnswer\": \"short answer.\" }\n+}\n+```\n+\n+In the above example, the union answerFormat has three members, with two string type members differentiated using the aliases (shortAnswer and longAnswer). When aliases are used, the alias becomes the \"member key\" for the union members and will be used in the wire format. \n+\n+**Note:**\n+Either ALL union members must be aliased, or NONE at all.\n+\n+## Enum Type\n+\n+Enums types may contain any number of symbols. \n+\n+For example:\n+\n+```\n+namespace com.example.models\n+\n+enum Fruits {\n+  APPLE\n+  BANANA\n+  ORANGE\n+  PINEAPPLE\n+}\n+```\n+\n+Enums can be referenced in other schemas by name.\n+\n+For example:\n+\n+```\n+namespace com.example.models\n+\n+record FruitBasket {\n+  fruit: Fruits\n+}\n+```\n+\n+Enum can also be inline defined.\n+\n+For example:\n+\n+```\n+namespace com.example.models\n+\n+record FruitBasket {\n+  fruit: enum Fruits { APPLE, BANANA, ORANGE }\n+} \n+```\n+\n+### Enum documentation, deprecation and properties\n+Doc comments, deprecation and properties can be added directly to enum symbols. \n+\n+For example:\n+\n+```\n+namespace com.example.models\n+\n+/**\n+ * A fruit\n+ */\n+enum Fruits {\n+\n+  @color = \"red\"\n+  APPLE\n+\n+  /**\n+   * A yummy fruit.\n+   */\n+  @color = \"yellow\"\n+  BANANA\n+\n+  @deprecated\n+  @color = \"orange\"\n+  ORANGE\n+}\n+```\n+\n+### Enum defaults\n+To specify defaults, specify the enum value as string.\n+\n+For example:\n+\n+```\n+namespace com.example.models\n+\n+record FruitBasket {\n+  fruit: enum Fruits { APPLE, BANANA, ORANGE } = \"APPLE\"\n+} \n+```\n+\n+\n+The default value can also be defined as following exmaple:\n+\n+```\n+namespace com.example.models\n+\n+record FruitBasket {\n+  fruit: Fruits = \"APPLE\"\n+} \n+```\n+\n+## Fixed Type\n+\n+Fixed type is used to define schema with fixed size of bytes. \n+\n+For example:\n+```\n+namespace com.example.models\n+\n+fixed MD5 16\n+```\n+In the above example, `16` is the defined size of bytes for MD5 schema.\n+\n+\n+## Typerefs\n+Pegasus supports a new schema type known as a typeref. A typeref is like\n+a typedef in C. It does not declare a new type but declares an alias to\n+an existing type.\n+\n+### Typerefs can be used to name anonymous types.\n+\n+It is very useful, because unions, maps and arrays cannot be named directly like records and enums.\n+\n+For example:\n+\n+```\n+namespace com.example.models\n+\n+typeref AnswerTypes = union[MultipleChoice, TextEntry]\n+\n+```\n+\n+Typerefs can be referred to from any other type using the name.\n+\n+For example:\n+\n+```\n+namespace com.example.models\n+\n+record Question {\n+  answerFormat: AnswerTypes\n+}\n+```\n+      \n+\n+### Typerefs can provide additional clarity when using primitive types.\n+\n+For example:\n+\n+```\n+namespace com.example.models\n+\n+typeref UnixTimestamp = long\n+```\n+\n+### Typerefs can be used to specify custom types and coercers\n+For example, Joda time has a convenient DateTime class. If we wish to use this class in Java to represent date times, all we need to do is define a pegasus custom type that binds to it:\n+\n+```\n+namespace com.example.models\n+\n+@java.class = \"org.joda.time.DateTime\"\n+@java.coercerClass = \"com.linkedin.example.DateTimeCoercer\"\n+typeref DateTime = string\n+```\n+The coercer is responsible for converting the pegasus \u201creferenced\u201d type, in this case \"string\" to the Joda DateTime class:\n+\n+Once a custom type is defined, it can be used in any type. \n+\n+For example, to use the DateTime custom type in a record:\n+\n+```\n+namespace com.example.models\n+\n+record Fortune {\n+  createdAt: DateTime\n+} \n+```\n+\n+## Namespace\n+\n+Namespace is used to qualify the namespace for the named schema.\n+\n+For example:\n+```\n+namespace com.example.models\n+\n+record Foo {}\n+```\n+\n+## Import\n+\n+Imports are optional statements which allow you to avoid wirting the full qualified names, similar to in Java.\n+\n+For example:\n+```\n+namespace com.linkedin.pegasus.generator.test.idl.imports\n+\n+import com.linkedin.pegasus.generator.test.idl.records.Simple\n+\n+record Example {\n+  /**\n+   * Requires an import since this type is outside the root namespace and is not declared in this file.\n+   */\n+  externalOutsideNS: Simple\n+}\n+```\n+\n+**Note:** \n+- Any type that is not imported and is not within the namespace from which it's referenced must be referenced by\n+fully qualified name.\n+- Using imports in the following ways will lead to PDL parser errors. You should avoid to do so.\n+1. Importing types declared inside the document.\n+2. Importing types within the root namespace of the document.\n+3. Declaring types that conflict with existing imports.\n+\n+## Properties\n+Properties can be used to present arbitrary data and added to records, record fields, enums, enum symbols, aliased union members.\n+\n+Add properties to record and record field:\n+```\n+@prop = \"value\"\n+record Fruits {\n+  @validate.regex.regex = \"^(yes|no)$\"\n+  field: string\n+}\n+```\n+\n+Add properties to enum and enum symbols:\n+```\n+@prop = \"value\"\n+enum Fruits {\n+  @color = \"red\"\n+  APPLE\n+\n+  @color = \"orange\"\n+  ORANGE\n+\n+  @color = \"yellow\"\n+  BANANA\n+}\n+```\n+\n+Add properties to aliased union members:\n+```\n+record Question {\n+ answerFormat: union[\n+   @prop\n+   multipleChoice: MultipleChoice,\n+   shortAnswer: string,\n+   longAnswer: string\n+ ]\n+}\n+```\n+\n+### Property values can be any valid JSON type:\n+\n+For example:\n+```\n+@prop = 1\n+```\n+```\n+@prop = \"string\"\n+```\n+```\n+@prop = [1, 2, 3]\n+```\n+```\n+@prop = { \"a\": 1\", \"b\": { \"c\": true }}\n+\n+```\n+### Property values can also be empty:\n+\n+If you don't indicate an explicit property value, it will resuilt in an implicit value of `true`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd6532824b305b8f8a43b8de3d0bd3f5e256c7c1"}, "originalPosition": 792}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ2Mjk4NA==", "bodyText": "Add link to \"Properties\"", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r365462984", "createdAt": "2020-01-10T22:56:30Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,876 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl-schema-definition)\n+-   [Creating a Schema](#creating-a-schema)\n+-   [Record Type](#record-type)\n+-   [Primitive Types](#primitive-type)\n+-   [Array Type](#array-type)\n+-   [Map Type](#map-type)\n+-   [Union Type](#union-type)\n+-   [Enum Type](#enum-type)\n+-   [Fixed Type](#fixed-type)\n+-   [Typerefs](#typerefs)\n+-   [Namespace](#namespace)\n+-   [Import](#import)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd6532824b305b8f8a43b8de3d0bd3f5e256c7c1"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ2MzQ0OQ==", "bodyText": "Sorry for suggesting this, it actually doesn't make any sense. Just say \"The default value for a field is expressed as a JSON value.\" Much simpler.", "url": "https://github.com/linkedin/rest.li/pull/157#discussion_r365463449", "createdAt": "2020-01-10T22:58:24Z", "author": {"login": "evanw555"}, "path": "pdl_syntax.md", "diffHunk": "@@ -0,0 +1,876 @@\n+---\n+layout: guide\n+title: PDL Syntax\n+permalink: /pdl_syntax\n+excerpt: Rest.li PDL Syntax.\n+---\n+\n+# PDL Syntax\n+\n+## Contents\n+-   [PDL Schema Definition](#pdl-schema-definition)\n+-   [Creating a Schema](#creating-a-schema)\n+-   [Record Type](#record-type)\n+-   [Primitive Types](#primitive-type)\n+-   [Array Type](#array-type)\n+-   [Map Type](#map-type)\n+-   [Union Type](#union-type)\n+-   [Enum Type](#enum-type)\n+-   [Fixed Type](#fixed-type)\n+-   [Typerefs](#typerefs)\n+-   [Namespace](#namespace)\n+-   [Import](#import)\n+-   [Deprecation](#deprecation)\n+-   [Package](#package)\n+\n+## PDL Schema Definition\n+\n+PDL is a Pegasus schema definition language, which is developer friendly and more concise than the JSON based schema format.\n+\n+## Creating a Schema\n+\n+Each schema should be stored in its own file with a `.pdl` extension.\n+The Pegasus code generator implements a resolver that is similar to Java\n+class loaders. If there is a reference to a named schema, the code\n+generator will try to look for a file in the code generator\u2019s resolver\n+path. The resolver path is similar to a Java classpath. The fully\n+qualified name of the named schema will be translated to a relative file\n+name. The relative file name is computed by replacing dots (\u201c.\u201d) in the\n+fully qualified name by the directory path separator (typically \u201c/\u201d) and\n+appending a `.pdl` extension. This relative file name is appended to\n+each path in the resolver path. The resolver opens each of these files\n+until it finds a file that contains the named schema.\n+\n+Pegasus supports different types of schemas: [Records](#record-type), [Primitive types](#primitive-type), [Enums](#enum-type), [Arrays](#array-type), [Maps](#map-type), [Unions](#union-type), [Fixed](#fixed-type) and [Typerefs](#typerefs). \n+Please check the following documentations for details.\n+\n+\n+## Record Type\n+Records contain any number of fields, which can be primitive types, enums, unions, maps arrays or other records.\n+\n+A basic record type can contain a few fields.\n+\n+For example:\n+```\n+import org.example.time.DateTime\n+\n+record Example {\n+  field1: string\n+  field3: DateTime\n+}\n+```\n+Record fields can be optional.\n+\n+For example:\n+```\n+namespace com.example.models\n+\n+/**\n+ * A foo record\n+ */\n+record Foo {\n+   field1: string\n+   /**\n+    * field2 is an optional field.\n+    */\n+   field2: optional string\n+}\n+```\n+\n+Record fields may have default values. The default value for a field is represented as the JSON value for the field's type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd6532824b305b8f8a43b8de3d0bd3f5e256c7c1"}, "originalPosition": 80}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64c49fddc3961ab5f2071d7ee28ca658f22ba153", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/64c49fddc3961ab5f2071d7ee28ca658f22ba153", "committedDate": "2020-01-10T23:16:56Z", "message": "Add PDL syntax doc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNDcxNTEy", "url": "https://github.com/linkedin/rest.li/pull/157#pullrequestreview-341471512", "createdAt": "2020-01-10T23:20:36Z", "commit": {"oid": "64c49fddc3961ab5f2071d7ee28ca658f22ba153"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4908, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}