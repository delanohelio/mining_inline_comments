{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5Njg0NTI3", "number": 493, "title": "Fix empty union validation to only allow validation pass when projection in union is present", "bodyText": "Before this fix, the RestLiValidationFilter will allow empty union to pass, i.e if there is a union that is an empty map, when doing the validation.\nThat is too wide open and risky. So this fix, change it  restricted only when a projection is specified in the union.", "createdAt": "2020-12-14T17:31:44Z", "url": "https://github.com/linkedin/rest.li/pull/493", "merged": true, "mergeCommit": {"oid": "fe3b606d55e27cad735352739da33f23833f7d65"}, "closed": true, "closedAt": "2020-12-16T01:37:25Z", "author": {"login": "BrianPin"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmLyT8AFqTU1MTg2MTMwNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmfJ65gH2gAyNTM5Njg0NTI3OjI2M2VjODlkZTg0MzI2M2E0MjcxYTE2MTNkMjVjMGM5MTI2OTQwZjA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxODYxMzA0", "url": "https://github.com/linkedin/rest.li/pull/493#pullrequestreview-551861304", "createdAt": "2020-12-14T20:21:07Z", "commit": {"oid": "bd549e7ff774cb02c98a1073bdffa10ea99b9e66"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMDoyMTowN1rOIFmJEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMDoyOTo1N1rOIFmuEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjczODcwNQ==", "bodyText": "The schema layer doesn't have the context about it being used in request/response. So using \"response\" here is not a good idea.\nI'd suggest calling this flag \"isPartialSchema\" to indicate this is a partial schema created from projection.\nUpdate the doc to say \"this flag indicates the union schema is a partial representation with a subset of members\" And also say this is for internal use only.", "url": "https://github.com/linkedin/rest.li/pull/493#discussion_r542738705", "createdAt": "2020-12-14T20:21:07Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/schema/UnionDataSchema.java", "diffHunk": "@@ -36,6 +36,11 @@\n  */\n public final class UnionDataSchema extends ComplexDataSchema\n {\n+  /**\n+   *\n+   */\n+  private boolean allowEmptyUnionResponse = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd549e7ff774cb02c98a1073bdffa10ea99b9e66"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjczOTE3MA==", "bodyText": "Comment these are for internal use only.", "url": "https://github.com/linkedin/rest.li/pull/493#discussion_r542739170", "createdAt": "2020-12-14T20:21:33Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/schema/UnionDataSchema.java", "diffHunk": "@@ -457,4 +462,14 @@ public static String avroUnionMemberKey(DataSchema schema)\n   private boolean _membersAliased = false;\n \n   private static final Map<String, Integer> _emptyTypesToIndexMap = Collections.emptyMap();\n+\n+  public void setAllowEmptyUnionResponse(boolean allowEmptyUnionResponse)\n+  {\n+    this.allowEmptyUnionResponse = allowEmptyUnionResponse;\n+  }\n+\n+  public boolean isAllowEmptyUnionResponse()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd549e7ff774cb02c98a1073bdffa10ea99b9e66"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc0NTQ2Mw==", "bodyText": "You can remove the part about \"specify member in projection\". It can cause confusion about this error, which if happens means the resource method didn't populate the union field correctly. Using a projection to avoid the error is not the correct way to handle it.", "url": "https://github.com/linkedin/rest.li/pull/493#discussion_r542745463", "createdAt": "2020-12-14T20:27:31Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/schema/validation/ValidateDataAgainstSchema.java", "diffHunk": "@@ -526,6 +526,10 @@ else if (_recursive)\n             validate(memberElement, memberSchema, value);\n           }\n         }\n+        else if (!schema.isAllowEmptyUnionResponse())\n+        {\n+          addMessage(element, \"DataMap should have at least one entry for a union type or specify the member in projection\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd549e7ff774cb02c98a1073bdffa10ea99b9e66"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc0NjY4OA==", "bodyText": "This should be\nnewMembers.size() < members.size() ?", "url": "https://github.com/linkedin/rest.li/pull/493#discussion_r542746688", "createdAt": "2020-12-14T20:28:39Z", "author": {"login": "karthikbalasub"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/util/ProjectionMaskApplier.java", "diffHunk": "@@ -215,6 +215,11 @@ else if (wildcardMask != null)\n \n     UnionDataSchema newUnionDataSchema = new UnionDataSchema();\n     newUnionDataSchema.setMembers(newUnionMembers, errorMessageBuilder);\n+    if (newUnionMembers.size() > 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd549e7ff774cb02c98a1073bdffa10ea99b9e66"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc0ODE3Ng==", "bodyText": "Add a testcase that projects all union members, it should also fail validation.", "url": "https://github.com/linkedin/rest.li/pull/493#discussion_r542748176", "createdAt": "2020-12-14T20:29:57Z", "author": {"login": "karthikbalasub"}, "path": "restli-int-test/src/test/java/com/linkedin/restli/examples/TestEmptyUnionValidation.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+   Copyright (c) 2018 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.restli.examples;\n+\n+import com.linkedin.data.schema.PathSpec;\n+import com.linkedin.r2.RemoteInvocationException;\n+import com.linkedin.restli.client.GetRequest;\n+import com.linkedin.restli.client.Request;\n+import com.linkedin.restli.client.Response;\n+import com.linkedin.restli.client.RestLiResponseException;\n+import com.linkedin.restli.common.BatchCollectionResponse;\n+import com.linkedin.restli.common.HttpStatus;\n+import com.linkedin.restli.examples.greetings.api.ValidateEmptyUnion;\n+import com.linkedin.restli.examples.greetings.api.ValidationDemo;\n+import com.linkedin.restli.examples.greetings.api.ValidationDemoCriteria;\n+import com.linkedin.restli.examples.greetings.client.EmptyUnionRequestBuilders;\n+import com.linkedin.restli.examples.greetings.client.GreetingsBuilders;\n+import com.linkedin.restli.examples.greetings.client.ValidationDemosRequestBuilders;\n+import com.linkedin.restli.server.validation.RestLiValidationFilter;\n+import com.linkedin.restli.test.util.RootBuilderWrapper;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestEmptyUnionValidation extends RestLiIntegrationTest\n+{\n+  @BeforeClass\n+  public void initClass() throws Exception\n+  {\n+    super.init(Collections.singletonList(new RestLiValidationFilter()));\n+  }\n+\n+  @AfterClass\n+  public void shutDown() throws Exception\n+  {\n+    super.shutdown();\n+  }\n+\n+  @Test\n+  public void testUnionEmptyWithProjection() throws RemoteInvocationException\n+  {\n+    ValidateEmptyUnion expected = new ValidateEmptyUnion();\n+    expected.setFoo(new ValidateEmptyUnion.Foo());\n+    List<PathSpec> spec = Collections.singletonList(ValidateEmptyUnion.fields().foo().Fuzz());\n+    EmptyUnionRequestBuilders requestBuilders = new EmptyUnionRequestBuilders();\n+    GetRequest<ValidateEmptyUnion> req = requestBuilders.get().id(1L).fields(spec.toArray(new PathSpec[spec.size()])).build();\n+    ValidateEmptyUnion actual = getClient().sendRequest(req).getResponse().getEntity();\n+    Assert.assertEquals(actual, expected);\n+  }\n+\n+  @Test(expectedExceptions = RestLiResponseException.class)\n+  public void testUnionEmptyWithoutProjection() throws RemoteInvocationException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd549e7ff774cb02c98a1073bdffa10ea99b9e66"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a3fd63514ce5ca1d71f9a43f67bb30ae95f2eeb", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/0a3fd63514ce5ca1d71f9a43f67bb30ae95f2eeb", "committedDate": "2020-12-15T02:33:06Z", "message": "Fix empty union validation from wide open to only open when there is projection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b197a4b60ac9826d3ed07742e5ba1cf3842bd40b", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/b197a4b60ac9826d3ed07742e5ba1cf3842bd40b", "committedDate": "2020-12-15T02:34:39Z", "message": "bump version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ae5b6e7c896ac26a8d6c9743da69afa5693b6ce", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/9ae5b6e7c896ac26a8d6c9743da69afa5693b6ce", "committedDate": "2020-12-15T02:34:44Z", "message": "address comment to be partial schema validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f815580ccc5dbb2a70f0f8fce1442106064e6d45", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/f815580ccc5dbb2a70f0f8fce1442106064e6d45", "committedDate": "2020-12-15T02:35:49Z", "message": "address comment about wording"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2880255e24ec8642b6fc3d49467eed24e771c1c4", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/2880255e24ec8642b6fc3d49467eed24e771c1c4", "committedDate": "2020-12-15T02:32:01Z", "message": "address comment about wording"}, "afterCommit": {"oid": "f815580ccc5dbb2a70f0f8fce1442106064e6d45", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/f815580ccc5dbb2a70f0f8fce1442106064e6d45", "committedDate": "2020-12-15T02:35:49Z", "message": "address comment about wording"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMjU5MjQx", "url": "https://github.com/linkedin/rest.li/pull/493#pullrequestreview-552259241", "createdAt": "2020-12-15T09:31:06Z", "commit": {"oid": "f815580ccc5dbb2a70f0f8fce1442106064e6d45"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOTozMTowNlrOIGBTeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDowNTozM1rOIGC1dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE4MzczNg==", "bodyText": "resolve conflict", "url": "https://github.com/linkedin/rest.li/pull/493#discussion_r543183736", "createdAt": "2020-12-15T09:31:06Z", "author": {"login": "karthikbalasub"}, "path": "CHANGELOG.md", "diffHunk": "@@ -4779,8 +4782,14 @@ patch operations can re-use these classes for generating patch messages.\n \n ## [0.14.1]\n \n+<<<<<<< HEAD", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f815580ccc5dbb2a70f0f8fce1442106064e6d45"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIwODEwNQ==", "bodyText": "why do you need size > 0 check?\nnewUnionmember size will be zero only if the mask is empty. Which means none of the members were projected. We should treat that as partial projection.\nIt is not possible to create that projection using pathspecs, but someone building the mask map directly can do it.", "url": "https://github.com/linkedin/rest.li/pull/493#discussion_r543208105", "createdAt": "2020-12-15T10:04:37Z", "author": {"login": "karthikbalasub"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/util/ProjectionMaskApplier.java", "diffHunk": "@@ -215,6 +215,11 @@ else if (wildcardMask != null)\n \n     UnionDataSchema newUnionDataSchema = new UnionDataSchema();\n     newUnionDataSchema.setMembers(newUnionMembers, errorMessageBuilder);\n+    if (newUnionMembers.size() > 0 && unionDataSchema.getMembers().size() > newUnionMembers.size())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f815580ccc5dbb2a70f0f8fce1442106064e6d45"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIwODgyMA==", "bodyText": "2020", "url": "https://github.com/linkedin/rest.li/pull/493#discussion_r543208820", "createdAt": "2020-12-15T10:05:33Z", "author": {"login": "karthikbalasub"}, "path": "restli-int-test/src/test/java/com/linkedin/restli/examples/TestEmptyUnionValidation.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+   Copyright (c) 2018 LinkedIn Corp.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f815580ccc5dbb2a70f0f8fce1442106064e6d45"}, "originalPosition": 2}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cf6b674d90373e1a620a44cb05caf05498b3f7e", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/2cf6b674d90373e1a620a44cb05caf05498b3f7e", "committedDate": "2020-12-15T17:51:09Z", "message": "Resolve conflict, address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f4e2a5a49db82014a22827e4184111bf831486a", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/0f4e2a5a49db82014a22827e4184111bf831486a", "committedDate": "2020-12-15T17:58:40Z", "message": "Remove the condition of zero projection to be count as partial projection"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNzI0ODQ0", "url": "https://github.com/linkedin/rest.li/pull/493#pullrequestreview-552724844", "createdAt": "2020-12-15T17:59:53Z", "commit": {"oid": "2cf6b674d90373e1a620a44cb05caf05498b3f7e"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzo1OTo1M1rOIGYkEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzo1OTo1M1rOIGYkEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU2NDgxNw==", "bodyText": "Did we release this? I don't see it in the change log", "url": "https://github.com/linkedin/rest.li/pull/493#discussion_r543564817", "createdAt": "2020-12-15T17:59:53Z", "author": {"login": "karthikbalasub"}, "path": "CHANGELOG.md", "diffHunk": "@@ -4779,8 +4782,10 @@ patch operations can re-use these classes for generating patch messages.\n \n ## [0.14.1]\n \n-[Unreleased]: https://github.com/linkedin/rest.li/compare/v29.13.0...master\n-[29.13.0]: https://github.com/linkedin/rest.li/compare/v29.12.0...v29.13.0\n+[Unreleased]: https://github.com/linkedin/rest.li/compare/v29.13.1...master\n+[29.13.1]: https://github.com/linkedin/rest.li/compare/v29.12.1...v29.13.1\n+[29.13.0]: https://github.com/linkedin/rest.li/compare/v29.12.1...v29.13.0\n+[29.12.1]: https://github.com/linkedin/rest.li/compare/v29.12.0...v29.12.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cf6b674d90373e1a620a44cb05caf05498b3f7e"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c345e0d4a416de0eadb88d25875fb279ddf08bb1", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/c345e0d4a416de0eadb88d25875fb279ddf08bb1", "committedDate": "2020-12-15T18:15:27Z", "message": "re-fix the release diff in changelog.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "263ec89de843263a4271a1613d25c0c9126940f0", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/263ec89de843263a4271a1613d25c0c9126940f0", "committedDate": "2020-12-15T19:04:15Z", "message": "fix an int test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4598, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}