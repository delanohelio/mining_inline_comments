{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNTIwNTQx", "number": 192, "title": "Fix for PDL schema cyclic referencing detection in \"includes\" and \"typeref\" ", "bodyText": "Right now PDL parser wouldn't detect cyclic referencing for \"includes\" and \"typeref\"\nThis change will fix this issue so we have feature parity between PDL and PDSC on cyclic referencing detection.", "createdAt": "2020-02-26T21:39:40Z", "url": "https://github.com/linkedin/rest.li/pull/192", "merged": true, "mergeCommit": {"oid": "927411de66802b4e7d489aa8ca4944efeae63278"}, "closed": true, "closedAt": "2020-02-27T22:18:58Z", "author": {"login": "junchuanwang"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIKzADAH2gAyMzgwNTIwNTQxOjdmZDg2NzA2YWI0Y2Q1ZjNlOWY3MzEwMDAxMjNiMmM0MGQyYzA4MmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIi1EkgH2gAyMzgwNTIwNTQxOjFkN2NhZWIyYzgyNTk5YTIyZWMxMTQ4NDFiOWNjNWMyNWYwMDIwNzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7fd86706ab4cd5f3e9f731000123b2c40d2c082c", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/7fd86706ab4cd5f3e9f731000123b2c40d2c082c", "committedDate": "2020-02-26T18:12:14Z", "message": "Fix PDL schema cyclic referencing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "526648f1a54c45f082d2c0dfb8cb629b8bbe5035", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/526648f1a54c45f082d2c0dfb8cb629b8bbe5035", "committedDate": "2020-02-26T21:38:03Z", "message": "Fix a test failure due to last changet"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1Mjg2NjUx", "url": "https://github.com/linkedin/rest.li/pull/192#pullrequestreview-365286651", "createdAt": "2020-02-26T22:19:44Z", "commit": {"oid": "526648f1a54c45f082d2c0dfb8cb629b8bbe5035"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjoxOTo0NVrOFu-ekw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjoxOTo0NVrOFu-ekw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgwMjQ1MQ==", "bodyText": "Can we use MultiFormatDataSchemaResolver instead?", "url": "https://github.com/linkedin/rest.li/pull/192#discussion_r384802451", "createdAt": "2020-02-26T22:19:45Z", "author": {"login": "karthikbalasub"}, "path": "data/src/test/java/com/linkedin/data/schema/resolver/TestDataSchemaResolver.java", "diffHunk": "@@ -460,22 +697,36 @@ public void testMapDataSchemaResolver()\n                         \"typeref has a circular reference to itself\"\n                     }\n                 }\n+        },\n+        {\n+            \"Circular reference involving typerefs, using alias\",\n+            \"pdl\",\n+            asMap(buildSystemIndependentPath(\"a1\", \"typeref1.pdl\"), \"@aliases = [\\\"typerefAlias1\\\"] typeref typeref1 = typeref2\",\n+                  buildSystemIndependentPath(\"a1\", \"typeref2.pdl\"), \"typeref typeref2 = typerefAlias1\"\n+                 ),\n+            new String[][]\n+                {\n+                    {\n+                        \"typeref1\",\n+                        ERROR,\n+                        \"typeref has a circular reference to itself\"\n+                    }\n+                }\n         }\n     };\n   }\n \n   @Test(dataProvider = \"circularReferenceData\")\n-  public void testCircularReferences(String desc, Map<String, String> testSchemas, String[][] testLookupAndExpectedResults)\n+  public void testCircularReferences(String desc, String extension, Map<String, String> testSchemas, String[][] testLookupAndExpectedResults)\n   {\n     boolean debug = false;\n \n     for (String[] testLookupAndExpectedResult : testLookupAndExpectedResults)\n     {\n-      DataSchemaResolver resolver = new MapDataSchemaResolver(\n-          SchemaParserFactory.instance(),\n-          Arrays.asList(buildSystemIndependentPath(\"a1\")),\n-          \".pdsc\", testSchemas);\n-      lookup(resolver, new String[][] { testLookupAndExpectedResult}, File.separatorChar, debug);\n+      DataSchemaResolver schemaResolver = new MapDataSchemaResolver(\n+          extension.equals(\"pdsc\") ? SchemaParserFactory.instance() : PdlSchemaParserFactory.instance(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "526648f1a54c45f082d2c0dfb8cb629b8bbe5035"}, "originalPosition": 401}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1Mzk0Njcw", "url": "https://github.com/linkedin/rest.li/pull/192#pullrequestreview-365394670", "createdAt": "2020-02-27T03:30:48Z", "commit": {"oid": "526648f1a54c45f082d2c0dfb8cb629b8bbe5035"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMzozMDo0OFrOFvEMPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMzozNDo0N1rOFvEPSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5NjA2Mg==", "bodyText": "Use com.linkedin.data.schema.SchemaFormatType here rather than a String. It's more type-safe.\nThis also gives you easy access to the parser factory instance.", "url": "https://github.com/linkedin/rest.li/pull/192#discussion_r384896062", "createdAt": "2020-02-27T03:30:48Z", "author": {"login": "evanw555"}, "path": "data/src/test/java/com/linkedin/data/schema/resolver/TestDataSchemaResolver.java", "diffHunk": "@@ -236,6 +238,7 @@ public void testMapDataSchemaResolver()\n     {\n         {\n           \"Two records including each other\",\n+            \"pdsc\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "526648f1a54c45f082d2c0dfb8cb629b8bbe5035"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5Njg0Mg==", "bodyText": "This method is now completely identical to AbstractSchemaParser#lookupName. Why don't we just delete this one and use that?", "url": "https://github.com/linkedin/rest.li/pull/192#discussion_r384896842", "createdAt": "2020-02-27T03:34:47Z", "author": {"login": "evanw555"}, "path": "data/src/main/java/com/linkedin/data/schema/grammar/PdlSchemaParser.java", "diffHunk": "@@ -1093,6 +1094,10 @@ public DataSchema lookupName(String fullName)\n     if (schema == null)\n     {\n       schema = getResolver().findDataSchema(fullName, errorMessageBuilder());\n+      if (schema != null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "526648f1a54c45f082d2c0dfb8cb629b8bbe5035"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f8425839c45d8af136e6cbb07d01dff98e9a31b", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/4f8425839c45d8af136e6cbb07d01dff98e9a31b", "committedDate": "2020-02-27T06:02:58Z", "message": "address Evan's comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1OTA0NjYy", "url": "https://github.com/linkedin/rest.li/pull/192#pullrequestreview-365904662", "createdAt": "2020-02-27T18:40:39Z", "commit": {"oid": "4f8425839c45d8af136e6cbb07d01dff98e9a31b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MDE3OTU1", "url": "https://github.com/linkedin/rest.li/pull/192#pullrequestreview-366017955", "createdAt": "2020-02-27T21:39:10Z", "commit": {"oid": "4f8425839c45d8af136e6cbb07d01dff98e9a31b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMTozOToxMFrOFviITw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMTozOToxMFrOFviITw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4NjU3NQ==", "bodyText": "As I mentioned in my previous comment, using the enum gives you easy access to the schema parser instance. You shouldn't be doing extension.equals(PDSC) ? SchemaParserFactory.instance() : PdlSchemaParserFactory.instance(). You should be doing extension.getSchemaParserFactory()", "url": "https://github.com/linkedin/rest.li/pull/192#discussion_r385386575", "createdAt": "2020-02-27T21:39:10Z", "author": {"login": "evanw555"}, "path": "data/src/test/java/com/linkedin/data/schema/resolver/TestDataSchemaResolver.java", "diffHunk": "@@ -460,22 +700,36 @@ public void testMapDataSchemaResolver()\n                         \"typeref has a circular reference to itself\"\n                     }\n                 }\n+        },\n+        {\n+            \"Circular reference involving typerefs, using alias\",\n+            PDL,\n+            asMap(buildSystemIndependentPath(\"a1\", \"typeref1.pdl\"), \"@aliases = [\\\"typerefAlias1\\\"] typeref typeref1 = typeref2\",\n+                  buildSystemIndependentPath(\"a1\", \"typeref2.pdl\"), \"typeref typeref2 = typerefAlias1\"\n+                 ),\n+            new String[][]\n+                {\n+                    {\n+                        \"typeref1\",\n+                        ERROR,\n+                        \"typeref has a circular reference to itself\"\n+                    }\n+                }\n         }\n     };\n   }\n \n   @Test(dataProvider = \"circularReferenceData\")\n-  public void testCircularReferences(String desc, Map<String, String> testSchemas, String[][] testLookupAndExpectedResults)\n+  public void testCircularReferences(String desc, SchemaFormatType extension, Map<String, String> testSchemas, String[][] testLookupAndExpectedResults)\n   {\n     boolean debug = false;\n \n     for (String[] testLookupAndExpectedResult : testLookupAndExpectedResults)\n     {\n-      DataSchemaResolver resolver = new MapDataSchemaResolver(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f8425839c45d8af136e6cbb07d01dff98e9a31b"}, "originalPosition": 405}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04d785b99f86d29e51fdd89ac98c6c0d7cce1c7c", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/04d785b99f86d29e51fdd89ac98c6c0d7cce1c7c", "committedDate": "2020-02-27T21:44:51Z", "message": "signature change in MapDataSchemaResolver, to avoid using extension"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MDI5MTYz", "url": "https://github.com/linkedin/rest.li/pull/192#pullrequestreview-366029163", "createdAt": "2020-02-27T21:58:18Z", "commit": {"oid": "04d785b99f86d29e51fdd89ac98c6c0d7cce1c7c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d7caeb2c82599a22ec114841b9cc5c25f002077", "author": {"user": {"login": "junchuanwang", "name": "Junchuan Wang"}}, "url": "https://github.com/linkedin/rest.li/commit/1d7caeb2c82599a22ec114841b9cc5c25f002077", "committedDate": "2020-02-27T22:12:13Z", "message": "Merge branch 'master' into pdl_includes_cyclicDetection"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4952, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}