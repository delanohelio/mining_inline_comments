{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNjg2NjA3", "number": 204, "title": "Make TraverseContext and some of its method in DataSchemaRichContextTraverser public so custmoized SchemaVisitor can access", "bodyText": "Allow customized implementation of DataSchemaRichContextTraverser.SchemaVisitor to access DataSchemaRichContextTraverser.TraverserContext and some of its method so that they can implement the customized logic in callbackOnContext", "createdAt": "2020-03-03T00:49:22Z", "url": "https://github.com/linkedin/rest.li/pull/204", "merged": true, "mergeCommit": {"oid": "8b4afe03dfd2c3fd79572996917aa11d249ccf71"}, "closed": true, "closedAt": "2020-03-06T08:30:41Z", "author": {"login": "junchuanwang"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJ3aVygH2gAyMzgyNjg2NjA3OjJlMTYzMDZiNDFmODU0MGY1OWViMWIzMzk5NDk0MzExY2JmNmY5OTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcK7mkVgH2gAyMzgyNjg2NjA3OmQyZWEwMjgwNmM1MTNjMzU0MzJkNjg3NmE4NjEzMzg3ZjU5ZGVhYWQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2e16306b41f8540f59eb1b3399494311cbf6f993", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/2e16306b41f8540f59eb1b3399494311cbf6f993", "committedDate": "2020-03-03T00:44:57Z", "message": "Make TraverseContext and some of its method in DataSchemaRichContextTraverser public so custmoized SchemaVisitor can access."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MjcyMzI3", "url": "https://github.com/linkedin/rest.li/pull/204#pullrequestreview-368272327", "createdAt": "2020-03-03T19:45:25Z", "commit": {"oid": "2e16306b41f8540f59eb1b3399494311cbf6f993"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTo0NToyNVrOFxUA6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTo0NToyNVrOFxUA6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1MjQ1OA==", "bodyText": "You want customized visitor to modify context?", "url": "https://github.com/linkedin/rest.li/pull/204#discussion_r387252458", "createdAt": "2020-03-03T19:45:25Z", "author": {"login": "mchen07"}, "path": "data/src/main/java/com/linkedin/data/schema/annotation/DataSchemaRichContextTraverser.java", "diffHunk": "@@ -505,6 +508,16 @@ TraverserContext getNextContext(String nextTraversePathComponent, String nextSch\n       return nextContext;\n     }\n \n+    public DataSchema getOriginalTopLevelSchema()\n+    {\n+      return _originalTopLevelSchema;\n+    }\n+\n+    void setOriginalTopLevelSchema(DataSchema originalTopLevelSchema)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e16306b41f8540f59eb1b3399494311cbf6f993"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NDE1MzU2", "url": "https://github.com/linkedin/rest.li/pull/204#pullrequestreview-368415356", "createdAt": "2020-03-04T00:06:24Z", "commit": {"oid": "2e16306b41f8540f59eb1b3399494311cbf6f993"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMDowNjoyNFrOFxbHYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMDoyMTowNVrOFxbYYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM2ODgwMw==", "bodyText": "I suggest making this a top-level class now that its scope has increased", "url": "https://github.com/linkedin/rest.li/pull/204#discussion_r387368803", "createdAt": "2020-03-04T00:06:24Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/schema/annotation/DataSchemaRichContextTraverser.java", "diffHunk": "@@ -411,7 +412,7 @@ public String formatToErrorMessage()\n    * A new {@link TraverserContext} object will be created before entering child from parent.\n    * In this way, we simulate {@link TraverserContext} as elements inside stack during recursive traversal.\n    */\n-  static class TraverserContext\n+  public static class TraverserContext", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e16306b41f8540f59eb1b3399494311cbf6f993"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM2OTE2Mg==", "bodyText": "You should make all these variables private. Package-private is still loose a constraint.\nAnd also create a final constructor so this cannot be extended.", "url": "https://github.com/linkedin/rest.li/pull/204#discussion_r387369162", "createdAt": "2020-03-04T00:07:41Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/schema/annotation/DataSchemaRichContextTraverser.java", "diffHunk": "@@ -420,6 +421,7 @@ public String formatToErrorMessage()\n     Boolean _shouldContinue = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e16306b41f8540f59eb1b3399494311cbf6f993"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM3MzE1Mw==", "bodyText": "Make all the setters private and then create a new method for getFirstContext? That way you don't have to expose the setters outside of this class.\nInfact, you should consider defining an interface for the context and then making this implementation class private.", "url": "https://github.com/linkedin/rest.li/pull/204#discussion_r387373153", "createdAt": "2020-03-04T00:21:05Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/schema/annotation/DataSchemaRichContextTraverser.java", "diffHunk": "@@ -505,6 +508,16 @@ TraverserContext getNextContext(String nextTraversePathComponent, String nextSch\n       return nextContext;\n     }\n \n+    public DataSchema getOriginalTopLevelSchema()\n+    {\n+      return _originalTopLevelSchema;\n+    }\n+\n+    void setOriginalTopLevelSchema(DataSchema originalTopLevelSchema)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1MjQ1OA=="}, "originalCommit": {"oid": "2e16306b41f8540f59eb1b3399494311cbf6f993"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7098b7477294172348d7a23458ad9a7396ebdf9b", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/7098b7477294172348d7a23458ad9a7396ebdf9b", "committedDate": "2020-03-04T22:57:53Z", "message": "created traverserContext interface and use impl class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09071afe51994e97f9252cbb1c8f5be53a9a8c86", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/09071afe51994e97f9252cbb1c8f5be53a9a8c86", "committedDate": "2020-03-04T23:06:44Z", "message": "add override annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fd0d3b81eae65e007f1fbacc532be73d3fc8946", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/1fd0d3b81eae65e007f1fbacc532be73d3fc8946", "committedDate": "2020-03-05T07:12:34Z", "message": "refactor a few public members out of DataSchemaRichContextTraverser"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5OTA3NDg0", "url": "https://github.com/linkedin/rest.li/pull/204#pullrequestreview-369907484", "createdAt": "2020-03-05T20:56:04Z", "commit": {"oid": "1fd0d3b81eae65e007f1fbacc532be73d3fc8946"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDo1NjowNFrOFyj3Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMToxMDoxNVrOFykQ2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2MDY1NQ==", "bodyText": "Add javadoc\nBased on the documentation on VistorContext, the visitor should not be modifying the context during traversal. So this method is not needed?\nAt least, make the documentation consistent.", "url": "https://github.com/linkedin/rest.li/pull/204#discussion_r388560655", "createdAt": "2020-03-05T20:56:04Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/schema/annotation/TraverserContext.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+   Copyright (c) 2019 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.data.schema.annotation;\n+\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaTraverse;\n+import com.linkedin.data.schema.PathSpec;\n+import com.linkedin.data.schema.RecordDataSchema;\n+import com.linkedin.data.schema.UnionDataSchema;\n+import java.util.ArrayDeque;\n+\n+\n+/**\n+ * Context defined by {@link DataSchemaRichContextTraverser} that will be updated and handled during traversal\n+ *\n+ * A new {@link TraverserContext} object will be created before entering child from parent.\n+ * In this way, we simulate {@link TraverserContext} as elements inside stack during recursive traversal.\n+ */\n+public interface TraverserContext\n+{\n+  /**\n+   * Use this flag to control whether DataSchemaRichContextTraverser should continue to traverse from parent to child.\n+   * This variable can be set to null if want default behavior.\n+   */\n+  void setShouldContinue(Boolean shouldContinue);\n+\n+  /**\n+   * SchemaAnnotationVisitors can set customized context\n+   * @see SchemaVisitor.VisitorContext\n+   */\n+  SchemaVisitor.VisitorContext getVisitorContext();\n+\n+  void setVisitorContext(SchemaVisitor.VisitorContext visitorContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd0d3b81eae65e007f1fbacc532be73d3fc8946"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2MzM4Mg==", "bodyText": "Be consistent on spacing. If you are leaving a new line between each method, follow it for all methods.", "url": "https://github.com/linkedin/rest.li/pull/204#discussion_r388563382", "createdAt": "2020-03-05T21:01:42Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/schema/annotation/TraverserContext.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+   Copyright (c) 2019 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.data.schema.annotation;\n+\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaTraverse;\n+import com.linkedin.data.schema.PathSpec;\n+import com.linkedin.data.schema.RecordDataSchema;\n+import com.linkedin.data.schema.UnionDataSchema;\n+import java.util.ArrayDeque;\n+\n+\n+/**\n+ * Context defined by {@link DataSchemaRichContextTraverser} that will be updated and handled during traversal\n+ *\n+ * A new {@link TraverserContext} object will be created before entering child from parent.\n+ * In this way, we simulate {@link TraverserContext} as elements inside stack during recursive traversal.\n+ */\n+public interface TraverserContext\n+{\n+  /**\n+   * Use this flag to control whether DataSchemaRichContextTraverser should continue to traverse from parent to child.\n+   * This variable can be set to null if want default behavior.\n+   */\n+  void setShouldContinue(Boolean shouldContinue);\n+\n+  /**\n+   * SchemaAnnotationVisitors can set customized context\n+   * @see SchemaVisitor.VisitorContext\n+   */\n+  SchemaVisitor.VisitorContext getVisitorContext();\n+\n+  void setVisitorContext(SchemaVisitor.VisitorContext visitorContext);\n+\n+  /**\n+   * Return the top level schema the traverser is traversing on.\n+   * @return top level schema;\n+   */\n+  DataSchema getTopLevelSchema();\n+\n+  /**\n+   * During traversal, the {@link TraverserContext} can return the current schema under traversal\n+   * @return the current schema under traversal\n+   */\n+  DataSchema getCurrentSchema();\n+\n+  /**\n+   * During traversal, the {@link TraverserContext} can return the parent schema of the current schema under traversal\n+   * @return the parent schema of the current schema.\n+   */\n+  DataSchema getParentSchema();\n+\n+  /**\n+   * If the context is passing down from a {@link RecordDataSchema}, this attribute will be set with the enclosing\n+   * {@link RecordDataSchema.Field}\n+   */\n+  RecordDataSchema.Field getEnclosingField();\n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd0d3b81eae65e007f1fbacc532be73d3fc8946"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NDIyOQ==", "bodyText": "Is setting to null same as not calling this method? explain that. Explain the default behavior of this method is not called.\nAlso wording: \"This variable can be set to null for default behavior\"", "url": "https://github.com/linkedin/rest.li/pull/204#discussion_r388564229", "createdAt": "2020-03-05T21:03:35Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/schema/annotation/TraverserContext.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+   Copyright (c) 2019 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.data.schema.annotation;\n+\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaTraverse;\n+import com.linkedin.data.schema.PathSpec;\n+import com.linkedin.data.schema.RecordDataSchema;\n+import com.linkedin.data.schema.UnionDataSchema;\n+import java.util.ArrayDeque;\n+\n+\n+/**\n+ * Context defined by {@link DataSchemaRichContextTraverser} that will be updated and handled during traversal\n+ *\n+ * A new {@link TraverserContext} object will be created before entering child from parent.\n+ * In this way, we simulate {@link TraverserContext} as elements inside stack during recursive traversal.\n+ */\n+public interface TraverserContext\n+{\n+  /**\n+   * Use this flag to control whether DataSchemaRichContextTraverser should continue to traverse from parent to child.\n+   * This variable can be set to null if want default behavior.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd0d3b81eae65e007f1fbacc532be73d3fc8946"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NDc1NA==", "bodyText": "using \"can return\" indicates, it might return null? document the scenarios", "url": "https://github.com/linkedin/rest.li/pull/204#discussion_r388564754", "createdAt": "2020-03-05T21:04:44Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/schema/annotation/TraverserContext.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+   Copyright (c) 2019 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.data.schema.annotation;\n+\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaTraverse;\n+import com.linkedin.data.schema.PathSpec;\n+import com.linkedin.data.schema.RecordDataSchema;\n+import com.linkedin.data.schema.UnionDataSchema;\n+import java.util.ArrayDeque;\n+\n+\n+/**\n+ * Context defined by {@link DataSchemaRichContextTraverser} that will be updated and handled during traversal\n+ *\n+ * A new {@link TraverserContext} object will be created before entering child from parent.\n+ * In this way, we simulate {@link TraverserContext} as elements inside stack during recursive traversal.\n+ */\n+public interface TraverserContext\n+{\n+  /**\n+   * Use this flag to control whether DataSchemaRichContextTraverser should continue to traverse from parent to child.\n+   * This variable can be set to null if want default behavior.\n+   */\n+  void setShouldContinue(Boolean shouldContinue);\n+\n+  /**\n+   * SchemaAnnotationVisitors can set customized context\n+   * @see SchemaVisitor.VisitorContext\n+   */\n+  SchemaVisitor.VisitorContext getVisitorContext();\n+\n+  void setVisitorContext(SchemaVisitor.VisitorContext visitorContext);\n+\n+  /**\n+   * Return the top level schema the traverser is traversing on.\n+   * @return top level schema;\n+   */\n+  DataSchema getTopLevelSchema();\n+\n+  /**\n+   * During traversal, the {@link TraverserContext} can return the current schema under traversal", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd0d3b81eae65e007f1fbacc532be73d3fc8946"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NDgwOQ==", "bodyText": "same here", "url": "https://github.com/linkedin/rest.li/pull/204#discussion_r388564809", "createdAt": "2020-03-05T21:04:52Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/schema/annotation/TraverserContext.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+   Copyright (c) 2019 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.data.schema.annotation;\n+\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaTraverse;\n+import com.linkedin.data.schema.PathSpec;\n+import com.linkedin.data.schema.RecordDataSchema;\n+import com.linkedin.data.schema.UnionDataSchema;\n+import java.util.ArrayDeque;\n+\n+\n+/**\n+ * Context defined by {@link DataSchemaRichContextTraverser} that will be updated and handled during traversal\n+ *\n+ * A new {@link TraverserContext} object will be created before entering child from parent.\n+ * In this way, we simulate {@link TraverserContext} as elements inside stack during recursive traversal.\n+ */\n+public interface TraverserContext\n+{\n+  /**\n+   * Use this flag to control whether DataSchemaRichContextTraverser should continue to traverse from parent to child.\n+   * This variable can be set to null if want default behavior.\n+   */\n+  void setShouldContinue(Boolean shouldContinue);\n+\n+  /**\n+   * SchemaAnnotationVisitors can set customized context\n+   * @see SchemaVisitor.VisitorContext\n+   */\n+  SchemaVisitor.VisitorContext getVisitorContext();\n+\n+  void setVisitorContext(SchemaVisitor.VisitorContext visitorContext);\n+\n+  /**\n+   * Return the top level schema the traverser is traversing on.\n+   * @return top level schema;\n+   */\n+  DataSchema getTopLevelSchema();\n+\n+  /**\n+   * During traversal, the {@link TraverserContext} can return the current schema under traversal\n+   * @return the current schema under traversal\n+   */\n+  DataSchema getCurrentSchema();\n+\n+  /**\n+   * During traversal, the {@link TraverserContext} can return the parent schema of the current schema under traversal", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd0d3b81eae65e007f1fbacc532be73d3fc8946"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NTM1Mg==", "bodyText": "CurrentSchemaEntryMode should be in its own file.", "url": "https://github.com/linkedin/rest.li/pull/204#discussion_r388565352", "createdAt": "2020-03-05T21:06:08Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/schema/annotation/TraverserContext.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+   Copyright (c) 2019 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.data.schema.annotation;\n+\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaTraverse;\n+import com.linkedin.data.schema.PathSpec;\n+import com.linkedin.data.schema.RecordDataSchema;\n+import com.linkedin.data.schema.UnionDataSchema;\n+import java.util.ArrayDeque;\n+\n+\n+/**\n+ * Context defined by {@link DataSchemaRichContextTraverser} that will be updated and handled during traversal\n+ *\n+ * A new {@link TraverserContext} object will be created before entering child from parent.\n+ * In this way, we simulate {@link TraverserContext} as elements inside stack during recursive traversal.\n+ */\n+public interface TraverserContext\n+{\n+  /**\n+   * Use this flag to control whether DataSchemaRichContextTraverser should continue to traverse from parent to child.\n+   * This variable can be set to null if want default behavior.\n+   */\n+  void setShouldContinue(Boolean shouldContinue);\n+\n+  /**\n+   * SchemaAnnotationVisitors can set customized context\n+   * @see SchemaVisitor.VisitorContext\n+   */\n+  SchemaVisitor.VisitorContext getVisitorContext();\n+\n+  void setVisitorContext(SchemaVisitor.VisitorContext visitorContext);\n+\n+  /**\n+   * Return the top level schema the traverser is traversing on.\n+   * @return top level schema;\n+   */\n+  DataSchema getTopLevelSchema();\n+\n+  /**\n+   * During traversal, the {@link TraverserContext} can return the current schema under traversal\n+   * @return the current schema under traversal\n+   */\n+  DataSchema getCurrentSchema();\n+\n+  /**\n+   * During traversal, the {@link TraverserContext} can return the parent schema of the current schema under traversal\n+   * @return the parent schema of the current schema.\n+   */\n+  DataSchema getParentSchema();\n+\n+  /**\n+   * If the context is passing down from a {@link RecordDataSchema}, this attribute will be set with the enclosing\n+   * {@link RecordDataSchema.Field}\n+   */\n+  RecordDataSchema.Field getEnclosingField();\n+  /**\n+   * If the context is passing down from a {@link UnionDataSchema}, this attribute will be set with the enclosing\n+   * {@link UnionDataSchema.Member}\n+   */\n+  UnionDataSchema.Member getEnclosingUnionMember();\n+  /**\n+   * This traverse path is a very detailed path, and is same as the path used in {@link DataSchemaTraverse}\n+   * This path's every component corresponds to a move by traverser, and its components have TypeRef components and record name.\n+   * Example:\n+   * <pre>\n+   * record Test {\n+   *   f1: record Nested {\n+   *     f2: typeref TypeRef_Name=int\n+   *   }\n+   * }\n+   * </pre>\n+   * The traversePath to the f2 field would be as detailed as \"/Test/f1/Nested/f2/TypeRef_Name/int\"\n+   * Meanwhile its schema pathSpec is as simple as \"/f1/f2\"\n+   *\n+   */\n+  ArrayDeque<String> getTraversePath();\n+  /**\n+   * This is the path components corresponds to {@link PathSpec}, it would not have TypeRef component inside its component list, also it would only contain field's name\n+   */\n+  ArrayDeque<String> getSchemaPathSpec();\n+  /**\n+   * This attribute tells how currentSchema stored in the context is linked from its parentSchema\n+   * For example, if the {@link DataSchemaRichContextTraverser.CurrentSchemaEntryMode} specify the currentSchema is an union member of parent Schema,\n+   * User can expect parentSchema is a {@link UnionDataSchema} and the {@link #getEnclosingUnionMember} should return the\n+   * enclosing union member that stores the current schema.\n+   *\n+   * @see DataSchemaRichContextTraverser.CurrentSchemaEntryMode", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd0d3b81eae65e007f1fbacc532be73d3fc8946"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NjU3NQ==", "bodyText": "Prefer using third person in the docs. eg,\n\"In this way, TraverserContext behaves similar to elements inside a stack..\"", "url": "https://github.com/linkedin/rest.li/pull/204#discussion_r388566575", "createdAt": "2020-03-05T21:08:53Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/schema/annotation/TraverserContext.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+   Copyright (c) 2019 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.data.schema.annotation;\n+\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaTraverse;\n+import com.linkedin.data.schema.PathSpec;\n+import com.linkedin.data.schema.RecordDataSchema;\n+import com.linkedin.data.schema.UnionDataSchema;\n+import java.util.ArrayDeque;\n+\n+\n+/**\n+ * Context defined by {@link DataSchemaRichContextTraverser} that will be updated and handled during traversal\n+ *\n+ * A new {@link TraverserContext} object will be created before entering child from parent.\n+ * In this way, we simulate {@link TraverserContext} as elements inside stack during recursive traversal.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd0d3b81eae65e007f1fbacc532be73d3fc8946"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NzI1OQ==", "bodyText": "This should be in its own file based on the style guide we follow", "url": "https://github.com/linkedin/rest.li/pull/204#discussion_r388567259", "createdAt": "2020-03-05T21:10:15Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/schema/annotation/DataSchemaRichContextTraverser.java", "diffHunk": "@@ -216,273 +210,39 @@ public static boolean isLeafSchema(DataSchema dataSchema)\n            || (dataSchema.getType() == DataSchema.Type.ENUM);\n   }\n \n-  /**\n-   * Interface for SchemaVisitor, which will be called by {@link DataSchemaRichContextTraverser}.\n-   */\n-  public interface SchemaVisitor\n-  {\n-    /**\n-     * The callback function that will be called by {@link DataSchemaRichContextTraverser} visiting the dataSchema under traversal.\n-     * This function will be called TWICE within {@link DataSchemaRichContextTraverser}, during two {@link DataSchemaTraverse.Order}s\n-     * {@link DataSchemaTraverse.Order#PRE_ORDER} and {@link DataSchemaTraverse.Order#POST_ORDER} respectively.\n-     *\n-     * @param context\n-     * @param order the order given by {@link DataSchemaRichContextTraverser} to tell whether this call happens during pre order or post order\n-     */\n-    void callbackOnContext(TraverserContext context, DataSchemaTraverse.Order order);\n-\n-    /**\n-     * {@link SchemaVisitor} implements this method to return an initial {@link VisitorContext}\n-     * {@link VisitorContext} will be stored inside {@link DataSchemaRichContextTraverser.TraverserContext} and then\n-     * passed to {@link SchemaVisitor} during recursive traversal\n-     *\n-     * @return an initial {@link VisitorContext} that will be stored by {@link SchemaVisitor}\n-     *\n-     * @see VisitorContext\n-     */\n-    VisitorContext getInitialVisitorContext();\n-\n-    /**\n-     * The visitor should store a {@link VisitorTraversalResult} which stores this visitor's traversal result.\n-     *\n-     * @return traversal result after the visitor traversed the schema\n-     */\n-    VisitorTraversalResult getVisitorTraversalResult();\n-  }\n-\n-  /**\n-   * A context that is defined and handled by {@link SchemaVisitor}\n-   *\n-   * The {@link DataSchemaRichContextTraverser} will get the initial context and then\n-   * passing this as part of {@link DataSchemaRichContextTraverser.TraverserContext}\n-   *\n-   * {@link SchemaVisitor} implementations can store customized information that want to pass during recursive traversal here\n-   * similar to how {@link DataSchemaRichContextTraverser.TraverserContext} is used.\n-   *\n-   * @see DataSchemaRichContextTraverser.TraverserContext\n-   */\n-  public interface VisitorContext\n+  private static class TraverserContextImpl implements TraverserContext", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd0d3b81eae65e007f1fbacc532be73d3fc8946"}, "originalPosition": 109}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4eb3f35b411bb03ff6e224bfb7236dd648ada911", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/4eb3f35b411bb03ff6e224bfb7236dd648ada911", "committedDate": "2020-03-06T03:03:25Z", "message": "Edit javadocs in TraverserContext"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f1b4becf89c1f53d15247f974d636980a9b1cdb", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/2f1b4becf89c1f53d15247f974d636980a9b1cdb", "committedDate": "2020-03-06T03:20:58Z", "message": "Address Karthik's comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f61dbb1a31a0e94ab3656c79d45c0662b57c9b9", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/5f61dbb1a31a0e94ab3656c79d45c0662b57c9b9", "committedDate": "2020-03-06T03:26:42Z", "message": "Adjust a type"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMDY1MzEz", "url": "https://github.com/linkedin/rest.li/pull/204#pullrequestreview-370065313", "createdAt": "2020-03-06T03:39:55Z", "commit": {"oid": "5f61dbb1a31a0e94ab3656c79d45c0662b57c9b9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2ea02806c513c35432d6876a8613387f59deaad", "author": {"user": {"login": "junchuanwang", "name": "Junchuan Wang"}}, "url": "https://github.com/linkedin/rest.li/commit/d2ea02806c513c35432d6876a8613387f59deaad", "committedDate": "2020-03-06T08:11:51Z", "message": "Merge branch 'master' into captain_proj_support"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4966, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}