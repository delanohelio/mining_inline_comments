{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMzM1NDky", "number": 460, "title": "Performance improved: add lazy instantiation of Throwable objects for\u2026", "bodyText": "\u2026 timeout errors", "createdAt": "2020-10-26T22:07:30Z", "url": "https://github.com/linkedin/rest.li/pull/460", "merged": true, "mergeCommit": {"oid": "c7d9d4a9226ba6a2d852fe40d3ac388d39b28a55"}, "closed": true, "closedAt": "2020-11-12T22:20:01Z", "author": {"login": "cx-super"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWuIFdAFqTUxODA2MjUxNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdb5g9ngBqjM5OTA3NjU3NTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDYyNTE3", "url": "https://github.com/linkedin/rest.li/pull/460#pullrequestreview-518062517", "createdAt": "2020-10-27T19:23:27Z", "commit": {"oid": "94abfbdbb36d85cbdb26caa41d6d46b0aec38b29"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOToyMzoyOFrOHpM8XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOToyNzoyOFrOHpNJ1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk2NTcyNQ==", "bodyText": "Do we need this change in the interface? Since this is leverage only inside TimeoutCallback, Why don't we resolve the lambda inside the TimeoutException itself while calling onError?", "url": "https://github.com/linkedin/rest.li/pull/460#discussion_r512965725", "createdAt": "2020-10-27T19:23:28Z", "author": {"login": "nizarm"}, "path": "pegasus-common/src/main/java/com/linkedin/common/callback/Callback.java", "diffHunk": "@@ -32,4 +35,13 @@\n    * @param e the error\n    */\n   void onError(Throwable e);\n+\n+  /**\n+   * Called with lazy Throwable creation if the asynchronous operation failed with an error\n+   * @param throwableSupplier the supplier to create Throwable when needed\n+   */\n+  default void onError(Supplier<Throwable> throwableSupplier)\n+  {\n+    onError(throwableSupplier.get());\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94abfbdbb36d85cbdb26caa41d6d46b0aec38b29"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk2OTE3NA==", "bodyText": "Now instead of creating a throwable object, we are creating a lambda. How can we be sure that the cost of a lambda is smaller than the cost of the throwable object?", "url": "https://github.com/linkedin/rest.li/pull/460#discussion_r512969174", "createdAt": "2020-10-27T19:27:28Z", "author": {"login": "nizarm"}, "path": "r2-netty/src/main/java/com/linkedin/r2/netty/client/http2/Http2ChannelLifecycle.java", "diffHunk": "@@ -221,7 +221,7 @@ public void onSuccess(Channel channel)\n           }\n         });\n       }\n-    }, new ObjectCreationTimeoutException(\n+    }, () -> new ObjectCreationTimeoutException(\n     \"Exceeded creation timeout of \" + _channelCreationTimeoutMs + \"ms: for HTTP/2 parent channel, remote=\" + _address)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94abfbdbb36d85cbdb26caa41d6d46b0aec38b29"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MjMyNTEz", "url": "https://github.com/linkedin/rest.li/pull/460#pullrequestreview-518232513", "createdAt": "2020-10-27T23:53:01Z", "commit": {"oid": "94abfbdbb36d85cbdb26caa41d6d46b0aec38b29"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMzo1MzowMVrOHpVFaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMzo1MzowMVrOHpVFaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5OTExMw==", "bodyText": "Also, note that this code path only gets invoked when there are no spare channels in the pool for the incoming request. This is not invoked for every request!", "url": "https://github.com/linkedin/rest.li/pull/460#discussion_r513099113", "createdAt": "2020-10-27T23:53:01Z", "author": {"login": "nizarm"}, "path": "r2-netty/src/main/java/com/linkedin/r2/netty/client/http2/Http2ChannelLifecycle.java", "diffHunk": "@@ -221,7 +221,7 @@ public void onSuccess(Channel channel)\n           }\n         });\n       }\n-    }, new ObjectCreationTimeoutException(\n+    }, () -> new ObjectCreationTimeoutException(\n     \"Exceeded creation timeout of \" + _channelCreationTimeoutMs + \"ms: for HTTP/2 parent channel, remote=\" + _address)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94abfbdbb36d85cbdb26caa41d6d46b0aec38b29"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MjM0MTE3", "url": "https://github.com/linkedin/rest.li/pull/460#pullrequestreview-518234117", "createdAt": "2020-10-27T23:57:27Z", "commit": {"oid": "94abfbdbb36d85cbdb26caa41d6d46b0aec38b29"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMzo1NzoyN1rOHpVLGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMzo1NzoyN1rOHpVLGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEwMDU3MQ==", "bodyText": "The default method introduced in Callback.java can be avoided if we invoke as follows\ncallbackIfTimeout -> callbackIfTimeout.onError(timeoutThrowableSupplier.get())", "url": "https://github.com/linkedin/rest.li/pull/460#discussion_r513100571", "createdAt": "2020-10-27T23:57:27Z", "author": {"login": "nizarm"}, "path": "r2-core/src/main/java/com/linkedin/r2/transport/http/client/TimeoutCallback.java", "diffHunk": "@@ -67,13 +68,30 @@ public TimeoutCallback(ScheduledExecutorService executor, long timeout, TimeUnit\n    * @param timeoutUnit the {@link TimeUnit} for the timeout parameter.\n    * @param callback the {@link Callback} to be invoked on success or error.\n    * @param timeoutThrowable the custom exception that will be used during the timeout\n+   * @Deprecated use {@link #TimeoutCallback(ScheduledExecutorService, long, TimeUnit, Callback, Supplier)} instead\n    */\n+  @Deprecated\n   public TimeoutCallback(ScheduledExecutorService executor, long timeout, TimeUnit timeoutUnit,\n       final Callback<T> callback, final Throwable timeoutThrowable)\n   {\n     _timeout = new SingleTimeout<>(executor, timeout, timeoutUnit, callback, (callbackIfTimeout) -> callbackIfTimeout.onError(timeoutThrowable));\n   }\n \n+  /**\n+   * Construct a new instance.\n+   *\n+   * @param executor the {@link ScheduledExecutorService} used to schedule the timeout\n+   * @param timeout the timeout delay, in the specified {@link TimeUnit}.\n+   * @param timeoutUnit the {@link TimeUnit} for the timeout parameter.\n+   * @param callback the {@link Callback} to be invoked on success or error.\n+   * @param timeoutThrowableSupplier the custom exception supplier that will be used during the timeout\n+   */\n+  public TimeoutCallback(ScheduledExecutorService executor, long timeout, TimeUnit timeoutUnit,\n+      final Callback<T> callback, final Supplier<Throwable> timeoutThrowableSupplier)\n+  {\n+    _timeout = new SingleTimeout<>(executor, timeout, timeoutUnit, callback, callbackIfTimeout -> callbackIfTimeout.onError(timeoutThrowableSupplier));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94abfbdbb36d85cbdb26caa41d6d46b0aec38b29"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MjkxOTI0", "url": "https://github.com/linkedin/rest.li/pull/460#pullrequestreview-518291924", "createdAt": "2020-10-28T03:03:45Z", "commit": {"oid": "3eadd54531671813b1e832778e0e6bedec497a7e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NDc1Mzkz", "url": "https://github.com/linkedin/rest.li/pull/460#pullrequestreview-518475393", "createdAt": "2020-10-28T09:38:25Z", "commit": {"oid": "94abfbdbb36d85cbdb26caa41d6d46b0aec38b29"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOTozODoyNVrOHphazA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOTozODoyNVrOHphazA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMwMTE5Ng==", "bodyText": "Recommend to avoid this change to a simple interface. I think the suggestion below for calling supplier.get() can help us avoid the need of this change.", "url": "https://github.com/linkedin/rest.li/pull/460#discussion_r513301196", "createdAt": "2020-10-28T09:38:25Z", "author": {"login": "ssheng"}, "path": "pegasus-common/src/main/java/com/linkedin/common/callback/Callback.java", "diffHunk": "@@ -32,4 +35,13 @@\n    * @param e the error\n    */\n   void onError(Throwable e);\n+\n+  /**\n+   * Called with lazy Throwable creation if the asynchronous operation failed with an error\n+   * @param throwableSupplier the supplier to create Throwable when needed\n+   */\n+  default void onError(Supplier<Throwable> throwableSupplier)\n+  {\n+    onError(throwableSupplier.get());\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94abfbdbb36d85cbdb26caa41d6d46b0aec38b29"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0eb3ced006f54c92d3c0113214f2db20c907105", "author": {"user": {"login": "cx-super", "name": "Chao Xu"}}, "url": "https://github.com/linkedin/rest.li/commit/d0eb3ced006f54c92d3c0113214f2db20c907105", "committedDate": "2020-11-12T21:32:06Z", "message": "Performance improved: add lazy instantiation of Throwable objects for timeout errors"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3eadd54531671813b1e832778e0e6bedec497a7e", "author": {"user": {"login": "cx-super", "name": "Chao Xu"}}, "url": "https://github.com/linkedin/rest.li/commit/3eadd54531671813b1e832778e0e6bedec497a7e", "committedDate": "2020-10-27T20:37:33Z", "message": "Merge branch 'master' into performance"}, "afterCommit": {"oid": "d0eb3ced006f54c92d3c0113214f2db20c907105", "author": {"user": {"login": "cx-super", "name": "Chao Xu"}}, "url": "https://github.com/linkedin/rest.li/commit/d0eb3ced006f54c92d3c0113214f2db20c907105", "committedDate": "2020-11-12T21:32:06Z", "message": "Performance improved: add lazy instantiation of Throwable objects for timeout errors"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4725, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}