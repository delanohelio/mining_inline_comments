{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5NDcxMjc2", "number": 477, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDowNDoyOVrOE4aP2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDowNjowM1rOE4aQ_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NTg1NzUyOnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/strategies/relative/StateUpdater.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDowNDoyOVrOHyUArw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDowNDoyOVrOHyUArw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxODcwMw==", "bodyText": "minor: bracket on the new line", "url": "https://github.com/linkedin/rest.li/pull/477#discussion_r522518703", "createdAt": "2020-11-13T00:04:29Z", "author": {"login": "rickzx"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/strategies/relative/StateUpdater.java", "diffHunk": "@@ -313,9 +313,16 @@ else if (trackerClientState.getHealthScore() < MAX_HEALTH_SCORE\n       }\n       else\n       {\n-        // If it is a new client, we directly set health score as the initial health score to initialize\n-        trackerClientStateMap.put(trackerClient, new TrackerClientState(_relativeStrategyProperties.getInitialHealthScore(),\n-            _relativeStrategyProperties.getMinCallCount()));\n+        // Initializing a new client score\n+        if (trackerClient.doNotSlowStart())\n+        {\n+          trackerClientStateMap.put(trackerClient, new TrackerClientState(MAX_HEALTH_SCORE,\n+              _relativeStrategyProperties.getMinCallCount()));\n+        }\n+        else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b586a0d9a832e866b02273f7943e628081996299"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NTg2MDQ2OnYy", "diffSide": "RIGHT", "path": "d2/src/test/java/com/linkedin/d2/balancer/strategies/relative/StateUpdaterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDowNjowM1rOHyUCfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDowNjowM1rOHyUCfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxOTE2NA==", "bodyText": "minor: bracket on the new line", "url": "https://github.com/linkedin/rest.li/pull/477#discussion_r522519164", "createdAt": "2020-11-13T00:06:03Z", "author": {"login": "rickzx"}, "path": "d2/src/test/java/com/linkedin/d2/balancer/strategies/relative/StateUpdaterTest.java", "diffHunk": "@@ -97,25 +97,43 @@ public void testInitializePartition(int partitionId)\n         };\n   }\n \n-  @Test\n-  public void testInitializePartitionWithSlowStartInitialHealthScore()\n+  @Test(dataProvider = \"doNotSlowStart\")\n+  public void testInitializePartitionWithSlowStartInitialHealthScore(boolean doNotSlowStart)\n   {\n     double initialHealthScore = 0.01;\n     D2RelativeStrategyProperties relativeStrategyProperties = new D2RelativeStrategyProperties()\n         .setInitialHealthScore(initialHealthScore);\n     setup(relativeStrategyProperties, new ConcurrentHashMap<>());\n \n     List<TrackerClient> trackerClients = TrackerClientMockHelper.mockTrackerClients(2,\n-        Arrays.asList(20, 20), Arrays.asList(10, 10), Arrays.asList(200L, 500L), Arrays.asList(100L, 200L), Arrays.asList(0, 0));\n+        Arrays.asList(20, 20), Arrays.asList(10, 10), Arrays.asList(200L, 500L), Arrays.asList(100L, 200L), Arrays.asList(0, 0), doNotSlowStart);\n \n     assertTrue(_stateUpdater.getPointsMap(DEFAULT_PARTITION_ID).isEmpty(), \"There should be no state before initialization\");\n \n     _stateUpdater.updateState(new HashSet<>(trackerClients), DEFAULT_PARTITION_ID, DEFAULT_CLUSTER_GENERATION_ID);\n \n-    assertEquals(_stateUpdater.getPointsMap(DEFAULT_PARTITION_ID).get(trackerClients.get(0).getUri()).intValue(),\n-        (int) (initialHealthScore * RelativeLoadBalancerStrategyFactory.DEFAULT_POINTS_PER_WEIGHT));\n-    assertEquals(_stateUpdater.getPointsMap(DEFAULT_PARTITION_ID).get(trackerClients.get(1).getUri()).intValue(),\n-        (int) (initialHealthScore * RelativeLoadBalancerStrategyFactory.DEFAULT_POINTS_PER_WEIGHT));\n+    if (!doNotSlowStart)\n+    {\n+      assertEquals(_stateUpdater.getPointsMap(DEFAULT_PARTITION_ID).get(trackerClients.get(0).getUri()).intValue(),\n+          (int) (initialHealthScore * RelativeLoadBalancerStrategyFactory.DEFAULT_POINTS_PER_WEIGHT));\n+      assertEquals(_stateUpdater.getPointsMap(DEFAULT_PARTITION_ID).get(trackerClients.get(1).getUri()).intValue(),\n+          (int) (initialHealthScore * RelativeLoadBalancerStrategyFactory.DEFAULT_POINTS_PER_WEIGHT));\n+    }\n+    else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b586a0d9a832e866b02273f7943e628081996299"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 263, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}