{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzOTUzODE0", "number": 235, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNTozOTo1MFrODrf2jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMjozNTozNFrODs7FyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTM3MjMxOnYy", "diffSide": "RIGHT", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNTozOTo1MFrOF74CJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzo1OTo0MVrOF8TjKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMyODM1Ng==", "bodyText": "add some debug?", "url": "https://github.com/linkedin/rest.li/pull/235#discussion_r398328356", "createdAt": "2020-03-26T05:39:50Z", "author": {"login": "junchuanwang"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -913,6 +921,41 @@ protected void configureGeneratedSourcesAndJavadoc(Project project)\n     }\n   }\n \n+  protected void configureExtensionSchemaValidation(Project project, SourceSet sourceSet)\n+  {\n+    // extension schema  directory\n+    File extensionSchemaDir = project.file(getExtensionSchemaPath(project, sourceSet));\n+\n+    if (SharedFileUtils.getSuffixedFiles(project, extensionSchemaDir, PDL_FILE_SUFFIX).isEmpty())\n+    {\n+      return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0209d8176af3a4ea0e1b88e3bc32ce4c7596df6"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc3OTE3Nw==", "bodyText": "This task should be run during build time by default. If there is no extension schema, it will not run. Do you think adding debug info here will confuse people if they don't use ER.", "url": "https://github.com/linkedin/rest.li/pull/235#discussion_r398779177", "createdAt": "2020-03-26T17:59:41Z", "author": {"login": "nickibi"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -913,6 +921,41 @@ protected void configureGeneratedSourcesAndJavadoc(Project project)\n     }\n   }\n \n+  protected void configureExtensionSchemaValidation(Project project, SourceSet sourceSet)\n+  {\n+    // extension schema  directory\n+    File extensionSchemaDir = project.file(getExtensionSchemaPath(project, sourceSet));\n+\n+    if (SharedFileUtils.getSuffixedFiles(project, extensionSchemaDir, PDL_FILE_SUFFIX).isEmpty())\n+    {\n+      return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMyODM1Ng=="}, "originalCommit": {"oid": "f0209d8176af3a4ea0e1b88e3bc32ce4c7596df6"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTM4NTMxOnYy", "diffSide": "RIGHT", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNTo0NzoxNFrOF74JzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODowMDoxMVrOF8TkcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMzMDMxNw==", "bodyText": "Where is this used? I didn't see", "url": "https://github.com/linkedin/rest.li/pull/235#discussion_r398330317", "createdAt": "2020-03-26T05:47:14Z", "author": {"login": "junchuanwang"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -721,6 +722,11 @@ public void apply(Project project)\n     // and validate.\n     Configuration schemaAnnotationHandler = configurations.maybeCreate(\"schemaAnnotationHandler\");\n \n+    // configuration for parsing and validating extension schemas during build time.\n+    //\n+    // publish extension schemas into extension schema Jar once the validation passes.\n+    Configuration extensionSchema = configurations.maybeCreate(\"extensionSchema\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0209d8176af3a4ea0e1b88e3bc32ce4c7596df6"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc3OTUwNA==", "bodyText": "It is used in line 956.", "url": "https://github.com/linkedin/rest.li/pull/235#discussion_r398779504", "createdAt": "2020-03-26T18:00:11Z", "author": {"login": "nickibi"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -721,6 +722,11 @@ public void apply(Project project)\n     // and validate.\n     Configuration schemaAnnotationHandler = configurations.maybeCreate(\"schemaAnnotationHandler\");\n \n+    // configuration for parsing and validating extension schemas during build time.\n+    //\n+    // publish extension schemas into extension schema Jar once the validation passes.\n+    Configuration extensionSchema = configurations.maybeCreate(\"extensionSchema\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMzMDMxNw=="}, "originalCommit": {"oid": "f0209d8176af3a4ea0e1b88e3bc32ce4c7596df6"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTM4Nzc2OnYy", "diffSide": "RIGHT", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidation.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNTo0ODoxMFrOF74LBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDoxOToyMFrOF96pew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMzMDYzMQ==", "bodyText": "Rename this to end with \"cmdLineApp\" to follow convention.", "url": "https://github.com/linkedin/rest.li/pull/235#discussion_r398330631", "createdAt": "2020-03-26T05:48:10Z", "author": {"login": "junchuanwang"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidation.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.data;\n+\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaResolver;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.RecordDataSchema;\n+import com.linkedin.data.schema.grammar.PdlSchemaParser;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.GnuParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.OptionBuilder;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ExtensionSchemaValidation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0209d8176af3a4ea0e1b88e3bc32ce4c7596df6"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc4MTE0NA==", "bodyText": "Follow what convention? All the classes under com/linkedin/restli/tools/data are not end with \"cmdLineApp\".", "url": "https://github.com/linkedin/rest.li/pull/235#discussion_r398781144", "createdAt": "2020-03-26T18:02:37Z", "author": {"login": "nickibi"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidation.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.data;\n+\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaResolver;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.RecordDataSchema;\n+import com.linkedin.data.schema.grammar.PdlSchemaParser;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.GnuParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.OptionBuilder;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ExtensionSchemaValidation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMzMDYzMQ=="}, "originalCommit": {"oid": "f0209d8176af3a4ea0e1b88e3bc32ce4c7596df6"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkxNjE1OQ==", "bodyText": "I believe that is not correct due to historical reasons. We should from now on call all newly created file with \"cmdLineApp\" because they can be used as command line app:\n    getProject().javaexec(javaExecSpec -> {\n       javaExecSpec.setMain(\"com.linkedin.restli.tools.data.ExtensionSchemaValidation\");\n       javaExecSpec.setClasspath(_pathedClasspath);\n       javaExecSpec.args(resolverPathStr);\n       javaExecSpec.args(_inputDir.getAbsolutePath());\n     });", "url": "https://github.com/linkedin/rest.li/pull/235#discussion_r399916159", "createdAt": "2020-03-30T04:04:41Z", "author": {"login": "junchuanwang"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidation.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.data;\n+\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaResolver;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.RecordDataSchema;\n+import com.linkedin.data.schema.grammar.PdlSchemaParser;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.GnuParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.OptionBuilder;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ExtensionSchemaValidation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMzMDYzMQ=="}, "originalCommit": {"oid": "f0209d8176af3a4ea0e1b88e3bc32ce4c7596df6"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ2ODM0Nw==", "bodyText": "Updated the class name to \"ExtensionSchemaValidationCmdLineApp\"", "url": "https://github.com/linkedin/rest.li/pull/235#discussion_r400468347", "createdAt": "2020-03-30T20:19:20Z", "author": {"login": "nickibi"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidation.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.data;\n+\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaResolver;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.RecordDataSchema;\n+import com.linkedin.data.schema.grammar.PdlSchemaParser;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.GnuParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.OptionBuilder;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ExtensionSchemaValidation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMzMDYzMQ=="}, "originalCommit": {"oid": "f0209d8176af3a4ea0e1b88e3bc32ce4c7596df6"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTM4OTA2OnYy", "diffSide": "RIGHT", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidation.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNTo0ODo0N1rOF74LzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjo1NDozNlrOF851xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMzMDgyOA==", "bodyText": "nits: Wrong arguments", "url": "https://github.com/linkedin/rest.li/pull/235#discussion_r398330828", "createdAt": "2020-03-26T05:48:47Z", "author": {"login": "junchuanwang"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidation.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.data;\n+\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaResolver;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.RecordDataSchema;\n+import com.linkedin.data.schema.grammar.PdlSchemaParser;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.GnuParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.OptionBuilder;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ExtensionSchemaValidation\n+{\n+  private static final Logger _logger = LoggerFactory.getLogger(ExtensionSchemaValidation.class);\n+  private static final Options _options = new Options();\n+  private static final String _pdl = \"pdl\";\n+\n+  static\n+  {\n+    _options.addOption(OptionBuilder.withLongOpt(\"help\")\n+        .withDescription(\"Print help\")\n+        .create('h'));\n+  }\n+\n+  public static void main(String[] args) throws Exception\n+  {\n+    try {\n+      final CommandLineParser parser = new GnuParser();\n+      CommandLine cl = parser.parse(_options, args);\n+\n+      if (cl.hasOption('h'))\n+      {\n+        help();\n+        System.exit(0);\n+      }\n+\n+      String[] cliArgs = cl.getArgs();\n+      if (cliArgs.length != 2)\n+      {\n+        _logger.error(\"Wrong argument given\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0209d8176af3a4ea0e1b88e3bc32ce4c7596df6"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg5NDc3MQ==", "bodyText": "nit: Invalid arguments", "url": "https://github.com/linkedin/rest.li/pull/235#discussion_r398894771", "createdAt": "2020-03-26T21:10:11Z", "author": {"login": "evanw555"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidation.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.data;\n+\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaResolver;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.RecordDataSchema;\n+import com.linkedin.data.schema.grammar.PdlSchemaParser;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.GnuParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.OptionBuilder;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ExtensionSchemaValidation\n+{\n+  private static final Logger _logger = LoggerFactory.getLogger(ExtensionSchemaValidation.class);\n+  private static final Options _options = new Options();\n+  private static final String _pdl = \"pdl\";\n+\n+  static\n+  {\n+    _options.addOption(OptionBuilder.withLongOpt(\"help\")\n+        .withDescription(\"Print help\")\n+        .create('h'));\n+  }\n+\n+  public static void main(String[] args) throws Exception\n+  {\n+    try {\n+      final CommandLineParser parser = new GnuParser();\n+      CommandLine cl = parser.parse(_options, args);\n+\n+      if (cl.hasOption('h'))\n+      {\n+        help();\n+        System.exit(0);\n+      }\n+\n+      String[] cliArgs = cl.getArgs();\n+      if (cliArgs.length != 2)\n+      {\n+        _logger.error(\"Wrong argument given\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMzMDgyOA=="}, "originalCommit": {"oid": "f0209d8176af3a4ea0e1b88e3bc32ce4c7596df6"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwNjUzMg==", "bodyText": "Fixed the log.", "url": "https://github.com/linkedin/rest.li/pull/235#discussion_r399406532", "createdAt": "2020-03-27T16:54:36Z", "author": {"login": "nickibi"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidation.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.data;\n+\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaResolver;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.RecordDataSchema;\n+import com.linkedin.data.schema.grammar.PdlSchemaParser;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.GnuParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.OptionBuilder;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ExtensionSchemaValidation\n+{\n+  private static final Logger _logger = LoggerFactory.getLogger(ExtensionSchemaValidation.class);\n+  private static final Options _options = new Options();\n+  private static final String _pdl = \"pdl\";\n+\n+  static\n+  {\n+    _options.addOption(OptionBuilder.withLongOpt(\"help\")\n+        .withDescription(\"Print help\")\n+        .create('h'));\n+  }\n+\n+  public static void main(String[] args) throws Exception\n+  {\n+    try {\n+      final CommandLineParser parser = new GnuParser();\n+      CommandLine cl = parser.parse(_options, args);\n+\n+      if (cl.hasOption('h'))\n+      {\n+        help();\n+        System.exit(0);\n+      }\n+\n+      String[] cliArgs = cl.getArgs();\n+      if (cliArgs.length != 2)\n+      {\n+        _logger.error(\"Wrong argument given\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMzMDgyOA=="}, "originalCommit": {"oid": "f0209d8176af3a4ea0e1b88e3bc32ce4c7596df6"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTM5MTk5OnYy", "diffSide": "RIGHT", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNTo1MDoyN1rOF74New==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjo1Mzo1OVrOF850Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMzMTI1OQ==", "bodyText": "Should give the reason", "url": "https://github.com/linkedin/rest.li/pull/235#discussion_r398331259", "createdAt": "2020-03-26T05:50:27Z", "author": {"login": "junchuanwang"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidation.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.data;\n+\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaResolver;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.RecordDataSchema;\n+import com.linkedin.data.schema.grammar.PdlSchemaParser;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.GnuParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.OptionBuilder;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ExtensionSchemaValidation\n+{\n+  private static final Logger _logger = LoggerFactory.getLogger(ExtensionSchemaValidation.class);\n+  private static final Options _options = new Options();\n+  private static final String _pdl = \"pdl\";\n+\n+  static\n+  {\n+    _options.addOption(OptionBuilder.withLongOpt(\"help\")\n+        .withDescription(\"Print help\")\n+        .create('h'));\n+  }\n+\n+  public static void main(String[] args) throws Exception\n+  {\n+    try {\n+      final CommandLineParser parser = new GnuParser();\n+      CommandLine cl = parser.parse(_options, args);\n+\n+      if (cl.hasOption('h'))\n+      {\n+        help();\n+        System.exit(0);\n+      }\n+\n+      String[] cliArgs = cl.getArgs();\n+      if (cliArgs.length != 2)\n+      {\n+        _logger.error(\"Wrong argument given\");\n+        help();\n+        System.exit(1);\n+      }\n+      int i = 0;\n+      String resolverPath = cliArgs[i++];\n+      String inputPath = cliArgs[i];\n+\n+      File inputDir = new File(inputPath);\n+\n+      if (!inputDir.exists() || !inputDir.canRead()) {\n+        _logger.error(\"Input directory does not exist or cannot be read: \" + inputDir.getAbsolutePath());\n+        System.exit(1);\n+      }\n+\n+      parseAndValidateExtensionSchemas(resolverPath, inputDir);\n+    }\n+    catch (ParseException e)\n+    {\n+      _logger.error(\"Invalid arguments: \" + e.getMessage());\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static void parseAndValidateExtensionSchemas(String resolverPath, File inputDir) throws IOException\n+  {\n+    // Parse each extension schema and validate it\n+    Iterator<File> iterator = FileUtils.iterateFiles(inputDir, new String[]{_pdl}, true);\n+    while(iterator.hasNext())\n+    {\n+      File inputFile = iterator.next();\n+      DataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(resolverPath);\n+      PdlSchemaParser parser = new PdlSchemaParser(resolver);\n+      parser.parse(new FileInputStream(inputFile));\n+      if (parser.hasError())\n+      {\n+        _logger.error(parser.errorMessage());\n+        System.exit(1);\n+      }\n+\n+      List<DataSchema> topLevelDataSchemas = parser.topLevelDataSchemas();\n+      if (topLevelDataSchemas == null || topLevelDataSchemas.isEmpty() || topLevelDataSchemas.size() > 1)\n+      {\n+        _logger.error(\"Could not parse extension schema : \" + inputFile.getAbsolutePath());\n+        System.exit(1);\n+      }\n+      DataSchema topLevelDataSchema = topLevelDataSchemas.get(0);\n+      if (!(topLevelDataSchema instanceof NamedDataSchema))\n+      {\n+        _logger.error(\"Invalid extension schema : \" + inputFile.getAbsolutePath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0209d8176af3a4ea0e1b88e3bc32ce4c7596df6"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwNjEyMw==", "bodyText": "Updated the log.", "url": "https://github.com/linkedin/rest.li/pull/235#discussion_r399406123", "createdAt": "2020-03-27T16:53:59Z", "author": {"login": "nickibi"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidation.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.data;\n+\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaResolver;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.RecordDataSchema;\n+import com.linkedin.data.schema.grammar.PdlSchemaParser;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.GnuParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.OptionBuilder;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ExtensionSchemaValidation\n+{\n+  private static final Logger _logger = LoggerFactory.getLogger(ExtensionSchemaValidation.class);\n+  private static final Options _options = new Options();\n+  private static final String _pdl = \"pdl\";\n+\n+  static\n+  {\n+    _options.addOption(OptionBuilder.withLongOpt(\"help\")\n+        .withDescription(\"Print help\")\n+        .create('h'));\n+  }\n+\n+  public static void main(String[] args) throws Exception\n+  {\n+    try {\n+      final CommandLineParser parser = new GnuParser();\n+      CommandLine cl = parser.parse(_options, args);\n+\n+      if (cl.hasOption('h'))\n+      {\n+        help();\n+        System.exit(0);\n+      }\n+\n+      String[] cliArgs = cl.getArgs();\n+      if (cliArgs.length != 2)\n+      {\n+        _logger.error(\"Wrong argument given\");\n+        help();\n+        System.exit(1);\n+      }\n+      int i = 0;\n+      String resolverPath = cliArgs[i++];\n+      String inputPath = cliArgs[i];\n+\n+      File inputDir = new File(inputPath);\n+\n+      if (!inputDir.exists() || !inputDir.canRead()) {\n+        _logger.error(\"Input directory does not exist or cannot be read: \" + inputDir.getAbsolutePath());\n+        System.exit(1);\n+      }\n+\n+      parseAndValidateExtensionSchemas(resolverPath, inputDir);\n+    }\n+    catch (ParseException e)\n+    {\n+      _logger.error(\"Invalid arguments: \" + e.getMessage());\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static void parseAndValidateExtensionSchemas(String resolverPath, File inputDir) throws IOException\n+  {\n+    // Parse each extension schema and validate it\n+    Iterator<File> iterator = FileUtils.iterateFiles(inputDir, new String[]{_pdl}, true);\n+    while(iterator.hasNext())\n+    {\n+      File inputFile = iterator.next();\n+      DataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(resolverPath);\n+      PdlSchemaParser parser = new PdlSchemaParser(resolver);\n+      parser.parse(new FileInputStream(inputFile));\n+      if (parser.hasError())\n+      {\n+        _logger.error(parser.errorMessage());\n+        System.exit(1);\n+      }\n+\n+      List<DataSchema> topLevelDataSchemas = parser.topLevelDataSchemas();\n+      if (topLevelDataSchemas == null || topLevelDataSchemas.isEmpty() || topLevelDataSchemas.size() > 1)\n+      {\n+        _logger.error(\"Could not parse extension schema : \" + inputFile.getAbsolutePath());\n+        System.exit(1);\n+      }\n+      DataSchema topLevelDataSchema = topLevelDataSchemas.get(0);\n+      if (!(topLevelDataSchema instanceof NamedDataSchema))\n+      {\n+        _logger.error(\"Invalid extension schema : \" + inputFile.getAbsolutePath());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMzMTI1OQ=="}, "originalCommit": {"oid": "f0209d8176af3a4ea0e1b88e3bc32ce4c7596df6"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTM5MzM3OnYy", "diffSide": "RIGHT", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNTo1MToxOVrOF74OSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNTo1MToxOVrOF74OSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMzMTQ2Nw==", "bodyText": "\"dot\" needs to be at the beginning of the line", "url": "https://github.com/linkedin/rest.li/pull/235#discussion_r398331467", "createdAt": "2020-03-26T05:51:19Z", "author": {"login": "junchuanwang"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidation.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.data;\n+\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaResolver;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.RecordDataSchema;\n+import com.linkedin.data.schema.grammar.PdlSchemaParser;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.GnuParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.OptionBuilder;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ExtensionSchemaValidation\n+{\n+  private static final Logger _logger = LoggerFactory.getLogger(ExtensionSchemaValidation.class);\n+  private static final Options _options = new Options();\n+  private static final String _pdl = \"pdl\";\n+\n+  static\n+  {\n+    _options.addOption(OptionBuilder.withLongOpt(\"help\")\n+        .withDescription(\"Print help\")\n+        .create('h'));\n+  }\n+\n+  public static void main(String[] args) throws Exception\n+  {\n+    try {\n+      final CommandLineParser parser = new GnuParser();\n+      CommandLine cl = parser.parse(_options, args);\n+\n+      if (cl.hasOption('h'))\n+      {\n+        help();\n+        System.exit(0);\n+      }\n+\n+      String[] cliArgs = cl.getArgs();\n+      if (cliArgs.length != 2)\n+      {\n+        _logger.error(\"Wrong argument given\");\n+        help();\n+        System.exit(1);\n+      }\n+      int i = 0;\n+      String resolverPath = cliArgs[i++];\n+      String inputPath = cliArgs[i];\n+\n+      File inputDir = new File(inputPath);\n+\n+      if (!inputDir.exists() || !inputDir.canRead()) {\n+        _logger.error(\"Input directory does not exist or cannot be read: \" + inputDir.getAbsolutePath());\n+        System.exit(1);\n+      }\n+\n+      parseAndValidateExtensionSchemas(resolverPath, inputDir);\n+    }\n+    catch (ParseException e)\n+    {\n+      _logger.error(\"Invalid arguments: \" + e.getMessage());\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static void parseAndValidateExtensionSchemas(String resolverPath, File inputDir) throws IOException\n+  {\n+    // Parse each extension schema and validate it\n+    Iterator<File> iterator = FileUtils.iterateFiles(inputDir, new String[]{_pdl}, true);\n+    while(iterator.hasNext())\n+    {\n+      File inputFile = iterator.next();\n+      DataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(resolverPath);\n+      PdlSchemaParser parser = new PdlSchemaParser(resolver);\n+      parser.parse(new FileInputStream(inputFile));\n+      if (parser.hasError())\n+      {\n+        _logger.error(parser.errorMessage());\n+        System.exit(1);\n+      }\n+\n+      List<DataSchema> topLevelDataSchemas = parser.topLevelDataSchemas();\n+      if (topLevelDataSchemas == null || topLevelDataSchemas.isEmpty() || topLevelDataSchemas.size() > 1)\n+      {\n+        _logger.error(\"Could not parse extension schema : \" + inputFile.getAbsolutePath());\n+        System.exit(1);\n+      }\n+      DataSchema topLevelDataSchema = topLevelDataSchemas.get(0);\n+      if (!(topLevelDataSchema instanceof NamedDataSchema))\n+      {\n+        _logger.error(\"Invalid extension schema : \" + inputFile.getAbsolutePath());\n+        System.exit(1);\n+      }\n+      if (!((NamedDataSchema) topLevelDataSchema).getFullName().endsWith(\"Extensions\"))\n+      {\n+        _logger.error(\"Invalid extension schema name : [{}]. The name of the extension schema must be <baseSchemaName> + 'Extensions'\", ((NamedDataSchema) topLevelDataSchema).getFullName());\n+        System.exit(1);\n+      }\n+\n+      List<NamedDataSchema> includes = ((RecordDataSchema)topLevelDataSchema).getInclude();\n+      // TODO: Check includes schemas can only be the resource schemas\n+\n+      List<RecordDataSchema.Field> extensionSchemaFields = ((RecordDataSchema)topLevelDataSchema).getFields().\n+          stream().", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0209d8176af3a4ea0e1b88e3bc32ce4c7596df6"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTM5NDc5OnYy", "diffSide": "RIGHT", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNTo1MjowOFrOF74PMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjo1NjowMFrOF855UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMzMTY5OA==", "bodyText": "uncessary parenthesis, also can be add to last line, no need to split", "url": "https://github.com/linkedin/rest.li/pull/235#discussion_r398331698", "createdAt": "2020-03-26T05:52:08Z", "author": {"login": "junchuanwang"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidation.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.data;\n+\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaResolver;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.RecordDataSchema;\n+import com.linkedin.data.schema.grammar.PdlSchemaParser;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.GnuParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.OptionBuilder;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ExtensionSchemaValidation\n+{\n+  private static final Logger _logger = LoggerFactory.getLogger(ExtensionSchemaValidation.class);\n+  private static final Options _options = new Options();\n+  private static final String _pdl = \"pdl\";\n+\n+  static\n+  {\n+    _options.addOption(OptionBuilder.withLongOpt(\"help\")\n+        .withDescription(\"Print help\")\n+        .create('h'));\n+  }\n+\n+  public static void main(String[] args) throws Exception\n+  {\n+    try {\n+      final CommandLineParser parser = new GnuParser();\n+      CommandLine cl = parser.parse(_options, args);\n+\n+      if (cl.hasOption('h'))\n+      {\n+        help();\n+        System.exit(0);\n+      }\n+\n+      String[] cliArgs = cl.getArgs();\n+      if (cliArgs.length != 2)\n+      {\n+        _logger.error(\"Wrong argument given\");\n+        help();\n+        System.exit(1);\n+      }\n+      int i = 0;\n+      String resolverPath = cliArgs[i++];\n+      String inputPath = cliArgs[i];\n+\n+      File inputDir = new File(inputPath);\n+\n+      if (!inputDir.exists() || !inputDir.canRead()) {\n+        _logger.error(\"Input directory does not exist or cannot be read: \" + inputDir.getAbsolutePath());\n+        System.exit(1);\n+      }\n+\n+      parseAndValidateExtensionSchemas(resolverPath, inputDir);\n+    }\n+    catch (ParseException e)\n+    {\n+      _logger.error(\"Invalid arguments: \" + e.getMessage());\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static void parseAndValidateExtensionSchemas(String resolverPath, File inputDir) throws IOException\n+  {\n+    // Parse each extension schema and validate it\n+    Iterator<File> iterator = FileUtils.iterateFiles(inputDir, new String[]{_pdl}, true);\n+    while(iterator.hasNext())\n+    {\n+      File inputFile = iterator.next();\n+      DataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(resolverPath);\n+      PdlSchemaParser parser = new PdlSchemaParser(resolver);\n+      parser.parse(new FileInputStream(inputFile));\n+      if (parser.hasError())\n+      {\n+        _logger.error(parser.errorMessage());\n+        System.exit(1);\n+      }\n+\n+      List<DataSchema> topLevelDataSchemas = parser.topLevelDataSchemas();\n+      if (topLevelDataSchemas == null || topLevelDataSchemas.isEmpty() || topLevelDataSchemas.size() > 1)\n+      {\n+        _logger.error(\"Could not parse extension schema : \" + inputFile.getAbsolutePath());\n+        System.exit(1);\n+      }\n+      DataSchema topLevelDataSchema = topLevelDataSchemas.get(0);\n+      if (!(topLevelDataSchema instanceof NamedDataSchema))\n+      {\n+        _logger.error(\"Invalid extension schema : \" + inputFile.getAbsolutePath());\n+        System.exit(1);\n+      }\n+      if (!((NamedDataSchema) topLevelDataSchema).getFullName().endsWith(\"Extensions\"))\n+      {\n+        _logger.error(\"Invalid extension schema name : [{}]. The name of the extension schema must be <baseSchemaName> + 'Extensions'\", ((NamedDataSchema) topLevelDataSchema).getFullName());\n+        System.exit(1);\n+      }\n+\n+      List<NamedDataSchema> includes = ((RecordDataSchema)topLevelDataSchema).getInclude();\n+      // TODO: Check includes schemas can only be the resource schemas\n+\n+      List<RecordDataSchema.Field> extensionSchemaFields = ((RecordDataSchema)topLevelDataSchema).getFields().\n+          stream().\n+          filter(\n+              f -> !((RecordDataSchema) topLevelDataSchema).isFieldFromIncludes(f))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0209d8176af3a4ea0e1b88e3bc32ce4c7596df6"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwNzQ0MQ==", "bodyText": "Can you please explain \"unnecessary parenthesis\"? I don't see any.", "url": "https://github.com/linkedin/rest.li/pull/235#discussion_r399407441", "createdAt": "2020-03-27T16:56:00Z", "author": {"login": "nickibi"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidation.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.data;\n+\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaResolver;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.RecordDataSchema;\n+import com.linkedin.data.schema.grammar.PdlSchemaParser;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.GnuParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.OptionBuilder;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ExtensionSchemaValidation\n+{\n+  private static final Logger _logger = LoggerFactory.getLogger(ExtensionSchemaValidation.class);\n+  private static final Options _options = new Options();\n+  private static final String _pdl = \"pdl\";\n+\n+  static\n+  {\n+    _options.addOption(OptionBuilder.withLongOpt(\"help\")\n+        .withDescription(\"Print help\")\n+        .create('h'));\n+  }\n+\n+  public static void main(String[] args) throws Exception\n+  {\n+    try {\n+      final CommandLineParser parser = new GnuParser();\n+      CommandLine cl = parser.parse(_options, args);\n+\n+      if (cl.hasOption('h'))\n+      {\n+        help();\n+        System.exit(0);\n+      }\n+\n+      String[] cliArgs = cl.getArgs();\n+      if (cliArgs.length != 2)\n+      {\n+        _logger.error(\"Wrong argument given\");\n+        help();\n+        System.exit(1);\n+      }\n+      int i = 0;\n+      String resolverPath = cliArgs[i++];\n+      String inputPath = cliArgs[i];\n+\n+      File inputDir = new File(inputPath);\n+\n+      if (!inputDir.exists() || !inputDir.canRead()) {\n+        _logger.error(\"Input directory does not exist or cannot be read: \" + inputDir.getAbsolutePath());\n+        System.exit(1);\n+      }\n+\n+      parseAndValidateExtensionSchemas(resolverPath, inputDir);\n+    }\n+    catch (ParseException e)\n+    {\n+      _logger.error(\"Invalid arguments: \" + e.getMessage());\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static void parseAndValidateExtensionSchemas(String resolverPath, File inputDir) throws IOException\n+  {\n+    // Parse each extension schema and validate it\n+    Iterator<File> iterator = FileUtils.iterateFiles(inputDir, new String[]{_pdl}, true);\n+    while(iterator.hasNext())\n+    {\n+      File inputFile = iterator.next();\n+      DataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(resolverPath);\n+      PdlSchemaParser parser = new PdlSchemaParser(resolver);\n+      parser.parse(new FileInputStream(inputFile));\n+      if (parser.hasError())\n+      {\n+        _logger.error(parser.errorMessage());\n+        System.exit(1);\n+      }\n+\n+      List<DataSchema> topLevelDataSchemas = parser.topLevelDataSchemas();\n+      if (topLevelDataSchemas == null || topLevelDataSchemas.isEmpty() || topLevelDataSchemas.size() > 1)\n+      {\n+        _logger.error(\"Could not parse extension schema : \" + inputFile.getAbsolutePath());\n+        System.exit(1);\n+      }\n+      DataSchema topLevelDataSchema = topLevelDataSchemas.get(0);\n+      if (!(topLevelDataSchema instanceof NamedDataSchema))\n+      {\n+        _logger.error(\"Invalid extension schema : \" + inputFile.getAbsolutePath());\n+        System.exit(1);\n+      }\n+      if (!((NamedDataSchema) topLevelDataSchema).getFullName().endsWith(\"Extensions\"))\n+      {\n+        _logger.error(\"Invalid extension schema name : [{}]. The name of the extension schema must be <baseSchemaName> + 'Extensions'\", ((NamedDataSchema) topLevelDataSchema).getFullName());\n+        System.exit(1);\n+      }\n+\n+      List<NamedDataSchema> includes = ((RecordDataSchema)topLevelDataSchema).getInclude();\n+      // TODO: Check includes schemas can only be the resource schemas\n+\n+      List<RecordDataSchema.Field> extensionSchemaFields = ((RecordDataSchema)topLevelDataSchema).getFields().\n+          stream().\n+          filter(\n+              f -> !((RecordDataSchema) topLevelDataSchema).isFieldFromIncludes(f))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMzMTY5OA=="}, "originalCommit": {"oid": "f0209d8176af3a4ea0e1b88e3bc32ce4c7596df6"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDMxMjQwOnYy", "diffSide": "RIGHT", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMjoyOTo1N1rOF-DDnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMzozNTozOVrOF-EG7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYwNjExMQ==", "bodyText": "I'd rename this to configureExtensionSchemaValidationAndPublishTasks as this is not just validating (also publishing jars)", "url": "https://github.com/linkedin/rest.li/pull/235#discussion_r400606111", "createdAt": "2020-03-31T02:29:57Z", "author": {"login": "karthikbalasub"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -913,6 +921,41 @@ protected void configureGeneratedSourcesAndJavadoc(Project project)\n     }\n   }\n \n+  protected void configureExtensionSchemaValidation(Project project, SourceSet sourceSet)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f25ff7e26e5fd7c0037fcd21bc4448d4a48c139e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYyMzM0MQ==", "bodyText": "Renamed this to configureExtensionSchemaValidationAndPublishTasks", "url": "https://github.com/linkedin/rest.li/pull/235#discussion_r400623341", "createdAt": "2020-03-31T03:35:39Z", "author": {"login": "nickibi"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -913,6 +921,41 @@ protected void configureGeneratedSourcesAndJavadoc(Project project)\n     }\n   }\n \n+  protected void configureExtensionSchemaValidation(Project project, SourceSet sourceSet)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYwNjExMQ=="}, "originalCommit": {"oid": "f25ff7e26e5fd7c0037fcd21bc4448d4a48c139e"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDMyMDczOnYy", "diffSide": "RIGHT", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/tasks/ValidateExtensionSchemaTask.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMjozNTozNFrOF-DJCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMzozNDo1NVrOF-EGRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYwNzQ5OQ==", "bodyText": "li-pegasus (in opensource)", "url": "https://github.com/linkedin/rest.li/pull/235#discussion_r400607499", "createdAt": "2020-03-31T02:35:34Z", "author": {"login": "karthikbalasub"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/tasks/ValidateExtensionSchemaTask.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.pegasus.gradle.tasks;\n+\n+import com.linkedin.pegasus.gradle.PathingJarUtil;\n+import com.linkedin.pegasus.gradle.PegasusPlugin;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.file.FileCollection;\n+import org.gradle.api.file.FileTree;\n+import org.gradle.api.tasks.CacheableTask;\n+import org.gradle.api.tasks.Classpath;\n+import org.gradle.api.tasks.InputDirectory;\n+import org.gradle.api.tasks.PathSensitive;\n+import org.gradle.api.tasks.PathSensitivity;\n+import org.gradle.api.tasks.SkipWhenEmpty;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import static com.linkedin.pegasus.gradle.SharedFileUtils.*;\n+\n+/**\n+ * Validate extension schemas.\n+ *\n+ * To use this plugin, add these three lines to your build.gradle:\n+ * <pre>\n+ * apply plugin: 'li-pegasus2'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f25ff7e26e5fd7c0037fcd21bc4448d4a48c139e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYxNDQzOQ==", "bodyText": "Do you mean I should remove this part?", "url": "https://github.com/linkedin/rest.li/pull/235#discussion_r400614439", "createdAt": "2020-03-31T03:01:09Z", "author": {"login": "nickibi"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/tasks/ValidateExtensionSchemaTask.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.pegasus.gradle.tasks;\n+\n+import com.linkedin.pegasus.gradle.PathingJarUtil;\n+import com.linkedin.pegasus.gradle.PegasusPlugin;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.file.FileCollection;\n+import org.gradle.api.file.FileTree;\n+import org.gradle.api.tasks.CacheableTask;\n+import org.gradle.api.tasks.Classpath;\n+import org.gradle.api.tasks.InputDirectory;\n+import org.gradle.api.tasks.PathSensitive;\n+import org.gradle.api.tasks.PathSensitivity;\n+import org.gradle.api.tasks.SkipWhenEmpty;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import static com.linkedin.pegasus.gradle.SharedFileUtils.*;\n+\n+/**\n+ * Validate extension schemas.\n+ *\n+ * To use this plugin, add these three lines to your build.gradle:\n+ * <pre>\n+ * apply plugin: 'li-pegasus2'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYwNzQ5OQ=="}, "originalCommit": {"oid": "f25ff7e26e5fd7c0037fcd21bc4448d4a48c139e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYyMzE3NQ==", "bodyText": "Updated the doc to use \"li-pegasus\" instead.", "url": "https://github.com/linkedin/rest.li/pull/235#discussion_r400623175", "createdAt": "2020-03-31T03:34:55Z", "author": {"login": "nickibi"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/tasks/ValidateExtensionSchemaTask.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.pegasus.gradle.tasks;\n+\n+import com.linkedin.pegasus.gradle.PathingJarUtil;\n+import com.linkedin.pegasus.gradle.PegasusPlugin;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.file.FileCollection;\n+import org.gradle.api.file.FileTree;\n+import org.gradle.api.tasks.CacheableTask;\n+import org.gradle.api.tasks.Classpath;\n+import org.gradle.api.tasks.InputDirectory;\n+import org.gradle.api.tasks.PathSensitive;\n+import org.gradle.api.tasks.PathSensitivity;\n+import org.gradle.api.tasks.SkipWhenEmpty;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import static com.linkedin.pegasus.gradle.SharedFileUtils.*;\n+\n+/**\n+ * Validate extension schemas.\n+ *\n+ * To use this plugin, add these three lines to your build.gradle:\n+ * <pre>\n+ * apply plugin: 'li-pegasus2'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYwNzQ5OQ=="}, "originalCommit": {"oid": "f25ff7e26e5fd7c0037fcd21bc4448d4a48c139e"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 641, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}