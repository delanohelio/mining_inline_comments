{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MDM3ODMx", "number": 181, "title": "ClusterInfoProvider API and implementation", "bodyText": "Add API to provide basic cluster information. Initially this will just give a way to find the number of instances in a D2 cluster, based on scheme (http/https) and partitionid.  This new API will be part of Facilities. I provided a default implementation in Facilities, so this change is backwards compatible. This feature will allow dark cluster dispatchers to shape traffic to a dark canary cluster.\nI'm not able to consolidate the tests because several of those variables are modified in many of the tests in different ways.", "createdAt": "2020-02-20T23:59:23Z", "url": "https://github.com/linkedin/rest.li/pull/181", "merged": true, "mergeCommit": {"oid": "8392f4b2526b99a8e1beb88a127d5dfa74b805f1"}, "closed": true, "closedAt": "2020-02-26T19:23:43Z", "author": {"login": "davidhoa"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGUoxoABqjMwNTg4MzkzMjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcILhBXAH2gAyMzc4MDM3ODMxOmUyMTQ1NzlhZTc2ZTYxODFjYjY2Zjc1N2MyNGRjN2FkNmQ3ZGI3OWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fcb9b6b830d277d338fcf0e8d6ae45bc968e24fc", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/fcb9b6b830d277d338fcf0e8d6ae45bc968e24fc", "committedDate": "2020-02-20T19:19:32Z", "message": "ClusterInfoProvider API and implementation"}, "afterCommit": {"oid": "144af8ba1f7a7ad93b56678c81cabb7e3007c092", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/144af8ba1f7a7ad93b56678c81cabb7e3007c092", "committedDate": "2020-02-21T00:31:28Z", "message": "ClusterInfoProvider API and implementation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNzIyMjM1", "url": "https://github.com/linkedin/rest.li/pull/181#pullrequestreview-362722235", "createdAt": "2020-02-21T15:44:45Z", "commit": {"oid": "144af8ba1f7a7ad93b56678c81cabb7e3007c092"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNTo0NDo0NVrOFs7Vhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNTo0NDo0NVrOFs7Vhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY1MzgzMQ==", "bodyText": "what do you think about providing a fully async method? One idea is that I could provide the async as a base, and the blocking/sync as a convenience.", "url": "https://github.com/linkedin/rest.li/pull/181#discussion_r382653831", "createdAt": "2020-02-21T15:44:45Z", "author": {"login": "davidhoa"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/util/ClusterInfoProvider.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+   Copyright (c) 2019 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.d2.balancer.util;\n+\n+import com.linkedin.d2.balancer.ServiceUnavailableException;\n+\n+\n+/**\n+ * ClusterInfoProvider provides a mechanism to access detailed cluster information from the D2 infrastructure.\n+ *\n+ * @author David Hoa\n+ * @version $Revision: $\n+ */\n+public interface ClusterInfoProvider\n+{\n+  String HTTPS_SCHEME = \"https\";\n+  int DEFAULT_PARTITION = 0;\n+\n+  /**\n+   * Obtain d2 cluster count\n+   * @return int\n+   */\n+  int getClusterCount(String clusterName, String scheme, int partitionId) throws ServiceUnavailableException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "144af8ba1f7a7ad93b56678c81cabb7e3007c092"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNzgyNDUy", "url": "https://github.com/linkedin/rest.li/pull/181#pullrequestreview-363782452", "createdAt": "2020-02-24T23:49:23Z", "commit": {"oid": "144af8ba1f7a7ad93b56678c81cabb7e3007c092"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMzo0OToyM1rOFtz_jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMzo0OToyM1rOFtz_jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4MjA5NA==", "bodyText": "We can inline this.", "url": "https://github.com/linkedin/rest.li/pull/181#discussion_r383582094", "createdAt": "2020-02-24T23:49:23Z", "author": {"login": "zhang-chris"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancer.java", "diffHunk": "@@ -866,6 +869,30 @@ private void die(Callback<?> callback, String serviceName, String message)\n     callback.onError(new ServiceUnavailableException(serviceName, message));\n   }\n \n+  @Override\n+  public int getClusterCount(String clusterName, String scheme, int partitionId) throws ServiceUnavailableException\n+  {\n+    FutureCallback<Integer> clusterCountFutureCallback = new FutureCallback<>();\n+    Runnable callback = () ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "144af8ba1f7a7ad93b56678c81cabb7e3007c092"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNzg3Mjg4", "url": "https://github.com/linkedin/rest.li/pull/181#pullrequestreview-363787288", "createdAt": "2020-02-25T00:02:23Z", "commit": {"oid": "144af8ba1f7a7ad93b56678c81cabb7e3007c092"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDowMjoyM1rOFt0QEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDowMjoyM1rOFt0QEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4NjMyMA==", "bodyText": "Are there public static variables for these already defined somewhere that we can use?", "url": "https://github.com/linkedin/rest.li/pull/181#discussion_r383586320", "createdAt": "2020-02-25T00:02:23Z", "author": {"login": "zhang-chris"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/util/ClusterInfoProvider.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+   Copyright (c) 2019 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.d2.balancer.util;\n+\n+import com.linkedin.d2.balancer.ServiceUnavailableException;\n+\n+\n+/**\n+ * ClusterInfoProvider provides a mechanism to access detailed cluster information from the D2 infrastructure.\n+ *\n+ * @author David Hoa\n+ * @version $Revision: $\n+ */\n+public interface ClusterInfoProvider\n+{\n+  String HTTPS_SCHEME = \"https\";\n+  int DEFAULT_PARTITION = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "144af8ba1f7a7ad93b56678c81cabb7e3007c092"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNzg4MzI1", "url": "https://github.com/linkedin/rest.li/pull/181#pullrequestreview-363788325", "createdAt": "2020-02-25T00:05:21Z", "commit": {"oid": "144af8ba1f7a7ad93b56678c81cabb7e3007c092"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDowNToyMVrOFt0TQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDowNToyMVrOFt0TQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4NzEzOQ==", "bodyText": "expand imports", "url": "https://github.com/linkedin/rest.li/pull/181#discussion_r383587139", "createdAt": "2020-02-25T00:05:21Z", "author": {"login": "zhang-chris"}, "path": "d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java", "diffHunk": "@@ -101,20 +101,27 @@\n import java.util.concurrent.atomic.AtomicLong;\n import java.util.stream.Collectors;\n import java.util.stream.StreamSupport;\n+import javafx.concurrent.Service;\n import javax.annotation.Nonnull;\n import org.apache.commons.io.FileUtils;\n import org.testng.Assert;\n import org.testng.annotations.AfterSuite;\n import org.testng.annotations.BeforeSuite;\n+import org.testng.annotations.DataProvider;\n import org.testng.annotations.Test;\n \n+import static com.linkedin.d2.balancer.util.partitions.DefaultPartitionAccessor.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "144af8ba1f7a7ad93b56678c81cabb7e3007c092"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNzg4ODkw", "url": "https://github.com/linkedin/rest.li/pull/181#pullrequestreview-363788890", "createdAt": "2020-02-25T00:06:56Z", "commit": {"oid": "144af8ba1f7a7ad93b56678c81cabb7e3007c092"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDowNjo1N1rOFt0VOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDowNjo1N1rOFt0VOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4NzY0MA==", "bodyText": "new Object[] is unnecessary.", "url": "https://github.com/linkedin/rest.li/pull/181#discussion_r383587640", "createdAt": "2020-02-25T00:06:57Z", "author": {"login": "zhang-chris"}, "path": "d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java", "diffHunk": "@@ -155,6 +162,87 @@ public void doOneTimeTearDown() throws IOException\n     }\n   }\n \n+  @DataProvider\n+  public Object[][] provideKeys()\n+  {\n+    return new Object[][] {\n+        // numHttp, numHttps, expectedNumHttp, expectedNumHttps, partitionIdForAdd, partitionIdForCheck\n+        new Object[] {0, 3, 0, 3, 0, 0},\n+        new Object[] {3, 0, 3, 0, 0, 0},\n+        new Object[] {1, 1, 1, 1, 0, 0},\n+        new Object[] {0, 0, 0, 0, 0, 0},\n+        // alter the partitions to check\n+        new Object[] {0, 3, 0, 0, 0, 1},\n+        new Object[] {3, 0, 0, 0, 0, 1},\n+        new Object[] {1, 1, 0, 0, 0, 2},\n+        new Object[] {0, 0, 0, 0, 0, 1},\n+        // alter the partitions to add and check to match\n+        new Object[] {0, 3, 0, 3, 1, 1},\n+        new Object[] {3, 0, 3, 0, 1, 1},\n+        new Object[] {1, 1, 1, 1, 2, 2},\n+        new Object[] {0, 0, 0, 0, 1, 1}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "144af8ba1f7a7ad93b56678c81cabb7e3007c092"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21f210b824a63d3b3c57f1804bbf30e1755ce8d4", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/21f210b824a63d3b3c57f1804bbf30e1755ce8d4", "committedDate": "2020-02-25T01:26:16Z", "message": "ClusterInfoProvider API and implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "393f5b68a57f5bdfba17dc4da6c9894740e3e534", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/393f5b68a57f5bdfba17dc4da6c9894740e3e534", "committedDate": "2020-02-25T01:26:17Z", "message": "address'ed zhang-chris review comments."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1f6dc5d1bf7937f0ce0443a8f496e08c603efbe4", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/1f6dc5d1bf7937f0ce0443a8f496e08c603efbe4", "committedDate": "2020-02-25T01:24:24Z", "message": "Merge branch 'master' into feature/ClusterInfoProvider"}, "afterCommit": {"oid": "393f5b68a57f5bdfba17dc4da6c9894740e3e534", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/393f5b68a57f5bdfba17dc4da6c9894740e3e534", "committedDate": "2020-02-25T01:26:17Z", "message": "address'ed zhang-chris review comments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NTk3MTEz", "url": "https://github.com/linkedin/rest.li/pull/181#pullrequestreview-364597113", "createdAt": "2020-02-26T03:07:05Z", "commit": {"oid": "393f5b68a57f5bdfba17dc4da6c9894740e3e534"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMzowNzowNVrOFuc7CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMzowODowNVrOFuc7zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI1MjY4MA==", "bodyText": "reference static variables", "url": "https://github.com/linkedin/rest.li/pull/181#discussion_r384252680", "createdAt": "2020-02-26T03:07:05Z", "author": {"login": "zhang-chris"}, "path": "d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java", "diffHunk": "@@ -101,20 +100,27 @@\n import java.util.concurrent.atomic.AtomicLong;\n import java.util.stream.Collectors;\n import java.util.stream.StreamSupport;\n+import javafx.concurrent.Service;\n import javax.annotation.Nonnull;\n import org.apache.commons.io.FileUtils;\n import org.testng.Assert;\n import org.testng.annotations.AfterSuite;\n import org.testng.annotations.BeforeSuite;\n+import org.testng.annotations.DataProvider;\n import org.testng.annotations.Test;\n \n+import static com.linkedin.d2.balancer.util.partitions.DefaultPartitionAccessor.DEFAULT_PARTITION_ID;\n import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.assertNotNull;\n import static org.testng.Assert.assertTrue;\n import static org.testng.Assert.fail;\n \n public class SimpleLoadBalancerTest\n {\n+  private static final String CLUSTER1_NAME = \"cluster-1\";\n+  private static final String HTTP_SCHEME = \"http\";\n+  private static final String HTTPS_SCHEME = \"https\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "393f5b68a57f5bdfba17dc4da6c9894740e3e534"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI1Mjg3Nw==", "bodyText": "-> new MockStore<>()\nHere and everywhere else", "url": "https://github.com/linkedin/rest.li/pull/181#discussion_r384252877", "createdAt": "2020-02-26T03:08:05Z", "author": {"login": "zhang-chris"}, "path": "d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java", "diffHunk": "@@ -155,6 +161,87 @@ public void doOneTimeTearDown() throws IOException\n     }\n   }\n \n+  @DataProvider\n+  public Object[][] provideKeys()\n+  {\n+    return new Object[][] {\n+        // numHttp, numHttps, expectedNumHttp, expectedNumHttps, partitionIdForAdd, partitionIdForCheck\n+        {0, 3, 0, 3, 0, 0},\n+        {3, 0, 3, 0, 0, 0},\n+        {1, 1, 1, 1, 0, 0},\n+        {0, 0, 0, 0, 0, 0},\n+        // alter the partitions to check\n+        {0, 3, 0, 0, 0, 1},\n+        {3, 0, 0, 0, 0, 1},\n+        {1, 1, 0, 0, 0, 2},\n+        {0, 0, 0, 0, 0, 1},\n+        // alter the partitions to add and check to match\n+        {0, 3, 0, 3, 1, 1},\n+        {3, 0, 3, 0, 1, 1},\n+        {1, 1, 1, 1, 2, 2},\n+        {0, 0, 0, 0, 1, 1}\n+    };\n+  }\n+\n+  @Test(dataProvider = \"provideKeys\")\n+  public void testClusterInfoProvider(int numHttp, int numHttps, int expectedNumHttp, int expectedNumHttps,\n+      int partitionIdForAdd, int partitionIdForCheck)\n+      throws InterruptedException, ExecutionException, ServiceUnavailableException\n+  {\n+    Map<String, LoadBalancerStrategyFactory<? extends LoadBalancerStrategy>> loadBalancerStrategyFactories =\n+        new HashMap<String, LoadBalancerStrategyFactory<? extends LoadBalancerStrategy>>();\n+    Map<String, TransportClientFactory> clientFactories =\n+        new HashMap<String, TransportClientFactory>();\n+\n+    MockStore<ServiceProperties> serviceRegistry = new MockStore<ServiceProperties>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "393f5b68a57f5bdfba17dc4da6c9894740e3e534"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b0d981d63a0bb15f3e8a74b55da8c7fcd551ed1", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/2b0d981d63a0bb15f3e8a74b55da8c7fcd551ed1", "committedDate": "2020-02-26T07:19:52Z", "message": "address review comments."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7fe00380d85095fe09760a34066a69eb6efd526c", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/7fe00380d85095fe09760a34066a69eb6efd526c", "committedDate": "2020-02-26T07:14:09Z", "message": "address review comments."}, "afterCommit": {"oid": "2b0d981d63a0bb15f3e8a74b55da8c7fcd551ed1", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/2b0d981d63a0bb15f3e8a74b55da8c7fcd551ed1", "committedDate": "2020-02-26T07:19:52Z", "message": "address review comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d6a01f37eb428678169257f4dbae1644a34a830", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/0d6a01f37eb428678169257f4dbae1644a34a830", "committedDate": "2020-02-26T07:21:32Z", "message": "Merge branch 'master' into feature/ClusterInfoProvider"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MTExNDM5", "url": "https://github.com/linkedin/rest.li/pull/181#pullrequestreview-365111439", "createdAt": "2020-02-26T17:49:26Z", "commit": {"oid": "0d6a01f37eb428678169257f4dbae1644a34a830"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e214579ae76e6181cb66f757c24dc7ad6d7db79c", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/e214579ae76e6181cb66f757c24dc7ad6d7db79c", "committedDate": "2020-02-26T19:02:30Z", "message": "Merge branch 'master' into feature/ClusterInfoProvider"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4936, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}