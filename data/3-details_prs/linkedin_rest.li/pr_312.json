{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1MzM5NDIy", "number": 312, "title": "When server builds URI and projection fields are included, convert ra\u2026", "bodyText": "\u2026w string to MaskTree", "createdAt": "2020-05-29T21:30:02Z", "url": "https://github.com/linkedin/rest.li/pull/312", "merged": true, "mergeCommit": {"oid": "b7ee92bc1caa9d219d3debf0d2b07fcb0144272f"}, "closed": true, "closedAt": "2020-06-03T16:26:48Z", "author": {"login": "BrianPin"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcmKdz6gFqTQyMTMzNTU5Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnr416AFqTQyMzcyMDI1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMzM1NTk3", "url": "https://github.com/linkedin/rest.li/pull/312#pullrequestreview-421335597", "createdAt": "2020-05-29T22:43:49Z", "commit": {"oid": "5b517dc50a9c7764d35b7082061b7174edca1a60"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjo0Mzo0OVrOGcuQGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjo0NTo0NVrOGcuSQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3MTA5OA==", "bodyText": "This is a public method, so you can't necessarily make this assumption.", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r432771098", "createdAt": "2020-05-29T22:43:49Z", "author": {"login": "evanw555"}, "path": "restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java", "diffHunk": "@@ -469,6 +470,7 @@ public static void addSortedParams(UriBuilder uriBuilder, DataMap params, Protoc\n \n   public static URI replaceQueryParam(URI uri, String queryParam, DataComplex values, DataMap parameters, ProtocolVersion version)\n   {\n+    // This is only used by BatchFinderResponseBuilder right now", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b517dc50a9c7764d35b7082061b7174edca1a60"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3MTYyNQ==", "bodyText": "Is this extra logic necessary? Isn't the parsed mask tree available in the response builder?", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r432771625", "createdAt": "2020-05-29T22:45:41Z", "author": {"login": "evanw555"}, "path": "restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java", "diffHunk": "@@ -478,6 +480,30 @@ public static URI replaceQueryParam(URI uri, String queryParam, DataComplex valu\n     return builder.build();\n   }\n \n+  private static void convertRawProjectionFieldsToMaskTree(DataMap queryParams)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b517dc50a9c7764d35b7082061b7174edca1a60"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3MTY0OA==", "bodyText": "Once again, this method is public so you should be careful about changing behavior.", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r432771648", "createdAt": "2020-05-29T22:45:45Z", "author": {"login": "evanw555"}, "path": "restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java", "diffHunk": "@@ -486,6 +512,7 @@ public static URI replaceQueryParam(URI uri, String queryParam, DataComplex valu\n    */\n   public static void addSortedParams(UriBuilder uriBuilder, DataMap params)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b517dc50a9c7764d35b7082061b7174edca1a60"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMzg2MDQx", "url": "https://github.com/linkedin/rest.li/pull/312#pullrequestreview-421386041", "createdAt": "2020-05-30T07:33:39Z", "commit": {"oid": "5b517dc50a9c7764d35b7082061b7174edca1a60"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwNzozMzozOVrOGcxM2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwNzozMzozOVrOGcxM2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxOTQxOA==", "bodyText": "Agree with Evan, also the projection parameters are already available as MaskTree in resourContext. So a better fix would be to update the buildCriteriaURI() method in BatchFinderResponseBuilder to replace the projection params with masktree objects.", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r432819418", "createdAt": "2020-05-30T07:33:39Z", "author": {"login": "karthikbalasub"}, "path": "restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java", "diffHunk": "@@ -486,6 +512,7 @@ public static URI replaceQueryParam(URI uri, String queryParam, DataComplex valu\n    */\n   public static void addSortedParams(UriBuilder uriBuilder, DataMap params)\n   {\n+    convertRawProjectionFieldsToMaskTree(params);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b517dc50a9c7764d35b7082061b7174edca1a60"}, "originalPosition": 51}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5b517dc50a9c7764d35b7082061b7174edca1a60", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/5b517dc50a9c7764d35b7082061b7174edca1a60", "committedDate": "2020-05-29T21:27:59Z", "message": "When server builds URI and projection fields are included, convert raw string to MaskTree"}, "afterCommit": {"oid": "00b65e251ccccbaf6d5579316428e50a929dee27", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/00b65e251ccccbaf6d5579316428e50a929dee27", "committedDate": "2020-06-01T16:59:17Z", "message": "When server builds URI and projection fields are included, convert raw string to MaskTree"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "00b65e251ccccbaf6d5579316428e50a929dee27", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/00b65e251ccccbaf6d5579316428e50a929dee27", "committedDate": "2020-06-01T16:59:17Z", "message": "When server builds URI and projection fields are included, convert raw string to MaskTree"}, "afterCommit": {"oid": "e8fa0feb708a520a35969643c51af0c7f1865ff1", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/e8fa0feb708a520a35969643c51af0c7f1865ff1", "committedDate": "2020-06-01T17:22:42Z", "message": "When server builds URI and projection fields are included, convert raw string to MaskTree"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMDM2ODAy", "url": "https://github.com/linkedin/rest.li/pull/312#pullrequestreview-422036802", "createdAt": "2020-06-01T17:25:46Z", "commit": {"oid": "e8fa0feb708a520a35969643c51af0c7f1865ff1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNzoyNTo0N1rOGdTUIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNzoyNTo0N1rOGdTUIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM3ODMzOQ==", "bodyText": "You should create a copy instead of modifying the underlying parameters. There might be logic elsewhere (and custom filter) that depend on these parameters parsed from URI.", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r433378339", "createdAt": "2020-06-01T17:25:47Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java", "diffHunk": "@@ -207,14 +208,33 @@ private DataList getCriteriaParameters(RoutingResult routingResult)\n     return(DataList)routingResult.getContext().getStructuredParameter(batchParamName);\n   }\n \n-  private URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String queryParam, URI uri)\n+  private URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String batchParamName, URI uri)\n   {\n     DataList criteriaList = new DataList(1);\n     criteriaList.add(criteria.data());\n+    DataMap queryParams = extractQueryParamsFromResourceContext(resourceContext);\n     return URIParamUtils.replaceQueryParam(uri,\n-                                           queryParam,\n+                                           batchParamName,\n                                            criteriaList,\n-                                           resourceContext.getParameters(),\n+                                           queryParams,\n                                            resourceContext.getRestliProtocolVersion());\n   }\n+\n+  private DataMap extractQueryParamsFromResourceContext(ResourceContextImpl resourceContext)\n+  {\n+    DataMap queryParams = resourceContext.getParameters();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8fa0feb708a520a35969643c51af0c7f1865ff1"}, "originalPosition": 29}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e8fa0feb708a520a35969643c51af0c7f1865ff1", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/e8fa0feb708a520a35969643c51af0c7f1865ff1", "committedDate": "2020-06-01T17:22:42Z", "message": "When server builds URI and projection fields are included, convert raw string to MaskTree"}, "afterCommit": {"oid": "6e5c57a83f3cfc7ef4207de5cb77dd4b9ac4853e", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/6e5c57a83f3cfc7ef4207de5cb77dd4b9ac4853e", "committedDate": "2020-06-01T17:52:46Z", "message": "When server builds URI and projection fields are included, convert raw string to MaskTree"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMTM5ODI0", "url": "https://github.com/linkedin/rest.li/pull/312#pullrequestreview-422139824", "createdAt": "2020-06-01T20:00:10Z", "commit": {"oid": "6e5c57a83f3cfc7ef4207de5cb77dd4b9ac4853e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMDowMDoxMFrOGdYJ7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMDowMDoxMFrOGdYJ7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1NzY0NA==", "bodyText": "Deep copy might be expensive and for this usecase, a shallow copy is sufficient.", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r433457644", "createdAt": "2020-06-01T20:00:10Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java", "diffHunk": "@@ -195,26 +196,52 @@ private AnyRecord buildMetaData(CollectionResult<RecordTemplate, RecordTemplate>\n     return null;\n   }\n \n-  private String getBatchParamterName(RoutingResult routingResult)\n+  private String getBatchParameterName(RoutingResult routingResult)\n   {\n     int batchFinderCriteriaIndex = routingResult.getResourceMethod().getBatchFinderCriteriaParamIndex();\n     return routingResult.getResourceMethod().getParameters().get(batchFinderCriteriaIndex).getName();\n   }\n \n   private DataList getCriteriaParameters(RoutingResult routingResult)\n   {\n-    String batchParamName = getBatchParamterName(routingResult);\n-    return(DataList)routingResult.getContext().getStructuredParameter(batchParamName);\n+    String batchParameterName = getBatchParameterName(routingResult);\n+    return(DataList)routingResult.getContext().getStructuredParameter(batchParameterName);\n   }\n \n-  private URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String queryParam, URI uri)\n+  private URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String batchParamName, URI uri)\n   {\n     DataList criteriaList = new DataList(1);\n     criteriaList.add(criteria.data());\n+    DataMap queryParams = extractQueryParamsFromResourceContext(resourceContext);\n     return URIParamUtils.replaceQueryParam(uri,\n-                                           queryParam,\n+                                           batchParamName,\n                                            criteriaList,\n-                                           resourceContext.getParameters(),\n+                                           queryParams,\n                                            resourceContext.getRestliProtocolVersion());\n   }\n+\n+  private DataMap extractQueryParamsFromResourceContext(ResourceContextImpl resourceContext)\n+  {\n+    try\n+    {\n+      DataMap queryParams = resourceContext.getParameters().copy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e5c57a83f3cfc7ef4207de5cb77dd4b9ac4853e"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMTQwNjA1", "url": "https://github.com/linkedin/rest.li/pull/312#pullrequestreview-422140605", "createdAt": "2020-06-01T20:01:23Z", "commit": {"oid": "6e5c57a83f3cfc7ef4207de5cb77dd4b9ac4853e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMDowMToyM1rOGdYMKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMDowMToyM1rOGdYMKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1ODIxNg==", "bodyText": "This is not a good way to recover this error. I'd prefer failing the request as this is unexpected.", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r433458216", "createdAt": "2020-06-01T20:01:23Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java", "diffHunk": "@@ -195,26 +196,52 @@ private AnyRecord buildMetaData(CollectionResult<RecordTemplate, RecordTemplate>\n     return null;\n   }\n \n-  private String getBatchParamterName(RoutingResult routingResult)\n+  private String getBatchParameterName(RoutingResult routingResult)\n   {\n     int batchFinderCriteriaIndex = routingResult.getResourceMethod().getBatchFinderCriteriaParamIndex();\n     return routingResult.getResourceMethod().getParameters().get(batchFinderCriteriaIndex).getName();\n   }\n \n   private DataList getCriteriaParameters(RoutingResult routingResult)\n   {\n-    String batchParamName = getBatchParamterName(routingResult);\n-    return(DataList)routingResult.getContext().getStructuredParameter(batchParamName);\n+    String batchParameterName = getBatchParameterName(routingResult);\n+    return(DataList)routingResult.getContext().getStructuredParameter(batchParameterName);\n   }\n \n-  private URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String queryParam, URI uri)\n+  private URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String batchParamName, URI uri)\n   {\n     DataList criteriaList = new DataList(1);\n     criteriaList.add(criteria.data());\n+    DataMap queryParams = extractQueryParamsFromResourceContext(resourceContext);\n     return URIParamUtils.replaceQueryParam(uri,\n-                                           queryParam,\n+                                           batchParamName,\n                                            criteriaList,\n-                                           resourceContext.getParameters(),\n+                                           queryParams,\n                                            resourceContext.getRestliProtocolVersion());\n   }\n+\n+  private DataMap extractQueryParamsFromResourceContext(ResourceContextImpl resourceContext)\n+  {\n+    try\n+    {\n+      DataMap queryParams = resourceContext.getParameters().copy();\n+      if (queryParams.containsKey(RestConstants.FIELDS_PARAM))\n+      {\n+        queryParams.put(RestConstants.FIELDS_PARAM, resourceContext.getProjectionMask().getDataMap());\n+      }\n+      if (queryParams.containsKey(RestConstants.PAGING_FIELDS_PARAM))\n+      {\n+        queryParams.put(RestConstants.PAGING_FIELDS_PARAM, resourceContext.getPagingProjectionMask().getDataMap());\n+      }\n+      if (queryParams.containsKey(RestConstants.METADATA_FIELDS_PARAM))\n+      {\n+        queryParams.put(RestConstants.METADATA_FIELDS_PARAM, resourceContext.getMetadataProjectionMask().getDataMap());\n+      }\n+      return queryParams;\n+    }\n+    catch (CloneNotSupportedException cloneNotSupportedException)\n+    {\n+      return resourceContext.getParameters();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e5c57a83f3cfc7ef4207de5cb77dd4b9ac4853e"}, "originalPosition": 74}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e5c57a83f3cfc7ef4207de5cb77dd4b9ac4853e", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/6e5c57a83f3cfc7ef4207de5cb77dd4b9ac4853e", "committedDate": "2020-06-01T17:52:46Z", "message": "When server builds URI and projection fields are included, convert raw string to MaskTree"}, "afterCommit": {"oid": "efcb515c721a5a92e3a475b9e782a44302984db0", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/efcb515c721a5a92e3a475b9e782a44302984db0", "committedDate": "2020-06-01T21:51:28Z", "message": "When server builds URI and projection fields are included, convert raw string to MaskTree"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjA4NzIw", "url": "https://github.com/linkedin/rest.li/pull/312#pullrequestreview-422208720", "createdAt": "2020-06-01T21:53:52Z", "commit": {"oid": "efcb515c721a5a92e3a475b9e782a44302984db0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMTo1Mzo1MlrOGdbZ5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMTo1Mzo1MlrOGdbZ5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxMDg4NQ==", "bodyText": "These tested URL has not:\n\nBe real batch criterias at all (just single criteria) I will add to later test\nThese URLs are not exhaustive, I will add more URL test cases", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r433510885", "createdAt": "2020-06-01T21:53:52Z", "author": {"login": "BrianPin"}, "path": "restli-server/src/test/java/com/linkedin/restli/internal/server/response/TestBatchFinderResponseBuilder.java", "diffHunk": "@@ -341,4 +344,62 @@ private static Foo generateMetaData(Boolean onError)\n     Foo foo = new Foo(map);\n     return foo;\n   }\n+\n+  @DataProvider(name = \"build_uri_test_cases\")\n+  public Object[][] testBuildCriteriaURIDataProvider() throws RestLiSyntaxException\n+  {\n+    String[] requestUrls =\n+    {\n+      \"/greetings?bq=searchGreetings&criteria=List((id:1,tone:SINCERE))&message=hello\",\n+      \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))\",\n+      \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))&fields=candidate\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efcb515c721a5a92e3a475b9e782a44302984db0"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjA5Nzcx", "url": "https://github.com/linkedin/rest.li/pull/312#pullrequestreview-422209771", "createdAt": "2020-06-01T21:56:03Z", "commit": {"oid": "efcb515c721a5a92e3a475b9e782a44302984db0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMTo1NjowM1rOGdbdIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMTo1NjowM1rOGdbdIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxMTcxNQ==", "bodyText": "In this part of error handling, because I don't expect to change all the callers of buildCriteriaURI with throws\nso I instead throws a RuntimeException", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r433511715", "createdAt": "2020-06-01T21:56:03Z", "author": {"login": "BrianPin"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java", "diffHunk": "@@ -195,26 +196,52 @@ private AnyRecord buildMetaData(CollectionResult<RecordTemplate, RecordTemplate>\n     return null;\n   }\n \n-  private String getBatchParamterName(RoutingResult routingResult)\n+  private String getBatchParameterName(RoutingResult routingResult)\n   {\n     int batchFinderCriteriaIndex = routingResult.getResourceMethod().getBatchFinderCriteriaParamIndex();\n     return routingResult.getResourceMethod().getParameters().get(batchFinderCriteriaIndex).getName();\n   }\n \n   private DataList getCriteriaParameters(RoutingResult routingResult)\n   {\n-    String batchParamName = getBatchParamterName(routingResult);\n-    return(DataList)routingResult.getContext().getStructuredParameter(batchParamName);\n+    String batchParameterName = getBatchParameterName(routingResult);\n+    return(DataList)routingResult.getContext().getStructuredParameter(batchParameterName);\n   }\n \n-  private URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String queryParam, URI uri)\n+  protected static URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String batchParameterName, URI uri)\n   {\n     DataList criteriaList = new DataList(1);\n     criteriaList.add(criteria.data());\n+    DataMap queryParams = extractQueryParamsFromResourceContext(resourceContext);\n     return URIParamUtils.replaceQueryParam(uri,\n-                                           queryParam,\n+                                           batchParameterName,\n                                            criteriaList,\n-                                           resourceContext.getParameters(),\n+                                           queryParams,\n                                            resourceContext.getRestliProtocolVersion());\n   }\n+\n+  protected static DataMap extractQueryParamsFromResourceContext(ResourceContextImpl resourceContext)\n+  {\n+    try\n+    {\n+      DataMap queryParams = resourceContext.getParameters().clone();\n+      if (queryParams.containsKey(RestConstants.FIELDS_PARAM))\n+      {\n+        queryParams.put(RestConstants.FIELDS_PARAM, resourceContext.getProjectionMask().getDataMap());\n+      }\n+      if (queryParams.containsKey(RestConstants.PAGING_FIELDS_PARAM))\n+      {\n+        queryParams.put(RestConstants.PAGING_FIELDS_PARAM, resourceContext.getPagingProjectionMask().getDataMap());\n+      }\n+      if (queryParams.containsKey(RestConstants.METADATA_FIELDS_PARAM))\n+      {\n+        queryParams.put(RestConstants.METADATA_FIELDS_PARAM, resourceContext.getMetadataProjectionMask().getDataMap());\n+      }\n+      return queryParams;\n+    }\n+    catch (CloneNotSupportedException exception)\n+    {\n+      throw new RuntimeException(exception);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efcb515c721a5a92e3a475b9e782a44302984db0"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMzE0NDk0", "url": "https://github.com/linkedin/rest.li/pull/312#pullrequestreview-422314494", "createdAt": "2020-06-02T03:15:15Z", "commit": {"oid": "efcb515c721a5a92e3a475b9e782a44302984db0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMzoxNToxNVrOGdgsjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMzoxNToxNVrOGdgsjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU5NzU4Mg==", "bodyText": "Why is this an array instead of a constant? Will we have more values here?", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r433597582", "createdAt": "2020-06-02T03:15:15Z", "author": {"login": "karthikrg"}, "path": "restli-server/src/test/java/com/linkedin/restli/internal/server/response/TestBatchFinderResponseBuilder.java", "diffHunk": "@@ -341,4 +344,62 @@ private static Foo generateMetaData(Boolean onError)\n     Foo foo = new Foo(map);\n     return foo;\n   }\n+\n+  @DataProvider(name = \"build_uri_test_cases\")\n+  public Object[][] testBuildCriteriaURIDataProvider() throws RestLiSyntaxException\n+  {\n+    String[] requestUrls =\n+    {\n+      \"/greetings?bq=searchGreetings&criteria=List((id:1,tone:SINCERE))&message=hello\",\n+      \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))\",\n+      \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))&fields=candidate\",\n+    };\n+\n+    String[] batchCriteriaParameterNames =\n+    {\n+      \"criteria\",\n+      \"candidates\",\n+      \"candidates\"\n+    };\n+\n+    ProtocolVersion[] protocolVersions =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efcb515c721a5a92e3a475b9e782a44302984db0"}, "originalPosition": 62}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "efcb515c721a5a92e3a475b9e782a44302984db0", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/efcb515c721a5a92e3a475b9e782a44302984db0", "committedDate": "2020-06-01T21:51:28Z", "message": "When server builds URI and projection fields are included, convert raw string to MaskTree"}, "afterCommit": {"oid": "a882594de73c32f39ef1351c01f0e9ed2c7f7a19", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/a882594de73c32f39ef1351c01f0e9ed2c7f7a19", "committedDate": "2020-06-02T07:10:58Z", "message": "When server builds URI and projection fields are included, convert raw string to MaskTree"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNDA5ODM0", "url": "https://github.com/linkedin/rest.li/pull/312#pullrequestreview-422409834", "createdAt": "2020-06-02T07:27:41Z", "commit": {"oid": "a882594de73c32f39ef1351c01f0e9ed2c7f7a19"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNzoyNzo0MVrOGdlVng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNzoyNzo0MVrOGdlVng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY3MzYzMA==", "bodyText": "Note the original case's %3B became ;\nthat is minor but I just want to highlight it in case something is wrong", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r433673630", "createdAt": "2020-06-02T07:27:41Z", "author": {"login": "BrianPin"}, "path": "restli-server/src/test/java/com/linkedin/restli/internal/server/response/TestBatchFinderResponseBuilder.java", "diffHunk": "@@ -341,4 +344,81 @@ private static Foo generateMetaData(Boolean onError)\n     Foo foo = new Foo(map);\n     return foo;\n   }\n+\n+  @DataProvider(name = \"build_uri_test_cases\")\n+  public Object[][] testBuildCriteriaURIDataProvider() throws RestLiSyntaxException\n+  {\n+    String[] requestURIs =\n+    {\n+        \"/greetings?bq=searchGreetings&criteria=List((id:1,tone:SINCERE))&message=hello\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))&fields=candidate\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577),(candidate:urn%3Baba%3Ats_hire_identity%3A88156588))\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577),(candidate:urn%3Baba%3Ats_hire_identity%3A88156588))&fields=candidate\",\n+    };\n+\n+    String[] batchCriteriaParameterNames =\n+    {\n+        \"criteria\",\n+        \"candidates\",\n+        \"candidates\",\n+        \"candidates\",\n+        \"candidates\",\n+    };\n+\n+    String[] expectedURIs =\n+    {\n+        \"/greetings?bq=searchGreetings&criteria=List((id:1,tone:SINCERE))&message=hello\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))&fields=candidate\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn;aba%3Ats_hire_identity%3A88156588))\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))&fields=candidate\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn;aba%3Ats_hire_identity%3A88156588))&fields=candidate\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a882594de73c32f39ef1351c01f0e9ed2c7f7a19"}, "originalPosition": 74}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a882594de73c32f39ef1351c01f0e9ed2c7f7a19", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/a882594de73c32f39ef1351c01f0e9ed2c7f7a19", "committedDate": "2020-06-02T07:10:58Z", "message": "When server builds URI and projection fields are included, convert raw string to MaskTree"}, "afterCommit": {"oid": "b0a1d298e6accfa7c572398bcd5754d7f5b1ad18", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/b0a1d298e6accfa7c572398bcd5754d7f5b1ad18", "committedDate": "2020-06-02T17:32:13Z", "message": "When server builds URI and projection fields are included, convert raw string to MaskTree"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyOTcxMzE5", "url": "https://github.com/linkedin/rest.li/pull/312#pullrequestreview-422971319", "createdAt": "2020-06-02T18:58:31Z", "commit": {"oid": "677c7094617bc60d2386e32394abc1ac540ca9da"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODo1ODozMVrOGd_5aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODo1ODozMVrOGd_5aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEwODc3Nw==", "bodyText": "If I remember correctly, you do not have to do this. You can just throw a RestLiServiceException with 500 status from within extractQueryParamsFromResourceContext method and the framework should convert that into an error response.", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r434108777", "createdAt": "2020-06-02T18:58:31Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java", "diffHunk": "@@ -105,45 +107,56 @@ public RestLiResponse buildResponse(RoutingResult routingResult,\n     TimingContextUtil.beginTiming(routingResult.getContext().getRawRequestContext(),\n         FrameworkTimingKeys.SERVER_RESPONSE_RESTLI_PROJECTION_APPLY.key());\n \n-    for (Object criteriaParam : criteriaParams.values())\n+    try\n     {\n-      RecordTemplate criteria = new AnyRecord((DataMap) criteriaParam);\n-      BatchFinderEntry entry;\n-      if (result.getResults().containsKey(criteria))\n+      for (Object criteriaParam : criteriaParams.values())\n       {\n-        CollectionResult<RecordTemplate, RecordTemplate> cr = result.getResult(criteria);\n-\n-        //Process elements\n-        List<AnyRecord> elements = buildElements(cr, resourceContext);\n-\n-        //Process paging\n-        final CollectionMetadata projectedPaging =\n-            buildPaginationMetaData(routingResult, criteria, resourceContext, request, cr);\n-\n-        //Process metadata\n-        final AnyRecord projectedCustomMetadata = buildMetaData(cr, resourceContext);\n-\n-        entry = new BatchFinderEntry(elements, projectedPaging, projectedCustomMetadata);\n-      }\n-      else if (result.getErrors().containsKey(criteria))\n-      {\n-        entry = new BatchFinderEntry(result.getErrors().get(criteria));\n+        RecordTemplate criteria = new AnyRecord((DataMap) criteriaParam);\n+        BatchFinderEntry entry;\n+        if (result.getResults().containsKey(criteria))\n+        {\n+          CollectionResult<RecordTemplate, RecordTemplate> cr = result.getResult(criteria);\n+\n+          //Process elements\n+          List<AnyRecord> elements = buildElements(cr, resourceContext);\n+\n+          //Process paging\n+          final CollectionMetadata projectedPaging =\n+              buildPaginationMetaData(routingResult, criteria, resourceContext, request, cr);\n+\n+          //Process metadata\n+          final AnyRecord projectedCustomMetadata = buildMetaData(cr, resourceContext);\n+\n+          entry = new BatchFinderEntry(elements, projectedPaging, projectedCustomMetadata);\n+        }\n+        else if (result.getErrors().containsKey(criteria))\n+        {\n+          entry = new BatchFinderEntry(result.getErrors().get(criteria));\n+        }\n+        else\n+        {\n+          entry = new BatchFinderEntry(\n+              new RestLiServiceException(S_404_NOT_FOUND, \"The server didn't find a representation for this criteria\"));\n+        }\n+\n+        collectionResponse.add(entry);\n       }\n-      else\n-      {\n-        entry = new BatchFinderEntry(\n-            new RestLiServiceException(S_404_NOT_FOUND, \"The server didn't find a representation for this criteria\"));\n-      }\n-\n-      collectionResponse.add(entry);\n-    }\n \n-    TimingContextUtil.endTiming(routingResult.getContext().getRawRequestContext(),\n-        FrameworkTimingKeys.SERVER_RESPONSE_RESTLI_PROJECTION_APPLY.key());\n+      TimingContextUtil.endTiming(routingResult.getContext().getRawRequestContext(),\n+          FrameworkTimingKeys.SERVER_RESPONSE_RESTLI_PROJECTION_APPLY.key());\n \n-    return new RestLiResponseDataImpl<>(new BatchFinderResponseEnvelope(HttpStatus.S_200_OK, collectionResponse),\n-                                        headers,\n-                                        cookies);\n+      return new RestLiResponseDataImpl<>(new BatchFinderResponseEnvelope(HttpStatus.S_200_OK, collectionResponse),\n+          headers,\n+          cookies);\n+    }\n+    catch (CloneNotSupportedException exception)\n+    {\n+      BatchFinderEntry entry = new BatchFinderEntry(\n+          new RestLiServiceException(S_500_INTERNAL_SERVER_ERROR, \"Batch finder response builder failed when rebuild projection URI\"));\n+      return new RestLiResponseDataImpl<>(new BatchFinderResponseEnvelope(S_500_INTERNAL_SERVER_ERROR, collectionResponse),\n+          headers,\n+          cookies);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677c7094617bc60d2386e32394abc1ac540ca9da"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMDUwNTUx", "url": "https://github.com/linkedin/rest.li/pull/312#pullrequestreview-423050551", "createdAt": "2020-06-02T20:55:15Z", "commit": {"oid": "511313d74d93a566098cb80b8e44c44f76adc771"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDo1NToxNVrOGeDooQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDo1ODo1NlrOGeDwWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3MDAxNw==", "bodyText": "I'd suggest making private methods package-private if they need to be accessed by a unit test. Making it protected opens the access too much and implies an intended inheritance relationship.", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r434170017", "createdAt": "2020-06-02T20:55:15Z", "author": {"login": "evanw555"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java", "diffHunk": "@@ -195,26 +204,47 @@ private AnyRecord buildMetaData(CollectionResult<RecordTemplate, RecordTemplate>\n     return null;\n   }\n \n-  private String getBatchParamterName(RoutingResult routingResult)\n+  private String getBatchParameterName(RoutingResult routingResult)\n   {\n     int batchFinderCriteriaIndex = routingResult.getResourceMethod().getBatchFinderCriteriaParamIndex();\n     return routingResult.getResourceMethod().getParameters().get(batchFinderCriteriaIndex).getName();\n   }\n \n   private DataList getCriteriaParameters(RoutingResult routingResult)\n   {\n-    String batchParamName = getBatchParamterName(routingResult);\n-    return(DataList)routingResult.getContext().getStructuredParameter(batchParamName);\n+    String batchParameterName = getBatchParameterName(routingResult);\n+    return(DataList)routingResult.getContext().getStructuredParameter(batchParameterName);\n   }\n \n-  private URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String queryParam, URI uri)\n+  protected static URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String batchParameterName, URI uri)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "511313d74d93a566098cb80b8e44c44f76adc771"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3MDEwNQ==", "bodyText": "nit: fix spacing", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r434170105", "createdAt": "2020-06-02T20:55:26Z", "author": {"login": "evanw555"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java", "diffHunk": "@@ -195,26 +204,47 @@ private AnyRecord buildMetaData(CollectionResult<RecordTemplate, RecordTemplate>\n     return null;\n   }\n \n-  private String getBatchParamterName(RoutingResult routingResult)\n+  private String getBatchParameterName(RoutingResult routingResult)\n   {\n     int batchFinderCriteriaIndex = routingResult.getResourceMethod().getBatchFinderCriteriaParamIndex();\n     return routingResult.getResourceMethod().getParameters().get(batchFinderCriteriaIndex).getName();\n   }\n \n   private DataList getCriteriaParameters(RoutingResult routingResult)\n   {\n-    String batchParamName = getBatchParamterName(routingResult);\n-    return(DataList)routingResult.getContext().getStructuredParameter(batchParamName);\n+    String batchParameterName = getBatchParameterName(routingResult);\n+    return(DataList)routingResult.getContext().getStructuredParameter(batchParameterName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "511313d74d93a566098cb80b8e44c44f76adc771"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3MTk5NQ==", "bodyText": "Wrapping so much logic here in a try-catch is excessive and makes it harder to understand.\nGiven that the resulting service error says that the error happens because Rest.li was unable to build the criteria URI, it makes sense to me to actually put this try-catch and service error inside #buildCriteriaURI", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r434171995", "createdAt": "2020-06-02T20:58:56Z", "author": {"login": "evanw555"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java", "diffHunk": "@@ -105,45 +107,52 @@ public RestLiResponse buildResponse(RoutingResult routingResult,\n     TimingContextUtil.beginTiming(routingResult.getContext().getRawRequestContext(),\n         FrameworkTimingKeys.SERVER_RESPONSE_RESTLI_PROJECTION_APPLY.key());\n \n-    for (Object criteriaParam : criteriaParams.values())\n+    try", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "511313d74d93a566098cb80b8e44c44f76adc771"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "946e1305d793645c8cc300d5ef6334af8d82642f", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/946e1305d793645c8cc300d5ef6334af8d82642f", "committedDate": "2020-06-02T22:52:44Z", "message": "When server builds URI and projection fields are included, convert raw string to MaskTree"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48bde76df70a9f4ccc18db6240e8fa4c618de0bd", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/48bde76df70a9f4ccc18db6240e8fa4c618de0bd", "committedDate": "2020-06-02T22:52:44Z", "message": "Address comment on batchfinder exceptions into a single 500 error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e01f7b5863d24d5158ae063219e7d6e10ea1221", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/9e01f7b5863d24d5158ae063219e7d6e10ea1221", "committedDate": "2020-06-02T22:52:45Z", "message": "Address throw restli service exception comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4931bb4fc274dfb2aa5d7b68b28953d6402d687a", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/4931bb4fc274dfb2aa5d7b68b28953d6402d687a", "committedDate": "2020-06-02T22:52:45Z", "message": "Address the comment for making the solution using simpler code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "511313d74d93a566098cb80b8e44c44f76adc771", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/511313d74d93a566098cb80b8e44c44f76adc771", "committedDate": "2020-06-02T19:27:23Z", "message": "Address throw restli service exception comment"}, "afterCommit": {"oid": "4931bb4fc274dfb2aa5d7b68b28953d6402d687a", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/4931bb4fc274dfb2aa5d7b68b28953d6402d687a", "committedDate": "2020-06-02T22:52:45Z", "message": "Address the comment for making the solution using simpler code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMTEyNTM0", "url": "https://github.com/linkedin/rest.li/pull/312#pullrequestreview-423112534", "createdAt": "2020-06-02T22:59:43Z", "commit": {"oid": "4931bb4fc274dfb2aa5d7b68b28953d6402d687a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjo1OTo0M1rOGeGskw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjo1OTo0M1rOGeGskw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIyMDE3OQ==", "bodyText": "Using try-catches to dictate normal logic flow (rather than just for exceptions) is bad practice. I would suggest retrieving the generic object from the map and checking its type.\nOverall though this is better IMO.", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r434220179", "createdAt": "2020-06-02T22:59:43Z", "author": {"login": "evanw555"}, "path": "restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java", "diffHunk": "@@ -62,7 +62,14 @@\n     {\n       if (dataMap.containsKey(parameterName))\n       {\n-        result.put(parameterName, URIMaskUtil.encodeMaskForURI(dataMap.getDataMap(parameterName)));\n+        try", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4931bb4fc274dfb2aa5d7b68b28953d6402d687a"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a42d09f7c3a062f78d71c22fac7abe166ca48854", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/a42d09f7c3a062f78d71c22fac7abe166ca48854", "committedDate": "2020-06-02T23:50:06Z", "message": "Address comment on class cases handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87cd2f535254013d67a0dfe6eb09972f90b28c6f", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/87cd2f535254013d67a0dfe6eb09972f90b28c6f", "committedDate": "2020-06-02T23:52:20Z", "message": "Address comment on spacing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMTU2NDQ3", "url": "https://github.com/linkedin/rest.li/pull/312#pullrequestreview-423156447", "createdAt": "2020-06-03T01:15:44Z", "commit": {"oid": "87cd2f535254013d67a0dfe6eb09972f90b28c6f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMToxNTo0NFrOGeI9SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMToxNTo0NFrOGeI9SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1NzIyNA==", "bodyText": "Minor comments:\n\nAdd a final else case which throws an exception. If one of these projection params is present but is not a string or data map, then it should be treated as an illegal argument.\nA minor optimization could be made here. You have 4 different get accessor calls here, you could do one initial get then perform the checks/casting on that object.", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r434257224", "createdAt": "2020-06-03T01:15:44Z", "author": {"login": "evanw555"}, "path": "restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java", "diffHunk": "@@ -62,7 +70,14 @@\n     {\n       if (dataMap.containsKey(parameterName))\n       {\n-        result.put(parameterName, URIMaskUtil.encodeMaskForURI(dataMap.getDataMap(parameterName)));\n+        if (dataMap.get(parameterName) instanceof String)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87cd2f535254013d67a0dfe6eb09972f90b28c6f"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49fd7b714f56e225e0ddb3237ecfc292a6886821", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/49fd7b714f56e225e0ddb3237ecfc292a6886821", "committedDate": "2020-06-03T04:32:59Z", "message": "Address comment to add test on BatchFinderResource and minor optimization"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMzE0ODgx", "url": "https://github.com/linkedin/rest.li/pull/312#pullrequestreview-423314881", "createdAt": "2020-06-03T08:08:18Z", "commit": {"oid": "49fd7b714f56e225e0ddb3237ecfc292a6886821"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwODowODoxOVrOGeQwog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwODowODoxOVrOGeQwog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM4NTA1OA==", "bodyText": "This is a cleaner solution, Nice!", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r434385058", "createdAt": "2020-06-03T08:08:19Z", "author": {"login": "karthikbalasub"}, "path": "restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java", "diffHunk": "@@ -53,6 +53,14 @@\n   private static final Pattern NORMALIZED_URI_PATTERN = Pattern.compile(\"(^/|/$)\");\n   private static final Pattern URI_SEPARATOR_PATTERN = Pattern.compile(\"/+\");\n \n+  /**\n+   * Return the string encoded version of query parameters.\n+   * For projection parameters stored in dataMap, this function handles both cases when the value is a original string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49fd7b714f56e225e0ddb3237ecfc292a6886821"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMzI4MTIy", "url": "https://github.com/linkedin/rest.li/pull/312#pullrequestreview-423328122", "createdAt": "2020-06-03T08:25:33Z", "commit": {"oid": "49fd7b714f56e225e0ddb3237ecfc292a6886821"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwODoyNTozM1rOGeRXug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwODoyNTozM1rOGeRXug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM5NTA2Ng==", "bodyText": "remove CloneNotSupportedException", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r434395066", "createdAt": "2020-06-03T08:25:33Z", "author": {"login": "aman1309"}, "path": "restli-server/src/test/java/com/linkedin/restli/internal/server/response/TestBatchFinderResponseBuilder.java", "diffHunk": "@@ -341,4 +344,94 @@ private static Foo generateMetaData(Boolean onError)\n     Foo foo = new Foo(map);\n     return foo;\n   }\n+\n+  @DataProvider(name = \"build_uri_test_cases\")\n+  public Object[][] testBuildCriteriaURIDataProvider() throws RestLiSyntaxException\n+  {\n+    String[] requestURIs =\n+    {\n+        \"/greetings?bq=searchGreetings&criteria=List((id:1,tone:SINCERE))&message=hello\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))&fields=candidate\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577),(candidate:urn%3Baba%3Ats_hire_identity%3A88156588))\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577),(candidate:urn%3Baba%3Ats_hire_identity%3A88156588))&fields=candidate\",\n+        \"/test/api/restli?bq=findSomething&fields=field1&search_criteria=List((field1:val1,field2:val2))\",\n+        \"/test/api/restli?bq=findSomething&fields=field1&search_criteria=List((field1:val1,field2:val1),(field1:val2,field2:val2))\",\n+        \"/test/api/restli?bq=findSomething&fields=person:(firstname,lastname)&search_criteria=List((field1:val1,field2:val2))\",\n+        \"/groups?fields=state,locale&metadataFields=city,age&pagingFields=start,count&q=emailDomain&search=List((field1:value1))\",\n+    };\n+\n+    String[] batchCriteriaParameterNames =\n+    {\n+        \"criteria\",\n+        \"candidates\",\n+        \"candidates\",\n+        \"candidates\",\n+        \"candidates\",\n+        \"search_criteria\",\n+        \"search_criteria\",\n+        \"search_criteria\",\n+        \"search\",\n+    };\n+\n+    String[] expectedURIs =\n+    {\n+        \"/greetings?bq=searchGreetings&criteria=List((id:1,tone:SINCERE))&message=hello\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))&fields=candidate\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn;aba%3Ats_hire_identity%3A88156588))\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))&fields=candidate\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn;aba%3Ats_hire_identity%3A88156588))&fields=candidate\",\n+        \"/test/api/restli?bq=findSomething&fields=field1&search_criteria=List((field1:val1,field2:val2))\",\n+        \"/test/api/restli?bq=findSomething&fields=field1&search_criteria=List((field1:val1,field2:val1))\",\n+        \"/test/api/restli?bq=findSomething&fields=field1&search_criteria=List((field1:val2,field2:val2))\",\n+        \"/test/api/restli?bq=findSomething&fields=person:(firstname,lastname)&search_criteria=List((field1:val1,field2:val2))\",\n+        \"/groups?fields=state,locale&metadataFields=city,age&pagingFields=start,count&q=emailDomain&search=List((field1:value1))\",\n+    };\n+\n+    int totalCriteriaCases = expectedURIs.length;\n+    Object[][] testData = new Object[totalCriteriaCases][5];\n+    int cases = 0;\n+    int uriIndex = 0;\n+    while (cases < totalCriteriaCases)\n+    {\n+      Object[] singleCase = new Object[5];\n+      URI uri = URI.create(requestURIs[uriIndex]);\n+      RequestContext requestContext = new RequestContext();\n+      requestContext.putLocalAttr(\"timingsDisabled\", true);\n+      ResourceContextImpl resourceContext = new ResourceContextImpl(new PathKeysImpl(),\n+          new RestRequestBuilder(uri)\n+              .setHeader(RestConstants.HEADER_RESTLI_PROTOCOL_VERSION, AllProtocolVersions.RESTLI_PROTOCOL_2_0_0.getProtocolVersion().toString())\n+              .build(),\n+          requestContext);\n+\n+      DataList criteriaParameters = (DataList) resourceContext.getStructuredParameter(batchCriteriaParameterNames[uriIndex]);\n+      for (int i = 0; i < criteriaParameters.size(); i++)\n+      {\n+        RecordTemplate criteria = new AnyRecord((DataMap) criteriaParameters.get(i));\n+        singleCase[0] = resourceContext;\n+        singleCase[1] = criteria;\n+        singleCase[2] = batchCriteriaParameterNames[uriIndex];\n+        singleCase[3] = uri;\n+        singleCase[4] = URI.create(expectedURIs[cases]);\n+        testData[cases] = singleCase;\n+        cases ++;\n+      }\n+      uriIndex ++;\n+    }\n+\n+    return testData;\n+  }\n+\n+  @Test(dataProvider = \"build_uri_test_cases\")\n+  public void testBuildCriteriaURI(ResourceContextImpl resourceContext,\n+                                   RecordTemplate criteria,\n+                                   String batchParameterName,\n+                                   URI uri,\n+                                   URI expectedURI) throws CloneNotSupportedException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49fd7b714f56e225e0ddb3237ecfc292a6886821"}, "originalPosition": 129}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28ad12b36e7db40d783c461534a28653742ee1eb", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/28ad12b36e7db40d783c461534a28653742ee1eb", "committedDate": "2020-06-03T15:38:00Z", "message": "Remove unnecessary exception CloneNotSupportedException in test function"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNzIwMTc0", "url": "https://github.com/linkedin/rest.li/pull/312#pullrequestreview-423720174", "createdAt": "2020-06-03T16:17:03Z", "commit": {"oid": "28ad12b36e7db40d783c461534a28653742ee1eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNjoxNzowM1rOGejd7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNjoxNzowM1rOGejd7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY5MTU2Nw==", "bodyText": "Is this for testing purpose only? If yes, we should add a comment \"package-private for testing purpose\".", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r434691567", "createdAt": "2020-06-03T16:17:03Z", "author": {"login": "nickibi"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java", "diffHunk": "@@ -195,24 +195,24 @@ private AnyRecord buildMetaData(CollectionResult<RecordTemplate, RecordTemplate>\n     return null;\n   }\n \n-  private String getBatchParamterName(RoutingResult routingResult)\n+  private String getBatchParameterName(RoutingResult routingResult)\n   {\n     int batchFinderCriteriaIndex = routingResult.getResourceMethod().getBatchFinderCriteriaParamIndex();\n     return routingResult.getResourceMethod().getParameters().get(batchFinderCriteriaIndex).getName();\n   }\n \n   private DataList getCriteriaParameters(RoutingResult routingResult)\n   {\n-    String batchParamName = getBatchParamterName(routingResult);\n-    return(DataList)routingResult.getContext().getStructuredParameter(batchParamName);\n+    String batchParameterName = getBatchParameterName(routingResult);\n+    return (DataList) routingResult.getContext().getStructuredParameter(batchParameterName);\n   }\n \n-  private URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String queryParam, URI uri)\n+  static URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String batchParameterName, URI uri)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28ad12b36e7db40d783c461534a28653742ee1eb"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNzIwMjUy", "url": "https://github.com/linkedin/rest.li/pull/312#pullrequestreview-423720252", "createdAt": "2020-06-03T16:17:08Z", "commit": {"oid": "28ad12b36e7db40d783c461534a28653742ee1eb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4818, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}