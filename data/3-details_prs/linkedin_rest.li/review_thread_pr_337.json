{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MTY4MjYz", "number": 337, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMzoxMTo0NVrOEHwiCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMzoxMzo0OFrOEHwjxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTcwNjM0OnYy", "diffSide": "RIGHT", "path": "gradle-plugins/src/integTest/groovy/com/linkedin/pegasus/gradle/PegasusPluginIntegrationTest.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMzoxMTo0NVrOGnT6EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMzoxMTo0NVrOGnT6EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg3MzgwOA==", "bodyText": "Nice, this is an excellent test to illustrate the issue behavior.", "url": "https://github.com/linkedin/rest.li/pull/337#discussion_r443873808", "createdAt": "2020-06-22T23:11:45Z", "author": {"login": "DPUkyle"}, "path": "gradle-plugins/src/integTest/groovy/com/linkedin/pegasus/gradle/PegasusPluginIntegrationTest.groovy", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.linkedin.pegasus.gradle\n+\n+import groovy.json.JsonOutput\n+import org.gradle.testkit.runner.GradleRunner\n+import org.junit.Rule\n+import org.junit.rules.TemporaryFolder\n+import spock.lang.Specification\n+\n+import static org.gradle.testkit.runner.TaskOutcome.SUCCESS\n+\n+class PegasusPluginIntegrationTest extends Specification {\n+  @Rule\n+  TemporaryFolder tempDir = new TemporaryFolder()\n+\n+  def 'apply pegasus plugin'() {\n+    setup:\n+    def buildFile = tempDir.newFile('build.gradle')\n+    buildFile.text = \"plugins { id 'pegasus' }\"\n+\n+    when:\n+    def result = GradleRunner.create()\n+        .withProjectDir(tempDir.root)\n+        .withPluginClasspath()\n+        .withArguments('mainDataTemplateJar')\n+        .forwardOutput()\n+        .build()\n+\n+    then:\n+    result.task(':mainDataTemplateJar').outcome == SUCCESS\n+  }\n+\n+  def 'mainCopySchema task will remove stale pdsc'() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00161e0849dd203dafe724ea21c41a388e2f2ad7"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTcwODAwOnYy", "diffSide": "RIGHT", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMzoxMjoyMFrOGnT67w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMDoyNDoxNVrOGnVJ1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg3NDAzMQ==", "bodyText": "I would undo this change to the imports (probably IJ organized the imports for you).", "url": "https://github.com/linkedin/rest.li/pull/337#discussion_r443874031", "createdAt": "2020-06-22T23:12:20Z", "author": {"login": "DPUkyle"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -57,9 +57,7 @@\n import org.gradle.api.plugins.JavaBasePlugin;\n import org.gradle.api.plugins.JavaPlugin;\n import org.gradle.api.plugins.JavaPluginConvention;\n-import org.gradle.api.tasks.Copy;\n-import org.gradle.api.tasks.SourceSet;\n-import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00161e0849dd203dafe724ea21c41a388e2f2ad7"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg5NDIzMA==", "bodyText": "Updated as stated.  and yes, it was automatic after the 5th one I believe.", "url": "https://github.com/linkedin/rest.li/pull/337#discussion_r443894230", "createdAt": "2020-06-23T00:24:15Z", "author": {"login": "Astro03"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -57,9 +57,7 @@\n import org.gradle.api.plugins.JavaBasePlugin;\n import org.gradle.api.plugins.JavaPlugin;\n import org.gradle.api.plugins.JavaPluginConvention;\n-import org.gradle.api.tasks.Copy;\n-import org.gradle.api.tasks.SourceSet;\n-import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg3NDAzMQ=="}, "originalCommit": {"oid": "00161e0849dd203dafe724ea21c41a388e2f2ad7"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTcxMDc2OnYy", "diffSide": "RIGHT", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMzoxMzo0OFrOGnT8pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMzoxMzo0OFrOGnT8pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg3NDQ3MQ==", "bodyText": "Good use of Task#onlyIf to leverage logging", "url": "https://github.com/linkedin/rest.li/pull/337#discussion_r443874471", "createdAt": "2020-06-22T23:13:48Z", "author": {"login": "DPUkyle"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -1631,26 +1629,28 @@ protected GenerateDataTemplateTask configureDataTemplateGeneration(Project proje\n     Task compileTask = project.getTasks().getByName(targetSourceSet.getCompileJavaTaskName());\n     compileTask.dependsOn(generateDataTemplatesTask);\n \n-    // we need to delete the build directory before staging files for translation/code generation, in case there were\n-    // left over files from a previous execution. This is not a problem if the input for translation/code generation\n-    // hasn't changed at all, because gradle will just realize the buildDir can be rebuilt from cache.\n-    Task destroyStaleFiles = project.getTasks().create(sourceSet.getName() + \"DestroyStaleFiles\");\n-    if (isPropertyTrue(project, DESTROY_STALE_FILES_ENABLE) && publishableSchemasBuildDir.exists())\n-    {\n-      destroyStaleFiles.getInputs().dir(publishableSchemasBuildDir);\n-      destroyStaleFiles.doLast(new CacheableAction<>(task -> project.delete(publishableSchemasBuildDir)));\n-    }\n+    // Dummy task to maintain backward compatibility\n+    // TODO: Delete this task once use cases have had time to reference the new task\n+    Task destroyStaleFiles = project.getTasks().create(sourceSet.getName() + \"DestroyStaleFiles\", Delete.class);\n+    destroyStaleFiles.onlyIf(task -> {\n+      project.getLogger().lifecycle(\"{} task is a NO-OP task.\", task.getPath());\n+      return false;\n+    });\n \n     // Dummy task to maintain backward compatibility, as this task was replaced by CopySchemas\n     // TODO: Delete this task once use cases have had time to reference the new task\n-    Task copyPdscSchemasTask = project.getTasks().create(sourceSet.getName() + \"CopyPdscSchemas\");\n+    Task copyPdscSchemasTask = project.getTasks().create(sourceSet.getName() + \"CopyPdscSchemas\", Copy.class);\n     copyPdscSchemasTask.dependsOn(destroyStaleFiles);\n+    copyPdscSchemasTask.onlyIf(task -> {\n+      project.getLogger().lifecycle(\"{} task is a NO-OP task.\", task.getPath());\n+      return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00161e0849dd203dafe724ea21c41a388e2f2ad7"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 509, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}