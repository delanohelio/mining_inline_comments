{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMwOTEzMzA1", "number": 323, "title": "Fix non-deterministic issue for annotations in the generated data template code by using right schema location for typeref class template", "bodyText": "When rest.li process schema files to generate data template java code, the order of the input source file will cause the change in the annotation of the generated java class. For example:\nWhen a PDL or PDSC file A contains a data schema definition in B, and B is a typeref, when the input is in order [A, B], the generated B's class annotation comment will have a different class name compare to the two file in order [B, A]\nIn depth, this is caused by parsing result's _schemaAndLocations entry was populated in different order when parsing is processed.", "createdAt": "2020-06-08T08:20:12Z", "url": "https://github.com/linkedin/rest.li/pull/323", "merged": true, "mergeCommit": {"oid": "f5aa67bc738a703e1ec2c3f96066f6ebb8c3b2c8"}, "closed": true, "closedAt": "2020-06-15T22:22:18Z", "author": {"login": "BrianPin"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpXEuIgBqjM0MjIwMzYxODU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqc_ppABqjM0MzcxMDU3ODc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "915a2ed399019d488059411d7d1b28249aeb0700", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/915a2ed399019d488059411d7d1b28249aeb0700", "committedDate": "2020-06-08T08:10:08Z", "message": "Fix the non-deterministic issue by sorting source schema files everytime"}, "afterCommit": {"oid": "d4b9bcb1c1c900c2ed53ddefe26bc0f8d4ff81c0", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/d4b9bcb1c1c900c2ed53ddefe26bc0f8d4ff81c0", "committedDate": "2020-06-08T21:09:30Z", "message": "Fix the non-deterministic issue by sorting source schema files everytime"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NjM4OTcw", "url": "https://github.com/linkedin/rest.li/pull/323#pullrequestreview-426638970", "createdAt": "2020-06-08T21:35:36Z", "commit": {"oid": "d4b9bcb1c1c900c2ed53ddefe26bc0f8d4ff81c0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMTozNTozNlrOGgxRsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMTozNTozNlrOGgxRsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxNDk2MA==", "bodyText": "can you test using PDL? not to say pdsc is not good for this kind of testing, But since we are migrating to PDL. Need to make sure PDL is actually working. Also if we use PDL now, we don't need to worry about later they are migrated in this MP", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437014960", "createdAt": "2020-06-08T21:35:36Z", "author": {"login": "junchuanwang"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +210,78 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  @DataProvider(name = \"withMultiDataTemplateCases\")\n+  private Object[][] createDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b9bcb1c1c900c2ed53ddefe26bc0f8d4ff81c0"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NjM5NDMy", "url": "https://github.com/linkedin/rest.li/pull/323#pullrequestreview-426639432", "createdAt": "2020-06-08T21:36:26Z", "commit": {"oid": "d4b9bcb1c1c900c2ed53ddefe26bc0f8d4ff81c0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMTozNjoyNlrOGgxTAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMTozNjoyNlrOGgxTAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxNTI5Ng==", "bodyText": "as we discussed offline, Please confirm if the inline typeref's dataSchemaLocation is also using enclosingSchema's location.", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437015296", "createdAt": "2020-06-08T21:36:26Z", "author": {"login": "junchuanwang"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/TemplateSpecGenerator.java", "diffHunk": "@@ -712,6 +712,7 @@ private ClassTemplateSpec generateFixed(FixedDataSchema schema)\n \n   private TyperefTemplateSpec generateTyperef(TyperefDataSchema schema, TyperefDataSchema originalTyperefSchema)\n   {\n+    pushCurrentLocation(_schemaResolver.nameToDataSchemaLocations().get(schema.getFullName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b9bcb1c1c900c2ed53ddefe26bc0f8d4ff81c0"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d4b9bcb1c1c900c2ed53ddefe26bc0f8d4ff81c0", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/d4b9bcb1c1c900c2ed53ddefe26bc0f8d4ff81c0", "committedDate": "2020-06-08T21:09:30Z", "message": "Fix the non-deterministic issue by sorting source schema files everytime"}, "afterCommit": {"oid": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f", "committedDate": "2020-06-09T01:25:42Z", "message": "Add inline record test and PDL typed file test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NzYxMzUx", "url": "https://github.com/linkedin/rest.li/pull/323#pullrequestreview-426761351", "createdAt": "2020-06-09T03:18:02Z", "commit": {"oid": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMzoxODowMlrOGg3Y0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMzoxODowMlrOGg3Y0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExNTA4OQ==", "bodyText": "I think the only 2 cases you need are\n{\"BRecord.pdl\", \"InlineRecord.java\"},\n{\"InlineRecord.java\", \"BRecord.pdl\"},\"\nUnless you want to test duplicates  like you have here.", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437115089", "createdAt": "2020-06-09T03:18:02Z", "author": {"login": "Astro03"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +208,123 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  @DataProvider(name = \"with_typeref_field_in_record_pdsc\")\n+  private Object[][] createDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+            {\"PremiumService.pdsc\", \"IsoDuration.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_typeref_field_in_record_pdsc\")\n+  public void testDataTemplateGenerationOrderWithResolver(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  @DataProvider(name = \"with_typeref_field_in_record_pdl\")\n+  private Object[][] createCasesWithTyperefFieldInRecord()\n+  {\n+    return new Object[][]\n+        {\n+            {\"AField.pdl\", \"ARecord.pdl\", \"AField.java\", \"ARecord.java\"},\n+            {\"ARecord.pdl\", \"AField.pdl\", \"AField.java\", \"ARecord.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_typeref_field_in_record_pdl\")\n+  public void testCasesWithTyperefFieldInRecord(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  @DataProvider(name = \"with_inline_field_in_record_pdl\")\n+  private Object[][] createCasesWithInlineFieldInRecord()\n+  {\n+    return new Object[][]\n+        {\n+            {\"BRecord.pdl\", \"InlineRecord.java\", \"BRecord.java\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NzYxNTc5", "url": "https://github.com/linkedin/rest.li/pull/323#pullrequestreview-426761579", "createdAt": "2020-06-09T03:18:52Z", "commit": {"oid": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMzoxODo1MlrOGg3ZjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMzoxODo1MlrOGg3ZjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExNTI3Ng==", "bodyText": "nit: newline to end the file", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437115276", "createdAt": "2020-06-09T03:18:52Z", "author": {"login": "Astro03"}, "path": "generator/src/test/resources/generator/BRecord.pdl", "diffHunk": "@@ -0,0 +1,3 @@\n+record BRecord {\n+  bField: record InlineRecord {}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NzYxOTAw", "url": "https://github.com/linkedin/rest.li/pull/323#pullrequestreview-426761900", "createdAt": "2020-06-09T03:19:57Z", "commit": {"oid": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMzoxOTo1N1rOGg3amw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMzoxOTo1N1rOGg3amw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExNTU0Nw==", "bodyText": "nit: fill javadoc comment out?", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437115547", "createdAt": "2020-06-09T03:19:57Z", "author": {"login": "Astro03"}, "path": "generator/src/test/resources/referenceJava/BRecord.java", "diffHunk": "@@ -0,0 +1,135 @@\n+import java.util.List;\n+import javax.annotation.Generated;\n+import javax.annotation.Nonnull;\n+import com.linkedin.data.DataMap;\n+import com.linkedin.data.schema.PathSpec;\n+import com.linkedin.data.schema.RecordDataSchema;\n+import com.linkedin.data.schema.SchemaFormatType;\n+import com.linkedin.data.template.DataTemplateUtil;\n+import com.linkedin.data.template.GetMode;\n+import com.linkedin.data.template.RecordTemplate;\n+import com.linkedin.data.template.SetMode;\n+\n+\n+/**\n+ * ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NzYyNTU4", "url": "https://github.com/linkedin/rest.li/pull/323#pullrequestreview-426762558", "createdAt": "2020-06-09T03:22:29Z", "commit": {"oid": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMzoyMjoyOVrOGg3c-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMzoyMjoyOVrOGg3c-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExNjE1Mw==", "bodyText": "nit: testDataTemplateGenerationDeterminism  (the Deterministic in the sentence doesn't make sense)", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437116153", "createdAt": "2020-06-09T03:22:29Z", "author": {"login": "Astro03"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +208,123 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  @DataProvider(name = \"with_typeref_field_in_record_pdsc\")\n+  private Object[][] createDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+            {\"PremiumService.pdsc\", \"IsoDuration.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_typeref_field_in_record_pdsc\")\n+  public void testDataTemplateGenerationOrderWithResolver(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  @DataProvider(name = \"with_typeref_field_in_record_pdl\")\n+  private Object[][] createCasesWithTyperefFieldInRecord()\n+  {\n+    return new Object[][]\n+        {\n+            {\"AField.pdl\", \"ARecord.pdl\", \"AField.java\", \"ARecord.java\"},\n+            {\"ARecord.pdl\", \"AField.pdl\", \"AField.java\", \"ARecord.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_typeref_field_in_record_pdl\")\n+  public void testCasesWithTyperefFieldInRecord(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  @DataProvider(name = \"with_inline_field_in_record_pdl\")\n+  private Object[][] createCasesWithInlineFieldInRecord()\n+  {\n+    return new Object[][]\n+        {\n+            {\"BRecord.pdl\", \"InlineRecord.java\", \"BRecord.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_inline_field_in_record_pdl\")\n+  public void testCasesWithInlineFieldInRecord(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 1);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 1, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  private void testDataTemplateGenerationDeterministic(String[] pegasusFilenames, String[] javaFilenames)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NzY1MDQx", "url": "https://github.com/linkedin/rest.li/pull/323#pullrequestreview-426765041", "createdAt": "2020-06-09T03:31:04Z", "commit": {"oid": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMzozMTowNVrOGg3kyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMzozMTowNVrOGg3kyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExODE1NQ==", "bodyText": "Oh, sorry, I just realized what you are doing with all these tests.\nSince you only really have one test with a nuance on the inputs, the better practice would be to have 1 DataProvider with your different tests as it's inputs.\ni.e.\ndata resolver\n{\n// typered fields with pdsc files\n{ ...}\n{...}\n// typeref field with pdl files\n{ ...}\n{ ... }\n// inline field with pdsc files\n{ ...}\n{...}\n//inline field with pdl files\n{ ...}\n{ ...}\n}\nthen your test would be just the one test you had.", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437118155", "createdAt": "2020-06-09T03:31:05Z", "author": {"login": "Astro03"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +208,123 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  @DataProvider(name = \"with_typeref_field_in_record_pdsc\")\n+  private Object[][] createDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+            {\"PremiumService.pdsc\", \"IsoDuration.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_typeref_field_in_record_pdsc\")\n+  public void testDataTemplateGenerationOrderWithResolver(String[] testArgs)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2ODA0NDcy", "url": "https://github.com/linkedin/rest.li/pull/323#pullrequestreview-426804472", "createdAt": "2020-06-09T05:45:12Z", "commit": {"oid": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNTo0NToxMlrOGg5kOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNTo0NToxMlrOGg5kOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1MDc3Ng==", "bodyText": "A better way to test this (and avoid having to update java files everytime code generation logic changes) is to take two arrays of Pegasus schemas as input (in different order) and then generate the source files and compare they are same.", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437150776", "createdAt": "2020-06-09T05:45:12Z", "author": {"login": "karthikbalasub"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +208,123 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  @DataProvider(name = \"with_typeref_field_in_record_pdsc\")\n+  private Object[][] createDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+            {\"PremiumService.pdsc\", \"IsoDuration.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_typeref_field_in_record_pdsc\")\n+  public void testDataTemplateGenerationOrderWithResolver(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  @DataProvider(name = \"with_typeref_field_in_record_pdl\")\n+  private Object[][] createCasesWithTyperefFieldInRecord()\n+  {\n+    return new Object[][]\n+        {\n+            {\"AField.pdl\", \"ARecord.pdl\", \"AField.java\", \"ARecord.java\"},\n+            {\"ARecord.pdl\", \"AField.pdl\", \"AField.java\", \"ARecord.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_typeref_field_in_record_pdl\")\n+  public void testCasesWithTyperefFieldInRecord(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  @DataProvider(name = \"with_inline_field_in_record_pdl\")\n+  private Object[][] createCasesWithInlineFieldInRecord()\n+  {\n+    return new Object[][]\n+        {\n+            {\"BRecord.pdl\", \"InlineRecord.java\", \"BRecord.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_inline_field_in_record_pdl\")\n+  public void testCasesWithInlineFieldInRecord(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 1);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 1, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  private void testDataTemplateGenerationDeterministic(String[] pegasusFilenames, String[] javaFilenames)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2OTg0OTUy", "url": "https://github.com/linkedin/rest.li/pull/323#pullrequestreview-426984952", "createdAt": "2020-06-09T10:01:08Z", "commit": {"oid": "daf1944372684acf7166584d36b176fd99230d17"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDowMTowOFrOGhCJ4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDowNDowOFrOGhCQ0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5MTQ5MA==", "bodyText": "I suggest you return two arrays of strings as input.\nEg\n{{\"IsoDuration.pdsc\", \"PremiumService.pdsc\"}, {\"PremiumService.pdsc\", \"IsoDuration.pdsc\"}}\n\nAnd add a comment explaining why order is important for this test.", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437291490", "createdAt": "2020-06-09T10:01:08Z", "author": {"login": "karthikbalasub"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +206,62 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  @DataProvider(name = \"test_schema_permutation_deterministic\")\n+  private Object[][] createPermutedDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.pdsc\"},\n+            {\"AField.pdl\", \"ARecord.pdl\", \"ARecord.pdl\", \"AField.pdl\"},\n+            {\"BRecord.pdl\", \"BField.pdl\", \"BField.pdl\", \"BRecord.pdl\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "daf1944372684acf7166584d36b176fd99230d17"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5MzI2Ng==", "bodyText": "Is this guaranteed to return the files sorted alphabetically?", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437293266", "createdAt": "2020-06-09T10:04:08Z", "author": {"login": "karthikbalasub"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +206,62 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  @DataProvider(name = \"test_schema_permutation_deterministic\")\n+  private Object[][] createPermutedDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.pdsc\"},\n+            {\"AField.pdl\", \"ARecord.pdl\", \"ARecord.pdl\", \"AField.pdl\"},\n+            {\"BRecord.pdl\", \"BField.pdl\", \"BField.pdl\", \"BRecord.pdl\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"test_schema_permutation_deterministic\")\n+  public void testDataTemplateGenerationDeterminism(String[] testArgs)\n+      throws Exception\n+  {\n+    int permuteLength = testArgs.length / 2;\n+    String[] pegasusFilenames1 = Arrays.copyOfRange(testArgs, 0, permuteLength);\n+    String[] pegasusFilenames2 = Arrays.copyOfRange(testArgs, permuteLength, testArgs.length);\n+    File[] generatedFiles1 = generateDataTemplateFiles(pegasusFilenames1);\n+    File[] generatedFiles2 = generateDataTemplateFiles(pegasusFilenames2);\n+    checkGeneratedFilesConsistency(generatedFiles1, generatedFiles2);\n+  }\n+\n+  private File[] generateDataTemplateFiles(String[] pegasusFilenames) throws Exception\n+  {\n+    File tempDir = Files.createTempDirectory(\"restli\").toFile();\n+    File argFile = new File(tempDir, \"resolverPath\");\n+    Files.write(argFile.toPath(), Collections.singletonList(pegasusDir));\n+    System.setProperty(AbstractGenerator.GENERATOR_RESOLVER_PATH, String.format(\"@%s\", argFile.toPath()));\n+    String tempDirectoryPath1 = _tempDir.getAbsolutePath();\n+    String[] mainArgs = new String[pegasusFilenames.length + 1];\n+    mainArgs[0] = tempDirectoryPath1;\n+    for (int i = 0; i < pegasusFilenames.length; i++)\n+    {\n+      mainArgs[i+1] = new File(pegasusDir + FS + pegasusFilenames[i]).getAbsolutePath();\n+    }\n+    PegasusDataTemplateGenerator.main(mainArgs);\n+    File[] generatedFiles = _tempDir.listFiles((File dir, String name) -> name.endsWith(\".java\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "daf1944372684acf7166584d36b176fd99230d17"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3Mzk3Mjkz", "url": "https://github.com/linkedin/rest.li/pull/323#pullrequestreview-427397293", "createdAt": "2020-06-09T17:42:52Z", "commit": {"oid": "387e8f5da5715c676ef045d4233ab036ba3bdfd9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzo0Mjo1MlrOGhVceg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzo0Mjo1MlrOGhVceg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYwNzU0Ng==", "bodyText": "This change here is happening is only because the test wasn't need to mock the schema location before, now it has to, so I have to patch this test, it is not because of any additional logic change", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437607546", "createdAt": "2020-06-09T17:42:52Z", "author": {"login": "BrianPin"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestTemplateSpecGenerator.java", "diffHunk": "@@ -72,14 +74,18 @@\n   private AtomicInteger _uniqueNumberGenerator;\n   @Mock\n   private DataSchemaResolver _resolver;\n-  @Mock\n   private DataSchemaLocation _location;\n \n   @BeforeMethod\n   public void initMocks() {\n     MockitoAnnotations.initMocks(this);\n     _uniqueNumberGenerator = new AtomicInteger();\n-    Mockito.when(_resolver.nameToDataSchemaLocations()).thenReturn(Collections.singletonMap(INPUT_SCHEMA_NAME, _location));\n+    _location = new StringDataSchemaLocation(\"location\");\n+    HashMap<String, DataSchemaLocation> schemaToLocation = new HashMap<>();\n+    schemaToLocation.put(INPUT_SCHEMA_NAME, _location);\n+    schemaToLocation.put(CUSTOM_TYPE_1.getFullName(), _location);\n+    schemaToLocation.put(CUSTOM_TYPE_2.getFullName(), _location);\n+    Mockito.when(_resolver.nameToDataSchemaLocations()).thenReturn(schemaToLocation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "387e8f5da5715c676ef045d4233ab036ba3bdfd9"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NDAwNzcy", "url": "https://github.com/linkedin/rest.li/pull/323#pullrequestreview-427400772", "createdAt": "2020-06-09T17:47:31Z", "commit": {"oid": "387e8f5da5715c676ef045d4233ab036ba3bdfd9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzo0NzozMVrOGhVnTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzo1MDoyN1rOGhVtuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxMDMxOA==", "bodyText": "I don't see that consecutive calls would return the same order: https://docs.oracle.com/javase/7/docs/api/java/io/File.html#listFiles()\nI suggest sorting the generateFiles array to be sure this cannot cause flakiness.", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437610318", "createdAt": "2020-06-09T17:47:31Z", "author": {"login": "karthikbalasub"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +206,62 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  @DataProvider(name = \"test_schema_permutation_deterministic\")\n+  private Object[][] createPermutedDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.pdsc\"},\n+            {\"AField.pdl\", \"ARecord.pdl\", \"ARecord.pdl\", \"AField.pdl\"},\n+            {\"BRecord.pdl\", \"BField.pdl\", \"BField.pdl\", \"BRecord.pdl\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"test_schema_permutation_deterministic\")\n+  public void testDataTemplateGenerationDeterminism(String[] testArgs)\n+      throws Exception\n+  {\n+    int permuteLength = testArgs.length / 2;\n+    String[] pegasusFilenames1 = Arrays.copyOfRange(testArgs, 0, permuteLength);\n+    String[] pegasusFilenames2 = Arrays.copyOfRange(testArgs, permuteLength, testArgs.length);\n+    File[] generatedFiles1 = generateDataTemplateFiles(pegasusFilenames1);\n+    File[] generatedFiles2 = generateDataTemplateFiles(pegasusFilenames2);\n+    checkGeneratedFilesConsistency(generatedFiles1, generatedFiles2);\n+  }\n+\n+  private File[] generateDataTemplateFiles(String[] pegasusFilenames) throws Exception\n+  {\n+    File tempDir = Files.createTempDirectory(\"restli\").toFile();\n+    File argFile = new File(tempDir, \"resolverPath\");\n+    Files.write(argFile.toPath(), Collections.singletonList(pegasusDir));\n+    System.setProperty(AbstractGenerator.GENERATOR_RESOLVER_PATH, String.format(\"@%s\", argFile.toPath()));\n+    String tempDirectoryPath1 = _tempDir.getAbsolutePath();\n+    String[] mainArgs = new String[pegasusFilenames.length + 1];\n+    mainArgs[0] = tempDirectoryPath1;\n+    for (int i = 0; i < pegasusFilenames.length; i++)\n+    {\n+      mainArgs[i+1] = new File(pegasusDir + FS + pegasusFilenames[i]).getAbsolutePath();\n+    }\n+    PegasusDataTemplateGenerator.main(mainArgs);\n+    File[] generatedFiles = _tempDir.listFiles((File dir, String name) -> name.endsWith(\".java\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5MzI2Ng=="}, "originalCommit": {"oid": "daf1944372684acf7166584d36b176fd99230d17"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxMTk2Mw==", "bodyText": "I guess I made a mistake in my suggestion, what I wanted is for this method to take 2 args:\n(String[] inputSchemasOrder1, String[] inputSchemasOrder2)", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437611963", "createdAt": "2020-06-09T17:50:27Z", "author": {"login": "karthikbalasub"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +206,64 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  /**\n+   *\n+   * @return an array of test cases where each case has two array of test schema file names. Those file names are\n+   *   in the different permutations of same group of test schema files\n+   */\n+  @DataProvider(name = \"test_schema_permutation_determinisim\")\n+  private Object[][] createPermutedDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {new String[]{\"IsoDuration.pdsc\", \"PremiumService.pdsc\"}, new String[]{\"PremiumService.pdsc\", \"IsoDuration.pdsc\"}},\n+            {new String[]{\"AField.pdl\", \"ARecord.pdl\"}, new String[]{\"ARecord.pdl\", \"AField.pdl\"}},\n+            {new String[]{\"BRecord.pdl\", \"BField.pdl\"}, new String[]{\"BField.pdl\", \"BRecord.pdl\"}},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"test_schema_permutation_determinisim\")\n+  public void testDataTemplateGenerationDeterminism(String[][] testArgs)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "387e8f5da5715c676ef045d4233ab036ba3bdfd9"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NTQ4NDQ0", "url": "https://github.com/linkedin/rest.li/pull/323#pullrequestreview-427548444", "createdAt": "2020-06-09T21:11:15Z", "commit": {"oid": "ded7c8c0df87cee38002a807ec216813fc10cb65"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5Mjc0MzA3", "url": "https://github.com/linkedin/rest.li/pull/323#pullrequestreview-429274307", "createdAt": "2020-06-11T20:41:54Z", "commit": {"oid": "a5afd596403a8c56fce0dd67e66c068b7fa0396d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "016da33797fa463c9ce9fb775a47c325a0613dff", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/016da33797fa463c9ce9fb775a47c325a0613dff", "committedDate": "2020-06-12T02:43:26Z", "message": "Fix the non-deterministic issue by sorting source schema files everytime"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abca9456c31005b6e1c60fd2d2b8e47989549052", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/abca9456c31005b6e1c60fd2d2b8e47989549052", "committedDate": "2020-06-12T02:43:26Z", "message": "Add inline record test and PDL typed file test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "463e56c9d71ee87129ad4e63e2863afa7d7db1be", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/463e56c9d71ee87129ad4e63e2863afa7d7db1be", "committedDate": "2020-06-12T02:43:26Z", "message": "address comment regarding test code logic and make it clear"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5937fa473d49241c13c6f0e9e4b50547658b75b", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/c5937fa473d49241c13c6f0e9e4b50547658b75b", "committedDate": "2020-06-12T02:43:26Z", "message": "address comment for no new line at end of file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5326383483d6aaa1d338dec43d5f905382041fbf", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/5326383483d6aaa1d338dec43d5f905382041fbf", "committedDate": "2020-06-12T02:43:26Z", "message": "Change test function naming for clarity to address comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce400abfd211d14705faf3eb34a45065bed1e02c", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/ce400abfd211d14705faf3eb34a45065bed1e02c", "committedDate": "2020-06-12T02:43:26Z", "message": "Addressing comment to have better test case arrangement and address other test case failures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7c38f77439154b4ee96907657964fb592c5393d", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/a7c38f77439154b4ee96907657964fb592c5393d", "committedDate": "2020-06-12T02:43:26Z", "message": "Addressing Karthik's comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a17a5eaadc399c865d4feeb81cc89f23ead78a5", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/7a17a5eaadc399c865d4feeb81cc89f23ead78a5", "committedDate": "2020-06-12T02:43:26Z", "message": "Addressing comment and fix bug for generated files in the same dir"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f498a017197a6847d29edb34500040177dfccd4", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/9f498a017197a6847d29edb34500040177dfccd4", "committedDate": "2020-06-12T02:43:26Z", "message": "Address all comments and made sure if the fix is not in place the test case will fail"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a5afd596403a8c56fce0dd67e66c068b7fa0396d", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/a5afd596403a8c56fce0dd67e66c068b7fa0396d", "committedDate": "2020-06-10T01:44:51Z", "message": "Address all comments and made sure if the fix is not in place the test case will fail"}, "afterCommit": {"oid": "16304caa56054ac353f560c931d8e898a7210aff", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/16304caa56054ac353f560c931d8e898a7210aff", "committedDate": "2020-06-12T03:22:34Z", "message": "Make naming of test data properly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1695bd26d47707899ad4d1d76d09e87579168d57", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/1695bd26d47707899ad4d1d76d09e87579168d57", "committedDate": "2020-06-12T06:37:27Z", "message": "Make naming of test data properly"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "16304caa56054ac353f560c931d8e898a7210aff", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/16304caa56054ac353f560c931d8e898a7210aff", "committedDate": "2020-06-12T03:22:34Z", "message": "Make naming of test data properly"}, "afterCommit": {"oid": "1695bd26d47707899ad4d1d76d09e87579168d57", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/1695bd26d47707899ad4d1d76d09e87579168d57", "committedDate": "2020-06-12T06:37:27Z", "message": "Make naming of test data properly"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4837, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}