{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NjY3MDk4", "number": 339, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzo1ODozMFrOEhWzeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNDo0Mzo1OFrOE-8sTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDEyMDkwOnYy", "diffSide": "RIGHT", "path": "data-transform/src/main/java/com/linkedin/data/transform/filter/request/MaskCreator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzo1ODozMFrOHOoI_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMDo0ODo1NFrOHQKb2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5OTc3Mg==", "bodyText": "braces on new line?", "url": "https://github.com/linkedin/rest.li/pull/339#discussion_r485099772", "createdAt": "2020-09-08T17:58:30Z", "author": {"login": "BrianPin"}, "path": "data-transform/src/main/java/com/linkedin/data/transform/filter/request/MaskCreator.java", "diffHunk": "@@ -57,6 +57,23 @@ public static MaskTree createPositiveMask(Collection<PathSpec> paths)\n     return createMaskTree(paths, MaskOperation.POSITIVE_MASK_OP);\n   }\n \n+  /**\n+   * Create a positive mask for the given set.\n+   *\n+   * @param pathSpecSet the set that should be in the mask\n+   * @return a {@link MaskTree}\n+   */\n+  public static MaskTree createPositiveMask(PathSpecSet pathSpecSet)\n+  {\n+    if (pathSpecSet.isFullProjection()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c96e81dbe52a18bfae0084f36d3346de45e11ca"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE5OTM5NQ==", "bodyText": "Is there a code style I can refer to?", "url": "https://github.com/linkedin/rest.li/pull/339#discussion_r485199395", "createdAt": "2020-09-08T21:13:34Z", "author": {"login": "GuiForget"}, "path": "data-transform/src/main/java/com/linkedin/data/transform/filter/request/MaskCreator.java", "diffHunk": "@@ -57,6 +57,23 @@ public static MaskTree createPositiveMask(Collection<PathSpec> paths)\n     return createMaskTree(paths, MaskOperation.POSITIVE_MASK_OP);\n   }\n \n+  /**\n+   * Create a positive mask for the given set.\n+   *\n+   * @param pathSpecSet the set that should be in the mask\n+   * @return a {@link MaskTree}\n+   */\n+  public static MaskTree createPositiveMask(PathSpecSet pathSpecSet)\n+  {\n+    if (pathSpecSet.isFullProjection()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5OTc3Mg=="}, "originalCommit": {"oid": "5c96e81dbe52a18bfae0084f36d3346de45e11ca"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIzMzc2Mw==", "bodyText": "Good q. I think it has been left braces on next line ever since restli first version.\nAlthough I don't think there is strict rules regarding coding style, (for example, the line width)\nI just don't want to see in the future there will be many places where mixed type is happening inside the repo", "url": "https://github.com/linkedin/rest.li/pull/339#discussion_r485233763", "createdAt": "2020-09-08T22:39:49Z", "author": {"login": "BrianPin"}, "path": "data-transform/src/main/java/com/linkedin/data/transform/filter/request/MaskCreator.java", "diffHunk": "@@ -57,6 +57,23 @@ public static MaskTree createPositiveMask(Collection<PathSpec> paths)\n     return createMaskTree(paths, MaskOperation.POSITIVE_MASK_OP);\n   }\n \n+  /**\n+   * Create a positive mask for the given set.\n+   *\n+   * @param pathSpecSet the set that should be in the mask\n+   * @return a {@link MaskTree}\n+   */\n+  public static MaskTree createPositiveMask(PathSpecSet pathSpecSet)\n+  {\n+    if (pathSpecSet.isFullProjection()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5OTc3Mg=="}, "originalCommit": {"oid": "5c96e81dbe52a18bfae0084f36d3346de45e11ca"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcxMDIzMg==", "bodyText": "Yeah, AFAIK the Rest.li code style isn't documented formally. It's just based on convention", "url": "https://github.com/linkedin/rest.li/pull/339#discussion_r486710232", "createdAt": "2020-09-11T00:48:54Z", "author": {"login": "evanw555"}, "path": "data-transform/src/main/java/com/linkedin/data/transform/filter/request/MaskCreator.java", "diffHunk": "@@ -57,6 +57,23 @@ public static MaskTree createPositiveMask(Collection<PathSpec> paths)\n     return createMaskTree(paths, MaskOperation.POSITIVE_MASK_OP);\n   }\n \n+  /**\n+   * Create a positive mask for the given set.\n+   *\n+   * @param pathSpecSet the set that should be in the mask\n+   * @return a {@link MaskTree}\n+   */\n+  public static MaskTree createPositiveMask(PathSpecSet pathSpecSet)\n+  {\n+    if (pathSpecSet.isFullProjection()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5OTc3Mg=="}, "originalCommit": {"oid": "5c96e81dbe52a18bfae0084f36d3346de45e11ca"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDEyMjEzOnYy", "diffSide": "RIGHT", "path": "data-transform/src/test/java/com/linkedin/data/transform/filter/TestMaskCreation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzo1ODo1M1rOHOoJzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMDo0Njo1OVrOHQKZ2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5OTk4MQ==", "bodyText": "braces on new line?", "url": "https://github.com/linkedin/rest.li/pull/339#discussion_r485099981", "createdAt": "2020-09-08T17:58:53Z", "author": {"login": "BrianPin"}, "path": "data-transform/src/test/java/com/linkedin/data/transform/filter/TestMaskCreation.java", "diffHunk": "@@ -370,4 +372,34 @@ public void testComposingNegativeMaskWithPositiveSubmasks() throws IOException\n     mask.addOperation(new PathSpec(\"a\"), MaskOperation.NEGATIVE_MASK_OP);\n     Assert.assertEquals(mask.toString(), \"{a=0}\");\n   }\n+\n+  @Test(dataProvider = \"pathSpecSetProvider\")\n+  public void testPositiveMaskWithPathSpecSet(PathSpecSet input, MaskTree expected) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c96e81dbe52a18bfae0084f36d3346de45e11ca"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcwOTcyMQ==", "bodyText": "+1. This is the convention in Rest.li", "url": "https://github.com/linkedin/rest.li/pull/339#discussion_r486709721", "createdAt": "2020-09-11T00:46:59Z", "author": {"login": "evanw555"}, "path": "data-transform/src/test/java/com/linkedin/data/transform/filter/TestMaskCreation.java", "diffHunk": "@@ -370,4 +372,34 @@ public void testComposingNegativeMaskWithPositiveSubmasks() throws IOException\n     mask.addOperation(new PathSpec(\"a\"), MaskOperation.NEGATIVE_MASK_OP);\n     Assert.assertEquals(mask.toString(), \"{a=0}\");\n   }\n+\n+  @Test(dataProvider = \"pathSpecSetProvider\")\n+  public void testPositiveMaskWithPathSpecSet(PathSpecSet input, MaskTree expected) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5OTk4MQ=="}, "originalCommit": {"oid": "5c96e81dbe52a18bfae0084f36d3346de45e11ca"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODE3MTkwOnYy", "diffSide": "RIGHT", "path": "data/src/main/java/com/linkedin/data/schema/PathSpecSet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjowMjo1NFrOHPOd-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMDo0NjoyOVrOHQKZTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcyNzczOQ==", "bodyText": "Might as well add copy-right file headers?", "url": "https://github.com/linkedin/rest.li/pull/339#discussion_r485727739", "createdAt": "2020-09-09T16:02:54Z", "author": {"login": "BrianPin"}, "path": "data/src/main/java/com/linkedin/data/schema/PathSpecSet.java", "diffHunk": "@@ -0,0 +1,377 @@\n+package com.linkedin.data.schema;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c96e81dbe52a18bfae0084f36d3346de45e11ca"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcwOTU4Mg==", "bodyText": "+1. Add copyright comment at the top of all new source files. See existing files for reference.", "url": "https://github.com/linkedin/rest.li/pull/339#discussion_r486709582", "createdAt": "2020-09-11T00:46:29Z", "author": {"login": "evanw555"}, "path": "data/src/main/java/com/linkedin/data/schema/PathSpecSet.java", "diffHunk": "@@ -0,0 +1,377 @@\n+package com.linkedin.data.schema;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcyNzczOQ=="}, "originalCommit": {"oid": "5c96e81dbe52a18bfae0084f36d3346de45e11ca"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODk2NjczOnYy", "diffSide": "RIGHT", "path": "data/src/main/java/com/linkedin/data/schema/PathSpecSet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOToxNzozOFrOHPWLOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOToxNzozOFrOHPWLOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1NDAxMA==", "bodyText": "remove the _ prefix (not the convention followed in this project)", "url": "https://github.com/linkedin/rest.li/pull/339#discussion_r485854010", "createdAt": "2020-09-09T19:17:38Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/schema/PathSpecSet.java", "diffHunk": "@@ -0,0 +1,377 @@\n+package com.linkedin.data.schema;\n+\n+import com.linkedin.data.template.RecordTemplate;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+\n+/**\n+ * Represents an immutable set of {@link PathSpec}s.\n+ *\n+ * <p>Path spec set is a convenient wrapper for a collection of {@link PathSpec}. A few advantages of using this class\n+ * over manually passing around {@code Set<PathSpec>} is:\n+ *\n+ * <ul>\n+ *   <li>guaranteed immutable representation</li>\n+ *   <li>\n+ *     explicitly supports \"full projection\" which translates into fetch everything (default for rest.li resources),\n+ *     as well as \"empty\" which translates into fetch no fields\n+ *   </li>\n+ *   <li>mutable builder for incrementally assembling an immutable {@link PathSpecSet}</li>\n+ *   <li>built-in utility to mask a {@link RecordTemplate} with the stored path specs</li>\n+ * </ul>\n+ *\n+ * @author Joseph Florencio\n+ */\n+final public class PathSpecSet {\n+  private final static PathSpecSet _EMPTY = new PathSpecSet(Collections.emptySet(), false);\n+  private final static PathSpecSet _FULL_PROJECTION = new PathSpecSet(Collections.emptySet(), true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c96e81dbe52a18bfae0084f36d3346de45e11ca"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTAwMzI1OnYy", "diffSide": "RIGHT", "path": "data/src/main/java/com/linkedin/data/schema/PathSpecSet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOToyNzowNlrOHPWhDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOToyNzowNlrOHPWhDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1OTU5Nw==", "bodyText": "initialize size to parent path size + child path size", "url": "https://github.com/linkedin/rest.li/pull/339#discussion_r485859597", "createdAt": "2020-09-09T19:27:06Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/schema/PathSpecSet.java", "diffHunk": "@@ -0,0 +1,377 @@\n+package com.linkedin.data.schema;\n+\n+import com.linkedin.data.template.RecordTemplate;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+\n+/**\n+ * Represents an immutable set of {@link PathSpec}s.\n+ *\n+ * <p>Path spec set is a convenient wrapper for a collection of {@link PathSpec}. A few advantages of using this class\n+ * over manually passing around {@code Set<PathSpec>} is:\n+ *\n+ * <ul>\n+ *   <li>guaranteed immutable representation</li>\n+ *   <li>\n+ *     explicitly supports \"full projection\" which translates into fetch everything (default for rest.li resources),\n+ *     as well as \"empty\" which translates into fetch no fields\n+ *   </li>\n+ *   <li>mutable builder for incrementally assembling an immutable {@link PathSpecSet}</li>\n+ *   <li>built-in utility to mask a {@link RecordTemplate} with the stored path specs</li>\n+ * </ul>\n+ *\n+ * @author Joseph Florencio\n+ */\n+final public class PathSpecSet {\n+  private final static PathSpecSet _EMPTY = new PathSpecSet(Collections.emptySet(), false);\n+  private final static PathSpecSet _FULL_PROJECTION = new PathSpecSet(Collections.emptySet(), true);\n+\n+  private final Set<PathSpec> _pathSpecs;\n+  private final boolean _fullProjection;\n+\n+  private PathSpecSet(Builder builder) {\n+    this(new HashSet<>(builder._pathSpecs), builder._fullProjection);\n+  }\n+\n+  private PathSpecSet(Set<PathSpec> pathSpecs, boolean fullProjection) {\n+    _pathSpecs = Collections.unmodifiableSet(pathSpecs);\n+    _fullProjection = fullProjection;\n+  }\n+\n+  /**\n+   * Create a new path spec set by copying the input {@code pathSpecs}.\n+   *\n+   * @param pathSpecs input path specs\n+   * @return immutable path spec set\n+   */\n+  public static PathSpecSet of(Collection<PathSpec> pathSpecs) {\n+    if (pathSpecs.isEmpty()) {\n+      return empty();\n+    } else {\n+      return new PathSpecSet(new HashSet<>(pathSpecs), false);\n+    }\n+  }\n+\n+  /**\n+   * Create a new path spec set from the input {@code pathSpecs}.\n+   *\n+   * @param pathSpecs input path specs\n+   * @return immutable path spec set\n+   */\n+  public static PathSpecSet of(PathSpec... pathSpecs) {\n+    return of(Arrays.asList(pathSpecs));\n+  }\n+\n+  /**\n+   * @return mutable builder to incrementally construct a {@link PathSpecSet}\n+   */\n+  public static Builder newBuilder() {\n+    return new Builder();\n+  }\n+\n+  /**\n+   * @return immutable path spec set that represents an empty projection (no fields requested)\n+   */\n+  public static PathSpecSet empty() {\n+    return _EMPTY;\n+  }\n+\n+  /**\n+   * @return immutable path spec set that represents the user wants all fields (all fields requested)\n+   */\n+  public static PathSpecSet fullProjection() {\n+    return _FULL_PROJECTION;\n+  }\n+\n+  /**\n+   * @return null if a {@link #fullProjection()}, else wise a new {@link PathSpec} array for the projection. Intended to\n+   *         be used passed into rest.li builder's {@code fields} method.\n+   */\n+  public PathSpec[] toArray() {\n+    if (_fullProjection) {\n+      return null;\n+    }\n+    return _pathSpecs.toArray(new PathSpec[0]);\n+  }\n+\n+  /**\n+   * Creates a new mutable builder using this path spec set as a starting state\n+   *\n+   * @return a mutable builder\n+   */\n+  public Builder toBuilder() {\n+    return newBuilder().add(this);\n+  }\n+\n+  /**\n+   * @return underlying {@link PathSpec}s represented by this path spec set. Note that if this is a\n+   *         {@link #fullProjection()} this will be an empty set even though all fields are desired.\n+   */\n+  public Set<PathSpec> getPathSpecs() {\n+    return _pathSpecs;\n+  }\n+\n+  /**\n+   * @return if this is an {@link #empty()} path spec set (no fields requested)\n+   */\n+  public boolean isEmpty() {\n+    return _pathSpecs.isEmpty() && !_fullProjection;\n+  }\n+\n+  /**\n+   * @return if this is a path spec set representing the intent to retrieve all fields\n+   */\n+  public boolean isFullProjection() {\n+    return _fullProjection;\n+  }\n+\n+  /**\n+   * Return true if the {@link PathSpecSet} contains the input {@link PathSpec}.\n+   *\n+   * A {@link PathSpec} is always in a {@link PathSpecSet} if {@link PathSpecSet#isFullProjection()}.\n+   *\n+   * A {@link PathSpec} is in a {@link PathSpecSet} if {@link PathSpecSet#getPathSpecs()} contains the {@link PathSpec} or\n+   * any parent {@link PathSpec}.\n+   *\n+   * {@code\n+   * PathSpecSet.fullProjection().contains(SomeRecord.fields().a()); // true\n+   * PathSpecSet.of(SomeRecord.fields().a()).contains(SomeRecord.fields().a()); // true\n+   * PathSpecSet.of(SomeRecord.fields().a()).contains(SomeRecord.fields().a().b()); // true\n+   * }\n+   *\n+   * @param pathSpec the input {@link PathSpec} to look for in the {@link PathSpecSet}\n+   * @return true if the input {@link PathSpec} is in this {@link PathSpecSet}\n+   */\n+  public boolean contains(PathSpec pathSpec) {\n+    if (_fullProjection) {\n+      return true;\n+    }\n+\n+    return IntStream.range(0, pathSpec.getPathComponents().size() + 1)\n+        .mapToObj(i -> new PathSpec(pathSpec.getPathComponents().subList(0, i).toArray(new String[0])))\n+        .anyMatch(_pathSpecs::contains);\n+  }\n+\n+  /**\n+   * Return a copy of this {@link PathSpecSet} where the contained {@link PathSpec}s are scoped to the input parent\n+   * {@link PathSpec}.\n+   *\n+   * For example, suppose you have these models:\n+   * <pre>\n+   * {\n+   *   \"type\": \"Foo\",\n+   *   \"fields\": [\n+   *     {\n+   *       \"type\": \"int\",\n+   *       \"name\": \"bar\"\n+   *     },\n+   *     {\n+   *       \"type\": \"int\",\n+   *       \"name\": \"baz\"\n+   *     }\n+   *   ]\n+   * }\n+   *\n+   * {\n+   *   \"type\": \"Zing\"\n+   *   \"fields\": [\n+   *     {\n+   *       \"type\": \"Foo\",\n+   *       \"name\": \"foo\"\n+   *     }\n+   *   ]\n+   * }\n+   * </pre>\n+   *\n+   * If you want to only fetch the \"bar\" field from a \"Zing\" record you might make a {@link PathSpecSet} like this:\n+   * {@code PathSpecSet.of(Zing.fields().foo().bar()}.\n+   *\n+   * However, suppose you already have a {@link PathSpecSet} from the perspective of \"Foo\" but need a\n+   * {@link PathSpecSet} for your \"Zing\" downstream.  This method make this easy:\n+   * {@code\n+   *   PathSpecSet fooPathSpecSet = PathSpecSet.of(Foo.fields().bar());\n+   *   PathSpecSet zingPathSpecSet = fooPathSpecSet.copyWithScope(Zing.fields().foo());\n+   *\n+   *   zingPathSpecSet.equals(PathSpecSet.of(Zing.fields().foo().bar()); // true\n+   * }\n+   *\n+   * If you scope an empty {@link PathSpecSet} it remains empty.\n+   *\n+   * @param parent the parent {@link PathSpec} to use when scoping the contained {@link PathSpec}s\n+   * @return a new {@link PathSpecSet} that is scoped to the new parent\n+   */\n+  public PathSpecSet copyWithScope(PathSpec parent) {\n+    if (this.isFullProjection()) {\n+      return PathSpecSet.of(parent);\n+    }\n+\n+    if (this.isEmpty()) {\n+      return PathSpecSet.empty();\n+    }\n+\n+    Builder builder = newBuilder();\n+\n+    this.getPathSpecs().stream()\n+        .map(childPathSpec -> {\n+          ArrayList<String> list = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c96e81dbe52a18bfae0084f36d3346de45e11ca"}, "originalPosition": 227}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTAxNzQ4OnYy", "diffSide": "RIGHT", "path": "data/src/main/java/com/linkedin/data/schema/PathSpecSet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTozMDowNlrOHPWpyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMTozMTo0N1rOHib9Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg2MTgzNA==", "bodyText": "This should check for the prefix or any parent of the perfix, right?", "url": "https://github.com/linkedin/rest.li/pull/339#discussion_r485861834", "createdAt": "2020-09-09T19:30:06Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/schema/PathSpecSet.java", "diffHunk": "@@ -0,0 +1,377 @@\n+package com.linkedin.data.schema;\n+\n+import com.linkedin.data.template.RecordTemplate;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+\n+/**\n+ * Represents an immutable set of {@link PathSpec}s.\n+ *\n+ * <p>Path spec set is a convenient wrapper for a collection of {@link PathSpec}. A few advantages of using this class\n+ * over manually passing around {@code Set<PathSpec>} is:\n+ *\n+ * <ul>\n+ *   <li>guaranteed immutable representation</li>\n+ *   <li>\n+ *     explicitly supports \"full projection\" which translates into fetch everything (default for rest.li resources),\n+ *     as well as \"empty\" which translates into fetch no fields\n+ *   </li>\n+ *   <li>mutable builder for incrementally assembling an immutable {@link PathSpecSet}</li>\n+ *   <li>built-in utility to mask a {@link RecordTemplate} with the stored path specs</li>\n+ * </ul>\n+ *\n+ * @author Joseph Florencio\n+ */\n+final public class PathSpecSet {\n+  private final static PathSpecSet _EMPTY = new PathSpecSet(Collections.emptySet(), false);\n+  private final static PathSpecSet _FULL_PROJECTION = new PathSpecSet(Collections.emptySet(), true);\n+\n+  private final Set<PathSpec> _pathSpecs;\n+  private final boolean _fullProjection;\n+\n+  private PathSpecSet(Builder builder) {\n+    this(new HashSet<>(builder._pathSpecs), builder._fullProjection);\n+  }\n+\n+  private PathSpecSet(Set<PathSpec> pathSpecs, boolean fullProjection) {\n+    _pathSpecs = Collections.unmodifiableSet(pathSpecs);\n+    _fullProjection = fullProjection;\n+  }\n+\n+  /**\n+   * Create a new path spec set by copying the input {@code pathSpecs}.\n+   *\n+   * @param pathSpecs input path specs\n+   * @return immutable path spec set\n+   */\n+  public static PathSpecSet of(Collection<PathSpec> pathSpecs) {\n+    if (pathSpecs.isEmpty()) {\n+      return empty();\n+    } else {\n+      return new PathSpecSet(new HashSet<>(pathSpecs), false);\n+    }\n+  }\n+\n+  /**\n+   * Create a new path spec set from the input {@code pathSpecs}.\n+   *\n+   * @param pathSpecs input path specs\n+   * @return immutable path spec set\n+   */\n+  public static PathSpecSet of(PathSpec... pathSpecs) {\n+    return of(Arrays.asList(pathSpecs));\n+  }\n+\n+  /**\n+   * @return mutable builder to incrementally construct a {@link PathSpecSet}\n+   */\n+  public static Builder newBuilder() {\n+    return new Builder();\n+  }\n+\n+  /**\n+   * @return immutable path spec set that represents an empty projection (no fields requested)\n+   */\n+  public static PathSpecSet empty() {\n+    return _EMPTY;\n+  }\n+\n+  /**\n+   * @return immutable path spec set that represents the user wants all fields (all fields requested)\n+   */\n+  public static PathSpecSet fullProjection() {\n+    return _FULL_PROJECTION;\n+  }\n+\n+  /**\n+   * @return null if a {@link #fullProjection()}, else wise a new {@link PathSpec} array for the projection. Intended to\n+   *         be used passed into rest.li builder's {@code fields} method.\n+   */\n+  public PathSpec[] toArray() {\n+    if (_fullProjection) {\n+      return null;\n+    }\n+    return _pathSpecs.toArray(new PathSpec[0]);\n+  }\n+\n+  /**\n+   * Creates a new mutable builder using this path spec set as a starting state\n+   *\n+   * @return a mutable builder\n+   */\n+  public Builder toBuilder() {\n+    return newBuilder().add(this);\n+  }\n+\n+  /**\n+   * @return underlying {@link PathSpec}s represented by this path spec set. Note that if this is a\n+   *         {@link #fullProjection()} this will be an empty set even though all fields are desired.\n+   */\n+  public Set<PathSpec> getPathSpecs() {\n+    return _pathSpecs;\n+  }\n+\n+  /**\n+   * @return if this is an {@link #empty()} path spec set (no fields requested)\n+   */\n+  public boolean isEmpty() {\n+    return _pathSpecs.isEmpty() && !_fullProjection;\n+  }\n+\n+  /**\n+   * @return if this is a path spec set representing the intent to retrieve all fields\n+   */\n+  public boolean isFullProjection() {\n+    return _fullProjection;\n+  }\n+\n+  /**\n+   * Return true if the {@link PathSpecSet} contains the input {@link PathSpec}.\n+   *\n+   * A {@link PathSpec} is always in a {@link PathSpecSet} if {@link PathSpecSet#isFullProjection()}.\n+   *\n+   * A {@link PathSpec} is in a {@link PathSpecSet} if {@link PathSpecSet#getPathSpecs()} contains the {@link PathSpec} or\n+   * any parent {@link PathSpec}.\n+   *\n+   * {@code\n+   * PathSpecSet.fullProjection().contains(SomeRecord.fields().a()); // true\n+   * PathSpecSet.of(SomeRecord.fields().a()).contains(SomeRecord.fields().a()); // true\n+   * PathSpecSet.of(SomeRecord.fields().a()).contains(SomeRecord.fields().a().b()); // true\n+   * }\n+   *\n+   * @param pathSpec the input {@link PathSpec} to look for in the {@link PathSpecSet}\n+   * @return true if the input {@link PathSpec} is in this {@link PathSpecSet}\n+   */\n+  public boolean contains(PathSpec pathSpec) {\n+    if (_fullProjection) {\n+      return true;\n+    }\n+\n+    return IntStream.range(0, pathSpec.getPathComponents().size() + 1)\n+        .mapToObj(i -> new PathSpec(pathSpec.getPathComponents().subList(0, i).toArray(new String[0])))\n+        .anyMatch(_pathSpecs::contains);\n+  }\n+\n+  /**\n+   * Return a copy of this {@link PathSpecSet} where the contained {@link PathSpec}s are scoped to the input parent\n+   * {@link PathSpec}.\n+   *\n+   * For example, suppose you have these models:\n+   * <pre>\n+   * {\n+   *   \"type\": \"Foo\",\n+   *   \"fields\": [\n+   *     {\n+   *       \"type\": \"int\",\n+   *       \"name\": \"bar\"\n+   *     },\n+   *     {\n+   *       \"type\": \"int\",\n+   *       \"name\": \"baz\"\n+   *     }\n+   *   ]\n+   * }\n+   *\n+   * {\n+   *   \"type\": \"Zing\"\n+   *   \"fields\": [\n+   *     {\n+   *       \"type\": \"Foo\",\n+   *       \"name\": \"foo\"\n+   *     }\n+   *   ]\n+   * }\n+   * </pre>\n+   *\n+   * If you want to only fetch the \"bar\" field from a \"Zing\" record you might make a {@link PathSpecSet} like this:\n+   * {@code PathSpecSet.of(Zing.fields().foo().bar()}.\n+   *\n+   * However, suppose you already have a {@link PathSpecSet} from the perspective of \"Foo\" but need a\n+   * {@link PathSpecSet} for your \"Zing\" downstream.  This method make this easy:\n+   * {@code\n+   *   PathSpecSet fooPathSpecSet = PathSpecSet.of(Foo.fields().bar());\n+   *   PathSpecSet zingPathSpecSet = fooPathSpecSet.copyWithScope(Zing.fields().foo());\n+   *\n+   *   zingPathSpecSet.equals(PathSpecSet.of(Zing.fields().foo().bar()); // true\n+   * }\n+   *\n+   * If you scope an empty {@link PathSpecSet} it remains empty.\n+   *\n+   * @param parent the parent {@link PathSpec} to use when scoping the contained {@link PathSpec}s\n+   * @return a new {@link PathSpecSet} that is scoped to the new parent\n+   */\n+  public PathSpecSet copyWithScope(PathSpec parent) {\n+    if (this.isFullProjection()) {\n+      return PathSpecSet.of(parent);\n+    }\n+\n+    if (this.isEmpty()) {\n+      return PathSpecSet.empty();\n+    }\n+\n+    Builder builder = newBuilder();\n+\n+    this.getPathSpecs().stream()\n+        .map(childPathSpec -> {\n+          ArrayList<String> list = new ArrayList<>();\n+          list.addAll(parent.getPathComponents());\n+          list.addAll(childPathSpec.getPathComponents());\n+          return list;\n+        })\n+        .map(PathSpec::new)\n+        .forEach(builder::add);\n+\n+    return builder.build();\n+  }\n+\n+  /**\n+   * Return a copy of this {@link PathSpecSet} where only {@link PathSpec}s that are prefixed with the input {@link PathSpec} are retained.\n+   *\n+   * Additionally, the prefix is removed for the retained {@link PathSpec}s.\n+   *\n+   * Here are some examples showing the functionality:\n+   *\n+   * {@code\n+   *   // This PathSpecSet is empty because no PathSpecs originally contained start with \"abc\"\n+   *   PathSpecSet emptyPathSpecSet = PathSpecSet.of(Foo.fields().bar().baz()).copyAndRemovePrefix(Foo.fields().abc());\n+   *\n+   *   // This PathSpecSet is full because it contains the entire prefix PathSpec\n+   *   PathSpecSet fullPathSpecSet = PathSpecSet.of(Foo.fields().bar()).copyAndRemovePrefix(Foo.fields().bar())\n+   *\n+   *   // The following \"equals\" evaluates to true\n+   *   PathSpecSet prefixRemovedPathSpecSet = PathSpecSet.of(Foo.fields().bar().baz(), Foo.fields().bar().abc()).copyAndRemovePrefix(Foo.fields().bar());\n+   *   prefixRemovedPathSpecSet.equals(PathSpecSet.of(new PathSpec(\"baz\"), new PathSpec(\"abc\")));\n+   * }\n+   *\n+   * @param prefix the {@link PathSpec} prefix to use when retaining {@link PathSpec}s.\n+   * @return a {@link PathSpecSet} with elements starting with the input {@link PathSpec} prefix\n+   */\n+  public PathSpecSet copyAndRemovePrefix(PathSpec prefix) {\n+    if (isFullProjection() || isEmpty()) {\n+      // full or empty projections stay the same\n+      return this;\n+    }\n+\n+    // if we contain the exact prefix PathSpec, it should be a full projection\n+    if (getPathSpecs().contains(prefix)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c96e81dbe52a18bfae0084f36d3346de45e11ca"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg3MTYzMA==", "bodyText": "yes you are correct. I'll modify accordingly", "url": "https://github.com/linkedin/rest.li/pull/339#discussion_r505871630", "createdAt": "2020-10-15T21:31:47Z", "author": {"login": "GuiForget"}, "path": "data/src/main/java/com/linkedin/data/schema/PathSpecSet.java", "diffHunk": "@@ -0,0 +1,377 @@\n+package com.linkedin.data.schema;\n+\n+import com.linkedin.data.template.RecordTemplate;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+\n+/**\n+ * Represents an immutable set of {@link PathSpec}s.\n+ *\n+ * <p>Path spec set is a convenient wrapper for a collection of {@link PathSpec}. A few advantages of using this class\n+ * over manually passing around {@code Set<PathSpec>} is:\n+ *\n+ * <ul>\n+ *   <li>guaranteed immutable representation</li>\n+ *   <li>\n+ *     explicitly supports \"full projection\" which translates into fetch everything (default for rest.li resources),\n+ *     as well as \"empty\" which translates into fetch no fields\n+ *   </li>\n+ *   <li>mutable builder for incrementally assembling an immutable {@link PathSpecSet}</li>\n+ *   <li>built-in utility to mask a {@link RecordTemplate} with the stored path specs</li>\n+ * </ul>\n+ *\n+ * @author Joseph Florencio\n+ */\n+final public class PathSpecSet {\n+  private final static PathSpecSet _EMPTY = new PathSpecSet(Collections.emptySet(), false);\n+  private final static PathSpecSet _FULL_PROJECTION = new PathSpecSet(Collections.emptySet(), true);\n+\n+  private final Set<PathSpec> _pathSpecs;\n+  private final boolean _fullProjection;\n+\n+  private PathSpecSet(Builder builder) {\n+    this(new HashSet<>(builder._pathSpecs), builder._fullProjection);\n+  }\n+\n+  private PathSpecSet(Set<PathSpec> pathSpecs, boolean fullProjection) {\n+    _pathSpecs = Collections.unmodifiableSet(pathSpecs);\n+    _fullProjection = fullProjection;\n+  }\n+\n+  /**\n+   * Create a new path spec set by copying the input {@code pathSpecs}.\n+   *\n+   * @param pathSpecs input path specs\n+   * @return immutable path spec set\n+   */\n+  public static PathSpecSet of(Collection<PathSpec> pathSpecs) {\n+    if (pathSpecs.isEmpty()) {\n+      return empty();\n+    } else {\n+      return new PathSpecSet(new HashSet<>(pathSpecs), false);\n+    }\n+  }\n+\n+  /**\n+   * Create a new path spec set from the input {@code pathSpecs}.\n+   *\n+   * @param pathSpecs input path specs\n+   * @return immutable path spec set\n+   */\n+  public static PathSpecSet of(PathSpec... pathSpecs) {\n+    return of(Arrays.asList(pathSpecs));\n+  }\n+\n+  /**\n+   * @return mutable builder to incrementally construct a {@link PathSpecSet}\n+   */\n+  public static Builder newBuilder() {\n+    return new Builder();\n+  }\n+\n+  /**\n+   * @return immutable path spec set that represents an empty projection (no fields requested)\n+   */\n+  public static PathSpecSet empty() {\n+    return _EMPTY;\n+  }\n+\n+  /**\n+   * @return immutable path spec set that represents the user wants all fields (all fields requested)\n+   */\n+  public static PathSpecSet fullProjection() {\n+    return _FULL_PROJECTION;\n+  }\n+\n+  /**\n+   * @return null if a {@link #fullProjection()}, else wise a new {@link PathSpec} array for the projection. Intended to\n+   *         be used passed into rest.li builder's {@code fields} method.\n+   */\n+  public PathSpec[] toArray() {\n+    if (_fullProjection) {\n+      return null;\n+    }\n+    return _pathSpecs.toArray(new PathSpec[0]);\n+  }\n+\n+  /**\n+   * Creates a new mutable builder using this path spec set as a starting state\n+   *\n+   * @return a mutable builder\n+   */\n+  public Builder toBuilder() {\n+    return newBuilder().add(this);\n+  }\n+\n+  /**\n+   * @return underlying {@link PathSpec}s represented by this path spec set. Note that if this is a\n+   *         {@link #fullProjection()} this will be an empty set even though all fields are desired.\n+   */\n+  public Set<PathSpec> getPathSpecs() {\n+    return _pathSpecs;\n+  }\n+\n+  /**\n+   * @return if this is an {@link #empty()} path spec set (no fields requested)\n+   */\n+  public boolean isEmpty() {\n+    return _pathSpecs.isEmpty() && !_fullProjection;\n+  }\n+\n+  /**\n+   * @return if this is a path spec set representing the intent to retrieve all fields\n+   */\n+  public boolean isFullProjection() {\n+    return _fullProjection;\n+  }\n+\n+  /**\n+   * Return true if the {@link PathSpecSet} contains the input {@link PathSpec}.\n+   *\n+   * A {@link PathSpec} is always in a {@link PathSpecSet} if {@link PathSpecSet#isFullProjection()}.\n+   *\n+   * A {@link PathSpec} is in a {@link PathSpecSet} if {@link PathSpecSet#getPathSpecs()} contains the {@link PathSpec} or\n+   * any parent {@link PathSpec}.\n+   *\n+   * {@code\n+   * PathSpecSet.fullProjection().contains(SomeRecord.fields().a()); // true\n+   * PathSpecSet.of(SomeRecord.fields().a()).contains(SomeRecord.fields().a()); // true\n+   * PathSpecSet.of(SomeRecord.fields().a()).contains(SomeRecord.fields().a().b()); // true\n+   * }\n+   *\n+   * @param pathSpec the input {@link PathSpec} to look for in the {@link PathSpecSet}\n+   * @return true if the input {@link PathSpec} is in this {@link PathSpecSet}\n+   */\n+  public boolean contains(PathSpec pathSpec) {\n+    if (_fullProjection) {\n+      return true;\n+    }\n+\n+    return IntStream.range(0, pathSpec.getPathComponents().size() + 1)\n+        .mapToObj(i -> new PathSpec(pathSpec.getPathComponents().subList(0, i).toArray(new String[0])))\n+        .anyMatch(_pathSpecs::contains);\n+  }\n+\n+  /**\n+   * Return a copy of this {@link PathSpecSet} where the contained {@link PathSpec}s are scoped to the input parent\n+   * {@link PathSpec}.\n+   *\n+   * For example, suppose you have these models:\n+   * <pre>\n+   * {\n+   *   \"type\": \"Foo\",\n+   *   \"fields\": [\n+   *     {\n+   *       \"type\": \"int\",\n+   *       \"name\": \"bar\"\n+   *     },\n+   *     {\n+   *       \"type\": \"int\",\n+   *       \"name\": \"baz\"\n+   *     }\n+   *   ]\n+   * }\n+   *\n+   * {\n+   *   \"type\": \"Zing\"\n+   *   \"fields\": [\n+   *     {\n+   *       \"type\": \"Foo\",\n+   *       \"name\": \"foo\"\n+   *     }\n+   *   ]\n+   * }\n+   * </pre>\n+   *\n+   * If you want to only fetch the \"bar\" field from a \"Zing\" record you might make a {@link PathSpecSet} like this:\n+   * {@code PathSpecSet.of(Zing.fields().foo().bar()}.\n+   *\n+   * However, suppose you already have a {@link PathSpecSet} from the perspective of \"Foo\" but need a\n+   * {@link PathSpecSet} for your \"Zing\" downstream.  This method make this easy:\n+   * {@code\n+   *   PathSpecSet fooPathSpecSet = PathSpecSet.of(Foo.fields().bar());\n+   *   PathSpecSet zingPathSpecSet = fooPathSpecSet.copyWithScope(Zing.fields().foo());\n+   *\n+   *   zingPathSpecSet.equals(PathSpecSet.of(Zing.fields().foo().bar()); // true\n+   * }\n+   *\n+   * If you scope an empty {@link PathSpecSet} it remains empty.\n+   *\n+   * @param parent the parent {@link PathSpec} to use when scoping the contained {@link PathSpec}s\n+   * @return a new {@link PathSpecSet} that is scoped to the new parent\n+   */\n+  public PathSpecSet copyWithScope(PathSpec parent) {\n+    if (this.isFullProjection()) {\n+      return PathSpecSet.of(parent);\n+    }\n+\n+    if (this.isEmpty()) {\n+      return PathSpecSet.empty();\n+    }\n+\n+    Builder builder = newBuilder();\n+\n+    this.getPathSpecs().stream()\n+        .map(childPathSpec -> {\n+          ArrayList<String> list = new ArrayList<>();\n+          list.addAll(parent.getPathComponents());\n+          list.addAll(childPathSpec.getPathComponents());\n+          return list;\n+        })\n+        .map(PathSpec::new)\n+        .forEach(builder::add);\n+\n+    return builder.build();\n+  }\n+\n+  /**\n+   * Return a copy of this {@link PathSpecSet} where only {@link PathSpec}s that are prefixed with the input {@link PathSpec} are retained.\n+   *\n+   * Additionally, the prefix is removed for the retained {@link PathSpec}s.\n+   *\n+   * Here are some examples showing the functionality:\n+   *\n+   * {@code\n+   *   // This PathSpecSet is empty because no PathSpecs originally contained start with \"abc\"\n+   *   PathSpecSet emptyPathSpecSet = PathSpecSet.of(Foo.fields().bar().baz()).copyAndRemovePrefix(Foo.fields().abc());\n+   *\n+   *   // This PathSpecSet is full because it contains the entire prefix PathSpec\n+   *   PathSpecSet fullPathSpecSet = PathSpecSet.of(Foo.fields().bar()).copyAndRemovePrefix(Foo.fields().bar())\n+   *\n+   *   // The following \"equals\" evaluates to true\n+   *   PathSpecSet prefixRemovedPathSpecSet = PathSpecSet.of(Foo.fields().bar().baz(), Foo.fields().bar().abc()).copyAndRemovePrefix(Foo.fields().bar());\n+   *   prefixRemovedPathSpecSet.equals(PathSpecSet.of(new PathSpec(\"baz\"), new PathSpec(\"abc\")));\n+   * }\n+   *\n+   * @param prefix the {@link PathSpec} prefix to use when retaining {@link PathSpec}s.\n+   * @return a {@link PathSpecSet} with elements starting with the input {@link PathSpec} prefix\n+   */\n+  public PathSpecSet copyAndRemovePrefix(PathSpec prefix) {\n+    if (isFullProjection() || isEmpty()) {\n+      // full or empty projections stay the same\n+      return this;\n+    }\n+\n+    // if we contain the exact prefix PathSpec, it should be a full projection\n+    if (getPathSpecs().contains(prefix)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg2MTgzNA=="}, "originalCommit": {"oid": "5c96e81dbe52a18bfae0084f36d3346de45e11ca"}, "originalPosition": 267}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDIyMjc0OnYy", "diffSide": "RIGHT", "path": "data/src/main/java/com/linkedin/data/schema/PathSpecSet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMjo1OToyMlrOH8WRkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMjo1OToyMlrOH8WRkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA0MTU1Mw==", "bodyText": "nit: write records in PDL, not PDSC", "url": "https://github.com/linkedin/rest.li/pull/339#discussion_r533041553", "createdAt": "2020-12-01T02:59:22Z", "author": {"login": "evanw555"}, "path": "data/src/main/java/com/linkedin/data/schema/PathSpecSet.java", "diffHunk": "@@ -0,0 +1,440 @@\n+/*\n+   Copyright (c) 2012 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.data.schema;\n+\n+import com.linkedin.data.template.RecordTemplate;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+\n+/**\n+ * Represents an immutable set of {@link PathSpec}s.\n+ *\n+ * <p>Path spec set is a convenient wrapper for a collection of {@link PathSpec}. A few advantages of using this class\n+ * over manually passing around {@code Set<PathSpec>} is:\n+ *\n+ * <ul>\n+ *   <li>guaranteed immutable representation</li>\n+ *   <li>\n+ *     explicitly supports \"full projection\" which translates into fetch everything (default for rest.li resources),\n+ *     as well as \"empty\" which translates into fetch no fields\n+ *   </li>\n+ *   <li>mutable builder for incrementally assembling an immutable {@link PathSpecSet}</li>\n+ *   <li>built-in utility to mask a {@link RecordTemplate} with the stored path specs</li>\n+ * </ul>\n+ *\n+ * @author Joseph Florencio\n+ */\n+final public class PathSpecSet\n+{\n+  private final static PathSpecSet EMPTY = new PathSpecSet(Collections.emptySet(), false);\n+  private final static PathSpecSet FULL_PROJECTION = new PathSpecSet(Collections.emptySet(), true);\n+\n+  private final Set<PathSpec> _pathSpecs;\n+  private final boolean _fullProjection;\n+\n+  private PathSpecSet(Builder builder)\n+  {\n+    this(new HashSet<>(builder._pathSpecs), builder._fullProjection);\n+  }\n+\n+  private PathSpecSet(Set<PathSpec> pathSpecs, boolean fullProjection)\n+  {\n+    _pathSpecs = Collections.unmodifiableSet(pathSpecs);\n+    _fullProjection = fullProjection;\n+  }\n+\n+  /**\n+   * Create a new path spec set by copying the input {@code pathSpecs}.\n+   *\n+   * @param pathSpecs input path specs\n+   * @return immutable path spec set\n+   */\n+  public static PathSpecSet of(Collection<PathSpec> pathSpecs)\n+  {\n+    if (pathSpecs.isEmpty())\n+    {\n+      return empty();\n+    }\n+    else\n+    {\n+      return new PathSpecSet(new HashSet<>(pathSpecs), false);\n+    }\n+  }\n+\n+  /**\n+   * Create a new path spec set from the input {@code pathSpecs}.\n+   *\n+   * @param pathSpecs input path specs\n+   * @return immutable path spec set\n+   */\n+  public static PathSpecSet of(PathSpec... pathSpecs)\n+  {\n+    return of(Arrays.asList(pathSpecs));\n+  }\n+\n+  /**\n+   * @return mutable builder to incrementally construct a {@link PathSpecSet}\n+   */\n+  public static Builder newBuilder()\n+  {\n+    return new Builder();\n+  }\n+\n+  /**\n+   * @return immutable path spec set that represents an empty projection (no fields requested)\n+   */\n+  public static PathSpecSet empty()\n+  {\n+    return EMPTY;\n+  }\n+\n+  /**\n+   * @return immutable path spec set that represents the user wants all fields (all fields requested)\n+   */\n+  public static PathSpecSet fullProjection()\n+  {\n+    return FULL_PROJECTION;\n+  }\n+\n+  /**\n+   * @return null if a {@link #fullProjection()}, else wise a new {@link PathSpec} array for the projection. Intended to\n+   *         be used passed into rest.li builder's {@code fields} method.\n+   */\n+  public PathSpec[] toArray()\n+  {\n+    if (_fullProjection)\n+    {\n+      return null;\n+    }\n+    return _pathSpecs.toArray(new PathSpec[0]);\n+  }\n+\n+  /**\n+   * Creates a new mutable builder using this path spec set as a starting state\n+   *\n+   * @return a mutable builder\n+   */\n+  public Builder toBuilder()\n+  {\n+    return newBuilder().add(this);\n+  }\n+\n+  /**\n+   * @return underlying {@link PathSpec}s represented by this path spec set. Note that if this is a\n+   *         {@link #fullProjection()} this will be an empty set even though all fields are desired.\n+   */\n+  public Set<PathSpec> getPathSpecs()\n+  {\n+    return _pathSpecs;\n+  }\n+\n+  /**\n+   * @return if this is an {@link #empty()} path spec set (no fields requested)\n+   */\n+  public boolean isEmpty()\n+  {\n+    return _pathSpecs.isEmpty() && !_fullProjection;\n+  }\n+\n+  /**\n+   * @return if this is a path spec set representing the intent to retrieve all fields\n+   */\n+  public boolean isFullProjection()\n+  {\n+    return _fullProjection;\n+  }\n+\n+  /**\n+   * Return true if the {@link PathSpecSet} contains the input {@link PathSpec}.\n+   *\n+   * A {@link PathSpec} is always in a {@link PathSpecSet} if {@link PathSpecSet#isFullProjection()}.\n+   *\n+   * A {@link PathSpec} is in a {@link PathSpecSet} if {@link PathSpecSet#getPathSpecs()} contains the {@link PathSpec} or\n+   * any parent {@link PathSpec}.\n+   *\n+   * {@code\n+   * PathSpecSet.fullProjection().contains(SomeRecord.fields().a()); // true\n+   * PathSpecSet.of(SomeRecord.fields().a()).contains(SomeRecord.fields().a()); // true\n+   * PathSpecSet.of(SomeRecord.fields().a()).contains(SomeRecord.fields().a().b()); // true\n+   * }\n+   *\n+   * @param pathSpec the input {@link PathSpec} to look for in the {@link PathSpecSet}\n+   * @return true if the input {@link PathSpec} is in this {@link PathSpecSet}\n+   */\n+  public boolean contains(PathSpec pathSpec)\n+  {\n+    if (_fullProjection)\n+    {\n+      return true;\n+    }\n+\n+    return IntStream.range(0, pathSpec.getPathComponents().size() + 1)\n+        .mapToObj(i -> new PathSpec(pathSpec.getPathComponents().subList(0, i).toArray(new String[0])))\n+        .anyMatch(_pathSpecs::contains);\n+  }\n+\n+  /**\n+   * Return a copy of this {@link PathSpecSet} where the contained {@link PathSpec}s are scoped to the input parent\n+   * {@link PathSpec}.\n+   *\n+   * For example, suppose you have these models:\n+   * <pre>\n+   * {\n+   *   \"type\": \"Foo\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c810667d15d73cfc38840fb82fc27a5c2caaf41"}, "originalPosition": 208}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDQwNTUzOnYy", "diffSide": "RIGHT", "path": "data/src/main/java/com/linkedin/data/schema/PathSpecSet.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNDozODoxNVrOH8X5iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMDowNzo1NlrOIPUomg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2ODE2OQ==", "bodyText": "For all javadocs in this class, I'd suggest providing examples using the serialized pathspec syntax (e.g. /foo/bar, /foo) for clarity, especially in more complicated examples (e.g. copy with scope, remove prefix)", "url": "https://github.com/linkedin/rest.li/pull/339#discussion_r533068169", "createdAt": "2020-12-01T04:38:15Z", "author": {"login": "evanw555"}, "path": "data/src/main/java/com/linkedin/data/schema/PathSpecSet.java", "diffHunk": "@@ -0,0 +1,440 @@\n+/*\n+   Copyright (c) 2012 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.data.schema;\n+\n+import com.linkedin.data.template.RecordTemplate;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+\n+/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c810667d15d73cfc38840fb82fc27a5c2caaf41"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTc4MjI3NQ==", "bodyText": "I edited the javadoc, let me know if this is what you had in mind", "url": "https://github.com/linkedin/rest.li/pull/339#discussion_r541782275", "createdAt": "2020-12-12T21:17:54Z", "author": {"login": "GuiForget"}, "path": "data/src/main/java/com/linkedin/data/schema/PathSpecSet.java", "diffHunk": "@@ -0,0 +1,440 @@\n+/*\n+   Copyright (c) 2012 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.data.schema;\n+\n+import com.linkedin.data.template.RecordTemplate;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+\n+/**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2ODE2OQ=="}, "originalCommit": {"oid": "2c810667d15d73cfc38840fb82fc27a5c2caaf41"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkzNzYyNg==", "bodyText": "Adding /foo directly into code segments may be confusing, as it's not proper Java syntax. However, I still think it's more clear to users. I originally meant adding this in addition to the code examples, like set of {/a} contains /a or something like that.", "url": "https://github.com/linkedin/rest.li/pull/339#discussion_r552937626", "createdAt": "2021-01-06T20:07:56Z", "author": {"login": "evanw555"}, "path": "data/src/main/java/com/linkedin/data/schema/PathSpecSet.java", "diffHunk": "@@ -0,0 +1,440 @@\n+/*\n+   Copyright (c) 2012 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.data.schema;\n+\n+import com.linkedin.data.template.RecordTemplate;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+\n+/**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2ODE2OQ=="}, "originalCommit": {"oid": "2c810667d15d73cfc38840fb82fc27a5c2caaf41"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDQwNTc2OnYy", "diffSide": "RIGHT", "path": "data/src/main/java/com/linkedin/data/schema/PathSpecSet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNDozODoyM1rOH8X5tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNDozODoyM1rOH8X5tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2ODIxMg==", "bodyText": "Should say 2020", "url": "https://github.com/linkedin/rest.li/pull/339#discussion_r533068212", "createdAt": "2020-12-01T04:38:23Z", "author": {"login": "evanw555"}, "path": "data/src/main/java/com/linkedin/data/schema/PathSpecSet.java", "diffHunk": "@@ -0,0 +1,440 @@\n+/*\n+   Copyright (c) 2012 LinkedIn Corp.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c810667d15d73cfc38840fb82fc27a5c2caaf41"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDQwNzI4OnYy", "diffSide": "RIGHT", "path": "data/src/main/java/com/linkedin/data/schema/PathSpecSet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNDozOToxNFrOH8X6kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQyMToxODoxNVrOIErxHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2ODQzNQ==", "bodyText": "typo: explicitly", "url": "https://github.com/linkedin/rest.li/pull/339#discussion_r533068435", "createdAt": "2020-12-01T04:39:14Z", "author": {"login": "evanw555"}, "path": "data/src/main/java/com/linkedin/data/schema/PathSpecSet.java", "diffHunk": "@@ -0,0 +1,440 @@\n+/*\n+   Copyright (c) 2012 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.data.schema;\n+\n+import com.linkedin.data.template.RecordTemplate;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+\n+/**\n+ * Represents an immutable set of {@link PathSpec}s.\n+ *\n+ * <p>Path spec set is a convenient wrapper for a collection of {@link PathSpec}. A few advantages of using this class\n+ * over manually passing around {@code Set<PathSpec>} is:\n+ *\n+ * <ul>\n+ *   <li>guaranteed immutable representation</li>\n+ *   <li>\n+ *     explicitly supports \"full projection\" which translates into fetch everything (default for rest.li resources),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c810667d15d73cfc38840fb82fc27a5c2caaf41"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTc4MjMwMg==", "bodyText": "I can't find the typo", "url": "https://github.com/linkedin/rest.li/pull/339#discussion_r541782302", "createdAt": "2020-12-12T21:18:15Z", "author": {"login": "GuiForget"}, "path": "data/src/main/java/com/linkedin/data/schema/PathSpecSet.java", "diffHunk": "@@ -0,0 +1,440 @@\n+/*\n+   Copyright (c) 2012 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.data.schema;\n+\n+import com.linkedin.data.template.RecordTemplate;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+\n+/**\n+ * Represents an immutable set of {@link PathSpec}s.\n+ *\n+ * <p>Path spec set is a convenient wrapper for a collection of {@link PathSpec}. A few advantages of using this class\n+ * over manually passing around {@code Set<PathSpec>} is:\n+ *\n+ * <ul>\n+ *   <li>guaranteed immutable representation</li>\n+ *   <li>\n+ *     explicitly supports \"full projection\" which translates into fetch everything (default for rest.li resources),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2ODQzNQ=="}, "originalCommit": {"oid": "2c810667d15d73cfc38840fb82fc27a5c2caaf41"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDQxMDE4OnYy", "diffSide": "RIGHT", "path": "data/src/main/java/com/linkedin/data/schema/PathSpecSet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNDo0MDoyOVrOH8X8Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNDo0MDoyOVrOH8X8Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2ODg1MA==", "bodyText": "nit: capitalize as \"Rest.li\"", "url": "https://github.com/linkedin/rest.li/pull/339#discussion_r533068850", "createdAt": "2020-12-01T04:40:29Z", "author": {"login": "evanw555"}, "path": "data/src/main/java/com/linkedin/data/schema/PathSpecSet.java", "diffHunk": "@@ -0,0 +1,440 @@\n+/*\n+   Copyright (c) 2012 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.data.schema;\n+\n+import com.linkedin.data.template.RecordTemplate;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+\n+/**\n+ * Represents an immutable set of {@link PathSpec}s.\n+ *\n+ * <p>Path spec set is a convenient wrapper for a collection of {@link PathSpec}. A few advantages of using this class\n+ * over manually passing around {@code Set<PathSpec>} is:\n+ *\n+ * <ul>\n+ *   <li>guaranteed immutable representation</li>\n+ *   <li>\n+ *     explicitly supports \"full projection\" which translates into fetch everything (default for rest.li resources),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c810667d15d73cfc38840fb82fc27a5c2caaf41"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDQxNTUxOnYy", "diffSide": "RIGHT", "path": "data/src/main/java/com/linkedin/data/schema/PathSpecSet.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNDo0Mzo1OFrOH8X_ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQyMDo0Mzo1NFrOIh1-Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2OTY2OA==", "bodyText": "I'm skeptical about using the terminology \"full projection\", as PathSpecs are not inherently tied to Rest.li projections (that's just one application). However, one could make the argument that the term \"projection\" is a generic term and isn't implying that it's used for Rest.li projections. What do you think?\nI'm also curious to know how a \"full projection\" PathSpecSet is used. Do you have an example of one use case?", "url": "https://github.com/linkedin/rest.li/pull/339#discussion_r533069668", "createdAt": "2020-12-01T04:43:58Z", "author": {"login": "evanw555"}, "path": "data/src/main/java/com/linkedin/data/schema/PathSpecSet.java", "diffHunk": "@@ -0,0 +1,440 @@\n+/*\n+   Copyright (c) 2012 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.data.schema;\n+\n+import com.linkedin.data.template.RecordTemplate;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+\n+/**\n+ * Represents an immutable set of {@link PathSpec}s.\n+ *\n+ * <p>Path spec set is a convenient wrapper for a collection of {@link PathSpec}. A few advantages of using this class\n+ * over manually passing around {@code Set<PathSpec>} is:\n+ *\n+ * <ul>\n+ *   <li>guaranteed immutable representation</li>\n+ *   <li>\n+ *     explicitly supports \"full projection\" which translates into fetch everything (default for rest.li resources),\n+ *     as well as \"empty\" which translates into fetch no fields\n+ *   </li>\n+ *   <li>mutable builder for incrementally assembling an immutable {@link PathSpecSet}</li>\n+ *   <li>built-in utility to mask a {@link RecordTemplate} with the stored path specs</li>\n+ * </ul>\n+ *\n+ * @author Joseph Florencio\n+ */\n+final public class PathSpecSet\n+{\n+  private final static PathSpecSet EMPTY = new PathSpecSet(Collections.emptySet(), false);\n+  private final static PathSpecSet FULL_PROJECTION = new PathSpecSet(Collections.emptySet(), true);\n+\n+  private final Set<PathSpec> _pathSpecs;\n+  private final boolean _fullProjection;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c810667d15d73cfc38840fb82fc27a5c2caaf41"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ3MzgwNQ==", "bodyText": "maybe we can change to name \"universal\". Otherwise the \"full\" return a empty set and NULL in toArray seems unnatural to me as well", "url": "https://github.com/linkedin/rest.li/pull/339#discussion_r534473805", "createdAt": "2020-12-02T20:53:03Z", "author": {"login": "junchuanwang"}, "path": "data/src/main/java/com/linkedin/data/schema/PathSpecSet.java", "diffHunk": "@@ -0,0 +1,440 @@\n+/*\n+   Copyright (c) 2012 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.data.schema;\n+\n+import com.linkedin.data.template.RecordTemplate;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+\n+/**\n+ * Represents an immutable set of {@link PathSpec}s.\n+ *\n+ * <p>Path spec set is a convenient wrapper for a collection of {@link PathSpec}. A few advantages of using this class\n+ * over manually passing around {@code Set<PathSpec>} is:\n+ *\n+ * <ul>\n+ *   <li>guaranteed immutable representation</li>\n+ *   <li>\n+ *     explicitly supports \"full projection\" which translates into fetch everything (default for rest.li resources),\n+ *     as well as \"empty\" which translates into fetch no fields\n+ *   </li>\n+ *   <li>mutable builder for incrementally assembling an immutable {@link PathSpecSet}</li>\n+ *   <li>built-in utility to mask a {@link RecordTemplate} with the stored path specs</li>\n+ * </ul>\n+ *\n+ * @author Joseph Florencio\n+ */\n+final public class PathSpecSet\n+{\n+  private final static PathSpecSet EMPTY = new PathSpecSet(Collections.emptySet(), false);\n+  private final static PathSpecSet FULL_PROJECTION = new PathSpecSet(Collections.emptySet(), true);\n+\n+  private final Set<PathSpec> _pathSpecs;\n+  private final boolean _fullProjection;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2OTY2OA=="}, "originalCommit": {"oid": "2c810667d15d73cfc38840fb82fc27a5c2caaf41"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTc3OTQxNA==", "bodyText": "In Rest.li world, when you have a PathSpecSet you may have logic that is skipped if the projection doesn't include a specific field:\nif (pathSpecSet.contains(MyRecord.fields().subrecord()) {\n    // do a bunch of stuff that is costly but unnecessary if the field subrecord isn't requested\n}\n\nAnd then given the ResourceContext, you can easily build a PathSpecSet with PathSpecSet.of(resourceContext.getProjectionMask()).\nWhen no projection is specified, the ProjectionMask is null and you want to make sure that contains(PathSpec) returns true for any PathSpec and that's the meaning of a fullProjection.", "url": "https://github.com/linkedin/rest.li/pull/339#discussion_r541779414", "createdAt": "2020-12-12T20:58:55Z", "author": {"login": "GuiForget"}, "path": "data/src/main/java/com/linkedin/data/schema/PathSpecSet.java", "diffHunk": "@@ -0,0 +1,440 @@\n+/*\n+   Copyright (c) 2012 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.data.schema;\n+\n+import com.linkedin.data.template.RecordTemplate;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+\n+/**\n+ * Represents an immutable set of {@link PathSpec}s.\n+ *\n+ * <p>Path spec set is a convenient wrapper for a collection of {@link PathSpec}. A few advantages of using this class\n+ * over manually passing around {@code Set<PathSpec>} is:\n+ *\n+ * <ul>\n+ *   <li>guaranteed immutable representation</li>\n+ *   <li>\n+ *     explicitly supports \"full projection\" which translates into fetch everything (default for rest.li resources),\n+ *     as well as \"empty\" which translates into fetch no fields\n+ *   </li>\n+ *   <li>mutable builder for incrementally assembling an immutable {@link PathSpecSet}</li>\n+ *   <li>built-in utility to mask a {@link RecordTemplate} with the stored path specs</li>\n+ * </ul>\n+ *\n+ * @author Joseph Florencio\n+ */\n+final public class PathSpecSet\n+{\n+  private final static PathSpecSet EMPTY = new PathSpecSet(Collections.emptySet(), false);\n+  private final static PathSpecSet FULL_PROJECTION = new PathSpecSet(Collections.emptySet(), true);\n+\n+  private final Set<PathSpec> _pathSpecs;\n+  private final boolean _fullProjection;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2OTY2OA=="}, "originalCommit": {"oid": "2c810667d15d73cfc38840fb82fc27a5c2caaf41"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTc4MDE0OQ==", "bodyText": "For the toArray() returning null, this is consistent with the behavior of the method fields(PathSpec[]) in the Rest.li builders.", "url": "https://github.com/linkedin/rest.li/pull/339#discussion_r541780149", "createdAt": "2020-12-12T21:03:55Z", "author": {"login": "GuiForget"}, "path": "data/src/main/java/com/linkedin/data/schema/PathSpecSet.java", "diffHunk": "@@ -0,0 +1,440 @@\n+/*\n+   Copyright (c) 2012 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.data.schema;\n+\n+import com.linkedin.data.template.RecordTemplate;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+\n+/**\n+ * Represents an immutable set of {@link PathSpec}s.\n+ *\n+ * <p>Path spec set is a convenient wrapper for a collection of {@link PathSpec}. A few advantages of using this class\n+ * over manually passing around {@code Set<PathSpec>} is:\n+ *\n+ * <ul>\n+ *   <li>guaranteed immutable representation</li>\n+ *   <li>\n+ *     explicitly supports \"full projection\" which translates into fetch everything (default for rest.li resources),\n+ *     as well as \"empty\" which translates into fetch no fields\n+ *   </li>\n+ *   <li>mutable builder for incrementally assembling an immutable {@link PathSpecSet}</li>\n+ *   <li>built-in utility to mask a {@link RecordTemplate} with the stored path specs</li>\n+ * </ul>\n+ *\n+ * @author Joseph Florencio\n+ */\n+final public class PathSpecSet\n+{\n+  private final static PathSpecSet EMPTY = new PathSpecSet(Collections.emptySet(), false);\n+  private final static PathSpecSet FULL_PROJECTION = new PathSpecSet(Collections.emptySet(), true);\n+\n+  private final Set<PathSpec> _pathSpecs;\n+  private final boolean _fullProjection;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2OTY2OA=="}, "originalCommit": {"oid": "2c810667d15d73cfc38840fb82fc27a5c2caaf41"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTc4MTg2Mg==", "bodyText": "I'm used to full projection so it is difficult for me to come up with an alternative. I'm not sure universal as an adjective works but I could see universe or universeSet as suitable. Here are some alternatives that I found in a thesaurus dictionary:\n\nglobalSet\nallInclusiveSet\nblanketSet", "url": "https://github.com/linkedin/rest.li/pull/339#discussion_r541781862", "createdAt": "2020-12-12T21:15:07Z", "author": {"login": "GuiForget"}, "path": "data/src/main/java/com/linkedin/data/schema/PathSpecSet.java", "diffHunk": "@@ -0,0 +1,440 @@\n+/*\n+   Copyright (c) 2012 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.data.schema;\n+\n+import com.linkedin.data.template.RecordTemplate;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+\n+/**\n+ * Represents an immutable set of {@link PathSpec}s.\n+ *\n+ * <p>Path spec set is a convenient wrapper for a collection of {@link PathSpec}. A few advantages of using this class\n+ * over manually passing around {@code Set<PathSpec>} is:\n+ *\n+ * <ul>\n+ *   <li>guaranteed immutable representation</li>\n+ *   <li>\n+ *     explicitly supports \"full projection\" which translates into fetch everything (default for rest.li resources),\n+ *     as well as \"empty\" which translates into fetch no fields\n+ *   </li>\n+ *   <li>mutable builder for incrementally assembling an immutable {@link PathSpecSet}</li>\n+ *   <li>built-in utility to mask a {@link RecordTemplate} with the stored path specs</li>\n+ * </ul>\n+ *\n+ * @author Joseph Florencio\n+ */\n+final public class PathSpecSet\n+{\n+  private final static PathSpecSet EMPTY = new PathSpecSet(Collections.emptySet(), false);\n+  private final static PathSpecSet FULL_PROJECTION = new PathSpecSet(Collections.emptySet(), true);\n+\n+  private final Set<PathSpec> _pathSpecs;\n+  private final boolean _fullProjection;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2OTY2OA=="}, "originalCommit": {"oid": "2c810667d15d73cfc38840fb82fc27a5c2caaf41"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkzNDc4MQ==", "bodyText": "When no projection is specified, the ProjectionMask is null and you want to make sure that contains(PathSpec) returns true for any PathSpec and that's the meaning of a fullProjection.\n\nIn this specific use case it makes sense, but this object is simply a set of path specs. An empty path spec set articulates to a full projection when it's used in the specific application of projection, but path specs aren't only for projections. What does an empty path spec set mean when it's being used for indexing values from a complex data object, or matching ReadOnly/CreateOnly predicates? I don't necessarily think that an empty path spec set contains everything for all use cases.", "url": "https://github.com/linkedin/rest.li/pull/339#discussion_r542934781", "createdAt": "2020-12-15T00:00:17Z", "author": {"login": "evanw555"}, "path": "data/src/main/java/com/linkedin/data/schema/PathSpecSet.java", "diffHunk": "@@ -0,0 +1,440 @@\n+/*\n+   Copyright (c) 2012 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.data.schema;\n+\n+import com.linkedin.data.template.RecordTemplate;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+\n+/**\n+ * Represents an immutable set of {@link PathSpec}s.\n+ *\n+ * <p>Path spec set is a convenient wrapper for a collection of {@link PathSpec}. A few advantages of using this class\n+ * over manually passing around {@code Set<PathSpec>} is:\n+ *\n+ * <ul>\n+ *   <li>guaranteed immutable representation</li>\n+ *   <li>\n+ *     explicitly supports \"full projection\" which translates into fetch everything (default for rest.li resources),\n+ *     as well as \"empty\" which translates into fetch no fields\n+ *   </li>\n+ *   <li>mutable builder for incrementally assembling an immutable {@link PathSpecSet}</li>\n+ *   <li>built-in utility to mask a {@link RecordTemplate} with the stored path specs</li>\n+ * </ul>\n+ *\n+ * @author Joseph Florencio\n+ */\n+final public class PathSpecSet\n+{\n+  private final static PathSpecSet EMPTY = new PathSpecSet(Collections.emptySet(), false);\n+  private final static PathSpecSet FULL_PROJECTION = new PathSpecSet(Collections.emptySet(), true);\n+\n+  private final Set<PathSpec> _pathSpecs;\n+  private final boolean _fullProjection;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2OTY2OA=="}, "originalCommit": {"oid": "2c810667d15d73cfc38840fb82fc27a5c2caaf41"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NjAxNg==", "bodyText": "thanks for the explanation, I will vote for \"allInclusiveSet\".", "url": "https://github.com/linkedin/rest.li/pull/339#discussion_r552446016", "createdAt": "2021-01-06T08:57:43Z", "author": {"login": "junchuanwang"}, "path": "data/src/main/java/com/linkedin/data/schema/PathSpecSet.java", "diffHunk": "@@ -0,0 +1,440 @@\n+/*\n+   Copyright (c) 2012 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.data.schema;\n+\n+import com.linkedin.data.template.RecordTemplate;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+\n+/**\n+ * Represents an immutable set of {@link PathSpec}s.\n+ *\n+ * <p>Path spec set is a convenient wrapper for a collection of {@link PathSpec}. A few advantages of using this class\n+ * over manually passing around {@code Set<PathSpec>} is:\n+ *\n+ * <ul>\n+ *   <li>guaranteed immutable representation</li>\n+ *   <li>\n+ *     explicitly supports \"full projection\" which translates into fetch everything (default for rest.li resources),\n+ *     as well as \"empty\" which translates into fetch no fields\n+ *   </li>\n+ *   <li>mutable builder for incrementally assembling an immutable {@link PathSpecSet}</li>\n+ *   <li>built-in utility to mask a {@link RecordTemplate} with the stored path specs</li>\n+ * </ul>\n+ *\n+ * @author Joseph Florencio\n+ */\n+final public class PathSpecSet\n+{\n+  private final static PathSpecSet EMPTY = new PathSpecSet(Collections.emptySet(), false);\n+  private final static PathSpecSet FULL_PROJECTION = new PathSpecSet(Collections.emptySet(), true);\n+\n+  private final Set<PathSpec> _pathSpecs;\n+  private final boolean _fullProjection;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2OTY2OA=="}, "originalCommit": {"oid": "2c810667d15d73cfc38840fb82fc27a5c2caaf41"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkzNDkzOQ==", "bodyText": "Synced up with @GuiForget about this offline. He clarified that an empty set is not necessarily the same as an \"all inclusive\" or \"full projection\" set, which must be created explicitly as such.\nAs for naming, I say we avoid using the terminology \"full projection\", and instead use something that implies inclusivity. allInclusive/isAllInclusive works for me. complete may also be good, but I'm not sure if that has a different technical definition when it comes to sets.", "url": "https://github.com/linkedin/rest.li/pull/339#discussion_r552934939", "createdAt": "2021-01-06T20:01:25Z", "author": {"login": "evanw555"}, "path": "data/src/main/java/com/linkedin/data/schema/PathSpecSet.java", "diffHunk": "@@ -0,0 +1,440 @@\n+/*\n+   Copyright (c) 2012 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.data.schema;\n+\n+import com.linkedin.data.template.RecordTemplate;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+\n+/**\n+ * Represents an immutable set of {@link PathSpec}s.\n+ *\n+ * <p>Path spec set is a convenient wrapper for a collection of {@link PathSpec}. A few advantages of using this class\n+ * over manually passing around {@code Set<PathSpec>} is:\n+ *\n+ * <ul>\n+ *   <li>guaranteed immutable representation</li>\n+ *   <li>\n+ *     explicitly supports \"full projection\" which translates into fetch everything (default for rest.li resources),\n+ *     as well as \"empty\" which translates into fetch no fields\n+ *   </li>\n+ *   <li>mutable builder for incrementally assembling an immutable {@link PathSpecSet}</li>\n+ *   <li>built-in utility to mask a {@link RecordTemplate} with the stored path specs</li>\n+ * </ul>\n+ *\n+ * @author Joseph Florencio\n+ */\n+final public class PathSpecSet\n+{\n+  private final static PathSpecSet EMPTY = new PathSpecSet(Collections.emptySet(), false);\n+  private final static PathSpecSet FULL_PROJECTION = new PathSpecSet(Collections.emptySet(), true);\n+\n+  private final Set<PathSpec> _pathSpecs;\n+  private final boolean _fullProjection;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2OTY2OA=="}, "originalCommit": {"oid": "2c810667d15d73cfc38840fb82fc27a5c2caaf41"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjM1ODIxMA==", "bodyText": "I renamed fullProjection to allInclusive and propagated the changes throughout the classes and unit tests", "url": "https://github.com/linkedin/rest.li/pull/339#discussion_r572358210", "createdAt": "2021-02-08T20:43:54Z", "author": {"login": "GuiForget"}, "path": "data/src/main/java/com/linkedin/data/schema/PathSpecSet.java", "diffHunk": "@@ -0,0 +1,440 @@\n+/*\n+   Copyright (c) 2012 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.data.schema;\n+\n+import com.linkedin.data.template.RecordTemplate;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+\n+/**\n+ * Represents an immutable set of {@link PathSpec}s.\n+ *\n+ * <p>Path spec set is a convenient wrapper for a collection of {@link PathSpec}. A few advantages of using this class\n+ * over manually passing around {@code Set<PathSpec>} is:\n+ *\n+ * <ul>\n+ *   <li>guaranteed immutable representation</li>\n+ *   <li>\n+ *     explicitly supports \"full projection\" which translates into fetch everything (default for rest.li resources),\n+ *     as well as \"empty\" which translates into fetch no fields\n+ *   </li>\n+ *   <li>mutable builder for incrementally assembling an immutable {@link PathSpecSet}</li>\n+ *   <li>built-in utility to mask a {@link RecordTemplate} with the stored path specs</li>\n+ * </ul>\n+ *\n+ * @author Joseph Florencio\n+ */\n+final public class PathSpecSet\n+{\n+  private final static PathSpecSet EMPTY = new PathSpecSet(Collections.emptySet(), false);\n+  private final static PathSpecSet FULL_PROJECTION = new PathSpecSet(Collections.emptySet(), true);\n+\n+  private final Set<PathSpec> _pathSpecs;\n+  private final boolean _fullProjection;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2OTY2OA=="}, "originalCommit": {"oid": "2c810667d15d73cfc38840fb82fc27a5c2caaf41"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 513, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}