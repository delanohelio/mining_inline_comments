{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1ODU2ODIx", "number": 216, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDo1OTo1M1rODm2n_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNTozOToyMlrODnIV-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDY3NDU0OnYy", "diffSide": "RIGHT", "path": "data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDo1OTo1M1rOF0gyjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMTowMjozOVrOF0g7wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYwNzUwMw==", "bodyText": "these are not related to your change.. please check", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r390607503", "createdAt": "2020-03-10T20:59:53Z", "author": {"login": "karthikbalasub"}, "path": "data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java", "diffHunk": "@@ -1660,6 +1660,46 @@ public void testToAvroSchema_testTypeRefAnnotationPropagation(String schemaBefor\n               null,\n               null,\n               null\n+          },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae2499aeb5c14b5b8a4e6791616830ef9d49c262"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYwOTg1Ng==", "bodyText": "yes updated the branch", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r390609856", "createdAt": "2020-03-10T21:02:39Z", "author": {"login": "aman1309"}, "path": "data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java", "diffHunk": "@@ -1660,6 +1660,46 @@ public void testToAvroSchema_testTypeRefAnnotationPropagation(String schemaBefor\n               null,\n               null,\n               null\n+          },", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYwNzUwMw=="}, "originalCommit": {"oid": "ae2499aeb5c14b5b8a4e6791616830ef9d49c262"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTA3MjMxOnYy", "diffSide": "RIGHT", "path": "data/src/main/java/com/linkedin/data/schema/IndentedPdlBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzoyODo0MlrOF0kimw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNDo1OTo1OVrOF0pSxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2ODk1NQ==", "bodyText": "Should this be using two spaces? SPACE * INDENT_WIDTH?", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r390668955", "createdAt": "2020-03-10T23:28:42Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/schema/IndentedPdlBuilder.java", "diffHunk": "@@ -124,6 +120,15 @@ boolean writeDoc(String doc) throws IOException\n     return false;\n   }\n \n+  @Override\n+  PdlBuilder writeJson(Object value) throws IOException\n+  {\n+    DefaultPrettyPrinter prettyPrinter = new DefaultPrettyPrinter();\n+    prettyPrinter.indentObjectsWith(new DefaultIndenter(\" \", DefaultIndenter.SYS_LF + getIndentSpaces()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b59ffb330a112210d205ad43953b96d6be5a4cde"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc0NjgyMA==", "bodyText": "fixed", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r390746820", "createdAt": "2020-03-11T04:59:59Z", "author": {"login": "aman1309"}, "path": "data/src/main/java/com/linkedin/data/schema/IndentedPdlBuilder.java", "diffHunk": "@@ -124,6 +120,15 @@ boolean writeDoc(String doc) throws IOException\n     return false;\n   }\n \n+  @Override\n+  PdlBuilder writeJson(Object value) throws IOException\n+  {\n+    DefaultPrettyPrinter prettyPrinter = new DefaultPrettyPrinter();\n+    prettyPrinter.indentObjectsWith(new DefaultIndenter(\" \", DefaultIndenter.SYS_LF + getIndentSpaces()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2ODk1NQ=="}, "originalCommit": {"oid": "b59ffb330a112210d205ad43953b96d6be5a4cde"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTA4MjY5OnYy", "diffSide": "RIGHT", "path": "data/src/main/java/com/linkedin/data/schema/IndentedPdlBuilder.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzozNDowNlrOF0ko6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNTozNjowOVrOF08iYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY3MDU3MA==", "bodyText": "Suggest creating a local codec for this.\nThis way of changing the state of a member variable for each function call is not clean.", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r390670570", "createdAt": "2020-03-10T23:34:06Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/schema/IndentedPdlBuilder.java", "diffHunk": "@@ -124,6 +120,15 @@ boolean writeDoc(String doc) throws IOException\n     return false;\n   }\n \n+  @Override\n+  PdlBuilder writeJson(Object value) throws IOException\n+  {\n+    DefaultPrettyPrinter prettyPrinter = new DefaultPrettyPrinter();\n+    prettyPrinter.indentObjectsWith(new DefaultIndenter(\" \", DefaultIndenter.SYS_LF + getIndentSpaces()));\n+    _jsonCodec.setPrettyPrinter(prettyPrinter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b59ffb330a112210d205ad43953b96d6be5a4cde"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc0NDgzMw==", "bodyText": "that is why I changed static to property, this is need to add pdl stateful indentation at the beginning of each line in json", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r390744833", "createdAt": "2020-03-11T04:50:44Z", "author": {"login": "aman1309"}, "path": "data/src/main/java/com/linkedin/data/schema/IndentedPdlBuilder.java", "diffHunk": "@@ -124,6 +120,15 @@ boolean writeDoc(String doc) throws IOException\n     return false;\n   }\n \n+  @Override\n+  PdlBuilder writeJson(Object value) throws IOException\n+  {\n+    DefaultPrettyPrinter prettyPrinter = new DefaultPrettyPrinter();\n+    prettyPrinter.indentObjectsWith(new DefaultIndenter(\" \", DefaultIndenter.SYS_LF + getIndentSpaces()));\n+    _jsonCodec.setPrettyPrinter(prettyPrinter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY3MDU3MA=="}, "originalCommit": {"oid": "b59ffb330a112210d205ad43953b96d6be5a4cde"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA2MjExMw==", "bodyText": "The state is not for the entire PdlBuilder, but only when writeJson is called (ie at a function scope). After this function is completed, the state of _jsonBuilder is invalid. So using a member variable to set the state for a particular function is odd.\nWhat if someone uses the _jsonCodec on some other code path without updating the prettyPrinter?\nIt is not explicit that pretty printer should be updated before the code should be used.\nWhat happens if PdlBuilder stops using _jsonCodec in toJson?\nIt is not explict that PdlBuilder is expecting json to be formatted by custom builders.", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r391062113", "createdAt": "2020-03-11T15:36:09Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/schema/IndentedPdlBuilder.java", "diffHunk": "@@ -124,6 +120,15 @@ boolean writeDoc(String doc) throws IOException\n     return false;\n   }\n \n+  @Override\n+  PdlBuilder writeJson(Object value) throws IOException\n+  {\n+    DefaultPrettyPrinter prettyPrinter = new DefaultPrettyPrinter();\n+    prettyPrinter.indentObjectsWith(new DefaultIndenter(\" \", DefaultIndenter.SYS_LF + getIndentSpaces()));\n+    _jsonCodec.setPrettyPrinter(prettyPrinter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY3MDU3MA=="}, "originalCommit": {"oid": "b59ffb330a112210d205ad43953b96d6be5a4cde"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTA4ODg5OnYy", "diffSide": "RIGHT", "path": "data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzozNzowN1rOF0ksgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNToyMDoxNVrOF0pizg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY3MTQ5MQ==", "bodyText": "Can you add the testcases you used for testing, but comment them out for now. It would be easier to just enable those tests later.", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r390671491", "createdAt": "2020-03-10T23:37:07Z", "author": {"login": "karthikbalasub"}, "path": "data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java", "diffHunk": "@@ -37,31 +39,39 @@\n   private static Object[][] propertiesMapProvider()\n   {\n     DataMap properties1 = new DataMap();\n-    properties1.put(\"empty\", new DataMap());\n+    properties1.put(\"empty\", new DataList(Arrays.asList(1, 2, 3)));\n     DataMap properties2 = new DataMap();\n     properties2.put(\"validate\", properties1);\n     return new Object[][]\n         {\n             {\n               properties1,\n-              \"@empty = {}\\n\"\n+              \"@empty = [ 1, 2, 3 ]\\n\",\n+              \"@empty=[1,2,3]\"\n             },\n             {\n               properties2,\n-              \"@validate.empty = {}\\n\"\n+              \"@validate.empty = [ 1, 2, 3 ]\\n\",\n+              \"@validate.empty=[1,2,3]\"\n             }\n         //TODO Add test case for multiple properties in a map level once iteration logic is fixed to be deterministic", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b59ffb330a112210d205ad43953b96d6be5a4cde"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc1MDkyNg==", "bodyText": "done", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r390750926", "createdAt": "2020-03-11T05:20:15Z", "author": {"login": "aman1309"}, "path": "data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java", "diffHunk": "@@ -37,31 +39,39 @@\n   private static Object[][] propertiesMapProvider()\n   {\n     DataMap properties1 = new DataMap();\n-    properties1.put(\"empty\", new DataMap());\n+    properties1.put(\"empty\", new DataList(Arrays.asList(1, 2, 3)));\n     DataMap properties2 = new DataMap();\n     properties2.put(\"validate\", properties1);\n     return new Object[][]\n         {\n             {\n               properties1,\n-              \"@empty = {}\\n\"\n+              \"@empty = [ 1, 2, 3 ]\\n\",\n+              \"@empty=[1,2,3]\"\n             },\n             {\n               properties2,\n-              \"@validate.empty = {}\\n\"\n+              \"@validate.empty = [ 1, 2, 3 ]\\n\",\n+              \"@validate.empty=[1,2,3]\"\n             }\n         //TODO Add test case for multiple properties in a map level once iteration logic is fixed to be deterministic", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY3MTQ5MQ=="}, "originalCommit": {"oid": "b59ffb330a112210d205ad43953b96d6be5a4cde"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTgwNjA0OnYy", "diffSide": "RIGHT", "path": "data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNzoyNDozNVrOF0rhkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODowMDoxNFrOF0sVUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc4MzM3Ng==", "bodyText": "I'd suggest adding a map test case with only 1 property per level, along with a TODO saying to add more properties at each level.", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r390783376", "createdAt": "2020-03-11T07:24:35Z", "author": {"login": "evanw555"}, "path": "data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java", "diffHunk": "@@ -36,32 +38,57 @@\n   @DataProvider\n   private static Object[][] propertiesMapProvider()\n   {\n-    DataMap properties1 = new DataMap();\n-    properties1.put(\"empty\", new DataMap());\n-    DataMap properties2 = new DataMap();\n-    properties2.put(\"validate\", properties1);\n+    DataMap emptyProperty = new DataMap();\n+    emptyProperty.put(\"empty\", new DataMap());\n+    DataMap arrayValueProperty = new DataMap();\n+    arrayValueProperty.put(\"array\", new DataList(Arrays.asList(1, 2, 3)));\n+    DataMap flattenProperty = new DataMap();\n+    flattenProperty.put(\"flatten\", arrayValueProperty);\n+    DataMap multipleProp = new DataMap();\n+    multipleProp.putAll(emptyProperty);\n+    multipleProp.putAll(arrayValueProperty);\n+    DataMap jsonValueProp = new DataMap();\n+    jsonValueProp.put(\"nested\", multipleProp);\n     return new Object[][]\n         {\n             {\n-              properties1,\n-              \"@empty = {}\\n\"\n+              emptyProperty,\n+              \"@empty = { }\\n\",\n+              \"@empty={}\"\n             },\n             {\n-              properties2,\n-              \"@validate.empty = {}\\n\"\n-            }\n-        //TODO Add test case for multiple properties in a map level once iteration logic is fixed to be deterministic\n+              arrayValueProperty,\n+              \"@`array` = [ 1, 2, 3 ]\\n\",\n+              \"@`array`=[1,2,3]\"\n+            },\n+            {\n+              flattenProperty,\n+              \"@flatten.`array` = [ 1, 2, 3 ]\\n\",\n+              \"@flatten.`array`=[1,2,3]\"\n+            },\n+            /* TODO Add test case for multiple properties in a map level once iteration logic is fixed to be deterministic", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d25fd6baed17526daf3e4a98c685ec75e6733c8"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc5NjYyNg==", "bodyText": "flatten array property map is that use case and we need it to test compact logic.\nthat is why added separate test for json case.", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r390796626", "createdAt": "2020-03-11T08:00:14Z", "author": {"login": "aman1309"}, "path": "data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java", "diffHunk": "@@ -36,32 +38,57 @@\n   @DataProvider\n   private static Object[][] propertiesMapProvider()\n   {\n-    DataMap properties1 = new DataMap();\n-    properties1.put(\"empty\", new DataMap());\n-    DataMap properties2 = new DataMap();\n-    properties2.put(\"validate\", properties1);\n+    DataMap emptyProperty = new DataMap();\n+    emptyProperty.put(\"empty\", new DataMap());\n+    DataMap arrayValueProperty = new DataMap();\n+    arrayValueProperty.put(\"array\", new DataList(Arrays.asList(1, 2, 3)));\n+    DataMap flattenProperty = new DataMap();\n+    flattenProperty.put(\"flatten\", arrayValueProperty);\n+    DataMap multipleProp = new DataMap();\n+    multipleProp.putAll(emptyProperty);\n+    multipleProp.putAll(arrayValueProperty);\n+    DataMap jsonValueProp = new DataMap();\n+    jsonValueProp.put(\"nested\", multipleProp);\n     return new Object[][]\n         {\n             {\n-              properties1,\n-              \"@empty = {}\\n\"\n+              emptyProperty,\n+              \"@empty = { }\\n\",\n+              \"@empty={}\"\n             },\n             {\n-              properties2,\n-              \"@validate.empty = {}\\n\"\n-            }\n-        //TODO Add test case for multiple properties in a map level once iteration logic is fixed to be deterministic\n+              arrayValueProperty,\n+              \"@`array` = [ 1, 2, 3 ]\\n\",\n+              \"@`array`=[1,2,3]\"\n+            },\n+            {\n+              flattenProperty,\n+              \"@flatten.`array` = [ 1, 2, 3 ]\\n\",\n+              \"@flatten.`array`=[1,2,3]\"\n+            },\n+            /* TODO Add test case for multiple properties in a map level once iteration logic is fixed to be deterministic", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc4MzM3Ng=="}, "originalCommit": {"oid": "0d25fd6baed17526daf3e4a98c685ec75e6733c8"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTgzMDIxOnYy", "diffSide": "RIGHT", "path": "data/src/main/java/com/linkedin/data/schema/IndentedPdlBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNzozNDo1NFrOF0rvoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODowMzo0M1rOF0sa4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc4Njk3Ng==", "bodyText": "I don't think this method is necessary. You can avoid adding this logic as an overridden method which calls the super method (a little confusing) by just updating the codec's pretty printer on indent change (i.e. #increaseIndent and #decreaseIndent). It seems more intuitive IMO to compute the indent string and update the pretty printer on indent change rather than on each use.", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r390786976", "createdAt": "2020-03-11T07:34:54Z", "author": {"login": "evanw555"}, "path": "data/src/main/java/com/linkedin/data/schema/IndentedPdlBuilder.java", "diffHunk": "@@ -124,6 +120,16 @@ boolean writeDoc(String doc) throws IOException\n     return false;\n   }\n \n+  @Override\n+  PdlBuilder writeJson(Object value) throws IOException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d25fd6baed17526daf3e4a98c685ec75e6733c8"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc5ODA1MA==", "bodyText": "It shouldn't be confusing at Indenter is kind of decorating the vanilla builder so it should be good to have child class calling super method.\nRegarding having this logic in increase and decrease indent I would avoid it as to why build it when it's not needed.", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r390798050", "createdAt": "2020-03-11T08:03:43Z", "author": {"login": "aman1309"}, "path": "data/src/main/java/com/linkedin/data/schema/IndentedPdlBuilder.java", "diffHunk": "@@ -124,6 +120,16 @@ boolean writeDoc(String doc) throws IOException\n     return false;\n   }\n \n+  @Override\n+  PdlBuilder writeJson(Object value) throws IOException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc4Njk3Ng=="}, "originalCommit": {"oid": "0d25fd6baed17526daf3e4a98c685ec75e6733c8"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTg0NzYyOnYy", "diffSide": "RIGHT", "path": "data/src/main/java/com/linkedin/data/schema/IndentedPdlBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNzo0MjozNlrOF0r6Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODowNToyOVrOF0sddA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc4OTcxOQ==", "bodyText": "I would make this method static, since it's just a helper method to compute indent text. Whether to use static methods when possible or to avoid static methods seems to be a contentious and subjective issue, so it's up to you tbh.", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r390789719", "createdAt": "2020-03-11T07:42:36Z", "author": {"login": "evanw555"}, "path": "data/src/main/java/com/linkedin/data/schema/IndentedPdlBuilder.java", "diffHunk": "@@ -133,4 +139,15 @@ private void writeLine(String code) throws IOException\n   {\n     indent().write(code).newline();\n   }\n+\n+  private String getIndentSpaces(int indentDepth)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d25fd6baed17526daf3e4a98c685ec75e6733c8"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc5ODcwOA==", "bodyText": "lets keep it like this for now, as scope of method is for this class only", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r390798708", "createdAt": "2020-03-11T08:05:29Z", "author": {"login": "aman1309"}, "path": "data/src/main/java/com/linkedin/data/schema/IndentedPdlBuilder.java", "diffHunk": "@@ -133,4 +139,15 @@ private void writeLine(String code) throws IOException\n   {\n     indent().write(code).newline();\n   }\n+\n+  private String getIndentSpaces(int indentDepth)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc4OTcxOQ=="}, "originalCommit": {"oid": "0d25fd6baed17526daf3e4a98c685ec75e6733c8"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTg0ODI5OnYy", "diffSide": "RIGHT", "path": "data/src/main/java/com/linkedin/data/schema/PdlBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNzo0Mjo1MFrOF0r6uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNzo0Mjo1MFrOF0r6uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc4OTgxOQ==", "bodyText": "Should be protected.", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r390789819", "createdAt": "2020-03-11T07:42:50Z", "author": {"login": "evanw555"}, "path": "data/src/main/java/com/linkedin/data/schema/PdlBuilder.java", "diffHunk": "@@ -63,6 +61,7 @@\n   }\n \n   private final Writer _writer;\n+  final JacksonDataCodec _jsonCodec = new JacksonDataCodec();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d25fd6baed17526daf3e4a98c685ec75e6733c8"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzU3NzUzOnYy", "diffSide": "RIGHT", "path": "data/src/main/java/com/linkedin/data/schema/PdlBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNTozOToyMlrOF08rzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOToyMjoxOVrOF1FZlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA2NDUyNg==", "bodyText": "Cleaner option is to create two protected abstrac methods toJson(DataMap) toJson(DataList) and let concrete implementations decide how the json is generated.", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r391064526", "createdAt": "2020-03-11T15:39:22Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/schema/PdlBuilder.java", "diffHunk": "@@ -275,11 +274,11 @@ private String toJson(Object value) throws IOException\n   {\n     if (value instanceof DataMap)\n     {\n-      return JSON_CODEC.mapToString((DataMap) value);\n+      return _jsonCodec.mapToString((DataMap) value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5b86bb7712c3fe4a4e109a8b58655a44d296d24"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwNzMxOA==", "bodyText": "why not have only 1 ie toJson(Object) and writeJson is kind of fulfilling that but if needed we can separate out toJson\nfor jsonCodec being updated, would it be okay if local codec in toJson/writeJson is initialized everytime.", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r391207318", "createdAt": "2020-03-11T19:22:19Z", "author": {"login": "aman1309"}, "path": "data/src/main/java/com/linkedin/data/schema/PdlBuilder.java", "diffHunk": "@@ -275,11 +274,11 @@ private String toJson(Object value) throws IOException\n   {\n     if (value instanceof DataMap)\n     {\n-      return JSON_CODEC.mapToString((DataMap) value);\n+      return _jsonCodec.mapToString((DataMap) value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA2NDUyNg=="}, "originalCommit": {"oid": "c5b86bb7712c3fe4a4e109a8b58655a44d296d24"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 620, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}