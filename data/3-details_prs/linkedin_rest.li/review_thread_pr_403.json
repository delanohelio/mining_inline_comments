{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4MTI3MTY0", "number": 403, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMDowMTowNFrOEfowuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxOTowMTo0MFrOEgfolw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNjA5MTQ1OnYy", "diffSide": "RIGHT", "path": "restli-tools/src/test/extensions/validCase/BarExtensions.pdl", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMDowMTowNFrOHMCTXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjo1MTowOVrOHM57TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM4MjY4Ng==", "bodyText": "make new lines at each of the new files", "url": "https://github.com/linkedin/rest.li/pull/403#discussion_r482382686", "createdAt": "2020-09-02T20:01:04Z", "author": {"login": "BrianPin"}, "path": "restli-tools/src/test/extensions/validCase/BarExtensions.pdl", "diffHunk": "@@ -0,0 +1,4 @@\n+record BarExtensions includes Bar {\n+  @extension.using = \"finder: test\"\n+  injectedField: array[DummyKey]\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dd0f2141815cda3f211ff3f69279a87ed6e476c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5NDAyOQ==", "bodyText": "Fixed", "url": "https://github.com/linkedin/rest.li/pull/403#discussion_r483294029", "createdAt": "2020-09-03T22:51:09Z", "author": {"login": "nickibi"}, "path": "restli-tools/src/test/extensions/validCase/BarExtensions.pdl", "diffHunk": "@@ -0,0 +1,4 @@\n+record BarExtensions includes Bar {\n+  @extension.using = \"finder: test\"\n+  injectedField: array[DummyKey]\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM4MjY4Ng=="}, "originalCommit": {"oid": "5dd0f2141815cda3f211ff3f69279a87ed6e476c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODQ0NDAyOnYy", "diffSide": "RIGHT", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidationCmdLineApp.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzozMjo0MFrOHMZxhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjo1MDoyNlrOHM56fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2NzIzNw==", "bodyText": "Maybe give some hint in the beginning, just like the previous parseexception, so when see the log, we know clearly this is from extension schema validator", "url": "https://github.com/linkedin/rest.li/pull/403#discussion_r482767237", "createdAt": "2020-09-03T07:32:40Z", "author": {"login": "BrianPin"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidationCmdLineApp.java", "diffHunk": "@@ -112,44 +124,58 @@ public static void main(String[] args) throws Exception\n       _logger.error(\"Invalid arguments: \" + e.getMessage());\n       System.exit(1);\n     }\n+    catch (InvalidExtensionSchemaException e)\n+    {\n+      _logger.error(e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dd0f2141815cda3f211ff3f69279a87ed6e476c"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5MzgyMw==", "bodyText": "Fixed", "url": "https://github.com/linkedin/rest.li/pull/403#discussion_r483293823", "createdAt": "2020-09-03T22:50:26Z", "author": {"login": "nickibi"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidationCmdLineApp.java", "diffHunk": "@@ -112,44 +124,58 @@ public static void main(String[] args) throws Exception\n       _logger.error(\"Invalid arguments: \" + e.getMessage());\n       System.exit(1);\n     }\n+    catch (InvalidExtensionSchemaException e)\n+    {\n+      _logger.error(e.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2NzIzNw=="}, "originalCommit": {"oid": "5dd0f2141815cda3f211ff3f69279a87ed6e476c"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODQ1MTE3OnYy", "diffSide": "RIGHT", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidationCmdLineApp.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzozNDo1M1rOHMZ2HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjo1MDozN1rOHM56vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2ODQxMg==", "bodyText": "new line", "url": "https://github.com/linkedin/rest.li/pull/403#discussion_r482768412", "createdAt": "2020-09-03T07:34:53Z", "author": {"login": "BrianPin"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidationCmdLineApp.java", "diffHunk": "@@ -179,48 +205,101 @@ private static void checkExtensionSchemaFields(List<RecordDataSchema.Field> exte\n       {\n         if (!(dataElement instanceof DataMap))\n         {\n-          _logger.error(\"Extension schema annotation is not a datamap!\");\n-          System.exit(1);\n+          throw new InvalidExtensionSchemaException(\"Extension schema annotation is not a datamap!\");\n         }\n         DataSchema extensionSchemaAnnotationSchema = new ExtensionSchemaAnnotation().schema();\n         ValidationResult result = ValidateDataAgainstSchema.validate(dataElement, extensionSchemaAnnotationSchema, validationOptions);\n         if (!result.isValid())\n         {\n-          _logger.error(\"Extension schema annotation is not valid: \" + result.getMessages());\n-          System.exit(1);\n+          throw new InvalidExtensionSchemaException(\"Extension schema annotation is not valid: \" + result.getMessages());\n         }\n       }\n+      catch (InvalidExtensionSchemaException e)\n+      {\n+        throw e;\n+      }\n       catch (Exception e)\n       {\n         _logger.error(\"Error while checking extension schema field annotation: \" + e.getMessage());\n         System.exit(1);\n       }\n+      checkExtensionSchemaFieldSchema(field.getType(), properties);\n     }\n   }\n \n-  private static void checkExtensionSchemaFieldSchema(DataSchema fieldSchema)\n+  private static void checkExtensionSchemaFieldSchema(DataSchema fieldSchema, Map<String, Object> extensionAnnotations)\n+      throws InvalidExtensionSchemaException\n   {\n-    if (!isAnnotatedWithResourceKey(fieldSchema) && !arrayAndItemIsAnnotatedWithResourceKey(fieldSchema))\n+    checkExtensionSchemaFieldSchemaType(fieldSchema);\n+    if (!isAnnotatedWithResourceKey(fieldSchema, extensionAnnotations) && !arrayAndItemIsAnnotatedWithResourceKey(fieldSchema, extensionAnnotations))\n     {\n-        _logger.error(\"Field schema: [{}] is not annotated with 'resourceKey'\", fieldSchema.toString());\n-        System.exit(1);\n+       throw new InvalidExtensionSchemaException(\"Field schema: \" + fieldSchema.toString() + \" is not annotated with 'resourceKey'\");\n     }\n   }\n \n-  private static boolean arrayAndItemIsAnnotatedWithResourceKey(DataSchema schema)\n+  private static void checkExtensionSchemaFieldSchemaType(DataSchema fieldSchema)\n+      throws InvalidExtensionSchemaException\n+  {\n+    if (fieldSchema.getType() == DataSchema.Type.ARRAY) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dd0f2141815cda3f211ff3f69279a87ed6e476c"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5Mzg4Ng==", "bodyText": "Fixed", "url": "https://github.com/linkedin/rest.li/pull/403#discussion_r483293886", "createdAt": "2020-09-03T22:50:37Z", "author": {"login": "nickibi"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidationCmdLineApp.java", "diffHunk": "@@ -179,48 +205,101 @@ private static void checkExtensionSchemaFields(List<RecordDataSchema.Field> exte\n       {\n         if (!(dataElement instanceof DataMap))\n         {\n-          _logger.error(\"Extension schema annotation is not a datamap!\");\n-          System.exit(1);\n+          throw new InvalidExtensionSchemaException(\"Extension schema annotation is not a datamap!\");\n         }\n         DataSchema extensionSchemaAnnotationSchema = new ExtensionSchemaAnnotation().schema();\n         ValidationResult result = ValidateDataAgainstSchema.validate(dataElement, extensionSchemaAnnotationSchema, validationOptions);\n         if (!result.isValid())\n         {\n-          _logger.error(\"Extension schema annotation is not valid: \" + result.getMessages());\n-          System.exit(1);\n+          throw new InvalidExtensionSchemaException(\"Extension schema annotation is not valid: \" + result.getMessages());\n         }\n       }\n+      catch (InvalidExtensionSchemaException e)\n+      {\n+        throw e;\n+      }\n       catch (Exception e)\n       {\n         _logger.error(\"Error while checking extension schema field annotation: \" + e.getMessage());\n         System.exit(1);\n       }\n+      checkExtensionSchemaFieldSchema(field.getType(), properties);\n     }\n   }\n \n-  private static void checkExtensionSchemaFieldSchema(DataSchema fieldSchema)\n+  private static void checkExtensionSchemaFieldSchema(DataSchema fieldSchema, Map<String, Object> extensionAnnotations)\n+      throws InvalidExtensionSchemaException\n   {\n-    if (!isAnnotatedWithResourceKey(fieldSchema) && !arrayAndItemIsAnnotatedWithResourceKey(fieldSchema))\n+    checkExtensionSchemaFieldSchemaType(fieldSchema);\n+    if (!isAnnotatedWithResourceKey(fieldSchema, extensionAnnotations) && !arrayAndItemIsAnnotatedWithResourceKey(fieldSchema, extensionAnnotations))\n     {\n-        _logger.error(\"Field schema: [{}] is not annotated with 'resourceKey'\", fieldSchema.toString());\n-        System.exit(1);\n+       throw new InvalidExtensionSchemaException(\"Field schema: \" + fieldSchema.toString() + \" is not annotated with 'resourceKey'\");\n     }\n   }\n \n-  private static boolean arrayAndItemIsAnnotatedWithResourceKey(DataSchema schema)\n+  private static void checkExtensionSchemaFieldSchemaType(DataSchema fieldSchema)\n+      throws InvalidExtensionSchemaException\n+  {\n+    if (fieldSchema.getType() == DataSchema.Type.ARRAY) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2ODQxMg=="}, "originalCommit": {"oid": "5dd0f2141815cda3f211ff3f69279a87ed6e476c"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODQ2MDM4OnYy", "diffSide": "RIGHT", "path": "restli-tools/src/test/extensions/invalidExtensionAnnotation/FooExtensions.pdl", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzozNzowMVrOHMZ7fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjo1MDo1N1rOHM57Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2OTc5MQ==", "bodyText": "If we can add a comment say this is valid or not valid, then it is better,\nor we can use the name of the extension schema directly to tell it is valid or not valid.", "url": "https://github.com/linkedin/rest.li/pull/403#discussion_r482769791", "createdAt": "2020-09-03T07:37:01Z", "author": {"login": "BrianPin"}, "path": "restli-tools/src/test/extensions/invalidExtensionAnnotation/FooExtensions.pdl", "diffHunk": "@@ -0,0 +1,4 @@\n+record FooExtensions includes Foo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dd0f2141815cda3f211ff3f69279a87ed6e476c"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3MDQyNQ==", "bodyText": "I see you put all invalid in one directory, so for my prev comment it is fine,\nbut if you can add some reason in the comment say why it is not valid. Then it is perfect.", "url": "https://github.com/linkedin/rest.li/pull/403#discussion_r482770425", "createdAt": "2020-09-03T07:38:06Z", "author": {"login": "BrianPin"}, "path": "restli-tools/src/test/extensions/invalidExtensionAnnotation/FooExtensions.pdl", "diffHunk": "@@ -0,0 +1,4 @@\n+record FooExtensions includes Foo {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2OTc5MQ=="}, "originalCommit": {"oid": "5dd0f2141815cda3f211ff3f69279a87ed6e476c"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5Mzk3OQ==", "bodyText": "Added comment docs with more details.", "url": "https://github.com/linkedin/rest.li/pull/403#discussion_r483293979", "createdAt": "2020-09-03T22:50:57Z", "author": {"login": "nickibi"}, "path": "restli-tools/src/test/extensions/invalidExtensionAnnotation/FooExtensions.pdl", "diffHunk": "@@ -0,0 +1,4 @@\n+record FooExtensions includes Foo {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2OTc5MQ=="}, "originalCommit": {"oid": "5dd0f2141815cda3f211ff3f69279a87ed6e476c"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODQ2NTU2OnYy", "diffSide": "RIGHT", "path": "restli-tools/src/test/java/com/linkedin/restli/tools/data/TestExtensionSchemaValidationCmdLineApp.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzozODoyMVrOHMZ-oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjo1MToxOFrOHM57cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3MDU5Mw==", "bodyText": "new line", "url": "https://github.com/linkedin/rest.li/pull/403#discussion_r482770593", "createdAt": "2020-09-03T07:38:21Z", "author": {"login": "BrianPin"}, "path": "restli-tools/src/test/java/com/linkedin/restli/tools/data/TestExtensionSchemaValidationCmdLineApp.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.data;\n+\n+import java.io.File;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestExtensionSchemaValidationCmdLineApp {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dd0f2141815cda3f211ff3f69279a87ed6e476c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5NDA2NA==", "bodyText": "Fixed", "url": "https://github.com/linkedin/rest.li/pull/403#discussion_r483294064", "createdAt": "2020-09-03T22:51:18Z", "author": {"login": "nickibi"}, "path": "restli-tools/src/test/java/com/linkedin/restli/tools/data/TestExtensionSchemaValidationCmdLineApp.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.data;\n+\n+import java.io.File;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestExtensionSchemaValidationCmdLineApp {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3MDU5Mw=="}, "originalCommit": {"oid": "5dd0f2141815cda3f211ff3f69279a87ed6e476c"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODQ3MTE2OnYy", "diffSide": "RIGHT", "path": "restli-tools/src/test/pegasus/Bar.pdl", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzozOTo0NFrOHMaB7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjoyNTo1OVrOHM5crA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3MTQzNg==", "bodyText": "What is the purpose of the following test schema doing?\nIt is neither in invalid or valid directory.", "url": "https://github.com/linkedin/rest.li/pull/403#discussion_r482771436", "createdAt": "2020-09-03T07:39:44Z", "author": {"login": "BrianPin"}, "path": "restli-tools/src/test/pegasus/Bar.pdl", "diffHunk": "@@ -0,0 +1,3 @@\n+record Bar {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dd0f2141815cda3f211ff3f69279a87ed6e476c"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI4NjE4OA==", "bodyText": "This is base schema which is included in the extension schema. I will add comment doc.", "url": "https://github.com/linkedin/rest.li/pull/403#discussion_r483286188", "createdAt": "2020-09-03T22:25:59Z", "author": {"login": "nickibi"}, "path": "restli-tools/src/test/pegasus/Bar.pdl", "diffHunk": "@@ -0,0 +1,3 @@\n+record Bar {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3MTQzNg=="}, "originalCommit": {"oid": "5dd0f2141815cda3f211ff3f69279a87ed6e476c"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTIzMDI1OnYy", "diffSide": "RIGHT", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidationCmdLineApp.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOToyNzozNVrOHM0jhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjo1MDoxNVrOHM56VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNjAyMg==", "bodyText": "Rephrasing suggestions for clarity:\n\nI don't understand what this means. What is a validate schema? Is this supposed to say valid schema?\nMakes sense. (nit: replace hyphen - with colon :)\nI would use a definite article like can only include the base schema to imply that there is only one base schema for an extension.\nWhat does it mean to be annotation by a namespace? Does this mean to say all field annotation keys must be in the extension namespace? (nit: be careful of the distinction between \"should\" and \"must\")\nIt would be more accurate to say that the annotations \"must conform to {@link ExtensionSchemaAnnotation}\" (nit: be careful of the distinction between \"should\" and \"must\")\nMakes sense.\nSimilar comment as in bullet 4.\nClarify which resourceKey annotation. Corresponding to what? (nit: remove the hyphen -)\n\nAlso, in the text at the top, nit: to validate extension schema -> to validate extension schemas", "url": "https://github.com/linkedin/rest.li/pull/403#discussion_r483206022", "createdAt": "2020-09-03T19:27:35Z", "author": {"login": "evanw555"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidationCmdLineApp.java", "diffHunk": "@@ -53,9 +58,13 @@\n /**\n  * This class is used to validate extension schema, the validation covers following parts:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dd0f2141815cda3f211ff3f69279a87ed6e476c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5Mzc4MA==", "bodyText": "Fixed", "url": "https://github.com/linkedin/rest.li/pull/403#discussion_r483293780", "createdAt": "2020-09-03T22:50:15Z", "author": {"login": "nickibi"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidationCmdLineApp.java", "diffHunk": "@@ -53,9 +58,13 @@\n /**\n  * This class is used to validate extension schema, the validation covers following parts:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNjAyMg=="}, "originalCommit": {"oid": "5dd0f2141815cda3f211ff3f69279a87ed6e476c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzEzMDcyOnYy", "diffSide": "RIGHT", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidationCmdLineApp.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOToxNDozMVrOHNGKgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxODowOTo0N1rOHNXdyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5NDUzMA==", "bodyText": "move this outside the loop", "url": "https://github.com/linkedin/rest.li/pull/403#discussion_r483494530", "createdAt": "2020-09-04T09:14:31Z", "author": {"login": "karthikbalasub"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidationCmdLineApp.java", "diffHunk": "@@ -112,44 +124,58 @@ public static void main(String[] args) throws Exception\n       _logger.error(\"Invalid arguments: \" + e.getMessage());\n       System.exit(1);\n     }\n+    catch (InvalidExtensionSchemaException e)\n+    {\n+      _logger.error(\"Invalid extension schema: \" + e.getMessage());\n+      System.exit(1);\n+    }\n   }\n \n-  private static void parseAndValidateExtensionSchemas(String resolverPath, File inputDir) throws IOException\n-  {\n-    // Parse each extension schema and validate it\n-    Iterator<File> iterator = FileUtils.iterateFiles(inputDir, new String[]{PDL}, true);\n-    while(iterator.hasNext())\n-    {\n-      File inputFile = iterator.next();\n-      DataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(resolverPath);\n-      PdlSchemaParser parser = new PdlSchemaParser(resolver);\n-      parser.parse(new FileInputStream(inputFile));\n-      if (parser.hasError())\n-      {\n-        _logger.error(parser.errorMessage());\n-        System.exit(1);\n-      }\n+ static void parseAndValidateExtensionSchemas(String resolverPath, File inputDir)\n+     throws IOException, InvalidExtensionSchemaException\n+ {\n+   // Parse each extension schema and validate it\n+   Iterator<File> iterator = FileUtils.iterateFiles(inputDir, new String[]{PDL}, true);\n+   while (iterator.hasNext())\n+   {\n+     File inputFile = iterator.next();\n+     DataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(resolverPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "850bcf5dd7b621c2586c83fab4eca3189e872f95"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc3Nzk5NQ==", "bodyText": "Fixed", "url": "https://github.com/linkedin/rest.li/pull/403#discussion_r483777995", "createdAt": "2020-09-04T18:09:47Z", "author": {"login": "nickibi"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidationCmdLineApp.java", "diffHunk": "@@ -112,44 +124,58 @@ public static void main(String[] args) throws Exception\n       _logger.error(\"Invalid arguments: \" + e.getMessage());\n       System.exit(1);\n     }\n+    catch (InvalidExtensionSchemaException e)\n+    {\n+      _logger.error(\"Invalid extension schema: \" + e.getMessage());\n+      System.exit(1);\n+    }\n   }\n \n-  private static void parseAndValidateExtensionSchemas(String resolverPath, File inputDir) throws IOException\n-  {\n-    // Parse each extension schema and validate it\n-    Iterator<File> iterator = FileUtils.iterateFiles(inputDir, new String[]{PDL}, true);\n-    while(iterator.hasNext())\n-    {\n-      File inputFile = iterator.next();\n-      DataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(resolverPath);\n-      PdlSchemaParser parser = new PdlSchemaParser(resolver);\n-      parser.parse(new FileInputStream(inputFile));\n-      if (parser.hasError())\n-      {\n-        _logger.error(parser.errorMessage());\n-        System.exit(1);\n-      }\n+ static void parseAndValidateExtensionSchemas(String resolverPath, File inputDir)\n+     throws IOException, InvalidExtensionSchemaException\n+ {\n+   // Parse each extension schema and validate it\n+   Iterator<File> iterator = FileUtils.iterateFiles(inputDir, new String[]{PDL}, true);\n+   while (iterator.hasNext())\n+   {\n+     File inputFile = iterator.next();\n+     DataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(resolverPath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5NDUzMA=="}, "originalCommit": {"oid": "850bcf5dd7b621c2586c83fab4eca3189e872f95"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzE0MDM4OnYy", "diffSide": "RIGHT", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidationCmdLineApp.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOToxNzoxNFrOHNGQYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxODoxMDowMVrOHNXeKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5NjAzMg==", "bodyText": "This error message might be misleading for Arrays a it would say the Array schema is missing annotation, whereas the correct message is for the array item's type.\nI think you can inline the logic in checkExtensionSchemaFieldSchemaType here, and then just use the modified fieldSchema to call isAnnotatedWithResourceKey\nYou can delete arrayAndItemIsAnnotatedWithResourceKey\nyou should also consider in-lining isAnnotatedWithResourceKey logic. It is odd that at some places you are throwing exception and some methods return boolean.", "url": "https://github.com/linkedin/rest.li/pull/403#discussion_r483496032", "createdAt": "2020-09-04T09:17:14Z", "author": {"login": "karthikbalasub"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidationCmdLineApp.java", "diffHunk": "@@ -179,48 +205,102 @@ private static void checkExtensionSchemaFields(List<RecordDataSchema.Field> exte\n       {\n         if (!(dataElement instanceof DataMap))\n         {\n-          _logger.error(\"Extension schema annotation is not a datamap!\");\n-          System.exit(1);\n+          throw new InvalidExtensionSchemaException(\"Extension schema annotation is not a datamap!\");\n         }\n         DataSchema extensionSchemaAnnotationSchema = new ExtensionSchemaAnnotation().schema();\n         ValidationResult result = ValidateDataAgainstSchema.validate(dataElement, extensionSchemaAnnotationSchema, validationOptions);\n         if (!result.isValid())\n         {\n-          _logger.error(\"Extension schema annotation is not valid: \" + result.getMessages());\n-          System.exit(1);\n+          throw new InvalidExtensionSchemaException(\"Extension schema annotation is not valid: \" + result.getMessages());\n         }\n       }\n+      catch (InvalidExtensionSchemaException e)\n+      {\n+        throw e;\n+      }\n       catch (Exception e)\n       {\n         _logger.error(\"Error while checking extension schema field annotation: \" + e.getMessage());\n         System.exit(1);\n       }\n+      checkExtensionSchemaFieldSchema(field.getType(), properties);\n     }\n   }\n \n-  private static void checkExtensionSchemaFieldSchema(DataSchema fieldSchema)\n+  private static void checkExtensionSchemaFieldSchema(DataSchema fieldSchema, Map<String, Object> extensionAnnotations)\n+      throws InvalidExtensionSchemaException\n   {\n-    if (!isAnnotatedWithResourceKey(fieldSchema) && !arrayAndItemIsAnnotatedWithResourceKey(fieldSchema))\n+    checkExtensionSchemaFieldSchemaType(fieldSchema);\n+    if (!isAnnotatedWithResourceKey(fieldSchema, extensionAnnotations) && !arrayAndItemIsAnnotatedWithResourceKey(fieldSchema, extensionAnnotations))\n     {\n-        _logger.error(\"Field schema: [{}] is not annotated with 'resourceKey'\", fieldSchema.toString());\n-        System.exit(1);\n+       throw new InvalidExtensionSchemaException(\"Field schema: \" + fieldSchema.toString() + \" is not annotated with 'resourceKey'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "850bcf5dd7b621c2586c83fab4eca3189e872f95"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc3ODA4OA==", "bodyText": "Updated the code based on the suggestion.", "url": "https://github.com/linkedin/rest.li/pull/403#discussion_r483778088", "createdAt": "2020-09-04T18:10:01Z", "author": {"login": "nickibi"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidationCmdLineApp.java", "diffHunk": "@@ -179,48 +205,102 @@ private static void checkExtensionSchemaFields(List<RecordDataSchema.Field> exte\n       {\n         if (!(dataElement instanceof DataMap))\n         {\n-          _logger.error(\"Extension schema annotation is not a datamap!\");\n-          System.exit(1);\n+          throw new InvalidExtensionSchemaException(\"Extension schema annotation is not a datamap!\");\n         }\n         DataSchema extensionSchemaAnnotationSchema = new ExtensionSchemaAnnotation().schema();\n         ValidationResult result = ValidateDataAgainstSchema.validate(dataElement, extensionSchemaAnnotationSchema, validationOptions);\n         if (!result.isValid())\n         {\n-          _logger.error(\"Extension schema annotation is not valid: \" + result.getMessages());\n-          System.exit(1);\n+          throw new InvalidExtensionSchemaException(\"Extension schema annotation is not valid: \" + result.getMessages());\n         }\n       }\n+      catch (InvalidExtensionSchemaException e)\n+      {\n+        throw e;\n+      }\n       catch (Exception e)\n       {\n         _logger.error(\"Error while checking extension schema field annotation: \" + e.getMessage());\n         System.exit(1);\n       }\n+      checkExtensionSchemaFieldSchema(field.getType(), properties);\n     }\n   }\n \n-  private static void checkExtensionSchemaFieldSchema(DataSchema fieldSchema)\n+  private static void checkExtensionSchemaFieldSchema(DataSchema fieldSchema, Map<String, Object> extensionAnnotations)\n+      throws InvalidExtensionSchemaException\n   {\n-    if (!isAnnotatedWithResourceKey(fieldSchema) && !arrayAndItemIsAnnotatedWithResourceKey(fieldSchema))\n+    checkExtensionSchemaFieldSchemaType(fieldSchema);\n+    if (!isAnnotatedWithResourceKey(fieldSchema, extensionAnnotations) && !arrayAndItemIsAnnotatedWithResourceKey(fieldSchema, extensionAnnotations))\n     {\n-        _logger.error(\"Field schema: [{}] is not annotated with 'resourceKey'\", fieldSchema.toString());\n-        System.exit(1);\n+       throw new InvalidExtensionSchemaException(\"Field schema: \" + fieldSchema.toString() + \" is not annotated with 'resourceKey'\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5NjAzMg=="}, "originalCommit": {"oid": "850bcf5dd7b621c2586c83fab4eca3189e872f95"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTA4MTgzOnYy", "diffSide": "RIGHT", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidationCmdLineApp.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxOTowMTo0MFrOHNYwug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMTo1ODoxN1rOHNchtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc5OTIyNg==", "bodyText": "remove this method?", "url": "https://github.com/linkedin/rest.li/pull/403#discussion_r483799226", "createdAt": "2020-09-04T19:01:40Z", "author": {"login": "karthikbalasub"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidationCmdLineApp.java", "diffHunk": "@@ -179,48 +205,91 @@ private static void checkExtensionSchemaFields(List<RecordDataSchema.Field> exte\n       {\n         if (!(dataElement instanceof DataMap))\n         {\n-          _logger.error(\"Extension schema annotation is not a datamap!\");\n-          System.exit(1);\n+          throw new InvalidExtensionSchemaException(\"Extension schema annotation is not a datamap!\");\n         }\n         DataSchema extensionSchemaAnnotationSchema = new ExtensionSchemaAnnotation().schema();\n         ValidationResult result = ValidateDataAgainstSchema.validate(dataElement, extensionSchemaAnnotationSchema, validationOptions);\n         if (!result.isValid())\n         {\n-          _logger.error(\"Extension schema annotation is not valid: \" + result.getMessages());\n-          System.exit(1);\n+          throw new InvalidExtensionSchemaException(\"Extension schema annotation is not valid: \" + result.getMessages());\n         }\n       }\n+      catch (InvalidExtensionSchemaException e)\n+      {\n+        throw e;\n+      }\n       catch (Exception e)\n       {\n         _logger.error(\"Error while checking extension schema field annotation: \" + e.getMessage());\n         System.exit(1);\n       }\n+      checkExtensionSchemaFieldSchema(field.getType(), properties);\n     }\n   }\n \n-  private static void checkExtensionSchemaFieldSchema(DataSchema fieldSchema)\n+  private static void checkExtensionSchemaFieldSchema(DataSchema fieldSchema, Map<String, Object> extensionAnnotations)\n+      throws InvalidExtensionSchemaException\n   {\n-    if (!isAnnotatedWithResourceKey(fieldSchema) && !arrayAndItemIsAnnotatedWithResourceKey(fieldSchema))\n+\n+    checkExtensionSchemaFieldSchemaType(fieldSchema, extensionAnnotations);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9b6784da8238161abf398bec0e0aa8e50da0cf9"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2MDkxOA==", "bodyText": "removed", "url": "https://github.com/linkedin/rest.li/pull/403#discussion_r483860918", "createdAt": "2020-09-04T21:58:17Z", "author": {"login": "nickibi"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/ExtensionSchemaValidationCmdLineApp.java", "diffHunk": "@@ -179,48 +205,91 @@ private static void checkExtensionSchemaFields(List<RecordDataSchema.Field> exte\n       {\n         if (!(dataElement instanceof DataMap))\n         {\n-          _logger.error(\"Extension schema annotation is not a datamap!\");\n-          System.exit(1);\n+          throw new InvalidExtensionSchemaException(\"Extension schema annotation is not a datamap!\");\n         }\n         DataSchema extensionSchemaAnnotationSchema = new ExtensionSchemaAnnotation().schema();\n         ValidationResult result = ValidateDataAgainstSchema.validate(dataElement, extensionSchemaAnnotationSchema, validationOptions);\n         if (!result.isValid())\n         {\n-          _logger.error(\"Extension schema annotation is not valid: \" + result.getMessages());\n-          System.exit(1);\n+          throw new InvalidExtensionSchemaException(\"Extension schema annotation is not valid: \" + result.getMessages());\n         }\n       }\n+      catch (InvalidExtensionSchemaException e)\n+      {\n+        throw e;\n+      }\n       catch (Exception e)\n       {\n         _logger.error(\"Error while checking extension schema field annotation: \" + e.getMessage());\n         System.exit(1);\n       }\n+      checkExtensionSchemaFieldSchema(field.getType(), properties);\n     }\n   }\n \n-  private static void checkExtensionSchemaFieldSchema(DataSchema fieldSchema)\n+  private static void checkExtensionSchemaFieldSchema(DataSchema fieldSchema, Map<String, Object> extensionAnnotations)\n+      throws InvalidExtensionSchemaException\n   {\n-    if (!isAnnotatedWithResourceKey(fieldSchema) && !arrayAndItemIsAnnotatedWithResourceKey(fieldSchema))\n+\n+    checkExtensionSchemaFieldSchemaType(fieldSchema, extensionAnnotations);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc5OTIyNg=="}, "originalCommit": {"oid": "e9b6784da8238161abf398bec0e0aa8e50da0cf9"}, "originalPosition": 208}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 331, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}