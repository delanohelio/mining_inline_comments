{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNzk3NTAw", "number": 447, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNDo1ODozOFrOEtxrnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMzo1MzowMFrOEuSVnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDM1MzU5OnYy", "diffSide": "RIGHT", "path": "data-avro/src/main/java/com/linkedin/data/avro/PegasusUnionToAvroRecordConvertCallback.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNDo1ODozOFrOHhwx0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNToxNTo1MFrOHhxD2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE2NDI0Mw==", "bodyText": "Can you please update the javadoc for this new param?", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r505164243", "createdAt": "2020-10-15T04:58:38Z", "author": {"login": "nickibi"}, "path": "data-avro/src/main/java/com/linkedin/data/avro/PegasusUnionToAvroRecordConvertCallback.java", "diffHunk": "@@ -180,7 +187,7 @@ private DataSchema modifyFieldSchema(RecordDataSchema recordSchema, RecordDataSc\n    * @param modifiedDefaultValue The override default value to use for the specified field\n    */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5395a5428b79b6e22f22ff8624eef3a239a66d0b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE2ODg1Nw==", "bodyText": "Can you please add some description about this bug fix?\nThis change is overriding the union field property to the propagated property if the union field type is typeref. This is the expected behavior? Could you mind share some context about it?\n\nStill in initial review. Confirming with customer and once confirmed, I will add more description.\nBut for what you mentioned:\n\nThis change is overriding the union field property to the propagated property if the union field type is typeref.\n\nThis is the desired behavior, but before this fix, it won't work with unionWithAlias type. This fix is to address issue", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r505168857", "createdAt": "2020-10-15T05:15:50Z", "author": {"login": "junchuanwang"}, "path": "data-avro/src/main/java/com/linkedin/data/avro/PegasusUnionToAvroRecordConvertCallback.java", "diffHunk": "@@ -180,7 +187,7 @@ private DataSchema modifyFieldSchema(RecordDataSchema recordSchema, RecordDataSc\n    * @param modifiedDefaultValue The override default value to use for the specified field\n    */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE2NDI0Mw=="}, "originalCommit": {"oid": "5395a5428b79b6e22f22ff8624eef3a239a66d0b"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDM1NTcyOnYy", "diffSide": "RIGHT", "path": "data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNDo1OTo0MFrOHhwzFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNToxNzozNFrOHhxF6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE2NDU2Nw==", "bodyText": "nit: extra line after previous method.", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r505164567", "createdAt": "2020-10-15T04:59:40Z", "author": {"login": "nickibi"}, "path": "data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java", "diffHunk": "@@ -69,6 +69,217 @@ public void testTranslateDefaultBackwardsCompatibility()\n \n     assertSame(DataToAvroSchemaTranslationOptions.DEFAULT_OPTIONAL_DEFAULT_MODE, OptionalDefaultMode.TRANSLATE_DEFAULT);\n   }\n+  @DataProvider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5395a5428b79b6e22f22ff8624eef3a239a66d0b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE2OTM4NA==", "bodyText": "Will do", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r505169384", "createdAt": "2020-10-15T05:17:34Z", "author": {"login": "junchuanwang"}, "path": "data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java", "diffHunk": "@@ -69,6 +69,217 @@ public void testTranslateDefaultBackwardsCompatibility()\n \n     assertSame(DataToAvroSchemaTranslationOptions.DEFAULT_OPTIONAL_DEFAULT_MODE, OptionalDefaultMode.TRANSLATE_DEFAULT);\n   }\n+  @DataProvider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE2NDU2Nw=="}, "originalCommit": {"oid": "5395a5428b79b6e22f22ff8624eef3a239a66d0b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDM2MzQ0OnYy", "diffSide": "RIGHT", "path": "data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNTowNDozMVrOHhw3yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNzozMDo1N1rOHkZgQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE2NTc2OQ==", "bodyText": "Can you please update the test method name to camelcase to follow the method naming style?\nSame as data provider name.", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r505165769", "createdAt": "2020-10-15T05:04:31Z", "author": {"login": "nickibi"}, "path": "data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java", "diffHunk": "@@ -322,6 +533,20 @@ public void testToAvroSchema_testTypeRefAnnotationPropagation(String schemaBefor\n    assertEquals(fieldsPropertiesMap, avroSchemaAsDataMap);\n  }\n \n+  @Test(dataProvider = \"toAvroSchemaData_testTypeRefAnnotationPropagation\")\n+  public void testToAvroSchema_testTypeRefAnnotationPropagation(String schemaBeforeTranslation,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5395a5428b79b6e22f22ff8624eef3a239a66d0b"}, "originalPosition": 238}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE2OTM4OQ==", "bodyText": "Will do", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r505169389", "createdAt": "2020-10-15T05:17:36Z", "author": {"login": "junchuanwang"}, "path": "data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java", "diffHunk": "@@ -322,6 +533,20 @@ public void testToAvroSchema_testTypeRefAnnotationPropagation(String schemaBefor\n    assertEquals(fieldsPropertiesMap, avroSchemaAsDataMap);\n  }\n \n+  @Test(dataProvider = \"toAvroSchemaData_testTypeRefAnnotationPropagation\")\n+  public void testToAvroSchema_testTypeRefAnnotationPropagation(String schemaBeforeTranslation,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE2NTc2OQ=="}, "originalCommit": {"oid": "5395a5428b79b6e22f22ff8624eef3a239a66d0b"}, "originalPosition": 238}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY4Mjk0Nw==", "bodyText": "It still has '_'", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r505682947", "createdAt": "2020-10-15T16:34:24Z", "author": {"login": "nickibi"}, "path": "data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java", "diffHunk": "@@ -322,6 +533,20 @@ public void testToAvroSchema_testTypeRefAnnotationPropagation(String schemaBefor\n    assertEquals(fieldsPropertiesMap, avroSchemaAsDataMap);\n  }\n \n+  @Test(dataProvider = \"toAvroSchemaData_testTypeRefAnnotationPropagation\")\n+  public void testToAvroSchema_testTypeRefAnnotationPropagation(String schemaBeforeTranslation,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE2NTc2OQ=="}, "originalCommit": {"oid": "5395a5428b79b6e22f22ff8624eef3a239a66d0b"}, "originalPosition": 238}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyODY0Mg==", "bodyText": "corrected", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r507928642", "createdAt": "2020-10-19T17:30:57Z", "author": {"login": "junchuanwang"}, "path": "data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java", "diffHunk": "@@ -322,6 +533,20 @@ public void testToAvroSchema_testTypeRefAnnotationPropagation(String schemaBefor\n    assertEquals(fieldsPropertiesMap, avroSchemaAsDataMap);\n  }\n \n+  @Test(dataProvider = \"toAvroSchemaData_testTypeRefAnnotationPropagation\")\n+  public void testToAvroSchema_testTypeRefAnnotationPropagation(String schemaBeforeTranslation,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE2NTc2OQ=="}, "originalCommit": {"oid": "5395a5428b79b6e22f22ff8624eef3a239a66d0b"}, "originalPosition": 238}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDM3NjYyOnYy", "diffSide": "RIGHT", "path": "data-avro/src/main/java/com/linkedin/data/avro/PegasusUnionToAvroRecordConvertCallback.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNToxMTo0OFrOHhw_cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNToxMTo0OFrOHhw_cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE2NzczMA==", "bodyText": "Please add comment to explain this specific use case.", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r505167730", "createdAt": "2020-10-15T05:11:48Z", "author": {"login": "nickibi"}, "path": "data-avro/src/main/java/com/linkedin/data/avro/PegasusUnionToAvroRecordConvertCallback.java", "diffHunk": "@@ -62,6 +63,12 @@ public void callback(List<String> path, DataSchema schema)\n     {\n       DataSchema fieldSchema = field.getType().getDereferencedDataSchema();\n \n+      Map<String, Object>  propagatedProperties = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5395a5428b79b6e22f22ff8624eef3a239a66d0b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTU1MjA1OnYy", "diffSide": "RIGHT", "path": "data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODo1NToyNlrOHh9O4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNzoyNDowM1rOHkZOrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM2ODI4OA==", "bodyText": "Suggest to put these test data in a file, and leave the path/file name here for the test function, and then read the file during test, this way, it is easy to see the test data clear and if we want to change it is also easy to change", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r505368288", "createdAt": "2020-10-15T08:55:26Z", "author": {"login": "BrianPin"}, "path": "data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java", "diffHunk": "@@ -70,8 +70,220 @@ public void testTranslateDefaultBackwardsCompatibility()\n     assertSame(DataToAvroSchemaTranslationOptions.DEFAULT_OPTIONAL_DEFAULT_MODE, OptionalDefaultMode.TRANSLATE_DEFAULT);\n   }\n \n+  @DataProvider\n+  public Object[][] toAvroSchemaDataTestTypeRefAnnotationPropagationUnionWithAlias()\n+  {\n+    return new Object[][]\n+        {\n+            {\n+                \"record test {\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "309f679eb8adab01078acf233c3ec81e2d22ba45"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM3MTYyOQ==", "bodyText": "I believe new tests in Pegasus are already written using the conversion you mentioned\nTBH in order to achieve that in this particular file, maybe it is same as we discussed today: SchemaTranslator need to be rewritten and gradually migrated all the functionality.", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r505371629", "createdAt": "2020-10-15T08:58:31Z", "author": {"login": "junchuanwang"}, "path": "data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java", "diffHunk": "@@ -70,8 +70,220 @@ public void testTranslateDefaultBackwardsCompatibility()\n     assertSame(DataToAvroSchemaTranslationOptions.DEFAULT_OPTIONAL_DEFAULT_MODE, OptionalDefaultMode.TRANSLATE_DEFAULT);\n   }\n \n+  @DataProvider\n+  public Object[][] toAvroSchemaDataTestTypeRefAnnotationPropagationUnionWithAlias()\n+  {\n+    return new Object[][]\n+        {\n+            {\n+                \"record test {\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM2ODI4OA=="}, "originalCommit": {"oid": "309f679eb8adab01078acf233c3ec81e2d22ba45"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcxMzQ4NA==", "bodyText": "I think what Brian suggested was using pdl file(path) as input. You can use TestUtil#dataSchemaFromPdlInputStream(getClass().getResourceAsStream()) to get the DataSchema. It will be better than writing pdl string in the test class.\nHowever, for your test case, you still need avroschema as expected result. You may still end up writing avro schema string.", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r505713484", "createdAt": "2020-10-15T17:23:28Z", "author": {"login": "nickibi"}, "path": "data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java", "diffHunk": "@@ -70,8 +70,220 @@ public void testTranslateDefaultBackwardsCompatibility()\n     assertSame(DataToAvroSchemaTranslationOptions.DEFAULT_OPTIONAL_DEFAULT_MODE, OptionalDefaultMode.TRANSLATE_DEFAULT);\n   }\n \n+  @DataProvider\n+  public Object[][] toAvroSchemaDataTestTypeRefAnnotationPropagationUnionWithAlias()\n+  {\n+    return new Object[][]\n+        {\n+            {\n+                \"record test {\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM2ODI4OA=="}, "originalCommit": {"oid": "309f679eb8adab01078acf233c3ec81e2d22ba45"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyNDE0MQ==", "bodyText": "I understood what Brian meant, but that is really impractical since that file included a lot of (small) tests", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r507924141", "createdAt": "2020-10-19T17:24:03Z", "author": {"login": "junchuanwang"}, "path": "data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java", "diffHunk": "@@ -70,8 +70,220 @@ public void testTranslateDefaultBackwardsCompatibility()\n     assertSame(DataToAvroSchemaTranslationOptions.DEFAULT_OPTIONAL_DEFAULT_MODE, OptionalDefaultMode.TRANSLATE_DEFAULT);\n   }\n \n+  @DataProvider\n+  public Object[][] toAvroSchemaDataTestTypeRefAnnotationPropagationUnionWithAlias()\n+  {\n+    return new Object[][]\n+        {\n+            {\n+                \"record test {\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM2ODI4OA=="}, "originalCommit": {"oid": "309f679eb8adab01078acf233c3ec81e2d22ba45"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjIzMDkyOnYy", "diffSide": "RIGHT", "path": "data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMTo0NjozMVrOHiD1lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMTo0NjozMVrOHiD1lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ3NjUwMQ==", "bodyText": "nit: would be good to use test annotation instead of compliance here.", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r505476501", "createdAt": "2020-10-15T11:46:31Z", "author": {"login": "aman1309"}, "path": "data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java", "diffHunk": "@@ -69,6 +69,217 @@ public void testTranslateDefaultBackwardsCompatibility()\n \n     assertSame(DataToAvroSchemaTranslationOptions.DEFAULT_OPTIONAL_DEFAULT_MODE, OptionalDefaultMode.TRANSLATE_DEFAULT);\n   }\n+  @DataProvider\n+  public Object[][] toAvroSchemaData_testTypeRefAnnotationPropagationUnionWithAlias()\n+  {\n+    return new Object[][]\n+        {\n+            {\n+                \"record test {\" +\n+                    \"  unionTyperef:\" +\n+                    \"  @compliance = {\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5395a5428b79b6e22f22ff8624eef3a239a66d0b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODAyMDQzOnYy", "diffSide": "RIGHT", "path": "data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODo0MTo0MFrOHiVRqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODo0MTo0MFrOHiVRqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc2MjIxNw==", "bodyText": "Name consistency?  (toAvroSchemaDataTestTypeRefAnnotationPropagationUnionWithAlias)", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r505762217", "createdAt": "2020-10-15T18:41:40Z", "author": {"login": "BrianPin"}, "path": "data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java", "diffHunk": "@@ -308,11 +520,11 @@ public void testTranslateDefaultBackwardsCompatibility()\n \n  }\n \n- @Test(dataProvider = \"toAvroSchemaData_testTypeRefAnnotationPropagation\")\n- public void testToAvroSchema_testTypeRefAnnotationPropagation(String schemaBeforeTranslation,\n+ @Test(dataProvider = \"toAvroSchemaDataTestTypeRefAnnotationPropagationUnionWithAlias\")\n+ public void testToAvroSchema_testTypeRefAnnotationPropagationUnionWithAlias(String schemaBeforeTranslation,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "309f679eb8adab01078acf233c3ec81e2d22ba45"}, "originalPosition": 229}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTcwMzk5OnYy", "diffSide": "RIGHT", "path": "data-avro/src/main/java/com/linkedin/data/avro/PegasusUnionToAvroRecordConvertCallback.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMzo1MzowMFrOHil4sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMDoyNjo0N1rOHkgYvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAzNDM1Mg==", "bodyText": "I wonder if you can just call getMergedTyperefProperties\nlike\nMap<String, Object>  propagatedProperties = fieldSchema.getMergedTyperefProperties();\nBecause looking into the getMergedTyperefProperties function it will do the judge for you if it is a TypeRef", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r506034352", "createdAt": "2020-10-16T03:53:00Z", "author": {"login": "BrianPin"}, "path": "data-avro/src/main/java/com/linkedin/data/avro/PegasusUnionToAvroRecordConvertCallback.java", "diffHunk": "@@ -62,6 +63,14 @@ public void callback(List<String> path, DataSchema schema)\n     {\n       DataSchema fieldSchema = field.getType().getDereferencedDataSchema();\n \n+      Map<String, Object>  propagatedProperties = fieldSchema.getProperties();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "309f679eb8adab01078acf233c3ec81e2d22ba45"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyNjU3Nw==", "bodyText": "Hi Brian,\nI think you misunderstood. The branch with judge \"(getRef().getType() == Type.TYPEREF)\" is for a recursive call.\nthis getMergedTyperefProperties is only available in TyperefDataSchema", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r507926577", "createdAt": "2020-10-19T17:28:01Z", "author": {"login": "junchuanwang"}, "path": "data-avro/src/main/java/com/linkedin/data/avro/PegasusUnionToAvroRecordConvertCallback.java", "diffHunk": "@@ -62,6 +63,14 @@ public void callback(List<String> path, DataSchema schema)\n     {\n       DataSchema fieldSchema = field.getType().getDereferencedDataSchema();\n \n+      Map<String, Object>  propagatedProperties = fieldSchema.getProperties();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAzNDM1Mg=="}, "originalCommit": {"oid": "309f679eb8adab01078acf233c3ec81e2d22ba45"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA0MTQwNA==", "bodyText": "Thanks, You are right, I didnt fint it a typeref specific method", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r508041404", "createdAt": "2020-10-19T20:26:47Z", "author": {"login": "BrianPin"}, "path": "data-avro/src/main/java/com/linkedin/data/avro/PegasusUnionToAvroRecordConvertCallback.java", "diffHunk": "@@ -62,6 +63,14 @@ public void callback(List<String> path, DataSchema schema)\n     {\n       DataSchema fieldSchema = field.getType().getDereferencedDataSchema();\n \n+      Map<String, Object>  propagatedProperties = fieldSchema.getProperties();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAzNDM1Mg=="}, "originalCommit": {"oid": "309f679eb8adab01078acf233c3ec81e2d22ba45"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 402, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}