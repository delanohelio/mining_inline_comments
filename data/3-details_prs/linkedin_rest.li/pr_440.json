{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4OTQzODM3", "number": 440, "title": "Adding dark response validation metrics", "bodyText": "@davidhoa Please review changes for dark response validation metrics", "createdAt": "2020-10-07T02:53:58Z", "url": "https://github.com/linkedin/rest.li/pull/440", "merged": true, "mergeCommit": {"oid": "201779cf05dcd4d3458055de37bcf98ef2300434"}, "closed": true, "closedAt": "2020-10-08T15:20:13Z", "author": {"login": "srikrish-19"}, "timelineItems": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc6GX_8AH2gAyNDk4OTQzODM3OjFlZjQxMmYzYzExNDAwYzM1MjlkNzQ0YTI4OWVhZjQ1MGEyZGE1MTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQWIsjAFqTUwNDM0ODUwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1ef412f3c11400c3529d744a289eaf450a2da519", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/1ef412f3c11400c3529d744a289eaf450a2da519", "committedDate": "2020-07-30T21:19:20Z", "message": "[darkcluster] Adding identical traffic multiplier strategy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee09c898fb75b9cfb3e7e2a0e061b69fc222465c", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/ee09c898fb75b9cfb3e7e2a0e061b69fc222465c", "committedDate": "2020-07-31T01:32:25Z", "message": "[darkcluster] Adding identical traffic multiplier strategy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fe84dba85315eebaa989fd306766499e86911d1", "author": {"user": {"login": "junchuanwang", "name": "Junchuan Wang"}}, "url": "https://github.com/linkedin/rest.li/commit/0fe84dba85315eebaa989fd306766499e86911d1", "committedDate": "2020-08-04T17:21:10Z", "message": "Add gradle property to skip generateRestModel task (#362)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9916eab00528bf26af5e84c660b59c69eca91c97", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/9916eab00528bf26af5e84c660b59c69eca91c97", "committedDate": "2020-08-04T17:23:08Z", "message": "Implement support for always projecting fields by name. (#358)\n\n* Release 29.4.7"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f3559a3f61d657a5e0c43e9b16d92f8729a1816", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/3f3559a3f61d657a5e0c43e9b16d92f8729a1816", "committedDate": "2020-08-04T17:24:19Z", "message": "[darkcluster] Adding identical traffic multiplier strategy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "090f1a9d810a3830c080454a3e0679aafa9618a6", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/090f1a9d810a3830c080454a3e0679aafa9618a6", "committedDate": "2020-08-04T17:24:20Z", "message": "[darkcluster] Adding identical traffic multiplier strategy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "901639b8d7689081f4b846fad4cca3b1169b49aa", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/901639b8d7689081f4b846fad4cca3b1169b49aa", "committedDate": "2020-08-04T17:30:13Z", "message": "Merge remote-tracking branch 'upstream/master' into master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac220fac4a770d80a82262d068694eb9de03ea0e", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/ac220fac4a770d80a82262d068694eb9de03ea0e", "committedDate": "2020-08-04T17:38:42Z", "message": "Merge remote-tracking branch 'upstream/master' into master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40b11c3f232affd887d9a0d569d0b8c7f776703b", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/40b11c3f232affd887d9a0d569d0b8c7f776703b", "committedDate": "2020-08-04T17:44:04Z", "message": "Merge branch 'master' of github.com:srikrish-19/rest.li into master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e48e44c9f91bad387d4015710168692110fd25b", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/4e48e44c9f91bad387d4015710168692110fd25b", "committedDate": "2020-08-04T18:17:29Z", "message": "Merge branch 'master' of github.com:srikrish-19/rest.li into master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cc3957d0d6d8100cdb4c57d9a3a4c5ea8fe8e79", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/9cc3957d0d6d8100cdb4c57d9a3a4c5ea8fe8e79", "committedDate": "2020-08-04T18:17:39Z", "message": "darkcluster - identical traffic multiplier: Adding the formula for avg # of dark requests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "478fa28e9a7acdc45c314e26fd751d614aad0eab", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/478fa28e9a7acdc45c314e26fd751d614aad0eab", "committedDate": "2020-08-04T18:18:37Z", "message": "Merge branch 'master' of github.com:srikrish-19/rest.li into master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d60568b5a6d391cdf1fcec170de90951e8eaf263", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/d60568b5a6d391cdf1fcec170de90951e8eaf263", "committedDate": "2020-08-04T21:30:20Z", "message": "updating changelog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96a843e233e6479da2b7d9ac3d5ee628f7027b9a", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/96a843e233e6479da2b7d9ac3d5ee628f7027b9a", "committedDate": "2020-08-07T18:41:09Z", "message": "Merge remote-tracking branch 'upstream/master' into master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23ab8d1e639966f926fc42ec138c872a4590ba44", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/23ab8d1e639966f926fc42ec138c872a4590ba44", "committedDate": "2020-08-20T17:59:59Z", "message": "Merge remote-tracking branch 'upstream/master' into master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe25d7edd334e783f377a260353c9fd8884dc05c", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/fe25d7edd334e783f377a260353c9fd8884dc05c", "committedDate": "2020-08-20T19:20:01Z", "message": "Adding ability to let users determine if a request should be dispatched to dark clusters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e8a0fb518c32a56354ff100cf9e01345ceb64ae", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/7e8a0fb518c32a56354ff100cf9e01345ceb64ae", "committedDate": "2020-08-20T19:29:36Z", "message": "adding some documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d9d91cc81cfba7ade08afa8d42ad2992abde6ca", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/3d9d91cc81cfba7ade08afa8d42ad2992abde6ca", "committedDate": "2020-08-20T19:34:29Z", "message": "Updating changelog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b862a5d635bf16266893973d68cdfa4fb8308960", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/b862a5d635bf16266893973d68cdfa4fb8308960", "committedDate": "2020-08-20T19:36:32Z", "message": "moving interface to api package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2979ef6238f5884a2054c272984b79687aba790", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/e2979ef6238f5884a2054c272984b79687aba790", "committedDate": "2020-08-20T19:53:10Z", "message": "Fixing dhoa's comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4957ee5bd9d84c12557f6f4dffa42c9541efca3e", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/4957ee5bd9d84c12557f6f4dffa42c9541efca3e", "committedDate": "2020-08-20T20:01:31Z", "message": "Fixing changelog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db040d13f9d440fe62f179ad95ce9268a665e3da", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/db040d13f9d440fe62f179ad95ce9268a665e3da", "committedDate": "2020-10-06T01:41:57Z", "message": "Merge remote-tracking branch 'upstream/master' into master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b854d54cd1ee42f5014bd313ca2291eac0fd0ef2", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/b854d54cd1ee42f5014bd313ca2291eac0fd0ef2", "committedDate": "2020-10-07T02:47:05Z", "message": "Adding dark cluster response validation metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25bf26a6767c49ac72f997bf7b939e2b94659015", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/25bf26a6767c49ac72f997bf7b939e2b94659015", "committedDate": "2020-10-07T02:48:35Z", "message": "Merge remote-tracking branch 'upstream/master' into master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfab0a776f576e8ca77bd000b555667f1f762583", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/dfab0a776f576e8ca77bd000b555667f1f762583", "committedDate": "2020-10-07T02:51:06Z", "message": "Update changelog for dark cluster response validation metrics"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzNDk3NDQ4", "url": "https://github.com/linkedin/rest.li/pull/440#pullrequestreview-503497448", "createdAt": "2020-10-07T03:18:46Z", "commit": {"oid": "dfab0a776f576e8ca77bd000b555667f1f762583"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMzoxODo0NlrOHdhLuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMzoyNjozNFrOHdhSuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxNDQyNw==", "bodyText": "The documentation in rest.li should be generic, because this is open source. So, for instance, instead of \"It will be a combination of hostname and instanceId\" say something like \"For example, it can be a combination of the hostname and an instance identifier\".", "url": "https://github.com/linkedin/rest.li/pull/440#discussion_r500714427", "createdAt": "2020-10-07T03:18:46Z", "author": {"login": "davidhoa"}, "path": "darkcluster/src/main/java/com/linkedin/darkcluster/api/ResponseValidationMetricsHeader.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.linkedin.darkcluster.api;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+\n+/**\n+ * This represents the response validation metrics sent to dark clusters in the form of a request header\n+ * This header stores two fields:\n+ * 1) source: uniquely identifying the instance of the application running on a dispatcher. It will be a combination of hostname and instanceId (i000, i001...)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfab0a776f576e8ca77bd000b555667f1f762583"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxNTU3Nw==", "bodyText": "move this to the api package and directory.", "url": "https://github.com/linkedin/rest.li/pull/440#discussion_r500715577", "createdAt": "2020-10-07T03:23:54Z", "author": {"login": "davidhoa"}, "path": "darkcluster/src/main/java/com/linkedin/darkcluster/impl/DarkClusterConstants.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package com.linkedin.darkcluster.impl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfab0a776f576e8ca77bd000b555667f1f762583"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxNjIxOQ==", "bodyText": "can you try to add an argument to the rewriteRequest to add the header(s)? Otherwise we are producing intermediate garbage by creating the request and then throwing it away after copying it to create another request.", "url": "https://github.com/linkedin/rest.li/pull/440#discussion_r500716219", "createdAt": "2020-10-07T03:26:34Z", "author": {"login": "davidhoa"}, "path": "darkcluster/src/main/java/com/linkedin/darkcluster/impl/DarkClusterManagerImpl.java", "diffHunk": "@@ -102,9 +128,10 @@ public boolean handleDarkRequest(RestRequest originalRequest, RequestContext ori\n         for (String darkClusterName : configMap.keySet())\n         {\n           RestRequest newD2Request = rewriteRequest(reqCopy, darkClusterName);\n+          RestRequest d2RequestWithHeaders = addDarkRequestHeaders(darkClusterName, newD2Request);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfab0a776f576e8ca77bd000b555667f1f762583"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3943d1b60fc4a2c655863a81c4d5eb06ba83effc", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/3943d1b60fc4a2c655863a81c4d5eb06ba83effc", "committedDate": "2020-10-07T15:55:42Z", "message": "Fixing @dhoa's comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MTE1NDM5", "url": "https://github.com/linkedin/rest.li/pull/440#pullrequestreview-504115439", "createdAt": "2020-10-07T17:35:58Z", "commit": {"oid": "3943d1b60fc4a2c655863a81c4d5eb06ba83effc"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzozNTo1OFrOHd-Tog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzo0MjoyOVrOHd-jDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE5MTU4Ng==", "bodyText": "this is good, but lets also add a sentence saying why this is a useful feature to have. Something like:\n\"This allows response comparison metrics about a dark cluster to be displayed (via a monitoring/graphing system) with all other system metrics in a dark cluster host. These response comparison metrics are not specific to this dark cluster host, but that should be sufficient for most cases, and further granularity can be achieved by having separate dark clusters.", "url": "https://github.com/linkedin/rest.li/pull/440#discussion_r501191586", "createdAt": "2020-10-07T17:35:58Z", "author": {"login": "davidhoa"}, "path": "darkcluster/src/main/java/com/linkedin/darkcluster/api/DarkClusterResponseValidationMetricsCollector.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package com.linkedin.darkcluster.api;\n+\n+import java.util.Map;\n+\n+/**\n+ * Collector of incoming response validation metrics from dispatchers.\n+ * This is meant to be called on the dark cluster hosts where the request headers containing response validation metrics are read.\n+ * A dark cluster host may receive metrics from multiple dispatchers and this interface defines method for collecting these\n+ * incoming metrics.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3943d1b60fc4a2c655863a81c4d5eb06ba83effc"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE5MzU0Mg==", "bodyText": "check for null in the constructor. If null,  have a no-op/default implementation, so you don't need to check for null later. or, if appropriate, add the Nonnull annotations.", "url": "https://github.com/linkedin/rest.li/pull/440#discussion_r501193542", "createdAt": "2020-10-07T17:39:14Z", "author": {"login": "davidhoa"}, "path": "darkcluster/src/main/java/com/linkedin/darkcluster/filter/DarkClusterResponseValidationMetricsReaderFilter.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.linkedin.darkcluster.filter;\n+\n+import com.linkedin.darkcluster.api.DarkClusterResponseValidationMetricsCollector;\n+import com.linkedin.darkcluster.api.ResponseValidationMetricsHeader;\n+import com.linkedin.darkcluster.api.DarkClusterConstants;\n+import com.linkedin.r2.filter.NextFilter;\n+import com.linkedin.r2.filter.message.rest.RestFilter;\n+import com.linkedin.r2.message.RequestContext;\n+import com.linkedin.r2.message.rest.RestRequest;\n+import com.linkedin.r2.message.rest.RestResponse;\n+import java.util.Map;\n+import java.util.concurrent.ExecutorService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A filter that is to be enabled only in a dark cluster that is meant to handle response validation metrics\n+ * sent from source\n+ */\n+public class DarkClusterResponseValidationMetricsReaderFilter implements RestFilter {\n+  private final DarkClusterResponseValidationMetricsCollector _metricsCollector;\n+  private final ExecutorService _executorService;\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(DarkClusterResponseValidationMetricsReaderFilter.class);\n+\n+  public DarkClusterResponseValidationMetricsReaderFilter(\n+      DarkClusterResponseValidationMetricsCollector metricsCollector,\n+      ExecutorService executorService) {\n+    _metricsCollector = metricsCollector;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3943d1b60fc4a2c655863a81c4d5eb06ba83effc"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE5NDU0MA==", "bodyText": "same here, maybe add Nonnull annotation?", "url": "https://github.com/linkedin/rest.li/pull/440#discussion_r501194540", "createdAt": "2020-10-07T17:40:50Z", "author": {"login": "davidhoa"}, "path": "darkcluster/src/main/java/com/linkedin/darkcluster/impl/DarkResponseMetricsHeaderGenerator.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.linkedin.darkcluster.impl;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.linkedin.darkcluster.api.DarkClusterConstants;\n+import com.linkedin.darkcluster.api.DarkRequestHeaderGenerator;\n+import com.linkedin.darkcluster.api.DispatcherResponseValidationMetricsHolder;\n+import com.linkedin.darkcluster.api.ResponseValidationMetricsHeader;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Impl of {@link DarkRequestHeaderGenerator} for generating headers for dark cluster response validation metrics.\n+ * The header value consists of the serialized form of the validation metrics which the dark cluster can consume.\n+ */\n+public class DarkResponseMetricsHeaderGenerator implements DarkRequestHeaderGenerator {\n+  private final DispatcherResponseValidationMetricsHolder _metricsHolder;\n+  private final Supplier<String> _sourceSupplier;\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(DarkRequestHeaderGenerator.class);\n+\n+  /**\n+   * @param metricsHolder  impl of {@link DispatcherResponseValidationMetricsHolder} to return the metrics aggregated so far\n+   *                       in the dispatcher\n+   * @param sourceSupplier a supplier of source identifier that can uniquely identify a dispatcher instance sending out\n+   *                       validation metrics\n+   */\n+  public DarkResponseMetricsHeaderGenerator(DispatcherResponseValidationMetricsHolder metricsHolder,\n+      Supplier<String> sourceSupplier) {\n+    _metricsHolder = metricsHolder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3943d1b60fc4a2c655863a81c4d5eb06ba83effc"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE5NDkzMA==", "bodyText": "nonnull on clock.", "url": "https://github.com/linkedin/rest.li/pull/440#discussion_r501194930", "createdAt": "2020-10-07T17:41:30Z", "author": {"login": "davidhoa"}, "path": "darkcluster/src/main/java/com/linkedin/darkcluster/impl/DarkResponseValidationMetricsCollectorImpl.java", "diffHunk": "@@ -0,0 +1,228 @@\n+package com.linkedin.darkcluster.impl;\n+\n+import com.linkedin.darkcluster.api.DarkClusterResponseValidationMetricsCollector;\n+import com.linkedin.darkcluster.api.ResponseValidationMetricsHeader;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import com.linkedin.util.clock.Clock;\n+\n+\n+/**\n+ * This is executed on dark cluster where it collects metrics from multiple sources by maintaining an in-memory map of sources to metrics.\n+ * It has two responsibilities:\n+ * 1. Populate the in-memory map with the metrics from incoming request headers. This will be an async call where multiple\n+ * threads may try to aggregate metrics as and when there are incoming dark requests. This ensures that we do not double\n+ * count metrics from the same source.\n+ * 2. A single threaded getter to retrieve the aggregated metrics from across all sources. This is single threaded to ensure\n+ * that the consumer of metrics is always called synchronously so that the consumer receives metrics that are increasing\n+ * monotonically. This is all the more important if the consumer emits ingraph metrics (most consumers use this to emit to ingraphs)\n+ * as counters where counters are meant to be increasing monotonically.\n+ */\n+public class DarkResponseValidationMetricsCollectorImpl implements DarkClusterResponseValidationMetricsCollector {\n+  /**\n+   * this is a a map of source -> metrics where metrics is a map of metric name -> metric value\n+   * Example: host1 -> ((success_count -> 10, failure_count -> 1), 12345L)\n+   */\n+  private final Map<String, Long> _defaultBucketMetrics = new ConcurrentHashMap<>();\n+  private final Map<String, Lock> _sourceLockMap = new ConcurrentHashMap<>();\n+  private final Map<String, MetricsInternal> _internalMetricsMap = new ConcurrentHashMap<>();\n+  private final Object _defaultBucketLock = new Object();\n+  private final Clock _clock;\n+  private final long _collectionFrequencyInMillis;\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(DarkResponseValidationMetricsCollectorImpl.class);\n+\n+  public DarkResponseValidationMetricsCollectorImpl(Clock clock, long collectionFrequencyInMillis) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3943d1b60fc4a2c655863a81c4d5eb06ba83effc"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE5NTUzNQ==", "bodyText": "ditto.", "url": "https://github.com/linkedin/rest.li/pull/440#discussion_r501195535", "createdAt": "2020-10-07T17:42:29Z", "author": {"login": "davidhoa"}, "path": "darkcluster/src/main/java/com/linkedin/darkcluster/impl/DispatcherResponseValidationMetricsHolderImpl.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.linkedin.darkcluster.impl;\n+\n+import com.linkedin.darkcluster.api.DispatcherResponseValidationMetricsHolder;\n+import com.linkedin.darkcluster.api.ResponseValidationMetricsHeader;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.LongAdder;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import com.linkedin.util.clock.Clock;\n+\n+\n+/**\n+ * Impl of {@link DispatcherResponseValidationMetricsHolder} which uses in-memory map to store response validation metrics for each\n+ * dark cluster. These metrics are essentially counters which are added up as and when response validation is done.\n+ * This is an object that lives through the course of application's life cycle, incrementing validation metrics over time.\n+ */\n+public class DispatcherResponseValidationMetricsHolderImpl implements DispatcherResponseValidationMetricsHolder {\n+  /**\n+   * this is a a map of dark cluster -> metrics where metrics is a map of metric name -> metric value\n+   * Example: dark_cluster1 -> (success_count -> 10, failure_count -> 1)\n+   */\n+  private final ConcurrentMap<String, ConcurrentMap<String, LongAdder>> _darkClusterToMetricsMap = new ConcurrentHashMap<>();\n+  private final Clock _clock;\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(DispatcherResponseValidationMetricsHolderImpl.class);\n+\n+  public DispatcherResponseValidationMetricsHolderImpl(Clock clock) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3943d1b60fc4a2c655863a81c4d5eb06ba83effc"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ceaa1852358b1e8ee73bc6f3a0b5ee632d0a203", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/6ceaa1852358b1e8ee73bc6f3a0b5ee632d0a203", "committedDate": "2020-10-07T21:54:21Z", "message": "Adding nonnull annotations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MzI4ODM1", "url": "https://github.com/linkedin/rest.li/pull/440#pullrequestreview-504328835", "createdAt": "2020-10-07T23:10:08Z", "commit": {"oid": "6ceaa1852358b1e8ee73bc6f3a0b5ee632d0a203"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5770d5de25623b45fc047f00b73db99e81491265", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/5770d5de25623b45fc047f00b73db99e81491265", "committedDate": "2020-10-07T23:14:02Z", "message": "Adding nonnull annotations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13f5a943ec62a0780e640875af4e35c2662cd329", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/13f5a943ec62a0780e640875af4e35c2662cd329", "committedDate": "2020-10-07T23:14:46Z", "message": "Changing docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ce0872642c44c4633e0ae354d297e128b12b01f", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/6ce0872642c44c4633e0ae354d297e128b12b01f", "committedDate": "2020-10-07T23:15:14Z", "message": "Merge branch 'master' of github.com:srikrish-19/rest.li into master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MzMxMjYy", "url": "https://github.com/linkedin/rest.li/pull/440#pullrequestreview-504331262", "createdAt": "2020-10-07T23:16:51Z", "commit": {"oid": "6ce0872642c44c4633e0ae354d297e128b12b01f"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MzM5ODMy", "url": "https://github.com/linkedin/rest.li/pull/440#pullrequestreview-504339832", "createdAt": "2020-10-07T23:40:39Z", "commit": {"oid": "6ce0872642c44c4633e0ae354d297e128b12b01f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55a637e5971a9634a8095e2d1246315090f6702a", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/55a637e5971a9634a8095e2d1246315090f6702a", "committedDate": "2020-10-08T00:06:27Z", "message": "fixing UTs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MzQ4NTAw", "url": "https://github.com/linkedin/rest.li/pull/440#pullrequestreview-504348500", "createdAt": "2020-10-08T00:07:26Z", "commit": {"oid": "55a637e5971a9634a8095e2d1246315090f6702a"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4698, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}