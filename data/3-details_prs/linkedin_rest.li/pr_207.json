{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MDQ4OTI5", "number": 207, "title": "Enforce schema properties order in JsonBuilder so Pegasus schema and Avro schema properties would have deterministic order", "bodyText": "Currently when translating to Avro or Pegasus schema, nested properties wouldn't have deterministic and based on its implementation (DataMap type), the order is given from HashMap, which is indeterministic.\nThis change would affect [pegasus to avro] translation AND [avro to peagsus] translation when outputting string (only for properties encoding). It wouldn't affect memory representation.\nwc-test:\nhttps://crt.prod.linkedin.com/#/testing/executions/7037b41c-8501-4db9-9237-1f54c5964c68/execution", "createdAt": "2020-03-05T03:36:19Z", "url": "https://github.com/linkedin/rest.li/pull/207", "merged": true, "mergeCommit": {"oid": "877250465841d9e537703313f1f29a06229ed194"}, "closed": true, "closedAt": "2020-03-10T02:53:21Z", "author": {"login": "junchuanwang"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKilenAH2gAyMzg0MDQ4OTI5OjczMmJkNDNmZTU0Nzg3OTcxZDYzYzM4NzFlZDMwMmZiNzYyY2E4ZWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMI0figH2gAyMzg0MDQ4OTI5OmYyMmE1ZDE5ZGQyNjNiZTE5ZGY2ZDgwODRiM2Q5NTMyY2Q3YjgwMDM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "732bd43fe54787971d63c3871ed302fb762ca8eb", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/732bd43fe54787971d63c3871ed302fb762ca8eb", "committedDate": "2020-03-05T03:03:02Z", "message": "enforce schema properties order in JsonBuilder so Pegasus schema and\nAvro schema properties would have deterministic order"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MzExNzE5", "url": "https://github.com/linkedin/rest.li/pull/207#pullrequestreview-369311719", "createdAt": "2020-03-05T05:58:55Z", "commit": {"oid": "732bd43fe54787971d63c3871ed302fb762ca8eb"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNTo1ODo1NVrOFyHPsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNjowNTowOVrOFyHVaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA5MTgyNA==", "bodyText": "nit: import order", "url": "https://github.com/linkedin/rest.li/pull/207#discussion_r388091824", "createdAt": "2020-03-05T05:58:55Z", "author": {"login": "nickibi"}, "path": "data/src/main/java/com/linkedin/data/schema/JsonBuilder.java", "diffHunk": "@@ -23,12 +23,16 @@\n \n import java.io.IOException;\n import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n import java.util.List;\n import java.util.Map;\n \n import com.fasterxml.jackson.core.JsonFactory;\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.core.PrettyPrinter;\n+import java.util.stream.Collectors;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "732bd43fe54787971d63c3871ed302fb762ca8eb"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA5MTkwNw==", "bodyText": "nit: remove extra lines", "url": "https://github.com/linkedin/rest.li/pull/207#discussion_r388091907", "createdAt": "2020-03-05T05:59:18Z", "author": {"login": "nickibi"}, "path": "data/src/main/java/com/linkedin/data/codec/AbstractJacksonDataCodec.java", "diffHunk": "@@ -296,12 +296,20 @@ public void startMap(DataMap map) throws IOException\n       _generator.writeStartObject();\n     }\n \n+    @Override\n+    public Iterable<Map.Entry<String, Object>> orderMap(DataMap map)\n+    {\n+      return Data.orderMapEntries(map);\n+    }\n+\n     @Override\n     public void key(String key) throws IOException\n     {\n       _generator.writeFieldName(key);\n     }\n \n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "732bd43fe54787971d63c3871ed302fb762ca8eb"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA5MzI4OQ==", "bodyText": "I am curious about how this method is being called?", "url": "https://github.com/linkedin/rest.li/pull/207#discussion_r388093289", "createdAt": "2020-03-05T06:05:09Z", "author": {"login": "nickibi"}, "path": "data/src/main/java/com/linkedin/data/codec/AbstractJacksonDataCodec.java", "diffHunk": "@@ -296,12 +296,20 @@ public void startMap(DataMap map) throws IOException\n       _generator.writeStartObject();\n     }\n \n+    @Override\n+    public Iterable<Map.Entry<String, Object>> orderMap(DataMap map)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "732bd43fe54787971d63c3871ed302fb762ca8eb"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a73e39d4e805a22d3528ac35d92591e3cc181ed5", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/a73e39d4e805a22d3528ac35d92591e3cc181ed5", "committedDate": "2020-03-05T22:16:10Z", "message": "resolve ybi's comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNjAzMDc3", "url": "https://github.com/linkedin/rest.li/pull/207#pullrequestreview-370603077", "createdAt": "2020-03-06T20:22:28Z", "commit": {"oid": "a73e39d4e805a22d3528ac35d92591e3cc181ed5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDoyMjoyOFrOFzGU_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDoyNToyOFrOFzGZ7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyNTM3NA==", "bodyText": "nit: I think you mean to say x_customAnnotation?", "url": "https://github.com/linkedin/rest.li/pull/207#discussion_r389125374", "createdAt": "2020-03-06T20:22:28Z", "author": {"login": "evanw555"}, "path": "data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java", "diffHunk": "@@ -1660,6 +1660,46 @@ public void testToAvroSchema_testTypeRefAnnotationPropagation(String schemaBefor\n               null,\n               null,\n               null\n+          },\n+          {\n+              \" { \" +\n+              \"   \\\"type\\\" : \\\"record\\\", \" +\n+              \"   \\\"name\\\" : \\\"Foo\\\", \" +\n+              \"   \\\"fields\\\" : [ { \" +\n+              \"     \\\"name\\\" : \\\"field1\\\", \" +\n+              \"     \\\"type\\\" : \\\"int\\\", \" +\n+              \"     \\\"b_customerAnnotation\\\" : \\\"f1\\\", \" +\n+              \"     \\\"c_customerAnnotation\\\" : \\\"f1\\\", \" +\n+              \"     \\\"a_customerAnnotation\\\" : \\\"f1\\\" \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a73e39d4e805a22d3528ac35d92591e3cc181ed5"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyNjYzNw==", "bodyText": "The unit tests seems to imply this, however I'd like to confirm; this method is only for writing custom properties, right? Since this is a generic JsonBuilder, does it have any sense of what \"properties\" are? Or is this just for writing any generic subtree of the JSON object?", "url": "https://github.com/linkedin/rest.li/pull/207#discussion_r389126637", "createdAt": "2020-03-06T20:25:28Z", "author": {"login": "evanw555"}, "path": "data/src/main/java/com/linkedin/data/schema/JsonBuilder.java", "diffHunk": "@@ -282,7 +280,10 @@ public void writeProperties(Map<String, ?> value) throws IOException\n   {\n     if (value.isEmpty() == false)\n     {\n-      for (Map.Entry<String, ?> entry : value.entrySet())\n+      List<Map.Entry<String, ?>> orderedProperties =  value.entrySet().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a73e39d4e805a22d3528ac35d92591e3cc181ed5"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwOTA5Njg5", "url": "https://github.com/linkedin/rest.li/pull/207#pullrequestreview-370909689", "createdAt": "2020-03-09T04:13:07Z", "commit": {"oid": "a73e39d4e805a22d3528ac35d92591e3cc181ed5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNDoxMzowN1rOFzah4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNDoxMzowN1rOFzah4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ1NjM1NQ==", "bodyText": "This is not a good idea. The jackson codec is used for serializing data on the servers and making this change here will affect performance of services.", "url": "https://github.com/linkedin/rest.li/pull/207#discussion_r389456355", "createdAt": "2020-03-09T04:13:07Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/codec/AbstractJacksonDataCodec.java", "diffHunk": "@@ -296,6 +296,12 @@ public void startMap(DataMap map) throws IOException\n       _generator.writeStartObject();\n     }\n \n+    @Override\n+    public Iterable<Map.Entry<String, Object>> orderMap(DataMap map)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a73e39d4e805a22d3528ac35d92591e3cc181ed5"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe18d2616d1cfef8b80d1ea373153a44aec7f16c", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/fe18d2616d1cfef8b80d1ea373153a44aec7f16c", "committedDate": "2020-03-09T16:28:34Z", "message": "Address Karthik comments. Now the AbstractJacksonDataCodec.java change only applies when \"writing properties\""}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c27157aa9cf3d2afb021d5e1fda9944883aca8a", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/3c27157aa9cf3d2afb021d5e1fda9944883aca8a", "committedDate": "2020-03-09T16:38:51Z", "message": "rename some of parameters"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMzQ1OTgz", "url": "https://github.com/linkedin/rest.li/pull/207#pullrequestreview-371345983", "createdAt": "2020-03-09T16:41:08Z", "commit": {"oid": "3c27157aa9cf3d2afb021d5e1fda9944883aca8a"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjo0MTowOFrOFzwcHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzoxODoyM1rOFzx32Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgxNTMyNg==", "bodyText": "space before ?", "url": "https://github.com/linkedin/rest.li/pull/207#discussion_r389815326", "createdAt": "2020-03-09T16:41:08Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/codec/AbstractJacksonDataCodec.java", "diffHunk": "@@ -133,7 +133,18 @@ protected void writeObject(Object object, JsonGenerator generator) throws IOExce\n \n   protected Data.TraverseCallback createTraverseCallback(JsonGenerator generator)\n   {\n-    return new JacksonTraverseCallback(generator);\n+    return createTraverseCallback(generator, false);\n+  }\n+\n+  /**\n+   * Create {@link JacksonTraverseCallback} instance for Data object traverse\n+   * @param generator JsonGenerator\n+   * @param traverseMapBySortedKeyOrder indicate whether want the callBack to traverse the data map within data object using the sorted map key order\n+   * @return\n+   */\n+  protected Data.TraverseCallback createTraverseCallback(JsonGenerator generator, boolean traverseMapBySortedKeyOrder)\n+  {\n+    return traverseMapBySortedKeyOrder? new JacksonTraverseCallbackMapKeyOrdered(generator): new JacksonTraverseCallback(generator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c27157aa9cf3d2afb021d5e1fda9944883aca8a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgxNTk3NQ==", "bodyText": "mapKeyOrdered -> orderMapsByKey", "url": "https://github.com/linkedin/rest.li/pull/207#discussion_r389815975", "createdAt": "2020-03-09T16:42:11Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/codec/AbstractJacksonDataCodec.java", "diffHunk": "@@ -213,12 +224,35 @@ public DataList readList(InputStream in) throws IOException\n     return parse(_factory.createParser(in), mesg, locationMap);\n   }\n \n-  public void objectToJsonGenerator(Object object, JsonGenerator generator) throws IOException\n+  /**\n+   * Convert an object to Json format representation.\n+   * @param object the object that needs to be converted\n+   * @param generator the generator that could generate Json output based on the object\n+   * @param mapKeyOrdered if the object contains map element (which could be nested map), can set this flag to order the\n+   *                      map entries in the output according to sorted map key.\n+   * @throws IOException\n+   */\n+  public void objectToJsonGenerator(Object object, JsonGenerator generator, boolean mapKeyOrdered) throws IOException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c27157aa9cf3d2afb021d5e1fda9944883aca8a"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzMzM4MA==", "bodyText": "Do not change public APIs. Keep this one and add the second API", "url": "https://github.com/linkedin/rest.li/pull/207#discussion_r389833380", "createdAt": "2020-03-09T17:09:52Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/codec/AbstractJacksonDataCodec.java", "diffHunk": "@@ -213,12 +224,35 @@ public DataList readList(InputStream in) throws IOException\n     return parse(_factory.createParser(in), mesg, locationMap);\n   }\n \n-  public void objectToJsonGenerator(Object object, JsonGenerator generator) throws IOException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c27157aa9cf3d2afb021d5e1fda9944883aca8a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzNDQ2Mg==", "bodyText": "JacksonTraverseCallback -> Traverse.Callback\nAvoid implementation details in the java doc", "url": "https://github.com/linkedin/rest.li/pull/207#discussion_r389834462", "createdAt": "2020-03-09T17:11:37Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/codec/AbstractJacksonDataCodec.java", "diffHunk": "@@ -133,7 +133,18 @@ protected void writeObject(Object object, JsonGenerator generator) throws IOExce\n \n   protected Data.TraverseCallback createTraverseCallback(JsonGenerator generator)\n   {\n-    return new JacksonTraverseCallback(generator);\n+    return createTraverseCallback(generator, false);\n+  }\n+\n+  /**\n+   * Create {@link JacksonTraverseCallback} instance for Data object traverse", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c27157aa9cf3d2afb021d5e1fda9944883aca8a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzNzA0NQ==", "bodyText": "If true, then map elements in the object (can be the object itself or its nested elements) will be sorted by Key in the generated Json.", "url": "https://github.com/linkedin/rest.li/pull/207#discussion_r389837045", "createdAt": "2020-03-09T17:15:39Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/codec/AbstractJacksonDataCodec.java", "diffHunk": "@@ -213,12 +224,35 @@ public DataList readList(InputStream in) throws IOException\n     return parse(_factory.createParser(in), mesg, locationMap);\n   }\n \n-  public void objectToJsonGenerator(Object object, JsonGenerator generator) throws IOException\n+  /**\n+   * Convert an object to Json format representation.\n+   * @param object the object that needs to be converted\n+   * @param generator the generator that could generate Json output based on the object\n+   * @param mapKeyOrdered if the object contains map element (which could be nested map), can set this flag to order the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c27157aa9cf3d2afb021d5e1fda9944883aca8a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzODI4Mw==", "bodyText": "Why do you need this class? Can't you add a flag in JacksonTraverseCallback and a second constructor to set it?", "url": "https://github.com/linkedin/rest.li/pull/207#discussion_r389838283", "createdAt": "2020-03-09T17:17:32Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/codec/AbstractJacksonDataCodec.java", "diffHunk": "@@ -213,12 +224,35 @@ public DataList readList(InputStream in) throws IOException\n     return parse(_factory.createParser(in), mesg, locationMap);\n   }\n \n-  public void objectToJsonGenerator(Object object, JsonGenerator generator) throws IOException\n+  /**\n+   * Convert an object to Json format representation.\n+   * @param object the object that needs to be converted\n+   * @param generator the generator that could generate Json output based on the object\n+   * @param mapKeyOrdered if the object contains map element (which could be nested map), can set this flag to order the\n+   *                      map entries in the output according to sorted map key.\n+   * @throws IOException\n+   */\n+  public void objectToJsonGenerator(Object object, JsonGenerator generator, boolean mapKeyOrdered) throws IOException\n   {\n-    Data.TraverseCallback callback = createTraverseCallback(generator);\n+    Data.TraverseCallback callback = createTraverseCallback(generator, mapKeyOrdered);\n     Data.traverse(object, callback);\n   }\n \n+  public static class JacksonTraverseCallbackMapKeyOrdered extends JacksonTraverseCallback", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c27157aa9cf3d2afb021d5e1fda9944883aca8a"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzODgwOQ==", "bodyText": "document that this applies to object also.", "url": "https://github.com/linkedin/rest.li/pull/207#discussion_r389838809", "createdAt": "2020-03-09T17:18:23Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/schema/JsonBuilder.java", "diffHunk": "@@ -269,11 +267,24 @@ public void writeMapField(String fieldName, Map<String, ?> value, boolean requir\n    */\n   public void writeData(Object object) throws IOException\n   {\n-    _jacksonDataCodec.objectToJsonGenerator(object, _jsonGenerator);\n+    _jacksonDataCodec.objectToJsonGenerator(object, _jsonGenerator, false);\n   }\n \n+  /**\n+   * Write Data object. But if the Data Object contains DataMap, the result would output the map entries using sorted key order.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c27157aa9cf3d2afb021d5e1fda9944883aca8a"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "521e8eafeac0b2c69408c56dcb19cfa52c90025b", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/521e8eafeac0b2c69408c56dcb19cfa52c90025b", "committedDate": "2020-03-09T17:46:47Z", "message": "Address some of the Karthi's comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42e5902b04e33ad0837509cdcce15e67a0df1ba5", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/42e5902b04e33ad0837509cdcce15e67a0df1ba5", "committedDate": "2020-03-09T18:09:39Z", "message": "Delete JacksonTraverseCallbackMapKeyOrdered class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNDU4OTEz", "url": "https://github.com/linkedin/rest.li/pull/207#pullrequestreview-371458913", "createdAt": "2020-03-09T19:15:34Z", "commit": {"oid": "42e5902b04e33ad0837509cdcce15e67a0df1ba5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOToxNTozNFrOFz18nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOToxNTozNFrOFz18nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwNTU2Nw==", "bodyText": "You can revert this change now.", "url": "https://github.com/linkedin/rest.li/pull/207#discussion_r389905567", "createdAt": "2020-03-09T19:15:34Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/template/JacksonDataTemplateCodec.java", "diffHunk": "@@ -87,7 +87,7 @@ protected void dataTemplateToJsonGenerator(Object data,\n     }\n     else\n     {\n-      objectToJsonGenerator(data, generator);\n+      objectToJsonGenerator(data, generator, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42e5902b04e33ad0837509cdcce15e67a0df1ba5"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08bb10e52f387ee6ab68e2509aeba71b368f02b0", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/08bb10e52f387ee6ab68e2509aeba71b368f02b0", "committedDate": "2020-03-09T19:22:32Z", "message": "revert JacksonDataTemplateCodec.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNDQ0OTU0", "url": "https://github.com/linkedin/rest.li/pull/207#pullrequestreview-371444954", "createdAt": "2020-03-09T18:54:17Z", "commit": {"oid": "42e5902b04e33ad0837509cdcce15e67a0df1ba5"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODo1NDoxN1rOFz1Rqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOToyMjo0MlrOFz2KiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg5NDU3MQ==", "bodyText": "nit: space before true", "url": "https://github.com/linkedin/rest.li/pull/207#discussion_r389894571", "createdAt": "2020-03-09T18:54:17Z", "author": {"login": "nickibi"}, "path": "data/src/main/java/com/linkedin/data/schema/JsonBuilder.java", "diffHunk": "@@ -269,11 +267,25 @@ public void writeMapField(String fieldName, Map<String, ?> value, boolean requir\n    */\n   public void writeData(Object object) throws IOException\n   {\n-    _jacksonDataCodec.objectToJsonGenerator(object, _jsonGenerator);\n+    _jacksonDataCodec.objectToJsonGenerator(object, _jsonGenerator, false);\n   }\n \n+  /**\n+   * Write Data object. But if the Data Object contains DataMap or itself is a DataMap,\n+   * the result would output the map entries using sorted key order.\n+   *\n+   * @param object is the Data object to write.\n+   */\n+  public void writeDataWithMapEntriesSorted(Object object) throws IOException\n+  {\n+    _jacksonDataCodec.objectToJsonGenerator(object, _jsonGenerator,true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42e5902b04e33ad0837509cdcce15e67a0df1ba5"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwOTEyOQ==", "bodyText": "No need for this change.", "url": "https://github.com/linkedin/rest.li/pull/207#discussion_r389909129", "createdAt": "2020-03-09T19:22:42Z", "author": {"login": "nickibi"}, "path": "data/src/main/java/com/linkedin/data/template/JacksonDataTemplateCodec.java", "diffHunk": "@@ -87,7 +87,7 @@ protected void dataTemplateToJsonGenerator(Object data,\n     }\n     else\n     {\n-      objectToJsonGenerator(data, generator);\n+      objectToJsonGenerator(data, generator, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwNTU2Nw=="}, "originalCommit": {"oid": "42e5902b04e33ad0837509cdcce15e67a0df1ba5"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54e7242f2a75aa26e90f73fb7aa8942d7c7e1cae", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/54e7242f2a75aa26e90f73fb7aa8942d7c7e1cae", "committedDate": "2020-03-09T19:24:24Z", "message": "Address yingjie's comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a862f4f981188373cf9ca331e6cec7f5a1817ec", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/4a862f4f981188373cf9ca331e6cec7f5a1817ec", "committedDate": "2020-03-09T19:27:45Z", "message": "Rvert one line"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNDc3OTc5", "url": "https://github.com/linkedin/rest.li/pull/207#pullrequestreview-371477979", "createdAt": "2020-03-09T19:46:01Z", "commit": {"oid": "4a862f4f981188373cf9ca331e6cec7f5a1817ec"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNDg1MTcz", "url": "https://github.com/linkedin/rest.li/pull/207#pullrequestreview-371485173", "createdAt": "2020-03-09T19:57:02Z", "commit": {"oid": "4a862f4f981188373cf9ca331e6cec7f5a1817ec"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNjM4OTE2", "url": "https://github.com/linkedin/rest.li/pull/207#pullrequestreview-371638916", "createdAt": "2020-03-10T02:09:02Z", "commit": {"oid": "4a862f4f981188373cf9ca331e6cec7f5a1817ec"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f22a5d19dd263be19df6d8084b3d9532cd7b8003", "author": {"user": {"login": "junchuanwang", "name": "Junchuan Wang"}}, "url": "https://github.com/linkedin/rest.li/commit/f22a5d19dd263be19df6d8084b3d9532cd7b8003", "committedDate": "2020-03-10T02:09:45Z", "message": "Merge branch 'master' into avro_schema_property_orders"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4969, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}