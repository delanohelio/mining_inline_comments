{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNjk0MTU4", "number": 390, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjo1ODo0MlrOEaoFqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMTo1NzozNVrOEa8HuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzU1MjQzOnYy", "diffSide": "RIGHT", "path": "generator/src/main/java/com/linkedin/pegasus/generator/DataSchemaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjo1ODo0MlrOHELH3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOToxMDo0MVrOHEPfbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzODU4OA==", "bodyText": "nit: the brace should be in next line", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474138588", "createdAt": "2020-08-20T16:58:42Z", "author": {"login": "nickibi"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/DataSchemaParser.java", "diffHunk": "@@ -191,6 +209,19 @@ private static ParseResult combine(Collection<ParseResult> parseResults)\n       return _schemaAndLocations;\n     }\n \n+    public Map<DataSchema, DataSchemaLocation> getExtensionDataSchemaAndLocations()\n+    {\n+      return _schemaAndLocations.entrySet().stream().filter(entry -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIxMDE1Nw==", "bodyText": "ok", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474210157", "createdAt": "2020-08-20T19:10:41Z", "author": {"login": "BrianPin"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/DataSchemaParser.java", "diffHunk": "@@ -191,6 +209,19 @@ private static ParseResult combine(Collection<ParseResult> parseResults)\n       return _schemaAndLocations;\n     }\n \n+    public Map<DataSchema, DataSchemaLocation> getExtensionDataSchemaAndLocations()\n+    {\n+      return _schemaAndLocations.entrySet().stream().filter(entry -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzODU4OA=="}, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Mzc3MjExOnYy", "diffSide": "RIGHT", "path": "generator/src/main/java/com/linkedin/pegasus/generator/DataSchemaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODowMjoyMFrOHENQdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMToxMjoyMVrOHEYPSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3MzU1OA==", "bodyText": "Shall we use MultiFormatDataSchemaResolver type here", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474173558", "createdAt": "2020-08-20T18:02:20Z", "author": {"login": "nickibi"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/DataSchemaParser.java", "diffHunk": "@@ -47,31 +50,46 @@\n {\n   private final String _resolverPath;\n   private final Map<String, FileFormatDataSchemaParser> _parserByFileExtension;\n-  private final MultiFormatDataSchemaResolver _resolver;\n+  private final AbstractMultiFormatDataSchemaResolver _resolver;\n \n   /**\n    * @param resolverPath provides the search paths separated by the system file separator, or null for no search paths.\n    */\n-  public DataSchemaParser(String resolverPath) {\n-    this(resolverPath, MultiFormatDataSchemaResolver.BUILTIN_FORMAT_PARSER_FACTORIES);\n+  public DataSchemaParser(String resolverPath)\n+  {\n+    this(resolverPath, AbstractMultiFormatDataSchemaResolver.BUILTIN_FORMAT_PARSER_FACTORIES);\n   }\n \n   public DataSchemaParser(\n       String resolverPath,\n       List<DataSchemaParserFactory> parserFactoriesForFromats)\n   {\n+    _parserByFileExtension = new HashMap<>();\n     _resolverPath = resolverPath;\n-\n-    MultiFormatDataSchemaResolver resolver =\n+    AbstractMultiFormatDataSchemaResolver resolver =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM1MzQ4MA==", "bodyText": "yeah", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474353480", "createdAt": "2020-08-21T01:12:21Z", "author": {"login": "BrianPin"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/DataSchemaParser.java", "diffHunk": "@@ -47,31 +50,46 @@\n {\n   private final String _resolverPath;\n   private final Map<String, FileFormatDataSchemaParser> _parserByFileExtension;\n-  private final MultiFormatDataSchemaResolver _resolver;\n+  private final AbstractMultiFormatDataSchemaResolver _resolver;\n \n   /**\n    * @param resolverPath provides the search paths separated by the system file separator, or null for no search paths.\n    */\n-  public DataSchemaParser(String resolverPath) {\n-    this(resolverPath, MultiFormatDataSchemaResolver.BUILTIN_FORMAT_PARSER_FACTORIES);\n+  public DataSchemaParser(String resolverPath)\n+  {\n+    this(resolverPath, AbstractMultiFormatDataSchemaResolver.BUILTIN_FORMAT_PARSER_FACTORIES);\n   }\n \n   public DataSchemaParser(\n       String resolverPath,\n       List<DataSchemaParserFactory> parserFactoriesForFromats)\n   {\n+    _parserByFileExtension = new HashMap<>();\n     _resolverPath = resolverPath;\n-\n-    MultiFormatDataSchemaResolver resolver =\n+    AbstractMultiFormatDataSchemaResolver resolver =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3MzU1OA=="}, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Mzc4MzIyOnYy", "diffSide": "RIGHT", "path": "generator/src/main/java/com/linkedin/pegasus/generator/DataSchemaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODowNTozOVrOHENXVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMToxNjozM1rOHEYTzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3NTMxNg==", "bodyText": "First of all, it is \"extensions\". Second of all, can we make it as constant? or just use SchemaDirectoryName.EXTENSIONS.getName().", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474175316", "createdAt": "2020-08-20T18:05:39Z", "author": {"login": "nickibi"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/DataSchemaParser.java", "diffHunk": "@@ -191,6 +209,19 @@ private static ParseResult combine(Collection<ParseResult> parseResults)\n       return _schemaAndLocations;\n     }\n \n+    public Map<DataSchema, DataSchemaLocation> getExtensionDataSchemaAndLocations()\n+    {\n+      return _schemaAndLocations.entrySet().stream().filter(entry -> {\n+        DataSchemaLocation dataSchemaLocation = entry.getValue();\n+        if (dataSchemaLocation instanceof InJarFileDataSchemaLocation)\n+        {\n+          InJarFileDataSchemaLocation inJarFileDataSchemaLocation = (InJarFileDataSchemaLocation) dataSchemaLocation;\n+          return inJarFileDataSchemaLocation.getPathInJar().startsWith(\"extension\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM1NDYzOA==", "bodyText": "good suggestion", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474354638", "createdAt": "2020-08-21T01:16:33Z", "author": {"login": "BrianPin"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/DataSchemaParser.java", "diffHunk": "@@ -191,6 +209,19 @@ private static ParseResult combine(Collection<ParseResult> parseResults)\n       return _schemaAndLocations;\n     }\n \n+    public Map<DataSchema, DataSchemaLocation> getExtensionDataSchemaAndLocations()\n+    {\n+      return _schemaAndLocations.entrySet().stream().filter(entry -> {\n+        DataSchemaLocation dataSchemaLocation = entry.getValue();\n+        if (dataSchemaLocation instanceof InJarFileDataSchemaLocation)\n+        {\n+          InJarFileDataSchemaLocation inJarFileDataSchemaLocation = (InJarFileDataSchemaLocation) dataSchemaLocation;\n+          return inJarFileDataSchemaLocation.getPathInJar().startsWith(\"extension\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3NTMxNg=="}, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzgwNjI4OnYy", "diffSide": "RIGHT", "path": "generator/src/main/java/com/linkedin/pegasus/generator/FileFormatDataSchemaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODoxMjoyOVrOHENlrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMToyMTozMlrOHEYY1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3ODk5MA==", "bodyText": "nit: private methods should be after public methods, also it might be useful to add a java doc to explain the logic here.", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474178990", "createdAt": "2020-08-20T18:12:29Z", "author": {"login": "nickibi"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/FileFormatDataSchemaParser.java", "diffHunk": "@@ -60,6 +62,15 @@ public FileFormatDataSchemaParser(String resolverPath, DataSchemaResolver schema\n     _schemaParserFactory = schemaParserFactory;\n   }\n \n+  private boolean isExtensionEntry(JarEntry entry)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM1NTkyNw==", "bodyText": "moved", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474355927", "createdAt": "2020-08-21T01:21:32Z", "author": {"login": "BrianPin"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/FileFormatDataSchemaParser.java", "diffHunk": "@@ -60,6 +62,15 @@ public FileFormatDataSchemaParser(String resolverPath, DataSchemaResolver schema\n     _schemaParserFactory = schemaParserFactory;\n   }\n \n+  private boolean isExtensionEntry(JarEntry entry)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3ODk5MA=="}, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzgxMTEwOnYy", "diffSide": "RIGHT", "path": "generator/src/main/java/com/linkedin/pegasus/generator/DataSchemaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODoxMzo1N1rOHENolg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMToxNTo1MlrOHEYTAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3OTczNA==", "bodyText": "nit: move private method to the bottom.", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474179734", "createdAt": "2020-08-20T18:13:57Z", "author": {"login": "nickibi"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/DataSchemaParser.java", "diffHunk": "@@ -47,31 +50,46 @@\n {\n   private final String _resolverPath;\n   private final Map<String, FileFormatDataSchemaParser> _parserByFileExtension;\n-  private final MultiFormatDataSchemaResolver _resolver;\n+  private final AbstractMultiFormatDataSchemaResolver _resolver;\n \n   /**\n    * @param resolverPath provides the search paths separated by the system file separator, or null for no search paths.\n    */\n-  public DataSchemaParser(String resolverPath) {\n-    this(resolverPath, MultiFormatDataSchemaResolver.BUILTIN_FORMAT_PARSER_FACTORIES);\n+  public DataSchemaParser(String resolverPath)\n+  {\n+    this(resolverPath, AbstractMultiFormatDataSchemaResolver.BUILTIN_FORMAT_PARSER_FACTORIES);\n   }\n \n   public DataSchemaParser(\n       String resolverPath,\n       List<DataSchemaParserFactory> parserFactoriesForFromats)\n   {\n+    _parserByFileExtension = new HashMap<>();\n     _resolverPath = resolverPath;\n-\n-    MultiFormatDataSchemaResolver resolver =\n+    AbstractMultiFormatDataSchemaResolver resolver =\n       new MultiFormatDataSchemaResolver(resolverPath, parserFactoriesForFromats);\n+    this._resolver = resolver;\n+    init(resolver, resolverPath, parserFactoriesForFromats);\n+  }\n+\n+  public DataSchemaParser(String resolverPath, AbstractMultiFormatDataSchemaResolver resolver)\n+  {\n     _parserByFileExtension = new HashMap<>();\n+    _resolverPath = resolverPath;\n+    this._resolver = resolver;\n+    init(resolver, resolverPath, MultiFormatDataSchemaResolver.BUILTIN_FORMAT_PARSER_FACTORIES);\n+  }\n+\n+  private void init(AbstractMultiFormatDataSchemaResolver resolver,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM1NDQzMw==", "bodyText": "moved", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474354433", "createdAt": "2020-08-21T01:15:52Z", "author": {"login": "BrianPin"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/DataSchemaParser.java", "diffHunk": "@@ -47,31 +50,46 @@\n {\n   private final String _resolverPath;\n   private final Map<String, FileFormatDataSchemaParser> _parserByFileExtension;\n-  private final MultiFormatDataSchemaResolver _resolver;\n+  private final AbstractMultiFormatDataSchemaResolver _resolver;\n \n   /**\n    * @param resolverPath provides the search paths separated by the system file separator, or null for no search paths.\n    */\n-  public DataSchemaParser(String resolverPath) {\n-    this(resolverPath, MultiFormatDataSchemaResolver.BUILTIN_FORMAT_PARSER_FACTORIES);\n+  public DataSchemaParser(String resolverPath)\n+  {\n+    this(resolverPath, AbstractMultiFormatDataSchemaResolver.BUILTIN_FORMAT_PARSER_FACTORIES);\n   }\n \n   public DataSchemaParser(\n       String resolverPath,\n       List<DataSchemaParserFactory> parserFactoriesForFromats)\n   {\n+    _parserByFileExtension = new HashMap<>();\n     _resolverPath = resolverPath;\n-\n-    MultiFormatDataSchemaResolver resolver =\n+    AbstractMultiFormatDataSchemaResolver resolver =\n       new MultiFormatDataSchemaResolver(resolverPath, parserFactoriesForFromats);\n+    this._resolver = resolver;\n+    init(resolver, resolverPath, parserFactoriesForFromats);\n+  }\n+\n+  public DataSchemaParser(String resolverPath, AbstractMultiFormatDataSchemaResolver resolver)\n+  {\n     _parserByFileExtension = new HashMap<>();\n+    _resolverPath = resolverPath;\n+    this._resolver = resolver;\n+    init(resolver, resolverPath, MultiFormatDataSchemaResolver.BUILTIN_FORMAT_PARSER_FACTORIES);\n+  }\n+\n+  private void init(AbstractMultiFormatDataSchemaResolver resolver,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3OTczNA=="}, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzgxMjUwOnYy", "diffSide": "RIGHT", "path": "generator/src/main/java/com/linkedin/pegasus/generator/DataSchemaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODoxNDoyMlrOHENpkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMToxNTo0N1rOHEYS4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3OTk4Nw==", "bodyText": "Add java doc for this constructor.", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474179987", "createdAt": "2020-08-20T18:14:22Z", "author": {"login": "nickibi"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/DataSchemaParser.java", "diffHunk": "@@ -47,31 +50,46 @@\n {\n   private final String _resolverPath;\n   private final Map<String, FileFormatDataSchemaParser> _parserByFileExtension;\n-  private final MultiFormatDataSchemaResolver _resolver;\n+  private final AbstractMultiFormatDataSchemaResolver _resolver;\n \n   /**\n    * @param resolverPath provides the search paths separated by the system file separator, or null for no search paths.\n    */\n-  public DataSchemaParser(String resolverPath) {\n-    this(resolverPath, MultiFormatDataSchemaResolver.BUILTIN_FORMAT_PARSER_FACTORIES);\n+  public DataSchemaParser(String resolverPath)\n+  {\n+    this(resolverPath, AbstractMultiFormatDataSchemaResolver.BUILTIN_FORMAT_PARSER_FACTORIES);\n   }\n \n   public DataSchemaParser(\n       String resolverPath,\n       List<DataSchemaParserFactory> parserFactoriesForFromats)\n   {\n+    _parserByFileExtension = new HashMap<>();\n     _resolverPath = resolverPath;\n-\n-    MultiFormatDataSchemaResolver resolver =\n+    AbstractMultiFormatDataSchemaResolver resolver =\n       new MultiFormatDataSchemaResolver(resolverPath, parserFactoriesForFromats);\n+    this._resolver = resolver;\n+    init(resolver, resolverPath, parserFactoriesForFromats);\n+  }\n+\n+  public DataSchemaParser(String resolverPath, AbstractMultiFormatDataSchemaResolver resolver)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM1NDQwMg==", "bodyText": "added", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474354402", "createdAt": "2020-08-21T01:15:47Z", "author": {"login": "BrianPin"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/DataSchemaParser.java", "diffHunk": "@@ -47,31 +50,46 @@\n {\n   private final String _resolverPath;\n   private final Map<String, FileFormatDataSchemaParser> _parserByFileExtension;\n-  private final MultiFormatDataSchemaResolver _resolver;\n+  private final AbstractMultiFormatDataSchemaResolver _resolver;\n \n   /**\n    * @param resolverPath provides the search paths separated by the system file separator, or null for no search paths.\n    */\n-  public DataSchemaParser(String resolverPath) {\n-    this(resolverPath, MultiFormatDataSchemaResolver.BUILTIN_FORMAT_PARSER_FACTORIES);\n+  public DataSchemaParser(String resolverPath)\n+  {\n+    this(resolverPath, AbstractMultiFormatDataSchemaResolver.BUILTIN_FORMAT_PARSER_FACTORIES);\n   }\n \n   public DataSchemaParser(\n       String resolverPath,\n       List<DataSchemaParserFactory> parserFactoriesForFromats)\n   {\n+    _parserByFileExtension = new HashMap<>();\n     _resolverPath = resolverPath;\n-\n-    MultiFormatDataSchemaResolver resolver =\n+    AbstractMultiFormatDataSchemaResolver resolver =\n       new MultiFormatDataSchemaResolver(resolverPath, parserFactoriesForFromats);\n+    this._resolver = resolver;\n+    init(resolver, resolverPath, parserFactoriesForFromats);\n+  }\n+\n+  public DataSchemaParser(String resolverPath, AbstractMultiFormatDataSchemaResolver resolver)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3OTk4Nw=="}, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzgyNjk0OnYy", "diffSide": "RIGHT", "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestDataSchemaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODoxODozOFrOHENyTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOToxMTozMFrOHEPhAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE4MjIyMQ==", "bodyText": "Do you think we should also add another test case, a schema under a third path: like \"legacyPegasusSchema\". The schema under that directory will not be resolved.", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474182221", "createdAt": "2020-08-20T18:18:38Z", "author": {"login": "nickibi"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestDataSchemaParser.java", "diffHunk": "@@ -92,6 +102,57 @@ public void testParseFromJarFile(String pegasusFilename, String[] expectedSchema\n     parseResult.getSchemaAndLocations().values().forEach(loc -> assertEquals(loc.getSourceFile().getAbsolutePath(), jarFile));\n   }\n \n+  @DataProvider(name = \"entityRelationshipInputFiles\")\n+  private Object[][] createResolverWithExtensionDirs()\n+  {\n+    return new Object[][]\n+        {\n+            {\n+                new String[]{\n+                    \"extensions/Bar.pdl\",\n+                    \"extensions/FooExtension.pdl\",\n+                    \"pegasus/Foo.pdl\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIxMDU2MA==", "bodyText": "sure", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474210560", "createdAt": "2020-08-20T19:11:30Z", "author": {"login": "BrianPin"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestDataSchemaParser.java", "diffHunk": "@@ -92,6 +102,57 @@ public void testParseFromJarFile(String pegasusFilename, String[] expectedSchema\n     parseResult.getSchemaAndLocations().values().forEach(loc -> assertEquals(loc.getSourceFile().getAbsolutePath(), jarFile));\n   }\n \n+  @DataProvider(name = \"entityRelationshipInputFiles\")\n+  private Object[][] createResolverWithExtensionDirs()\n+  {\n+    return new Object[][]\n+        {\n+            {\n+                new String[]{\n+                    \"extensions/Bar.pdl\",\n+                    \"extensions/FooExtension.pdl\",\n+                    \"pegasus/Foo.pdl\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE4MjIyMQ=="}, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzgzNzQ1OnYy", "diffSide": "RIGHT", "path": "generator/src/test/resources/generator/entity-relationship/extensions/Bar.pdl", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODoyMTozOFrOHEN41w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODoyMTozOFrOHEN41w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE4Mzg5NQ==", "bodyText": "Extension schema will not have such use case. It always includes base schema from /pegasus", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474183895", "createdAt": "2020-08-20T18:21:38Z", "author": {"login": "nickibi"}, "path": "generator/src/test/resources/generator/entity-relationship/extensions/Bar.pdl", "diffHunk": "@@ -0,0 +1,3 @@\n+record Bar {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Mzg1NTg5OnYy", "diffSide": "RIGHT", "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestDataSchemaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODoyNjo1MlrOHEOEJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMzoyODowOVrOHEaWhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE4Njc5MQ==", "bodyText": "shall we make the file path as camelcase? Also update the test files path.", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474186791", "createdAt": "2020-08-20T18:26:52Z", "author": {"login": "nickibi"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestDataSchemaParser.java", "diffHunk": "@@ -92,6 +102,57 @@ public void testParseFromJarFile(String pegasusFilename, String[] expectedSchema\n     parseResult.getSchemaAndLocations().values().forEach(loc -> assertEquals(loc.getSourceFile().getAbsolutePath(), jarFile));\n   }\n \n+  @DataProvider(name = \"entityRelationshipInputFiles\")\n+  private Object[][] createResolverWithExtensionDirs()\n+  {\n+    return new Object[][]\n+        {\n+            {\n+                new String[]{\n+                    \"extensions/Bar.pdl\",\n+                    \"extensions/FooExtension.pdl\",\n+                    \"pegasus/Foo.pdl\"\n+                },\n+                new String[]{\n+                    \"FooExtension\",\n+                    \"Bar\"\n+                }\n+            },\n+        };\n+  }\n+\n+  @Test(dataProvider = \"entityRelationshipInputFiles\")\n+  public void testSchemaFilesInExtensionPath(String[] files, String[] expectedExtensions) throws Exception\n+  {\n+    String tempDirectoryPath = _tempDir.getAbsolutePath();\n+    String jarFile = tempDirectoryPath + FS + \"test.jar\";\n+    String schemaDir = pegasusDir + FS + \"entity-relationship\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM4ODEwMg==", "bodyText": "done", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474388102", "createdAt": "2020-08-21T03:28:09Z", "author": {"login": "BrianPin"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestDataSchemaParser.java", "diffHunk": "@@ -92,6 +102,57 @@ public void testParseFromJarFile(String pegasusFilename, String[] expectedSchema\n     parseResult.getSchemaAndLocations().values().forEach(loc -> assertEquals(loc.getSourceFile().getAbsolutePath(), jarFile));\n   }\n \n+  @DataProvider(name = \"entityRelationshipInputFiles\")\n+  private Object[][] createResolverWithExtensionDirs()\n+  {\n+    return new Object[][]\n+        {\n+            {\n+                new String[]{\n+                    \"extensions/Bar.pdl\",\n+                    \"extensions/FooExtension.pdl\",\n+                    \"pegasus/Foo.pdl\"\n+                },\n+                new String[]{\n+                    \"FooExtension\",\n+                    \"Bar\"\n+                }\n+            },\n+        };\n+  }\n+\n+  @Test(dataProvider = \"entityRelationshipInputFiles\")\n+  public void testSchemaFilesInExtensionPath(String[] files, String[] expectedExtensions) throws Exception\n+  {\n+    String tempDirectoryPath = _tempDir.getAbsolutePath();\n+    String jarFile = tempDirectoryPath + FS + \"test.jar\";\n+    String schemaDir = pegasusDir + FS + \"entity-relationship\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE4Njc5MQ=="}, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Mzg4MTU1OnYy", "diffSide": "RIGHT", "path": "CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODozNDowOVrOHEOT-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMToxMToyMlrOHEYOTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE5MDg0MA==", "bodyText": "You should also update gradle.properties to the same version before release", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474190840", "createdAt": "2020-08-20T18:34:09Z", "author": {"login": "nickibi"}, "path": "CHANGELOG.md", "diffHunk": "@@ -13,6 +13,9 @@ When updating the changelog, remember to be very clear about what behavior has c\n and what APIs have changed, if applicable.\n \n ## [Unreleased]\n+\n+## [29.5.5] - 2020-08-21", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM1MzIyOQ==", "bodyText": "good catch, so everytime we release, we modify the gradle.properties file?", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474353229", "createdAt": "2020-08-21T01:11:22Z", "author": {"login": "BrianPin"}, "path": "CHANGELOG.md", "diffHunk": "@@ -13,6 +13,9 @@ When updating the changelog, remember to be very clear about what behavior has c\n and what APIs have changed, if applicable.\n \n ## [Unreleased]\n+\n+## [29.5.5] - 2020-08-21", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE5MDg0MA=="}, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzkwNjg4OnYy", "diffSide": "RIGHT", "path": "generator/src/main/java/com/linkedin/pegasus/generator/FileFormatDataSchemaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODo0MToxMVrOHEOjaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMToyMjowMVrOHEYZYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE5NDc5Mw==", "bodyText": "use DataSchemaResolver::getSchemasDirectoryName == EXtensions", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474194793", "createdAt": "2020-08-20T18:41:11Z", "author": {"login": "aman1309"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/FileFormatDataSchemaParser.java", "diffHunk": "@@ -60,6 +62,15 @@ public FileFormatDataSchemaParser(String resolverPath, DataSchemaResolver schema\n     _schemaParserFactory = schemaParserFactory;\n   }\n \n+  private boolean isExtensionEntry(JarEntry entry)\n+  {\n+    if (_schemaResolver instanceof ExtensionsDataSchemaResolver)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM1NjA2NQ==", "bodyText": "ok", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474356065", "createdAt": "2020-08-21T01:22:01Z", "author": {"login": "BrianPin"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/FileFormatDataSchemaParser.java", "diffHunk": "@@ -60,6 +62,15 @@ public FileFormatDataSchemaParser(String resolverPath, DataSchemaResolver schema\n     _schemaParserFactory = schemaParserFactory;\n   }\n \n+  private boolean isExtensionEntry(JarEntry entry)\n+  {\n+    if (_schemaResolver instanceof ExtensionsDataSchemaResolver)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE5NDc5Mw=="}, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzkzMDA5OnYy", "diffSide": "RIGHT", "path": "CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODo0ODowNVrOHEOyGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODo0ODowNVrOHEOyGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE5ODU1Mg==", "bodyText": "I think the description is not accurate.\nAdd a constructor for DataSchemaParser, which is able to pass ExtensionsDataSchemaResolver to the DataSchemaParser to parse schemas from both extensions and pegasus directories.", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474198552", "createdAt": "2020-08-20T18:48:05Z", "author": {"login": "nickibi"}, "path": "CHANGELOG.md", "diffHunk": "@@ -13,6 +13,9 @@ When updating the changelog, remember to be very clear about what behavior has c\n and what APIs have changed, if applicable.\n \n ## [Unreleased]\n+\n+## [29.5.5] - 2020-08-21\n+- Add extension data schema resolvers to data schema parser to parse schema from both /extensions and /pegasus jar entry in the same jar file.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NjgxNDk3OnYy", "diffSide": "RIGHT", "path": "generator/src/main/java/com/linkedin/pegasus/generator/DataSchemaParser.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMTo1MDoxN1rOHEqOrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMzozNDoxMlrOHFAWFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0ODIzOA==", "bodyText": "What about FileDataSchemaLocation?", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474648238", "createdAt": "2020-08-21T11:50:17Z", "author": {"login": "karthikbalasub"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/DataSchemaParser.java", "diffHunk": "@@ -191,6 +218,20 @@ private static ParseResult combine(Collection<ParseResult> parseResults)\n       return _schemaAndLocations;\n     }\n \n+    public Map<DataSchema, DataSchemaLocation> getExtensionDataSchemaAndLocations()\n+    {\n+      return _schemaAndLocations.entrySet().stream().filter(entry ->\n+      {\n+        DataSchemaLocation dataSchemaLocation = entry.getValue();\n+        if (dataSchemaLocation instanceof InJarFileDataSchemaLocation)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cf77034c815e26fe79865275a9f7e2403a323e6"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg2ODczMQ==", "bodyText": "Schemas coming from the jar have entry start with extensions, schemas not coming from the jar do not have this feature to identify which schema is an extension.\nif the application for extension is applied to normal file system dir, then I will need to do some change to make it work, but from our design do we have that use case where extensions coming from normal folders?", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474868731", "createdAt": "2020-08-21T18:49:47Z", "author": {"login": "BrianPin"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/DataSchemaParser.java", "diffHunk": "@@ -191,6 +218,20 @@ private static ParseResult combine(Collection<ParseResult> parseResults)\n       return _schemaAndLocations;\n     }\n \n+    public Map<DataSchema, DataSchemaLocation> getExtensionDataSchemaAndLocations()\n+    {\n+      return _schemaAndLocations.entrySet().stream().filter(entry ->\n+      {\n+        DataSchemaLocation dataSchemaLocation = entry.getValue();\n+        if (dataSchemaLocation instanceof InJarFileDataSchemaLocation)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0ODIzOA=="}, "originalCommit": {"oid": "1cf77034c815e26fe79865275a9f7e2403a323e6"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkzMjY2Mg==", "bodyText": "I think it is reasonable to expect extensions schemas in a local directory being loaded as we allow local dirs in the resolver path.\nAlso as a feature, it makes sense to have a consistent behavior across all types of locations.", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474932662", "createdAt": "2020-08-21T20:18:12Z", "author": {"login": "karthikbalasub"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/DataSchemaParser.java", "diffHunk": "@@ -191,6 +218,20 @@ private static ParseResult combine(Collection<ParseResult> parseResults)\n       return _schemaAndLocations;\n     }\n \n+    public Map<DataSchema, DataSchemaLocation> getExtensionDataSchemaAndLocations()\n+    {\n+      return _schemaAndLocations.entrySet().stream().filter(entry ->\n+      {\n+        DataSchemaLocation dataSchemaLocation = entry.getValue();\n+        if (dataSchemaLocation instanceof InJarFileDataSchemaLocation)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0ODIzOA=="}, "originalCommit": {"oid": "1cf77034c815e26fe79865275a9f7e2403a323e6"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxMDU4MA==", "bodyText": "I add the case by using a heuristic rule, the file has to end with \"Extension.pdl\" and the path should contain \"extensions\" in the dir path", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r475010580", "createdAt": "2020-08-21T23:34:12Z", "author": {"login": "BrianPin"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/DataSchemaParser.java", "diffHunk": "@@ -191,6 +218,20 @@ private static ParseResult combine(Collection<ParseResult> parseResults)\n       return _schemaAndLocations;\n     }\n \n+    public Map<DataSchema, DataSchemaLocation> getExtensionDataSchemaAndLocations()\n+    {\n+      return _schemaAndLocations.entrySet().stream().filter(entry ->\n+      {\n+        DataSchemaLocation dataSchemaLocation = entry.getValue();\n+        if (dataSchemaLocation instanceof InJarFileDataSchemaLocation)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0ODIzOA=="}, "originalCommit": {"oid": "1cf77034c815e26fe79865275a9f7e2403a323e6"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NjgzMDEwOnYy", "diffSide": "RIGHT", "path": "generator/src/main/java/com/linkedin/pegasus/generator/FileFormatDataSchemaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMTo1NTo0MFrOHEqXnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMzo0MDoyN1rOHFAbig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1MDUyNw==", "bodyText": "Can we remove the SCHEMA_PATH_PREFIX check and just use the path configured in resolver?", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474650527", "createdAt": "2020-08-21T11:55:40Z", "author": {"login": "karthikbalasub"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/FileFormatDataSchemaParser.java", "diffHunk": "@@ -91,7 +93,7 @@ public FileFormatDataSchemaParser(String resolverPath, DataSchemaResolver schema\n               {\n                 final JarEntry entry = entries.nextElement();\n                 if (!entry.isDirectory() && entry.getName().endsWith(_schemaParserFactory.getLanguageExtension()) &&\n-                    entry.getName().startsWith(SCHEMA_PATH_PREFIX))\n+                    (entry.getName().startsWith(SCHEMA_PATH_PREFIX) || isExtensionEntry(entry)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cf77034c815e26fe79865275a9f7e2403a323e6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxMTk3OA==", "bodyText": "done", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r475011978", "createdAt": "2020-08-21T23:40:27Z", "author": {"login": "BrianPin"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/FileFormatDataSchemaParser.java", "diffHunk": "@@ -91,7 +93,7 @@ public FileFormatDataSchemaParser(String resolverPath, DataSchemaResolver schema\n               {\n                 final JarEntry entry = entries.nextElement();\n                 if (!entry.isDirectory() && entry.getName().endsWith(_schemaParserFactory.getLanguageExtension()) &&\n-                    entry.getName().startsWith(SCHEMA_PATH_PREFIX))\n+                    (entry.getName().startsWith(SCHEMA_PATH_PREFIX) || isExtensionEntry(entry)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1MDUyNw=="}, "originalCommit": {"oid": "1cf77034c815e26fe79865275a9f7e2403a323e6"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NjgzNDQ5OnYy", "diffSide": "RIGHT", "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestDataSchemaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMTo1NzozNVrOHEqalg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODo0Njo1MVrOHE3mzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1MTI4Ng==", "bodyText": "Also add a test that parses files from directory.\nWhen we are running the build on a module that contains the PDL files, they are loaded as files directly, not through jars.", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474651286", "createdAt": "2020-08-21T11:57:35Z", "author": {"login": "karthikbalasub"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestDataSchemaParser.java", "diffHunk": "@@ -92,6 +97,71 @@ public void testParseFromJarFile(String pegasusFilename, String[] expectedSchema\n     parseResult.getSchemaAndLocations().values().forEach(loc -> assertEquals(loc.getSourceFile().getAbsolutePath(), jarFile));\n   }\n \n+  @DataProvider(name = \"entityRelationshipInputFiles\")\n+  private Object[][] createResolverWithExtensionDirs()\n+  {\n+    return new Object[][]\n+        {\n+            {\n+                new String[]{\n+                    \"extensions/BarExtension.pdl\",\n+                    \"extensions/FooExtension.pdl\",\n+                    \"pegasus/Foo.pdl\",\n+                    \"pegasus/Bar.pdl\"\n+                },\n+                new String[]{\n+                    \"FooExtension\",\n+                    \"BarExtension\"\n+                }\n+            },\n+            {\n+                new String[]{\n+                    \"extensions/BarExtension.pdl\",\n+                    \"extensions/FooExtension.pdl\",\n+                    \"pegasus/Bar.pdl\",\n+                    \"pegasus/Foo.pdl\",\n+                    \"others/FooBar.pdl\"\n+                },\n+                new String[]{\n+                    \"FooExtension\",\n+                    \"BarExtension\"\n+                }\n+            },\n+        };\n+  }\n+\n+  @Test(dataProvider = \"entityRelationshipInputFiles\")\n+  public void testSchemaFilesInExtensionPath(String[] files, String[] expectedExtensions) throws Exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cf77034c815e26fe79865275a9f7e2403a323e6"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg2NzQwNA==", "bodyText": "yea, will add it", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474867404", "createdAt": "2020-08-21T18:46:51Z", "author": {"login": "BrianPin"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestDataSchemaParser.java", "diffHunk": "@@ -92,6 +97,71 @@ public void testParseFromJarFile(String pegasusFilename, String[] expectedSchema\n     parseResult.getSchemaAndLocations().values().forEach(loc -> assertEquals(loc.getSourceFile().getAbsolutePath(), jarFile));\n   }\n \n+  @DataProvider(name = \"entityRelationshipInputFiles\")\n+  private Object[][] createResolverWithExtensionDirs()\n+  {\n+    return new Object[][]\n+        {\n+            {\n+                new String[]{\n+                    \"extensions/BarExtension.pdl\",\n+                    \"extensions/FooExtension.pdl\",\n+                    \"pegasus/Foo.pdl\",\n+                    \"pegasus/Bar.pdl\"\n+                },\n+                new String[]{\n+                    \"FooExtension\",\n+                    \"BarExtension\"\n+                }\n+            },\n+            {\n+                new String[]{\n+                    \"extensions/BarExtension.pdl\",\n+                    \"extensions/FooExtension.pdl\",\n+                    \"pegasus/Bar.pdl\",\n+                    \"pegasus/Foo.pdl\",\n+                    \"others/FooBar.pdl\"\n+                },\n+                new String[]{\n+                    \"FooExtension\",\n+                    \"BarExtension\"\n+                }\n+            },\n+        };\n+  }\n+\n+  @Test(dataProvider = \"entityRelationshipInputFiles\")\n+  public void testSchemaFilesInExtensionPath(String[] files, String[] expectedExtensions) throws Exception", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1MTI4Ng=="}, "originalCommit": {"oid": "1cf77034c815e26fe79865275a9f7e2403a323e6"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 318, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}