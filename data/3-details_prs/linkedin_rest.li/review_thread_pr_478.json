{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5ODU5NDY5", "number": 478, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOToyMzo1OFrOE4UE9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTozNzowNVrOE-zzuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NDg0NjYxOnYy", "diffSide": "RIGHT", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/symbol/RestLiSymbolTableProvider.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOToyMzo1OVrOHyKOpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMTozMzo1M1rOHyq-Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1ODQzNw==", "bodyText": "Excellent catch! Can you please change this check to checking for scheme instead of startsWith and use the d2 constant please?", "url": "https://github.com/linkedin/rest.li/pull/478#discussion_r522358437", "createdAt": "2020-11-12T19:23:59Z", "author": {"login": "karthikrg"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/symbol/RestLiSymbolTableProvider.java", "diffHunk": "@@ -220,6 +220,11 @@ public SymbolTable getSymbolTable(String symbolTableName)\n   @Override\n   public SymbolTable getRequestSymbolTable(URI requestUri)\n   {\n+    if (!requestUri.toString().startsWith(\"d2://\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc7158e4b97d385996e37bc9e765cc2f44993f4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1ODU5Nw==", "bodyText": "Also may want to add a debug log here.", "url": "https://github.com/linkedin/rest.li/pull/478#discussion_r522358597", "createdAt": "2020-11-12T19:24:14Z", "author": {"login": "karthikrg"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/symbol/RestLiSymbolTableProvider.java", "diffHunk": "@@ -220,6 +220,11 @@ public SymbolTable getSymbolTable(String symbolTableName)\n   @Override\n   public SymbolTable getRequestSymbolTable(URI requestUri)\n   {\n+    if (!requestUri.toString().startsWith(\"d2://\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1ODQzNw=="}, "originalCommit": {"oid": "edc7158e4b97d385996e37bc9e765cc2f44993f4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5MzI1Mg==", "bodyText": "should it be: startsWith(_uriPrefix) ?", "url": "https://github.com/linkedin/rest.li/pull/478#discussion_r522893252", "createdAt": "2020-11-13T11:30:10Z", "author": {"login": "karthikbalasub"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/symbol/RestLiSymbolTableProvider.java", "diffHunk": "@@ -220,6 +220,11 @@ public SymbolTable getSymbolTable(String symbolTableName)\n   @Override\n   public SymbolTable getRequestSymbolTable(URI requestUri)\n   {\n+    if (!requestUri.toString().startsWith(\"d2://\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1ODQzNw=="}, "originalCommit": {"oid": "edc7158e4b97d385996e37bc9e765cc2f44993f4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5NDk0Mw==", "bodyText": "Also can you cleanup the comment from line 237-238? Looks like this was missed inthe previous PR", "url": "https://github.com/linkedin/rest.li/pull/478#discussion_r522894943", "createdAt": "2020-11-13T11:33:53Z", "author": {"login": "karthikbalasub"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/symbol/RestLiSymbolTableProvider.java", "diffHunk": "@@ -220,6 +220,11 @@ public SymbolTable getSymbolTable(String symbolTableName)\n   @Override\n   public SymbolTable getRequestSymbolTable(URI requestUri)\n   {\n+    if (!requestUri.toString().startsWith(\"d2://\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1ODQzNw=="}, "originalCommit": {"oid": "edc7158e4b97d385996e37bc9e765cc2f44993f4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3ODE4ODczOnYy", "diffSide": "RIGHT", "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/model/RestLiApiBuilder.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMTozNzoyOFrOHyrEzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTo1ODowMFrOH8LmuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5NjU5MQ==", "bodyText": "This is not sufficient. If a resource has string Keys and if the key is \"symbolTable\" it can still cause conflict. We might have to revert Sang's commit.", "url": "https://github.com/linkedin/rest.li/pull/478#discussion_r522896591", "createdAt": "2020-11-13T11:37:28Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/model/RestLiApiBuilder.java", "diffHunk": "@@ -119,6 +120,12 @@ private static void processResourceInOrder(Class<?> annotatedClass, Map<Class<?>\n     if (model.isRoot())\n     {\n       String path = \"/\" + model.getName();\n+      if (model.getName().equals(DefaultSymbolTableProvider.SYMBOL_TABLE_URI_PATH))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc7158e4b97d385996e37bc9e765cc2f44993f4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAwNjQ2OA==", "bodyText": "updated symbol table request to include a header flag to avoid conflict.", "url": "https://github.com/linkedin/rest.li/pull/478#discussion_r532006468", "createdAt": "2020-11-28T08:43:07Z", "author": {"login": "aman1309"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/model/RestLiApiBuilder.java", "diffHunk": "@@ -119,6 +120,12 @@ private static void processResourceInOrder(Class<?> annotatedClass, Map<Class<?>\n     if (model.isRoot())\n     {\n       String path = \"/\" + model.getName();\n+      if (model.getName().equals(DefaultSymbolTableProvider.SYMBOL_TABLE_URI_PATH))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5NjU5MQ=="}, "originalCommit": {"oid": "edc7158e4b97d385996e37bc9e765cc2f44993f4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1MTUwMg==", "bodyText": "do you still need this change?", "url": "https://github.com/linkedin/rest.li/pull/478#discussion_r532851502", "createdAt": "2020-11-30T19:39:25Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/model/RestLiApiBuilder.java", "diffHunk": "@@ -119,6 +120,12 @@ private static void processResourceInOrder(Class<?> annotatedClass, Map<Class<?>\n     if (model.isRoot())\n     {\n       String path = \"/\" + model.getName();\n+      if (model.getName().equals(DefaultSymbolTableProvider.SYMBOL_TABLE_URI_PATH))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5NjU5MQ=="}, "originalCommit": {"oid": "edc7158e4b97d385996e37bc9e765cc2f44993f4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg2Njc0NA==", "bodyText": "No, but kept it to avoid confusion", "url": "https://github.com/linkedin/rest.li/pull/478#discussion_r532866744", "createdAt": "2020-11-30T19:58:00Z", "author": {"login": "aman1309"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/model/RestLiApiBuilder.java", "diffHunk": "@@ -119,6 +120,12 @@ private static void processResourceInOrder(Class<?> annotatedClass, Map<Class<?>\n     if (model.isRoot())\n     {\n       String path = \"/\" + model.getName();\n+      if (model.getName().equals(DefaultSymbolTableProvider.SYMBOL_TABLE_URI_PATH))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5NjU5MQ=="}, "originalCommit": {"oid": "edc7158e4b97d385996e37bc9e765cc2f44993f4"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Mjg3NzI2OnYy", "diffSide": "RIGHT", "path": "data/src/main/java/com/linkedin/data/codec/symbol/DefaultSymbolTableProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOToxNTo1N1rOH8J0Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTozOTozNVrOH8KrkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzNzQ2Mw==", "bodyText": "It needs to be \"X-RestLi\", Capitalize L", "url": "https://github.com/linkedin/rest.li/pull/478#discussion_r532837463", "createdAt": "2020-11-30T19:15:57Z", "author": {"login": "junchuanwang"}, "path": "data/src/main/java/com/linkedin/data/codec/symbol/DefaultSymbolTableProvider.java", "diffHunk": "@@ -47,6 +47,11 @@\n    */\n   private static final String ACCEPT_HEADER = \"Accept\";\n \n+  /**\n+   * Symbol table request header\n+   */\n+  private static final String SYMBOL_TABLE_HEADER = \"X-Restli-Symbol-Table-Request\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71dbc16cab21b83ef362446660ccd352a04c5c5b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzODQwMg==", "bodyText": "HTTP Headers are case insensitive, and h2 actually sends them as lower case. I would suggest lowercasing everything to save some garbage :D", "url": "https://github.com/linkedin/rest.li/pull/478#discussion_r532838402", "createdAt": "2020-11-30T19:17:30Z", "author": {"login": "karthikrg"}, "path": "data/src/main/java/com/linkedin/data/codec/symbol/DefaultSymbolTableProvider.java", "diffHunk": "@@ -47,6 +47,11 @@\n    */\n   private static final String ACCEPT_HEADER = \"Accept\";\n \n+  /**\n+   * Symbol table request header\n+   */\n+  private static final String SYMBOL_TABLE_HEADER = \"X-Restli-Symbol-Table-Request\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzNzQ2Mw=="}, "originalCommit": {"oid": "71dbc16cab21b83ef362446660ccd352a04c5c5b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1MTYwMQ==", "bodyText": "thanks will do", "url": "https://github.com/linkedin/rest.li/pull/478#discussion_r532851601", "createdAt": "2020-11-30T19:39:35Z", "author": {"login": "aman1309"}, "path": "data/src/main/java/com/linkedin/data/codec/symbol/DefaultSymbolTableProvider.java", "diffHunk": "@@ -47,6 +47,11 @@\n    */\n   private static final String ACCEPT_HEADER = \"Accept\";\n \n+  /**\n+   * Symbol table request header\n+   */\n+  private static final String SYMBOL_TABLE_HEADER = \"X-Restli-Symbol-Table-Request\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzNzQ2Mw=="}, "originalCommit": {"oid": "71dbc16cab21b83ef362446660ccd352a04c5c5b"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Mjk1NjY1OnYy", "diffSide": "RIGHT", "path": "restli-server/src/main/java/com/linkedin/restli/server/symbol/RestLiSymbolTableRequestHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTozNjoxN1rOH8Kj4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTo0ODoxNVrOH8LBpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg0OTYzNQ==", "bodyText": "Did you add this back for compatibility with the old logic?", "url": "https://github.com/linkedin/rest.li/pull/478#discussion_r532849635", "createdAt": "2020-11-30T19:36:17Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/server/symbol/RestLiSymbolTableRequestHandler.java", "diffHunk": "@@ -90,11 +90,20 @@ public boolean shouldHandle(Request request)\n       return false;\n     }\n \n-    //\n     // When path is service scoped, URI is in the form of /<SERVICE>/symbolTable, else it\n     // is in the form of /symbolTable or /symbolTable/<TABLENAME>\n-    return pathSegments.get(pathSegments.size() - 1).getPath().equals(SYMBOL_TABLE_URI_PATH)\n-        || pathSegments.get(pathSegments.size() - 2).getPath().equals(SYMBOL_TABLE_URI_PATH);\n+    boolean isSymbolTableRequest = request.getHeaders().containsKey(RestConstants.HEADER_FETCH_SYMBOL_TABLE);\n+    if (isSymbolTableRequest)\n+    {\n+      return pathSegments.get(pathSegments.size() - 1).getPath().equals(SYMBOL_TABLE_URI_PATH)\n+              || pathSegments.get(pathSegments.size() - 2).getPath().equals(SYMBOL_TABLE_URI_PATH);\n+    }\n+    boolean isServiceScopedPath = request.getHeaders().containsKey(RestConstants.HEADER_SERVICE_SCOPED_PATH);\n+    if (isServiceScopedPath)\n+    {\n+      return (pathSegments.size() == 3) && pathSegments.get(2).getPath().equals(SYMBOL_TABLE_URI_PATH);\n+    }\n+    return ((pathSegments.size() == 2 || pathSegments.size() == 3) && pathSegments.get(1).getPath().equals(SYMBOL_TABLE_URI_PATH));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71dbc16cab21b83ef362446660ccd352a04c5c5b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1NzI1NQ==", "bodyText": "yes, for older clients using symbol table.", "url": "https://github.com/linkedin/rest.li/pull/478#discussion_r532857255", "createdAt": "2020-11-30T19:48:15Z", "author": {"login": "aman1309"}, "path": "restli-server/src/main/java/com/linkedin/restli/server/symbol/RestLiSymbolTableRequestHandler.java", "diffHunk": "@@ -90,11 +90,20 @@ public boolean shouldHandle(Request request)\n       return false;\n     }\n \n-    //\n     // When path is service scoped, URI is in the form of /<SERVICE>/symbolTable, else it\n     // is in the form of /symbolTable or /symbolTable/<TABLENAME>\n-    return pathSegments.get(pathSegments.size() - 1).getPath().equals(SYMBOL_TABLE_URI_PATH)\n-        || pathSegments.get(pathSegments.size() - 2).getPath().equals(SYMBOL_TABLE_URI_PATH);\n+    boolean isSymbolTableRequest = request.getHeaders().containsKey(RestConstants.HEADER_FETCH_SYMBOL_TABLE);\n+    if (isSymbolTableRequest)\n+    {\n+      return pathSegments.get(pathSegments.size() - 1).getPath().equals(SYMBOL_TABLE_URI_PATH)\n+              || pathSegments.get(pathSegments.size() - 2).getPath().equals(SYMBOL_TABLE_URI_PATH);\n+    }\n+    boolean isServiceScopedPath = request.getHeaders().containsKey(RestConstants.HEADER_SERVICE_SCOPED_PATH);\n+    if (isServiceScopedPath)\n+    {\n+      return (pathSegments.size() == 3) && pathSegments.get(2).getPath().equals(SYMBOL_TABLE_URI_PATH);\n+    }\n+    return ((pathSegments.size() == 2 || pathSegments.size() == 3) && pathSegments.get(1).getPath().equals(SYMBOL_TABLE_URI_PATH));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg0OTYzNQ=="}, "originalCommit": {"oid": "71dbc16cab21b83ef362446660ccd352a04c5c5b"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Mjk1OTkyOnYy", "diffSide": "RIGHT", "path": "restli-server/src/main/java/com/linkedin/restli/server/symbol/RestLiSymbolTableRequestHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTozNzowNVrOH8Kl4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTo0Mzo1M1rOH8K1jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1MDE0Ng==", "bodyText": "why are assuming # of path segments to 2 or 3? I mean the original code seems more natural", "url": "https://github.com/linkedin/rest.li/pull/478#discussion_r532850146", "createdAt": "2020-11-30T19:37:05Z", "author": {"login": "junchuanwang"}, "path": "restli-server/src/main/java/com/linkedin/restli/server/symbol/RestLiSymbolTableRequestHandler.java", "diffHunk": "@@ -90,11 +90,20 @@ public boolean shouldHandle(Request request)\n       return false;\n     }\n \n-    //\n     // When path is service scoped, URI is in the form of /<SERVICE>/symbolTable, else it\n     // is in the form of /symbolTable or /symbolTable/<TABLENAME>\n-    return pathSegments.get(pathSegments.size() - 1).getPath().equals(SYMBOL_TABLE_URI_PATH)\n-        || pathSegments.get(pathSegments.size() - 2).getPath().equals(SYMBOL_TABLE_URI_PATH);\n+    boolean isSymbolTableRequest = request.getHeaders().containsKey(RestConstants.HEADER_FETCH_SYMBOL_TABLE);\n+    if (isSymbolTableRequest)\n+    {\n+      return pathSegments.get(pathSegments.size() - 1).getPath().equals(SYMBOL_TABLE_URI_PATH)\n+              || pathSegments.get(pathSegments.size() - 2).getPath().equals(SYMBOL_TABLE_URI_PATH);\n+    }\n+    boolean isServiceScopedPath = request.getHeaders().containsKey(RestConstants.HEADER_SERVICE_SCOPED_PATH);\n+    if (isServiceScopedPath)\n+    {\n+      return (pathSegments.size() == 3) && pathSegments.get(2).getPath().equals(SYMBOL_TABLE_URI_PATH);\n+    }\n+    return ((pathSegments.size() == 2 || pathSegments.size() == 3) && pathSegments.get(1).getPath().equals(SYMBOL_TABLE_URI_PATH));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71dbc16cab21b83ef362446660ccd352a04c5c5b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1NDE1Nw==", "bodyText": "this is reverting to original code, reverts below pr\nhttps://github.com/linkedin/rest.li/pull/465/files", "url": "https://github.com/linkedin/rest.li/pull/478#discussion_r532854157", "createdAt": "2020-11-30T19:43:53Z", "author": {"login": "aman1309"}, "path": "restli-server/src/main/java/com/linkedin/restli/server/symbol/RestLiSymbolTableRequestHandler.java", "diffHunk": "@@ -90,11 +90,20 @@ public boolean shouldHandle(Request request)\n       return false;\n     }\n \n-    //\n     // When path is service scoped, URI is in the form of /<SERVICE>/symbolTable, else it\n     // is in the form of /symbolTable or /symbolTable/<TABLENAME>\n-    return pathSegments.get(pathSegments.size() - 1).getPath().equals(SYMBOL_TABLE_URI_PATH)\n-        || pathSegments.get(pathSegments.size() - 2).getPath().equals(SYMBOL_TABLE_URI_PATH);\n+    boolean isSymbolTableRequest = request.getHeaders().containsKey(RestConstants.HEADER_FETCH_SYMBOL_TABLE);\n+    if (isSymbolTableRequest)\n+    {\n+      return pathSegments.get(pathSegments.size() - 1).getPath().equals(SYMBOL_TABLE_URI_PATH)\n+              || pathSegments.get(pathSegments.size() - 2).getPath().equals(SYMBOL_TABLE_URI_PATH);\n+    }\n+    boolean isServiceScopedPath = request.getHeaders().containsKey(RestConstants.HEADER_SERVICE_SCOPED_PATH);\n+    if (isServiceScopedPath)\n+    {\n+      return (pathSegments.size() == 3) && pathSegments.get(2).getPath().equals(SYMBOL_TABLE_URI_PATH);\n+    }\n+    return ((pathSegments.size() == 2 || pathSegments.size() == 3) && pathSegments.get(1).getPath().equals(SYMBOL_TABLE_URI_PATH));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1MDE0Ng=="}, "originalCommit": {"oid": "71dbc16cab21b83ef362446660ccd352a04c5c5b"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 265, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}