{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MzQzNTQz", "number": 299, "title": "Implement Host Override List feature in D2.", "bodyText": "Requirements\nTo support features like Fullstack Hovr, D2 needs to support the following routing override scenarios.\n\nRoute requests going to a given cluster to a specific host.\nRoute requests going to a given service to a specific host.\nProvide route overrides for multiple clusters and services.\n\nD2 provides an existing override mechanism called TargetHints. However, TargetHints does not meet the above requirements due to the following restrictions.\nTargetHints does not allow multiple overrides for different clusters and services.\nTargetHints requires users to provide a full URL as opposed to a URL prefix like the D2 announcer. Therefore, we lose the flexibility of appending the service paths for different D2 services.\nImplementation\nSimilar to TargetHints, HostOverrideList is also specified and passed through the RequestContext. HostOverrideList allows the user to add an arbitrary number of overrides for different clusters and services. When the request gets to the SimpleLoadBalancer, the implementation will look for the first matching override for the current cluster and service names. The request URI will be rewritten to be the override URI provided.\n\nhostOverrideList.addClusterOverride(\u201cCluster1\u201d, \u201chttps://host:8080/context/\u201d);\nhostOverrideList.addServiceOverride(\u201cService1\u201d, \u201chttps://host:8080/context/\u201d);\n\nThe provided override URI is a prefix, similar to the announced URI, as opposed to a full URI in the TargetHints mechanism. The service path will be appended to the end of the URI by the SimpleLoadBalancer when the request URI is rewritten. In the above examples, the written URI will be \u201chttps://host:8080/context/service1path\u201d.\nThe TargetHints mechanism will be deprecated but backward compatibility will be kept. To achieve the original TargetHints behavior, one can add generic override without providing a cluster or service name.\n\nhostOverrideList.addOverride(\u201chttps://host:8080/context/\u201d);", "createdAt": "2020-05-18T08:35:37Z", "url": "https://github.com/linkedin/rest.li/pull/299", "merged": true, "mergeCommit": {"oid": "c4f9b4226757986822beb725f713ef30913cedd4"}, "closed": true, "closedAt": "2020-05-20T07:34:31Z", "author": {"login": "ssheng"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcikn8RgFqTQxMzgzNjY1MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjDHMKABqjMzNTQ5MDYxMDE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzODM2NjUx", "url": "https://github.com/linkedin/rest.li/pull/299#pullrequestreview-413836651", "createdAt": "2020-05-18T18:26:20Z", "commit": {"oid": "63e7e0b8fc42d131f608696637112887c49f5fd7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODoyNjoyMFrOGXCwpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODo1ODoyOVrOGXDwxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgxNTY1NA==", "bodyText": "Eventhough TargetService hint is deprecated - should we include that int he debug (Host override/TargetService Hint found) until we completely remove the TargetService?", "url": "https://github.com/linkedin/rest.li/pull/299#discussion_r426815654", "createdAt": "2020-05-18T18:26:20Z", "author": {"login": "nizarm"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancer.java", "diffHunk": "@@ -201,16 +210,17 @@ public void getClient(Request request, RequestContext requestContext, Callback<T\n         }\n         else\n         {\n-          _log.debug(\"service hint found, using generic client for target: {}\", targetService);\n-\n-          TransportClient transportClient = _state.getClient(serviceName, targetService.getScheme());\n+          URI target = override == null ? targetService : URI.create(override + service.getPath());\n+          _log.debug(\"Host override found, using generic client for target: {}\", target);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63e7e0b8fc42d131f608696637112887c49f5fd7"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgxNjE3OA==", "bodyText": "Ditto - should we include TargetService in the error until we completely remove the TargetHost?", "url": "https://github.com/linkedin/rest.li/pull/299#discussion_r426816178", "createdAt": "2020-05-18T18:27:25Z", "author": {"login": "nizarm"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancer.java", "diffHunk": "@@ -201,16 +210,17 @@ public void getClient(Request request, RequestContext requestContext, Callback<T\n         }\n         else\n         {\n-          _log.debug(\"service hint found, using generic client for target: {}\", targetService);\n-\n-          TransportClient transportClient = _state.getClient(serviceName, targetService.getScheme());\n+          URI target = override == null ? targetService : URI.create(override + service.getPath());\n+          _log.debug(\"Host override found, using generic client for target: {}\", target);\n+          TransportClient transportClient = _state.getClient(serviceName, target.getScheme());\n           if (transportClient == null)\n           {\n             throw new ServiceUnavailableException(serviceName,\n-                \"PEGA_1001. Cannot find transportClient for service \" + serviceName + \" and scheme: \" + targetService.getScheme()\n-                    + \" with service hint\" + targetService);\n+                \"PEGA_1001. Cannot find transportClient for service \" + serviceName + \" and scheme: \" + target.getScheme()\n+                    + \" with host override \" + target);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63e7e0b8fc42d131f608696637112887c49f5fd7"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyMDI0MQ==", "bodyText": "Do we need to make sure override variable ends with '/' here, to make sure that servicepath is added as a proper suffix?", "url": "https://github.com/linkedin/rest.li/pull/299#discussion_r426820241", "createdAt": "2020-05-18T18:35:38Z", "author": {"login": "nizarm"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancer.java", "diffHunk": "@@ -201,16 +210,17 @@ public void getClient(Request request, RequestContext requestContext, Callback<T\n         }\n         else\n         {\n-          _log.debug(\"service hint found, using generic client for target: {}\", targetService);\n-\n-          TransportClient transportClient = _state.getClient(serviceName, targetService.getScheme());\n+          URI target = override == null ? targetService : URI.create(override + service.getPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63e7e0b8fc42d131f608696637112887c49f5fd7"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzMjA2OQ==", "bodyText": "if (this.equals(WILDCARD_KEY)) {\n return true;\n}\n?", "url": "https://github.com/linkedin/rest.li/pull/299#discussion_r426832069", "createdAt": "2020-05-18T18:58:29Z", "author": {"login": "nizarm"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/util/HostOverrideList.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.d2.balancer.util;\n+\n+import com.linkedin.util.ArgumentUtil;\n+import java.net.URI;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+\n+/**\n+ * Stores the list of host overrides for cluster and services. The order of the overrides are stored in the same\n+ * order as the additions. Checks for the first match and return the overridden {@link URI}.\n+ */\n+public class HostOverrideList\n+{\n+  private Map<Key, URI> _overrides = new LinkedHashMap<>();\n+\n+  public void addClusterOverride(String cluster, URI uri) {\n+    ArgumentUtil.notNull(cluster, \"cluster\");\n+    ArgumentUtil.notNull(uri, \"uri\");\n+    _overrides.put(new Key(cluster, null), uri);\n+  }\n+\n+  public void addServiceOverride(String service, URI uri) {\n+    ArgumentUtil.notNull(service, \"service\");\n+    ArgumentUtil.notNull(uri, \"uri\");\n+    _overrides.put(new Key(null, service), uri);\n+  }\n+\n+  public void addOverride(URI uri) {\n+    ArgumentUtil.notNull(uri, \"uri\");\n+    _overrides.put(Key.WILDCARD_KEY, uri);\n+  }\n+\n+  /**\n+   * Gets the overridden URI for the given cluster and service.\n+   * @param cluster Cluster name of the override.\n+   * @param service Service name of the override.\n+   * @return The overridden URI for the given cluster and service; {@code null} otherwise.\n+   */\n+  public URI getOverride(String cluster, String service)\n+  {\n+    for (Map.Entry<Key, URI> override : _overrides.entrySet())\n+    {\n+      if (override.getKey().match(cluster, service)) {\n+        return override.getValue();\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Key implementation of the override map. Key includes a cluster and a service name. If either cluster or\n+   * service is {@code null}, then the null cluster or service is treated as a wildcard.\n+   */\n+  private static class Key {\n+    private static final Key WILDCARD_KEY = new Key(null, null);\n+    private final String _cluster;\n+    private final String _service;\n+\n+    public Key(String cluster, String service) {\n+      _cluster = cluster;\n+      _service = service;\n+    }\n+\n+    /**\n+     * Checks if the provided cluster and service names match this key.\n+     * @param cluster Cluster name to check against.\n+     * @param service Service name to check against.\n+     * @return {@code True} if provided cluster and service name match the key; {@code false} otherwise.\n+     */\n+    public boolean match(String cluster, String service) {\n+      if (_cluster == null && _service == null) {\n+        return true;\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63e7e0b8fc42d131f608696637112887c49f5fd7"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzOTE4ODU0", "url": "https://github.com/linkedin/rest.li/pull/299#pullrequestreview-413918854", "createdAt": "2020-05-18T20:32:44Z", "commit": {"oid": "63e7e0b8fc42d131f608696637112887c49f5fd7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDozMjo0NFrOGXGi2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDozMjo0NFrOGXGi2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3NzY1OQ==", "bodyText": "Can we also have a test with override value with an ending slash URI.create(\"http://override/path/\")", "url": "https://github.com/linkedin/rest.li/pull/299#discussion_r426877659", "createdAt": "2020-05-18T20:32:44Z", "author": {"login": "nizarm"}, "path": "d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java", "diffHunk": "@@ -623,6 +626,113 @@ public void testGetClient() throws Exception\n     loadBalancer.getClient(uriRequest, requestContextWithHint);\n   }\n \n+  /**\n+   * Tests getClient() when with host override list specified in the request context.\n+   * @throws Exception\n+   */\n+  @Test\n+  public void testGetClientHostOverrideList() throws Exception\n+  {\n+    Map<String, LoadBalancerStrategyFactory<? extends LoadBalancerStrategy>> loadBalancerStrategyFactories =\n+        new HashMap<>();\n+    Map<String, TransportClientFactory> clientFactories = new HashMap<>();\n+    List<String> prioritizedSchemes = new ArrayList<>();\n+\n+    MockStore<ServiceProperties> serviceRegistry = new MockStore<>();\n+    MockStore<ClusterProperties> clusterRegistry = new MockStore<>();\n+    MockStore<UriProperties> uriRegistry = new MockStore<>();\n+\n+    ScheduledExecutorService executorService = new SynchronousExecutorService();\n+\n+    loadBalancerStrategyFactories.put(\"degrader\", new DegraderLoadBalancerStrategyFactoryV3());\n+    clientFactories.put(PropertyKeys.HTTP_SCHEME, new DoNothingClientFactory());\n+\n+    SimpleLoadBalancerState state =\n+        new SimpleLoadBalancerState(executorService,\n+            uriRegistry,\n+            clusterRegistry,\n+            serviceRegistry,\n+            clientFactories,\n+            loadBalancerStrategyFactories);\n+\n+    SimpleLoadBalancer loadBalancer =\n+        new SimpleLoadBalancer(state, 5, TimeUnit.SECONDS, _d2Executor);\n+\n+    FutureCallback<None> balancerCallback = new FutureCallback<None>();\n+    loadBalancer.start(balancerCallback);\n+    balancerCallback.get();\n+\n+    Map<Integer, PartitionData> partitionData = new HashMap<Integer, PartitionData>(1);\n+    partitionData.put(DEFAULT_PARTITION_ID, new PartitionData(1d));\n+    Map<URI, Map<Integer, PartitionData>> uriData = new HashMap<URI, Map<Integer, PartitionData>>(2);\n+    uriData.put(URI.create(\"http://host1/path\"), partitionData);\n+\n+    prioritizedSchemes.add(PropertyKeys.HTTP_SCHEME);\n+\n+    String cluster1 = \"Cluster1\";\n+    String cluster2 = \"Cluster2\";\n+    String service1 = \"service1\";\n+    String service2 = \"service2\";\n+\n+    clusterRegistry.put(cluster1, new ClusterProperties(cluster1, Collections.emptyList(),\n+        Collections.emptyMap(), new HashSet<>(), NullPartitionProperties.getInstance()));\n+\n+    serviceRegistry.put(service1, new ServiceProperties(service1,\n+        cluster1,\n+        \"/service1Path\",\n+        Arrays.asList(\"degrader\"),\n+        Collections.<String,Object>emptyMap(),\n+        null,\n+        null,\n+        prioritizedSchemes,\n+        null));\n+    uriRegistry.put(cluster1, new UriProperties(cluster1, uriData));\n+\n+    URI override = URI.create(\"http://override/path\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63e7e0b8fc42d131f608696637112887c49f5fd7"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzOTM3MDUw", "url": "https://github.com/linkedin/rest.li/pull/299#pullrequestreview-413937050", "createdAt": "2020-05-18T21:02:54Z", "commit": {"oid": "63e7e0b8fc42d131f608696637112887c49f5fd7"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMTowMjo1NFrOGXHZgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMTowNzowOFrOGXHgtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg5MTY0OQ==", "bodyText": "Given that override takes precedence, and there are many applications use targetService for now, we probably want to log a warning message here if both present?", "url": "https://github.com/linkedin/rest.li/pull/299#discussion_r426891649", "createdAt": "2020-05-18T21:02:54Z", "author": {"login": "cx-super"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancer.java", "diffHunk": "@@ -201,16 +210,17 @@ public void getClient(Request request, RequestContext requestContext, Callback<T\n         }\n         else\n         {\n-          _log.debug(\"service hint found, using generic client for target: {}\", targetService);\n-\n-          TransportClient transportClient = _state.getClient(serviceName, targetService.getScheme());\n+          URI target = override == null ? targetService : URI.create(override + service.getPath());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyMDI0MQ=="}, "originalCommit": {"oid": "63e7e0b8fc42d131f608696637112887c49f5fd7"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg5MTg5Ng==", "bodyText": "HostOverrides or HostOverriders?", "url": "https://github.com/linkedin/rest.li/pull/299#discussion_r426891896", "createdAt": "2020-05-18T21:03:27Z", "author": {"login": "cx-super"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/util/HostOverrideList.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.d2.balancer.util;\n+\n+import com.linkedin.util.ArgumentUtil;\n+import java.net.URI;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+\n+/**\n+ * Stores the list of host overrides for cluster and services. The order of the overrides are stored in the same\n+ * order as the additions. Checks for the first match and return the overridden {@link URI}.\n+ */\n+public class HostOverrideList", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63e7e0b8fc42d131f608696637112887c49f5fd7"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg5MzQ5NA==", "bodyText": "Since the overrides could be supplied by different app, what if there are conflicts?", "url": "https://github.com/linkedin/rest.li/pull/299#discussion_r426893494", "createdAt": "2020-05-18T21:07:08Z", "author": {"login": "cx-super"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/util/HostOverrideList.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.d2.balancer.util;\n+\n+import com.linkedin.util.ArgumentUtil;\n+import java.net.URI;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+\n+/**\n+ * Stores the list of host overrides for cluster and services. The order of the overrides are stored in the same\n+ * order as the additions. Checks for the first match and return the overridden {@link URI}.\n+ */\n+public class HostOverrideList\n+{\n+  private Map<Key, URI> _overrides = new LinkedHashMap<>();\n+\n+  public void addClusterOverride(String cluster, URI uri) {\n+    ArgumentUtil.notNull(cluster, \"cluster\");\n+    ArgumentUtil.notNull(uri, \"uri\");\n+    _overrides.put(new Key(cluster, null), uri);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63e7e0b8fc42d131f608696637112887c49f5fd7"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NzY4NTU2", "url": "https://github.com/linkedin/rest.li/pull/299#pullrequestreview-414768556", "createdAt": "2020-05-19T19:44:47Z", "commit": {"oid": "76df66fe83b739a0360f3eb3bea08a3f0acdb469"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "391d0d98947fadeddcdb60e092f29b5d40d84024", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/391d0d98947fadeddcdb60e092f29b5d40d84024", "committedDate": "2020-05-20T06:25:07Z", "message": "Implement Host Override List feature in D2.\n\nRequirements\n\nTo support features like Fullstack Hovr, D2 needs to support the following routing override scenarios.\n  1. Route requests going to a given cluster to a specific host.\n  2. Route requests going to a given service to a specific host.\n  3. Provide route overrides for multiple clusters and services.\n\nD2 provides an existing override mechanism called TargetHints. However, TargetHints does not meet the above requirements due to the following restrictions.\nTargetHints does not allow multiple overrides for different clusters and services.\nTargetHints requires users to provide a full URL as opposed to a URL prefix like the D2 announcer. Therefore, we lose the flexibility of appending the service paths for different D2 services.\n\nImplementation\nSimilar to TargetHints, HostOverrideList is also specified and passed through the RequestContext. HostOverrideList allows the user to add an arbitrary number of overrides for different clusters and services. When the request gets to the SimpleLoadBalancer, the implementation will look for the first matching override for the current cluster and service names. The request URI will be rewritten to be the override URI provided.\n  1. hostOverrideList.addClusterOverride(\u201cCluster1\u201d, \u201chttps://host:8080/context/\u201d);\n  2. hostOverrideList.addServiceOverride(\u201cService1\u201d, \u201chttps://host:8080/context/\u201d);\n\nThe provided override URI is a prefix, similar to the announced URI, as opposed to a full URI in the TargetHints mechanism. The service path will be appended to the end of the URI by the SimpleLoadBalancer when the request URI is rewritten. In the above examples, the written URI will be \u201chttps://host:8080/context/service1path\u201d.\n\nTargetHints mechanism will be deprecated. To achieve the original TargetHints behavior, one can add generic override without providing a cluster or service name.\nhostOverrideList.addOverride(\u201chttps://host:8080/context/\u201d);\n\nAddressed Chao and Nizar's comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb27006f7ba5342fc8eafe3b9653ecd6eb80504a", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/bb27006f7ba5342fc8eafe3b9653ecd6eb80504a", "committedDate": "2020-05-20T06:28:37Z", "message": "Release version 29.0.1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "76df66fe83b739a0360f3eb3bea08a3f0acdb469", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/76df66fe83b739a0360f3eb3bea08a3f0acdb469", "committedDate": "2020-05-19T09:00:12Z", "message": "Addressed Chao and Nizar's comments"}, "afterCommit": {"oid": "bb27006f7ba5342fc8eafe3b9653ecd6eb80504a", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/bb27006f7ba5342fc8eafe3b9653ecd6eb80504a", "committedDate": "2020-05-20T06:28:37Z", "message": "Release version 29.0.1"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4798, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}