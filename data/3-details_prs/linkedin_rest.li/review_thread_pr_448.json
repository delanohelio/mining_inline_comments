{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0MDE5MzE0", "number": 448, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNzo1OFrOEt8iJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMDozODowMlrOEw_ijg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEzMTU2OnYy", "diffSide": "RIGHT", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/SchemaFormatTranslator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNzo1OFrOHiC6AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODo1MjoyNFrOHiVptA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MTI0OA==", "bodyText": "can we print schema location (or path) with the error?", "url": "https://github.com/linkedin/rest.li/pull/448#discussion_r505461248", "createdAt": "2020-10-15T11:17:58Z", "author": {"login": "aman1309"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/SchemaFormatTranslator.java", "diffHunk": "@@ -207,32 +209,31 @@ private void translateFiles() throws IOException, InterruptedException\n   private Map<String, SchemaInfo> getTopLevelSchemaToTranslatedSchemaMap() throws IOException\n   {\n     Map<String, SchemaInfo> topLevelTranslatedSchemas = new HashMap<>();\n+    DataSchemaParser dataSchemaParser = new DataSchemaParser(_resolverPath);\n+    DataSchemaParser.ParseResult parsedSources = dataSchemaParser.parseSources(\n+        new String[]{_sourceDir.getAbsolutePath()});\n \n-    Iterator<File> iter = FileUtils.iterateFiles(_sourceDir, new String[]{_sourceFormat}, true);\n-    StringBuilder errorMessages = new StringBuilder();\n-    while(iter.hasNext())\n+    for(Map.Entry<DataSchema, DataSchemaLocation> entry : parsedSources.getSchemaAndLocations().entrySet())\n     {\n-      File sourceFile = iter.next();\n-      String relativePath = _sourceDir.toURI().relativize(sourceFile.toURI()).getPath();\n-      String relativeMinusExt = trimFileExtension(relativePath);\n-      String schemaFullname = relativeMinusExt.replace(File.separatorChar, '.');\n-\n-      // When translating files 1:1, a new resolver and parser are required for each file translated\n-      // so that a single top level output schema is matched to each input file.\n-      MultiFormatDataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(_resolverPath);\n-      PegasusSchemaParser parser = AbstractSchemaParser.parserForFileExtension(_sourceFormat, resolver);\n-      parser.parse(new FileInputStream(sourceFile));\n-      LOGGER.debug(\"Loaded source schema: {}, from location: {}\", schemaFullname, sourceFile.getAbsolutePath());\n-      NamedDataSchema schema = checkForErrorsAndGetTopLevelSchema(sourceFile, schemaFullname, parser, errorMessages);\n-      if (schema != null)\n+      DataSchema schema = entry.getKey();\n+      DataSchemaLocation location = entry.getValue();\n+      if (!location.getSourceFile().getAbsolutePath().endsWith(_sourceFormat))\n       {\n-        topLevelTranslatedSchemas.put(schemaFullname, new SchemaInfo(schema, sourceFile, encode(schema)));\n+        // Skip source files not matching the format specified.\n+        continue;\n+      }\n+      if (schema instanceof NamedDataSchema)\n+      {\n+        NamedDataSchema namedDataSchema = (NamedDataSchema) schema;\n+        String schemaFullname = namedDataSchema.getFullName();\n+        LOGGER.debug(\"Loaded source schema: {}, from location: {}\", schemaFullname, location.getSourceFile().getAbsolutePath());\n+        topLevelTranslatedSchemas.put(schemaFullname, new SchemaInfo(namedDataSchema, location.getSourceFile(), encode(schema)));\n+      }\n+      else\n+      {\n+        LOGGER.error(\"Parsed a non-named schema as top-level schema.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41cbc914e380964b7a537015624da4c2e5e9b6d6"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2Njc2Mg==", "bodyText": "I believe that was handled during source parsing", "url": "https://github.com/linkedin/rest.li/pull/448#discussion_r505466762", "createdAt": "2020-10-15T11:28:26Z", "author": {"login": "junchuanwang"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/SchemaFormatTranslator.java", "diffHunk": "@@ -207,32 +209,31 @@ private void translateFiles() throws IOException, InterruptedException\n   private Map<String, SchemaInfo> getTopLevelSchemaToTranslatedSchemaMap() throws IOException\n   {\n     Map<String, SchemaInfo> topLevelTranslatedSchemas = new HashMap<>();\n+    DataSchemaParser dataSchemaParser = new DataSchemaParser(_resolverPath);\n+    DataSchemaParser.ParseResult parsedSources = dataSchemaParser.parseSources(\n+        new String[]{_sourceDir.getAbsolutePath()});\n \n-    Iterator<File> iter = FileUtils.iterateFiles(_sourceDir, new String[]{_sourceFormat}, true);\n-    StringBuilder errorMessages = new StringBuilder();\n-    while(iter.hasNext())\n+    for(Map.Entry<DataSchema, DataSchemaLocation> entry : parsedSources.getSchemaAndLocations().entrySet())\n     {\n-      File sourceFile = iter.next();\n-      String relativePath = _sourceDir.toURI().relativize(sourceFile.toURI()).getPath();\n-      String relativeMinusExt = trimFileExtension(relativePath);\n-      String schemaFullname = relativeMinusExt.replace(File.separatorChar, '.');\n-\n-      // When translating files 1:1, a new resolver and parser are required for each file translated\n-      // so that a single top level output schema is matched to each input file.\n-      MultiFormatDataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(_resolverPath);\n-      PegasusSchemaParser parser = AbstractSchemaParser.parserForFileExtension(_sourceFormat, resolver);\n-      parser.parse(new FileInputStream(sourceFile));\n-      LOGGER.debug(\"Loaded source schema: {}, from location: {}\", schemaFullname, sourceFile.getAbsolutePath());\n-      NamedDataSchema schema = checkForErrorsAndGetTopLevelSchema(sourceFile, schemaFullname, parser, errorMessages);\n-      if (schema != null)\n+      DataSchema schema = entry.getKey();\n+      DataSchemaLocation location = entry.getValue();\n+      if (!location.getSourceFile().getAbsolutePath().endsWith(_sourceFormat))\n       {\n-        topLevelTranslatedSchemas.put(schemaFullname, new SchemaInfo(schema, sourceFile, encode(schema)));\n+        // Skip source files not matching the format specified.\n+        continue;\n+      }\n+      if (schema instanceof NamedDataSchema)\n+      {\n+        NamedDataSchema namedDataSchema = (NamedDataSchema) schema;\n+        String schemaFullname = namedDataSchema.getFullName();\n+        LOGGER.debug(\"Loaded source schema: {}, from location: {}\", schemaFullname, location.getSourceFile().getAbsolutePath());\n+        topLevelTranslatedSchemas.put(schemaFullname, new SchemaInfo(namedDataSchema, location.getSourceFile(), encode(schema)));\n+      }\n+      else\n+      {\n+        LOGGER.error(\"Parsed a non-named schema as top-level schema.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MTI0OA=="}, "originalCommit": {"oid": "41cbc914e380964b7a537015624da4c2e5e9b6d6"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc2ODM3Mg==", "bodyText": "Yeah, this is just to keep the logic complete. The internal logic only adds Named schemas to parse result. Sadly, changing that API touched too many places, so I didn't include it here.\nAdded the location to the log anyways.", "url": "https://github.com/linkedin/rest.li/pull/448#discussion_r505768372", "createdAt": "2020-10-15T18:52:24Z", "author": {"login": "karthikbalasub"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/SchemaFormatTranslator.java", "diffHunk": "@@ -207,32 +209,31 @@ private void translateFiles() throws IOException, InterruptedException\n   private Map<String, SchemaInfo> getTopLevelSchemaToTranslatedSchemaMap() throws IOException\n   {\n     Map<String, SchemaInfo> topLevelTranslatedSchemas = new HashMap<>();\n+    DataSchemaParser dataSchemaParser = new DataSchemaParser(_resolverPath);\n+    DataSchemaParser.ParseResult parsedSources = dataSchemaParser.parseSources(\n+        new String[]{_sourceDir.getAbsolutePath()});\n \n-    Iterator<File> iter = FileUtils.iterateFiles(_sourceDir, new String[]{_sourceFormat}, true);\n-    StringBuilder errorMessages = new StringBuilder();\n-    while(iter.hasNext())\n+    for(Map.Entry<DataSchema, DataSchemaLocation> entry : parsedSources.getSchemaAndLocations().entrySet())\n     {\n-      File sourceFile = iter.next();\n-      String relativePath = _sourceDir.toURI().relativize(sourceFile.toURI()).getPath();\n-      String relativeMinusExt = trimFileExtension(relativePath);\n-      String schemaFullname = relativeMinusExt.replace(File.separatorChar, '.');\n-\n-      // When translating files 1:1, a new resolver and parser are required for each file translated\n-      // so that a single top level output schema is matched to each input file.\n-      MultiFormatDataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(_resolverPath);\n-      PegasusSchemaParser parser = AbstractSchemaParser.parserForFileExtension(_sourceFormat, resolver);\n-      parser.parse(new FileInputStream(sourceFile));\n-      LOGGER.debug(\"Loaded source schema: {}, from location: {}\", schemaFullname, sourceFile.getAbsolutePath());\n-      NamedDataSchema schema = checkForErrorsAndGetTopLevelSchema(sourceFile, schemaFullname, parser, errorMessages);\n-      if (schema != null)\n+      DataSchema schema = entry.getKey();\n+      DataSchemaLocation location = entry.getValue();\n+      if (!location.getSourceFile().getAbsolutePath().endsWith(_sourceFormat))\n       {\n-        topLevelTranslatedSchemas.put(schemaFullname, new SchemaInfo(schema, sourceFile, encode(schema)));\n+        // Skip source files not matching the format specified.\n+        continue;\n+      }\n+      if (schema instanceof NamedDataSchema)\n+      {\n+        NamedDataSchema namedDataSchema = (NamedDataSchema) schema;\n+        String schemaFullname = namedDataSchema.getFullName();\n+        LOGGER.debug(\"Loaded source schema: {}, from location: {}\", schemaFullname, location.getSourceFile().getAbsolutePath());\n+        topLevelTranslatedSchemas.put(schemaFullname, new SchemaInfo(namedDataSchema, location.getSourceFile(), encode(schema)));\n+      }\n+      else\n+      {\n+        LOGGER.error(\"Parsed a non-named schema as top-level schema.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MTI0OA=="}, "originalCommit": {"oid": "41cbc914e380964b7a537015624da4c2e5e9b6d6"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjE2ODk2OnYy", "diffSide": "LEFT", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/SchemaFormatTranslator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToyODo1M1rOHiDQdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODo0NjozOFrOHiVdCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2Njk5Ng==", "bodyText": "Is this error covered after this change?", "url": "https://github.com/linkedin/rest.li/pull/448#discussion_r505466996", "createdAt": "2020-10-15T11:28:53Z", "author": {"login": "junchuanwang"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/SchemaFormatTranslator.java", "diffHunk": "@@ -345,46 +346,6 @@ private void writeTranslatedSchemasToDirectory(\n     }\n   }\n \n-  private static NamedDataSchema checkForErrorsAndGetTopLevelSchema(\n-      File file, String schemaFullname, PegasusSchemaParser parser, StringBuilder errorMessages)\n-  {\n-    StringBuilder errorMessageBuilder = parser.errorMessageBuilder();\n-    if (errorMessageBuilder.length() > 0)\n-    {\n-      errorMessages.append(\"Failed to parse schema: \")\n-          .append(file.getAbsolutePath())\n-          .append(\"\\nfullname: \")\n-          .append(schemaFullname)\n-          .append(\"\\nerrors: \")\n-          .append(errorMessageBuilder.toString())\n-          .append(\"\\n\");\n-      return null;\n-    }\n-    List<DataSchema> topLevelSchemas = parser.topLevelDataSchemas();\n-    if (topLevelSchemas.size() != 1)\n-    {\n-      errorMessages.append(\"Expected one top level schema for: \")\n-          .append(file.getAbsolutePath())\n-          .append(\" but got \")\n-          .append(topLevelSchemas.size())\n-          .append(\" schemas.\")\n-          .append(\"\\n\");\n-      return  null;\n-    }\n-    DataSchema sourceSchema = topLevelSchemas.get(0);\n-    if (!(sourceSchema instanceof NamedDataSchema) ||\n-        !((NamedDataSchema) sourceSchema).getFullName().equals(schemaFullname))\n-    {\n-      errorMessages.append(\"Parsed top-level schema does not match the schema file name. File: \")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41cbc914e380964b7a537015624da4c2e5e9b6d6"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc2NTEyOA==", "bodyText": "Yes, done here: https://github.com/linkedin/rest.li/blob/master/generator/src/main/java/com/linkedin/pegasus/generator/FileFormatDataSchemaParser.java#L177", "url": "https://github.com/linkedin/rest.li/pull/448#discussion_r505765128", "createdAt": "2020-10-15T18:46:38Z", "author": {"login": "karthikbalasub"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/SchemaFormatTranslator.java", "diffHunk": "@@ -345,46 +346,6 @@ private void writeTranslatedSchemasToDirectory(\n     }\n   }\n \n-  private static NamedDataSchema checkForErrorsAndGetTopLevelSchema(\n-      File file, String schemaFullname, PegasusSchemaParser parser, StringBuilder errorMessages)\n-  {\n-    StringBuilder errorMessageBuilder = parser.errorMessageBuilder();\n-    if (errorMessageBuilder.length() > 0)\n-    {\n-      errorMessages.append(\"Failed to parse schema: \")\n-          .append(file.getAbsolutePath())\n-          .append(\"\\nfullname: \")\n-          .append(schemaFullname)\n-          .append(\"\\nerrors: \")\n-          .append(errorMessageBuilder.toString())\n-          .append(\"\\n\");\n-      return null;\n-    }\n-    List<DataSchema> topLevelSchemas = parser.topLevelDataSchemas();\n-    if (topLevelSchemas.size() != 1)\n-    {\n-      errorMessages.append(\"Expected one top level schema for: \")\n-          .append(file.getAbsolutePath())\n-          .append(\" but got \")\n-          .append(topLevelSchemas.size())\n-          .append(\" schemas.\")\n-          .append(\"\\n\");\n-      return  null;\n-    }\n-    DataSchema sourceSchema = topLevelSchemas.get(0);\n-    if (!(sourceSchema instanceof NamedDataSchema) ||\n-        !((NamedDataSchema) sourceSchema).getFullName().equals(schemaFullname))\n-    {\n-      errorMessages.append(\"Parsed top-level schema does not match the schema file name. File: \")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2Njk5Ng=="}, "originalCommit": {"oid": "41cbc914e380964b7a537015624da4c2e5e9b6d6"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzMxMTc1OnYy", "diffSide": "RIGHT", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/SchemaFormatTranslator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNTo0Mzo0MFrOHiOSPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODo1MTowNlrOHiVm-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY0NzY3Nw==", "bodyText": "nit: space after for", "url": "https://github.com/linkedin/rest.li/pull/448#discussion_r505647677", "createdAt": "2020-10-15T15:43:40Z", "author": {"login": "nickibi"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/SchemaFormatTranslator.java", "diffHunk": "@@ -207,32 +209,31 @@ private void translateFiles() throws IOException, InterruptedException\n   private Map<String, SchemaInfo> getTopLevelSchemaToTranslatedSchemaMap() throws IOException\n   {\n     Map<String, SchemaInfo> topLevelTranslatedSchemas = new HashMap<>();\n+    DataSchemaParser dataSchemaParser = new DataSchemaParser(_resolverPath);\n+    DataSchemaParser.ParseResult parsedSources = dataSchemaParser.parseSources(\n+        new String[]{_sourceDir.getAbsolutePath()});\n \n-    Iterator<File> iter = FileUtils.iterateFiles(_sourceDir, new String[]{_sourceFormat}, true);\n-    StringBuilder errorMessages = new StringBuilder();\n-    while(iter.hasNext())\n+    for(Map.Entry<DataSchema, DataSchemaLocation> entry : parsedSources.getSchemaAndLocations().entrySet())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41cbc914e380964b7a537015624da4c2e5e9b6d6"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcwNjExMg==", "bodyText": "Dont we have style check automatically?", "url": "https://github.com/linkedin/rest.li/pull/448#discussion_r505706112", "createdAt": "2020-10-15T17:10:55Z", "author": {"login": "BrianPin"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/SchemaFormatTranslator.java", "diffHunk": "@@ -207,32 +209,31 @@ private void translateFiles() throws IOException, InterruptedException\n   private Map<String, SchemaInfo> getTopLevelSchemaToTranslatedSchemaMap() throws IOException\n   {\n     Map<String, SchemaInfo> topLevelTranslatedSchemas = new HashMap<>();\n+    DataSchemaParser dataSchemaParser = new DataSchemaParser(_resolverPath);\n+    DataSchemaParser.ParseResult parsedSources = dataSchemaParser.parseSources(\n+        new String[]{_sourceDir.getAbsolutePath()});\n \n-    Iterator<File> iter = FileUtils.iterateFiles(_sourceDir, new String[]{_sourceFormat}, true);\n-    StringBuilder errorMessages = new StringBuilder();\n-    while(iter.hasNext())\n+    for(Map.Entry<DataSchema, DataSchemaLocation> entry : parsedSources.getSchemaAndLocations().entrySet())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY0NzY3Nw=="}, "originalCommit": {"oid": "41cbc914e380964b7a537015624da4c2e5e9b6d6"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc2NzY3NA==", "bodyText": "no automated style checks in pegasus", "url": "https://github.com/linkedin/rest.li/pull/448#discussion_r505767674", "createdAt": "2020-10-15T18:51:06Z", "author": {"login": "karthikbalasub"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/SchemaFormatTranslator.java", "diffHunk": "@@ -207,32 +209,31 @@ private void translateFiles() throws IOException, InterruptedException\n   private Map<String, SchemaInfo> getTopLevelSchemaToTranslatedSchemaMap() throws IOException\n   {\n     Map<String, SchemaInfo> topLevelTranslatedSchemas = new HashMap<>();\n+    DataSchemaParser dataSchemaParser = new DataSchemaParser(_resolverPath);\n+    DataSchemaParser.ParseResult parsedSources = dataSchemaParser.parseSources(\n+        new String[]{_sourceDir.getAbsolutePath()});\n \n-    Iterator<File> iter = FileUtils.iterateFiles(_sourceDir, new String[]{_sourceFormat}, true);\n-    StringBuilder errorMessages = new StringBuilder();\n-    while(iter.hasNext())\n+    for(Map.Entry<DataSchema, DataSchemaLocation> entry : parsedSources.getSchemaAndLocations().entrySet())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY0NzY3Nw=="}, "originalCommit": {"oid": "41cbc914e380964b7a537015624da4c2e5e9b6d6"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzQ0MDcwOnYy", "diffSide": "RIGHT", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/SchemaFormatTranslator.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjoxMjo0NFrOHiPiyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMDo0Mjo0OVrOHm4mpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2ODI5Ng==", "bodyText": "Parsing schemas in this way, we may not get expected result.\nDataSchemaParser.ParseResult (parsedSources) also contains embedded name schemas which are unnecessary to be top level schemas.", "url": "https://github.com/linkedin/rest.li/pull/448#discussion_r505668296", "createdAt": "2020-10-15T16:12:44Z", "author": {"login": "nickibi"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/SchemaFormatTranslator.java", "diffHunk": "@@ -207,32 +209,31 @@ private void translateFiles() throws IOException, InterruptedException\n   private Map<String, SchemaInfo> getTopLevelSchemaToTranslatedSchemaMap() throws IOException\n   {\n     Map<String, SchemaInfo> topLevelTranslatedSchemas = new HashMap<>();\n+    DataSchemaParser dataSchemaParser = new DataSchemaParser(_resolverPath);\n+    DataSchemaParser.ParseResult parsedSources = dataSchemaParser.parseSources(\n+        new String[]{_sourceDir.getAbsolutePath()});\n \n-    Iterator<File> iter = FileUtils.iterateFiles(_sourceDir, new String[]{_sourceFormat}, true);\n-    StringBuilder errorMessages = new StringBuilder();\n-    while(iter.hasNext())\n+    for(Map.Entry<DataSchema, DataSchemaLocation> entry : parsedSources.getSchemaAndLocations().entrySet())\n     {\n-      File sourceFile = iter.next();\n-      String relativePath = _sourceDir.toURI().relativize(sourceFile.toURI()).getPath();\n-      String relativeMinusExt = trimFileExtension(relativePath);\n-      String schemaFullname = relativeMinusExt.replace(File.separatorChar, '.');\n-\n-      // When translating files 1:1, a new resolver and parser are required for each file translated\n-      // so that a single top level output schema is matched to each input file.\n-      MultiFormatDataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(_resolverPath);\n-      PegasusSchemaParser parser = AbstractSchemaParser.parserForFileExtension(_sourceFormat, resolver);\n-      parser.parse(new FileInputStream(sourceFile));\n-      LOGGER.debug(\"Loaded source schema: {}, from location: {}\", schemaFullname, sourceFile.getAbsolutePath());\n-      NamedDataSchema schema = checkForErrorsAndGetTopLevelSchema(sourceFile, schemaFullname, parser, errorMessages);\n-      if (schema != null)\n+      DataSchema schema = entry.getKey();\n+      DataSchemaLocation location = entry.getValue();\n+      if (!location.getSourceFile().getAbsolutePath().endsWith(_sourceFormat))\n       {\n-        topLevelTranslatedSchemas.put(schemaFullname, new SchemaInfo(schema, sourceFile, encode(schema)));\n+        // Skip source files not matching the format specified.\n+        continue;\n+      }\n+      if (schema instanceof NamedDataSchema)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41cbc914e380964b7a537015624da4c2e5e9b6d6"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc2MTA3OA==", "bodyText": "+1, please consider the side effect of generated non-top level files", "url": "https://github.com/linkedin/rest.li/pull/448#discussion_r505761078", "createdAt": "2020-10-15T18:39:39Z", "author": {"login": "BrianPin"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/SchemaFormatTranslator.java", "diffHunk": "@@ -207,32 +209,31 @@ private void translateFiles() throws IOException, InterruptedException\n   private Map<String, SchemaInfo> getTopLevelSchemaToTranslatedSchemaMap() throws IOException\n   {\n     Map<String, SchemaInfo> topLevelTranslatedSchemas = new HashMap<>();\n+    DataSchemaParser dataSchemaParser = new DataSchemaParser(_resolverPath);\n+    DataSchemaParser.ParseResult parsedSources = dataSchemaParser.parseSources(\n+        new String[]{_sourceDir.getAbsolutePath()});\n \n-    Iterator<File> iter = FileUtils.iterateFiles(_sourceDir, new String[]{_sourceFormat}, true);\n-    StringBuilder errorMessages = new StringBuilder();\n-    while(iter.hasNext())\n+    for(Map.Entry<DataSchema, DataSchemaLocation> entry : parsedSources.getSchemaAndLocations().entrySet())\n     {\n-      File sourceFile = iter.next();\n-      String relativePath = _sourceDir.toURI().relativize(sourceFile.toURI()).getPath();\n-      String relativeMinusExt = trimFileExtension(relativePath);\n-      String schemaFullname = relativeMinusExt.replace(File.separatorChar, '.');\n-\n-      // When translating files 1:1, a new resolver and parser are required for each file translated\n-      // so that a single top level output schema is matched to each input file.\n-      MultiFormatDataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(_resolverPath);\n-      PegasusSchemaParser parser = AbstractSchemaParser.parserForFileExtension(_sourceFormat, resolver);\n-      parser.parse(new FileInputStream(sourceFile));\n-      LOGGER.debug(\"Loaded source schema: {}, from location: {}\", schemaFullname, sourceFile.getAbsolutePath());\n-      NamedDataSchema schema = checkForErrorsAndGetTopLevelSchema(sourceFile, schemaFullname, parser, errorMessages);\n-      if (schema != null)\n+      DataSchema schema = entry.getKey();\n+      DataSchemaLocation location = entry.getValue();\n+      if (!location.getSourceFile().getAbsolutePath().endsWith(_sourceFormat))\n       {\n-        topLevelTranslatedSchemas.put(schemaFullname, new SchemaInfo(schema, sourceFile, encode(schema)));\n+        // Skip source files not matching the format specified.\n+        continue;\n+      }\n+      if (schema instanceof NamedDataSchema)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2ODI5Ng=="}, "originalCommit": {"oid": "41cbc914e380964b7a537015624da4c2e5e9b6d6"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc2NjE1Mg==", "bodyText": "ParseResult will not contain nested schemas. See relevant logic here:\n\n  \n    \n      rest.li/generator/src/main/java/com/linkedin/pegasus/generator/FileFormatDataSchemaParser.java\n    \n    \n         Line 259\n      in\n      74121d5\n    \n    \n    \n    \n\n        \n          \n           return parser.topLevelDataSchemas(); \n        \n    \n  \n\n\nIt only adds top-level schemas to the parse result.", "url": "https://github.com/linkedin/rest.li/pull/448#discussion_r505766152", "createdAt": "2020-10-15T18:48:33Z", "author": {"login": "karthikbalasub"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/SchemaFormatTranslator.java", "diffHunk": "@@ -207,32 +209,31 @@ private void translateFiles() throws IOException, InterruptedException\n   private Map<String, SchemaInfo> getTopLevelSchemaToTranslatedSchemaMap() throws IOException\n   {\n     Map<String, SchemaInfo> topLevelTranslatedSchemas = new HashMap<>();\n+    DataSchemaParser dataSchemaParser = new DataSchemaParser(_resolverPath);\n+    DataSchemaParser.ParseResult parsedSources = dataSchemaParser.parseSources(\n+        new String[]{_sourceDir.getAbsolutePath()});\n \n-    Iterator<File> iter = FileUtils.iterateFiles(_sourceDir, new String[]{_sourceFormat}, true);\n-    StringBuilder errorMessages = new StringBuilder();\n-    while(iter.hasNext())\n+    for(Map.Entry<DataSchema, DataSchemaLocation> entry : parsedSources.getSchemaAndLocations().entrySet())\n     {\n-      File sourceFile = iter.next();\n-      String relativePath = _sourceDir.toURI().relativize(sourceFile.toURI()).getPath();\n-      String relativeMinusExt = trimFileExtension(relativePath);\n-      String schemaFullname = relativeMinusExt.replace(File.separatorChar, '.');\n-\n-      // When translating files 1:1, a new resolver and parser are required for each file translated\n-      // so that a single top level output schema is matched to each input file.\n-      MultiFormatDataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(_resolverPath);\n-      PegasusSchemaParser parser = AbstractSchemaParser.parserForFileExtension(_sourceFormat, resolver);\n-      parser.parse(new FileInputStream(sourceFile));\n-      LOGGER.debug(\"Loaded source schema: {}, from location: {}\", schemaFullname, sourceFile.getAbsolutePath());\n-      NamedDataSchema schema = checkForErrorsAndGetTopLevelSchema(sourceFile, schemaFullname, parser, errorMessages);\n-      if (schema != null)\n+      DataSchema schema = entry.getKey();\n+      DataSchemaLocation location = entry.getValue();\n+      if (!location.getSourceFile().getAbsolutePath().endsWith(_sourceFormat))\n       {\n-        topLevelTranslatedSchemas.put(schemaFullname, new SchemaInfo(schema, sourceFile, encode(schema)));\n+        // Skip source files not matching the format specified.\n+        continue;\n+      }\n+      if (schema instanceof NamedDataSchema)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2ODI5Ng=="}, "originalCommit": {"oid": "41cbc914e380964b7a537015624da4c2e5e9b6d6"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc3ODIzNg==", "bodyText": "Look at here: \n  \n    \n      rest.li/generator/src/main/java/com/linkedin/pegasus/generator/FileFormatDataSchemaParser.java\n    \n    \n         Line 139\n      in\n      894952a\n    \n    \n    \n    \n\n        \n          \n           result.getSchemaAndLocations().put(schema, entry.getValue()); \n        \n    \n  \n\n.", "url": "https://github.com/linkedin/rest.li/pull/448#discussion_r505778236", "createdAt": "2020-10-15T19:10:41Z", "author": {"login": "nickibi"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/SchemaFormatTranslator.java", "diffHunk": "@@ -207,32 +209,31 @@ private void translateFiles() throws IOException, InterruptedException\n   private Map<String, SchemaInfo> getTopLevelSchemaToTranslatedSchemaMap() throws IOException\n   {\n     Map<String, SchemaInfo> topLevelTranslatedSchemas = new HashMap<>();\n+    DataSchemaParser dataSchemaParser = new DataSchemaParser(_resolverPath);\n+    DataSchemaParser.ParseResult parsedSources = dataSchemaParser.parseSources(\n+        new String[]{_sourceDir.getAbsolutePath()});\n \n-    Iterator<File> iter = FileUtils.iterateFiles(_sourceDir, new String[]{_sourceFormat}, true);\n-    StringBuilder errorMessages = new StringBuilder();\n-    while(iter.hasNext())\n+    for(Map.Entry<DataSchema, DataSchemaLocation> entry : parsedSources.getSchemaAndLocations().entrySet())\n     {\n-      File sourceFile = iter.next();\n-      String relativePath = _sourceDir.toURI().relativize(sourceFile.toURI()).getPath();\n-      String relativeMinusExt = trimFileExtension(relativePath);\n-      String schemaFullname = relativeMinusExt.replace(File.separatorChar, '.');\n-\n-      // When translating files 1:1, a new resolver and parser are required for each file translated\n-      // so that a single top level output schema is matched to each input file.\n-      MultiFormatDataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(_resolverPath);\n-      PegasusSchemaParser parser = AbstractSchemaParser.parserForFileExtension(_sourceFormat, resolver);\n-      parser.parse(new FileInputStream(sourceFile));\n-      LOGGER.debug(\"Loaded source schema: {}, from location: {}\", schemaFullname, sourceFile.getAbsolutePath());\n-      NamedDataSchema schema = checkForErrorsAndGetTopLevelSchema(sourceFile, schemaFullname, parser, errorMessages);\n-      if (schema != null)\n+      DataSchema schema = entry.getKey();\n+      DataSchemaLocation location = entry.getValue();\n+      if (!location.getSourceFile().getAbsolutePath().endsWith(_sourceFormat))\n       {\n-        topLevelTranslatedSchemas.put(schemaFullname, new SchemaInfo(schema, sourceFile, encode(schema)));\n+        // Skip source files not matching the format specified.\n+        continue;\n+      }\n+      if (schema instanceof NamedDataSchema)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2ODI5Ng=="}, "originalCommit": {"oid": "41cbc914e380964b7a537015624da4c2e5e9b6d6"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkwNDA2Nw==", "bodyText": "I think ybi means in the end of the parsing process, there will still be more non-top level schemas", "url": "https://github.com/linkedin/rest.li/pull/448#discussion_r505904067", "createdAt": "2020-10-15T22:40:27Z", "author": {"login": "BrianPin"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/SchemaFormatTranslator.java", "diffHunk": "@@ -207,32 +209,31 @@ private void translateFiles() throws IOException, InterruptedException\n   private Map<String, SchemaInfo> getTopLevelSchemaToTranslatedSchemaMap() throws IOException\n   {\n     Map<String, SchemaInfo> topLevelTranslatedSchemas = new HashMap<>();\n+    DataSchemaParser dataSchemaParser = new DataSchemaParser(_resolverPath);\n+    DataSchemaParser.ParseResult parsedSources = dataSchemaParser.parseSources(\n+        new String[]{_sourceDir.getAbsolutePath()});\n \n-    Iterator<File> iter = FileUtils.iterateFiles(_sourceDir, new String[]{_sourceFormat}, true);\n-    StringBuilder errorMessages = new StringBuilder();\n-    while(iter.hasNext())\n+    for(Map.Entry<DataSchema, DataSchemaLocation> entry : parsedSources.getSchemaAndLocations().entrySet())\n     {\n-      File sourceFile = iter.next();\n-      String relativePath = _sourceDir.toURI().relativize(sourceFile.toURI()).getPath();\n-      String relativeMinusExt = trimFileExtension(relativePath);\n-      String schemaFullname = relativeMinusExt.replace(File.separatorChar, '.');\n-\n-      // When translating files 1:1, a new resolver and parser are required for each file translated\n-      // so that a single top level output schema is matched to each input file.\n-      MultiFormatDataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(_resolverPath);\n-      PegasusSchemaParser parser = AbstractSchemaParser.parserForFileExtension(_sourceFormat, resolver);\n-      parser.parse(new FileInputStream(sourceFile));\n-      LOGGER.debug(\"Loaded source schema: {}, from location: {}\", schemaFullname, sourceFile.getAbsolutePath());\n-      NamedDataSchema schema = checkForErrorsAndGetTopLevelSchema(sourceFile, schemaFullname, parser, errorMessages);\n-      if (schema != null)\n+      DataSchema schema = entry.getKey();\n+      DataSchemaLocation location = entry.getValue();\n+      if (!location.getSourceFile().getAbsolutePath().endsWith(_sourceFormat))\n       {\n-        topLevelTranslatedSchemas.put(schemaFullname, new SchemaInfo(schema, sourceFile, encode(schema)));\n+        // Skip source files not matching the format specified.\n+        continue;\n+      }\n+      if (schema instanceof NamedDataSchema)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2ODI5Ng=="}, "originalCommit": {"oid": "41cbc914e380964b7a537015624da4c2e5e9b6d6"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUyODIwMw==", "bodyText": "Good catch. Infact the schema translator tests were failing because of that!\nFixed the logic now to check for top level schemas and also ignore schemas loaded from resolver path (not in source dir).", "url": "https://github.com/linkedin/rest.li/pull/448#discussion_r510528203", "createdAt": "2020-10-23T00:13:17Z", "author": {"login": "karthikbalasub"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/SchemaFormatTranslator.java", "diffHunk": "@@ -207,32 +209,31 @@ private void translateFiles() throws IOException, InterruptedException\n   private Map<String, SchemaInfo> getTopLevelSchemaToTranslatedSchemaMap() throws IOException\n   {\n     Map<String, SchemaInfo> topLevelTranslatedSchemas = new HashMap<>();\n+    DataSchemaParser dataSchemaParser = new DataSchemaParser(_resolverPath);\n+    DataSchemaParser.ParseResult parsedSources = dataSchemaParser.parseSources(\n+        new String[]{_sourceDir.getAbsolutePath()});\n \n-    Iterator<File> iter = FileUtils.iterateFiles(_sourceDir, new String[]{_sourceFormat}, true);\n-    StringBuilder errorMessages = new StringBuilder();\n-    while(iter.hasNext())\n+    for(Map.Entry<DataSchema, DataSchemaLocation> entry : parsedSources.getSchemaAndLocations().entrySet())\n     {\n-      File sourceFile = iter.next();\n-      String relativePath = _sourceDir.toURI().relativize(sourceFile.toURI()).getPath();\n-      String relativeMinusExt = trimFileExtension(relativePath);\n-      String schemaFullname = relativeMinusExt.replace(File.separatorChar, '.');\n-\n-      // When translating files 1:1, a new resolver and parser are required for each file translated\n-      // so that a single top level output schema is matched to each input file.\n-      MultiFormatDataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(_resolverPath);\n-      PegasusSchemaParser parser = AbstractSchemaParser.parserForFileExtension(_sourceFormat, resolver);\n-      parser.parse(new FileInputStream(sourceFile));\n-      LOGGER.debug(\"Loaded source schema: {}, from location: {}\", schemaFullname, sourceFile.getAbsolutePath());\n-      NamedDataSchema schema = checkForErrorsAndGetTopLevelSchema(sourceFile, schemaFullname, parser, errorMessages);\n-      if (schema != null)\n+      DataSchema schema = entry.getKey();\n+      DataSchemaLocation location = entry.getValue();\n+      if (!location.getSourceFile().getAbsolutePath().endsWith(_sourceFormat))\n       {\n-        topLevelTranslatedSchemas.put(schemaFullname, new SchemaInfo(schema, sourceFile, encode(schema)));\n+        // Skip source files not matching the format specified.\n+        continue;\n+      }\n+      if (schema instanceof NamedDataSchema)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2ODI5Ng=="}, "originalCommit": {"oid": "41cbc914e380964b7a537015624da4c2e5e9b6d6"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUzNDA3OQ==", "bodyText": "In the isTopLevelSchema method, we have already checked whether schema is NamedDataSchema, do we still need to do the same check here?", "url": "https://github.com/linkedin/rest.li/pull/448#discussion_r510534079", "createdAt": "2020-10-23T00:37:59Z", "author": {"login": "nickibi"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/SchemaFormatTranslator.java", "diffHunk": "@@ -207,32 +209,31 @@ private void translateFiles() throws IOException, InterruptedException\n   private Map<String, SchemaInfo> getTopLevelSchemaToTranslatedSchemaMap() throws IOException\n   {\n     Map<String, SchemaInfo> topLevelTranslatedSchemas = new HashMap<>();\n+    DataSchemaParser dataSchemaParser = new DataSchemaParser(_resolverPath);\n+    DataSchemaParser.ParseResult parsedSources = dataSchemaParser.parseSources(\n+        new String[]{_sourceDir.getAbsolutePath()});\n \n-    Iterator<File> iter = FileUtils.iterateFiles(_sourceDir, new String[]{_sourceFormat}, true);\n-    StringBuilder errorMessages = new StringBuilder();\n-    while(iter.hasNext())\n+    for(Map.Entry<DataSchema, DataSchemaLocation> entry : parsedSources.getSchemaAndLocations().entrySet())\n     {\n-      File sourceFile = iter.next();\n-      String relativePath = _sourceDir.toURI().relativize(sourceFile.toURI()).getPath();\n-      String relativeMinusExt = trimFileExtension(relativePath);\n-      String schemaFullname = relativeMinusExt.replace(File.separatorChar, '.');\n-\n-      // When translating files 1:1, a new resolver and parser are required for each file translated\n-      // so that a single top level output schema is matched to each input file.\n-      MultiFormatDataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(_resolverPath);\n-      PegasusSchemaParser parser = AbstractSchemaParser.parserForFileExtension(_sourceFormat, resolver);\n-      parser.parse(new FileInputStream(sourceFile));\n-      LOGGER.debug(\"Loaded source schema: {}, from location: {}\", schemaFullname, sourceFile.getAbsolutePath());\n-      NamedDataSchema schema = checkForErrorsAndGetTopLevelSchema(sourceFile, schemaFullname, parser, errorMessages);\n-      if (schema != null)\n+      DataSchema schema = entry.getKey();\n+      DataSchemaLocation location = entry.getValue();\n+      if (!location.getSourceFile().getAbsolutePath().endsWith(_sourceFormat))\n       {\n-        topLevelTranslatedSchemas.put(schemaFullname, new SchemaInfo(schema, sourceFile, encode(schema)));\n+        // Skip source files not matching the format specified.\n+        continue;\n+      }\n+      if (schema instanceof NamedDataSchema)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2ODI5Ng=="}, "originalCommit": {"oid": "41cbc914e380964b7a537015624da4c2e5e9b6d6"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUzNTMzMw==", "bodyText": "removed the check, it was redundant.", "url": "https://github.com/linkedin/rest.li/pull/448#discussion_r510535333", "createdAt": "2020-10-23T00:42:49Z", "author": {"login": "karthikbalasub"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/SchemaFormatTranslator.java", "diffHunk": "@@ -207,32 +209,31 @@ private void translateFiles() throws IOException, InterruptedException\n   private Map<String, SchemaInfo> getTopLevelSchemaToTranslatedSchemaMap() throws IOException\n   {\n     Map<String, SchemaInfo> topLevelTranslatedSchemas = new HashMap<>();\n+    DataSchemaParser dataSchemaParser = new DataSchemaParser(_resolverPath);\n+    DataSchemaParser.ParseResult parsedSources = dataSchemaParser.parseSources(\n+        new String[]{_sourceDir.getAbsolutePath()});\n \n-    Iterator<File> iter = FileUtils.iterateFiles(_sourceDir, new String[]{_sourceFormat}, true);\n-    StringBuilder errorMessages = new StringBuilder();\n-    while(iter.hasNext())\n+    for(Map.Entry<DataSchema, DataSchemaLocation> entry : parsedSources.getSchemaAndLocations().entrySet())\n     {\n-      File sourceFile = iter.next();\n-      String relativePath = _sourceDir.toURI().relativize(sourceFile.toURI()).getPath();\n-      String relativeMinusExt = trimFileExtension(relativePath);\n-      String schemaFullname = relativeMinusExt.replace(File.separatorChar, '.');\n-\n-      // When translating files 1:1, a new resolver and parser are required for each file translated\n-      // so that a single top level output schema is matched to each input file.\n-      MultiFormatDataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(_resolverPath);\n-      PegasusSchemaParser parser = AbstractSchemaParser.parserForFileExtension(_sourceFormat, resolver);\n-      parser.parse(new FileInputStream(sourceFile));\n-      LOGGER.debug(\"Loaded source schema: {}, from location: {}\", schemaFullname, sourceFile.getAbsolutePath());\n-      NamedDataSchema schema = checkForErrorsAndGetTopLevelSchema(sourceFile, schemaFullname, parser, errorMessages);\n-      if (schema != null)\n+      DataSchema schema = entry.getKey();\n+      DataSchemaLocation location = entry.getValue();\n+      if (!location.getSourceFile().getAbsolutePath().endsWith(_sourceFormat))\n       {\n-        topLevelTranslatedSchemas.put(schemaFullname, new SchemaInfo(schema, sourceFile, encode(schema)));\n+        // Skip source files not matching the format specified.\n+        continue;\n+      }\n+      if (schema instanceof NamedDataSchema)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2ODI5Ng=="}, "originalCommit": {"oid": "41cbc914e380964b7a537015624da4c2e5e9b6d6"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODg3MjgzOnYy", "diffSide": "RIGHT", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/SchemaFormatTranslator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMjoyODo0NlrOHidrsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMDoxNDoyOVrOHm4L4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5OTk1NQ==", "bodyText": "Is it worth to just skip the error and keep looping?", "url": "https://github.com/linkedin/rest.li/pull/448#discussion_r505899955", "createdAt": "2020-10-15T22:28:46Z", "author": {"login": "BrianPin"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/SchemaFormatTranslator.java", "diffHunk": "@@ -207,32 +209,31 @@ private void translateFiles() throws IOException, InterruptedException\n   private Map<String, SchemaInfo> getTopLevelSchemaToTranslatedSchemaMap() throws IOException\n   {\n     Map<String, SchemaInfo> topLevelTranslatedSchemas = new HashMap<>();\n+    DataSchemaParser dataSchemaParser = new DataSchemaParser(_resolverPath);\n+    DataSchemaParser.ParseResult parsedSources = dataSchemaParser.parseSources(\n+        new String[]{_sourceDir.getAbsolutePath()});\n \n-    Iterator<File> iter = FileUtils.iterateFiles(_sourceDir, new String[]{_sourceFormat}, true);\n-    StringBuilder errorMessages = new StringBuilder();\n-    while(iter.hasNext())\n+    for(Map.Entry<DataSchema, DataSchemaLocation> entry : parsedSources.getSchemaAndLocations().entrySet())\n     {\n-      File sourceFile = iter.next();\n-      String relativePath = _sourceDir.toURI().relativize(sourceFile.toURI()).getPath();\n-      String relativeMinusExt = trimFileExtension(relativePath);\n-      String schemaFullname = relativeMinusExt.replace(File.separatorChar, '.');\n-\n-      // When translating files 1:1, a new resolver and parser are required for each file translated\n-      // so that a single top level output schema is matched to each input file.\n-      MultiFormatDataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(_resolverPath);\n-      PegasusSchemaParser parser = AbstractSchemaParser.parserForFileExtension(_sourceFormat, resolver);\n-      parser.parse(new FileInputStream(sourceFile));\n-      LOGGER.debug(\"Loaded source schema: {}, from location: {}\", schemaFullname, sourceFile.getAbsolutePath());\n-      NamedDataSchema schema = checkForErrorsAndGetTopLevelSchema(sourceFile, schemaFullname, parser, errorMessages);\n-      if (schema != null)\n+      DataSchema schema = entry.getKey();\n+      DataSchemaLocation location = entry.getValue();\n+      if (!location.getSourceFile().getAbsolutePath().endsWith(_sourceFormat))\n       {\n-        topLevelTranslatedSchemas.put(schemaFullname, new SchemaInfo(schema, sourceFile, encode(schema)));\n+        // Skip source files not matching the format specified.\n+        continue;\n+      }\n+      if (schema instanceof NamedDataSchema)\n+      {\n+        NamedDataSchema namedDataSchema = (NamedDataSchema) schema;\n+        String schemaFullname = namedDataSchema.getFullName();\n+        LOGGER.debug(\"Loaded source schema: {}, from location: {}\", schemaFullname, location.getSourceFile().getAbsolutePath());\n+        topLevelTranslatedSchemas.put(schemaFullname, new SchemaInfo(namedDataSchema, location.getSourceFile(), encode(schema)));\n+      }\n+      else\n+      {\n+        LOGGER.error(\"Parsed a non-named schema as top-level schema.\");\n+        System.exit(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41cbc914e380964b7a537015624da4c2e5e9b6d6"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkwMTQ5OQ==", "bodyText": "No, it is a translator. It should have 1 to 1 translation. If there is a non-named schema as a top level schema, it means something wrong. We should throw exception not skip it.", "url": "https://github.com/linkedin/rest.li/pull/448#discussion_r505901499", "createdAt": "2020-10-15T22:33:21Z", "author": {"login": "nickibi"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/SchemaFormatTranslator.java", "diffHunk": "@@ -207,32 +209,31 @@ private void translateFiles() throws IOException, InterruptedException\n   private Map<String, SchemaInfo> getTopLevelSchemaToTranslatedSchemaMap() throws IOException\n   {\n     Map<String, SchemaInfo> topLevelTranslatedSchemas = new HashMap<>();\n+    DataSchemaParser dataSchemaParser = new DataSchemaParser(_resolverPath);\n+    DataSchemaParser.ParseResult parsedSources = dataSchemaParser.parseSources(\n+        new String[]{_sourceDir.getAbsolutePath()});\n \n-    Iterator<File> iter = FileUtils.iterateFiles(_sourceDir, new String[]{_sourceFormat}, true);\n-    StringBuilder errorMessages = new StringBuilder();\n-    while(iter.hasNext())\n+    for(Map.Entry<DataSchema, DataSchemaLocation> entry : parsedSources.getSchemaAndLocations().entrySet())\n     {\n-      File sourceFile = iter.next();\n-      String relativePath = _sourceDir.toURI().relativize(sourceFile.toURI()).getPath();\n-      String relativeMinusExt = trimFileExtension(relativePath);\n-      String schemaFullname = relativeMinusExt.replace(File.separatorChar, '.');\n-\n-      // When translating files 1:1, a new resolver and parser are required for each file translated\n-      // so that a single top level output schema is matched to each input file.\n-      MultiFormatDataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(_resolverPath);\n-      PegasusSchemaParser parser = AbstractSchemaParser.parserForFileExtension(_sourceFormat, resolver);\n-      parser.parse(new FileInputStream(sourceFile));\n-      LOGGER.debug(\"Loaded source schema: {}, from location: {}\", schemaFullname, sourceFile.getAbsolutePath());\n-      NamedDataSchema schema = checkForErrorsAndGetTopLevelSchema(sourceFile, schemaFullname, parser, errorMessages);\n-      if (schema != null)\n+      DataSchema schema = entry.getKey();\n+      DataSchemaLocation location = entry.getValue();\n+      if (!location.getSourceFile().getAbsolutePath().endsWith(_sourceFormat))\n       {\n-        topLevelTranslatedSchemas.put(schemaFullname, new SchemaInfo(schema, sourceFile, encode(schema)));\n+        // Skip source files not matching the format specified.\n+        continue;\n+      }\n+      if (schema instanceof NamedDataSchema)\n+      {\n+        NamedDataSchema namedDataSchema = (NamedDataSchema) schema;\n+        String schemaFullname = namedDataSchema.getFullName();\n+        LOGGER.debug(\"Loaded source schema: {}, from location: {}\", schemaFullname, location.getSourceFile().getAbsolutePath());\n+        topLevelTranslatedSchemas.put(schemaFullname, new SchemaInfo(namedDataSchema, location.getSourceFile(), encode(schema)));\n+      }\n+      else\n+      {\n+        LOGGER.error(\"Parsed a non-named schema as top-level schema.\");\n+        System.exit(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5OTk1NQ=="}, "originalCommit": {"oid": "41cbc914e380964b7a537015624da4c2e5e9b6d6"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUyODQ4Mw==", "bodyText": "This check is mainly a failsafe. The DataSchemaParse::parseSources logic already checks for this and includes errors for all schemas, so this would never be hit.", "url": "https://github.com/linkedin/rest.li/pull/448#discussion_r510528483", "createdAt": "2020-10-23T00:14:29Z", "author": {"login": "karthikbalasub"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/SchemaFormatTranslator.java", "diffHunk": "@@ -207,32 +209,31 @@ private void translateFiles() throws IOException, InterruptedException\n   private Map<String, SchemaInfo> getTopLevelSchemaToTranslatedSchemaMap() throws IOException\n   {\n     Map<String, SchemaInfo> topLevelTranslatedSchemas = new HashMap<>();\n+    DataSchemaParser dataSchemaParser = new DataSchemaParser(_resolverPath);\n+    DataSchemaParser.ParseResult parsedSources = dataSchemaParser.parseSources(\n+        new String[]{_sourceDir.getAbsolutePath()});\n \n-    Iterator<File> iter = FileUtils.iterateFiles(_sourceDir, new String[]{_sourceFormat}, true);\n-    StringBuilder errorMessages = new StringBuilder();\n-    while(iter.hasNext())\n+    for(Map.Entry<DataSchema, DataSchemaLocation> entry : parsedSources.getSchemaAndLocations().entrySet())\n     {\n-      File sourceFile = iter.next();\n-      String relativePath = _sourceDir.toURI().relativize(sourceFile.toURI()).getPath();\n-      String relativeMinusExt = trimFileExtension(relativePath);\n-      String schemaFullname = relativeMinusExt.replace(File.separatorChar, '.');\n-\n-      // When translating files 1:1, a new resolver and parser are required for each file translated\n-      // so that a single top level output schema is matched to each input file.\n-      MultiFormatDataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(_resolverPath);\n-      PegasusSchemaParser parser = AbstractSchemaParser.parserForFileExtension(_sourceFormat, resolver);\n-      parser.parse(new FileInputStream(sourceFile));\n-      LOGGER.debug(\"Loaded source schema: {}, from location: {}\", schemaFullname, sourceFile.getAbsolutePath());\n-      NamedDataSchema schema = checkForErrorsAndGetTopLevelSchema(sourceFile, schemaFullname, parser, errorMessages);\n-      if (schema != null)\n+      DataSchema schema = entry.getKey();\n+      DataSchemaLocation location = entry.getValue();\n+      if (!location.getSourceFile().getAbsolutePath().endsWith(_sourceFormat))\n       {\n-        topLevelTranslatedSchemas.put(schemaFullname, new SchemaInfo(schema, sourceFile, encode(schema)));\n+        // Skip source files not matching the format specified.\n+        continue;\n+      }\n+      if (schema instanceof NamedDataSchema)\n+      {\n+        NamedDataSchema namedDataSchema = (NamedDataSchema) schema;\n+        String schemaFullname = namedDataSchema.getFullName();\n+        LOGGER.debug(\"Loaded source schema: {}, from location: {}\", schemaFullname, location.getSourceFile().getAbsolutePath());\n+        topLevelTranslatedSchemas.put(schemaFullname, new SchemaInfo(namedDataSchema, location.getSourceFile(), encode(schema)));\n+      }\n+      else\n+      {\n+        LOGGER.error(\"Parsed a non-named schema as top-level schema.\");\n+        System.exit(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5OTk1NQ=="}, "originalCommit": {"oid": "41cbc914e380964b7a537015624da4c2e5e9b6d6"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODA4MTQyOnYy", "diffSide": "RIGHT", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/SchemaFormatTranslator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMDozODowMlrOHm4hyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMDozODowMlrOHm4hyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUzNDA5MQ==", "bodyText": "nit: remove extra line", "url": "https://github.com/linkedin/rest.li/pull/448#discussion_r510534091", "createdAt": "2020-10-23T00:38:02Z", "author": {"login": "nickibi"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/SchemaFormatTranslator.java", "diffHunk": "@@ -207,36 +206,67 @@ private void translateFiles() throws IOException, InterruptedException\n   private Map<String, SchemaInfo> getTopLevelSchemaToTranslatedSchemaMap() throws IOException\n   {\n     Map<String, SchemaInfo> topLevelTranslatedSchemas = new HashMap<>();\n+    DataSchemaParser dataSchemaParser = new DataSchemaParser(_resolverPath);\n+    DataSchemaParser.ParseResult parsedSources = dataSchemaParser.parseSources(\n+        new String[]{_sourceDir.getAbsolutePath()});\n \n-    Iterator<File> iter = FileUtils.iterateFiles(_sourceDir, new String[]{_sourceFormat}, true);\n-    StringBuilder errorMessages = new StringBuilder();\n-    while(iter.hasNext())\n+    for (Map.Entry<DataSchema, DataSchemaLocation> entry : parsedSources.getSchemaAndLocations().entrySet())\n     {\n-      File sourceFile = iter.next();\n-      String relativePath = _sourceDir.toURI().relativize(sourceFile.toURI()).getPath();\n-      String relativeMinusExt = trimFileExtension(relativePath);\n-      String schemaFullname = relativeMinusExt.replace(File.separatorChar, '.');\n-\n-      // When translating files 1:1, a new resolver and parser are required for each file translated\n-      // so that a single top level output schema is matched to each input file.\n-      MultiFormatDataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(_resolverPath);\n-      PegasusSchemaParser parser = AbstractSchemaParser.parserForFileExtension(_sourceFormat, resolver);\n-      parser.parse(new FileInputStream(sourceFile));\n-      LOGGER.debug(\"Loaded source schema: {}, from location: {}\", schemaFullname, sourceFile.getAbsolutePath());\n-      NamedDataSchema schema = checkForErrorsAndGetTopLevelSchema(sourceFile, schemaFullname, parser, errorMessages);\n-      if (schema != null)\n+      DataSchema schema = entry.getKey();\n+      DataSchemaLocation location = entry.getValue();\n+      // DataSchemaParse::parseSources returns all schemas from the source dir and the schemas referenced by it.\n+      // For translation we need to skip the following schemas:\n+      //   - From source files not matching the source format specified.\n+      //   - Schemas not loaded from the source dir provided as input.\n+      //   - Nested schemas.\n+      if (!location.getSourceFile().getAbsolutePath().endsWith(_sourceFormat) ||\n+          !location.toString().startsWith(_sourceDir.getAbsolutePath()) ||\n+          !isTopLevelSchema(schema, location))\n       {\n-        topLevelTranslatedSchemas.put(schemaFullname, new SchemaInfo(schema, sourceFile, encode(schema)));\n+        continue;\n+      }\n+      if (schema instanceof NamedDataSchema)\n+      {\n+        NamedDataSchema namedDataSchema = (NamedDataSchema) schema;\n+        String schemaFullname = namedDataSchema.getFullName();\n+        LOGGER.debug(\"Loaded source schema: {}, from location: {}\", schemaFullname, location.getSourceFile().getAbsolutePath());\n+        topLevelTranslatedSchemas.put(schemaFullname, new SchemaInfo(namedDataSchema, location.getSourceFile(), encode(schema)));\n+      }\n+      else\n+      {\n+        LOGGER.error(\"Parsed a non-named schema as top-level schema. Location: {}\", location.getSourceFile().getAbsolutePath());\n+        System.exit(1);\n       }\n     }\n-    if (errorMessages.length() > 0)\n+    return topLevelTranslatedSchemas;\n+  }\n+\n+  /**\n+   * Returns true if the schema name matches the file name of the location, indicating the schema is a top-level\n+   * schema.\n+   */\n+  private boolean isTopLevelSchema(DataSchema schema, DataSchemaLocation location)\n+  {\n+    if (!(schema instanceof NamedDataSchema))\n     {\n-      LOGGER.error(errorMessages.toString());\n-      System.exit(1);\n+      // Top-level schemas should be named.\n+      return false;\n     }\n-    return topLevelTranslatedSchemas;\n+    NamedDataSchema namedDataSchema = (NamedDataSchema) schema;\n+    String namespace = namedDataSchema.getNamespace();\n+    String path = location.toString();\n+    if (!FileUtil.removeFileExtension(path.substring(path.lastIndexOf(File.separator) + 1)).equalsIgnoreCase(namedDataSchema.getName()))\n+    {\n+      // Schema name didn't match.\n+      return false;\n+    }\n+\n+    final String parent = path.substring(0, path.lastIndexOf(File.separator));\n+    // Finally check if namespace matches.\n+    return parent.endsWith(namespace.replace('.', File.separatorChar));\n   }\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d9a5afed3971be1dec2b8f42cc28a0787e19fe"}, "originalPosition": 113}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 405, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}