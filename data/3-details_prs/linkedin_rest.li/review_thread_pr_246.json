{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NTg2MTc2", "number": 246, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMToxNDo0NlrODtSn-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNDoyNjowMFrODtXx5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODE3NjU3OnYy", "diffSide": "RIGHT", "path": "restli-tools/src/test/java/com/linkedin/restli/tools/clientgen/TestRestRequestBuilderGeneratorEntryPoint.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMToxNDo0NlrOF-ofpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMTo0NDo0MFrOF-pXeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIxOTQ5Mg==", "bodyText": "Add license", "url": "https://github.com/linkedin/rest.li/pull/246#discussion_r401219492", "createdAt": "2020-03-31T21:14:46Z", "author": {"login": "evanw555"}, "path": "restli-tools/src/test/java/com/linkedin/restli/tools/clientgen/TestRestRequestBuilderGeneratorEntryPoint.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package com.linkedin.restli.tools.clientgen;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "777098ad6aee6a6e616971a4ddd650705a06e0f6"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIzMzc4NQ==", "bodyText": "Will do.", "url": "https://github.com/linkedin/rest.li/pull/246#discussion_r401233785", "createdAt": "2020-03-31T21:44:40Z", "author": {"login": "DPUkyle"}, "path": "restli-tools/src/test/java/com/linkedin/restli/tools/clientgen/TestRestRequestBuilderGeneratorEntryPoint.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package com.linkedin.restli.tools.clientgen;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIxOTQ5Mg=="}, "originalCommit": {"oid": "777098ad6aee6a6e616971a4ddd650705a06e0f6"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODE4MTAwOnYy", "diffSide": "RIGHT", "path": "restli-tools/src/test/java/com/linkedin/restli/tools/clientgen/TestRestRequestBuilderGeneratorEntryPoint.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMToxNjowOFrOF-oiZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMTo0NDowN1rOF-pWlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyMDE5Ng==", "bodyText": "Is this basically just a copy of the existing test, but using PSVM instead? Would it be possible to keep this in the existing test class, or would that be too messy you think?", "url": "https://github.com/linkedin/rest.li/pull/246#discussion_r401220196", "createdAt": "2020-03-31T21:16:08Z", "author": {"login": "evanw555"}, "path": "restli-tools/src/test/java/com/linkedin/restli/tools/clientgen/TestRestRequestBuilderGeneratorEntryPoint.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package com.linkedin.restli.tools.clientgen;\n+\n+import com.linkedin.data.schema.generator.AbstractGenerator;\n+import com.linkedin.pegasus.generator.PegasusDataTemplateGenerator;\n+import com.linkedin.restli.internal.common.RestliVersion;\n+import com.linkedin.restli.tools.ExporterTestUtils;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.Collections;\n+\n+public class TestRestRequestBuilderGeneratorEntryPoint {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "777098ad6aee6a6e616971a4ddd650705a06e0f6"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIzMzU1OQ==", "bodyText": "Due to the messiness of the sysprop backup/restore, I chose to extract it to a separate class. I'm still worried about parallelism or unwanted side-effects of this, so we should kill this.", "url": "https://github.com/linkedin/rest.li/pull/246#discussion_r401233559", "createdAt": "2020-03-31T21:44:07Z", "author": {"login": "DPUkyle"}, "path": "restli-tools/src/test/java/com/linkedin/restli/tools/clientgen/TestRestRequestBuilderGeneratorEntryPoint.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package com.linkedin.restli.tools.clientgen;\n+\n+import com.linkedin.data.schema.generator.AbstractGenerator;\n+import com.linkedin.pegasus.generator.PegasusDataTemplateGenerator;\n+import com.linkedin.restli.internal.common.RestliVersion;\n+import com.linkedin.restli.tools.ExporterTestUtils;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.Collections;\n+\n+public class TestRestRequestBuilderGeneratorEntryPoint {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyMDE5Ng=="}, "originalCommit": {"oid": "777098ad6aee6a6e616971a4ddd650705a06e0f6"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODIwNTM3OnYy", "diffSide": "RIGHT", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/clientgen/RestRequestBuilderGenerator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMToyNDowM1rOF-oxkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMTo0OTo1MVrOF-phTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyNDA4MA==", "bodyText": "Can just be package-private, right?", "url": "https://github.com/linkedin/rest.li/pull/246#discussion_r401224080", "createdAt": "2020-03-31T21:24:03Z", "author": {"login": "evanw555"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/clientgen/RestRequestBuilderGenerator.java", "diffHunk": "@@ -51,8 +51,8 @@\n  */\n public class RestRequestBuilderGenerator\n {\n-  private static final String GENERATOR_REST_GENERATE_DATATEMPLATES = \"generator.rest.generate.datatemplates\";\n-  private static final String GENERATOR_REST_GENERATE_VERSION = \"generator.rest.generate.version\";\n+  protected static final String GENERATOR_REST_GENERATE_DATATEMPLATES = \"generator.rest.generate.datatemplates\";\n+  protected static final String GENERATOR_REST_GENERATE_VERSION = \"generator.rest.generate.version\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "152fbd837600027f95e732e52ea505ca3eedc7d4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIzMzY3MQ==", "bodyText": "Yes, I'll try with default access.", "url": "https://github.com/linkedin/rest.li/pull/246#discussion_r401233671", "createdAt": "2020-03-31T21:44:22Z", "author": {"login": "DPUkyle"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/clientgen/RestRequestBuilderGenerator.java", "diffHunk": "@@ -51,8 +51,8 @@\n  */\n public class RestRequestBuilderGenerator\n {\n-  private static final String GENERATOR_REST_GENERATE_DATATEMPLATES = \"generator.rest.generate.datatemplates\";\n-  private static final String GENERATOR_REST_GENERATE_VERSION = \"generator.rest.generate.version\";\n+  protected static final String GENERATOR_REST_GENERATE_DATATEMPLATES = \"generator.rest.generate.datatemplates\";\n+  protected static final String GENERATOR_REST_GENERATE_VERSION = \"generator.rest.generate.version\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyNDA4MA=="}, "originalCommit": {"oid": "152fbd837600027f95e732e52ea505ca3eedc7d4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIzNjMwMQ==", "bodyText": "Default access works.", "url": "https://github.com/linkedin/rest.li/pull/246#discussion_r401236301", "createdAt": "2020-03-31T21:49:51Z", "author": {"login": "DPUkyle"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/clientgen/RestRequestBuilderGenerator.java", "diffHunk": "@@ -51,8 +51,8 @@\n  */\n public class RestRequestBuilderGenerator\n {\n-  private static final String GENERATOR_REST_GENERATE_DATATEMPLATES = \"generator.rest.generate.datatemplates\";\n-  private static final String GENERATOR_REST_GENERATE_VERSION = \"generator.rest.generate.version\";\n+  protected static final String GENERATOR_REST_GENERATE_DATATEMPLATES = \"generator.rest.generate.datatemplates\";\n+  protected static final String GENERATOR_REST_GENERATE_VERSION = \"generator.rest.generate.version\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyNDA4MA=="}, "originalCommit": {"oid": "152fbd837600027f95e732e52ea505ca3eedc7d4"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODIwNjA0OnYy", "diffSide": "RIGHT", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/tasks/GenerateRestClientTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMToyNDoxNFrOF-ox_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjoyOTo1NFrOF-qjFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyNDE5MA==", "bodyText": "Although this logic is quite simple, it would probably be worthwhile to refactor this into its own utility class within :gradle-plugins, something like ArgumentFileBuilder (I say \"___Builder\" to stress that static utilities are unmaintainable) which handles creating the temp file and returning its \"ID\" (e.g. @/something/something). I think this would be a simple refactoring and would allow us to easily reuse it later, plus it removes complexity from this class.", "url": "https://github.com/linkedin/rest.li/pull/246#discussion_r401224190", "createdAt": "2020-03-31T21:24:14Z", "author": {"login": "evanw555"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/tasks/GenerateRestClientTask.java", "diffHunk": "@@ -156,11 +168,26 @@ public void generate()\n         javaExecSpec.jvmArgs(\"-Dgenerator.rest.generate.version=2.0.0\"); //RestRequestBuilderGenerator.run(version)\n         javaExecSpec.jvmArgs(\"-Droot.path=\" + getProject().getRootDir().getPath());\n         javaExecSpec.args(_destinationDir.getAbsolutePath());\n-        javaExecSpec.args(files);\n+        javaExecSpec.args(sources);\n       }).assertNormalExitValue()\n     );\n   }\n \n+  /**\n+   * Helper method to generate an argument file, containing one input file per line.\n+   * This should be prefixed with '@' and passed to the final argument of RestRequestBuilderGenerator.\n+   */\n+  private File createArgFile(String prefix, List<String> files) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "152fbd837600027f95e732e52ea505ca3eedc7d4"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1MzE0MA==", "bodyText": "Added class ArgumentFileGenerator. Note that it can't live in restli-tools as pegasus-plugins has no dependency on it.", "url": "https://github.com/linkedin/rest.li/pull/246#discussion_r401253140", "createdAt": "2020-03-31T22:29:54Z", "author": {"login": "DPUkyle"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/tasks/GenerateRestClientTask.java", "diffHunk": "@@ -156,11 +168,26 @@ public void generate()\n         javaExecSpec.jvmArgs(\"-Dgenerator.rest.generate.version=2.0.0\"); //RestRequestBuilderGenerator.run(version)\n         javaExecSpec.jvmArgs(\"-Droot.path=\" + getProject().getRootDir().getPath());\n         javaExecSpec.args(_destinationDir.getAbsolutePath());\n-        javaExecSpec.args(files);\n+        javaExecSpec.args(sources);\n       }).assertNormalExitValue()\n     );\n   }\n \n+  /**\n+   * Helper method to generate an argument file, containing one input file per line.\n+   * This should be prefixed with '@' and passed to the final argument of RestRequestBuilderGenerator.\n+   */\n+  private File createArgFile(String prefix, List<String> files) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyNDE5MA=="}, "originalCommit": {"oid": "152fbd837600027f95e732e52ea505ca3eedc7d4"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODIxNDY2OnYy", "diffSide": "RIGHT", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/clientgen/RestRequestBuilderGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMToyNzoxMFrOF-o3cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjoyOToxNVrOF-qiBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyNTU4Ng==", "bodyText": "Can you add a TODO here which says that we want to refactor this tool into a nicer CLI app using Commons-CLI?", "url": "https://github.com/linkedin/rest.li/pull/246#discussion_r401225586", "createdAt": "2020-03-31T21:27:10Z", "author": {"login": "evanw555"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/clientgen/RestRequestBuilderGenerator.java", "diffHunk": "@@ -51,8 +51,8 @@\n  */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "152fbd837600027f95e732e52ea505ca3eedc7d4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1Mjg2OQ==", "bodyText": "Done (line 62)", "url": "https://github.com/linkedin/rest.li/pull/246#discussion_r401252869", "createdAt": "2020-03-31T22:29:15Z", "author": {"login": "DPUkyle"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/clientgen/RestRequestBuilderGenerator.java", "diffHunk": "@@ -51,8 +51,8 @@\n  */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyNTU4Ng=="}, "originalCommit": {"oid": "152fbd837600027f95e732e52ea505ca3eedc7d4"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODIxNDkzOnYy", "diffSide": "RIGHT", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/clientgen/RestRequestBuilderGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMToyNzoxNlrOF-o3mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjoyOTowNlrOF-qhxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyNTYyNg==", "bodyText": "Similar comment as the one above, there should be a utility class within :restli-tools which handles the parsing side of things. Although this logic here isn't too complicated, this will proactively keep this sort of stuff from exploding if we need to extend or reuse it, plus it keeps this class clean.", "url": "https://github.com/linkedin/rest.li/pull/246#discussion_r401225626", "createdAt": "2020-03-31T21:27:16Z", "author": {"login": "evanw555"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/clientgen/RestRequestBuilderGenerator.java", "diffHunk": "@@ -64,10 +64,19 @@\n   public static void main(String[] args)\n       throws IOException\n   {\n+    String[] sources = new String[0];\n+\n     if (args.length < 2)\n     {\n       _log.error(\"Usage: RestRequestBuilderGenerator targetDirectoryPath [sourceFile or sourceDirectory]+\");\n       System.exit(1);\n+    } else if (args.length == 2 && args[1].startsWith(\"@\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "152fbd837600027f95e732e52ea505ca3eedc7d4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1MjgwNA==", "bodyText": "Added class ArgumentFileProcessor", "url": "https://github.com/linkedin/rest.li/pull/246#discussion_r401252804", "createdAt": "2020-03-31T22:29:06Z", "author": {"login": "DPUkyle"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/clientgen/RestRequestBuilderGenerator.java", "diffHunk": "@@ -64,10 +64,19 @@\n   public static void main(String[] args)\n       throws IOException\n   {\n+    String[] sources = new String[0];\n+\n     if (args.length < 2)\n     {\n       _log.error(\"Usage: RestRequestBuilderGenerator targetDirectoryPath [sourceFile or sourceDirectory]+\");\n       System.exit(1);\n+    } else if (args.length == 2 && args[1].startsWith(\"@\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyNTYyNg=="}, "originalCommit": {"oid": "152fbd837600027f95e732e52ea505ca3eedc7d4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODU2MDYxOnYy", "diffSide": "RIGHT", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/internal/ArgumentFileGenerator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMzo1MToyMVrOF-sLEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNDoyMToxOVrOF-wU4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3OTc2Mg==", "bodyText": "Since this utility is only accessible within the :gradle-plugins module, I think it's safe to let this method assume the temp dir to be Task#getTemporaryDir. This would make the code simpler from the caller's POV. What do you think?\nEdit: Is it done this way because Gradle temp dirs are associated with a particular task?", "url": "https://github.com/linkedin/rest.li/pull/246#discussion_r401279762", "createdAt": "2020-03-31T23:51:21Z", "author": {"login": "evanw555"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/internal/ArgumentFileGenerator.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.pegasus.gradle.internal;\n+\n+import org.gradle.api.GradleException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.List;\n+\n+public class ArgumentFileGenerator\n+{\n+\n+  private ArgumentFileGenerator()\n+  {\n+    // prevent instantiation\n+  }\n+\n+  /**\n+   *  Helper method to generate an argument file, containing one input file per line.\n+   *  This should be later prefixed with '@' and passed to the final argument of RestRequestBuilderGenerator.\n+   *\n+   * @param prefix unique value to prepend to the arg file name\n+   * @param files the iterable to write to an arg file, one line per entry\n+   * @param tempDir the directory to hold the file (If invoked from Gradle, use org.gradle.api.Task#getTemporaryDir()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c5b5b913eb6d29165be1292c84106090ffac9de"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMwNzc1MQ==", "bodyText": "Yes I did it this way to use as few Gradle APIs as possible; if we use Task#getTempoaryDir() as default storage for the arg File, the caller would have to pass a reference to the Task object, which is kind of icky too. Let's leave it as-is.", "url": "https://github.com/linkedin/rest.li/pull/246#discussion_r401307751", "createdAt": "2020-04-01T01:35:50Z", "author": {"login": "DPUkyle"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/internal/ArgumentFileGenerator.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.pegasus.gradle.internal;\n+\n+import org.gradle.api.GradleException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.List;\n+\n+public class ArgumentFileGenerator\n+{\n+\n+  private ArgumentFileGenerator()\n+  {\n+    // prevent instantiation\n+  }\n+\n+  /**\n+   *  Helper method to generate an argument file, containing one input file per line.\n+   *  This should be later prefixed with '@' and passed to the final argument of RestRequestBuilderGenerator.\n+   *\n+   * @param prefix unique value to prepend to the arg file name\n+   * @param files the iterable to write to an arg file, one line per entry\n+   * @param tempDir the directory to hold the file (If invoked from Gradle, use org.gradle.api.Task#getTemporaryDir()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3OTc2Mg=="}, "originalCommit": {"oid": "6c5b5b913eb6d29165be1292c84106090ffac9de"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0NzgwOQ==", "bodyText": "Now I get it, makes sense.", "url": "https://github.com/linkedin/rest.li/pull/246#discussion_r401347809", "createdAt": "2020-04-01T04:21:19Z", "author": {"login": "evanw555"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/internal/ArgumentFileGenerator.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.pegasus.gradle.internal;\n+\n+import org.gradle.api.GradleException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.List;\n+\n+public class ArgumentFileGenerator\n+{\n+\n+  private ArgumentFileGenerator()\n+  {\n+    // prevent instantiation\n+  }\n+\n+  /**\n+   *  Helper method to generate an argument file, containing one input file per line.\n+   *  This should be later prefixed with '@' and passed to the final argument of RestRequestBuilderGenerator.\n+   *\n+   * @param prefix unique value to prepend to the arg file name\n+   * @param files the iterable to write to an arg file, one line per entry\n+   * @param tempDir the directory to hold the file (If invoked from Gradle, use org.gradle.api.Task#getTemporaryDir()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3OTc2Mg=="}, "originalCommit": {"oid": "6c5b5b913eb6d29165be1292c84106090ffac9de"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODU2NDEzOnYy", "diffSide": "RIGHT", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/internal/ArgumentFileGenerator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMzo1MzoxMFrOF-sNMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNDoyNToxMlrOF-wYPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI4MDMwNA==", "bodyText": "Calling this param files is confusing, since it doesn't refer to the arg file itself but rather to its inputs. I'd suggest renaming to args, entries, values, inputs, or something along those lines. In addition, we may reuse this utility later in a case where the args aren't necessarily filepaths.", "url": "https://github.com/linkedin/rest.li/pull/246#discussion_r401280304", "createdAt": "2020-03-31T23:53:10Z", "author": {"login": "evanw555"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/internal/ArgumentFileGenerator.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.pegasus.gradle.internal;\n+\n+import org.gradle.api.GradleException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.List;\n+\n+public class ArgumentFileGenerator\n+{\n+\n+  private ArgumentFileGenerator()\n+  {\n+    // prevent instantiation\n+  }\n+\n+  /**\n+   *  Helper method to generate an argument file, containing one input file per line.\n+   *  This should be later prefixed with '@' and passed to the final argument of RestRequestBuilderGenerator.\n+   *\n+   * @param prefix unique value to prepend to the arg file name\n+   * @param files the iterable to write to an arg file, one line per entry\n+   * @param tempDir the directory to hold the file (If invoked from Gradle, use org.gradle.api.Task#getTemporaryDir()\n+   * @return argument file which can be passed to a CLI or other JavaExec task\n+   */\n+  public static File createArgFile(String prefix, List<String> files, File tempDir)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c5b5b913eb6d29165be1292c84106090ffac9de"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMwODAwNw==", "bodyText": "Fair enough - although I don't intend this to become the \"restli standard\". We need to stop passing arguments via sysprops on the CLI, and use a proper framework like jcommander. I'm OK with commons-cli too if it can support the argfile syntax. Otherwise I strongly recommend jcommander.", "url": "https://github.com/linkedin/rest.li/pull/246#discussion_r401308007", "createdAt": "2020-04-01T01:36:58Z", "author": {"login": "DPUkyle"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/internal/ArgumentFileGenerator.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.pegasus.gradle.internal;\n+\n+import org.gradle.api.GradleException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.List;\n+\n+public class ArgumentFileGenerator\n+{\n+\n+  private ArgumentFileGenerator()\n+  {\n+    // prevent instantiation\n+  }\n+\n+  /**\n+   *  Helper method to generate an argument file, containing one input file per line.\n+   *  This should be later prefixed with '@' and passed to the final argument of RestRequestBuilderGenerator.\n+   *\n+   * @param prefix unique value to prepend to the arg file name\n+   * @param files the iterable to write to an arg file, one line per entry\n+   * @param tempDir the directory to hold the file (If invoked from Gradle, use org.gradle.api.Task#getTemporaryDir()\n+   * @return argument file which can be passed to a CLI or other JavaExec task\n+   */\n+  public static File createArgFile(String prefix, List<String> files, File tempDir)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI4MDMwNA=="}, "originalCommit": {"oid": "6c5b5b913eb6d29165be1292c84106090ffac9de"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0ODE1Mw==", "bodyText": "Ah, I see. So for now, this will hold us over, and we'll potentially have to use it if we run into the same issue for another task in the near future. The long-term vision will be to migrate all our tools to C-CLI or JCommander.", "url": "https://github.com/linkedin/rest.li/pull/246#discussion_r401348153", "createdAt": "2020-04-01T04:22:53Z", "author": {"login": "evanw555"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/internal/ArgumentFileGenerator.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.pegasus.gradle.internal;\n+\n+import org.gradle.api.GradleException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.List;\n+\n+public class ArgumentFileGenerator\n+{\n+\n+  private ArgumentFileGenerator()\n+  {\n+    // prevent instantiation\n+  }\n+\n+  /**\n+   *  Helper method to generate an argument file, containing one input file per line.\n+   *  This should be later prefixed with '@' and passed to the final argument of RestRequestBuilderGenerator.\n+   *\n+   * @param prefix unique value to prepend to the arg file name\n+   * @param files the iterable to write to an arg file, one line per entry\n+   * @param tempDir the directory to hold the file (If invoked from Gradle, use org.gradle.api.Task#getTemporaryDir()\n+   * @return argument file which can be passed to a CLI or other JavaExec task\n+   */\n+  public static File createArgFile(String prefix, List<String> files, File tempDir)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI4MDMwNA=="}, "originalCommit": {"oid": "6c5b5b913eb6d29165be1292c84106090ffac9de"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0ODY2OQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/linkedin/rest.li/pull/246#discussion_r401348669", "createdAt": "2020-04-01T04:25:12Z", "author": {"login": "DPUkyle"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/internal/ArgumentFileGenerator.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.pegasus.gradle.internal;\n+\n+import org.gradle.api.GradleException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.List;\n+\n+public class ArgumentFileGenerator\n+{\n+\n+  private ArgumentFileGenerator()\n+  {\n+    // prevent instantiation\n+  }\n+\n+  /**\n+   *  Helper method to generate an argument file, containing one input file per line.\n+   *  This should be later prefixed with '@' and passed to the final argument of RestRequestBuilderGenerator.\n+   *\n+   * @param prefix unique value to prepend to the arg file name\n+   * @param files the iterable to write to an arg file, one line per entry\n+   * @param tempDir the directory to hold the file (If invoked from Gradle, use org.gradle.api.Task#getTemporaryDir()\n+   * @return argument file which can be passed to a CLI or other JavaExec task\n+   */\n+  public static File createArgFile(String prefix, List<String> files, File tempDir)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI4MDMwNA=="}, "originalCommit": {"oid": "6c5b5b913eb6d29165be1292c84106090ffac9de"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTAyMTE4OnYy", "diffSide": "RIGHT", "path": "generator-test/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNDoyNjowMFrOF-wZAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNDoyODoyOVrOF-wbBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0ODg2Nw==", "bodyText": "Oh no - IntelliJ refactor got a bit too creative. Let me undo this change.", "url": "https://github.com/linkedin/rest.li/pull/246#discussion_r401348867", "createdAt": "2020-04-01T04:26:00Z", "author": {"login": "DPUkyle"}, "path": "generator-test/build.gradle", "diffHunk": "@@ -12,7 +12,7 @@ project.idea.module.testSourceDirs.add('src/test/javaPegasus')\n apply from: \"${buildScriptDirPath}/dataTemplate.gradle\"\n apply from: \"${buildScriptDirPath}/avroSchema.gradle\"\n \n-// generate pdsc files under \"unionPegasus\" directory with explicit ordering\n+// generate pdsc args under \"unionPegasus\" directory with explicit ordering", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e28daec586bbdd9d9967cf34e2ed2e048fd143"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0OTM4Mw==", "bodyText": "Fixed.", "url": "https://github.com/linkedin/rest.li/pull/246#discussion_r401349383", "createdAt": "2020-04-01T04:28:29Z", "author": {"login": "DPUkyle"}, "path": "generator-test/build.gradle", "diffHunk": "@@ -12,7 +12,7 @@ project.idea.module.testSourceDirs.add('src/test/javaPegasus')\n apply from: \"${buildScriptDirPath}/dataTemplate.gradle\"\n apply from: \"${buildScriptDirPath}/avroSchema.gradle\"\n \n-// generate pdsc files under \"unionPegasus\" directory with explicit ordering\n+// generate pdsc args under \"unionPegasus\" directory with explicit ordering", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0ODg2Nw=="}, "originalCommit": {"oid": "74e28daec586bbdd9d9967cf34e2ed2e048fd143"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 656, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}