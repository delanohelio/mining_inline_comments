{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MDM3ODMx", "number": 181, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNTo0NDo0NVrODh7CPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMzowODowNVrODi7fOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODk2ODMxOnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/util/ClusterInfoProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNTo0NDo0NVrOFs7Vhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNTo0NDo0NVrOFs7Vhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY1MzgzMQ==", "bodyText": "what do you think about providing a fully async method? One idea is that I could provide the async as a base, and the blocking/sync as a convenience.", "url": "https://github.com/linkedin/rest.li/pull/181#discussion_r382653831", "createdAt": "2020-02-21T15:44:45Z", "author": {"login": "davidhoa"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/util/ClusterInfoProvider.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+   Copyright (c) 2019 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.d2.balancer.util;\n+\n+import com.linkedin.d2.balancer.ServiceUnavailableException;\n+\n+\n+/**\n+ * ClusterInfoProvider provides a mechanism to access detailed cluster information from the D2 infrastructure.\n+ *\n+ * @author David Hoa\n+ * @version $Revision: $\n+ */\n+public interface ClusterInfoProvider\n+{\n+  String HTTPS_SCHEME = \"https\";\n+  int DEFAULT_PARTITION = 0;\n+\n+  /**\n+   * Obtain d2 cluster count\n+   * @return int\n+   */\n+  int getClusterCount(String clusterName, String scheme, int partitionId) throws ServiceUnavailableException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "144af8ba1f7a7ad93b56678c81cabb7e3007c092"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTIxOTI5OnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMzo0OToyM1rOFtz_jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMToyMDo1MVrOFt1qFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4MjA5NA==", "bodyText": "We can inline this.", "url": "https://github.com/linkedin/rest.li/pull/181#discussion_r383582094", "createdAt": "2020-02-24T23:49:23Z", "author": {"login": "zhang-chris"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancer.java", "diffHunk": "@@ -866,6 +869,30 @@ private void die(Callback<?> callback, String serviceName, String message)\n     callback.onError(new ServiceUnavailableException(serviceName, message));\n   }\n \n+  @Override\n+  public int getClusterCount(String clusterName, String scheme, int partitionId) throws ServiceUnavailableException\n+  {\n+    FutureCallback<Integer> clusterCountFutureCallback = new FutureCallback<>();\n+    Runnable callback = () ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "144af8ba1f7a7ad93b56678c81cabb7e3007c092"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwOTM2NQ==", "bodyText": "done.", "url": "https://github.com/linkedin/rest.li/pull/181#discussion_r383609365", "createdAt": "2020-02-25T01:20:51Z", "author": {"login": "davidhoa"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancer.java", "diffHunk": "@@ -866,6 +869,30 @@ private void die(Callback<?> callback, String serviceName, String message)\n     callback.onError(new ServiceUnavailableException(serviceName, message));\n   }\n \n+  @Override\n+  public int getClusterCount(String clusterName, String scheme, int partitionId) throws ServiceUnavailableException\n+  {\n+    FutureCallback<Integer> clusterCountFutureCallback = new FutureCallback<>();\n+    Runnable callback = () ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4MjA5NA=="}, "originalCommit": {"oid": "144af8ba1f7a7ad93b56678c81cabb7e3007c092"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTI0NjczOnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/util/ClusterInfoProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDowMjoyM1rOFt0QEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMToyMzozMVrOFt1s5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4NjMyMA==", "bodyText": "Are there public static variables for these already defined somewhere that we can use?", "url": "https://github.com/linkedin/rest.li/pull/181#discussion_r383586320", "createdAt": "2020-02-25T00:02:23Z", "author": {"login": "zhang-chris"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/util/ClusterInfoProvider.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+   Copyright (c) 2019 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.d2.balancer.util;\n+\n+import com.linkedin.d2.balancer.ServiceUnavailableException;\n+\n+\n+/**\n+ * ClusterInfoProvider provides a mechanism to access detailed cluster information from the D2 infrastructure.\n+ *\n+ * @author David Hoa\n+ * @version $Revision: $\n+ */\n+public interface ClusterInfoProvider\n+{\n+  String HTTPS_SCHEME = \"https\";\n+  int DEFAULT_PARTITION = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "144af8ba1f7a7ad93b56678c81cabb7e3007c092"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxMDA4NA==", "bodyText": "I switched to using DefaultPartitionAccessor.DEFAULT_PARTITION_ID, thanks for the suggestion. However, I did not find one for HTTPS_SCHEME. I added it to PropertyKeys, didn't find a better place for it.", "url": "https://github.com/linkedin/rest.li/pull/181#discussion_r383610084", "createdAt": "2020-02-25T01:23:31Z", "author": {"login": "davidhoa"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/util/ClusterInfoProvider.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+   Copyright (c) 2019 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.d2.balancer.util;\n+\n+import com.linkedin.d2.balancer.ServiceUnavailableException;\n+\n+\n+/**\n+ * ClusterInfoProvider provides a mechanism to access detailed cluster information from the D2 infrastructure.\n+ *\n+ * @author David Hoa\n+ * @version $Revision: $\n+ */\n+public interface ClusterInfoProvider\n+{\n+  String HTTPS_SCHEME = \"https\";\n+  int DEFAULT_PARTITION = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4NjMyMA=="}, "originalCommit": {"oid": "144af8ba1f7a7ad93b56678c81cabb7e3007c092"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTI1MTg1OnYy", "diffSide": "RIGHT", "path": "d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDowNToyMVrOFt0TQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMToyMzo0MVrOFt1tHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4NzEzOQ==", "bodyText": "expand imports", "url": "https://github.com/linkedin/rest.li/pull/181#discussion_r383587139", "createdAt": "2020-02-25T00:05:21Z", "author": {"login": "zhang-chris"}, "path": "d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java", "diffHunk": "@@ -101,20 +101,27 @@\n import java.util.concurrent.atomic.AtomicLong;\n import java.util.stream.Collectors;\n import java.util.stream.StreamSupport;\n+import javafx.concurrent.Service;\n import javax.annotation.Nonnull;\n import org.apache.commons.io.FileUtils;\n import org.testng.Assert;\n import org.testng.annotations.AfterSuite;\n import org.testng.annotations.BeforeSuite;\n+import org.testng.annotations.DataProvider;\n import org.testng.annotations.Test;\n \n+import static com.linkedin.d2.balancer.util.partitions.DefaultPartitionAccessor.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "144af8ba1f7a7ad93b56678c81cabb7e3007c092"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxMDE0MA==", "bodyText": "done.", "url": "https://github.com/linkedin/rest.li/pull/181#discussion_r383610140", "createdAt": "2020-02-25T01:23:41Z", "author": {"login": "davidhoa"}, "path": "d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java", "diffHunk": "@@ -101,20 +101,27 @@\n import java.util.concurrent.atomic.AtomicLong;\n import java.util.stream.Collectors;\n import java.util.stream.StreamSupport;\n+import javafx.concurrent.Service;\n import javax.annotation.Nonnull;\n import org.apache.commons.io.FileUtils;\n import org.testng.Assert;\n import org.testng.annotations.AfterSuite;\n import org.testng.annotations.BeforeSuite;\n+import org.testng.annotations.DataProvider;\n import org.testng.annotations.Test;\n \n+import static com.linkedin.d2.balancer.util.partitions.DefaultPartitionAccessor.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4NzEzOQ=="}, "originalCommit": {"oid": "144af8ba1f7a7ad93b56678c81cabb7e3007c092"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTI1NTAxOnYy", "diffSide": "RIGHT", "path": "d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDowNjo1N1rOFt0VOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMToyMzo1MVrOFt1tTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4NzY0MA==", "bodyText": "new Object[] is unnecessary.", "url": "https://github.com/linkedin/rest.li/pull/181#discussion_r383587640", "createdAt": "2020-02-25T00:06:57Z", "author": {"login": "zhang-chris"}, "path": "d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java", "diffHunk": "@@ -155,6 +162,87 @@ public void doOneTimeTearDown() throws IOException\n     }\n   }\n \n+  @DataProvider\n+  public Object[][] provideKeys()\n+  {\n+    return new Object[][] {\n+        // numHttp, numHttps, expectedNumHttp, expectedNumHttps, partitionIdForAdd, partitionIdForCheck\n+        new Object[] {0, 3, 0, 3, 0, 0},\n+        new Object[] {3, 0, 3, 0, 0, 0},\n+        new Object[] {1, 1, 1, 1, 0, 0},\n+        new Object[] {0, 0, 0, 0, 0, 0},\n+        // alter the partitions to check\n+        new Object[] {0, 3, 0, 0, 0, 1},\n+        new Object[] {3, 0, 0, 0, 0, 1},\n+        new Object[] {1, 1, 0, 0, 0, 2},\n+        new Object[] {0, 0, 0, 0, 0, 1},\n+        // alter the partitions to add and check to match\n+        new Object[] {0, 3, 0, 3, 1, 1},\n+        new Object[] {3, 0, 3, 0, 1, 1},\n+        new Object[] {1, 1, 1, 1, 2, 2},\n+        new Object[] {0, 0, 0, 0, 1, 1}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "144af8ba1f7a7ad93b56678c81cabb7e3007c092"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxMDE5MA==", "bodyText": "done", "url": "https://github.com/linkedin/rest.li/pull/181#discussion_r383610190", "createdAt": "2020-02-25T01:23:51Z", "author": {"login": "davidhoa"}, "path": "d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java", "diffHunk": "@@ -155,6 +162,87 @@ public void doOneTimeTearDown() throws IOException\n     }\n   }\n \n+  @DataProvider\n+  public Object[][] provideKeys()\n+  {\n+    return new Object[][] {\n+        // numHttp, numHttps, expectedNumHttp, expectedNumHttps, partitionIdForAdd, partitionIdForCheck\n+        new Object[] {0, 3, 0, 3, 0, 0},\n+        new Object[] {3, 0, 3, 0, 0, 0},\n+        new Object[] {1, 1, 1, 1, 0, 0},\n+        new Object[] {0, 0, 0, 0, 0, 0},\n+        // alter the partitions to check\n+        new Object[] {0, 3, 0, 0, 0, 1},\n+        new Object[] {3, 0, 0, 0, 0, 1},\n+        new Object[] {1, 1, 0, 0, 0, 2},\n+        new Object[] {0, 0, 0, 0, 0, 1},\n+        // alter the partitions to add and check to match\n+        new Object[] {0, 3, 0, 3, 1, 1},\n+        new Object[] {3, 0, 3, 0, 1, 1},\n+        new Object[] {1, 1, 1, 1, 2, 2},\n+        new Object[] {0, 0, 0, 0, 1, 1}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4NzY0MA=="}, "originalCommit": {"oid": "144af8ba1f7a7ad93b56678c81cabb7e3007c092"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTUyNzAwOnYy", "diffSide": "RIGHT", "path": "d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMzowNzowNVrOFuc7CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNzoxNToxM1rOFugU9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI1MjY4MA==", "bodyText": "reference static variables", "url": "https://github.com/linkedin/rest.li/pull/181#discussion_r384252680", "createdAt": "2020-02-26T03:07:05Z", "author": {"login": "zhang-chris"}, "path": "d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java", "diffHunk": "@@ -101,20 +100,27 @@\n import java.util.concurrent.atomic.AtomicLong;\n import java.util.stream.Collectors;\n import java.util.stream.StreamSupport;\n+import javafx.concurrent.Service;\n import javax.annotation.Nonnull;\n import org.apache.commons.io.FileUtils;\n import org.testng.Assert;\n import org.testng.annotations.AfterSuite;\n import org.testng.annotations.BeforeSuite;\n+import org.testng.annotations.DataProvider;\n import org.testng.annotations.Test;\n \n+import static com.linkedin.d2.balancer.util.partitions.DefaultPartitionAccessor.DEFAULT_PARTITION_ID;\n import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.assertNotNull;\n import static org.testng.Assert.assertTrue;\n import static org.testng.Assert.fail;\n \n public class SimpleLoadBalancerTest\n {\n+  private static final String CLUSTER1_NAME = \"cluster-1\";\n+  private static final String HTTP_SCHEME = \"http\";\n+  private static final String HTTPS_SCHEME = \"https\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "393f5b68a57f5bdfba17dc4da6c9894740e3e534"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwODQ3MQ==", "bodyText": "done.", "url": "https://github.com/linkedin/rest.li/pull/181#discussion_r384308471", "createdAt": "2020-02-26T07:15:13Z", "author": {"login": "davidhoa"}, "path": "d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java", "diffHunk": "@@ -101,20 +100,27 @@\n import java.util.concurrent.atomic.AtomicLong;\n import java.util.stream.Collectors;\n import java.util.stream.StreamSupport;\n+import javafx.concurrent.Service;\n import javax.annotation.Nonnull;\n import org.apache.commons.io.FileUtils;\n import org.testng.Assert;\n import org.testng.annotations.AfterSuite;\n import org.testng.annotations.BeforeSuite;\n+import org.testng.annotations.DataProvider;\n import org.testng.annotations.Test;\n \n+import static com.linkedin.d2.balancer.util.partitions.DefaultPartitionAccessor.DEFAULT_PARTITION_ID;\n import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.assertNotNull;\n import static org.testng.Assert.assertTrue;\n import static org.testng.Assert.fail;\n \n public class SimpleLoadBalancerTest\n {\n+  private static final String CLUSTER1_NAME = \"cluster-1\";\n+  private static final String HTTP_SCHEME = \"http\";\n+  private static final String HTTPS_SCHEME = \"https\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI1MjY4MA=="}, "originalCommit": {"oid": "393f5b68a57f5bdfba17dc4da6c9894740e3e534"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTUyODI1OnYy", "diffSide": "RIGHT", "path": "d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMzowODowNVrOFuc7zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNzoxNTo1MVrOFugV2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI1Mjg3Nw==", "bodyText": "-> new MockStore<>()\nHere and everywhere else", "url": "https://github.com/linkedin/rest.li/pull/181#discussion_r384252877", "createdAt": "2020-02-26T03:08:05Z", "author": {"login": "zhang-chris"}, "path": "d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java", "diffHunk": "@@ -155,6 +161,87 @@ public void doOneTimeTearDown() throws IOException\n     }\n   }\n \n+  @DataProvider\n+  public Object[][] provideKeys()\n+  {\n+    return new Object[][] {\n+        // numHttp, numHttps, expectedNumHttp, expectedNumHttps, partitionIdForAdd, partitionIdForCheck\n+        {0, 3, 0, 3, 0, 0},\n+        {3, 0, 3, 0, 0, 0},\n+        {1, 1, 1, 1, 0, 0},\n+        {0, 0, 0, 0, 0, 0},\n+        // alter the partitions to check\n+        {0, 3, 0, 0, 0, 1},\n+        {3, 0, 0, 0, 0, 1},\n+        {1, 1, 0, 0, 0, 2},\n+        {0, 0, 0, 0, 0, 1},\n+        // alter the partitions to add and check to match\n+        {0, 3, 0, 3, 1, 1},\n+        {3, 0, 3, 0, 1, 1},\n+        {1, 1, 1, 1, 2, 2},\n+        {0, 0, 0, 0, 1, 1}\n+    };\n+  }\n+\n+  @Test(dataProvider = \"provideKeys\")\n+  public void testClusterInfoProvider(int numHttp, int numHttps, int expectedNumHttp, int expectedNumHttps,\n+      int partitionIdForAdd, int partitionIdForCheck)\n+      throws InterruptedException, ExecutionException, ServiceUnavailableException\n+  {\n+    Map<String, LoadBalancerStrategyFactory<? extends LoadBalancerStrategy>> loadBalancerStrategyFactories =\n+        new HashMap<String, LoadBalancerStrategyFactory<? extends LoadBalancerStrategy>>();\n+    Map<String, TransportClientFactory> clientFactories =\n+        new HashMap<String, TransportClientFactory>();\n+\n+    MockStore<ServiceProperties> serviceRegistry = new MockStore<ServiceProperties>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "393f5b68a57f5bdfba17dc4da6c9894740e3e534"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwODY5OQ==", "bodyText": "I'm only gonna modify this function. Doing it for all others is a cleanup task that shouldn't be done with this RB, it'd obfuscate what I really added here.", "url": "https://github.com/linkedin/rest.li/pull/181#discussion_r384308699", "createdAt": "2020-02-26T07:15:51Z", "author": {"login": "davidhoa"}, "path": "d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java", "diffHunk": "@@ -155,6 +161,87 @@ public void doOneTimeTearDown() throws IOException\n     }\n   }\n \n+  @DataProvider\n+  public Object[][] provideKeys()\n+  {\n+    return new Object[][] {\n+        // numHttp, numHttps, expectedNumHttp, expectedNumHttps, partitionIdForAdd, partitionIdForCheck\n+        {0, 3, 0, 3, 0, 0},\n+        {3, 0, 3, 0, 0, 0},\n+        {1, 1, 1, 1, 0, 0},\n+        {0, 0, 0, 0, 0, 0},\n+        // alter the partitions to check\n+        {0, 3, 0, 0, 0, 1},\n+        {3, 0, 0, 0, 0, 1},\n+        {1, 1, 0, 0, 0, 2},\n+        {0, 0, 0, 0, 0, 1},\n+        // alter the partitions to add and check to match\n+        {0, 3, 0, 3, 1, 1},\n+        {3, 0, 3, 0, 1, 1},\n+        {1, 1, 1, 1, 2, 2},\n+        {0, 0, 0, 0, 1, 1}\n+    };\n+  }\n+\n+  @Test(dataProvider = \"provideKeys\")\n+  public void testClusterInfoProvider(int numHttp, int numHttps, int expectedNumHttp, int expectedNumHttps,\n+      int partitionIdForAdd, int partitionIdForCheck)\n+      throws InterruptedException, ExecutionException, ServiceUnavailableException\n+  {\n+    Map<String, LoadBalancerStrategyFactory<? extends LoadBalancerStrategy>> loadBalancerStrategyFactories =\n+        new HashMap<String, LoadBalancerStrategyFactory<? extends LoadBalancerStrategy>>();\n+    Map<String, TransportClientFactory> clientFactories =\n+        new HashMap<String, TransportClientFactory>();\n+\n+    MockStore<ServiceProperties> serviceRegistry = new MockStore<ServiceProperties>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI1Mjg3Nw=="}, "originalCommit": {"oid": "393f5b68a57f5bdfba17dc4da6c9894740e3e534"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 571, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}