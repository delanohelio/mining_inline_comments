{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3ODc2OTQw", "number": 383, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwNjowOToxMlrOEYq_fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwNjoxNDo0NFrOEYrA2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzA1NjYwOnYy", "diffSide": "RIGHT", "path": "restli-common/src/main/java/com/linkedin/restli/common/validation/RestLiDataValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwNjowOToxMlrOHBIHOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwNjowOToxMlrOHBIHOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk0MzU0Nw==", "bodyText": "I think what the original comment was trying to say is: \"Partial update is not supported on arrays, as we always replace the entire array\".\nSo in the patch, the entire array record has to be present (full update).\nThis is not true for other complex types or Maps.  So the original comment is correct and this issue is specific to arrays.\nSo in partial update, the required createOnly fields must be present (it must be treated as update, so for existing items they should've been present in original and for new items they behave like create) and readonly fields should be treated as optional (can be present for items being updated and can be absent for new array items)\nFor Maps/other complex types, patch is supported, so if the operation is $set, then they should be treated as CREATE (ie, CreateOnly fields are required, ReadOnly fields should not be present).", "url": "https://github.com/linkedin/rest.li/pull/383#discussion_r470943547", "createdAt": "2020-08-15T06:09:12Z", "author": {"login": "karthikbalasub"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/validation/RestLiDataValidator.java", "diffHunk": "@@ -464,15 +464,15 @@ protected ValidationResult validateOutputAgainstSchema(RecordTemplate dataTempla\n    * Checks that if the patch is applied to a valid entity, the modified entity will also be valid.\n    * This method\n    * (1) Checks that required/ReadOnly/CreateOnly fields are not deleted.\n-   * (2) Checks that new values for record templates contain all required fields.\n+   * (2) Checks that new values for record templates contain all required fields (treating ReadOnly fields as optional).\n    * (3) Applies the patch to an empty entity and validates the entity for custom validation rules\n    * and Rest.li annotations (Allows required fields to be absent by using {@link RequiredMode#IGNORE},\n    * because a patch does not necessarily contain all fields).\n    *\n-   * NOTE: Updating a part of an array is not supported. So if the array contains a required field that is\n-   * readonly or createonly, the field cannot be present (no partial updates on readonly/createonly)\n-   * but cannot be absent either (no missing required fields). This means the array cannot be changed by a\n-   * partial update request. This is something that should be fixed.\n+   * NOTE: Updating a part of an array or other complex object is not supported if the object contains a required field\n+   * that is CreateOnly. In this case, the field cannot be present (no partial updates on CreateOnly fields), but cannot\n+   * be absent either (no missing required fields).\n+   * TODO: This is something that should be fixed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7720b0802d13ff045e8b0b6bb4f00e1f01020d9"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzA2MDA4OnYy", "diffSide": "RIGHT", "path": "restli-common/src/main/java/com/linkedin/restli/common/validation/RestLiDataValidator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwNjoxNDo0NFrOHBII2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwNzozNDoxMlrOHBIgAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk0Mzk2MQ==", "bodyText": "This should be done only for $set on array fields, see my comment above.", "url": "https://github.com/linkedin/rest.li/pull/383#discussion_r470943961", "createdAt": "2020-08-15T06:14:44Z", "author": {"login": "karthikbalasub"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/validation/RestLiDataValidator.java", "diffHunk": "@@ -534,7 +540,9 @@ private ValidationResult checkNewRecordsAreNotMissingFields(RecordTemplate entit\n         // Replace $set with the field name to get the full path\n         path[path.length - 1] = message.getFormat();\n         DataElement element = DataElementUtil.element(new SimpleDataElement(entity.data(), entity.schema()), path);\n-        ValidationResult result = ValidateDataAgainstSchema.validate(element, new ValidationOptions());\n+        ValidationOptions validationOptions = new ValidationOptions();\n+        validationOptions.setTreatOptional(_readOnlyOptionalPredicate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7720b0802d13ff045e8b0b6bb4f00e1f01020d9"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk0OTM5NA==", "bodyText": "I understand why this would apply to arrays, but I don't think this applies to just arrays. If a field contains an inner record, then setting that field is basically the same as updating the entire record and all its descendants as new records. This logic applies to both arrays and non-arrays. Otherwise, setting a field as an entire record is impossible if that record contains ReadOnly fields.\nAlso, the user who originally reported this bug is experiencing it for a union-of-a-record type, not an array.", "url": "https://github.com/linkedin/rest.li/pull/383#discussion_r470949394", "createdAt": "2020-08-15T07:26:55Z", "author": {"login": "evanw555"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/validation/RestLiDataValidator.java", "diffHunk": "@@ -534,7 +540,9 @@ private ValidationResult checkNewRecordsAreNotMissingFields(RecordTemplate entit\n         // Replace $set with the field name to get the full path\n         path[path.length - 1] = message.getFormat();\n         DataElement element = DataElementUtil.element(new SimpleDataElement(entity.data(), entity.schema()), path);\n-        ValidationResult result = ValidateDataAgainstSchema.validate(element, new ValidationOptions());\n+        ValidationOptions validationOptions = new ValidationOptions();\n+        validationOptions.setTreatOptional(_readOnlyOptionalPredicate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk0Mzk2MQ=="}, "originalCommit": {"oid": "f7720b0802d13ff045e8b0b6bb4f00e1f01020d9"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk0OTg4OQ==", "bodyText": "Treating them as optional is fine as they won't be present.\nWhat I meant is that we should also check that ReadOnly fields are not present for non array types. ie, Run the readOnlyRestricted predicate. (we cannot do that for arrays due to the reason in my above comment).", "url": "https://github.com/linkedin/rest.li/pull/383#discussion_r470949889", "createdAt": "2020-08-15T07:34:12Z", "author": {"login": "karthikbalasub"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/validation/RestLiDataValidator.java", "diffHunk": "@@ -534,7 +540,9 @@ private ValidationResult checkNewRecordsAreNotMissingFields(RecordTemplate entit\n         // Replace $set with the field name to get the full path\n         path[path.length - 1] = message.getFormat();\n         DataElement element = DataElementUtil.element(new SimpleDataElement(entity.data(), entity.schema()), path);\n-        ValidationResult result = ValidateDataAgainstSchema.validate(element, new ValidationOptions());\n+        ValidationOptions validationOptions = new ValidationOptions();\n+        validationOptions.setTreatOptional(_readOnlyOptionalPredicate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk0Mzk2MQ=="}, "originalCommit": {"oid": "f7720b0802d13ff045e8b0b6bb4f00e1f01020d9"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 310, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}