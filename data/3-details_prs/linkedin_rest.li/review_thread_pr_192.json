{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNTIwNTQx", "number": 192, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjoxOTo0NVrODjQ4Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMTozOToxMFrODjntdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzAzMjc0OnYy", "diffSide": "RIGHT", "path": "data/src/test/java/com/linkedin/data/schema/resolver/TestDataSchemaResolver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjoxOTo0NVrOFu-ekw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNTowMDoxMFrOFvFS5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgwMjQ1MQ==", "bodyText": "Can we use MultiFormatDataSchemaResolver instead?", "url": "https://github.com/linkedin/rest.li/pull/192#discussion_r384802451", "createdAt": "2020-02-26T22:19:45Z", "author": {"login": "karthikbalasub"}, "path": "data/src/test/java/com/linkedin/data/schema/resolver/TestDataSchemaResolver.java", "diffHunk": "@@ -460,22 +697,36 @@ public void testMapDataSchemaResolver()\n                         \"typeref has a circular reference to itself\"\n                     }\n                 }\n+        },\n+        {\n+            \"Circular reference involving typerefs, using alias\",\n+            \"pdl\",\n+            asMap(buildSystemIndependentPath(\"a1\", \"typeref1.pdl\"), \"@aliases = [\\\"typerefAlias1\\\"] typeref typeref1 = typeref2\",\n+                  buildSystemIndependentPath(\"a1\", \"typeref2.pdl\"), \"typeref typeref2 = typerefAlias1\"\n+                 ),\n+            new String[][]\n+                {\n+                    {\n+                        \"typeref1\",\n+                        ERROR,\n+                        \"typeref has a circular reference to itself\"\n+                    }\n+                }\n         }\n     };\n   }\n \n   @Test(dataProvider = \"circularReferenceData\")\n-  public void testCircularReferences(String desc, Map<String, String> testSchemas, String[][] testLookupAndExpectedResults)\n+  public void testCircularReferences(String desc, String extension, Map<String, String> testSchemas, String[][] testLookupAndExpectedResults)\n   {\n     boolean debug = false;\n \n     for (String[] testLookupAndExpectedResult : testLookupAndExpectedResults)\n     {\n-      DataSchemaResolver resolver = new MapDataSchemaResolver(\n-          SchemaParserFactory.instance(),\n-          Arrays.asList(buildSystemIndependentPath(\"a1\")),\n-          \".pdsc\", testSchemas);\n-      lookup(resolver, new String[][] { testLookupAndExpectedResult}, File.separatorChar, debug);\n+      DataSchemaResolver schemaResolver = new MapDataSchemaResolver(\n+          extension.equals(\"pdsc\") ? SchemaParserFactory.instance() : PdlSchemaParserFactory.instance(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "526648f1a54c45f082d2c0dfb8cb629b8bbe5035"}, "originalPosition": 401}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkxNDE0OA==", "bodyText": "MapDataSchemaResolver is written for this test cases so that is why I want to re-use them", "url": "https://github.com/linkedin/rest.li/pull/192#discussion_r384914148", "createdAt": "2020-02-27T05:00:10Z", "author": {"login": "junchuanwang"}, "path": "data/src/test/java/com/linkedin/data/schema/resolver/TestDataSchemaResolver.java", "diffHunk": "@@ -460,22 +697,36 @@ public void testMapDataSchemaResolver()\n                         \"typeref has a circular reference to itself\"\n                     }\n                 }\n+        },\n+        {\n+            \"Circular reference involving typerefs, using alias\",\n+            \"pdl\",\n+            asMap(buildSystemIndependentPath(\"a1\", \"typeref1.pdl\"), \"@aliases = [\\\"typerefAlias1\\\"] typeref typeref1 = typeref2\",\n+                  buildSystemIndependentPath(\"a1\", \"typeref2.pdl\"), \"typeref typeref2 = typerefAlias1\"\n+                 ),\n+            new String[][]\n+                {\n+                    {\n+                        \"typeref1\",\n+                        ERROR,\n+                        \"typeref has a circular reference to itself\"\n+                    }\n+                }\n         }\n     };\n   }\n \n   @Test(dataProvider = \"circularReferenceData\")\n-  public void testCircularReferences(String desc, Map<String, String> testSchemas, String[][] testLookupAndExpectedResults)\n+  public void testCircularReferences(String desc, String extension, Map<String, String> testSchemas, String[][] testLookupAndExpectedResults)\n   {\n     boolean debug = false;\n \n     for (String[] testLookupAndExpectedResult : testLookupAndExpectedResults)\n     {\n-      DataSchemaResolver resolver = new MapDataSchemaResolver(\n-          SchemaParserFactory.instance(),\n-          Arrays.asList(buildSystemIndependentPath(\"a1\")),\n-          \".pdsc\", testSchemas);\n-      lookup(resolver, new String[][] { testLookupAndExpectedResult}, File.separatorChar, debug);\n+      DataSchemaResolver schemaResolver = new MapDataSchemaResolver(\n+          extension.equals(\"pdsc\") ? SchemaParserFactory.instance() : PdlSchemaParserFactory.instance(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgwMjQ1MQ=="}, "originalCommit": {"oid": "526648f1a54c45f082d2c0dfb8cb629b8bbe5035"}, "originalPosition": 401}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzYzOTAxOnYy", "diffSide": "RIGHT", "path": "data/src/test/java/com/linkedin/data/schema/resolver/TestDataSchemaResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMzozMDo0OFrOFvEMPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMzozMDo0OFrOFvEMPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5NjA2Mg==", "bodyText": "Use com.linkedin.data.schema.SchemaFormatType here rather than a String. It's more type-safe.\nThis also gives you easy access to the parser factory instance.", "url": "https://github.com/linkedin/rest.li/pull/192#discussion_r384896062", "createdAt": "2020-02-27T03:30:48Z", "author": {"login": "evanw555"}, "path": "data/src/test/java/com/linkedin/data/schema/resolver/TestDataSchemaResolver.java", "diffHunk": "@@ -236,6 +238,7 @@ public void testMapDataSchemaResolver()\n     {\n         {\n           \"Two records including each other\",\n+            \"pdsc\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "526648f1a54c45f082d2c0dfb8cb629b8bbe5035"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzY0NDI2OnYy", "diffSide": "RIGHT", "path": "data/src/main/java/com/linkedin/data/schema/grammar/PdlSchemaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMzozNDo0N1rOFvEPSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNToyMDo0M1rOFvFjJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5Njg0Mg==", "bodyText": "This method is now completely identical to AbstractSchemaParser#lookupName. Why don't we just delete this one and use that?", "url": "https://github.com/linkedin/rest.li/pull/192#discussion_r384896842", "createdAt": "2020-02-27T03:34:47Z", "author": {"login": "evanw555"}, "path": "data/src/main/java/com/linkedin/data/schema/grammar/PdlSchemaParser.java", "diffHunk": "@@ -1093,6 +1094,10 @@ public DataSchema lookupName(String fullName)\n     if (schema == null)\n     {\n       schema = getResolver().findDataSchema(fullName, errorMessageBuilder());\n+      if (schema != null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "526648f1a54c45f082d2c0dfb8cb629b8bbe5035"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkxODMwOQ==", "bodyText": "good idea", "url": "https://github.com/linkedin/rest.li/pull/192#discussion_r384918309", "createdAt": "2020-02-27T05:20:43Z", "author": {"login": "junchuanwang"}, "path": "data/src/main/java/com/linkedin/data/schema/grammar/PdlSchemaParser.java", "diffHunk": "@@ -1093,6 +1094,10 @@ public DataSchema lookupName(String fullName)\n     if (schema == null)\n     {\n       schema = getResolver().findDataSchema(fullName, errorMessageBuilder());\n+      if (schema != null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5Njg0Mg=="}, "originalCommit": {"oid": "526648f1a54c45f082d2c0dfb8cb629b8bbe5035"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Njc3MzY1OnYy", "diffSide": "LEFT", "path": "data/src/test/java/com/linkedin/data/schema/resolver/TestDataSchemaResolver.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMTozOToxMFrOFviITw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMTo0NTo1NVrOFviUaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4NjU3NQ==", "bodyText": "As I mentioned in my previous comment, using the enum gives you easy access to the schema parser instance. You shouldn't be doing extension.equals(PDSC) ? SchemaParserFactory.instance() : PdlSchemaParserFactory.instance(). You should be doing extension.getSchemaParserFactory()", "url": "https://github.com/linkedin/rest.li/pull/192#discussion_r385386575", "createdAt": "2020-02-27T21:39:10Z", "author": {"login": "evanw555"}, "path": "data/src/test/java/com/linkedin/data/schema/resolver/TestDataSchemaResolver.java", "diffHunk": "@@ -460,22 +700,36 @@ public void testMapDataSchemaResolver()\n                         \"typeref has a circular reference to itself\"\n                     }\n                 }\n+        },\n+        {\n+            \"Circular reference involving typerefs, using alias\",\n+            PDL,\n+            asMap(buildSystemIndependentPath(\"a1\", \"typeref1.pdl\"), \"@aliases = [\\\"typerefAlias1\\\"] typeref typeref1 = typeref2\",\n+                  buildSystemIndependentPath(\"a1\", \"typeref2.pdl\"), \"typeref typeref2 = typerefAlias1\"\n+                 ),\n+            new String[][]\n+                {\n+                    {\n+                        \"typeref1\",\n+                        ERROR,\n+                        \"typeref has a circular reference to itself\"\n+                    }\n+                }\n         }\n     };\n   }\n \n   @Test(dataProvider = \"circularReferenceData\")\n-  public void testCircularReferences(String desc, Map<String, String> testSchemas, String[][] testLookupAndExpectedResults)\n+  public void testCircularReferences(String desc, SchemaFormatType extension, Map<String, String> testSchemas, String[][] testLookupAndExpectedResults)\n   {\n     boolean debug = false;\n \n     for (String[] testLookupAndExpectedResult : testLookupAndExpectedResults)\n     {\n-      DataSchemaResolver resolver = new MapDataSchemaResolver(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f8425839c45d8af136e6cbb07d01dff98e9a31b"}, "originalPosition": 405}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4NzE4NA==", "bodyText": "You could potentially also avoid having to pass in the schema parser factory into the MapDataSchemaResolver itself, you could just pass in only the extension, from which you could derive the parser factory and the string extension.", "url": "https://github.com/linkedin/rest.li/pull/192#discussion_r385387184", "createdAt": "2020-02-27T21:40:31Z", "author": {"login": "evanw555"}, "path": "data/src/test/java/com/linkedin/data/schema/resolver/TestDataSchemaResolver.java", "diffHunk": "@@ -460,22 +700,36 @@ public void testMapDataSchemaResolver()\n                         \"typeref has a circular reference to itself\"\n                     }\n                 }\n+        },\n+        {\n+            \"Circular reference involving typerefs, using alias\",\n+            PDL,\n+            asMap(buildSystemIndependentPath(\"a1\", \"typeref1.pdl\"), \"@aliases = [\\\"typerefAlias1\\\"] typeref typeref1 = typeref2\",\n+                  buildSystemIndependentPath(\"a1\", \"typeref2.pdl\"), \"typeref typeref2 = typerefAlias1\"\n+                 ),\n+            new String[][]\n+                {\n+                    {\n+                        \"typeref1\",\n+                        ERROR,\n+                        \"typeref has a circular reference to itself\"\n+                    }\n+                }\n         }\n     };\n   }\n \n   @Test(dataProvider = \"circularReferenceData\")\n-  public void testCircularReferences(String desc, Map<String, String> testSchemas, String[][] testLookupAndExpectedResults)\n+  public void testCircularReferences(String desc, SchemaFormatType extension, Map<String, String> testSchemas, String[][] testLookupAndExpectedResults)\n   {\n     boolean debug = false;\n \n     for (String[] testLookupAndExpectedResult : testLookupAndExpectedResults)\n     {\n-      DataSchemaResolver resolver = new MapDataSchemaResolver(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4NjU3NQ=="}, "originalCommit": {"oid": "4f8425839c45d8af136e6cbb07d01dff98e9a31b"}, "originalPosition": 405}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4OTY3NQ==", "bodyText": "I don't see how you second suggestion is significantly better, but I did the change according to your suggestion.", "url": "https://github.com/linkedin/rest.li/pull/192#discussion_r385389675", "createdAt": "2020-02-27T21:45:55Z", "author": {"login": "junchuanwang"}, "path": "data/src/test/java/com/linkedin/data/schema/resolver/TestDataSchemaResolver.java", "diffHunk": "@@ -460,22 +700,36 @@ public void testMapDataSchemaResolver()\n                         \"typeref has a circular reference to itself\"\n                     }\n                 }\n+        },\n+        {\n+            \"Circular reference involving typerefs, using alias\",\n+            PDL,\n+            asMap(buildSystemIndependentPath(\"a1\", \"typeref1.pdl\"), \"@aliases = [\\\"typerefAlias1\\\"] typeref typeref1 = typeref2\",\n+                  buildSystemIndependentPath(\"a1\", \"typeref2.pdl\"), \"typeref typeref2 = typerefAlias1\"\n+                 ),\n+            new String[][]\n+                {\n+                    {\n+                        \"typeref1\",\n+                        ERROR,\n+                        \"typeref has a circular reference to itself\"\n+                    }\n+                }\n         }\n     };\n   }\n \n   @Test(dataProvider = \"circularReferenceData\")\n-  public void testCircularReferences(String desc, Map<String, String> testSchemas, String[][] testLookupAndExpectedResults)\n+  public void testCircularReferences(String desc, SchemaFormatType extension, Map<String, String> testSchemas, String[][] testLookupAndExpectedResults)\n   {\n     boolean debug = false;\n \n     for (String[] testLookupAndExpectedResult : testLookupAndExpectedResults)\n     {\n-      DataSchemaResolver resolver = new MapDataSchemaResolver(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4NjU3NQ=="}, "originalCommit": {"oid": "4f8425839c45d8af136e6cbb07d01dff98e9a31b"}, "originalPosition": 405}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 587, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}