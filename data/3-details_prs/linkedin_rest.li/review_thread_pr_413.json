{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyNDU3MDQ5", "number": 413, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNDo1OToxOFrOEhganA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNDo1OToxOFrOEhganA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTY5NTY0OnYy", "diffSide": "RIGHT", "path": "generator/src/main/java/com/linkedin/pegasus/generator/TemplateSpecGenerator.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNDo1OToxOFrOHO2uGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNDozNzoxOVrOHPioLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMzODY1MQ==", "bodyText": "Is this safe?\nI remember that when I removed finality of DataMap a bunch of stuff failed subtly because of == class comparison checks instead of instanceof. I suspect similar issues (that are even harder to track) may exist with these classes.", "url": "https://github.com/linkedin/rest.li/pull/413#discussion_r485338651", "createdAt": "2020-09-09T04:59:18Z", "author": {"login": "karthikrg"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/TemplateSpecGenerator.java", "diffHunk": "@@ -792,7 +792,7 @@ private ClassInfo classInfoForUnnamed(ClassTemplateSpec enclosingClass, String n\n         // enclosingClass flag indicates whether a class is nested or not.\n         classTemplateSpec.setEnclosingClass(enclosingClass);\n         classTemplateSpec.setClassName(classInfo.name);\n-        classTemplateSpec.setModifiers(ModifierSpec.PUBLIC, ModifierSpec.STATIC, ModifierSpec.FINAL);\n+        classTemplateSpec.setModifiers(ModifierSpec.PUBLIC, ModifierSpec.STATIC);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9f81f78f3ca7b58b9fa397acab4f6e04db2ebda"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQwODE3Nw==", "bodyText": "good point, RecordTemplate::putWrapped expects the object's class to be same as the generated class. So you can't put an object created by extending the generated class in a record (or other generated types).\nHowever, the code-gen already generates non-final classes for Arrays, Maps and Typerefs (including union typerefs). So I think this PR is not changing the behavior that much.", "url": "https://github.com/linkedin/rest.li/pull/413#discussion_r485408177", "createdAt": "2020-09-09T07:49:29Z", "author": {"login": "karthikbalasub"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/TemplateSpecGenerator.java", "diffHunk": "@@ -792,7 +792,7 @@ private ClassInfo classInfoForUnnamed(ClassTemplateSpec enclosingClass, String n\n         // enclosingClass flag indicates whether a class is nested or not.\n         classTemplateSpec.setEnclosingClass(enclosingClass);\n         classTemplateSpec.setClassName(classInfo.name);\n-        classTemplateSpec.setModifiers(ModifierSpec.PUBLIC, ModifierSpec.STATIC, ModifierSpec.FINAL);\n+        classTemplateSpec.setModifiers(ModifierSpec.PUBLIC, ModifierSpec.STATIC);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMzODY1MQ=="}, "originalCommit": {"oid": "c9f81f78f3ca7b58b9fa397acab4f6e04db2ebda"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQyNDAyOA==", "bodyText": "Agree with Karthik B said.\nDo we have enough existing tests to test the safety of this change?", "url": "https://github.com/linkedin/rest.li/pull/413#discussion_r485424028", "createdAt": "2020-09-09T08:16:02Z", "author": {"login": "junchuanwang"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/TemplateSpecGenerator.java", "diffHunk": "@@ -792,7 +792,7 @@ private ClassInfo classInfoForUnnamed(ClassTemplateSpec enclosingClass, String n\n         // enclosingClass flag indicates whether a class is nested or not.\n         classTemplateSpec.setEnclosingClass(enclosingClass);\n         classTemplateSpec.setClassName(classInfo.name);\n-        classTemplateSpec.setModifiers(ModifierSpec.PUBLIC, ModifierSpec.STATIC, ModifierSpec.FINAL);\n+        classTemplateSpec.setModifiers(ModifierSpec.PUBLIC, ModifierSpec.STATIC);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMzODY1MQ=="}, "originalCommit": {"oid": "c9f81f78f3ca7b58b9fa397acab4f6e04db2ebda"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwNjA0MA==", "bodyText": "Thank you for pointing this out.\nThe reason this is safe and no tests fail is because nothing in rest.li relies on subclassing these types. This only enables subclassing, which is safe in some use cases and not in others.\nI have a separate question regarding the class equality checks. I've run into them a few times before. Do you know what the reason is for making them?", "url": "https://github.com/linkedin/rest.li/pull/413#discussion_r485706040", "createdAt": "2020-09-09T15:32:35Z", "author": {"login": "tjni"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/TemplateSpecGenerator.java", "diffHunk": "@@ -792,7 +792,7 @@ private ClassInfo classInfoForUnnamed(ClassTemplateSpec enclosingClass, String n\n         // enclosingClass flag indicates whether a class is nested or not.\n         classTemplateSpec.setEnclosingClass(enclosingClass);\n         classTemplateSpec.setClassName(classInfo.name);\n-        classTemplateSpec.setModifiers(ModifierSpec.PUBLIC, ModifierSpec.STATIC, ModifierSpec.FINAL);\n+        classTemplateSpec.setModifiers(ModifierSpec.PUBLIC, ModifierSpec.STATIC);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMzODY1MQ=="}, "originalCommit": {"oid": "c9f81f78f3ca7b58b9fa397acab4f6e04db2ebda"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg3NDY2NQ==", "bodyText": "Not sure why the original authors used class equality. One reason could be performance?\nAlso, for equals implementation atleast, using class equality ensures symmetry. See the discussion here: https://stackoverflow.com/questions/596462/any-reason-to-prefer-getclass-over-instanceof-when-generating-equals", "url": "https://github.com/linkedin/rest.li/pull/413#discussion_r485874665", "createdAt": "2020-09-09T19:45:56Z", "author": {"login": "karthikbalasub"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/TemplateSpecGenerator.java", "diffHunk": "@@ -792,7 +792,7 @@ private ClassInfo classInfoForUnnamed(ClassTemplateSpec enclosingClass, String n\n         // enclosingClass flag indicates whether a class is nested or not.\n         classTemplateSpec.setEnclosingClass(enclosingClass);\n         classTemplateSpec.setClassName(classInfo.name);\n-        classTemplateSpec.setModifiers(ModifierSpec.PUBLIC, ModifierSpec.STATIC, ModifierSpec.FINAL);\n+        classTemplateSpec.setModifiers(ModifierSpec.PUBLIC, ModifierSpec.STATIC);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMzODY1MQ=="}, "originalCommit": {"oid": "c9f81f78f3ca7b58b9fa397acab4f6e04db2ebda"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA0OTk3NA==", "bodyText": "Performance doesn't feel like a reason because it involves an extra check, which at best is optimized away by the JIT compiler but otherwise requires more work. What I'm referring to is snippets like:\nprotected Object unwrap(E object) throws ClassCastException\n{\n  ArgumentUtil.notNull(object, \"object\");\n  if (object.getClass() == _elementClass)\n  {\n    return object.data();\n  }\n  else\n  {\n    throw new ClassCastException(\"Input \" + object + \" should be a \" + _elementClass.getName());\n  }\n}\n\nThe point about equals is a good one. I need to think about it some more and will raise a separate conversation if enlightenment happens.", "url": "https://github.com/linkedin/rest.li/pull/413#discussion_r486049974", "createdAt": "2020-09-10T04:05:35Z", "author": {"login": "tjni"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/TemplateSpecGenerator.java", "diffHunk": "@@ -792,7 +792,7 @@ private ClassInfo classInfoForUnnamed(ClassTemplateSpec enclosingClass, String n\n         // enclosingClass flag indicates whether a class is nested or not.\n         classTemplateSpec.setEnclosingClass(enclosingClass);\n         classTemplateSpec.setClassName(classInfo.name);\n-        classTemplateSpec.setModifiers(ModifierSpec.PUBLIC, ModifierSpec.STATIC, ModifierSpec.FINAL);\n+        classTemplateSpec.setModifiers(ModifierSpec.PUBLIC, ModifierSpec.STATIC);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMzODY1MQ=="}, "originalCommit": {"oid": "c9f81f78f3ca7b58b9fa397acab4f6e04db2ebda"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1ODAzMA==", "bodyText": "It all depends on equals semantics. If we want equals across the class hierarchy, then both should use instanceof and compare using some other mechanism. Symmetry is still possible.\nPerformance is not the reason. Some of it is just some implicit assumptions made by authors about the impossibility of subclassing (since PDSC/PDL never really supported inheritance)", "url": "https://github.com/linkedin/rest.li/pull/413#discussion_r486058030", "createdAt": "2020-09-10T04:37:19Z", "author": {"login": "karthikrg"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/TemplateSpecGenerator.java", "diffHunk": "@@ -792,7 +792,7 @@ private ClassInfo classInfoForUnnamed(ClassTemplateSpec enclosingClass, String n\n         // enclosingClass flag indicates whether a class is nested or not.\n         classTemplateSpec.setEnclosingClass(enclosingClass);\n         classTemplateSpec.setClassName(classInfo.name);\n-        classTemplateSpec.setModifiers(ModifierSpec.PUBLIC, ModifierSpec.STATIC, ModifierSpec.FINAL);\n+        classTemplateSpec.setModifiers(ModifierSpec.PUBLIC, ModifierSpec.STATIC);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMzODY1MQ=="}, "originalCommit": {"oid": "c9f81f78f3ca7b58b9fa397acab4f6e04db2ebda"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 346, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}