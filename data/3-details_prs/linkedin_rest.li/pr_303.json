{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwNDI4MDY1", "number": 303, "title": "Handle valueClass NPE issue and give warnings", "bodyText": "When a finder resource class returns a non-record (Data type is POJO or not defined in PDL files) the restspec generation will be halted by seeing a NPE. The NPE is caused by valueClass being null.", "createdAt": "2020-05-19T23:57:31Z", "url": "https://github.com/linkedin/rest.li/pull/303", "merged": true, "mergeCommit": {"oid": "ac3bed5c8a538f0bbb78ce5eca08ab22beea0a68"}, "closed": true, "closedAt": "2020-05-30T00:20:42Z", "author": {"login": "BrianPin"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABci-LIngFqTQxNDkxODk0Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcmK7tAAFqTQyMTM0NTE3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTE4OTQ3", "url": "https://github.com/linkedin/rest.li/pull/303#pullrequestreview-414918947", "createdAt": "2020-05-20T00:45:42Z", "commit": {"oid": "495242fa4143fd692b7c65d68e1ae0477dc59ecc"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMDo0NTo0MlrOGX3gCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMDo0NTo0MlrOGX3gCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY3OTc1Mg==", "bodyText": "nit: A bit suggestion on the grammar:\nwe expect the return type to be 'Record' \nOtherwise looks good to me.", "url": "https://github.com/linkedin/rest.li/pull/303#discussion_r427679752", "createdAt": "2020-05-20T00:45:42Z", "author": {"login": "junchuanwang"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/model/RestLiAnnotationReader.java", "diffHunk": "@@ -2595,6 +2595,13 @@ private static void validateFinderMethod(final ResourceMethodDescriptor finderMe\n     Method method = finderMethodDescriptor.getMethod();\n     Class<?> valueClass = resourceModel.getValueClass();\n \n+    if (valueClass == null)\n+    {\n+      throw new ResourceConfigException(\"@Finder method '\" + method.getName()\n+          + \"' on class '\" + resourceModel.getResourceClass().getName()\n+          + \"' has an invalid return type, we expect return type to be a record '\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "495242fa4143fd692b7c65d68e1ae0477dc59ecc"}, "originalPosition": 8}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "74754e808190be3103ae89c964b9383dea9efc27", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/74754e808190be3103ae89c964b9383dea9efc27", "committedDate": "2020-05-20T23:46:46Z", "message": "Merge branch 'bug/unhandled_npe' of github.com:linkedin/rest.li into bug/unhandled_npe"}, "afterCommit": {"oid": "9bd6f28c3a8151d8b74b703c21ddace554045f10", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/9bd6f28c3a8151d8b74b703c21ddace554045f10", "committedDate": "2020-05-21T00:36:10Z", "message": "Handling NPE for finder resources using non-RecordTemplate classes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NTIyODAy", "url": "https://github.com/linkedin/rest.li/pull/303#pullrequestreview-416522802", "createdAt": "2020-05-21T21:59:41Z", "commit": {"oid": "7a551a716c2e0c59ff09336c0df8e50dc6515bc4"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTo1OTo0MVrOGZEYbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMDozODo1OVrOGZHOdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzOTM3Mg==", "bodyText": "nit : brace should be in the following line.", "url": "https://github.com/linkedin/rest.li/pull/303#discussion_r428939372", "createdAt": "2020-05-21T21:59:41Z", "author": {"login": "nickibi"}, "path": "restli-server/src/test/java/com/linkedin/restli/internal/server/model/TestRestLiApiBuilder.java", "diffHunk": "@@ -198,4 +198,33 @@ public void testActionReturnType(Class<?> resourceClass, Class<?> expectedAction\n       Assert.assertEquals(resourceMethodDescriptor.getActionReturnType(), expectedActionReturnType);\n     }\n   }\n+\n+  @DataProvider(name = \"unstructuredFinderReturnTypeData\")\n+  private Object[][] unstructuredFinderReturnTypeData()\n+  {\n+    return new Object[][]\n+        {\n+            {fooBarFinderResource.class, \"The return type must be a RecordTemplate\"}\n+        };\n+  }\n+\n+  /**\n+   * Ensures that when finder methods are processed, if the return type is not of a Record, then it will be warned.\n+   * For instance, it should recognize that the \"logical\" return type for a method\n+   * {@code Task<ActionResult<String>> doFoo();} is {@code String.class}.\n+   *\n+   * @param resourceClass resource used as an input\n+   */\n+  @Test(dataProvider = \"unstructuredFinderReturnTypeData\")\n+  public void testFinderUnsupportedReturnType(Class<?> resourceClass, String expectedPartialMessage)\n+  {\n+    try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a551a716c2e0c59ff09336c0df8e50dc6515bc4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk0MTk2Ng==", "bodyText": "nit: same here", "url": "https://github.com/linkedin/rest.li/pull/303#discussion_r428941966", "createdAt": "2020-05-21T22:06:13Z", "author": {"login": "nickibi"}, "path": "restli-server/src/test/java/com/linkedin/restli/internal/server/model/TestRestLiApiBuilder.java", "diffHunk": "@@ -198,4 +198,33 @@ public void testActionReturnType(Class<?> resourceClass, Class<?> expectedAction\n       Assert.assertEquals(resourceMethodDescriptor.getActionReturnType(), expectedActionReturnType);\n     }\n   }\n+\n+  @DataProvider(name = \"unstructuredFinderReturnTypeData\")\n+  private Object[][] unstructuredFinderReturnTypeData()\n+  {\n+    return new Object[][]\n+        {\n+            {fooBarFinderResource.class, \"The return type must be a RecordTemplate\"}\n+        };\n+  }\n+\n+  /**\n+   * Ensures that when finder methods are processed, if the return type is not of a Record, then it will be warned.\n+   * For instance, it should recognize that the \"logical\" return type for a method\n+   * {@code Task<ActionResult<String>> doFoo();} is {@code String.class}.\n+   *\n+   * @param resourceClass resource used as an input\n+   */\n+  @Test(dataProvider = \"unstructuredFinderReturnTypeData\")\n+  public void testFinderUnsupportedReturnType(Class<?> resourceClass, String expectedPartialMessage)\n+  {\n+    try {\n+      RestLiApiBuilder.buildResourceModels(Collections.singleton(resourceClass));\n+      Assert.fail(\"For the finder resource class with a non RecordTemplate sub class, we shall throw an exception\");\n+    } catch (ResourceConfigException resourceConfigException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a551a716c2e0c59ff09336c0df8e50dc6515bc4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk0MjcwMg==", "bodyText": "nit: space before and after \"=\"", "url": "https://github.com/linkedin/rest.li/pull/303#discussion_r428942702", "createdAt": "2020-05-21T22:08:07Z", "author": {"login": "nickibi"}, "path": "restli-server/src/test/java/com/linkedin/restli/internal/server/model/SampleResources.java", "diffHunk": "@@ -759,4 +761,16 @@ public void AttachmentParamsIncorrectDataTypeAction(@RestLiAttachmentsParam Stri\n \n   @RestLiCollection(name = \"collectionComplexKeyTask\")\n   class CollectionComplexKeyTask extends ComplexKeyResourceTaskTemplate<EmptyRecord, EmptyRecord, EmptyRecord> {}\n+\n+  @RestLiCollection(name=\"lucky\",keyName=\"dayOfWeek\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a551a716c2e0c59ff09336c0df8e50dc6515bc4"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4NDY5MA==", "bodyText": "nit: extra space after \"{\" and before \"}\"", "url": "https://github.com/linkedin/rest.li/pull/303#discussion_r428984690", "createdAt": "2020-05-22T00:33:41Z", "author": {"login": "nickibi"}, "path": "restli-server/src/test/java/com/linkedin/restli/internal/server/model/TestRestLiApiBuilder.java", "diffHunk": "@@ -198,4 +198,33 @@ public void testActionReturnType(Class<?> resourceClass, Class<?> expectedAction\n       Assert.assertEquals(resourceMethodDescriptor.getActionReturnType(), expectedActionReturnType);\n     }\n   }\n+\n+  @DataProvider(name = \"unstructuredFinderReturnTypeData\")\n+  private Object[][] unstructuredFinderReturnTypeData()\n+  {\n+    return new Object[][]\n+        {\n+            {fooBarFinderResource.class, \"The return type must be a RecordTemplate\"}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a551a716c2e0c59ff09336c0df8e50dc6515bc4"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4NTk3NQ==", "bodyText": "Do you think \"return Collections.singletonList(\"gotLuck!\")\" is cleaner?", "url": "https://github.com/linkedin/rest.li/pull/303#discussion_r428985975", "createdAt": "2020-05-22T00:38:59Z", "author": {"login": "nickibi"}, "path": "restli-server/src/test/java/com/linkedin/restli/internal/server/model/SampleResources.java", "diffHunk": "@@ -759,4 +761,16 @@ public void AttachmentParamsIncorrectDataTypeAction(@RestLiAttachmentsParam Stri\n \n   @RestLiCollection(name = \"collectionComplexKeyTask\")\n   class CollectionComplexKeyTask extends ComplexKeyResourceTaskTemplate<EmptyRecord, EmptyRecord, EmptyRecord> {}\n+\n+  @RestLiCollection(name=\"lucky\",keyName=\"dayOfWeek\")\n+  public class fooBarFinderResource extends UnstructuredDataCollectionResourceTemplate<Integer>\n+  {\n+    @Finder(\"findFooBar\")\n+    public List<String> findLucky(@PagingContextParam final PagingContext context, @QueryParam(\"dayOfWeek\") Integer dayOfWeek) throws Exception\n+    {\n+      List<String> res = new LinkedList<>();\n+      res.add(\"gotLuck!\");\n+      return res;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a551a716c2e0c59ff09336c0df8e50dc6515bc4"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NjcxNzg1", "url": "https://github.com/linkedin/rest.li/pull/303#pullrequestreview-416671785", "createdAt": "2020-05-22T06:16:18Z", "commit": {"oid": "7a551a716c2e0c59ff09336c0df8e50dc6515bc4"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjoxNjoxOFrOGZL1aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjoyNDoxMFrOGZL-zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2MTQ4MQ==", "bodyText": "nits:\n\neither make the T lowercase or replace the preceding comma with a period.\nremove the dangling ' at the end of the message.", "url": "https://github.com/linkedin/rest.li/pull/303#discussion_r429061481", "createdAt": "2020-05-22T06:16:18Z", "author": {"login": "evanw555"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/model/RestLiAnnotationReader.java", "diffHunk": "@@ -2595,6 +2595,13 @@ private static void validateFinderMethod(final ResourceMethodDescriptor finderMe\n     Method method = finderMethodDescriptor.getMethod();\n     Class<?> valueClass = resourceModel.getValueClass();\n \n+    if (valueClass == null)\n+    {\n+      throw new ResourceConfigException(\"@Finder method '\" + method.getName()\n+          + \"' on class '\" + resourceModel.getResourceClass().getName()\n+          + \"' has an invalid return type, The return type must be a RecordTemplate'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a551a716c2e0c59ff09336c0df8e50dc6515bc4"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2MjgxNg==", "bodyText": "Given that this file is bloated with resource classes, I'd suggest naming this something meaningful to clarify what it's testing. I'd suggest _____Resource where the prefix describes what scenario it covers (e.g. NonRecordFinderResource or UnsupportedReturnTypeFinderResource)", "url": "https://github.com/linkedin/rest.li/pull/303#discussion_r429062816", "createdAt": "2020-05-22T06:20:37Z", "author": {"login": "evanw555"}, "path": "restli-server/src/test/java/com/linkedin/restli/internal/server/model/SampleResources.java", "diffHunk": "@@ -759,4 +761,16 @@ public void AttachmentParamsIncorrectDataTypeAction(@RestLiAttachmentsParam Stri\n \n   @RestLiCollection(name = \"collectionComplexKeyTask\")\n   class CollectionComplexKeyTask extends ComplexKeyResourceTaskTemplate<EmptyRecord, EmptyRecord, EmptyRecord> {}\n+\n+  @RestLiCollection(name=\"lucky\",keyName=\"dayOfWeek\")\n+  public class fooBarFinderResource extends UnstructuredDataCollectionResourceTemplate<Integer>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a551a716c2e0c59ff09336c0df8e50dc6515bc4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2MzUzOA==", "bodyText": "I'd recommend avoiding the term \"unstructured\" here, since it may be confused with another Rest.li feature (\"unstructured data resource\")", "url": "https://github.com/linkedin/rest.li/pull/303#discussion_r429063538", "createdAt": "2020-05-22T06:22:58Z", "author": {"login": "evanw555"}, "path": "restli-server/src/test/java/com/linkedin/restli/internal/server/model/TestRestLiApiBuilder.java", "diffHunk": "@@ -198,4 +198,33 @@ public void testActionReturnType(Class<?> resourceClass, Class<?> expectedAction\n       Assert.assertEquals(resourceMethodDescriptor.getActionReturnType(), expectedActionReturnType);\n     }\n   }\n+\n+  @DataProvider(name = \"unstructuredFinderReturnTypeData\")\n+  private Object[][] unstructuredFinderReturnTypeData()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a551a716c2e0c59ff09336c0df8e50dc6515bc4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2Mzg4NQ==", "bodyText": "Given that there's only one case being tested, it's acceptable to hard code the inputs rather than using a data provider. Caveat would be if this case will likely get extended. Your call.", "url": "https://github.com/linkedin/rest.li/pull/303#discussion_r429063885", "createdAt": "2020-05-22T06:24:10Z", "author": {"login": "evanw555"}, "path": "restli-server/src/test/java/com/linkedin/restli/internal/server/model/TestRestLiApiBuilder.java", "diffHunk": "@@ -198,4 +198,33 @@ public void testActionReturnType(Class<?> resourceClass, Class<?> expectedAction\n       Assert.assertEquals(resourceMethodDescriptor.getActionReturnType(), expectedActionReturnType);\n     }\n   }\n+\n+  @DataProvider(name = \"unstructuredFinderReturnTypeData\")\n+  private Object[][] unstructuredFinderReturnTypeData()\n+  {\n+    return new Object[][]\n+        {\n+            {fooBarFinderResource.class, \"The return type must be a RecordTemplate\"}\n+        };\n+  }\n+\n+  /**\n+   * Ensures that when finder methods are processed, if the return type is not of a Record, then it will be warned.\n+   * For instance, it should recognize that the \"logical\" return type for a method\n+   * {@code Task<ActionResult<String>> doFoo();} is {@code String.class}.\n+   *\n+   * @param resourceClass resource used as an input\n+   */\n+  @Test(dataProvider = \"unstructuredFinderReturnTypeData\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a551a716c2e0c59ff09336c0df8e50dc6515bc4"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7a551a716c2e0c59ff09336c0df8e50dc6515bc4", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/7a551a716c2e0c59ff09336c0df8e50dc6515bc4", "committedDate": "2020-05-21T21:51:33Z", "message": "Address testShutdownRequestOutstanding failure by following flaky test processing"}, "afterCommit": {"oid": "022a8e986e7791f67e005d4e410cef4453cc6733", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/022a8e986e7791f67e005d4e410cef4453cc6733", "committedDate": "2020-05-22T17:01:26Z", "message": "Address testShutdownRequestOutstanding failure by following flaky test processing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MjM1NDY4", "url": "https://github.com/linkedin/rest.li/pull/303#pullrequestreview-417235468", "createdAt": "2020-05-23T00:52:03Z", "commit": {"oid": "643a6c41b8c4d2f2a3affbcc18ee5fe910eb641b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NjQ0Mjg4", "url": "https://github.com/linkedin/rest.li/pull/303#pullrequestreview-418644288", "createdAt": "2020-05-26T20:12:51Z", "commit": {"oid": "52bceeeceb1485b894f852d70d0ca1d94a1d5d70"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDoxMjo1MlrOGaup3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDoxNzoyNVrOGauzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4MDU0MQ==", "bodyText": "Fix the error message", "url": "https://github.com/linkedin/rest.li/pull/303#discussion_r430680541", "createdAt": "2020-05-26T20:12:52Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/model/RestLiAnnotationReader.java", "diffHunk": "@@ -2595,6 +2626,12 @@ private static void validateFinderMethod(final ResourceMethodDescriptor finderMe\n     Method method = finderMethodDescriptor.getMethod();\n     Class<?> valueClass = resourceModel.getValueClass();\n \n+    if (valueClass == null)\n+    {\n+      throw new ResourceConfigException(\"Class '\" + resourceModel.getResourceClass().getName()\n+          + \"' is not supported for @Finder method\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52bceeeceb1485b894f852d70d0ca1d94a1d5d70"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4MjUwMg==", "bodyText": "You can use the expectedExceptions and expectedExceptionsMessageRegExp attributes of the @test annotation", "url": "https://github.com/linkedin/rest.li/pull/303#discussion_r430682502", "createdAt": "2020-05-26T20:16:37Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/test/java/com/linkedin/restli/internal/server/model/TestRestLiApiBuilder.java", "diffHunk": "@@ -198,4 +198,62 @@ public void testActionReturnType(Class<?> resourceClass, Class<?> expectedAction\n       Assert.assertEquals(resourceMethodDescriptor.getActionReturnType(), expectedActionReturnType);\n     }\n   }\n+\n+  @DataProvider(name = \"unsupportedFinderResourceTypeData\")\n+  private Object[][] unsupportedFinderResourceTypeData()\n+  {\n+    return new Object[][]\n+        {\n+            { FinderUnsupportedKeyUnstructuredDataResource.class, \"KeyUnstructuredDataResource class does not support for @Finder methods\" },\n+            { FinderUnsupportedSingleUnstructuredDataResource.class, \"SingleUnstructuredDataResource class does not support for @Finder methods\" }\n+        };\n+  }\n+\n+  /**\n+   * Ensures that when finder methods are processed, if the return type is not of a Record, then it will be warned.\n+   * For instance, it should recognize that the \"logical\" return type for a method\n+   * {@code Task<ActionResult<String>> doFoo();} is {@code String.class}.\n+   *\n+   * @param resourceClass resource used as an input\n+   */\n+  @Test(dataProvider = \"unsupportedFinderResourceTypeData\")\n+  public void testFinderUnsupportedResourceType(Class<?> resourceClass, String expectedPartialMessage)\n+  {\n+    try\n+    {\n+      RestLiApiBuilder.buildResourceModels(Collections.singleton(resourceClass));\n+      Assert.fail(\"For the finder resource class with a non RecordTemplate sub class, we shall throw an exception\");\n+    }\n+    catch (ResourceConfigException resourceConfigException)\n+    {\n+      Assert.assertTrue(resourceConfigException.getMessage().contains(expectedPartialMessage),\n+          String.format(\"Expected %s with message containing \\\"%s\\\" but instead found message \\\"%s\\\"\",\n+              ResourceConfigException.class.getSimpleName(), expectedPartialMessage, resourceConfigException.getMessage()));\n+    }\n+  }\n+\n+  @DataProvider(name = \"finderSupportedResourceTypeData\")\n+  private Object[][] finderSupportedResourceTypeData()\n+  {\n+    return new Object[][]\n+        {\n+            { FinderSupportedAssociationDataResource.class },\n+            { FinderSupportedComplexKeyDataResource.class },\n+            { FinderWithActionResource.class }\n+        };\n+  }\n+\n+  @Test(dataProvider = \"finderSupportedResourceTypeData\")\n+  public void testFinderSupportedResourceType(Class<?> resourceClass)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52bceeeceb1485b894f852d70d0ca1d94a1d5d70"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4Mjg2Nw==", "bodyText": "nit: remove \"for\"\n.. does not support @finder methods\"", "url": "https://github.com/linkedin/rest.li/pull/303#discussion_r430682867", "createdAt": "2020-05-26T20:17:19Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/model/RestLiAnnotationReader.java", "diffHunk": "@@ -554,6 +554,20 @@ else if (KeyUnstructuredDataResource.class.isAssignableFrom(collectionResourceCl\n         @SuppressWarnings(\"unchecked\")\n         Class<? extends KeyUnstructuredDataResource<?>> clazz = (Class<? extends KeyUnstructuredDataResource<?>>) collectionResourceClass;\n         actualTypeArguments = ReflectionUtils.getTypeArgumentsParametrized(KeyUnstructuredDataResource.class, clazz);\n+        for (Method method : collectionResourceClass.getDeclaredMethods())\n+        {\n+          if (method.isSynthetic())\n+          {\n+            continue;\n+          }\n+          Finder finderAnno = method.getAnnotation(Finder.class);\n+          if (finderAnno == null)\n+          {\n+            continue;\n+          }\n+          throw new ResourceConfigException(\"Class '\" + collectionResourceClass.getName() + \"' of a\"\n+              + \"KeyUnstructuredDataResource class does not support for @Finder methods\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52bceeeceb1485b894f852d70d0ca1d94a1d5d70"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4MjkyOQ==", "bodyText": "nit: remove \"for\"\n.. does not support @finder methods\"", "url": "https://github.com/linkedin/rest.li/pull/303#discussion_r430682929", "createdAt": "2020-05-26T20:17:25Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/model/RestLiAnnotationReader.java", "diffHunk": "@@ -665,6 +679,23 @@ private static ResourceModel processSimpleResource(final Class<?> resourceClass,\n       List<Class<?>> kvParams = ReflectionUtils.getTypeArguments(SingleObjectResource.class, clazz);\n       valueClass = kvParams.get(0).asSubclass(RecordTemplate.class);\n     }\n+    else\n+    {\n+      for (Method method : resourceClass.getDeclaredMethods())\n+      {\n+        if (method.isSynthetic())\n+        {\n+          continue;\n+        }\n+        Finder finderAnno = method.getAnnotation(Finder.class);\n+        if (finderAnno == null)\n+        {\n+          continue;\n+        }\n+        throw new ResourceConfigException(\"Class '\" + resourceClass.getName() + \"' of a SingleUnstructuredDataResource \"\n+            + \"class does not support for @Finder methods\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52bceeeceb1485b894f852d70d0ca1d94a1d5d70"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4OTE2Mzc4", "url": "https://github.com/linkedin/rest.li/pull/303#pullrequestreview-418916378", "createdAt": "2020-05-27T07:16:08Z", "commit": {"oid": "1aa8d8fc46b95a7856af8401be77990a6ab64774"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzoxNjowOFrOGa8VRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzoxNjo1M1rOGa8WsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwNDY0NQ==", "bodyText": "nit: this should be \"does not support @finder\"", "url": "https://github.com/linkedin/rest.li/pull/303#discussion_r430904645", "createdAt": "2020-05-27T07:16:08Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/model/RestLiAnnotationReader.java", "diffHunk": "@@ -2629,7 +2629,7 @@ private static void validateFinderMethod(final ResourceMethodDescriptor finderMe\n     if (valueClass == null)\n     {\n       throw new ResourceConfigException(\"Class '\" + resourceModel.getResourceClass().getName()\n-          + \"' is not supported for @Finder method\");\n+          + \"' is not supported @Finder method\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1aa8d8fc46b95a7856af8401be77990a6ab64774"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwNTAwOA==", "bodyText": "Not needed as the test framework would fail if expected exception is not thrown", "url": "https://github.com/linkedin/rest.li/pull/303#discussion_r430905008", "createdAt": "2020-05-27T07:16:53Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/test/java/com/linkedin/restli/internal/server/model/TestRestLiApiBuilder.java", "diffHunk": "@@ -216,20 +216,13 @@ public void testActionReturnType(Class<?> resourceClass, Class<?> expectedAction\n    *\n    * @param resourceClass resource used as an input\n    */\n-  @Test(dataProvider = \"unsupportedFinderResourceTypeData\")\n+  @Test(dataProvider = \"unsupportedFinderResourceTypeData\",\n+      expectedExceptions = ResourceConfigException.class,\n+      expectedExceptionsMessageRegExp = \"Class '.*' of a ((SingleUnstructuredDataResource)|(KeyUnstructuredDataResource)) class does not support @Finder methods\")\n   public void testFinderUnsupportedResourceType(Class<?> resourceClass, String expectedPartialMessage)\n   {\n-    try\n-    {\n-      RestLiApiBuilder.buildResourceModels(Collections.singleton(resourceClass));\n-      Assert.fail(\"For the finder resource class with a non RecordTemplate sub class, we shall throw an exception\");\n-    }\n-    catch (ResourceConfigException resourceConfigException)\n-    {\n-      Assert.assertTrue(resourceConfigException.getMessage().contains(expectedPartialMessage),\n-          String.format(\"Expected %s with message containing \\\"%s\\\" but instead found message \\\"%s\\\"\",\n-              ResourceConfigException.class.getSimpleName(), expectedPartialMessage, resourceConfigException.getMessage()));\n-    }\n+    RestLiApiBuilder.buildResourceModels(Collections.singleton(resourceClass));\n+    Assert.fail(\"For the finder resource class with a non RecordTemplate sub class, we shall throw an exception\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1aa8d8fc46b95a7856af8401be77990a6ab64774"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0957d7533acadfff5e8d5ad1cefe1158d418ae66", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/0957d7533acadfff5e8d5ad1cefe1158d418ae66", "committedDate": "2020-05-28T03:50:41Z", "message": "Handling NPE for finder resources using non-RecordTemplate classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b0200cb9a537f54bc7c0574c61621290d677c5b", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/1b0200cb9a537f54bc7c0574c61621290d677c5b", "committedDate": "2020-05-28T03:50:41Z", "message": "Address testShutdownRequestOutstanding failure by following flaky test processing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56cb228b7aa7974eca22284ef30501f058857b37", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/56cb228b7aa7974eca22284ef30501f058857b37", "committedDate": "2020-05-28T03:50:41Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcc1872eae620bf6748d6b7aea4fb89870749d81", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/dcc1872eae620bf6748d6b7aea4fb89870749d81", "committedDate": "2020-05-28T03:50:41Z", "message": "Fix wording from return type to unstructured resources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82d584080292956c143a0ef4ce240f57ef028b40", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/82d584080292956c143a0ef4ce240f57ef028b40", "committedDate": "2020-05-28T03:50:42Z", "message": "Change to stop the process early when we find out there is finder method in SingleUnstructuredDataResource or KeyUnstructuredDataResource also make valueClass NPE check result message generic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3a3267129d67364dd82f1d1cb0107eff8b75932", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/d3a3267129d67364dd82f1d1cb0107eff8b75932", "committedDate": "2020-05-28T03:50:42Z", "message": "Add 3 supported resouce class in unit test, fix over the 2 unsupported resource class for finder in unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0439b7eb03324960cb9609b312fbfc1f452b8c49", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/0439b7eb03324960cb9609b312fbfc1f452b8c49", "committedDate": "2020-05-28T03:50:42Z", "message": "for wc-test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13e152d478e7b79468698a0de07a9833ab2c27bb", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/13e152d478e7b79468698a0de07a9833ab2c27bb", "committedDate": "2020-05-28T03:50:42Z", "message": "Change the version to a proper format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fe0af476cfaaebf809a0323fca4df65a7d36080", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/4fe0af476cfaaebf809a0323fca4df65a7d36080", "committedDate": "2020-05-28T03:50:42Z", "message": "Addressing Karthik's comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbdaed1026cd5c700b09fdcd823f0d6c5099fc4f", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/dbdaed1026cd5c700b09fdcd823f0d6c5099fc4f", "committedDate": "2020-05-28T03:50:42Z", "message": "Addressing wording in the case where valueClass is null, also remove redundant assert in testing"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3759bfeffc11a4c41ec7d75aeea66ed866a283c5", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/3759bfeffc11a4c41ec7d75aeea66ed866a283c5", "committedDate": "2020-05-27T07:55:27Z", "message": "Addressing wording in the case where valueClass is null, also remove redundant assert in testing"}, "afterCommit": {"oid": "dbdaed1026cd5c700b09fdcd823f0d6c5099fc4f", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/dbdaed1026cd5c700b09fdcd823f0d6c5099fc4f", "committedDate": "2020-05-28T03:50:42Z", "message": "Addressing wording in the case where valueClass is null, also remove redundant assert in testing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNDgzNTkz", "url": "https://github.com/linkedin/rest.li/pull/303#pullrequestreview-420483593", "createdAt": "2020-05-28T20:53:33Z", "commit": {"oid": "dbdaed1026cd5c700b09fdcd823f0d6c5099fc4f"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMDo1MzozNFrOGcGVGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMTowMzozMFrOGcGouA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjExNzAxOA==", "bodyText": "If you're using expectedExceptionsMessageRegExp, then you don't need the second parameter anymore. You can also remove it from the data provider.", "url": "https://github.com/linkedin/rest.li/pull/303#discussion_r432117018", "createdAt": "2020-05-28T20:53:34Z", "author": {"login": "evanw555"}, "path": "restli-server/src/test/java/com/linkedin/restli/internal/server/model/TestRestLiApiBuilder.java", "diffHunk": "@@ -198,4 +198,54 @@ public void testActionReturnType(Class<?> resourceClass, Class<?> expectedAction\n       Assert.assertEquals(resourceMethodDescriptor.getActionReturnType(), expectedActionReturnType);\n     }\n   }\n+\n+  @DataProvider(name = \"unsupportedFinderResourceTypeData\")\n+  private Object[][] unsupportedFinderResourceTypeData()\n+  {\n+    return new Object[][]\n+        {\n+            { FinderUnsupportedKeyUnstructuredDataResource.class, \"KeyUnstructuredDataResource class does not support @Finder methods\" },\n+            { FinderUnsupportedSingleUnstructuredDataResource.class, \"SingleUnstructuredDataResource class does not support @Finder methods\" }\n+        };\n+  }\n+\n+  /**\n+   * Ensures that when finder methods are processed, if the return type is not of a Record, then it will be warned.\n+   * For instance, it should recognize that the \"logical\" return type for a method\n+   * {@code Task<ActionResult<String>> doFoo();} is {@code String.class}.\n+   *\n+   * @param resourceClass resource used as an input\n+   */\n+  @Test(dataProvider = \"unsupportedFinderResourceTypeData\",\n+      expectedExceptions = ResourceConfigException.class,\n+      expectedExceptionsMessageRegExp = \"Class '.*' of a ((SingleUnstructuredDataResource)|(KeyUnstructuredDataResource)) class does not support @Finder methods\")\n+  public void testFinderUnsupportedResourceType(Class<?> resourceClass, String expectedPartialMessage)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbdaed1026cd5c700b09fdcd823f0d6c5099fc4f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjExNzQyNA==", "bodyText": "This javadoc is out-of-date", "url": "https://github.com/linkedin/rest.li/pull/303#discussion_r432117424", "createdAt": "2020-05-28T20:54:23Z", "author": {"login": "evanw555"}, "path": "restli-server/src/test/java/com/linkedin/restli/internal/server/model/TestRestLiApiBuilder.java", "diffHunk": "@@ -198,4 +198,54 @@ public void testActionReturnType(Class<?> resourceClass, Class<?> expectedAction\n       Assert.assertEquals(resourceMethodDescriptor.getActionReturnType(), expectedActionReturnType);\n     }\n   }\n+\n+  @DataProvider(name = \"unsupportedFinderResourceTypeData\")\n+  private Object[][] unsupportedFinderResourceTypeData()\n+  {\n+    return new Object[][]\n+        {\n+            { FinderUnsupportedKeyUnstructuredDataResource.class, \"KeyUnstructuredDataResource class does not support @Finder methods\" },\n+            { FinderUnsupportedSingleUnstructuredDataResource.class, \"SingleUnstructuredDataResource class does not support @Finder methods\" }\n+        };\n+  }\n+\n+  /**\n+   * Ensures that when finder methods are processed, if the return type is not of a Record, then it will be warned.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbdaed1026cd5c700b09fdcd823f0d6c5099fc4f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjExODc0Mw==", "bodyText": "Where's the @finder method? Also you can do public class to be consistent with the other classes here.", "url": "https://github.com/linkedin/rest.li/pull/303#discussion_r432118743", "createdAt": "2020-05-28T20:56:58Z", "author": {"login": "evanw555"}, "path": "restli-server/src/test/java/com/linkedin/restli/internal/server/model/SampleResources.java", "diffHunk": "@@ -759,4 +762,53 @@ public void AttachmentParamsIncorrectDataTypeAction(@RestLiAttachmentsParam Stri\n \n   @RestLiCollection(name = \"collectionComplexKeyTask\")\n   class CollectionComplexKeyTask extends ComplexKeyResourceTaskTemplate<EmptyRecord, EmptyRecord, EmptyRecord> {}\n+\n+  @RestLiCollection(name = \"lucky\", keyName = \"dayOfWeek\")\n+  public class FinderUnsupportedKeyUnstructuredDataResource extends UnstructuredDataCollectionResourceTemplate<Integer>\n+  {\n+    @Finder(\"key\")\n+    public List<String> findLucky(@PagingContextParam final PagingContext context,\n+                                 @QueryParam(\"dayOfWeek\") Integer dayOfWeek) throws Exception\n+    {\n+      return Collections.singletonList(\"finderReturns\");\n+    }\n+  }\n+\n+  @RestLiSimpleResource(name=\"single\")\n+  public class FinderUnsupportedSingleUnstructuredDataResource extends UnstructuredDataSimpleResourceTemplate\n+  {\n+    @Finder(\"single\")\n+    public List<EmptyRecord> findLucky(@PagingContextParam final PagingContext context,\n+                                      @QueryParam(\"dayOfWeek\") Integer dayOfWeek) throws Exception\n+    {\n+      return Collections.singletonList(new EmptyRecord());\n+    }\n+  }\n+\n+  @RestLiAssociation(\n+      name=\"associate\",\n+      assocKeys={@Key(name=\"followerID\", type=long.class), @Key(name=\"followeeID\", type=long.class)})\n+  public class FinderSupportedAssociationDataResource extends AssociationResourceTemplate<EmptyRecord>\n+  {\n+    @Finder(\"associate\")\n+    public List<EmptyRecord> find(@PagingContextParam final PagingContext context,\n+        @QueryParam(\"dayOfWeek\") Integer dayOfWeek) throws Exception\n+    {\n+      return Collections.singletonList(new EmptyRecord());\n+    }\n+  }\n+\n+  @RestLiCollection(name=\"collectionComplexKey\")\n+  public class FinderSupportedComplexKeyDataResource extends ComplexKeyResourceTemplate<EmptyRecord, EmptyRecord, EmptyRecord>\n+  {\n+    @Finder(\"complex\")\n+    public List<EmptyRecord> find(@PagingContextParam final PagingContext context,\n+                                  @QueryParam(\"dayOfWeek\") Integer dayOfWeek) throws Exception\n+    {\n+      return Collections.singletonList(new EmptyRecord());\n+    }\n+  }\n+\n+  @RestLiActions(name = \"foo\")\n+  static class FinderWithActionResource {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbdaed1026cd5c700b09fdcd823f0d6c5099fc4f"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjExOTA5Mg==", "bodyText": "nit: would suggest pluralizing as methods. This also is consistent with your other new exception.", "url": "https://github.com/linkedin/rest.li/pull/303#discussion_r432119092", "createdAt": "2020-05-28T20:57:42Z", "author": {"login": "evanw555"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/model/RestLiAnnotationReader.java", "diffHunk": "@@ -2595,6 +2626,12 @@ private static void validateFinderMethod(final ResourceMethodDescriptor finderMe\n     Method method = finderMethodDescriptor.getMethod();\n     Class<?> valueClass = resourceModel.getValueClass();\n \n+    if (valueClass == null)\n+    {\n+      throw new ResourceConfigException(\"Class '\" + resourceModel.getResourceClass().getSimpleName()\n+          + \"' does not support @Finder method\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbdaed1026cd5c700b09fdcd823f0d6c5099fc4f"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEyMDk5MQ==", "bodyText": "This logic seems overly complicated to me, and it's also duplicated. Could you not simply have a check in validateFinderMethod which accesses the class type via the ResourceModel? Perhaps I'm missing something...", "url": "https://github.com/linkedin/rest.li/pull/303#discussion_r432120991", "createdAt": "2020-05-28T21:01:18Z", "author": {"login": "evanw555"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/model/RestLiAnnotationReader.java", "diffHunk": "@@ -554,6 +554,20 @@ else if (KeyUnstructuredDataResource.class.isAssignableFrom(collectionResourceCl\n         @SuppressWarnings(\"unchecked\")\n         Class<? extends KeyUnstructuredDataResource<?>> clazz = (Class<? extends KeyUnstructuredDataResource<?>>) collectionResourceClass;\n         actualTypeArguments = ReflectionUtils.getTypeArgumentsParametrized(KeyUnstructuredDataResource.class, clazz);\n+        for (Method method : collectionResourceClass.getDeclaredMethods())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbdaed1026cd5c700b09fdcd823f0d6c5099fc4f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEyMjA0MA==", "bodyText": "nit: Class X of a Y class doesn't really make sense. It would be more clear to say Class X extending Y\nAlso, I'd suggest not hard-coding the class names into the String message. You should programmatically get the class name. This lets the navigate/refactor tool find this reference.", "url": "https://github.com/linkedin/rest.li/pull/303#discussion_r432122040", "createdAt": "2020-05-28T21:03:30Z", "author": {"login": "evanw555"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/model/RestLiAnnotationReader.java", "diffHunk": "@@ -554,6 +554,20 @@ else if (KeyUnstructuredDataResource.class.isAssignableFrom(collectionResourceCl\n         @SuppressWarnings(\"unchecked\")\n         Class<? extends KeyUnstructuredDataResource<?>> clazz = (Class<? extends KeyUnstructuredDataResource<?>>) collectionResourceClass;\n         actualTypeArguments = ReflectionUtils.getTypeArgumentsParametrized(KeyUnstructuredDataResource.class, clazz);\n+        for (Method method : collectionResourceClass.getDeclaredMethods())\n+        {\n+          if (method.isSynthetic())\n+          {\n+            continue;\n+          }\n+          Finder finderAnno = method.getAnnotation(Finder.class);\n+          if (finderAnno == null)\n+          {\n+            continue;\n+          }\n+          throw new ResourceConfigException(\"Class '\" + collectionResourceClass.getSimpleName() + \"' of a\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbdaed1026cd5c700b09fdcd823f0d6c5099fc4f"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82bbb0e5d3615e5c3580288d4c4cd819903ea43a", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/82bbb0e5d3615e5c3580288d4c4cd819903ea43a", "committedDate": "2020-05-29T03:45:06Z", "message": "Addressing Evan's comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMTg4MTMw", "url": "https://github.com/linkedin/rest.li/pull/303#pullrequestreview-421188130", "createdAt": "2020-05-29T18:24:20Z", "commit": {"oid": "82bbb0e5d3615e5c3580288d4c4cd819903ea43a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODoyNDoyMFrOGcnjWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODoyNjo1M1rOGcnoDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY2MTMzOQ==", "bodyText": "I just realized that this will not have the intended effect. If class A extends some template class, and that extends KeyUnstructuredDataResource, then this will print the name of the template class (I think). I would suggest not printing the name of the superclass and instead just append ...because it's an unstructured data resource at the end of the message.", "url": "https://github.com/linkedin/rest.li/pull/303#discussion_r432661339", "createdAt": "2020-05-29T18:24:20Z", "author": {"login": "evanw555"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/model/RestLiAnnotationReader.java", "diffHunk": "@@ -2595,6 +2595,13 @@ private static void validateFinderMethod(final ResourceMethodDescriptor finderMe\n     Method method = finderMethodDescriptor.getMethod();\n     Class<?> valueClass = resourceModel.getValueClass();\n \n+    if (SingleUnstructuredDataResource.class.isAssignableFrom(resourceModel.getResourceClass())\n+        || KeyUnstructuredDataResource.class.isAssignableFrom(resourceModel.getResourceClass()))\n+    {\n+      throw new ResourceConfigException(\"Class '\" + resourceModel.getResourceClass().getSimpleName()\n+          + \"' extends the '\" + resourceModel.getResourceClass().getSuperclass().getSimpleName() + \"' class does not support @Finder methods\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82bbb0e5d3615e5c3580288d4c4cd819903ea43a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY2MjU0MA==", "bodyText": "Although this is alright, an alternative would be to leverage the logic in ResourceModel#getResourceEntityType to do this check without it being class-specific. You can avoid logic duplication this way.", "url": "https://github.com/linkedin/rest.li/pull/303#discussion_r432662540", "createdAt": "2020-05-29T18:26:53Z", "author": {"login": "evanw555"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/model/RestLiAnnotationReader.java", "diffHunk": "@@ -2595,6 +2595,13 @@ private static void validateFinderMethod(final ResourceMethodDescriptor finderMe\n     Method method = finderMethodDescriptor.getMethod();\n     Class<?> valueClass = resourceModel.getValueClass();\n \n+    if (SingleUnstructuredDataResource.class.isAssignableFrom(resourceModel.getResourceClass())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82bbb0e5d3615e5c3580288d4c4cd819903ea43a"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d3539331b352adb82ccfff86d2f8386a9c1df57", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/6d3539331b352adb82ccfff86d2f8386a9c1df57", "committedDate": "2020-05-29T19:10:06Z", "message": "Addressing Evan's comment about code quality and readability"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a19b7856201f5d34ea122a6df7a54c74cbafefc", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/4a19b7856201f5d34ea122a6df7a54c74cbafefc", "committedDate": "2020-05-29T22:09:06Z", "message": "address comment about redundant resource class in test where it won't hit the changed code path"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMzQ1MTcw", "url": "https://github.com/linkedin/rest.li/pull/303#pullrequestreview-421345170", "createdAt": "2020-05-29T23:19:28Z", "commit": {"oid": "4a19b7856201f5d34ea122a6df7a54c74cbafefc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4804, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}