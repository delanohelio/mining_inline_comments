{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NDk1MzAy", "number": 179, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMToxMzowOVrODhR1zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMzo0MToyOFrODjUqsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MjIxOTAzOnYy", "diffSide": "RIGHT", "path": "restli-common/src/main/java/com/linkedin/restli/common/TypeSpec.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMToxMzowOVrOFr9VNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMjoxODozN1rOFr_leg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYzNzk0MA==", "bodyText": "Why do you need the non primitive class check?", "url": "https://github.com/linkedin/rest.li/pull/179#discussion_r381637940", "createdAt": "2020-02-20T01:13:09Z", "author": {"login": "karthikbalasub"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/TypeSpec.java", "diffHunk": "@@ -67,7 +68,11 @@ public TypeSpec(Class<T> type)\n   private static DataSchema backfillSchemaIfPossible(Class<?> type)\n   {\n     // These are all the classes used for type specs that are \"schema-less\".\n-    if(type == CompoundKey.class || type == ComplexResourceKey.class || type == Void.class) return null;\n+    if (type == CompoundKey.class || type == ComplexResourceKey.class || type == Void.class\n+        || (!DataSchemaUtil.isPrimitiveClass(type) && DataTemplateUtil.hasCoercer(type)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a086b71acb35ef1a346c5cf66a839ad7763ac173"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY3NDg3NA==", "bodyText": "there are data schemas available for primitives and coercers also registers primitives", "url": "https://github.com/linkedin/rest.li/pull/179#discussion_r381674874", "createdAt": "2020-02-20T02:18:37Z", "author": {"login": "aman1309"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/TypeSpec.java", "diffHunk": "@@ -67,7 +68,11 @@ public TypeSpec(Class<T> type)\n   private static DataSchema backfillSchemaIfPossible(Class<?> type)\n   {\n     // These are all the classes used for type specs that are \"schema-less\".\n-    if(type == CompoundKey.class || type == ComplexResourceKey.class || type == Void.class) return null;\n+    if (type == CompoundKey.class || type == ComplexResourceKey.class || type == Void.class\n+        || (!DataSchemaUtil.isPrimitiveClass(type) && DataTemplateUtil.hasCoercer(type)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYzNzk0MA=="}, "originalCommit": {"oid": "a086b71acb35ef1a346c5cf66a839ad7763ac173"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NTg3OTQ0OnYy", "diffSide": "RIGHT", "path": "restli-client/src/main/java/com/linkedin/restli/client/ActionRequestBuilder.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxODoxMzoxNVrOFsd4bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxOTowNzoyN1rOFsfmLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE3MTI0NA==", "bodyText": "This is not loading from resourespec?", "url": "https://github.com/linkedin/rest.li/pull/179#discussion_r382171244", "createdAt": "2020-02-20T18:13:15Z", "author": {"login": "karthikbalasub"}, "path": "restli-client/src/main/java/com/linkedin/restli/client/ActionRequestBuilder.java", "diffHunk": "@@ -193,7 +195,10 @@ public ActionRequestBuilder(String baseUriTemplate, TypeSpec<V> elementType, Res\n     if (_resourceSpec.getRequestMetadata(_name) == null) // old builder code in use\n     {\n       requestDataSchema = DynamicRecordMetadata.buildSchema(_name, _actionParams.keySet());\n-\n+      if (_elementType == null)\n+      {\n+        _elementType = new TypeSpec<>(_elementClass);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fabf871f9e30ca714414cba9e525a69c976e9066"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE3MjI4NQ==", "bodyText": "this is old request builder code where spec doesn't have that info. see the else part", "url": "https://github.com/linkedin/rest.li/pull/179#discussion_r382172285", "createdAt": "2020-02-20T18:15:18Z", "author": {"login": "aman1309"}, "path": "restli-client/src/main/java/com/linkedin/restli/client/ActionRequestBuilder.java", "diffHunk": "@@ -193,7 +195,10 @@ public ActionRequestBuilder(String baseUriTemplate, TypeSpec<V> elementType, Res\n     if (_resourceSpec.getRequestMetadata(_name) == null) // old builder code in use\n     {\n       requestDataSchema = DynamicRecordMetadata.buildSchema(_name, _actionParams.keySet());\n-\n+      if (_elementType == null)\n+      {\n+        _elementType = new TypeSpec<>(_elementClass);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE3MTI0NA=="}, "originalCommit": {"oid": "fabf871f9e30ca714414cba9e525a69c976e9066"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE5OTM0MQ==", "bodyText": "Ah, didn't notice that.", "url": "https://github.com/linkedin/rest.li/pull/179#discussion_r382199341", "createdAt": "2020-02-20T19:07:27Z", "author": {"login": "karthikbalasub"}, "path": "restli-client/src/main/java/com/linkedin/restli/client/ActionRequestBuilder.java", "diffHunk": "@@ -193,7 +195,10 @@ public ActionRequestBuilder(String baseUriTemplate, TypeSpec<V> elementType, Res\n     if (_resourceSpec.getRequestMetadata(_name) == null) // old builder code in use\n     {\n       requestDataSchema = DynamicRecordMetadata.buildSchema(_name, _actionParams.keySet());\n-\n+      if (_elementType == null)\n+      {\n+        _elementType = new TypeSpec<>(_elementClass);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE3MTI0NA=="}, "originalCommit": {"oid": "fabf871f9e30ca714414cba9e525a69c976e9066"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjM0NjE1OnYy", "diffSide": "RIGHT", "path": "restli-common/src/main/java/com/linkedin/restli/common/TypeSpec.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMDo0MTo0N1rOFsib-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTo0NzoxMVrOFskQ5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI0NTg4Mw==", "bodyText": "Why don't you just keep track of registered custom classes in Custom.java? I think that would be simpler", "url": "https://github.com/linkedin/rest.li/pull/179#discussion_r382245883", "createdAt": "2020-02-20T20:41:47Z", "author": {"login": "evanw555"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/TypeSpec.java", "diffHunk": "@@ -67,7 +68,11 @@ public TypeSpec(Class<T> type)\n   private static DataSchema backfillSchemaIfPossible(Class<?> type)\n   {\n     // These are all the classes used for type specs that are \"schema-less\".\n-    if(type == CompoundKey.class || type == ComplexResourceKey.class || type == Void.class) return null;\n+    if (type == CompoundKey.class || type == ComplexResourceKey.class || type == Void.class\n+        || (!DataSchemaUtil.isPrimitiveClass(type) && DataTemplateUtil.hasCoercer(type)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fabf871f9e30ca714414cba9e525a69c976e9066"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI1NjAwMQ==", "bodyText": "we could do that but didn't see much value for adding another map when this can be achieved using existing ones. Also, since coercers are only for customs, so felt like doing it this way. Let me know if you see any issue with this.", "url": "https://github.com/linkedin/rest.li/pull/179#discussion_r382256001", "createdAt": "2020-02-20T21:01:07Z", "author": {"login": "aman1309"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/TypeSpec.java", "diffHunk": "@@ -67,7 +68,11 @@ public TypeSpec(Class<T> type)\n   private static DataSchema backfillSchemaIfPossible(Class<?> type)\n   {\n     // These are all the classes used for type specs that are \"schema-less\".\n-    if(type == CompoundKey.class || type == ComplexResourceKey.class || type == Void.class) return null;\n+    if (type == CompoundKey.class || type == ComplexResourceKey.class || type == Void.class\n+        || (!DataSchemaUtil.isPrimitiveClass(type) && DataTemplateUtil.hasCoercer(type)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI0NTg4Mw=="}, "originalCommit": {"oid": "fabf871f9e30ca714414cba9e525a69c976e9066"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2NTAxMQ==", "bodyText": "true, though I feel like this can be more abstracted. What if you created a new helper method (e.g. DataTemplateUtil#isCustomType(Class<?>) which itself checks the coercers and does the logic to exclude primitives. It doesn't make sense to me that this consumer method needs to know that primitives also have coercers, it just wants to know if a type is a custom typeref/custom type/whatever.", "url": "https://github.com/linkedin/rest.li/pull/179#discussion_r382265011", "createdAt": "2020-02-20T21:22:38Z", "author": {"login": "evanw555"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/TypeSpec.java", "diffHunk": "@@ -67,7 +68,11 @@ public TypeSpec(Class<T> type)\n   private static DataSchema backfillSchemaIfPossible(Class<?> type)\n   {\n     // These are all the classes used for type specs that are \"schema-less\".\n-    if(type == CompoundKey.class || type == ComplexResourceKey.class || type == Void.class) return null;\n+    if (type == CompoundKey.class || type == ComplexResourceKey.class || type == Void.class\n+        || (!DataSchemaUtil.isPrimitiveClass(type) && DataTemplateUtil.hasCoercer(type)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI0NTg4Mw=="}, "originalCommit": {"oid": "fabf871f9e30ca714414cba9e525a69c976e9066"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2NTkwOQ==", "bodyText": "Another alternative is to create the helper method as Custom#isCustomType(Class<?>), since it may not be appropriate for DataTemplateUtil to have a sense of what is \"custom\" and what isn't.", "url": "https://github.com/linkedin/rest.li/pull/179#discussion_r382265909", "createdAt": "2020-02-20T21:24:36Z", "author": {"login": "evanw555"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/TypeSpec.java", "diffHunk": "@@ -67,7 +68,11 @@ public TypeSpec(Class<T> type)\n   private static DataSchema backfillSchemaIfPossible(Class<?> type)\n   {\n     // These are all the classes used for type specs that are \"schema-less\".\n-    if(type == CompoundKey.class || type == ComplexResourceKey.class || type == Void.class) return null;\n+    if (type == CompoundKey.class || type == ComplexResourceKey.class || type == Void.class\n+        || (!DataSchemaUtil.isPrimitiveClass(type) && DataTemplateUtil.hasCoercer(type)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI0NTg4Mw=="}, "originalCommit": {"oid": "fabf871f9e30ca714414cba9e525a69c976e9066"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI3NTgxNA==", "bodyText": "done", "url": "https://github.com/linkedin/rest.li/pull/179#discussion_r382275814", "createdAt": "2020-02-20T21:47:11Z", "author": {"login": "aman1309"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/TypeSpec.java", "diffHunk": "@@ -67,7 +68,11 @@ public TypeSpec(Class<T> type)\n   private static DataSchema backfillSchemaIfPossible(Class<?> type)\n   {\n     // These are all the classes used for type specs that are \"schema-less\".\n-    if(type == CompoundKey.class || type == ComplexResourceKey.class || type == Void.class) return null;\n+    if (type == CompoundKey.class || type == ComplexResourceKey.class || type == Void.class\n+        || (!DataSchemaUtil.isPrimitiveClass(type) && DataTemplateUtil.hasCoercer(type)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI0NTg4Mw=="}, "originalCommit": {"oid": "fabf871f9e30ca714414cba9e525a69c976e9066"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2Njg1NDUzOnYy", "diffSide": "RIGHT", "path": "data/src/main/java/com/linkedin/data/template/Custom.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzo1Nzo1MlrOFsnYbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNTo1MTo0NVrOFssW3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMyNjg5NA==", "bodyText": "Thinking about this now. How will this behave for enums? You should test this. It looks like the Enum type has a coercer, yet it's not in the \"primitives\" mapping. Would this method return true?", "url": "https://github.com/linkedin/rest.li/pull/179#discussion_r382326894", "createdAt": "2020-02-20T23:57:52Z", "author": {"login": "evanw555"}, "path": "data/src/main/java/com/linkedin/data/template/Custom.java", "diffHunk": "@@ -149,4 +151,16 @@ public static void initializeCustomClass(Class<?> customClass)\n   {\n     DataTemplateUtil.initializeClass(customClass);\n   }\n+\n+  /**\n+   * Return whether the input class is a Custom type or not\n+   * uses coercer map to identify as each custom type must register a coercer excluding the primitive types.\n+   *\n+   * @param clazz is the class to check.\n+   * @return true if an object of the input class is a Custom type.\n+   */\n+  public static boolean isCustomType(Class<?> clazz)\n+  {\n+    return !DataSchemaUtil.isPrimitiveClass(clazz) && DataTemplateUtil.hasCoercer(clazz);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cad4e0c7dcfa20cca9e8499a8e0de206883130d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM2MDc1OA==", "bodyText": "removed the changes from typespec as its anyway legacy code and not needed for fix as it handled in action request builder change.", "url": "https://github.com/linkedin/rest.li/pull/179#discussion_r382360758", "createdAt": "2020-02-21T02:03:06Z", "author": {"login": "aman1309"}, "path": "data/src/main/java/com/linkedin/data/template/Custom.java", "diffHunk": "@@ -149,4 +151,16 @@ public static void initializeCustomClass(Class<?> customClass)\n   {\n     DataTemplateUtil.initializeClass(customClass);\n   }\n+\n+  /**\n+   * Return whether the input class is a Custom type or not\n+   * uses coercer map to identify as each custom type must register a coercer excluding the primitive types.\n+   *\n+   * @param clazz is the class to check.\n+   * @return true if an object of the input class is a Custom type.\n+   */\n+  public static boolean isCustomType(Class<?> clazz)\n+  {\n+    return !DataSchemaUtil.isPrimitiveClass(clazz) && DataTemplateUtil.hasCoercer(clazz);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMyNjg5NA=="}, "originalCommit": {"oid": "3cad4e0c7dcfa20cca9e8499a8e0de206883130d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3NTQzMw==", "bodyText": "Did you check this wouldn't be needed for other places that use TypeSpec? I think it would still be good to have the check in TypeSpec as fallback. It doesn't hurt to be extra safe?", "url": "https://github.com/linkedin/rest.li/pull/179#discussion_r382375433", "createdAt": "2020-02-21T03:05:58Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/template/Custom.java", "diffHunk": "@@ -149,4 +151,16 @@ public static void initializeCustomClass(Class<?> customClass)\n   {\n     DataTemplateUtil.initializeClass(customClass);\n   }\n+\n+  /**\n+   * Return whether the input class is a Custom type or not\n+   * uses coercer map to identify as each custom type must register a coercer excluding the primitive types.\n+   *\n+   * @param clazz is the class to check.\n+   * @return true if an object of the input class is a Custom type.\n+   */\n+  public static boolean isCustomType(Class<?> clazz)\n+  {\n+    return !DataSchemaUtil.isPrimitiveClass(clazz) && DataTemplateUtil.hasCoercer(clazz);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMyNjg5NA=="}, "originalCommit": {"oid": "3cad4e0c7dcfa20cca9e8499a8e0de206883130d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQwODQxMg==", "bodyText": "will take it as a separate PR since adding multiple checks like primitive and enum didn't seem right.\nAlso, BatchRequests are build in a same way which would affect the performance but other places the class is constant.", "url": "https://github.com/linkedin/rest.li/pull/179#discussion_r382408412", "createdAt": "2020-02-21T05:51:45Z", "author": {"login": "aman1309"}, "path": "data/src/main/java/com/linkedin/data/template/Custom.java", "diffHunk": "@@ -149,4 +151,16 @@ public static void initializeCustomClass(Class<?> customClass)\n   {\n     DataTemplateUtil.initializeClass(customClass);\n   }\n+\n+  /**\n+   * Return whether the input class is a Custom type or not\n+   * uses coercer map to identify as each custom type must register a coercer excluding the primitive types.\n+   *\n+   * @param clazz is the class to check.\n+   * @return true if an object of the input class is a Custom type.\n+   */\n+  public static boolean isCustomType(Class<?> clazz)\n+  {\n+    return !DataSchemaUtil.isPrimitiveClass(clazz) && DataTemplateUtil.hasCoercer(clazz);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMyNjg5NA=="}, "originalCommit": {"oid": "3cad4e0c7dcfa20cca9e8499a8e0de206883130d"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2Njg1Njc0OnYy", "diffSide": "RIGHT", "path": "data/src/main/java/com/linkedin/data/template/Custom.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzo1OTowM1rOFsnZ1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMjowMjoxOVrOFspcAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMyNzI1Mg==", "bodyText": "I suggest renaming to isCustomClass to be consistent with the other methods in this class. Update the Javadoc to explain that this method checks if a given class is registered as a custom Java binding.", "url": "https://github.com/linkedin/rest.li/pull/179#discussion_r382327252", "createdAt": "2020-02-20T23:59:03Z", "author": {"login": "evanw555"}, "path": "data/src/main/java/com/linkedin/data/template/Custom.java", "diffHunk": "@@ -149,4 +151,16 @@ public static void initializeCustomClass(Class<?> customClass)\n   {\n     DataTemplateUtil.initializeClass(customClass);\n   }\n+\n+  /**\n+   * Return whether the input class is a Custom type or not\n+   * uses coercer map to identify as each custom type must register a coercer excluding the primitive types.\n+   *\n+   * @param clazz is the class to check.\n+   * @return true if an object of the input class is a Custom type.\n+   */\n+  public static boolean isCustomType(Class<?> clazz)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cad4e0c7dcfa20cca9e8499a8e0de206883130d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM2MDU3Nw==", "bodyText": "removed the changes", "url": "https://github.com/linkedin/rest.li/pull/179#discussion_r382360577", "createdAt": "2020-02-21T02:02:19Z", "author": {"login": "aman1309"}, "path": "data/src/main/java/com/linkedin/data/template/Custom.java", "diffHunk": "@@ -149,4 +151,16 @@ public static void initializeCustomClass(Class<?> customClass)\n   {\n     DataTemplateUtil.initializeClass(customClass);\n   }\n+\n+  /**\n+   * Return whether the input class is a Custom type or not\n+   * uses coercer map to identify as each custom type must register a coercer excluding the primitive types.\n+   *\n+   * @param clazz is the class to check.\n+   * @return true if an object of the input class is a Custom type.\n+   */\n+  public static boolean isCustomType(Class<?> clazz)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMyNzI1Mg=="}, "originalCommit": {"oid": "3cad4e0c7dcfa20cca9e8499a8e0de206883130d"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzY1MzYwOnYy", "diffSide": "RIGHT", "path": "restli-client/src/main/java/com/linkedin/restli/client/ActionRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMzo0MToyOFrOFvEUuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMTo1NToyM1rOFvilrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5ODIzNQ==", "bodyText": "Why are we lazily loading this class-level field in this method? Wouldn't it make more sense to just do so in the constructor?", "url": "https://github.com/linkedin/rest.li/pull/179#discussion_r384898235", "createdAt": "2020-02-27T03:41:28Z", "author": {"login": "evanw555"}, "path": "restli-client/src/main/java/com/linkedin/restli/client/ActionRequestBuilder.java", "diffHunk": "@@ -193,7 +195,10 @@ public ActionRequestBuilder(String baseUriTemplate, TypeSpec<V> elementType, Res\n     if (_resourceSpec.getRequestMetadata(_name) == null) // old builder code in use\n     {\n       requestDataSchema = DynamicRecordMetadata.buildSchema(_name, _actionParams.keySet());\n-\n+      if (_elementType == null)\n+      {\n+        _elementType = new TypeSpec<>(_elementClass);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e67ba3e87d0b6e1b6de096ecf194117db70bcdcf"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI4OTI3Nw==", "bodyText": "yeah, we have to since this is required for legacy flow only when there were no resourcespec generated. Also, It should be fine since this is builder class not the actual one.", "url": "https://github.com/linkedin/rest.li/pull/179#discussion_r385289277", "createdAt": "2020-02-27T18:24:02Z", "author": {"login": "aman1309"}, "path": "restli-client/src/main/java/com/linkedin/restli/client/ActionRequestBuilder.java", "diffHunk": "@@ -193,7 +195,10 @@ public ActionRequestBuilder(String baseUriTemplate, TypeSpec<V> elementType, Res\n     if (_resourceSpec.getRequestMetadata(_name) == null) // old builder code in use\n     {\n       requestDataSchema = DynamicRecordMetadata.buildSchema(_name, _actionParams.keySet());\n-\n+      if (_elementType == null)\n+      {\n+        _elementType = new TypeSpec<>(_elementClass);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5ODIzNQ=="}, "originalCommit": {"oid": "e67ba3e87d0b6e1b6de096ecf194117db70bcdcf"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4ODM4OQ==", "bodyText": "Ok, then why isn't it a local variable? It's not clean to have a class-level field which is only initialized and read in one particular method.", "url": "https://github.com/linkedin/rest.li/pull/179#discussion_r385388389", "createdAt": "2020-02-27T21:43:05Z", "author": {"login": "evanw555"}, "path": "restli-client/src/main/java/com/linkedin/restli/client/ActionRequestBuilder.java", "diffHunk": "@@ -193,7 +195,10 @@ public ActionRequestBuilder(String baseUriTemplate, TypeSpec<V> elementType, Res\n     if (_resourceSpec.getRequestMetadata(_name) == null) // old builder code in use\n     {\n       requestDataSchema = DynamicRecordMetadata.buildSchema(_name, _actionParams.keySet());\n-\n+      if (_elementType == null)\n+      {\n+        _elementType = new TypeSpec<>(_elementClass);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5ODIzNQ=="}, "originalCommit": {"oid": "e67ba3e87d0b6e1b6de096ecf194117db70bcdcf"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5MjYwMA==", "bodyText": "because with another constructor we accept typespec directly so that we don't have to extract the schema from the class using reflection which is a costly thing", "url": "https://github.com/linkedin/rest.li/pull/179#discussion_r385392600", "createdAt": "2020-02-27T21:52:07Z", "author": {"login": "aman1309"}, "path": "restli-client/src/main/java/com/linkedin/restli/client/ActionRequestBuilder.java", "diffHunk": "@@ -193,7 +195,10 @@ public ActionRequestBuilder(String baseUriTemplate, TypeSpec<V> elementType, Res\n     if (_resourceSpec.getRequestMetadata(_name) == null) // old builder code in use\n     {\n       requestDataSchema = DynamicRecordMetadata.buildSchema(_name, _actionParams.keySet());\n-\n+      if (_elementType == null)\n+      {\n+        _elementType = new TypeSpec<>(_elementClass);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5ODIzNQ=="}, "originalCommit": {"oid": "e67ba3e87d0b6e1b6de096ecf194117db70bcdcf"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5NDA5NA==", "bodyText": "Nevermind", "url": "https://github.com/linkedin/rest.li/pull/179#discussion_r385394094", "createdAt": "2020-02-27T21:55:23Z", "author": {"login": "evanw555"}, "path": "restli-client/src/main/java/com/linkedin/restli/client/ActionRequestBuilder.java", "diffHunk": "@@ -193,7 +195,10 @@ public ActionRequestBuilder(String baseUriTemplate, TypeSpec<V> elementType, Res\n     if (_resourceSpec.getRequestMetadata(_name) == null) // old builder code in use\n     {\n       requestDataSchema = DynamicRecordMetadata.buildSchema(_name, _actionParams.keySet());\n-\n+      if (_elementType == null)\n+      {\n+        _elementType = new TypeSpec<>(_elementClass);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5ODIzNQ=="}, "originalCommit": {"oid": "e67ba3e87d0b6e1b6de096ecf194117db70bcdcf"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 569, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}