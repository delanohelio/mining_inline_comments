{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1NzMwNDYw", "number": 492, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjo1Mzo0MFrOFDlGxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzowNTozMFrOFDleCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5Mjk3OTkwOnYy", "diffSide": "RIGHT", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjo1Mzo0MFrOIDTTeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxOTozMTowMVrOIDZ1xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMzMjkyMg==", "bodyText": "Do you plan to change it later? I thought this would be enabled by default: (fluentAPi constructed by default and users to decide whether to use it)", "url": "https://github.com/linkedin/rest.li/pull/492#discussion_r540332922", "createdAt": "2020-12-10T16:53:40Z", "author": {"login": "junchuanwang"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -1917,6 +1919,10 @@ protected void configureRestClientGeneration(Project project, SourceSet sourceSe\n           {\n             task.setEnableArgFile(true);\n           }\n+          if (isPropertyTrue(project, ENABLE_FLUENT_API))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4fbecbd3f155c0aa005d45190219531025b8d4b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ0MDAwNg==", "bodyText": "Yes, when we do GA, we'll turn this on by default.", "url": "https://github.com/linkedin/rest.li/pull/492#discussion_r540440006", "createdAt": "2020-12-10T19:31:01Z", "author": {"login": "karthikbalasub"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -1917,6 +1919,10 @@ protected void configureRestClientGeneration(Project project, SourceSet sourceSe\n           {\n             task.setEnableArgFile(true);\n           }\n+          if (isPropertyTrue(project, ENABLE_FLUENT_API))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMzMjkyMg=="}, "originalCommit": {"oid": "b4fbecbd3f155c0aa005d45190219531025b8d4b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzAzOTQ3OnYy", "diffSide": "RIGHT", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/clientgen/FluentApiGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzowNTozMFrOIDT3Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxOTo1MzozN1rOIDarvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM0MjAzOQ==", "bodyText": "though I know ArgFile is quite common now and a bit internal, I actually hope this comment can be surfaced somewhere, through help doc or something", "url": "https://github.com/linkedin/rest.li/pull/492#discussion_r540342039", "createdAt": "2020-12-10T17:05:30Z", "author": {"login": "junchuanwang"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/clientgen/FluentApiGenerator.java", "diffHunk": "@@ -0,0 +1,257 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.restli.tools.clientgen;\n+\n+import com.linkedin.data.schema.DataSchemaResolver;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import com.linkedin.internal.tools.ArgumentFileProcessor;\n+import com.linkedin.pegasus.generator.CodeUtil;\n+import com.linkedin.pegasus.generator.TemplateSpecGenerator;\n+import com.linkedin.restli.common.ResourceMethod;\n+import com.linkedin.restli.internal.common.RestliVersion;\n+import com.linkedin.restli.internal.server.RestLiInternalException;\n+import com.linkedin.restli.restspec.ResourceEntityType;\n+import com.linkedin.restli.restspec.ResourceSchema;\n+import com.linkedin.restli.tools.clientgen.builderspec.BuilderSpec;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.GnuParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.OptionBuilder;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.velocity.VelocityContext;\n+import org.apache.velocity.app.VelocityEngine;\n+import org.apache.velocity.runtime.RuntimeConstants;\n+import org.apache.velocity.runtime.log.Log4JLogChute;\n+import org.apache.velocity.runtime.resource.loader.JarResourceLoader;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Generate fluent api client bindings from idl file to java source file.\n+ *\n+ * @author Karthik Balasubramanian\n+ */\n+public class FluentApiGenerator\n+{\n+  private static final Logger LOGGER = LoggerFactory.getLogger(FluentApiGenerator.class);\n+  private static final Options OPTIONS = new Options();\n+  private static final Map<ResourceMethod, String> BUILDER_BASE_MAP = new HashMap<>();\n+  private static final String API_TEMPLATE_DIR = \"apiVmTemplates\";\n+\n+  static {\n+    BUILDER_BASE_MAP.put(ResourceMethod.GET, \"get\");\n+    BUILDER_BASE_MAP.put(ResourceMethod.DELETE, \"delete\");\n+    BUILDER_BASE_MAP.put(ResourceMethod.UPDATE, \"update\");\n+    BUILDER_BASE_MAP.put(ResourceMethod.CREATE, \"create\");\n+    BUILDER_BASE_MAP.put(ResourceMethod.PARTIAL_UPDATE, \"partialUpdate\");\n+    BUILDER_BASE_MAP.put(ResourceMethod.GET_ALL, \"getAll\");\n+    BUILDER_BASE_MAP.put(ResourceMethod.BATCH_GET, \"batchGet\");\n+    BUILDER_BASE_MAP.put(ResourceMethod.BATCH_UPDATE, \"batchUpdate\");\n+    BUILDER_BASE_MAP.put(ResourceMethod.BATCH_PARTIAL_UPDATE, \"batchPartialUpdate\");\n+    BUILDER_BASE_MAP.put(ResourceMethod.BATCH_DELETE, \"batchDelete\");\n+    BUILDER_BASE_MAP.put(ResourceMethod.BATCH_CREATE, \"batchCreate\");\n+  }\n+\n+  public static void main(String[] args) throws Exception\n+  {\n+    OPTIONS.addOption(\"h\", \"help\", false, \"Show help.\");\n+    OptionBuilder.withLongOpt(\"targetDir\");\n+    OptionBuilder.hasArgs(1);\n+    OptionBuilder.isRequired();\n+    OptionBuilder.withDescription(\"Target directory in which the classes should be generated.\");\n+    OPTIONS.addOption(OptionBuilder.create('t'));\n+    OptionBuilder.withLongOpt(\"resolverPath\");\n+    OptionBuilder.hasArgs(1);\n+    OptionBuilder.isRequired();\n+    OptionBuilder.withDescription(\"Resolver path for loading data schemas\");\n+    OPTIONS.addOption(OptionBuilder.create('p'));\n+    OPTIONS.addOption(\"r\", \"rootPath\", true, \"Root path to use for generating relative path for source location\");\n+\n+    try\n+    {\n+      final CommandLineParser parser = new GnuParser();\n+      CommandLine cl = parser.parse(OPTIONS, args);\n+\n+      if (cl.hasOption('h'))\n+      {\n+        help();\n+        System.exit(0);\n+      }\n+      String targetDirectory = cl.getOptionValue('t');\n+      String resolverPath = cl.getOptionValue('p');\n+      if (ArgumentFileProcessor.isArgFile(resolverPath))\n+      {\n+        resolverPath = ArgumentFileProcessor.getContentsAsArray(resolverPath)[0];\n+      }\n+      String[] sources = cl.getArgs();\n+      if (sources.length == 1 && ArgumentFileProcessor.isArgFile(sources[0]))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4fbecbd3f155c0aa005d45190219531025b8d4b"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ1MzgyMw==", "bodyText": "Good point. Updated to include help on using arg file.", "url": "https://github.com/linkedin/rest.li/pull/492#discussion_r540453823", "createdAt": "2020-12-10T19:53:37Z", "author": {"login": "karthikbalasub"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/clientgen/FluentApiGenerator.java", "diffHunk": "@@ -0,0 +1,257 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.restli.tools.clientgen;\n+\n+import com.linkedin.data.schema.DataSchemaResolver;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import com.linkedin.internal.tools.ArgumentFileProcessor;\n+import com.linkedin.pegasus.generator.CodeUtil;\n+import com.linkedin.pegasus.generator.TemplateSpecGenerator;\n+import com.linkedin.restli.common.ResourceMethod;\n+import com.linkedin.restli.internal.common.RestliVersion;\n+import com.linkedin.restli.internal.server.RestLiInternalException;\n+import com.linkedin.restli.restspec.ResourceEntityType;\n+import com.linkedin.restli.restspec.ResourceSchema;\n+import com.linkedin.restli.tools.clientgen.builderspec.BuilderSpec;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.GnuParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.OptionBuilder;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.velocity.VelocityContext;\n+import org.apache.velocity.app.VelocityEngine;\n+import org.apache.velocity.runtime.RuntimeConstants;\n+import org.apache.velocity.runtime.log.Log4JLogChute;\n+import org.apache.velocity.runtime.resource.loader.JarResourceLoader;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Generate fluent api client bindings from idl file to java source file.\n+ *\n+ * @author Karthik Balasubramanian\n+ */\n+public class FluentApiGenerator\n+{\n+  private static final Logger LOGGER = LoggerFactory.getLogger(FluentApiGenerator.class);\n+  private static final Options OPTIONS = new Options();\n+  private static final Map<ResourceMethod, String> BUILDER_BASE_MAP = new HashMap<>();\n+  private static final String API_TEMPLATE_DIR = \"apiVmTemplates\";\n+\n+  static {\n+    BUILDER_BASE_MAP.put(ResourceMethod.GET, \"get\");\n+    BUILDER_BASE_MAP.put(ResourceMethod.DELETE, \"delete\");\n+    BUILDER_BASE_MAP.put(ResourceMethod.UPDATE, \"update\");\n+    BUILDER_BASE_MAP.put(ResourceMethod.CREATE, \"create\");\n+    BUILDER_BASE_MAP.put(ResourceMethod.PARTIAL_UPDATE, \"partialUpdate\");\n+    BUILDER_BASE_MAP.put(ResourceMethod.GET_ALL, \"getAll\");\n+    BUILDER_BASE_MAP.put(ResourceMethod.BATCH_GET, \"batchGet\");\n+    BUILDER_BASE_MAP.put(ResourceMethod.BATCH_UPDATE, \"batchUpdate\");\n+    BUILDER_BASE_MAP.put(ResourceMethod.BATCH_PARTIAL_UPDATE, \"batchPartialUpdate\");\n+    BUILDER_BASE_MAP.put(ResourceMethod.BATCH_DELETE, \"batchDelete\");\n+    BUILDER_BASE_MAP.put(ResourceMethod.BATCH_CREATE, \"batchCreate\");\n+  }\n+\n+  public static void main(String[] args) throws Exception\n+  {\n+    OPTIONS.addOption(\"h\", \"help\", false, \"Show help.\");\n+    OptionBuilder.withLongOpt(\"targetDir\");\n+    OptionBuilder.hasArgs(1);\n+    OptionBuilder.isRequired();\n+    OptionBuilder.withDescription(\"Target directory in which the classes should be generated.\");\n+    OPTIONS.addOption(OptionBuilder.create('t'));\n+    OptionBuilder.withLongOpt(\"resolverPath\");\n+    OptionBuilder.hasArgs(1);\n+    OptionBuilder.isRequired();\n+    OptionBuilder.withDescription(\"Resolver path for loading data schemas\");\n+    OPTIONS.addOption(OptionBuilder.create('p'));\n+    OPTIONS.addOption(\"r\", \"rootPath\", true, \"Root path to use for generating relative path for source location\");\n+\n+    try\n+    {\n+      final CommandLineParser parser = new GnuParser();\n+      CommandLine cl = parser.parse(OPTIONS, args);\n+\n+      if (cl.hasOption('h'))\n+      {\n+        help();\n+        System.exit(0);\n+      }\n+      String targetDirectory = cl.getOptionValue('t');\n+      String resolverPath = cl.getOptionValue('p');\n+      if (ArgumentFileProcessor.isArgFile(resolverPath))\n+      {\n+        resolverPath = ArgumentFileProcessor.getContentsAsArray(resolverPath)[0];\n+      }\n+      String[] sources = cl.getArgs();\n+      if (sources.length == 1 && ArgumentFileProcessor.isArgFile(sources[0]))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM0MjAzOQ=="}, "originalCommit": {"oid": "b4fbecbd3f155c0aa005d45190219531025b8d4b"}, "originalPosition": 111}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 286, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}