{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0NjYyMzg2", "number": 239, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjoxMjowMVrODx7W0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjoyNDo0NVrODx7iLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjc5MzEyOnYy", "diffSide": "RIGHT", "path": "restli-common/src/test/java/com/linkedin/restli/common/TestComplexResourceKey.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjoxMjowMVrOGFrHig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjoxMjowMVrOGFrHig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwMjUwNg==", "bodyText": "Also add a test where the key type is NullSchemaRecord", "url": "https://github.com/linkedin/rest.li/pull/239#discussion_r408602506", "createdAt": "2020-04-15T06:12:01Z", "author": {"login": "karthikbalasub"}, "path": "restli-common/src/test/java/com/linkedin/restli/common/TestComplexResourceKey.java", "diffHunk": "@@ -126,30 +127,59 @@ public void testReadOnlyWithNullParams()\n     }\n   }\n \n-  @Test\n-  public void testKeySchema()\n+  @DataProvider\n+  public Object[][] keySchemaValidation() {\n+    return new Object[][]\n+        {\n+            {11, 11, false},\n+            {1, 1, true},\n+            {11, 1, false},\n+            {1, 11, true}\n+        };\n+  }\n+\n+  @Test(dataProvider = \"keySchemaValidation\")\n+  public void testKeySchema(int keyValue, int paramValue, boolean validationFailure)\n   {\n     RecordDataSchema schema = OmniRecord.schema;\n     TypeSpec<OmniRecord> keyType = new TypeSpec<OmniRecord>(OmniRecord.class, schema);\n-    TypeSpec<OmniRecord> paramsType = new TypeSpec<OmniRecord>(OmniRecord.class, schema);\n-    ComplexKeySpec<OmniRecord, OmniRecord> keySpec = new ComplexKeySpec<OmniRecord, OmniRecord>(keyType, paramsType);\n-\n+    TypeSpec<NullSchemaRecord> paramsType = new TypeSpec<NullSchemaRecord>(NullSchemaRecord.class, null);\n+    ComplexKeySpec<OmniRecord, NullSchemaRecord> keySpec =\n+        new ComplexKeySpec<OmniRecord, NullSchemaRecord>(keyType, paramsType);\n+    DataMap paramsData = new DataMap();\n+    paramsData.put(\"int\", paramValue);\n     DataMap data = new DataMap();\n-    data.put(\"int\", 1);\n+    data.put(\"int\", keyValue);\n+    data.put(\"$params\", paramsData);\n \n-    ComplexResourceKey<RecordTemplate, RecordTemplate> key = ComplexResourceKey.buildFromDataMap(data, keySpec);\n-\n-    Assert.assertEquals(key.getKey().schema(), schema);\n-    Assert.assertEquals(key.getParams().schema(), schema);\n+    try\n+    {\n+      ComplexResourceKey<RecordTemplate, RecordTemplate> key = ComplexResourceKey.buildFromDataMap(data, keySpec);\n+      key.validate();\n+      Assert.assertEquals(key.getKey().schema(), schema);\n+      Assert.assertNull(key.getParams().schema());\n+      Assert.assertFalse(validationFailure);\n+    }\n+    catch (IllegalArgumentException ex)\n+    {\n+      Assert.assertTrue(validationFailure, \"Unexpected validation failure\");\n+    }\n   }\n \n   public static class OmniRecord extends RecordTemplate {\n     private static RecordDataSchema schema =\n-            (RecordDataSchema) DataTemplateUtil.parseSchema(\"{ \\\"type\\\" : \\\"record\\\", \\\"name\\\" : \\\"omni\\\", \\\"fields\\\" : [ { \\\"name\\\" : \\\"int\\\", \\\"type\\\" : \\\"int\\\" } ] }\");\n+            (RecordDataSchema) DataTemplateUtil.parseSchema(\"{ \\\"type\\\" : \\\"record\\\", \\\"name\\\" : \\\"omni\\\", \\\"fields\\\" : [ { \\\"name\\\" : \\\"int\\\", \\\"type\\\" : \\\"int\\\", \\\"validate\\\": { \\\"regex\\\": { \\\"regex\\\": \\\"[0-9][0-9]\\\" } } } ] }\");\n \n     public OmniRecord(DataMap map)\n     {\n       super(map, schema);\n     }\n   }\n+\n+  public static class NullSchemaRecord extends RecordTemplate {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb15e0edf35ffb9725b5c998f89f292b0cf526ac"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjgyMjIxOnYy", "diffSide": "RIGHT", "path": "restli-int-test/src/test/java/com/linkedin/restli/examples/TestTyperefCustomDoubleAssociationKeyResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjoyNDo0NVrOGFrZDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjoyNDo0NVrOGFrZDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwNjk4OA==", "bodyText": "System properties are shared. Setting it this way might cause flakiness if tests are running in parallel.\nYou should ideally pass these as parameter to the init method. (There are similar methods already). To make this generic, you can add a init method that takes in RestLiConfig directly.", "url": "https://github.com/linkedin/rest.li/pull/239#discussion_r408606988", "createdAt": "2020-04-15T06:24:45Z", "author": {"login": "karthikbalasub"}, "path": "restli-int-test/src/test/java/com/linkedin/restli/examples/TestTyperefCustomDoubleAssociationKeyResource.java", "diffHunk": "@@ -69,13 +68,15 @@\n   @BeforeClass\n   public void initClass() throws Exception\n   {\n+    System.setProperty(RestLiIntTestServer.VALIDATE_KEYS_PROPERTY_NAME, Boolean.TRUE.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb15e0edf35ffb9725b5c998f89f292b0cf526ac"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 648, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}