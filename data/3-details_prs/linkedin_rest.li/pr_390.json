{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNjk0MTU4", "number": 390, "title": "Enable DataSchemaParser to take extension schema resolver from the Jar", "bodyText": "", "createdAt": "2020-08-20T06:29:18Z", "url": "https://github.com/linkedin/rest.li/pull/390", "merged": true, "mergeCommit": {"oid": "f9dc60cd1942771477339ca530cd4a00f28c71ad"}, "closed": true, "closedAt": "2020-08-24T07:43:19Z", "author": {"login": "BrianPin"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdA0mZHAFqTQ3MTgxMzI4OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdBOYGKgH2gAyNDcwNjk0MTU4OmI5YjI1Y2E2OWExNDZjYmFiNWViZTJhNjE1NWJmODk3MGUyZDhhMmY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxODEzMjg5", "url": "https://github.com/linkedin/rest.li/pull/390#pullrequestreview-471813289", "createdAt": "2020-08-20T16:58:42Z", "commit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjo1ODo0MlrOHELH3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODozNDowOVrOHEOT-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzODU4OA==", "bodyText": "nit: the brace should be in next line", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474138588", "createdAt": "2020-08-20T16:58:42Z", "author": {"login": "nickibi"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/DataSchemaParser.java", "diffHunk": "@@ -191,6 +209,19 @@ private static ParseResult combine(Collection<ParseResult> parseResults)\n       return _schemaAndLocations;\n     }\n \n+    public Map<DataSchema, DataSchemaLocation> getExtensionDataSchemaAndLocations()\n+    {\n+      return _schemaAndLocations.entrySet().stream().filter(entry -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3MzU1OA==", "bodyText": "Shall we use MultiFormatDataSchemaResolver type here", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474173558", "createdAt": "2020-08-20T18:02:20Z", "author": {"login": "nickibi"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/DataSchemaParser.java", "diffHunk": "@@ -47,31 +50,46 @@\n {\n   private final String _resolverPath;\n   private final Map<String, FileFormatDataSchemaParser> _parserByFileExtension;\n-  private final MultiFormatDataSchemaResolver _resolver;\n+  private final AbstractMultiFormatDataSchemaResolver _resolver;\n \n   /**\n    * @param resolverPath provides the search paths separated by the system file separator, or null for no search paths.\n    */\n-  public DataSchemaParser(String resolverPath) {\n-    this(resolverPath, MultiFormatDataSchemaResolver.BUILTIN_FORMAT_PARSER_FACTORIES);\n+  public DataSchemaParser(String resolverPath)\n+  {\n+    this(resolverPath, AbstractMultiFormatDataSchemaResolver.BUILTIN_FORMAT_PARSER_FACTORIES);\n   }\n \n   public DataSchemaParser(\n       String resolverPath,\n       List<DataSchemaParserFactory> parserFactoriesForFromats)\n   {\n+    _parserByFileExtension = new HashMap<>();\n     _resolverPath = resolverPath;\n-\n-    MultiFormatDataSchemaResolver resolver =\n+    AbstractMultiFormatDataSchemaResolver resolver =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3NTMxNg==", "bodyText": "First of all, it is \"extensions\". Second of all, can we make it as constant? or just use SchemaDirectoryName.EXTENSIONS.getName().", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474175316", "createdAt": "2020-08-20T18:05:39Z", "author": {"login": "nickibi"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/DataSchemaParser.java", "diffHunk": "@@ -191,6 +209,19 @@ private static ParseResult combine(Collection<ParseResult> parseResults)\n       return _schemaAndLocations;\n     }\n \n+    public Map<DataSchema, DataSchemaLocation> getExtensionDataSchemaAndLocations()\n+    {\n+      return _schemaAndLocations.entrySet().stream().filter(entry -> {\n+        DataSchemaLocation dataSchemaLocation = entry.getValue();\n+        if (dataSchemaLocation instanceof InJarFileDataSchemaLocation)\n+        {\n+          InJarFileDataSchemaLocation inJarFileDataSchemaLocation = (InJarFileDataSchemaLocation) dataSchemaLocation;\n+          return inJarFileDataSchemaLocation.getPathInJar().startsWith(\"extension\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3ODk5MA==", "bodyText": "nit: private methods should be after public methods, also it might be useful to add a java doc to explain the logic here.", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474178990", "createdAt": "2020-08-20T18:12:29Z", "author": {"login": "nickibi"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/FileFormatDataSchemaParser.java", "diffHunk": "@@ -60,6 +62,15 @@ public FileFormatDataSchemaParser(String resolverPath, DataSchemaResolver schema\n     _schemaParserFactory = schemaParserFactory;\n   }\n \n+  private boolean isExtensionEntry(JarEntry entry)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3OTczNA==", "bodyText": "nit: move private method to the bottom.", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474179734", "createdAt": "2020-08-20T18:13:57Z", "author": {"login": "nickibi"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/DataSchemaParser.java", "diffHunk": "@@ -47,31 +50,46 @@\n {\n   private final String _resolverPath;\n   private final Map<String, FileFormatDataSchemaParser> _parserByFileExtension;\n-  private final MultiFormatDataSchemaResolver _resolver;\n+  private final AbstractMultiFormatDataSchemaResolver _resolver;\n \n   /**\n    * @param resolverPath provides the search paths separated by the system file separator, or null for no search paths.\n    */\n-  public DataSchemaParser(String resolverPath) {\n-    this(resolverPath, MultiFormatDataSchemaResolver.BUILTIN_FORMAT_PARSER_FACTORIES);\n+  public DataSchemaParser(String resolverPath)\n+  {\n+    this(resolverPath, AbstractMultiFormatDataSchemaResolver.BUILTIN_FORMAT_PARSER_FACTORIES);\n   }\n \n   public DataSchemaParser(\n       String resolverPath,\n       List<DataSchemaParserFactory> parserFactoriesForFromats)\n   {\n+    _parserByFileExtension = new HashMap<>();\n     _resolverPath = resolverPath;\n-\n-    MultiFormatDataSchemaResolver resolver =\n+    AbstractMultiFormatDataSchemaResolver resolver =\n       new MultiFormatDataSchemaResolver(resolverPath, parserFactoriesForFromats);\n+    this._resolver = resolver;\n+    init(resolver, resolverPath, parserFactoriesForFromats);\n+  }\n+\n+  public DataSchemaParser(String resolverPath, AbstractMultiFormatDataSchemaResolver resolver)\n+  {\n     _parserByFileExtension = new HashMap<>();\n+    _resolverPath = resolverPath;\n+    this._resolver = resolver;\n+    init(resolver, resolverPath, MultiFormatDataSchemaResolver.BUILTIN_FORMAT_PARSER_FACTORIES);\n+  }\n+\n+  private void init(AbstractMultiFormatDataSchemaResolver resolver,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3OTk4Nw==", "bodyText": "Add java doc for this constructor.", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474179987", "createdAt": "2020-08-20T18:14:22Z", "author": {"login": "nickibi"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/DataSchemaParser.java", "diffHunk": "@@ -47,31 +50,46 @@\n {\n   private final String _resolverPath;\n   private final Map<String, FileFormatDataSchemaParser> _parserByFileExtension;\n-  private final MultiFormatDataSchemaResolver _resolver;\n+  private final AbstractMultiFormatDataSchemaResolver _resolver;\n \n   /**\n    * @param resolverPath provides the search paths separated by the system file separator, or null for no search paths.\n    */\n-  public DataSchemaParser(String resolverPath) {\n-    this(resolverPath, MultiFormatDataSchemaResolver.BUILTIN_FORMAT_PARSER_FACTORIES);\n+  public DataSchemaParser(String resolverPath)\n+  {\n+    this(resolverPath, AbstractMultiFormatDataSchemaResolver.BUILTIN_FORMAT_PARSER_FACTORIES);\n   }\n \n   public DataSchemaParser(\n       String resolverPath,\n       List<DataSchemaParserFactory> parserFactoriesForFromats)\n   {\n+    _parserByFileExtension = new HashMap<>();\n     _resolverPath = resolverPath;\n-\n-    MultiFormatDataSchemaResolver resolver =\n+    AbstractMultiFormatDataSchemaResolver resolver =\n       new MultiFormatDataSchemaResolver(resolverPath, parserFactoriesForFromats);\n+    this._resolver = resolver;\n+    init(resolver, resolverPath, parserFactoriesForFromats);\n+  }\n+\n+  public DataSchemaParser(String resolverPath, AbstractMultiFormatDataSchemaResolver resolver)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE4MjIyMQ==", "bodyText": "Do you think we should also add another test case, a schema under a third path: like \"legacyPegasusSchema\". The schema under that directory will not be resolved.", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474182221", "createdAt": "2020-08-20T18:18:38Z", "author": {"login": "nickibi"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestDataSchemaParser.java", "diffHunk": "@@ -92,6 +102,57 @@ public void testParseFromJarFile(String pegasusFilename, String[] expectedSchema\n     parseResult.getSchemaAndLocations().values().forEach(loc -> assertEquals(loc.getSourceFile().getAbsolutePath(), jarFile));\n   }\n \n+  @DataProvider(name = \"entityRelationshipInputFiles\")\n+  private Object[][] createResolverWithExtensionDirs()\n+  {\n+    return new Object[][]\n+        {\n+            {\n+                new String[]{\n+                    \"extensions/Bar.pdl\",\n+                    \"extensions/FooExtension.pdl\",\n+                    \"pegasus/Foo.pdl\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE4Mzg5NQ==", "bodyText": "Extension schema will not have such use case. It always includes base schema from /pegasus", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474183895", "createdAt": "2020-08-20T18:21:38Z", "author": {"login": "nickibi"}, "path": "generator/src/test/resources/generator/entity-relationship/extensions/Bar.pdl", "diffHunk": "@@ -0,0 +1,3 @@\n+record Bar {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE4Njc5MQ==", "bodyText": "shall we make the file path as camelcase? Also update the test files path.", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474186791", "createdAt": "2020-08-20T18:26:52Z", "author": {"login": "nickibi"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestDataSchemaParser.java", "diffHunk": "@@ -92,6 +102,57 @@ public void testParseFromJarFile(String pegasusFilename, String[] expectedSchema\n     parseResult.getSchemaAndLocations().values().forEach(loc -> assertEquals(loc.getSourceFile().getAbsolutePath(), jarFile));\n   }\n \n+  @DataProvider(name = \"entityRelationshipInputFiles\")\n+  private Object[][] createResolverWithExtensionDirs()\n+  {\n+    return new Object[][]\n+        {\n+            {\n+                new String[]{\n+                    \"extensions/Bar.pdl\",\n+                    \"extensions/FooExtension.pdl\",\n+                    \"pegasus/Foo.pdl\"\n+                },\n+                new String[]{\n+                    \"FooExtension\",\n+                    \"Bar\"\n+                }\n+            },\n+        };\n+  }\n+\n+  @Test(dataProvider = \"entityRelationshipInputFiles\")\n+  public void testSchemaFilesInExtensionPath(String[] files, String[] expectedExtensions) throws Exception\n+  {\n+    String tempDirectoryPath = _tempDir.getAbsolutePath();\n+    String jarFile = tempDirectoryPath + FS + \"test.jar\";\n+    String schemaDir = pegasusDir + FS + \"entity-relationship\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE5MDg0MA==", "bodyText": "You should also update gradle.properties to the same version before release", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474190840", "createdAt": "2020-08-20T18:34:09Z", "author": {"login": "nickibi"}, "path": "CHANGELOG.md", "diffHunk": "@@ -13,6 +13,9 @@ When updating the changelog, remember to be very clear about what behavior has c\n and what APIs have changed, if applicable.\n \n ## [Unreleased]\n+\n+## [29.5.5] - 2020-08-21", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxODg1NTQy", "url": "https://github.com/linkedin/rest.li/pull/390#pullrequestreview-471885542", "createdAt": "2020-08-20T18:41:11Z", "commit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODo0MToxMVrOHEOjaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODo0MToxMVrOHEOjaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE5NDc5Mw==", "bodyText": "use DataSchemaResolver::getSchemasDirectoryName == EXtensions", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474194793", "createdAt": "2020-08-20T18:41:11Z", "author": {"login": "aman1309"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/FileFormatDataSchemaParser.java", "diffHunk": "@@ -60,6 +62,15 @@ public FileFormatDataSchemaParser(String resolverPath, DataSchemaResolver schema\n     _schemaParserFactory = schemaParserFactory;\n   }\n \n+  private boolean isExtensionEntry(JarEntry entry)\n+  {\n+    if (_schemaResolver instanceof ExtensionsDataSchemaResolver)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxODkwMzEx", "url": "https://github.com/linkedin/rest.li/pull/390#pullrequestreview-471890311", "createdAt": "2020-08-20T18:48:05Z", "commit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODo0ODowNVrOHEOyGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODo0ODowNVrOHEOyGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE5ODU1Mg==", "bodyText": "I think the description is not accurate.\nAdd a constructor for DataSchemaParser, which is able to pass ExtensionsDataSchemaResolver to the DataSchemaParser to parse schemas from both extensions and pegasus directories.", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474198552", "createdAt": "2020-08-20T18:48:05Z", "author": {"login": "nickibi"}, "path": "CHANGELOG.md", "diffHunk": "@@ -13,6 +13,9 @@ When updating the changelog, remember to be very clear about what behavior has c\n and what APIs have changed, if applicable.\n \n ## [Unreleased]\n+\n+## [29.5.5] - 2020-08-21\n+- Add extension data schema resolvers to data schema parser to parse schema from both /extensions and /pegasus jar entry in the same jar file.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76524f949a1fbbccae74950f74d094d47d1d9d76", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/76524f949a1fbbccae74950f74d094d47d1d9d76", "committedDate": "2020-08-21T01:07:53Z", "message": "Initial commit for DataSchemaParser change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "316dda1ec5cfd20d1cb5356e1a10e85f2cc410f4", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/316dda1ec5cfd20d1cb5356e1a10e85f2cc410f4", "committedDate": "2020-08-21T03:29:57Z", "message": "Address review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4ff61c9e600635357283ce52cf8f9b7d51e82e87", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/4ff61c9e600635357283ce52cf8f9b7d51e82e87", "committedDate": "2020-08-20T06:27:48Z", "message": "Initial commit for DataSchemaParser change"}, "afterCommit": {"oid": "316dda1ec5cfd20d1cb5356e1a10e85f2cc410f4", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/316dda1ec5cfd20d1cb5356e1a10e85f2cc410f4", "committedDate": "2020-08-21T03:29:57Z", "message": "Address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cf77034c815e26fe79865275a9f7e2403a323e6", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/1cf77034c815e26fe79865275a9f7e2403a323e6", "committedDate": "2020-08-21T04:03:51Z", "message": "Address comment about cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMTMxMTU4", "url": "https://github.com/linkedin/rest.li/pull/390#pullrequestreview-472131158", "createdAt": "2020-08-21T04:05:49Z", "commit": {"oid": "1cf77034c815e26fe79865275a9f7e2403a323e6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNDI0OTcx", "url": "https://github.com/linkedin/rest.li/pull/390#pullrequestreview-472424971", "createdAt": "2020-08-21T11:50:17Z", "commit": {"oid": "1cf77034c815e26fe79865275a9f7e2403a323e6"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMTo1MDoxN1rOHEqOrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMTo1NzozNVrOHEqalg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0ODIzOA==", "bodyText": "What about FileDataSchemaLocation?", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474648238", "createdAt": "2020-08-21T11:50:17Z", "author": {"login": "karthikbalasub"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/DataSchemaParser.java", "diffHunk": "@@ -191,6 +218,20 @@ private static ParseResult combine(Collection<ParseResult> parseResults)\n       return _schemaAndLocations;\n     }\n \n+    public Map<DataSchema, DataSchemaLocation> getExtensionDataSchemaAndLocations()\n+    {\n+      return _schemaAndLocations.entrySet().stream().filter(entry ->\n+      {\n+        DataSchemaLocation dataSchemaLocation = entry.getValue();\n+        if (dataSchemaLocation instanceof InJarFileDataSchemaLocation)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cf77034c815e26fe79865275a9f7e2403a323e6"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1MDUyNw==", "bodyText": "Can we remove the SCHEMA_PATH_PREFIX check and just use the path configured in resolver?", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474650527", "createdAt": "2020-08-21T11:55:40Z", "author": {"login": "karthikbalasub"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/FileFormatDataSchemaParser.java", "diffHunk": "@@ -91,7 +93,7 @@ public FileFormatDataSchemaParser(String resolverPath, DataSchemaResolver schema\n               {\n                 final JarEntry entry = entries.nextElement();\n                 if (!entry.isDirectory() && entry.getName().endsWith(_schemaParserFactory.getLanguageExtension()) &&\n-                    entry.getName().startsWith(SCHEMA_PATH_PREFIX))\n+                    (entry.getName().startsWith(SCHEMA_PATH_PREFIX) || isExtensionEntry(entry)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cf77034c815e26fe79865275a9f7e2403a323e6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1MTI4Ng==", "bodyText": "Also add a test that parses files from directory.\nWhen we are running the build on a module that contains the PDL files, they are loaded as files directly, not through jars.", "url": "https://github.com/linkedin/rest.li/pull/390#discussion_r474651286", "createdAt": "2020-08-21T11:57:35Z", "author": {"login": "karthikbalasub"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestDataSchemaParser.java", "diffHunk": "@@ -92,6 +97,71 @@ public void testParseFromJarFile(String pegasusFilename, String[] expectedSchema\n     parseResult.getSchemaAndLocations().values().forEach(loc -> assertEquals(loc.getSourceFile().getAbsolutePath(), jarFile));\n   }\n \n+  @DataProvider(name = \"entityRelationshipInputFiles\")\n+  private Object[][] createResolverWithExtensionDirs()\n+  {\n+    return new Object[][]\n+        {\n+            {\n+                new String[]{\n+                    \"extensions/BarExtension.pdl\",\n+                    \"extensions/FooExtension.pdl\",\n+                    \"pegasus/Foo.pdl\",\n+                    \"pegasus/Bar.pdl\"\n+                },\n+                new String[]{\n+                    \"FooExtension\",\n+                    \"BarExtension\"\n+                }\n+            },\n+            {\n+                new String[]{\n+                    \"extensions/BarExtension.pdl\",\n+                    \"extensions/FooExtension.pdl\",\n+                    \"pegasus/Bar.pdl\",\n+                    \"pegasus/Foo.pdl\",\n+                    \"others/FooBar.pdl\"\n+                },\n+                new String[]{\n+                    \"FooExtension\",\n+                    \"BarExtension\"\n+                }\n+            },\n+        };\n+  }\n+\n+  @Test(dataProvider = \"entityRelationshipInputFiles\")\n+  public void testSchemaFilesInExtensionPath(String[] files, String[] expectedExtensions) throws Exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cf77034c815e26fe79865275a9f7e2403a323e6"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba5d0baa66df5d2c8d3e51699e30ad20906da405", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/ba5d0baa66df5d2c8d3e51699e30ad20906da405", "committedDate": "2020-08-21T23:40:38Z", "message": "Address comment for file base extension schema"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "02f1c53f1f2e4412472e718fb433275acd83bd51", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/02f1c53f1f2e4412472e718fb433275acd83bd51", "committedDate": "2020-08-21T23:32:31Z", "message": "Address comment for file base extension schema"}, "afterCommit": {"oid": "ba5d0baa66df5d2c8d3e51699e30ad20906da405", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/ba5d0baa66df5d2c8d3e51699e30ad20906da405", "committedDate": "2020-08-21T23:40:38Z", "message": "Address comment for file base extension schema"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d07b3fda0bd33c65bc31ddc1f87c6f134d39af30", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/d07b3fda0bd33c65bc31ddc1f87c6f134d39af30", "committedDate": "2020-08-22T00:31:28Z", "message": "update change log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9b25ca69a146cbab5ebe2a6155bf8970e2d8a2f", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/b9b25ca69a146cbab5ebe2a6155bf8970e2d8a2f", "committedDate": "2020-08-22T00:36:09Z", "message": "Fix hardcoded test path"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4630, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}