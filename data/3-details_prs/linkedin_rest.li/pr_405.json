{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4NDE5Mjc2", "number": 405, "title": "Fix a bug when check with entry prefix", "bodyText": "When we are parsing schemas from a jar, the entry from both \"pegasus\" and \"extension\" should be considered. But in the code when we check if it is \"pegasus\" , I use\nentry.getName().startsWith(_schemaResolver.getSchemasDirectoryName().getName()) || isExtensionEntry(entry)\n\nwhere the resolver will return \"extension\" when getSchemasDirectoryName is called. Which is an error while it should be\nentry.getName().startsWith(\"pegasus\") || isExtensionEntry(entry)\n\nThe semantic is to say: if the entry is either started with \"pegasus\" or started with \"extension\", I will parse this entry", "createdAt": "2020-09-03T07:24:06Z", "url": "https://github.com/linkedin/rest.li/pull/405", "merged": true, "mergeCommit": {"oid": "a422749cf469ed9ce3834b6d78257281263e3e3f"}, "closed": true, "closedAt": "2020-09-04T22:42:05Z", "author": {"login": "BrianPin"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFLhjuAFqTQ4MTU2ODk1Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFsRoKAFqTQ4Mjk3MDYxMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNTY4OTU3", "url": "https://github.com/linkedin/rest.li/pull/405#pullrequestreview-481568957", "createdAt": "2020-09-03T07:32:28Z", "commit": {"oid": "48cc89317c0dd5ab84a089959c7d5d680aaeb4b3"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "48cc89317c0dd5ab84a089959c7d5d680aaeb4b3", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/48cc89317c0dd5ab84a089959c7d5d680aaeb4b3", "committedDate": "2020-09-03T07:14:53Z", "message": "Fix a bug when check with entry prefix, we ignored the pegasus entry name"}, "afterCommit": {"oid": "08a857d8c1f1d9e73e515f04196a2c4963527f85", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/08a857d8c1f1d9e73e515f04196a2c4963527f85", "committedDate": "2020-09-03T17:28:40Z", "message": "Fix a bug when check with entry prefix, we ignored the pegasus entry name"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMDYzNzQ3", "url": "https://github.com/linkedin/rest.li/pull/405#pullrequestreview-482063747", "createdAt": "2020-09-03T17:40:37Z", "commit": {"oid": "08a857d8c1f1d9e73e515f04196a2c4963527f85"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzo0MDozN1rOHMxC_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzo0MDozN1rOHMxC_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0ODU0MA==", "bodyText": "I don't see why \"parseSources\" should load from both locations.\nBased on my understanding: When SchemaDirectoryName == EXTENSION, the ExtensionSchemaResolver will be configured to resolve from both locations.\nAnd parseSource should only parse the extension schemas, right?", "url": "https://github.com/linkedin/rest.li/pull/405#discussion_r483148540", "createdAt": "2020-09-03T17:40:37Z", "author": {"login": "karthikbalasub"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/FileFormatDataSchemaParser.java", "diffHunk": "@@ -92,8 +92,10 @@ public FileFormatDataSchemaParser(String resolverPath, DataSchemaResolver schema\n               while (entries.hasMoreElements())\n               {\n                 final JarEntry entry = entries.nextElement();\n-                if (!entry.isDirectory() && entry.getName().endsWith(_schemaParserFactory.getLanguageExtension()) &&\n-                    (entry.getName().startsWith(_schemaResolver.getSchemasDirectoryName().getName()) || isExtensionEntry(entry)))\n+                if (!entry.isDirectory() &&\n+                    entry.getName().endsWith(_schemaParserFactory.getLanguageExtension()) &&\n+                    (entry.getName().startsWith(SchemaDirectoryName.PEGASUS.getName()) ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a857d8c1f1d9e73e515f04196a2c4963527f85"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMTExNDQz", "url": "https://github.com/linkedin/rest.li/pull/405#pullrequestreview-482111443", "createdAt": "2020-09-03T18:45:37Z", "commit": {"oid": "08a857d8c1f1d9e73e515f04196a2c4963527f85"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODo0NTozOFrOHMzQSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODo0NTozOFrOHMzQSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE4NDcxNQ==", "bodyText": "I'd like to make a comment on the original condition logic itself. It took me a while to understand what this if-statement is checking for because it's unnecessarily convoluted. The original logic basically said:\nif entryName.startsWith(schemasDirectoryName) or isExtensionEntry()\n...where isExtensionEntry() checks that the schemas directory name is extensions and that the entry name starts with extensions/\nCouldn't this just be reduced to\nif entryName.startsWith(schemasDirectoryName + '/')? Since if the schema directory name is extensions, then it would be checking that it starts with extensions/ anyway\nIgnoring the fact that the name isExtensionEntry() is misleading and inaccurate (since it also checks the resolver's schemas directory name value, not just the entry), it doesn't even seem like this method is needed.\nSince you're changing this logic, though, my suggestion is that you simplify this if-statement to make it more comprehensible.", "url": "https://github.com/linkedin/rest.li/pull/405#discussion_r483184715", "createdAt": "2020-09-03T18:45:38Z", "author": {"login": "evanw555"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/FileFormatDataSchemaParser.java", "diffHunk": "@@ -92,8 +92,10 @@ public FileFormatDataSchemaParser(String resolverPath, DataSchemaResolver schema\n               while (entries.hasMoreElements())\n               {\n                 final JarEntry entry = entries.nextElement();\n-                if (!entry.isDirectory() && entry.getName().endsWith(_schemaParserFactory.getLanguageExtension()) &&\n-                    (entry.getName().startsWith(_schemaResolver.getSchemasDirectoryName().getName()) || isExtensionEntry(entry)))\n+                if (!entry.isDirectory() &&\n+                    entry.getName().endsWith(_schemaParserFactory.getLanguageExtension()) &&\n+                    (entry.getName().startsWith(SchemaDirectoryName.PEGASUS.getName()) ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a857d8c1f1d9e73e515f04196a2c4963527f85"}, "originalPosition": 8}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "08a857d8c1f1d9e73e515f04196a2c4963527f85", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/08a857d8c1f1d9e73e515f04196a2c4963527f85", "committedDate": "2020-09-03T17:28:40Z", "message": "Fix a bug when check with entry prefix, we ignored the pegasus entry name"}, "afterCommit": {"oid": "1a8186b784921e2b91f6ee366590c77cfcccd484", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/1a8186b784921e2b91f6ee366590c77cfcccd484", "committedDate": "2020-09-03T22:58:09Z", "message": "Fix in-jar entry mismatch because of case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMjcxMTI4", "url": "https://github.com/linkedin/rest.li/pull/405#pullrequestreview-482271128", "createdAt": "2020-09-03T23:44:53Z", "commit": {"oid": "71c0a06342e9c00e0d685134f2eac931bc97a782"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMzo0NDo1M1rOHM646g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMzo0NDo1M1rOHM646g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMwOTgwMg==", "bodyText": "Update the changelog according to current version.", "url": "https://github.com/linkedin/rest.li/pull/405#discussion_r483309802", "createdAt": "2020-09-03T23:44:53Z", "author": {"login": "nickibi"}, "path": "CHANGELOG.md", "diffHunk": "@@ -13,6 +13,7 @@ When updating the changelog, remember to be very clear about what behavior has c\n and what APIs have changed, if applicable.\n \n ## [Unreleased]\n+- Fix a bug in FileFormatDataSchemaParser, where jar entry match failed because of case", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c0a06342e9c00e0d685134f2eac931bc97a782"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMjcxMTUw", "url": "https://github.com/linkedin/rest.li/pull/405#pullrequestreview-482271150", "createdAt": "2020-09-03T23:44:57Z", "commit": {"oid": "71c0a06342e9c00e0d685134f2eac931bc97a782"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMzMxMTU1", "url": "https://github.com/linkedin/rest.li/pull/405#pullrequestreview-482331155", "createdAt": "2020-09-04T03:22:04Z", "commit": {"oid": "71c0a06342e9c00e0d685134f2eac931bc97a782"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMzoyMjowNFrOHM-KBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMzoyMjowNFrOHM-KBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM2MzMzNA==", "bodyText": "I'm not sure what the original logic (before the SchemaDirectoryName change) looked like, but would it make sense to add a + \"/\" to the check? Otherwise cases like pegasusFoo/Foo.pdl would not be filtered out. However, we need to make sure we don't break existing behavior.\n\n\nI'm curious about this bug. Why do we want to allow case-insensitive matches? I'll follow up offline.", "url": "https://github.com/linkedin/rest.li/pull/405#discussion_r483363334", "createdAt": "2020-09-04T03:22:04Z", "author": {"login": "evanw555"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/FileFormatDataSchemaParser.java", "diffHunk": "@@ -92,8 +92,9 @@ public FileFormatDataSchemaParser(String resolverPath, DataSchemaResolver schema\n               while (entries.hasMoreElements())\n               {\n                 final JarEntry entry = entries.nextElement();\n-                if (!entry.isDirectory() && entry.getName().endsWith(_schemaParserFactory.getLanguageExtension()) &&\n-                    (entry.getName().startsWith(_schemaResolver.getSchemasDirectoryName().getName()) || isExtensionEntry(entry)))\n+                if (!entry.isDirectory() &&\n+                    entry.getName().endsWith(_schemaParserFactory.getLanguageExtension()) &&\n+                    (entry.getName().toLowerCase().startsWith(_schemaResolver.getSchemasDirectoryName().name().toLowerCase())))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c0a06342e9c00e0d685134f2eac931bc97a782"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9029df60c6419dc82addc24909d6ffbc6e8ffee", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/b9029df60c6419dc82addc24909d6ffbc6e8ffee", "committedDate": "2020-09-04T04:28:49Z", "message": "Fix in-jar entry mismatch because of case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "421570fe59f9a01a5d1ba199a018c8d1483deacf", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/421570fe59f9a01a5d1ba199a018c8d1483deacf", "committedDate": "2020-09-04T04:28:49Z", "message": "remove un-used function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d0d110ed70ad188f62ea5012cf29938308d2d86", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/0d0d110ed70ad188f62ea5012cf29938308d2d86", "committedDate": "2020-09-04T04:36:41Z", "message": "Modify the logic check according to comment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "71c0a06342e9c00e0d685134f2eac931bc97a782", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/71c0a06342e9c00e0d685134f2eac931bc97a782", "committedDate": "2020-09-03T23:03:08Z", "message": "remove un-used function"}, "afterCommit": {"oid": "0d0d110ed70ad188f62ea5012cf29938308d2d86", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/0d0d110ed70ad188f62ea5012cf29938308d2d86", "committedDate": "2020-09-04T04:36:41Z", "message": "Modify the logic check according to comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNDg1OTM2", "url": "https://github.com/linkedin/rest.li/pull/405#pullrequestreview-482485936", "createdAt": "2020-09-04T09:03:47Z", "commit": {"oid": "0d0d110ed70ad188f62ea5012cf29938308d2d86"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOTowMzo0N1rOHNFzQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOTowMzo0N1rOHNFzQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ4ODU3OA==", "bodyText": "I don't think this test is covering the change made in the code.\nCan you add a test case that also has extension schemas in the jar?\nAnd a case where the extension schema includes a schema in /pegasus/ directory.", "url": "https://github.com/linkedin/rest.li/pull/405#discussion_r483488578", "createdAt": "2020-09-04T09:03:47Z", "author": {"login": "karthikbalasub"}, "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestDataSchemaParser.java", "diffHunk": "@@ -172,6 +172,54 @@ public void testSchemaFilesInExtensionPathInJar(String[] files, String[] expecte\n     }\n   }\n \n+  @DataProvider(name = \"PegasusSchemasWithExtensionResolver\")\n+  private Object[][] createPegasusSchemasWithExtensionResolver()\n+  {\n+    return new Object[][]\n+        {\n+            {\n+                new String[]{\n+                    \"pegasus/Foo.pdl\",\n+                    \"pegasus/Bar.pdl\",\n+                    \"pegasus/Fuzz.pdsc\"\n+                },\n+                new String[]{}\n+            },\n+        };\n+  }\n+\n+  @Test(dataProvider = \"PegasusSchemasWithExtensionResolver\")\n+  public void testBaseSchemaFilesInExtensionResolverInJar(String[] files, String[] expected) throws Exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d0d110ed70ad188f62ea5012cf29938308d2d86"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91d4bc56c25e268cd018692d799def41912e7fd2", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/91d4bc56c25e268cd018692d799def41912e7fd2", "committedDate": "2020-09-04T20:08:36Z", "message": "Address unit test comment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a76770a6dcf5fe2f54daf0f2f71e0de6c128336a", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/a76770a6dcf5fe2f54daf0f2f71e0de6c128336a", "committedDate": "2020-09-04T19:49:53Z", "message": "Address unit test comment"}, "afterCommit": {"oid": "91d4bc56c25e268cd018692d799def41912e7fd2", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/91d4bc56c25e268cd018692d799def41912e7fd2", "committedDate": "2020-09-04T20:08:36Z", "message": "Address unit test comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyOTI1OTc2", "url": "https://github.com/linkedin/rest.li/pull/405#pullrequestreview-482925976", "createdAt": "2020-09-04T20:33:51Z", "commit": {"oid": "91d4bc56c25e268cd018692d799def41912e7fd2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMDozMzo1MlrOHNa1kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMDozMzo1MlrOHNa1kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzMzIzMw==", "bodyText": "Just use SchemaDirectorName::getName here. Also I agree that we shouldn't ignore case.\nFollowing check should be enough:\nentry.getName().startsWith(_schemaResolver.getSchemasDirectoryName().getName() + \"/\")", "url": "https://github.com/linkedin/rest.li/pull/405#discussion_r483833233", "createdAt": "2020-09-04T20:33:52Z", "author": {"login": "karthikbalasub"}, "path": "generator/src/main/java/com/linkedin/pegasus/generator/FileFormatDataSchemaParser.java", "diffHunk": "@@ -92,8 +92,9 @@ public FileFormatDataSchemaParser(String resolverPath, DataSchemaResolver schema\n               while (entries.hasMoreElements())\n               {\n                 final JarEntry entry = entries.nextElement();\n-                if (!entry.isDirectory() && entry.getName().endsWith(_schemaParserFactory.getLanguageExtension()) &&\n-                    (entry.getName().startsWith(_schemaResolver.getSchemasDirectoryName().getName()) || isExtensionEntry(entry)))\n+                if (!entry.isDirectory() &&\n+                    entry.getName().endsWith(_schemaParserFactory.getLanguageExtension()) &&\n+                    (entry.getName().toLowerCase().startsWith(_schemaResolver.getSchemasDirectoryName().name().toLowerCase() + \"/\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91d4bc56c25e268cd018692d799def41912e7fd2"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11682aa9947369f537adb006d6dfe1c0c8300f64", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/11682aa9947369f537adb006d6dfe1c0c8300f64", "committedDate": "2020-09-04T21:01:24Z", "message": "address comment regarding directory name comparison"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyOTcwNjEy", "url": "https://github.com/linkedin/rest.li/pull/405#pullrequestreview-482970612", "createdAt": "2020-09-04T21:41:56Z", "commit": {"oid": "11682aa9947369f537adb006d6dfe1c0c8300f64"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4643, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}