{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3NzEzMTIx", "number": 295, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMzoyNTo0NlrOD8TyMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNjowOTo1NFrOD8vo4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTY1Mjk5OnYy", "diffSide": "RIGHT", "path": "d2-test-api/src/main/java/com/linkedin/d2/balancer/clients/TestClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMzoyNTo0N1rOGVKwzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjoyODo1N1rOGVNuwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg0OTYxNQ==", "bodyText": "I know this file is not written by you, but this variables naming is not consistent with other class variables, can you fix this by this chance?", "url": "https://github.com/linkedin/rest.li/pull/295#discussion_r424849615", "createdAt": "2020-05-14T03:25:47Z", "author": {"login": "junchuanwang"}, "path": "d2-test-api/src/main/java/com/linkedin/d2/balancer/clients/TestClient.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.d2.balancer.clients;\n+\n+import com.linkedin.common.callback.Callback;\n+import com.linkedin.common.util.None;\n+import com.linkedin.data.ByteString;\n+import com.linkedin.r2.filter.R2Constants;\n+import com.linkedin.r2.message.RequestContext;\n+import com.linkedin.r2.message.rest.RestRequest;\n+import com.linkedin.r2.message.rest.RestResponse;\n+import com.linkedin.r2.message.rest.RestResponseBuilder;\n+import com.linkedin.r2.message.stream.StreamRequest;\n+import com.linkedin.r2.message.stream.StreamResponse;\n+import com.linkedin.r2.message.stream.StreamResponseBuilder;\n+import com.linkedin.r2.message.stream.entitystream.ByteStringWriter;\n+import com.linkedin.r2.message.stream.entitystream.EntityStreams;\n+import com.linkedin.r2.transport.common.bridge.client.TransportClient;\n+import com.linkedin.r2.transport.common.bridge.common.TransportCallback;\n+import com.linkedin.r2.transport.common.bridge.common.TransportResponseImpl;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+\n+public class TestClient implements TransportClient\n+{\n+  public static final int DEFAULT_REQUEST_TIMEOUT = 500;\n+  public StreamRequest streamRequest;\n+  public RestRequest restRequest;\n+  public RequestContext restRequestContext;\n+  public Map<String, String> restWireAttrs;\n+  public TransportCallback<StreamResponse> streamCallback;\n+  public TransportCallback<RestResponse>   restCallback;\n+  public ScheduledExecutorService _scheduler;\n+\n+  public boolean                         shutdownCalled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98d77b1dd6923ae8512ac2c29d480be179de43eb"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4MzU3OQ==", "bodyText": "Sure, may as well while I'm at it", "url": "https://github.com/linkedin/rest.li/pull/295#discussion_r424883579", "createdAt": "2020-05-14T05:45:09Z", "author": {"login": "evanw555"}, "path": "d2-test-api/src/main/java/com/linkedin/d2/balancer/clients/TestClient.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.d2.balancer.clients;\n+\n+import com.linkedin.common.callback.Callback;\n+import com.linkedin.common.util.None;\n+import com.linkedin.data.ByteString;\n+import com.linkedin.r2.filter.R2Constants;\n+import com.linkedin.r2.message.RequestContext;\n+import com.linkedin.r2.message.rest.RestRequest;\n+import com.linkedin.r2.message.rest.RestResponse;\n+import com.linkedin.r2.message.rest.RestResponseBuilder;\n+import com.linkedin.r2.message.stream.StreamRequest;\n+import com.linkedin.r2.message.stream.StreamResponse;\n+import com.linkedin.r2.message.stream.StreamResponseBuilder;\n+import com.linkedin.r2.message.stream.entitystream.ByteStringWriter;\n+import com.linkedin.r2.message.stream.entitystream.EntityStreams;\n+import com.linkedin.r2.transport.common.bridge.client.TransportClient;\n+import com.linkedin.r2.transport.common.bridge.common.TransportCallback;\n+import com.linkedin.r2.transport.common.bridge.common.TransportResponseImpl;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+\n+public class TestClient implements TransportClient\n+{\n+  public static final int DEFAULT_REQUEST_TIMEOUT = 500;\n+  public StreamRequest streamRequest;\n+  public RestRequest restRequest;\n+  public RequestContext restRequestContext;\n+  public Map<String, String> restWireAttrs;\n+  public TransportCallback<StreamResponse> streamCallback;\n+  public TransportCallback<RestResponse>   restCallback;\n+  public ScheduledExecutorService _scheduler;\n+\n+  public boolean                         shutdownCalled;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg0OTYxNQ=="}, "originalCommit": {"oid": "98d77b1dd6923ae8512ac2c29d480be179de43eb"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5ODI0Mg==", "bodyText": "Actually I decided to keep it as-is because these variables are public.", "url": "https://github.com/linkedin/rest.li/pull/295#discussion_r424898242", "createdAt": "2020-05-14T06:28:57Z", "author": {"login": "evanw555"}, "path": "d2-test-api/src/main/java/com/linkedin/d2/balancer/clients/TestClient.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.d2.balancer.clients;\n+\n+import com.linkedin.common.callback.Callback;\n+import com.linkedin.common.util.None;\n+import com.linkedin.data.ByteString;\n+import com.linkedin.r2.filter.R2Constants;\n+import com.linkedin.r2.message.RequestContext;\n+import com.linkedin.r2.message.rest.RestRequest;\n+import com.linkedin.r2.message.rest.RestResponse;\n+import com.linkedin.r2.message.rest.RestResponseBuilder;\n+import com.linkedin.r2.message.stream.StreamRequest;\n+import com.linkedin.r2.message.stream.StreamResponse;\n+import com.linkedin.r2.message.stream.StreamResponseBuilder;\n+import com.linkedin.r2.message.stream.entitystream.ByteStringWriter;\n+import com.linkedin.r2.message.stream.entitystream.EntityStreams;\n+import com.linkedin.r2.transport.common.bridge.client.TransportClient;\n+import com.linkedin.r2.transport.common.bridge.common.TransportCallback;\n+import com.linkedin.r2.transport.common.bridge.common.TransportResponseImpl;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+\n+public class TestClient implements TransportClient\n+{\n+  public static final int DEFAULT_REQUEST_TIMEOUT = 500;\n+  public StreamRequest streamRequest;\n+  public RestRequest restRequest;\n+  public RequestContext restRequestContext;\n+  public Map<String, String> restWireAttrs;\n+  public TransportCallback<StreamResponse> streamCallback;\n+  public TransportCallback<RestResponse>   restCallback;\n+  public ScheduledExecutorService _scheduler;\n+\n+  public boolean                         shutdownCalled;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg0OTYxNQ=="}, "originalCommit": {"oid": "98d77b1dd6923ae8512ac2c29d480be179de43eb"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTY1NjU0OnYy", "diffSide": "RIGHT", "path": "d2-test-api/src/main/java/com/linkedin/d2/balancer/clients/TestClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMzoyODowN1rOGVKy7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNTo0NjoxOFrOGVM2mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg1MDE1OQ==", "bodyText": "Also I noticed this, I actually seldom see variable contains \"don't\", I will rename to \"notToCallCallback\"... just saying.", "url": "https://github.com/linkedin/rest.li/pull/295#discussion_r424850159", "createdAt": "2020-05-14T03:28:07Z", "author": {"login": "junchuanwang"}, "path": "d2-test-api/src/main/java/com/linkedin/d2/balancer/clients/TestClient.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.d2.balancer.clients;\n+\n+import com.linkedin.common.callback.Callback;\n+import com.linkedin.common.util.None;\n+import com.linkedin.data.ByteString;\n+import com.linkedin.r2.filter.R2Constants;\n+import com.linkedin.r2.message.RequestContext;\n+import com.linkedin.r2.message.rest.RestRequest;\n+import com.linkedin.r2.message.rest.RestResponse;\n+import com.linkedin.r2.message.rest.RestResponseBuilder;\n+import com.linkedin.r2.message.stream.StreamRequest;\n+import com.linkedin.r2.message.stream.StreamResponse;\n+import com.linkedin.r2.message.stream.StreamResponseBuilder;\n+import com.linkedin.r2.message.stream.entitystream.ByteStringWriter;\n+import com.linkedin.r2.message.stream.entitystream.EntityStreams;\n+import com.linkedin.r2.transport.common.bridge.client.TransportClient;\n+import com.linkedin.r2.transport.common.bridge.common.TransportCallback;\n+import com.linkedin.r2.transport.common.bridge.common.TransportResponseImpl;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+\n+public class TestClient implements TransportClient\n+{\n+  public static final int DEFAULT_REQUEST_TIMEOUT = 500;\n+  public StreamRequest streamRequest;\n+  public RestRequest restRequest;\n+  public RequestContext restRequestContext;\n+  public Map<String, String> restWireAttrs;\n+  public TransportCallback<StreamResponse> streamCallback;\n+  public TransportCallback<RestResponse>   restCallback;\n+  public ScheduledExecutorService _scheduler;\n+\n+  public boolean                         shutdownCalled;\n+  private final boolean _emptyResponse;\n+  private boolean _dontCallCallback;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98d77b1dd6923ae8512ac2c29d480be179de43eb"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4Mzg2Nw==", "bodyText": "Yeah, it's sort of weird. I'll consider renaming.", "url": "https://github.com/linkedin/rest.li/pull/295#discussion_r424883867", "createdAt": "2020-05-14T05:46:18Z", "author": {"login": "evanw555"}, "path": "d2-test-api/src/main/java/com/linkedin/d2/balancer/clients/TestClient.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.d2.balancer.clients;\n+\n+import com.linkedin.common.callback.Callback;\n+import com.linkedin.common.util.None;\n+import com.linkedin.data.ByteString;\n+import com.linkedin.r2.filter.R2Constants;\n+import com.linkedin.r2.message.RequestContext;\n+import com.linkedin.r2.message.rest.RestRequest;\n+import com.linkedin.r2.message.rest.RestResponse;\n+import com.linkedin.r2.message.rest.RestResponseBuilder;\n+import com.linkedin.r2.message.stream.StreamRequest;\n+import com.linkedin.r2.message.stream.StreamResponse;\n+import com.linkedin.r2.message.stream.StreamResponseBuilder;\n+import com.linkedin.r2.message.stream.entitystream.ByteStringWriter;\n+import com.linkedin.r2.message.stream.entitystream.EntityStreams;\n+import com.linkedin.r2.transport.common.bridge.client.TransportClient;\n+import com.linkedin.r2.transport.common.bridge.common.TransportCallback;\n+import com.linkedin.r2.transport.common.bridge.common.TransportResponseImpl;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+\n+public class TestClient implements TransportClient\n+{\n+  public static final int DEFAULT_REQUEST_TIMEOUT = 500;\n+  public StreamRequest streamRequest;\n+  public RestRequest restRequest;\n+  public RequestContext restRequestContext;\n+  public Map<String, String> restWireAttrs;\n+  public TransportCallback<StreamResponse> streamCallback;\n+  public TransportCallback<RestResponse>   restCallback;\n+  public ScheduledExecutorService _scheduler;\n+\n+  public boolean                         shutdownCalled;\n+  private final boolean _emptyResponse;\n+  private boolean _dontCallCallback;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg1MDE1OQ=="}, "originalCommit": {"oid": "98d77b1dd6923ae8512ac2c29d480be179de43eb"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDIxNjY3OnYy", "diffSide": "RIGHT", "path": "d2-test-api/src/main/java/com/linkedin/d2/balancer/clients/TestClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNjowOTo1NFrOGV3tSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNjowOTo1NFrOGV3tSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU4NTk5Mg==", "bodyText": "From what I remember, the policy is to keep the original copyright date if this is a simple refactor of the code.\nThis is the year of first publication.", "url": "https://github.com/linkedin/rest.li/pull/295#discussion_r425585992", "createdAt": "2020-05-15T06:09:54Z", "author": {"login": "karthikbalasub"}, "path": "d2-test-api/src/main/java/com/linkedin/d2/balancer/clients/TestClient.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f34db252da0f880bcda9e90f228dc5e19443454e"}, "originalPosition": 2}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 445, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}