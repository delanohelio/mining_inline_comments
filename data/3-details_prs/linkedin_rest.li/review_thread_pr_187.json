{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MzExNDEx", "number": 187, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMToxMjoxOVrODiiJxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMjo0ODo1MFrODijHHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTM3NzM0OnYy", "diffSide": "RIGHT", "path": "data/src/test/java/com/linkedin/data/schema/grammar/TestPdlSchemaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMToxMjoxOVrOFt1g7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODozNjozMlrOFuQe2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwNzAyMA==", "bodyText": "nit: remove extra line.", "url": "https://github.com/linkedin/rest.li/pull/187#discussion_r383607020", "createdAt": "2020-02-25T01:12:19Z", "author": {"login": "nickibi"}, "path": "data/src/test/java/com/linkedin/data/schema/grammar/TestPdlSchemaParser.java", "diffHunk": "@@ -85,6 +87,14 @@ public void testParseNestedProperties() throws IOException\n     expected.put(\"validate\", validate);\n     expected.put(\"com.linkedin.CustomValidator\", \"abc\");\n \n+    DataMap propertyWithPath = new DataMap();\n+    DataMap propertyWithSpecialChars = new DataMap();\n+    propertyWithPath.put(\"/*\", propertyWithSpecialChars);\n+    propertyWithSpecialChars.put(\"*/.$\", false);\n+    expected.put(\"pathProp\", propertyWithPath);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88bb5cb7863bb8df7925e7a7eb2a9d5246e3a25c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0ODg1Nw==", "bodyText": "The extra lines are to separate the different cases, for better reading", "url": "https://github.com/linkedin/rest.li/pull/187#discussion_r384048857", "createdAt": "2020-02-25T18:36:32Z", "author": {"login": "karthikbalasub"}, "path": "data/src/test/java/com/linkedin/data/schema/grammar/TestPdlSchemaParser.java", "diffHunk": "@@ -85,6 +87,14 @@ public void testParseNestedProperties() throws IOException\n     expected.put(\"validate\", validate);\n     expected.put(\"com.linkedin.CustomValidator\", \"abc\");\n \n+    DataMap propertyWithPath = new DataMap();\n+    DataMap propertyWithSpecialChars = new DataMap();\n+    propertyWithPath.put(\"/*\", propertyWithSpecialChars);\n+    propertyWithSpecialChars.put(\"*/.$\", false);\n+    expected.put(\"pathProp\", propertyWithPath);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwNzAyMA=="}, "originalCommit": {"oid": "88bb5cb7863bb8df7925e7a7eb2a9d5246e3a25c"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTUwODg2OnYy", "diffSide": "RIGHT", "path": "data/src/main/java/com/linkedin/data/schema/PdlBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMjozMjowOFrOFt2weg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNDoxNjo0OVrOFt4KyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYyNzM4Ng==", "bodyText": "I'd avoid packing this stream builder chain into the for-loop statement. Either construct the list on its own line, or use Stream#forEach", "url": "https://github.com/linkedin/rest.li/pull/187#discussion_r383627386", "createdAt": "2020-02-25T02:32:08Z", "author": {"login": "evanw555"}, "path": "data/src/main/java/com/linkedin/data/schema/PdlBuilder.java", "diffHunk": "@@ -127,14 +129,17 @@ PdlBuilder writeSpace() throws IOException\n   abstract boolean writeDoc(String doc) throws IOException;\n \n   /**\n-   * Writes a set of schema properties that share a common prefix to .pdl.\n+   * Writes a set of schema properties that share a common prefix to .pdl. Sorts the properties by key before writing.\n    *\n    * @param prefix provides the common prefix of all the properties.\n    * @param properties provides the properties to write.\n    */\n   PdlBuilder writeProperties(List<String> prefix, Map<String, Object> properties) throws IOException\n   {\n-    for (Map.Entry<String, Object> entry : properties.entrySet())\n+    for (Map.Entry<String, Object> entry :\n+        properties.entrySet().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88bb5cb7863bb8df7925e7a7eb2a9d5246e3a25c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY1MDUwNQ==", "bodyText": "fixed", "url": "https://github.com/linkedin/rest.li/pull/187#discussion_r383650505", "createdAt": "2020-02-25T04:16:49Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/schema/PdlBuilder.java", "diffHunk": "@@ -127,14 +129,17 @@ PdlBuilder writeSpace() throws IOException\n   abstract boolean writeDoc(String doc) throws IOException;\n \n   /**\n-   * Writes a set of schema properties that share a common prefix to .pdl.\n+   * Writes a set of schema properties that share a common prefix to .pdl. Sorts the properties by key before writing.\n    *\n    * @param prefix provides the common prefix of all the properties.\n    * @param properties provides the properties to write.\n    */\n   PdlBuilder writeProperties(List<String> prefix, Map<String, Object> properties) throws IOException\n   {\n-    for (Map.Entry<String, Object> entry : properties.entrySet())\n+    for (Map.Entry<String, Object> entry :\n+        properties.entrySet().stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYyNzM4Ng=="}, "originalCommit": {"oid": "88bb5cb7863bb8df7925e7a7eb2a9d5246e3a25c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTUyMTA0OnYy", "diffSide": "RIGHT", "path": "generator-test/src/test/pegasus/com/linkedin/pegasus/generator/test/idl/escaping/PropertyKeyEscaping.pdl", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMjo0MDoyNVrOFt23-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNDoxNzoyMFrOFt4LJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYyOTMwNA==", "bodyText": "I'd suggest buffing this test case up a little bit to test the following things:\n\nAll types of comments (e.g. single-line, javadoc):\n\n@`//`.`/**`.`*/`.`/*.*/`\n\n\nTest the encoder pattern you just added (Pattern.compile(\".*[^0-9a-zA-Z_-].*\")):\n\n@shouldNotBeEscaped.abc_XYZ-123", "url": "https://github.com/linkedin/rest.li/pull/187#discussion_r383629304", "createdAt": "2020-02-25T02:40:25Z", "author": {"login": "evanw555"}, "path": "generator-test/src/test/pegasus/com/linkedin/pegasus/generator/test/idl/escaping/PropertyKeyEscaping.pdl", "diffHunk": "@@ -2,6 +2,7 @@ namespace com.linkedin.pegasus.generator.test.idl.escaping\n \n record PropertyKeyEscaping {\n   @`namespace` = \"foo.bar\"\n+  @path.`/*.*/`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88bb5cb7863bb8df7925e7a7eb2a9d5246e3a25c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY1MDU5Ng==", "bodyText": "Done, improved the grammar to handle non-identifier but should not be escaped property segments", "url": "https://github.com/linkedin/rest.li/pull/187#discussion_r383650596", "createdAt": "2020-02-25T04:17:20Z", "author": {"login": "karthikbalasub"}, "path": "generator-test/src/test/pegasus/com/linkedin/pegasus/generator/test/idl/escaping/PropertyKeyEscaping.pdl", "diffHunk": "@@ -2,6 +2,7 @@ namespace com.linkedin.pegasus.generator.test.idl.escaping\n \n record PropertyKeyEscaping {\n   @`namespace` = \"foo.bar\"\n+  @path.`/*.*/`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYyOTMwNA=="}, "originalCommit": {"oid": "88bb5cb7863bb8df7925e7a7eb2a9d5246e3a25c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTUzNDM4OnYy", "diffSide": "RIGHT", "path": "data/src/main/java/com/linkedin/data/schema/PdlBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMjo0ODo1MFrOFt3ADw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNDoxNzoyOVrOFt4LOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYzMTM3NQ==", "bodyText": "Tbh this is kind of confusing, it took me a minute to realize why this also contains .*...\nPerhaps it would make more sense to use the inverse:\nIDENTIFIER_CHARS = Pattern.compile(\"[0-9a-zA-Z_-]+\")\n\nThen do...\n!IDENTIFIER_CHARS.matcher(propertyKey).matches()", "url": "https://github.com/linkedin/rest.li/pull/187#discussion_r383631375", "createdAt": "2020-02-25T02:48:50Z", "author": {"login": "evanw555"}, "path": "data/src/main/java/com/linkedin/data/schema/PdlBuilder.java", "diffHunk": "@@ -51,6 +52,7 @@\n       \"record\", \"typeref\", \"union\", \"null\", \"true\", \"false\"\n   ));\n   private static final char ESCAPE_CHAR = '`';\n+  private static final Pattern NON_IDENTIFIER_CHARS = Pattern.compile(\".*[^0-9a-zA-Z_-].*\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88bb5cb7863bb8df7925e7a7eb2a9d5246e3a25c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY1MDYxOA==", "bodyText": "done", "url": "https://github.com/linkedin/rest.li/pull/187#discussion_r383650618", "createdAt": "2020-02-25T04:17:29Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/schema/PdlBuilder.java", "diffHunk": "@@ -51,6 +52,7 @@\n       \"record\", \"typeref\", \"union\", \"null\", \"true\", \"false\"\n   ));\n   private static final char ESCAPE_CHAR = '`';\n+  private static final Pattern NON_IDENTIFIER_CHARS = Pattern.compile(\".*[^0-9a-zA-Z_-].*\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYzMTM3NQ=="}, "originalCommit": {"oid": "88bb5cb7863bb8df7925e7a7eb2a9d5246e3a25c"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 584, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}