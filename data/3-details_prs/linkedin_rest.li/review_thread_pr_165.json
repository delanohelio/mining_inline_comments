{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNTU4ODQ2", "number": 165, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNzoxMDoxOFrODdwygw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOToyMzoyOFrODek4mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTM0NjU5OnYy", "diffSide": "RIGHT", "path": "pdl_migration.md", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNzoxMDoxOFrOFmjLsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMzo0OToxNFrOFmxnWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk2NjY0Mg==", "bodyText": "Shall we mention rest.li version for this convert tool?", "url": "https://github.com/linkedin/rest.li/pull/165#discussion_r375966642", "createdAt": "2020-02-06T17:10:18Z", "author": {"login": "nickibi"}, "path": "pdl_migration.md", "diffHunk": "@@ -0,0 +1,255 @@\n+---\n+layout: guide\n+title: Migrating from PDSC to PDL\n+permalink: /pdl_migration\n+excerpt: Guide for migrating from PDSC to PDL with a side-by-side comparison showing notable differences.\n+---\n+\n+# Migrating from PDSC to PDL\n+\n+{{ page.excerpt }}\n+\n+## Contents\n+- [Why Use PDL?](#why-use-pdl)\n+- [How to Convert Schemas to PDL](#how-to-convert-schemas-to-pdl)\n+- [Notable Differences Between PDSC and PDL](#notable-differences-between-pdsc-and-pdl)\n+    - [PDL is More Java-Like](#pdl-is-more-java-like)\n+    - [Import Statements](#import-statements)\n+    - [Shorthand for Custom Properties](#shorthand-for-custom-properties)\n+\n+## Why Use PDL?\n+\n+PDL as a schema definition language was designed to be read and written by humans, making it a much more enjoyable experience for developers\n+to define their service's models. PDSC, despite its syntax being simply a subset of JSON, cannot boast this human-readability factor.\n+\n+In addition to its inherently more readable syntax, PDL also features some extra shorthand which developers can leverage to write less and\n+make their schemas more readable for others. See [below](#notable-differences-between-pdsc-and-pdl) for more information on this.\n+\n+## How to Convert Schemas to PDL\n+\n+If you have an existing project with PDSC schemas, converting everything to PDL is pretty straightforward.\n+Rest.li's Gradle plugin provides a task `convert<sourceSet>ToPdl` which will automatically convert your schemas for you.\n+It should be noted that this task verifies the converted schemas against the original schemas.\n+If this verification is failed, then the whole conversion will be aborted.\n+\n+The following command will convert every PDSC schema in your project to PDL.\n+\n+```\n+gradle convertToPdl", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "227bc852c601c6bb737e714c285c95f0ff18ba2a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NDY3Nw==", "bodyText": "Nope, it's been around since version 10, so it's pretty old.", "url": "https://github.com/linkedin/rest.li/pull/165#discussion_r376194677", "createdAt": "2020-02-07T03:07:07Z", "author": {"login": "evanw555"}, "path": "pdl_migration.md", "diffHunk": "@@ -0,0 +1,255 @@\n+---\n+layout: guide\n+title: Migrating from PDSC to PDL\n+permalink: /pdl_migration\n+excerpt: Guide for migrating from PDSC to PDL with a side-by-side comparison showing notable differences.\n+---\n+\n+# Migrating from PDSC to PDL\n+\n+{{ page.excerpt }}\n+\n+## Contents\n+- [Why Use PDL?](#why-use-pdl)\n+- [How to Convert Schemas to PDL](#how-to-convert-schemas-to-pdl)\n+- [Notable Differences Between PDSC and PDL](#notable-differences-between-pdsc-and-pdl)\n+    - [PDL is More Java-Like](#pdl-is-more-java-like)\n+    - [Import Statements](#import-statements)\n+    - [Shorthand for Custom Properties](#shorthand-for-custom-properties)\n+\n+## Why Use PDL?\n+\n+PDL as a schema definition language was designed to be read and written by humans, making it a much more enjoyable experience for developers\n+to define their service's models. PDSC, despite its syntax being simply a subset of JSON, cannot boast this human-readability factor.\n+\n+In addition to its inherently more readable syntax, PDL also features some extra shorthand which developers can leverage to write less and\n+make their schemas more readable for others. See [below](#notable-differences-between-pdsc-and-pdl) for more information on this.\n+\n+## How to Convert Schemas to PDL\n+\n+If you have an existing project with PDSC schemas, converting everything to PDL is pretty straightforward.\n+Rest.li's Gradle plugin provides a task `convert<sourceSet>ToPdl` which will automatically convert your schemas for you.\n+It should be noted that this task verifies the converted schemas against the original schemas.\n+If this verification is failed, then the whole conversion will be aborted.\n+\n+The following command will convert every PDSC schema in your project to PDL.\n+\n+```\n+gradle convertToPdl", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk2NjY0Mg=="}, "originalCommit": {"oid": "227bc852c601c6bb737e714c285c95f0ff18ba2a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NjQ3Nw==", "bodyText": "But we updated the cmd tool, did we?", "url": "https://github.com/linkedin/rest.li/pull/165#discussion_r376196477", "createdAt": "2020-02-07T03:15:57Z", "author": {"login": "nickibi"}, "path": "pdl_migration.md", "diffHunk": "@@ -0,0 +1,255 @@\n+---\n+layout: guide\n+title: Migrating from PDSC to PDL\n+permalink: /pdl_migration\n+excerpt: Guide for migrating from PDSC to PDL with a side-by-side comparison showing notable differences.\n+---\n+\n+# Migrating from PDSC to PDL\n+\n+{{ page.excerpt }}\n+\n+## Contents\n+- [Why Use PDL?](#why-use-pdl)\n+- [How to Convert Schemas to PDL](#how-to-convert-schemas-to-pdl)\n+- [Notable Differences Between PDSC and PDL](#notable-differences-between-pdsc-and-pdl)\n+    - [PDL is More Java-Like](#pdl-is-more-java-like)\n+    - [Import Statements](#import-statements)\n+    - [Shorthand for Custom Properties](#shorthand-for-custom-properties)\n+\n+## Why Use PDL?\n+\n+PDL as a schema definition language was designed to be read and written by humans, making it a much more enjoyable experience for developers\n+to define their service's models. PDSC, despite its syntax being simply a subset of JSON, cannot boast this human-readability factor.\n+\n+In addition to its inherently more readable syntax, PDL also features some extra shorthand which developers can leverage to write less and\n+make their schemas more readable for others. See [below](#notable-differences-between-pdsc-and-pdl) for more information on this.\n+\n+## How to Convert Schemas to PDL\n+\n+If you have an existing project with PDSC schemas, converting everything to PDL is pretty straightforward.\n+Rest.li's Gradle plugin provides a task `convert<sourceSet>ToPdl` which will automatically convert your schemas for you.\n+It should be noted that this task verifies the converted schemas against the original schemas.\n+If this verification is failed, then the whole conversion will be aborted.\n+\n+The following command will convert every PDSC schema in your project to PDL.\n+\n+```\n+gradle convertToPdl", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk2NjY0Mg=="}, "originalCommit": {"oid": "227bc852c601c6bb737e714c285c95f0ff18ba2a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIwMzA5OA==", "bodyText": "You're right, I'll address this.", "url": "https://github.com/linkedin/rest.li/pull/165#discussion_r376203098", "createdAt": "2020-02-07T03:49:14Z", "author": {"login": "evanw555"}, "path": "pdl_migration.md", "diffHunk": "@@ -0,0 +1,255 @@\n+---\n+layout: guide\n+title: Migrating from PDSC to PDL\n+permalink: /pdl_migration\n+excerpt: Guide for migrating from PDSC to PDL with a side-by-side comparison showing notable differences.\n+---\n+\n+# Migrating from PDSC to PDL\n+\n+{{ page.excerpt }}\n+\n+## Contents\n+- [Why Use PDL?](#why-use-pdl)\n+- [How to Convert Schemas to PDL](#how-to-convert-schemas-to-pdl)\n+- [Notable Differences Between PDSC and PDL](#notable-differences-between-pdsc-and-pdl)\n+    - [PDL is More Java-Like](#pdl-is-more-java-like)\n+    - [Import Statements](#import-statements)\n+    - [Shorthand for Custom Properties](#shorthand-for-custom-properties)\n+\n+## Why Use PDL?\n+\n+PDL as a schema definition language was designed to be read and written by humans, making it a much more enjoyable experience for developers\n+to define their service's models. PDSC, despite its syntax being simply a subset of JSON, cannot boast this human-readability factor.\n+\n+In addition to its inherently more readable syntax, PDL also features some extra shorthand which developers can leverage to write less and\n+make their schemas more readable for others. See [below](#notable-differences-between-pdsc-and-pdl) for more information on this.\n+\n+## How to Convert Schemas to PDL\n+\n+If you have an existing project with PDSC schemas, converting everything to PDL is pretty straightforward.\n+Rest.li's Gradle plugin provides a task `convert<sourceSet>ToPdl` which will automatically convert your schemas for you.\n+It should be noted that this task verifies the converted schemas against the original schemas.\n+If this verification is failed, then the whole conversion will be aborted.\n+\n+The following command will convert every PDSC schema in your project to PDL.\n+\n+```\n+gradle convertToPdl", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk2NjY0Mg=="}, "originalCommit": {"oid": "227bc852c601c6bb737e714c285c95f0ff18ba2a"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTM1ODY2OnYy", "diffSide": "RIGHT", "path": "pdl_migration.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNzoxMzo0MFrOFmjTPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNzoxMzo0MFrOFmjTPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk2ODU3Mw==", "bodyText": "I think we should provide an example here, like - gradle  convertToPdl -PconvertTodl.preserveSrcCmd \"/usr/bin/svn mv $src $dst\"", "url": "https://github.com/linkedin/rest.li/pull/165#discussion_r375968573", "createdAt": "2020-02-06T17:13:40Z", "author": {"login": "nickibi"}, "path": "pdl_migration.md", "diffHunk": "@@ -0,0 +1,255 @@\n+---\n+layout: guide\n+title: Migrating from PDSC to PDL\n+permalink: /pdl_migration\n+excerpt: Guide for migrating from PDSC to PDL with a side-by-side comparison showing notable differences.\n+---\n+\n+# Migrating from PDSC to PDL\n+\n+{{ page.excerpt }}\n+\n+## Contents\n+- [Why Use PDL?](#why-use-pdl)\n+- [How to Convert Schemas to PDL](#how-to-convert-schemas-to-pdl)\n+- [Notable Differences Between PDSC and PDL](#notable-differences-between-pdsc-and-pdl)\n+    - [PDL is More Java-Like](#pdl-is-more-java-like)\n+    - [Import Statements](#import-statements)\n+    - [Shorthand for Custom Properties](#shorthand-for-custom-properties)\n+\n+## Why Use PDL?\n+\n+PDL as a schema definition language was designed to be read and written by humans, making it a much more enjoyable experience for developers\n+to define their service's models. PDSC, despite its syntax being simply a subset of JSON, cannot boast this human-readability factor.\n+\n+In addition to its inherently more readable syntax, PDL also features some extra shorthand which developers can leverage to write less and\n+make their schemas more readable for others. See [below](#notable-differences-between-pdsc-and-pdl) for more information on this.\n+\n+## How to Convert Schemas to PDL\n+\n+If you have an existing project with PDSC schemas, converting everything to PDL is pretty straightforward.\n+Rest.li's Gradle plugin provides a task `convert<sourceSet>ToPdl` which will automatically convert your schemas for you.\n+It should be noted that this task verifies the converted schemas against the original schemas.\n+If this verification is failed, then the whole conversion will be aborted.\n+\n+The following command will convert every PDSC schema in your project to PDL.\n+\n+```\n+gradle convertToPdl\n+```\n+\n+You can selectively migrate only one particular module of your project with the following:\n+\n+```\n+gradle :<moduleName>:convertToPdl\n+```\n+\n+This task also takes in a few options:\n+\n+```\n+gradle :<moduleName>:convertToPdl \\\n+    [-PconvertToPdl.reverse=(true|false)] \\\n+    [-PconvertToPdl.keepOriginal=(true|false)] \\\n+    [-PconvertToPdl.preserveSrcCmd]\n+```\n+\n+| Property | Type | Description\n+|----------|------|------------\n+| `convertToPdl.reverse` | boolean | If true, converts PDL schemas back to PDSC (and vice versa if false).\n+| `convertToPdl.keepOriginal` | boolean | If true, keeps the source schemas (the source schemas are deleted by default).\n+| `convertToPdl.preserveSrcCmd` | string | Command which is run for each file, useful for running special VCS logic. The command should be a template string containing `$src` and `$dst` as references to the source and destination filename, respectively.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "227bc852c601c6bb737e714c285c95f0ff18ba2a"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTM4MzAyOnYy", "diffSide": "RIGHT", "path": "pdl_syntax.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNzoyMTowOVrOFmjiiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNzoyMTowOVrOFmjiiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk3MjQ5MQ==", "bodyText": "Thanks for fixing the link.", "url": "https://github.com/linkedin/rest.li/pull/165#discussion_r375972491", "createdAt": "2020-02-06T17:21:09Z", "author": {"login": "nickibi"}, "path": "pdl_syntax.md", "diffHunk": "@@ -494,7 +494,7 @@ record InlineWithinUnion {\n ```\n \n ### Union with aliases\n-***Note:*** _Union with aliases is a recent feature in the pegasus schema language and it might not be fully supported in non-java languages. Please check the [support level]({% link testsuite_compatibility_matrix.md %}) on all languages you intend to use before using aliases_\n+***Note:*** _Union with aliases is a recent feature in the pegasus schema language and it might not be fully supported in non-java languages. Please check the [support level](/rest.li/multi_language_compatibility_matrix) on all languages you intend to use before using aliases_", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "227bc852c601c6bb737e714c285c95f0ff18ba2a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTM4NzUyOnYy", "diffSide": "RIGHT", "path": "pdl_migration.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNzoyMjoyNFrOFmjlZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNzoyMjoyNFrOFmjlZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk3MzIyMQ==", "bodyText": "Shall we put a comprehensive example here?", "url": "https://github.com/linkedin/rest.li/pull/165#discussion_r375973221", "createdAt": "2020-02-06T17:22:24Z", "author": {"login": "nickibi"}, "path": "pdl_migration.md", "diffHunk": "@@ -0,0 +1,255 @@\n+---\n+layout: guide\n+title: Migrating from PDSC to PDL\n+permalink: /pdl_migration\n+excerpt: Guide for migrating from PDSC to PDL with a side-by-side comparison showing notable differences.\n+---\n+\n+# Migrating from PDSC to PDL\n+\n+{{ page.excerpt }}\n+\n+## Contents\n+- [Why Use PDL?](#why-use-pdl)\n+- [How to Convert Schemas to PDL](#how-to-convert-schemas-to-pdl)\n+- [Notable Differences Between PDSC and PDL](#notable-differences-between-pdsc-and-pdl)\n+    - [PDL is More Java-Like](#pdl-is-more-java-like)\n+    - [Import Statements](#import-statements)\n+    - [Shorthand for Custom Properties](#shorthand-for-custom-properties)\n+\n+## Why Use PDL?\n+\n+PDL as a schema definition language was designed to be read and written by humans, making it a much more enjoyable experience for developers\n+to define their service's models. PDSC, despite its syntax being simply a subset of JSON, cannot boast this human-readability factor.\n+\n+In addition to its inherently more readable syntax, PDL also features some extra shorthand which developers can leverage to write less and\n+make their schemas more readable for others. See [below](#notable-differences-between-pdsc-and-pdl) for more information on this.\n+\n+## How to Convert Schemas to PDL\n+\n+If you have an existing project with PDSC schemas, converting everything to PDL is pretty straightforward.\n+Rest.li's Gradle plugin provides a task `convert<sourceSet>ToPdl` which will automatically convert your schemas for you.\n+It should be noted that this task verifies the converted schemas against the original schemas.\n+If this verification is failed, then the whole conversion will be aborted.\n+\n+The following command will convert every PDSC schema in your project to PDL.\n+\n+```\n+gradle convertToPdl\n+```\n+\n+You can selectively migrate only one particular module of your project with the following:\n+\n+```\n+gradle :<moduleName>:convertToPdl\n+```\n+\n+This task also takes in a few options:\n+\n+```\n+gradle :<moduleName>:convertToPdl \\\n+    [-PconvertToPdl.reverse=(true|false)] \\\n+    [-PconvertToPdl.keepOriginal=(true|false)] \\\n+    [-PconvertToPdl.preserveSrcCmd]\n+```\n+\n+| Property | Type | Description\n+|----------|------|------------\n+| `convertToPdl.reverse` | boolean | If true, converts PDL schemas back to PDSC (and vice versa if false).\n+| `convertToPdl.keepOriginal` | boolean | If true, keeps the source schemas (the source schemas are deleted by default).\n+| `convertToPdl.preserveSrcCmd` | string | Command which is run for each file, useful for running special VCS logic. The command should be a template string containing `$src` and `$dst` as references to the source and destination filename, respectively.\n+\n+## Notable Differences Between PDSC and PDL\n+\n+You can find in-depth documentation on [PDSC syntax](/rest.li/pdsc_syntax) and [PDL syntax](/rest.li/pdl_syntax) elsewhere,\n+but this section will point out notable differences between PDSC and PDL.\n+\n+### PDL is More Java-Like\n+\n+PDL is arguably much more human-readable than PDSC because of its Java-like syntax.\n+Whereas reading and writing PDSC is like reading and writing plain JSON, reading and\n+writing PDL is like reading and writing a Java interface definition.\n+\n+<table>\n+    <tr>\n+        <th>PDSC</th>\n+        <th>PDL</th>\n+    </tr>\n+    <tr>\n+        <td><pre>\n+{\n+    \"namespace\": \"com.example.models\",\n+    \"type\": \"record\",\n+    \"name\": \"Foo\",\n+    \"doc\": \"Foo is a record.\",\n+    \"fields\": [\n+        {\n+            \"name\": \"x\",\n+            \"type\": \"int\",\n+            \"default\": 1\n+        }\n+    ]\n+}\n+        </pre></td>\n+        <td><pre>\n+namespace com.example.models\n+\n+/**\n+ * Foo is a record.\n+ */\n+record Foo {\n+    x: int = 1\n+}\n+        </pre></td>\n+    </tr>\n+</table>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "227bc852c601c6bb737e714c285c95f0ff18ba2a"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTExNjU3OnYy", "diffSide": "RIGHT", "path": "pdl_migration.md", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxOToxMDo0MFrOFnHUWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwMDozMDoxMlrOFnN6ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU1ODY4Mw==", "bodyText": "We did the whitespace fix in 28.1.3. We probably should suggest customer use 28.1.3+ to avoid schema validation failure. WDYT?", "url": "https://github.com/linkedin/rest.li/pull/165#discussion_r376558683", "createdAt": "2020-02-07T19:10:40Z", "author": {"login": "nickibi"}, "path": "pdl_migration.md", "diffHunk": "@@ -0,0 +1,412 @@\n+---\n+layout: guide\n+title: Migrating from PDSC to PDL\n+permalink: /pdl_migration\n+excerpt: Guide for migrating from PDSC to PDL with a side-by-side comparison showing notable differences.\n+---\n+\n+# Migrating from PDSC to PDL\n+\n+{{ page.excerpt }}\n+\n+## Contents\n+- [Why Use PDL?](#why-use-pdl)\n+- [How to Convert Schemas to PDL](#how-to-convert-schemas-to-pdl)\n+- [Notable Differences Between PDSC and PDL](#notable-differences-between-pdsc-and-pdl)\n+    - [PDL is More Java-Like](#pdl-is-more-java-like)\n+    - [Import Statements](#import-statements)\n+    - [Shorthand for Custom Properties](#shorthand-for-custom-properties)\n+    - [Cleaner Enum Declarations](#cleaner-enum-declarations)\n+    - [Specifying Default Field Values](#specifying-default-field-values)\n+\n+## Why Use PDL?\n+\n+PDL as a schema definition language was designed to be read and written by humans, making it a much more enjoyable experience for developers\n+to define their service's models. PDSC, despite its syntax being simply a subset of JSON, cannot boast this human-readability factor.\n+\n+In addition to its inherently more readable syntax, PDL also features some extra shorthand which developers can leverage to write less and\n+make their schemas more readable for others. See [below](#notable-differences-between-pdsc-and-pdl) for more information on this.\n+\n+## How to Convert Schemas to PDL\n+\n+If you have an existing project with PDSC schemas, converting everything to PDL is pretty straightforward.\n+Rest.li's Gradle plugin provides a task `convert<sourceSet>ToPdl` which will automatically convert your schemas for you.\n+It should be noted that this task verifies the converted schemas against the original schemas.\n+If this verification is failed, then the whole conversion will be aborted.\n+\n+The following command will convert every PDSC schema in your project to PDL.\n+\n+```\n+gradle convertToPdl\n+```\n+\n+You can selectively migrate only one particular module of your project with the following:\n+\n+```\n+gradle :<moduleName>:convertToPdl\n+```\n+\n+This task also takes in a few options:\n+\n+```\n+gradle :<moduleName>:convertToPdl \\\n+    [-PconvertToPdl.reverse=(true|false)] \\\n+    [-PconvertToPdl.keepOriginal=(true|false)] \\\n+    [-PconvertToPdl.preserveSrcCmd]\n+```\n+\n+| Property | Type | Since | Description\n+|----------|------|-------|-------------\n+| `convertToPdl.reverse` | boolean | `28.0.11` | If true, converts PDL schemas back to PDSC (and vice versa if false).\n+| `convertToPdl.keepOriginal` | boolean | `28.0.11` | If true, keeps the source schemas (the source schemas are deleted by default).\n+| `convertToPdl.preserveSrcCmd` | string | `28.1.1` | Command which is run for each file, useful for running special VCS logic. The command should be a template string containing `$src` and `$dst` as references to the source and destination filename, respectively (e.g. `gradle convertToPdl -PconvertToPdl.preserveSrcCmd \"/usr/bin/svn mv $src $dst\"`).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03d4f9e58e9fa87c7b15d5a74316984063a4f4a8"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYyNDcwNQ==", "bodyText": "By this logic, we may as well just say that any version below 28.1.3 isn't guaranteed to work correctly for this command.", "url": "https://github.com/linkedin/rest.li/pull/165#discussion_r376624705", "createdAt": "2020-02-07T21:52:05Z", "author": {"login": "evanw555"}, "path": "pdl_migration.md", "diffHunk": "@@ -0,0 +1,412 @@\n+---\n+layout: guide\n+title: Migrating from PDSC to PDL\n+permalink: /pdl_migration\n+excerpt: Guide for migrating from PDSC to PDL with a side-by-side comparison showing notable differences.\n+---\n+\n+# Migrating from PDSC to PDL\n+\n+{{ page.excerpt }}\n+\n+## Contents\n+- [Why Use PDL?](#why-use-pdl)\n+- [How to Convert Schemas to PDL](#how-to-convert-schemas-to-pdl)\n+- [Notable Differences Between PDSC and PDL](#notable-differences-between-pdsc-and-pdl)\n+    - [PDL is More Java-Like](#pdl-is-more-java-like)\n+    - [Import Statements](#import-statements)\n+    - [Shorthand for Custom Properties](#shorthand-for-custom-properties)\n+    - [Cleaner Enum Declarations](#cleaner-enum-declarations)\n+    - [Specifying Default Field Values](#specifying-default-field-values)\n+\n+## Why Use PDL?\n+\n+PDL as a schema definition language was designed to be read and written by humans, making it a much more enjoyable experience for developers\n+to define their service's models. PDSC, despite its syntax being simply a subset of JSON, cannot boast this human-readability factor.\n+\n+In addition to its inherently more readable syntax, PDL also features some extra shorthand which developers can leverage to write less and\n+make their schemas more readable for others. See [below](#notable-differences-between-pdsc-and-pdl) for more information on this.\n+\n+## How to Convert Schemas to PDL\n+\n+If you have an existing project with PDSC schemas, converting everything to PDL is pretty straightforward.\n+Rest.li's Gradle plugin provides a task `convert<sourceSet>ToPdl` which will automatically convert your schemas for you.\n+It should be noted that this task verifies the converted schemas against the original schemas.\n+If this verification is failed, then the whole conversion will be aborted.\n+\n+The following command will convert every PDSC schema in your project to PDL.\n+\n+```\n+gradle convertToPdl\n+```\n+\n+You can selectively migrate only one particular module of your project with the following:\n+\n+```\n+gradle :<moduleName>:convertToPdl\n+```\n+\n+This task also takes in a few options:\n+\n+```\n+gradle :<moduleName>:convertToPdl \\\n+    [-PconvertToPdl.reverse=(true|false)] \\\n+    [-PconvertToPdl.keepOriginal=(true|false)] \\\n+    [-PconvertToPdl.preserveSrcCmd]\n+```\n+\n+| Property | Type | Since | Description\n+|----------|------|-------|-------------\n+| `convertToPdl.reverse` | boolean | `28.0.11` | If true, converts PDL schemas back to PDSC (and vice versa if false).\n+| `convertToPdl.keepOriginal` | boolean | `28.0.11` | If true, keeps the source schemas (the source schemas are deleted by default).\n+| `convertToPdl.preserveSrcCmd` | string | `28.1.1` | Command which is run for each file, useful for running special VCS logic. The command should be a template string containing `$src` and `$dst` as references to the source and destination filename, respectively (e.g. `gradle convertToPdl -PconvertToPdl.preserveSrcCmd \"/usr/bin/svn mv $src $dst\"`).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU1ODY4Mw=="}, "originalCommit": {"oid": "03d4f9e58e9fa87c7b15d5a74316984063a4f4a8"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYyNTQ0OQ==", "bodyText": "Umm, why can't we just recommend a good version?", "url": "https://github.com/linkedin/rest.li/pull/165#discussion_r376625449", "createdAt": "2020-02-07T21:54:02Z", "author": {"login": "nickibi"}, "path": "pdl_migration.md", "diffHunk": "@@ -0,0 +1,412 @@\n+---\n+layout: guide\n+title: Migrating from PDSC to PDL\n+permalink: /pdl_migration\n+excerpt: Guide for migrating from PDSC to PDL with a side-by-side comparison showing notable differences.\n+---\n+\n+# Migrating from PDSC to PDL\n+\n+{{ page.excerpt }}\n+\n+## Contents\n+- [Why Use PDL?](#why-use-pdl)\n+- [How to Convert Schemas to PDL](#how-to-convert-schemas-to-pdl)\n+- [Notable Differences Between PDSC and PDL](#notable-differences-between-pdsc-and-pdl)\n+    - [PDL is More Java-Like](#pdl-is-more-java-like)\n+    - [Import Statements](#import-statements)\n+    - [Shorthand for Custom Properties](#shorthand-for-custom-properties)\n+    - [Cleaner Enum Declarations](#cleaner-enum-declarations)\n+    - [Specifying Default Field Values](#specifying-default-field-values)\n+\n+## Why Use PDL?\n+\n+PDL as a schema definition language was designed to be read and written by humans, making it a much more enjoyable experience for developers\n+to define their service's models. PDSC, despite its syntax being simply a subset of JSON, cannot boast this human-readability factor.\n+\n+In addition to its inherently more readable syntax, PDL also features some extra shorthand which developers can leverage to write less and\n+make their schemas more readable for others. See [below](#notable-differences-between-pdsc-and-pdl) for more information on this.\n+\n+## How to Convert Schemas to PDL\n+\n+If you have an existing project with PDSC schemas, converting everything to PDL is pretty straightforward.\n+Rest.li's Gradle plugin provides a task `convert<sourceSet>ToPdl` which will automatically convert your schemas for you.\n+It should be noted that this task verifies the converted schemas against the original schemas.\n+If this verification is failed, then the whole conversion will be aborted.\n+\n+The following command will convert every PDSC schema in your project to PDL.\n+\n+```\n+gradle convertToPdl\n+```\n+\n+You can selectively migrate only one particular module of your project with the following:\n+\n+```\n+gradle :<moduleName>:convertToPdl\n+```\n+\n+This task also takes in a few options:\n+\n+```\n+gradle :<moduleName>:convertToPdl \\\n+    [-PconvertToPdl.reverse=(true|false)] \\\n+    [-PconvertToPdl.keepOriginal=(true|false)] \\\n+    [-PconvertToPdl.preserveSrcCmd]\n+```\n+\n+| Property | Type | Since | Description\n+|----------|------|-------|-------------\n+| `convertToPdl.reverse` | boolean | `28.0.11` | If true, converts PDL schemas back to PDSC (and vice versa if false).\n+| `convertToPdl.keepOriginal` | boolean | `28.0.11` | If true, keeps the source schemas (the source schemas are deleted by default).\n+| `convertToPdl.preserveSrcCmd` | string | `28.1.1` | Command which is run for each file, useful for running special VCS logic. The command should be a template string containing `$src` and `$dst` as references to the source and destination filename, respectively (e.g. `gradle convertToPdl -PconvertToPdl.preserveSrcCmd \"/usr/bin/svn mv $src $dst\"`).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU1ODY4Mw=="}, "originalCommit": {"oid": "03d4f9e58e9fa87c7b15d5a74316984063a4f4a8"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY2Njc2Mg==", "bodyText": "Same thing.", "url": "https://github.com/linkedin/rest.li/pull/165#discussion_r376666762", "createdAt": "2020-02-08T00:30:12Z", "author": {"login": "evanw555"}, "path": "pdl_migration.md", "diffHunk": "@@ -0,0 +1,412 @@\n+---\n+layout: guide\n+title: Migrating from PDSC to PDL\n+permalink: /pdl_migration\n+excerpt: Guide for migrating from PDSC to PDL with a side-by-side comparison showing notable differences.\n+---\n+\n+# Migrating from PDSC to PDL\n+\n+{{ page.excerpt }}\n+\n+## Contents\n+- [Why Use PDL?](#why-use-pdl)\n+- [How to Convert Schemas to PDL](#how-to-convert-schemas-to-pdl)\n+- [Notable Differences Between PDSC and PDL](#notable-differences-between-pdsc-and-pdl)\n+    - [PDL is More Java-Like](#pdl-is-more-java-like)\n+    - [Import Statements](#import-statements)\n+    - [Shorthand for Custom Properties](#shorthand-for-custom-properties)\n+    - [Cleaner Enum Declarations](#cleaner-enum-declarations)\n+    - [Specifying Default Field Values](#specifying-default-field-values)\n+\n+## Why Use PDL?\n+\n+PDL as a schema definition language was designed to be read and written by humans, making it a much more enjoyable experience for developers\n+to define their service's models. PDSC, despite its syntax being simply a subset of JSON, cannot boast this human-readability factor.\n+\n+In addition to its inherently more readable syntax, PDL also features some extra shorthand which developers can leverage to write less and\n+make their schemas more readable for others. See [below](#notable-differences-between-pdsc-and-pdl) for more information on this.\n+\n+## How to Convert Schemas to PDL\n+\n+If you have an existing project with PDSC schemas, converting everything to PDL is pretty straightforward.\n+Rest.li's Gradle plugin provides a task `convert<sourceSet>ToPdl` which will automatically convert your schemas for you.\n+It should be noted that this task verifies the converted schemas against the original schemas.\n+If this verification is failed, then the whole conversion will be aborted.\n+\n+The following command will convert every PDSC schema in your project to PDL.\n+\n+```\n+gradle convertToPdl\n+```\n+\n+You can selectively migrate only one particular module of your project with the following:\n+\n+```\n+gradle :<moduleName>:convertToPdl\n+```\n+\n+This task also takes in a few options:\n+\n+```\n+gradle :<moduleName>:convertToPdl \\\n+    [-PconvertToPdl.reverse=(true|false)] \\\n+    [-PconvertToPdl.keepOriginal=(true|false)] \\\n+    [-PconvertToPdl.preserveSrcCmd]\n+```\n+\n+| Property | Type | Since | Description\n+|----------|------|-------|-------------\n+| `convertToPdl.reverse` | boolean | `28.0.11` | If true, converts PDL schemas back to PDSC (and vice versa if false).\n+| `convertToPdl.keepOriginal` | boolean | `28.0.11` | If true, keeps the source schemas (the source schemas are deleted by default).\n+| `convertToPdl.preserveSrcCmd` | string | `28.1.1` | Command which is run for each file, useful for running special VCS logic. The command should be a template string containing `$src` and `$dst` as references to the source and destination filename, respectively (e.g. `gradle convertToPdl -PconvertToPdl.preserveSrcCmd \"/usr/bin/svn mv $src $dst\"`).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU1ODY4Mw=="}, "originalCommit": {"oid": "03d4f9e58e9fa87c7b15d5a74316984063a4f4a8"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzgwMTUxOnYy", "diffSide": "RIGHT", "path": "pdl_migration.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxODo1ODowMlrOFnxvRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxODo1ODowMlrOFnxvRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI1MzcwMw==", "bodyText": "Minimum version suggested for converting to PDL is 28.1.3. However, it is recommended to use the latest version of pegasus to ensure you get all the recent fixes and improvements.", "url": "https://github.com/linkedin/rest.li/pull/165#discussion_r377253703", "createdAt": "2020-02-10T18:58:02Z", "author": {"login": "karthikbalasub"}, "path": "pdl_migration.md", "diffHunk": "@@ -0,0 +1,414 @@\n+---\n+layout: guide\n+title: Migrating from PDSC to PDL\n+permalink: /pdl_migration\n+excerpt: Guide for migrating from PDSC to PDL with a side-by-side comparison showing notable differences.\n+---\n+\n+# Migrating from PDSC to PDL\n+\n+{{ page.excerpt }}\n+\n+## Contents\n+- [Why Use PDL?](#why-use-pdl)\n+- [How to Convert Schemas to PDL](#how-to-convert-schemas-to-pdl)\n+- [Notable Differences Between PDSC and PDL](#notable-differences-between-pdsc-and-pdl)\n+    - [PDL is More Java-Like](#pdl-is-more-java-like)\n+    - [Import Statements](#import-statements)\n+    - [Shorthand for Custom Properties](#shorthand-for-custom-properties)\n+    - [Cleaner Enum Declarations](#cleaner-enum-declarations)\n+    - [Specifying Default Field Values](#specifying-default-field-values)\n+\n+## Why Use PDL?\n+\n+PDL as a schema definition language was designed to be read and written by humans, making it a much more enjoyable experience for developers\n+to define their service's models. PDSC, despite its syntax being simply a subset of JSON, cannot boast this human-readability factor.\n+\n+In addition to its inherently more readable syntax, PDL also features some extra shorthand which developers can leverage to write less and\n+make their schemas more readable for others. See [below](#notable-differences-between-pdsc-and-pdl) for more information on this.\n+\n+## How to Convert Schemas to PDL\n+\n+If you have an existing project with PDSC schemas, converting everything to PDL is pretty straightforward.\n+Rest.li's Gradle plugin provides a task `convert<sourceSet>ToPdl` which will automatically convert your schemas for you.\n+It should be noted that this task verifies the converted schemas against the original schemas.\n+If this verification fails, then the whole conversion will be aborted.\n+\n+It's suggested to use at least version `28.1.3` when running this task.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9009802589aaf7a581917f6a3e486a0e8a6b1e19"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzg4MTg1OnYy", "diffSide": "RIGHT", "path": "pdl_migration.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOToyMzoyOFrOFnyhng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNjoxNzo1NVrOFn-TfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI2NjU5MA==", "bodyText": "Include skip-verification flag", "url": "https://github.com/linkedin/rest.li/pull/165#discussion_r377266590", "createdAt": "2020-02-10T19:23:28Z", "author": {"login": "karthikbalasub"}, "path": "pdl_migration.md", "diffHunk": "@@ -0,0 +1,414 @@\n+---\n+layout: guide\n+title: Migrating from PDSC to PDL\n+permalink: /pdl_migration\n+excerpt: Guide for migrating from PDSC to PDL with a side-by-side comparison showing notable differences.\n+---\n+\n+# Migrating from PDSC to PDL\n+\n+{{ page.excerpt }}\n+\n+## Contents\n+- [Why Use PDL?](#why-use-pdl)\n+- [How to Convert Schemas to PDL](#how-to-convert-schemas-to-pdl)\n+- [Notable Differences Between PDSC and PDL](#notable-differences-between-pdsc-and-pdl)\n+    - [PDL is More Java-Like](#pdl-is-more-java-like)\n+    - [Import Statements](#import-statements)\n+    - [Shorthand for Custom Properties](#shorthand-for-custom-properties)\n+    - [Cleaner Enum Declarations](#cleaner-enum-declarations)\n+    - [Specifying Default Field Values](#specifying-default-field-values)\n+\n+## Why Use PDL?\n+\n+PDL as a schema definition language was designed to be read and written by humans, making it a much more enjoyable experience for developers\n+to define their service's models. PDSC, despite its syntax being simply a subset of JSON, cannot boast this human-readability factor.\n+\n+In addition to its inherently more readable syntax, PDL also features some extra shorthand which developers can leverage to write less and\n+make their schemas more readable for others. See [below](#notable-differences-between-pdsc-and-pdl) for more information on this.\n+\n+## How to Convert Schemas to PDL\n+\n+If you have an existing project with PDSC schemas, converting everything to PDL is pretty straightforward.\n+Rest.li's Gradle plugin provides a task `convert<sourceSet>ToPdl` which will automatically convert your schemas for you.\n+It should be noted that this task verifies the converted schemas against the original schemas.\n+If this verification fails, then the whole conversion will be aborted.\n+\n+It's suggested to use at least version `28.1.3` when running this task.\n+\n+The following command will convert every PDSC schema in your project to PDL.\n+\n+```\n+gradle convertToPdl\n+```\n+\n+You can selectively migrate only one particular module of your project with the following:\n+\n+```\n+gradle :<moduleName>:convertToPdl\n+```\n+\n+This task also takes in a few options:\n+\n+```\n+gradle :<moduleName>:convertToPdl \\\n+    [-PconvertToPdl.reverse=(true|false)] \\\n+    [-PconvertToPdl.keepOriginal=(true|false)] \\\n+    [-PconvertToPdl.preserveSrcCmd]\n+```\n+\n+| Property | Type | Description\n+|----------|------|-------------\n+| `convertToPdl.reverse` | boolean | If true, converts PDL schemas back to PDSC (and vice versa if false).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9009802589aaf7a581917f6a3e486a0e8a6b1e19"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ1OTU4MA==", "bodyText": "I thought that too at first when I wrote this, but the convertToPdl Gradle task is separate from the SchemaFormatTranslator class which supports this flag.", "url": "https://github.com/linkedin/rest.li/pull/165#discussion_r377459580", "createdAt": "2020-02-11T06:17:55Z", "author": {"login": "evanw555"}, "path": "pdl_migration.md", "diffHunk": "@@ -0,0 +1,414 @@\n+---\n+layout: guide\n+title: Migrating from PDSC to PDL\n+permalink: /pdl_migration\n+excerpt: Guide for migrating from PDSC to PDL with a side-by-side comparison showing notable differences.\n+---\n+\n+# Migrating from PDSC to PDL\n+\n+{{ page.excerpt }}\n+\n+## Contents\n+- [Why Use PDL?](#why-use-pdl)\n+- [How to Convert Schemas to PDL](#how-to-convert-schemas-to-pdl)\n+- [Notable Differences Between PDSC and PDL](#notable-differences-between-pdsc-and-pdl)\n+    - [PDL is More Java-Like](#pdl-is-more-java-like)\n+    - [Import Statements](#import-statements)\n+    - [Shorthand for Custom Properties](#shorthand-for-custom-properties)\n+    - [Cleaner Enum Declarations](#cleaner-enum-declarations)\n+    - [Specifying Default Field Values](#specifying-default-field-values)\n+\n+## Why Use PDL?\n+\n+PDL as a schema definition language was designed to be read and written by humans, making it a much more enjoyable experience for developers\n+to define their service's models. PDSC, despite its syntax being simply a subset of JSON, cannot boast this human-readability factor.\n+\n+In addition to its inherently more readable syntax, PDL also features some extra shorthand which developers can leverage to write less and\n+make their schemas more readable for others. See [below](#notable-differences-between-pdsc-and-pdl) for more information on this.\n+\n+## How to Convert Schemas to PDL\n+\n+If you have an existing project with PDSC schemas, converting everything to PDL is pretty straightforward.\n+Rest.li's Gradle plugin provides a task `convert<sourceSet>ToPdl` which will automatically convert your schemas for you.\n+It should be noted that this task verifies the converted schemas against the original schemas.\n+If this verification fails, then the whole conversion will be aborted.\n+\n+It's suggested to use at least version `28.1.3` when running this task.\n+\n+The following command will convert every PDSC schema in your project to PDL.\n+\n+```\n+gradle convertToPdl\n+```\n+\n+You can selectively migrate only one particular module of your project with the following:\n+\n+```\n+gradle :<moduleName>:convertToPdl\n+```\n+\n+This task also takes in a few options:\n+\n+```\n+gradle :<moduleName>:convertToPdl \\\n+    [-PconvertToPdl.reverse=(true|false)] \\\n+    [-PconvertToPdl.keepOriginal=(true|false)] \\\n+    [-PconvertToPdl.preserveSrcCmd]\n+```\n+\n+| Property | Type | Description\n+|----------|------|-------------\n+| `convertToPdl.reverse` | boolean | If true, converts PDL schemas back to PDSC (and vice versa if false).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI2NjU5MA=="}, "originalCommit": {"oid": "9009802589aaf7a581917f6a3e486a0e8a6b1e19"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 556, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}