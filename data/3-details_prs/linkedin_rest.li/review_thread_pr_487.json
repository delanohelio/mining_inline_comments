{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NzUxNTg5", "number": 487, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNDo1NToyNlrOE9eh5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNDo1NTo1NlrOE9eiQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODk4Nzg4OnYy", "diffSide": "RIGHT", "path": "data/src/main/java/com/linkedin/data/Data.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNDo1NToyNlrOH6L2JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQyMjo0NzoyMVrOH6opcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3MzU0MA==", "bodyText": "nit: record cycles when assertions are .. (remove comma)", "url": "https://github.com/linkedin/rest.li/pull/487#discussion_r530773540", "createdAt": "2020-11-26T04:55:26Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/Data.java", "diffHunk": "@@ -112,8 +112,15 @@\n   /**\n    * Supplier for cycle checker used when traversing instances using a {@link Data.TraverseCallback}. Applications can\n    * choose to replace this with a supplier vending custom implementations, at their own risk of ensuring correctness.\n+   *\n+   * <p>The default implementation uses a {@link ThreadLocal} in every {@link DataList} and {@link DataMap} to detect\n+   * and record cycles, when assertions are enabled, and does NO checks when assertions are disabled.</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad39c40fb615fb58b5d0e838ff54fc8f7f70c125"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI0NTQyNw==", "bodyText": "Also made the checkers singletons to reduce garbage since they carry no internal state.", "url": "https://github.com/linkedin/rest.li/pull/487#discussion_r531245427", "createdAt": "2020-11-26T22:47:21Z", "author": {"login": "karthikrg"}, "path": "data/src/main/java/com/linkedin/data/Data.java", "diffHunk": "@@ -112,8 +112,15 @@\n   /**\n    * Supplier for cycle checker used when traversing instances using a {@link Data.TraverseCallback}. Applications can\n    * choose to replace this with a supplier vending custom implementations, at their own risk of ensuring correctness.\n+   *\n+   * <p>The default implementation uses a {@link ThreadLocal} in every {@link DataList} and {@link DataMap} to detect\n+   * and record cycles, when assertions are enabled, and does NO checks when assertions are disabled.</p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3MzU0MA=="}, "originalCommit": {"oid": "ad39c40fb615fb58b5d0e838ff54fc8f7f70c125"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODk4ODgwOnYy", "diffSide": "RIGHT", "path": "data/src/main/java/com/linkedin/data/Data.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNDo1NTo1NlrOH6L2ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNDo1NTo1NlrOH6L2ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3MzY2Mg==", "bodyText": "nice!", "url": "https://github.com/linkedin/rest.li/pull/487#discussion_r530773662", "createdAt": "2020-11-26T04:55:56Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/Data.java", "diffHunk": "@@ -112,8 +112,15 @@\n   /**\n    * Supplier for cycle checker used when traversing instances using a {@link Data.TraverseCallback}. Applications can\n    * choose to replace this with a supplier vending custom implementations, at their own risk of ensuring correctness.\n+   *\n+   * <p>The default implementation uses a {@link ThreadLocal} in every {@link DataList} and {@link DataMap} to detect\n+   * and record cycles, when assertions are enabled, and does NO checks when assertions are disabled.</p>\n    */\n-  private static Supplier<CycleChecker> CYCLE_CHECKER_SUPPLIER = DefaultCycleChecker::new;\n+  private static Supplier<CycleChecker> CYCLE_CHECKER_SUPPLIER = () -> {\n+    boolean assertionsEnabled = false;\n+    assert assertionsEnabled = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad39c40fb615fb58b5d0e838ff54fc8f7f70c125"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 284, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}