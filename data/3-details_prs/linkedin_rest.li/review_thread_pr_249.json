{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MzczNzg0", "number": 249, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMToxNjoyOFrODumJZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTo0OTo1M1rODupDVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTg2MDg0OnYy", "diffSide": "RIGHT", "path": "r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMToxNjoyOFrOGAp7TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMDoyMzo0MlrOGAtPiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0MDEwOQ==", "bodyText": "You can also fix the leak in the SingleTimeout\n  public SingleTimeout(ScheduledExecutorService executor, long timeout, TimeUnit timeoutUnit, T item, Consumer<T> timeoutAction) \n  { \n    ArgumentUtil.ensureNotNull(item,\"item\"); \n    ArgumentUtil.ensureNotNull(timeoutAction,\"timeoutAction\"); \n \n    _item = new AtomicReference<>(item); \n    _future = executor.schedule(() -> { \n      T item1 = _item.getAndSet(null); \n      if (item1 != null) \n      { \n        try \n        { \n          timeoutAction.apply(item1); \n        } catch (Throwable e) \n        { \n          LOG.error(\"Failed to execute timeout action\", e); \n        } \n      } \n    }, timeout, timeoutUnit); \n  }", "url": "https://github.com/linkedin/rest.li/pull/249#discussion_r403340109", "createdAt": "2020-04-03T21:16:28Z", "author": {"login": "FreCap"}, "path": "r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java", "diffHunk": "@@ -440,6 +444,11 @@ public boolean cancel()\n     };\n   }\n \n+  private boolean isWaiterTimeoutWithinFastFailThreshold()\n+  {\n+    return _waiterTimeout >= MIN_WAITER_TIMEOUT && _waiterTimeout <= MAX_WAITER_TIMEOUT;\n+  }\n+\n   @Override\n   public void put(T obj)\n   {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e392324b948885b9b03441155542f7536512e193"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5MDkzMA==", "bodyText": "Done", "url": "https://github.com/linkedin/rest.li/pull/249#discussion_r403390930", "createdAt": "2020-04-04T00:05:58Z", "author": {"login": "nizarm"}, "path": "r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java", "diffHunk": "@@ -440,6 +444,11 @@ public boolean cancel()\n     };\n   }\n \n+  private boolean isWaiterTimeoutWithinFastFailThreshold()\n+  {\n+    return _waiterTimeout >= MIN_WAITER_TIMEOUT && _waiterTimeout <= MAX_WAITER_TIMEOUT;\n+  }\n+\n   @Override\n   public void put(T obj)\n   {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0MDEwOQ=="}, "originalCommit": {"oid": "e392324b948885b9b03441155542f7536512e193"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5MzcxMA==", "bodyText": "SingleTime not part of this PR.", "url": "https://github.com/linkedin/rest.li/pull/249#discussion_r403393710", "createdAt": "2020-04-04T00:19:46Z", "author": {"login": "ssheng"}, "path": "r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java", "diffHunk": "@@ -440,6 +444,11 @@ public boolean cancel()\n     };\n   }\n \n+  private boolean isWaiterTimeoutWithinFastFailThreshold()\n+  {\n+    return _waiterTimeout >= MIN_WAITER_TIMEOUT && _waiterTimeout <= MAX_WAITER_TIMEOUT;\n+  }\n+\n   @Override\n   public void put(T obj)\n   {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0MDEwOQ=="}, "originalCommit": {"oid": "e392324b948885b9b03441155542f7536512e193"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5NDQ0Mw==", "bodyText": "You mean - you dont want to include singletimeout? It is already present in this PR as a separate commit following this. I will squash these during merge time", "url": "https://github.com/linkedin/rest.li/pull/249#discussion_r403394443", "createdAt": "2020-04-04T00:23:42Z", "author": {"login": "nizarm"}, "path": "r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java", "diffHunk": "@@ -440,6 +444,11 @@ public boolean cancel()\n     };\n   }\n \n+  private boolean isWaiterTimeoutWithinFastFailThreshold()\n+  {\n+    return _waiterTimeout >= MIN_WAITER_TIMEOUT && _waiterTimeout <= MAX_WAITER_TIMEOUT;\n+  }\n+\n   @Override\n   public void put(T obj)\n   {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0MDEwOQ=="}, "originalCommit": {"oid": "e392324b948885b9b03441155542f7536512e193"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTg2NDgxOnYy", "diffSide": "RIGHT", "path": "r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMToxNzo1MlrOGAp9fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMToxODoxMlrOGAp-Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0MDY2OQ==", "bodyText": "isWaiterTimeoutEnabled?", "url": "https://github.com/linkedin/rest.li/pull/249#discussion_r403340669", "createdAt": "2020-04-03T21:17:52Z", "author": {"login": "FreCap"}, "path": "r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java", "diffHunk": "@@ -440,6 +444,11 @@ public boolean cancel()\n     };\n   }\n \n+  private boolean isWaiterTimeoutWithinFastFailThreshold()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e392324b948885b9b03441155542f7536512e193"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0MDg0Nw==", "bodyText": "within fast fail threshold can be a impl comment", "url": "https://github.com/linkedin/rest.li/pull/249#discussion_r403340847", "createdAt": "2020-04-03T21:18:12Z", "author": {"login": "FreCap"}, "path": "r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java", "diffHunk": "@@ -440,6 +444,11 @@ public boolean cancel()\n     };\n   }\n \n+  private boolean isWaiterTimeoutWithinFastFailThreshold()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0MDY2OQ=="}, "originalCommit": {"oid": "e392324b948885b9b03441155542f7536512e193"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjIyMDc4OnYy", "diffSide": "RIGHT", "path": "r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMDoxNToyNVrOGAtJKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMjozODoyOVrOGAuXMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5MjgwOA==", "bodyText": "This check should also exist within the constructor and offspring factory where it is passed in. We do address this in a separate PR if you'd like.", "url": "https://github.com/linkedin/rest.li/pull/249#discussion_r403392808", "createdAt": "2020-04-04T00:15:25Z", "author": {"login": "ssheng"}, "path": "r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java", "diffHunk": "@@ -374,8 +374,12 @@ public Cancellable get(final Callback<T> callback)\n           {\n             if (_waiters.size() < _maxWaiters)\n             {\n+              if (isWaiterTimeoutWithinFastFailThreshold())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e392324b948885b9b03441155542f7536512e193"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5NDcyOQ==", "bodyText": "Why this needs to be there in other places ? checking here should take care of all the cases right?", "url": "https://github.com/linkedin/rest.li/pull/249#discussion_r403394729", "createdAt": "2020-04-04T00:25:06Z", "author": {"login": "nizarm"}, "path": "r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java", "diffHunk": "@@ -374,8 +374,12 @@ public Cancellable get(final Callback<T> callback)\n           {\n             if (_waiters.size() < _maxWaiters)\n             {\n+              if (isWaiterTimeoutWithinFastFailThreshold())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5MjgwOA=="}, "originalCommit": {"oid": "e392324b948885b9b03441155542f7536512e193"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5OTY0OA==", "bodyText": "We should not silently ignore configs passed in. If we could fail early in HttpClientFactory.Builder or the Offspring factory user can detect much earlier.", "url": "https://github.com/linkedin/rest.li/pull/249#discussion_r403399648", "createdAt": "2020-04-04T00:53:12Z", "author": {"login": "ssheng"}, "path": "r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java", "diffHunk": "@@ -374,8 +374,12 @@ public Cancellable get(final Callback<T> callback)\n           {\n             if (_waiters.size() < _maxWaiters)\n             {\n+              if (isWaiterTimeoutWithinFastFailThreshold())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5MjgwOA=="}, "originalCommit": {"oid": "e392324b948885b9b03441155542f7536512e193"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQxMjc4Nw==", "bodyText": "Understood. I will create a separate PR for this.", "url": "https://github.com/linkedin/rest.li/pull/249#discussion_r403412787", "createdAt": "2020-04-04T02:38:29Z", "author": {"login": "nizarm"}, "path": "r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java", "diffHunk": "@@ -374,8 +374,12 @@ public Cancellable get(final Callback<T> callback)\n           {\n             if (_waiters.size() < _maxWaiters)\n             {\n+              if (isWaiterTimeoutWithinFastFailThreshold())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5MjgwOA=="}, "originalCommit": {"oid": "e392324b948885b9b03441155542f7536512e193"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjMzNjg2OnYy", "diffSide": "RIGHT", "path": "r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTo0OTo1M1rOGAuDLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTo0OTo1M1rOGAuDLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwNzY2MQ==", "bodyText": "I would rather not put a number in the callback variable, something like: callbackIfTimeout", "url": "https://github.com/linkedin/rest.li/pull/249#discussion_r403407661", "createdAt": "2020-04-04T01:49:53Z", "author": {"login": "FreCap"}, "path": "r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java", "diffHunk": "@@ -840,15 +850,15 @@ public long getTime()\n \n     private WaiterTimeoutCallback(final Callback<T> callback)\n     {\n-      _timeout = new SingleTimeout<>(_timeoutExecutor, _waiterTimeout, TimeUnit.MILLISECONDS, callback, () -> {\n+      _timeout = new SingleTimeout<>(_timeoutExecutor, _waiterTimeout, TimeUnit.MILLISECONDS, callback, (callback1) -> {\n \n         synchronized (_lock)\n         {\n           _waiters.remove(this);\n           _statsTracker.incrementWaiterTimedOut();\n         }\n         LOG.debug(\"{}: failing waiter due to waiter timeout\", _poolName);\n-        callback.onError(\n+        callback1.onError(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2220c99cf40720bc20eee7fc136e431e966531a"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 658, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}