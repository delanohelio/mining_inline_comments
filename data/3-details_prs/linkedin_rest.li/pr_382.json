{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3NzAyOTg3", "number": 382, "title": "Allow publishing release candidate versions", "bodyText": "This change will allow the maintainers of Rest.li to publish release\ncandidate versions (e.g. 1.2.3-rc.1) from non-master branches in order\nto test experimental features in a safe way as dictated by industry\nconvention as per the SemVer spec. Also cleans up the changelog a bit.\nNotes:\n\nChanges to scripts/release add support and assertions for the local CLI.\nChanges to scripts/travis/publish-tag.sh add support on the Travis CI side.\nThe change to .travis.yml enables deployment (i.e. bintray publishing) for RC tags.", "createdAt": "2020-08-14T00:26:25Z", "url": "https://github.com/linkedin/rest.li/pull/382", "merged": true, "mergeCommit": {"oid": "6855dada1703f2988c2c5ad37749335a9ca3786c"}, "closed": true, "closedAt": "2020-08-15T07:08:19Z", "author": {"login": "evanw555"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-p6oSAFqTQ2NzI0NjAzNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-_04bABqjM2NTgxNDc1NTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MjQ2MDM2", "url": "https://github.com/linkedin/rest.li/pull/382#pullrequestreview-467246036", "createdAt": "2020-08-14T00:59:32Z", "commit": {"oid": "2a3501d97d6186e3fa1272e4305c8338c29aef2c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDo1OTozMlrOHAj2SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDo1OTozMlrOHAj2SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM0OTM4NQ==", "bodyText": "Does it mean if TARGET is at non-master branch, then it can be released as a rc?", "url": "https://github.com/linkedin/rest.li/pull/382#discussion_r470349385", "createdAt": "2020-08-14T00:59:32Z", "author": {"login": "BrianPin"}, "path": "scripts/help-text/release.txt", "diffHunk": "@@ -1,9 +1,13 @@\n Usage: ./scripts/release [OPTION]... [TARGET_COMMIT]\n-Releases a new version of Rest.li by creating and pushing a tag at TARGET_COMMIT (defaults to HEAD).\n-This script must be run from the root project directory.\n+Releases a new version of Rest.li by creating and pushing a tag at TARGET_COMMIT (defaults to HEAD). This script must be\n+run from the root project directory. TARGET_COMMIT must be an ancestor of master, unless the version being released is a\n+release candidate version.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a3501d97d6186e3fa1272e4305c8338c29aef2c"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MjU0MDQw", "url": "https://github.com/linkedin/rest.li/pull/382#pullrequestreview-467254040", "createdAt": "2020-08-14T01:29:52Z", "commit": {"oid": "2a3501d97d6186e3fa1272e4305c8338c29aef2c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMToyOTo1MlrOHAkpLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMToyOTo1MlrOHAkpLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM2MjQxNA==", "bodyText": "Just curious, when we release a rc, the prefix version should be in the future or in the past?\nI think the common should be:\nsay we are now at v0.1\nwe are going to v0.2 but have some rc,\nso we have\nv0.2-rc1\nv0.2-rc2\nthen when everything works,\nv0.2 is the released.\nWe shall have more rc\\d  and probably the prefix version string should never happened?\nI verified other rc conventions by looking at linux\nhttps://github.com/torvalds/linux/releases", "url": "https://github.com/linkedin/rest.li/pull/382#discussion_r470362414", "createdAt": "2020-08-14T01:29:52Z", "author": {"login": "BrianPin"}, "path": "scripts/release", "diffHunk": "@@ -45,9 +43,64 @@ if [ -z \"$VERSION\" ]; then\n   exit 1\n fi\n \n+# Determine if the version is a release candidate version\n+RELEASE_CANDIDATE=false\n+if [[ \"$VERSION\" =~ ^[0-9]+\\.[0-9]+\\.[0-9]+-rc\\.[0-9]+$ ]]; then\n+  RELEASE_CANDIDATE=true\n+fi\n+\n+# Ensure that the target commit is an ancestor of master\n+git merge-base --is-ancestor $TARGET_COMMIT master\n+if [ $? != 0 ]; then\n+  if $RELEASE_CANDIDATE; then\n+    # Since this is a release candidate, allow it with a warning and confirmation\n+    echo -n \"You're attempting to publish a release candidate from a non-master branch. Are you sure you want to do this? (y/N) \"\n+    read ANSWER\n+    if [[ ! \"$ANSWER\" =~ ^[yY]+$ ]]; then\n+      echo 'Aborting...'\n+      exit 1\n+    fi\n+  else\n+    # In the general case, don't allow it\n+    echo \"Invalid target: $TARGET\"\n+    echo 'Please select a target commit which is an ancestor of master.'\n+    exit 1\n+  fi\n+fi\n+\n+# Update local tags\n+echo -n 'Updating local tags via remote fetch... '\n+git fetch origin > /dev/null 2>&1\n+echo 'done'\n+\n+# Perform some release candidate assertions, if applicable\n+if $RELEASE_CANDIDATE; then\n+  SUFFIXLESS_VERSION=${VERSION%-*}\n+  # Assert that this release candidate precedes the associated release\n+  if [ \"$(git tag --list v$SUFFIXLESS_VERSION)\" ]; then\n+    echo \"Cannot create release candidate $VERSION, as a release for $SUFFIXLESS_VERSION already exists.\"\n+    echo \"Release candidates must come before proper releases, so please bump the project version in $PROPERTIES_FILE and try again.\"\n+    exit 1\n+  fi\n+  # Assert that there exists no available lower RC number (e.g. don't allow 1.2.3-rc.2 if 1.2.3-rc.1 is available)\n+  RC_NUMBER=1\n+  while true; do\n+    RC_VERSION=\"$SUFFIXLESS_VERSION-rc.$RC_NUMBER\"\n+    # Break once we've reached the current RC number\n+    if [ \"$VERSION\" = \"$RC_VERSION\" ]; then break; fi\n+    # If this rc number is available,\n+    if [ -z \"$(git tag --list \"v$RC_VERSION\")\" ]; then\n+      echo \"Cannot create release candidate $VERSION, as $RC_VERSION doesn't exist.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a3501d97d6186e3fa1272e4305c8338c29aef2c"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3Mjc0NDQ1", "url": "https://github.com/linkedin/rest.li/pull/382#pullrequestreview-467274445", "createdAt": "2020-08-14T02:49:15Z", "commit": {"oid": "66f034bba463176068e7a503b24cb54c01dda224"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3Mjc4NzQz", "url": "https://github.com/linkedin/rest.li/pull/382#pullrequestreview-467278743", "createdAt": "2020-08-14T03:06:07Z", "commit": {"oid": "66f034bba463176068e7a503b24cb54c01dda224"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NzQwMjE3", "url": "https://github.com/linkedin/rest.li/pull/382#pullrequestreview-467740217", "createdAt": "2020-08-14T17:15:51Z", "commit": {"oid": "66f034bba463176068e7a503b24cb54c01dda224"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b72a74188ecd95e5050e0273c0bf9cec1bbb2aa4", "author": {"user": {"login": "evanw555", "name": "Evan Williams"}}, "url": "https://github.com/linkedin/rest.li/commit/b72a74188ecd95e5050e0273c0bf9cec1bbb2aa4", "committedDate": "2020-08-15T02:30:24Z", "message": "Allow publishing release candidate versions\n\nThis change will allow the maintainers of Rest.li to publish release\ncandidate versions (e.g. 1.2.3-rc.1) from non-master branches in order\nto test experimental features in a safe way as dictated by industry\nconvention as per the SemVer spec. Also cleans up the changelog a bit."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "66f034bba463176068e7a503b24cb54c01dda224", "author": {"user": {"login": "evanw555", "name": "Evan Williams"}}, "url": "https://github.com/linkedin/rest.li/commit/66f034bba463176068e7a503b24cb54c01dda224", "committedDate": "2020-08-14T02:45:57Z", "message": "Loosen changelog check for RCs, add deployment waiter job, misc"}, "afterCommit": {"oid": "b72a74188ecd95e5050e0273c0bf9cec1bbb2aa4", "author": {"user": {"login": "evanw555", "name": "Evan Williams"}}, "url": "https://github.com/linkedin/rest.li/commit/b72a74188ecd95e5050e0273c0bf9cec1bbb2aa4", "committedDate": "2020-08-15T02:30:24Z", "message": "Allow publishing release candidate versions\n\nThis change will allow the maintainers of Rest.li to publish release\ncandidate versions (e.g. 1.2.3-rc.1) from non-master branches in order\nto test experimental features in a safe way as dictated by industry\nconvention as per the SemVer spec. Also cleans up the changelog a bit."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4618, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}