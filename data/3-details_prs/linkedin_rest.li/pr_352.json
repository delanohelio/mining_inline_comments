{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MzMzMjk0", "number": 352, "title": "D2 CallTracker Long Array Tracking Optimization", "bodyText": "Changes:\nSeparates percentile tracking from basic tracking (min/max, average, call count, std), because percentile tracking has memory efficiency issues with resizable long array.\nThe new LongTrackingWithPercentile class is the same as the old LongTracking class. The new LongTracking class removes percentile tracking information and is memory efficient. Users should always use LongTracking when percentile information is not essential.", "createdAt": "2020-07-22T20:18:10Z", "url": "https://github.com/linkedin/rest.li/pull/352", "merged": true, "mergeCommit": {"oid": "27870d5f5343e82f7fe39bc03fe49a0b91c976f9"}, "closed": true, "closedAt": "2020-07-25T01:47:23Z", "author": {"login": "rickzx"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3PQaOgH2gAyNDU1MzMzMjk0OjI5Y2YxZWNiMjBhYWM0OTE1YWE3MzhlZTEwMjM0MDVkMjFhYTliNzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc4H7HmgFqTQ1NTA4MjkwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "29cf1ecb20aac4915aa738ee1023405d21aa9b79", "author": {"user": {"login": "rickzx", "name": "Rick Zhou"}}, "url": "https://github.com/linkedin/rest.li/commit/29cf1ecb20aac4915aa738ee1023405d21aa9b79", "committedDate": "2020-07-21T23:58:25Z", "message": "Refactored LongTracking code to separate quantile tracking from basic tracking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06ceca8a1be3b2832231aab271670ed692d9b422", "author": {"user": {"login": "rickzx", "name": "Rick Zhou"}}, "url": "https://github.com/linkedin/rest.li/commit/06ceca8a1be3b2832231aab271670ed692d9b422", "committedDate": "2020-07-22T18:28:20Z", "message": "Minor naming changes. Add docs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0b621c418d82d2821c28a450d76c9e84b300848d", "author": {"user": {"login": "rickzx", "name": "Rick Zhou"}}, "url": "https://github.com/linkedin/rest.li/commit/0b621c418d82d2821c28a450d76c9e84b300848d", "committedDate": "2020-07-22T21:00:12Z", "message": "Merge branch 'master' into d2_relative_strategy_tracker_optimization"}, "afterCommit": {"oid": "06ceca8a1be3b2832231aab271670ed692d9b422", "author": {"user": {"login": "rickzx", "name": "Rick Zhou"}}, "url": "https://github.com/linkedin/rest.li/commit/06ceca8a1be3b2832231aab271670ed692d9b422", "committedDate": "2020-07-22T18:28:20Z", "message": "Minor naming changes. Add docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzODQ5NjUx", "url": "https://github.com/linkedin/rest.li/pull/352#pullrequestreview-453849651", "createdAt": "2020-07-23T05:50:57Z", "commit": {"oid": "06ceca8a1be3b2832231aab271670ed692d9b422"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTo1MDo1N1rOG18-4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTo1OTowNFrOG19HSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyNjg1MA==", "bodyText": "From backward compatible perspective, it's better to keep LongTracking as is, and create new class for LongTracking without percentile latency. I did a quick search and found that there are about 5 other services that use LongTracking from pegasus, one example is call-tree-app: https://jarvis.corp.linkedin.com/codesearch/result/?name=DeflateCompression.java&path=call-tree-app%2Fcall-tree-frontend%2Fapp%2Fcom%2Flinkedin%2Fcalltree%2Fcompression&reponame=calltree%2Fcall-tree-app#21, so it is important that we keep the compatibility for LongTracking.java.\nIn the long term, we can probably migrate those to use the LongTracking from util (com.linkedin.util.stats.LongTracking)", "url": "https://github.com/linkedin/rest.li/pull/352#discussion_r459226850", "createdAt": "2020-07-23T05:50:57Z", "author": {"login": "rachelhanhan"}, "path": "pegasus-common/src/main/java/com/linkedin/common/stats/LongTracking.java", "diffHunk": "@@ -1,53 +1,13 @@\n-/*\n-   Copyright (c) 2012 LinkedIn Corp.\n-\n-   Licensed under the Apache License, Version 2.0 (the \"License\");\n-   you may not use this file except in compliance with the License.\n-   You may obtain a copy of the License at\n-\n-       http://www.apache.org/licenses/LICENSE-2.0\n-\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n-*/\n-\n-/**\n- * $Id: LongTracking.java 151859 2010-11-19 21:43:47Z slim $\n- */\n package com.linkedin.common.stats;\n \n-import java.util.Arrays;\n-\n-import com.linkedin.common.util.ConfigHelper;\n-\n-\n-/**\n- * @author Swee Lim\n- * @version $Rev: 151859 $\n- */\n-\n /**\n- * Maintain a collection of values and provide the count, average, standard deviation,\n- * minimum, maximum, percentile values for the collection.\n+ * Tracks count, average, standard deviation, minimum and maximum\n+ * in a memory-efficient way.\n  *\n- * This class implementation is not synchronized. If concurrent access is required, it\n- * must be synchronized externally.\n+ * If percentile information is required, use {@link LongTrackingWithPercentile}.\n  */\n public class LongTracking implements LongTracker", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06ceca8a1be3b2832231aab271670ed692d9b422"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyNjk3Nw==", "bodyText": "Minor: we need to keep copyright for every single class", "url": "https://github.com/linkedin/rest.li/pull/352#discussion_r459226977", "createdAt": "2020-07-23T05:51:28Z", "author": {"login": "rachelhanhan"}, "path": "pegasus-common/src/main/java/com/linkedin/common/stats/LongTracking.java", "diffHunk": "@@ -1,53 +1,13 @@\n-/*\n-   Copyright (c) 2012 LinkedIn Corp.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06ceca8a1be3b2832231aab271670ed692d9b422"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyNzI1Mg==", "bodyText": "Probably a typo? 1L should be -1L", "url": "https://github.com/linkedin/rest.li/pull/352#discussion_r459227252", "createdAt": "2020-07-23T05:52:42Z", "author": {"login": "rachelhanhan"}, "path": "pegasus-common/src/main/java/com/linkedin/common/stats/LongTracking.java", "diffHunk": "@@ -120,202 +33,53 @@ else if (value > _max)\n     _sum += value;\n     _sumOfSquares += value * value;\n     _count++;\n-\n-    if (_keepRatio > 1 && (_count % _keepRatio) != 0)\n-    {\n-      return;\n-    }\n-\n-    if (_nextIndex >= _bufferSize)\n-    {\n-      if (_bufferSize < _maxCapacity)\n-      {\n-        grow();\n-      }\n-      else\n-      {\n-        dropHalf();\n-      }\n-    }\n-    _buffer[_nextIndex] = value;\n-    _nextIndex++;\n-  }\n-\n-  public int getBufferSize()\n-  {\n-    return _bufferSize;\n   }\n \n-  public int getInitialCapacity()\n-  {\n-    return _initialCapacity;\n-  }\n-\n-  public double getGrowthFactor()\n-  {\n-    return _growthFactor;\n-  }\n-\n-  public int getMaxCapacity()\n-  {\n-    return _maxCapacity;\n+  @Override\n+  public LongStats getStats() {\n+    return new LongStats(getCount(), getAverage(), getStandardDeviation(),\n+        getMinimum(), getMaximum(),\n+        -1L, -1L, -1L, 1L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06ceca8a1be3b2832231aab271670ed692d9b422"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyOTAwMQ==", "bodyText": "One logic we also want to add - we should keep using the LongTracking with percentile when this CallTrackerImpl is used in DegraderLoadBalancerStrategy, and when it is used under the new RelativeLoadBalancerStrategy, we should start using the new LongTracking without percentile implementation. You probably need to see if you can differentiate these 2 cases from TrackerClientImpl", "url": "https://github.com/linkedin/rest.li/pull/352#discussion_r459229001", "createdAt": "2020-07-23T05:59:04Z", "author": {"login": "rachelhanhan"}, "path": "degrader/src/main/java/com/linkedin/util/degrader/CallTrackerImpl.java", "diffHunk": "@@ -439,13 +440,13 @@ public void trackCallWithError(long duration)\n     private int _callStartCount;\n     private int _errorCount;\n     private int _concurrentMax;\n-    private final LongTracking _callTimeTracking;\n+    private final LongTracker _callTimeTracking;\n     //this map is used to store the number of specific errors that happened in one interval only\n     private final Map<ErrorType, Integer> _errorTypeCounts;\n \n     private Tracker()\n     {\n-      _callTimeTracking = new LongTracking();\n+      _callTimeTracking = new LongTrackingWithPercentile();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06ceca8a1be3b2832231aab271670ed692d9b422"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4309d4721aaa6788e3beec87b0460bc5b17878de", "author": {"user": {"login": "rickzx", "name": "Rick Zhou"}}, "url": "https://github.com/linkedin/rest.li/commit/4309d4721aaa6788e3beec87b0460bc5b17878de", "committedDate": "2020-07-23T16:52:33Z", "message": "Rename LongTracking for backward compatability. Fix an error in SimpleLongTracking. Add logic to use SimpleLongTracking for RelativeLoadBalancerStrategy."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NTg4ODk5", "url": "https://github.com/linkedin/rest.li/pull/352#pullrequestreview-454588899", "createdAt": "2020-07-24T01:12:18Z", "commit": {"oid": "4309d4721aaa6788e3beec87b0460bc5b17878de"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMToxMjoxOVrOG2ggvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMToxNTozN1rOG2gjyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwODk1Nw==", "bodyText": "Wondering what's the difference between doing this and let this class extend the SimpleLongTracking.java, and use super.xxx() instead. Which one is a better option?", "url": "https://github.com/linkedin/rest.li/pull/352#discussion_r459808957", "createdAt": "2020-07-24T01:12:19Z", "author": {"login": "rachelhanhan"}, "path": "pegasus-common/src/main/java/com/linkedin/common/stats/LongTracking.java", "diffHunk": "@@ -80,22 +62,21 @@ public LongTracking(final int maxCapacity, int initialCapacity, double growthFac\n     {\n       growthFactor = DEFAULT_GROWTH_FACTOR;\n     }\n+\n     _buffer = new long[initialCapacity];\n     _bufferSize = initialCapacity;\n     _initialCapacity = initialCapacity;\n     _growthFactor = growthFactor;\n     _maxCapacity = maxCapacity;\n+    _simpleLongTracking = new SimpleLongTracking();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4309d4721aaa6788e3beec87b0460bc5b17878de"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwOTI1Mg==", "bodyText": "Minor: 2020 instead", "url": "https://github.com/linkedin/rest.li/pull/352#discussion_r459809252", "createdAt": "2020-07-24T01:13:37Z", "author": {"login": "rachelhanhan"}, "path": "pegasus-common/src/main/java/com/linkedin/common/stats/SimpleLongTracking.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+   Copyright (c) 2012 LinkedIn Corp.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4309d4721aaa6788e3beec87b0460bc5b17878de"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwOTczOA==", "bodyText": "Just want to double check with you that there is no other mps that is using config to create new instance. If not, feel free to directly drop this comment.", "url": "https://github.com/linkedin/rest.li/pull/352#discussion_r459809738", "createdAt": "2020-07-24T01:15:37Z", "author": {"login": "rachelhanhan"}, "path": "pegasus-common/src/main/java/com/linkedin/common/stats/LongTracking.java", "diffHunk": "@@ -271,51 +212,4 @@ private void grow()\n     _buffer = newBuffer;\n     _bufferSize = newBufferSize;\n   }\n-\n-  private static double safeDivide(final double numerator, final double denominator)\n-  {\n-    return denominator != 0 ? numerator / denominator : 0;\n-  }\n-\n-  public static class Config", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4309d4721aaa6788e3beec87b0460bc5b17878de"}, "originalPosition": 194}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "feca9a135b7eb75a78d22aee9d13a6b2546d4274", "author": {"user": {"login": "rickzx", "name": "Rick Zhou"}}, "url": "https://github.com/linkedin/rest.li/commit/feca9a135b7eb75a78d22aee9d13a6b2546d4274", "committedDate": "2020-07-24T02:03:45Z", "message": "Fix copyright information"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MDgyOTAz", "url": "https://github.com/linkedin/rest.li/pull/352#pullrequestreview-455082903", "createdAt": "2020-07-24T17:59:45Z", "commit": {"oid": "feca9a135b7eb75a78d22aee9d13a6b2546d4274"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4881, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}