{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0OTkxMjY5", "number": 240, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMTo1NToxM1rODs3j1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNDozODo1OVrODuNIMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Mzc0MjI4OnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/D2ClientConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMTo1NToxM1rOF99rdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMjowNjowNVrOF-CriQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUxODAwNQ==", "bodyText": "the config name (readWindowMs) is not self-identified. Can we have a more descriptive name (eg zookeeperReadWindowMs)?", "url": "https://github.com/linkedin/rest.li/pull/240#discussion_r400518005", "createdAt": "2020-03-30T21:55:13Z", "author": {"login": "cx-super"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/D2ClientConfig.java", "diffHunk": "@@ -71,6 +72,7 @@\n   int retryLimit = DEAULT_RETRY_LIMIT;\n   boolean warmUp = false;\n   int warmUpTimeoutSeconds = WarmUpLoadBalancer.DEFAULT_SEND_REQUESTS_TIMEOUT_SECONDS;\n+  int readWindowMs = ZooKeeperStore.DEFAULT_READ_WINDOW_MS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f55f3da0c4b8f90446b1d2ffcaadc6a48c4d2000"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1Mzg5Ng==", "bodyText": "Thanks. Will rename this with the suggested name", "url": "https://github.com/linkedin/rest.li/pull/240#discussion_r400553896", "createdAt": "2020-03-30T23:26:20Z", "author": {"login": "nizarm"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/D2ClientConfig.java", "diffHunk": "@@ -71,6 +72,7 @@\n   int retryLimit = DEAULT_RETRY_LIMIT;\n   boolean warmUp = false;\n   int warmUpTimeoutSeconds = WarmUpLoadBalancer.DEFAULT_SEND_REQUESTS_TIMEOUT_SECONDS;\n+  int readWindowMs = ZooKeeperStore.DEFAULT_READ_WINDOW_MS;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUxODAwNQ=="}, "originalCommit": {"oid": "f55f3da0c4b8f90446b1d2ffcaadc6a48c4d2000"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5OTk0NQ==", "bodyText": "@ChaoLinkedIn  - Refactored all the variable names to zookeeperReadWindowMs and updated the pull request branch with the commit", "url": "https://github.com/linkedin/rest.li/pull/240#discussion_r400599945", "createdAt": "2020-03-31T02:06:05Z", "author": {"login": "nizarm"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/D2ClientConfig.java", "diffHunk": "@@ -71,6 +72,7 @@\n   int retryLimit = DEAULT_RETRY_LIMIT;\n   boolean warmUp = false;\n   int warmUpTimeoutSeconds = WarmUpLoadBalancer.DEFAULT_SEND_REQUESTS_TIMEOUT_SECONDS;\n+  int readWindowMs = ZooKeeperStore.DEFAULT_READ_WINDOW_MS;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUxODAwNQ=="}, "originalCommit": {"oid": "f55f3da0c4b8f90446b1d2ffcaadc6a48c4d2000"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Mzc2NDM0OnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/discovery/stores/zk/ZooKeeperEphemeralStore.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMjowMjo1N1rOF995Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzozMDo0NFrOF_LMPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyMTU0Nw==", "bodyText": "So the delay is in the range of [midPoint, readWindowMs] -- why not [0, readWindowMs]? There is no need to explicitly add latency for the calls.", "url": "https://github.com/linkedin/rest.li/pull/240#discussion_r400521547", "createdAt": "2020-03-30T22:02:57Z", "author": {"login": "cx-super"}, "path": "d2/src/main/java/com/linkedin/d2/discovery/stores/zk/ZooKeeperEphemeralStore.java", "diffHunk": "@@ -610,7 +638,19 @@ public void processResult(int rc, String path, Object ctx, Stat stat)\n     protected void processWatch(String propertyName, WatchedEvent event)\n     {\n       // Reset the watch\n-      _zk.getChildren(getPath(propertyName), this, this, false);\n+      if (_readWindowMs > 0 && _executorService != null)\n+      {\n+        // Delay setting the watch based on configured _readWindowMs\n+        int midPoint = _readWindowMs / 2;\n+        int delay = midPoint + ThreadLocalRandom.current().nextInt(midPoint);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f55f3da0c4b8f90446b1d2ffcaadc6a48c4d2000"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1NDYyOQ==", "bodyText": "The purpose of adding the delay is to reduce the number of reads as discussed in the design document. This will help us to reduce a lot of unwanted watch updates by delaying within the acceptable threshold. Please check the design document and let me know you still have concerns with this approach.", "url": "https://github.com/linkedin/rest.li/pull/240#discussion_r400554629", "createdAt": "2020-03-30T23:28:40Z", "author": {"login": "nizarm"}, "path": "d2/src/main/java/com/linkedin/d2/discovery/stores/zk/ZooKeeperEphemeralStore.java", "diffHunk": "@@ -610,7 +638,19 @@ public void processResult(int rc, String path, Object ctx, Stat stat)\n     protected void processWatch(String propertyName, WatchedEvent event)\n     {\n       // Reset the watch\n-      _zk.getChildren(getPath(propertyName), this, this, false);\n+      if (_readWindowMs > 0 && _executorService != null)\n+      {\n+        // Delay setting the watch based on configured _readWindowMs\n+        int midPoint = _readWindowMs / 2;\n+        int delay = midPoint + ThreadLocalRandom.current().nextInt(midPoint);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyMTU0Nw=="}, "originalCommit": {"oid": "f55f3da0c4b8f90446b1d2ffcaadc6a48c4d2000"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc4Nzk2NA==", "bodyText": "Thanks for the clarification. Reviewed the doc and agree there should be a delay.", "url": "https://github.com/linkedin/rest.li/pull/240#discussion_r401787964", "createdAt": "2020-04-01T17:30:44Z", "author": {"login": "cx-super"}, "path": "d2/src/main/java/com/linkedin/d2/discovery/stores/zk/ZooKeeperEphemeralStore.java", "diffHunk": "@@ -610,7 +638,19 @@ public void processResult(int rc, String path, Object ctx, Stat stat)\n     protected void processWatch(String propertyName, WatchedEvent event)\n     {\n       // Reset the watch\n-      _zk.getChildren(getPath(propertyName), this, this, false);\n+      if (_readWindowMs > 0 && _executorService != null)\n+      {\n+        // Delay setting the watch based on configured _readWindowMs\n+        int midPoint = _readWindowMs / 2;\n+        int delay = midPoint + ThreadLocalRandom.current().nextInt(midPoint);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyMTU0Nw=="}, "originalCommit": {"oid": "f55f3da0c4b8f90446b1d2ffcaadc6a48c4d2000"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjI1OTk5OnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/discovery/stores/zk/ZooKeeperStore.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzo0MjoxNlrOF_2e9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjowNzo0OFrOGC2WuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ5NzI3MQ==", "bodyText": "any reason not to use Timespan? for easier tweaking in the future and better readability.", "url": "https://github.com/linkedin/rest.li/pull/240#discussion_r402497271", "createdAt": "2020-04-02T17:42:16Z", "author": {"login": "bohhyang"}, "path": "d2/src/main/java/com/linkedin/d2/discovery/stores/zk/ZooKeeperStore.java", "diffHunk": "@@ -42,8 +42,9 @@\n     PropertyEventPublisher<T>,\n     PropertyStore<T>\n {\n-  private static final Logger           _log =\n-                                                 LoggerFactory.getLogger(ZooKeeperStore.class);\n+  private static final Logger           _log = LoggerFactory.getLogger(ZooKeeperStore.class);\n+\n+  public static final int DEFAULT_READ_WINDOW_MS = -1; //disabled by default", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0587855b73cbf6868a5d3a83674bd1475aa17d9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI0MzEyMQ==", "bodyText": "If you see the use of the read window in processWatch function - we are using this to randomize setting the watch. So we may not be able to leverage the TimeSpan here and it may introduce unwanted conversion back to int in processWatch to randomize.", "url": "https://github.com/linkedin/rest.li/pull/240#discussion_r405243121", "createdAt": "2020-04-08T03:52:43Z", "author": {"login": "nizarm"}, "path": "d2/src/main/java/com/linkedin/d2/discovery/stores/zk/ZooKeeperStore.java", "diffHunk": "@@ -42,8 +42,9 @@\n     PropertyEventPublisher<T>,\n     PropertyStore<T>\n {\n-  private static final Logger           _log =\n-                                                 LoggerFactory.getLogger(ZooKeeperStore.class);\n+  private static final Logger           _log = LoggerFactory.getLogger(ZooKeeperStore.class);\n+\n+  public static final int DEFAULT_READ_WINDOW_MS = -1; //disabled by default", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ5NzI3MQ=="}, "originalCommit": {"oid": "d0587855b73cbf6868a5d3a83674bd1475aa17d9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0MDg4OQ==", "bodyText": "could the function \"getDurationInMilliseconds\" in Timespan work for getting a long in milliseconds for the calculation?", "url": "https://github.com/linkedin/rest.li/pull/240#discussion_r405640889", "createdAt": "2020-04-08T16:07:48Z", "author": {"login": "bohhyang"}, "path": "d2/src/main/java/com/linkedin/d2/discovery/stores/zk/ZooKeeperStore.java", "diffHunk": "@@ -42,8 +42,9 @@\n     PropertyEventPublisher<T>,\n     PropertyStore<T>\n {\n-  private static final Logger           _log =\n-                                                 LoggerFactory.getLogger(ZooKeeperStore.class);\n+  private static final Logger           _log = LoggerFactory.getLogger(ZooKeeperStore.class);\n+\n+  public static final int DEFAULT_READ_WINDOW_MS = -1; //disabled by default", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ5NzI3MQ=="}, "originalCommit": {"oid": "d0587855b73cbf6868a5d3a83674bd1475aa17d9"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Nzc2MTc5OnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/LastSeenBalancerWithFacilitiesFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNDozODo1OVrOGAE2vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMzo1NTowOVrOGCeHMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjczMjczNQ==", "bodyText": "just for my understanding, which config is this executor service coming from? where is it defined?", "url": "https://github.com/linkedin/rest.li/pull/240#discussion_r402732735", "createdAt": "2020-04-03T04:38:59Z", "author": {"login": "bohhyang"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/LastSeenBalancerWithFacilitiesFactory.java", "diffHunk": "@@ -73,15 +75,21 @@ public LoadBalancerWithFacilities create(D2ClientConfig config)\n     }\n \n     // init all the stores\n-    LastSeenZKStore<ClusterProperties> lsClusterStore = getClusterPropertiesLastSeenZKStore(config, zkPersistentConnection, d2ClientJmxManager);\n+    LastSeenZKStore<ClusterProperties> lsClusterStore =\n+      getClusterPropertiesLastSeenZKStore(config, zkPersistentConnection, d2ClientJmxManager,\n+                                          config._executorService, config.zookeeperReadWindowMs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0587855b73cbf6868a5d3a83674bd1475aa17d9"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI0MzY5Ng==", "bodyText": "This is coming from R2SchedulerFactory in container", "url": "https://github.com/linkedin/rest.li/pull/240#discussion_r405243696", "createdAt": "2020-04-08T03:55:09Z", "author": {"login": "nizarm"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/LastSeenBalancerWithFacilitiesFactory.java", "diffHunk": "@@ -73,15 +75,21 @@ public LoadBalancerWithFacilities create(D2ClientConfig config)\n     }\n \n     // init all the stores\n-    LastSeenZKStore<ClusterProperties> lsClusterStore = getClusterPropertiesLastSeenZKStore(config, zkPersistentConnection, d2ClientJmxManager);\n+    LastSeenZKStore<ClusterProperties> lsClusterStore =\n+      getClusterPropertiesLastSeenZKStore(config, zkPersistentConnection, d2ClientJmxManager,\n+                                          config._executorService, config.zookeeperReadWindowMs);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjczMjczNQ=="}, "originalCommit": {"oid": "d0587855b73cbf6868a5d3a83674bd1475aa17d9"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 649, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}