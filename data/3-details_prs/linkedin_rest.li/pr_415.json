{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4ODE0NTgx", "number": 415, "title": "Change D2 call to async in BackupRequestClient", "bodyText": "Background\nRecently we found some corner cases that is causing D2 Zookeeper call taking a long time and eventually exhausted all threads. After doing some investigation, we found there are 2 places that are making blocking calls to Zookeeper:\n\nTimeoutRequestClient\nBackupRequestClient\nWe decided to directly deprecate the usage of TimeoutRequestClient, and change the call to be async in BackupRequestClient.\n\nChanges include\n\nChange the TimeoutRequestClient to be disabled by default (The actual switch is in global config which we will also turn off)\nExposed a config to enable the async call in BackupRequestClient.\nAdded the support to make the Zookeeper call to be async in BackupRequestClient.", "createdAt": "2020-09-17T17:13:05Z", "url": "https://github.com/linkedin/rest.li/pull/415", "merged": true, "mergeCommit": {"oid": "6dfd40abae33273ca6655dae7caab2574a721f37"}, "closed": true, "closedAt": "2020-09-21T18:59:28Z", "author": {"login": "rachelhanhan"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdKBLI6gFqTQ5MTI0ODU4NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLHCRQgH2gAyNDg4ODE0NTgxOmFiZTQwMDE2ZjcwY2ZhY2M5YzA3YjI0MGRjY2RlZjdhMjRhZTgwNGE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMjQ4NTg0", "url": "https://github.com/linkedin/rest.li/pull/415#pullrequestreview-491248584", "createdAt": "2020-09-18T08:18:24Z", "commit": {"oid": "dae98b22b40b3e96eeb3f228b8c71d2422212c42"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODoxODoyNFrOHUC5Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODoxODoyNFrOHUC5Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4MTAyMw==", "bodyText": "This is still calling the sync implementation, right?", "url": "https://github.com/linkedin/rest.li/pull/415#discussion_r490781023", "createdAt": "2020-09-18T08:18:24Z", "author": {"login": "ssheng"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/BackupRequestsClient.java", "diffHunk": "@@ -195,24 +247,65 @@ public void restRequest(final RestRequest request, final RequestContext requestC\n    */\n   private void updateIfNeeded(String serviceName)\n   {\n-    List<Map<String, Object>> existing = _configs.get(serviceName);\n     try\n     {\n       ServiceProperties serviceProperties = _loadBalancer.getLoadBalancedServiceProperties(serviceName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dae98b22b40b3e96eeb3f228b8c71d2422212c42"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNzk1OTg2", "url": "https://github.com/linkedin/rest.li/pull/415#pullrequestreview-491795986", "createdAt": "2020-09-18T21:40:49Z", "commit": {"oid": "dae98b22b40b3e96eeb3f228b8c71d2422212c42"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMTo0MDo1MFrOHUco5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMTo0MTo0MVrOHUcqGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIwMjc5MQ==", "bodyText": "We now have 2 copies of getStrategy (one sync one async) with almost identical functionality. Can we just keep the async one? You can always wait the results if sync operation is needed.\nIf necessary, just keep requestAsync and let request to call into requestAsync.", "url": "https://github.com/linkedin/rest.li/pull/415#discussion_r491202791", "createdAt": "2020-09-18T21:40:50Z", "author": {"login": "cx-super"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/BackupRequestsClient.java", "diffHunk": "@@ -195,24 +247,65 @@ public void restRequest(final RestRequest request, final RequestContext requestC\n    */\n   private void updateIfNeeded(String serviceName)\n   {\n-    List<Map<String, Object>> existing = _configs.get(serviceName);\n     try\n     {\n       ServiceProperties serviceProperties = _loadBalancer.getLoadBalancedServiceProperties(serviceName);\n-      if (serviceProperties != null)\n-      {\n-        if (existing != serviceProperties.getBackupRequests())\n-        { // reference inequality check\n-          update(serviceName, serviceProperties.getBackupRequests());\n-          _configs.put(serviceName, serviceProperties.getBackupRequests());\n-        }\n-      }\n-    } catch (ServiceUnavailableException e)\n+      updateServiceProperties(serviceName, serviceProperties);\n+    }\n+    catch (ServiceUnavailableException e)\n     {\n       LOG.debug(\"Failed to fetch backup requests strategy \", e);\n     }\n   }\n \n+  private void updateServiceProperties(String serviceName, ServiceProperties serviceProperties)\n+  {\n+    List<Map<String, Object>> existing = _configs.get(serviceName);\n+    if (serviceProperties != null)\n+    {\n+      if (existing != serviceProperties.getBackupRequests())\n+      { // reference inequality check\n+        update(serviceName, serviceProperties.getBackupRequests());\n+        _configs.put(serviceName, serviceProperties.getBackupRequests());\n+      }\n+    }\n+  }\n+\n+  void getStrategy(final String serviceName, final String operation, Callback<Optional<TrackingBackupRequestsStrategy>> callback) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dae98b22b40b3e96eeb3f228b8c71d2422212c42"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIwMzA5Nw==", "bodyText": "Ditto -- prefer to have one implementation.", "url": "https://github.com/linkedin/rest.li/pull/415#discussion_r491203097", "createdAt": "2020-09-18T21:41:41Z", "author": {"login": "cx-super"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/BackupRequestsClient.java", "diffHunk": "@@ -195,24 +247,65 @@ public void restRequest(final RestRequest request, final RequestContext requestC\n    */\n   private void updateIfNeeded(String serviceName)\n   {\n-    List<Map<String, Object>> existing = _configs.get(serviceName);\n     try\n     {\n       ServiceProperties serviceProperties = _loadBalancer.getLoadBalancedServiceProperties(serviceName);\n-      if (serviceProperties != null)\n-      {\n-        if (existing != serviceProperties.getBackupRequests())\n-        { // reference inequality check\n-          update(serviceName, serviceProperties.getBackupRequests());\n-          _configs.put(serviceName, serviceProperties.getBackupRequests());\n-        }\n-      }\n-    } catch (ServiceUnavailableException e)\n+      updateServiceProperties(serviceName, serviceProperties);\n+    }\n+    catch (ServiceUnavailableException e)\n     {\n       LOG.debug(\"Failed to fetch backup requests strategy \", e);\n     }\n   }\n \n+  private void updateServiceProperties(String serviceName, ServiceProperties serviceProperties)\n+  {\n+    List<Map<String, Object>> existing = _configs.get(serviceName);\n+    if (serviceProperties != null)\n+    {\n+      if (existing != serviceProperties.getBackupRequests())\n+      { // reference inequality check\n+        update(serviceName, serviceProperties.getBackupRequests());\n+        _configs.put(serviceName, serviceProperties.getBackupRequests());\n+      }\n+    }\n+  }\n+\n+  void getStrategy(final String serviceName, final String operation, Callback<Optional<TrackingBackupRequestsStrategy>> callback) {\n+    Callback<None> updatePropertiesCallback = new Callback<None>() {\n+      @Override\n+      public void onError(Throwable e) {\n+        callback.onError(e);\n+      }\n+\n+      @Override\n+      public void onSuccess(None result) {\n+        callback.onSuccess(getStrategyAfterUpdate(serviceName, operation));\n+      }\n+    };\n+\n+    updateIfNeeded(serviceName, updatePropertiesCallback);\n+  }\n+\n+  private void updateIfNeeded(String serviceName, Callback<None> callback)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dae98b22b40b3e96eeb3f228b8c71d2422212c42"}, "originalPosition": 145}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d74d042d80119d6bbeb213ee8d46b9337856ece", "author": {"user": {"login": "rachelhanhan", "name": "Ruxin Han"}}, "url": "https://github.com/linkedin/rest.li/commit/3d74d042d80119d6bbeb213ee8d46b9337856ece", "committedDate": "2020-09-19T00:10:41Z", "message": "Change D2 call to async in BackupRequestClient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "760deb3230fe1162133259a07b034395172348ef", "author": {"user": {"login": "rachelhanhan", "name": "Ruxin Han"}}, "url": "https://github.com/linkedin/rest.li/commit/760deb3230fe1162133259a07b034395172348ef", "committedDate": "2020-09-19T00:10:41Z", "message": "Remove unnecessary import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab26d55597bd7f2c4eb8661507419293e11d9ec4", "author": {"user": {"login": "rachelhanhan", "name": "Ruxin Han"}}, "url": "https://github.com/linkedin/rest.li/commit/ab26d55597bd7f2c4eb8661507419293e11d9ec4", "committedDate": "2020-09-19T00:13:05Z", "message": "Refactor code for better readability"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dae98b22b40b3e96eeb3f228b8c71d2422212c42", "author": {"user": {"login": "rachelhanhan", "name": "Ruxin Han"}}, "url": "https://github.com/linkedin/rest.li/commit/dae98b22b40b3e96eeb3f228b8c71d2422212c42", "committedDate": "2020-09-17T17:15:39Z", "message": "Remove unnecessary import"}, "afterCommit": {"oid": "ab26d55597bd7f2c4eb8661507419293e11d9ec4", "author": {"user": {"login": "rachelhanhan", "name": "Ruxin Han"}}, "url": "https://github.com/linkedin/rest.li/commit/ab26d55597bd7f2c4eb8661507419293e11d9ec4", "committedDate": "2020-09-19T00:13:05Z", "message": "Refactor code for better readability"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyODM2Nzc3", "url": "https://github.com/linkedin/rest.li/pull/415#pullrequestreview-492836777", "createdAt": "2020-09-21T17:34:42Z", "commit": {"oid": "ab26d55597bd7f2c4eb8661507419293e11d9ec4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abe40016f70cfacc9c07b240dccdef7a24ae804a", "author": {"user": {"login": "rachelhanhan", "name": "Ruxin Han"}}, "url": "https://github.com/linkedin/rest.li/commit/abe40016f70cfacc9c07b240dccdef7a24ae804a", "committedDate": "2020-09-21T17:42:13Z", "message": "Add single retry for a flaky test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4664, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}