{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MzQ5MjE4", "number": 335, "title": "Supply default values in restli response if the return data does not have it", "bodyText": "This is feature controlled by a url parameter \"sendDefault=true\", when it is set, restli will check each field, if the field is missing and a default value can be found on schema, then we will supply the default value in the response data.", "createdAt": "2020-06-20T01:53:41Z", "url": "https://github.com/linkedin/rest.li/pull/335", "merged": true, "mergeCommit": {"oid": "c7ba27dc1048a4e75fd0505c2ca6ed0cb729e681"}, "closed": true, "closedAt": "2020-08-24T16:56:06Z", "author": {"login": "BrianPin"}, "timelineItems": {"totalCount": 56, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABct0XV5ABqjM0Njk0NjkwMDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCEl-bgH2gAyNDM3MzQ5MjE4OjZjMzNjNjJkMGJhODk2YTU4MzQ1OWEwMDBlMWZkMDg4MDQyYmIwMTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "739feee62d2f9a9d34dd22800772125e2c1752a1", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/739feee62d2f9a9d34dd22800772125e2c1752a1", "committedDate": "2020-06-20T01:50:22Z", "message": "Add default values in response when the flag from the url is set"}, "afterCommit": {"oid": "29c278bb6d8e2b9b63019cf0602dcd8db56a9455", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/29c278bb6d8e2b9b63019cf0602dcd8db56a9455", "committedDate": "2020-06-22T17:32:58Z", "message": "Add default values in response when the flag from the url is set"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1Mjc4NTA1", "url": "https://github.com/linkedin/rest.li/pull/335#pullrequestreview-435278505", "createdAt": "2020-06-22T21:13:58Z", "commit": {"oid": "29c278bb6d8e2b9b63019cf0602dcd8db56a9455"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMToxMzo1OFrOGnRO1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMToyMzoxMVrOGnRfuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgyOTk3NA==", "bodyText": "combine these 2 conditions in one statement", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r443829974", "createdAt": "2020-06-22T21:13:58Z", "author": {"login": "aman1309"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +90,20 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  public static void getAbsentFieldsDefaultValues(RecordDataSchema dataSchema, DataMap dataMap)\n+  {\n+    for (RecordDataSchema.Field field : dataSchema.getFields())\n+    {\n+      if (!dataMap.containsKey(field.getName()))\n+      {\n+        if (field.getDefault() != null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29c278bb6d8e2b9b63019cf0602dcd8db56a9455"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgzMTYxNQ==", "bodyText": "can you add integration test for this to test based on query param", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r443831615", "createdAt": "2020-06-22T21:17:22Z", "author": {"login": "aman1309"}, "path": "restli-server/src/test/java/com/linkedin/restli/server/test/TestRestLiDefaultInResponse.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.server.test;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.linkedin.data.DataList;\n+import com.linkedin.data.DataMap;\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.RecordDataSchema;\n+import com.linkedin.data.schema.SchemaFormatType;\n+import com.linkedin.data.schema.SchemaParserFactory;\n+import com.linkedin.data.schema.generator.AbstractGenerator;\n+import com.linkedin.data.schema.resolver.FileDataSchemaResolver;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import com.linkedin.data.template.DataTemplateUtil;\n+import com.linkedin.restli.internal.server.response.ResponseUtils;\n+import java.io.File;\n+import java.io.IOException;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import org.testng.reporters.Files;\n+\n+\n+public class TestRestLiDefaultInResponse", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29c278bb6d8e2b9b63019cf0602dcd8db56a9455"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgzMjkzNQ==", "bodyText": "$sendDefaults, doc was updated to add $ as prefix to not conflict with other fields.\nAlso, can you move it to as constant instead of hard coding here", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r443832935", "createdAt": "2020-06-22T21:20:16Z", "author": {"login": "aman1309"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -97,7 +117,19 @@ public static RestResponse buildResponse(RoutingResult routingResult, RestLiResp\n                                                          .getResourceEntityType();\n     if (restLiResponse.hasData() && ResourceEntityType.STRUCTURED_DATA == resourceEntityType)\n     {\n+      DataSchema dataSchema = null;\n+      Class<? extends RecordTemplate> valueClass = routingResult.getResourceMethod().getResourceModel().getValueClass();\n+      if (valueClass != null)\n+      {\n+        dataSchema = DataTemplateUtil.getSchema(valueClass);\n+      }\n+\n       DataMap dataMap = restLiResponse.getDataMap();\n+      if (context.getParameters().containsKey(\"sendDefaults\") &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29c278bb6d8e2b9b63019cf0602dcd8db56a9455"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgzMzcxOQ==", "bodyText": "move this inside if statement if we have fill defaults", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r443833719", "createdAt": "2020-06-22T21:21:55Z", "author": {"login": "aman1309"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -97,7 +117,19 @@ public static RestResponse buildResponse(RoutingResult routingResult, RestLiResp\n                                                          .getResourceEntityType();\n     if (restLiResponse.hasData() && ResourceEntityType.STRUCTURED_DATA == resourceEntityType)\n     {\n+      DataSchema dataSchema = null;\n+      Class<? extends RecordTemplate> valueClass = routingResult.getResourceMethod().getResourceModel().getValueClass();\n+      if (valueClass != null)\n+      {\n+        dataSchema = DataTemplateUtil.getSchema(valueClass);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29c278bb6d8e2b9b63019cf0602dcd8db56a9455"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgzNDI5OQ==", "bodyText": "as discussed update this logic to fill nested defaults if field value is not null", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r443834299", "createdAt": "2020-06-22T21:23:11Z", "author": {"login": "aman1309"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +90,20 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  public static void getAbsentFieldsDefaultValues(RecordDataSchema dataSchema, DataMap dataMap)\n+  {\n+    for (RecordDataSchema.Field field : dataSchema.getFields())\n+    {\n+      if (!dataMap.containsKey(field.getName()))\n+      {\n+        if (field.getDefault() != null)\n+        {\n+          dataMap.put(field.getName(), field.getDefault());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29c278bb6d8e2b9b63019cf0602dcd8db56a9455"}, "originalPosition": 27}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "29c278bb6d8e2b9b63019cf0602dcd8db56a9455", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/29c278bb6d8e2b9b63019cf0602dcd8db56a9455", "committedDate": "2020-06-22T17:32:58Z", "message": "Add default values in response when the flag from the url is set"}, "afterCommit": {"oid": "bb55c5b526dcc244bcbb2463b41d5de338188168", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/bb55c5b526dcc244bcbb2463b41d5de338188168", "committedDate": "2020-06-22T23:13:34Z", "message": "Add default values in response when the flag from the url is set"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bb55c5b526dcc244bcbb2463b41d5de338188168", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/bb55c5b526dcc244bcbb2463b41d5de338188168", "committedDate": "2020-06-22T23:13:34Z", "message": "Add default values in response when the flag from the url is set"}, "afterCommit": {"oid": "89a6060586011c826a2609468bd2c969f6aa3f35", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/89a6060586011c826a2609468bd2c969f6aa3f35", "committedDate": "2020-06-23T18:10:37Z", "message": "Address Aman's comment about recursive resolve default values for record and fix the query key for this feature"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MDY0NDk3", "url": "https://github.com/linkedin/rest.li/pull/335#pullrequestreview-436064497", "createdAt": "2020-06-23T18:52:26Z", "commit": {"oid": "89a6060586011c826a2609468bd2c969f6aa3f35"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo1MjoyNlrOGn2TxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxOToxMjo1NVrOGn3Ahw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzNzQ0NA==", "bodyText": "+1, you can probably just add extra test cases to existing integration tests", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r444437444", "createdAt": "2020-06-23T18:52:26Z", "author": {"login": "evanw555"}, "path": "restli-server/src/test/java/com/linkedin/restli/server/test/TestRestLiDefaultInResponse.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.server.test;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.linkedin.data.DataList;\n+import com.linkedin.data.DataMap;\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.RecordDataSchema;\n+import com.linkedin.data.schema.SchemaFormatType;\n+import com.linkedin.data.schema.SchemaParserFactory;\n+import com.linkedin.data.schema.generator.AbstractGenerator;\n+import com.linkedin.data.schema.resolver.FileDataSchemaResolver;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import com.linkedin.data.template.DataTemplateUtil;\n+import com.linkedin.restli.internal.server.response.ResponseUtils;\n+import java.io.File;\n+import java.io.IOException;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import org.testng.reporters.Files;\n+\n+\n+public class TestRestLiDefaultInResponse", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgzMTYxNQ=="}, "originalCommit": {"oid": "29c278bb6d8e2b9b63019cf0602dcd8db56a9455"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ0MTMwNQ==", "bodyText": "I'd suggest renaming this to something like fillInDefaultValues, since get... seems to imply it's a side effect-less get accessor. Also add a javadoc since it's a public method (alternatively consider reducing to private/p-private)", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r444441305", "createdAt": "2020-06-23T18:59:17Z", "author": {"login": "evanw555"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +86,30 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  public static void getAbsentFieldsDefaultValues(RecordDataSchema dataSchema, DataMap dataMap)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89a6060586011c826a2609468bd2c969f6aa3f35"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ0MjYzMg==", "bodyText": "+1, logic is only necessary when needed", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r444442632", "createdAt": "2020-06-23T19:01:47Z", "author": {"login": "evanw555"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -97,7 +117,19 @@ public static RestResponse buildResponse(RoutingResult routingResult, RestLiResp\n                                                          .getResourceEntityType();\n     if (restLiResponse.hasData() && ResourceEntityType.STRUCTURED_DATA == resourceEntityType)\n     {\n+      DataSchema dataSchema = null;\n+      Class<? extends RecordTemplate> valueClass = routingResult.getResourceMethod().getResourceModel().getValueClass();\n+      if (valueClass != null)\n+      {\n+        dataSchema = DataTemplateUtil.getSchema(valueClass);\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgzMzcxOQ=="}, "originalCommit": {"oid": "29c278bb6d8e2b9b63019cf0602dcd8db56a9455"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ0MzU0Mw==", "bodyText": "Consider moving this logic to the ResourceContext interface. This is what I did for ResourceContext#isReturnEntityRequested rather than directly looking at the parameters.", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r444443543", "createdAt": "2020-06-23T19:03:25Z", "author": {"login": "evanw555"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -97,7 +123,20 @@ public static RestResponse buildResponse(RoutingResult routingResult, RestLiResp\n                                                          .getResourceEntityType();\n     if (restLiResponse.hasData() && ResourceEntityType.STRUCTURED_DATA == resourceEntityType)\n     {\n+      DataSchema dataSchema = null;\n+      Class<? extends RecordTemplate> valueClass = routingResult.getResourceMethod().getResourceModel().getValueClass();\n+      if (valueClass != null)\n+      {\n+        dataSchema = DataTemplateUtil.getSchema(valueClass);\n+      }\n+\n       DataMap dataMap = restLiResponse.getDataMap();\n+      if (context.getParameters().containsKey(RestConstants.FILL_DEFAULT_VALUE_IN_RESPONSE_PARAM) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89a6060586011c826a2609468bd2c969f6aa3f35"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ0MzY3OA==", "bodyText": "nit: add newline", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r444443678", "createdAt": "2020-06-23T19:03:36Z", "author": {"login": "evanw555"}, "path": "restli-server/src/test/java/com/linkedin/restli/server/test/TestRestLiDefaultInResponse.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89a6060586011c826a2609468bd2c969f6aa3f35"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ0NDYyMg==", "bodyText": "What's the purpose of this change?", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r444444622", "createdAt": "2020-06-23T19:05:25Z", "author": {"login": "evanw555"}, "path": "restli-docgen/src/main/java/com/linkedin/restli/docgen/examplegen/ExampleRequestResponseGenerator.java", "diffHunk": "@@ -1210,7 +1210,7 @@ public FixedTemplatePlaceholder(Object object, FixedDataSchema schema)\n \n   private static ResourceModel buildPlaceholderResourceModel(ResourceSchema resourceSchema)\n   {\n-    return new ResourceModel(RecordTemplatePlaceholder.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89a6060586011c826a2609468bd2c969f6aa3f35"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ0Njk1Ng==", "bodyText": "Move to com.linkedin.restli.internal.server.response to be aligned with the location of ResponseUtils", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r444446956", "createdAt": "2020-06-23T19:09:22Z", "author": {"login": "evanw555"}, "path": "restli-server/src/test/java/com/linkedin/restli/server/test/TestRestLiDefaultInResponse.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.server.test;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89a6060586011c826a2609468bd2c969f6aa3f35"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ0ODA5Nw==", "bodyText": "Consider renaming this to just be TestResponseUtils to be aligned with the class it's testing.", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r444448097", "createdAt": "2020-06-23T19:11:32Z", "author": {"login": "evanw555"}, "path": "restli-server/src/test/java/com/linkedin/restli/server/test/TestRestLiDefaultInResponse.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.server.test;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.linkedin.data.DataList;\n+import com.linkedin.data.DataMap;\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.RecordDataSchema;\n+import com.linkedin.data.schema.SchemaFormatType;\n+import com.linkedin.data.schema.SchemaParserFactory;\n+import com.linkedin.data.schema.generator.AbstractGenerator;\n+import com.linkedin.data.schema.resolver.FileDataSchemaResolver;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import com.linkedin.data.template.DataTemplateUtil;\n+import com.linkedin.restli.internal.server.response.ResponseUtils;\n+import java.io.File;\n+import java.io.IOException;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import org.testng.reporters.Files;\n+\n+\n+public class TestRestLiDefaultInResponse", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89a6060586011c826a2609468bd2c969f6aa3f35"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ0ODMzNw==", "bodyText": "Consider renaming this to TestGetAbsentFieldsDefaultValues to be aligned with the method it's testing. If you rename that method, rename this test accordingly.", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r444448337", "createdAt": "2020-06-23T19:12:03Z", "author": {"login": "evanw555"}, "path": "restli-server/src/test/java/com/linkedin/restli/server/test/TestRestLiDefaultInResponse.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.server.test;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.linkedin.data.DataList;\n+import com.linkedin.data.DataMap;\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.RecordDataSchema;\n+import com.linkedin.data.schema.SchemaFormatType;\n+import com.linkedin.data.schema.SchemaParserFactory;\n+import com.linkedin.data.schema.generator.AbstractGenerator;\n+import com.linkedin.data.schema.resolver.FileDataSchemaResolver;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import com.linkedin.data.template.DataTemplateUtil;\n+import com.linkedin.restli.internal.server.response.ResponseUtils;\n+import java.io.File;\n+import java.io.IOException;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import org.testng.reporters.Files;\n+\n+\n+public class TestRestLiDefaultInResponse\n+{\n+  final static String FS = File.separator;\n+  final static String testDir = System.getProperty(\"testDir\", new File(\"src/test\").getAbsolutePath());\n+  final static String pegasusDir = testDir + FS + \"pegasus\" + FS + \"com\" + FS + \"linkedin\" + FS + \"restli\" + FS + \"server\" + FS + \"defaults\";\n+  final static String resolverDir = testDir + FS + \"pegasus\";\n+\n+  @BeforeTest\n+  public void beforeTest()\n+  {\n+    System.setProperty(AbstractGenerator.GENERATOR_RESOLVER_PATH, resolverDir);\n+  }\n+\n+  @DataProvider(name = \"default_serialization\")\n+  public Object[][] schemaFilesForDefaultSerializationTest()\n+  {\n+    DataList recordBField1 = new DataList(1);\n+    recordBField1.add(-1);\n+\n+    DataMap recordBField2 = new DataMap();\n+    DataList recordBField2DefaultValues = new DataList(2);\n+    recordBField2DefaultValues.add(\"defaultValue1\");\n+    recordBField2DefaultValues.add(\"defaultValue2\");\n+    recordBField2.put(\"defaultKey\", recordBField2DefaultValues);\n+    DataMap personalRecordD = new DataMap();\n+    personalRecordD.put(\"field3\", 0L);\n+    personalRecordD.put(\"field4\", \"default\");\n+\n+    return new Object[][]{\n+        {\n+            \"RecordA.pdl\",\n+            new DataMap(new ImmutableMap.Builder<String, Object>()\n+                .put(\"field1\", 1)\n+                .put(\"field2\", \"2\")\n+                .build()),\n+            new DataMap(new ImmutableMap.Builder<String, Object>()\n+                .put(\"field1\", 1)\n+                .put(\"field2\", \"2\")\n+                .put(\"field3\", 0L)\n+                .put(\"field4\", \"default\")\n+                .build())\n+        },\n+        {\n+            \"RecordB.pdl\",\n+            new DataMap(new ImmutableMap.Builder<String, Object>()\n+                .build()),\n+            new DataMap(new ImmutableMap.Builder<String, Object>()\n+                .put(\"field1\", recordBField1)\n+                .put(\"field2\", recordBField2)\n+                .build())\n+        },\n+        {\n+            \"RecordC.pdl\",\n+            new DataMap(),\n+            new DataMap(new ImmutableMap.Builder<String, Object>()\n+                .put(\"name\", \"default+\")\n+                .put(\"personalRecordD\", personalRecordD)\n+                .build()),\n+        }\n+    };\n+  }\n+\n+  @Test(dataProvider = \"default_serialization\")\n+  public void testSerializingDefaultValue(String filename, DataMap data, DataMap expected)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89a6060586011c826a2609468bd2c969f6aa3f35"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ0ODkwMw==", "bodyText": "RecordD is a duplicate of RecordA. Wouldn't it be simpler to have RecordC just contain a reference to RecordA?", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r444448903", "createdAt": "2020-06-23T19:12:55Z", "author": {"login": "evanw555"}, "path": "restli-server/src/test/pegasus/com/linkedin/restli/server/defaults/RecordD.pdl", "diffHunk": "@@ -0,0 +1,8 @@\n+namespace com.linkedin.restli.server.defaults", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89a6060586011c826a2609468bd2c969f6aa3f35"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MjAxOTUx", "url": "https://github.com/linkedin/rest.li/pull/335#pullrequestreview-436201951", "createdAt": "2020-06-23T22:24:58Z", "commit": {"oid": "89a6060586011c826a2609468bd2c969f6aa3f35"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMjoyNDo1OFrOGn8swg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMjoyNDo1OFrOGn8swg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU0MjE0Ng==", "bodyText": "test this for typerefs", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r444542146", "createdAt": "2020-06-23T22:24:58Z", "author": {"login": "aman1309"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +86,30 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  public static void getAbsentFieldsDefaultValues(RecordDataSchema dataSchema, DataMap dataMap)\n+  {\n+    for (RecordDataSchema.Field field : dataSchema.getFields())\n+    {\n+      if (!dataMap.containsKey(field.getName()))\n+      {\n+        if (field.getDefault() != null)\n+        {\n+          dataMap.put(field.getName(), field.getDefault());\n+        }\n+        else\n+        {\n+          DataSchema fieldSchema = field.getType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89a6060586011c826a2609468bd2c969f6aa3f35"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDA0MTA3", "url": "https://github.com/linkedin/rest.li/pull/335#pullrequestreview-437004107", "createdAt": "2020-06-24T21:02:01Z", "commit": {"oid": "89a6060586011c826a2609468bd2c969f6aa3f35"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMTowMjowMVrOGojAlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMTowMjowMVrOGojAlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2OTgxMg==", "bodyText": "I don't think this is a good idea. Using a random record type like ResourceSchema is misleading and made me believe that this logic is inherently related to resource schemas. I'd suggest you do one of two things:\n\nBe explicit about using a dummy record by using something like EmptyRecord.\nFix the issue in RecordTemplatePlaceholder, this is an easy fix, since you can just define the schema as new RecordDataSchema(new Name(RecordTemplatePlaceholder.class.getCanonicalName()), RecordDataSchema.RecordType.RECORD).", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r445169812", "createdAt": "2020-06-24T21:02:01Z", "author": {"login": "evanw555"}, "path": "restli-docgen/src/main/java/com/linkedin/restli/docgen/examplegen/ExampleRequestResponseGenerator.java", "diffHunk": "@@ -1210,7 +1210,7 @@ public FixedTemplatePlaceholder(Object object, FixedDataSchema schema)\n \n   private static ResourceModel buildPlaceholderResourceModel(ResourceSchema resourceSchema)\n   {\n-    return new ResourceModel(RecordTemplatePlaceholder.class,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ0NDYyMg=="}, "originalCommit": {"oid": "89a6060586011c826a2609468bd2c969f6aa3f35"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "89a6060586011c826a2609468bd2c969f6aa3f35", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/89a6060586011c826a2609468bd2c969f6aa3f35", "committedDate": "2020-06-23T18:10:37Z", "message": "Address Aman's comment about recursive resolve default values for record and fix the query key for this feature"}, "afterCommit": {"oid": "49197c74db32fdb4f4e839e88e7a81eb0ae8e383", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/49197c74db32fdb4f4e839e88e7a81eb0ae8e383", "committedDate": "2020-06-25T23:26:15Z", "message": "Address comment: integration test and recursive resolve and typeref test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MTEzMzkw", "url": "https://github.com/linkedin/rest.li/pull/335#pullrequestreview-438113390", "createdAt": "2020-06-26T08:34:48Z", "commit": {"oid": "89a6060586011c826a2609468bd2c969f6aa3f35"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODozNTo0OVrOGpYjqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODo0ODo1NlrOGpY9cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA0NzE0NA==", "bodyText": "You need to handle the else part for this.", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r446047144", "createdAt": "2020-06-26T08:35:49Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +90,51 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  /**\n+   * This function will look at the dataSchema to see missing fields in the dataMap.\n+   * If the missing field is provided with default values, this function will populate the dataMap\n+   * with the key and the default value. If the missing field is not primitive (meaning itself is a\n+   * RecordDataSchema) then this function will recursively to fill default values of that field as a record.\n+   * This feature is controlled by:\n+   * Client: add this query parameter in the URL: $sendDefaults=true\n+   * Server: put true to RestLiConfig::isResponseSendDefaultValues\n+   * The feature is controlled\n+   * @param dataSchema a RecordDataSchema that matches the dataMap\n+   * @param dataMap the actual data of the argument dataSchema\n+   */\n+  public static void fillInDefaultValues(DataSchema dataSchema, DataMap dataMap)\n+  {\n+    if (dataSchema instanceof TyperefDataSchema)\n+    {\n+      TyperefDataSchema typerefDataSchema = (TyperefDataSchema) dataSchema;\n+      fillInDefaultValues(typerefDataSchema.getDereferencedDataSchema(), dataMap);\n+    }\n+    else if (dataSchema instanceof RecordDataSchema)\n+    {\n+      RecordDataSchema recordDataSchema = (RecordDataSchema) dataSchema;\n+      for (RecordDataSchema.Field field : recordDataSchema.getFields())\n+      {\n+        if (!dataMap.containsKey(field.getName()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49197c74db32fdb4f4e839e88e7a81eb0ae8e383"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA1Mzc0NA==", "bodyText": "This is not needed. You need to traverse the nested schemas only if the value is present at the top-level.\nConsider this:\nrecord Foo {\n  f1: int = 5\n  f2: optional int\n }\n\nrecord Bar {\n   b1: Foo = { f2: 10 }\n   b2: optional Foo\n   b3: Foo\n}\n\n\nSo the scenarios are (top-level is Bar):\n1.\n{\n  b1: {\n    f1: 1\n  },\n  b2: {}\n}\n\n\nOutput with defaults filled in should be:\n{\n  b1: {\n    f1: 1\n  },\n   b2: {\n    f1: 5,     // Filled using default value in Foo\n  }\n}\n\n\nb3 is not present in the input data and so shouldn't be filled in.\n\n\n\n{\n  b3: {\n    f2: 1\n  }\n}\n\n\nOutput with defaults filled in should be:\n{\n b1: {.         // Filled because of default value in Bar\n   f1: 5,        // Filled using default value in Foo\n    f2: 10     // Filled using default value in Bar\n  },\n  b3: {\n    f1: 5,     // Filled using default value in Foo\n    f2: 1\n  }\n}\n\n\nBasically, fill in the defaults for fields only if the record is present or record is filled in using a default. Do not create a record only because a nested field specifies default value.", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r446053744", "createdAt": "2020-06-26T08:48:56Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +90,51 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  /**\n+   * This function will look at the dataSchema to see missing fields in the dataMap.\n+   * If the missing field is provided with default values, this function will populate the dataMap\n+   * with the key and the default value. If the missing field is not primitive (meaning itself is a\n+   * RecordDataSchema) then this function will recursively to fill default values of that field as a record.\n+   * This feature is controlled by:\n+   * Client: add this query parameter in the URL: $sendDefaults=true\n+   * Server: put true to RestLiConfig::isResponseSendDefaultValues\n+   * The feature is controlled\n+   * @param dataSchema a RecordDataSchema that matches the dataMap\n+   * @param dataMap the actual data of the argument dataSchema\n+   */\n+  public static void fillInDefaultValues(DataSchema dataSchema, DataMap dataMap)\n+  {\n+    if (dataSchema instanceof TyperefDataSchema)\n+    {\n+      TyperefDataSchema typerefDataSchema = (TyperefDataSchema) dataSchema;\n+      fillInDefaultValues(typerefDataSchema.getDereferencedDataSchema(), dataMap);\n+    }\n+    else if (dataSchema instanceof RecordDataSchema)\n+    {\n+      RecordDataSchema recordDataSchema = (RecordDataSchema) dataSchema;\n+      for (RecordDataSchema.Field field : recordDataSchema.getFields())\n+      {\n+        if (!dataMap.containsKey(field.getName()))\n+        {\n+          if (field.getDefault() != null)\n+          {\n+            dataMap.put(field.getName(), field.getDefault());\n+          }\n+          else\n+          {\n+            DataSchema fieldSchema = field.getType();\n+            if (fieldSchema instanceof RecordDataSchema)\n+            {\n+              DataMap fieldDataMap = new DataMap();\n+              fillInDefaultValues(fieldSchema, fieldDataMap);\n+              dataMap.put(field.getName(), fieldDataMap);\n+            }\n+          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49197c74db32fdb4f4e839e88e7a81eb0ae8e383"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5ODE5MjUx", "url": "https://github.com/linkedin/rest.li/pull/335#pullrequestreview-439819251", "createdAt": "2020-06-30T09:06:38Z", "commit": {"oid": "1c6cb1b990f07b29190506fb1fb283d7e22a533c"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOTowNjozOFrOGqzHZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOToyMDoyMVrOGqzpgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUzMDg1NA==", "bodyText": "If you change this to a create with return entity, then you can controll the data being returned (by sending it for create) and thus can test multiple scenarios", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r447530854", "createdAt": "2020-06-30T09:06:38Z", "author": {"login": "karthikbalasub"}, "path": "restli-int-test-server/src/main/java/com/linkedin/restli/examples/greetings/server/defaults/FieldFillInDefaultResources.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.linkedin.restli.examples.greetings.server.defaults;\n+\n+import com.linkedin.restli.examples.defaults.api.HighLevelRecordWithDefault;\n+import com.linkedin.restli.server.annotations.RestLiCollection;\n+import com.linkedin.restli.server.resources.CollectionResourceTemplate;\n+\n+\n+@RestLiCollection(name = \"fillInDefaults\", namespace = \"com.linkedin.restli.examples.defaults.api\")\n+public class FieldFillInDefaultResources extends CollectionResourceTemplate<Long, HighLevelRecordWithDefault>\n+{\n+  @Override\n+  public HighLevelRecordWithDefault get(Long keyId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6cb1b990f07b29190506fb1fb283d7e22a533c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUzMTUyMg==", "bodyText": "Complete the doc, I think it would be useful to provide the pseudo code you had in the doc.", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r447531522", "createdAt": "2020-06-30T09:07:42Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +91,90 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  /**\n+   *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6cb1b990f07b29190506fb1fb283d7e22a533c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUzMTgzMQ==", "bodyText": "Why do you need to copy?", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r447531831", "createdAt": "2020-06-30T09:08:11Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +91,90 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  /**\n+   *\n+   * @param dataSchema\n+   * @param dataMap\n+   * @return a new different data map that contains original data plus the default values\n+   */\n+  public static DataMap fillInDefaultValues(DataSchema dataSchema, DataMap dataMap)\n+  {\n+    DataMap dataDefaultFilled = new DataMap();\n+    if (dataMap != null)\n+    {\n+      dataDefaultFilled.putAll(dataMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6cb1b990f07b29190506fb1fb283d7e22a533c"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUzMzY3MA==", "bodyText": "redundant as the containsKey check above ensures the value wouldn't be null", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r447533670", "createdAt": "2020-06-30T09:11:01Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +91,90 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  /**\n+   *\n+   * @param dataSchema\n+   * @param dataMap\n+   * @return a new different data map that contains original data plus the default values\n+   */\n+  public static DataMap fillInDefaultValues(DataSchema dataSchema, DataMap dataMap)\n+  {\n+    DataMap dataDefaultFilled = new DataMap();\n+    if (dataMap != null)\n+    {\n+      dataDefaultFilled.putAll(dataMap);\n+    }\n+\n+    if (dataSchema instanceof TyperefDataSchema)\n+    {\n+      TyperefDataSchema typerefDataSchema = (TyperefDataSchema) dataSchema;\n+      return fillInDefaultValues(typerefDataSchema.getDereferencedDataSchema(), dataDefaultFilled);\n+    }\n+    else if (dataSchema instanceof RecordDataSchema)\n+    {\n+      RecordDataSchema recordDataSchema = (RecordDataSchema) dataSchema;\n+      for (RecordDataSchema.Field field : recordDataSchema.getFields())\n+      {\n+        DataSchema fieldSchema = field.getType();\n+        if (fieldSchema instanceof RecordDataSchema)\n+        {\n+          if (dataDefaultFilled.containsKey(field.getName()))\n+          {\n+            DataMap fieldDefault = (DataMap) field.getDefault();\n+            DataMap fieldDataAssigned = (DataMap) dataDefaultFilled.get(field.getName());\n+            if (fieldDataAssigned != null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6cb1b990f07b29190506fb1fb283d7e22a533c"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUzMzg4OQ==", "bodyText": "redundant as you are updating the field value inplace", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r447533889", "createdAt": "2020-06-30T09:11:20Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +91,90 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  /**\n+   *\n+   * @param dataSchema\n+   * @param dataMap\n+   * @return a new different data map that contains original data plus the default values\n+   */\n+  public static DataMap fillInDefaultValues(DataSchema dataSchema, DataMap dataMap)\n+  {\n+    DataMap dataDefaultFilled = new DataMap();\n+    if (dataMap != null)\n+    {\n+      dataDefaultFilled.putAll(dataMap);\n+    }\n+\n+    if (dataSchema instanceof TyperefDataSchema)\n+    {\n+      TyperefDataSchema typerefDataSchema = (TyperefDataSchema) dataSchema;\n+      return fillInDefaultValues(typerefDataSchema.getDereferencedDataSchema(), dataDefaultFilled);\n+    }\n+    else if (dataSchema instanceof RecordDataSchema)\n+    {\n+      RecordDataSchema recordDataSchema = (RecordDataSchema) dataSchema;\n+      for (RecordDataSchema.Field field : recordDataSchema.getFields())\n+      {\n+        DataSchema fieldSchema = field.getType();\n+        if (fieldSchema instanceof RecordDataSchema)\n+        {\n+          if (dataDefaultFilled.containsKey(field.getName()))\n+          {\n+            DataMap fieldDefault = (DataMap) field.getDefault();\n+            DataMap fieldDataAssigned = (DataMap) dataDefaultFilled.get(field.getName());\n+            if (fieldDataAssigned != null)\n+            {\n+              DataMap fieldFilled = fillInDefaultValues(fieldSchema, fieldDataAssigned);\n+              dataDefaultFilled.put(field.getName(), fieldFilled);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6cb1b990f07b29190506fb1fb283d7e22a533c"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUzNDE4Mg==", "bodyText": "Non reachable code block", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r447534182", "createdAt": "2020-06-30T09:11:47Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +91,90 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  /**\n+   *\n+   * @param dataSchema\n+   * @param dataMap\n+   * @return a new different data map that contains original data plus the default values\n+   */\n+  public static DataMap fillInDefaultValues(DataSchema dataSchema, DataMap dataMap)\n+  {\n+    DataMap dataDefaultFilled = new DataMap();\n+    if (dataMap != null)\n+    {\n+      dataDefaultFilled.putAll(dataMap);\n+    }\n+\n+    if (dataSchema instanceof TyperefDataSchema)\n+    {\n+      TyperefDataSchema typerefDataSchema = (TyperefDataSchema) dataSchema;\n+      return fillInDefaultValues(typerefDataSchema.getDereferencedDataSchema(), dataDefaultFilled);\n+    }\n+    else if (dataSchema instanceof RecordDataSchema)\n+    {\n+      RecordDataSchema recordDataSchema = (RecordDataSchema) dataSchema;\n+      for (RecordDataSchema.Field field : recordDataSchema.getFields())\n+      {\n+        DataSchema fieldSchema = field.getType();\n+        if (fieldSchema instanceof RecordDataSchema)\n+        {\n+          if (dataDefaultFilled.containsKey(field.getName()))\n+          {\n+            DataMap fieldDefault = (DataMap) field.getDefault();\n+            DataMap fieldDataAssigned = (DataMap) dataDefaultFilled.get(field.getName());\n+            if (fieldDataAssigned != null)\n+            {\n+              DataMap fieldFilled = fillInDefaultValues(fieldSchema, fieldDataAssigned);\n+              dataDefaultFilled.put(field.getName(), fieldFilled);\n+            }\n+            else if (fieldDefault != null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6cb1b990f07b29190506fb1fb283d7e22a533c"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUzNTIyOQ==", "bodyText": "Why duplicate the logic for checking Record/Typeref again? Why not just make a recursive call for each field?", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r447535229", "createdAt": "2020-06-30T09:13:27Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +91,90 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  /**\n+   *\n+   * @param dataSchema\n+   * @param dataMap\n+   * @return a new different data map that contains original data plus the default values\n+   */\n+  public static DataMap fillInDefaultValues(DataSchema dataSchema, DataMap dataMap)\n+  {\n+    DataMap dataDefaultFilled = new DataMap();\n+    if (dataMap != null)\n+    {\n+      dataDefaultFilled.putAll(dataMap);\n+    }\n+\n+    if (dataSchema instanceof TyperefDataSchema)\n+    {\n+      TyperefDataSchema typerefDataSchema = (TyperefDataSchema) dataSchema;\n+      return fillInDefaultValues(typerefDataSchema.getDereferencedDataSchema(), dataDefaultFilled);\n+    }\n+    else if (dataSchema instanceof RecordDataSchema)\n+    {\n+      RecordDataSchema recordDataSchema = (RecordDataSchema) dataSchema;\n+      for (RecordDataSchema.Field field : recordDataSchema.getFields())\n+      {\n+        DataSchema fieldSchema = field.getType();\n+        if (fieldSchema instanceof RecordDataSchema)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6cb1b990f07b29190506fb1fb283d7e22a533c"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUzOTU4NQ==", "bodyText": "I'm don't think this would work for batch, finder or action methods. Can you add test coverage for these?\nCheck the restli validator on response method to understand different response structures. I feel it might be easier to add the fill default logic in ResponseBuilders", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r447539585", "createdAt": "2020-06-30T09:20:21Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -98,6 +189,15 @@ public static RestResponse buildResponse(RoutingResult routingResult, RestLiResp\n     if (restLiResponse.hasData() && ResourceEntityType.STRUCTURED_DATA == resourceEntityType)\n     {\n       DataMap dataMap = restLiResponse.getDataMap();\n+      if (context.isDefaultValueFillInRequested())\n+      {\n+        Class<? extends RecordTemplate> valueClass = routingResult.getResourceMethod().getResourceModel().getValueClass();\n+        if (valueClass != null)\n+        {\n+          DataSchema dataSchema = DataTemplateUtil.getSchema(valueClass);\n+          dataMap = fillInDefaultValues(dataSchema, dataMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6cb1b990f07b29190506fb1fb283d7e22a533c"}, "originalPosition": 144}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMzM2ODIx", "url": "https://github.com/linkedin/rest.li/pull/335#pullrequestreview-440336821", "createdAt": "2020-06-30T19:52:12Z", "commit": {"oid": "1c6cb1b990f07b29190506fb1fb283d7e22a533c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOTo1MjoxM1rOGrMG3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOTo1NToyMVrOGrMNaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0MDMxNw==", "bodyText": "I'd suggest renaming this to be consistent with the terminology used elsewhere in this PR. String FILL_DEFAULTS_PARAM = \"$fillDefaults\"; or String FILL_IN_DEFAULTS_PARAM = \"$fillInDefaults\"", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r447940317", "createdAt": "2020-06-30T19:52:13Z", "author": {"login": "evanw555"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/RestConstants.java", "diffHunk": "@@ -77,6 +77,7 @@\n   String QUERY_BATCH_IDS_PARAM = \"ids\";\n   String FIELDS_PARAM = \"fields\";\n   String ALT_KEY_PARAM = \"altkey\";\n+  String FILL_DEFAULT_VALUE_IN_RESPONSE_PARAM = \"$sendDefaults\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6cb1b990f07b29190506fb1fb283d7e22a533c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0MTk5Mg==", "bodyText": "This is a mouthful. I'd suggest renaming to isFillDefaultsRequested or isFillInDefaultsRequested", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r447941992", "createdAt": "2020-06-30T19:55:21Z", "author": {"login": "evanw555"}, "path": "restli-server/src/main/java/com/linkedin/restli/server/ResourceContext.java", "diffHunk": "@@ -220,4 +220,15 @@\n    * @return whether the request specifies that the resource should return an entity\n    */\n   boolean isReturnEntityRequested();\n-}\n\\ No newline at end of file\n+\n+  /**\n+   * This is to determine whether the service will fill in default values when the returned value record has some missing\n+   * field. In case:\n+   * 1. the client is requesting that the default value to be returned. Reads the appropriate\n+   * query parameter to determine this information, defaults to false if the query parameter isn't present.\n+   * 2. the server is configured to return default value for every request-response pair\n+   * @return true if the service need to fill in default value when the field of the return value record is absent\n+   */\n+  boolean isDefaultValueFillInRequested();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6cb1b990f07b29190506fb1fb283d7e22a533c"}, "originalPosition": 15}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1c6cb1b990f07b29190506fb1fb283d7e22a533c", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/1c6cb1b990f07b29190506fb1fb283d7e22a533c", "committedDate": "2020-06-30T07:20:48Z", "message": "address Evan's comment regarding placeholder class in test"}, "afterCommit": {"oid": "bc7fb8498fbed875417ca1926bb6bdc3560c144d", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/bc7fb8498fbed875417ca1926bb6bdc3560c144d", "committedDate": "2020-07-02T21:13:09Z", "message": "address Karthiks comment about right place to fill in default, also review the logic of filling defaults"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MzE0Nzk2", "url": "https://github.com/linkedin/rest.li/pull/335#pullrequestreview-448314796", "createdAt": "2020-07-14T17:27:16Z", "commit": {"oid": "9b36076077498e9ee0b42bc932ff470bc4ddb71f"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzoyNzoxNlrOGxdzBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMDoxNDo0M1rOGxjntA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUyMTYwNg==", "bodyText": "Suggest changing the param to $fillInDefaults to be consistent", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r454521606", "createdAt": "2020-07-14T17:27:16Z", "author": {"login": "karthikbalasub"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/RestConstants.java", "diffHunk": "@@ -77,6 +77,7 @@\n   String QUERY_BATCH_IDS_PARAM = \"ids\";\n   String FIELDS_PARAM = \"fields\";\n   String ALT_KEY_PARAM = \"altkey\";\n+  String FILL_IN_DEFAULTS_PARAM = \"$sendDefaults\";\n   String METADATA_FIELDS_PARAM = \"metadataFields\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b36076077498e9ee0b42bc932ff470bc4ddb71f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUyMjI2MQ==", "bodyText": "Though this finder is used only for testing, I prefer the methods to follow convention.\ntotalCount shouldn't be a query parameter, you should use the paging context \"count\" param for this. https://linkedin.github.io/rest.li/user_guide/restli_server#finder\nYou can add a query parameter for a field, eg noDefaultFieldA and return dummy records with that field filled in to match the query param.\nAlso rename the finder method to noDefaultFieldA to follow convention", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r454522261", "createdAt": "2020-07-14T17:28:15Z", "author": {"login": "karthikbalasub"}, "path": "restli-int-test-api/src/main/idl/com.linkedin.restli.examples.defaults.api.fillInDefaults.restspec.json", "diffHunk": "@@ -0,0 +1,51 @@\n+{\n+  \"name\" : \"fillInDefaults\",\n+  \"namespace\" : \"com.linkedin.restli.examples.defaults.api\",\n+  \"path\" : \"/fillInDefaults\",\n+  \"schema\" : \"com.linkedin.restli.examples.defaults.api.HighLevelRecordWithDefault\",\n+  \"doc\" : \"generated from: com.linkedin.restli.examples.greetings.server.defaults.FieldFillInDefaultResources\",\n+  \"collection\" : {\n+    \"identifier\" : {\n+      \"name\" : \"fillInDefaultsId\",\n+      \"type\" : \"long\"\n+    },\n+    \"supports\" : [ \"batch_get\", \"get\", \"get_all\" ],\n+    \"methods\" : [ {\n+      \"method\" : \"get\"\n+    }, {\n+      \"method\" : \"batch_get\"\n+    }, {\n+      \"method\" : \"get_all\",\n+      \"pagingSupported\" : true\n+    } ],\n+    \"finders\" : [ {\n+      \"name\" : \"HighLevelRecord\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b36076077498e9ee0b42bc932ff470bc4ddb71f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU4MDQwNQ==", "bodyText": "nit: remove the extra comma", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r454580405", "createdAt": "2020-07-14T19:07:00Z", "author": {"login": "karthikbalasub"}, "path": "restli-int-test/src/test/java/com/linkedin/restli/examples/TestFillInDefaultValue.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.examples;\n+\n+import com.linkedin.data.DataMap;\n+import com.linkedin.r2.RemoteInvocationException;\n+import com.linkedin.restli.client.ActionRequest;\n+import com.linkedin.restli.client.BatchFindRequest;\n+import com.linkedin.restli.client.BatchGetEntityRequest;\n+import com.linkedin.restli.client.FindRequest;\n+import com.linkedin.restli.client.GetAllRequest;\n+import com.linkedin.restli.client.GetRequest;\n+import com.linkedin.restli.client.response.BatchKVResponse;\n+import com.linkedin.restli.common.BatchFinderCriteriaResult;\n+import com.linkedin.restli.common.EntityResponse;\n+import com.linkedin.restli.common.RestConstants;\n+import com.linkedin.restli.examples.defaults.api.FillInDefaultsGetRequestBuilder;\n+import com.linkedin.restli.examples.defaults.api.FillInDefaultsRequestBuilders;\n+import com.linkedin.restli.examples.defaults.api.HighLevelRecordWithDefault;\n+import com.linkedin.restli.examples.defaults.api.RecordCriteria;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+/**\n+ *\n+ * @author Brian Pin\n+ */\n+public class TestFillInDefaultValue  extends RestLiIntegrationTest\n+{\n+  private DataMap expectedTestData;\n+\n+  @BeforeClass\n+  public void initClass() throws Exception\n+  {\n+    super.init(Collections.emptyList());\n+    expectedTestData = new DataMap();\n+    expectedTestData.put(\"intDefaultFieldB\", -1);\n+    DataMap case1MidLevelRecordWithDefault = new DataMap();\n+    case1MidLevelRecordWithDefault.put(\"intWithDefault\", 0);\n+    case1MidLevelRecordWithDefault.put(\"intWithoutDefault\", 0);\n+    DataMap case1LowLevelRecordWithDefault = new DataMap();\n+    case1LowLevelRecordWithDefault.put(\"nameWithDefault\", \"a\");\n+    case1LowLevelRecordWithDefault.put(\"nameWithoutDefault\", \"b\");\n+    case1MidLevelRecordWithDefault.put(\"lowLevelRecordWithDefault\", case1LowLevelRecordWithDefault);\n+    expectedTestData.put(\"midLevelRecordWithDefault\", case1MidLevelRecordWithDefault);\n+  }\n+\n+  @AfterClass\n+  public void shutDown() throws Exception\n+  {\n+    super.shutdown();\n+  }\n+\n+  @DataProvider(name = \"testGetData\")\n+  private Object[][] testGetData() throws CloneNotSupportedException\n+  {\n+    HighLevelRecordWithDefault expected = new HighLevelRecordWithDefault(expectedTestData.clone()).setNoDefaultFieldA(1);\n+    return new Object[][] {{1L, expected},};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b36076077498e9ee0b42bc932ff470bc4ddb71f"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU4MTE1NA==", "bodyText": "I suggest you test both scenarios: with fillInDefaults flag and without it.\nYou don't have to do it for all methods, just doing that for GET should be enough. For other methods, test only with fillInDefaults flag.", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r454581154", "createdAt": "2020-07-14T19:08:13Z", "author": {"login": "karthikbalasub"}, "path": "restli-int-test/src/test/java/com/linkedin/restli/examples/TestFillInDefaultValue.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.examples;\n+\n+import com.linkedin.data.DataMap;\n+import com.linkedin.r2.RemoteInvocationException;\n+import com.linkedin.restli.client.ActionRequest;\n+import com.linkedin.restli.client.BatchFindRequest;\n+import com.linkedin.restli.client.BatchGetEntityRequest;\n+import com.linkedin.restli.client.FindRequest;\n+import com.linkedin.restli.client.GetAllRequest;\n+import com.linkedin.restli.client.GetRequest;\n+import com.linkedin.restli.client.response.BatchKVResponse;\n+import com.linkedin.restli.common.BatchFinderCriteriaResult;\n+import com.linkedin.restli.common.EntityResponse;\n+import com.linkedin.restli.common.RestConstants;\n+import com.linkedin.restli.examples.defaults.api.FillInDefaultsGetRequestBuilder;\n+import com.linkedin.restli.examples.defaults.api.FillInDefaultsRequestBuilders;\n+import com.linkedin.restli.examples.defaults.api.HighLevelRecordWithDefault;\n+import com.linkedin.restli.examples.defaults.api.RecordCriteria;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+/**\n+ *\n+ * @author Brian Pin\n+ */\n+public class TestFillInDefaultValue  extends RestLiIntegrationTest\n+{\n+  private DataMap expectedTestData;\n+\n+  @BeforeClass\n+  public void initClass() throws Exception\n+  {\n+    super.init(Collections.emptyList());\n+    expectedTestData = new DataMap();\n+    expectedTestData.put(\"intDefaultFieldB\", -1);\n+    DataMap case1MidLevelRecordWithDefault = new DataMap();\n+    case1MidLevelRecordWithDefault.put(\"intWithDefault\", 0);\n+    case1MidLevelRecordWithDefault.put(\"intWithoutDefault\", 0);\n+    DataMap case1LowLevelRecordWithDefault = new DataMap();\n+    case1LowLevelRecordWithDefault.put(\"nameWithDefault\", \"a\");\n+    case1LowLevelRecordWithDefault.put(\"nameWithoutDefault\", \"b\");\n+    case1MidLevelRecordWithDefault.put(\"lowLevelRecordWithDefault\", case1LowLevelRecordWithDefault);\n+    expectedTestData.put(\"midLevelRecordWithDefault\", case1MidLevelRecordWithDefault);\n+  }\n+\n+  @AfterClass\n+  public void shutDown() throws Exception\n+  {\n+    super.shutdown();\n+  }\n+\n+  @DataProvider(name = \"testGetData\")\n+  private Object[][] testGetData() throws CloneNotSupportedException\n+  {\n+    HighLevelRecordWithDefault expected = new HighLevelRecordWithDefault(expectedTestData.clone()).setNoDefaultFieldA(1);\n+    return new Object[][] {{1L, expected},};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b36076077498e9ee0b42bc932ff470bc4ddb71f"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU4MzYzMw==", "bodyText": "remove", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r454583633", "createdAt": "2020-07-14T19:12:49Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ActionResponseBuilder.java", "diffHunk": "@@ -85,12 +87,40 @@ public RestLiResponse buildResponse(RoutingResult routingResult,\n       status = HttpStatus.S_200_OK;\n     }\n     RecordDataSchema actionReturnRecordDataSchema = routingResult.getResourceMethod().getActionReturnRecordDataSchema();\n-    @SuppressWarnings(\"unchecked\")\n-    FieldDef<Object> actionReturnFieldDef =\n-        (FieldDef<Object>) routingResult.getResourceMethod().getActionReturnFieldDef();\n-    final ActionResponse<?> actionResponse =\n-        new ActionResponse<>(value, actionReturnFieldDef, actionReturnRecordDataSchema);\n \n-    return new RestLiResponseDataImpl<>(new ActionResponseEnvelope(status, actionResponse), headers, cookies);\n+    if (value != null && RecordTemplate.class.isAssignableFrom(value.getClass())\n+        && routingResult.getContext().isFillInDefaultsRequested())\n+    {\n+      RecordTemplate actionResponseRecordTemplate = (RecordTemplate) value;\n+      DataMap dataWithoutDefault = actionResponseRecordTemplate.data();\n+      System.out.println(\"Fill in default for action result \" + value.getClass().getSimpleName() + \", \"\n+          + actionResponseRecordTemplate.schema().getFullName());\n+      DataMap dataWithDefault = ResponseUtils.fillInDefaultValues(actionResponseRecordTemplate.schema(), dataWithoutDefault);\n+      Object valueWithDefault = null;\n+      try\n+      {\n+        valueWithDefault = (Object) value.getClass().getConstructor(DataMap.class).newInstance(dataWithDefault);\n+      }\n+      catch (Exception e)\n+      {\n+        System.out.println(\"Happened \" + e.getCause());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b36076077498e9ee0b42bc932ff470bc4ddb71f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU5OTY3Nw==", "bodyText": "Change to a log message (debug/info)", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r454599677", "createdAt": "2020-07-14T19:42:39Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ActionResponseBuilder.java", "diffHunk": "@@ -85,12 +87,40 @@ public RestLiResponse buildResponse(RoutingResult routingResult,\n       status = HttpStatus.S_200_OK;\n     }\n     RecordDataSchema actionReturnRecordDataSchema = routingResult.getResourceMethod().getActionReturnRecordDataSchema();\n-    @SuppressWarnings(\"unchecked\")\n-    FieldDef<Object> actionReturnFieldDef =\n-        (FieldDef<Object>) routingResult.getResourceMethod().getActionReturnFieldDef();\n-    final ActionResponse<?> actionResponse =\n-        new ActionResponse<>(value, actionReturnFieldDef, actionReturnRecordDataSchema);\n \n-    return new RestLiResponseDataImpl<>(new ActionResponseEnvelope(status, actionResponse), headers, cookies);\n+    if (value != null && RecordTemplate.class.isAssignableFrom(value.getClass())\n+        && routingResult.getContext().isFillInDefaultsRequested())\n+    {\n+      RecordTemplate actionResponseRecordTemplate = (RecordTemplate) value;\n+      DataMap dataWithoutDefault = actionResponseRecordTemplate.data();\n+      System.out.println(\"Fill in default for action result \" + value.getClass().getSimpleName() + \", \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b36076077498e9ee0b42bc932ff470bc4ddb71f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYwNDUyNQ==", "bodyText": "This section should be refactored to avoid duplication with the else block", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r454604525", "createdAt": "2020-07-14T19:51:25Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ActionResponseBuilder.java", "diffHunk": "@@ -85,12 +87,40 @@ public RestLiResponse buildResponse(RoutingResult routingResult,\n       status = HttpStatus.S_200_OK;\n     }\n     RecordDataSchema actionReturnRecordDataSchema = routingResult.getResourceMethod().getActionReturnRecordDataSchema();\n-    @SuppressWarnings(\"unchecked\")\n-    FieldDef<Object> actionReturnFieldDef =\n-        (FieldDef<Object>) routingResult.getResourceMethod().getActionReturnFieldDef();\n-    final ActionResponse<?> actionResponse =\n-        new ActionResponse<>(value, actionReturnFieldDef, actionReturnRecordDataSchema);\n \n-    return new RestLiResponseDataImpl<>(new ActionResponseEnvelope(status, actionResponse), headers, cookies);\n+    if (value != null && RecordTemplate.class.isAssignableFrom(value.getClass())\n+        && routingResult.getContext().isFillInDefaultsRequested())\n+    {\n+      RecordTemplate actionResponseRecordTemplate = (RecordTemplate) value;\n+      DataMap dataWithoutDefault = actionResponseRecordTemplate.data();\n+      System.out.println(\"Fill in default for action result \" + value.getClass().getSimpleName() + \", \"\n+          + actionResponseRecordTemplate.schema().getFullName());\n+      DataMap dataWithDefault = ResponseUtils.fillInDefaultValues(actionResponseRecordTemplate.schema(), dataWithoutDefault);\n+      Object valueWithDefault = null;\n+      try\n+      {\n+        valueWithDefault = (Object) value.getClass().getConstructor(DataMap.class).newInstance(dataWithDefault);\n+      }\n+      catch (Exception e)\n+      {\n+        System.out.println(\"Happened \" + e.getCause());\n+        valueWithDefault = value;\n+      }\n+      @SuppressWarnings(\"unchecked\")\n+      FieldDef<Object> actionReturnFieldDef =\n+          (FieldDef<Object>) routingResult.getResourceMethod().getActionReturnFieldDef();\n+      final ActionResponse<?> actionResponse =\n+          new ActionResponse<>(valueWithDefault, actionReturnFieldDef, actionReturnRecordDataSchema);\n+      return new RestLiResponseDataImpl<>(new ActionResponseEnvelope(status, actionResponse), headers, cookies);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b36076077498e9ee0b42bc932ff470bc4ddb71f"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYwNTU2NA==", "bodyText": "Avoid duplication", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r454605564", "createdAt": "2020-07-14T19:53:12Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java", "diffHunk": "@@ -153,9 +154,22 @@ else if (result.getErrors().containsKey(criteria))\n     List<AnyRecord> response = new ArrayList<>(elements.size());\n     for (int j = 0; j < elements.size(); j++)\n     {\n-      response.add(new AnyRecord(RestUtils.projectFields(elements.get(j).data(),\n-                                                         resourceContext.getProjectionMode(),\n-                                                         resourceContext.getProjectionMask())));\n+      if (resourceContext.isFillInDefaultsRequested())\n+      {\n+        DataMap elementData = elements.get(j).data();\n+        RecordDataSchema schema = elements.get(j).schema();\n+        DataMap dataWithDefault = ResponseUtils.fillInDefaultValues(schema, elementData);\n+        response.add(new AnyRecord(RestUtils.projectFields(dataWithDefault,\n+            resourceContext.getProjectionMode(),\n+            resourceContext.getProjectionMask())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b36076077498e9ee0b42bc932ff470bc4ddb71f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYwNjgyNQ==", "bodyText": "When you fail to create the value instance, you should return 500 error, not fall back to value without default.", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r454606825", "createdAt": "2020-07-14T19:55:28Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ActionResponseBuilder.java", "diffHunk": "@@ -85,12 +87,40 @@ public RestLiResponse buildResponse(RoutingResult routingResult,\n       status = HttpStatus.S_200_OK;\n     }\n     RecordDataSchema actionReturnRecordDataSchema = routingResult.getResourceMethod().getActionReturnRecordDataSchema();\n-    @SuppressWarnings(\"unchecked\")\n-    FieldDef<Object> actionReturnFieldDef =\n-        (FieldDef<Object>) routingResult.getResourceMethod().getActionReturnFieldDef();\n-    final ActionResponse<?> actionResponse =\n-        new ActionResponse<>(value, actionReturnFieldDef, actionReturnRecordDataSchema);\n \n-    return new RestLiResponseDataImpl<>(new ActionResponseEnvelope(status, actionResponse), headers, cookies);\n+    if (value != null && RecordTemplate.class.isAssignableFrom(value.getClass())\n+        && routingResult.getContext().isFillInDefaultsRequested())\n+    {\n+      RecordTemplate actionResponseRecordTemplate = (RecordTemplate) value;\n+      DataMap dataWithoutDefault = actionResponseRecordTemplate.data();\n+      System.out.println(\"Fill in default for action result \" + value.getClass().getSimpleName() + \", \"\n+          + actionResponseRecordTemplate.schema().getFullName());\n+      DataMap dataWithDefault = ResponseUtils.fillInDefaultValues(actionResponseRecordTemplate.schema(), dataWithoutDefault);\n+      Object valueWithDefault = null;\n+      try\n+      {\n+        valueWithDefault = (Object) value.getClass().getConstructor(DataMap.class).newInstance(dataWithDefault);\n+      }\n+      catch (Exception e)\n+      {\n+        System.out.println(\"Happened \" + e.getCause());\n+        valueWithDefault = value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b36076077498e9ee0b42bc932ff470bc4ddb71f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYwOTkzMQ==", "bodyText": "Initialize with size computed using DataMapBuilder::getOptimumHashMapCapacityFromSize", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r454609931", "createdAt": "2020-07-14T20:01:11Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +92,95 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  /**\n+   * Used to fill in the default field for a data record if the record is having the field but not \"complete\"\n+   * Basically, a simplified psuedo code is:\n+   *  FillInDefault(schema, dataMap):\n+   *   for field in schema.fields:\n+   *     fieldSchema = field.getSchema()\n+   *     if fieldSchema instanceOf RecordDataTemplate:\n+   *       if data.contains(field):\n+   *         FillInDefault(fieldSchema, data.get(field))\n+   *       else:\n+   *         if field.hasDefaultValue():\n+   *           DataMap newData = field.getDefault()\n+   *           FillInDefault(fieldSchema, newData)\n+   *       data.put(field, newData)\n+   *     else if fieldSchema instanceOf TypeRefDataTemplate:\n+   *       FillIndFefault(schema.deReference(), data)\n+   *     else:\n+   *       if !data.contains(field) && field.hasDefaultValue():\n+   *         data.put(field, field.getDefaultValue())\n+   * @param dataSchema -> a schema of the corresponding dataMap\n+   * @param dataMap -> a dataMap that needs to be filling the default\n+   * @return a new different data map that contains original data plus the default values\n+   */\n+  public static DataMap fillInDefaultValues(DataSchema dataSchema, DataMap dataMap)\n+  {\n+    DataMap dataDefaultFilled = new DataMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b36076077498e9ee0b42bc932ff470bc4ddb71f"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYxNTUyNA==", "bodyText": "I think you can simplify the logic by reversing the checks.\nFirst check and compute the field value:\nif( dataDefaultFilled.containsKey())\n   Object fieldData = // get data from datamap\nelse if field has default\n  fieldData = // get field default.\nelse\n  // continue (nothing to do).\n\nThen compute the default for the field by calling recursively:\nif fieldData instaceOf DataMap || instance of DataList\n  fieldData = fillInDefaults(fieldData, fieldSchema)\n\ndataDefaultFilled.put(fieldName, fieldData)", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r454615524", "createdAt": "2020-07-14T20:11:56Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +91,90 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  /**\n+   *\n+   * @param dataSchema\n+   * @param dataMap\n+   * @return a new different data map that contains original data plus the default values\n+   */\n+  public static DataMap fillInDefaultValues(DataSchema dataSchema, DataMap dataMap)\n+  {\n+    DataMap dataDefaultFilled = new DataMap();\n+    if (dataMap != null)\n+    {\n+      dataDefaultFilled.putAll(dataMap);\n+    }\n+\n+    if (dataSchema instanceof TyperefDataSchema)\n+    {\n+      TyperefDataSchema typerefDataSchema = (TyperefDataSchema) dataSchema;\n+      return fillInDefaultValues(typerefDataSchema.getDereferencedDataSchema(), dataDefaultFilled);\n+    }\n+    else if (dataSchema instanceof RecordDataSchema)\n+    {\n+      RecordDataSchema recordDataSchema = (RecordDataSchema) dataSchema;\n+      for (RecordDataSchema.Field field : recordDataSchema.getFields())\n+      {\n+        DataSchema fieldSchema = field.getType();\n+        if (fieldSchema instanceof RecordDataSchema)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUzNTIyOQ=="}, "originalCommit": {"oid": "1c6cb1b990f07b29190506fb1fb283d7e22a533c"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYxNTkyNw==", "bodyText": "You would also need a method to handle DataLists. What if you have a field which is an array of records?", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r454615927", "createdAt": "2020-07-14T20:12:42Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +92,95 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  /**\n+   * Used to fill in the default field for a data record if the record is having the field but not \"complete\"\n+   * Basically, a simplified psuedo code is:\n+   *  FillInDefault(schema, dataMap):\n+   *   for field in schema.fields:\n+   *     fieldSchema = field.getSchema()\n+   *     if fieldSchema instanceOf RecordDataTemplate:\n+   *       if data.contains(field):\n+   *         FillInDefault(fieldSchema, data.get(field))\n+   *       else:\n+   *         if field.hasDefaultValue():\n+   *           DataMap newData = field.getDefault()\n+   *           FillInDefault(fieldSchema, newData)\n+   *       data.put(field, newData)\n+   *     else if fieldSchema instanceOf TypeRefDataTemplate:\n+   *       FillIndFefault(schema.deReference(), data)\n+   *     else:\n+   *       if !data.contains(field) && field.hasDefaultValue():\n+   *         data.put(field, field.getDefaultValue())\n+   * @param dataSchema -> a schema of the corresponding dataMap\n+   * @param dataMap -> a dataMap that needs to be filling the default\n+   * @return a new different data map that contains original data plus the default values\n+   */\n+  public static DataMap fillInDefaultValues(DataSchema dataSchema, DataMap dataMap)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b36076077498e9ee0b42bc932ff470bc4ddb71f"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYxNjM1NA==", "bodyText": "Add an array field:\nmidLevelFields: array[MiddleLevel..]", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r454616354", "createdAt": "2020-07-14T20:13:29Z", "author": {"login": "karthikbalasub"}, "path": "restli-int-test-api/src/main/pegasus/com/linkedin/restli/examples/defaults/api/HighLevelRecordWithDefault.pdl", "diffHunk": "@@ -0,0 +1,9 @@\n+namespace com.linkedin.restli.examples.defaults.api\n+\n+record HighLevelRecordWithDefault {\n+  noDefaultFieldA: int,\n+  intDefaultFieldB: int = -1,\n+  midLevelRecordWithoutDefault: MidLevelRecordWithDefault,\n+  midLevelRecordWithDefault: MidLevelRecordWithDefault = {\"intWithDefault\": 0, \"intWithoutDefault\": 0},\n+  midLevelField: optional MidLevelRecordWithDefault\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b36076077498e9ee0b42bc932ff470bc4ddb71f"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYxNzAxMg==", "bodyText": "Add usecase for array of records.", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r454617012", "createdAt": "2020-07-14T20:14:43Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/test/pegasus/com/linkedin/restli/server/defaults/RecordB.pdl", "diffHunk": "@@ -0,0 +1,6 @@\n+namespace com.linkedin.restli.server.defaults\n+\n+record RecordB {\n+  field1: array[int] = [-1],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b36076077498e9ee0b42bc932ff470bc4ddb71f"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5d6d1e5339c32394ee2e725dbc7c59b335bb57bc", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/5d6d1e5339c32394ee2e725dbc7c59b335bb57bc", "committedDate": "2020-07-20T07:42:57Z", "message": "Address Karthiks comment: array test cases, simplify logic"}, "afterCommit": {"oid": "c18cfcc93ec7698ccead9e1a483956c8160fff02", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/c18cfcc93ec7698ccead9e1a483956c8160fff02", "committedDate": "2020-07-20T07:59:08Z", "message": "Address Karthiks comment: array test cases, simplify logic"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c18cfcc93ec7698ccead9e1a483956c8160fff02", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/c18cfcc93ec7698ccead9e1a483956c8160fff02", "committedDate": "2020-07-20T07:59:08Z", "message": "Address Karthiks comment: array test cases, simplify logic"}, "afterCommit": {"oid": "20edab3a4a167ffb434e6127da064e312c9dc4e0", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/20edab3a4a167ffb434e6127da064e312c9dc4e0", "committedDate": "2020-07-20T17:41:15Z", "message": "Address Karthiks comment: array test cases, simplify logic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMzMzNDM5", "url": "https://github.com/linkedin/rest.li/pull/335#pullrequestreview-452333439", "createdAt": "2020-07-21T10:38:52Z", "commit": {"oid": "57c394003c10fab5e85bcb129dc696aa416dca85"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDozODo1MlrOG0yMqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDo0NjowOFrOG0yatQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAwMTU3OA==", "bodyText": "Add javadoc", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r458001578", "createdAt": "2020-07-21T10:38:52Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/server/RestLiConfig.java", "diffHunk": "@@ -552,4 +555,14 @@ public void setValidateResourceKeys(boolean validateResourceKeys)\n     setMethodConfig(\n         new RestLiMethodConfigBuilder(getMethodConfig()).withShouldValidateResourceKeys(_validateResourceKeys).build());\n   }\n+\n+  public boolean shouldFillInDefaultValues()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c394003c10fab5e85bcb129dc696aa416dca85"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAwMTYyNg==", "bodyText": "Add javadoc", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r458001626", "createdAt": "2020-07-21T10:38:57Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/server/RestLiConfig.java", "diffHunk": "@@ -552,4 +555,14 @@ public void setValidateResourceKeys(boolean validateResourceKeys)\n     setMethodConfig(\n         new RestLiMethodConfigBuilder(getMethodConfig()).withShouldValidateResourceKeys(_validateResourceKeys).build());\n   }\n+\n+  public boolean shouldFillInDefaultValues()\n+  {\n+    return _fillInDefaultValues;\n+  }\n+\n+  public void setFillInDefaultValues(boolean fillInDefaultValues)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c394003c10fab5e85bcb129dc696aa416dca85"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAwMjIxMA==", "bodyText": "I think it is still good to add unit tests to cover the scenarios", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r458002210", "createdAt": "2020-07-21T10:40:00Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/test/pegasus/com/linkedin/restli/server/defaults/RecordB.pdl", "diffHunk": "@@ -0,0 +1,6 @@\n+namespace com.linkedin.restli.server.defaults\n+\n+record RecordB {\n+  field1: array[int] = [-1],", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYxNzAxMg=="}, "originalCommit": {"oid": "9b36076077498e9ee0b42bc932ff470bc4ddb71f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAwMjcyMA==", "bodyText": "For each case, add a short comment on what it is testing.\nOr even better, include a string in the test data with the context and use that string when tests fail.", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r458002720", "createdAt": "2020-07-21T10:40:59Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/test/java/com/linkedin/restli/internal/server/response/TestResponseUtils.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.internal.server.response;\n+\n+import com.linkedin.data.DataList;\n+import com.linkedin.data.DataMap;\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.SchemaFormatType;\n+import com.linkedin.data.schema.generator.AbstractGenerator;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import com.linkedin.data.template.DataTemplateUtil;\n+import com.linkedin.restli.internal.server.util.DataMapUtils;\n+import java.io.File;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import org.testng.reporters.Files;\n+\n+\n+public class TestResponseUtils\n+{\n+  final static String FS = File.separator;\n+  final static String testDir = System.getProperty(\"testDir\", new File(\"src/test\").getAbsolutePath());\n+  final static String pegasusDir = testDir + FS + \"pegasus\" + FS + \"com\" + FS + \"linkedin\" + FS + \"restli\" + FS + \"server\" + FS + \"defaults\";\n+  final static String resolverDir = testDir + FS + \"pegasus\";\n+\n+  @BeforeTest\n+  public void beforeTest()\n+  {\n+    System.setProperty(AbstractGenerator.GENERATOR_RESOLVER_PATH, resolverDir);\n+  }\n+\n+  @DataProvider(name = \"default_serialization\")\n+  public Object[][] schemaFilesForDefaultSerializationTest()\n+  {\n+    // case 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c394003c10fab5e85bcb129dc696aa416dca85"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAwMzgyNw==", "bodyText": "You should follow the same behavior as complex fields.\n\nif field is not null, fill it with defaults from item's schema recursively.\nif field is null and schema provides default, use the default and fill it with defaults from the item's schema recursively.\nif field is null and not default provided, do nothin.", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r458003827", "createdAt": "2020-07-21T10:43:24Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +92,95 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  /**\n+   * Used to fill in the default field for a data record if the record is having the field but not \"complete\"\n+   * Basically, a simplified psuedo code is:\n+   *  FillInDefault(schema, dataMap):\n+   *   for field in schema.fields:\n+   *     fieldSchema = field.getSchema()\n+   *     if fieldSchema instanceOf RecordDataTemplate:\n+   *       if data.contains(field):\n+   *         FillInDefault(fieldSchema, data.get(field))\n+   *       else:\n+   *         if field.hasDefaultValue():\n+   *           DataMap newData = field.getDefault()\n+   *           FillInDefault(fieldSchema, newData)\n+   *       data.put(field, newData)\n+   *     else if fieldSchema instanceOf TypeRefDataTemplate:\n+   *       FillIndFefault(schema.deReference(), data)\n+   *     else:\n+   *       if !data.contains(field) && field.hasDefaultValue():\n+   *         data.put(field, field.getDefaultValue())\n+   * @param dataSchema -> a schema of the corresponding dataMap\n+   * @param dataMap -> a dataMap that needs to be filling the default\n+   * @return a new different data map that contains original data plus the default values\n+   */\n+  public static DataMap fillInDefaultValues(DataSchema dataSchema, DataMap dataMap)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYxNTkyNw=="}, "originalCommit": {"oid": "9b36076077498e9ee0b42bc932ff470bc4ddb71f"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAwNTE3Mw==", "bodyText": "Can you explain when this is needed? I feel this should just return null here.", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r458005173", "createdAt": "2020-07-21T10:46:08Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +93,96 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  /**\n+   * Used to fill in the default field for a data record if the record is having the field but not \"complete\"\n+   * Basically, a simplified psuedo code is:\n+   *  FillInDefault(schema, dataMap):\n+   *   for field in schema.fields:\n+   *     fieldSchema = field.getSchema()\n+   *     if fieldSchema instanceOf RecordDataTemplate:\n+   *       if data.contains(field):\n+   *         FillInDefault(fieldSchema, data.get(field))\n+   *       else:\n+   *         if field.hasDefaultValue():\n+   *           DataMap newData = field.getDefault()\n+   *           FillInDefault(fieldSchema, newData)\n+   *       data.put(field, newData)\n+   *     else if fieldSchema instanceOf TypeRefDataTemplate:\n+   *       FillIndFefault(schema.deReference(), data)\n+   *     else:\n+   *       if !data.contains(field) && field.hasDefaultValue():\n+   *         data.put(field, field.getDefaultValue())\n+   * @param dataSchema -> a schema of the corresponding dataMap\n+   * @param dataMap -> a dataMap that needs to be filling the default\n+   * @return a new different data map that contains original data plus the default values\n+   */\n+  public static DataMap fillInDefaultValues(DataSchema dataSchema, DataMap dataMap)\n+  {\n+    DataMap dataDefaultFilled;\n+    if (dataMap != null)\n+    {\n+      dataDefaultFilled = new DataMap(DataMapBuilder.getOptimumHashMapCapacityFromSize(dataMap.size()));\n+      dataDefaultFilled.putAll(dataMap);\n+    }\n+    else\n+    {\n+      dataDefaultFilled = new DataMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c394003c10fab5e85bcb129dc696aa416dca85"}, "originalPosition": 82}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "57c394003c10fab5e85bcb129dc696aa416dca85", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/57c394003c10fab5e85bcb129dc696aa416dca85", "committedDate": "2020-07-20T19:28:14Z", "message": "Add server config logic in code"}, "afterCommit": {"oid": "9e81643c891572982585ede78eb7b5cd20c8aafa", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/9e81643c891572982585ede78eb7b5cd20c8aafa", "committedDate": "2020-07-22T17:20:51Z", "message": "Address comment for clarity"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9e81643c891572982585ede78eb7b5cd20c8aafa", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/9e81643c891572982585ede78eb7b5cd20c8aafa", "committedDate": "2020-07-22T17:20:51Z", "message": "Address comment for clarity"}, "afterCommit": {"oid": "68c81b337a69f7cec5dc68f19a09041ca0785647", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/68c81b337a69f7cec5dc68f19a09041ca0785647", "committedDate": "2020-07-23T23:40:58Z", "message": "add union method and re-org test cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MTczMjgz", "url": "https://github.com/linkedin/rest.li/pull/335#pullrequestreview-456173283", "createdAt": "2020-07-27T22:16:05Z", "commit": {"oid": "68c81b337a69f7cec5dc68f19a09041ca0785647"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjoxNjowNVrOG31hTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjo0NzoxNFrOG32PNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwMTc0Mg==", "bodyText": "move this as javadoc for the method", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r461201742", "createdAt": "2020-07-27T22:16:05Z", "author": {"login": "aman1309"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/ResourceContextImpl.java", "diffHunk": "@@ -626,6 +630,23 @@ public boolean isReturnEntityRequested()\n     return ArgumentUtils.parseReturnEntityParameter(returnEntityValue);\n   }\n \n+  @Override\n+  public boolean isFillInDefaultsRequested()\n+  {\n+    return _fillInDefaultValues;\n+  }\n+\n+  @Override\n+  public void setFillInDefaultValues(boolean fillInDefaultValues)\n+  {\n+    // if a server has a configuration to set the flag to true, it will be set\n+    // through this method, and if the request itself already has the flag set to true\n+    // we will keep the flag remain true even the server config is not set.\n+    // That is => either server config or client request param will be able to\n+    // request fill in default values", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c81b337a69f7cec5dc68f19a09041ca0785647"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwNTY5MA==", "bodyText": "did you look at any other possible position where this can be inserted instead of response builders? and if not how did we ensure all cases are(will remain) covered where the response is being sent out", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r461205690", "createdAt": "2020-07-27T22:26:18Z", "author": {"login": "aman1309"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/CollectionResponseBuilder.java", "diffHunk": "@@ -153,8 +154,13 @@ private D buildRestLiResponseData(final Request request,\n         throw new RestLiServiceException(HttpStatus.S_500_INTERNAL_SERVER_ERROR,\n             \"Unexpected null encountered. Null element inside of a List returned by the resource method: \" + routingResult.getResourceMethod());\n       }\n+      DataMap rawData = entry.data();\n+      if (resourceContext.isFillInDefaultsRequested())\n+      {\n+        rawData = ResponseUtils.fillInDefaultValues(entry.schema(), rawData);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c81b337a69f7cec5dc68f19a09041ca0785647"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwNjEyNQ==", "bodyText": "switch case?", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r461206125", "createdAt": "2020-07-27T22:27:28Z", "author": {"login": "aman1309"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +95,209 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  public static DataMap fillInDefaultOnRecord(RecordDataSchema schema, DataMap dataMap)\n+  {\n+    DataMap dataWithDefault = new DataMap(DataMapBuilder.getOptimumHashMapCapacityFromSize(dataMap.size()));\n+    dataWithDefault.putAll(dataMap);\n+    for (RecordDataSchema.Field field : schema.getFields())\n+    {\n+      DataSchema dataFieldSchema = field.getType();\n+      if (dataFieldSchema.getType() == DataSchema.Type.RECORD)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c81b337a69f7cec5dc68f19a09041ca0785647"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwOTA1Nw==", "bodyText": "this condition seems common and can be moved out of data schema switch construct", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r461209057", "createdAt": "2020-07-27T22:35:17Z", "author": {"login": "aman1309"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +95,209 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  public static DataMap fillInDefaultOnRecord(RecordDataSchema schema, DataMap dataMap)\n+  {\n+    DataMap dataWithDefault = new DataMap(DataMapBuilder.getOptimumHashMapCapacityFromSize(dataMap.size()));\n+    dataWithDefault.putAll(dataMap);\n+    for (RecordDataSchema.Field field : schema.getFields())\n+    {\n+      DataSchema dataFieldSchema = field.getType();\n+      if (dataFieldSchema.getType() == DataSchema.Type.RECORD)\n+      {\n+        if (dataMap.containsKey(field.getName()) || field.getDefault() != null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c81b337a69f7cec5dc68f19a09041ca0785647"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxMDUxMg==", "bodyText": "fillInDefaultOnXYZ.. can be combined into fillInDefaultValues with switch case. why do we need separate methods for each? and separate switch case constructs?", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r461210512", "createdAt": "2020-07-27T22:39:10Z", "author": {"login": "aman1309"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +95,209 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  public static DataMap fillInDefaultOnRecord(RecordDataSchema schema, DataMap dataMap)\n+  {\n+    DataMap dataWithDefault = new DataMap(DataMapBuilder.getOptimumHashMapCapacityFromSize(dataMap.size()));\n+    dataWithDefault.putAll(dataMap);\n+    for (RecordDataSchema.Field field : schema.getFields())\n+    {\n+      DataSchema dataFieldSchema = field.getType();\n+      if (dataFieldSchema.getType() == DataSchema.Type.RECORD)\n+      {\n+        if (dataMap.containsKey(field.getName()) || field.getDefault() != null)\n+        {\n+          DataMap originalData = dataMap.containsKey(field.getName()) ? (DataMap) dataMap.get(field.getName()) : (DataMap) field.getDefault();\n+          dataWithDefault.put(field.getName(), fillInDefaultOnRecord((RecordDataSchema) dataFieldSchema, originalData));\n+        }\n+      }\n+      else if (dataFieldSchema.getType() == DataSchema.Type.ARRAY)\n+      {\n+        if (dataMap.containsKey(field.getName()) || field.getDefault() != null)\n+        {\n+          DataList originalData = dataMap.containsKey(field.getName()) ? (DataList) dataMap.get(field.getName()) : (DataList) field.getDefault();\n+          dataWithDefault.put(field.getName(), fillInDefaultOnArray((ArrayDataSchema) dataFieldSchema, originalData));\n+        }\n+      }\n+      else if (dataFieldSchema.getType() == DataSchema.Type.TYPEREF)\n+      {\n+        if (dataMap.containsKey(field.getName()) || field.getDefault() != null)\n+        {\n+          Object originalData = dataMap.containsKey(field.getName()) ? dataMap.get(field.getName()) : field.getDefault();\n+          dataWithDefault.put(field.getName(), fillInDefaultOnTyperef((TyperefDataSchema) dataFieldSchema, originalData));\n+        }\n+      }\n+      else if (dataFieldSchema.getType() == DataSchema.Type.MAP)\n+      {\n+        if (dataMap.containsKey(field.getName()) || field.getDefault() != null)\n+        {\n+          DataMap originalData = dataMap.containsKey(field.getName()) ? (DataMap) dataMap.get(field.getName()) : (DataMap) field.getDefault();\n+          dataWithDefault.put(field.getName(), fillInDefaultOnMap((MapDataSchema) dataFieldSchema, originalData));\n+        }\n+      }\n+      else if (dataFieldSchema.getType() == DataSchema.Type.UNION)\n+      {\n+        if (dataMap.containsKey(field.getName()) || field.getDefault() != null)\n+        {\n+          DataMap originalData = dataMap.containsKey(field.getName()) ? (DataMap) dataMap.get(field.getName()) : (DataMap) field.getDefault();\n+          dataWithDefault.put(field.getName(), fillInDefaultOnUnion((UnionDataSchema) dataFieldSchema, originalData));\n+        }\n+      }\n+      else if (!dataWithDefault.containsKey(field.getName()) && field.getDefault() != null)\n+      {\n+        dataWithDefault.put(field.getName(), field.getDefault());\n+      }\n+    }\n+    return dataWithDefault;\n+  }\n+\n+  public static DataMap fillInDefaultOnMap(MapDataSchema schema, DataMap dataMap)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c81b337a69f7cec5dc68f19a09041ca0785647"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxMjEzNw==", "bodyText": "if you are filling in default datamap you shouldn't need to recursively call for record again as all default would be there from schema", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r461212137", "createdAt": "2020-07-27T22:43:37Z", "author": {"login": "aman1309"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +95,209 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  public static DataMap fillInDefaultOnRecord(RecordDataSchema schema, DataMap dataMap)\n+  {\n+    DataMap dataWithDefault = new DataMap(DataMapBuilder.getOptimumHashMapCapacityFromSize(dataMap.size()));\n+    dataWithDefault.putAll(dataMap);\n+    for (RecordDataSchema.Field field : schema.getFields())\n+    {\n+      DataSchema dataFieldSchema = field.getType();\n+      if (dataFieldSchema.getType() == DataSchema.Type.RECORD)\n+      {\n+        if (dataMap.containsKey(field.getName()) || field.getDefault() != null)\n+        {\n+          DataMap originalData = dataMap.containsKey(field.getName()) ? (DataMap) dataMap.get(field.getName()) : (DataMap) field.getDefault();\n+          dataWithDefault.put(field.getName(), fillInDefaultOnRecord((RecordDataSchema) dataFieldSchema, originalData));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c81b337a69f7cec5dc68f19a09041ca0785647"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxMzQ5Mw==", "bodyText": "this would increase the memory consumption unnecessarily can you optimize for this. why do you need this? you're anyway traversing for list of schema fields. can we not update and return the original datamap?", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r461213493", "createdAt": "2020-07-27T22:47:14Z", "author": {"login": "aman1309"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +95,209 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  public static DataMap fillInDefaultOnRecord(RecordDataSchema schema, DataMap dataMap)\n+  {\n+    DataMap dataWithDefault = new DataMap(DataMapBuilder.getOptimumHashMapCapacityFromSize(dataMap.size()));\n+    dataWithDefault.putAll(dataMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c81b337a69f7cec5dc68f19a09041ca0785647"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MTAxMzU2", "url": "https://github.com/linkedin/rest.li/pull/335#pullrequestreview-459101356", "createdAt": "2020-07-31T11:21:24Z", "commit": {"oid": "68c81b337a69f7cec5dc68f19a09041ca0785647"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToyMToyNFrOG6FF8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToyNzowMVrOG6FOEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1NDAzMw==", "bodyText": "+1, it seems there is a lot of duplication.\nYou'd just need one fillDefaultOnData which takes dataSchema and an Object, does the branching based on schema type.\nIn all other methods, you just have to get the nested schema (eg, field, item or value schema) and call this method again.", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r463554033", "createdAt": "2020-07-31T11:21:24Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +95,209 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  public static DataMap fillInDefaultOnRecord(RecordDataSchema schema, DataMap dataMap)\n+  {\n+    DataMap dataWithDefault = new DataMap(DataMapBuilder.getOptimumHashMapCapacityFromSize(dataMap.size()));\n+    dataWithDefault.putAll(dataMap);\n+    for (RecordDataSchema.Field field : schema.getFields())\n+    {\n+      DataSchema dataFieldSchema = field.getType();\n+      if (dataFieldSchema.getType() == DataSchema.Type.RECORD)\n+      {\n+        if (dataMap.containsKey(field.getName()) || field.getDefault() != null)\n+        {\n+          DataMap originalData = dataMap.containsKey(field.getName()) ? (DataMap) dataMap.get(field.getName()) : (DataMap) field.getDefault();\n+          dataWithDefault.put(field.getName(), fillInDefaultOnRecord((RecordDataSchema) dataFieldSchema, originalData));\n+        }\n+      }\n+      else if (dataFieldSchema.getType() == DataSchema.Type.ARRAY)\n+      {\n+        if (dataMap.containsKey(field.getName()) || field.getDefault() != null)\n+        {\n+          DataList originalData = dataMap.containsKey(field.getName()) ? (DataList) dataMap.get(field.getName()) : (DataList) field.getDefault();\n+          dataWithDefault.put(field.getName(), fillInDefaultOnArray((ArrayDataSchema) dataFieldSchema, originalData));\n+        }\n+      }\n+      else if (dataFieldSchema.getType() == DataSchema.Type.TYPEREF)\n+      {\n+        if (dataMap.containsKey(field.getName()) || field.getDefault() != null)\n+        {\n+          Object originalData = dataMap.containsKey(field.getName()) ? dataMap.get(field.getName()) : field.getDefault();\n+          dataWithDefault.put(field.getName(), fillInDefaultOnTyperef((TyperefDataSchema) dataFieldSchema, originalData));\n+        }\n+      }\n+      else if (dataFieldSchema.getType() == DataSchema.Type.MAP)\n+      {\n+        if (dataMap.containsKey(field.getName()) || field.getDefault() != null)\n+        {\n+          DataMap originalData = dataMap.containsKey(field.getName()) ? (DataMap) dataMap.get(field.getName()) : (DataMap) field.getDefault();\n+          dataWithDefault.put(field.getName(), fillInDefaultOnMap((MapDataSchema) dataFieldSchema, originalData));\n+        }\n+      }\n+      else if (dataFieldSchema.getType() == DataSchema.Type.UNION)\n+      {\n+        if (dataMap.containsKey(field.getName()) || field.getDefault() != null)\n+        {\n+          DataMap originalData = dataMap.containsKey(field.getName()) ? (DataMap) dataMap.get(field.getName()) : (DataMap) field.getDefault();\n+          dataWithDefault.put(field.getName(), fillInDefaultOnUnion((UnionDataSchema) dataFieldSchema, originalData));\n+        }\n+      }\n+      else if (!dataWithDefault.containsKey(field.getName()) && field.getDefault() != null)\n+      {\n+        dataWithDefault.put(field.getName(), field.getDefault());\n+      }\n+    }\n+    return dataWithDefault;\n+  }\n+\n+  public static DataMap fillInDefaultOnMap(MapDataSchema schema, DataMap dataMap)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxMDUxMg=="}, "originalCommit": {"oid": "68c81b337a69f7cec5dc68f19a09041ca0785647"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1NjExMw==", "bodyText": "This is an interesting way to provide inputs. One suggestion here is to name the files in a meaningful way.\neg, basic_case.json, array_map.json", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r463556113", "createdAt": "2020-07-31T11:27:01Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/test/java/com/linkedin/restli/internal/server/response/TestResponseUtils.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.internal.server.response;\n+\n+import com.linkedin.data.DataMap;\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.SchemaFormatType;\n+import com.linkedin.data.schema.generator.AbstractGenerator;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import com.linkedin.data.template.DataTemplateUtil;\n+import com.linkedin.restli.internal.server.util.DataMapUtils;\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.util.Collections;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import org.testng.reporters.Files;\n+\n+\n+public class TestResponseUtils\n+{\n+  final static String FS = File.separator;\n+  final static String testDir = System.getProperty(\"testDir\", new File(\"src/test\").getAbsolutePath());\n+  final static String pegasusDir = testDir + FS + \"pegasus\" + FS + \"com\" + FS + \"linkedin\" + FS + \"restli\" + FS + \"server\" + FS + \"defaults\";\n+  final static String resolverDir = testDir + FS + \"pegasus\";\n+\n+  @BeforeTest\n+  public void beforeTest()\n+  {\n+    System.setProperty(AbstractGenerator.GENERATOR_RESOLVER_PATH, resolverDir);\n+  }\n+\n+  @DataProvider(name = \"default_serialization\")\n+  public Object[][] schemaFilesForDefaultSerializationTest()\n+  {\n+    return new Object[][]{\n+        {\"case1.json\"},\n+        {\"case2.json\"},\n+        {\"case3.json\"},\n+        {\"case4.json\"},\n+        {\"case5.json\"},\n+        {\"case6.json\"},\n+        {\"case7.json\"},\n+        {\"case8.json\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c81b337a69f7cec5dc68f19a09041ca0785647"}, "originalPosition": 60}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "68c81b337a69f7cec5dc68f19a09041ca0785647", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/68c81b337a69f7cec5dc68f19a09041ca0785647", "committedDate": "2020-07-23T23:40:58Z", "message": "add union method and re-org test cases"}, "afterCommit": {"oid": "9827904cb299eb93d624530e2435a0e023944999", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/9827904cb299eb93d624530e2435a0e023944999", "committedDate": "2020-08-07T20:44:56Z", "message": "Address logic simplification comment and case renaming comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NDcxMDcw", "url": "https://github.com/linkedin/rest.li/pull/335#pullrequestreview-464471070", "createdAt": "2020-08-10T18:25:49Z", "commit": {"oid": "9827904cb299eb93d624530e2435a0e023944999"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODoyNTo1MFrOG-aR6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODozNjowNlrOG-amqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5NTQ2NA==", "bodyText": "initialize size", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r468095464", "createdAt": "2020-08-10T18:25:50Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +95,96 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  private static Object fillInDataDefault(DataSchema schema, Object dataWithoutDefault)\n+  {\n+    switch (schema.getType())\n+    {\n+      case RECORD:\n+        return fillInDefaultOnRecord((RecordDataSchema) schema, (DataMap) dataWithoutDefault);\n+      case TYPEREF:\n+        return fillInDefaultOnTyperef((TyperefDataSchema) schema, dataWithoutDefault);\n+      case MAP:\n+        return fillInDefaultOnMap((MapDataSchema) schema, (DataMap) dataWithoutDefault);\n+      case UNION:\n+        return fillInDefaultOnUnion((UnionDataSchema) schema, (DataMap) dataWithoutDefault);\n+      case ARRAY:\n+        return fillInDefaultOnArray((ArrayDataSchema) schema, (DataList) dataWithoutDefault);\n+      default:\n+        return dataWithoutDefault;\n+    }\n+  }\n+\n+  public static DataMap fillInDefaultOnRecord(RecordDataSchema schema, DataMap dataMap)\n+  {\n+    DataMap dataWithDefault = new DataMap(DataMapBuilder.getOptimumHashMapCapacityFromSize(dataMap.size()));\n+    dataWithDefault.putAll(dataMap);\n+    for (RecordDataSchema.Field field : schema.getFields())\n+    {\n+      if (dataMap.containsKey(field.getName()) || field.getDefault() != null)\n+      {\n+        Object fieldData = dataMap.containsKey(field.getName()) ? dataMap.get(field.getName()) : field.getDefault();\n+        dataWithDefault.put(field.getName(), fillInDataDefault(field.getType(), fieldData));\n+      }\n+    }\n+    return dataWithDefault;\n+  }\n+\n+  public static DataMap fillInDefaultOnMap(MapDataSchema schema, DataMap dataMap)\n+  {\n+    DataSchema valueSchema = schema.getValues();\n+    DataMap dataWithDefault = new DataMap(dataMap);\n+    for (Map.Entry<String, Object> entry : dataWithDefault.entrySet())\n+    {\n+      dataWithDefault.put(entry.getKey(), fillInDataDefault(valueSchema, entry.getValue()));\n+    }\n+    return dataWithDefault;\n+  }\n+\n+  public static DataList fillInDefaultOnArray(ArrayDataSchema schema, DataList dataList)\n+  {\n+    DataSchema itemDataSchema = schema.getItems();\n+    DataList dataListWithDefault = new DataList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9827904cb299eb93d624530e2435a0e023944999"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5NzgxMA==", "bodyText": "We should use CheckedUtil::*withoutChecking methods.\nBy default DataMap and DataList check for cycles when a new object is added. However, since we are controling the logic and are not creating cycles, we can skip those checks for performance.", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r468097810", "createdAt": "2020-08-10T18:30:19Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +95,96 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  private static Object fillInDataDefault(DataSchema schema, Object dataWithoutDefault)\n+  {\n+    switch (schema.getType())\n+    {\n+      case RECORD:\n+        return fillInDefaultOnRecord((RecordDataSchema) schema, (DataMap) dataWithoutDefault);\n+      case TYPEREF:\n+        return fillInDefaultOnTyperef((TyperefDataSchema) schema, dataWithoutDefault);\n+      case MAP:\n+        return fillInDefaultOnMap((MapDataSchema) schema, (DataMap) dataWithoutDefault);\n+      case UNION:\n+        return fillInDefaultOnUnion((UnionDataSchema) schema, (DataMap) dataWithoutDefault);\n+      case ARRAY:\n+        return fillInDefaultOnArray((ArrayDataSchema) schema, (DataList) dataWithoutDefault);\n+      default:\n+        return dataWithoutDefault;\n+    }\n+  }\n+\n+  public static DataMap fillInDefaultOnRecord(RecordDataSchema schema, DataMap dataMap)\n+  {\n+    DataMap dataWithDefault = new DataMap(DataMapBuilder.getOptimumHashMapCapacityFromSize(dataMap.size()));\n+    dataWithDefault.putAll(dataMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9827904cb299eb93d624530e2435a0e023944999"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5Nzg2Mg==", "bodyText": "use CheckedUtil::*withoutChecking methods.", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r468097862", "createdAt": "2020-08-10T18:30:25Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +95,96 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  private static Object fillInDataDefault(DataSchema schema, Object dataWithoutDefault)\n+  {\n+    switch (schema.getType())\n+    {\n+      case RECORD:\n+        return fillInDefaultOnRecord((RecordDataSchema) schema, (DataMap) dataWithoutDefault);\n+      case TYPEREF:\n+        return fillInDefaultOnTyperef((TyperefDataSchema) schema, dataWithoutDefault);\n+      case MAP:\n+        return fillInDefaultOnMap((MapDataSchema) schema, (DataMap) dataWithoutDefault);\n+      case UNION:\n+        return fillInDefaultOnUnion((UnionDataSchema) schema, (DataMap) dataWithoutDefault);\n+      case ARRAY:\n+        return fillInDefaultOnArray((ArrayDataSchema) schema, (DataList) dataWithoutDefault);\n+      default:\n+        return dataWithoutDefault;\n+    }\n+  }\n+\n+  public static DataMap fillInDefaultOnRecord(RecordDataSchema schema, DataMap dataMap)\n+  {\n+    DataMap dataWithDefault = new DataMap(DataMapBuilder.getOptimumHashMapCapacityFromSize(dataMap.size()));\n+    dataWithDefault.putAll(dataMap);\n+    for (RecordDataSchema.Field field : schema.getFields())\n+    {\n+      if (dataMap.containsKey(field.getName()) || field.getDefault() != null)\n+      {\n+        Object fieldData = dataMap.containsKey(field.getName()) ? dataMap.get(field.getName()) : field.getDefault();\n+        dataWithDefault.put(field.getName(), fillInDataDefault(field.getType(), fieldData));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9827904cb299eb93d624530e2435a0e023944999"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5NzkzMQ==", "bodyText": "use CheckedUtil::*withoutChecking methods.", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r468097931", "createdAt": "2020-08-10T18:30:33Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +95,96 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  private static Object fillInDataDefault(DataSchema schema, Object dataWithoutDefault)\n+  {\n+    switch (schema.getType())\n+    {\n+      case RECORD:\n+        return fillInDefaultOnRecord((RecordDataSchema) schema, (DataMap) dataWithoutDefault);\n+      case TYPEREF:\n+        return fillInDefaultOnTyperef((TyperefDataSchema) schema, dataWithoutDefault);\n+      case MAP:\n+        return fillInDefaultOnMap((MapDataSchema) schema, (DataMap) dataWithoutDefault);\n+      case UNION:\n+        return fillInDefaultOnUnion((UnionDataSchema) schema, (DataMap) dataWithoutDefault);\n+      case ARRAY:\n+        return fillInDefaultOnArray((ArrayDataSchema) schema, (DataList) dataWithoutDefault);\n+      default:\n+        return dataWithoutDefault;\n+    }\n+  }\n+\n+  public static DataMap fillInDefaultOnRecord(RecordDataSchema schema, DataMap dataMap)\n+  {\n+    DataMap dataWithDefault = new DataMap(DataMapBuilder.getOptimumHashMapCapacityFromSize(dataMap.size()));\n+    dataWithDefault.putAll(dataMap);\n+    for (RecordDataSchema.Field field : schema.getFields())\n+    {\n+      if (dataMap.containsKey(field.getName()) || field.getDefault() != null)\n+      {\n+        Object fieldData = dataMap.containsKey(field.getName()) ? dataMap.get(field.getName()) : field.getDefault();\n+        dataWithDefault.put(field.getName(), fillInDataDefault(field.getType(), fieldData));\n+      }\n+    }\n+    return dataWithDefault;\n+  }\n+\n+  public static DataMap fillInDefaultOnMap(MapDataSchema schema, DataMap dataMap)\n+  {\n+    DataSchema valueSchema = schema.getValues();\n+    DataMap dataWithDefault = new DataMap(dataMap);\n+    for (Map.Entry<String, Object> entry : dataWithDefault.entrySet())\n+    {\n+      dataWithDefault.put(entry.getKey(), fillInDataDefault(valueSchema, entry.getValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9827904cb299eb93d624530e2435a0e023944999"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5Nzk4OA==", "bodyText": "use CheckedUtil::*withoutChecking methods.", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r468097988", "createdAt": "2020-08-10T18:30:39Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +95,96 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  private static Object fillInDataDefault(DataSchema schema, Object dataWithoutDefault)\n+  {\n+    switch (schema.getType())\n+    {\n+      case RECORD:\n+        return fillInDefaultOnRecord((RecordDataSchema) schema, (DataMap) dataWithoutDefault);\n+      case TYPEREF:\n+        return fillInDefaultOnTyperef((TyperefDataSchema) schema, dataWithoutDefault);\n+      case MAP:\n+        return fillInDefaultOnMap((MapDataSchema) schema, (DataMap) dataWithoutDefault);\n+      case UNION:\n+        return fillInDefaultOnUnion((UnionDataSchema) schema, (DataMap) dataWithoutDefault);\n+      case ARRAY:\n+        return fillInDefaultOnArray((ArrayDataSchema) schema, (DataList) dataWithoutDefault);\n+      default:\n+        return dataWithoutDefault;\n+    }\n+  }\n+\n+  public static DataMap fillInDefaultOnRecord(RecordDataSchema schema, DataMap dataMap)\n+  {\n+    DataMap dataWithDefault = new DataMap(DataMapBuilder.getOptimumHashMapCapacityFromSize(dataMap.size()));\n+    dataWithDefault.putAll(dataMap);\n+    for (RecordDataSchema.Field field : schema.getFields())\n+    {\n+      if (dataMap.containsKey(field.getName()) || field.getDefault() != null)\n+      {\n+        Object fieldData = dataMap.containsKey(field.getName()) ? dataMap.get(field.getName()) : field.getDefault();\n+        dataWithDefault.put(field.getName(), fillInDataDefault(field.getType(), fieldData));\n+      }\n+    }\n+    return dataWithDefault;\n+  }\n+\n+  public static DataMap fillInDefaultOnMap(MapDataSchema schema, DataMap dataMap)\n+  {\n+    DataSchema valueSchema = schema.getValues();\n+    DataMap dataWithDefault = new DataMap(dataMap);\n+    for (Map.Entry<String, Object> entry : dataWithDefault.entrySet())\n+    {\n+      dataWithDefault.put(entry.getKey(), fillInDataDefault(valueSchema, entry.getValue()));\n+    }\n+    return dataWithDefault;\n+  }\n+\n+  public static DataList fillInDefaultOnArray(ArrayDataSchema schema, DataList dataList)\n+  {\n+    DataSchema itemDataSchema = schema.getItems();\n+    DataList dataListWithDefault = new DataList();\n+    for (Object o : dataList)\n+    {\n+      dataListWithDefault.add(fillInDataDefault(itemDataSchema, o));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9827904cb299eb93d624530e2435a0e023944999"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5ODEyMA==", "bodyText": "use CheckedUtil::*withoutChecking methods.", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r468098120", "createdAt": "2020-08-10T18:30:57Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +95,96 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  private static Object fillInDataDefault(DataSchema schema, Object dataWithoutDefault)\n+  {\n+    switch (schema.getType())\n+    {\n+      case RECORD:\n+        return fillInDefaultOnRecord((RecordDataSchema) schema, (DataMap) dataWithoutDefault);\n+      case TYPEREF:\n+        return fillInDefaultOnTyperef((TyperefDataSchema) schema, dataWithoutDefault);\n+      case MAP:\n+        return fillInDefaultOnMap((MapDataSchema) schema, (DataMap) dataWithoutDefault);\n+      case UNION:\n+        return fillInDefaultOnUnion((UnionDataSchema) schema, (DataMap) dataWithoutDefault);\n+      case ARRAY:\n+        return fillInDefaultOnArray((ArrayDataSchema) schema, (DataList) dataWithoutDefault);\n+      default:\n+        return dataWithoutDefault;\n+    }\n+  }\n+\n+  public static DataMap fillInDefaultOnRecord(RecordDataSchema schema, DataMap dataMap)\n+  {\n+    DataMap dataWithDefault = new DataMap(DataMapBuilder.getOptimumHashMapCapacityFromSize(dataMap.size()));\n+    dataWithDefault.putAll(dataMap);\n+    for (RecordDataSchema.Field field : schema.getFields())\n+    {\n+      if (dataMap.containsKey(field.getName()) || field.getDefault() != null)\n+      {\n+        Object fieldData = dataMap.containsKey(field.getName()) ? dataMap.get(field.getName()) : field.getDefault();\n+        dataWithDefault.put(field.getName(), fillInDataDefault(field.getType(), fieldData));\n+      }\n+    }\n+    return dataWithDefault;\n+  }\n+\n+  public static DataMap fillInDefaultOnMap(MapDataSchema schema, DataMap dataMap)\n+  {\n+    DataSchema valueSchema = schema.getValues();\n+    DataMap dataWithDefault = new DataMap(dataMap);\n+    for (Map.Entry<String, Object> entry : dataWithDefault.entrySet())\n+    {\n+      dataWithDefault.put(entry.getKey(), fillInDataDefault(valueSchema, entry.getValue()));\n+    }\n+    return dataWithDefault;\n+  }\n+\n+  public static DataList fillInDefaultOnArray(ArrayDataSchema schema, DataList dataList)\n+  {\n+    DataSchema itemDataSchema = schema.getItems();\n+    DataList dataListWithDefault = new DataList();\n+    for (Object o : dataList)\n+    {\n+      dataListWithDefault.add(fillInDataDefault(itemDataSchema, o));\n+    }\n+    return dataListWithDefault;\n+  }\n+\n+  public static DataMap fillInDefaultOnUnion(UnionDataSchema schema, DataMap dataMap)\n+  {\n+    DataMap dataWithDefault = new DataMap(dataMap);\n+    if (dataWithDefault.size() == 1)\n+    {\n+      for (Map.Entry<String, Object> entry: dataWithDefault.entrySet())\n+      {\n+        String memberTypeKey = entry.getKey();\n+        DataSchema memberDataSchema = schema.getTypeByMemberKey(memberTypeKey);\n+        if (memberDataSchema == null)\n+        {\n+          return dataWithDefault;\n+        }\n+        dataWithDefault.put(memberTypeKey, fillInDataDefault(memberDataSchema, entry.getValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9827904cb299eb93d624530e2435a0e023944999"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5OTAwMw==", "bodyText": "This will check all the entries again.. so better option is to create an empty dataMap and put items inside the loop without checking\n(Similar to how you are handling lists)", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r468099003", "createdAt": "2020-08-10T18:32:42Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +95,96 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  private static Object fillInDataDefault(DataSchema schema, Object dataWithoutDefault)\n+  {\n+    switch (schema.getType())\n+    {\n+      case RECORD:\n+        return fillInDefaultOnRecord((RecordDataSchema) schema, (DataMap) dataWithoutDefault);\n+      case TYPEREF:\n+        return fillInDefaultOnTyperef((TyperefDataSchema) schema, dataWithoutDefault);\n+      case MAP:\n+        return fillInDefaultOnMap((MapDataSchema) schema, (DataMap) dataWithoutDefault);\n+      case UNION:\n+        return fillInDefaultOnUnion((UnionDataSchema) schema, (DataMap) dataWithoutDefault);\n+      case ARRAY:\n+        return fillInDefaultOnArray((ArrayDataSchema) schema, (DataList) dataWithoutDefault);\n+      default:\n+        return dataWithoutDefault;\n+    }\n+  }\n+\n+  public static DataMap fillInDefaultOnRecord(RecordDataSchema schema, DataMap dataMap)\n+  {\n+    DataMap dataWithDefault = new DataMap(DataMapBuilder.getOptimumHashMapCapacityFromSize(dataMap.size()));\n+    dataWithDefault.putAll(dataMap);\n+    for (RecordDataSchema.Field field : schema.getFields())\n+    {\n+      if (dataMap.containsKey(field.getName()) || field.getDefault() != null)\n+      {\n+        Object fieldData = dataMap.containsKey(field.getName()) ? dataMap.get(field.getName()) : field.getDefault();\n+        dataWithDefault.put(field.getName(), fillInDataDefault(field.getType(), fieldData));\n+      }\n+    }\n+    return dataWithDefault;\n+  }\n+\n+  public static DataMap fillInDefaultOnMap(MapDataSchema schema, DataMap dataMap)\n+  {\n+    DataSchema valueSchema = schema.getValues();\n+    DataMap dataWithDefault = new DataMap(dataMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9827904cb299eb93d624530e2435a0e023944999"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5OTc4NQ==", "bodyText": "Do not initialize the default map with original data. Update it as you iterate the data to fill defaults, use putWithoutchecking", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r468099785", "createdAt": "2020-08-10T18:34:12Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +95,96 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  private static Object fillInDataDefault(DataSchema schema, Object dataWithoutDefault)\n+  {\n+    switch (schema.getType())\n+    {\n+      case RECORD:\n+        return fillInDefaultOnRecord((RecordDataSchema) schema, (DataMap) dataWithoutDefault);\n+      case TYPEREF:\n+        return fillInDefaultOnTyperef((TyperefDataSchema) schema, dataWithoutDefault);\n+      case MAP:\n+        return fillInDefaultOnMap((MapDataSchema) schema, (DataMap) dataWithoutDefault);\n+      case UNION:\n+        return fillInDefaultOnUnion((UnionDataSchema) schema, (DataMap) dataWithoutDefault);\n+      case ARRAY:\n+        return fillInDefaultOnArray((ArrayDataSchema) schema, (DataList) dataWithoutDefault);\n+      default:\n+        return dataWithoutDefault;\n+    }\n+  }\n+\n+  public static DataMap fillInDefaultOnRecord(RecordDataSchema schema, DataMap dataMap)\n+  {\n+    DataMap dataWithDefault = new DataMap(DataMapBuilder.getOptimumHashMapCapacityFromSize(dataMap.size()));\n+    dataWithDefault.putAll(dataMap);\n+    for (RecordDataSchema.Field field : schema.getFields())\n+    {\n+      if (dataMap.containsKey(field.getName()) || field.getDefault() != null)\n+      {\n+        Object fieldData = dataMap.containsKey(field.getName()) ? dataMap.get(field.getName()) : field.getDefault();\n+        dataWithDefault.put(field.getName(), fillInDataDefault(field.getType(), fieldData));\n+      }\n+    }\n+    return dataWithDefault;\n+  }\n+\n+  public static DataMap fillInDefaultOnMap(MapDataSchema schema, DataMap dataMap)\n+  {\n+    DataSchema valueSchema = schema.getValues();\n+    DataMap dataWithDefault = new DataMap(dataMap);\n+    for (Map.Entry<String, Object> entry : dataWithDefault.entrySet())\n+    {\n+      dataWithDefault.put(entry.getKey(), fillInDataDefault(valueSchema, entry.getValue()));\n+    }\n+    return dataWithDefault;\n+  }\n+\n+  public static DataList fillInDefaultOnArray(ArrayDataSchema schema, DataList dataList)\n+  {\n+    DataSchema itemDataSchema = schema.getItems();\n+    DataList dataListWithDefault = new DataList();\n+    for (Object o : dataList)\n+    {\n+      dataListWithDefault.add(fillInDataDefault(itemDataSchema, o));\n+    }\n+    return dataListWithDefault;\n+  }\n+\n+  public static DataMap fillInDefaultOnUnion(UnionDataSchema schema, DataMap dataMap)\n+  {\n+    DataMap dataWithDefault = new DataMap(dataMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9827904cb299eb93d624530e2435a0e023944999"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwMDc3OA==", "bodyText": "You don't need this method. Just make fillInDataDefault public and use that.", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r468100778", "createdAt": "2020-08-10T18:36:06Z", "author": {"login": "karthikbalasub"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +95,96 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  private static Object fillInDataDefault(DataSchema schema, Object dataWithoutDefault)\n+  {\n+    switch (schema.getType())\n+    {\n+      case RECORD:\n+        return fillInDefaultOnRecord((RecordDataSchema) schema, (DataMap) dataWithoutDefault);\n+      case TYPEREF:\n+        return fillInDefaultOnTyperef((TyperefDataSchema) schema, dataWithoutDefault);\n+      case MAP:\n+        return fillInDefaultOnMap((MapDataSchema) schema, (DataMap) dataWithoutDefault);\n+      case UNION:\n+        return fillInDefaultOnUnion((UnionDataSchema) schema, (DataMap) dataWithoutDefault);\n+      case ARRAY:\n+        return fillInDefaultOnArray((ArrayDataSchema) schema, (DataList) dataWithoutDefault);\n+      default:\n+        return dataWithoutDefault;\n+    }\n+  }\n+\n+  public static DataMap fillInDefaultOnRecord(RecordDataSchema schema, DataMap dataMap)\n+  {\n+    DataMap dataWithDefault = new DataMap(DataMapBuilder.getOptimumHashMapCapacityFromSize(dataMap.size()));\n+    dataWithDefault.putAll(dataMap);\n+    for (RecordDataSchema.Field field : schema.getFields())\n+    {\n+      if (dataMap.containsKey(field.getName()) || field.getDefault() != null)\n+      {\n+        Object fieldData = dataMap.containsKey(field.getName()) ? dataMap.get(field.getName()) : field.getDefault();\n+        dataWithDefault.put(field.getName(), fillInDataDefault(field.getType(), fieldData));\n+      }\n+    }\n+    return dataWithDefault;\n+  }\n+\n+  public static DataMap fillInDefaultOnMap(MapDataSchema schema, DataMap dataMap)\n+  {\n+    DataSchema valueSchema = schema.getValues();\n+    DataMap dataWithDefault = new DataMap(dataMap);\n+    for (Map.Entry<String, Object> entry : dataWithDefault.entrySet())\n+    {\n+      dataWithDefault.put(entry.getKey(), fillInDataDefault(valueSchema, entry.getValue()));\n+    }\n+    return dataWithDefault;\n+  }\n+\n+  public static DataList fillInDefaultOnArray(ArrayDataSchema schema, DataList dataList)\n+  {\n+    DataSchema itemDataSchema = schema.getItems();\n+    DataList dataListWithDefault = new DataList();\n+    for (Object o : dataList)\n+    {\n+      dataListWithDefault.add(fillInDataDefault(itemDataSchema, o));\n+    }\n+    return dataListWithDefault;\n+  }\n+\n+  public static DataMap fillInDefaultOnUnion(UnionDataSchema schema, DataMap dataMap)\n+  {\n+    DataMap dataWithDefault = new DataMap(dataMap);\n+    if (dataWithDefault.size() == 1)\n+    {\n+      for (Map.Entry<String, Object> entry: dataWithDefault.entrySet())\n+      {\n+        String memberTypeKey = entry.getKey();\n+        DataSchema memberDataSchema = schema.getTypeByMemberKey(memberTypeKey);\n+        if (memberDataSchema == null)\n+        {\n+          return dataWithDefault;\n+        }\n+        dataWithDefault.put(memberTypeKey, fillInDataDefault(memberDataSchema, entry.getValue()));\n+      }\n+    }\n+    return dataWithDefault;\n+  }\n+\n+  public static Object fillInDefaultOnTyperef(TyperefDataSchema typerefDataSchema, Object data)\n+  {\n+    DataSchema dataSchema = typerefDataSchema.getDereferencedDataSchema();\n+    return fillInDataDefault(dataSchema, data);\n+  }\n+\n+  public static DataMap fillInDefaultValues(DataSchema dataSchema, DataMap dataMap)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9827904cb299eb93d624530e2435a0e023944999"}, "originalPosition": 128}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9827904cb299eb93d624530e2435a0e023944999", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/9827904cb299eb93d624530e2435a0e023944999", "committedDate": "2020-08-07T20:44:56Z", "message": "Address logic simplification comment and case renaming comment"}, "afterCommit": {"oid": "fa6159a9b0b037b37fd6b1bab17e4e579bbbe417", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/fa6159a9b0b037b37fd6b1bab17e4e579bbbe417", "committedDate": "2020-08-12T06:00:04Z", "message": "address performance related comment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fa6159a9b0b037b37fd6b1bab17e4e579bbbe417", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/fa6159a9b0b037b37fd6b1bab17e4e579bbbe417", "committedDate": "2020-08-12T06:00:04Z", "message": "address performance related comment"}, "afterCommit": {"oid": "9dd9423bea7d526770ed897fd0be455f4de070cf", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/9dd9423bea7d526770ed897fd0be455f4de070cf", "committedDate": "2020-08-12T06:15:00Z", "message": "address performance related comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NjY2OTM1", "url": "https://github.com/linkedin/rest.li/pull/335#pullrequestreview-465666935", "createdAt": "2020-08-12T07:43:57Z", "commit": {"oid": "9dd9423bea7d526770ed897fd0be455f4de070cf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9dd9423bea7d526770ed897fd0be455f4de070cf", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/9dd9423bea7d526770ed897fd0be455f4de070cf", "committedDate": "2020-08-12T06:15:00Z", "message": "address performance related comment"}, "afterCommit": {"oid": "bbc6a802bd24b4fcb42c11eea1dd6f82a652b9dd", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/bbc6a802bd24b4fcb42c11eea1dd6f82a652b9dd", "committedDate": "2020-08-17T16:45:40Z", "message": "Update change log"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bcae5cb5931600d5ec701718c2c36ca64e10755a", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/bcae5cb5931600d5ec701718c2c36ca64e10755a", "committedDate": "2020-08-17T16:46:57Z", "message": "Fix version string"}, "afterCommit": {"oid": "a163e6d93a8fbf927de7f6e5281b610cfc1a2f0e", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/a163e6d93a8fbf927de7f6e5281b610cfc1a2f0e", "committedDate": "2020-08-18T06:29:08Z", "message": "Use dataMap clone instead of putWithoutChecking to reduce performance impact"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NzE2NDY2", "url": "https://github.com/linkedin/rest.li/pull/335#pullrequestreview-469716466", "createdAt": "2020-08-18T18:26:20Z", "commit": {"oid": "a163e6d93a8fbf927de7f6e5281b610cfc1a2f0e"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxODoyNjoyMVrOHCgz9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxODoyNzozOVrOHCg2qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM5Njc5MQ==", "bodyText": "add javadoc here", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r472396791", "createdAt": "2020-08-18T18:26:21Z", "author": {"login": "aman1309"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +93,93 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  public static Object fillInDataDefault(DataSchema schema, Object dataWithoutDefault)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a163e6d93a8fbf927de7f6e5281b610cfc1a2f0e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM5NzQ4Mw==", "bodyText": "change scope to private. not required to be exposed outside. same for other methods", "url": "https://github.com/linkedin/rest.li/pull/335#discussion_r472397483", "createdAt": "2020-08-18T18:27:39Z", "author": {"login": "aman1309"}, "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/ResponseUtils.java", "diffHunk": "@@ -84,6 +93,93 @@ static Object translateCanonicalKeyToAlternativeKeyIfNeeded(Object canonicalKey,\n     }\n   }\n \n+  public static Object fillInDataDefault(DataSchema schema, Object dataWithoutDefault)\n+  {\n+    try\n+    {\n+      switch (schema.getType())\n+      {\n+        case RECORD:\n+          return fillInDefaultOnRecord((RecordDataSchema) schema, (DataMap) dataWithoutDefault);\n+        case TYPEREF:\n+          return fillInDefaultOnTyperef((TyperefDataSchema) schema, dataWithoutDefault);\n+        case MAP:\n+          return fillInDefaultOnMap((MapDataSchema) schema, (DataMap) dataWithoutDefault);\n+        case UNION:\n+          return fillInDefaultOnUnion((UnionDataSchema) schema, (DataMap) dataWithoutDefault);\n+        case ARRAY:\n+          return fillInDefaultOnArray((ArrayDataSchema) schema, (DataList) dataWithoutDefault);\n+        default:\n+          return dataWithoutDefault;\n+      }\n+    }\n+    catch (CloneNotSupportedException ex)\n+    {\n+      throw new RestLiServiceException(HttpStatus.S_500_INTERNAL_SERVER_ERROR, ex);\n+    }\n+  }\n+\n+  public static DataMap fillInDefaultOnRecord(RecordDataSchema schema, DataMap dataMap) throws CloneNotSupportedException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a163e6d93a8fbf927de7f6e5281b610cfc1a2f0e"}, "originalPosition": 75}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a163e6d93a8fbf927de7f6e5281b610cfc1a2f0e", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/a163e6d93a8fbf927de7f6e5281b610cfc1a2f0e", "committedDate": "2020-08-18T06:29:08Z", "message": "Use dataMap clone instead of putWithoutChecking to reduce performance impact"}, "afterCommit": {"oid": "409ed62fb17a48648aa502cedf9973ea7b76bb46", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/409ed62fb17a48648aa502cedf9973ea7b76bb46", "committedDate": "2020-08-21T07:53:44Z", "message": "address comment on method scope"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "307a3566b44ddc1fd80b7a9b8237e31bed98ec31", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/307a3566b44ddc1fd80b7a9b8237e31bed98ec31", "committedDate": "2020-08-24T07:44:25Z", "message": "Add default values in response when the flag from the url is set"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b73b3e314542d4801b66365db7e3367b3fc8fbb1", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/b73b3e314542d4801b66365db7e3367b3fc8fbb1", "committedDate": "2020-08-24T07:44:25Z", "message": "Address Aman's comment about recursive resolve default values for record and fix the query key for this feature"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cb3ca70781e4e7e88a41ff70ad7f514c1c2ae06", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/9cb3ca70781e4e7e88a41ff70ad7f514c1c2ae06", "committedDate": "2020-08-24T07:44:25Z", "message": "Address comment: integration test and recursive resolve and typeref test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c68a4a87545db83506676ee251b9631b5c18b917", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/c68a4a87545db83506676ee251b9631b5c18b917", "committedDate": "2020-08-24T07:44:25Z", "message": "Fix integration test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bd6141324db1856d9abee232d5b74cb99ff7365", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/4bd6141324db1856d9abee232d5b74cb99ff7365", "committedDate": "2020-08-24T07:44:25Z", "message": "Address Karthiks comment about design"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f8eed14e7352cf0964a7881964cf4bfcbdbe88e", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/8f8eed14e7352cf0964a7881964cf4bfcbdbe88e", "committedDate": "2020-08-24T07:44:25Z", "message": "fix test failure in TestResourceSchemaCollection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3dcb85552f3653b177932480593368e1aa1a835a", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/3dcb85552f3653b177932480593368e1aa1a835a", "committedDate": "2020-08-24T07:44:25Z", "message": "address Evan's comment regarding placeholder class in test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf24dbd3621c9f4f9ae58a612fd44110c5d082a6", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/bf24dbd3621c9f4f9ae58a612fd44110c5d082a6", "committedDate": "2020-08-24T07:44:25Z", "message": "address Karthiks comment about right place to fill in default, also review the logic of filling defaults"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e82f796f7b91e25261d42a3479f2cfbfc2be202", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/3e82f796f7b91e25261d42a3479f2cfbfc2be202", "committedDate": "2020-08-24T07:44:25Z", "message": "address Evan naming comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4047975c79b41cf1457725b38e511ef8e4bfc405", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/4047975c79b41cf1457725b38e511ef8e4bfc405", "committedDate": "2020-08-24T07:44:25Z", "message": "Add function mock to address test regressions caused by the new method of resource context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15b992d6f281f0b4dde00e80f157a253d892b1d5", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/15b992d6f281f0b4dde00e80f157a253d892b1d5", "committedDate": "2020-08-24T07:44:25Z", "message": "Address Karthiks comment: array test cases, simplify logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a35a2c37f608f4dd1baf9a22a67d5d89748cb2ae", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/a35a2c37f608f4dd1baf9a22a67d5d89748cb2ae", "committedDate": "2020-08-24T07:44:25Z", "message": "Add server config logic in code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b555a312099de17a5117f0cd2e5f048d494830d0", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/b555a312099de17a5117f0cd2e5f048d494830d0", "committedDate": "2020-08-24T07:44:25Z", "message": "Address comment for clarity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "793f6419fdfe8446341a5df1782dc58bff3a6e30", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/793f6419fdfe8446341a5df1782dc58bff3a6e30", "committedDate": "2020-08-24T07:44:25Z", "message": "add union method and re-org test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58e8ea8272b72fc5d4084422122e9be77ebcfa86", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/58e8ea8272b72fc5d4084422122e9be77ebcfa86", "committedDate": "2020-08-24T07:44:25Z", "message": "address Aman javadoc comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecd3ddcfdc82367b38f81384e25aede4b06a5171", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/ecd3ddcfdc82367b38f81384e25aede4b06a5171", "committedDate": "2020-08-24T07:44:25Z", "message": "update changelog.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f39f3c1023fd79c185e53636c412e3d30947827", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/8f39f3c1023fd79c185e53636c412e3d30947827", "committedDate": "2020-08-24T07:44:25Z", "message": "Fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08362edd6ff6eadc2ca3c2c41a7bbff24aca00b4", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/08362edd6ff6eadc2ca3c2c41a7bbff24aca00b4", "committedDate": "2020-08-24T07:44:25Z", "message": "Address logic simplification comment and case renaming comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "436bab3e63d7c17615c4feccb732259825cc08b5", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/436bab3e63d7c17615c4feccb732259825cc08b5", "committedDate": "2020-08-24T07:44:25Z", "message": "address performance related comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ead1d477885929de308e25a636119f9fe069b13", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/2ead1d477885929de308e25a636119f9fe069b13", "committedDate": "2020-08-24T07:44:25Z", "message": "Update change log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9572e80c471f843034f97a31b79ed3bf8c335b22", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/9572e80c471f843034f97a31b79ed3bf8c335b22", "committedDate": "2020-08-24T07:44:25Z", "message": "Fix version string"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0d533df508a3a213cf4b1909c9100e751792a60", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/e0d533df508a3a213cf4b1909c9100e751792a60", "committedDate": "2020-08-24T07:44:26Z", "message": "Use dataMap clone instead of putWithoutChecking to reduce performance impact"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2fb120145b0af84c49c14771a7aaf137955bc97", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/c2fb120145b0af84c49c14771a7aaf137955bc97", "committedDate": "2020-08-24T07:44:26Z", "message": "address comment on method scope"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "566703eb6c3bfde63d344ce8f2b149e22b0ff1e1", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/566703eb6c3bfde63d344ce8f2b149e22b0ff1e1", "committedDate": "2020-08-24T07:44:26Z", "message": "Advance version in change log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "883b9665a463ea86ff0571d6944024f832977cd8", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/883b9665a463ea86ff0571d6944024f832977cd8", "committedDate": "2020-08-24T07:46:04Z", "message": "Update change log"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "409ed62fb17a48648aa502cedf9973ea7b76bb46", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/409ed62fb17a48648aa502cedf9973ea7b76bb46", "committedDate": "2020-08-21T07:53:44Z", "message": "address comment on method scope"}, "afterCommit": {"oid": "883b9665a463ea86ff0571d6944024f832977cd8", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/883b9665a463ea86ff0571d6944024f832977cd8", "committedDate": "2020-08-24T07:46:04Z", "message": "Update change log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c33c62d0ba896a583459a000e1fd088042bb016", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/6c33c62d0ba896a583459a000e1fd088042bb016", "committedDate": "2020-08-24T15:46:11Z", "message": "Fix merge error on changelog"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4855, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}