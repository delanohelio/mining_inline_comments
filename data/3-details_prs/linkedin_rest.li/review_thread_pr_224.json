{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMTk0MjM2", "number": 224, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDo0MDoxMlrODo96-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNjowOTowNlrODo-syw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0Mjg0MTUyOnYy", "diffSide": "RIGHT", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/SchemaFormatTranslator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDo0MDoxMlrOF32J2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNjozNTo1M1rOF3314Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwMzI1OQ==", "bodyText": "the log will be huge, shall we use LOGGER.debug instead?", "url": "https://github.com/linkedin/rest.li/pull/224#discussion_r394103259", "createdAt": "2020-03-18T04:40:12Z", "author": {"login": "nickibi"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/SchemaFormatTranslator.java", "diffHunk": "@@ -268,8 +282,13 @@ private void verifyTranslatedSchemas(Map<String, SchemaInfo> topLevelTranslatedS\n         if (!sourceSchema.equals(destSchema))\n         {\n           LOGGER.error(\"Translation failed for schema: {}\", schemaName);\n-          LOGGER.error(\"Source format: {}, schema:\\n{}\", _sourceFormat, sourceSchema.toString());\n-          LOGGER.error(\"Destination format: {}, schema:\\n{}\", _destFormat, destSchema.toString());\n+          // Write the translated schema to temp dir.\n+          File sourceFile = new File(errorSchemasDir, sourceSchema.getName() + \"_\" + _sourceFormat);\n+          FileUtils.writeStringToFile(sourceFile, SchemaToJsonEncoder.schemaToJson(sourceSchema, JsonBuilder.Pretty.INDENTED));\n+          File destFile = new File(errorSchemasDir, sourceSchema.getName() + \"_\" + _destFormat);\n+          FileUtils.writeStringToFile(destFile, SchemaToJsonEncoder.schemaToJson(destSchema, JsonBuilder.Pretty.INDENTED));\n+          LOGGER.error(\"To see the difference between source and tanslated schemas, run: \");\n+          LOGGER.error(\"diff {} {}\", sourceFile.getAbsolutePath(), destFile.getAbsolutePath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f2e7f504a072cee06c862d324dd56a06e5bb094"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEzMDkxMw==", "bodyText": "This is logging the file name, not contents of the file", "url": "https://github.com/linkedin/rest.li/pull/224#discussion_r394130913", "createdAt": "2020-03-18T06:35:53Z", "author": {"login": "karthikbalasub"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/SchemaFormatTranslator.java", "diffHunk": "@@ -268,8 +282,13 @@ private void verifyTranslatedSchemas(Map<String, SchemaInfo> topLevelTranslatedS\n         if (!sourceSchema.equals(destSchema))\n         {\n           LOGGER.error(\"Translation failed for schema: {}\", schemaName);\n-          LOGGER.error(\"Source format: {}, schema:\\n{}\", _sourceFormat, sourceSchema.toString());\n-          LOGGER.error(\"Destination format: {}, schema:\\n{}\", _destFormat, destSchema.toString());\n+          // Write the translated schema to temp dir.\n+          File sourceFile = new File(errorSchemasDir, sourceSchema.getName() + \"_\" + _sourceFormat);\n+          FileUtils.writeStringToFile(sourceFile, SchemaToJsonEncoder.schemaToJson(sourceSchema, JsonBuilder.Pretty.INDENTED));\n+          File destFile = new File(errorSchemasDir, sourceSchema.getName() + \"_\" + _destFormat);\n+          FileUtils.writeStringToFile(destFile, SchemaToJsonEncoder.schemaToJson(destSchema, JsonBuilder.Pretty.INDENTED));\n+          LOGGER.error(\"To see the difference between source and tanslated schemas, run: \");\n+          LOGGER.error(\"diff {} {}\", sourceFile.getAbsolutePath(), destFile.getAbsolutePath());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwMzI1OQ=="}, "originalCommit": {"oid": "0f2e7f504a072cee06c862d324dd56a06e5bb094"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjkyOTE1OnYy", "diffSide": "RIGHT", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/SchemaFormatTranslator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNTo0NDozMVrOF33BMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNTo0NDozMVrOF33BMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExNzQyNA==", "bodyText": "By RE convention \"\\s+$\" is what is usually used.", "url": "https://github.com/linkedin/rest.li/pull/224#discussion_r394117424", "createdAt": "2020-03-18T05:44:31Z", "author": {"login": "junchuanwang"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/SchemaFormatTranslator.java", "diffHunk": "@@ -59,6 +60,8 @@\n {\n   private static final Logger LOGGER = LoggerFactory.getLogger(SchemaFormatTranslator.class);\n \n+  private static final Pattern LINE_END_SPACES = Pattern.compile(\" +$\", Pattern.MULTILINE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f2e7f504a072cee06c862d324dd56a06e5bb094"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0Mjk2OTA3OnYy", "diffSide": "RIGHT", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/SchemaFormatTranslator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNjowOTowNlrOF33aKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNjowOTowNlrOF33aKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEyMzgxOA==", "bodyText": "I understand you want to show them in two lines, but following code would feel better\nLOGGER.error(\"To see the difference between source and tanslated schemas, run: \\n diff {} {}\", sourceFile.getAbsolutePath(), destFile.getAbsolutePath());", "url": "https://github.com/linkedin/rest.li/pull/224#discussion_r394123818", "createdAt": "2020-03-18T06:09:06Z", "author": {"login": "junchuanwang"}, "path": "restli-tools/src/main/java/com/linkedin/restli/tools/data/SchemaFormatTranslator.java", "diffHunk": "@@ -268,8 +282,13 @@ private void verifyTranslatedSchemas(Map<String, SchemaInfo> topLevelTranslatedS\n         if (!sourceSchema.equals(destSchema))\n         {\n           LOGGER.error(\"Translation failed for schema: {}\", schemaName);\n-          LOGGER.error(\"Source format: {}, schema:\\n{}\", _sourceFormat, sourceSchema.toString());\n-          LOGGER.error(\"Destination format: {}, schema:\\n{}\", _destFormat, destSchema.toString());\n+          // Write the translated schema to temp dir.\n+          File sourceFile = new File(errorSchemasDir, sourceSchema.getName() + \"_\" + _sourceFormat);\n+          FileUtils.writeStringToFile(sourceFile, SchemaToJsonEncoder.schemaToJson(sourceSchema, JsonBuilder.Pretty.INDENTED));\n+          File destFile = new File(errorSchemasDir, sourceSchema.getName() + \"_\" + _destFormat);\n+          FileUtils.writeStringToFile(destFile, SchemaToJsonEncoder.schemaToJson(destSchema, JsonBuilder.Pretty.INDENTED));\n+          LOGGER.error(\"To see the difference between source and tanslated schemas, run: \");\n+          LOGGER.error(\"diff {} {}\", sourceFile.getAbsolutePath(), destFile.getAbsolutePath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f2e7f504a072cee06c862d324dd56a06e5bb094"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 631, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}