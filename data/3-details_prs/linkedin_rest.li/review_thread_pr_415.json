{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4ODE0NTgx", "number": 415, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODoxODoyNFrOEk3bmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMTo0MTo0MVrOElH-Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDkyMzc5OnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/BackupRequestsClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODoxODoyNFrOHUC5Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODozODoxNVrOHWdrBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4MTAyMw==", "bodyText": "This is still calling the sync implementation, right?", "url": "https://github.com/linkedin/rest.li/pull/415#discussion_r490781023", "createdAt": "2020-09-18T08:18:24Z", "author": {"login": "ssheng"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/BackupRequestsClient.java", "diffHunk": "@@ -195,24 +247,65 @@ public void restRequest(final RestRequest request, final RequestContext requestC\n    */\n   private void updateIfNeeded(String serviceName)\n   {\n-    List<Map<String, Object>> existing = _configs.get(serviceName);\n     try\n     {\n       ServiceProperties serviceProperties = _loadBalancer.getLoadBalancedServiceProperties(serviceName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dae98b22b40b3e96eeb3f228b8c71d2422212c42"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA4NTY5OQ==", "bodyText": "I created another method updatedIfNeeded(serviceName, callback) and introduced a configuration. If async is enabled, this path won't be invoked, the async path will be invoked instead. I did not remove the blocking path in the code, the control is from the config.", "url": "https://github.com/linkedin/rest.li/pull/415#discussion_r491085699", "createdAt": "2020-09-18T17:16:16Z", "author": {"login": "rachelhanhan"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/BackupRequestsClient.java", "diffHunk": "@@ -195,24 +247,65 @@ public void restRequest(final RestRequest request, final RequestContext requestC\n    */\n   private void updateIfNeeded(String serviceName)\n   {\n-    List<Map<String, Object>> existing = _configs.get(serviceName);\n     try\n     {\n       ServiceProperties serviceProperties = _loadBalancer.getLoadBalancedServiceProperties(serviceName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4MTAyMw=="}, "originalCommit": {"oid": "dae98b22b40b3e96eeb3f228b8c71d2422212c42"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMxNjg3MQ==", "bodyText": "Got it.", "url": "https://github.com/linkedin/rest.li/pull/415#discussion_r493316871", "createdAt": "2020-09-23T08:38:15Z", "author": {"login": "ssheng"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/BackupRequestsClient.java", "diffHunk": "@@ -195,24 +247,65 @@ public void restRequest(final RestRequest request, final RequestContext requestC\n    */\n   private void updateIfNeeded(String serviceName)\n   {\n-    List<Map<String, Object>> existing = _configs.get(serviceName);\n     try\n     {\n       ServiceProperties serviceProperties = _loadBalancer.getLoadBalancedServiceProperties(serviceName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4MTAyMw=="}, "originalCommit": {"oid": "dae98b22b40b3e96eeb3f228b8c71d2422212c42"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzYzMTkwOnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/BackupRequestsClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMTo0MDo1MFrOHUco5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwMDoyMDowNVrOHUfEyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIwMjc5MQ==", "bodyText": "We now have 2 copies of getStrategy (one sync one async) with almost identical functionality. Can we just keep the async one? You can always wait the results if sync operation is needed.\nIf necessary, just keep requestAsync and let request to call into requestAsync.", "url": "https://github.com/linkedin/rest.li/pull/415#discussion_r491202791", "createdAt": "2020-09-18T21:40:50Z", "author": {"login": "cx-super"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/BackupRequestsClient.java", "diffHunk": "@@ -195,24 +247,65 @@ public void restRequest(final RestRequest request, final RequestContext requestC\n    */\n   private void updateIfNeeded(String serviceName)\n   {\n-    List<Map<String, Object>> existing = _configs.get(serviceName);\n     try\n     {\n       ServiceProperties serviceProperties = _loadBalancer.getLoadBalancedServiceProperties(serviceName);\n-      if (serviceProperties != null)\n-      {\n-        if (existing != serviceProperties.getBackupRequests())\n-        { // reference inequality check\n-          update(serviceName, serviceProperties.getBackupRequests());\n-          _configs.put(serviceName, serviceProperties.getBackupRequests());\n-        }\n-      }\n-    } catch (ServiceUnavailableException e)\n+      updateServiceProperties(serviceName, serviceProperties);\n+    }\n+    catch (ServiceUnavailableException e)\n     {\n       LOG.debug(\"Failed to fetch backup requests strategy \", e);\n     }\n   }\n \n+  private void updateServiceProperties(String serviceName, ServiceProperties serviceProperties)\n+  {\n+    List<Map<String, Object>> existing = _configs.get(serviceName);\n+    if (serviceProperties != null)\n+    {\n+      if (existing != serviceProperties.getBackupRequests())\n+      { // reference inequality check\n+        update(serviceName, serviceProperties.getBackupRequests());\n+        _configs.put(serviceName, serviceProperties.getBackupRequests());\n+      }\n+    }\n+  }\n+\n+  void getStrategy(final String serviceName, final String operation, Callback<Optional<TrackingBackupRequestsStrategy>> callback) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dae98b22b40b3e96eeb3f228b8c71d2422212c42"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI0MjY5Nw==", "bodyText": "I refactored the code a little bit more for better readability. Yes I have 2 copies of the same logic, because I want to be more cautious and reduce the risk. Most of the common logics have been extracted from the 2 copies though. When we want to clean up the blocking call later, it should be fairly easy to clean them up", "url": "https://github.com/linkedin/rest.li/pull/415#discussion_r491242697", "createdAt": "2020-09-19T00:20:05Z", "author": {"login": "rachelhanhan"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/BackupRequestsClient.java", "diffHunk": "@@ -195,24 +247,65 @@ public void restRequest(final RestRequest request, final RequestContext requestC\n    */\n   private void updateIfNeeded(String serviceName)\n   {\n-    List<Map<String, Object>> existing = _configs.get(serviceName);\n     try\n     {\n       ServiceProperties serviceProperties = _loadBalancer.getLoadBalancedServiceProperties(serviceName);\n-      if (serviceProperties != null)\n-      {\n-        if (existing != serviceProperties.getBackupRequests())\n-        { // reference inequality check\n-          update(serviceName, serviceProperties.getBackupRequests());\n-          _configs.put(serviceName, serviceProperties.getBackupRequests());\n-        }\n-      }\n-    } catch (ServiceUnavailableException e)\n+      updateServiceProperties(serviceName, serviceProperties);\n+    }\n+    catch (ServiceUnavailableException e)\n     {\n       LOG.debug(\"Failed to fetch backup requests strategy \", e);\n     }\n   }\n \n+  private void updateServiceProperties(String serviceName, ServiceProperties serviceProperties)\n+  {\n+    List<Map<String, Object>> existing = _configs.get(serviceName);\n+    if (serviceProperties != null)\n+    {\n+      if (existing != serviceProperties.getBackupRequests())\n+      { // reference inequality check\n+        update(serviceName, serviceProperties.getBackupRequests());\n+        _configs.put(serviceName, serviceProperties.getBackupRequests());\n+      }\n+    }\n+  }\n+\n+  void getStrategy(final String serviceName, final String operation, Callback<Optional<TrackingBackupRequestsStrategy>> callback) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIwMjc5MQ=="}, "originalCommit": {"oid": "dae98b22b40b3e96eeb3f228b8c71d2422212c42"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzYzMzg2OnYy", "diffSide": "RIGHT", "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/BackupRequestsClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMTo0MTo0MVrOHUcqGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMTo0MTo0MVrOHUcqGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIwMzA5Nw==", "bodyText": "Ditto -- prefer to have one implementation.", "url": "https://github.com/linkedin/rest.li/pull/415#discussion_r491203097", "createdAt": "2020-09-18T21:41:41Z", "author": {"login": "cx-super"}, "path": "d2/src/main/java/com/linkedin/d2/balancer/clients/BackupRequestsClient.java", "diffHunk": "@@ -195,24 +247,65 @@ public void restRequest(final RestRequest request, final RequestContext requestC\n    */\n   private void updateIfNeeded(String serviceName)\n   {\n-    List<Map<String, Object>> existing = _configs.get(serviceName);\n     try\n     {\n       ServiceProperties serviceProperties = _loadBalancer.getLoadBalancedServiceProperties(serviceName);\n-      if (serviceProperties != null)\n-      {\n-        if (existing != serviceProperties.getBackupRequests())\n-        { // reference inequality check\n-          update(serviceName, serviceProperties.getBackupRequests());\n-          _configs.put(serviceName, serviceProperties.getBackupRequests());\n-        }\n-      }\n-    } catch (ServiceUnavailableException e)\n+      updateServiceProperties(serviceName, serviceProperties);\n+    }\n+    catch (ServiceUnavailableException e)\n     {\n       LOG.debug(\"Failed to fetch backup requests strategy \", e);\n     }\n   }\n \n+  private void updateServiceProperties(String serviceName, ServiceProperties serviceProperties)\n+  {\n+    List<Map<String, Object>> existing = _configs.get(serviceName);\n+    if (serviceProperties != null)\n+    {\n+      if (existing != serviceProperties.getBackupRequests())\n+      { // reference inequality check\n+        update(serviceName, serviceProperties.getBackupRequests());\n+        _configs.put(serviceName, serviceProperties.getBackupRequests());\n+      }\n+    }\n+  }\n+\n+  void getStrategy(final String serviceName, final String operation, Callback<Optional<TrackingBackupRequestsStrategy>> callback) {\n+    Callback<None> updatePropertiesCallback = new Callback<None>() {\n+      @Override\n+      public void onError(Throwable e) {\n+        callback.onError(e);\n+      }\n+\n+      @Override\n+      public void onSuccess(None result) {\n+        callback.onSuccess(getStrategyAfterUpdate(serviceName, operation));\n+      }\n+    };\n+\n+    updateIfNeeded(serviceName, updatePropertiesCallback);\n+  }\n+\n+  private void updateIfNeeded(String serviceName, Callback<None> callback)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dae98b22b40b3e96eeb3f228b8c71d2422212c42"}, "originalPosition": 145}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 352, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}