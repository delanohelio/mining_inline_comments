{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczOTg3MzQ3", "number": 166, "title": "Change pdl property encoding logic to not flatten if nested branches > 1", "bodyText": "Change pdl property encoding logic to not flatten if nested branches > 1", "createdAt": "2020-02-11T23:41:36Z", "url": "https://github.com/linkedin/rest.li/pull/166", "merged": true, "mergeCommit": {"oid": "931323b526e9eb63307d31783e11a8fa2e1f5392"}, "closed": true, "closedAt": "2020-02-13T00:55:51Z", "author": {"login": "aman1309"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDafcgAH2gAyMzczOTg3MzQ3OjVmYTc4ZDZjNTRhODBlMzdhN2U5NmMxYzMzNjdhNWUyZjc0OWJhYzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDwLTvgFqTM1Nzg5MjI2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5fa78d6c54a80e37a7e96c1c3367a5e2f749bac3", "author": {"user": null}, "url": "https://github.com/linkedin/rest.li/commit/5fa78d6c54a80e37a7e96c1c3367a5e2f749bac3", "committedDate": "2020-02-11T23:39:44Z", "message": "Change pdl property encoding logic to not flatten if there are more than 1 branch in structure"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MTMwODM2", "url": "https://github.com/linkedin/rest.li/pull/166#pullrequestreview-357130836", "createdAt": "2020-02-12T01:13:26Z", "commit": {"oid": "5fa78d6c54a80e37a7e96c1c3367a5e2f749bac3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMToxMzoyNlrOFoey6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMToyMzozN1rOFoe8qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MTkxMw==", "bodyText": "Most of the comments in this method are now invalid. You should update them.\n\nFavor @x.y.z = \"value\" property encoding style over @x = { \"y\": { \"z\": \"value\" } }\nencode non-empty value property like @x.y.z = \"value\"\nencode empty value property like @x.y = {}\n\nI'd also suggest cleaning this up.\n\nUse shorthand for boolean true.  Instead of writing \"@deprecated = true\",\nwrite \"@deprecated\".\n\nAlso, remove this from the method javadoc.\n\nTODO: Support configuration for preferring collapsed \"map\" style over expanded \"path\" style.", "url": "https://github.com/linkedin/rest.li/pull/166#discussion_r377991913", "createdAt": "2020-02-12T01:13:26Z", "author": {"login": "evanw555"}, "path": "data/src/main/java/com/linkedin/data/schema/PdlBuilder.java", "diffHunk": "@@ -149,7 +149,7 @@ PdlBuilder writeProperties(List<String> prefix, Map<String, Object> properties)\n       {\n         // Favor @x.y.z = \"value\" property encoding style over @x = { \"y\": { \"z\": \"value\" } }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fa78d6c54a80e37a7e96c1c3367a5e2f749bac3"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MjAyNg==", "bodyText": "Redundant. Just dm.size() == 1 suffices.", "url": "https://github.com/linkedin/rest.li/pull/166#discussion_r377992026", "createdAt": "2020-02-12T01:13:53Z", "author": {"login": "evanw555"}, "path": "data/src/main/java/com/linkedin/data/schema/PdlBuilder.java", "diffHunk": "@@ -149,7 +149,7 @@ PdlBuilder writeProperties(List<String> prefix, Map<String, Object> properties)\n       {\n         // Favor @x.y.z = \"value\" property encoding style over @x = { \"y\": { \"z\": \"value\" } }\n         DataMap dm = (DataMap) value;\n-        if (!dm.isEmpty())\n+        if (!dm.isEmpty() && dm.size() == 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fa78d6c54a80e37a7e96c1c3367a5e2f749bac3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5NDQwOA==", "bodyText": "By adding more test cases that don't apply to the original intent of the test method, this becomes more confusing. I'd suggest making this more generalized of a method which just tests custom property encoding.\nHowever, this brings up another interesting point. This test assumes the ordering of properties, which is currently NOT deterministic. I'd suggest keeping the tests right now limited to only one property per test case, and adding a TODO to be addressed by whoever implements deterministic ordering. In addition, this sort of testing should be done by PdlEncoderTest, which makes testing the encoder much easier. You can avoid defining the schema as a string literal.", "url": "https://github.com/linkedin/rest.li/pull/166#discussion_r377994408", "createdAt": "2020-02-12T01:23:37Z", "author": {"login": "evanw555"}, "path": "data/src/test/java/com/linkedin/data/schema/TestSchemaToPdlEncoder.java", "diffHunk": "@@ -22,19 +22,38 @@\n import java.io.StringWriter;\n import java.util.HashMap;\n import java.util.Map;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n import org.testng.annotations.Test;\n \n import static org.junit.Assert.*;\n \n \n public class TestSchemaToPdlEncoder\n {\n-  @Test\n-  public void testEncodeRecordWithEmptyDataMapInProperty() throws IOException\n+\n+  @DataProvider\n+  private static Object[][] recordSchemaProvider()\n+  {\n+    DataMap properties1 = new DataMap();\n+    properties1.put(\"empty\", new DataMap());\n+    DataMap properties2 = new DataMap();\n+    properties2.put(\"validate\", properties1);\n+    DataMap properties3 = new DataMap();\n+    DataMap nestedMap = new DataMap(properties2);\n+    nestedMap.putAll(properties1);\n+    properties3.put(\"nested\", nestedMap);\n+    return new Object[][]{{properties1, \"namespace com.linkedin.test\\n\" + \"\\n\" + \"@empty = {}\\nrecord RecordDataSchema {}\"},\n+        {properties2, \"namespace com.linkedin.test\\n\" + \"\\n\" + \"@validate.empty = {}\\n\" + \"@empty = {}\\nrecord RecordDataSchema {}\"},\n+        {properties3, \"namespace com.linkedin.test\\n\" + \"\\n\" + \"@nested = {\\\"validate\\\":{\\\"empty\\\":{}},\\\"empty\\\":{}}\\n\"\n+            + \"@empty = {}\\n\" + \"record RecordDataSchema {}\"}};\n+  }\n+\n+  @Test(dataProvider = \"recordSchemaProvider\")\n+  public void testEncodeRecordWithEmptyDataMapInProperty(Map<String, Object> properties, String pdlString) throws IOException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fa78d6c54a80e37a7e96c1c3367a5e2f749bac3"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MTQyOTk4", "url": "https://github.com/linkedin/rest.li/pull/166#pullrequestreview-357142998", "createdAt": "2020-02-12T01:54:36Z", "commit": {"oid": "5fa78d6c54a80e37a7e96c1c3367a5e2f749bac3"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMTo1NDozNlrOFofakQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMTo1NjoyMlrOFofcQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwMjA2NQ==", "bodyText": "Remove this line and fix the test data accordingly. It is cleaner that way.", "url": "https://github.com/linkedin/rest.li/pull/166#discussion_r378002065", "createdAt": "2020-02-12T01:54:36Z", "author": {"login": "karthikbalasub"}, "path": "data/src/test/java/com/linkedin/data/schema/TestSchemaToPdlEncoder.java", "diffHunk": "@@ -22,19 +22,38 @@\n import java.io.StringWriter;\n import java.util.HashMap;\n import java.util.Map;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n import org.testng.annotations.Test;\n \n import static org.junit.Assert.*;\n \n \n public class TestSchemaToPdlEncoder\n {\n-  @Test\n-  public void testEncodeRecordWithEmptyDataMapInProperty() throws IOException\n+\n+  @DataProvider\n+  private static Object[][] recordSchemaProvider()\n+  {\n+    DataMap properties1 = new DataMap();\n+    properties1.put(\"empty\", new DataMap());\n+    DataMap properties2 = new DataMap();\n+    properties2.put(\"validate\", properties1);\n+    DataMap properties3 = new DataMap();\n+    DataMap nestedMap = new DataMap(properties2);\n+    nestedMap.putAll(properties1);\n+    properties3.put(\"nested\", nestedMap);\n+    return new Object[][]{{properties1, \"namespace com.linkedin.test\\n\" + \"\\n\" + \"@empty = {}\\nrecord RecordDataSchema {}\"},\n+        {properties2, \"namespace com.linkedin.test\\n\" + \"\\n\" + \"@validate.empty = {}\\n\" + \"@empty = {}\\nrecord RecordDataSchema {}\"},\n+        {properties3, \"namespace com.linkedin.test\\n\" + \"\\n\" + \"@nested = {\\\"validate\\\":{\\\"empty\\\":{}},\\\"empty\\\":{}}\\n\"\n+            + \"@empty = {}\\n\" + \"record RecordDataSchema {}\"}};\n+  }\n+\n+  @Test(dataProvider = \"recordSchemaProvider\")\n+  public void testEncodeRecordWithEmptyDataMapInProperty(Map<String, Object> properties, String pdlString) throws IOException\n   {\n     RecordDataSchema source =\n         new RecordDataSchema(new Name(\"com.linkedin.test.RecordDataSchema\"), RecordDataSchema.RecordType.RECORD);\n-    Map<String, Object> properties = new HashMap<>();\n     properties.put(\"empty\", new DataMap());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fa78d6c54a80e37a7e96c1c3367a5e2f749bac3"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwMjQ5Ng==", "bodyText": "the !pathParts.empty() check in the else if block is redundant. Just make it else {\nAlso update the comment in that block, it is no longer only for empty datamap.", "url": "https://github.com/linkedin/rest.li/pull/166#discussion_r378002496", "createdAt": "2020-02-12T01:56:22Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/schema/PdlBuilder.java", "diffHunk": "@@ -149,7 +149,7 @@ PdlBuilder writeProperties(List<String> prefix, Map<String, Object> properties)\n       {\n         // Favor @x.y.z = \"value\" property encoding style over @x = { \"y\": { \"z\": \"value\" } }\n         DataMap dm = (DataMap) value;\n-        if (!dm.isEmpty())\n+        if (!dm.isEmpty() && dm.size() == 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fa78d6c54a80e37a7e96c1c3367a5e2f749bac3"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d02a6096df05ebf140ee359072df3f4db25fc85e", "author": {"user": {"login": "aman1309", "name": "Aman Gupta"}}, "url": "https://github.com/linkedin/rest.li/commit/d02a6096df05ebf140ee359072df3f4db25fc85e", "committedDate": "2020-02-12T22:27:04Z", "message": "address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3ODU0OTUw", "url": "https://github.com/linkedin/rest.li/pull/166#pullrequestreview-357854950", "createdAt": "2020-02-12T23:09:10Z", "commit": {"oid": "d02a6096df05ebf140ee359072df3f4db25fc85e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzowOToxMFrOFpB1Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzoxODowMlrOFpCArg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2NTkzMQ==", "bodyText": "License", "url": "https://github.com/linkedin/rest.li/pull/166#discussion_r378565931", "createdAt": "2020-02-12T23:09:10Z", "author": {"login": "evanw555"}, "path": "data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.linkedin.data.schema;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d02a6096df05ebf140ee359072df3f4db25fc85e"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2NjI5Mw==", "bodyText": "Add javadoc, my personal convention for test javadocs is: Tests for {@link PdlBuilder}.", "url": "https://github.com/linkedin/rest.li/pull/166#discussion_r378566293", "createdAt": "2020-02-12T23:10:18Z", "author": {"login": "evanw555"}, "path": "data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.linkedin.data.schema;\n+\n+import com.linkedin.data.DataMap;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.Collections;\n+import java.util.Map;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d02a6096df05ebf140ee359072df3f4db25fc85e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2Nzc3Ng==", "bodyText": "It's fine that each test (for now) has one root-level property, but none of them branch. Thus, these cases don't actually test your changes. You'll need to make this a little more comprehensive.", "url": "https://github.com/linkedin/rest.li/pull/166#discussion_r378567776", "createdAt": "2020-02-12T23:14:53Z", "author": {"login": "evanw555"}, "path": "data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.linkedin.data.schema;\n+\n+import com.linkedin.data.DataMap;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.Collections;\n+import java.util.Map;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestPdlBuilder {\n+\n+  @DataProvider\n+  private static Object[][] propertiesMapProvider()\n+  {\n+    DataMap properties1 = new DataMap();\n+    properties1.put(\"empty\", new DataMap());\n+    DataMap properties2 = new DataMap();\n+    properties2.put(\"validate\", properties1);\n+    DataMap properties3 = new DataMap();\n+    DataMap nestedMap = new DataMap(properties2);\n+    nestedMap.putAll(properties1);\n+    properties3.put(\"nested\", nestedMap);\n+    return new Object[][]{{properties1, \"@empty = {}\\n\"},\n+        {properties2, \"@validate.empty = {}\\n\"}\n+        //TODO Add test case for multiple properties in a map level once iteration logic is fixed to be deterministic", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d02a6096df05ebf140ee359072df3f4db25fc85e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2ODA0MQ==", "bodyText": "nit: I'd suggest mapping the test method name directly to the method being tested; testing writeProperties -> testWriteProperties", "url": "https://github.com/linkedin/rest.li/pull/166#discussion_r378568041", "createdAt": "2020-02-12T23:15:40Z", "author": {"login": "evanw555"}, "path": "data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.linkedin.data.schema;\n+\n+import com.linkedin.data.DataMap;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.Collections;\n+import java.util.Map;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestPdlBuilder {\n+\n+  @DataProvider\n+  private static Object[][] propertiesMapProvider()\n+  {\n+    DataMap properties1 = new DataMap();\n+    properties1.put(\"empty\", new DataMap());\n+    DataMap properties2 = new DataMap();\n+    properties2.put(\"validate\", properties1);\n+    DataMap properties3 = new DataMap();\n+    DataMap nestedMap = new DataMap(properties2);\n+    nestedMap.putAll(properties1);\n+    properties3.put(\"nested\", nestedMap);\n+    return new Object[][]{{properties1, \"@empty = {}\\n\"},\n+        {properties2, \"@validate.empty = {}\\n\"}\n+        //TODO Add test case for multiple properties in a map level once iteration logic is fixed to be deterministic\n+    };\n+  }\n+\n+  @Test(dataProvider = \"propertiesMapProvider\")\n+  public void testPropertiesWriter(Map<String, Object> properties, String pdlString) throws IOException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d02a6096df05ebf140ee359072df3f4db25fc85e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2ODQ1NQ==", "bodyText": "Please use the Rest.li brace style convention (braces on new lines). This goes especially for your data provider, the return value should be expanded neatly.", "url": "https://github.com/linkedin/rest.li/pull/166#discussion_r378568455", "createdAt": "2020-02-12T23:16:52Z", "author": {"login": "evanw555"}, "path": "data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.linkedin.data.schema;\n+\n+import com.linkedin.data.DataMap;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.Collections;\n+import java.util.Map;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestPdlBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d02a6096df05ebf140ee359072df3f4db25fc85e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2ODg3OA==", "bodyText": "Your changes still don't address most of this.", "url": "https://github.com/linkedin/rest.li/pull/166#discussion_r378568878", "createdAt": "2020-02-12T23:18:02Z", "author": {"login": "evanw555"}, "path": "data/src/main/java/com/linkedin/data/schema/PdlBuilder.java", "diffHunk": "@@ -149,7 +149,7 @@ PdlBuilder writeProperties(List<String> prefix, Map<String, Object> properties)\n       {\n         // Favor @x.y.z = \"value\" property encoding style over @x = { \"y\": { \"z\": \"value\" } }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MTkxMw=="}, "originalCommit": {"oid": "5fa78d6c54a80e37a7e96c1c3367a5e2f749bac3"}, "originalPosition": 2}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7cb61e5c22ff28e74e75bff0fa547639f607b2e", "author": {"user": {"login": "aman1309", "name": "Aman Gupta"}}, "url": "https://github.com/linkedin/rest.li/commit/e7cb61e5c22ff28e74e75bff0fa547639f607b2e", "committedDate": "2020-02-13T00:41:07Z", "message": "address evan review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3ODg4NjQy", "url": "https://github.com/linkedin/rest.li/pull/166#pullrequestreview-357888642", "createdAt": "2020-02-13T00:44:36Z", "commit": {"oid": "e7cb61e5c22ff28e74e75bff0fa547639f607b2e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMDo0NDozNlrOFpDkaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMDo0NDozNlrOFpDkaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU5NDQxMQ==", "bodyText": "Looks good overall, just fix this to 2020.", "url": "https://github.com/linkedin/rest.li/pull/166#discussion_r378594411", "createdAt": "2020-02-13T00:44:36Z", "author": {"login": "evanw555"}, "path": "data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+   Copyright (c) 2015 LinkedIn Corp.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7cb61e5c22ff28e74e75bff0fa547639f607b2e"}, "originalPosition": 2}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e2efce595d275b6c3c63f074f8aeb2c8357675c", "author": {"user": {"login": "aman1309", "name": "Aman Gupta"}}, "url": "https://github.com/linkedin/rest.li/commit/2e2efce595d275b6c3c63f074f8aeb2c8357675c", "committedDate": "2020-02-13T00:46:39Z", "message": "update licence year"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3ODkwOTMz", "url": "https://github.com/linkedin/rest.li/pull/166#pullrequestreview-357890933", "createdAt": "2020-02-13T00:51:30Z", "commit": {"oid": "2e2efce595d275b6c3c63f074f8aeb2c8357675c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3ODkyMjYx", "url": "https://github.com/linkedin/rest.li/pull/166#pullrequestreview-357892261", "createdAt": "2020-02-13T00:55:39Z", "commit": {"oid": "2e2efce595d275b6c3c63f074f8aeb2c8357675c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4914, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}