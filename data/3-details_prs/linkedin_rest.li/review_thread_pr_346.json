{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNjIxMTM1", "number": 346, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjozNzowNVrOEK-jrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNzoxMzo1OFrOEK_T0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTQ2MTU4OnYy", "diffSide": "RIGHT", "path": "data/src/main/java/com/linkedin/data/codec/entitystream/AbstractJacksonDataEncoder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjozNzowNVrOGsVWCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNzoxMzowOVrOGsWgyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0MDIzMw==", "bodyText": "this is shouldn't be there in abstract class right? what if someone wants to override it?\nsame for other places", "url": "https://github.com/linkedin/rest.li/pull/346#discussion_r449140233", "createdAt": "2020-07-02T16:37:05Z", "author": {"login": "aman1309"}, "path": "data/src/main/java/com/linkedin/data/codec/entitystream/AbstractJacksonDataEncoder.java", "diffHunk": "@@ -46,12 +46,16 @@ protected AbstractJacksonDataEncoder(JsonFactory jsonFactory, DataMap dataMap, i\n   {\n     super(dataMap, bufferSize);\n     _jsonFactory = jsonFactory;\n+    // Disable field name interning since it causes GC issues.\n+    _jsonFactory.disable(JsonFactory.Feature.INTERN_FIELD_NAMES);\n   }\n \n   protected AbstractJacksonDataEncoder(JsonFactory jsonFactory, DataList dataList, int bufferSize)\n   {\n     super(dataList, bufferSize);\n     _jsonFactory = jsonFactory;\n+    // Disable field name interning since it causes GC issues.\n+    _jsonFactory.disable(JsonFactory.Feature.INTERN_FIELD_NAMES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3486986921489a51a50ffb3ccb6e61f71c5bfe1d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0Nzk2NQ==", "bodyText": "Safe to do it here since its the topmost. Subclasses can change this if they want to.", "url": "https://github.com/linkedin/rest.li/pull/346#discussion_r449147965", "createdAt": "2020-07-02T16:51:14Z", "author": {"login": "karthikrg"}, "path": "data/src/main/java/com/linkedin/data/codec/entitystream/AbstractJacksonDataEncoder.java", "diffHunk": "@@ -46,12 +46,16 @@ protected AbstractJacksonDataEncoder(JsonFactory jsonFactory, DataMap dataMap, i\n   {\n     super(dataMap, bufferSize);\n     _jsonFactory = jsonFactory;\n+    // Disable field name interning since it causes GC issues.\n+    _jsonFactory.disable(JsonFactory.Feature.INTERN_FIELD_NAMES);\n   }\n \n   protected AbstractJacksonDataEncoder(JsonFactory jsonFactory, DataList dataList, int bufferSize)\n   {\n     super(dataList, bufferSize);\n     _jsonFactory = jsonFactory;\n+    // Disable field name interning since it causes GC issues.\n+    _jsonFactory.disable(JsonFactory.Feature.INTERN_FIELD_NAMES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0MDIzMw=="}, "originalCommit": {"oid": "3486986921489a51a50ffb3ccb6e61f71c5bfe1d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE1OTM3MA==", "bodyText": "This wouldn't allow someone to override the interning feature. Subclasses cannot override this behavior.\nSame for the decoder.", "url": "https://github.com/linkedin/rest.li/pull/346#discussion_r449159370", "createdAt": "2020-07-02T17:13:09Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/codec/entitystream/AbstractJacksonDataEncoder.java", "diffHunk": "@@ -46,12 +46,16 @@ protected AbstractJacksonDataEncoder(JsonFactory jsonFactory, DataMap dataMap, i\n   {\n     super(dataMap, bufferSize);\n     _jsonFactory = jsonFactory;\n+    // Disable field name interning since it causes GC issues.\n+    _jsonFactory.disable(JsonFactory.Feature.INTERN_FIELD_NAMES);\n   }\n \n   protected AbstractJacksonDataEncoder(JsonFactory jsonFactory, DataList dataList, int bufferSize)\n   {\n     super(dataList, bufferSize);\n     _jsonFactory = jsonFactory;\n+    // Disable field name interning since it causes GC issues.\n+    _jsonFactory.disable(JsonFactory.Feature.INTERN_FIELD_NAMES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0MDIzMw=="}, "originalCommit": {"oid": "3486986921489a51a50ffb3ccb6e61f71c5bfe1d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTQ2NDgwOnYy", "diffSide": "RIGHT", "path": "data/src/main/java/com/linkedin/data/codec/JacksonDataCodec.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjozODowMFrOGsVX_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjozODowMFrOGsVX_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0MDczMw==", "bodyText": "not required if you're doing it in abstract classes", "url": "https://github.com/linkedin/rest.li/pull/346#discussion_r449140733", "createdAt": "2020-07-02T16:38:00Z", "author": {"login": "aman1309"}, "path": "data/src/main/java/com/linkedin/data/codec/JacksonDataCodec.java", "diffHunk": "@@ -42,13 +42,24 @@\n  */\n public class JacksonDataCodec extends AbstractJacksonDataCodec implements TextDataCodec\n {\n+  /**\n+   * Default factory to be shared by all codec instances. This is done to maximize factory reuse for\n+   * performance reasons as recommended by Jackson authors.\n+   *\n+   * <a href=\"https://github.com/FasterXML/jackson-docs/wiki/Presentation:-Jackson-Performance\">Jackson Performance</a>\n+   */\n+  private static final JsonFactory JSON_FACTORY = new JsonFactory();\n+  static {\n+    JSON_FACTORY.disable(JsonFactory.Feature.INTERN_FIELD_NAMES);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3486986921489a51a50ffb3ccb6e61f71c5bfe1d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTU4NDgyOnYy", "diffSide": "RIGHT", "path": "data/src/main/java/com/linkedin/data/codec/AbstractJacksonDataCodec.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNzoxMzo1OFrOGsWi9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxODoxOTo1MFrOGsYm_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE1OTkyNw==", "bodyText": "This means it wouldn't be possible to override this behavior to enable interning", "url": "https://github.com/linkedin/rest.li/pull/346#discussion_r449159927", "createdAt": "2020-07-02T17:13:58Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/codec/AbstractJacksonDataCodec.java", "diffHunk": "@@ -51,13 +51,26 @@\n  */\n public abstract class AbstractJacksonDataCodec implements DataCodec\n {\n+  /**\n+   * Default factory to be shared between all jackson JSON codec instances. This is done to maximize factory reuse for\n+   * performance reasons as recommended by Jackson authors.\n+   *\n+   * <a href=\"https://github.com/FasterXML/jackson-docs/wiki/Presentation:-Jackson-Performance\">Jackson Performance</a>\n+   */\n+  public static final JsonFactory JSON_FACTORY = new JsonFactory();\n+  static {\n+    JSON_FACTORY.disable(JsonFactory.Feature.INTERN_FIELD_NAMES);\n+  }\n+\n   protected static final int DEFAULT_BUFFER_SIZE = 4096;\n \n   protected final JsonFactory _factory;\n \n   protected AbstractJacksonDataCodec(JsonFactory factory)\n   {\n     _factory = factory;\n+    // Disable string interning since it causes GC issues.\n+    _factory.disable(JsonFactory.Feature.INTERN_FIELD_NAMES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98b98a7d66a92ad2023c9fc833fc24c5cfab1cb1"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4NjE2MQ==", "bodyText": "You can. You can always inject a custom factory and in your constructor enable interning by explicitly invoking it after calling super.", "url": "https://github.com/linkedin/rest.li/pull/346#discussion_r449186161", "createdAt": "2020-07-02T18:04:04Z", "author": {"login": "karthikrg"}, "path": "data/src/main/java/com/linkedin/data/codec/AbstractJacksonDataCodec.java", "diffHunk": "@@ -51,13 +51,26 @@\n  */\n public abstract class AbstractJacksonDataCodec implements DataCodec\n {\n+  /**\n+   * Default factory to be shared between all jackson JSON codec instances. This is done to maximize factory reuse for\n+   * performance reasons as recommended by Jackson authors.\n+   *\n+   * <a href=\"https://github.com/FasterXML/jackson-docs/wiki/Presentation:-Jackson-Performance\">Jackson Performance</a>\n+   */\n+  public static final JsonFactory JSON_FACTORY = new JsonFactory();\n+  static {\n+    JSON_FACTORY.disable(JsonFactory.Feature.INTERN_FIELD_NAMES);\n+  }\n+\n   protected static final int DEFAULT_BUFFER_SIZE = 4096;\n \n   protected final JsonFactory _factory;\n \n   protected AbstractJacksonDataCodec(JsonFactory factory)\n   {\n     _factory = factory;\n+    // Disable string interning since it causes GC issues.\n+    _factory.disable(JsonFactory.Feature.INTERN_FIELD_NAMES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE1OTkyNw=="}, "originalCommit": {"oid": "98b98a7d66a92ad2023c9fc833fc24c5cfab1cb1"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE5MzcyNA==", "bodyText": "It should be possible to customize the jsonfactory with the existing codec classes, without having to create a subclass.\nFor example, it would help some service to override the default behavior.\nSince we are disabling interning when the default constructor is used, it should cover the default behavior. When a custom json factory is provided, we should treat it as override and not force behavior on it.", "url": "https://github.com/linkedin/rest.li/pull/346#discussion_r449193724", "createdAt": "2020-07-02T18:19:50Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/codec/AbstractJacksonDataCodec.java", "diffHunk": "@@ -51,13 +51,26 @@\n  */\n public abstract class AbstractJacksonDataCodec implements DataCodec\n {\n+  /**\n+   * Default factory to be shared between all jackson JSON codec instances. This is done to maximize factory reuse for\n+   * performance reasons as recommended by Jackson authors.\n+   *\n+   * <a href=\"https://github.com/FasterXML/jackson-docs/wiki/Presentation:-Jackson-Performance\">Jackson Performance</a>\n+   */\n+  public static final JsonFactory JSON_FACTORY = new JsonFactory();\n+  static {\n+    JSON_FACTORY.disable(JsonFactory.Feature.INTERN_FIELD_NAMES);\n+  }\n+\n   protected static final int DEFAULT_BUFFER_SIZE = 4096;\n \n   protected final JsonFactory _factory;\n \n   protected AbstractJacksonDataCodec(JsonFactory factory)\n   {\n     _factory = factory;\n+    // Disable string interning since it causes GC issues.\n+    _factory.disable(JsonFactory.Feature.INTERN_FIELD_NAMES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE1OTkyNw=="}, "originalCommit": {"oid": "98b98a7d66a92ad2023c9fc833fc24c5cfab1cb1"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 519, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}