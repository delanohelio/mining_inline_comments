{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4Nzg5NTEz", "number": 407, "title": "Update RestLiValidatorFilter and RestLiDataValidator to expose creation of restli validators", "bodyText": "There are three main changes in this PR:\n\n\nin RestLiValidatorFilter, exposes the creation of the request and response RestLiDataValidator. This will allow for other use cases that extend the RestLiValidatorFilter to override this creation and have their own implementation\n\n\nWithin RestLiDataValidator, a new DataSchemaAnnotationValidator each time 'validateOutput' is called. Inside the RestLiDataSchemaDataValidator, now it creates the validator in the constructor and pass that instance along each time.\n\n\nWithin RestLiDataValidator, exposes the creation of the input entity validator\n\n\nExisting unit tests pass. No functionality should be changed in the PR.", "createdAt": "2020-09-03T17:49:36Z", "url": "https://github.com/linkedin/rest.li/pull/407", "merged": true, "mergeCommit": {"oid": "44e997a59ea7049917945b994d484aff0dc79e02"}, "closed": true, "closedAt": "2020-09-10T05:02:16Z", "author": {"login": "vshwnth2"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFG8zZAH2gAyNDc4Nzg5NTEzOjIzYTQxMGQyM2U1NjNhYjhjNDc3ODEzNGU4NzQ3ZDc1YTljZWM2MWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHXH2pAH2gAyNDc4Nzg5NTEzOmMyZGMwMzg2ZDFiMWRlNmY0M2YzM2RlYzEyN2M5NGVjY2ZlNWE1YWY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "23a410d23e563ab8c4778134e8747d75a9cec61b", "author": {"user": {"login": "vshwnth2", "name": "Mahesh Vishwanath"}}, "url": "https://github.com/linkedin/rest.li/commit/23a410d23e563ab8c4778134e8747d75a9cec61b", "committedDate": "2020-09-03T02:12:42Z", "message": "Update RestLiValidationFilter to expose an override ability for RestLiDataValidator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2b562bc0b882e2b5a635bc3c7f32b787eabb8cd", "author": {"user": {"login": "vshwnth2", "name": "Mahesh Vishwanath"}}, "url": "https://github.com/linkedin/rest.li/commit/d2b562bc0b882e2b5a635bc3c7f32b787eabb8cd", "committedDate": "2020-09-03T03:09:21Z", "message": "Update RestLiValidationFilter to expose an override ability for RestLiDataValidator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60edd60329a849215390d6118a2d0a892907ff50", "author": {"user": {"login": "vshwnth2", "name": "Mahesh Vishwanath"}}, "url": "https://github.com/linkedin/rest.li/commit/60edd60329a849215390d6118a2d0a892907ff50", "committedDate": "2020-09-03T03:11:30Z", "message": "Merge branch 'master' of github.com:vshwnth2/rest.li"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27acf36d0b35b6100ce276d9a01528b6267f82c1", "author": {"user": {"login": "vshwnth2", "name": "Mahesh Vishwanath"}}, "url": "https://github.com/linkedin/rest.li/commit/27acf36d0b35b6100ce276d9a01528b6267f82c1", "committedDate": "2020-09-03T03:18:00Z", "message": "refactor some logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b32cfa1b10b87931b709f295ba38a174af4b5f99", "author": {"user": {"login": "vshwnth2", "name": "Mahesh Vishwanath"}}, "url": "https://github.com/linkedin/rest.li/commit/b32cfa1b10b87931b709f295ba38a174af4b5f99", "committedDate": "2020-09-03T03:20:07Z", "message": "refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef53f2d6c0c8f7a5cd038edad70d09b20f0f9cec", "author": {"user": {"login": "vshwnth2", "name": "Mahesh Vishwanath"}}, "url": "https://github.com/linkedin/rest.li/commit/ef53f2d6c0c8f7a5cd038edad70d09b20f0f9cec", "committedDate": "2020-09-03T03:54:59Z", "message": "rearranging code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fdbfcd33378fdf6c488fc8a3c9518c899fc175a", "author": {"user": {"login": "vshwnth2", "name": "Mahesh Vishwanath"}}, "url": "https://github.com/linkedin/rest.li/commit/5fdbfcd33378fdf6c488fc8a3c9518c899fc175a", "committedDate": "2020-09-03T04:13:48Z", "message": "refactor more"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93f0cd225724d865df0c69f8b2db6f05c19ac4b8", "author": {"user": {"login": "vshwnth2", "name": "Mahesh Vishwanath"}}, "url": "https://github.com/linkedin/rest.li/commit/93f0cd225724d865df0c69f8b2db6f05c19ac4b8", "committedDate": "2020-09-03T04:14:29Z", "message": "fix indent"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMTExMjQ3", "url": "https://github.com/linkedin/rest.li/pull/407#pullrequestreview-482111247", "createdAt": "2020-09-03T18:45:17Z", "commit": {"oid": "93f0cd225724d865df0c69f8b2db6f05c19ac4b8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODo0NToxN1rOHMzPsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODo0NToxN1rOHMzPsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE4NDU2Mg==", "bodyText": "Why do you need this?\nWould it be cleaner to use Function<DataSchema, Validator> that accepts the validating schema and returns the validator to use?\nOther option is to make it a protected method, which can be overridden.\nprotected Validator getValidatorForOutput(DataSchema validatingSchema);\n\nThis way, the logic to initialize the validator is still within this class.\nAlso, this validator has a separate logic for validating input entities (see validateInputEntity and validatePatch) using the DataValidator inner class. It would be good to handle that also. Something like:\nprotected Validator getValidatorForInput(DataSchema validatingSchema);\n\nIn both cases, if the overriding implementation needs caching, it can do\n {\n    return cache.computeIfAbsent(super.getValidator..(schema));\n  }", "url": "https://github.com/linkedin/rest.li/pull/407#discussion_r483184562", "createdAt": "2020-09-03T18:45:17Z", "author": {"login": "karthikbalasub"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/validation/RestLiDataValidator.java", "diffHunk": "@@ -436,6 +437,19 @@ public ValidationResult validateOutput(RecordTemplate dataTemplate, MaskTree pro\n    * @throws IllegalArgumentException if any argument is null or if the provided data template has no data\n    */\n   protected ValidationResult validateOutputAgainstSchema(RecordTemplate dataTemplate, DataSchema validatingSchema)\n+  {\n+    if (validatingSchema == null)\n+    {\n+      throw new IllegalArgumentException(\"Validating schema is null\");\n+    }\n+\n+    return validateOutputAgainstSchema(dataTemplate,\n+        () -> ValidateDataAgainstSchema.validate(dataTemplate.data(), validatingSchema, new ValidationOptions(),\n+            new DataSchemaAnnotationValidator(validatingSchema)));\n+  }\n+\n+  protected ValidationResult validateOutputAgainstSchema(RecordTemplate dataTemplate,\n+      Supplier<ValidationResult> validationResultSupplier)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93f0cd225724d865df0c69f8b2db6f05c19ac4b8"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01ccf2f9e11c41cd0fcdfbb424b758ebcd919336", "author": {"user": {"login": "vshwnth2", "name": "Mahesh Vishwanath"}}, "url": "https://github.com/linkedin/rest.li/commit/01ccf2f9e11c41cd0fcdfbb424b758ebcd919336", "committedDate": "2020-09-03T22:45:55Z", "message": "Refactor code based on comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNTE0MTUw", "url": "https://github.com/linkedin/rest.li/pull/407#pullrequestreview-482514150", "createdAt": "2020-09-04T09:45:36Z", "commit": {"oid": "01ccf2f9e11c41cd0fcdfbb424b758ebcd919336"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOTo0NTozNlrOHNHKIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOTo1NDoyMFrOHNHb5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUxMDgxOA==", "bodyText": "nit: this can be DataValidator", "url": "https://github.com/linkedin/rest.li/pull/407#discussion_r483510818", "createdAt": "2020-09-04T09:45:36Z", "author": {"login": "karthikbalasub"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/validation/RestLiDataSchemaDataValidator.java", "diffHunk": "@@ -32,6 +34,8 @@\n  */\n public class RestLiDataSchemaDataValidator extends RestLiDataValidator {\n   private final DataSchema _validatingSchema;\n+  private final DataValidator _inputDataValidator;\n+  private final DataSchemaAnnotationValidator _outputSchemaValidator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01ccf2f9e11c41cd0fcdfbb424b758ebcd919336"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUxMzE5Mg==", "bodyText": "This is not going to be useful. The validatingSchema is for output, based on projection.\nand for inputs it would be the resource entity schema or a subset based on patch for partial_update.\nInstead of initializing in the constructor, you should just use getValidatorFor* methods, but cache them after first invocation?\nAlso this validator class is used only for output validation (input uses RestLiDataValidator directly). so you can remove all the input validator logic and remove the override for getValidatorForInput", "url": "https://github.com/linkedin/rest.li/pull/407#discussion_r483513192", "createdAt": "2020-09-04T09:50:09Z", "author": {"login": "karthikbalasub"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/validation/RestLiDataSchemaDataValidator.java", "diffHunk": "@@ -53,6 +57,8 @@ public RestLiDataSchemaDataValidator(Annotation[] annotations,\n     }\n \n     _validatingSchema = validatingSchema;\n+    _inputDataValidator = new DataValidator(_validatingSchema);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01ccf2f9e11c41cd0fcdfbb424b758ebcd919336"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUxNTM2Nw==", "bodyText": "I actually don't see the need for changes in this file. The changes in other two classes should be enough to override the validator construction logic.", "url": "https://github.com/linkedin/rest.li/pull/407#discussion_r483515367", "createdAt": "2020-09-04T09:54:20Z", "author": {"login": "karthikbalasub"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/validation/RestLiDataSchemaDataValidator.java", "diffHunk": "@@ -53,6 +57,8 @@ public RestLiDataSchemaDataValidator(Annotation[] annotations,\n     }\n \n     _validatingSchema = validatingSchema;\n+    _inputDataValidator = new DataValidator(_validatingSchema);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUxMzE5Mg=="}, "originalCommit": {"oid": "01ccf2f9e11c41cd0fcdfbb424b758ebcd919336"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "080a1da2bad2ffc914c3f8ac458924609576c614", "author": {"user": {"login": "vshwnth2", "name": "Mahesh Vishwanath"}}, "url": "https://github.com/linkedin/rest.li/commit/080a1da2bad2ffc914c3f8ac458924609576c614", "committedDate": "2020-09-08T05:53:05Z", "message": "Remove the input validator override from RestLiDataSchemaDataValidator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4da09991b7876c6aa611adf79bb74e3d1ed72337", "author": {"user": {"login": "vshwnth2", "name": "Mahesh Vishwanath"}}, "url": "https://github.com/linkedin/rest.li/commit/4da09991b7876c6aa611adf79bb74e3d1ed72337", "committedDate": "2020-09-08T05:55:13Z", "message": "Updated javadocs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzODM0Nzgy", "url": "https://github.com/linkedin/rest.li/pull/407#pullrequestreview-483834782", "createdAt": "2020-09-08T06:41:32Z", "commit": {"oid": "4da09991b7876c6aa611adf79bb74e3d1ed72337"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNjo0MTozMlrOHOOx5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNjo0NTozOFrOHOO42g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY4NDI2Mw==", "bodyText": "I think you meant to say \"{@link RestLiDataValidator}\", same as line 476, 484, 488", "url": "https://github.com/linkedin/rest.li/pull/407#discussion_r484684263", "createdAt": "2020-09-08T06:41:32Z", "author": {"login": "junchuanwang"}, "path": "restli-server/src/main/java/com/linkedin/restli/server/validation/RestLiValidationFilter.java", "diffHunk": "@@ -487,4 +467,46 @@ private boolean shouldValidateOnResponse(FilterRequestContext requestContext)\n     future.completeExceptionally(t);\n     return future;\n   }\n+\n+  /**\n+   * Creates a {@link RestLiValidationFilter} to use for validation onRequest.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4da09991b7876c6aa611adf79bb74e3d1ed72337"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY4NTA3MQ==", "bodyText": "Sorry can you remind me why this changes from instantiating \"DataValidator\" to \"DataSchemaAnnotationValidator\" now?", "url": "https://github.com/linkedin/rest.li/pull/407#discussion_r484685071", "createdAt": "2020-09-08T06:43:26Z", "author": {"login": "junchuanwang"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/validation/RestLiDataValidator.java", "diffHunk": "@@ -608,13 +608,21 @@ private ValidationResult validateInputEntity(RecordTemplate entity)\n     //  the client cannot supply them in a create request, so they should be treated as optional.\n     //  similarly for update requests used as upsert (update to create), they are treated as optional.\n     validationOptions.setTreatOptional(_readOnlyOptionalPredicate);\n-    return ValidateDataAgainstSchema.validate(entity, validationOptions, new DataValidator(entity.schema()));\n+    return ValidateDataAgainstSchema.validate(entity, validationOptions, getValidatorForInput(entity.schema()));\n   }\n \n   private ValidationResult validateOutputEntity(RecordTemplate entity, DataSchema validatingSchema)\n   {\n-    DataSchemaAnnotationValidator validator = new DataSchemaAnnotationValidator(validatingSchema);\n-    return ValidateDataAgainstSchema.validate(entity.data(), validatingSchema, new ValidationOptions(), validator);\n+    return ValidateDataAgainstSchema.validate(entity.data(), validatingSchema, new ValidationOptions(),\n+        getValidatorForOutput(validatingSchema));\n+  }\n+\n+  protected Validator getValidatorForOutput(DataSchema validatingSchema) {\n+    return new DataSchemaAnnotationValidator(validatingSchema);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4da09991b7876c6aa611adf79bb74e3d1ed72337"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY4NjA0Mg==", "bodyText": "nit: I personally think \"getValidatorForOutput\" an incomplete name, it makes more sense to me to say for example \"getValidatorForOutputEntityValidation\"", "url": "https://github.com/linkedin/rest.li/pull/407#discussion_r484686042", "createdAt": "2020-09-08T06:45:38Z", "author": {"login": "junchuanwang"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/validation/RestLiDataSchemaDataValidator.java", "diffHunk": "@@ -66,6 +71,24 @@ public ValidationResult validateOutput(RecordTemplate dataTemplate)\n     return super.validateOutputAgainstSchema(dataTemplate, _validatingSchema);\n   }\n \n+  /**\n+   * Validator to use to validate the output.\n+   * The validator is instantiated in the constructor, so directly returns that if input is equal to _validatingSchema.\n+   * @param validatingSchema schema to validate against\n+   * @return validator\n+   */\n+  @Override\n+  protected Validator getValidatorForOutput(DataSchema validatingSchema) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4da09991b7876c6aa611adf79bb74e3d1ed72337"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "392396173e1ca5c8b8b939186a814c6990b69e07", "author": {"user": {"login": "vshwnth2", "name": "Mahesh Vishwanath"}}, "url": "https://github.com/linkedin/rest.li/commit/392396173e1ca5c8b8b939186a814c6990b69e07", "committedDate": "2020-09-08T07:01:37Z", "message": "address PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "916535fce5c50d68b5e5b330a78c8025020404bd", "author": {"user": {"login": "vshwnth2", "name": "Mahesh Vishwanath"}}, "url": "https://github.com/linkedin/rest.li/commit/916535fce5c50d68b5e5b330a78c8025020404bd", "committedDate": "2020-09-08T21:38:43Z", "message": "Update validatingSchema check to == to avoid expensive computation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NTU2MzA0", "url": "https://github.com/linkedin/rest.li/pull/407#pullrequestreview-484556304", "createdAt": "2020-09-08T23:17:27Z", "commit": {"oid": "916535fce5c50d68b5e5b330a78c8025020404bd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzoxNzoyN1rOHOxGAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzoxNzoyN1rOHOxGAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0NjQ2NA==", "bodyText": "if the strict pointer equality check is on purpose, please add an inline doc on why it's the case", "url": "https://github.com/linkedin/rest.li/pull/407#discussion_r485246464", "createdAt": "2020-09-08T23:17:27Z", "author": {"login": "idarmans"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/validation/RestLiDataSchemaDataValidator.java", "diffHunk": "@@ -66,6 +71,24 @@ public ValidationResult validateOutput(RecordTemplate dataTemplate)\n     return super.validateOutputAgainstSchema(dataTemplate, _validatingSchema);\n   }\n \n+  /**\n+   * Validator to use to validate the output.\n+   * The validator is instantiated in the constructor, so directly returns that if input is equal to _validatingSchema.\n+   * @param validatingSchema schema to validate against\n+   * @return validator\n+   */\n+  @Override\n+  protected Validator getValidatorForOutputEntityValidation(DataSchema validatingSchema) {\n+    if (_validatingSchema == validatingSchema)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "916535fce5c50d68b5e5b330a78c8025020404bd"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NzIwNjQ2", "url": "https://github.com/linkedin/rest.li/pull/407#pullrequestreview-484720646", "createdAt": "2020-09-09T07:12:33Z", "commit": {"oid": "916535fce5c50d68b5e5b330a78c8025020404bd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NzIzMTk3", "url": "https://github.com/linkedin/rest.li/pull/407#pullrequestreview-484723197", "createdAt": "2020-09-09T07:16:26Z", "commit": {"oid": "916535fce5c50d68b5e5b330a78c8025020404bd"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzoxNjoyNlrOHO51vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzoxNjoyNlrOHO51vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4OTc1OQ==", "bodyText": "+1 on Ivan's suggestion", "url": "https://github.com/linkedin/rest.li/pull/407#discussion_r485389759", "createdAt": "2020-09-09T07:16:26Z", "author": {"login": "karthikbalasub"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/validation/RestLiDataSchemaDataValidator.java", "diffHunk": "@@ -66,6 +71,24 @@ public ValidationResult validateOutput(RecordTemplate dataTemplate)\n     return super.validateOutputAgainstSchema(dataTemplate, _validatingSchema);\n   }\n \n+  /**\n+   * Validator to use to validate the output.\n+   * The validator is instantiated in the constructor, so directly returns that if input is equal to _validatingSchema.\n+   * @param validatingSchema schema to validate against\n+   * @return validator\n+   */\n+  @Override\n+  protected Validator getValidatorForOutputEntityValidation(DataSchema validatingSchema) {\n+    if (_validatingSchema == validatingSchema)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0NjQ2NA=="}, "originalCommit": {"oid": "916535fce5c50d68b5e5b330a78c8025020404bd"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9373e03004f1cc2eae48aa5b2b95657209cd42a6", "author": {"user": {"login": "vshwnth2", "name": "Mahesh Vishwanath"}}, "url": "https://github.com/linkedin/rest.li/commit/9373e03004f1cc2eae48aa5b2b95657209cd42a6", "committedDate": "2020-09-09T18:21:51Z", "message": "Update changelog and add some comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1Mjg3Mjc2", "url": "https://github.com/linkedin/rest.li/pull/407#pullrequestreview-485287276", "createdAt": "2020-09-09T18:27:01Z", "commit": {"oid": "9373e03004f1cc2eae48aa5b2b95657209cd42a6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODoyNzowMVrOHPUg_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODoyNzowMVrOHPUg_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgyNjgxMg==", "bodyText": "Please rebase master, it is 29.6.4 in the master. And update CHANGELOG accordingly.", "url": "https://github.com/linkedin/rest.li/pull/407#discussion_r485826812", "createdAt": "2020-09-09T18:27:01Z", "author": {"login": "nickibi"}, "path": "gradle.properties", "diffHunk": "@@ -1,4 +1,4 @@\n-version=29.6.2\n+version=29.6.3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9373e03004f1cc2eae48aa5b2b95657209cd42a6"}, "originalPosition": 2}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ed86c9a196cf00547b97759b552432515375a8e", "author": {"user": {"login": "vshwnth2", "name": "Mahesh Vishwanath"}}, "url": "https://github.com/linkedin/rest.li/commit/7ed86c9a196cf00547b97759b552432515375a8e", "committedDate": "2020-09-09T20:14:37Z", "message": "Merge branch 'master' into master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NTAzOTAw", "url": "https://github.com/linkedin/rest.li/pull/407#pullrequestreview-485503900", "createdAt": "2020-09-10T01:24:12Z", "commit": {"oid": "7ed86c9a196cf00547b97759b552432515375a8e"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMToyNDoxM1rOHPfk9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMToyNDoxM1rOHPfk9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwODA1Mg==", "bodyText": "nit: move braces to newline.", "url": "https://github.com/linkedin/rest.li/pull/407#discussion_r486008052", "createdAt": "2020-09-10T01:24:13Z", "author": {"login": "karthikbalasub"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/validation/RestLiDataValidator.java", "diffHunk": "@@ -608,13 +608,21 @@ private ValidationResult validateInputEntity(RecordTemplate entity)\n     //  the client cannot supply them in a create request, so they should be treated as optional.\n     //  similarly for update requests used as upsert (update to create), they are treated as optional.\n     validationOptions.setTreatOptional(_readOnlyOptionalPredicate);\n-    return ValidateDataAgainstSchema.validate(entity, validationOptions, new DataValidator(entity.schema()));\n+    return ValidateDataAgainstSchema.validate(entity, validationOptions, getValidatorForInputEntityValidation(entity.schema()));\n   }\n \n   private ValidationResult validateOutputEntity(RecordTemplate entity, DataSchema validatingSchema)\n   {\n-    DataSchemaAnnotationValidator validator = new DataSchemaAnnotationValidator(validatingSchema);\n-    return ValidateDataAgainstSchema.validate(entity.data(), validatingSchema, new ValidationOptions(), validator);\n+    return ValidateDataAgainstSchema.validate(entity.data(), validatingSchema, new ValidationOptions(),\n+        getValidatorForOutputEntityValidation(validatingSchema));\n+  }\n+\n+  protected Validator getValidatorForOutputEntityValidation(DataSchema validatingSchema) {\n+    return new DataSchemaAnnotationValidator(validatingSchema);\n+  }\n+\n+  protected Validator getValidatorForInputEntityValidation(DataSchema validatingSchema) {\n+    return new DataValidator(validatingSchema);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ed86c9a196cf00547b97759b552432515375a8e"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2dc0386d1b1de6f43f33dec127c94eccfe5a5af", "author": {"user": {"login": "vshwnth2", "name": "Mahesh Vishwanath"}}, "url": "https://github.com/linkedin/rest.li/commit/c2dc0386d1b1de6f43f33dec127c94eccfe5a5af", "committedDate": "2020-09-10T02:11:06Z", "message": "fix braces"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4645, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}