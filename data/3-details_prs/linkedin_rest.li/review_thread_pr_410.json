{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMjI0MjQz", "number": 410, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMToxNToyM1rOEh3Isw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjoyNDozNVrOEh99Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTQxODExOnYy", "diffSide": "RIGHT", "path": "restli-common/src/main/java/com/linkedin/restli/common/validation/RestLiDataValidator.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMToxNToyM1rOHPaldw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjo0MTowN1rOHQIK9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyNjI2Mw==", "bodyText": "I totally agree the naming needs to be enhanced. There are just too many validators IMO.\nI was always curious about this naming convention. Before we named validators like \"DataSchemaAnnotationValidator\" or \"DataValidator\", now later a few new validators are now with a \"RestLi\"prefix, does that carry special meaning?", "url": "https://github.com/linkedin/rest.li/pull/410#discussion_r485926263", "createdAt": "2020-09-09T21:15:23Z", "author": {"login": "junchuanwang"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/validation/RestLiDataValidator.java", "diffHunk": "@@ -274,9 +278,14 @@ else if (annotationName.equals(CreateOnly.class.getAnnotation(RestSpecAnnotation\n     _validatorClassMap = Collections.unmodifiableMap(validatorClassMap);\n   }\n \n-  private class DataValidator extends DataSchemaAnnotationValidator\n+  /**\n+   * Validates input data and patches using a given resource's {@link ReadOnly} and {@link CreateOnly} annotations.\n+   * Since it's an extension of {@link DataSchemaAnnotationValidator}, it also validates the data using whatever custom\n+   * validators are defined in the schema.\n+   */\n+  private class RestLiAnnotationDataValidator extends DataSchemaAnnotationValidator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08b47f8ce3bb1607899d0d6bbc0130b80b164668"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk1MjkwOQ==", "bodyText": "Good question. My reasoning is:\n\nThe \"RestLi\" prefix implies that the context is the Rest.li request/response validation, not just plain Pegasus data.\n\"Annotation\" because the validator triggers the custom schema validators as well as the \"Rest.li annotations\" (see next bullet point).\nTogether, \"RestLiAnnotation\" implies that the validator uses \"Rest.li annotations\" (i.e. ReadOnly/CreateOnly). These are annotations that are specific to the Rest.li REST framework, not just the Pegasus data layer.\n\nNaming is often very confusing or ambiguous in Rest.li, so I'm trying to make it more clear.", "url": "https://github.com/linkedin/rest.li/pull/410#discussion_r485952909", "createdAt": "2020-09-09T22:18:08Z", "author": {"login": "evanw555"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/validation/RestLiDataValidator.java", "diffHunk": "@@ -274,9 +278,14 @@ else if (annotationName.equals(CreateOnly.class.getAnnotation(RestSpecAnnotation\n     _validatorClassMap = Collections.unmodifiableMap(validatorClassMap);\n   }\n \n-  private class DataValidator extends DataSchemaAnnotationValidator\n+  /**\n+   * Validates input data and patches using a given resource's {@link ReadOnly} and {@link CreateOnly} annotations.\n+   * Since it's an extension of {@link DataSchemaAnnotationValidator}, it also validates the data using whatever custom\n+   * validators are defined in the schema.\n+   */\n+  private class RestLiAnnotationDataValidator extends DataSchemaAnnotationValidator", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyNjI2Mw=="}, "originalCommit": {"oid": "08b47f8ce3bb1607899d0d6bbc0130b80b164668"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjEyMDQyMA==", "bodyText": "(1) Maybe out of scope but I think \"DataSchemaAnnotationValidator\" is itself ambiguous, which made RestLiAnnotationDataValidator ambiguous. Do you see room to improve?  I think it is still a \"DataValidator\", and instantiated from \"schemaProperty\", so IMO it should be something like \"SchemaCustomDataValidator\"\n(2) For \"RestLiAnnotationDataValidator\" according to what you said, I recommend \"RestLiResourceAnnotationSchemaCustomDataValidator\".", "url": "https://github.com/linkedin/rest.li/pull/410#discussion_r486120420", "createdAt": "2020-09-10T07:22:40Z", "author": {"login": "junchuanwang"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/validation/RestLiDataValidator.java", "diffHunk": "@@ -274,9 +278,14 @@ else if (annotationName.equals(CreateOnly.class.getAnnotation(RestSpecAnnotation\n     _validatorClassMap = Collections.unmodifiableMap(validatorClassMap);\n   }\n \n-  private class DataValidator extends DataSchemaAnnotationValidator\n+  /**\n+   * Validates input data and patches using a given resource's {@link ReadOnly} and {@link CreateOnly} annotations.\n+   * Since it's an extension of {@link DataSchemaAnnotationValidator}, it also validates the data using whatever custom\n+   * validators are defined in the schema.\n+   */\n+  private class RestLiAnnotationDataValidator extends DataSchemaAnnotationValidator", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyNjI2Mw=="}, "originalCommit": {"oid": "08b47f8ce3bb1607899d0d6bbc0130b80b164668"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY1OTMzMg==", "bodyText": "I agree 100%, I was also confused by this. The DataSchemaAnnotationValidator is itself a data validator, not a schema validator (or a schema annotation validator). It doesn't sound smooth, but the most accurate name would be CustomValidatorDataValidator or SchemaValidatorDataValidator (the usage of \"validator\" for two different things is annoying). The name could be improved, however since this class is public changing the name has compatibility concerns. We can change it, but it's a little too much for this change IMO.\nThat suggested name is a mouthful, how about ResourceAnnotationDataValidator or RestLiResourceAnnotationDataValidator? If we get around to changing the name of the other class, we can change this one too to be consistent with the other (it's private so changing it again is no big deal).", "url": "https://github.com/linkedin/rest.li/pull/410#discussion_r486659332", "createdAt": "2020-09-10T22:04:43Z", "author": {"login": "evanw555"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/validation/RestLiDataValidator.java", "diffHunk": "@@ -274,9 +278,14 @@ else if (annotationName.equals(CreateOnly.class.getAnnotation(RestSpecAnnotation\n     _validatorClassMap = Collections.unmodifiableMap(validatorClassMap);\n   }\n \n-  private class DataValidator extends DataSchemaAnnotationValidator\n+  /**\n+   * Validates input data and patches using a given resource's {@link ReadOnly} and {@link CreateOnly} annotations.\n+   * Since it's an extension of {@link DataSchemaAnnotationValidator}, it also validates the data using whatever custom\n+   * validators are defined in the schema.\n+   */\n+  private class RestLiAnnotationDataValidator extends DataSchemaAnnotationValidator", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyNjI2Mw=="}, "originalCommit": {"oid": "08b47f8ce3bb1607899d0d6bbc0130b80b164668"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2NjYxNQ==", "bodyText": "For (2) RestLiResourceAnnotationDataValidator sounds good enough, can we use that?\nFor (1), yes, I know. Also don't know if we can really change that one day (since it is Public), lol", "url": "https://github.com/linkedin/rest.li/pull/410#discussion_r486666615", "createdAt": "2020-09-10T22:23:12Z", "author": {"login": "junchuanwang"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/validation/RestLiDataValidator.java", "diffHunk": "@@ -274,9 +278,14 @@ else if (annotationName.equals(CreateOnly.class.getAnnotation(RestSpecAnnotation\n     _validatorClassMap = Collections.unmodifiableMap(validatorClassMap);\n   }\n \n-  private class DataValidator extends DataSchemaAnnotationValidator\n+  /**\n+   * Validates input data and patches using a given resource's {@link ReadOnly} and {@link CreateOnly} annotations.\n+   * Since it's an extension of {@link DataSchemaAnnotationValidator}, it also validates the data using whatever custom\n+   * validators are defined in the schema.\n+   */\n+  private class RestLiAnnotationDataValidator extends DataSchemaAnnotationValidator", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyNjI2Mw=="}, "originalCommit": {"oid": "08b47f8ce3bb1607899d0d6bbc0130b80b164668"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3MzE0Mw==", "bodyText": "Yeah, I'll update the PR to use that.\n\nyes, I know. Also don't know if we can really change that one day (since it is Public)\n\nActually, I think we can maintain some compatibility by renaming the class, then preserving the old class as a deprecated subclass. Eventually, we would delete the old class.", "url": "https://github.com/linkedin/rest.li/pull/410#discussion_r486673143", "createdAt": "2020-09-10T22:41:07Z", "author": {"login": "evanw555"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/validation/RestLiDataValidator.java", "diffHunk": "@@ -274,9 +278,14 @@ else if (annotationName.equals(CreateOnly.class.getAnnotation(RestSpecAnnotation\n     _validatorClassMap = Collections.unmodifiableMap(validatorClassMap);\n   }\n \n-  private class DataValidator extends DataSchemaAnnotationValidator\n+  /**\n+   * Validates input data and patches using a given resource's {@link ReadOnly} and {@link CreateOnly} annotations.\n+   * Since it's an extension of {@link DataSchemaAnnotationValidator}, it also validates the data using whatever custom\n+   * validators are defined in the schema.\n+   */\n+  private class RestLiAnnotationDataValidator extends DataSchemaAnnotationValidator", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyNjI2Mw=="}, "originalCommit": {"oid": "08b47f8ce3bb1607899d0d6bbc0130b80b164668"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTQxODMwOnYy", "diffSide": "RIGHT", "path": "restli-common/src/main/java/com/linkedin/restli/common/validation/RestLiDataValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMToxNToyNlrOHPalkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjoxMzoyOFrOHPcGfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyNjI5MA==", "bodyText": "Did you use this for debug? Not recommend to add it here.", "url": "https://github.com/linkedin/rest.li/pull/410#discussion_r485926290", "createdAt": "2020-09-09T21:15:26Z", "author": {"login": "junchuanwang"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/validation/RestLiDataValidator.java", "diffHunk": "@@ -286,15 +295,38 @@ public void validate(ValidatorContext context)\n     {\n       super.validate(context);\n       DataElement element = context.dataElement();\n-      if (_readOnlyRestrictedPredicate.evaluate(element))\n+      System.out.println(\"Validate: \" + element);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08b47f8ce3bb1607899d0d6bbc0130b80b164668"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk1MTEwMg==", "bodyText": "Good catch, lol", "url": "https://github.com/linkedin/rest.li/pull/410#discussion_r485951102", "createdAt": "2020-09-09T22:13:28Z", "author": {"login": "evanw555"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/validation/RestLiDataValidator.java", "diffHunk": "@@ -286,15 +295,38 @@ public void validate(ValidatorContext context)\n     {\n       super.validate(context);\n       DataElement element = context.dataElement();\n-      if (_readOnlyRestrictedPredicate.evaluate(element))\n+      System.out.println(\"Validate: \" + element);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyNjI5MA=="}, "originalCommit": {"oid": "08b47f8ce3bb1607899d0d6bbc0130b80b164668"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTQyMjg1OnYy", "diffSide": "RIGHT", "path": "restli-common/src/main/java/com/linkedin/restli/common/validation/RestLiDataValidator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMToxNjo1OVrOHPaoTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTo1Njo1MFrOHQHIwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyNjk4OA==", "bodyText": "why not\nif (!grantArrayDescendantException(element)) {\n  // Original logic\n}", "url": "https://github.com/linkedin/rest.li/pull/410#discussion_r485926988", "createdAt": "2020-09-09T21:16:59Z", "author": {"login": "junchuanwang"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/validation/RestLiDataValidator.java", "diffHunk": "@@ -286,15 +295,38 @@ public void validate(ValidatorContext context)\n     {\n       super.validate(context);\n       DataElement element = context.dataElement();\n-      if (_readOnlyRestrictedPredicate.evaluate(element))\n+      System.out.println(\"Validate: \" + element);\n+      if (_readOnlyRestrictedPredicate.evaluate(element) && !grantArrayDescendantException(element))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08b47f8ce3bb1607899d0d6bbc0130b80b164668"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk1MTAxNw==", "bodyText": "Since this method traverses the data tree, it can potentially have performance issues. If we did it your way, it would be invoked for each element in the tree. Since my way is only invoked when the predicate is matched, this means the method will only be invoked for ReadOnly/CreateOnly elements that are mistakenly included (or those which are included as part of an array).", "url": "https://github.com/linkedin/rest.li/pull/410#discussion_r485951017", "createdAt": "2020-09-09T22:13:13Z", "author": {"login": "evanw555"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/validation/RestLiDataValidator.java", "diffHunk": "@@ -286,15 +295,38 @@ public void validate(ValidatorContext context)\n     {\n       super.validate(context);\n       DataElement element = context.dataElement();\n-      if (_readOnlyRestrictedPredicate.evaluate(element))\n+      System.out.println(\"Validate: \" + element);\n+      if (_readOnlyRestrictedPredicate.evaluate(element) && !grantArrayDescendantException(element))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyNjk4OA=="}, "originalCommit": {"oid": "08b47f8ce3bb1607899d0d6bbc0130b80b164668"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1ODM2MA==", "bodyText": "Is this println by design or by choice? Logging maybe better?", "url": "https://github.com/linkedin/rest.li/pull/410#discussion_r486058360", "createdAt": "2020-09-10T04:38:34Z", "author": {"login": "karthikrg"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/validation/RestLiDataValidator.java", "diffHunk": "@@ -286,15 +295,38 @@ public void validate(ValidatorContext context)\n     {\n       super.validate(context);\n       DataElement element = context.dataElement();\n-      if (_readOnlyRestrictedPredicate.evaluate(element))\n+      System.out.println(\"Validate: \" + element);\n+      if (_readOnlyRestrictedPredicate.evaluate(element) && !grantArrayDescendantException(element))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyNjk4OA=="}, "originalCommit": {"oid": "08b47f8ce3bb1607899d0d6bbc0130b80b164668"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY1NjE5NA==", "bodyText": "@karthikrg It was just an accident, I added this during testing to see the the order in which elements in the tree are validated. Given that this is invoked once for each element in a JSON object, I think it would flood the logs.", "url": "https://github.com/linkedin/rest.li/pull/410#discussion_r486656194", "createdAt": "2020-09-10T21:56:50Z", "author": {"login": "evanw555"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/validation/RestLiDataValidator.java", "diffHunk": "@@ -286,15 +295,38 @@ public void validate(ValidatorContext context)\n     {\n       super.validate(context);\n       DataElement element = context.dataElement();\n-      if (_readOnlyRestrictedPredicate.evaluate(element))\n+      System.out.println(\"Validate: \" + element);\n+      if (_readOnlyRestrictedPredicate.evaluate(element) && !grantArrayDescendantException(element))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyNjk4OA=="}, "originalCommit": {"oid": "08b47f8ce3bb1607899d0d6bbc0130b80b164668"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDUwNjE3OnYy", "diffSide": "RIGHT", "path": "restli-int-test-api/src/main/idl/com.linkedin.restli.examples.greetings.client.autoValidationDemos.restspec.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjoxMzoyMVrOHPkfzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTo1Mzo1OFrOHQHEOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA4ODY1Mw==", "bodyText": "What is the wildcard meaning in here", "url": "https://github.com/linkedin/rest.li/pull/410#discussion_r486088653", "createdAt": "2020-09-10T06:13:21Z", "author": {"login": "BrianPin"}, "path": "restli-int-test-api/src/main/idl/com.linkedin.restli.examples.greetings.client.autoValidationDemos.restspec.json", "diffHunk": "@@ -1,7 +1,7 @@\n {\n   \"annotations\" : {\n     \"createOnly\" : {\n-      \"value\" : [ \"stringB\", \"intB\", \"UnionFieldWithInlineRecord/com.linkedin.restli.examples.greetings.api.myRecord/foo2\", \"MapWithTyperefs/*/id\" ]\n+      \"value\" : [ \"stringB\", \"intB\", \"UnionFieldWithInlineRecord/com.linkedin.restli.examples.greetings.api.myRecord/foo2\", \"MapWithTyperefs/*/id\", \"ArrayWithInlineRecord/*/bar3\" ]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f74241211bd5b14ed6fceacc20312d2212083a2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY1NTAzNQ==", "bodyText": "This is a pathspec indicating which fields are CreateOnly. In this schema, the wildcard indicates that it matches any element of the array field ArrayWithInlineRecord. Thus, ArrayWithInlineRecord/*/bar3 means that the bar3 field of any element in the ArrayWithInlineRecord array field is CreateOnly.", "url": "https://github.com/linkedin/rest.li/pull/410#discussion_r486655035", "createdAt": "2020-09-10T21:53:58Z", "author": {"login": "evanw555"}, "path": "restli-int-test-api/src/main/idl/com.linkedin.restli.examples.greetings.client.autoValidationDemos.restspec.json", "diffHunk": "@@ -1,7 +1,7 @@\n {\n   \"annotations\" : {\n     \"createOnly\" : {\n-      \"value\" : [ \"stringB\", \"intB\", \"UnionFieldWithInlineRecord/com.linkedin.restli.examples.greetings.api.myRecord/foo2\", \"MapWithTyperefs/*/id\" ]\n+      \"value\" : [ \"stringB\", \"intB\", \"UnionFieldWithInlineRecord/com.linkedin.restli.examples.greetings.api.myRecord/foo2\", \"MapWithTyperefs/*/id\", \"ArrayWithInlineRecord/*/bar3\" ]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA4ODY1Mw=="}, "originalCommit": {"oid": "7f74241211bd5b14ed6fceacc20312d2212083a2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDUzNTYzOnYy", "diffSide": "RIGHT", "path": "restli-int-test/src/test/java/com/linkedin/restli/examples/TestRestLiValidation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjoyNDozNVrOHPkxPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTo1NToyN1rOHQHGqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA5MzExNw==", "bodyText": "What does the dollar sign $ represent in this string-formed request?", "url": "https://github.com/linkedin/rest.li/pull/410#discussion_r486093117", "createdAt": "2020-09-10T06:24:35Z", "author": {"login": "BrianPin"}, "path": "restli-int-test/src/test/java/com/linkedin/restli/examples/TestRestLiValidation.java", "diffHunk": "@@ -557,12 +555,18 @@ public void testPartialUpdateFailure(RestClient restClient, Object builder, Stri\n             \"{\\\"patch\\\": {\\\"validationDemoNext\\\": {\\\"$set\\\": {\\\"stringA\\\": \\\"some value\\\"}}}}\",\n             // A field (MapWithTyperefs/key1) containing a CreateOnly field (MapWithTyperefs/key1/id) has to be partially set\n             \"{\\\"patch\\\": {\\\"MapWithTyperefs\\\": {\\\"key1\\\": {\\\"$set\\\": {\\\"message\\\": \\\"some message\\\", \\\"tone\\\": \\\"SINCERE\\\"}}}}}\",\n-            // Okay to set a field containing a ReadOnly field by omitting the ReadOnly field\n+            // Okay to set a field containing a ReadOnly field if the ReadOnly field is omitted\n             \"{\\\"patch\\\": {\\\"$set\\\": {\\\"ArrayWithInlineRecord\\\": [{\\\"bar2\\\": \\\"missing bar1\\\"}]}}}\",\n+            \"{\\\"patch\\\": {\\\"$set\\\": {\\\"UnionFieldWithInlineRecord\\\": {\\\"com.linkedin.restli.examples.greetings.api.myRecord\\\": {}}}}}\",\n+            \"{\\\"patch\\\": {\\\"$set\\\": {\\\"validationDemoNext\\\": {\\\"stringA\\\": \\\"no stringB\\\"}}}}\",\n             // Okay to delete a field containing a ReadOnly field\n             \"{\\\"patch\\\": {\\\"$delete\\\": [\\\"ArrayWithInlineRecord\\\"]}}\",\n             // Okay to delete a field containing a CreateOnly field\n-            \"{\\\"patch\\\": {\\\"MapWithTyperefs\\\": {\\\"$delete\\\": [\\\"key1\\\"]}}}\"\n+            \"{\\\"patch\\\": {\\\"MapWithTyperefs\\\": {\\\"$delete\\\": [\\\"key1\\\"]}}}\",\n+            // Okay to set a ReadOnly field if it's the descendant of an array\n+            \"{\\\"patch\\\": {\\\"$set\\\": {\\\"ArrayWithInlineRecord\\\": [{\\\"bar1\\\": \\\"setting ReadOnly field\\\", \\\"bar2\\\": \\\"foo\\\"}]}}}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f74241211bd5b14ed6fceacc20312d2212083a2"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY1NTY1OQ==", "bodyText": "This is the request body of the PARTIAL_UPDATE request. See here for some details of the exact protocol: https://linkedin.github.io/rest.li/spec/protocol#partial-update", "url": "https://github.com/linkedin/rest.li/pull/410#discussion_r486655659", "createdAt": "2020-09-10T21:55:27Z", "author": {"login": "evanw555"}, "path": "restli-int-test/src/test/java/com/linkedin/restli/examples/TestRestLiValidation.java", "diffHunk": "@@ -557,12 +555,18 @@ public void testPartialUpdateFailure(RestClient restClient, Object builder, Stri\n             \"{\\\"patch\\\": {\\\"validationDemoNext\\\": {\\\"$set\\\": {\\\"stringA\\\": \\\"some value\\\"}}}}\",\n             // A field (MapWithTyperefs/key1) containing a CreateOnly field (MapWithTyperefs/key1/id) has to be partially set\n             \"{\\\"patch\\\": {\\\"MapWithTyperefs\\\": {\\\"key1\\\": {\\\"$set\\\": {\\\"message\\\": \\\"some message\\\", \\\"tone\\\": \\\"SINCERE\\\"}}}}}\",\n-            // Okay to set a field containing a ReadOnly field by omitting the ReadOnly field\n+            // Okay to set a field containing a ReadOnly field if the ReadOnly field is omitted\n             \"{\\\"patch\\\": {\\\"$set\\\": {\\\"ArrayWithInlineRecord\\\": [{\\\"bar2\\\": \\\"missing bar1\\\"}]}}}\",\n+            \"{\\\"patch\\\": {\\\"$set\\\": {\\\"UnionFieldWithInlineRecord\\\": {\\\"com.linkedin.restli.examples.greetings.api.myRecord\\\": {}}}}}\",\n+            \"{\\\"patch\\\": {\\\"$set\\\": {\\\"validationDemoNext\\\": {\\\"stringA\\\": \\\"no stringB\\\"}}}}\",\n             // Okay to delete a field containing a ReadOnly field\n             \"{\\\"patch\\\": {\\\"$delete\\\": [\\\"ArrayWithInlineRecord\\\"]}}\",\n             // Okay to delete a field containing a CreateOnly field\n-            \"{\\\"patch\\\": {\\\"MapWithTyperefs\\\": {\\\"$delete\\\": [\\\"key1\\\"]}}}\"\n+            \"{\\\"patch\\\": {\\\"MapWithTyperefs\\\": {\\\"$delete\\\": [\\\"key1\\\"]}}}\",\n+            // Okay to set a ReadOnly field if it's the descendant of an array\n+            \"{\\\"patch\\\": {\\\"$set\\\": {\\\"ArrayWithInlineRecord\\\": [{\\\"bar1\\\": \\\"setting ReadOnly field\\\", \\\"bar2\\\": \\\"foo\\\"}]}}}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA5MzExNw=="}, "originalCommit": {"oid": "7f74241211bd5b14ed6fceacc20312d2212083a2"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 341, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}