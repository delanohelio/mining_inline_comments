{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwOTkzMTg5", "number": 275, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMzoxNzo0OFrOD8TtfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNjozNTo1NVrOD8v_QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTY0MDkyOnYy", "diffSide": "RIGHT", "path": "d2/src/test/java/com/linkedin/d2/balancer/servers/ZookeeperConnectionManagerTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMzoxNzo0OFrOGVKpvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMTo0MTo0MFrOGWUoPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg0NzgwNw==", "bodyText": "It is not necessary but I think 3 times will be better, sort of industry standard?", "url": "https://github.com/linkedin/rest.li/pull/275#discussion_r424847807", "createdAt": "2020-05-14T03:17:48Z", "author": {"login": "junchuanwang"}, "path": "d2/src/test/java/com/linkedin/d2/balancer/servers/ZookeeperConnectionManagerTest.java", "diffHunk": "@@ -352,7 +353,7 @@ public void testMarkUpDuringSessionExpiration()\n     shutdownManager(manager);\n   }\n \n-  @Test(invocationCount = 10, timeOut = 10000)\n+  @Test(invocationCount = 10, timeOut = 10000, retryAnalyzer = SingleRetry.class) // TODO: temporary retry to alleviate CI failures, should be investigated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b53f83fe16a02ee002081094bf9682b0d05aee"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4MzQwMQ==", "bodyText": "I can create another implementation for 3 retries. I think I will add this as part of the dev guide:\n\nIf test is flaky in CI, add single retry.\nIf still flaky, use three retries.\nIf still flaky, add to ci-flaky group.\n\nOr do you think this is excessive?", "url": "https://github.com/linkedin/rest.li/pull/275#discussion_r424883401", "createdAt": "2020-05-14T05:44:31Z", "author": {"login": "evanw555"}, "path": "d2/src/test/java/com/linkedin/d2/balancer/servers/ZookeeperConnectionManagerTest.java", "diffHunk": "@@ -352,7 +353,7 @@ public void testMarkUpDuringSessionExpiration()\n     shutdownManager(manager);\n   }\n \n-  @Test(invocationCount = 10, timeOut = 10000)\n+  @Test(invocationCount = 10, timeOut = 10000, retryAnalyzer = SingleRetry.class) // TODO: temporary retry to alleviate CI failures, should be investigated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg0NzgwNw=="}, "originalCommit": {"oid": "07b53f83fe16a02ee002081094bf9682b0d05aee"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUwMDMzMQ==", "bodyText": "Second Junchuan, 3 times retry is kind of industry standard. Any reason to set it for 10?", "url": "https://github.com/linkedin/rest.li/pull/275#discussion_r425500331", "createdAt": "2020-05-15T00:24:29Z", "author": {"login": "nickibi"}, "path": "d2/src/test/java/com/linkedin/d2/balancer/servers/ZookeeperConnectionManagerTest.java", "diffHunk": "@@ -352,7 +353,7 @@ public void testMarkUpDuringSessionExpiration()\n     shutdownManager(manager);\n   }\n \n-  @Test(invocationCount = 10, timeOut = 10000)\n+  @Test(invocationCount = 10, timeOut = 10000, retryAnalyzer = SingleRetry.class) // TODO: temporary retry to alleviate CI failures, should be investigated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg0NzgwNw=="}, "originalCommit": {"oid": "07b53f83fe16a02ee002081094bf9682b0d05aee"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU5NjA3MQ==", "bodyText": "Did you check the tests in ci-flaky group with 3 retires?", "url": "https://github.com/linkedin/rest.li/pull/275#discussion_r425596071", "createdAt": "2020-05-15T06:39:17Z", "author": {"login": "karthikbalasub"}, "path": "d2/src/test/java/com/linkedin/d2/balancer/servers/ZookeeperConnectionManagerTest.java", "diffHunk": "@@ -352,7 +353,7 @@ public void testMarkUpDuringSessionExpiration()\n     shutdownManager(manager);\n   }\n \n-  @Test(invocationCount = 10, timeOut = 10000)\n+  @Test(invocationCount = 10, timeOut = 10000, retryAnalyzer = SingleRetry.class) // TODO: temporary retry to alleviate CI failures, should be investigated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg0NzgwNw=="}, "originalCommit": {"oid": "07b53f83fe16a02ee002081094bf9682b0d05aee"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1OTgzNg==", "bodyText": "@nickibi The retry here (SingleRetry) allows for one retry. The invocationCount = 10 expression means that the test will run 10 times and must pass all 10 times.\n@karthikbalasub Nope, I excluded tests that failed even with a retry. I'll try another iteration that replaces ci-flaky with 3 retries. Then we'll see which ones really need to be excluded.", "url": "https://github.com/linkedin/rest.li/pull/275#discussion_r426059836", "createdAt": "2020-05-15T21:41:40Z", "author": {"login": "evanw555"}, "path": "d2/src/test/java/com/linkedin/d2/balancer/servers/ZookeeperConnectionManagerTest.java", "diffHunk": "@@ -352,7 +353,7 @@ public void testMarkUpDuringSessionExpiration()\n     shutdownManager(manager);\n   }\n \n-  @Test(invocationCount = 10, timeOut = 10000)\n+  @Test(invocationCount = 10, timeOut = 10000, retryAnalyzer = SingleRetry.class) // TODO: temporary retry to alleviate CI failures, should be investigated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg0NzgwNw=="}, "originalCommit": {"oid": "07b53f83fe16a02ee002081094bf9682b0d05aee"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTY0MzA1OnYy", "diffSide": "RIGHT", "path": "d2/src/test/java/com/linkedin/d2/balancer/servers/ZookeeperConnectionManagerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMzoxOToxOVrOGVKrCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNTo0MDozOVrOGVMwYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg0ODEzOQ==", "bodyText": "what does this group do? Is there a way to disable all ci-flaky tests after you group them?", "url": "https://github.com/linkedin/rest.li/pull/275#discussion_r424848139", "createdAt": "2020-05-14T03:19:19Z", "author": {"login": "junchuanwang"}, "path": "d2/src/test/java/com/linkedin/d2/balancer/servers/ZookeeperConnectionManagerTest.java", "diffHunk": "@@ -437,7 +438,7 @@ public void testMarkUpAndDownMultipleTimesFinalDown()\n     executorService.shutdown();\n   }\n \n-  @Test(invocationCount = 10, timeOut = 10000)\n+  @Test(invocationCount = 10, timeOut = 10000, groups = { \"ci-flaky\" })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b53f83fe16a02ee002081094bf9682b0d05aee"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4MjI3Mg==", "bodyText": "All tests in the group ci-flaky are conditionally excluded if being run in Travis. If being run locally, they will still be run. I added logic for this in the root build.gradle, search for the reference to ci-flaky", "url": "https://github.com/linkedin/rest.li/pull/275#discussion_r424882272", "createdAt": "2020-05-14T05:40:39Z", "author": {"login": "evanw555"}, "path": "d2/src/test/java/com/linkedin/d2/balancer/servers/ZookeeperConnectionManagerTest.java", "diffHunk": "@@ -437,7 +438,7 @@ public void testMarkUpAndDownMultipleTimesFinalDown()\n     executorService.shutdown();\n   }\n \n-  @Test(invocationCount = 10, timeOut = 10000)\n+  @Test(invocationCount = 10, timeOut = 10000, groups = { \"ci-flaky\" })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg0ODEzOQ=="}, "originalCommit": {"oid": "07b53f83fe16a02ee002081094bf9682b0d05aee"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTY0ODgyOnYy", "diffSide": "RIGHT", "path": "test-util/src/main/java/com/linkedin/test/util/VariableRetries.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMzoyMjo1MlrOGVKuXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNTo0MTozM1rOGVMxXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg0ODk5MA==", "bodyText": "I am afraid I am not a fan of this naming. How about just Retires or RetrySetup ?", "url": "https://github.com/linkedin/rest.li/pull/275#discussion_r424848990", "createdAt": "2020-05-14T03:22:52Z", "author": {"login": "junchuanwang"}, "path": "test-util/src/main/java/com/linkedin/test/util/VariableRetries.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.test.util;\n+\n+import org.testng.IRetryAnalyzer;\n+import org.testng.ITestResult;\n+\n+\n+/**\n+ * Allows N retries for a given test method. Subclass implementations must specify the value of N.\n+ *\n+ * Note that the same instance is used for all iterations of a test method, meaning that even if there are multiple\n+ * iterations (e.g. data provider provides multiple sets of input) only N retries will be allowed.\n+ *\n+ * @author Evan Williams\n+ */\n+public abstract class VariableRetries implements IRetryAnalyzer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b53f83fe16a02ee002081094bf9682b0d05aee"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4MjUyNg==", "bodyText": "Haha I agree, I originally named it NRetries but I thought it looked weird. I can just do Retries or something like that.", "url": "https://github.com/linkedin/rest.li/pull/275#discussion_r424882526", "createdAt": "2020-05-14T05:41:33Z", "author": {"login": "evanw555"}, "path": "test-util/src/main/java/com/linkedin/test/util/VariableRetries.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.test.util;\n+\n+import org.testng.IRetryAnalyzer;\n+import org.testng.ITestResult;\n+\n+\n+/**\n+ * Allows N retries for a given test method. Subclass implementations must specify the value of N.\n+ *\n+ * Note that the same instance is used for all iterations of a test method, meaning that even if there are multiple\n+ * iterations (e.g. data provider provides multiple sets of input) only N retries will be allowed.\n+ *\n+ * @author Evan Williams\n+ */\n+public abstract class VariableRetries implements IRetryAnalyzer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg0ODk5MA=="}, "originalCommit": {"oid": "07b53f83fe16a02ee002081094bf9682b0d05aee"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTY1MzQ0OnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDoyMDozNFrOGVyacA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMTo1OTo0N1rOGVz9YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5OTI0OA==", "bodyText": "Should we check System.getenv('TRAVIS') != null first?", "url": "https://github.com/linkedin/rest.li/pull/275#discussion_r425499248", "createdAt": "2020-05-15T00:20:34Z", "author": {"login": "nickibi"}, "path": "build.gradle", "diffHunk": "@@ -290,6 +290,16 @@ subprojects {\n     }\n   }\n \n+  // Exclude tests which are known to be flaky in the Travis CI environment\n+  if (System.getenv('TRAVIS') == 'true' && System.getenv('USER') == 'travis') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02bf43099186633e1aa637c834f20ab265fd374b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUyNDU3Nw==", "bodyText": "Doesn't this check accomplish that? null != 'true', and there's no risk of NPE", "url": "https://github.com/linkedin/rest.li/pull/275#discussion_r425524577", "createdAt": "2020-05-15T01:59:47Z", "author": {"login": "evanw555"}, "path": "build.gradle", "diffHunk": "@@ -290,6 +290,16 @@ subprojects {\n     }\n   }\n \n+  // Exclude tests which are known to be flaky in the Travis CI environment\n+  if (System.getenv('TRAVIS') == 'true' && System.getenv('USER') == 'travis') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5OTI0OA=="}, "originalCommit": {"oid": "02bf43099186633e1aa637c834f20ab265fd374b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDI2MTU1OnYy", "diffSide": "LEFT", "path": "restli-int-test/src/test/java/com/linkedin/restli/examples/instrumentation/TestLatencyInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNjozMDoyMFrOGV4IeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNjozMDoyMFrOGV4IeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU5Mjk1Mw==", "bodyText": "remove MAX_RETRIES constant", "url": "https://github.com/linkedin/rest.li/pull/275#discussion_r425592953", "createdAt": "2020-05-15T06:30:20Z", "author": {"login": "karthikbalasub"}, "path": "restli-int-test/src/test/java/com/linkedin/restli/examples/instrumentation/TestLatencyInstrumentation.java", "diffHunk": "@@ -167,37 +168,19 @@ public void afterMethod() throws Exception\n    * using streaming should be inconsequential for this test, but the server using the streaming codec will actually\n    * affect the outcome.\n    *\n-   * This test allows for multiple retries in case of an anomalous test run to prevent test flakiness.\n-   *\n    * @param useStreaming whether the server should use an underlying streaming server (\"restOverStream\") and whether the\n    *                     downstream request should use streaming (see the disclaimer above)\n    * @param forceException whether the upstream and downstream resources should trigger the error response path\n    * @param timingImportanceThreshold impacts which keys are included in the request context\n    */\n-  @Test(dataProvider = \"latencyInstrumentation\")\n+  @Test(dataProvider = \"latencyInstrumentation\", retryAnalyzer = SingleRetry.class)\n   public void testLatencyInstrumentation(boolean useStreaming, boolean forceException, boolean useScatterGather,\n       TimingImportance timingImportanceThreshold) throws RemoteInvocationException, InterruptedException\n   {\n-    AssertionError testFailure = null;\n-    for (int iteration = 0; iteration <= MAX_RETRIES; iteration++)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02bf43099186633e1aa637c834f20ab265fd374b"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDI3MzkyOnYy", "diffSide": "RIGHT", "path": "scripts/travis/build.sh", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNjozNTo1NVrOGV4QFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjoyNzo0M1rOGWVciw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU5NDkwMA==", "bodyText": "Why do we need this? With the change to skip flaky tests this shouldn't be a problem, right?\nAlso, even if release job fails, we can retry again?", "url": "https://github.com/linkedin/rest.li/pull/275#discussion_r425594900", "createdAt": "2020-05-15T06:35:55Z", "author": {"login": "karthikbalasub"}, "path": "scripts/travis/build.sh", "diffHunk": "@@ -0,0 +1,29 @@\n+#!/usr/bin/env bash\n+\n+# Ensure that this is being run by Travis\n+if [ \"$TRAVIS\" != \"true\" ] || [ \"$USER\" != \"travis\" ]; then\n+  echo \"This script should only be run by Travis CI.\"\n+  exit 2\n+fi\n+\n+# Output something every 9 minutes, otherwise Travis will abort after 10 minutes of no output\n+while sleep 9m; do echo \"[Ping] Keeping Travis job alive ($((SECONDS / 60)) minutes)\"; done &\n+WAITER_PID=$!\n+\n+# Skip tests if building a tag to prevent flaky releases", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02bf43099186633e1aa637c834f20ab265fd374b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1ODU5Mg==", "bodyText": "It seems to me that it would be redundant. All PRs to master are tested, and all commits on master are tested. Given that release tags are always on master, we would essentially be testing the same code 3 times.", "url": "https://github.com/linkedin/rest.li/pull/275#discussion_r426058592", "createdAt": "2020-05-15T21:37:47Z", "author": {"login": "evanw555"}, "path": "scripts/travis/build.sh", "diffHunk": "@@ -0,0 +1,29 @@\n+#!/usr/bin/env bash\n+\n+# Ensure that this is being run by Travis\n+if [ \"$TRAVIS\" != \"true\" ] || [ \"$USER\" != \"travis\" ]; then\n+  echo \"This script should only be run by Travis CI.\"\n+  exit 2\n+fi\n+\n+# Output something every 9 minutes, otherwise Travis will abort after 10 minutes of no output\n+while sleep 9m; do echo \"[Ping] Keeping Travis job alive ($((SECONDS / 60)) minutes)\"; done &\n+WAITER_PID=$!\n+\n+# Skip tests if building a tag to prevent flaky releases", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU5NDkwMA=="}, "originalCommit": {"oid": "02bf43099186633e1aa637c834f20ab265fd374b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA3MzIyNw==", "bodyText": "Okay, makes sense.", "url": "https://github.com/linkedin/rest.li/pull/275#discussion_r426073227", "createdAt": "2020-05-15T22:27:43Z", "author": {"login": "karthikbalasub"}, "path": "scripts/travis/build.sh", "diffHunk": "@@ -0,0 +1,29 @@\n+#!/usr/bin/env bash\n+\n+# Ensure that this is being run by Travis\n+if [ \"$TRAVIS\" != \"true\" ] || [ \"$USER\" != \"travis\" ]; then\n+  echo \"This script should only be run by Travis CI.\"\n+  exit 2\n+fi\n+\n+# Output something every 9 minutes, otherwise Travis will abort after 10 minutes of no output\n+while sleep 9m; do echo \"[Ping] Keeping Travis job alive ($((SECONDS / 60)) minutes)\"; done &\n+WAITER_PID=$!\n+\n+# Skip tests if building a tag to prevent flaky releases", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU5NDkwMA=="}, "originalCommit": {"oid": "02bf43099186633e1aa637c834f20ab265fd374b"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 428, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}