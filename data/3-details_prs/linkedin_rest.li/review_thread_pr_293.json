{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3NTY4NjQ3", "number": 293, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxMDozM1rOD8PPdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxMDozM1rOD8PPdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDkwODcwOnYy", "diffSide": "RIGHT", "path": "data/src/main/java/com/linkedin/data/schema/resolver/JarFileDataSchemaLocation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxMDozM1rOGVDpRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMzoyMToxOFrOGVG2Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMjk5OQ==", "bodyText": "This would break the functionality when a location is checked agains known bad locations.\nIn that case InJarFileDataSchemaLocation will be checked and it would not match JarFileDataSchemaLocation", "url": "https://github.com/linkedin/rest.li/pull/293#discussion_r424732999", "createdAt": "2020-05-13T21:10:33Z", "author": {"login": "karthikbalasub"}, "path": "data/src/main/java/com/linkedin/data/schema/resolver/JarFileDataSchemaLocation.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+   Copyright (c) 2012 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.data.schema.resolver;\n+\n+import com.linkedin.data.schema.DataSchemaLocation;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.zip.ZipEntry;\n+\n+\n+/**\n+ * Represents the location of a DataSchema file in a Jar.\n+ * Similar to {@link InJarFileDataSchemaLocation}, but it does not contain the jar file itself\n+ */\n+public class JarFileDataSchemaLocation implements DataSchemaLocation {\n+  private final String _jarFileName;\n+  private final String _pathInJar;\n+\n+  public JarFileDataSchemaLocation(String jarFileName, String pathInJar)\n+  {\n+    _jarFileName = jarFileName;\n+    _pathInJar = pathInJar;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    if (this == o)\n+      return true;\n+    if (o instanceof JarFileDataSchemaLocation == false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4e6aad81e8104463ba836273b371de5500a32e7"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4NTQxMQ==", "bodyText": "Updated to account for this and added unit tests", "url": "https://github.com/linkedin/rest.li/pull/293#discussion_r424785411", "createdAt": "2020-05-13T23:21:18Z", "author": {"login": "logancarmody"}, "path": "data/src/main/java/com/linkedin/data/schema/resolver/JarFileDataSchemaLocation.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+   Copyright (c) 2012 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.data.schema.resolver;\n+\n+import com.linkedin.data.schema.DataSchemaLocation;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.zip.ZipEntry;\n+\n+\n+/**\n+ * Represents the location of a DataSchema file in a Jar.\n+ * Similar to {@link InJarFileDataSchemaLocation}, but it does not contain the jar file itself\n+ */\n+public class JarFileDataSchemaLocation implements DataSchemaLocation {\n+  private final String _jarFileName;\n+  private final String _pathInJar;\n+\n+  public JarFileDataSchemaLocation(String jarFileName, String pathInJar)\n+  {\n+    _jarFileName = jarFileName;\n+    _pathInJar = pathInJar;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    if (this == o)\n+      return true;\n+    if (o instanceof JarFileDataSchemaLocation == false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMjk5OQ=="}, "originalCommit": {"oid": "b4e6aad81e8104463ba836273b371de5500a32e7"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 440, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}