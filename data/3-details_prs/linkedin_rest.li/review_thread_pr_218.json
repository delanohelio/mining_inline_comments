{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MDYxODkx", "number": 218, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODo0Mjo0NFrODn8AwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODo0MzowNFrODn8BGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjA0Mjg4OnYy", "diffSide": "RIGHT", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/tasks/ValidateSchemaAnnotationTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODo0Mjo0NFrOF2OqUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjo1MzoyMFrOF3lPuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQwNzYzNQ==", "bodyText": "Why do we need both info and debug logs? One is not enough?", "url": "https://github.com/linkedin/rest.li/pull/218#discussion_r392407635", "createdAt": "2020-03-13T18:42:44Z", "author": {"login": "nickibi"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/tasks/ValidateSchemaAnnotationTask.java", "diffHunk": "@@ -173,34 +173,36 @@ private String toNativePath(final String path)\n    * This method will check the java class annotation on the class instantiated by a className;\n    * It will search if that class has an annotation matching {@link SCHEMA_HANDLER_JAVA_ANNOTATION},\n    * if found, this class name will be added to \"foundClasses\" list.\n+   * if exceptions or error detected during instantiation of the class, this method will return without doing anything.\n    *\n    * @param name the name of class to be search annotation from.\n    * @param foundClasses a list of class names of the classes that contains {@link SCHEMA_HANDLER_JAVA_ANNOTATION}\n-   * @return whether this\n-   * @throws IOException\n    */\n-  private void checkHandlerAnnotation(String name, List<String> foundClasses) throws IOException\n+  private void checkHandlerAnnotation(String name, List<String> foundClasses)\n   {\n     if (name.endsWith(CLASS_SUFFIX))\n     {\n       int end = name.lastIndexOf(CLASS_SUFFIX);\n       String clazzPath = name.substring(0, end);\n       String clazzName = pathToName(clazzPath);\n \n+      Class<?> clazz = null;\n       try\n       {\n-        Class<?> clazz = classForName(clazzName);\n-        for (Annotation a : clazz.getAnnotations())\n+        clazz = classForName(clazzName);\n+      } catch (Exception | Error e)\n+      {\n+        getProject().getLogger().info(\"Unexpected exceptions or errors [{}] found during instantiating the class, will skip this class: [{}]\", e.getClass(), clazzName);\n+        getProject().getLogger().debug(\"Unexpected exceptions or errors found during instantiating the class [{}], detailed error: \", clazzName, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb68ab5a3e266d864d20e1423db4b4450a89d17"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyNjIzNQ==", "bodyText": "usually people don't open \"--debug\" flag, so I don't want them to be spammed by so many exception details. If they want to find out what are the concrete exceptions, they can check the debug information.", "url": "https://github.com/linkedin/rest.li/pull/218#discussion_r393826235", "createdAt": "2020-03-17T16:53:20Z", "author": {"login": "junchuanwang"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/tasks/ValidateSchemaAnnotationTask.java", "diffHunk": "@@ -173,34 +173,36 @@ private String toNativePath(final String path)\n    * This method will check the java class annotation on the class instantiated by a className;\n    * It will search if that class has an annotation matching {@link SCHEMA_HANDLER_JAVA_ANNOTATION},\n    * if found, this class name will be added to \"foundClasses\" list.\n+   * if exceptions or error detected during instantiation of the class, this method will return without doing anything.\n    *\n    * @param name the name of class to be search annotation from.\n    * @param foundClasses a list of class names of the classes that contains {@link SCHEMA_HANDLER_JAVA_ANNOTATION}\n-   * @return whether this\n-   * @throws IOException\n    */\n-  private void checkHandlerAnnotation(String name, List<String> foundClasses) throws IOException\n+  private void checkHandlerAnnotation(String name, List<String> foundClasses)\n   {\n     if (name.endsWith(CLASS_SUFFIX))\n     {\n       int end = name.lastIndexOf(CLASS_SUFFIX);\n       String clazzPath = name.substring(0, end);\n       String clazzName = pathToName(clazzPath);\n \n+      Class<?> clazz = null;\n       try\n       {\n-        Class<?> clazz = classForName(clazzName);\n-        for (Annotation a : clazz.getAnnotations())\n+        clazz = classForName(clazzName);\n+      } catch (Exception | Error e)\n+      {\n+        getProject().getLogger().info(\"Unexpected exceptions or errors [{}] found during instantiating the class, will skip this class: [{}]\", e.getClass(), clazzName);\n+        getProject().getLogger().debug(\"Unexpected exceptions or errors found during instantiating the class [{}], detailed error: \", clazzName, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQwNzYzNQ=="}, "originalCommit": {"oid": "7bb68ab5a3e266d864d20e1423db4b4450a89d17"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjA0Mzc2OnYy", "diffSide": "RIGHT", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/tasks/ValidateSchemaAnnotationTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODo0MzowNFrOF2Oq4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODo0MzowNFrOF2Oq4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQwNzc3Ng==", "bodyText": "nit: errors", "url": "https://github.com/linkedin/rest.li/pull/218#discussion_r392407776", "createdAt": "2020-03-13T18:43:04Z", "author": {"login": "nickibi"}, "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/tasks/ValidateSchemaAnnotationTask.java", "diffHunk": "@@ -173,34 +173,36 @@ private String toNativePath(final String path)\n    * This method will check the java class annotation on the class instantiated by a className;\n    * It will search if that class has an annotation matching {@link SCHEMA_HANDLER_JAVA_ANNOTATION},\n    * if found, this class name will be added to \"foundClasses\" list.\n+   * if exceptions or error detected during instantiation of the class, this method will return without doing anything.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb68ab5a3e266d864d20e1423db4b4450a89d17"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 624, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}