{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMjI0MjQz", "number": 410, "title": "Loosen validation for array-descendant patch fields", "bodyText": "This change allows a PARTIAL_UPDATE or BATCH_PARTIAL_UPDATE request to\nset a ReadOnly/CreateOnly field if that field is the descendant of an\narray. This is needed because there's no real way to \"patch\" individual\narray elements in Rest.li, so array patching actually sets the entire\narray. Thus, users need a way to \"patch\" an array while maintaining the\nexisting values of ReadOnly/CreateOnly fields.\nNote:\n\nThe IDL/snapshot changes are just so I can test the logic for CreateOnly by adding the create-only field bar3 inside the array in the PDL model.\nI renamed DataValidator to RestLiAnnotationDataValidator because it makes more sense, IMO.", "createdAt": "2020-09-08T18:33:07Z", "url": "https://github.com/linkedin/rest.li/pull/410", "merged": true, "mergeCommit": {"oid": "5ba25d3d9a47e79d6705bdb42558c73cb089bab8"}, "closed": true, "closedAt": "2020-09-11T00:32:46Z", "author": {"login": "evanw555"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHS6sFAFqTQ4NTQwOTA1NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHpMJkgBqjM3NTM1NDg5OTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NDA5MDU0", "url": "https://github.com/linkedin/rest.li/pull/410#pullrequestreview-485409054", "createdAt": "2020-09-09T21:15:22Z", "commit": {"oid": "08b47f8ce3bb1607899d0d6bbc0130b80b164668"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMToxNToyM1rOHPaldw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMToxNjo1OVrOHPaoTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyNjI2Mw==", "bodyText": "I totally agree the naming needs to be enhanced. There are just too many validators IMO.\nI was always curious about this naming convention. Before we named validators like \"DataSchemaAnnotationValidator\" or \"DataValidator\", now later a few new validators are now with a \"RestLi\"prefix, does that carry special meaning?", "url": "https://github.com/linkedin/rest.li/pull/410#discussion_r485926263", "createdAt": "2020-09-09T21:15:23Z", "author": {"login": "junchuanwang"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/validation/RestLiDataValidator.java", "diffHunk": "@@ -274,9 +278,14 @@ else if (annotationName.equals(CreateOnly.class.getAnnotation(RestSpecAnnotation\n     _validatorClassMap = Collections.unmodifiableMap(validatorClassMap);\n   }\n \n-  private class DataValidator extends DataSchemaAnnotationValidator\n+  /**\n+   * Validates input data and patches using a given resource's {@link ReadOnly} and {@link CreateOnly} annotations.\n+   * Since it's an extension of {@link DataSchemaAnnotationValidator}, it also validates the data using whatever custom\n+   * validators are defined in the schema.\n+   */\n+  private class RestLiAnnotationDataValidator extends DataSchemaAnnotationValidator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08b47f8ce3bb1607899d0d6bbc0130b80b164668"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyNjI5MA==", "bodyText": "Did you use this for debug? Not recommend to add it here.", "url": "https://github.com/linkedin/rest.li/pull/410#discussion_r485926290", "createdAt": "2020-09-09T21:15:26Z", "author": {"login": "junchuanwang"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/validation/RestLiDataValidator.java", "diffHunk": "@@ -286,15 +295,38 @@ public void validate(ValidatorContext context)\n     {\n       super.validate(context);\n       DataElement element = context.dataElement();\n-      if (_readOnlyRestrictedPredicate.evaluate(element))\n+      System.out.println(\"Validate: \" + element);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08b47f8ce3bb1607899d0d6bbc0130b80b164668"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyNjk4OA==", "bodyText": "why not\nif (!grantArrayDescendantException(element)) {\n  // Original logic\n}", "url": "https://github.com/linkedin/rest.li/pull/410#discussion_r485926988", "createdAt": "2020-09-09T21:16:59Z", "author": {"login": "junchuanwang"}, "path": "restli-common/src/main/java/com/linkedin/restli/common/validation/RestLiDataValidator.java", "diffHunk": "@@ -286,15 +295,38 @@ public void validate(ValidatorContext context)\n     {\n       super.validate(context);\n       DataElement element = context.dataElement();\n-      if (_readOnlyRestrictedPredicate.evaluate(element))\n+      System.out.println(\"Validate: \" + element);\n+      if (_readOnlyRestrictedPredicate.evaluate(element) && !grantArrayDescendantException(element))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08b47f8ce3bb1607899d0d6bbc0130b80b164668"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NTk4NjM5", "url": "https://github.com/linkedin/rest.li/pull/410#pullrequestreview-485598639", "createdAt": "2020-09-10T05:46:19Z", "commit": {"oid": "7f74241211bd5b14ed6fceacc20312d2212083a2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NjA5NjQx", "url": "https://github.com/linkedin/rest.li/pull/410#pullrequestreview-485609641", "createdAt": "2020-09-10T06:13:21Z", "commit": {"oid": "7f74241211bd5b14ed6fceacc20312d2212083a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjoxMzoyMVrOHPkfzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjoxMzoyMVrOHPkfzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA4ODY1Mw==", "bodyText": "What is the wildcard meaning in here", "url": "https://github.com/linkedin/rest.li/pull/410#discussion_r486088653", "createdAt": "2020-09-10T06:13:21Z", "author": {"login": "BrianPin"}, "path": "restli-int-test-api/src/main/idl/com.linkedin.restli.examples.greetings.client.autoValidationDemos.restspec.json", "diffHunk": "@@ -1,7 +1,7 @@\n {\n   \"annotations\" : {\n     \"createOnly\" : {\n-      \"value\" : [ \"stringB\", \"intB\", \"UnionFieldWithInlineRecord/com.linkedin.restli.examples.greetings.api.myRecord/foo2\", \"MapWithTyperefs/*/id\" ]\n+      \"value\" : [ \"stringB\", \"intB\", \"UnionFieldWithInlineRecord/com.linkedin.restli.examples.greetings.api.myRecord/foo2\", \"MapWithTyperefs/*/id\", \"ArrayWithInlineRecord/*/bar3\" ]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f74241211bd5b14ed6fceacc20312d2212083a2"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NjE1MDQ2", "url": "https://github.com/linkedin/rest.li/pull/410#pullrequestreview-485615046", "createdAt": "2020-09-10T06:24:35Z", "commit": {"oid": "7f74241211bd5b14ed6fceacc20312d2212083a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjoyNDozNVrOHPkxPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjoyNDozNVrOHPkxPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA5MzExNw==", "bodyText": "What does the dollar sign $ represent in this string-formed request?", "url": "https://github.com/linkedin/rest.li/pull/410#discussion_r486093117", "createdAt": "2020-09-10T06:24:35Z", "author": {"login": "BrianPin"}, "path": "restli-int-test/src/test/java/com/linkedin/restli/examples/TestRestLiValidation.java", "diffHunk": "@@ -557,12 +555,18 @@ public void testPartialUpdateFailure(RestClient restClient, Object builder, Stri\n             \"{\\\"patch\\\": {\\\"validationDemoNext\\\": {\\\"$set\\\": {\\\"stringA\\\": \\\"some value\\\"}}}}\",\n             // A field (MapWithTyperefs/key1) containing a CreateOnly field (MapWithTyperefs/key1/id) has to be partially set\n             \"{\\\"patch\\\": {\\\"MapWithTyperefs\\\": {\\\"key1\\\": {\\\"$set\\\": {\\\"message\\\": \\\"some message\\\", \\\"tone\\\": \\\"SINCERE\\\"}}}}}\",\n-            // Okay to set a field containing a ReadOnly field by omitting the ReadOnly field\n+            // Okay to set a field containing a ReadOnly field if the ReadOnly field is omitted\n             \"{\\\"patch\\\": {\\\"$set\\\": {\\\"ArrayWithInlineRecord\\\": [{\\\"bar2\\\": \\\"missing bar1\\\"}]}}}\",\n+            \"{\\\"patch\\\": {\\\"$set\\\": {\\\"UnionFieldWithInlineRecord\\\": {\\\"com.linkedin.restli.examples.greetings.api.myRecord\\\": {}}}}}\",\n+            \"{\\\"patch\\\": {\\\"$set\\\": {\\\"validationDemoNext\\\": {\\\"stringA\\\": \\\"no stringB\\\"}}}}\",\n             // Okay to delete a field containing a ReadOnly field\n             \"{\\\"patch\\\": {\\\"$delete\\\": [\\\"ArrayWithInlineRecord\\\"]}}\",\n             // Okay to delete a field containing a CreateOnly field\n-            \"{\\\"patch\\\": {\\\"MapWithTyperefs\\\": {\\\"$delete\\\": [\\\"key1\\\"]}}}\"\n+            \"{\\\"patch\\\": {\\\"MapWithTyperefs\\\": {\\\"$delete\\\": [\\\"key1\\\"]}}}\",\n+            // Okay to set a ReadOnly field if it's the descendant of an array\n+            \"{\\\"patch\\\": {\\\"$set\\\": {\\\"ArrayWithInlineRecord\\\": [{\\\"bar1\\\": \\\"setting ReadOnly field\\\", \\\"bar2\\\": \\\"foo\\\"}]}}}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f74241211bd5b14ed6fceacc20312d2212083a2"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzQzMTc2", "url": "https://github.com/linkedin/rest.li/pull/410#pullrequestreview-486343176", "createdAt": "2020-09-10T22:06:12Z", "commit": {"oid": "7f74241211bd5b14ed6fceacc20312d2212083a2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzUyMjMz", "url": "https://github.com/linkedin/rest.li/pull/410#pullrequestreview-486352233", "createdAt": "2020-09-10T22:23:50Z", "commit": {"oid": "7f74241211bd5b14ed6fceacc20312d2212083a2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e24826cd050208dea1c0de530098a26042686ac5", "author": {"user": {"login": "evanw555", "name": "Evan Williams"}}, "url": "https://github.com/linkedin/rest.li/commit/e24826cd050208dea1c0de530098a26042686ac5", "committedDate": "2020-09-10T23:07:39Z", "message": "Loosen validation for array-descendant patch fields\n\nThis change allows a PARTIAL_UPDATE or BATCH_PARTIAL_UPDATE request to\nset a ReadOnly/CreateOnly field if that field is the descendant of an\narray. This is needed because there's no real way to \"patch\" individual\narray elements in Rest.li, so array patching actually sets the entire\narray. Thus, users need a way to \"patch\" an array while maintaining the\nexisting values of ReadOnly/CreateOnly fields."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dc62621c82477b0075dded18308c176be37693d3", "author": {"user": {"login": "evanw555", "name": "Evan Williams"}}, "url": "https://github.com/linkedin/rest.li/commit/dc62621c82477b0075dded18308c176be37693d3", "committedDate": "2020-09-10T22:44:51Z", "message": "Rename validator"}, "afterCommit": {"oid": "e24826cd050208dea1c0de530098a26042686ac5", "author": {"user": {"login": "evanw555", "name": "Evan Williams"}}, "url": "https://github.com/linkedin/rest.li/commit/e24826cd050208dea1c0de530098a26042686ac5", "committedDate": "2020-09-10T23:07:39Z", "message": "Loosen validation for array-descendant patch fields\n\nThis change allows a PARTIAL_UPDATE or BATCH_PARTIAL_UPDATE request to\nset a ReadOnly/CreateOnly field if that field is the descendant of an\narray. This is needed because there's no real way to \"patch\" individual\narray elements in Rest.li, so array patching actually sets the entire\narray. Thus, users need a way to \"patch\" an array while maintaining the\nexisting values of ReadOnly/CreateOnly fields."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4650, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}