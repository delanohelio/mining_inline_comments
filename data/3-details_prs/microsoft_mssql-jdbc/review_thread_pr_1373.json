{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMzE2Mzg4", "number": 1373, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxOTo0NjowNFrOELCIGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMzowODo0OFrOELE8Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDA0NjM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/StreamColumns.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxOTo0NjowNFrOGsa_rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxOTo0NjowNFrOGsa_rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzMjgxMw==", "bodyText": "two semicolons", "url": "https://github.com/microsoft/mssql-jdbc/pull/1373#discussion_r449232813", "createdAt": "2020-07-02T19:46:04Z", "author": {"login": "peterbae"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/StreamColumns.java", "diffHunk": "@@ -274,8 +277,12 @@ private SensitivityClassification processDataClassification(TDSReader tdsReader)\n             informationTypes.add(readSensitivityInformationType(tdsReader));\n         }\n \n-        int sensitivityRank = SensitivityRank.NOT_DEFINED.getValue();\n-        if (TDS.MAX_SUPPORTED_DATA_CLASSIFICATION_VERSION <= tdsReader.getServerSupportedDataClassificationVersion()) {\n+        sensitivityRankSupported = tdsReader\n+                .getServerSupportedDataClassificationVersion() >= TDS.DATA_CLASSIFICATION_VERSION_ADDED_RANK_SUPPORT;\n+\n+        // get sensitivity rank if supported\n+        int sensitivityRank = SensitivityRank.NOT_DEFINED.getValue();;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5735612a27ae498fa6d7d2bf4c9b7e5b86f5b277"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDExNzA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerDatabaseMetaData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMDoxMjo0OVrOGsbrPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMDoxMjo0OVrOGsbrPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI0Mzk2NQ==", "bodyText": "This change is already merged.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1373#discussion_r449243965", "createdAt": "2020-07-02T20:12:49Z", "author": {"login": "ulvii"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerDatabaseMetaData.java", "diffHunk": "@@ -2556,6 +2556,7 @@ public boolean locatorsUpdateCopy() throws SQLException {\n      *\n      * @return the database compatibility level value (from sys.databases table).\n      * @throws SQLException\n+     *         if error", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5735612a27ae498fa6d7d2bf4c9b7e5b86f5b277"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDE5NTMxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/microsoft/sqlserver/jdbc/resultset/DataClassificationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMDo0MToyN1rOGscaZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMDo0MToyN1rOGscaZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI1NjAzNw==", "bodyText": "We need to add ORDER BY to this select statement.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1373#discussion_r449256037", "createdAt": "2020-07-02T20:41:27Z", "author": {"login": "ulvii"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/resultset/DataClassificationTest.java", "diffHunk": "@@ -39,31 +40,35 @@\n \n     private static final String addSensitivitySql = \"ADD SENSITIVITY CLASSIFICATION TO %s.%s WITH (LABEL='PII', LABEL_ID='L1', INFORMATION_TYPE='%s', INFORMATION_TYPE_ID='%s'%s)\";\n     private static final String sensitivityRankSql = \", RANK=%s\";\n-    private static String sensitivityRank[][] = {{\"NONE\", \"0\"}, {\"LOW\", \"10\"}, {\"MEDIUM\", \"20\"}, {\"HIGH\", \"30\"},\n-            {\"CRITICAL\", \"40\"}};\n \n     /**\n      * Tests data classification metadata information from SQL Server\n      * \n+     * TODO: remove xAzureSQLDW tag once issue on server is fixed\n+     * (currently DW not returning rank info) VSO issue 12931\n+     * \n      * @throws Exception\n      */\n     @Tag(Constants.xSQLv12)\n     @Tag(Constants.xSQLv14)\n+    @Tag(Constants.xAzureSQLDW)\n     @Test\n     public void testDataClassificationMetadata() throws Exception {\n         try (Statement stmt = connection.createStatement();) {\n             if (!TestUtils.serverSupportsDataClassification(stmt)) {\n                 fail(TestResource.getResource(\"R_dataClassificationNotSupported\"));\n             }\n \n-            for (int i = 0; i < sensitivityRank.length; i++) {\n-                createTable(connection, stmt);\n-                addSensitivity(connection, stmt, sensitivityRank[i][0]);\n-                insertData(connection, stmt);\n-                try (SQLServerResultSet rs = (SQLServerResultSet) stmt.executeQuery(\"SELECT * FROM \" + tableName)) {\n-                    verifySensitivityClassification(rs, Integer.parseInt(sensitivityRank[i][1]));\n+            for (SensitivityRank i : SensitivityRank.values()) {\n+                if (SensitivityRank.NOT_DEFINED != i) {\n+                    createTable(connection, stmt);\n+                    addSensitivity(connection, stmt, i.toString());\n+                    insertData(connection, stmt);\n+                    try (SQLServerResultSet rs = (SQLServerResultSet) stmt.executeQuery(\"SELECT * FROM \" + tableName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5735612a27ae498fa6d7d2bf4c9b7e5b86f5b277"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDQwNTI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/StreamColumns.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMjoxMzoxNlrOGseZbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMjoxMzoxNlrOGseZbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI4ODU1Ng==", "bodyText": "Just to confirm - this line (328) was executed regardless of sensitivity rank being supported, but now it's only being executed if sensitivity rank is supported because it moved up one if statement bracket. Is this intended?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1373#discussion_r449288556", "createdAt": "2020-07-02T22:13:16Z", "author": {"login": "peterbae"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/StreamColumns.java", "diffHunk": "@@ -311,21 +318,26 @@ private SensitivityClassification processDataClassification(TDSReader tdsReader)\n                     informationType = informationTypes.get(informationTypeIndex);\n                 }\n \n-                if (TDS.MAX_SUPPORTED_DATA_CLASSIFICATION_VERSION <= tdsReader\n-                        .getServerSupportedDataClassificationVersion()) {\n-                    sensitivityRank = tdsReader.readInt();\n-                    if (!SensitivityRank.isValid(sensitivityRank)) {\n+                int sensitivityRankProperty = SensitivityRank.NOT_DEFINED.getValue();\n+                if (sensitivityRankSupported) {\n+                    sensitivityRankProperty = tdsReader.readInt();\n+                    if (!SensitivityRank.isValid(sensitivityRankProperty)) {\n                         tdsReader.throwInvalidTDS();\n                     }\n+                    // add sensitivity properties for the source", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5735612a27ae498fa6d7d2bf4c9b7e5b86f5b277"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDUwNzgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/dataclassification/SensitivityClassification.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMzowODo0OFrOGsfUYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMDoxNDoxNlrOGsgOeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwMzY0OA==", "bodyText": "SensitivityRank used to not be visible to public, but now it is. Is this intended?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1373#discussion_r449303648", "createdAt": "2020-07-02T23:08:48Z", "author": {"login": "peterbae"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/dataclassification/SensitivityClassification.java", "diffHunk": "@@ -8,20 +8,54 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import com.microsoft.sqlserver.jdbc.SQLServerException;\n+\n \n /**\n- * Provides the functionlity to retrieve Sensitivity Classification data as received from SQL Server for the active\n+ * Provides the functionality to retrieve Sensitivity Classification data as received from SQL Server for the active\n  * resultSet\n  */\n public class SensitivityClassification {\n+\n+    public enum SensitivityRank {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5735612a27ae498fa6d7d2bf4c9b7e5b86f5b277"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMxODUyMQ==", "bodyText": "yes this is so users can check the values", "url": "https://github.com/microsoft/mssql-jdbc/pull/1373#discussion_r449318521", "createdAt": "2020-07-03T00:14:16Z", "author": {"login": "lilgreenbird"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/dataclassification/SensitivityClassification.java", "diffHunk": "@@ -8,20 +8,54 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import com.microsoft.sqlserver.jdbc.SQLServerException;\n+\n \n /**\n- * Provides the functionlity to retrieve Sensitivity Classification data as received from SQL Server for the active\n+ * Provides the functionality to retrieve Sensitivity Classification data as received from SQL Server for the active\n  * resultSet\n  */\n public class SensitivityClassification {\n+\n+    public enum SensitivityRank {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwMzY0OA=="}, "originalCommit": {"oid": "5735612a27ae498fa6d7d2bf4c9b7e5b86f5b277"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1122, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}