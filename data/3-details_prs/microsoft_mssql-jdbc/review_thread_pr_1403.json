{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MTQxNjI0", "number": 1403, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo1NjoyN1rOEXfu9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMTo1MTowNVrOEbI61A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDcyNjMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo1NjoyN1rOG_UM1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNjoyNzowOVrOHATHJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0NDQzNg==", "bodyText": "public methods should have description header", "url": "https://github.com/microsoft/mssql-jdbc/pull/1403#discussion_r469044436", "createdAt": "2020-08-12T06:56:27Z", "author": {"login": "lilgreenbird"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java", "diffHunk": "@@ -702,9 +702,13 @@ byte getServerSupportedDataClassificationVersion() {\n     // Boolean that indicates whether LOB objects created by this connection should be loaded into memory\n     private boolean delayLoadingLobs = SQLServerDriverBooleanProperty.DELAY_LOADING_LOBS.getDefaultValue();\n \n-    boolean getDelayLoadingLobs() {\n+    public boolean getDelayLoadingLobs() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8499a7ca79c1d1373ac9faead5e9e8cd8315cae2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3NzU3MA==", "bodyText": "Shouldn't you override here?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1403#discussion_r469577570", "createdAt": "2020-08-12T22:16:59Z", "author": {"login": "ulvii"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java", "diffHunk": "@@ -702,9 +702,13 @@ byte getServerSupportedDataClassificationVersion() {\n     // Boolean that indicates whether LOB objects created by this connection should be loaded into memory\n     private boolean delayLoadingLobs = SQLServerDriverBooleanProperty.DELAY_LOADING_LOBS.getDefaultValue();\n \n-    boolean getDelayLoadingLobs() {\n+    public boolean getDelayLoadingLobs() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0NDQzNg=="}, "originalCommit": {"oid": "8499a7ca79c1d1373ac9faead5e9e8cd8315cae2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA3NTE3NQ==", "bodyText": "Well there's no inherited implementation to get confused about, so the only reason to do it would be for \"commenting\".", "url": "https://github.com/microsoft/mssql-jdbc/pull/1403#discussion_r470075175", "createdAt": "2020-08-13T16:27:09Z", "author": {"login": "rene-ye"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java", "diffHunk": "@@ -702,9 +702,13 @@ byte getServerSupportedDataClassificationVersion() {\n     // Boolean that indicates whether LOB objects created by this connection should be loaded into memory\n     private boolean delayLoadingLobs = SQLServerDriverBooleanProperty.DELAY_LOADING_LOBS.getDefaultValue();\n \n-    boolean getDelayLoadingLobs() {\n+    public boolean getDelayLoadingLobs() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0NDQzNg=="}, "originalCommit": {"oid": "8499a7ca79c1d1373ac9faead5e9e8cd8315cae2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDcyNjkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo1NjozNlrOG_UNLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo1NjozNlrOG_UNLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0NDUyNw==", "bodyText": "header", "url": "https://github.com/microsoft/mssql-jdbc/pull/1403#discussion_r469044527", "createdAt": "2020-08-12T06:56:36Z", "author": {"login": "lilgreenbird"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java", "diffHunk": "@@ -702,9 +702,13 @@ byte getServerSupportedDataClassificationVersion() {\n     // Boolean that indicates whether LOB objects created by this connection should be loaded into memory\n     private boolean delayLoadingLobs = SQLServerDriverBooleanProperty.DELAY_LOADING_LOBS.getDefaultValue();\n \n-    boolean getDelayLoadingLobs() {\n+    public boolean getDelayLoadingLobs() {\n         return delayLoadingLobs;\n     }\n+    \n+    public void setDelayLoadingLobs(boolean b) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8499a7ca79c1d1373ac9faead5e9e8cd8315cae2"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDczMzcwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/microsoft/sqlserver/jdbc/SQLServerConnectionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo1OTowNFrOG_URWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMToyMTo1MlrOG_zUeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0NTU5NQ==", "bodyText": "is there a tab here?? (same in line 575)", "url": "https://github.com/microsoft/mssql-jdbc/pull/1403#discussion_r469045595", "createdAt": "2020-08-12T06:59:04Z", "author": {"login": "lilgreenbird"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/SQLServerConnectionTest.java", "diffHunk": "@@ -434,7 +437,7 @@ public void testClosedConnection() throws SQLException {\n         } catch (SQLServerException e) {\r\n             assertEquals(e.getMessage(), TestResource.getResource(\"R_connectionIsClosed\"),\r\n                     TestResource.getResource(\"R_wrongExceptionMessage\"));\r\n-          assertEquals(\"08S01\", e.getSQLState(), TestResource.getResource(\"R_wrongSqlState\"));\r\n+            assertEquals(\"08S01\", e.getSQLState(), TestResource.getResource(\"R_wrongSqlState\"));\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8499a7ca79c1d1373ac9faead5e9e8cd8315cae2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1NDI5OA==", "bodyText": "It wasn't formatted properly, it was off by 2 spaces.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1403#discussion_r469554298", "createdAt": "2020-08-12T21:21:52Z", "author": {"login": "rene-ye"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/SQLServerConnectionTest.java", "diffHunk": "@@ -434,7 +437,7 @@ public void testClosedConnection() throws SQLException {\n         } catch (SQLServerException e) {\r\n             assertEquals(e.getMessage(), TestResource.getResource(\"R_connectionIsClosed\"),\r\n                     TestResource.getResource(\"R_wrongExceptionMessage\"));\r\n-          assertEquals(\"08S01\", e.getSQLState(), TestResource.getResource(\"R_wrongSqlState\"));\r\n+            assertEquals(\"08S01\", e.getSQLState(), TestResource.getResource(\"R_wrongSqlState\"));\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0NTU5NQ=="}, "originalCommit": {"oid": "8499a7ca79c1d1373ac9faead5e9e8cd8315cae2"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDc0NTQ3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/microsoft/sqlserver/jdbc/SQLServerConnectionTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzowMzoyNlrOG_UY3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMTowNDozMVrOHAdoLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0NzUxOQ==", "bodyText": "expected is 1st param", "url": "https://github.com/microsoft/mssql-jdbc/pull/1403#discussion_r469047519", "createdAt": "2020-08-12T07:03:26Z", "author": {"login": "lilgreenbird"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/SQLServerConnectionTest.java", "diffHunk": "@@ -569,7 +572,7 @@ public void testClientConnectionId() throws Exception {\n             } catch (SQLException e) {\r\n                 assertEquals(e.getMessage(), TestResource.getResource(\"R_connectionIsClosed\"),\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8499a7ca79c1d1373ac9faead5e9e8cd8315cae2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1NDM0Nw==", "bodyText": "Not a part of this PR.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1403#discussion_r469554347", "createdAt": "2020-08-12T21:21:58Z", "author": {"login": "rene-ye"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/SQLServerConnectionTest.java", "diffHunk": "@@ -569,7 +572,7 @@ public void testClientConnectionId() throws Exception {\n             } catch (SQLException e) {\r\n                 assertEquals(e.getMessage(), TestResource.getResource(\"R_connectionIsClosed\"),\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0NzUxOQ=="}, "originalCommit": {"oid": "8499a7ca79c1d1373ac9faead5e9e8cd8315cae2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0NzQ2OA==", "bodyText": "yeah, but it's in the same place, why not fix?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1403#discussion_r470247468", "createdAt": "2020-08-13T21:04:31Z", "author": {"login": "lilgreenbird"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/SQLServerConnectionTest.java", "diffHunk": "@@ -569,7 +572,7 @@ public void testClientConnectionId() throws Exception {\n             } catch (SQLException e) {\r\n                 assertEquals(e.getMessage(), TestResource.getResource(\"R_connectionIsClosed\"),\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0NzUxOQ=="}, "originalCommit": {"oid": "8499a7ca79c1d1373ac9faead5e9e8cd8315cae2"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDEyODc1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/microsoft/sqlserver/jdbc/SQLServerConnectionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMjoyNDozN1rOG_07EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMjoyNDozN1rOG_07EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MDU2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            assertEquals(e.getMessage(), TestResource.getResource(\"R_connectionIsClosed\"),\n          \n          \n            \n                            assertEquals(TestResource.getResource(\"R_connectionIsClosed\"), e.getMessage(),", "url": "https://github.com/microsoft/mssql-jdbc/pull/1403#discussion_r469580560", "createdAt": "2020-08-12T22:24:37Z", "author": {"login": "ulvii"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/SQLServerConnectionTest.java", "diffHunk": "@@ -569,7 +572,7 @@ public void testClientConnectionId() throws Exception {\n             } catch (SQLException e) {\r\n                 assertEquals(e.getMessage(), TestResource.getResource(\"R_connectionIsClosed\"),\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "171f564ce211f2930699ff84de03893865a49287"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDIyMjI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerConnection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzowNDo1NlrOG_1zBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNjoyODozOFrOHATLAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU5NDg4NA==", "bodyText": "Wouldn't this be a breaking change? Since we're adding new methods to a public interface, any user who has been using ISQLServerConnection to implement their own connection class would be getting a compilation error now.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1403#discussion_r469594884", "createdAt": "2020-08-12T23:04:56Z", "author": {"login": "peterbae"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerConnection.java", "diffHunk": "@@ -358,4 +358,19 @@ CallableStatement prepareCall(String sql, int nType, int nConcur, int nHold,\n      *        boolean value for 'useFmtOnly'.\r\n      */\r\n     void setUseFmtOnly(boolean useFmtOnly);\r\n+    \r\n+    /**\r\n+     * Returns the current flag value for delayLoadingLobs.\r\n+     *\r\n+     * @return 'delayLoadingLobs' property value.\r\n+     */\r\n+    boolean getDelayLoadingLobs();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "171f564ce211f2930699ff84de03893865a49287"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA3NjE2Mg==", "bodyText": "Technically I guess, I'm not sure if anyone actually implements our interfaces.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1403#discussion_r470076162", "createdAt": "2020-08-13T16:28:38Z", "author": {"login": "rene-ye"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerConnection.java", "diffHunk": "@@ -358,4 +358,19 @@ CallableStatement prepareCall(String sql, int nType, int nConcur, int nHold,\n      *        boolean value for 'useFmtOnly'.\r\n      */\r\n     void setUseFmtOnly(boolean useFmtOnly);\r\n+    \r\n+    /**\r\n+     * Returns the current flag value for delayLoadingLobs.\r\n+     *\r\n+     * @return 'delayLoadingLobs' property value.\r\n+     */\r\n+    boolean getDelayLoadingLobs();\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU5NDg4NA=="}, "originalCommit": {"oid": "171f564ce211f2930699ff84de03893865a49287"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODY3NTMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMDozMTo1NFrOHE8QsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMDozMTo1NFrOHE8QsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk0MzY2NQ==", "bodyText": "The javadoc in the interface will be applied to this method too, you can remove these.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1403#discussion_r474943665", "createdAt": "2020-08-21T20:31:54Z", "author": {"login": "ulvii"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java", "diffHunk": "@@ -702,10 +702,27 @@ byte getServerSupportedDataClassificationVersion() {\n     // Boolean that indicates whether LOB objects created by this connection should be loaded into memory\n     private boolean delayLoadingLobs = SQLServerDriverBooleanProperty.DELAY_LOADING_LOBS.getDefaultValue();\n \n-    boolean getDelayLoadingLobs() {\n+    /**\n+     * Returns the current state of the delayLoadingLobs flag.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20b67d434f21f431097a6f7c8f4072f9483bf064"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODY5NjUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMDozNjoxOFrOHE8ecg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMDozNjoxOFrOHE8ecg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk0NzE4Ng==", "bodyText": "same here", "url": "https://github.com/microsoft/mssql-jdbc/pull/1403#discussion_r474947186", "createdAt": "2020-08-21T20:36:18Z", "author": {"login": "ulvii"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java", "diffHunk": "@@ -702,10 +702,27 @@ byte getServerSupportedDataClassificationVersion() {\n     // Boolean that indicates whether LOB objects created by this connection should be loaded into memory\n     private boolean delayLoadingLobs = SQLServerDriverBooleanProperty.DELAY_LOADING_LOBS.getDefaultValue();\n \n-    boolean getDelayLoadingLobs() {\n+    /**\n+     * Returns the current state of the delayLoadingLobs flag.\n+     * \n+     * @return delayLoadingLobs indicates whether LOB objects will be immediately loaded into memory or not.\n+     */\n+    @Override\n+    public boolean getDelayLoadingLobs() {\n         return delayLoadingLobs;\n     }\n \n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20b67d434f21f431097a6f7c8f4072f9483bf064"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODkzMTQwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/microsoft/sqlserver/jdbc/SQLServerConnectionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMTo1MTowNVrOHE-y1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMTo1MTowNVrOHE-y1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk4NTE3Mg==", "bodyText": "for debugging purpose if this fails, it would be helpful to add received as message param. (same in line 860)", "url": "https://github.com/microsoft/mssql-jdbc/pull/1403#discussion_r474985172", "createdAt": "2020-08-21T21:51:05Z", "author": {"login": "lilgreenbird"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/SQLServerConnectionTest.java", "diffHunk": "@@ -803,4 +807,57 @@ public void testRedirectedError() {\n             fail(TestResource.getResource(\"R_unexpectedErrorMessage\") + e.getMessage());\r\n         }\r\n     }\r\n+\r\n+    /*\r\n+     * Basic test to make sure lobs work with ConnectionPoolProxy as well\r\n+     */\r\n+    @Test\r\n+    public void testConnectionPoolProxyWithLobs() throws SQLException, IOException {\r\n+        String cString = getConnectionString() + \";delayLoadingLobs=false;\";\r\n+        String data = \"testConnectionPoolProxyWithLobs\";\r\n+        Clob c = null;\r\n+        try (Connection conn = PrepUtil.getConnection(cString);\r\n+                SQLServerConnectionPoolProxy proxy = new SQLServerConnectionPoolProxy((SQLServerConnection) conn)) {\r\n+            try (Statement stmt = proxy.createStatement()) {\r\n+                String tableName = RandomUtil.getIdentifier(\"streamingTest\");\r\n+                stmt.execute(\r\n+                        \"CREATE TABLE \" + AbstractSQLGenerator.escapeIdentifier(tableName) + \" (lob varchar(max))\");\r\n+                stmt.execute(\r\n+                        \"INSERT INTO \" + AbstractSQLGenerator.escapeIdentifier(tableName) + \" VALUES ('\" + data + \"')\");\r\n+                try (ResultSet rs = stmt\r\n+                        .executeQuery(\"SELECT * FROM \" + AbstractSQLGenerator.escapeIdentifier(tableName))) {\r\n+                    while (rs.next()) {\r\n+                        c = rs.getClob(1);\r\n+                        try (Reader r = c.getCharacterStream()) {\r\n+                            long clobLength = c.length();\r\n+                            // read the Reader contents into a buffer and return the complete string\r\n+                            final StringBuilder stringBuilder = new StringBuilder((int) clobLength);\r\n+                            char[] buffer = new char[(int) clobLength];\r\n+                            int amountRead = -1;\r\n+                            while ((amountRead = r.read(buffer, 0, (int) clobLength)) != -1) {\r\n+                                stringBuilder.append(buffer, 0, amountRead);\r\n+                            }\r\n+                            String received = stringBuilder.toString();\r\n+                            assertEquals(data, received);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20b67d434f21f431097a6f7c8f4072f9483bf064"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1141, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}