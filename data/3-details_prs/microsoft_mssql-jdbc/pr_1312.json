{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyOTg3NjE4", "number": 1312, "title": "Added an option to escape delimiters in CSV files when using bulk copy", "bodyText": "Fix for #1173\nAdding SQLServerBulkCSVFileRecord.setEscapeColumnDelimitersCSV. When set to true, the following rules will apply.\n\nEach field may or may not be enclosed in double quotes.\nIf fields are not enclosed with double quotes, then double quotes may not appear inside the fields.\nFields containing double quotes, and delimiters should be enclosed in double quotes.\nIf double-quotes are used to enclose fields, then a double-quote appearing inside a field must be escaped by preceding it with another double quote.", "createdAt": "2020-04-14T06:07:58Z", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312", "merged": true, "mergeCommit": {"oid": "439737ca34e0cd9ba61aa8de0103f6b1a031c46b"}, "closed": true, "closedAt": "2020-05-26T17:46:57Z", "author": {"login": "ulvii"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXUMfUgH2gAyNDAyOTg3NjE4OjU4NDI4N2ZmZjlhNDlkYTdhNDEwM2EwOTk0MTI4NjJkYmU2NDk0N2E=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclIWRjgFqTQxODUzMjg0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "584287fff9a49da7a4103a099412862dbe64947a", "author": {"user": {"login": "ulvii", "name": null}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/584287fff9a49da7a4103a099412862dbe64947a", "committedDate": "2020-04-13T19:38:05Z", "message": "Initial commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d429a0a886eb5fbd898b43bef96824469797bc8b", "author": {"user": {"login": "ulvii", "name": null}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/d429a0a886eb5fbd898b43bef96824469797bc8b", "committedDate": "2020-04-14T06:05:14Z", "message": "Add javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132", "author": {"user": {"login": "ulvii", "name": null}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/3a72af27e86d4c05f9d6c21f1da8933405cfe132", "committedDate": "2020-05-09T01:25:55Z", "message": "Fix | Cleanup the PR"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NDY5NDEw", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#pullrequestreview-416469410", "createdAt": "2020-05-21T20:30:30Z", "commit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDozMDozMVrOGZBy9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDozMDozMVrOGZBy9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5NzAxMw==", "bodyText": "I think we should rename this to getEscapeColumnDelimitersCSV, for the setter/getter convention.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r428897013", "createdAt": "2020-05-21T20:30:31Z", "author": {"login": "peterbae"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "diffHunk": "@@ -516,4 +523,58 @@ public boolean next() throws SQLServerException {\n         }\n         return (null != currentLine);\n     }\n+\n+    /**\n+     * Returns whether the rules to escape delimiters are used.\n+     *\n+     * @return true if the rules are used, false otherwise.\n+     */\n+    public boolean isEscapeColumnDelimitersCSV() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "originalPosition": 124}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NDgwNDI5", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#pullrequestreview-416480429", "createdAt": "2020-05-21T20:47:45Z", "commit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDo0Nzo0NVrOGZCUNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDo0Nzo0NVrOGZCUNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkwNTUyNw==", "bodyText": "My formatter shows that this line needs to be formatted. Can you try re-formatting this file?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r428905527", "createdAt": "2020-05-21T20:47:45Z", "author": {"login": "peterbae"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/bulkCopy/BulkCopyCSVTest.java", "diffHunk": "@@ -118,6 +134,51 @@ public void testCSVFromURL() throws SQLException {\n         }\n     }\n \n+    @Test\n+    @DisplayName(\"Test setEscapeColumnDelimitersCSV\")\n+    public void testEscapeColumnDelimitersCSV() throws SQLException, FileNotFoundException, IOException {\n+        String tableName = AbstractSQLGenerator.escapeIdentifier(RandomUtil.getIdentifier(\"BulkEscape\"));\n+        String fileName = filePath + inputFileDelimiterEscape;\n+        /*\n+         * The list below is the copy of inputFileDelimiterEscape with quotes removed.\n+         */\n+        String[][] expectedEscaped = new String[5][4];\n+        expectedEscaped[0] = new String[] {\"test\", \" test\\\"\", \"no,split\", \" testNoQuote\"};\n+        expectedEscaped[1] = new String[] {null, null, null, null};\n+        expectedEscaped[2] = new String[] {\"\\\"\", \"test\\\"test\", \"test,\\\"  test\", null};\n+        expectedEscaped[3] = new String[] {\"testNoQuote  \", \" testSpaceAround \", \" testSpaceInside \",\n+                \"  testSpaceQuote\\\" \"};\n+        expectedEscaped[4] = new String[] {null, null, null, \" testSpaceInside \"};\n+\n+        try (Connection con = getConnection(); Statement stmt = con.createStatement();\n+                SQLServerBulkCopy bulkCopy = new SQLServerBulkCopy(con);\n+                SQLServerBulkCSVFileRecord fileRecord = new SQLServerBulkCSVFileRecord(fileName, encoding, delimiter,\n+                        false)) {\n+            bulkCopy.setDestinationTableName(tableName);\n+            fileRecord.setEscapeColumnDelimitersCSV(true);\n+            fileRecord.addColumnMetadata(1, null, java.sql.Types.INTEGER, 0, 0);\n+            fileRecord.addColumnMetadata(2, null, java.sql.Types.VARCHAR, 50, 0);\n+            fileRecord.addColumnMetadata(3, null, java.sql.Types.VARCHAR, 50, 0);\n+            fileRecord.addColumnMetadata(4, null, java.sql.Types.VARCHAR, 50, 0);\n+            fileRecord.addColumnMetadata(5, null, java.sql.Types.VARCHAR, 50, 0);\n+            stmt.executeUpdate(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "originalPosition": 107}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NjYzMzEw", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#pullrequestreview-416663310", "createdAt": "2020-05-22T05:51:42Z", "commit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNTo1MTo0MlrOGZLcBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNTo1MTo0MlrOGZLcBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1NDk4MQ==", "bodyText": "Cases such as  \" test\"\"\" and  \"test\"\"test\" are actually invalid cases. RFC 4180 says that spaces need to be insides double quotes if double quotes are provided, so spaces cannot come before or after the double quotes (refer to https://stackoverflow.com/questions/4863852/space-before-quote-in-csv-field for some explanation on this too).\nCurrently the code allows this case and simply ignores the spaces, but I think we should not allow these cases (and throw an exception saying that there is an invalid row), then change this CSV file to not test for these invalid cases.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429054981", "createdAt": "2020-05-22T05:51:42Z", "author": {"login": "peterbae"}, "path": "src/test/resources/BulkCopyCSVTestInputDelimiterEscape.csv", "diffHunk": "@@ -0,0 +1,5 @@\n+1,\"test\", \" test\"\"\", \"no,split\" , testNoQuote\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NjY2NzA1", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#pullrequestreview-416666705", "createdAt": "2020-05-22T06:01:57Z", "commit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjowMTo1N1rOGZLmHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjowMTo1N1rOGZLmHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1NzU2NA==", "bodyText": "Can we add a comment here that explains this regex briefly?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429057564", "createdAt": "2020-05-22T06:01:57Z", "author": {"login": "peterbae"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "diffHunk": "@@ -49,6 +49,10 @@\n      */\n     private final String delimiter;\n \n+    private boolean escapeDelimiters;\n+\n+    private static final String escapeSplitPattern = \"(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NjY4NDc0", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#pullrequestreview-416668474", "createdAt": "2020-05-22T06:07:03Z", "commit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjowNzowM1rOGZLrPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjowNzowM1rOGZLrPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1ODg3OQ==", "bodyText": "[not a big deal, and only if you're changing this file anyway]\nthis and line 254-256 is only a single line comment", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429058879", "createdAt": "2020-05-22T06:07:03Z", "author": {"login": "lilgreenbird"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "diffHunk": "@@ -229,21 +236,24 @@ public void close() throws SQLServerException {\n         if (null == currentLine)\n             return null;\n         else {\n-            // Binary data may be corrupted\n-            // The limit in split() function should be a negative value,\n-            // otherwise trailing empty strings are discarded.\n-            // Empty string is returned if there is no value.\n-            String[] data = currentLine.split(delimiter, -1);\n-\n-            // Cannot go directly from String[] to Object[] and expect it to act\n-            // as an array.\n+            /*\n+             * Binary data may be corrupted The limit in split() function should be a negative value, otherwise trailing\n+             * empty strings are discarded. Empty string is returned if there is no value.\n+             */\n+            String[] data = (escapeDelimiters && currentLine.contains(\"\\\"\"))\n+                                                                             ? escapeQuotesRFC4180(currentLine.split(\n+                                                                                     delimiter + escapeSplitPattern))\n+                                                                             : currentLine.split(delimiter, -1);\n+            /*\n+             * Cannot go directly from String[] to Object[] and expect it to act as an array.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NjY4NzMy", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#pullrequestreview-416668732", "createdAt": "2020-05-22T06:07:48Z", "commit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjowNzo0OFrOGZLsCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjowNzo0OFrOGZLsCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1OTA4MQ==", "bodyText": "We should keep the limit argument (-1) to the currentLine.split method to preserve the spacing at the end.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429059081", "createdAt": "2020-05-22T06:07:48Z", "author": {"login": "peterbae"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "diffHunk": "@@ -189,15 +193,18 @@ private void initFileReader(InputStreamReader sr, String encoding, String demlim\n         if (firstLineIsColumnNames) {\n             currentLine = fileReader.readLine();\n             if (null != currentLine) {\n-                columnNames = currentLine.split(delimiter, -1);\n+                columnNames = (escapeDelimiters && currentLine.contains(\"\\\"\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NjY5MDYw", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#pullrequestreview-416669060", "createdAt": "2020-05-22T06:08:47Z", "commit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjowODo0N1rOGZLtAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjowODo0N1rOGZLtAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1OTMyOQ==", "bodyText": "This line and line 255 should be single line comments", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429059329", "createdAt": "2020-05-22T06:08:47Z", "author": {"login": "peterbae"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "diffHunk": "@@ -229,21 +236,24 @@ public void close() throws SQLServerException {\n         if (null == currentLine)\n             return null;\n         else {\n-            // Binary data may be corrupted\n-            // The limit in split() function should be a negative value,\n-            // otherwise trailing empty strings are discarded.\n-            // Empty string is returned if there is no value.\n-            String[] data = currentLine.split(delimiter, -1);\n-\n-            // Cannot go directly from String[] to Object[] and expect it to act\n-            // as an array.\n+            /*\n+             * Binary data may be corrupted The limit in split() function should be a negative value, otherwise trailing\n+             * empty strings are discarded. Empty string is returned if there is no value.\n+             */\n+            String[] data = (escapeDelimiters && currentLine.contains(\"\\\"\"))\n+                                                                             ? escapeQuotesRFC4180(currentLine.split(\n+                                                                                     delimiter + escapeSplitPattern))\n+                                                                             : currentLine.split(delimiter, -1);\n+            /*\n+             * Cannot go directly from String[] to Object[] and expect it to act as an array.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NjY5NzYz", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#pullrequestreview-416669763", "createdAt": "2020-05-22T06:10:51Z", "commit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjoxMDo1MVrOGZLvGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjoxMDo1MVrOGZLvGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1OTg2NA==", "bodyText": "test needs description block", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429059864", "createdAt": "2020-05-22T06:10:51Z", "author": {"login": "lilgreenbird"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/bulkCopy/BulkCopyCSVTest.java", "diffHunk": "@@ -118,6 +134,51 @@ public void testCSVFromURL() throws SQLException {\n         }\n     }\n \n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NjgwMjU2", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#pullrequestreview-416680256", "createdAt": "2020-05-22T06:38:24Z", "commit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjozODoyNFrOGZMRPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjozODoyNFrOGZMRPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2ODYwNA==", "bodyText": "I think we should add an else statement to this if, to handle the case where the CSV data is corrupted and has a double quote that has not been escaped. Throw an error stating that the data is corrupt, perhaps?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429068604", "createdAt": "2020-05-22T06:38:24Z", "author": {"login": "peterbae"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "diffHunk": "@@ -516,4 +523,58 @@ public boolean next() throws SQLServerException {\n         }\n         return (null != currentLine);\n     }\n+\n+    /**\n+     * Returns whether the rules to escape delimiters are used.\n+     *\n+     * @return true if the rules are used, false otherwise.\n+     */\n+    public boolean isEscapeColumnDelimitersCSV() {\n+        return escapeDelimiters;\n+    }\n+\n+    /**\n+     * When set to true, the following rules will be used to parse CSV files: Each field may or may not be enclosed in\n+     * double quotes. If fields are not enclosed with double quotes, then double quotes may not appear inside the\n+     * fields. Fields containing double quotes, and delimiters should be enclosed in double quotes. If double-quotes are\n+     * used to enclose fields, then a double-quote appearing inside a field must be escaped by preceding it with another\n+     * double quote.\n+     *\n+     * @param escapeDelimiters\n+     *        true if the rules above to be used.\n+     */\n+    public void setEscapeColumnDelimitersCSV(boolean escapeDelimiters) {\n+        this.escapeDelimiters = escapeDelimiters;\n+    }\n+\n+    private static String[] escapeQuotesRFC4180(String[] tokens) {\n+        if (null == tokens) {\n+            return tokens;\n+        }\n+        for (int i = 0; i < tokens.length; i++) {\n+            boolean escaped = false;\n+            int j = 0;\n+            StringBuilder sb = new StringBuilder();\n+            if (tokens[i].contains(\"\\\"\")) {\n+                tokens[i] = tokens[i].trim();\n+            }\n+            while (j < tokens[i].length()) {\n+                if ('\"' == tokens[i].charAt(j)) {\n+                    if (!escaped) {\n+                        escaped = true;\n+                    } else {\n+                        if ((j < tokens[i].length() - 1) && '\"' == tokens[i].charAt(j + 1)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "originalPosition": 158}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6cd852b79bca2d6a8c1dad8c6aa7fb0123847c5", "author": {"user": {"login": "ulvii", "name": null}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/a6cd852b79bca2d6a8c1dad8c6aa7fb0123847c5", "committedDate": "2020-05-22T22:34:26Z", "message": "Applied review comments and add more test scenarios"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9269f445dfb8f946d39d9ffcfeacd0734308ef90", "author": {"user": {"login": "ulvii", "name": null}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/9269f445dfb8f946d39d9ffcfeacd0734308ef90", "committedDate": "2020-05-22T22:41:08Z", "message": "Change delimiter to @"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NDQ2NTUy", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#pullrequestreview-417446552", "createdAt": "2020-05-25T04:10:18Z", "commit": {"oid": "9269f445dfb8f946d39d9ffcfeacd0734308ef90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNDoxMDoxOVrOGZ0QOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNDoxMDoxOVrOGZ0QOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyMzcwNA==", "bodyText": "This lambda expression would slow down the parsing of data by scanning through every character. The if statement on line 569 already implicitly does this check, where adding an else statement to\nif ((j < tokens[i].length() - 1) && '\"' == tokens[i].charAt(j + 1)) {\nthis if statement would guarantee that the corrupt String would be caught.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429723704", "createdAt": "2020-05-25T04:10:19Z", "author": {"login": "peterbae"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "diffHunk": "@@ -516,4 +522,62 @@ public boolean next() throws SQLServerException {\n         }\n         return (null != currentLine);\n     }\n+\n+    /**\n+     * Returns whether the rules to escape delimiters are used.\n+     *\n+     * @return true if the rules are used, false otherwise.\n+     */\n+    public boolean isEscapeColumnDelimitersCSV() {\n+        return escapeDelimiters;\n+    }\n+\n+    /**\n+     * When set to true, the following rules will be used to parse CSV files: Each field may or may not be enclosed in\n+     * double quotes. If fields are not enclosed with double quotes, then double quotes may not appear inside the\n+     * fields. Fields containing double quotes, and delimiters should be enclosed in double quotes. If double-quotes are\n+     * used to enclose fields, then a double-quote appearing inside a field must be escaped by preceding it with another\n+     * double quote. Spaces are considered part of a field. Spaces before and after enclosing double quotes are ignored.\n+     *\n+     * @param escapeDelimiters\n+     *        true if the rules above to be used.\n+     */\n+    public void setEscapeColumnDelimitersCSV(boolean escapeDelimiters) {\n+        this.escapeDelimiters = escapeDelimiters;\n+    }\n+\n+    private static String[] escapeQuotesRFC4180(String[] tokens) throws SQLServerException {\n+        if (null == tokens) {\n+            return tokens;\n+        }\n+        for (int i = 0; i < tokens.length; i++) {\n+            boolean escaped = false;\n+            int j = 0;\n+            StringBuilder sb = new StringBuilder();\n+            long quoteCount = tokens[i].chars().filter(ch -> ch == '\"').count();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9269f445dfb8f946d39d9ffcfeacd0734308ef90"}, "originalPosition": 149}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3170f5d255267554dbe08507d68964755972a812", "author": {"user": {"login": "ulvii", "name": null}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/3170f5d255267554dbe08507d68964755972a812", "committedDate": "2020-05-25T23:12:59Z", "message": "Improve error handling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3OTY3MTUx", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#pullrequestreview-417967151", "createdAt": "2020-05-26T04:46:50Z", "commit": {"oid": "3170f5d255267554dbe08507d68964755972a812"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3OTY5NzIz", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#pullrequestreview-417969723", "createdAt": "2020-05-26T04:56:32Z", "commit": {"oid": "3170f5d255267554dbe08507d68964755972a812"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NTMyODQ0", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#pullrequestreview-418532844", "createdAt": "2020-05-26T17:44:51Z", "commit": {"oid": "3170f5d255267554dbe08507d68964755972a812"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2515, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}