{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1NjUwMTQy", "number": 1464, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMDozODo0OFrOE9A9pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQyMjozMTozMlrOE9xcYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDE0Mzc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMDozODo0OFrOH5etgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMDozODo0OFrOH5etgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAzNDA0OQ==", "bodyText": "Please create a separate enum for ActiveDirectoryInteractive to avoid confusion. See  ADALWORKFLOW_ACTIVEDIRECTORYSERVICEPRINCIPAL and ADALWORKFLOW_ACTIVEDIRECTORYPASSWORD for reference.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1464#discussion_r530034049", "createdAt": "2020-11-25T00:38:48Z", "author": {"login": "ulvii"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java", "diffHunk": "@@ -3907,6 +3910,7 @@ int writeFedAuthFeatureRequest(boolean write, /* if false just calculates the le\n                             workflow = TDS.ADALWORKFLOW_ACTIVEDIRECTORYINTEGRATED;\n                             break;\n                         case ActiveDirectoryMSI:\n+                        case ActiveDirectoryInteractive:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76407e2bc52c8af4f41ebfe55526549191b3ec47"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzU3MzAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerMSAL4JUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODowODo0MVrOH5-4Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQyMDozNDo0MFrOH6m4cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU2MTExMA==", "bodyText": "Are null checks not required for accounts, entries, or usernames? The following checks if accounts is null and not empty, before attempting to find the first element that matches the username. It also checks that the IAccount it just iterated over isn't null, the username within the IAccount isn't null, and then does the comparison. If it finds an element that matches the criteria, it'll assign that value to the return variable, if not, it'll assign null to the return variable.\n// Helper function to return account containing user name from set of accounts, or null if no match\nprivate static IAccount getAccountByUsername(Set<IAccount> accounts, String username) {\n    IAccount result = null;\n    if (null != accounts && !accounts.isEmpty())\n        result = accounts.parallelStream()\n                .filter(a -> (null != a && null != a.username() && a.username().equals(username))).findFirst()\n                .orElse(null);\n    return result;\n}", "url": "https://github.com/microsoft/mssql-jdbc/pull/1464#discussion_r530561110", "createdAt": "2020-11-25T18:08:41Z", "author": {"login": "rene-ye"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerMSAL4JUtils.java", "diffHunk": "@@ -119,6 +127,76 @@ static SqlFedAuthToken getSqlFedAuthTokenIntegrated(SqlFedAuthInfo fedAuthInfo,\n         }\n     }\n \n+    static SqlFedAuthToken getSqlFedAuthTokenInteractive(SqlFedAuthInfo fedAuthInfo, String user,\n+            String authenticationString) throws SQLServerException {\n+        ExecutorService executorService = Executors.newFixedThreadPool(1);\n+\n+        try {\n+            PublicClientApplication pca = PublicClientApplication\n+                    .builder(ActiveDirectoryAuthentication.JDBC_FEDAUTH_CLIENT_ID).executorService(executorService)\n+                    .setTokenCacheAccessAspect(PersistentTokenCacheAccessAspect.getInstance())\n+                    .authority(fedAuthInfo.stsurl).logPii((logger.isLoggable(Level.FINE)) ? true : false).build();\n+\n+            CompletableFuture<IAuthenticationResult> future = null;\n+            IAuthenticationResult authenticationResult = null;\n+\n+            // try to acquire token silently if user account found in cache\n+            try {\n+                Set<IAccount> accountsInCache = pca.getAccounts().join();\n+                if (null != accountsInCache && !accountsInCache.isEmpty() && null != user && !user.isEmpty()) {\n+                    IAccount account = getAccountByUsername(accountsInCache, user);\n+                    if (null != account) {\n+                        if (logger.isLoggable(Level.FINE)) {\n+                            logger.fine(logger.toString() + \"Silent authentication for user:\" + user);\n+                        }\n+                        SilentParameters silentParameters = SilentParameters\n+                                .builder(Collections.singleton(fedAuthInfo.spn + \"/.default\"), account).build();\n+\n+                        future = pca.acquireTokenSilently(silentParameters);\n+                    }\n+                }\n+            } catch (MsalInteractionRequiredException e) {\n+                // not an error, need to get token interactively\n+            }\n+\n+            if (null != future) {\n+                authenticationResult = future.get();\n+            } else {\n+                // acquire token interactively with system browser\n+                if (logger.isLoggable(Level.FINE)) {\n+                    logger.fine(logger.toString() + \"Interactive authentication\");\n+                }\n+                InteractiveRequestParameters parameters = InteractiveRequestParameters.builder(new URI(REDIRECTURI))\n+                        .systemBrowserOptions(SystemBrowserOptions.builder()\n+                                .htmlMessageSuccess(SQLServerResource.getResource(\"R_MSALAuthComplete\")).build())\n+                        .loginHint(user).scopes(Collections.singleton(fedAuthInfo.spn + \"/.default\")).build();\n+\n+                future = pca.acquireToken(parameters);\n+                authenticationResult = future.get();\n+            }\n+\n+            return new SqlFedAuthToken(authenticationResult.accessToken(), authenticationResult.expiresOnDate());\n+        } catch (MalformedURLException | InterruptedException | URISyntaxException e) {\n+            throw new SQLServerException(e.getMessage(), e);\n+        } catch (ExecutionException e) {\n+            throw getCorrectedException(e, user, authenticationString);\n+        } finally {\n+            executorService.shutdown();\n+        }\n+    }\n+\n+    // Helper function to return account containing user name from set of accounts, or null if no match\n+    private static IAccount getAccountByUsername(Set<IAccount> accounts, String username) {\n+        if (!accounts.isEmpty()) {\n+            for (IAccount account : accounts) {\n+                if (account.username().equals(username)) {\n+                    return account;\n+                }\n+            }\n+        }\n+        return null;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76407e2bc52c8af4f41ebfe55526549191b3ec47"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIxNjQ5OA==", "bodyText": "accounts is the set of accounts in cache, which could be and would be null on 1st connection.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1464#discussion_r531216498", "createdAt": "2020-11-26T20:34:40Z", "author": {"login": "lilgreenbird"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerMSAL4JUtils.java", "diffHunk": "@@ -119,6 +127,76 @@ static SqlFedAuthToken getSqlFedAuthTokenIntegrated(SqlFedAuthInfo fedAuthInfo,\n         }\n     }\n \n+    static SqlFedAuthToken getSqlFedAuthTokenInteractive(SqlFedAuthInfo fedAuthInfo, String user,\n+            String authenticationString) throws SQLServerException {\n+        ExecutorService executorService = Executors.newFixedThreadPool(1);\n+\n+        try {\n+            PublicClientApplication pca = PublicClientApplication\n+                    .builder(ActiveDirectoryAuthentication.JDBC_FEDAUTH_CLIENT_ID).executorService(executorService)\n+                    .setTokenCacheAccessAspect(PersistentTokenCacheAccessAspect.getInstance())\n+                    .authority(fedAuthInfo.stsurl).logPii((logger.isLoggable(Level.FINE)) ? true : false).build();\n+\n+            CompletableFuture<IAuthenticationResult> future = null;\n+            IAuthenticationResult authenticationResult = null;\n+\n+            // try to acquire token silently if user account found in cache\n+            try {\n+                Set<IAccount> accountsInCache = pca.getAccounts().join();\n+                if (null != accountsInCache && !accountsInCache.isEmpty() && null != user && !user.isEmpty()) {\n+                    IAccount account = getAccountByUsername(accountsInCache, user);\n+                    if (null != account) {\n+                        if (logger.isLoggable(Level.FINE)) {\n+                            logger.fine(logger.toString() + \"Silent authentication for user:\" + user);\n+                        }\n+                        SilentParameters silentParameters = SilentParameters\n+                                .builder(Collections.singleton(fedAuthInfo.spn + \"/.default\"), account).build();\n+\n+                        future = pca.acquireTokenSilently(silentParameters);\n+                    }\n+                }\n+            } catch (MsalInteractionRequiredException e) {\n+                // not an error, need to get token interactively\n+            }\n+\n+            if (null != future) {\n+                authenticationResult = future.get();\n+            } else {\n+                // acquire token interactively with system browser\n+                if (logger.isLoggable(Level.FINE)) {\n+                    logger.fine(logger.toString() + \"Interactive authentication\");\n+                }\n+                InteractiveRequestParameters parameters = InteractiveRequestParameters.builder(new URI(REDIRECTURI))\n+                        .systemBrowserOptions(SystemBrowserOptions.builder()\n+                                .htmlMessageSuccess(SQLServerResource.getResource(\"R_MSALAuthComplete\")).build())\n+                        .loginHint(user).scopes(Collections.singleton(fedAuthInfo.spn + \"/.default\")).build();\n+\n+                future = pca.acquireToken(parameters);\n+                authenticationResult = future.get();\n+            }\n+\n+            return new SqlFedAuthToken(authenticationResult.accessToken(), authenticationResult.expiresOnDate());\n+        } catch (MalformedURLException | InterruptedException | URISyntaxException e) {\n+            throw new SQLServerException(e.getMessage(), e);\n+        } catch (ExecutionException e) {\n+            throw getCorrectedException(e, user, authenticationString);\n+        } finally {\n+            executorService.shutdown();\n+        }\n+    }\n+\n+    // Helper function to return account containing user name from set of accounts, or null if no match\n+    private static IAccount getAccountByUsername(Set<IAccount> accounts, String username) {\n+        if (!accounts.isEmpty()) {\n+            for (IAccount account : accounts) {\n+                if (account.username().equals(username)) {\n+                    return account;\n+                }\n+            }\n+        }\n+        return null;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU2MTExMA=="}, "originalCommit": {"oid": "76407e2bc52c8af4f41ebfe55526549191b3ec47"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzgxMTIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/PersistentTokenCacheAccessAspect.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOToyNzoyMlrOH6BLYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOToyNzoyMlrOH6BLYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5ODc1NA==", "bodyText": "This doesn't make sense? The class is a singleton and this is a static method. Shouldn't this be\nif (null != instance && null != instance.cache && !instance.cache.isEmpty()) {\n    instance.cache = null;\n}", "url": "https://github.com/microsoft/mssql-jdbc/pull/1464#discussion_r530598754", "createdAt": "2020-11-25T19:27:22Z", "author": {"login": "rene-ye"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/PersistentTokenCacheAccessAspect.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\n+ */\n+\n+package com.microsoft.sqlserver.jdbc;\n+\n+import com.microsoft.aad.msal4j.ITokenCacheAccessAspect;\n+import com.microsoft.aad.msal4j.ITokenCacheAccessContext;\n+\n+\n+/**\n+ * Access aspect for accessing the token cache.\n+ * \n+ * MSAL token cache does not persist beyond lifetime of the application. This class implements the\n+ * ITokenCacheAccessAspect interface to persist the token cache between application instances so subsequent\n+ * authentications can use silent authentication if the user account is in the token cache.\n+ * \n+ * @see <a href=\"https://aka.ms/msal4j-token-cache\">https://aka.ms/msal4j-token-cache</a>\n+ */\n+class PersistentTokenCacheAccessAspect implements ITokenCacheAccessAspect {\n+    private static PersistentTokenCacheAccessAspect instance = null;\n+\n+    private PersistentTokenCacheAccessAspect() {};\n+\n+    static PersistentTokenCacheAccessAspect getInstance() {\n+        if (null == instance) {\n+            instance = new PersistentTokenCacheAccessAspect();\n+        }\n+        return instance;\n+    }\n+\n+    /**\n+     * Token cache in JSON format\n+     */\n+    private static String cache = null;\n+\n+    @Override\n+    public synchronized void beforeCacheAccess(ITokenCacheAccessContext iTokenCacheAccessContext) {\n+        if (null != cache && null != iTokenCacheAccessContext && null != iTokenCacheAccessContext.tokenCache()) {\n+            iTokenCacheAccessContext.tokenCache().deserialize(cache);\n+        }\n+    }\n+\n+    @Override\n+    public synchronized void afterCacheAccess(ITokenCacheAccessContext iTokenCacheAccessContext) {\n+        if (null != iTokenCacheAccessContext && null != iTokenCacheAccessContext.tokenCache()\n+                && iTokenCacheAccessContext.hasCacheChanged()) {\n+            cache = iTokenCacheAccessContext.tokenCache().serialize();\n+        }\n+    }\n+\n+    /**\n+     * Clears token cache. This will clear all account info so interactive login will be required on the next request to\n+     * acquire an access token.\n+     */\n+    public static void clearUserTokenCache() {\n+        if (null != cache && !cache.isEmpty()) {\n+            cache = null;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76407e2bc52c8af4f41ebfe55526549191b3ec47"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzgxNjY3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/PersistentTokenCacheAccessAspect.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOToyOToyMFrOH6BO3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOToyOToyMFrOH6BO3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5OTY0NQ==", "bodyText": "This object should not be static in the context of a Singleton class.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1464#discussion_r530599645", "createdAt": "2020-11-25T19:29:20Z", "author": {"login": "rene-ye"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/PersistentTokenCacheAccessAspect.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\n+ */\n+\n+package com.microsoft.sqlserver.jdbc;\n+\n+import com.microsoft.aad.msal4j.ITokenCacheAccessAspect;\n+import com.microsoft.aad.msal4j.ITokenCacheAccessContext;\n+\n+\n+/**\n+ * Access aspect for accessing the token cache.\n+ * \n+ * MSAL token cache does not persist beyond lifetime of the application. This class implements the\n+ * ITokenCacheAccessAspect interface to persist the token cache between application instances so subsequent\n+ * authentications can use silent authentication if the user account is in the token cache.\n+ * \n+ * @see <a href=\"https://aka.ms/msal4j-token-cache\">https://aka.ms/msal4j-token-cache</a>\n+ */\n+class PersistentTokenCacheAccessAspect implements ITokenCacheAccessAspect {\n+    private static PersistentTokenCacheAccessAspect instance = null;\n+\n+    private PersistentTokenCacheAccessAspect() {};\n+\n+    static PersistentTokenCacheAccessAspect getInstance() {\n+        if (null == instance) {\n+            instance = new PersistentTokenCacheAccessAspect();\n+        }\n+        return instance;\n+    }\n+\n+    /**\n+     * Token cache in JSON format\n+     */\n+    private static String cache = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76407e2bc52c8af4f41ebfe55526549191b3ec47"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzg3MzkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerMSAL4JUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOTo0ODoyM1rOH6BxsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOTo0ODoyM1rOH6BxsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwODU2MA==", "bodyText": "This should be Executors.newSingleThreadExecutor().", "url": "https://github.com/microsoft/mssql-jdbc/pull/1464#discussion_r530608560", "createdAt": "2020-11-25T19:48:23Z", "author": {"login": "rene-ye"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerMSAL4JUtils.java", "diffHunk": "@@ -16,37 +18,43 @@\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n import java.util.logging.Level;\n-\n import javax.security.auth.kerberos.KerberosPrincipal;\n-\n+import com.microsoft.aad.msal4j.IAccount;\n import com.microsoft.aad.msal4j.ClientCredentialFactory;\n import com.microsoft.aad.msal4j.ClientCredentialParameters;\n import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n import com.microsoft.aad.msal4j.IAuthenticationResult;\n import com.microsoft.aad.msal4j.IClientCredential;\n import com.microsoft.aad.msal4j.IntegratedWindowsAuthenticationParameters;\n+import com.microsoft.aad.msal4j.InteractiveRequestParameters;\n+import com.microsoft.aad.msal4j.MsalInteractionRequiredException;\n import com.microsoft.aad.msal4j.PublicClientApplication;\n+import com.microsoft.aad.msal4j.SilentParameters;\n+import com.microsoft.aad.msal4j.SystemBrowserOptions;\n import com.microsoft.aad.msal4j.UserNamePasswordParameters;\n import com.microsoft.sqlserver.jdbc.SQLServerConnection.ActiveDirectoryAuthentication;\n+\n import com.microsoft.sqlserver.jdbc.SQLServerConnection.SqlFedAuthInfo;\n \n \n class SQLServerMSAL4JUtils {\n \n+    static final String REDIRECTURI = \"http://localhost\";\n+\n     static final private java.util.logging.Logger logger = java.util.logging.Logger\n             .getLogger(\"com.microsoft.sqlserver.jdbc.SQLServerMSAL4JUtils\");\n \n     static SqlFedAuthToken getSqlFedAuthToken(SqlFedAuthInfo fedAuthInfo, String user, String password,\n             String authenticationString) throws SQLServerException {\n         ExecutorService executorService = Executors.newFixedThreadPool(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76407e2bc52c8af4f41ebfe55526549191b3ec47"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzg4MjI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerMSAL4JUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOTo1MToxMFrOH6B2oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOTo1MToxMFrOH6B2oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwOTgyNQ==", "bodyText": "Please use Executors.newSingleThreadExecutor().", "url": "https://github.com/microsoft/mssql-jdbc/pull/1464#discussion_r530609825", "createdAt": "2020-11-25T19:51:10Z", "author": {"login": "rene-ye"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerMSAL4JUtils.java", "diffHunk": "@@ -119,6 +127,76 @@ static SqlFedAuthToken getSqlFedAuthTokenIntegrated(SqlFedAuthInfo fedAuthInfo,\n         }\n     }\n \n+    static SqlFedAuthToken getSqlFedAuthTokenInteractive(SqlFedAuthInfo fedAuthInfo, String user,\n+            String authenticationString) throws SQLServerException {\n+        ExecutorService executorService = Executors.newFixedThreadPool(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76407e2bc52c8af4f41ebfe55526549191b3ec47"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzg5NjgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/PersistentTokenCacheAccessAspect.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOTo1NjowMlrOH6B_kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOTo1NjowMlrOH6B_kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYxMjExMg==", "bodyText": "If this is changed to:\nprivate static PersistentTokenCacheAccessAspect instance = new PersistentTokenCacheAccessAspect();\nwe can avoid a few null checks. Mainly the ones in the static methods.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1464#discussion_r530612112", "createdAt": "2020-11-25T19:56:02Z", "author": {"login": "rene-ye"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/PersistentTokenCacheAccessAspect.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\n+ */\n+\n+package com.microsoft.sqlserver.jdbc;\n+\n+import com.microsoft.aad.msal4j.ITokenCacheAccessAspect;\n+import com.microsoft.aad.msal4j.ITokenCacheAccessContext;\n+\n+\n+/**\n+ * Access aspect for accessing the token cache.\n+ * \n+ * MSAL token cache does not persist beyond lifetime of the application. This class implements the\n+ * ITokenCacheAccessAspect interface to persist the token cache between application instances so subsequent\n+ * authentications can use silent authentication if the user account is in the token cache.\n+ * \n+ * @see <a href=\"https://aka.ms/msal4j-token-cache\">https://aka.ms/msal4j-token-cache</a>\n+ */\n+class PersistentTokenCacheAccessAspect implements ITokenCacheAccessAspect {\n+    private static PersistentTokenCacheAccessAspect instance = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76407e2bc52c8af4f41ebfe55526549191b3ec47"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzkwNjM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/PersistentTokenCacheAccessAspect.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOTo1OToxN1rOH6CFYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOTo1OToxN1rOH6CFYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYxMzYwMQ==", "bodyText": "I would reorder this to\nif (null != iTokenCacheAccessContext && iTokenCacheAccessContext.hasCacheChanged()\n        && null != iTokenCacheAccessContext.tokenCache())\nsince we want to know if the cache has changed first, and then if it has, then we need to do a null check on the token cache so we can call .serialize().", "url": "https://github.com/microsoft/mssql-jdbc/pull/1464#discussion_r530613601", "createdAt": "2020-11-25T19:59:17Z", "author": {"login": "rene-ye"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/PersistentTokenCacheAccessAspect.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\n+ */\n+\n+package com.microsoft.sqlserver.jdbc;\n+\n+import com.microsoft.aad.msal4j.ITokenCacheAccessAspect;\n+import com.microsoft.aad.msal4j.ITokenCacheAccessContext;\n+\n+\n+/**\n+ * Access aspect for accessing the token cache.\n+ * \n+ * MSAL token cache does not persist beyond lifetime of the application. This class implements the\n+ * ITokenCacheAccessAspect interface to persist the token cache between application instances so subsequent\n+ * authentications can use silent authentication if the user account is in the token cache.\n+ * \n+ * @see <a href=\"https://aka.ms/msal4j-token-cache\">https://aka.ms/msal4j-token-cache</a>\n+ */\n+class PersistentTokenCacheAccessAspect implements ITokenCacheAccessAspect {\n+    private static PersistentTokenCacheAccessAspect instance = null;\n+\n+    private PersistentTokenCacheAccessAspect() {};\n+\n+    static PersistentTokenCacheAccessAspect getInstance() {\n+        if (null == instance) {\n+            instance = new PersistentTokenCacheAccessAspect();\n+        }\n+        return instance;\n+    }\n+\n+    /**\n+     * Token cache in JSON format\n+     */\n+    private static String cache = null;\n+\n+    @Override\n+    public synchronized void beforeCacheAccess(ITokenCacheAccessContext iTokenCacheAccessContext) {\n+        if (null != cache && null != iTokenCacheAccessContext && null != iTokenCacheAccessContext.tokenCache()) {\n+            iTokenCacheAccessContext.tokenCache().deserialize(cache);\n+        }\n+    }\n+\n+    @Override\n+    public synchronized void afterCacheAccess(ITokenCacheAccessContext iTokenCacheAccessContext) {\n+        if (null != iTokenCacheAccessContext && null != iTokenCacheAccessContext.tokenCache()\n+                && iTokenCacheAccessContext.hasCacheChanged()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76407e2bc52c8af4f41ebfe55526549191b3ec47"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzkyMzUxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/microsoft/sqlserver/jdbc/SQLServerConnectionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMDowNDo0OVrOH6CPvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQyMDo0NTowOFrOH6nCtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYxNjI1Mw==", "bodyText": "This test currently exists for raw code coverage, and if the if blocks return false, it doesn't even really give codecov. Is there a meaningful way for us to verify whether the cache has been serialized/deserialized after calling the before/after CacheAccess methods?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1464#discussion_r530616253", "createdAt": "2020-11-25T20:04:49Z", "author": {"login": "rene-ye"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/SQLServerConnectionTest.java", "diffHunk": "@@ -861,4 +864,18 @@ public void testConnectionPoolProxyWithLobs() throws SQLException, IOException {\n             assertTrue(data.equals(received), \"Expected String: \" + data + \"\\nReceived String: \" + received);\r\n         }\r\n     }\r\n+\r\n+    /*\r\n+     * Test PersistentTokenCacheAccessAspect methods\r\n+     */\r\n+    @Test\r\n+    public void testPersistentTokenCacheAccessAspect() throws SQLException {\r\n+        TokenCacheAccessContext tokenCacheAccessContext = TokenCacheAccessContext.builder().clientId(null)\r\n+                .tokenCache(new TokenCache()).account(null).hasCacheChanged(true).build();\r\n+\r\n+        PersistentTokenCacheAccessAspect persistentTokenAspect = PersistentTokenCacheAccessAspect.getInstance();\r\n+        persistentTokenAspect.afterCacheAccess(tokenCacheAccessContext);\r\n+        persistentTokenAspect.beforeCacheAccess(tokenCacheAccessContext);\r\n+        PersistentTokenCacheAccessAspect.clearUserTokenCache();\r\n+    }\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76407e2bc52c8af4f41ebfe55526549191b3ec47"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIxOTEyNw==", "bodyText": "that requires interactive testing, currently can only do timeout tests in junit. Added comment in header", "url": "https://github.com/microsoft/mssql-jdbc/pull/1464#discussion_r531219127", "createdAt": "2020-11-26T20:45:08Z", "author": {"login": "lilgreenbird"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/SQLServerConnectionTest.java", "diffHunk": "@@ -861,4 +864,18 @@ public void testConnectionPoolProxyWithLobs() throws SQLException, IOException {\n             assertTrue(data.equals(received), \"Expected String: \" + data + \"\\nReceived String: \" + received);\r\n         }\r\n     }\r\n+\r\n+    /*\r\n+     * Test PersistentTokenCacheAccessAspect methods\r\n+     */\r\n+    @Test\r\n+    public void testPersistentTokenCacheAccessAspect() throws SQLException {\r\n+        TokenCacheAccessContext tokenCacheAccessContext = TokenCacheAccessContext.builder().clientId(null)\r\n+                .tokenCache(new TokenCache()).account(null).hasCacheChanged(true).build();\r\n+\r\n+        PersistentTokenCacheAccessAspect persistentTokenAspect = PersistentTokenCacheAccessAspect.getInstance();\r\n+        persistentTokenAspect.afterCacheAccess(tokenCacheAccessContext);\r\n+        persistentTokenAspect.beforeCacheAccess(tokenCacheAccessContext);\r\n+        PersistentTokenCacheAccessAspect.clearUserTokenCache();\r\n+    }\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYxNjI1Mw=="}, "originalCommit": {"oid": "76407e2bc52c8af4f41ebfe55526549191b3ec47"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzkyODA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/PersistentTokenCacheAccessAspect.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMDowNjoxNVrOH6CSQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMDowNjoxNVrOH6CSQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYxNjg5OQ==", "bodyText": "Please make sure newlines exist at the end of every new file. I'm not sure if it's already done and Github is just not showing it in the changes. If so, just resolve this comment.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1464#discussion_r530616899", "createdAt": "2020-11-25T20:06:15Z", "author": {"login": "rene-ye"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/PersistentTokenCacheAccessAspect.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\n+ */\n+\n+package com.microsoft.sqlserver.jdbc;\n+\n+import com.microsoft.aad.msal4j.ITokenCacheAccessAspect;\n+import com.microsoft.aad.msal4j.ITokenCacheAccessContext;\n+\n+\n+/**\n+ * Access aspect for accessing the token cache.\n+ * \n+ * MSAL token cache does not persist beyond lifetime of the application. This class implements the\n+ * ITokenCacheAccessAspect interface to persist the token cache between application instances so subsequent\n+ * authentications can use silent authentication if the user account is in the token cache.\n+ * \n+ * @see <a href=\"https://aka.ms/msal4j-token-cache\">https://aka.ms/msal4j-token-cache</a>\n+ */\n+class PersistentTokenCacheAccessAspect implements ITokenCacheAccessAspect {\n+    private static PersistentTokenCacheAccessAspect instance = null;\n+\n+    private PersistentTokenCacheAccessAspect() {};\n+\n+    static PersistentTokenCacheAccessAspect getInstance() {\n+        if (null == instance) {\n+            instance = new PersistentTokenCacheAccessAspect();\n+        }\n+        return instance;\n+    }\n+\n+    /**\n+     * Token cache in JSON format\n+     */\n+    private static String cache = null;\n+\n+    @Override\n+    public synchronized void beforeCacheAccess(ITokenCacheAccessContext iTokenCacheAccessContext) {\n+        if (null != cache && null != iTokenCacheAccessContext && null != iTokenCacheAccessContext.tokenCache()) {\n+            iTokenCacheAccessContext.tokenCache().deserialize(cache);\n+        }\n+    }\n+\n+    @Override\n+    public synchronized void afterCacheAccess(ITokenCacheAccessContext iTokenCacheAccessContext) {\n+        if (null != iTokenCacheAccessContext && null != iTokenCacheAccessContext.tokenCache()\n+                && iTokenCacheAccessContext.hasCacheChanged()) {\n+            cache = iTokenCacheAccessContext.tokenCache().serialize();\n+        }\n+    }\n+\n+    /**\n+     * Clears token cache. This will clear all account info so interactive login will be required on the next request to\n+     * acquire an access token.\n+     */\n+    public static void clearUserTokenCache() {\n+        if (null != cache && !cache.isEmpty()) {\n+            cache = null;\n+        }\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76407e2bc52c8af4f41ebfe55526549191b3ec47"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMjA4NjcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQyMjozMTozMlrOH6odVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQyMjo1NTo0NFrOH6ovow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI0MjMyNw==", "bodyText": "Remove these changes", "url": "https://github.com/microsoft/mssql-jdbc/pull/1464#discussion_r531242327", "createdAt": "2020-11-26T22:31:32Z", "author": {"login": "ulvii"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java", "diffHunk": "@@ -2052,7 +2054,13 @@ else if (null != (trustStoreFileName = System.getProperty(\"javax.net.ssl.trustSt\n \n     final int read(byte[] data, int offset, int length) throws SQLServerException {\n         try {\n+            // System.out.println(\"socket timeout:\"+ tcpSocket.getSoTimeout());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cedceaf1148d5e4458917f2d8c9cc1f22a35cccf"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI0NzAxMQ==", "bodyText": "oops", "url": "https://github.com/microsoft/mssql-jdbc/pull/1464#discussion_r531247011", "createdAt": "2020-11-26T22:55:44Z", "author": {"login": "lilgreenbird"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java", "diffHunk": "@@ -2052,7 +2054,13 @@ else if (null != (trustStoreFileName = System.getProperty(\"javax.net.ssl.trustSt\n \n     final int read(byte[] data, int offset, int length) throws SQLServerException {\n         try {\n+            // System.out.println(\"socket timeout:\"+ tcpSocket.getSoTimeout());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI0MjMyNw=="}, "originalCommit": {"oid": "cedceaf1148d5e4458917f2d8c9cc1f22a35cccf"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1176, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}