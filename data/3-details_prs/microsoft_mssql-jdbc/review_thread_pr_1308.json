{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNTQ1NDY3", "number": 1308, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzoyNzo1NVrODwf1lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzoyNzo1NVrODwf1lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTc5ODYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzoyNzo1NVrOGDiWYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxODoxNjozMFrOGEvzSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2MTY5OA==", "bodyText": "int startIndex_ATX = isAzureFunction ? result.indexOf(ActiveDirectoryAuthentication.ACCESS_TOKEN_EXPIRES_ON_IDENTIFIER) + ActiveDirectoryAuthentication.ACCESS_TOKEN_EXPIRES_ON_IDENTIFIER.length() : result.indexOf(ActiveDirectoryAuthentication.ACCESS_TOKEN_EXPIRES_IN_IDENTIFIER) + ActiveDirectoryAuthentication.ACCESS_TOKEN_EXPIRES_IN_IDENTIFIER.length();\n                    \nStringBuilder sb = new StringBuilder(result);\nString accessTokenExpiry = sb.subString(startIndex_ATX, sb.indexOf(\"\\\"\", startIndex_ATX + 1));\ncal.add(Calendar.SECOND, Integer.parseInt(accessTokenExpiry));\nSee if we can just use StringBuilder from the beginning instead of a string. I think it's not really possible to go directly from a Reader to a StringBuilder, but lets try to switch to StringBuilder as soon as we can because I see most of these operations are fully supported and identical to StringBuilder APIs.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1308#discussion_r406361698", "createdAt": "2020-04-09T17:27:55Z", "author": {"login": "rene-ye"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java", "diffHunk": "@@ -324,30 +318,23 @@ static SqlFedAuthToken getMSIAuthToken(String resource, String msiClientId) thro\n \r\n                     Calendar cal = new Calendar.Builder().setInstant(new Date()).build();\r\n \r\n+                    int startIndex_ATX;\r\n+\r\n+                    // Fetch expires_on\r\n                     if (isAzureFunction) {\r\n-                        // Fetch expires_on\r\n-                        int startIndex_ATX = result\r\n+                        startIndex_ATX = result\r\n                                 .indexOf(ActiveDirectoryAuthentication.ACCESS_TOKEN_EXPIRES_ON_IDENTIFIER)\r\n                                 + ActiveDirectoryAuthentication.ACCESS_TOKEN_EXPIRES_ON_IDENTIFIER.length();\r\n-                        String accessTokenExpiry = result.substring(startIndex_ATX,\r\n-                                result.indexOf(\"\\\"\", startIndex_ATX + 1));\r\n-                        if (connectionlogger.isLoggable(Level.FINER)) {\r\n-                            connectionlogger.finer(\"MSI auth token expires on: \" + accessTokenExpiry);\r\n-                        }\r\n-\r\n-                        DateFormat df = new SimpleDateFormat(\r\n-                                ActiveDirectoryAuthentication.ACCESS_TOKEN_EXPIRES_ON_DATE_FORMAT);\r\n-                        cal = new Calendar.Builder().setInstant(df.parse(accessTokenExpiry)).build();\r\n                     } else {\r\n-                        // Fetch expires_in\r\n-                        int startIndex_ATX = result\r\n+                        startIndex_ATX = result\r\n                                 .indexOf(ActiveDirectoryAuthentication.ACCESS_TOKEN_EXPIRES_IN_IDENTIFIER)\r\n                                 + ActiveDirectoryAuthentication.ACCESS_TOKEN_EXPIRES_IN_IDENTIFIER.length();\r\n-                        String accessTokenExpiry = result.substring(startIndex_ATX,\r\n-                                result.indexOf(\"\\\"\", startIndex_ATX + 1));\r\n-                        cal.add(Calendar.SECOND, Integer.parseInt(accessTokenExpiry));\r\n                     }\r\n \r\n+                    String accessTokenExpiry = result.substring(startIndex_ATX,\r\n+                            result.indexOf(\"\\\"\", startIndex_ATX + 1));\r\n+                    cal.add(Calendar.SECOND, Integer.parseInt(accessTokenExpiry));\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b1e193785c1c62458ea422e5521c78d5fc2c6e3"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYzMDY2Nw==", "bodyText": "Thanks. I used a stringbuilder for this now.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1308#discussion_r407630667", "createdAt": "2020-04-13T18:16:30Z", "author": {"login": "peterbae"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java", "diffHunk": "@@ -324,30 +318,23 @@ static SqlFedAuthToken getMSIAuthToken(String resource, String msiClientId) thro\n \r\n                     Calendar cal = new Calendar.Builder().setInstant(new Date()).build();\r\n \r\n+                    int startIndex_ATX;\r\n+\r\n+                    // Fetch expires_on\r\n                     if (isAzureFunction) {\r\n-                        // Fetch expires_on\r\n-                        int startIndex_ATX = result\r\n+                        startIndex_ATX = result\r\n                                 .indexOf(ActiveDirectoryAuthentication.ACCESS_TOKEN_EXPIRES_ON_IDENTIFIER)\r\n                                 + ActiveDirectoryAuthentication.ACCESS_TOKEN_EXPIRES_ON_IDENTIFIER.length();\r\n-                        String accessTokenExpiry = result.substring(startIndex_ATX,\r\n-                                result.indexOf(\"\\\"\", startIndex_ATX + 1));\r\n-                        if (connectionlogger.isLoggable(Level.FINER)) {\r\n-                            connectionlogger.finer(\"MSI auth token expires on: \" + accessTokenExpiry);\r\n-                        }\r\n-\r\n-                        DateFormat df = new SimpleDateFormat(\r\n-                                ActiveDirectoryAuthentication.ACCESS_TOKEN_EXPIRES_ON_DATE_FORMAT);\r\n-                        cal = new Calendar.Builder().setInstant(df.parse(accessTokenExpiry)).build();\r\n                     } else {\r\n-                        // Fetch expires_in\r\n-                        int startIndex_ATX = result\r\n+                        startIndex_ATX = result\r\n                                 .indexOf(ActiveDirectoryAuthentication.ACCESS_TOKEN_EXPIRES_IN_IDENTIFIER)\r\n                                 + ActiveDirectoryAuthentication.ACCESS_TOKEN_EXPIRES_IN_IDENTIFIER.length();\r\n-                        String accessTokenExpiry = result.substring(startIndex_ATX,\r\n-                                result.indexOf(\"\\\"\", startIndex_ATX + 1));\r\n-                        cal.add(Calendar.SECOND, Integer.parseInt(accessTokenExpiry));\r\n                     }\r\n \r\n+                    String accessTokenExpiry = result.substring(startIndex_ATX,\r\n+                            result.indexOf(\"\\\"\", startIndex_ATX + 1));\r\n+                    cal.add(Calendar.SECOND, Integer.parseInt(accessTokenExpiry));\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2MTY5OA=="}, "originalCommit": {"oid": "7b1e193785c1c62458ea422e5521c78d5fc2c6e3"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1056, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}