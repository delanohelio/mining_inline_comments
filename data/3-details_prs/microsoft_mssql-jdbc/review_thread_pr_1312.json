{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyOTg3NjE4", "number": 1312, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDozMDozMVrOD-vXdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNDoxMDoxOVrOD_QbUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTE0MzU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDozMDozMVrOGZBy9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNjo0NTozMVrOGZddfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5NzAxMw==", "bodyText": "I think we should rename this to getEscapeColumnDelimitersCSV, for the setter/getter convention.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r428897013", "createdAt": "2020-05-21T20:30:31Z", "author": {"login": "peterbae"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "diffHunk": "@@ -516,4 +523,58 @@ public boolean next() throws SQLServerException {\n         }\n         return (null != currentLine);\n     }\n+\n+    /**\n+     * Returns whether the rules to escape delimiters are used.\n+     *\n+     * @return true if the rules are used, false otherwise.\n+     */\n+    public boolean isEscapeColumnDelimitersCSV() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1MDI3MQ==", "bodyText": "I named it this way mainly to keep it consistent with SQLServerBulkCopyOptions and SQLServerBulkRecord.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429350271", "createdAt": "2020-05-22T16:45:31Z", "author": {"login": "ulvii"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "diffHunk": "@@ -516,4 +523,58 @@ public boolean next() throws SQLServerException {\n         }\n         return (null != currentLine);\n     }\n+\n+    /**\n+     * Returns whether the rules to escape delimiters are used.\n+     *\n+     * @return true if the rules are used, false otherwise.\n+     */\n+    public boolean isEscapeColumnDelimitersCSV() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5NzAxMw=="}, "originalCommit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTE5Njc5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/microsoft/sqlserver/jdbc/bulkCopy/BulkCopyCSVTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDo0Nzo0NVrOGZCUNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzoxNTo0MFrOGZeUBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkwNTUyNw==", "bodyText": "My formatter shows that this line needs to be formatted. Can you try re-formatting this file?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r428905527", "createdAt": "2020-05-21T20:47:45Z", "author": {"login": "peterbae"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/bulkCopy/BulkCopyCSVTest.java", "diffHunk": "@@ -118,6 +134,51 @@ public void testCSVFromURL() throws SQLException {\n         }\n     }\n \n+    @Test\n+    @DisplayName(\"Test setEscapeColumnDelimitersCSV\")\n+    public void testEscapeColumnDelimitersCSV() throws SQLException, FileNotFoundException, IOException {\n+        String tableName = AbstractSQLGenerator.escapeIdentifier(RandomUtil.getIdentifier(\"BulkEscape\"));\n+        String fileName = filePath + inputFileDelimiterEscape;\n+        /*\n+         * The list below is the copy of inputFileDelimiterEscape with quotes removed.\n+         */\n+        String[][] expectedEscaped = new String[5][4];\n+        expectedEscaped[0] = new String[] {\"test\", \" test\\\"\", \"no,split\", \" testNoQuote\"};\n+        expectedEscaped[1] = new String[] {null, null, null, null};\n+        expectedEscaped[2] = new String[] {\"\\\"\", \"test\\\"test\", \"test,\\\"  test\", null};\n+        expectedEscaped[3] = new String[] {\"testNoQuote  \", \" testSpaceAround \", \" testSpaceInside \",\n+                \"  testSpaceQuote\\\" \"};\n+        expectedEscaped[4] = new String[] {null, null, null, \" testSpaceInside \"};\n+\n+        try (Connection con = getConnection(); Statement stmt = con.createStatement();\n+                SQLServerBulkCopy bulkCopy = new SQLServerBulkCopy(con);\n+                SQLServerBulkCSVFileRecord fileRecord = new SQLServerBulkCSVFileRecord(fileName, encoding, delimiter,\n+                        false)) {\n+            bulkCopy.setDestinationTableName(tableName);\n+            fileRecord.setEscapeColumnDelimitersCSV(true);\n+            fileRecord.addColumnMetadata(1, null, java.sql.Types.INTEGER, 0, 0);\n+            fileRecord.addColumnMetadata(2, null, java.sql.Types.VARCHAR, 50, 0);\n+            fileRecord.addColumnMetadata(3, null, java.sql.Types.VARCHAR, 50, 0);\n+            fileRecord.addColumnMetadata(4, null, java.sql.Types.VARCHAR, 50, 0);\n+            fileRecord.addColumnMetadata(5, null, java.sql.Types.VARCHAR, 50, 0);\n+            stmt.executeUpdate(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2NDIyOA==", "bodyText": "You are right.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429364228", "createdAt": "2020-05-22T17:15:40Z", "author": {"login": "ulvii"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/bulkCopy/BulkCopyCSVTest.java", "diffHunk": "@@ -118,6 +134,51 @@ public void testCSVFromURL() throws SQLException {\n         }\n     }\n \n+    @Test\n+    @DisplayName(\"Test setEscapeColumnDelimitersCSV\")\n+    public void testEscapeColumnDelimitersCSV() throws SQLException, FileNotFoundException, IOException {\n+        String tableName = AbstractSQLGenerator.escapeIdentifier(RandomUtil.getIdentifier(\"BulkEscape\"));\n+        String fileName = filePath + inputFileDelimiterEscape;\n+        /*\n+         * The list below is the copy of inputFileDelimiterEscape with quotes removed.\n+         */\n+        String[][] expectedEscaped = new String[5][4];\n+        expectedEscaped[0] = new String[] {\"test\", \" test\\\"\", \"no,split\", \" testNoQuote\"};\n+        expectedEscaped[1] = new String[] {null, null, null, null};\n+        expectedEscaped[2] = new String[] {\"\\\"\", \"test\\\"test\", \"test,\\\"  test\", null};\n+        expectedEscaped[3] = new String[] {\"testNoQuote  \", \" testSpaceAround \", \" testSpaceInside \",\n+                \"  testSpaceQuote\\\" \"};\n+        expectedEscaped[4] = new String[] {null, null, null, \" testSpaceInside \"};\n+\n+        try (Connection con = getConnection(); Statement stmt = con.createStatement();\n+                SQLServerBulkCopy bulkCopy = new SQLServerBulkCopy(con);\n+                SQLServerBulkCSVFileRecord fileRecord = new SQLServerBulkCSVFileRecord(fileName, encoding, delimiter,\n+                        false)) {\n+            bulkCopy.setDestinationTableName(tableName);\n+            fileRecord.setEscapeColumnDelimitersCSV(true);\n+            fileRecord.addColumnMetadata(1, null, java.sql.Types.INTEGER, 0, 0);\n+            fileRecord.addColumnMetadata(2, null, java.sql.Types.VARCHAR, 50, 0);\n+            fileRecord.addColumnMetadata(3, null, java.sql.Types.VARCHAR, 50, 0);\n+            fileRecord.addColumnMetadata(4, null, java.sql.Types.VARCHAR, 50, 0);\n+            fileRecord.addColumnMetadata(5, null, java.sql.Types.VARCHAR, 50, 0);\n+            stmt.executeUpdate(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkwNTUyNw=="}, "originalCommit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjE0NDM1OnYy", "diffSide": "RIGHT", "path": "src/test/resources/BulkCopyCSVTestInputDelimiterEscape.csv", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNTo1MTo0MlrOGZLcBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMToyNzowM1rOGZj-6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1NDk4MQ==", "bodyText": "Cases such as  \" test\"\"\" and  \"test\"\"test\" are actually invalid cases. RFC 4180 says that spaces need to be insides double quotes if double quotes are provided, so spaces cannot come before or after the double quotes (refer to https://stackoverflow.com/questions/4863852/space-before-quote-in-csv-field for some explanation on this too).\nCurrently the code allows this case and simply ignores the spaces, but I think we should not allow these cases (and throw an exception saying that there is an invalid row), then change this CSV file to not test for these invalid cases.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429054981", "createdAt": "2020-05-22T05:51:42Z", "author": {"login": "peterbae"}, "path": "src/test/resources/BulkCopyCSVTestInputDelimiterEscape.csv", "diffHunk": "@@ -0,0 +1,5 @@\n+1,\"test\", \" test\"\"\", \"no,split\" , testNoQuote\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ1MDQzNQ==", "bodyText": "You are right that strictly based on the following statement, there should be no spaces before and after enclosing quotes.\n\nSpaces are considered part of a field and should not be ignored.\n\nBut I found this WIKI page:\n\nAccording to RFC 4180, spaces outside quotes in a field are not allowed; however, the RFC also says that \"Spaces are considered part of a field and should not be ignored.\" and \"Implementors should 'be conservative in what you do, be liberal in what you accept from others' (RFC 793, section 2.10) when processing CSV files.\"\n\n\n1997, \"Ford\" ,E350\n\nI also did some research online and found multiple issues where users run into difficulties because of this limitation in the specs. And I don't see what benefit we would get from throwing an exception instead of ignoring it, so I chose to give flexibility to applications that won't impact the functionality of the feature.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429450435", "createdAt": "2020-05-22T21:03:24Z", "author": {"login": "ulvii"}, "path": "src/test/resources/BulkCopyCSVTestInputDelimiterEscape.csv", "diffHunk": "@@ -0,0 +1,5 @@\n+1,\"test\", \" test\"\"\", \"no,split\" , testNoQuote\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1NDk4MQ=="}, "originalCommit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ1MzA3Mw==", "bodyText": "Ok, I think that's a valid option too. We can leave the code as it is, but we might want to add a short comment saying that the code will ignore spaces that come before and after double quotes, since it might be relevant to some users. I'll resolve my other comment related to this as well.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429453073", "createdAt": "2020-05-22T21:12:16Z", "author": {"login": "peterbae"}, "path": "src/test/resources/BulkCopyCSVTestInputDelimiterEscape.csv", "diffHunk": "@@ -0,0 +1,5 @@\n+1,\"test\", \" test\"\"\", \"no,split\" , testNoQuote\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1NDk4MQ=="}, "originalCommit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ1NzEzMQ==", "bodyText": "I added a comment to the Javadoc of setEscapeColumnDelimitersCSV.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429457131", "createdAt": "2020-05-22T21:27:03Z", "author": {"login": "ulvii"}, "path": "src/test/resources/BulkCopyCSVTestInputDelimiterEscape.csv", "diffHunk": "@@ -0,0 +1,5 @@\n+1,\"test\", \" test\"\"\", \"no,split\" , testNoQuote\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1NDk4MQ=="}, "originalCommit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjE2MDk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjowMTo1N1rOGZLmHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMTowNTowOVrOGZjmnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1NzU2NA==", "bodyText": "Can we add a comment here that explains this regex briefly?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429057564", "createdAt": "2020-05-22T06:01:57Z", "author": {"login": "peterbae"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "diffHunk": "@@ -49,6 +49,10 @@\n      */\n     private final String delimiter;\n \n+    private boolean escapeDelimiters;\n+\n+    private static final String escapeSplitPattern = \"(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ1MDkwOA==", "bodyText": "Sure.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429450908", "createdAt": "2020-05-22T21:05:09Z", "author": {"login": "ulvii"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "diffHunk": "@@ -49,6 +49,10 @@\n      */\n     private final String delimiter;\n \n+    private boolean escapeDelimiters;\n+\n+    private static final String escapeSplitPattern = \"(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1NzU2NA=="}, "originalCommit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjE2OTMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjowNzowM1rOGZLrPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjowNzowM1rOGZLrPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1ODg3OQ==", "bodyText": "[not a big deal, and only if you're changing this file anyway]\nthis and line 254-256 is only a single line comment", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429058879", "createdAt": "2020-05-22T06:07:03Z", "author": {"login": "lilgreenbird"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "diffHunk": "@@ -229,21 +236,24 @@ public void close() throws SQLServerException {\n         if (null == currentLine)\n             return null;\n         else {\n-            // Binary data may be corrupted\n-            // The limit in split() function should be a negative value,\n-            // otherwise trailing empty strings are discarded.\n-            // Empty string is returned if there is no value.\n-            String[] data = currentLine.split(delimiter, -1);\n-\n-            // Cannot go directly from String[] to Object[] and expect it to act\n-            // as an array.\n+            /*\n+             * Binary data may be corrupted The limit in split() function should be a negative value, otherwise trailing\n+             * empty strings are discarded. Empty string is returned if there is no value.\n+             */\n+            String[] data = (escapeDelimiters && currentLine.contains(\"\\\"\"))\n+                                                                             ? escapeQuotesRFC4180(currentLine.split(\n+                                                                                     delimiter + escapeSplitPattern))\n+                                                                             : currentLine.split(delimiter, -1);\n+            /*\n+             * Cannot go directly from String[] to Object[] and expect it to act as an array.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjE3MDU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjowNzo0OFrOGZLsCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMToxMzoxNVrOGZjwUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1OTA4MQ==", "bodyText": "We should keep the limit argument (-1) to the currentLine.split method to preserve the spacing at the end.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429059081", "createdAt": "2020-05-22T06:07:48Z", "author": {"login": "peterbae"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "diffHunk": "@@ -189,15 +193,18 @@ private void initFileReader(InputStreamReader sr, String encoding, String demlim\n         if (firstLineIsColumnNames) {\n             currentLine = fileReader.readLine();\n             if (null != currentLine) {\n-                columnNames = currentLine.split(delimiter, -1);\n+                columnNames = (escapeDelimiters && currentLine.contains(\"\\\"\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ1MzM5Mg==", "bodyText": "Since we're going to ignore spaces outside double quotes, this code can stay as it is.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429453392", "createdAt": "2020-05-22T21:13:15Z", "author": {"login": "peterbae"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "diffHunk": "@@ -189,15 +193,18 @@ private void initFileReader(InputStreamReader sr, String encoding, String demlim\n         if (firstLineIsColumnNames) {\n             currentLine = fileReader.readLine();\n             if (null != currentLine) {\n-                columnNames = currentLine.split(delimiter, -1);\n+                columnNames = (escapeDelimiters && currentLine.contains(\"\\\"\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1OTA4MQ=="}, "originalCommit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjE3MjEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjowODo0N1rOGZLtAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjowODo0N1rOGZLtAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1OTMyOQ==", "bodyText": "This line and line 255 should be single line comments", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429059329", "createdAt": "2020-05-22T06:08:47Z", "author": {"login": "peterbae"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "diffHunk": "@@ -229,21 +236,24 @@ public void close() throws SQLServerException {\n         if (null == currentLine)\n             return null;\n         else {\n-            // Binary data may be corrupted\n-            // The limit in split() function should be a negative value,\n-            // otherwise trailing empty strings are discarded.\n-            // Empty string is returned if there is no value.\n-            String[] data = currentLine.split(delimiter, -1);\n-\n-            // Cannot go directly from String[] to Object[] and expect it to act\n-            // as an array.\n+            /*\n+             * Binary data may be corrupted The limit in split() function should be a negative value, otherwise trailing\n+             * empty strings are discarded. Empty string is returned if there is no value.\n+             */\n+            String[] data = (escapeDelimiters && currentLine.contains(\"\\\"\"))\n+                                                                             ? escapeQuotesRFC4180(currentLine.split(\n+                                                                                     delimiter + escapeSplitPattern))\n+                                                                             : currentLine.split(delimiter, -1);\n+            /*\n+             * Cannot go directly from String[] to Object[] and expect it to act as an array.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjE3NTYxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/microsoft/sqlserver/jdbc/bulkCopy/BulkCopyCSVTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjoxMDo1MVrOGZLvGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjoxMDo1MVrOGZLvGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1OTg2NA==", "bodyText": "test needs description block", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429059864", "createdAt": "2020-05-22T06:10:51Z", "author": {"login": "lilgreenbird"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/bulkCopy/BulkCopyCSVTest.java", "diffHunk": "@@ -118,6 +134,51 @@ public void testCSVFromURL() throws SQLException {\n         }\n     }\n \n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjIzMzg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjozODoyNFrOGZMRPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMToxMzoyMlrOGaJvwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2ODYwNA==", "bodyText": "I think we should add an else statement to this if, to handle the case where the CSV data is corrupted and has a double quote that has not been escaped. Throw an error stating that the data is corrupt, perhaps?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429068604", "createdAt": "2020-05-22T06:38:24Z", "author": {"login": "peterbae"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "diffHunk": "@@ -516,4 +523,58 @@ public boolean next() throws SQLServerException {\n         }\n         return (null != currentLine);\n     }\n+\n+    /**\n+     * Returns whether the rules to escape delimiters are used.\n+     *\n+     * @return true if the rules are used, false otherwise.\n+     */\n+    public boolean isEscapeColumnDelimitersCSV() {\n+        return escapeDelimiters;\n+    }\n+\n+    /**\n+     * When set to true, the following rules will be used to parse CSV files: Each field may or may not be enclosed in\n+     * double quotes. If fields are not enclosed with double quotes, then double quotes may not appear inside the\n+     * fields. Fields containing double quotes, and delimiters should be enclosed in double quotes. If double-quotes are\n+     * used to enclose fields, then a double-quote appearing inside a field must be escaped by preceding it with another\n+     * double quote.\n+     *\n+     * @param escapeDelimiters\n+     *        true if the rules above to be used.\n+     */\n+    public void setEscapeColumnDelimitersCSV(boolean escapeDelimiters) {\n+        this.escapeDelimiters = escapeDelimiters;\n+    }\n+\n+    private static String[] escapeQuotesRFC4180(String[] tokens) {\n+        if (null == tokens) {\n+            return tokens;\n+        }\n+        for (int i = 0; i < tokens.length; i++) {\n+            boolean escaped = false;\n+            int j = 0;\n+            StringBuilder sb = new StringBuilder();\n+            if (tokens[i].contains(\"\\\"\")) {\n+                tokens[i] = tokens[i].trim();\n+            }\n+            while (j < tokens[i].length()) {\n+                if ('\"' == tokens[i].charAt(j)) {\n+                    if (!escaped) {\n+                        escaped = true;\n+                    } else {\n+                        if ((j < tokens[i].length() - 1) && '\"' == tokens[i].charAt(j + 1)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ1MzgxOA==", "bodyText": "Let me know if you'd like to leave the code as it is here as well, we can make the call as to how we're going to handle invalid cases. I think being lenient and letting un-closed double quotes in (the code is removing the un-closed double quote) works for me.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429453818", "createdAt": "2020-05-22T21:14:45Z", "author": {"login": "peterbae"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "diffHunk": "@@ -516,4 +523,58 @@ public boolean next() throws SQLServerException {\n         }\n         return (null != currentLine);\n     }\n+\n+    /**\n+     * Returns whether the rules to escape delimiters are used.\n+     *\n+     * @return true if the rules are used, false otherwise.\n+     */\n+    public boolean isEscapeColumnDelimitersCSV() {\n+        return escapeDelimiters;\n+    }\n+\n+    /**\n+     * When set to true, the following rules will be used to parse CSV files: Each field may or may not be enclosed in\n+     * double quotes. If fields are not enclosed with double quotes, then double quotes may not appear inside the\n+     * fields. Fields containing double quotes, and delimiters should be enclosed in double quotes. If double-quotes are\n+     * used to enclose fields, then a double-quote appearing inside a field must be escaped by preceding it with another\n+     * double quote.\n+     *\n+     * @param escapeDelimiters\n+     *        true if the rules above to be used.\n+     */\n+    public void setEscapeColumnDelimitersCSV(boolean escapeDelimiters) {\n+        this.escapeDelimiters = escapeDelimiters;\n+    }\n+\n+    private static String[] escapeQuotesRFC4180(String[] tokens) {\n+        if (null == tokens) {\n+            return tokens;\n+        }\n+        for (int i = 0; i < tokens.length; i++) {\n+            boolean escaped = false;\n+            int j = 0;\n+            StringBuilder sb = new StringBuilder();\n+            if (tokens[i].contains(\"\\\"\")) {\n+                tokens[i] = tokens[i].trim();\n+            }\n+            while (j < tokens[i].length()) {\n+                if ('\"' == tokens[i].charAt(j)) {\n+                    if (!escaped) {\n+                        escaped = true;\n+                    } else {\n+                        if ((j < tokens[i].length() - 1) && '\"' == tokens[i].charAt(j + 1)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2ODYwNA=="}, "originalCommit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NTQ3MQ==", "bodyText": "That's a good catch. I will modify to throw an exception when there are odd number of quotes.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429475471", "createdAt": "2020-05-22T22:12:16Z", "author": {"login": "ulvii"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "diffHunk": "@@ -516,4 +523,58 @@ public boolean next() throws SQLServerException {\n         }\n         return (null != currentLine);\n     }\n+\n+    /**\n+     * Returns whether the rules to escape delimiters are used.\n+     *\n+     * @return true if the rules are used, false otherwise.\n+     */\n+    public boolean isEscapeColumnDelimitersCSV() {\n+        return escapeDelimiters;\n+    }\n+\n+    /**\n+     * When set to true, the following rules will be used to parse CSV files: Each field may or may not be enclosed in\n+     * double quotes. If fields are not enclosed with double quotes, then double quotes may not appear inside the\n+     * fields. Fields containing double quotes, and delimiters should be enclosed in double quotes. If double-quotes are\n+     * used to enclose fields, then a double-quote appearing inside a field must be escaped by preceding it with another\n+     * double quote.\n+     *\n+     * @param escapeDelimiters\n+     *        true if the rules above to be used.\n+     */\n+    public void setEscapeColumnDelimitersCSV(boolean escapeDelimiters) {\n+        this.escapeDelimiters = escapeDelimiters;\n+    }\n+\n+    private static String[] escapeQuotesRFC4180(String[] tokens) {\n+        if (null == tokens) {\n+            return tokens;\n+        }\n+        for (int i = 0; i < tokens.length; i++) {\n+            boolean escaped = false;\n+            int j = 0;\n+            StringBuilder sb = new StringBuilder();\n+            if (tokens[i].contains(\"\\\"\")) {\n+                tokens[i] = tokens[i].trim();\n+            }\n+            while (j < tokens[i].length()) {\n+                if ('\"' == tokens[i].charAt(j)) {\n+                    if (!escaped) {\n+                        escaped = true;\n+                    } else {\n+                        if ((j < tokens[i].length() - 1) && '\"' == tokens[i].charAt(j + 1)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2ODYwNA=="}, "originalCommit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA3NTg0Mg==", "bodyText": "not a bit deal...but typically these kind of errors give an error like \"Unclosed quotation mark after the character string 'blah'\"", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r430075842", "createdAt": "2020-05-25T21:13:22Z", "author": {"login": "lilgreenbird"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "diffHunk": "@@ -516,4 +523,58 @@ public boolean next() throws SQLServerException {\n         }\n         return (null != currentLine);\n     }\n+\n+    /**\n+     * Returns whether the rules to escape delimiters are used.\n+     *\n+     * @return true if the rules are used, false otherwise.\n+     */\n+    public boolean isEscapeColumnDelimitersCSV() {\n+        return escapeDelimiters;\n+    }\n+\n+    /**\n+     * When set to true, the following rules will be used to parse CSV files: Each field may or may not be enclosed in\n+     * double quotes. If fields are not enclosed with double quotes, then double quotes may not appear inside the\n+     * fields. Fields containing double quotes, and delimiters should be enclosed in double quotes. If double-quotes are\n+     * used to enclose fields, then a double-quote appearing inside a field must be escaped by preceding it with another\n+     * double quote.\n+     *\n+     * @param escapeDelimiters\n+     *        true if the rules above to be used.\n+     */\n+    public void setEscapeColumnDelimitersCSV(boolean escapeDelimiters) {\n+        this.escapeDelimiters = escapeDelimiters;\n+    }\n+\n+    private static String[] escapeQuotesRFC4180(String[] tokens) {\n+        if (null == tokens) {\n+            return tokens;\n+        }\n+        for (int i = 0; i < tokens.length; i++) {\n+            boolean escaped = false;\n+            int j = 0;\n+            StringBuilder sb = new StringBuilder();\n+            if (tokens[i].contains(\"\\\"\")) {\n+                tokens[i] = tokens[i].trim();\n+            }\n+            while (j < tokens[i].length()) {\n+                if ('\"' == tokens[i].charAt(j)) {\n+                    if (!escaped) {\n+                        escaped = true;\n+                    } else {\n+                        if ((j < tokens[i].length() - 1) && '\"' == tokens[i].charAt(j + 1)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2ODYwNA=="}, "originalCommit": {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjU2MDE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNDoxMDoxOVrOGZ0QOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNDo0NjozNVrOGaOd9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyMzcwNA==", "bodyText": "This lambda expression would slow down the parsing of data by scanning through every character. The if statement on line 569 already implicitly does this check, where adding an else statement to\nif ((j < tokens[i].length() - 1) && '\"' == tokens[i].charAt(j + 1)) {\nthis if statement would guarantee that the corrupt String would be caught.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429723704", "createdAt": "2020-05-25T04:10:19Z", "author": {"login": "peterbae"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "diffHunk": "@@ -516,4 +522,62 @@ public boolean next() throws SQLServerException {\n         }\n         return (null != currentLine);\n     }\n+\n+    /**\n+     * Returns whether the rules to escape delimiters are used.\n+     *\n+     * @return true if the rules are used, false otherwise.\n+     */\n+    public boolean isEscapeColumnDelimitersCSV() {\n+        return escapeDelimiters;\n+    }\n+\n+    /**\n+     * When set to true, the following rules will be used to parse CSV files: Each field may or may not be enclosed in\n+     * double quotes. If fields are not enclosed with double quotes, then double quotes may not appear inside the\n+     * fields. Fields containing double quotes, and delimiters should be enclosed in double quotes. If double-quotes are\n+     * used to enclose fields, then a double-quote appearing inside a field must be escaped by preceding it with another\n+     * double quote. Spaces are considered part of a field. Spaces before and after enclosing double quotes are ignored.\n+     *\n+     * @param escapeDelimiters\n+     *        true if the rules above to be used.\n+     */\n+    public void setEscapeColumnDelimitersCSV(boolean escapeDelimiters) {\n+        this.escapeDelimiters = escapeDelimiters;\n+    }\n+\n+    private static String[] escapeQuotesRFC4180(String[] tokens) throws SQLServerException {\n+        if (null == tokens) {\n+            return tokens;\n+        }\n+        for (int i = 0; i < tokens.length; i++) {\n+            boolean escaped = false;\n+            int j = 0;\n+            StringBuilder sb = new StringBuilder();\n+            long quoteCount = tokens[i].chars().filter(ch -> ch == '\"').count();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9269f445dfb8f946d39d9ffcfeacd0734308ef90"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAwNjkwNA==", "bodyText": "Actually, adding an else statement wouldn't catch all the cases; if the String starts with a double quote but doesn't end in one, or if the String starts with a double quote but ends with an escaped double quote would not fail in the else statement. If we want to make it easy, we can just increment a counter to count the number of double quotes as we go along in the while loop, instead of counting it here.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r430006904", "createdAt": "2020-05-25T16:14:49Z", "author": {"login": "peterbae"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "diffHunk": "@@ -516,4 +522,62 @@ public boolean next() throws SQLServerException {\n         }\n         return (null != currentLine);\n     }\n+\n+    /**\n+     * Returns whether the rules to escape delimiters are used.\n+     *\n+     * @return true if the rules are used, false otherwise.\n+     */\n+    public boolean isEscapeColumnDelimitersCSV() {\n+        return escapeDelimiters;\n+    }\n+\n+    /**\n+     * When set to true, the following rules will be used to parse CSV files: Each field may or may not be enclosed in\n+     * double quotes. If fields are not enclosed with double quotes, then double quotes may not appear inside the\n+     * fields. Fields containing double quotes, and delimiters should be enclosed in double quotes. If double-quotes are\n+     * used to enclose fields, then a double-quote appearing inside a field must be escaped by preceding it with another\n+     * double quote. Spaces are considered part of a field. Spaces before and after enclosing double quotes are ignored.\n+     *\n+     * @param escapeDelimiters\n+     *        true if the rules above to be used.\n+     */\n+    public void setEscapeColumnDelimitersCSV(boolean escapeDelimiters) {\n+        this.escapeDelimiters = escapeDelimiters;\n+    }\n+\n+    private static String[] escapeQuotesRFC4180(String[] tokens) throws SQLServerException {\n+        if (null == tokens) {\n+            return tokens;\n+        }\n+        for (int i = 0; i < tokens.length; i++) {\n+            boolean escaped = false;\n+            int j = 0;\n+            StringBuilder sb = new StringBuilder();\n+            long quoteCount = tokens[i].chars().filter(ch -> ch == '\"').count();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyMzcwNA=="}, "originalCommit": {"oid": "9269f445dfb8f946d39d9ffcfeacd0734308ef90"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5NDk2Mw==", "bodyText": "I improved the error handling a bit, but kept the quoteCount part as it is. filter() has the same time complexity as contains() and I need to use one of them to tell if the driver is parsing a double quote enclosed field. I looked into counting double quotes in the while loop, but it becomes significantly challenging to ignore the whitespaces after the last quote. I think it is okay to keep filter() because the time complexity still remains O(n).", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r430094963", "createdAt": "2020-05-25T23:19:05Z", "author": {"login": "ulvii"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "diffHunk": "@@ -516,4 +522,62 @@ public boolean next() throws SQLServerException {\n         }\n         return (null != currentLine);\n     }\n+\n+    /**\n+     * Returns whether the rules to escape delimiters are used.\n+     *\n+     * @return true if the rules are used, false otherwise.\n+     */\n+    public boolean isEscapeColumnDelimitersCSV() {\n+        return escapeDelimiters;\n+    }\n+\n+    /**\n+     * When set to true, the following rules will be used to parse CSV files: Each field may or may not be enclosed in\n+     * double quotes. If fields are not enclosed with double quotes, then double quotes may not appear inside the\n+     * fields. Fields containing double quotes, and delimiters should be enclosed in double quotes. If double-quotes are\n+     * used to enclose fields, then a double-quote appearing inside a field must be escaped by preceding it with another\n+     * double quote. Spaces are considered part of a field. Spaces before and after enclosing double quotes are ignored.\n+     *\n+     * @param escapeDelimiters\n+     *        true if the rules above to be used.\n+     */\n+    public void setEscapeColumnDelimitersCSV(boolean escapeDelimiters) {\n+        this.escapeDelimiters = escapeDelimiters;\n+    }\n+\n+    private static String[] escapeQuotesRFC4180(String[] tokens) throws SQLServerException {\n+        if (null == tokens) {\n+            return tokens;\n+        }\n+        for (int i = 0; i < tokens.length; i++) {\n+            boolean escaped = false;\n+            int j = 0;\n+            StringBuilder sb = new StringBuilder();\n+            long quoteCount = tokens[i].chars().filter(ch -> ch == '\"').count();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyMzcwNA=="}, "originalCommit": {"oid": "9269f445dfb8f946d39d9ffcfeacd0734308ef90"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE1MzIwNA==", "bodyText": "Thanks, that sounds good to me.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r430153204", "createdAt": "2020-05-26T04:46:35Z", "author": {"login": "peterbae"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "diffHunk": "@@ -516,4 +522,62 @@ public boolean next() throws SQLServerException {\n         }\n         return (null != currentLine);\n     }\n+\n+    /**\n+     * Returns whether the rules to escape delimiters are used.\n+     *\n+     * @return true if the rules are used, false otherwise.\n+     */\n+    public boolean isEscapeColumnDelimitersCSV() {\n+        return escapeDelimiters;\n+    }\n+\n+    /**\n+     * When set to true, the following rules will be used to parse CSV files: Each field may or may not be enclosed in\n+     * double quotes. If fields are not enclosed with double quotes, then double quotes may not appear inside the\n+     * fields. Fields containing double quotes, and delimiters should be enclosed in double quotes. If double-quotes are\n+     * used to enclose fields, then a double-quote appearing inside a field must be escaped by preceding it with another\n+     * double quote. Spaces are considered part of a field. Spaces before and after enclosing double quotes are ignored.\n+     *\n+     * @param escapeDelimiters\n+     *        true if the rules above to be used.\n+     */\n+    public void setEscapeColumnDelimitersCSV(boolean escapeDelimiters) {\n+        this.escapeDelimiters = escapeDelimiters;\n+    }\n+\n+    private static String[] escapeQuotesRFC4180(String[] tokens) throws SQLServerException {\n+        if (null == tokens) {\n+            return tokens;\n+        }\n+        for (int i = 0; i < tokens.length; i++) {\n+            boolean escaped = false;\n+            int j = 0;\n+            StringBuilder sb = new StringBuilder();\n+            long quoteCount = tokens[i].chars().filter(ch -> ch == '\"').count();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyMzcwNA=="}, "originalCommit": {"oid": "9269f445dfb8f946d39d9ffcfeacd0734308ef90"}, "originalPosition": 149}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1062, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}