{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NDU3MDAw", "number": 1284, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDoyMjo0MVrODofRkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODo0MDozN1rODsL6MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzgyMDM1OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDoyMjo0MVrOF3Eccw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDoyNToyM1rOF3Ehcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI4ODgxOQ==", "bodyText": "Does this need any sort of open source approval?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r393288819", "createdAt": "2020-03-16T20:22:41Z", "author": {"login": "saurabh500"}, "path": "pom.xml", "diffHunk": "@@ -122,6 +122,13 @@\n \t\t\t<version>1.64</version>\n \t\t\t<optional>true</optional>\n \t\t</dependency>\n+\t\t\n+\t\t<!-- dependencies for Client Certificate Authentication -->\n+\t\t<dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e521b6000f5fcbd2c31787274685503c26d42168"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5MDA5OQ==", "bodyText": "Yes, we will have to talk to crypto team for approval.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r393290099", "createdAt": "2020-03-16T20:25:23Z", "author": {"login": "peterbae"}, "path": "pom.xml", "diffHunk": "@@ -122,6 +122,13 @@\n \t\t\t<version>1.64</version>\n \t\t\t<optional>true</optional>\n \t\t</dependency>\n+\t\t\n+\t\t<!-- dependencies for Client Certificate Authentication -->\n+\t\t<dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI4ODgxOQ=="}, "originalCommit": {"oid": "e521b6000f5fcbd2c31787274685503c26d42168"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzgyNjg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerCertificateUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDoyNTowMlrOF3Egzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNjozODozMlrOF7kEHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI4OTkzNA==", "bodyText": "Can \"PKCS12\" be turned into a constant string? Or is there a constant in JDK that can be used instead?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r393289934", "createdAt": "2020-03-16T20:25:02Z", "author": {"login": "saurabh500"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerCertificateUtils.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+\r\n+package com.microsoft.sqlserver.jdbc;\r\n+\r\n+import java.io.ByteArrayInputStream;\r\n+import java.io.DataInputStream;\r\n+import java.io.File;\r\n+import java.io.FileInputStream;\r\n+import java.io.FileNotFoundException;\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.io.StringReader;\r\n+import java.math.BigInteger;\r\n+import java.nio.ByteBuffer;\r\n+import java.nio.ByteOrder;\r\n+import java.nio.file.Files;\r\n+import java.nio.file.Paths;\r\n+import java.security.GeneralSecurityException;\r\n+import java.security.KeyFactory;\r\n+import java.security.KeyPair;\r\n+import java.security.KeyStore;\r\n+import java.security.KeyStoreException;\r\n+import java.security.MessageDigest;\r\n+import java.security.NoSuchAlgorithmException;\r\n+import java.security.PrivateKey;\r\n+import java.security.Security;\r\n+import java.security.UnrecoverableKeyException;\r\n+import java.security.cert.Certificate;\r\n+import java.security.cert.CertificateException;\r\n+import java.security.cert.CertificateFactory;\r\n+import java.security.spec.InvalidKeySpecException;\r\n+import java.security.spec.PKCS8EncodedKeySpec;\r\n+import java.security.spec.RSAPrivateCrtKeySpec;\r\n+import java.util.Arrays;\r\n+import java.util.Base64;\r\n+\r\n+import javax.crypto.Cipher;\r\n+import javax.crypto.SecretKey;\r\n+import javax.crypto.spec.SecretKeySpec;\r\n+import javax.net.ssl.KeyManager;\r\n+import javax.net.ssl.KeyManagerFactory;\r\n+\r\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\r\n+import org.bouncycastle.openssl.PEMDecryptorProvider;\r\n+import org.bouncycastle.openssl.PEMEncryptedKeyPair;\r\n+import org.bouncycastle.openssl.PEMKeyPair;\r\n+import org.bouncycastle.openssl.PEMParser;\r\n+import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;\r\n+import org.bouncycastle.openssl.jcajce.JcePEMDecryptorProviderBuilder;\r\n+\r\n+\r\n+final class SQLServerCertificateUtils {\r\n+\r\n+    static KeyManager[] getKeyManagerFromFile(String certPath, String keyPath,\r\n+            String keyPassword) throws IOException, GeneralSecurityException, SQLServerException {\r\n+        if (keyPath != null && keyPath.length() > 0) {\r\n+            return readPKCS8Certificate(certPath, keyPath, keyPassword);\r\n+        } else {\r\n+            return readPKCS12Certificate(certPath, keyPassword);\r\n+        }\r\n+    }\r\n+\r\n+    private static KeyManager[] readPKCS12Certificate(String certPath,\r\n+            String keyPassword) throws NoSuchAlgorithmException, CertificateException, FileNotFoundException, IOException, UnrecoverableKeyException, KeyStoreException {\r\n+        KeyStore keystore = KeyStore.getInstance(\"PKCS12\");\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e521b6000f5fcbd2c31787274685503c26d42168"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAwMTE4MQ==", "bodyText": "Will do.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r398001181", "createdAt": "2020-03-25T16:38:32Z", "author": {"login": "peterbae"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerCertificateUtils.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+\r\n+package com.microsoft.sqlserver.jdbc;\r\n+\r\n+import java.io.ByteArrayInputStream;\r\n+import java.io.DataInputStream;\r\n+import java.io.File;\r\n+import java.io.FileInputStream;\r\n+import java.io.FileNotFoundException;\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.io.StringReader;\r\n+import java.math.BigInteger;\r\n+import java.nio.ByteBuffer;\r\n+import java.nio.ByteOrder;\r\n+import java.nio.file.Files;\r\n+import java.nio.file.Paths;\r\n+import java.security.GeneralSecurityException;\r\n+import java.security.KeyFactory;\r\n+import java.security.KeyPair;\r\n+import java.security.KeyStore;\r\n+import java.security.KeyStoreException;\r\n+import java.security.MessageDigest;\r\n+import java.security.NoSuchAlgorithmException;\r\n+import java.security.PrivateKey;\r\n+import java.security.Security;\r\n+import java.security.UnrecoverableKeyException;\r\n+import java.security.cert.Certificate;\r\n+import java.security.cert.CertificateException;\r\n+import java.security.cert.CertificateFactory;\r\n+import java.security.spec.InvalidKeySpecException;\r\n+import java.security.spec.PKCS8EncodedKeySpec;\r\n+import java.security.spec.RSAPrivateCrtKeySpec;\r\n+import java.util.Arrays;\r\n+import java.util.Base64;\r\n+\r\n+import javax.crypto.Cipher;\r\n+import javax.crypto.SecretKey;\r\n+import javax.crypto.spec.SecretKeySpec;\r\n+import javax.net.ssl.KeyManager;\r\n+import javax.net.ssl.KeyManagerFactory;\r\n+\r\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\r\n+import org.bouncycastle.openssl.PEMDecryptorProvider;\r\n+import org.bouncycastle.openssl.PEMEncryptedKeyPair;\r\n+import org.bouncycastle.openssl.PEMKeyPair;\r\n+import org.bouncycastle.openssl.PEMParser;\r\n+import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;\r\n+import org.bouncycastle.openssl.jcajce.JcePEMDecryptorProviderBuilder;\r\n+\r\n+\r\n+final class SQLServerCertificateUtils {\r\n+\r\n+    static KeyManager[] getKeyManagerFromFile(String certPath, String keyPath,\r\n+            String keyPassword) throws IOException, GeneralSecurityException, SQLServerException {\r\n+        if (keyPath != null && keyPath.length() > 0) {\r\n+            return readPKCS8Certificate(certPath, keyPath, keyPassword);\r\n+        } else {\r\n+            return readPKCS12Certificate(certPath, keyPassword);\r\n+        }\r\n+    }\r\n+\r\n+    private static KeyManager[] readPKCS12Certificate(String certPath,\r\n+            String keyPassword) throws NoSuchAlgorithmException, CertificateException, FileNotFoundException, IOException, UnrecoverableKeyException, KeyStoreException {\r\n+        KeyStore keystore = KeyStore.getInstance(\"PKCS12\");\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI4OTkzNA=="}, "originalCommit": {"oid": "e521b6000f5fcbd2c31787274685503c26d42168"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzgzMzg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerCertificateUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDoyNzozNVrOF3ElVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDoyNzozNVrOF3ElVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5MTA5Mg==", "bodyText": "Is it possible to use the StringBuilder to do these manipulations on the key?\nThe current code will create new instances of String since String is immutable. Can we optimize a bit for memory?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r393291092", "createdAt": "2020-03-16T20:27:35Z", "author": {"login": "saurabh500"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerCertificateUtils.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+\r\n+package com.microsoft.sqlserver.jdbc;\r\n+\r\n+import java.io.ByteArrayInputStream;\r\n+import java.io.DataInputStream;\r\n+import java.io.File;\r\n+import java.io.FileInputStream;\r\n+import java.io.FileNotFoundException;\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.io.StringReader;\r\n+import java.math.BigInteger;\r\n+import java.nio.ByteBuffer;\r\n+import java.nio.ByteOrder;\r\n+import java.nio.file.Files;\r\n+import java.nio.file.Paths;\r\n+import java.security.GeneralSecurityException;\r\n+import java.security.KeyFactory;\r\n+import java.security.KeyPair;\r\n+import java.security.KeyStore;\r\n+import java.security.KeyStoreException;\r\n+import java.security.MessageDigest;\r\n+import java.security.NoSuchAlgorithmException;\r\n+import java.security.PrivateKey;\r\n+import java.security.Security;\r\n+import java.security.UnrecoverableKeyException;\r\n+import java.security.cert.Certificate;\r\n+import java.security.cert.CertificateException;\r\n+import java.security.cert.CertificateFactory;\r\n+import java.security.spec.InvalidKeySpecException;\r\n+import java.security.spec.PKCS8EncodedKeySpec;\r\n+import java.security.spec.RSAPrivateCrtKeySpec;\r\n+import java.util.Arrays;\r\n+import java.util.Base64;\r\n+\r\n+import javax.crypto.Cipher;\r\n+import javax.crypto.SecretKey;\r\n+import javax.crypto.spec.SecretKeySpec;\r\n+import javax.net.ssl.KeyManager;\r\n+import javax.net.ssl.KeyManagerFactory;\r\n+\r\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\r\n+import org.bouncycastle.openssl.PEMDecryptorProvider;\r\n+import org.bouncycastle.openssl.PEMEncryptedKeyPair;\r\n+import org.bouncycastle.openssl.PEMKeyPair;\r\n+import org.bouncycastle.openssl.PEMParser;\r\n+import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;\r\n+import org.bouncycastle.openssl.jcajce.JcePEMDecryptorProviderBuilder;\r\n+\r\n+\r\n+final class SQLServerCertificateUtils {\r\n+\r\n+    static KeyManager[] getKeyManagerFromFile(String certPath, String keyPath,\r\n+            String keyPassword) throws IOException, GeneralSecurityException, SQLServerException {\r\n+        if (keyPath != null && keyPath.length() > 0) {\r\n+            return readPKCS8Certificate(certPath, keyPath, keyPassword);\r\n+        } else {\r\n+            return readPKCS12Certificate(certPath, keyPassword);\r\n+        }\r\n+    }\r\n+\r\n+    private static KeyManager[] readPKCS12Certificate(String certPath,\r\n+            String keyPassword) throws NoSuchAlgorithmException, CertificateException, FileNotFoundException, IOException, UnrecoverableKeyException, KeyStoreException {\r\n+        KeyStore keystore = KeyStore.getInstance(\"PKCS12\");\r\n+        keystore.load(new FileInputStream(certPath), keyPassword.toCharArray());\r\n+        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(\"SunX509\");\r\n+        keyManagerFactory.init(keystore, keyPassword.toCharArray());\r\n+        return keyManagerFactory.getKeyManagers();\r\n+    }\r\n+\r\n+    private static KeyManager[] readPKCS8Certificate(String certPath, String keyPath,\r\n+            String keyPassword) throws IOException, GeneralSecurityException, SQLServerException {\r\n+        Certificate clientCertificate = loadCertificate(certPath);\r\n+        PrivateKey privateKey = loadPrivateKey(keyPath, keyPassword);\r\n+\r\n+        KeyStore keyStore = KeyStore.getInstance(\"JKS\");\r\n+        keyStore.load(null, null);\r\n+        keyStore.setCertificateEntry(\"client-cert\", clientCertificate);\r\n+        keyStore.setKeyEntry(\"client-key\", privateKey, keyPassword.toCharArray(),\r\n+                new Certificate[] {clientCertificate});\r\n+\r\n+        KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\r\n+        kmf.init(keyStore, keyPassword.toCharArray());\r\n+        return kmf.getKeyManagers();\r\n+    }\r\n+\r\n+    private static Certificate loadCertificate(String certificatePem) throws IOException, GeneralSecurityException {\r\n+        CertificateFactory certificateFactory = CertificateFactory.getInstance(\"X509\");\r\n+        InputStream certstream = fileToStream(certificatePem);\r\n+        return certificateFactory.generateCertificate(certstream);\r\n+    }\r\n+\r\n+    // PKCS#8 format\r\n+    private static final String PEM_PRIVATE_START = \"-----BEGIN PRIVATE KEY-----\";\r\n+    private static final String PEM_PRIVATE_END = \"-----END PRIVATE KEY-----\";\r\n+    // PKCS#1 format\r\n+    private static final String PEM_RSA_PRIVATE_START = \"-----BEGIN RSA PRIVATE KEY-----\";\r\n+    // PVK format\r\n+    private static final long PVK_MAGIC = 0xB0B5F11EL;\r\n+    private static final byte[] RSA2_MAGIC = {82, 83, 65, 50};\r\n+    private static final String RC4_ALG = \"RC4\";\r\n+    private static final String RSA_ALG = \"RSA\";\r\n+\r\n+    private static PrivateKey loadPrivateKey(String privateKeyPemPath,\r\n+            String privateKeyPassword) throws GeneralSecurityException, IOException, SQLServerException {\r\n+        String privateKeyPem = getStringFromFile(privateKeyPemPath);\r\n+\r\n+        if (privateKeyPem.contains(PEM_PRIVATE_START)) { // PKCS#8 format\r\n+            return loadPrivateKeyFromPKCS8(privateKeyPem);\r\n+        } else if (privateKeyPem.contains(PEM_RSA_PRIVATE_START)) { // PKCS#1 format\r\n+            return loadPrivateKeyFromPKCS1(privateKeyPem, privateKeyPassword);\r\n+        } else {\r\n+            return loadPrivateKeyFromPVK(privateKeyPemPath, privateKeyPassword);\r\n+        }\r\n+    }\r\n+\r\n+    private static PrivateKey loadPrivateKeyFromPKCS8(\r\n+            String key) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException {\r\n+        key = key.replace(PEM_PRIVATE_START, \"\").replace(PEM_PRIVATE_END, \"\");\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e521b6000f5fcbd2c31787274685503c26d42168"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzgzNTczOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerCertificateUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDoyODoxNFrOF3EmfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMTozNTo0NVrOF8gQ_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5MTM4OQ==", "bodyText": "Instead of relying on empty exception handling, is there a way to check if the provider is loaded, and use that ?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r393291389", "createdAt": "2020-03-16T20:28:14Z", "author": {"login": "saurabh500"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerCertificateUtils.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+\r\n+package com.microsoft.sqlserver.jdbc;\r\n+\r\n+import java.io.ByteArrayInputStream;\r\n+import java.io.DataInputStream;\r\n+import java.io.File;\r\n+import java.io.FileInputStream;\r\n+import java.io.FileNotFoundException;\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.io.StringReader;\r\n+import java.math.BigInteger;\r\n+import java.nio.ByteBuffer;\r\n+import java.nio.ByteOrder;\r\n+import java.nio.file.Files;\r\n+import java.nio.file.Paths;\r\n+import java.security.GeneralSecurityException;\r\n+import java.security.KeyFactory;\r\n+import java.security.KeyPair;\r\n+import java.security.KeyStore;\r\n+import java.security.KeyStoreException;\r\n+import java.security.MessageDigest;\r\n+import java.security.NoSuchAlgorithmException;\r\n+import java.security.PrivateKey;\r\n+import java.security.Security;\r\n+import java.security.UnrecoverableKeyException;\r\n+import java.security.cert.Certificate;\r\n+import java.security.cert.CertificateException;\r\n+import java.security.cert.CertificateFactory;\r\n+import java.security.spec.InvalidKeySpecException;\r\n+import java.security.spec.PKCS8EncodedKeySpec;\r\n+import java.security.spec.RSAPrivateCrtKeySpec;\r\n+import java.util.Arrays;\r\n+import java.util.Base64;\r\n+\r\n+import javax.crypto.Cipher;\r\n+import javax.crypto.SecretKey;\r\n+import javax.crypto.spec.SecretKeySpec;\r\n+import javax.net.ssl.KeyManager;\r\n+import javax.net.ssl.KeyManagerFactory;\r\n+\r\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\r\n+import org.bouncycastle.openssl.PEMDecryptorProvider;\r\n+import org.bouncycastle.openssl.PEMEncryptedKeyPair;\r\n+import org.bouncycastle.openssl.PEMKeyPair;\r\n+import org.bouncycastle.openssl.PEMParser;\r\n+import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;\r\n+import org.bouncycastle.openssl.jcajce.JcePEMDecryptorProviderBuilder;\r\n+\r\n+\r\n+final class SQLServerCertificateUtils {\r\n+\r\n+    static KeyManager[] getKeyManagerFromFile(String certPath, String keyPath,\r\n+            String keyPassword) throws IOException, GeneralSecurityException, SQLServerException {\r\n+        if (keyPath != null && keyPath.length() > 0) {\r\n+            return readPKCS8Certificate(certPath, keyPath, keyPassword);\r\n+        } else {\r\n+            return readPKCS12Certificate(certPath, keyPassword);\r\n+        }\r\n+    }\r\n+\r\n+    private static KeyManager[] readPKCS12Certificate(String certPath,\r\n+            String keyPassword) throws NoSuchAlgorithmException, CertificateException, FileNotFoundException, IOException, UnrecoverableKeyException, KeyStoreException {\r\n+        KeyStore keystore = KeyStore.getInstance(\"PKCS12\");\r\n+        keystore.load(new FileInputStream(certPath), keyPassword.toCharArray());\r\n+        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(\"SunX509\");\r\n+        keyManagerFactory.init(keystore, keyPassword.toCharArray());\r\n+        return keyManagerFactory.getKeyManagers();\r\n+    }\r\n+\r\n+    private static KeyManager[] readPKCS8Certificate(String certPath, String keyPath,\r\n+            String keyPassword) throws IOException, GeneralSecurityException, SQLServerException {\r\n+        Certificate clientCertificate = loadCertificate(certPath);\r\n+        PrivateKey privateKey = loadPrivateKey(keyPath, keyPassword);\r\n+\r\n+        KeyStore keyStore = KeyStore.getInstance(\"JKS\");\r\n+        keyStore.load(null, null);\r\n+        keyStore.setCertificateEntry(\"client-cert\", clientCertificate);\r\n+        keyStore.setKeyEntry(\"client-key\", privateKey, keyPassword.toCharArray(),\r\n+                new Certificate[] {clientCertificate});\r\n+\r\n+        KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\r\n+        kmf.init(keyStore, keyPassword.toCharArray());\r\n+        return kmf.getKeyManagers();\r\n+    }\r\n+\r\n+    private static Certificate loadCertificate(String certificatePem) throws IOException, GeneralSecurityException {\r\n+        CertificateFactory certificateFactory = CertificateFactory.getInstance(\"X509\");\r\n+        InputStream certstream = fileToStream(certificatePem);\r\n+        return certificateFactory.generateCertificate(certstream);\r\n+    }\r\n+\r\n+    // PKCS#8 format\r\n+    private static final String PEM_PRIVATE_START = \"-----BEGIN PRIVATE KEY-----\";\r\n+    private static final String PEM_PRIVATE_END = \"-----END PRIVATE KEY-----\";\r\n+    // PKCS#1 format\r\n+    private static final String PEM_RSA_PRIVATE_START = \"-----BEGIN RSA PRIVATE KEY-----\";\r\n+    // PVK format\r\n+    private static final long PVK_MAGIC = 0xB0B5F11EL;\r\n+    private static final byte[] RSA2_MAGIC = {82, 83, 65, 50};\r\n+    private static final String RC4_ALG = \"RC4\";\r\n+    private static final String RSA_ALG = \"RSA\";\r\n+\r\n+    private static PrivateKey loadPrivateKey(String privateKeyPemPath,\r\n+            String privateKeyPassword) throws GeneralSecurityException, IOException, SQLServerException {\r\n+        String privateKeyPem = getStringFromFile(privateKeyPemPath);\r\n+\r\n+        if (privateKeyPem.contains(PEM_PRIVATE_START)) { // PKCS#8 format\r\n+            return loadPrivateKeyFromPKCS8(privateKeyPem);\r\n+        } else if (privateKeyPem.contains(PEM_RSA_PRIVATE_START)) { // PKCS#1 format\r\n+            return loadPrivateKeyFromPKCS1(privateKeyPem, privateKeyPassword);\r\n+        } else {\r\n+            return loadPrivateKeyFromPVK(privateKeyPemPath, privateKeyPassword);\r\n+        }\r\n+    }\r\n+\r\n+    private static PrivateKey loadPrivateKeyFromPKCS8(\r\n+            String key) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException {\r\n+        key = key.replace(PEM_PRIVATE_START, \"\").replace(PEM_PRIVATE_END, \"\");\r\n+        key = key.replaceAll(\"\\\\s\", \"\");\r\n+        byte[] pkcs8EncodedKey = Base64.getDecoder().decode(key);\r\n+\r\n+        KeyFactory factory = KeyFactory.getInstance(RSA_ALG);\r\n+        return factory.generatePrivate(new PKCS8EncodedKeySpec(pkcs8EncodedKey));\r\n+    }\r\n+\r\n+    private static PrivateKey loadPrivateKeyFromPKCS1(String key,\r\n+            String keyPass) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException {\r\n+        try {\r\n+            Security.addProvider(new BouncyCastleProvider());\r\n+        } catch (SecurityException se) {\r\n+            // fall through, provider already loaded\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e521b6000f5fcbd2c31787274685503c26d42168"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyNzY1Mw==", "bodyText": "Hi @saurabh500, in my opinion this is the best way to handle loading this dependency. The empty catch is there in case the user has loaded BouncyCastle themselves, and this is more efficient and reliable then trying to determine whether they've loaded BC or not.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r398027653", "createdAt": "2020-03-25T17:14:01Z", "author": {"login": "rene-ye"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerCertificateUtils.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+\r\n+package com.microsoft.sqlserver.jdbc;\r\n+\r\n+import java.io.ByteArrayInputStream;\r\n+import java.io.DataInputStream;\r\n+import java.io.File;\r\n+import java.io.FileInputStream;\r\n+import java.io.FileNotFoundException;\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.io.StringReader;\r\n+import java.math.BigInteger;\r\n+import java.nio.ByteBuffer;\r\n+import java.nio.ByteOrder;\r\n+import java.nio.file.Files;\r\n+import java.nio.file.Paths;\r\n+import java.security.GeneralSecurityException;\r\n+import java.security.KeyFactory;\r\n+import java.security.KeyPair;\r\n+import java.security.KeyStore;\r\n+import java.security.KeyStoreException;\r\n+import java.security.MessageDigest;\r\n+import java.security.NoSuchAlgorithmException;\r\n+import java.security.PrivateKey;\r\n+import java.security.Security;\r\n+import java.security.UnrecoverableKeyException;\r\n+import java.security.cert.Certificate;\r\n+import java.security.cert.CertificateException;\r\n+import java.security.cert.CertificateFactory;\r\n+import java.security.spec.InvalidKeySpecException;\r\n+import java.security.spec.PKCS8EncodedKeySpec;\r\n+import java.security.spec.RSAPrivateCrtKeySpec;\r\n+import java.util.Arrays;\r\n+import java.util.Base64;\r\n+\r\n+import javax.crypto.Cipher;\r\n+import javax.crypto.SecretKey;\r\n+import javax.crypto.spec.SecretKeySpec;\r\n+import javax.net.ssl.KeyManager;\r\n+import javax.net.ssl.KeyManagerFactory;\r\n+\r\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\r\n+import org.bouncycastle.openssl.PEMDecryptorProvider;\r\n+import org.bouncycastle.openssl.PEMEncryptedKeyPair;\r\n+import org.bouncycastle.openssl.PEMKeyPair;\r\n+import org.bouncycastle.openssl.PEMParser;\r\n+import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;\r\n+import org.bouncycastle.openssl.jcajce.JcePEMDecryptorProviderBuilder;\r\n+\r\n+\r\n+final class SQLServerCertificateUtils {\r\n+\r\n+    static KeyManager[] getKeyManagerFromFile(String certPath, String keyPath,\r\n+            String keyPassword) throws IOException, GeneralSecurityException, SQLServerException {\r\n+        if (keyPath != null && keyPath.length() > 0) {\r\n+            return readPKCS8Certificate(certPath, keyPath, keyPassword);\r\n+        } else {\r\n+            return readPKCS12Certificate(certPath, keyPassword);\r\n+        }\r\n+    }\r\n+\r\n+    private static KeyManager[] readPKCS12Certificate(String certPath,\r\n+            String keyPassword) throws NoSuchAlgorithmException, CertificateException, FileNotFoundException, IOException, UnrecoverableKeyException, KeyStoreException {\r\n+        KeyStore keystore = KeyStore.getInstance(\"PKCS12\");\r\n+        keystore.load(new FileInputStream(certPath), keyPassword.toCharArray());\r\n+        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(\"SunX509\");\r\n+        keyManagerFactory.init(keystore, keyPassword.toCharArray());\r\n+        return keyManagerFactory.getKeyManagers();\r\n+    }\r\n+\r\n+    private static KeyManager[] readPKCS8Certificate(String certPath, String keyPath,\r\n+            String keyPassword) throws IOException, GeneralSecurityException, SQLServerException {\r\n+        Certificate clientCertificate = loadCertificate(certPath);\r\n+        PrivateKey privateKey = loadPrivateKey(keyPath, keyPassword);\r\n+\r\n+        KeyStore keyStore = KeyStore.getInstance(\"JKS\");\r\n+        keyStore.load(null, null);\r\n+        keyStore.setCertificateEntry(\"client-cert\", clientCertificate);\r\n+        keyStore.setKeyEntry(\"client-key\", privateKey, keyPassword.toCharArray(),\r\n+                new Certificate[] {clientCertificate});\r\n+\r\n+        KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\r\n+        kmf.init(keyStore, keyPassword.toCharArray());\r\n+        return kmf.getKeyManagers();\r\n+    }\r\n+\r\n+    private static Certificate loadCertificate(String certificatePem) throws IOException, GeneralSecurityException {\r\n+        CertificateFactory certificateFactory = CertificateFactory.getInstance(\"X509\");\r\n+        InputStream certstream = fileToStream(certificatePem);\r\n+        return certificateFactory.generateCertificate(certstream);\r\n+    }\r\n+\r\n+    // PKCS#8 format\r\n+    private static final String PEM_PRIVATE_START = \"-----BEGIN PRIVATE KEY-----\";\r\n+    private static final String PEM_PRIVATE_END = \"-----END PRIVATE KEY-----\";\r\n+    // PKCS#1 format\r\n+    private static final String PEM_RSA_PRIVATE_START = \"-----BEGIN RSA PRIVATE KEY-----\";\r\n+    // PVK format\r\n+    private static final long PVK_MAGIC = 0xB0B5F11EL;\r\n+    private static final byte[] RSA2_MAGIC = {82, 83, 65, 50};\r\n+    private static final String RC4_ALG = \"RC4\";\r\n+    private static final String RSA_ALG = \"RSA\";\r\n+\r\n+    private static PrivateKey loadPrivateKey(String privateKeyPemPath,\r\n+            String privateKeyPassword) throws GeneralSecurityException, IOException, SQLServerException {\r\n+        String privateKeyPem = getStringFromFile(privateKeyPemPath);\r\n+\r\n+        if (privateKeyPem.contains(PEM_PRIVATE_START)) { // PKCS#8 format\r\n+            return loadPrivateKeyFromPKCS8(privateKeyPem);\r\n+        } else if (privateKeyPem.contains(PEM_RSA_PRIVATE_START)) { // PKCS#1 format\r\n+            return loadPrivateKeyFromPKCS1(privateKeyPem, privateKeyPassword);\r\n+        } else {\r\n+            return loadPrivateKeyFromPVK(privateKeyPemPath, privateKeyPassword);\r\n+        }\r\n+    }\r\n+\r\n+    private static PrivateKey loadPrivateKeyFromPKCS8(\r\n+            String key) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException {\r\n+        key = key.replace(PEM_PRIVATE_START, \"\").replace(PEM_PRIVATE_END, \"\");\r\n+        key = key.replaceAll(\"\\\\s\", \"\");\r\n+        byte[] pkcs8EncodedKey = Base64.getDecoder().decode(key);\r\n+\r\n+        KeyFactory factory = KeyFactory.getInstance(RSA_ALG);\r\n+        return factory.generatePrivate(new PKCS8EncodedKeySpec(pkcs8EncodedKey));\r\n+    }\r\n+\r\n+    private static PrivateKey loadPrivateKeyFromPKCS1(String key,\r\n+            String keyPass) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException {\r\n+        try {\r\n+            Security.addProvider(new BouncyCastleProvider());\r\n+        } catch (SecurityException se) {\r\n+            // fall through, provider already loaded\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5MTM4OQ=="}, "originalCommit": {"oid": "e521b6000f5fcbd2c31787274685503c26d42168"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk4NzUxNw==", "bodyText": "SecurityException is thrown if a security manager exists and its method denies access to add a new provider. So there can be multiple reasons why this exception is thrown, not only when the provider exists.\nWhy is this approach better than just checking if provider is loaded using Security.getProvider(name)?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r398987517", "createdAt": "2020-03-27T01:35:45Z", "author": {"login": "ulvii"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerCertificateUtils.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+\r\n+package com.microsoft.sqlserver.jdbc;\r\n+\r\n+import java.io.ByteArrayInputStream;\r\n+import java.io.DataInputStream;\r\n+import java.io.File;\r\n+import java.io.FileInputStream;\r\n+import java.io.FileNotFoundException;\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.io.StringReader;\r\n+import java.math.BigInteger;\r\n+import java.nio.ByteBuffer;\r\n+import java.nio.ByteOrder;\r\n+import java.nio.file.Files;\r\n+import java.nio.file.Paths;\r\n+import java.security.GeneralSecurityException;\r\n+import java.security.KeyFactory;\r\n+import java.security.KeyPair;\r\n+import java.security.KeyStore;\r\n+import java.security.KeyStoreException;\r\n+import java.security.MessageDigest;\r\n+import java.security.NoSuchAlgorithmException;\r\n+import java.security.PrivateKey;\r\n+import java.security.Security;\r\n+import java.security.UnrecoverableKeyException;\r\n+import java.security.cert.Certificate;\r\n+import java.security.cert.CertificateException;\r\n+import java.security.cert.CertificateFactory;\r\n+import java.security.spec.InvalidKeySpecException;\r\n+import java.security.spec.PKCS8EncodedKeySpec;\r\n+import java.security.spec.RSAPrivateCrtKeySpec;\r\n+import java.util.Arrays;\r\n+import java.util.Base64;\r\n+\r\n+import javax.crypto.Cipher;\r\n+import javax.crypto.SecretKey;\r\n+import javax.crypto.spec.SecretKeySpec;\r\n+import javax.net.ssl.KeyManager;\r\n+import javax.net.ssl.KeyManagerFactory;\r\n+\r\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\r\n+import org.bouncycastle.openssl.PEMDecryptorProvider;\r\n+import org.bouncycastle.openssl.PEMEncryptedKeyPair;\r\n+import org.bouncycastle.openssl.PEMKeyPair;\r\n+import org.bouncycastle.openssl.PEMParser;\r\n+import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;\r\n+import org.bouncycastle.openssl.jcajce.JcePEMDecryptorProviderBuilder;\r\n+\r\n+\r\n+final class SQLServerCertificateUtils {\r\n+\r\n+    static KeyManager[] getKeyManagerFromFile(String certPath, String keyPath,\r\n+            String keyPassword) throws IOException, GeneralSecurityException, SQLServerException {\r\n+        if (keyPath != null && keyPath.length() > 0) {\r\n+            return readPKCS8Certificate(certPath, keyPath, keyPassword);\r\n+        } else {\r\n+            return readPKCS12Certificate(certPath, keyPassword);\r\n+        }\r\n+    }\r\n+\r\n+    private static KeyManager[] readPKCS12Certificate(String certPath,\r\n+            String keyPassword) throws NoSuchAlgorithmException, CertificateException, FileNotFoundException, IOException, UnrecoverableKeyException, KeyStoreException {\r\n+        KeyStore keystore = KeyStore.getInstance(\"PKCS12\");\r\n+        keystore.load(new FileInputStream(certPath), keyPassword.toCharArray());\r\n+        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(\"SunX509\");\r\n+        keyManagerFactory.init(keystore, keyPassword.toCharArray());\r\n+        return keyManagerFactory.getKeyManagers();\r\n+    }\r\n+\r\n+    private static KeyManager[] readPKCS8Certificate(String certPath, String keyPath,\r\n+            String keyPassword) throws IOException, GeneralSecurityException, SQLServerException {\r\n+        Certificate clientCertificate = loadCertificate(certPath);\r\n+        PrivateKey privateKey = loadPrivateKey(keyPath, keyPassword);\r\n+\r\n+        KeyStore keyStore = KeyStore.getInstance(\"JKS\");\r\n+        keyStore.load(null, null);\r\n+        keyStore.setCertificateEntry(\"client-cert\", clientCertificate);\r\n+        keyStore.setKeyEntry(\"client-key\", privateKey, keyPassword.toCharArray(),\r\n+                new Certificate[] {clientCertificate});\r\n+\r\n+        KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\r\n+        kmf.init(keyStore, keyPassword.toCharArray());\r\n+        return kmf.getKeyManagers();\r\n+    }\r\n+\r\n+    private static Certificate loadCertificate(String certificatePem) throws IOException, GeneralSecurityException {\r\n+        CertificateFactory certificateFactory = CertificateFactory.getInstance(\"X509\");\r\n+        InputStream certstream = fileToStream(certificatePem);\r\n+        return certificateFactory.generateCertificate(certstream);\r\n+    }\r\n+\r\n+    // PKCS#8 format\r\n+    private static final String PEM_PRIVATE_START = \"-----BEGIN PRIVATE KEY-----\";\r\n+    private static final String PEM_PRIVATE_END = \"-----END PRIVATE KEY-----\";\r\n+    // PKCS#1 format\r\n+    private static final String PEM_RSA_PRIVATE_START = \"-----BEGIN RSA PRIVATE KEY-----\";\r\n+    // PVK format\r\n+    private static final long PVK_MAGIC = 0xB0B5F11EL;\r\n+    private static final byte[] RSA2_MAGIC = {82, 83, 65, 50};\r\n+    private static final String RC4_ALG = \"RC4\";\r\n+    private static final String RSA_ALG = \"RSA\";\r\n+\r\n+    private static PrivateKey loadPrivateKey(String privateKeyPemPath,\r\n+            String privateKeyPassword) throws GeneralSecurityException, IOException, SQLServerException {\r\n+        String privateKeyPem = getStringFromFile(privateKeyPemPath);\r\n+\r\n+        if (privateKeyPem.contains(PEM_PRIVATE_START)) { // PKCS#8 format\r\n+            return loadPrivateKeyFromPKCS8(privateKeyPem);\r\n+        } else if (privateKeyPem.contains(PEM_RSA_PRIVATE_START)) { // PKCS#1 format\r\n+            return loadPrivateKeyFromPKCS1(privateKeyPem, privateKeyPassword);\r\n+        } else {\r\n+            return loadPrivateKeyFromPVK(privateKeyPemPath, privateKeyPassword);\r\n+        }\r\n+    }\r\n+\r\n+    private static PrivateKey loadPrivateKeyFromPKCS8(\r\n+            String key) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException {\r\n+        key = key.replace(PEM_PRIVATE_START, \"\").replace(PEM_PRIVATE_END, \"\");\r\n+        key = key.replaceAll(\"\\\\s\", \"\");\r\n+        byte[] pkcs8EncodedKey = Base64.getDecoder().decode(key);\r\n+\r\n+        KeyFactory factory = KeyFactory.getInstance(RSA_ALG);\r\n+        return factory.generatePrivate(new PKCS8EncodedKeySpec(pkcs8EncodedKey));\r\n+    }\r\n+\r\n+    private static PrivateKey loadPrivateKeyFromPKCS1(String key,\r\n+            String keyPass) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException {\r\n+        try {\r\n+            Security.addProvider(new BouncyCastleProvider());\r\n+        } catch (SecurityException se) {\r\n+            // fall through, provider already loaded\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5MTM4OQ=="}, "originalCommit": {"oid": "e521b6000f5fcbd2c31787274685503c26d42168"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzgzOTE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerCertificateUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDoyOToyOVrOF3EooQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDoyOToyOVrOF3EooQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5MTkzNw==", "bodyText": "Magic number 4. can you create a constant out of it?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r393291937", "createdAt": "2020-03-16T20:29:29Z", "author": {"login": "saurabh500"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerCertificateUtils.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+\r\n+package com.microsoft.sqlserver.jdbc;\r\n+\r\n+import java.io.ByteArrayInputStream;\r\n+import java.io.DataInputStream;\r\n+import java.io.File;\r\n+import java.io.FileInputStream;\r\n+import java.io.FileNotFoundException;\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.io.StringReader;\r\n+import java.math.BigInteger;\r\n+import java.nio.ByteBuffer;\r\n+import java.nio.ByteOrder;\r\n+import java.nio.file.Files;\r\n+import java.nio.file.Paths;\r\n+import java.security.GeneralSecurityException;\r\n+import java.security.KeyFactory;\r\n+import java.security.KeyPair;\r\n+import java.security.KeyStore;\r\n+import java.security.KeyStoreException;\r\n+import java.security.MessageDigest;\r\n+import java.security.NoSuchAlgorithmException;\r\n+import java.security.PrivateKey;\r\n+import java.security.Security;\r\n+import java.security.UnrecoverableKeyException;\r\n+import java.security.cert.Certificate;\r\n+import java.security.cert.CertificateException;\r\n+import java.security.cert.CertificateFactory;\r\n+import java.security.spec.InvalidKeySpecException;\r\n+import java.security.spec.PKCS8EncodedKeySpec;\r\n+import java.security.spec.RSAPrivateCrtKeySpec;\r\n+import java.util.Arrays;\r\n+import java.util.Base64;\r\n+\r\n+import javax.crypto.Cipher;\r\n+import javax.crypto.SecretKey;\r\n+import javax.crypto.spec.SecretKeySpec;\r\n+import javax.net.ssl.KeyManager;\r\n+import javax.net.ssl.KeyManagerFactory;\r\n+\r\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\r\n+import org.bouncycastle.openssl.PEMDecryptorProvider;\r\n+import org.bouncycastle.openssl.PEMEncryptedKeyPair;\r\n+import org.bouncycastle.openssl.PEMKeyPair;\r\n+import org.bouncycastle.openssl.PEMParser;\r\n+import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;\r\n+import org.bouncycastle.openssl.jcajce.JcePEMDecryptorProviderBuilder;\r\n+\r\n+\r\n+final class SQLServerCertificateUtils {\r\n+\r\n+    static KeyManager[] getKeyManagerFromFile(String certPath, String keyPath,\r\n+            String keyPassword) throws IOException, GeneralSecurityException, SQLServerException {\r\n+        if (keyPath != null && keyPath.length() > 0) {\r\n+            return readPKCS8Certificate(certPath, keyPath, keyPassword);\r\n+        } else {\r\n+            return readPKCS12Certificate(certPath, keyPassword);\r\n+        }\r\n+    }\r\n+\r\n+    private static KeyManager[] readPKCS12Certificate(String certPath,\r\n+            String keyPassword) throws NoSuchAlgorithmException, CertificateException, FileNotFoundException, IOException, UnrecoverableKeyException, KeyStoreException {\r\n+        KeyStore keystore = KeyStore.getInstance(\"PKCS12\");\r\n+        keystore.load(new FileInputStream(certPath), keyPassword.toCharArray());\r\n+        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(\"SunX509\");\r\n+        keyManagerFactory.init(keystore, keyPassword.toCharArray());\r\n+        return keyManagerFactory.getKeyManagers();\r\n+    }\r\n+\r\n+    private static KeyManager[] readPKCS8Certificate(String certPath, String keyPath,\r\n+            String keyPassword) throws IOException, GeneralSecurityException, SQLServerException {\r\n+        Certificate clientCertificate = loadCertificate(certPath);\r\n+        PrivateKey privateKey = loadPrivateKey(keyPath, keyPassword);\r\n+\r\n+        KeyStore keyStore = KeyStore.getInstance(\"JKS\");\r\n+        keyStore.load(null, null);\r\n+        keyStore.setCertificateEntry(\"client-cert\", clientCertificate);\r\n+        keyStore.setKeyEntry(\"client-key\", privateKey, keyPassword.toCharArray(),\r\n+                new Certificate[] {clientCertificate});\r\n+\r\n+        KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\r\n+        kmf.init(keyStore, keyPassword.toCharArray());\r\n+        return kmf.getKeyManagers();\r\n+    }\r\n+\r\n+    private static Certificate loadCertificate(String certificatePem) throws IOException, GeneralSecurityException {\r\n+        CertificateFactory certificateFactory = CertificateFactory.getInstance(\"X509\");\r\n+        InputStream certstream = fileToStream(certificatePem);\r\n+        return certificateFactory.generateCertificate(certstream);\r\n+    }\r\n+\r\n+    // PKCS#8 format\r\n+    private static final String PEM_PRIVATE_START = \"-----BEGIN PRIVATE KEY-----\";\r\n+    private static final String PEM_PRIVATE_END = \"-----END PRIVATE KEY-----\";\r\n+    // PKCS#1 format\r\n+    private static final String PEM_RSA_PRIVATE_START = \"-----BEGIN RSA PRIVATE KEY-----\";\r\n+    // PVK format\r\n+    private static final long PVK_MAGIC = 0xB0B5F11EL;\r\n+    private static final byte[] RSA2_MAGIC = {82, 83, 65, 50};\r\n+    private static final String RC4_ALG = \"RC4\";\r\n+    private static final String RSA_ALG = \"RSA\";\r\n+\r\n+    private static PrivateKey loadPrivateKey(String privateKeyPemPath,\r\n+            String privateKeyPassword) throws GeneralSecurityException, IOException, SQLServerException {\r\n+        String privateKeyPem = getStringFromFile(privateKeyPemPath);\r\n+\r\n+        if (privateKeyPem.contains(PEM_PRIVATE_START)) { // PKCS#8 format\r\n+            return loadPrivateKeyFromPKCS8(privateKeyPem);\r\n+        } else if (privateKeyPem.contains(PEM_RSA_PRIVATE_START)) { // PKCS#1 format\r\n+            return loadPrivateKeyFromPKCS1(privateKeyPem, privateKeyPassword);\r\n+        } else {\r\n+            return loadPrivateKeyFromPVK(privateKeyPemPath, privateKeyPassword);\r\n+        }\r\n+    }\r\n+\r\n+    private static PrivateKey loadPrivateKeyFromPKCS8(\r\n+            String key) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException {\r\n+        key = key.replace(PEM_PRIVATE_START, \"\").replace(PEM_PRIVATE_END, \"\");\r\n+        key = key.replaceAll(\"\\\\s\", \"\");\r\n+        byte[] pkcs8EncodedKey = Base64.getDecoder().decode(key);\r\n+\r\n+        KeyFactory factory = KeyFactory.getInstance(RSA_ALG);\r\n+        return factory.generatePrivate(new PKCS8EncodedKeySpec(pkcs8EncodedKey));\r\n+    }\r\n+\r\n+    private static PrivateKey loadPrivateKeyFromPKCS1(String key,\r\n+            String keyPass) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException {\r\n+        try {\r\n+            Security.addProvider(new BouncyCastleProvider());\r\n+        } catch (SecurityException se) {\r\n+            // fall through, provider already loaded\r\n+        }\r\n+        PEMParser pemParser = null;\r\n+        try {\r\n+            pemParser = new PEMParser(new StringReader(key));\r\n+            Object object = pemParser.readObject();\r\n+            JcaPEMKeyConverter converter = new JcaPEMKeyConverter().setProvider(\"BC\");\r\n+            KeyPair kp;\r\n+            if (object instanceof PEMEncryptedKeyPair && keyPass != null) {\r\n+                PEMDecryptorProvider decProv = new JcePEMDecryptorProviderBuilder().build(keyPass.toCharArray());\r\n+                kp = converter.getKeyPair(((PEMEncryptedKeyPair) object).decryptKeyPair(decProv));\r\n+            } else {\r\n+                kp = converter.getKeyPair((PEMKeyPair) object);\r\n+            }\r\n+            return kp.getPrivate();\r\n+        } finally {\r\n+            pemParser.close();\r\n+        }\r\n+    }\r\n+\r\n+    private static PrivateKey loadPrivateKeyFromPVK(String keyPath,\r\n+            String keyPass) throws IOException, GeneralSecurityException, SQLServerException {\r\n+        File f = new File(keyPath);\r\n+        ByteBuffer buffer = ByteBuffer.allocate((int) f.length());\r\n+        try (FileInputStream in = new FileInputStream(f)) {\r\n+            in.getChannel().read(buffer);\r\n+            buffer.order(ByteOrder.LITTLE_ENDIAN).rewind();\r\n+\r\n+            long magic = buffer.getInt() & 0xFFFFFFFFL;\r\n+            if (PVK_MAGIC != magic) {\r\n+                SQLServerException.makeFromDriverError(null, magic, SQLServerResource.getResource(\"R_pvkHeaderError\"),\r\n+                        \"\", false);\r\n+            }\r\n+\r\n+            buffer.position(buffer.position() + 8); // skip reserved and keytype\r\n+            boolean encrypted = buffer.getInt() != 0;\r\n+            int saltLength = buffer.getInt();\r\n+            int keyLength = buffer.getInt();\r\n+            byte[] salt = new byte[saltLength];\r\n+            buffer.get(salt);\r\n+\r\n+            buffer.position(buffer.position() + 8); // skip btype(1b), version(1b), reserved(2b), and keyalg(4b)\r\n+\r\n+            byte[] key = new byte[keyLength - 8];\r\n+            buffer.get(key);\r\n+\r\n+            if (encrypted) {\r\n+                MessageDigest digest = MessageDigest.getInstance(\"SHA1\");\r\n+                digest.update(salt);\r\n+                if (keyPass != null) {\r\n+                    digest.update(keyPass.getBytes());\r\n+                }\r\n+                byte[] hash = digest.digest();\r\n+                key = getSecretKeyFromHash(key, hash);\r\n+            }\r\n+\r\n+            ByteBuffer keyBuff = ByteBuffer.wrap(key).order(ByteOrder.LITTLE_ENDIAN);\r\n+            keyBuff.position(RSA2_MAGIC.length); // skip the header\r\n+\r\n+            int byteLength = keyBuff.getInt() / 8;\r\n+            BigInteger publicExponent = BigInteger.valueOf(keyBuff.getInt());\r\n+            BigInteger modulus = getBigInteger(keyBuff, byteLength);\r\n+            BigInteger prime1 = getBigInteger(keyBuff, byteLength / 2);\r\n+            BigInteger prime2 = getBigInteger(keyBuff, byteLength / 2);\r\n+            BigInteger primeExponent1 = getBigInteger(keyBuff, byteLength / 2);\r\n+            BigInteger primeExponent2 = getBigInteger(keyBuff, byteLength / 2);\r\n+            BigInteger crtCoefficient = getBigInteger(keyBuff, byteLength / 2);\r\n+            BigInteger privateExponent = getBigInteger(keyBuff, byteLength);\r\n+\r\n+            RSAPrivateCrtKeySpec spec = new RSAPrivateCrtKeySpec(modulus, publicExponent, privateExponent, prime1,\r\n+                    prime2, primeExponent1, primeExponent2, crtCoefficient);\r\n+            KeyFactory factory = KeyFactory.getInstance(RSA_ALG);\r\n+            return factory.generatePrivate(spec);\r\n+        }\r\n+    }\r\n+\r\n+    private static boolean startsWithMagic(byte[] b) {\r\n+        for (int i = 0; i < 4; i++) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e521b6000f5fcbd2c31787274685503c26d42168"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTExMDAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzozMDowNFrOF7Oxhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNjozNzo1NFrOF7kCcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY1MjM1OA==", "bodyText": "are these tabs?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r397652358", "createdAt": "2020-03-25T07:30:04Z", "author": {"login": "lilgreenbird"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java", "diffHunk": "@@ -1774,13 +1782,31 @@ else if (con.getTrustManagerClass() != null) {\n             if (logger.isLoggable(Level.FINEST))\n                 logger.finest(toString() + \" Getting TLS or better SSL context\");\n \n-            sslContext = SSLContext.getInstance(sslProtocol);\n-            sslContextProvider = sslContext.getProvider();\n+            if (null != clientCertificate) {\n+                try {\n+                    KeyManager[] km = SQLServerCertificateUtils.getKeyManagerFromFile(clientCertificate, clientKey,\n+                            clientKeyPassword);\n+                    \n+                    sslContext = SSLContext.getInstance(sslProtocol);\n+                    sslContextProvider = sslContext.getProvider();\n \n-            if (logger.isLoggable(Level.FINEST))\n-                logger.finest(toString() + \" Initializing SSL context\");\n+                    if (logger.isLoggable(Level.FINEST))\n+                        logger.finest(toString() + \" Initializing SSL context\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "887fbdfb8cc7e787ddd119d88f3732a1fce7667a"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAwMDc1Mg==", "bodyText": "Will fix.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r398000752", "createdAt": "2020-03-25T16:37:54Z", "author": {"login": "peterbae"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java", "diffHunk": "@@ -1774,13 +1782,31 @@ else if (con.getTrustManagerClass() != null) {\n             if (logger.isLoggable(Level.FINEST))\n                 logger.finest(toString() + \" Getting TLS or better SSL context\");\n \n-            sslContext = SSLContext.getInstance(sslProtocol);\n-            sslContextProvider = sslContext.getProvider();\n+            if (null != clientCertificate) {\n+                try {\n+                    KeyManager[] km = SQLServerCertificateUtils.getKeyManagerFromFile(clientCertificate, clientKey,\n+                            clientKeyPassword);\n+                    \n+                    sslContext = SSLContext.getInstance(sslProtocol);\n+                    sslContextProvider = sslContext.getProvider();\n \n-            if (logger.isLoggable(Level.FINEST))\n-                logger.finest(toString() + \" Initializing SSL context\");\n+                    if (logger.isLoggable(Level.FINEST))\n+                        logger.finest(toString() + \" Initializing SSL context\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY1MjM1OA=="}, "originalCommit": {"oid": "887fbdfb8cc7e787ddd119d88f3732a1fce7667a"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTExNjQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzozMjo0NlrOF7O1Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNjozODowOVrOF7kDHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY1MzM0Mg==", "bodyText": "should we have this? we don't usually have getters for passwords", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r397653342", "createdAt": "2020-03-25T07:32:46Z", "author": {"login": "lilgreenbird"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java", "diffHunk": "@@ -903,5 +903,50 @@\n      *        Enclave attestation protocol.\n      */\n     void setEnclaveAttestationProtocol(String protocol);\n+    \n+    /**\n+     * Returns client certificate path for client certificate authentication.\n+     * \n+     * @return Client certificate path.\n+     */\n+    String getClientCertificate();\n+\n+    /**\n+     * Sets client certificate path for client certificate authentication.\n+     * \n+     * @param certPath\n+     *        Client certificate path.\n+     */\n+    void setClientCertificate(String certPath);\n+    \n+    /**\n+     * Returns Private key file path for client certificate authentication.\n+     * \n+     * @return Private key file path.\n+     */\n+    String getClientKey();\n+\n+    /**\n+     * Sets Private key file path for client certificate authentication.\n+     * \n+     * @param keyPath\n+     *        Private key file path.\n+     */\n+    void setClientKey(String keyPath);\n+    \n+    /**\n+     * Returns the password to be used for Private key provided by the user for client certificate authentication.\n+     * \n+     * @return Private key password.\n+     */\n+    String getClientKeyPassword();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "887fbdfb8cc7e787ddd119d88f3732a1fce7667a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAwMDkyNg==", "bodyText": "Good point, I'll remove this one.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r398000926", "createdAt": "2020-03-25T16:38:09Z", "author": {"login": "peterbae"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java", "diffHunk": "@@ -903,5 +903,50 @@\n      *        Enclave attestation protocol.\n      */\n     void setEnclaveAttestationProtocol(String protocol);\n+    \n+    /**\n+     * Returns client certificate path for client certificate authentication.\n+     * \n+     * @return Client certificate path.\n+     */\n+    String getClientCertificate();\n+\n+    /**\n+     * Sets client certificate path for client certificate authentication.\n+     * \n+     * @param certPath\n+     *        Client certificate path.\n+     */\n+    void setClientCertificate(String certPath);\n+    \n+    /**\n+     * Returns Private key file path for client certificate authentication.\n+     * \n+     * @return Private key file path.\n+     */\n+    String getClientKey();\n+\n+    /**\n+     * Sets Private key file path for client certificate authentication.\n+     * \n+     * @param keyPath\n+     *        Private key file path.\n+     */\n+    void setClientKey(String keyPath);\n+    \n+    /**\n+     * Returns the password to be used for Private key provided by the user for client certificate authentication.\n+     * \n+     * @return Private key password.\n+     */\n+    String getClientKeyPassword();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY1MzM0Mg=="}, "originalCommit": {"oid": "887fbdfb8cc7e787ddd119d88f3732a1fce7667a"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTEzODI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerCertificateUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzo0MTozMFrOF7PC1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzo0MTozMFrOF7PC1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY1Njc4OA==", "bodyText": "are these hardcoded aliases defined in the specs? can we define them somewhere else?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r397656788", "createdAt": "2020-03-25T07:41:30Z", "author": {"login": "lilgreenbird"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerCertificateUtils.java", "diffHunk": "@@ -0,0 +1,274 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+\r\n+package com.microsoft.sqlserver.jdbc;\r\n+\r\n+import java.io.ByteArrayInputStream;\r\n+import java.io.DataInputStream;\r\n+import java.io.File;\r\n+import java.io.FileInputStream;\r\n+import java.io.FileNotFoundException;\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.io.StringReader;\r\n+import java.math.BigInteger;\r\n+import java.nio.ByteBuffer;\r\n+import java.nio.ByteOrder;\r\n+import java.nio.file.Files;\r\n+import java.nio.file.Paths;\r\n+import java.security.GeneralSecurityException;\r\n+import java.security.KeyFactory;\r\n+import java.security.KeyPair;\r\n+import java.security.KeyStore;\r\n+import java.security.KeyStoreException;\r\n+import java.security.MessageDigest;\r\n+import java.security.NoSuchAlgorithmException;\r\n+import java.security.PrivateKey;\r\n+import java.security.UnrecoverableKeyException;\r\n+import java.security.cert.Certificate;\r\n+import java.security.cert.CertificateException;\r\n+import java.security.cert.CertificateFactory;\r\n+import java.security.spec.InvalidKeySpecException;\r\n+import java.security.spec.PKCS8EncodedKeySpec;\r\n+import java.security.spec.RSAPrivateCrtKeySpec;\r\n+import java.util.Arrays;\r\n+import java.util.Base64;\r\n+\r\n+import javax.crypto.Cipher;\r\n+import javax.crypto.SecretKey;\r\n+import javax.crypto.spec.SecretKeySpec;\r\n+import javax.net.ssl.KeyManager;\r\n+import javax.net.ssl.KeyManagerFactory;\r\n+\r\n+import org.bouncycastle.openssl.PEMDecryptorProvider;\r\n+import org.bouncycastle.openssl.PEMEncryptedKeyPair;\r\n+import org.bouncycastle.openssl.PEMKeyPair;\r\n+import org.bouncycastle.openssl.PEMParser;\r\n+import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;\r\n+import org.bouncycastle.openssl.jcajce.JcePEMDecryptorProviderBuilder;\r\n+\r\n+\r\n+final class SQLServerCertificateUtils {\r\n+\r\n+    static KeyManager[] getKeyManagerFromFile(String certPath, String keyPath,\r\n+            String keyPassword) throws IOException, GeneralSecurityException, SQLServerException {\r\n+        if (keyPath != null && keyPath.length() > 0) {\r\n+            return readPKCS8Certificate(certPath, keyPath, keyPassword);\r\n+        } else {\r\n+            return readPKCS12Certificate(certPath, keyPassword);\r\n+        }\r\n+    }\r\n+\r\n+    private static KeyManager[] readPKCS12Certificate(String certPath,\r\n+            String keyPassword) throws NoSuchAlgorithmException, CertificateException, FileNotFoundException, IOException, UnrecoverableKeyException, KeyStoreException {\r\n+        KeyStore keystore = KeyStore.getInstance(\"PKCS12\");\r\n+        keystore.load(new FileInputStream(certPath), keyPassword.toCharArray());\r\n+        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(\"SunX509\");\r\n+        keyManagerFactory.init(keystore, keyPassword.toCharArray());\r\n+        return keyManagerFactory.getKeyManagers();\r\n+    }\r\n+\r\n+    private static KeyManager[] readPKCS8Certificate(String certPath, String keyPath,\r\n+            String keyPassword) throws IOException, GeneralSecurityException, SQLServerException {\r\n+        Certificate clientCertificate = loadCertificate(certPath);\r\n+        PrivateKey privateKey = loadPrivateKey(keyPath, keyPassword);\r\n+\r\n+        KeyStore keyStore = KeyStore.getInstance(\"JKS\");\r\n+        keyStore.load(null, null);\r\n+        keyStore.setCertificateEntry(\"client-cert\", clientCertificate);\r\n+        keyStore.setKeyEntry(\"client-key\", privateKey, keyPassword.toCharArray(),\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "887fbdfb8cc7e787ddd119d88f3732a1fce7667a"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTE0OTc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerCertificateUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzo0NjowOFrOF7PKBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzo0NjowOFrOF7PKBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY1ODYyOQ==", "bodyText": "null !=", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r397658629", "createdAt": "2020-03-25T07:46:08Z", "author": {"login": "lilgreenbird"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerCertificateUtils.java", "diffHunk": "@@ -0,0 +1,274 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+\r\n+package com.microsoft.sqlserver.jdbc;\r\n+\r\n+import java.io.ByteArrayInputStream;\r\n+import java.io.DataInputStream;\r\n+import java.io.File;\r\n+import java.io.FileInputStream;\r\n+import java.io.FileNotFoundException;\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.io.StringReader;\r\n+import java.math.BigInteger;\r\n+import java.nio.ByteBuffer;\r\n+import java.nio.ByteOrder;\r\n+import java.nio.file.Files;\r\n+import java.nio.file.Paths;\r\n+import java.security.GeneralSecurityException;\r\n+import java.security.KeyFactory;\r\n+import java.security.KeyPair;\r\n+import java.security.KeyStore;\r\n+import java.security.KeyStoreException;\r\n+import java.security.MessageDigest;\r\n+import java.security.NoSuchAlgorithmException;\r\n+import java.security.PrivateKey;\r\n+import java.security.UnrecoverableKeyException;\r\n+import java.security.cert.Certificate;\r\n+import java.security.cert.CertificateException;\r\n+import java.security.cert.CertificateFactory;\r\n+import java.security.spec.InvalidKeySpecException;\r\n+import java.security.spec.PKCS8EncodedKeySpec;\r\n+import java.security.spec.RSAPrivateCrtKeySpec;\r\n+import java.util.Arrays;\r\n+import java.util.Base64;\r\n+\r\n+import javax.crypto.Cipher;\r\n+import javax.crypto.SecretKey;\r\n+import javax.crypto.spec.SecretKeySpec;\r\n+import javax.net.ssl.KeyManager;\r\n+import javax.net.ssl.KeyManagerFactory;\r\n+\r\n+import org.bouncycastle.openssl.PEMDecryptorProvider;\r\n+import org.bouncycastle.openssl.PEMEncryptedKeyPair;\r\n+import org.bouncycastle.openssl.PEMKeyPair;\r\n+import org.bouncycastle.openssl.PEMParser;\r\n+import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;\r\n+import org.bouncycastle.openssl.jcajce.JcePEMDecryptorProviderBuilder;\r\n+\r\n+\r\n+final class SQLServerCertificateUtils {\r\n+\r\n+    static KeyManager[] getKeyManagerFromFile(String certPath, String keyPath,\r\n+            String keyPassword) throws IOException, GeneralSecurityException, SQLServerException {\r\n+        if (keyPath != null && keyPath.length() > 0) {\r\n+            return readPKCS8Certificate(certPath, keyPath, keyPassword);\r\n+        } else {\r\n+            return readPKCS12Certificate(certPath, keyPassword);\r\n+        }\r\n+    }\r\n+\r\n+    private static KeyManager[] readPKCS12Certificate(String certPath,\r\n+            String keyPassword) throws NoSuchAlgorithmException, CertificateException, FileNotFoundException, IOException, UnrecoverableKeyException, KeyStoreException {\r\n+        KeyStore keystore = KeyStore.getInstance(\"PKCS12\");\r\n+        keystore.load(new FileInputStream(certPath), keyPassword.toCharArray());\r\n+        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(\"SunX509\");\r\n+        keyManagerFactory.init(keystore, keyPassword.toCharArray());\r\n+        return keyManagerFactory.getKeyManagers();\r\n+    }\r\n+\r\n+    private static KeyManager[] readPKCS8Certificate(String certPath, String keyPath,\r\n+            String keyPassword) throws IOException, GeneralSecurityException, SQLServerException {\r\n+        Certificate clientCertificate = loadCertificate(certPath);\r\n+        PrivateKey privateKey = loadPrivateKey(keyPath, keyPassword);\r\n+\r\n+        KeyStore keyStore = KeyStore.getInstance(\"JKS\");\r\n+        keyStore.load(null, null);\r\n+        keyStore.setCertificateEntry(\"client-cert\", clientCertificate);\r\n+        keyStore.setKeyEntry(\"client-key\", privateKey, keyPassword.toCharArray(),\r\n+                new Certificate[] {clientCertificate});\r\n+\r\n+        KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\r\n+        kmf.init(keyStore, keyPassword.toCharArray());\r\n+        return kmf.getKeyManagers();\r\n+    }\r\n+\r\n+    private static Certificate loadCertificate(String certificatePem) throws IOException, GeneralSecurityException {\r\n+        CertificateFactory certificateFactory = CertificateFactory.getInstance(\"X509\");\r\n+        InputStream certstream = fileToStream(certificatePem);\r\n+        return certificateFactory.generateCertificate(certstream);\r\n+    }\r\n+\r\n+    // PKCS#8 format\r\n+    private static final String PEM_PRIVATE_START = \"-----BEGIN PRIVATE KEY-----\";\r\n+    private static final String PEM_PRIVATE_END = \"-----END PRIVATE KEY-----\";\r\n+    // PKCS#1 format\r\n+    private static final String PEM_RSA_PRIVATE_START = \"-----BEGIN RSA PRIVATE KEY-----\";\r\n+    // PVK format\r\n+    private static final long PVK_MAGIC = 0xB0B5F11EL;\r\n+    private static final byte[] RSA2_MAGIC = {82, 83, 65, 50};\r\n+    private static final String RC4_ALG = \"RC4\";\r\n+    private static final String RSA_ALG = \"RSA\";\r\n+\r\n+    private static PrivateKey loadPrivateKey(String privateKeyPemPath,\r\n+            String privateKeyPassword) throws GeneralSecurityException, IOException, SQLServerException {\r\n+        String privateKeyPem = getStringFromFile(privateKeyPemPath);\r\n+\r\n+        if (privateKeyPem.contains(PEM_PRIVATE_START)) { // PKCS#8 format\r\n+            return loadPrivateKeyFromPKCS8(privateKeyPem);\r\n+        } else if (privateKeyPem.contains(PEM_RSA_PRIVATE_START)) { // PKCS#1 format\r\n+            return loadPrivateKeyFromPKCS1(privateKeyPem, privateKeyPassword);\r\n+        } else {\r\n+            return loadPrivateKeyFromPVK(privateKeyPemPath, privateKeyPassword);\r\n+        }\r\n+    }\r\n+\r\n+    private static PrivateKey loadPrivateKeyFromPKCS8(\r\n+            String key) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException {\r\n+        key = key.replace(PEM_PRIVATE_START, \"\").replace(PEM_PRIVATE_END, \"\");\r\n+        key = key.replaceAll(\"\\\\s\", \"\");\r\n+        byte[] pkcs8EncodedKey = Base64.getDecoder().decode(key);\r\n+\r\n+        KeyFactory factory = KeyFactory.getInstance(RSA_ALG);\r\n+        return factory.generatePrivate(new PKCS8EncodedKeySpec(pkcs8EncodedKey));\r\n+    }\r\n+\r\n+    private static PrivateKey loadPrivateKeyFromPKCS1(String key,\r\n+            String keyPass) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException {\r\n+        try {\r\n+            SQLServerBouncyCastleLoader.loadBouncyCastle();\r\n+        } catch (SecurityException se) {\r\n+            // fall through, provider already loaded\r\n+        }\r\n+        PEMParser pemParser = null;\r\n+        try {\r\n+            pemParser = new PEMParser(new StringReader(key));\r\n+            Object object = pemParser.readObject();\r\n+            JcaPEMKeyConverter converter = new JcaPEMKeyConverter().setProvider(\"BC\");\r\n+            KeyPair kp;\r\n+            if (object instanceof PEMEncryptedKeyPair && keyPass != null) {\r\n+                PEMDecryptorProvider decProv = new JcePEMDecryptorProviderBuilder().build(keyPass.toCharArray());\r\n+                kp = converter.getKeyPair(((PEMEncryptedKeyPair) object).decryptKeyPair(decProv));\r\n+            } else {\r\n+                kp = converter.getKeyPair((PEMKeyPair) object);\r\n+            }\r\n+            return kp.getPrivate();\r\n+        } finally {\r\n+            pemParser.close();\r\n+        }\r\n+    }\r\n+\r\n+    private static PrivateKey loadPrivateKeyFromPVK(String keyPath,\r\n+            String keyPass) throws IOException, GeneralSecurityException, SQLServerException {\r\n+        File f = new File(keyPath);\r\n+        ByteBuffer buffer = ByteBuffer.allocate((int) f.length());\r\n+        try (FileInputStream in = new FileInputStream(f)) {\r\n+            in.getChannel().read(buffer);\r\n+            buffer.order(ByteOrder.LITTLE_ENDIAN).rewind();\r\n+\r\n+            long magic = buffer.getInt() & 0xFFFFFFFFL;\r\n+            if (PVK_MAGIC != magic) {\r\n+                SQLServerException.makeFromDriverError(null, magic, SQLServerResource.getResource(\"R_pvkHeaderError\"),\r\n+                        \"\", false);\r\n+            }\r\n+\r\n+            buffer.position(buffer.position() + 8); // skip reserved and keytype\r\n+            boolean encrypted = buffer.getInt() != 0;\r\n+            int saltLength = buffer.getInt();\r\n+            int keyLength = buffer.getInt();\r\n+            byte[] salt = new byte[saltLength];\r\n+            buffer.get(salt);\r\n+\r\n+            buffer.position(buffer.position() + 8); // skip btype(1b), version(1b), reserved(2b), and keyalg(4b)\r\n+\r\n+            byte[] key = new byte[keyLength - 8];\r\n+            buffer.get(key);\r\n+\r\n+            if (encrypted) {\r\n+                MessageDigest digest = MessageDigest.getInstance(\"SHA1\");\r\n+                digest.update(salt);\r\n+                if (keyPass != null) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "887fbdfb8cc7e787ddd119d88f3732a1fce7667a"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTE1NTYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzo0ODoxNFrOF7PNgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzo0ODoxNFrOF7PNgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY1OTUyMA==", "bodyText": "null ==\nmultiple occurences", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r397659520", "createdAt": "2020-03-25T07:48:14Z", "author": {"login": "lilgreenbird"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java", "diffHunk": "@@ -4960,7 +4985,7 @@ final boolean complete(LogonCommand logonCommand, TDSReader tdsReader) throws SQ\n                 + 4; // AE is always on;\n \n         // only add lengths of password and username if not using SSPI or requesting federated authentication info\n-        if (!integratedSecurity && !(federatedAuthenticationInfoRequested || federatedAuthenticationRequested)) {\n+        if (!integratedSecurity && !(federatedAuthenticationInfoRequested || federatedAuthenticationRequested) && clientCertificate == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "887fbdfb8cc7e787ddd119d88f3732a1fce7667a"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTE2NDkwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/microsoft/sqlserver/clientcertauth/ClientCertificateAuthenticationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzo1MTozNlrOF7PS-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzoxMjo0NVrOF7ln8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY2MDkyMA==", "bodyText": "no test for datasource getters and setters\nI think you also need to update AbstractTest.updateDataSource()", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r397660920", "createdAt": "2020-03-25T07:51:36Z", "author": {"login": "lilgreenbird"}, "path": "src/test/java/com/microsoft/sqlserver/clientcertauth/ClientCertificateAuthenticationTest.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.clientcertauth;\r\n+\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.DriverManager;\r\n+import java.sql.ResultSet;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.sqlserver.jdbc.SQLServerException;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+\r\n+\r\n+/**\r\n+ * Tests client certificate authentication feature\r\n+ * The feature is only supported against SQL Server Linux CU2 or higher.\r\n+ * \r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.xSQLv12)\r\n+@Tag(Constants.xSQLv14)\r\n+@Tag(Constants.xAzureSQLDW)\r\n+@Tag(Constants.xAzureSQLDB)\r\n+@Tag(Constants.clientCertAuth)\r\n+public class ClientCertificateAuthenticationTest extends AbstractTest {\r\n+\r\n+    @Test\r\n+    public void pkcs1Test() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-pkcs1.key;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pkcs1EncryptedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-encrypted-pkcs1.key;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void pkcs8Test() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-pkcs8.key;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pkcs8EncryptedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-encrypted-pkcs8.key;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void pfxTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pfx;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void pfxEncrytedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \"-encrypted.pfx;\" + \"clientKeyPassword=\"\r\n+                + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pvkTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".cer;\" + \"clientKey=\"\r\n+                + clientKey + \".pvk;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void invalidCert() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=invalid_path;\" + \"clientKeyPassword=\" + clientKeyPassword\r\n+                + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr)) {\r\n+        } catch (SQLServerException e) {\r\n+            assertTrue(e.getMessage().contains(TestResource.getResource(\"R_invalidPath\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void invalidCertPassword() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pfx;\"\r\n+                + \"clientKeyPassword=invalid_password;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr)) {\r\n+        } catch (SQLServerException e) {\r\n+            assertTrue(e.getMessage().contains(TestResource.getResource(\"R_keystorePassword\")));\r\n+        }\r\n+    }\r\n+}\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "887fbdfb8cc7e787ddd119d88f3732a1fce7667a"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyNjczNw==", "bodyText": "Thanks. I added a test for data source.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r398026737", "createdAt": "2020-03-25T17:12:45Z", "author": {"login": "peterbae"}, "path": "src/test/java/com/microsoft/sqlserver/clientcertauth/ClientCertificateAuthenticationTest.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.clientcertauth;\r\n+\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.DriverManager;\r\n+import java.sql.ResultSet;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.sqlserver.jdbc.SQLServerException;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+\r\n+\r\n+/**\r\n+ * Tests client certificate authentication feature\r\n+ * The feature is only supported against SQL Server Linux CU2 or higher.\r\n+ * \r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.xSQLv12)\r\n+@Tag(Constants.xSQLv14)\r\n+@Tag(Constants.xAzureSQLDW)\r\n+@Tag(Constants.xAzureSQLDB)\r\n+@Tag(Constants.clientCertAuth)\r\n+public class ClientCertificateAuthenticationTest extends AbstractTest {\r\n+\r\n+    @Test\r\n+    public void pkcs1Test() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-pkcs1.key;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pkcs1EncryptedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-encrypted-pkcs1.key;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void pkcs8Test() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-pkcs8.key;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pkcs8EncryptedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-encrypted-pkcs8.key;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void pfxTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pfx;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void pfxEncrytedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \"-encrypted.pfx;\" + \"clientKeyPassword=\"\r\n+                + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pvkTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".cer;\" + \"clientKey=\"\r\n+                + clientKey + \".pvk;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void invalidCert() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=invalid_path;\" + \"clientKeyPassword=\" + clientKeyPassword\r\n+                + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr)) {\r\n+        } catch (SQLServerException e) {\r\n+            assertTrue(e.getMessage().contains(TestResource.getResource(\"R_invalidPath\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void invalidCertPassword() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pfx;\"\r\n+                + \"clientKeyPassword=invalid_password;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr)) {\r\n+        } catch (SQLServerException e) {\r\n+            assertTrue(e.getMessage().contains(TestResource.getResource(\"R_keystorePassword\")));\r\n+        }\r\n+    }\r\n+}\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY2MDkyMA=="}, "originalCommit": {"oid": "887fbdfb8cc7e787ddd119d88f3732a1fce7667a"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTE3MTA1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/microsoft/sqlserver/clientcertauth/ClientCertificateAuthenticationTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzo1Mzo0OFrOF7PWrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMTo1NTowNFrOF8gkfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY2MTg3MQ==", "bodyText": "? why are we only checking if it contains the string Microsoft?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r397661871", "createdAt": "2020-03-25T07:53:48Z", "author": {"login": "lilgreenbird"}, "path": "src/test/java/com/microsoft/sqlserver/clientcertauth/ClientCertificateAuthenticationTest.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.clientcertauth;\r\n+\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.DriverManager;\r\n+import java.sql.ResultSet;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.sqlserver.jdbc.SQLServerException;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+\r\n+\r\n+/**\r\n+ * Tests client certificate authentication feature\r\n+ * The feature is only supported against SQL Server Linux CU2 or higher.\r\n+ * \r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.xSQLv12)\r\n+@Tag(Constants.xSQLv14)\r\n+@Tag(Constants.xAzureSQLDW)\r\n+@Tag(Constants.xAzureSQLDB)\r\n+@Tag(Constants.clientCertAuth)\r\n+public class ClientCertificateAuthenticationTest extends AbstractTest {\r\n+\r\n+    @Test\r\n+    public void pkcs1Test() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-pkcs1.key;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "887fbdfb8cc7e787ddd119d88f3732a1fce7667a"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAwMzI1OQ==", "bodyText": "Well...it can check any part of the string that @@Version will return. I just decided to use the keyword microsoft.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r398003259", "createdAt": "2020-03-25T16:41:16Z", "author": {"login": "peterbae"}, "path": "src/test/java/com/microsoft/sqlserver/clientcertauth/ClientCertificateAuthenticationTest.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.clientcertauth;\r\n+\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.DriverManager;\r\n+import java.sql.ResultSet;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.sqlserver.jdbc.SQLServerException;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+\r\n+\r\n+/**\r\n+ * Tests client certificate authentication feature\r\n+ * The feature is only supported against SQL Server Linux CU2 or higher.\r\n+ * \r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.xSQLv12)\r\n+@Tag(Constants.xSQLv14)\r\n+@Tag(Constants.xAzureSQLDW)\r\n+@Tag(Constants.xAzureSQLDB)\r\n+@Tag(Constants.clientCertAuth)\r\n+public class ClientCertificateAuthenticationTest extends AbstractTest {\r\n+\r\n+    @Test\r\n+    public void pkcs1Test() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-pkcs1.key;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY2MTg3MQ=="}, "originalCommit": {"oid": "887fbdfb8cc7e787ddd119d88f3732a1fce7667a"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk5MjUxMQ==", "bodyText": "I would suggest to use the existing conn.isValid(timeout); API.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r398992511", "createdAt": "2020-03-27T01:55:04Z", "author": {"login": "ulvii"}, "path": "src/test/java/com/microsoft/sqlserver/clientcertauth/ClientCertificateAuthenticationTest.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.clientcertauth;\r\n+\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.DriverManager;\r\n+import java.sql.ResultSet;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.sqlserver.jdbc.SQLServerException;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+\r\n+\r\n+/**\r\n+ * Tests client certificate authentication feature\r\n+ * The feature is only supported against SQL Server Linux CU2 or higher.\r\n+ * \r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.xSQLv12)\r\n+@Tag(Constants.xSQLv14)\r\n+@Tag(Constants.xAzureSQLDW)\r\n+@Tag(Constants.xAzureSQLDB)\r\n+@Tag(Constants.clientCertAuth)\r\n+public class ClientCertificateAuthenticationTest extends AbstractTest {\r\n+\r\n+    @Test\r\n+    public void pkcs1Test() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-pkcs1.key;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY2MTg3MQ=="}, "originalCommit": {"oid": "887fbdfb8cc7e787ddd119d88f3732a1fce7667a"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODg1MjYxOnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMDoyODoyNFrOF7zRRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzoyMjo0NVrOF8R7LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI1MDMwOQ==", "bodyText": "create a variable for the version and use it for both bcpkix-jdk15on and bcprov-jdk15on", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r398250309", "createdAt": "2020-03-26T00:28:24Z", "author": {"login": "ulvii"}, "path": "pom.xml", "diffHunk": "@@ -122,6 +123,14 @@\n \t\t\t<version>1.64</version>\n \t\t\t<optional>true</optional>\n \t\t</dependency>\n+\t\t\n+\t\t<!-- dependencies for Client Certificate Authentication -->\n+\t\t<dependency>\n+\t\t\t<groupId>org.bouncycastle</groupId>\n+\t\t\t<artifactId>bcpkix-jdk15on</artifactId>\n+\t\t\t<version>1.64</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de3f1755cbf15c9f18dc31a8214907438c906e4b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1MjU1Ng==", "bodyText": "done.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r398752556", "createdAt": "2020-03-26T17:22:45Z", "author": {"login": "peterbae"}, "path": "pom.xml", "diffHunk": "@@ -122,6 +123,14 @@\n \t\t\t<version>1.64</version>\n \t\t\t<optional>true</optional>\n \t\t</dependency>\n+\t\t\n+\t\t<!-- dependencies for Client Certificate Authentication -->\n+\t\t<dependency>\n+\t\t\t<groupId>org.bouncycastle</groupId>\n+\t\t\t<artifactId>bcpkix-jdk15on</artifactId>\n+\t\t\t<version>1.64</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI1MDMwOQ=="}, "originalCommit": {"oid": "de3f1755cbf15c9f18dc31a8214907438c906e4b"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODk0MTA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMToxODozMFrOF70Frg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzowMzoxOFrOF8REpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI2MzcyNg==", "bodyText": "Catching NullPointerException ???", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r398263726", "createdAt": "2020-03-26T01:18:30Z", "author": {"login": "ulvii"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java", "diffHunk": "@@ -1774,13 +1782,31 @@ else if (con.getTrustManagerClass() != null) {\n             if (logger.isLoggable(Level.FINEST))\n                 logger.finest(toString() + \" Getting TLS or better SSL context\");\n \n-            sslContext = SSLContext.getInstance(sslProtocol);\n-            sslContextProvider = sslContext.getProvider();\n+            if (null != clientCertificate) {\n+                try {\n+                    KeyManager[] km = SQLServerCertificateUtils.getKeyManagerFromFile(clientCertificate, clientKey,\n+                            clientKeyPassword);\n \n-            if (logger.isLoggable(Level.FINEST))\n-                logger.finest(toString() + \" Initializing SSL context\");\n+                    sslContext = SSLContext.getInstance(sslProtocol);\n+                    sslContextProvider = sslContext.getProvider();\n+\n+                    if (logger.isLoggable(Level.FINEST))\n+                        logger.finest(toString() + \" Initializing SSL context\");\n+\n+                    sslContext.init(km, tm, null);\n+                } catch (NullPointerException | FileNotFoundException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de3f1755cbf15c9f18dc31a8214907438c906e4b"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODczODU5OA==", "bodyText": "We forgot to remove this exception, I've added null checks in the finally blocks inside the SQLServerCertificateUtils.java. We shouldn't need to catch NPE.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r398738598", "createdAt": "2020-03-26T17:03:18Z", "author": {"login": "peterbae"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java", "diffHunk": "@@ -1774,13 +1782,31 @@ else if (con.getTrustManagerClass() != null) {\n             if (logger.isLoggable(Level.FINEST))\n                 logger.finest(toString() + \" Getting TLS or better SSL context\");\n \n-            sslContext = SSLContext.getInstance(sslProtocol);\n-            sslContextProvider = sslContext.getProvider();\n+            if (null != clientCertificate) {\n+                try {\n+                    KeyManager[] km = SQLServerCertificateUtils.getKeyManagerFromFile(clientCertificate, clientKey,\n+                            clientKeyPassword);\n \n-            if (logger.isLoggable(Level.FINEST))\n-                logger.finest(toString() + \" Initializing SSL context\");\n+                    sslContext = SSLContext.getInstance(sslProtocol);\n+                    sslContextProvider = sslContext.getProvider();\n+\n+                    if (logger.isLoggable(Level.FINEST))\n+                        logger.finest(toString() + \" Initializing SSL context\");\n+\n+                    sslContext.init(km, tm, null);\n+                } catch (NullPointerException | FileNotFoundException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI2MzcyNg=="}, "originalCommit": {"oid": "de3f1755cbf15c9f18dc31a8214907438c906e4b"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODk0ODYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMToyMjo1MVrOF70KHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzoyNjoxNlrOF8SFpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI2NDg2Mw==", "bodyText": "The code in if/else are almost the same. You just need to initialize km to null and have km = SQLServerCertificateUtils.getKeyManagerFromFile(clientCertificate, clientKey,clientKeyPassword); inside if block.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r398264863", "createdAt": "2020-03-26T01:22:51Z", "author": {"login": "ulvii"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java", "diffHunk": "@@ -1774,13 +1782,31 @@ else if (con.getTrustManagerClass() != null) {\n             if (logger.isLoggable(Level.FINEST))\n                 logger.finest(toString() + \" Getting TLS or better SSL context\");\n \n-            sslContext = SSLContext.getInstance(sslProtocol);\n-            sslContextProvider = sslContext.getProvider();\n+            if (null != clientCertificate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de3f1755cbf15c9f18dc31a8214907438c906e4b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1NTIzNg==", "bodyText": "thanks. done", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r398755236", "createdAt": "2020-03-26T17:26:16Z", "author": {"login": "peterbae"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java", "diffHunk": "@@ -1774,13 +1782,31 @@ else if (con.getTrustManagerClass() != null) {\n             if (logger.isLoggable(Level.FINEST))\n                 logger.finest(toString() + \" Getting TLS or better SSL context\");\n \n-            sslContext = SSLContext.getInstance(sslProtocol);\n-            sslContextProvider = sslContext.getProvider();\n+            if (null != clientCertificate) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI2NDg2Mw=="}, "originalCommit": {"oid": "de3f1755cbf15c9f18dc31a8214907438c906e4b"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzMwMzI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzozNzo0NFrOF8ePwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzo0OTozNFrOF8eexQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1NDQzNA==", "bodyText": "This exception should be handled from the method that reads from the file, not here.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r398954434", "createdAt": "2020-03-26T23:37:44Z", "author": {"login": "ulvii"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java", "diffHunk": "@@ -1880,6 +1891,8 @@ else if (con.getTrustManagerClass() != null) {\n                     && (SQLServerException.getErrString(\"R_truncatedServerResponse\").equals(errMsg)\n                             || SQLServerException.getErrString(\"R_truncatedServerResponse\").equals(causeErrMsg))) {\n                 con.terminate(SQLServerException.DRIVER_ERROR_INTERMITTENT_TLS_FAILED, form.format(msgArgs), e);\n+            } else if (e instanceof FileNotFoundException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4868fecda835757ed2ac1c7affca641c02945f8"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1ODI3Nw==", "bodyText": "ok, I've reverted it to the way it was being handled before.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r398958277", "createdAt": "2020-03-26T23:49:34Z", "author": {"login": "peterbae"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java", "diffHunk": "@@ -1880,6 +1891,8 @@ else if (con.getTrustManagerClass() != null) {\n                     && (SQLServerException.getErrString(\"R_truncatedServerResponse\").equals(errMsg)\n                             || SQLServerException.getErrString(\"R_truncatedServerResponse\").equals(causeErrMsg))) {\n                 con.terminate(SQLServerException.DRIVER_ERROR_INTERMITTENT_TLS_FAILED, form.format(msgArgs), e);\n+            } else if (e instanceof FileNotFoundException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1NDQzNA=="}, "originalCommit": {"oid": "a4868fecda835757ed2ac1c7affca641c02945f8"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzQ2MzUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMTowMDozNFrOF8ftHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjoxMDoxN1rOF84DMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk3ODMzMw==", "bodyText": "Is this absolute path? Can applications also provide relative path?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r398978333", "createdAt": "2020-03-27T01:00:34Z", "author": {"login": "ulvii"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java", "diffHunk": "@@ -1597,9 +1598,16 @@ private void validateServerNameInCertificate(X509Certificate cert) throws Certif\n      *        Server Host Name for SSL Handshake\n      * @param port\n      *        Server Port for SSL Handshake\n+     * @param clientCertificate\n+     *        Client certificate path", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a2978f862c3307d09ec9f242b5ee7bdb45ba1ce"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM3NzIwMA==", "bodyText": "It accepts both relative and absolute path.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r399377200", "createdAt": "2020-03-27T16:10:17Z", "author": {"login": "peterbae"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java", "diffHunk": "@@ -1597,9 +1598,16 @@ private void validateServerNameInCertificate(X509Certificate cert) throws Certif\n      *        Server Host Name for SSL Handshake\n      * @param port\n      *        Server Port for SSL Handshake\n+     * @param clientCertificate\n+     *        Client certificate path", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk3ODMzMw=="}, "originalCommit": {"oid": "6a2978f862c3307d09ec9f242b5ee7bdb45ba1ce"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzU3MzAxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/microsoft/sqlserver/clientcertauth/ClientCertificateAuthenticationTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMjowNDoxNFrOF8gtdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzowMjo0NVrOF86KiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk5NDgwNg==", "bodyText": "You can use R_clientCertError from SQLServerResource.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r398994806", "createdAt": "2020-03-27T02:04:14Z", "author": {"login": "ulvii"}, "path": "src/test/java/com/microsoft/sqlserver/clientcertauth/ClientCertificateAuthenticationTest.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.clientcertauth;\r\n+\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.DriverManager;\r\n+import java.sql.ResultSet;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerException;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+\r\n+\r\n+/**\r\n+ * Tests client certificate authentication feature\r\n+ * The feature is only supported against SQL Server Linux CU2 or higher.\r\n+ * \r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.xSQLv12)\r\n+@Tag(Constants.xSQLv14)\r\n+@Tag(Constants.xAzureSQLDW)\r\n+@Tag(Constants.xAzureSQLDB)\r\n+@Tag(Constants.clientCertAuth)\r\n+public class ClientCertificateAuthenticationTest extends AbstractTest {\r\n+\r\n+    @Test\r\n+    public void pkcs1Test() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-pkcs1.key;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pkcs1EncryptedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-encrypted-pkcs1.key;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void pkcs8Test() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-pkcs8.key;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pkcs8EncryptedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-encrypted-pkcs8.key;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void pfxTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pfx;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void pfxEncrytedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \"-encrypted.pfx;\" + \"clientKeyPassword=\"\r\n+                + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pvkTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".cer;\" + \"clientKey=\"\r\n+                + clientKey + \".pvk;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void invalidCert() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=invalid_path;\" + \"clientKeyPassword=\" + clientKeyPassword\r\n+                + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr)) {\r\n+        } catch (SQLServerException e) {\r\n+            assertTrue(e.getMessage().contains(TestResource.getResource(\"R_invalidPath\")));\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a2978f862c3307d09ec9f242b5ee7bdb45ba1ce"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM5ODY3OQ==", "bodyText": "SQLServerResource is not visible in this package, we can just use the TestResource for test related texts.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r399398679", "createdAt": "2020-03-27T16:42:19Z", "author": {"login": "peterbae"}, "path": "src/test/java/com/microsoft/sqlserver/clientcertauth/ClientCertificateAuthenticationTest.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.clientcertauth;\r\n+\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.DriverManager;\r\n+import java.sql.ResultSet;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerException;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+\r\n+\r\n+/**\r\n+ * Tests client certificate authentication feature\r\n+ * The feature is only supported against SQL Server Linux CU2 or higher.\r\n+ * \r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.xSQLv12)\r\n+@Tag(Constants.xSQLv14)\r\n+@Tag(Constants.xAzureSQLDW)\r\n+@Tag(Constants.xAzureSQLDB)\r\n+@Tag(Constants.clientCertAuth)\r\n+public class ClientCertificateAuthenticationTest extends AbstractTest {\r\n+\r\n+    @Test\r\n+    public void pkcs1Test() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-pkcs1.key;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pkcs1EncryptedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-encrypted-pkcs1.key;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void pkcs8Test() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-pkcs8.key;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pkcs8EncryptedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-encrypted-pkcs8.key;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void pfxTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pfx;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void pfxEncrytedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \"-encrypted.pfx;\" + \"clientKeyPassword=\"\r\n+                + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pvkTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".cer;\" + \"clientKey=\"\r\n+                + clientKey + \".pvk;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void invalidCert() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=invalid_path;\" + \"clientKeyPassword=\" + clientKeyPassword\r\n+                + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr)) {\r\n+        } catch (SQLServerException e) {\r\n+            assertTrue(e.getMessage().contains(TestResource.getResource(\"R_invalidPath\")));\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk5NDgwNg=="}, "originalCommit": {"oid": "6a2978f862c3307d09ec9f242b5ee7bdb45ba1ce"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwMTI3Mg==", "bodyText": "See SQLServerConnectionTest.executeInvalidFmt() for example use.\nassertTrue(e.getMessage().matches(TestUtils.formatErrorMsg(\"R_invalidArgument\")));", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r399401272", "createdAt": "2020-03-27T16:46:20Z", "author": {"login": "ulvii"}, "path": "src/test/java/com/microsoft/sqlserver/clientcertauth/ClientCertificateAuthenticationTest.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.clientcertauth;\r\n+\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.DriverManager;\r\n+import java.sql.ResultSet;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerException;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+\r\n+\r\n+/**\r\n+ * Tests client certificate authentication feature\r\n+ * The feature is only supported against SQL Server Linux CU2 or higher.\r\n+ * \r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.xSQLv12)\r\n+@Tag(Constants.xSQLv14)\r\n+@Tag(Constants.xAzureSQLDW)\r\n+@Tag(Constants.xAzureSQLDB)\r\n+@Tag(Constants.clientCertAuth)\r\n+public class ClientCertificateAuthenticationTest extends AbstractTest {\r\n+\r\n+    @Test\r\n+    public void pkcs1Test() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-pkcs1.key;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pkcs1EncryptedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-encrypted-pkcs1.key;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void pkcs8Test() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-pkcs8.key;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pkcs8EncryptedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-encrypted-pkcs8.key;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void pfxTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pfx;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void pfxEncrytedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \"-encrypted.pfx;\" + \"clientKeyPassword=\"\r\n+                + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pvkTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".cer;\" + \"clientKey=\"\r\n+                + clientKey + \".pvk;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void invalidCert() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=invalid_path;\" + \"clientKeyPassword=\" + clientKeyPassword\r\n+                + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr)) {\r\n+        } catch (SQLServerException e) {\r\n+            assertTrue(e.getMessage().contains(TestResource.getResource(\"R_invalidPath\")));\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk5NDgwNg=="}, "originalCommit": {"oid": "6a2978f862c3307d09ec9f242b5ee7bdb45ba1ce"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQxMTg0OA==", "bodyText": "Thanks. done.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r399411848", "createdAt": "2020-03-27T17:02:45Z", "author": {"login": "peterbae"}, "path": "src/test/java/com/microsoft/sqlserver/clientcertauth/ClientCertificateAuthenticationTest.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.clientcertauth;\r\n+\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.DriverManager;\r\n+import java.sql.ResultSet;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerException;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+\r\n+\r\n+/**\r\n+ * Tests client certificate authentication feature\r\n+ * The feature is only supported against SQL Server Linux CU2 or higher.\r\n+ * \r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.xSQLv12)\r\n+@Tag(Constants.xSQLv14)\r\n+@Tag(Constants.xAzureSQLDW)\r\n+@Tag(Constants.xAzureSQLDB)\r\n+@Tag(Constants.clientCertAuth)\r\n+public class ClientCertificateAuthenticationTest extends AbstractTest {\r\n+\r\n+    @Test\r\n+    public void pkcs1Test() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-pkcs1.key;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pkcs1EncryptedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-encrypted-pkcs1.key;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void pkcs8Test() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-pkcs8.key;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pkcs8EncryptedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-encrypted-pkcs8.key;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void pfxTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pfx;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void pfxEncrytedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \"-encrypted.pfx;\" + \"clientKeyPassword=\"\r\n+                + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pvkTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".cer;\" + \"clientKey=\"\r\n+                + clientKey + \".pvk;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void invalidCert() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=invalid_path;\" + \"clientKeyPassword=\" + clientKeyPassword\r\n+                + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr)) {\r\n+        } catch (SQLServerException e) {\r\n+            assertTrue(e.getMessage().contains(TestResource.getResource(\"R_invalidPath\")));\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk5NDgwNg=="}, "originalCommit": {"oid": "6a2978f862c3307d09ec9f242b5ee7bdb45ba1ce"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzU3NTgwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/microsoft/sqlserver/clientcertauth/ClientCertificateAuthenticationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMjowNjowMFrOF8gvHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjoyOToyOFrOF841AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk5NTIyOQ==", "bodyText": "We should not be hardcoding the file names like this. Please use config properties file and specify full file names in it.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r398995229", "createdAt": "2020-03-27T02:06:00Z", "author": {"login": "ulvii"}, "path": "src/test/java/com/microsoft/sqlserver/clientcertauth/ClientCertificateAuthenticationTest.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.clientcertauth;\r\n+\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.DriverManager;\r\n+import java.sql.ResultSet;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerException;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+\r\n+\r\n+/**\r\n+ * Tests client certificate authentication feature\r\n+ * The feature is only supported against SQL Server Linux CU2 or higher.\r\n+ * \r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.xSQLv12)\r\n+@Tag(Constants.xSQLv14)\r\n+@Tag(Constants.xAzureSQLDW)\r\n+@Tag(Constants.xAzureSQLDB)\r\n+@Tag(Constants.clientCertAuth)\r\n+public class ClientCertificateAuthenticationTest extends AbstractTest {\r\n+\r\n+    @Test\r\n+    public void pkcs1Test() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-pkcs1.key;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pkcs1EncryptedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-encrypted-pkcs1.key;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a2978f862c3307d09ec9f242b5ee7bdb45ba1ce"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM4OTk1Mg==", "bodyText": "Why do we need to use a config file? The user can only provide one connection property for clientCertificate, and that one property needs to be re-used multiple times for different private key formats. The hardcoded strings here are the formats for the names that the test has defined. I can turn these hardcoded strings into constants, but I wouldn't use a config file here.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r399389952", "createdAt": "2020-03-27T16:29:28Z", "author": {"login": "peterbae"}, "path": "src/test/java/com/microsoft/sqlserver/clientcertauth/ClientCertificateAuthenticationTest.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.clientcertauth;\r\n+\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.DriverManager;\r\n+import java.sql.ResultSet;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerException;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+\r\n+\r\n+/**\r\n+ * Tests client certificate authentication feature\r\n+ * The feature is only supported against SQL Server Linux CU2 or higher.\r\n+ * \r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.xSQLv12)\r\n+@Tag(Constants.xSQLv14)\r\n+@Tag(Constants.xAzureSQLDW)\r\n+@Tag(Constants.xAzureSQLDB)\r\n+@Tag(Constants.clientCertAuth)\r\n+public class ClientCertificateAuthenticationTest extends AbstractTest {\r\n+\r\n+    @Test\r\n+    public void pkcs1Test() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-pkcs1.key;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pkcs1EncryptedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-encrypted-pkcs1.key;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk5NTIyOQ=="}, "originalCommit": {"oid": "6a2978f862c3307d09ec9f242b5ee7bdb45ba1ce"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzU5MDAxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/microsoft/sqlserver/clientcertauth/ClientCertificateAuthenticationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMjoxNDozMlrOF8g3WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOToxMzo0MVrOF8-rhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk5NzMzNw==", "bodyText": "Why aren't you using new DataSource APIs? setClientCertificate(), setClientKey(), setClientKeyPassword", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r398997337", "createdAt": "2020-03-27T02:14:32Z", "author": {"login": "ulvii"}, "path": "src/test/java/com/microsoft/sqlserver/clientcertauth/ClientCertificateAuthenticationTest.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.clientcertauth;\r\n+\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.DriverManager;\r\n+import java.sql.ResultSet;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerException;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+\r\n+\r\n+/**\r\n+ * Tests client certificate authentication feature\r\n+ * The feature is only supported against SQL Server Linux CU2 or higher.\r\n+ * \r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.xSQLv12)\r\n+@Tag(Constants.xSQLv14)\r\n+@Tag(Constants.xAzureSQLDW)\r\n+@Tag(Constants.xAzureSQLDB)\r\n+@Tag(Constants.clientCertAuth)\r\n+public class ClientCertificateAuthenticationTest extends AbstractTest {\r\n+\r\n+    @Test\r\n+    public void pkcs1Test() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-pkcs1.key;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pkcs1EncryptedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-encrypted-pkcs1.key;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void pkcs8Test() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-pkcs8.key;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pkcs8EncryptedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-encrypted-pkcs8.key;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void pfxTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pfx;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void pfxEncrytedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \"-encrypted.pfx;\" + \"clientKeyPassword=\"\r\n+                + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pvkTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".cer;\" + \"clientKey=\"\r\n+                + clientKey + \".pvk;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void invalidCert() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=invalid_path;\" + \"clientKeyPassword=\" + clientKeyPassword\r\n+                + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr)) {\r\n+        } catch (SQLServerException e) {\r\n+            assertTrue(e.getMessage().contains(TestResource.getResource(\"R_invalidPath\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void invalidCertPassword() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pfx;\"\r\n+                + \"clientKeyPassword=invalid_password;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr)) {\r\n+        } catch (SQLServerException e) {\r\n+            assertTrue(e.getMessage().contains(TestResource.getResource(\"R_keystorePassword\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void testDataSource() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a2978f862c3307d09ec9f242b5ee7bdb45ba1ce"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4NTgyOQ==", "bodyText": "done", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r399485829", "createdAt": "2020-03-27T19:13:41Z", "author": {"login": "peterbae"}, "path": "src/test/java/com/microsoft/sqlserver/clientcertauth/ClientCertificateAuthenticationTest.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.clientcertauth;\r\n+\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.DriverManager;\r\n+import java.sql.ResultSet;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerException;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+\r\n+\r\n+/**\r\n+ * Tests client certificate authentication feature\r\n+ * The feature is only supported against SQL Server Linux CU2 or higher.\r\n+ * \r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.xSQLv12)\r\n+@Tag(Constants.xSQLv14)\r\n+@Tag(Constants.xAzureSQLDW)\r\n+@Tag(Constants.xAzureSQLDB)\r\n+@Tag(Constants.clientCertAuth)\r\n+public class ClientCertificateAuthenticationTest extends AbstractTest {\r\n+\r\n+    @Test\r\n+    public void pkcs1Test() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-pkcs1.key;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pkcs1EncryptedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-encrypted-pkcs1.key;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void pkcs8Test() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-pkcs8.key;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pkcs8EncryptedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-encrypted-pkcs8.key;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void pfxTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pfx;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void pfxEncrytedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \"-encrypted.pfx;\" + \"clientKeyPassword=\"\r\n+                + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pvkTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".cer;\" + \"clientKey=\"\r\n+                + clientKey + \".pvk;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void invalidCert() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=invalid_path;\" + \"clientKeyPassword=\" + clientKeyPassword\r\n+                + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr)) {\r\n+        } catch (SQLServerException e) {\r\n+            assertTrue(e.getMessage().contains(TestResource.getResource(\"R_invalidPath\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void invalidCertPassword() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pfx;\"\r\n+                + \"clientKeyPassword=invalid_password;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr)) {\r\n+        } catch (SQLServerException e) {\r\n+            assertTrue(e.getMessage().contains(TestResource.getResource(\"R_keystorePassword\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void testDataSource() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk5NzMzNw=="}, "originalCommit": {"oid": "6a2978f862c3307d09ec9f242b5ee7bdb45ba1ce"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzU5MjEzOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/microsoft/sqlserver/clientcertauth/ClientCertificateAuthenticationTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMjoxNTo1MVrOF8g4kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOTo1MDoyNFrOF8_zCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk5NzY0OA==", "bodyText": "Use R_pvkParseError from SQLServerResource instead.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r398997648", "createdAt": "2020-03-27T02:15:51Z", "author": {"login": "ulvii"}, "path": "src/test/java/com/microsoft/sqlserver/clientcertauth/ClientCertificateAuthenticationTest.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.clientcertauth;\r\n+\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.DriverManager;\r\n+import java.sql.ResultSet;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerException;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+\r\n+\r\n+/**\r\n+ * Tests client certificate authentication feature\r\n+ * The feature is only supported against SQL Server Linux CU2 or higher.\r\n+ * \r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.xSQLv12)\r\n+@Tag(Constants.xSQLv14)\r\n+@Tag(Constants.xAzureSQLDW)\r\n+@Tag(Constants.xAzureSQLDB)\r\n+@Tag(Constants.clientCertAuth)\r\n+public class ClientCertificateAuthenticationTest extends AbstractTest {\r\n+\r\n+    @Test\r\n+    public void pkcs1Test() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-pkcs1.key;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pkcs1EncryptedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-encrypted-pkcs1.key;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void pkcs8Test() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-pkcs8.key;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pkcs8EncryptedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-encrypted-pkcs8.key;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void pfxTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pfx;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void pfxEncrytedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \"-encrypted.pfx;\" + \"clientKeyPassword=\"\r\n+                + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pvkTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".cer;\" + \"clientKey=\"\r\n+                + clientKey + \".pvk;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void invalidCert() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=invalid_path;\" + \"clientKeyPassword=\" + clientKeyPassword\r\n+                + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr)) {\r\n+        } catch (SQLServerException e) {\r\n+            assertTrue(e.getMessage().contains(TestResource.getResource(\"R_invalidPath\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void invalidCertPassword() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pfx;\"\r\n+                + \"clientKeyPassword=invalid_password;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr)) {\r\n+        } catch (SQLServerException e) {\r\n+            assertTrue(e.getMessage().contains(TestResource.getResource(\"R_keystorePassword\")));\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a2978f862c3307d09ec9f242b5ee7bdb45ba1ce"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwMzQwMA==", "bodyText": "Why is this resolved?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r399503400", "createdAt": "2020-03-27T19:48:49Z", "author": {"login": "ulvii"}, "path": "src/test/java/com/microsoft/sqlserver/clientcertauth/ClientCertificateAuthenticationTest.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.clientcertauth;\r\n+\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.DriverManager;\r\n+import java.sql.ResultSet;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerException;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+\r\n+\r\n+/**\r\n+ * Tests client certificate authentication feature\r\n+ * The feature is only supported against SQL Server Linux CU2 or higher.\r\n+ * \r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.xSQLv12)\r\n+@Tag(Constants.xSQLv14)\r\n+@Tag(Constants.xAzureSQLDW)\r\n+@Tag(Constants.xAzureSQLDB)\r\n+@Tag(Constants.clientCertAuth)\r\n+public class ClientCertificateAuthenticationTest extends AbstractTest {\r\n+\r\n+    @Test\r\n+    public void pkcs1Test() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-pkcs1.key;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pkcs1EncryptedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-encrypted-pkcs1.key;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void pkcs8Test() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-pkcs8.key;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pkcs8EncryptedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-encrypted-pkcs8.key;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void pfxTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pfx;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void pfxEncrytedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \"-encrypted.pfx;\" + \"clientKeyPassword=\"\r\n+                + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pvkTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".cer;\" + \"clientKey=\"\r\n+                + clientKey + \".pvk;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void invalidCert() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=invalid_path;\" + \"clientKeyPassword=\" + clientKeyPassword\r\n+                + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr)) {\r\n+        } catch (SQLServerException e) {\r\n+            assertTrue(e.getMessage().contains(TestResource.getResource(\"R_invalidPath\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void invalidCertPassword() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pfx;\"\r\n+                + \"clientKeyPassword=invalid_password;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr)) {\r\n+        } catch (SQLServerException e) {\r\n+            assertTrue(e.getMessage().contains(TestResource.getResource(\"R_keystorePassword\")));\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk5NzY0OA=="}, "originalCommit": {"oid": "6a2978f862c3307d09ec9f242b5ee7bdb45ba1ce"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwNDEzNg==", "bodyText": "For this error message, the error message isn't coming from the driver, it's coming from Java. So there's no SQLServerResource text to refer here.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r399504136", "createdAt": "2020-03-27T19:50:24Z", "author": {"login": "peterbae"}, "path": "src/test/java/com/microsoft/sqlserver/clientcertauth/ClientCertificateAuthenticationTest.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.clientcertauth;\r\n+\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.DriverManager;\r\n+import java.sql.ResultSet;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerException;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+\r\n+\r\n+/**\r\n+ * Tests client certificate authentication feature\r\n+ * The feature is only supported against SQL Server Linux CU2 or higher.\r\n+ * \r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.xSQLv12)\r\n+@Tag(Constants.xSQLv14)\r\n+@Tag(Constants.xAzureSQLDW)\r\n+@Tag(Constants.xAzureSQLDB)\r\n+@Tag(Constants.clientCertAuth)\r\n+public class ClientCertificateAuthenticationTest extends AbstractTest {\r\n+\r\n+    @Test\r\n+    public void pkcs1Test() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-pkcs1.key;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pkcs1EncryptedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-encrypted-pkcs1.key;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void pkcs8Test() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-pkcs8.key;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pkcs8EncryptedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pem;\" + \"clientKey=\"\r\n+                + clientKey + \"-encrypted-pkcs8.key;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void pfxTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pfx;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void pfxEncrytedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \"-encrypted.pfx;\" + \"clientKeyPassword=\"\r\n+                + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void pvkTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".cer;\" + \"clientKey=\"\r\n+                + clientKey + \".pvk;\" + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            ResultSet rs = stmt.executeQuery(\"SELECT @@VERSION AS 'SQL Server Version'\");\r\n+            rs.next();\r\n+            assertTrue(rs.getString(1).contains(TestResource.getResource(\"R_microsoft\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void invalidCert() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=invalid_path;\" + \"clientKeyPassword=\" + clientKeyPassword\r\n+                + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr)) {\r\n+        } catch (SQLServerException e) {\r\n+            assertTrue(e.getMessage().contains(TestResource.getResource(\"R_invalidPath\")));\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void invalidCertPassword() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + \".pfx;\"\r\n+                + \"clientKeyPassword=invalid_password;\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr)) {\r\n+        } catch (SQLServerException e) {\r\n+            assertTrue(e.getMessage().contains(TestResource.getResource(\"R_keystorePassword\")));\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk5NzY0OA=="}, "originalCommit": {"oid": "6a2978f862c3307d09ec9f242b5ee7bdb45ba1ce"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Mzk1MTUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNjowMjozN1rOF8kKPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjoxNToxOFrOF84QVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA1MTMyNg==", "bodyText": "define this constant", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r399051326", "createdAt": "2020-03-27T06:02:37Z", "author": {"login": "lilgreenbird"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java", "diffHunk": "@@ -2629,7 +2654,7 @@ void Prelogin(String serverName, int portNumber) throws SQLServerException {\n                 0, 0, 0, 0, 0, 0,\n \n                 // - Encryption -\n-                requestedEncryptionLevel,\n+                (null == clientCertificate) ? requestedEncryptionLevel : (byte) (requestedEncryptionLevel | (byte) 0x80),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a2978f862c3307d09ec9f242b5ee7bdb45ba1ce"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM4MDU2Ng==", "bodyText": "done", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r399380566", "createdAt": "2020-03-27T16:15:18Z", "author": {"login": "peterbae"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java", "diffHunk": "@@ -2629,7 +2654,7 @@ void Prelogin(String serverName, int portNumber) throws SQLServerException {\n                 0, 0, 0, 0, 0, 0,\n \n                 // - Encryption -\n-                requestedEncryptionLevel,\n+                (null == clientCertificate) ? requestedEncryptionLevel : (byte) (requestedEncryptionLevel | (byte) 0x80),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA1MTMyNg=="}, "originalCommit": {"oid": "6a2978f862c3307d09ec9f242b5ee7bdb45ba1ce"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Mzk2MzQwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/microsoft/sqlserver/clientcertauth/ClientCertificateAuthenticationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNjowOTo0MFrOF8kRLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjoyMDozNVrOF84d0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA1MzEwMg==", "bodyText": "add description of what the tests are testing", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r399053102", "createdAt": "2020-03-27T06:09:40Z", "author": {"login": "lilgreenbird"}, "path": "src/test/java/com/microsoft/sqlserver/clientcertauth/ClientCertificateAuthenticationTest.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.clientcertauth;\r\n+\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.DriverManager;\r\n+import java.sql.ResultSet;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerException;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+\r\n+\r\n+/**\r\n+ * Tests client certificate authentication feature\r\n+ * The feature is only supported against SQL Server Linux CU2 or higher.\r\n+ * \r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.xSQLv12)\r\n+@Tag(Constants.xSQLv14)\r\n+@Tag(Constants.xAzureSQLDW)\r\n+@Tag(Constants.xAzureSQLDB)\r\n+@Tag(Constants.clientCertAuth)\r\n+public class ClientCertificateAuthenticationTest extends AbstractTest {\r\n+\r\n+    @Test\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a2978f862c3307d09ec9f242b5ee7bdb45ba1ce"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM4NDAxNg==", "bodyText": "done", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r399384016", "createdAt": "2020-03-27T16:20:35Z", "author": {"login": "peterbae"}, "path": "src/test/java/com/microsoft/sqlserver/clientcertauth/ClientCertificateAuthenticationTest.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.clientcertauth;\r\n+\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.DriverManager;\r\n+import java.sql.ResultSet;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerException;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+\r\n+\r\n+/**\r\n+ * Tests client certificate authentication feature\r\n+ * The feature is only supported against SQL Server Linux CU2 or higher.\r\n+ * \r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.xSQLv12)\r\n+@Tag(Constants.xSQLv14)\r\n+@Tag(Constants.xAzureSQLDW)\r\n+@Tag(Constants.xAzureSQLDB)\r\n+@Tag(Constants.clientCertAuth)\r\n+public class ClientCertificateAuthenticationTest extends AbstractTest {\r\n+\r\n+    @Test\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA1MzEwMg=="}, "originalCommit": {"oid": "6a2978f862c3307d09ec9f242b5ee7bdb45ba1ce"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjU5MDU3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/microsoft/sqlserver/clientcertauth/ClientCertificateAuthenticationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODo0MDozN1rOF89oSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODo1ODoxNlrOF8-MxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ2ODYxNg==", "bodyText": "No need to create a statement", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r399468616", "createdAt": "2020-03-27T18:40:37Z", "author": {"login": "ulvii"}, "path": "src/test/java/com/microsoft/sqlserver/clientcertauth/ClientCertificateAuthenticationTest.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.clientcertauth;\r\n+\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.DriverManager;\r\n+import java.sql.ResultSet;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerException;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.jdbc.TestUtils;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+\r\n+\r\n+/**\r\n+ * Tests client certificate authentication feature\r\n+ * The feature is only supported against SQL Server Linux CU2 or higher.\r\n+ * \r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.xSQLv12)\r\n+@Tag(Constants.xSQLv14)\r\n+@Tag(Constants.xAzureSQLDW)\r\n+@Tag(Constants.xAzureSQLDB)\r\n+@Tag(Constants.clientCertAuth)\r\n+public class ClientCertificateAuthenticationTest extends AbstractTest {\r\n+\r\n+    static final String PEM_SUFFIX = \".pem;\";\r\n+    static final String CER_SUFFIX = \".cer;\";\r\n+    static final String PVK_SUFFIX = \".pvk;\";\r\n+\r\n+    static final String PKCS1_KEY_SUFFIX = \"-pkcs1.key;\";\r\n+    static final String ENCRYPTED_PKCS1_KEY_SUFFIX = \"-encrypted-pkcs1.key;\";\r\n+    static final String PKCS8_KEY_SUFFIX = \"-pkcs8.key;\";\r\n+    static final String ENCRYPTED_PKCS8_KEY_SUFFIX = \"-encrypted-pkcs8.key;\";\r\n+    static final String PFX_KEY_SUFFIX = \".pfx;\";\r\n+    static final String ENCRYPTED_PFX_KEY_SUFFIX = \"-encrypted.pfx;\";\r\n+\r\n+    /**\r\n+     * Tests client certificate authentication feature with PKCS1 private key.\r\n+     * \r\n+     * @throws Exception\r\n+     */\r\n+    @Test\r\n+    public void pkcs1Test() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + PEM_SUFFIX + \"clientKey=\"\r\n+                + clientKey + PKCS1_KEY_SUFFIX;\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            assertTrue(conn.isValid(1));\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Tests client certificate authentication feature with PKCS1 private key that has been encrypted with a password.\r\n+     * \r\n+     * @throws Exception\r\n+     */\r\n+    @Test\r\n+    public void pkcs1EncryptedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + PEM_SUFFIX + \"clientKey=\"\r\n+                + clientKey + ENCRYPTED_PKCS1_KEY_SUFFIX + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51596474568003c5aa7754b7b76711f336505c3a"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ3Nzk1Ng==", "bodyText": "Thanks, done.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r399477956", "createdAt": "2020-03-27T18:58:16Z", "author": {"login": "peterbae"}, "path": "src/test/java/com/microsoft/sqlserver/clientcertauth/ClientCertificateAuthenticationTest.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.clientcertauth;\r\n+\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.DriverManager;\r\n+import java.sql.ResultSet;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerException;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.jdbc.TestUtils;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+\r\n+\r\n+/**\r\n+ * Tests client certificate authentication feature\r\n+ * The feature is only supported against SQL Server Linux CU2 or higher.\r\n+ * \r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.xSQLv12)\r\n+@Tag(Constants.xSQLv14)\r\n+@Tag(Constants.xAzureSQLDW)\r\n+@Tag(Constants.xAzureSQLDB)\r\n+@Tag(Constants.clientCertAuth)\r\n+public class ClientCertificateAuthenticationTest extends AbstractTest {\r\n+\r\n+    static final String PEM_SUFFIX = \".pem;\";\r\n+    static final String CER_SUFFIX = \".cer;\";\r\n+    static final String PVK_SUFFIX = \".pvk;\";\r\n+\r\n+    static final String PKCS1_KEY_SUFFIX = \"-pkcs1.key;\";\r\n+    static final String ENCRYPTED_PKCS1_KEY_SUFFIX = \"-encrypted-pkcs1.key;\";\r\n+    static final String PKCS8_KEY_SUFFIX = \"-pkcs8.key;\";\r\n+    static final String ENCRYPTED_PKCS8_KEY_SUFFIX = \"-encrypted-pkcs8.key;\";\r\n+    static final String PFX_KEY_SUFFIX = \".pfx;\";\r\n+    static final String ENCRYPTED_PFX_KEY_SUFFIX = \"-encrypted.pfx;\";\r\n+\r\n+    /**\r\n+     * Tests client certificate authentication feature with PKCS1 private key.\r\n+     * \r\n+     * @throws Exception\r\n+     */\r\n+    @Test\r\n+    public void pkcs1Test() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + PEM_SUFFIX + \"clientKey=\"\r\n+                + clientKey + PKCS1_KEY_SUFFIX;\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r\n+            assertTrue(conn.isValid(1));\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Tests client certificate authentication feature with PKCS1 private key that has been encrypted with a password.\r\n+     * \r\n+     * @throws Exception\r\n+     */\r\n+    @Test\r\n+    public void pkcs1EncryptedTest() throws Exception {\r\n+        String conStr = connectionString + \";clientCertificate=\" + clientCertificate + PEM_SUFFIX + \"clientKey=\"\r\n+                + clientKey + ENCRYPTED_PKCS1_KEY_SUFFIX + \"clientKeyPassword=\" + clientKeyPassword + \";\";\r\n+        try (Connection conn = DriverManager.getConnection(conStr); Statement stmt = conn.createStatement()) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ2ODYxNg=="}, "originalCommit": {"oid": "51596474568003c5aa7754b7b76711f336505c3a"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1206, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}