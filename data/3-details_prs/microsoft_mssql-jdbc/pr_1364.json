{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NzMzNTQ3", "number": 1364, "title": "Fix STAsBinary to return WKB format instead of CLR", "bodyText": "Fixes issue #1280.\nSTAsBinary is a method that's supported by SSMS to return a WKB (Well-Known binary) format of a Geometry/Geography instance. The driver also implemented this method when it first implemented spatial datatypes, but it was wrongly returning a CLR (Microsoft's internal representation of a Geometry/Geography instance, different from WKB) value instead. This PR adds new logic to parse existing spatial datatype instance into a WKB format.\nThe counterpart method to this method, STGeomFromWKB, (which takes in a WKB and returns a Geometry/Geography instance) will be fixed at a later date, and I've put a note in the Javadocs telling users to use deserialize(byte[]) instead which does the exact same thing as current STGeomFromWKB.", "createdAt": "2020-06-18T19:59:56Z", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364", "merged": true, "mergeCommit": {"oid": "c82222a001c0b9dd87bb74378bb9785c55cd65ac"}, "closed": true, "closedAt": "2020-07-03T23:39:33Z", "author": {"login": "peterbae"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqmOvuAH2gAyNDM2NzMzNTQ3OjQ0M2Y4YWFlMjVhNzgxNGUyNzI0OWUxZWE5N2ZjZTQzZTllMDQ0YmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcxcDZ_AFqTQ0MjU3NDAxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "443f8aae25a7814e27249e1ea97fce43e9e044bb", "author": {"user": {"login": "peterbae", "name": "Peter Bae"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/443f8aae25a7814e27249e1ea97fce43e9e044bb", "committedDate": "2020-06-12T17:23:24Z", "message": "initial commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34fc61ee10f74e8674158961412601cef8ccfd71", "author": {"user": {"login": "peterbae", "name": "Peter Bae"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/34fc61ee10f74e8674158961412601cef8ccfd71", "committedDate": "2020-06-17T20:35:28Z", "message": "next commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08a3c570e384dde2521f4887929190c98ea619c3", "author": {"user": {"login": "peterbae", "name": "Peter Bae"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/08a3c570e384dde2521f4887929190c98ea619c3", "committedDate": "2020-06-18T19:39:18Z", "message": "comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06a9cc1277c204988bf8a058d3ea12cb41f3e94d", "author": {"user": {"login": "peterbae", "name": "Peter Bae"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/06a9cc1277c204988bf8a058d3ea12cb41f3e94d", "committedDate": "2020-06-18T19:50:16Z", "message": "comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "757cfef06761706e78266f372f4e741ce347446e", "author": {"user": {"login": "peterbae", "name": "Peter Bae"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/757cfef06761706e78266f372f4e741ce347446e", "committedDate": "2020-06-18T19:52:35Z", "message": "comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f94461169a72c9a18c9bd8efaf01578ece8b436d", "author": {"user": {"login": "peterbae", "name": "Peter Bae"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/f94461169a72c9a18c9bd8efaf01578ece8b436d", "committedDate": "2020-06-18T20:05:15Z", "message": "javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMDM1MTY3", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#pullrequestreview-442035167", "createdAt": "2020-07-02T21:42:19Z", "commit": {"oid": "f94461169a72c9a18c9bd8efaf01578ece8b436d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMTo0MjoxOVrOGsd0cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMTo0MjoxOVrOGsd0cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI3OTA4OA==", "bodyText": "tests should have a header briefly describing what the tests are testing", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#discussion_r449279088", "createdAt": "2020-07-02T21:42:19Z", "author": {"login": "lilgreenbird"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/datatypes/SQLServerSpatialDatatypeTest.java", "diffHunk": "@@ -51,141 +52,1161 @@\n     static boolean isDenaliOrLater = false;\n \n     @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f94461169a72c9a18c9bd8efaf01578ece8b436d"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMDM2NDIy", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#pullrequestreview-442036422", "createdAt": "2020-07-02T21:45:25Z", "commit": {"oid": "f94461169a72c9a18c9bd8efaf01578ece8b436d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMTo0NToyNVrOGsd4aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMTo0NToyNVrOGsd4aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI4MDEwNQ==", "bodyText": "all these testsBlah and testBlah2 tests are identical other than test data, can we refactor them to call a common test method instead?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#discussion_r449280105", "createdAt": "2020-07-02T21:45:25Z", "author": {"login": "lilgreenbird"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/datatypes/SQLServerSpatialDatatypeTest.java", "diffHunk": "@@ -51,141 +52,1161 @@\n     static boolean isDenaliOrLater = false;\n \n     @Test\n-    public void testPointWkb() throws SQLException {\n+    public void testPoint() throws SQLException {\n         String geoWKT = \"POINT(3 40 5 6)\";\n-        byte[] geomWKB = hexStringToByteArray(\n+        byte[] geomCLR = hexStringToByteArray(\n                 \"00000000010F0000000000000840000000000000444000000000000014400000000000001840\");\n-        byte[] geogWKB = hexStringToByteArray(\n+        byte[] geogCLR = hexStringToByteArray(\n                 \"E6100000010F0000000000004440000000000000084000000000000014400000000000001840\");\n-        Geometry geomWKT = Geometry.deserialize(geomWKB);\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n+        byte[] geoWKB = hexStringToByteArray(\"010100000000000000000008400000000000004440\");\n+        Geometry geomWKT = Geometry.deserialize(geomCLR);\n+        Geography geogWKT = Geography.deserialize(geogCLR);\n+        assertEquals(geomWKT.asTextZM(), geoWKT);\n+        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        assertTrue(Arrays.equals(geomWKT.STAsBinary(), geoWKB));\n+        assertTrue(Arrays.equals(geogWKT.STAsBinary(), geoWKB));\n+    }\n+\n+    @Test\n+    public void testPoint2() throws SQLException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f94461169a72c9a18c9bd8efaf01578ece8b436d"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMDM3MzU5", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#pullrequestreview-442037359", "createdAt": "2020-07-02T21:47:41Z", "commit": {"oid": "f94461169a72c9a18c9bd8efaf01578ece8b436d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMTo0Nzo0MVrOGsd7ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMTo0Nzo0MVrOGsd7ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI4MDg2OQ==", "bodyText": "can we rename this, as initially I thought this was a hack to avoid @beforeeach. But actually this isn't called before each tests.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#discussion_r449280869", "createdAt": "2020-07-02T21:47:41Z", "author": {"login": "lilgreenbird"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/datatypes/SQLServerSpatialDatatypeTest.java", "diffHunk": "@@ -821,7 +1842,7 @@ public void testParse() throws SQLException {\n \n     @Test\n     @Tag(Constants.xAzureSQLDW)\n-    public void testPoint() throws SQLException {\n+    public void testSendBasicPoint() throws SQLException {\n         beforeEachSetup();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f94461169a72c9a18c9bd8efaf01578ece8b436d"}, "originalPosition": 1242}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMDQwNDYx", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#pullrequestreview-442040461", "createdAt": "2020-07-02T21:55:44Z", "commit": {"oid": "f94461169a72c9a18c9bd8efaf01578ece8b436d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMTo1NTo0NFrOGseFMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMTo1NTo0NFrOGseFMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI4MzM3OQ==", "bodyText": "add a negative test for DW to make sure it throws the proper error", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#discussion_r449283379", "createdAt": "2020-07-02T21:55:44Z", "author": {"login": "lilgreenbird"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/datatypes/SQLServerSpatialDatatypeTest.java", "diffHunk": "@@ -51,141 +52,1161 @@\n     static boolean isDenaliOrLater = false;\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f94461169a72c9a18c9bd8efaf01578ece8b436d"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMDQ1Njg5", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#pullrequestreview-442045689", "createdAt": "2020-07-02T22:09:43Z", "commit": {"oid": "f94461169a72c9a18c9bd8efaf01578ece8b436d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMjowOTo0M1rOGseVXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMjowOTo0M1rOGseVXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI4NzUxOA==", "bodyText": "Multi-line comment.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#discussion_r449287518", "createdAt": "2020-07-02T22:09:43Z", "author": {"login": "ulvii"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSpatialDatatype.java", "diffHunk": "@@ -48,13 +48,32 @@\n     protected int currentFigureIndex = 0;\n     protected int currentSegmentIndex = 0;\n     protected int currentShapeIndex = 0;\n+    protected int currentWKBPointIndex = 0;\n+    protected int currentWKBFigureIndex = 0;\n+    protected int currentWKBSegmentIndex = 0;\n+    protected int currentWKBShapeIndex = 0;\n     protected double xValues[];\n     protected double yValues[];\n     protected double zValues[];\n     protected double mValues[];\n-    protected Figure figures[];\n-    protected Shape shapes[];\n-    protected Segment segments[];\n+    protected Figure figures[] = {};\n+    protected Shape shapes[] = {};\n+    protected Segment segments[] = {};\n+\n+    // WKB properties\n+    protected byte[] wkb;\n+    protected byte endian = 1; // little endian\n+    protected int wkbType;\n+    // Open Geospatial Consortium specifications", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f94461169a72c9a18c9bd8efaf01578ece8b436d"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMDUyMzMx", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#pullrequestreview-442052331", "createdAt": "2020-07-02T22:28:51Z", "commit": {"oid": "f94461169a72c9a18c9bd8efaf01578ece8b436d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMjoyODo1MVrOGserGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMjoyODo1MVrOGserGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI5MzA4MQ==", "bodyText": "Is the returned value little endian only?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#discussion_r449293081", "createdAt": "2020-07-02T22:28:51Z", "author": {"login": "ulvii"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSpatialDatatype.java", "diffHunk": "@@ -48,13 +48,32 @@\n     protected int currentFigureIndex = 0;\n     protected int currentSegmentIndex = 0;\n     protected int currentShapeIndex = 0;\n+    protected int currentWKBPointIndex = 0;\n+    protected int currentWKBFigureIndex = 0;\n+    protected int currentWKBSegmentIndex = 0;\n+    protected int currentWKBShapeIndex = 0;\n     protected double xValues[];\n     protected double yValues[];\n     protected double zValues[];\n     protected double mValues[];\n-    protected Figure figures[];\n-    protected Shape shapes[];\n-    protected Segment segments[];\n+    protected Figure figures[] = {};\n+    protected Shape shapes[] = {};\n+    protected Segment segments[] = {};\n+\n+    // WKB properties\n+    protected byte[] wkb;\n+    protected byte endian = 1; // little endian", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f94461169a72c9a18c9bd8efaf01578ece8b436d"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMDYxMDI2", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#pullrequestreview-442061026", "createdAt": "2020-07-02T22:57:29Z", "commit": {"oid": "f94461169a72c9a18c9bd8efaf01578ece8b436d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMjo1NzoyOVrOGsfJSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMjo1NzoyOVrOGsfJSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwMDgwOQ==", "bodyText": "Need to throw an exception here instead.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#discussion_r449300809", "createdAt": "2020-07-02T22:57:29Z", "author": {"login": "ulvii"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSpatialDatatype.java", "diffHunk": "@@ -184,23 +203,544 @@ protected void serializeToWkb(boolean excludeZMFromWKB, SQLServerSpatialDatatype\n             }\n         }\n \n-        if (excludeZMFromWKB) {\n-            wkbNoZM = buf.array();\n+        if (excludeZMFromCLR) {\n+            clrNoZM = buf.array();\n+        } else {\n+            clr = buf.array();\n+        }\n+    }\n+\n+    /**\n+     * Serializes the Geogemetry/Geography instance to Well-Known binary format.\n+     * \n+     * @param type\n+     *        Type of Spatial Datatype (Geometry/Geography)\n+     */\n+    protected void serializeToWkb(SQLServerSpatialDatatype type) {\n+        ByteBuffer buf = ByteBuffer.allocate(determineWkbCapacity());\n+\n+        /*\n+         * Page 66 of OGC 06-103r3 (https://portal.ogc.org/files/?artifact_id=18241)\n+         * \n+         * Structure of a WKBGeometry/WKBGeography representations\n+         * The basic building block is the representation for a Point, which consists of an x and y axis.\n+         * Other Geometry representations are built using the representations for geometric objects that have already\n+         * been defined.\n+         * \n+         * For example, a LINESTRING(1 2, 3 2) shape is represented in WKB as follows in hex:\n+         * 0x010200000002000000000000000000F03F000000000000004000000000000008400000000000001040\n+         * \n+         * We can break down the above hex like this:\n+         * \n+         * 01 - byte order | one byte | currently representing little endian (big endian is 02)\n+         * 02000000 - Geometry code type 2 | four bytes | currently representing LINESTRING\n+         * 02000000 - 02 | four bytes | currently representing that there are two POINTS in this LINESTRING\n+         * 000000000000F03F0000000000000040 16 bytes, 2 points with x and y axis (1, 2)\n+         * 00000000000008400000000000000040 16 bytes, 2 points with x and y axis (3, 2)\n+         * \n+         * There are geometric objects that contain other geometric objects, such as MULTIPOINT.\n+         * The below logic builds WKB from existing Geometry/Geography object and returns a byte array.\n+         */\n+\n+        buf.order(ByteOrder.LITTLE_ENDIAN);\n+        switch (internalType) {\n+            case POINT:\n+                addPointToBuffer(buf, numberOfPoints);\n+                break;\n+            case LINESTRING:\n+                addLineStringToBuffer(buf, numberOfPoints);\n+                break;\n+            case POLYGON:\n+                addPolygonToBuffer(buf, numberOfFigures);\n+                break;\n+            case MULTIPOINT:\n+                addMultiPointToBuffer(buf, numberOfFigures);\n+                break;\n+            case MULTILINESTRING:\n+                addMultiLineStringToBuffer(buf, numberOfFigures);\n+                break;\n+            case MULTIPOLYGON:\n+                addMultiPolygonToBuffer(buf, numberOfShapes - 1);\n+                break;\n+            case GEOMETRYCOLLECTION:\n+                addGeometryCollectionToBuffer(buf, calculateNumShapesInThisGeometryCollection());\n+                break;\n+            case CIRCULARSTRING:\n+                addCircularStringToBuffer(buf, numberOfPoints);\n+                break;\n+            case COMPOUNDCURVE:\n+                addCompoundCurveToBuffer(buf, calculateNumCurvesInThisFigure());\n+                break;\n+            case CURVEPOLYGON:\n+                addCurvePolygonToBuffer(buf, numberOfFigures);\n+                break;\n+            case FULLGLOBE:\n+                addFullGlobeToBuffer(buf);\n+                break;\n+            default:\n+                // Shouldn't be possible to come here, existing Geometry/Geography doesn't support other cases\n+                break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f94461169a72c9a18c9bd8efaf01578ece8b436d"}, "originalPosition": 198}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMDYyNDYx", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#pullrequestreview-442062461", "createdAt": "2020-07-02T23:02:29Z", "commit": {"oid": "f94461169a72c9a18c9bd8efaf01578ece8b436d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMzowMjozMFrOGsfOrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMzowMjozMFrOGsfOrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwMjE5MQ==", "bodyText": "Same here and in a few other default cases below, instead of ignoring unexpected values, we should throw and exception.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#discussion_r449302191", "createdAt": "2020-07-02T23:02:30Z", "author": {"login": "ulvii"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSpatialDatatype.java", "diffHunk": "@@ -184,23 +203,544 @@ protected void serializeToWkb(boolean excludeZMFromWKB, SQLServerSpatialDatatype\n             }\n         }\n \n-        if (excludeZMFromWKB) {\n-            wkbNoZM = buf.array();\n+        if (excludeZMFromCLR) {\n+            clrNoZM = buf.array();\n+        } else {\n+            clr = buf.array();\n+        }\n+    }\n+\n+    /**\n+     * Serializes the Geogemetry/Geography instance to Well-Known binary format.\n+     * \n+     * @param type\n+     *        Type of Spatial Datatype (Geometry/Geography)\n+     */\n+    protected void serializeToWkb(SQLServerSpatialDatatype type) {\n+        ByteBuffer buf = ByteBuffer.allocate(determineWkbCapacity());\n+\n+        /*\n+         * Page 66 of OGC 06-103r3 (https://portal.ogc.org/files/?artifact_id=18241)\n+         * \n+         * Structure of a WKBGeometry/WKBGeography representations\n+         * The basic building block is the representation for a Point, which consists of an x and y axis.\n+         * Other Geometry representations are built using the representations for geometric objects that have already\n+         * been defined.\n+         * \n+         * For example, a LINESTRING(1 2, 3 2) shape is represented in WKB as follows in hex:\n+         * 0x010200000002000000000000000000F03F000000000000004000000000000008400000000000001040\n+         * \n+         * We can break down the above hex like this:\n+         * \n+         * 01 - byte order | one byte | currently representing little endian (big endian is 02)\n+         * 02000000 - Geometry code type 2 | four bytes | currently representing LINESTRING\n+         * 02000000 - 02 | four bytes | currently representing that there are two POINTS in this LINESTRING\n+         * 000000000000F03F0000000000000040 16 bytes, 2 points with x and y axis (1, 2)\n+         * 00000000000008400000000000000040 16 bytes, 2 points with x and y axis (3, 2)\n+         * \n+         * There are geometric objects that contain other geometric objects, such as MULTIPOINT.\n+         * The below logic builds WKB from existing Geometry/Geography object and returns a byte array.\n+         */\n+\n+        buf.order(ByteOrder.LITTLE_ENDIAN);\n+        switch (internalType) {\n+            case POINT:\n+                addPointToBuffer(buf, numberOfPoints);\n+                break;\n+            case LINESTRING:\n+                addLineStringToBuffer(buf, numberOfPoints);\n+                break;\n+            case POLYGON:\n+                addPolygonToBuffer(buf, numberOfFigures);\n+                break;\n+            case MULTIPOINT:\n+                addMultiPointToBuffer(buf, numberOfFigures);\n+                break;\n+            case MULTILINESTRING:\n+                addMultiLineStringToBuffer(buf, numberOfFigures);\n+                break;\n+            case MULTIPOLYGON:\n+                addMultiPolygonToBuffer(buf, numberOfShapes - 1);\n+                break;\n+            case GEOMETRYCOLLECTION:\n+                addGeometryCollectionToBuffer(buf, calculateNumShapesInThisGeometryCollection());\n+                break;\n+            case CIRCULARSTRING:\n+                addCircularStringToBuffer(buf, numberOfPoints);\n+                break;\n+            case COMPOUNDCURVE:\n+                addCompoundCurveToBuffer(buf, calculateNumCurvesInThisFigure());\n+                break;\n+            case CURVEPOLYGON:\n+                addCurvePolygonToBuffer(buf, numberOfFigures);\n+                break;\n+            case FULLGLOBE:\n+                addFullGlobeToBuffer(buf);\n+                break;\n+            default:\n+                // Shouldn't be possible to come here, existing Geometry/Geography doesn't support other cases\n+                break;\n+        }\n+\n+        wkb = buf.array();\n+    }\n+\n+    private void addPointToBuffer(ByteBuffer buf, int numberOfPoints) {\n+        buf.put(endian);\n+        // handle special case where POINT EMPTY\n+        if (numberOfPoints == 0) {\n+            buf.putInt(InternalSpatialDatatype.MULTIPOINT.getTypeCode());\n+            buf.putInt(numberOfPoints);\n+        } else {\n+            buf.putInt(InternalSpatialDatatype.POINT.getTypeCode());\n+            addCoordinateToBuffer(buf, numberOfPoints);\n+            currentWKBFigureIndex++;\n+        }\n+    }\n+\n+    private void addLineStringToBuffer(ByteBuffer buf, int numberOfPoints) {\n+        buf.put(endian);\n+        buf.putInt(InternalSpatialDatatype.LINESTRING.getTypeCode());\n+        buf.putInt(numberOfPoints);\n+        addCoordinateToBuffer(buf, numberOfPoints);\n+        if (numberOfPoints > 0) {\n+            currentWKBFigureIndex++;\n+        }\n+    }\n+\n+    private void addPolygonToBuffer(ByteBuffer buf, int numberOfFigures) {\n+        buf.put(endian);\n+        buf.putInt(InternalSpatialDatatype.POLYGON.getTypeCode());\n+        buf.putInt(numberOfFigures);\n+        addStructureToBuffer(buf, numberOfFigures, InternalSpatialDatatype.POLYGON);\n+    }\n+\n+    private void addMultiPointToBuffer(ByteBuffer buf, int numberOfFigures) {\n+        buf.put(endian);\n+        buf.putInt(InternalSpatialDatatype.MULTIPOINT.getTypeCode());\n+        buf.putInt(numberOfFigures);\n+        addStructureToBuffer(buf, numberOfFigures, InternalSpatialDatatype.MULTIPOINT);\n+    }\n+\n+    private void addMultiLineStringToBuffer(ByteBuffer buf, int numberOfFigures) {\n+        buf.put(endian);\n+        buf.putInt(InternalSpatialDatatype.MULTILINESTRING.getTypeCode());\n+        buf.putInt(numberOfFigures);\n+        addStructureToBuffer(buf, numberOfFigures, InternalSpatialDatatype.MULTILINESTRING);\n+    }\n+\n+    private void addMultiPolygonToBuffer(ByteBuffer buf, int numberOfShapes) {\n+        buf.put(endian);\n+        buf.putInt(InternalSpatialDatatype.MULTIPOLYGON.getTypeCode());\n+        buf.putInt(numberOfShapes);\n+        // increment shape index by 1 because the first shape is always itself, which we don't need.\n+        currentWKBShapeIndex++;\n+        addStructureToBuffer(buf, numberOfShapes, InternalSpatialDatatype.MULTIPOLYGON);\n+    }\n+\n+    private void addCircularStringToBuffer(ByteBuffer buf, int numberOfPoints) {\n+        buf.put(endian);\n+        buf.putInt(InternalSpatialDatatype.CIRCULARSTRING.getTypeCode());\n+        buf.putInt(numberOfPoints);\n+        addCoordinateToBuffer(buf, numberOfPoints);\n+        if (numberOfPoints > 0) {\n+            currentWKBFigureIndex++;\n+        }\n+    }\n+\n+    private void addCompoundCurveToBuffer(ByteBuffer buf, int numberOfCurves) {\n+        buf.put(endian);\n+        buf.putInt(InternalSpatialDatatype.COMPOUNDCURVE.getTypeCode());\n+        buf.putInt(numberOfCurves);\n+        addStructureToBuffer(buf, numberOfCurves, InternalSpatialDatatype.COMPOUNDCURVE);\n+        if (numberOfCurves > 0) {\n+            currentWKBFigureIndex++;\n+        }\n+    }\n+\n+    private void addCurvePolygonToBuffer(ByteBuffer buf, int numberOfFigures) {\n+        buf.put(endian);\n+        buf.putInt(InternalSpatialDatatype.CURVEPOLYGON.getTypeCode());\n+        buf.putInt(numberOfFigures);\n+        for (int i = 0; i < numberOfFigures; i++) {\n+            switch (figures[currentWKBFigureIndex].getFiguresAttribute()) {\n+                case FA_LINE:\n+                    addStructureToBuffer(buf, 1, InternalSpatialDatatype.LINESTRING);\n+                    break;\n+                case FA_ARC:\n+                    addStructureToBuffer(buf, 1, InternalSpatialDatatype.CIRCULARSTRING);\n+                    break;\n+                case FA_COMPOSITE_CURVE:\n+                    int numCurvesInThisFigure = calculateNumCurvesInThisFigure();\n+                    buf.put(endian);\n+                    buf.putInt(InternalSpatialDatatype.COMPOUNDCURVE.getTypeCode());\n+                    buf.putInt(numCurvesInThisFigure);\n+                    addStructureToBuffer(buf, numCurvesInThisFigure, InternalSpatialDatatype.COMPOUNDCURVE);\n+                    currentWKBFigureIndex++;\n+                    break;\n+                default:\n+                    // Shouldn't be possible to come here, existing Geometry/Geography doesn't support other cases\n+                    break;\n+            }\n+        }\n+    }\n+\n+    private void addGeometryCollectionToBuffer(ByteBuffer buf, int numberOfRemainingGeometries) {\n+        buf.put(endian);\n+        buf.putInt(internalType.getTypeCode());\n+        buf.putInt(numberOfRemainingGeometries);\n+        // increment shape index by 1 because the first shape is always itself, which we don't need.\n+        currentWKBShapeIndex++;\n+        while (numberOfRemainingGeometries > 0) {\n+            switch (InternalSpatialDatatype.valueOf(shapes[currentWKBShapeIndex].getOpenGISType())) {\n+                case POINT:\n+                    if (shapes[currentWKBShapeIndex].getFigureOffset() == -1) {\n+                        addPointToBuffer(buf, 0);\n+                    } else {\n+                        addPointToBuffer(buf, calculateNumPointsInThisFigure());\n+                    }\n+                    currentWKBShapeIndex++;\n+                    break;\n+                case LINESTRING:\n+                    if (shapes[currentWKBShapeIndex].getFigureOffset() == -1) {\n+                        addLineStringToBuffer(buf, 0);\n+                    } else {\n+                        addLineStringToBuffer(buf, calculateNumPointsInThisFigure());\n+                    }\n+                    currentWKBShapeIndex++;\n+                    break;\n+                case POLYGON:\n+                    if (shapes[currentWKBShapeIndex].getFigureOffset() == -1) {\n+                        addPolygonToBuffer(buf, 0);\n+                    } else {\n+                        addPolygonToBuffer(buf, calculateNumFiguresInThisShape(false));\n+                    }\n+                    currentWKBShapeIndex++;\n+                    break;\n+                case MULTIPOINT:\n+                    if (shapes[currentWKBShapeIndex].getFigureOffset() == -1) {\n+                        addMultiPointToBuffer(buf, 0);\n+                    } else {\n+                        addMultiPointToBuffer(buf, calculateNumFiguresInThisShape(true));\n+                    }\n+                    currentWKBShapeIndex++;\n+                    break;\n+                case MULTILINESTRING:\n+                    if (shapes[currentWKBShapeIndex].getFigureOffset() == -1) {\n+                        addMultiLineStringToBuffer(buf, 0);\n+                    } else {\n+                        addMultiLineStringToBuffer(buf, calculateNumFiguresInThisShape(true));\n+                    }\n+                    currentWKBShapeIndex++;\n+                    break;\n+                case MULTIPOLYGON:\n+                    /*\n+                     * increment WKBShapeIndex for all shapes except for GeometryCollection and Multipolygon, since\n+                     * their shape index was incremented earlier to be used for calculation.\n+                     */\n+                    if (shapes[currentWKBShapeIndex].getFigureOffset() == -1) {\n+                        addMultiPolygonToBuffer(buf, 0);\n+                    } else {\n+                        addMultiPolygonToBuffer(buf, calculateNumShapesInThisMultiPolygon());\n+                    }\n+                    break;\n+                case GEOMETRYCOLLECTION:\n+                    if (shapes[currentWKBShapeIndex].getFigureOffset() == -1) {\n+                        addGeometryCollectionToBuffer(buf, 0);\n+                    } else {\n+                        addGeometryCollectionToBuffer(buf, calculateNumShapesInThisGeometryCollection());\n+                    }\n+                    break;\n+                case CIRCULARSTRING:\n+                    if (shapes[currentWKBShapeIndex].getFigureOffset() == -1) {\n+                        addCircularStringToBuffer(buf, 0);\n+                    } else {\n+                        addCircularStringToBuffer(buf, calculateNumPointsInThisFigure());\n+                    }\n+                    currentWKBShapeIndex++;\n+                    break;\n+                case COMPOUNDCURVE:\n+                    if (shapes[currentWKBShapeIndex].getFigureOffset() == -1) {\n+                        addCompoundCurveToBuffer(buf, 0);\n+                    } else {\n+                        addCompoundCurveToBuffer(buf, calculateNumCurvesInThisFigure());\n+                    }\n+                    currentWKBShapeIndex++;\n+                    break;\n+                case CURVEPOLYGON:\n+                    if (shapes[currentWKBShapeIndex].getFigureOffset() == -1) {\n+                        addCurvePolygonToBuffer(buf, 0);\n+                    } else {\n+                        addCurvePolygonToBuffer(buf, calculateNumFiguresInThisShape(false));\n+                    }\n+                    currentWKBShapeIndex++;\n+                    break;\n+                default:\n+                    // Shouldn't be possible to come here, existing Geometry/Geography doesn't support other cases", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f94461169a72c9a18c9bd8efaf01578ece8b436d"}, "originalPosition": 395}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMDcxNTM2", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#pullrequestreview-442071536", "createdAt": "2020-07-02T23:36:33Z", "commit": {"oid": "f94461169a72c9a18c9bd8efaf01578ece8b436d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMzozNjozM1rOGsftnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMzozNjozM1rOGsftnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMxMDEwOA==", "bodyText": "Can you add comment explaining what this block does?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#discussion_r449310108", "createdAt": "2020-07-02T23:36:33Z", "author": {"login": "ulvii"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSpatialDatatype.java", "diffHunk": "@@ -184,23 +203,544 @@ protected void serializeToWkb(boolean excludeZMFromWKB, SQLServerSpatialDatatype\n             }\n         }\n \n-        if (excludeZMFromWKB) {\n-            wkbNoZM = buf.array();\n+        if (excludeZMFromCLR) {\n+            clrNoZM = buf.array();\n+        } else {\n+            clr = buf.array();\n+        }\n+    }\n+\n+    /**\n+     * Serializes the Geogemetry/Geography instance to Well-Known binary format.\n+     * \n+     * @param type\n+     *        Type of Spatial Datatype (Geometry/Geography)\n+     */\n+    protected void serializeToWkb(SQLServerSpatialDatatype type) {\n+        ByteBuffer buf = ByteBuffer.allocate(determineWkbCapacity());\n+\n+        /*\n+         * Page 66 of OGC 06-103r3 (https://portal.ogc.org/files/?artifact_id=18241)\n+         * \n+         * Structure of a WKBGeometry/WKBGeography representations\n+         * The basic building block is the representation for a Point, which consists of an x and y axis.\n+         * Other Geometry representations are built using the representations for geometric objects that have already\n+         * been defined.\n+         * \n+         * For example, a LINESTRING(1 2, 3 2) shape is represented in WKB as follows in hex:\n+         * 0x010200000002000000000000000000F03F000000000000004000000000000008400000000000001040\n+         * \n+         * We can break down the above hex like this:\n+         * \n+         * 01 - byte order | one byte | currently representing little endian (big endian is 02)\n+         * 02000000 - Geometry code type 2 | four bytes | currently representing LINESTRING\n+         * 02000000 - 02 | four bytes | currently representing that there are two POINTS in this LINESTRING\n+         * 000000000000F03F0000000000000040 16 bytes, 2 points with x and y axis (1, 2)\n+         * 00000000000008400000000000000040 16 bytes, 2 points with x and y axis (3, 2)\n+         * \n+         * There are geometric objects that contain other geometric objects, such as MULTIPOINT.\n+         * The below logic builds WKB from existing Geometry/Geography object and returns a byte array.\n+         */\n+\n+        buf.order(ByteOrder.LITTLE_ENDIAN);\n+        switch (internalType) {\n+            case POINT:\n+                addPointToBuffer(buf, numberOfPoints);\n+                break;\n+            case LINESTRING:\n+                addLineStringToBuffer(buf, numberOfPoints);\n+                break;\n+            case POLYGON:\n+                addPolygonToBuffer(buf, numberOfFigures);\n+                break;\n+            case MULTIPOINT:\n+                addMultiPointToBuffer(buf, numberOfFigures);\n+                break;\n+            case MULTILINESTRING:\n+                addMultiLineStringToBuffer(buf, numberOfFigures);\n+                break;\n+            case MULTIPOLYGON:\n+                addMultiPolygonToBuffer(buf, numberOfShapes - 1);\n+                break;\n+            case GEOMETRYCOLLECTION:\n+                addGeometryCollectionToBuffer(buf, calculateNumShapesInThisGeometryCollection());\n+                break;\n+            case CIRCULARSTRING:\n+                addCircularStringToBuffer(buf, numberOfPoints);\n+                break;\n+            case COMPOUNDCURVE:\n+                addCompoundCurveToBuffer(buf, calculateNumCurvesInThisFigure());\n+                break;\n+            case CURVEPOLYGON:\n+                addCurvePolygonToBuffer(buf, numberOfFigures);\n+                break;\n+            case FULLGLOBE:\n+                addFullGlobeToBuffer(buf);\n+                break;\n+            default:\n+                // Shouldn't be possible to come here, existing Geometry/Geography doesn't support other cases\n+                break;\n+        }\n+\n+        wkb = buf.array();\n+    }\n+\n+    private void addPointToBuffer(ByteBuffer buf, int numberOfPoints) {\n+        buf.put(endian);\n+        // handle special case where POINT EMPTY\n+        if (numberOfPoints == 0) {\n+            buf.putInt(InternalSpatialDatatype.MULTIPOINT.getTypeCode());\n+            buf.putInt(numberOfPoints);\n+        } else {\n+            buf.putInt(InternalSpatialDatatype.POINT.getTypeCode());\n+            addCoordinateToBuffer(buf, numberOfPoints);\n+            currentWKBFigureIndex++;\n+        }\n+    }\n+\n+    private void addLineStringToBuffer(ByteBuffer buf, int numberOfPoints) {\n+        buf.put(endian);\n+        buf.putInt(InternalSpatialDatatype.LINESTRING.getTypeCode());\n+        buf.putInt(numberOfPoints);\n+        addCoordinateToBuffer(buf, numberOfPoints);\n+        if (numberOfPoints > 0) {\n+            currentWKBFigureIndex++;\n+        }\n+    }\n+\n+    private void addPolygonToBuffer(ByteBuffer buf, int numberOfFigures) {\n+        buf.put(endian);\n+        buf.putInt(InternalSpatialDatatype.POLYGON.getTypeCode());\n+        buf.putInt(numberOfFigures);\n+        addStructureToBuffer(buf, numberOfFigures, InternalSpatialDatatype.POLYGON);\n+    }\n+\n+    private void addMultiPointToBuffer(ByteBuffer buf, int numberOfFigures) {\n+        buf.put(endian);\n+        buf.putInt(InternalSpatialDatatype.MULTIPOINT.getTypeCode());\n+        buf.putInt(numberOfFigures);\n+        addStructureToBuffer(buf, numberOfFigures, InternalSpatialDatatype.MULTIPOINT);\n+    }\n+\n+    private void addMultiLineStringToBuffer(ByteBuffer buf, int numberOfFigures) {\n+        buf.put(endian);\n+        buf.putInt(InternalSpatialDatatype.MULTILINESTRING.getTypeCode());\n+        buf.putInt(numberOfFigures);\n+        addStructureToBuffer(buf, numberOfFigures, InternalSpatialDatatype.MULTILINESTRING);\n+    }\n+\n+    private void addMultiPolygonToBuffer(ByteBuffer buf, int numberOfShapes) {\n+        buf.put(endian);\n+        buf.putInt(InternalSpatialDatatype.MULTIPOLYGON.getTypeCode());\n+        buf.putInt(numberOfShapes);\n+        // increment shape index by 1 because the first shape is always itself, which we don't need.\n+        currentWKBShapeIndex++;\n+        addStructureToBuffer(buf, numberOfShapes, InternalSpatialDatatype.MULTIPOLYGON);\n+    }\n+\n+    private void addCircularStringToBuffer(ByteBuffer buf, int numberOfPoints) {\n+        buf.put(endian);\n+        buf.putInt(InternalSpatialDatatype.CIRCULARSTRING.getTypeCode());\n+        buf.putInt(numberOfPoints);\n+        addCoordinateToBuffer(buf, numberOfPoints);\n+        if (numberOfPoints > 0) {\n+            currentWKBFigureIndex++;\n+        }\n+    }\n+\n+    private void addCompoundCurveToBuffer(ByteBuffer buf, int numberOfCurves) {\n+        buf.put(endian);\n+        buf.putInt(InternalSpatialDatatype.COMPOUNDCURVE.getTypeCode());\n+        buf.putInt(numberOfCurves);\n+        addStructureToBuffer(buf, numberOfCurves, InternalSpatialDatatype.COMPOUNDCURVE);\n+        if (numberOfCurves > 0) {\n+            currentWKBFigureIndex++;\n+        }\n+    }\n+\n+    private void addCurvePolygonToBuffer(ByteBuffer buf, int numberOfFigures) {\n+        buf.put(endian);\n+        buf.putInt(InternalSpatialDatatype.CURVEPOLYGON.getTypeCode());\n+        buf.putInt(numberOfFigures);\n+        for (int i = 0; i < numberOfFigures; i++) {\n+            switch (figures[currentWKBFigureIndex].getFiguresAttribute()) {\n+                case FA_LINE:\n+                    addStructureToBuffer(buf, 1, InternalSpatialDatatype.LINESTRING);\n+                    break;\n+                case FA_ARC:\n+                    addStructureToBuffer(buf, 1, InternalSpatialDatatype.CIRCULARSTRING);\n+                    break;\n+                case FA_COMPOSITE_CURVE:\n+                    int numCurvesInThisFigure = calculateNumCurvesInThisFigure();\n+                    buf.put(endian);\n+                    buf.putInt(InternalSpatialDatatype.COMPOUNDCURVE.getTypeCode());\n+                    buf.putInt(numCurvesInThisFigure);\n+                    addStructureToBuffer(buf, numCurvesInThisFigure, InternalSpatialDatatype.COMPOUNDCURVE);\n+                    currentWKBFigureIndex++;\n+                    break;\n+                default:\n+                    // Shouldn't be possible to come here, existing Geometry/Geography doesn't support other cases\n+                    break;\n+            }\n+        }\n+    }\n+\n+    private void addGeometryCollectionToBuffer(ByteBuffer buf, int numberOfRemainingGeometries) {\n+        buf.put(endian);\n+        buf.putInt(internalType.getTypeCode());\n+        buf.putInt(numberOfRemainingGeometries);\n+        // increment shape index by 1 because the first shape is always itself, which we don't need.\n+        currentWKBShapeIndex++;\n+        while (numberOfRemainingGeometries > 0) {\n+            switch (InternalSpatialDatatype.valueOf(shapes[currentWKBShapeIndex].getOpenGISType())) {\n+                case POINT:\n+                    if (shapes[currentWKBShapeIndex].getFigureOffset() == -1) {\n+                        addPointToBuffer(buf, 0);\n+                    } else {\n+                        addPointToBuffer(buf, calculateNumPointsInThisFigure());\n+                    }\n+                    currentWKBShapeIndex++;\n+                    break;\n+                case LINESTRING:\n+                    if (shapes[currentWKBShapeIndex].getFigureOffset() == -1) {\n+                        addLineStringToBuffer(buf, 0);\n+                    } else {\n+                        addLineStringToBuffer(buf, calculateNumPointsInThisFigure());\n+                    }\n+                    currentWKBShapeIndex++;\n+                    break;\n+                case POLYGON:\n+                    if (shapes[currentWKBShapeIndex].getFigureOffset() == -1) {\n+                        addPolygonToBuffer(buf, 0);\n+                    } else {\n+                        addPolygonToBuffer(buf, calculateNumFiguresInThisShape(false));\n+                    }\n+                    currentWKBShapeIndex++;\n+                    break;\n+                case MULTIPOINT:\n+                    if (shapes[currentWKBShapeIndex].getFigureOffset() == -1) {\n+                        addMultiPointToBuffer(buf, 0);\n+                    } else {\n+                        addMultiPointToBuffer(buf, calculateNumFiguresInThisShape(true));\n+                    }\n+                    currentWKBShapeIndex++;\n+                    break;\n+                case MULTILINESTRING:\n+                    if (shapes[currentWKBShapeIndex].getFigureOffset() == -1) {\n+                        addMultiLineStringToBuffer(buf, 0);\n+                    } else {\n+                        addMultiLineStringToBuffer(buf, calculateNumFiguresInThisShape(true));\n+                    }\n+                    currentWKBShapeIndex++;\n+                    break;\n+                case MULTIPOLYGON:\n+                    /*\n+                     * increment WKBShapeIndex for all shapes except for GeometryCollection and Multipolygon, since\n+                     * their shape index was incremented earlier to be used for calculation.\n+                     */\n+                    if (shapes[currentWKBShapeIndex].getFigureOffset() == -1) {\n+                        addMultiPolygonToBuffer(buf, 0);\n+                    } else {\n+                        addMultiPolygonToBuffer(buf, calculateNumShapesInThisMultiPolygon());\n+                    }\n+                    break;\n+                case GEOMETRYCOLLECTION:\n+                    if (shapes[currentWKBShapeIndex].getFigureOffset() == -1) {\n+                        addGeometryCollectionToBuffer(buf, 0);\n+                    } else {\n+                        addGeometryCollectionToBuffer(buf, calculateNumShapesInThisGeometryCollection());\n+                    }\n+                    break;\n+                case CIRCULARSTRING:\n+                    if (shapes[currentWKBShapeIndex].getFigureOffset() == -1) {\n+                        addCircularStringToBuffer(buf, 0);\n+                    } else {\n+                        addCircularStringToBuffer(buf, calculateNumPointsInThisFigure());\n+                    }\n+                    currentWKBShapeIndex++;\n+                    break;\n+                case COMPOUNDCURVE:\n+                    if (shapes[currentWKBShapeIndex].getFigureOffset() == -1) {\n+                        addCompoundCurveToBuffer(buf, 0);\n+                    } else {\n+                        addCompoundCurveToBuffer(buf, calculateNumCurvesInThisFigure());\n+                    }\n+                    currentWKBShapeIndex++;\n+                    break;\n+                case CURVEPOLYGON:\n+                    if (shapes[currentWKBShapeIndex].getFigureOffset() == -1) {\n+                        addCurvePolygonToBuffer(buf, 0);\n+                    } else {\n+                        addCurvePolygonToBuffer(buf, calculateNumFiguresInThisShape(false));\n+                    }\n+                    currentWKBShapeIndex++;\n+                    break;\n+                default:\n+                    // Shouldn't be possible to come here, existing Geometry/Geography doesn't support other cases\n+                    break;\n+            }\n+            numberOfRemainingGeometries--;\n+        }\n+    }\n+\n+    private void addFullGlobeToBuffer(ByteBuffer buf) {\n+        buf.put(endian);\n+        buf.putInt(WKB_FULLGLOBE_CODE);\n+    }\n+\n+    private void addCoordinateToBuffer(ByteBuffer buf, int numPoint) {\n+        while (numPoint > 0) {\n+            buf.putDouble(xValues[currentWKBPointIndex]);\n+            buf.putDouble(yValues[currentWKBPointIndex]);\n+            currentWKBPointIndex++;\n+            numPoint--;\n+        }\n+    }\n+\n+    private void addStructureToBuffer(ByteBuffer buf, int remainingStructureCount,\n+            InternalSpatialDatatype internalParentType) {\n+        int originalRemainingStructureCount = remainingStructureCount;\n+        while (remainingStructureCount > 0) {\n+            int numPointsInThisFigure = calculateNumPointsInThisFigure();\n+            switch (internalParentType) {\n+                case LINESTRING:\n+                    buf.put(endian);\n+                    buf.putInt(InternalSpatialDatatype.LINESTRING.getTypeCode());\n+                    buf.putInt(numPointsInThisFigure);\n+                    addCoordinateToBuffer(buf, numPointsInThisFigure);\n+                    currentWKBFigureIndex++;\n+                    break;\n+                case POLYGON:\n+                    buf.putInt(numPointsInThisFigure);\n+                    addCoordinateToBuffer(buf, numPointsInThisFigure);\n+                    currentWKBFigureIndex++;\n+                    break;\n+                case MULTIPOINT:\n+                    buf.put(endian);\n+                    buf.putInt(InternalSpatialDatatype.POINT.getTypeCode());\n+                    addCoordinateToBuffer(buf, 1);\n+                    currentWKBFigureIndex++;\n+                    currentWKBShapeIndex++;\n+                    break;\n+                case MULTILINESTRING:\n+                    buf.put(endian);\n+                    buf.putInt(InternalSpatialDatatype.LINESTRING.getTypeCode());\n+                    buf.putInt(numPointsInThisFigure);\n+                    addCoordinateToBuffer(buf, numPointsInThisFigure);\n+                    currentWKBFigureIndex++;\n+                    currentWKBShapeIndex++;\n+                    break;\n+                case MULTIPOLYGON:\n+                    int numFiguresInThisShape = calculateNumFiguresInThisShape(false);\n+                    buf.put(endian);\n+                    buf.putInt(InternalSpatialDatatype.POLYGON.getTypeCode());\n+                    buf.putInt(numFiguresInThisShape);\n+                    addStructureToBuffer(buf, numFiguresInThisShape, InternalSpatialDatatype.POLYGON);\n+                    currentWKBShapeIndex++;\n+                    break;\n+                case CIRCULARSTRING:\n+                    buf.put(endian);\n+                    buf.putInt(InternalSpatialDatatype.CIRCULARSTRING.getTypeCode());\n+                    buf.putInt(numPointsInThisFigure);\n+                    addCoordinateToBuffer(buf, numPointsInThisFigure);\n+                    currentWKBFigureIndex++;\n+                    break;\n+                case COMPOUNDCURVE:\n+                    /*\n+                     * COMPOUNDCURVEs are made of these four types of segments:\n+                     * SEGMENT_FIRST_ARC\n+                     * - It's a circularstring. It has 3 points and signals the beginning of an arc.\n+                     * SEGMENT_FIRST_LINE\n+                     * - It's a linestring. It has 2 points and signals the beginning of a line.\n+                     * SEGMENT_ARC\n+                     * - It only comes after SEGMENT_FIRST_ARC or other SEGMENT_ARCs. Adds 2 points each.\n+                     * SEGMENT_LINE\n+                     * - It only comes after SEGMENT_FIRST_LINE or other SEGMENT_LINE. Adds 1 point each.\n+                     * \n+                     * The FIRST_ARCs and FIRST_LINEs are considered as a full geometric object by WKB\n+                     * and it takes up a header spot, so we need to calculate how many of these occur\n+                     * in a compoundcurve and handle them individually. On the other hand, SEGMENT_ARCs\n+                     * and SEGMENT_LINEs only add up additional points.\n+                     * \n+                     */\n+                    if (segments[currentWKBSegmentIndex].getSegmentType() == SEGMENT_FIRST_ARC) {\n+                        int numberOfPointsInStructure = 3;\n+                        currentWKBSegmentIndex++;\n+                        while (currentWKBSegmentIndex < segments.length\n+                                && segments[currentWKBSegmentIndex].getSegmentType() != SEGMENT_FIRST_ARC\n+                                && segments[currentWKBSegmentIndex].getSegmentType() != SEGMENT_FIRST_LINE) {\n+                            numberOfPointsInStructure = numberOfPointsInStructure + 2;\n+                            currentWKBSegmentIndex++;\n+                        }\n+                        buf.put(endian);\n+                        buf.putInt(InternalSpatialDatatype.CIRCULARSTRING.getTypeCode());\n+                        buf.putInt(numberOfPointsInStructure);\n+                        if (originalRemainingStructureCount != remainingStructureCount) {\n+                            currentWKBPointIndex--;\n+                        }\n+                        addCoordinateToBuffer(buf, numberOfPointsInStructure);\n+                    } else if (segments[currentWKBSegmentIndex].getSegmentType() == SEGMENT_FIRST_LINE) {\n+                        int numberOfPointsInStructure = 2;\n+                        currentWKBSegmentIndex++;\n+                        while (currentWKBSegmentIndex < segments.length\n+                                && segments[currentWKBSegmentIndex].getSegmentType() != SEGMENT_FIRST_ARC\n+                                && segments[currentWKBSegmentIndex].getSegmentType() != SEGMENT_FIRST_LINE) {\n+                            numberOfPointsInStructure++;\n+                            currentWKBSegmentIndex++;\n+                        }\n+                        buf.put(endian);\n+                        buf.putInt(InternalSpatialDatatype.LINESTRING.getTypeCode());\n+                        buf.putInt(numberOfPointsInStructure);\n+                        if (originalRemainingStructureCount != remainingStructureCount) {\n+                            currentWKBPointIndex--;\n+                        }\n+                        addCoordinateToBuffer(buf, numberOfPointsInStructure);\n+                    } else {\n+                        // CompoundCurves should start with first arc or first line, it should not come here\n+                        break;\n+                    }\n+                    break;\n+                default:\n+                    // Shouldn't be possible to come here, existing Geometry/Geography doesn't support other cases\n+                    break;\n+            }\n+            remainingStructureCount--;\n+        }\n+    }\n+\n+    private int calculateNumPointsInThisFigure() {\n+        if (figures.length == 0) {\n+            return 0;\n+        }\n+\n+        return (currentWKBFigureIndex == figures.length - 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f94461169a72c9a18c9bd8efaf01578ece8b436d"}, "originalPosition": 532}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMDc2OTAw", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#pullrequestreview-442076900", "createdAt": "2020-07-02T23:57:30Z", "commit": {"oid": "f94461169a72c9a18c9bd8efaf01578ece8b436d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMzo1NzozMFrOGsgAVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMzo1NzozMFrOGsgAVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMxNDkwMg==", "bodyText": "testEmptyPoint() is better name?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#discussion_r449314902", "createdAt": "2020-07-02T23:57:30Z", "author": {"login": "ulvii"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/datatypes/SQLServerSpatialDatatypeTest.java", "diffHunk": "@@ -51,141 +52,1161 @@\n     static boolean isDenaliOrLater = false;\n \n     @Test\n-    public void testPointWkb() throws SQLException {\n+    public void testPoint() throws SQLException {\n         String geoWKT = \"POINT(3 40 5 6)\";\n-        byte[] geomWKB = hexStringToByteArray(\n+        byte[] geomCLR = hexStringToByteArray(\n                 \"00000000010F0000000000000840000000000000444000000000000014400000000000001840\");\n-        byte[] geogWKB = hexStringToByteArray(\n+        byte[] geogCLR = hexStringToByteArray(\n                 \"E6100000010F0000000000004440000000000000084000000000000014400000000000001840\");\n-        Geometry geomWKT = Geometry.deserialize(geomWKB);\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n+        byte[] geoWKB = hexStringToByteArray(\"010100000000000000000008400000000000004440\");\n+        Geometry geomWKT = Geometry.deserialize(geomCLR);\n+        Geography geogWKT = Geography.deserialize(geogCLR);\n+        assertEquals(geomWKT.asTextZM(), geoWKT);\n+        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        assertTrue(Arrays.equals(geomWKT.STAsBinary(), geoWKB));\n+        assertTrue(Arrays.equals(geogWKT.STAsBinary(), geoWKB));\n+    }\n+\n+    @Test\n+    public void testPoint2() throws SQLException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f94461169a72c9a18c9bd8efaf01578ece8b436d"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMDc3OTQz", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#pullrequestreview-442077943", "createdAt": "2020-07-03T00:01:44Z", "commit": {"oid": "f94461169a72c9a18c9bd8efaf01578ece8b436d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMDowMTo0NFrOGsgERA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMDowMTo0NFrOGsgERA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMxNTkwOA==", "bodyText": "testPolygonEmpty()", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#discussion_r449315908", "createdAt": "2020-07-03T00:01:44Z", "author": {"login": "ulvii"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/datatypes/SQLServerSpatialDatatypeTest.java", "diffHunk": "@@ -51,141 +52,1161 @@\n     static boolean isDenaliOrLater = false;\n \n     @Test\n-    public void testPointWkb() throws SQLException {\n+    public void testPoint() throws SQLException {\n         String geoWKT = \"POINT(3 40 5 6)\";\n-        byte[] geomWKB = hexStringToByteArray(\n+        byte[] geomCLR = hexStringToByteArray(\n                 \"00000000010F0000000000000840000000000000444000000000000014400000000000001840\");\n-        byte[] geogWKB = hexStringToByteArray(\n+        byte[] geogCLR = hexStringToByteArray(\n                 \"E6100000010F0000000000004440000000000000084000000000000014400000000000001840\");\n-        Geometry geomWKT = Geometry.deserialize(geomWKB);\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n+        byte[] geoWKB = hexStringToByteArray(\"010100000000000000000008400000000000004440\");\n+        Geometry geomWKT = Geometry.deserialize(geomCLR);\n+        Geography geogWKT = Geography.deserialize(geogCLR);\n+        assertEquals(geomWKT.asTextZM(), geoWKT);\n+        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        assertTrue(Arrays.equals(geomWKT.STAsBinary(), geoWKB));\n+        assertTrue(Arrays.equals(geogWKT.STAsBinary(), geoWKB));\n+    }\n+\n+    @Test\n+    public void testPoint2() throws SQLException {\n+        String geoWKT = \"POINT EMPTY\";\n+        byte[] geomCLR = hexStringToByteArray(\"407100000104000000000000000001000000FFFFFFFFFFFFFFFF01\");\n+        byte[] geogCLR = hexStringToByteArray(\"E61000000104000000000000000001000000FFFFFFFFFFFFFFFF01\");\n+        byte[] geoWKB = hexStringToByteArray(\"010400000000000000\");\n+        Geometry geomWKT = Geometry.deserialize(geomCLR);\n+        Geography geogWKT = Geography.deserialize(geogCLR);\n         assertEquals(geomWKT.asTextZM(), geoWKT);\n         assertEquals(geogWKT.asTextZM(), geoWKT);\n+        assertTrue(Arrays.equals(geomWKT.STAsBinary(), geoWKB));\n+        assertTrue(Arrays.equals(geogWKT.STAsBinary(), geoWKB));\n     }\n \n     @Test\n-    public void testLineStringWkb() throws SQLException {\n+    public void testLineString() throws SQLException {\n         String geoWKT = \"LINESTRING(1 0, 0 1, -1 0)\";\n-        byte[] geomWKB = hexStringToByteArray(\n+        byte[] geomCLR = hexStringToByteArray(\n                 \"00000000010403000000000000000000F03F00000000000000000000000000000000000000000000F03F000000000000F0BF000000000000000001000000010000000001000000FFFFFFFF0000000002\");\n-        byte[] geogWKB = hexStringToByteArray(\n+        byte[] geogCLR = hexStringToByteArray(\n                 \"E61000000104030000000000000000000000000000000000F03F000000000000F03F00000000000000000000000000000000000000000000F0BF01000000010000000001000000FFFFFFFF0000000002\");\n-        Geometry geomWKT = Geometry.deserialize(geomWKB);\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"010200000003000000000000000000F03F00000000000000000000000000000000000000000000F03F000000000000F0BF0000000000000000\");\n+        Geometry geomWKT = Geometry.deserialize(geomCLR);\n+        Geography geogWKT = Geography.deserialize(geogCLR);\n+        assertEquals(geomWKT.asTextZM(), geoWKT);\n+        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        assertTrue(Arrays.equals(geomWKT.STAsBinary(), geoWKB));\n+        assertTrue(Arrays.equals(geogWKT.STAsBinary(), geoWKB));\n+    }\n+\n+    @Test\n+    public void testLineString2() throws SQLException {\n+        String geoWKT = \"LINESTRING EMPTY\";\n+        byte[] geomCLR = hexStringToByteArray(\"FFFF00000104000000000000000001000000FFFFFFFFFFFFFFFF02\");\n+        byte[] geogCLR = hexStringToByteArray(\"E61000000104000000000000000001000000FFFFFFFFFFFFFFFF02\");\n+        byte[] geoWKB = hexStringToByteArray(\"010200000000000000\");\n+        Geometry geomWKT = Geometry.deserialize(geomCLR);\n+        Geography geogWKT = Geography.deserialize(geogCLR);\n         assertEquals(geomWKT.asTextZM(), geoWKT);\n         assertEquals(geogWKT.asTextZM(), geoWKT);\n+        assertTrue(Arrays.equals(geomWKT.STAsBinary(), geoWKB));\n+        assertTrue(Arrays.equals(geogWKT.STAsBinary(), geoWKB));\n     }\n \n     @Test\n-    public void testPolygonWkb() throws SQLException {\n+    public void testPolygon() throws SQLException {\n         String geoWKT = \"POLYGON((0 0, 0 3, 3 3, 3 0, 0 0), (1 1, 1 2, 2 1, 1 1))\";\n-        byte[] geomWKB = hexStringToByteArray(\n+        byte[] geomCLR = hexStringToByteArray(\n                 \"000000000104090000000000000000000000000000000000000000000000000000000000000000000840000000000000084000000000000008400000000000000840000000000000000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000F03F00000000000000400000000000000040000000000000F03F000000000000F03F000000000000F03F020000000200000000000500000001000000FFFFFFFF0000000003\");\n-        byte[] geogWKB = hexStringToByteArray(\n+        byte[] geogCLR = hexStringToByteArray(\n                 \"E61000000200090000000000000000000000000000000000000000000000000008400000000000000000000000000000084000000000000008400000000000000000000000000000084000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000F03F000000000000F03F0000000000000040000000000000F03F000000000000F03F020000000100000000010500000001000000FFFFFFFF0000000003\");\n-        Geometry geomWKT = Geometry.deserialize(geomWKB);\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"01030000000200000005000000000000000000000000000000000000000000000000000000000000000000084000000000000008400000000000000840000000000000084000000000000000000000000000000000000000000000000004000000000000000000F03F000000000000F03F000000000000F03F00000000000000400000000000000040000000000000F03F000000000000F03F000000000000F03F\");\n+        Geometry geomWKT = Geometry.deserialize(geomCLR);\n+        Geography geogWKT = Geography.deserialize(geogCLR);\n+        assertEquals(geomWKT.asTextZM(), geoWKT);\n+        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        assertTrue(Arrays.equals(geomWKT.STAsBinary(), geoWKB));\n+        assertTrue(Arrays.equals(geogWKT.STAsBinary(), geoWKB));\n+    }\n+\n+    @Test\n+    public void testPolygon2() throws SQLException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f94461169a72c9a18c9bd8efaf01578ece8b436d"}, "originalPosition": 115}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMDkxOTUz", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#pullrequestreview-442091953", "createdAt": "2020-07-03T01:04:43Z", "commit": {"oid": "f94461169a72c9a18c9bd8efaf01578ece8b436d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMTowNDo0M1rOGsg15g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMTowNDo0M1rOGsg15g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMyODYxNA==", "bodyText": "In all these tests, expected value should come first", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#discussion_r449328614", "createdAt": "2020-07-03T01:04:43Z", "author": {"login": "ulvii"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/datatypes/SQLServerSpatialDatatypeTest.java", "diffHunk": "@@ -51,141 +52,1161 @@\n     static boolean isDenaliOrLater = false;\n \n     @Test\n-    public void testPointWkb() throws SQLException {\n+    public void testPoint() throws SQLException {\n         String geoWKT = \"POINT(3 40 5 6)\";\n-        byte[] geomWKB = hexStringToByteArray(\n+        byte[] geomCLR = hexStringToByteArray(\n                 \"00000000010F0000000000000840000000000000444000000000000014400000000000001840\");\n-        byte[] geogWKB = hexStringToByteArray(\n+        byte[] geogCLR = hexStringToByteArray(\n                 \"E6100000010F0000000000004440000000000000084000000000000014400000000000001840\");\n-        Geometry geomWKT = Geometry.deserialize(geomWKB);\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n+        byte[] geoWKB = hexStringToByteArray(\"010100000000000000000008400000000000004440\");\n+        Geometry geomWKT = Geometry.deserialize(geomCLR);\n+        Geography geogWKT = Geography.deserialize(geogCLR);\n+        assertEquals(geomWKT.asTextZM(), geoWKT);\n+        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        assertTrue(Arrays.equals(geomWKT.STAsBinary(), geoWKB));\n+        assertTrue(Arrays.equals(geogWKT.STAsBinary(), geoWKB));\n+    }\n+\n+    @Test\n+    public void testPoint2() throws SQLException {\n+        String geoWKT = \"POINT EMPTY\";\n+        byte[] geomCLR = hexStringToByteArray(\"407100000104000000000000000001000000FFFFFFFFFFFFFFFF01\");\n+        byte[] geogCLR = hexStringToByteArray(\"E61000000104000000000000000001000000FFFFFFFFFFFFFFFF01\");\n+        byte[] geoWKB = hexStringToByteArray(\"010400000000000000\");\n+        Geometry geomWKT = Geometry.deserialize(geomCLR);\n+        Geography geogWKT = Geography.deserialize(geogCLR);\n         assertEquals(geomWKT.asTextZM(), geoWKT);\n         assertEquals(geogWKT.asTextZM(), geoWKT);\n+        assertTrue(Arrays.equals(geomWKT.STAsBinary(), geoWKB));\n+        assertTrue(Arrays.equals(geogWKT.STAsBinary(), geoWKB));\n     }\n \n     @Test\n-    public void testLineStringWkb() throws SQLException {\n+    public void testLineString() throws SQLException {\n         String geoWKT = \"LINESTRING(1 0, 0 1, -1 0)\";\n-        byte[] geomWKB = hexStringToByteArray(\n+        byte[] geomCLR = hexStringToByteArray(\n                 \"00000000010403000000000000000000F03F00000000000000000000000000000000000000000000F03F000000000000F0BF000000000000000001000000010000000001000000FFFFFFFF0000000002\");\n-        byte[] geogWKB = hexStringToByteArray(\n+        byte[] geogCLR = hexStringToByteArray(\n                 \"E61000000104030000000000000000000000000000000000F03F000000000000F03F00000000000000000000000000000000000000000000F0BF01000000010000000001000000FFFFFFFF0000000002\");\n-        Geometry geomWKT = Geometry.deserialize(geomWKB);\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"010200000003000000000000000000F03F00000000000000000000000000000000000000000000F03F000000000000F0BF0000000000000000\");\n+        Geometry geomWKT = Geometry.deserialize(geomCLR);\n+        Geography geogWKT = Geography.deserialize(geogCLR);\n+        assertEquals(geomWKT.asTextZM(), geoWKT);\n+        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        assertTrue(Arrays.equals(geomWKT.STAsBinary(), geoWKB));\n+        assertTrue(Arrays.equals(geogWKT.STAsBinary(), geoWKB));\n+    }\n+\n+    @Test\n+    public void testLineString2() throws SQLException {\n+        String geoWKT = \"LINESTRING EMPTY\";\n+        byte[] geomCLR = hexStringToByteArray(\"FFFF00000104000000000000000001000000FFFFFFFFFFFFFFFF02\");\n+        byte[] geogCLR = hexStringToByteArray(\"E61000000104000000000000000001000000FFFFFFFFFFFFFFFF02\");\n+        byte[] geoWKB = hexStringToByteArray(\"010200000000000000\");\n+        Geometry geomWKT = Geometry.deserialize(geomCLR);\n+        Geography geogWKT = Geography.deserialize(geogCLR);\n         assertEquals(geomWKT.asTextZM(), geoWKT);\n         assertEquals(geogWKT.asTextZM(), geoWKT);\n+        assertTrue(Arrays.equals(geomWKT.STAsBinary(), geoWKB));\n+        assertTrue(Arrays.equals(geogWKT.STAsBinary(), geoWKB));\n     }\n \n     @Test\n-    public void testPolygonWkb() throws SQLException {\n+    public void testPolygon() throws SQLException {\n         String geoWKT = \"POLYGON((0 0, 0 3, 3 3, 3 0, 0 0), (1 1, 1 2, 2 1, 1 1))\";\n-        byte[] geomWKB = hexStringToByteArray(\n+        byte[] geomCLR = hexStringToByteArray(\n                 \"000000000104090000000000000000000000000000000000000000000000000000000000000000000840000000000000084000000000000008400000000000000840000000000000000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000F03F00000000000000400000000000000040000000000000F03F000000000000F03F000000000000F03F020000000200000000000500000001000000FFFFFFFF0000000003\");\n-        byte[] geogWKB = hexStringToByteArray(\n+        byte[] geogCLR = hexStringToByteArray(\n                 \"E61000000200090000000000000000000000000000000000000000000000000008400000000000000000000000000000084000000000000008400000000000000000000000000000084000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000F03F000000000000F03F0000000000000040000000000000F03F000000000000F03F020000000100000000010500000001000000FFFFFFFF0000000003\");\n-        Geometry geomWKT = Geometry.deserialize(geomWKB);\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"01030000000200000005000000000000000000000000000000000000000000000000000000000000000000084000000000000008400000000000000840000000000000084000000000000000000000000000000000000000000000000004000000000000000000F03F000000000000F03F000000000000F03F00000000000000400000000000000040000000000000F03F000000000000F03F000000000000F03F\");\n+        Geometry geomWKT = Geometry.deserialize(geomCLR);\n+        Geography geogWKT = Geography.deserialize(geogCLR);\n+        assertEquals(geomWKT.asTextZM(), geoWKT);\n+        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        assertTrue(Arrays.equals(geomWKT.STAsBinary(), geoWKB));\n+        assertTrue(Arrays.equals(geogWKT.STAsBinary(), geoWKB));\n+    }\n+\n+    @Test\n+    public void testPolygon2() throws SQLException {\n+        String geoWKT = \"POLYGON EMPTY\";\n+        byte[] geomCLR = hexStringToByteArray(\"FFFF00000104000000000000000001000000FFFFFFFFFFFFFFFF03\");\n+        byte[] geogCLR = hexStringToByteArray(\"E61000000104000000000000000001000000FFFFFFFFFFFFFFFF03\");\n+        byte[] geoWKB = hexStringToByteArray(\"010300000000000000\");\n+        Geometry geomWKT = Geometry.deserialize(geomCLR);\n+        Geography geogWKT = Geography.deserialize(geogCLR);\n         assertEquals(geomWKT.asTextZM(), geoWKT);\n         assertEquals(geogWKT.asTextZM(), geoWKT);\n+        assertTrue(Arrays.equals(geomWKT.STAsBinary(), geoWKB));\n+        assertTrue(Arrays.equals(geogWKT.STAsBinary(), geoWKB));\n     }\n \n     @Test\n-    public void testMultiPointWkb() throws SQLException {\n+    public void testMultiPoint() throws SQLException {\n         String geoWKT = \"MULTIPOINT((2 3), (7 8 9.5))\";\n-        byte[] geomWKB = hexStringToByteArray(\n+        byte[] geomCLR = hexStringToByteArray(\n                 \"00000000010502000000000000000000004000000000000008400000000000001C400000000000002040000000000000F8FF0000000000002340020000000100000000010100000003000000FFFFFFFF0000000004000000000000000001000000000100000001\");\n-        byte[] geogWKB = hexStringToByteArray(\n+        byte[] geogCLR = hexStringToByteArray(\n                 \"E61000000105020000000000000000000840000000000000004000000000000020400000000000001C40000000000000F8FF0000000000002340020000000100000000010100000003000000FFFFFFFF0000000004000000000000000001000000000100000001\");\n-        Geometry geomWKT = Geometry.deserialize(geomWKB);\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"01040000000200000001010000000000000000000040000000000000084001010000000000000000001C400000000000002040\");\n+        Geometry geomWKT = Geometry.deserialize(geomCLR);\n+        Geography geogWKT = Geography.deserialize(geogCLR);\n+        assertEquals(geomWKT.asTextZM(), geoWKT);\n+        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        assertTrue(Arrays.equals(geomWKT.STAsBinary(), geoWKB));\n+        assertTrue(Arrays.equals(geogWKT.STAsBinary(), geoWKB));\n+    }\n+\n+    @Test\n+    public void testMultiPoint2() throws SQLException {\n+        String geoWKT = \"MULTIPOINT EMPTY\";\n+        byte[] geomCLR = hexStringToByteArray(\"FFFF00000104000000000000000001000000FFFFFFFFFFFFFFFF04\");\n+        byte[] geogCLR = hexStringToByteArray(\"E61000000104000000000000000001000000FFFFFFFFFFFFFFFF04\");\n+        byte[] geoWKB = hexStringToByteArray(\"010400000000000000\");\n+        Geometry geomWKT = Geometry.deserialize(geomCLR);\n+        Geography geogWKT = Geography.deserialize(geogCLR);\n         assertEquals(geomWKT.asTextZM(), geoWKT);\n         assertEquals(geogWKT.asTextZM(), geoWKT);\n+        assertTrue(Arrays.equals(geomWKT.STAsBinary(), geoWKB));\n+        assertTrue(Arrays.equals(geogWKT.STAsBinary(), geoWKB));\n     }\n \n     @Test\n-    public void testMultiLineStringWkb() throws SQLException {\n+    public void testMultiLineString() throws SQLException {\n         String geoWKT = \"MULTILINESTRING((0 2, 1 1), (1 0, 1 1))\";\n-        byte[] geomWKB = hexStringToByteArray(\n+        byte[] geomCLR = hexStringToByteArray(\n                 \"0000000001040400000000000000000000000000000000000040000000000000F03F000000000000F03F000000000000F03F0000000000000000000000000000F03F000000000000F03F020000000100000000010200000003000000FFFFFFFF0000000005000000000000000002000000000100000002\");\n-        byte[] geogWKB = hexStringToByteArray(\n+        byte[] geogCLR = hexStringToByteArray(\n                 \"E610000001040400000000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000F03F000000000000F03F000000000000F03F020000000100000000010200000003000000FFFFFFFF0000000005000000000000000002000000000100000002\");\n-        Geometry geomWKT = Geometry.deserialize(geomWKB);\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"01050000000200000001020000000200000000000000000000000000000000000040000000000000F03F000000000000F03F010200000002000000000000000000F03F0000000000000000000000000000F03F000000000000F03F\");\n+        Geometry geomWKT = Geometry.deserialize(geomCLR);\n+        Geography geogWKT = Geography.deserialize(geogCLR);\n+        assertEquals(geomWKT.asTextZM(), geoWKT);\n+        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        assertTrue(Arrays.equals(geomWKT.STAsBinary(), geoWKB));\n+        assertTrue(Arrays.equals(geogWKT.STAsBinary(), geoWKB));\n+    }\n+\n+    @Test\n+    public void testMultiLineString2() throws SQLException {\n+        String geoWKT = \"MULTILINESTRING EMPTY\";\n+        byte[] geomCLR = hexStringToByteArray(\"FFFF00000104000000000000000001000000FFFFFFFFFFFFFFFF05\");\n+        byte[] geogCLR = hexStringToByteArray(\"E61000000104000000000000000001000000FFFFFFFFFFFFFFFF05\");\n+        byte[] geoWKB = hexStringToByteArray(\"010500000000000000\");\n+        Geometry geomWKT = Geometry.deserialize(geomCLR);\n+        Geography geogWKT = Geography.deserialize(geogCLR);\n         assertEquals(geomWKT.asTextZM(), geoWKT);\n         assertEquals(geogWKT.asTextZM(), geoWKT);\n+        assertTrue(Arrays.equals(geomWKT.STAsBinary(), geoWKB));\n+        assertTrue(Arrays.equals(geogWKT.STAsBinary(), geoWKB));\n     }\n \n     @Test\n-    public void testMultiPolygonWkb() throws SQLException {\n+    public void testMultiPolygon() throws SQLException {\n         String geoWKT = \"MULTIPOLYGON(((1 1, 1 2, 2 1, 1 1), (0 0, 0 3, 3 3, 3 0, 0 0 7)), ((9 9, 9 10, 10 9, 9 9)))\";\n-        byte[] geomWKB = hexStringToByteArray(\n+        byte[] geomCLR = hexStringToByteArray(\nn-        byte[] geogWKB = hexStringToByteArray(\n+        byte[] geogCLR = hexStringToByteArray(\nn-        Geometry geomWKT = Geometry.deserialize(geomWKB);\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n+        byte[] geoWKB = hexStringToByteArray(\nn+        Geometry geomWKT = Geometry.deserialize(geomCLR);\n+        Geography geogWKT = Geography.deserialize(geogCLR);\n+        assertEquals(geomWKT.asTextZM(), geoWKT);\n+        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        assertTrue(Arrays.equals(geomWKT.STAsBinary(), geoWKB));\n+        assertTrue(Arrays.equals(geogWKT.STAsBinary(), geoWKB));\n+    }\n+\n+    @Test\n+    public void testMultiPolygon2() throws SQLException {\n+        String geoWKT = \"MULTIPOLYGON(((9 9, 9 10, 10 9, 9 9)), ((1 1, 1 2, 2 1, 1 1), (0 0, 0 3, 3 3, 3 0, 0 0 7)))\";\n+        byte[] geomCLR = hexStringToByteArray(\nn+        byte[] geogCLR = hexStringToByteArray(\nn+        byte[] geoWKB = hexStringToByteArray(\nn+        Geometry geomWKT = Geometry.deserialize(geomCLR);\n+        Geography geogWKT = Geography.deserialize(geogCLR);\n+        assertEquals(geomWKT.asTextZM(), geoWKT);\n+        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        assertTrue(Arrays.equals(geomWKT.STAsBinary(), geoWKB));\n+        assertTrue(Arrays.equals(geogWKT.STAsBinary(), geoWKB));\n+    }\n+\n+    @Test\n+    public void testMultiPolygon3() throws SQLException {\n+        String geoWKT = \"MULTIPOLYGON(((9 9, 9 10, 10 9, 9 9), (12 12, 0 0, 12 12, 12 12), (1 0, 3 4, 4 5, 6 7, 1 0)), ((9 9, 9 10, 10 9, 9 9)), ((1 1, 1 2, 2 1, 1 1), (0 0, 0 3, 3 3, 3 0, 0 0 7)))\";\n+        byte[] geomCLR = hexStringToByteArray(\nn+        byte[] geogCLR = hexStringToByteArray(\nn+        byte[] geoWKB = hexStringToByteArray(\nn+        Geometry geomWKT = Geometry.deserialize(geomCLR);\n+        Geography geogWKT = Geography.deserialize(geogCLR);\n         assertEquals(geomWKT.asTextZM(), geoWKT);\n         assertEquals(geogWKT.asTextZM(), geoWKT);\n+        assertTrue(Arrays.equals(geomWKT.STAsBinary(), geoWKB));\n+        assertTrue(Arrays.equals(geogWKT.STAsBinary(), geoWKB));\n     }\n \n     @Test\n-    public void testGeometryCollectionWkb() throws SQLException {\n+    public void testMultiPolygon4() throws SQLException {\n+        String geoWKT = \"MULTIPOLYGON(((9 9, 9 10, 10 9, 9 9)))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"000000000104040000000000000000002240000000000000224000000000000022400000000000002440000000000000244000000000000022400000000000002240000000000000224001000000020000000002000000FFFFFFFF0000000006000000000000000003\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000224040000000000000000002240000000000000224000000000000024400000000000002240000000000000224000000000000024400000000000002240000000000000224001000000010000000002000000FFFFFFFF0000000006000000000000000003\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"0106000000010000000103000000010000000400000000000000000022400000000000002240000000000000224000000000000024400000000000002440000000000000224000000000000022400000000000002240\");\n+        Geometry geomWKT = Geometry.deserialize(geomCLR);\n+        Geography geogWKT = Geography.deserialize(geogCLR);\n+        assertEquals(geomWKT.asTextZM(), geoWKT);\n+        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        assertTrue(Arrays.equals(geomWKT.STAsBinary(), geoWKB));\n+        assertTrue(Arrays.equals(geogWKT.STAsBinary(), geoWKB));\n+    }\n+\n+    @Test\n+    public void testMultiPolygon5() throws SQLException {\n+        String geoWKT = \"MULTIPOLYGON EMPTY\";\n+        byte[] geomCLR = hexStringToByteArray(\"000000000104000000000000000001000000FFFFFFFFFFFFFFFF06\");\n+        byte[] geogCLR = hexStringToByteArray(\"E61000000104000000000000000001000000FFFFFFFFFFFFFFFF06\");\n+        byte[] geoWKB = hexStringToByteArray(\"010600000000000000\");\n+        Geometry geomWKT = Geometry.deserialize(geomCLR);\n+        Geography geogWKT = Geography.deserialize(geogCLR);\n+        assertEquals(geomWKT.asTextZM(), geoWKT);\n+        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        assertTrue(Arrays.equals(geomWKT.STAsBinary(), geoWKB));\n+        assertTrue(Arrays.equals(geogWKT.STAsBinary(), geoWKB));\n+    }\n+\n+    @Test\n+    public void testGeometryCollection() throws SQLException {\n         String geoWKT = \"GEOMETRYCOLLECTION(POINT(3 3 1), LINESTRING(1 0, 0 1, -1 0), CIRCULARSTRING(1 3, 3 5, 4 7, 7 3, 1 3), POLYGON((0 0 2, 1 10 3, 1 0 4, 0 0 2), (0 0 2, 1 10 3, 1 0 4, 0 0 2), (0 0 2, 1 10 3, 1 0 4, 0 0 2)), MULTIPOINT((2 3), (7 8 9.5)), MULTILINESTRING((0 2, 1 1), (1 0, 1 1)), MULTIPOLYGON(((0 0, 0 3, 3 3, 3 0, 0 0), (1 1, 1 2, 2 1, 1 1)), ((9 9, 9 10, 10 9, 9 9))), COMPOUNDCURVE(CIRCULARSTRING(1 0 3, 0 1 3, 9 6 3, 8 7 3, -1 0 3), CIRCULARSTRING(-1 0 3, 7 9 3, -10 2 3), (-10 2 3, 77 77 77, 88 88 88, 2 6 4), (2 6 4, 3 3 6, 7 7 1)), CURVEPOLYGON((0 0, 0 0, 0 0, 0 0), COMPOUNDCURVE((0 -23.43778, 0 23.43778), CIRCULARSTRING(0 23.43778, -45 -23.43778, 0 -23.43778)), COMPOUNDCURVE((0 -23.43778, 7 7, 0 23.43778), CIRCULARSTRING(0 23.43778, 8 8, 8 8, -45 23.43778, -90 23.43778), (-90 23.43778, -90 -23.43778), CIRCULARSTRING(-90 -23.43778, -45 -23.43778, 0 -23.43778))), POLYGON((0 0 2, 1 10 3, 1 0 4, 0 0 2)))\";\n-        byte[] geomWKB = hexStringToByteArray(\n+        byte[] geomCLR = hexStringToByteArray(\n                 \"0100000002014A00000000000000000008400000000000000840000000000000F03F00000000000000000000000000000000000000000000F03F000000000000F0BF0000000000000000000000000000F03F00000000000008400000000000000840000000000000144000000000000010400000000000001C400000000000001C400000000000000840000000000000F03F000000000000084000000000000000000000000000000000000000000000F03F0000000000002440000000000000F03F00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000F03F0000000000002440000000000000F03F00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000F03F0000000000002440000000000000F03F000000000000000000000000000000000000000000000000000000000000004000000000000008400000000000001C40000000000000204000000000000000000000000000000040000000000000F03F000000000000F03F000000000000F03F0000000000000000000000000000F03F000000000000F03F0000000000000000000000000000000000000000000000000000000000000840000000000000084000000000000008400000000000000840000000000000000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000F03F00000000000000400000000000000040000000000000F03F000000000000F03F000000000000F03F00000000000022400000000000002240000000000000224000000000000024400000000000002440000000000000224000000000000022400000000000002240000000000000F03F00000000000000000000000000000000000000000000F03F0000000000002240000000000000184000000000000020400000000000001C40000000000000F0BF00000000000000000000000000001C40000000000000224000000000000024C00000000000000040000000000040534000000000004053400000000000005640000000000000564000000000000000400000000000001840000000000000084000000000000008400000000000001C400000000000001C40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000C7D79E59127037C00000000000000000C7D79E591270374000000000008046C0C7D79E59127037C00000000000000000C7D79E59127037C00000000000000000C7D79E59127037C00000000000001C400000000000001C400000000000000000C7D79E5912703740000000000000204000000000000020400000000000002040000000000000204000000000008046C0C7D79E591270374000000000008056C0C7D79E591270374000000000008056C0C7D79E59127037C000000000008046C0C7D79E59127037C00000000000000000C7D79E59127037C000000000000000000000000000000000000000000000F03F0000000000002440000000000000F03F000000000000000000000000000000000000000000000000000000000000F03F000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000004000000000000008400000000000001040000000000000004000000000000000400000000000000840000000000000104000000000000000400000000000000040000000000000084000000000000010400000000000000040000000000000F8FF0000000000002340000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF00000000000008400000000000000840000000000000084000000000000008400000000000000840000000000000084000000000000008400000000000405340000000000000564000000000000010400000000000001840000000000000F03F000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF0000000000000040000000000000084000000000000010400000000000000040120000000100000000010100000002040000000109000000010D00000001110000000115000000011600000001170000000119000000011B00000001200000000124000000032800000001340000000338000000033C000000014600000011000000FFFFFFFF0000000007000000000000000001000000000100000002000000000200000008000000000300000003000000000600000004050000000600000001050000000700000001000000000800000005080000000800000002080000000900000002000000000A000000060B0000000A000000030B0000000C00000003000000000D00000009000000000E0000000A0000000011000000031000000003010302000002000203020003010203\");\n-        byte[] geogWKB = hexStringToByteArray(\n+        byte[] geogCLR = hexStringToByteArray(\nn-        Geometry geomWKT = Geometry.deserialize(geomWKB);\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n+        byte[] geoWKB = hexStringToByteArray(\nn+        Geometry geomWKT = Geometry.deserialize(geomCLR);\n+        Geography geogWKT = Geography.deserialize(geogCLR);\n+        assertEquals(geomWKT.asTextZM(), geoWKT);\n+        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        assertTrue(Arrays.equals(geomWKT.STAsBinary(), geoWKB));\n+        assertTrue(Arrays.equals(geogWKT.STAsBinary(), geoWKB));\n+    }\n+\n+    @Test\n+    public void testGeometryCollection1() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION EMPTY\";\n+        byte[] geomCLR = hexStringToByteArray(\"100000000104000000000000000001000000FFFFFFFFFFFFFFFF07\");\n+        byte[] geogCLR = hexStringToByteArray(\"E61000000104000000000000000001000000FFFFFFFFFFFFFFFF07\");\n+        byte[] geoWKB = hexStringToByteArray(\"010700000000000000\");\n+        Geometry geomWKT = Geometry.deserialize(geomCLR);\n+        Geography geogWKT = Geography.deserialize(geogCLR);\n+        assertEquals(geomWKT.asTextZM(), geoWKT);\n+        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        assertTrue(Arrays.equals(geomWKT.STAsBinary(), geoWKB));\n+        assertTrue(Arrays.equals(geogWKT.STAsBinary(), geoWKB));\n+    }\n+\n+    @Test\n+    public void testGeometryCollection2() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(GEOMETRYCOLLECTION EMPTY)\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF07\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF07\");\n+        byte[] geoWKB = hexStringToByteArray(\"010700000001000000010700000000000000\");\n+        Geometry geomWKT = Geometry.deserialize(geomCLR);\n+        Geography geogWKT = Geography.deserialize(geogCLR);\n+        assertEquals(geomWKT.asTextZM(), geoWKT);\n+        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        assertTrue(Arrays.equals(geomWKT.STAsBinary(), geoWKB));\n+        assertTrue(Arrays.equals(geogWKT.STAsBinary(), geoWKB));\n+    }\n+\n+    @Test\n+    public void testGeometryCollection3() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(POINT(3 40 5 6))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"10000000010701000000000000000000084000000000000044400000000000001440000000000000184001000000010000000002000000FFFFFFFF0000000007000000000000000001\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E6100000010701000000000000000000444000000000000008400000000000001440000000000000184001000000010000000002000000FFFFFFFF0000000007000000000000000001\");\n+        byte[] geoWKB = hexStringToByteArray(\"010700000001000000010100000000000000000008400000000000004440\");\n+        Geometry geomWKT = Geometry.deserialize(geomCLR);\n+        Geography geogWKT = Geography.deserialize(geogCLR);\n+        assertEquals(geomWKT.asTextZM(), geoWKT);\n+        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        assertTrue(Arrays.equals(geomWKT.STAsBinary(), geoWKB));\n+        assertTrue(Arrays.equals(geogWKT.STAsBinary(), geoWKB));\n+    }\n+\n+    @Test\n+    public void testGeometryCollection4() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(POINT EMPTY)\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF01\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF01\");\n+        byte[] geoWKB = hexStringToByteArray(\"010700000001000000010400000000000000\");\n+        Geometry geomWKT = Geometry.deserialize(geomCLR);\n+        Geography geogWKT = Geography.deserialize(geogCLR);\n+        assertEquals(geomWKT.asTextZM(), geoWKT);\n+        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        assertTrue(Arrays.equals(geomWKT.STAsBinary(), geoWKB));\n+        assertTrue(Arrays.equals(geogWKT.STAsBinary(), geoWKB));\n+    }\n+\n+    @Test\n+    public void testGeometryCollection5() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(LINESTRING(1 0, 0 1, -1 0))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"10000000010403000000000000000000F03F00000000000000000000000000000000000000000000F03F000000000000F0BF000000000000000001000000010000000002000000FFFFFFFF0000000007000000000000000002\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000104030000000000000000000000000000000000F03F000000000000F03F00000000000000000000000000000000000000000000F0BF01000000010000000002000000FFFFFFFF0000000007000000000000000002\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"010700000001000000010200000003000000000000000000F03F00000000000000000000000000000000000000000000F03F000000000000F0BF0000000000000000\");\n+        Geometry geomWKT = Geometry.deserialize(geomCLR);\n+        Geography geogWKT = Geography.deserialize(geogCLR);\n+        assertEquals(geomWKT.asTextZM(), geoWKT);\n+        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        assertTrue(Arrays.equals(geomWKT.STAsBinary(), geoWKB));\n+        assertTrue(Arrays.equals(geogWKT.STAsBinary(), geoWKB));\n+    }\n+\n+    @Test\n+    public void testGeometryCollection6() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(LINESTRING EMPTY)\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF02\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF02\");\n+        byte[] geoWKB = hexStringToByteArray(\"010700000001000000010200000000000000\");\n+        Geometry geomWKT = Geometry.deserialize(geomCLR);\n+        Geography geogWKT = Geography.deserialize(geogCLR);\n+        assertEquals(geomWKT.asTextZM(), geoWKT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f94461169a72c9a18c9bd8efaf01578ece8b436d"}, "originalPosition": 398}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acd724716af2fa23ee6c4667d2c41f686dd9703d", "author": {"user": {"login": "peterbae", "name": "Peter Bae"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/acd724716af2fa23ee6c4667d2c41f686dd9703d", "committedDate": "2020-07-03T17:04:35Z", "message": "comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad79bdf86d6558f1b966fe087c665409f00330cd", "author": {"user": {"login": "peterbae", "name": "Peter Bae"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/ad79bdf86d6558f1b966fe087c665409f00330cd", "committedDate": "2020-07-03T17:13:50Z", "message": "refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fd18d48857816deb56b1fa6ad8e2ff89adb8231", "author": {"user": {"login": "peterbae", "name": "Peter Bae"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/2fd18d48857816deb56b1fa6ad8e2ff89adb8231", "committedDate": "2020-07-03T17:16:04Z", "message": "comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d16ac4b3e74c2c07a3e7016a6b10edb7c16bb7bd", "author": {"user": {"login": "peterbae", "name": "Peter Bae"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/d16ac4b3e74c2c07a3e7016a6b10edb7c16bb7bd", "committedDate": "2020-07-03T18:46:01Z", "message": "comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNTYyMzUw", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#pullrequestreview-442562350", "createdAt": "2020-07-03T21:24:29Z", "commit": {"oid": "d16ac4b3e74c2c07a3e7016a6b10edb7c16bb7bd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMToyNDoyOVrOGs35og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMToyNDoyOVrOGs35og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcwNjQwMg==", "bodyText": "Can't you remove assertTrue?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#discussion_r449706402", "createdAt": "2020-07-03T21:24:29Z", "author": {"login": "ulvii"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/datatypes/SQLServerSpatialDatatypeTest.java", "diffHunk": "@@ -1264,6 +2184,16 @@ private void testWkt(String geoWKT, String geoWKTSS) throws SQLException {\n         return data;\n     }\n \n+    private void validateGeometryGeography(String geoWKT, byte[] geomCLR, byte[] geogCLR,\n+            byte[] geoWKB) throws SQLServerException {\n+        Geometry geomWKT = Geometry.deserialize(geomCLR);\n+        Geography geogWKT = Geography.deserialize(geogCLR);\n+        assertEquals(geoWKT, geomWKT.asTextZM());\n+        assertEquals(geoWKT, geogWKT.asTextZM());\n+        assertTrue(Arrays.equals(geomWKT.STAsBinary(), geoWKB));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d16ac4b3e74c2c07a3e7016a6b10edb7c16bb7bd"}, "originalPosition": 1388}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNTYyNDE4", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#pullrequestreview-442562418", "createdAt": "2020-07-03T21:24:59Z", "commit": {"oid": "d16ac4b3e74c2c07a3e7016a6b10edb7c16bb7bd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMToyNDo1OVrOGs354A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMToyNDo1OVrOGs354A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcwNjQ2NA==", "bodyText": "Here and in some the tests above, please make sure expected value is first.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#discussion_r449706464", "createdAt": "2020-07-03T21:24:59Z", "author": {"login": "ulvii"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/datatypes/SQLServerSpatialDatatypeTest.java", "diffHunk": "@@ -1264,6 +2184,16 @@ private void testWkt(String geoWKT, String geoWKTSS) throws SQLException {\n         return data;\n     }\n \n+    private void validateGeometryGeography(String geoWKT, byte[] geomCLR, byte[] geogCLR,\n+            byte[] geoWKB) throws SQLServerException {\n+        Geometry geomWKT = Geometry.deserialize(geomCLR);\n+        Geography geogWKT = Geography.deserialize(geogCLR);\n+        assertEquals(geoWKT, geomWKT.asTextZM());\n+        assertEquals(geoWKT, geogWKT.asTextZM());\n+        assertTrue(Arrays.equals(geomWKT.STAsBinary(), geoWKB));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d16ac4b3e74c2c07a3e7016a6b10edb7c16bb7bd"}, "originalPosition": 1388}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNTYyOTM1", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#pullrequestreview-442562935", "createdAt": "2020-07-03T21:28:59Z", "commit": {"oid": "d16ac4b3e74c2c07a3e7016a6b10edb7c16bb7bd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMToyODo1OVrOGs37xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMToyODo1OVrOGs37xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcwNjk1MQ==", "bodyText": "Expected value first", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#discussion_r449706951", "createdAt": "2020-07-03T21:28:59Z", "author": {"login": "ulvii"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/datatypes/SQLServerSpatialDatatypeTest.java", "diffHunk": "@@ -50,144 +51,1015 @@\n     static String spatialDatatypeTableName;\n     static boolean isDenaliOrLater = false;\n \n+    /**\n+     * Tests basic point scenario.\n+     */\n     @Test\n-    public void testPointWkb() throws SQLException {\n+    public void testPoint() throws SQLException {\n         String geoWKT = \"POINT(3 40 5 6)\";\n-        byte[] geomWKB = hexStringToByteArray(\n+        byte[] geomCLR = hexStringToByteArray(\n                 \"00000000010F0000000000000840000000000000444000000000000014400000000000001840\");\n-        byte[] geogWKB = hexStringToByteArray(\n+        byte[] geogCLR = hexStringToByteArray(\n                 \"E6100000010F0000000000004440000000000000084000000000000014400000000000001840\");\n-        Geometry geomWKT = Geometry.deserialize(geomWKB);\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n-        assertEquals(geomWKT.asTextZM(), geoWKT);\n-        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        byte[] geoWKB = hexStringToByteArray(\"010100000000000000000008400000000000004440\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n     }\n \n+    /**\n+     * Tests empty point scenario.\n+     */\n     @Test\n-    public void testLineStringWkb() throws SQLException {\n+    public void testPointEmpty() throws SQLException {\n+        String geoWKT = \"POINT EMPTY\";\n+        byte[] geomCLR = hexStringToByteArray(\"407100000104000000000000000001000000FFFFFFFFFFFFFFFF01\");\n+        byte[] geogCLR = hexStringToByteArray(\"E61000000104000000000000000001000000FFFFFFFFFFFFFFFF01\");\n+        byte[] geoWKB = hexStringToByteArray(\"010400000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests basic linestring scenario.\n+     */\n+    @Test\n+    public void testLineString() throws SQLException {\n         String geoWKT = \"LINESTRING(1 0, 0 1, -1 0)\";\n-        byte[] geomWKB = hexStringToByteArray(\n+        byte[] geomCLR = hexStringToByteArray(\n                 \"00000000010403000000000000000000F03F00000000000000000000000000000000000000000000F03F000000000000F0BF000000000000000001000000010000000001000000FFFFFFFF0000000002\");\n-        byte[] geogWKB = hexStringToByteArray(\n+        byte[] geogCLR = hexStringToByteArray(\n                 \"E61000000104030000000000000000000000000000000000F03F000000000000F03F00000000000000000000000000000000000000000000F0BF01000000010000000001000000FFFFFFFF0000000002\");\n-        Geometry geomWKT = Geometry.deserialize(geomWKB);\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n-        assertEquals(geomWKT.asTextZM(), geoWKT);\n-        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"010200000003000000000000000000F03F00000000000000000000000000000000000000000000F03F000000000000F0BF0000000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n     }\n \n+    /**\n+     * Tests empty linestring scenario.\n+     */\n+    @Test\n+    public void testLineStringEmpty() throws SQLException {\n+        String geoWKT = \"LINESTRING EMPTY\";\n+        byte[] geomCLR = hexStringToByteArray(\"FFFF00000104000000000000000001000000FFFFFFFFFFFFFFFF02\");\n+        byte[] geogCLR = hexStringToByteArray(\"E61000000104000000000000000001000000FFFFFFFFFFFFFFFF02\");\n+        byte[] geoWKB = hexStringToByteArray(\"010200000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests basic polygon scenario.\n+     */\n     @Test\n-    public void testPolygonWkb() throws SQLException {\n+    public void testPolygon() throws SQLException {\n         String geoWKT = \"POLYGON((0 0, 0 3, 3 3, 3 0, 0 0), (1 1, 1 2, 2 1, 1 1))\";\n-        byte[] geomWKB = hexStringToByteArray(\n+        byte[] geomCLR = hexStringToByteArray(\n                 \"000000000104090000000000000000000000000000000000000000000000000000000000000000000840000000000000084000000000000008400000000000000840000000000000000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000F03F00000000000000400000000000000040000000000000F03F000000000000F03F000000000000F03F020000000200000000000500000001000000FFFFFFFF0000000003\");\n-        byte[] geogWKB = hexStringToByteArray(\n+        byte[] geogCLR = hexStringToByteArray(\n                 \"E61000000200090000000000000000000000000000000000000000000000000008400000000000000000000000000000084000000000000008400000000000000000000000000000084000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000F03F000000000000F03F0000000000000040000000000000F03F000000000000F03F020000000100000000010500000001000000FFFFFFFF0000000003\");\n-        Geometry geomWKT = Geometry.deserialize(geomWKB);\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n-        assertEquals(geomWKT.asTextZM(), geoWKT);\n-        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"01030000000200000005000000000000000000000000000000000000000000000000000000000000000000084000000000000008400000000000000840000000000000084000000000000000000000000000000000000000000000000004000000000000000000F03F000000000000F03F000000000000F03F00000000000000400000000000000040000000000000F03F000000000000F03F000000000000F03F\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests empty polygon scenario.\n+     */\n+    @Test\n+    public void testPolygonEmpty() throws SQLException {\n+        String geoWKT = \"POLYGON EMPTY\";\n+        byte[] geomCLR = hexStringToByteArray(\"FFFF00000104000000000000000001000000FFFFFFFFFFFFFFFF03\");\n+        byte[] geogCLR = hexStringToByteArray(\"E61000000104000000000000000001000000FFFFFFFFFFFFFFFF03\");\n+        byte[] geoWKB = hexStringToByteArray(\"010300000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n     }\n \n+    /**\n+     * Tests basic multipoint scenario.\n+     */\n     @Test\n-    public void testMultiPointWkb() throws SQLException {\n+    public void testMultiPoint() throws SQLException {\n         String geoWKT = \"MULTIPOINT((2 3), (7 8 9.5))\";\n-        byte[] geomWKB = hexStringToByteArray(\n+        byte[] geomCLR = hexStringToByteArray(\n                 \"00000000010502000000000000000000004000000000000008400000000000001C400000000000002040000000000000F8FF0000000000002340020000000100000000010100000003000000FFFFFFFF0000000004000000000000000001000000000100000001\");\n-        byte[] geogWKB = hexStringToByteArray(\n+        byte[] geogCLR = hexStringToByteArray(\n                 \"E61000000105020000000000000000000840000000000000004000000000000020400000000000001C40000000000000F8FF0000000000002340020000000100000000010100000003000000FFFFFFFF0000000004000000000000000001000000000100000001\");\n-        Geometry geomWKT = Geometry.deserialize(geomWKB);\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n-        assertEquals(geomWKT.asTextZM(), geoWKT);\n-        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"01040000000200000001010000000000000000000040000000000000084001010000000000000000001C400000000000002040\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n     }\n \n+    /**\n+     * Tests empty multipoint scenario.\n+     */\n     @Test\n-    public void testMultiLineStringWkb() throws SQLException {\n+    public void testMultiPointEmpty() throws SQLException {\n+        String geoWKT = \"MULTIPOINT EMPTY\";\n+        byte[] geomCLR = hexStringToByteArray(\"FFFF00000104000000000000000001000000FFFFFFFFFFFFFFFF04\");\n+        byte[] geogCLR = hexStringToByteArray(\"E61000000104000000000000000001000000FFFFFFFFFFFFFFFF04\");\n+        byte[] geoWKB = hexStringToByteArray(\"010400000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests basic multilinestring scenario.\n+     */\n+    @Test\n+    public void testMultiLineString() throws SQLException {\n         String geoWKT = \"MULTILINESTRING((0 2, 1 1), (1 0, 1 1))\";\n-        byte[] geomWKB = hexStringToByteArray(\n+        byte[] geomCLR = hexStringToByteArray(\n                 \"0000000001040400000000000000000000000000000000000040000000000000F03F000000000000F03F000000000000F03F0000000000000000000000000000F03F000000000000F03F020000000100000000010200000003000000FFFFFFFF0000000005000000000000000002000000000100000002\");\n-        byte[] geogWKB = hexStringToByteArray(\n+        byte[] geogCLR = hexStringToByteArray(\n                 \"E610000001040400000000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000F03F000000000000F03F000000000000F03F020000000100000000010200000003000000FFFFFFFF0000000005000000000000000002000000000100000002\");\n-        Geometry geomWKT = Geometry.deserialize(geomWKB);\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n-        assertEquals(geomWKT.asTextZM(), geoWKT);\n-        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"01050000000200000001020000000200000000000000000000000000000000000040000000000000F03F000000000000F03F010200000002000000000000000000F03F0000000000000000000000000000F03F000000000000F03F\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n     }\n \n+    /**\n+     * Tests empty multilinestring scenario.\n+     */\n     @Test\n-    public void testMultiPolygonWkb() throws SQLException {\n+    public void testMultiLineStringEmpty() throws SQLException {\n+        String geoWKT = \"MULTILINESTRING EMPTY\";\n+        byte[] geomCLR = hexStringToByteArray(\"FFFF00000104000000000000000001000000FFFFFFFFFFFFFFFF05\");\n+        byte[] geogCLR = hexStringToByteArray(\"E61000000104000000000000000001000000FFFFFFFFFFFFFFFF05\");\n+        byte[] geoWKB = hexStringToByteArray(\"010500000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests basic multipolygon scenario.\n+     */\n+    @Test\n+    public void testMultiPolygon() throws SQLException {\n         String geoWKT = \"MULTIPOLYGON(((1 1, 1 2, 2 1, 1 1), (0 0, 0 3, 3 3, 3 0, 0 0 7)), ((9 9, 9 10, 10 9, 9 9)))\";\n-        byte[] geomWKB = hexStringToByteArray(\n+        byte[] geomCLR = hexStringToByteArray(\n                 \"0000000001010D000000000000000000F03F000000000000F03F000000000000F03F00000000000000400000000000000040000000000000F03F000000000000F03F000000000000F03F000000000000000000000000000000000000000000000000000000000000084000000000000008400000000000000840000000000000084000000000000000000000000000000000000000000000000000000000000022400000000000002240000000000000224000000000000024400000000000002440000000000000224000000000000022400000000000002240000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF0000000000001C40000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF0300000002000000000004000000020900000003000000FFFFFFFF0000000006000000000000000003000000000200000003\");\n-        byte[] geogWKB = hexStringToByteArray(\n+        byte[] geogCLR = hexStringToByteArray(\nn-        Geometry geomWKT = Geometry.deserialize(geomWKB);\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n-        assertEquals(geomWKT.asTextZM(), geoWKT);\n-        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        byte[] geoWKB = hexStringToByteArray(\nn+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n     }\n \n+    /**\n+     * Tests basic multipolygon scenario.\n+     */\n     @Test\n-    public void testGeometryCollectionWkb() throws SQLException {\n+    public void testMultiPolygon2() throws SQLException {\n+        String geoWKT = \"MULTIPOLYGON(((9 9, 9 10, 10 9, 9 9)), ((1 1, 1 2, 2 1, 1 1), (0 0, 0 3, 3 3, 3 0, 0 0 7)))\";\n+        byte[] geomCLR = hexStringToByteArray(\nn+        byte[] geogCLR = hexStringToByteArray(\nn+        byte[] geoWKB = hexStringToByteArray(\nn+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests basic multipolygon scenario.\n+     */\n+    @Test\n+    public void testMultiPolygon3() throws SQLException {\n+        String geoWKT = \"MULTIPOLYGON(((9 9, 9 10, 10 9, 9 9), (12 12, 0 0, 12 12, 12 12), (1 0, 3 4, 4 5, 6 7, 1 0)), ((9 9, 9 10, 10 9, 9 9)), ((1 1, 1 2, 2 1, 1 1), (0 0, 0 3, 3 3, 3 0, 0 0 7)))\";\n+        byte[] geomCLR = hexStringToByteArray(\nn+        byte[] geogCLR = hexStringToByteArray(\nn+        byte[] geoWKB = hexStringToByteArray(\nn+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests basic multipolygon scenario.\n+     */\n+    @Test\n+    public void testMultiPolygon4() throws SQLException {\n+        String geoWKT = \"MULTIPOLYGON(((9 9, 9 10, 10 9, 9 9)))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"000000000104040000000000000000002240000000000000224000000000000022400000000000002440000000000000244000000000000022400000000000002240000000000000224001000000020000000002000000FFFFFFFF0000000006000000000000000003\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000224040000000000000000002240000000000000224000000000000024400000000000002240000000000000224000000000000024400000000000002240000000000000224001000000010000000002000000FFFFFFFF0000000006000000000000000003\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"0106000000010000000103000000010000000400000000000000000022400000000000002240000000000000224000000000000024400000000000002440000000000000224000000000000022400000000000002240\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests empty multipolygon scenario.\n+     */\n+    @Test\n+    public void testMultiPolygonEmpty() throws SQLException {\n+        String geoWKT = \"MULTIPOLYGON EMPTY\";\n+        byte[] geomCLR = hexStringToByteArray(\"000000000104000000000000000001000000FFFFFFFFFFFFFFFF06\");\n+        byte[] geogCLR = hexStringToByteArray(\"E61000000104000000000000000001000000FFFFFFFFFFFFFFFF06\");\n+        byte[] geoWKB = hexStringToByteArray(\"010600000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection() throws SQLException {\n         String geoWKT = \"GEOMETRYCOLLECTION(POINT(3 3 1), LINESTRING(1 0, 0 1, -1 0), CIRCULARSTRING(1 3, 3 5, 4 7, 7 3, 1 3), POLYGON((0 0 2, 1 10 3, 1 0 4, 0 0 2), (0 0 2, 1 10 3, 1 0 4, 0 0 2), (0 0 2, 1 10 3, 1 0 4, 0 0 2)), MULTIPOINT((2 3), (7 8 9.5)), MULTILINESTRING((0 2, 1 1), (1 0, 1 1)), MULTIPOLYGON(((0 0, 0 3, 3 3, 3 0, 0 0), (1 1, 1 2, 2 1, 1 1)), ((9 9, 9 10, 10 9, 9 9))), COMPOUNDCURVE(CIRCULARSTRING(1 0 3, 0 1 3, 9 6 3, 8 7 3, -1 0 3), CIRCULARSTRING(-1 0 3, 7 9 3, -10 2 3), (-10 2 3, 77 77 77, 88 88 88, 2 6 4), (2 6 4, 3 3 6, 7 7 1)), CURVEPOLYGON((0 0, 0 0, 0 0, 0 0), COMPOUNDCURVE((0 -23.43778, 0 23.43778), CIRCULARSTRING(0 23.43778, -45 -23.43778, 0 -23.43778)), COMPOUNDCURVE((0 -23.43778, 7 7, 0 23.43778), CIRCULARSTRING(0 23.43778, 8 8, 8 8, -45 23.43778, -90 23.43778), (-90 23.43778, -90 -23.43778), CIRCULARSTRING(-90 -23.43778, -45 -23.43778, 0 -23.43778))), POLYGON((0 0 2, 1 10 3, 1 0 4, 0 0 2)))\";\n-        byte[] geomWKB = hexStringToByteArray(\n+        byte[] geomCLR = hexStringToByteArray(\nn-        byte[] geogWKB = hexStringToByteArray(\n+        byte[] geogCLR = hexStringToByteArray(\nn-        Geometry geomWKT = Geometry.deserialize(geomWKB);\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n-        assertEquals(geomWKT.asTextZM(), geoWKT);\n-        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        byte[] geoWKB = hexStringToByteArray(\nn+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests empty geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection1() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION EMPTY\";\n+        byte[] geomCLR = hexStringToByteArray(\"100000000104000000000000000001000000FFFFFFFFFFFFFFFF07\");\n+        byte[] geogCLR = hexStringToByteArray(\"E61000000104000000000000000001000000FFFFFFFFFFFFFFFF07\");\n+        byte[] geoWKB = hexStringToByteArray(\"010700000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests empty geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection2() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(GEOMETRYCOLLECTION EMPTY)\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF07\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF07\");\n+        byte[] geoWKB = hexStringToByteArray(\"010700000001000000010700000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection3() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(POINT(3 40 5 6))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"10000000010701000000000000000000084000000000000044400000000000001440000000000000184001000000010000000002000000FFFFFFFF0000000007000000000000000001\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E6100000010701000000000000000000444000000000000008400000000000001440000000000000184001000000010000000002000000FFFFFFFF0000000007000000000000000001\");\n+        byte[] geoWKB = hexStringToByteArray(\"010700000001000000010100000000000000000008400000000000004440\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection4() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(POINT EMPTY)\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF01\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF01\");\n+        byte[] geoWKB = hexStringToByteArray(\"010700000001000000010400000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection5() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(LINESTRING(1 0, 0 1, -1 0))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"10000000010403000000000000000000F03F00000000000000000000000000000000000000000000F03F000000000000F0BF000000000000000001000000010000000002000000FFFFFFFF0000000007000000000000000002\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000104030000000000000000000000000000000000F03F000000000000F03F00000000000000000000000000000000000000000000F0BF01000000010000000002000000FFFFFFFF0000000007000000000000000002\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"010700000001000000010200000003000000000000000000F03F00000000000000000000000000000000000000000000F03F000000000000F0BF0000000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection6() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(LINESTRING EMPTY)\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF02\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF02\");\n+        byte[] geoWKB = hexStringToByteArray(\"010700000001000000010200000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection7() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(POLYGON((0 0, 0 3, 3 3, 3 0, 0 0), (1 1, 1 2, 2 1, 1 1)))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000104090000000000000000000000000000000000000000000000000000000000000000000840000000000000084000000000000008400000000000000840000000000000000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000F03F00000000000000400000000000000040000000000000F03F000000000000F03F000000000000F03F020000000200000000000500000002000000FFFFFFFF0000000007000000000000000003\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000200090000000000000000000000000000000000000000000000000008400000000000000000000000000000084000000000000008400000000000000000000000000000084000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000F03F000000000000F03F0000000000000040000000000000F03F000000000000F03F020000000100000000010500000002000000FFFFFFFF0000000007000000000000000003\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"01070000000100000001030000000200000005000000000000000000000000000000000000000000000000000000000000000000084000000000000008400000000000000840000000000000084000000000000000000000000000000000000000000000000004000000000000000000F03F000000000000F03F000000000000F03F00000000000000400000000000000040000000000000F03F000000000000F03F000000000000F03F\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection8() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(POLYGON EMPTY)\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF03\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF03\");\n+        byte[] geoWKB = hexStringToByteArray(\"010700000001000000010300000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection9() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(MULTIPOINT((2 3), (7 8 9.5)))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"10000000010502000000000000000000004000000000000008400000000000001C400000000000002040000000000000F8FF0000000000002340020000000100000000010100000004000000FFFFFFFF0000000007000000000000000004010000000000000001010000000100000001\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000105020000000000000000000840000000000000004000000000000020400000000000001C40000000000000F8FF0000000000002340020000000100000000010100000004000000FFFFFFFF0000000007000000000000000004010000000000000001010000000100000001\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"01070000000100000001040000000200000001010000000000000000000040000000000000084001010000000000000000001C400000000000002040\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection10() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(MULTIPOINT EMPTY)\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF04\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF04\");\n+        byte[] geoWKB = hexStringToByteArray(\"010700000001000000010400000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection11() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(MULTILINESTRING((0 2, 1 1), (1 0, 1 1)))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"1000000001040400000000000000000000000000000000000040000000000000F03F000000000000F03F000000000000F03F0000000000000000000000000000F03F000000000000F03F020000000100000000010200000004000000FFFFFFFF0000000007000000000000000005010000000000000002010000000100000002\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E610000001040400000000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000F03F000000000000F03F000000000000F03F020000000100000000010200000004000000FFFFFFFF0000000007000000000000000005010000000000000002010000000100000002\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"01070000000100000001050000000200000001020000000200000000000000000000000000000000000040000000000000F03F000000000000F03F010200000002000000000000000000F03F0000000000000000000000000000F03F000000000000F03F\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection12() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(MULTILINESTRING EMPTY)\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF05\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF05\");\n+        byte[] geoWKB = hexStringToByteArray(\"010700000001000000010500000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection13() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(MULTIPOLYGON(((1 1, 1 2, 2 1, 1 1), (0 0, 0 3, 3 3, 3 0, 0 0 7)), ((9 9, 9 10, 10 9, 9 9))))\";\n+        byte[] geomCLR = hexStringToByteArray(\nn+        byte[] geogCLR = hexStringToByteArray(\nn+        byte[] geoWKB = hexStringToByteArray(\nn+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection14() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(MULTIPOLYGON(((9 9, 9 10, 10 9, 9 9)), ((1 1, 1 2, 2 1, 1 1), (0 0, 0 3, 3 3, 3 0, 0 0 7))))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"1000000001010D00000000000000000022400000000000002240000000000000224000000000000024400000000000002440000000000000224000000000000022400000000000002240000000000000F03F000000000000F03F000000000000F03F00000000000000400000000000000040000000000000F03F000000000000F03F000000000000F03F0000000000000000000000000000000000000000000000000000000000000840000000000000084000000000000008400000000000000840000000000000000000000000000000000000000000000000000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF0000000000001C400300000002000000000204000000000800000004000000FFFFFFFF0000000007000000000000000006010000000000000003010000000100000003\");\n+        byte[] geogCLR = hexStringToByteArray(\nn+        byte[] geoWKB = hexStringToByteArray(\nn+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n     }\n \n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection15() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(MULTIPOLYGON(((9 9, 9 10, 10 9, 9 9), (12 12, 0 0, 12 12, 12 12), (1 0, 3 4, 4 5, 6 7, 1 0)), ((9 9, 9 10, 10 9, 9 9)), ((1 1, 1 2, 2 1, 1 1), (0 0, 0 3, 3 3, 3 0, 0 0 7))))\";\n+        byte[] geomCLR = hexStringToByteArray(\nn+        byte[] geogCLR = hexStringToByteArray(\nn+        byte[] geoWKB = hexStringToByteArray(\nn+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection16() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(MULTIPOLYGON(((9 9, 9 10, 10 9, 9 9))))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000104040000000000000000002240000000000000224000000000000022400000000000002440000000000000244000000000000022400000000000002240000000000000224001000000020000000003000000FFFFFFFF0000000007000000000000000006010000000000000003\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000224040000000000000000002240000000000000224000000000000024400000000000002240000000000000224000000000000024400000000000002240000000000000224001000000010000000003000000FFFFFFFF0000000007000000000000000006010000000000000003\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"0107000000010000000106000000010000000103000000010000000400000000000000000022400000000000002240000000000000224000000000000024400000000000002440000000000000224000000000000022400000000000002240\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n     @Test\n-    public void testCircularStringWkb() throws SQLException {\n+    public void testGeometryCollection17() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(MULTIPOLYGON EMPTY)\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF06\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF06\");\n+        byte[] geoWKB = hexStringToByteArray(\"010700000001000000010600000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection18() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(CIRCULARSTRING(2 1 3 4, 1 2 3, 0 7 3, 1 0 3, 2 1 3))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000207050000000000000000000040000000000000F03F000000000000F03F000000000000004000000000000000000000000000001C40000000000000F03F00000000000000000000000000000040000000000000F03F000000000000084000000000000008400000000000000840000000000000084000000000000008400000000000001040000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF01000000020000000002000000FFFFFFFF0000000007000000000000000008\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E6100000020705000000000000000000F03F00000000000000400000000000000040000000000000F03F0000000000001C4000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000084000000000000008400000000000000840000000000000084000000000000008400000000000001040000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF01000000020000000002000000FFFFFFFF0000000007000000000000000008\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"0107000000010000000108000000050000000000000000000040000000000000F03F000000000000F03F000000000000004000000000000000000000000000001C40000000000000F03F00000000000000000000000000000040000000000000F03F\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection19() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(CIRCULARSTRING EMPTY)\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000204000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF08\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000204000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF08\");\n+        byte[] geoWKB = hexStringToByteArray(\"010700000001000000010800000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection20() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(COMPOUNDCURVE(CIRCULARSTRING(1 0 3, 0 1 3, 9 6 3, 8 7 3, -1 0 3), CIRCULARSTRING(-1 0 3, 7 9 3, -10 2 3), (-10 2 3, 77 77 77, 88 88 88, 2 6 4), (2 6 4, 3 3 6, 7 7 1)))\";\n+        byte[] geomCLR = hexStringToByteArray(\nn+        byte[] geogCLR = hexStringToByteArray(\nn+        byte[] geoWKB = hexStringToByteArray(\n+                \"010700000001000000010900000004000000010800000005000000000000000000F03F00000000000000000000000000000000000000000000F03F0000000000002240000000000000184000000000000020400000000000001C40000000000000F0BF0000000000000000010800000003000000000000000000F0BF00000000000000000000000000001C40000000000000224000000000000024C0000000000000004001020000000400000000000000000024C0000000000000004000000000004053400000000000405340000000000000564000000000000056400000000000000040000000000000184001020000000300000000000000000000400000000000001840000000000000084000000000000008400000000000001C400000000000001C40\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection21() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(COMPOUNDCURVE(CIRCULARSTRING(-1 0 3, 7 9 3, -10 2 3), (-10 2 3, 77 77 3, 88 88 3, 2 6 3), (2 6 3, 3 3 3, 2 6 3), CIRCULARSTRING(2 6 3, 0 1 3, 2 6 3)))\";\n+        byte[] geomCLR = hexStringToByteArray(\nn+        byte[] geogCLR = hexStringToByteArray(\nn+        byte[] geoWKB = hexStringToByteArray(\n+                \"010700000001000000010900000004000000010800000003000000000000000000F0BF00000000000000000000000000001C40000000000000224000000000000024C0000000000000004001020000000400000000000000000024C00000000000000040000000000040534000000000004053400000000000005640000000000000564000000000000000400000000000001840010200000003000000000000000000004000000000000018400000000000000840000000000000084000000000000000400000000000001840010800000003000000000000000000004000000000000018400000000000000000000000000000F03F00000000000000400000000000001840\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection22() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(COMPOUNDCURVE((1 1, 1 1)))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"10000000020002000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F01000000030000000002000000FFFFFFFF00000000070000000000000000090100000002\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E6100000020002000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F01000000030000000002000000FFFFFFFF00000000070000000000000000090100000002\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"010700000001000000010900000001000000010200000002000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection23() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(COMPOUNDCURVE EMPTY)\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000204000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF09\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000204000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF09\");\n+        byte[] geoWKB = hexStringToByteArray(\"010700000001000000010900000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection24() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(CURVEPOLYGON((0 0, 0 0, 0 0, 0 0), CIRCULARSTRING(1 3, 3 5, 4 7, 7 3, 1 3), COMPOUNDCURVE((0 -23.43778, 0 23.43778), CIRCULARSTRING(0 23.43778, -45 -23.43778, 0 -23.43778)), COMPOUNDCURVE((0 -23.43778, 7 7, 0 23.43778), CIRCULARSTRING(0 23.43778, 8 8, 8 8, -45 23.43778, -90 23.43778), (-90 23.43778, -90 -23.43778), CIRCULARSTRING(-90 -23.43778, -45 -23.43778, 0 -23.43778))))\";\n+        byte[] geomCLR = hexStringToByteArray(\nn+        byte[] geogCLR = hexStringToByteArray(\nn+        byte[] geoWKB = hexStringToByteArray(\nn+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection25() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(CURVEPOLYGON((0 0, 0 0, 0 0, 0 0)))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000200040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000010000000002000000FFFFFFFF000000000700000000000000000A\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000200040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000010000000002000000FFFFFFFF000000000700000000000000000A\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"010700000001000000010A0000000100000001020000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection26() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(CURVEPOLYGON(CIRCULARSTRING(1 3, 3 5, 4 7, 7 3, 1 3)))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"10000000020405000000000000000000F03F00000000000008400000000000000840000000000000144000000000000010400000000000001C400000000000001C400000000000000840000000000000F03F000000000000084001000000020000000002000000FFFFFFFF000000000700000000000000000A\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000224050000000000000000000840000000000000F03F000000000000144000000000000008400000000000001C40000000000000104000000000000008400000000000001C400000000000000840000000000000F03F01000000020000000002000000FFFFFFFF000000000700000000000000000A\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"010700000001000000010A00000001000000010800000005000000000000000000F03F00000000000008400000000000000840000000000000144000000000000010400000000000001C400000000000001C400000000000000840000000000000F03F0000000000000840\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection27() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(COMPOUNDCURVE((0 -23.43778, 0 23.43778)))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000204020000000000000000000000C7D79E59127037C00000000000000000C7D79E591270374001000000030000000002000000FFFFFFFF00000000070000000000000000090100000002\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E6100000020402000000C7D79E59127037C00000000000000000C7D79E5912703740000000000000000001000000030000000002000000FFFFFFFF00000000070000000000000000090100000002\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"0107000000010000000109000000010000000102000000020000000000000000000000C7D79E59127037C00000000000000000C7D79E5912703740\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection28() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(COMPOUNDCURVE EMPTY)\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000204000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF09\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000204000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF09\");\n+        byte[] geoWKB = hexStringToByteArray(\"010700000001000000010900000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection29() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(POINT(3 3 1), LINESTRING(1 0, 0 1, -1 0), CIRCULARSTRING(1 3, 3 5, 4 7, 7 3, 1 3), POLYGON((0 0 2, 1 10 3, 1 0 4, 0 0 2), (0 0 2, 1 10 3, 1 0 4, 0 0 2), (0 0 2, 1 10 3, 1 0 4, 0 0 2)), MULTIPOINT((2 3), (7 8 9.5)), MULTILINESTRING((0 2, 1 1), (1 0, 1 1)), MULTIPOLYGON(((0 0, 0 3, 3 3, 3 0, 0 0), (1 1, 1 2, 2 1, 1 1)), ((9 9, 9 10, 10 9, 9 9))), COMPOUNDCURVE(CIRCULARSTRING(1 0 3, 0 1 3, 9 6 3, 8 7 3, -1 0 3), CIRCULARSTRING(-1 0 3, 7 9 3, -10 2 3), (-10 2 3, 77 77 77, 88 88 88, 2 6 4), (2 6 4, 3 3 6, 7 7 1)), CURVEPOLYGON((0 0, 0 0, 0 0, 0 0), COMPOUNDCURVE((0 -23.43778, 0 23.43778), CIRCULARSTRING(0 23.43778, -45 -23.43778, 0 -23.43778)), COMPOUNDCURVE((0 -23.43778, 7 7, 0 23.43778), CIRCULARSTRING(0 23.43778, 8 8, 8 8, -45 23.43778, -90 23.43778), (-90 23.43778, -90 -23.43778), CIRCULARSTRING(-90 -23.43778, -45 -23.43778, 0 -23.43778))), POLYGON((0 0 2, 1 10 3, 1 0 4, 0 0 2))), GEOMETRYCOLLECTION EMPTY, CURVEPOLYGON((0 0, 0 0, 0 0, 0 0), CIRCULARSTRING(1 3, 3 5, 4 7, 7 3, 1 3), COMPOUNDCURVE((0 -23.43778, 0 23.43778), CIRCULARSTRING(0 23.43778, -45 -23.43778, 0 -23.43778)), COMPOUNDCURVE((0 -23.43778, 7 7, 0 23.43778), CIRCULARSTRING(0 23.43778, 8 8, 8 8, -45 23.43778, -90 23.43778), (-90 23.43778, -90 -23.43778), CIRCULARSTRING(-90 -23.43778, -45 -23.43778, 0 -23.43778))))\";\n+        byte[] geomCLR = hexStringToByteArray(\nn+        byte[] geogCLR = hexStringToByteArray(\nn+        byte[] geoWKB = hexStringToByteArray(\nn+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection30() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(POINT EMPTY, POINT(1 2), GEOMETRYCOLLECTION(MULTIPOINT((2 3), (7 8 9.5))))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"10000000010503000000000000000000F03F0000000000000040000000000000004000000000000008400000000000001C400000000000002040000000000000F8FF000000000000F8FF00000000000023400300000001000000000101000000010200000007000000FFFFFFFF000000000700000000FFFFFFFF01000000000000000001000000000100000007030000000100000004040000000100000001040000000200000001\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000105030000000000000000000040000000000000F03F0000000000000840000000000000004000000000000020400000000000001C40000000000000F8FF000000000000F8FF00000000000023400300000001000000000101000000010200000007000000FFFFFFFF000000000700000000FFFFFFFF01000000000000000001000000000100000007030000000100000004040000000100000001040000000200000001\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"0107000000030000000104000000000000000101000000000000000000F03F000000000000004001070000000100000001040000000200000001010000000000000000000040000000000000084001010000000000000000001C400000000000002040\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection31() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(COMPOUNDCURVE((0 -23.43778, 0 23.43778)), POLYGON EMPTY, LINESTRING EMPTY, POINT(1 2), MULTIPOINT EMPTY, MULTILINESTRING EMPTY, MULTIPOLYGON EMPTY, CIRCULARSTRING EMPTY, CURVEPOLYGON EMPTY, POLYGON EMPTY, COMPOUNDCURVE EMPTY, GEOMETRYCOLLECTION EMPTY, COMPOUNDCURVE((1 1, 1 1)))\";\n+        byte[] geomCLR = hexStringToByteArray(\nn+        byte[] geogCLR = hexStringToByteArray(\nn+        byte[] geoWKB = hexStringToByteArray(\n+                \"01070000000D0000000109000000010000000102000000020000000000000000000000C7D79E59127037C00000000000000000C7D79E59127037400103000000000000000102000000000000000101000000000000000000F03F0000000000000040010400000000000000010500000000000000010600000000000000010800000000000000010A00000000000000010300000000000000010900000000000000010700000000000000010900000001000000010200000002000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection32() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(POINT(3 4), GEOMETRYCOLLECTION EMPTY, MULTIPOINT((2 3), (7 8 9.5))))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"1000000001050300000000000000000008400000000000001040000000000000004000000000000008400000000000001C400000000000002040000000000000F8FF000000000000F8FF00000000000023400300000001000000000101000000010200000007000000FFFFFFFF000000000700000000000000000701000000000000000101000000FFFFFFFF07010000000100000004040000000100000001040000000200000001\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E6100000010503000000000000000000104000000000000008400000000000000840000000000000004000000000000020400000000000001C40000000000000F8FF000000000000F8FF00000000000023400300000001000000000101000000010200000007000000FFFFFFFF000000000700000000000000000701000000000000000101000000FFFFFFFF07010000000100000004040000000100000001040000000200000001\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"01070000000100000001070000000300000001010000000000000000000840000000000000104001070000000000000001040000000200000001010000000000000000000040000000000000084001010000000000000000001C400000000000002040\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection33() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(POINT(3 4), POLYGON EMPTY, POLYGON EMPTY, MULTIPOINT((2 3), (7 8 9.5)))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"1000000001050300000000000000000008400000000000001040000000000000004000000000000008400000000000001C400000000000002040000000000000F8FF000000000000F8FF00000000000023400300000001000000000101000000010200000007000000FFFFFFFF000000000700000000000000000100000000FFFFFFFF0300000000FFFFFFFF03000000000100000004040000000100000001040000000200000001\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E6100000010503000000000000000000104000000000000008400000000000000840000000000000004000000000000020400000000000001C40000000000000F8FF000000000000F8FF00000000000023400300000001000000000101000000010200000007000000FFFFFFFF000000000700000000000000000100000000FFFFFFFF0300000000FFFFFFFF03000000000100000004040000000100000001040000000200000001\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"01070000000400000001010000000000000000000840000000000000104001030000000000000001030000000000000001040000000200000001010000000000000000000040000000000000084001010000000000000000001C400000000000002040\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection34() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(LINESTRING(1 0, 0 1, -1 0), POLYGON EMPTY, POLYGON EMPTY, LINESTRING(1 0, 0 1, -1 0))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"10000000010406000000000000000000F03F00000000000000000000000000000000000000000000F03F000000000000F0BF0000000000000000000000000000F03F00000000000000000000000000000000000000000000F03F000000000000F0BF0000000000000000020000000100000000010300000005000000FFFFFFFF000000000700000000000000000200000000FFFFFFFF0300000000FFFFFFFF03000000000100000002\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000104060000000000000000000000000000000000F03F000000000000F03F00000000000000000000000000000000000000000000F0BF0000000000000000000000000000F03F000000000000F03F00000000000000000000000000000000000000000000F0BF020000000100000000010300000005000000FFFFFFFF000000000700000000000000000200000000FFFFFFFF0300000000FFFFFFFF03000000000100000002\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"010700000004000000010200000003000000000000000000F03F00000000000000000000000000000000000000000000F03F000000000000F0BF0000000000000000010300000000000000010300000000000000010200000003000000000000000000F03F00000000000000000000000000000000000000000000F03F000000000000F0BF0000000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection35() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(POLYGON((0 0, 0 3, 3 3, 3 0, 0 0), (1 1, 1 2, 2 1, 1 1)), POLYGON EMPTY, POLYGON EMPTY, POLYGON((0 0, 0 3, 3 3, 3 0, 0 0), (1 1, 1 2, 2 1, 1 1)))\";\n+        byte[] geomCLR = hexStringToByteArray(\nn+        byte[] geogCLR = hexStringToByteArray(\nn+        byte[] geoWKB = hexStringToByteArray(\nn+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection36() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(MULTIPOINT((2 3), (7 8 9.5)), POLYGON EMPTY, POLYGON EMPTY, MULTIPOINT((2 3), (7 8 9.5)))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"10000000010504000000000000000000004000000000000008400000000000001C400000000000002040000000000000004000000000000008400000000000001C400000000000002040000000000000F8FF0000000000002340000000000000F8FF000000000000234004000000010000000001010000000102000000010300000009000000FFFFFFFF000000000700000000000000000401000000000000000101000000010000000100000000FFFFFFFF0300000000FFFFFFFF03000000000200000004060000000200000001060000000300000001\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000105040000000000000000000840000000000000004000000000000020400000000000001C400000000000000840000000000000004000000000000020400000000000001C40000000000000F8FF0000000000002340000000000000F8FF000000000000234004000000010000000001010000000102000000010300000009000000FFFFFFFF000000000700000000000000000401000000000000000101000000010000000100000000FFFFFFFF0300000000FFFFFFFF03000000000200000004060000000200000001060000000300000001\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"01070000000400000001040000000200000001010000000000000000000040000000000000084001010000000000000000001C40000000000000204001030000000000000001030000000000000001040000000200000001010000000000000000000040000000000000084001010000000000000000001C400000000000002040\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection37() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(MULTILINESTRING((0 2, 1 1), (1 0, 1 1)), POLYGON EMPTY, POLYGON EMPTY, MULTILINESTRING((0 2, 1 1), (1 0, 1 1)))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"1000000001040800000000000000000000000000000000000040000000000000F03F000000000000F03F000000000000F03F0000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040000000000000F03F000000000000F03F000000000000F03F0000000000000000000000000000F03F000000000000F03F04000000010000000001020000000104000000010600000009000000FFFFFFFF000000000700000000000000000501000000000000000201000000010000000200000000FFFFFFFF0300000000FFFFFFFF03000000000200000005060000000200000002060000000300000002\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E610000001040800000000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000F03F000000000000F03F000000000000F03F00000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000F03F000000000000F03F000000000000F03F04000000010000000001020000000104000000010600000009000000FFFFFFFF000000000700000000000000000501000000000000000201000000010000000200000000FFFFFFFF0300000000FFFFFFFF03000000000200000005060000000200000002060000000300000002\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"01070000000400000001050000000200000001020000000200000000000000000000000000000000000040000000000000F03F000000000000F03F010200000002000000000000000000F03F0000000000000000000000000000F03F000000000000F03F01030000000000000001030000000000000001050000000200000001020000000200000000000000000000000000000000000040000000000000F03F000000000000F03F010200000002000000000000000000F03F0000000000000000000000000000F03F000000000000F03F\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection38() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(MULTIPOLYGON(((1 1, 1 2, 2 1, 1 1), (0 0, 0 3, 3 3, 3 0, 0 0 7)), ((9 9, 9 10, 10 9, 9 9))), POLYGON EMPTY, POLYGON EMPTY, MULTIPOLYGON(((1 1, 1 2, 2 1, 1 1), (0 0, 0 3, 3 3, 3 0, 0 0 7)), ((9 9, 9 10, 10 9, 9 9))))\";\n+        byte[] geomCLR = hexStringToByteArray(\nn+        byte[] geogCLR = hexStringToByteArray(\nn+        byte[] geoWKB = hexStringToByteArray(\nn+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection39() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(CIRCULARSTRING(2 1 3 4, 1 2 3, 0 7 3, 1 0 3, 2 1 3), POLYGON EMPTY, POLYGON EMPTY, CIRCULARSTRING(2 1 3 4, 1 2 3, 0 7 3, 1 0 3, 2 1 3))\";\n+        byte[] geomCLR = hexStringToByteArray(\nn+        byte[] geogCLR = hexStringToByteArray(\n+                \"E610000002070A000000000000000000F03F00000000000000400000000000000040000000000000F03F0000000000001C4000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000F03F00000000000000400000000000000040000000000000F03F0000000000001C4000000000000000000000000000000000000000000000F03F000000000000F03F000000000000004000000000000008400000000000000840000000000000084000000000000008400000000000000840000000000000084000000000000008400000000000000840000000000000084000000000000008400000000000001040000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF0000000000001040000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF020000000200000000020500000005000000FFFFFFFF000000000700000000000000000800000000FFFFFFFF0300000000FFFFFFFF03000000000100000008\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"0107000000040000000108000000050000000000000000000040000000000000F03F000000000000F03F000000000000004000000000000000000000000000001C40000000000000F03F00000000000000000000000000000040000000000000F03F0103000000000000000103000000000000000108000000050000000000000000000040000000000000F03F000000000000F03F000000000000004000000000000000000000000000001C40000000000000F03F00000000000000000000000000000040000000000000F03F\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection40() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(COMPOUNDCURVE((1 1, 1 1)), POLYGON EMPTY, POLYGON EMPTY, COMPOUNDCURVE((1 1, 1 1)))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"10000000020004000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F000000000000F03F000000000000F03F000000000000F03F000000000000F03F020000000300000000030200000005000000FFFFFFFF000000000700000000000000000900000000FFFFFFFF0300000000FFFFFFFF03000000000100000009020000000202\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E6100000020004000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F000000000000F03F000000000000F03F000000000000F03F000000000000F03F020000000300000000030200000005000000FFFFFFFF000000000700000000000000000900000000FFFFFFFF0300000000FFFFFFFF03000000000100000009020000000202\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"010700000004000000010900000001000000010200000002000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F010300000000000000010300000000000000010900000001000000010200000002000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection41() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(CURVEPOLYGON((0 0, 0 0, 0 0, 0 0)), POLYGON EMPTY, POLYGON EMPTY, CURVEPOLYGON((0 0, 0 0, 0 0, 0 0)))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000200080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000100000000010400000005000000FFFFFFFF000000000700000000000000000A00000000FFFFFFFF0300000000FFFFFFFF0300000000010000000A\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000200080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000100000000010400000005000000FFFFFFFF000000000700000000000000000A00000000FFFFFFFF0300000000FFFFFFFF0300000000010000000A\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"010700000004000000010A0000000100000001020000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010300000000000000010300000000000000010A0000000100000001020000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection42() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(COMPOUNDCURVE((0 -23.43778, 0 23.43778)), POLYGON EMPTY, POLYGON EMPTY, COMPOUNDCURVE((0 -23.43778, 0 23.43778)))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000204040000000000000000000000C7D79E59127037C00000000000000000C7D79E59127037400000000000000000C7D79E59127037C00000000000000000C7D79E5912703740020000000300000000030200000005000000FFFFFFFF000000000700000000000000000900000000FFFFFFFF0300000000FFFFFFFF03000000000100000009020000000202\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E6100000020404000000C7D79E59127037C00000000000000000C7D79E59127037400000000000000000C7D79E59127037C00000000000000000C7D79E59127037400000000000000000020000000300000000030200000005000000FFFFFFFF000000000700000000000000000900000000FFFFFFFF0300000000FFFFFFFF03000000000100000009020000000202\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"0107000000040000000109000000010000000102000000020000000000000000000000C7D79E59127037C00000000000000000C7D79E59127037400103000000000000000103000000000000000109000000010000000102000000020000000000000000000000C7D79E59127037C00000000000000000C7D79E5912703740\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection43() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(POINT(3 3 1)), POLYGON EMPTY, POLYGON EMPTY, GEOMETRYCOLLECTION(POINT(3 3 1)))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000105020000000000000000000840000000000000084000000000000008400000000000000840000000000000F03F000000000000F03F020000000100000000010100000007000000FFFFFFFF000000000700000000000000000701000000000000000100000000FFFFFFFF0300000000FFFFFFFF03000000000100000007050000000100000001\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000105020000000000000000000840000000000000084000000000000008400000000000000840000000000000F03F000000000000F03F020000000100000000010100000007000000FFFFFFFF000000000700000000000000000701000000000000000100000000FFFFFFFF0300000000FFFFFFFF03000000000100000007050000000100000001\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"010700000004000000010700000001000000010100000000000000000008400000000000000840010300000000000000010300000000000000010700000001000000010100000000000000000008400000000000000840\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests basic circularstring scenario.\n+     */\n+    @Test\n+    public void testCircularString() throws SQLException {\n         String geoWKT = \"CIRCULARSTRING(2 1 3 4, 1 2 3, 0 7 3, 1 0 3, 2 1 3)\";\n-        byte[] geomWKB = hexStringToByteArray(\n+        byte[] geomCLR = hexStringToByteArray(\n                 \"000000000207050000000000000000000040000000000000F03F000000000000F03F000000000000004000000000000000000000000000001C40000000000000F03F00000000000000000000000000000040000000000000F03F000000000000084000000000000008400000000000000840000000000000084000000000000008400000000000001040000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF01000000020000000001000000FFFFFFFF0000000008\");\n-        byte[] geogWKB = hexStringToByteArray(\n+        byte[] geogCLR = hexStringToByteArray(\n                 \"E6100000020705000000000000000000F03F00000000000000400000000000000040000000000000F03F0000000000001C4000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000084000000000000008400000000000000840000000000000084000000000000008400000000000001040000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF01000000020000000001000000FFFFFFFF0000000008\");\n-        Geometry geomWKT = Geometry.deserialize(geomWKB);\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n-        assertEquals(geomWKT.asTextZM(), geoWKT);\n-        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"0108000000050000000000000000000040000000000000F03F000000000000F03F000000000000004000000000000000000000000000001C40000000000000F03F00000000000000000000000000000040000000000000F03F\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n     }\n \n+    /**\n+     * Tests empty circularstring scenario.\n+     */\n+    @Test\n+    public void testCircularStringEmpty() throws SQLException {\n+        String geoWKT = \"CIRCULARSTRING EMPTY\";\n+        byte[] geomCLR = hexStringToByteArray(\"100000000204000000000000000001000000FFFFFFFFFFFFFFFF08\");\n+        byte[] geogCLR = hexStringToByteArray(\"E61000000204000000000000000001000000FFFFFFFFFFFFFFFF08\");\n+        byte[] geoWKB = hexStringToByteArray(\"010800000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests basic compoundcurve scenario.\n+     */\n     @Test\n-    public void testCompoundCurveWkb() throws SQLException {\n+    public void testCompoundCurve() throws SQLException {\n         String geoWKT = \"COMPOUNDCURVE(CIRCULARSTRING(1 0 3, 0 1 3, 9 6 3, 8 7 3, -1 0 3), CIRCULARSTRING(-1 0 3, 7 9 3, -10 2 3), (-10 2 3, 77 77 77, 88 88 88, 2 6 4), (2 6 4, 3 3 6, 7 7 1))\";\n-        byte[] geomWKB = hexStringToByteArray(\n+        byte[] geomCLR = hexStringToByteArray(\nn-        byte[] geogWKB = hexStringToByteArray(\n+        byte[] geogCLR = hexStringToByteArray(\nn-        Geometry geomWKT = Geometry.deserialize(geomWKB);\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n-        assertEquals(geomWKT.asTextZM(), geoWKT);\n-        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        byte[] geoWKB = hexStringToByteArray(\nn+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n     }\n \n+    /**\n+     * Tests basic compoundcurve scenario.\n+     */\n     @Test\n-    public void testCurvePolygonWkb() throws SQLException {\n-        String geoWKT = \"CURVEPOLYGON((0 0, 0 0, 0 0, 0 0), CIRCULARSTRING(1 3, 3 5, 4 7, 7 3, 1 3), COMPOUNDCURVE((0 -23.43778, 0 23.43778), CIRCULARSTRING(0 23.43778, -45 -23.43778, 0 -23.43778)), COMPOUNDCURVE((0 -23.43778, 7 7, 0 23.43778), CIRCULARSTRING(0 23.43778, 8 8, 8 8, -45 23.43778, -90 23.43778), (-90 23.43778, -90 -23.43778), CIRCULARSTRING(-90 -23.43778, -45 -23.43778, 0 -23.43778)))\";\n-        byte[] geomWKB = hexStringToByteArray(\nn-        byte[] geogWKB = hexStringToByteArray(\n-                \"E6100000020017000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000840000000000000F03F000000000000144000000000000008400000000000001C40000000000000104000000000000008400000000000001C400000000000000840000000000000F03FC7D79E59127037C00000000000000000C7D79E59127037400000000000000000C7D79E59127037C000000000008046C0C7D79E59127037C00000000000000000C7D79E59127037C000000000000000000000000000001C400000000000001C40C7D79E591270374000000000000000000000000000002040000000000000204000000000000020400000000000002040C7D79E591270374000000000008046C0C7D79E591270374000000000008056C0C7D79E59127037C000000000008056C0C7D79E59127037C000000000008046C0C7D79E59127037C0000000000000000004000000010000000002040000000309000000030D00000001000000FFFFFFFF000000000A080000000203020003010203\");\n-        Geometry geomWKT = Geometry.deserialize(geomWKB);\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n-        assertEquals(geomWKT.asTextZM(), geoWKT);\n-        assertEquals(geogWKT.asTextZM(), geoWKT);\n+    public void testCompoundCurve2() throws SQLException {\n+        String geoWKT = \"COMPOUNDCURVE(CIRCULARSTRING(-1 0 3, 7 9 3, -10 2 3), (-10 2 3, 77 77 3, 88 88 3, 2 6 3), (2 6 3, 3 3 3, 2 6 3), CIRCULARSTRING(2 6 3, 0 1 3, 2 6 3))\";\n+        byte[] geomCLR = hexStringToByteArray(\nn+        byte[] geogCLR = hexStringToByteArray(\nn+        byte[] geoWKB = hexStringToByteArray(\n+                \"010900000004000000010800000003000000000000000000F0BF00000000000000000000000000001C40000000000000224000000000000024C0000000000000004001020000000400000000000000000024C00000000000000040000000000040534000000000004053400000000000005640000000000000564000000000000000400000000000001840010200000003000000000000000000004000000000000018400000000000000840000000000000084000000000000000400000000000001840010800000003000000000000000000004000000000000018400000000000000000000000000000F03F00000000000000400000000000001840\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n     }\n \n+    /**\n+     * Tests basic compoundcurve scenario.\n+     */\n     @Test\n-    public void testFullGlobeWkb() throws SQLException {\n+    public void testCompoundCurve3() throws SQLException {\n+        String geoWKT = \"COMPOUNDCURVE((1 1, 1 1))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"10000000020002000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F01000000030000000001000000FFFFFFFF00000000090100000002\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E6100000020002000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F01000000030000000001000000FFFFFFFF00000000090100000002\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"010900000001000000010200000002000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests empty compoundcurve scenario.\n+     */\n+    @Test\n+    public void testCompoundCurveEmpty() throws SQLException {\n+        String geoWKT = \"COMPOUNDCURVE EMPTY\";\n+        byte[] geomCLR = hexStringToByteArray(\"100000000204000000000000000001000000FFFFFFFFFFFFFFFF09\");\n+        byte[] geogCLR = hexStringToByteArray(\"E61000000204000000000000000001000000FFFFFFFFFFFFFFFF09\");\n+        byte[] geoWKB = hexStringToByteArray(\"010900000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests basic curvepolygon scenario.\n+     */\n+    @Test\n+    public void testCurvePolygon() throws SQLException {\n+        String geoWKT = \"CURVEPOLYGON((0 0, 0 0, 0 0, 0 0), CIRCULARSTRING(1 3, 3 5, 4 7, 7 3, 1 3), COMPOUNDCURVE((0 -23.43778, 0 23.43778), CIRCULARSTRING(0 23.43778, -45 -23.43778, 0 -23.43778)), COMPOUNDCURVE((0 -23.43778, 7 7, 0 23.43778), CIRCULARSTRING(0 23.43778, 8 8, 8 8, -45 23.43778, -90 23.43778), (-90 23.43778, -90 -23.43778), CIRCULARSTRING(-90 -23.43778, -45 -23.43778, 0 -23.43778)), COMPOUNDCURVE((0 1, 0 2), CIRCULARSTRING(0 2, 3 4, 0 1)), COMPOUNDCURVE((0 1, 0 2), CIRCULARSTRING(0 2, 3 4, 0 1)))\";\n+        byte[] geomCLR = hexStringToByteArray(\nn+        byte[] geogCLR = hexStringToByteArray(\nn+        byte[] geoWKB = hexStringToByteArray(\nn+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests basic curvepolygon scenario.\n+     */\n+    @Test\n+    public void testCurvePolygon2() throws SQLException {\n+        String geoWKT = \"CURVEPOLYGON((0 0, 0 0, 0 0, 0 0))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000200040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000010000000001000000FFFFFFFF000000000A\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000200040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000010000000001000000FFFFFFFF000000000A\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"010A0000000100000001020000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests basic curvepolygon scenario.\n+     */\n+    @Test\n+    public void testCurvePolygon3() throws SQLException {\n+        String geoWKT = \"CURVEPOLYGON(CIRCULARSTRING(1 3, 3 5, 4 7, 7 3, 1 3))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"10000000020405000000000000000000F03F00000000000008400000000000000840000000000000144000000000000010400000000000001C400000000000001C400000000000000840000000000000F03F000000000000084001000000020000000001000000FFFFFFFF000000000A\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000224050000000000000000000840000000000000F03F000000000000144000000000000008400000000000001C40000000000000104000000000000008400000000000001C400000000000000840000000000000F03F01000000020000000001000000FFFFFFFF000000000A\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"010A00000001000000010800000005000000000000000000F03F00000000000008400000000000000840000000000000144000000000000010400000000000001C400000000000001C400000000000000840000000000000F03F0000000000000840\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests empty curvepolygon scenario.\n+     */\n+    @Test\n+    public void testCurvePolygonEmpty() throws SQLException {\n+        String geoWKT = \"CURVEPOLYGON EMPTY\";\n+        byte[] geomCLR = hexStringToByteArray(\"100000000204000000000000000001000000FFFFFFFFFFFFFFFF0A\");\n+        byte[] geogCLR = hexStringToByteArray(\"E61000000204000000000000000001000000FFFFFFFFFFFFFFFF0A\");\n+        byte[] geoWKB = hexStringToByteArray(\"010A00000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests fullglobe scenario.\n+     */\n+    @Test\n+    public void testFullGlobe() throws SQLException {\n         String geoWKT = \"FULLGLOBE\";\n-        byte[] geogWKB = hexStringToByteArray(\"E61000000224000000000000000001000000FFFFFFFFFFFFFFFF0B\");\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n+        byte[] geogCLR = hexStringToByteArray(\"E61000000224000000000000000001000000FFFFFFFFFFFFFFFF0B\");\n+        byte[] geoWKB = hexStringToByteArray(\"017E000000\");\n+        Geography geogWKT = Geography.deserialize(geogCLR);\n         assertEquals(geogWKT.asTextZM(), geoWKT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d16ac4b3e74c2c07a3e7016a6b10edb7c16bb7bd"}, "originalPosition": 1100}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNTYzMDAx", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#pullrequestreview-442563001", "createdAt": "2020-07-03T21:29:22Z", "commit": {"oid": "d16ac4b3e74c2c07a3e7016a6b10edb7c16bb7bd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMToyOToyMlrOGs38DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMToyOToyMlrOGs38DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcwNzAyMA==", "bodyText": "Can remove assertTrue", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#discussion_r449707020", "createdAt": "2020-07-03T21:29:22Z", "author": {"login": "ulvii"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/datatypes/SQLServerSpatialDatatypeTest.java", "diffHunk": "@@ -50,144 +51,1015 @@\n     static String spatialDatatypeTableName;\n     static boolean isDenaliOrLater = false;\n \n+    /**\n+     * Tests basic point scenario.\n+     */\n     @Test\n-    public void testPointWkb() throws SQLException {\n+    public void testPoint() throws SQLException {\n         String geoWKT = \"POINT(3 40 5 6)\";\n-        byte[] geomWKB = hexStringToByteArray(\n+        byte[] geomCLR = hexStringToByteArray(\n                 \"00000000010F0000000000000840000000000000444000000000000014400000000000001840\");\n-        byte[] geogWKB = hexStringToByteArray(\n+        byte[] geogCLR = hexStringToByteArray(\n                 \"E6100000010F0000000000004440000000000000084000000000000014400000000000001840\");\n-        Geometry geomWKT = Geometry.deserialize(geomWKB);\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n-        assertEquals(geomWKT.asTextZM(), geoWKT);\n-        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        byte[] geoWKB = hexStringToByteArray(\"010100000000000000000008400000000000004440\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n     }\n \n+    /**\n+     * Tests empty point scenario.\n+     */\n     @Test\n-    public void testLineStringWkb() throws SQLException {\n+    public void testPointEmpty() throws SQLException {\n+        String geoWKT = \"POINT EMPTY\";\n+        byte[] geomCLR = hexStringToByteArray(\"407100000104000000000000000001000000FFFFFFFFFFFFFFFF01\");\n+        byte[] geogCLR = hexStringToByteArray(\"E61000000104000000000000000001000000FFFFFFFFFFFFFFFF01\");\n+        byte[] geoWKB = hexStringToByteArray(\"010400000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests basic linestring scenario.\n+     */\n+    @Test\n+    public void testLineString() throws SQLException {\n         String geoWKT = \"LINESTRING(1 0, 0 1, -1 0)\";\n-        byte[] geomWKB = hexStringToByteArray(\n+        byte[] geomCLR = hexStringToByteArray(\n                 \"00000000010403000000000000000000F03F00000000000000000000000000000000000000000000F03F000000000000F0BF000000000000000001000000010000000001000000FFFFFFFF0000000002\");\n-        byte[] geogWKB = hexStringToByteArray(\n+        byte[] geogCLR = hexStringToByteArray(\n                 \"E61000000104030000000000000000000000000000000000F03F000000000000F03F00000000000000000000000000000000000000000000F0BF01000000010000000001000000FFFFFFFF0000000002\");\n-        Geometry geomWKT = Geometry.deserialize(geomWKB);\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n-        assertEquals(geomWKT.asTextZM(), geoWKT);\n-        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"010200000003000000000000000000F03F00000000000000000000000000000000000000000000F03F000000000000F0BF0000000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n     }\n \n+    /**\n+     * Tests empty linestring scenario.\n+     */\n+    @Test\n+    public void testLineStringEmpty() throws SQLException {\n+        String geoWKT = \"LINESTRING EMPTY\";\n+        byte[] geomCLR = hexStringToByteArray(\"FFFF00000104000000000000000001000000FFFFFFFFFFFFFFFF02\");\n+        byte[] geogCLR = hexStringToByteArray(\"E61000000104000000000000000001000000FFFFFFFFFFFFFFFF02\");\n+        byte[] geoWKB = hexStringToByteArray(\"010200000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests basic polygon scenario.\n+     */\n     @Test\n-    public void testPolygonWkb() throws SQLException {\n+    public void testPolygon() throws SQLException {\n         String geoWKT = \"POLYGON((0 0, 0 3, 3 3, 3 0, 0 0), (1 1, 1 2, 2 1, 1 1))\";\n-        byte[] geomWKB = hexStringToByteArray(\n+        byte[] geomCLR = hexStringToByteArray(\n                 \"000000000104090000000000000000000000000000000000000000000000000000000000000000000840000000000000084000000000000008400000000000000840000000000000000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000F03F00000000000000400000000000000040000000000000F03F000000000000F03F000000000000F03F020000000200000000000500000001000000FFFFFFFF0000000003\");\n-        byte[] geogWKB = hexStringToByteArray(\n+        byte[] geogCLR = hexStringToByteArray(\n                 \"E61000000200090000000000000000000000000000000000000000000000000008400000000000000000000000000000084000000000000008400000000000000000000000000000084000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000F03F000000000000F03F0000000000000040000000000000F03F000000000000F03F020000000100000000010500000001000000FFFFFFFF0000000003\");\n-        Geometry geomWKT = Geometry.deserialize(geomWKB);\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n-        assertEquals(geomWKT.asTextZM(), geoWKT);\n-        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"01030000000200000005000000000000000000000000000000000000000000000000000000000000000000084000000000000008400000000000000840000000000000084000000000000000000000000000000000000000000000000004000000000000000000F03F000000000000F03F000000000000F03F00000000000000400000000000000040000000000000F03F000000000000F03F000000000000F03F\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests empty polygon scenario.\n+     */\n+    @Test\n+    public void testPolygonEmpty() throws SQLException {\n+        String geoWKT = \"POLYGON EMPTY\";\n+        byte[] geomCLR = hexStringToByteArray(\"FFFF00000104000000000000000001000000FFFFFFFFFFFFFFFF03\");\n+        byte[] geogCLR = hexStringToByteArray(\"E61000000104000000000000000001000000FFFFFFFFFFFFFFFF03\");\n+        byte[] geoWKB = hexStringToByteArray(\"010300000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n     }\n \n+    /**\n+     * Tests basic multipoint scenario.\n+     */\n     @Test\n-    public void testMultiPointWkb() throws SQLException {\n+    public void testMultiPoint() throws SQLException {\n         String geoWKT = \"MULTIPOINT((2 3), (7 8 9.5))\";\n-        byte[] geomWKB = hexStringToByteArray(\n+        byte[] geomCLR = hexStringToByteArray(\n                 \"00000000010502000000000000000000004000000000000008400000000000001C400000000000002040000000000000F8FF0000000000002340020000000100000000010100000003000000FFFFFFFF0000000004000000000000000001000000000100000001\");\n-        byte[] geogWKB = hexStringToByteArray(\n+        byte[] geogCLR = hexStringToByteArray(\n                 \"E61000000105020000000000000000000840000000000000004000000000000020400000000000001C40000000000000F8FF0000000000002340020000000100000000010100000003000000FFFFFFFF0000000004000000000000000001000000000100000001\");\n-        Geometry geomWKT = Geometry.deserialize(geomWKB);\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n-        assertEquals(geomWKT.asTextZM(), geoWKT);\n-        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"01040000000200000001010000000000000000000040000000000000084001010000000000000000001C400000000000002040\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n     }\n \n+    /**\n+     * Tests empty multipoint scenario.\n+     */\n     @Test\n-    public void testMultiLineStringWkb() throws SQLException {\n+    public void testMultiPointEmpty() throws SQLException {\n+        String geoWKT = \"MULTIPOINT EMPTY\";\n+        byte[] geomCLR = hexStringToByteArray(\"FFFF00000104000000000000000001000000FFFFFFFFFFFFFFFF04\");\n+        byte[] geogCLR = hexStringToByteArray(\"E61000000104000000000000000001000000FFFFFFFFFFFFFFFF04\");\n+        byte[] geoWKB = hexStringToByteArray(\"010400000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests basic multilinestring scenario.\n+     */\n+    @Test\n+    public void testMultiLineString() throws SQLException {\n         String geoWKT = \"MULTILINESTRING((0 2, 1 1), (1 0, 1 1))\";\n-        byte[] geomWKB = hexStringToByteArray(\n+        byte[] geomCLR = hexStringToByteArray(\n                 \"0000000001040400000000000000000000000000000000000040000000000000F03F000000000000F03F000000000000F03F0000000000000000000000000000F03F000000000000F03F020000000100000000010200000003000000FFFFFFFF0000000005000000000000000002000000000100000002\");\n-        byte[] geogWKB = hexStringToByteArray(\n+        byte[] geogCLR = hexStringToByteArray(\n                 \"E610000001040400000000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000F03F000000000000F03F000000000000F03F020000000100000000010200000003000000FFFFFFFF0000000005000000000000000002000000000100000002\");\n-        Geometry geomWKT = Geometry.deserialize(geomWKB);\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n-        assertEquals(geomWKT.asTextZM(), geoWKT);\n-        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"01050000000200000001020000000200000000000000000000000000000000000040000000000000F03F000000000000F03F010200000002000000000000000000F03F0000000000000000000000000000F03F000000000000F03F\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n     }\n \n+    /**\n+     * Tests empty multilinestring scenario.\n+     */\n     @Test\n-    public void testMultiPolygonWkb() throws SQLException {\n+    public void testMultiLineStringEmpty() throws SQLException {\n+        String geoWKT = \"MULTILINESTRING EMPTY\";\n+        byte[] geomCLR = hexStringToByteArray(\"FFFF00000104000000000000000001000000FFFFFFFFFFFFFFFF05\");\n+        byte[] geogCLR = hexStringToByteArray(\"E61000000104000000000000000001000000FFFFFFFFFFFFFFFF05\");\n+        byte[] geoWKB = hexStringToByteArray(\"010500000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests basic multipolygon scenario.\n+     */\n+    @Test\n+    public void testMultiPolygon() throws SQLException {\n         String geoWKT = \"MULTIPOLYGON(((1 1, 1 2, 2 1, 1 1), (0 0, 0 3, 3 3, 3 0, 0 0 7)), ((9 9, 9 10, 10 9, 9 9)))\";\n-        byte[] geomWKB = hexStringToByteArray(\n+        byte[] geomCLR = hexStringToByteArray(\nn-        byte[] geogWKB = hexStringToByteArray(\n+        byte[] geogCLR = hexStringToByteArray(\nn-        Geometry geomWKT = Geometry.deserialize(geomWKB);\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n-        assertEquals(geomWKT.asTextZM(), geoWKT);\n-        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        byte[] geoWKB = hexStringToByteArray(\nn+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n     }\n \n+    /**\n+     * Tests basic multipolygon scenario.\n+     */\n     @Test\n-    public void testGeometryCollectionWkb() throws SQLException {\n+    public void testMultiPolygon2() throws SQLException {\n+        String geoWKT = \"MULTIPOLYGON(((9 9, 9 10, 10 9, 9 9)), ((1 1, 1 2, 2 1, 1 1), (0 0, 0 3, 3 3, 3 0, 0 0 7)))\";\n+        byte[] geomCLR = hexStringToByteArray(\nn+        byte[] geogCLR = hexStringToByteArray(\nn+        byte[] geoWKB = hexStringToByteArray(\nn+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests basic multipolygon scenario.\n+     */\n+    @Test\n+    public void testMultiPolygon3() throws SQLException {\n+        String geoWKT = \"MULTIPOLYGON(((9 9, 9 10, 10 9, 9 9), (12 12, 0 0, 12 12, 12 12), (1 0, 3 4, 4 5, 6 7, 1 0)), ((9 9, 9 10, 10 9, 9 9)), ((1 1, 1 2, 2 1, 1 1), (0 0, 0 3, 3 3, 3 0, 0 0 7)))\";\n+        byte[] geomCLR = hexStringToByteArray(\nn+        byte[] geogCLR = hexStringToByteArray(\nn+        byte[] geoWKB = hexStringToByteArray(\nn+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests basic multipolygon scenario.\n+     */\n+    @Test\n+    public void testMultiPolygon4() throws SQLException {\n+        String geoWKT = \"MULTIPOLYGON(((9 9, 9 10, 10 9, 9 9)))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"000000000104040000000000000000002240000000000000224000000000000022400000000000002440000000000000244000000000000022400000000000002240000000000000224001000000020000000002000000FFFFFFFF0000000006000000000000000003\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000224040000000000000000002240000000000000224000000000000024400000000000002240000000000000224000000000000024400000000000002240000000000000224001000000010000000002000000FFFFFFFF0000000006000000000000000003\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"0106000000010000000103000000010000000400000000000000000022400000000000002240000000000000224000000000000024400000000000002440000000000000224000000000000022400000000000002240\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests empty multipolygon scenario.\n+     */\n+    @Test\n+    public void testMultiPolygonEmpty() throws SQLException {\n+        String geoWKT = \"MULTIPOLYGON EMPTY\";\n+        byte[] geomCLR = hexStringToByteArray(\"000000000104000000000000000001000000FFFFFFFFFFFFFFFF06\");\n+        byte[] geogCLR = hexStringToByteArray(\"E61000000104000000000000000001000000FFFFFFFFFFFFFFFF06\");\n+        byte[] geoWKB = hexStringToByteArray(\"010600000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection() throws SQLException {\n         String geoWKT = \"GEOMETRYCOLLECTION(POINT(3 3 1), LINESTRING(1 0, 0 1, -1 0), CIRCULARSTRING(1 3, 3 5, 4 7, 7 3, 1 3), POLYGON((0 0 2, 1 10 3, 1 0 4, 0 0 2), (0 0 2, 1 10 3, 1 0 4, 0 0 2), (0 0 2, 1 10 3, 1 0 4, 0 0 2)), MULTIPOINT((2 3), (7 8 9.5)), MULTILINESTRING((0 2, 1 1), (1 0, 1 1)), MULTIPOLYGON(((0 0, 0 3, 3 3, 3 0, 0 0), (1 1, 1 2, 2 1, 1 1)), ((9 9, 9 10, 10 9, 9 9))), COMPOUNDCURVE(CIRCULARSTRING(1 0 3, 0 1 3, 9 6 3, 8 7 3, -1 0 3), CIRCULARSTRING(-1 0 3, 7 9 3, -10 2 3), (-10 2 3, 77 77 77, 88 88 88, 2 6 4), (2 6 4, 3 3 6, 7 7 1)), CURVEPOLYGON((0 0, 0 0, 0 0, 0 0), COMPOUNDCURVE((0 -23.43778, 0 23.43778), CIRCULARSTRING(0 23.43778, -45 -23.43778, 0 -23.43778)), COMPOUNDCURVE((0 -23.43778, 7 7, 0 23.43778), CIRCULARSTRING(0 23.43778, 8 8, 8 8, -45 23.43778, -90 23.43778), (-90 23.43778, -90 -23.43778), CIRCULARSTRING(-90 -23.43778, -45 -23.43778, 0 -23.43778))), POLYGON((0 0 2, 1 10 3, 1 0 4, 0 0 2)))\";\n-        byte[] geomWKB = hexStringToByteArray(\n+        byte[] geomCLR = hexStringToByteArray(\nn-        byte[] geogWKB = hexStringToByteArray(\n+        byte[] geogCLR = hexStringToByteArray(\nn-        Geometry geomWKT = Geometry.deserialize(geomWKB);\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n-        assertEquals(geomWKT.asTextZM(), geoWKT);\n-        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        byte[] geoWKB = hexStringToByteArray(\nn+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests empty geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection1() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION EMPTY\";\n+        byte[] geomCLR = hexStringToByteArray(\"100000000104000000000000000001000000FFFFFFFFFFFFFFFF07\");\n+        byte[] geogCLR = hexStringToByteArray(\"E61000000104000000000000000001000000FFFFFFFFFFFFFFFF07\");\n+        byte[] geoWKB = hexStringToByteArray(\"010700000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests empty geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection2() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(GEOMETRYCOLLECTION EMPTY)\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF07\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF07\");\n+        byte[] geoWKB = hexStringToByteArray(\"010700000001000000010700000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection3() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(POINT(3 40 5 6))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"10000000010701000000000000000000084000000000000044400000000000001440000000000000184001000000010000000002000000FFFFFFFF0000000007000000000000000001\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E6100000010701000000000000000000444000000000000008400000000000001440000000000000184001000000010000000002000000FFFFFFFF0000000007000000000000000001\");\n+        byte[] geoWKB = hexStringToByteArray(\"010700000001000000010100000000000000000008400000000000004440\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection4() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(POINT EMPTY)\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF01\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF01\");\n+        byte[] geoWKB = hexStringToByteArray(\"010700000001000000010400000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection5() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(LINESTRING(1 0, 0 1, -1 0))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"10000000010403000000000000000000F03F00000000000000000000000000000000000000000000F03F000000000000F0BF000000000000000001000000010000000002000000FFFFFFFF0000000007000000000000000002\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000104030000000000000000000000000000000000F03F000000000000F03F00000000000000000000000000000000000000000000F0BF01000000010000000002000000FFFFFFFF0000000007000000000000000002\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"010700000001000000010200000003000000000000000000F03F00000000000000000000000000000000000000000000F03F000000000000F0BF0000000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection6() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(LINESTRING EMPTY)\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF02\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF02\");\n+        byte[] geoWKB = hexStringToByteArray(\"010700000001000000010200000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection7() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(POLYGON((0 0, 0 3, 3 3, 3 0, 0 0), (1 1, 1 2, 2 1, 1 1)))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000104090000000000000000000000000000000000000000000000000000000000000000000840000000000000084000000000000008400000000000000840000000000000000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000F03F00000000000000400000000000000040000000000000F03F000000000000F03F000000000000F03F020000000200000000000500000002000000FFFFFFFF0000000007000000000000000003\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000200090000000000000000000000000000000000000000000000000008400000000000000000000000000000084000000000000008400000000000000000000000000000084000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000F03F000000000000F03F0000000000000040000000000000F03F000000000000F03F020000000100000000010500000002000000FFFFFFFF0000000007000000000000000003\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"01070000000100000001030000000200000005000000000000000000000000000000000000000000000000000000000000000000084000000000000008400000000000000840000000000000084000000000000000000000000000000000000000000000000004000000000000000000F03F000000000000F03F000000000000F03F00000000000000400000000000000040000000000000F03F000000000000F03F000000000000F03F\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection8() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(POLYGON EMPTY)\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF03\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF03\");\n+        byte[] geoWKB = hexStringToByteArray(\"010700000001000000010300000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection9() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(MULTIPOINT((2 3), (7 8 9.5)))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"10000000010502000000000000000000004000000000000008400000000000001C400000000000002040000000000000F8FF0000000000002340020000000100000000010100000004000000FFFFFFFF0000000007000000000000000004010000000000000001010000000100000001\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000105020000000000000000000840000000000000004000000000000020400000000000001C40000000000000F8FF0000000000002340020000000100000000010100000004000000FFFFFFFF0000000007000000000000000004010000000000000001010000000100000001\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"01070000000100000001040000000200000001010000000000000000000040000000000000084001010000000000000000001C400000000000002040\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection10() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(MULTIPOINT EMPTY)\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF04\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF04\");\n+        byte[] geoWKB = hexStringToByteArray(\"010700000001000000010400000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection11() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(MULTILINESTRING((0 2, 1 1), (1 0, 1 1)))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"1000000001040400000000000000000000000000000000000040000000000000F03F000000000000F03F000000000000F03F0000000000000000000000000000F03F000000000000F03F020000000100000000010200000004000000FFFFFFFF0000000007000000000000000005010000000000000002010000000100000002\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E610000001040400000000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000F03F000000000000F03F000000000000F03F020000000100000000010200000004000000FFFFFFFF0000000007000000000000000005010000000000000002010000000100000002\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"01070000000100000001050000000200000001020000000200000000000000000000000000000000000040000000000000F03F000000000000F03F010200000002000000000000000000F03F0000000000000000000000000000F03F000000000000F03F\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection12() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(MULTILINESTRING EMPTY)\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF05\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF05\");\n+        byte[] geoWKB = hexStringToByteArray(\"010700000001000000010500000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection13() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(MULTIPOLYGON(((1 1, 1 2, 2 1, 1 1), (0 0, 0 3, 3 3, 3 0, 0 0 7)), ((9 9, 9 10, 10 9, 9 9))))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"1000000001010D000000000000000000F03F000000000000F03F000000000000F03F00000000000000400000000000000040000000000000F03F000000000000F03F000000000000F03F000000000000000000000000000000000000000000000000000000000000084000000000000008400000000000000840000000000000084000000000000000000000000000000000000000000000000000000000000022400000000000002240000000000000224000000000000024400000000000002440000000000000224000000000000022400000000000002240000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF0000000000001C40000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF0300000002000000000004000000020900000004000000FFFFFFFF0000000007000000000000000006010000000000000003010000000200000003\");\n+        byte[] geogCLR = hexStringToByteArray(\nn+        byte[] geoWKB = hexStringToByteArray(\nn+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection14() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(MULTIPOLYGON(((9 9, 9 10, 10 9, 9 9)), ((1 1, 1 2, 2 1, 1 1), (0 0, 0 3, 3 3, 3 0, 0 0 7))))\";\n+        byte[] geomCLR = hexStringToByteArray(\nn+        byte[] geogCLR = hexStringToByteArray(\n+                \"E610000002010D00000000000000000022400000000000002240000000000000244000000000000022400000000000002240000000000000244000000000000022400000000000002240000000000000F03F000000000000F03F0000000000000040000000000000F03F000000000000F03F0000000000000040000000000000F03F000000000000F03F0000000000000000000000000000000000000000000008400000000000000000000000000000084000000000000008400000000000000000000000000000084000000000000000000000000000000000000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF0000000000001C400300000001000000000104000000010800000004000000FFFFFFFF0000000007000000000000000006010000000000000003010000000100000003\");\n+        byte[] geoWKB = hexStringToByteArray(\nn+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n     }\n \n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection15() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(MULTIPOLYGON(((9 9, 9 10, 10 9, 9 9), (12 12, 0 0, 12 12, 12 12), (1 0, 3 4, 4 5, 6 7, 1 0)), ((9 9, 9 10, 10 9, 9 9)), ((1 1, 1 2, 2 1, 1 1), (0 0, 0 3, 3 3, 3 0, 0 0 7))))\";\n+        byte[] geomCLR = hexStringToByteArray(\nn+        byte[] geogCLR = hexStringToByteArray(\nn+        byte[] geoWKB = hexStringToByteArray(\nn+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection16() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(MULTIPOLYGON(((9 9, 9 10, 10 9, 9 9))))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000104040000000000000000002240000000000000224000000000000022400000000000002440000000000000244000000000000022400000000000002240000000000000224001000000020000000003000000FFFFFFFF0000000007000000000000000006010000000000000003\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000224040000000000000000002240000000000000224000000000000024400000000000002240000000000000224000000000000024400000000000002240000000000000224001000000010000000003000000FFFFFFFF0000000007000000000000000006010000000000000003\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"0107000000010000000106000000010000000103000000010000000400000000000000000022400000000000002240000000000000224000000000000024400000000000002440000000000000224000000000000022400000000000002240\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n     @Test\n-    public void testCircularStringWkb() throws SQLException {\n+    public void testGeometryCollection17() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(MULTIPOLYGON EMPTY)\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF06\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000104000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF06\");\n+        byte[] geoWKB = hexStringToByteArray(\"010700000001000000010600000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection18() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(CIRCULARSTRING(2 1 3 4, 1 2 3, 0 7 3, 1 0 3, 2 1 3))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000207050000000000000000000040000000000000F03F000000000000F03F000000000000004000000000000000000000000000001C40000000000000F03F00000000000000000000000000000040000000000000F03F000000000000084000000000000008400000000000000840000000000000084000000000000008400000000000001040000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF01000000020000000002000000FFFFFFFF0000000007000000000000000008\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E6100000020705000000000000000000F03F00000000000000400000000000000040000000000000F03F0000000000001C4000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000084000000000000008400000000000000840000000000000084000000000000008400000000000001040000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF01000000020000000002000000FFFFFFFF0000000007000000000000000008\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"0107000000010000000108000000050000000000000000000040000000000000F03F000000000000F03F000000000000004000000000000000000000000000001C40000000000000F03F00000000000000000000000000000040000000000000F03F\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection19() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(CIRCULARSTRING EMPTY)\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000204000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF08\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000204000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF08\");\n+        byte[] geoWKB = hexStringToByteArray(\"010700000001000000010800000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection20() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(COMPOUNDCURVE(CIRCULARSTRING(1 0 3, 0 1 3, 9 6 3, 8 7 3, -1 0 3), CIRCULARSTRING(-1 0 3, 7 9 3, -10 2 3), (-10 2 3, 77 77 77, 88 88 88, 2 6 4), (2 6 4, 3 3 6, 7 7 1)))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"1000000002050C000000000000000000F03F00000000000000000000000000000000000000000000F03F0000000000002240000000000000184000000000000020400000000000001C40000000000000F0BF00000000000000000000000000001C40000000000000224000000000000024C00000000000000040000000000040534000000000004053400000000000005640000000000000564000000000000000400000000000001840000000000000084000000000000008400000000000001C400000000000001C4000000000000008400000000000000840000000000000084000000000000008400000000000000840000000000000084000000000000008400000000000405340000000000000564000000000000010400000000000001840000000000000F03F01000000030000000002000000FFFFFFFF0000000007000000000000000009080000000301030200000200\");\n+        byte[] geogCLR = hexStringToByteArray(\nn+        byte[] geoWKB = hexStringToByteArray(\n+                \"010700000001000000010900000004000000010800000005000000000000000000F03F00000000000000000000000000000000000000000000F03F0000000000002240000000000000184000000000000020400000000000001C40000000000000F0BF0000000000000000010800000003000000000000000000F0BF00000000000000000000000000001C40000000000000224000000000000024C0000000000000004001020000000400000000000000000024C0000000000000004000000000004053400000000000405340000000000000564000000000000056400000000000000040000000000000184001020000000300000000000000000000400000000000001840000000000000084000000000000008400000000000001C400000000000001C40\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection21() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(COMPOUNDCURVE(CIRCULARSTRING(-1 0 3, 7 9 3, -10 2 3), (-10 2 3, 77 77 3, 88 88 3, 2 6 3), (2 6 3, 3 3 3, 2 6 3), CIRCULARSTRING(2 6 3, 0 1 3, 2 6 3)))\";\n+        byte[] geomCLR = hexStringToByteArray(\nn+        byte[] geogCLR = hexStringToByteArray(\nn+        byte[] geoWKB = hexStringToByteArray(\n+                \"010700000001000000010900000004000000010800000003000000000000000000F0BF00000000000000000000000000001C40000000000000224000000000000024C0000000000000004001020000000400000000000000000024C00000000000000040000000000040534000000000004053400000000000005640000000000000564000000000000000400000000000001840010200000003000000000000000000004000000000000018400000000000000840000000000000084000000000000000400000000000001840010800000003000000000000000000004000000000000018400000000000000000000000000000F03F00000000000000400000000000001840\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection22() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(COMPOUNDCURVE((1 1, 1 1)))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"10000000020002000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F01000000030000000002000000FFFFFFFF00000000070000000000000000090100000002\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E6100000020002000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F01000000030000000002000000FFFFFFFF00000000070000000000000000090100000002\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"010700000001000000010900000001000000010200000002000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection23() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(COMPOUNDCURVE EMPTY)\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000204000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF09\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000204000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF09\");\n+        byte[] geoWKB = hexStringToByteArray(\"010700000001000000010900000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection24() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(CURVEPOLYGON((0 0, 0 0, 0 0, 0 0), CIRCULARSTRING(1 3, 3 5, 4 7, 7 3, 1 3), COMPOUNDCURVE((0 -23.43778, 0 23.43778), CIRCULARSTRING(0 23.43778, -45 -23.43778, 0 -23.43778)), COMPOUNDCURVE((0 -23.43778, 7 7, 0 23.43778), CIRCULARSTRING(0 23.43778, 8 8, 8 8, -45 23.43778, -90 23.43778), (-90 23.43778, -90 -23.43778), CIRCULARSTRING(-90 -23.43778, -45 -23.43778, 0 -23.43778))))\";\n+        byte[] geomCLR = hexStringToByteArray(\nn+        byte[] geogCLR = hexStringToByteArray(\nn+        byte[] geoWKB = hexStringToByteArray(\nn+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection25() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(CURVEPOLYGON((0 0, 0 0, 0 0, 0 0)))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000200040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000010000000002000000FFFFFFFF000000000700000000000000000A\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000200040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000010000000002000000FFFFFFFF000000000700000000000000000A\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"010700000001000000010A0000000100000001020000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection26() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(CURVEPOLYGON(CIRCULARSTRING(1 3, 3 5, 4 7, 7 3, 1 3)))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"10000000020405000000000000000000F03F00000000000008400000000000000840000000000000144000000000000010400000000000001C400000000000001C400000000000000840000000000000F03F000000000000084001000000020000000002000000FFFFFFFF000000000700000000000000000A\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000224050000000000000000000840000000000000F03F000000000000144000000000000008400000000000001C40000000000000104000000000000008400000000000001C400000000000000840000000000000F03F01000000020000000002000000FFFFFFFF000000000700000000000000000A\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"010700000001000000010A00000001000000010800000005000000000000000000F03F00000000000008400000000000000840000000000000144000000000000010400000000000001C400000000000001C400000000000000840000000000000F03F0000000000000840\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection27() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(COMPOUNDCURVE((0 -23.43778, 0 23.43778)))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000204020000000000000000000000C7D79E59127037C00000000000000000C7D79E591270374001000000030000000002000000FFFFFFFF00000000070000000000000000090100000002\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E6100000020402000000C7D79E59127037C00000000000000000C7D79E5912703740000000000000000001000000030000000002000000FFFFFFFF00000000070000000000000000090100000002\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"0107000000010000000109000000010000000102000000020000000000000000000000C7D79E59127037C00000000000000000C7D79E5912703740\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection28() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(COMPOUNDCURVE EMPTY)\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000204000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF09\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000204000000000000000002000000FFFFFFFFFFFFFFFF0700000000FFFFFFFF09\");\n+        byte[] geoWKB = hexStringToByteArray(\"010700000001000000010900000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection29() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(POINT(3 3 1), LINESTRING(1 0, 0 1, -1 0), CIRCULARSTRING(1 3, 3 5, 4 7, 7 3, 1 3), POLYGON((0 0 2, 1 10 3, 1 0 4, 0 0 2), (0 0 2, 1 10 3, 1 0 4, 0 0 2), (0 0 2, 1 10 3, 1 0 4, 0 0 2)), MULTIPOINT((2 3), (7 8 9.5)), MULTILINESTRING((0 2, 1 1), (1 0, 1 1)), MULTIPOLYGON(((0 0, 0 3, 3 3, 3 0, 0 0), (1 1, 1 2, 2 1, 1 1)), ((9 9, 9 10, 10 9, 9 9))), COMPOUNDCURVE(CIRCULARSTRING(1 0 3, 0 1 3, 9 6 3, 8 7 3, -1 0 3), CIRCULARSTRING(-1 0 3, 7 9 3, -10 2 3), (-10 2 3, 77 77 77, 88 88 88, 2 6 4), (2 6 4, 3 3 6, 7 7 1)), CURVEPOLYGON((0 0, 0 0, 0 0, 0 0), COMPOUNDCURVE((0 -23.43778, 0 23.43778), CIRCULARSTRING(0 23.43778, -45 -23.43778, 0 -23.43778)), COMPOUNDCURVE((0 -23.43778, 7 7, 0 23.43778), CIRCULARSTRING(0 23.43778, 8 8, 8 8, -45 23.43778, -90 23.43778), (-90 23.43778, -90 -23.43778), CIRCULARSTRING(-90 -23.43778, -45 -23.43778, 0 -23.43778))), POLYGON((0 0 2, 1 10 3, 1 0 4, 0 0 2))), GEOMETRYCOLLECTION EMPTY, CURVEPOLYGON((0 0, 0 0, 0 0, 0 0), CIRCULARSTRING(1 3, 3 5, 4 7, 7 3, 1 3), COMPOUNDCURVE((0 -23.43778, 0 23.43778), CIRCULARSTRING(0 23.43778, -45 -23.43778, 0 -23.43778)), COMPOUNDCURVE((0 -23.43778, 7 7, 0 23.43778), CIRCULARSTRING(0 23.43778, 8 8, 8 8, -45 23.43778, -90 23.43778), (-90 23.43778, -90 -23.43778), CIRCULARSTRING(-90 -23.43778, -45 -23.43778, 0 -23.43778))))\";\n+        byte[] geomCLR = hexStringToByteArray(\nn+        byte[] geogCLR = hexStringToByteArray(\nn+        byte[] geoWKB = hexStringToByteArray(\nn+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection30() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(POINT EMPTY, POINT(1 2), GEOMETRYCOLLECTION(MULTIPOINT((2 3), (7 8 9.5))))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"10000000010503000000000000000000F03F0000000000000040000000000000004000000000000008400000000000001C400000000000002040000000000000F8FF000000000000F8FF00000000000023400300000001000000000101000000010200000007000000FFFFFFFF000000000700000000FFFFFFFF01000000000000000001000000000100000007030000000100000004040000000100000001040000000200000001\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000105030000000000000000000040000000000000F03F0000000000000840000000000000004000000000000020400000000000001C40000000000000F8FF000000000000F8FF00000000000023400300000001000000000101000000010200000007000000FFFFFFFF000000000700000000FFFFFFFF01000000000000000001000000000100000007030000000100000004040000000100000001040000000200000001\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"0107000000030000000104000000000000000101000000000000000000F03F000000000000004001070000000100000001040000000200000001010000000000000000000040000000000000084001010000000000000000001C400000000000002040\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection31() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(COMPOUNDCURVE((0 -23.43778, 0 23.43778)), POLYGON EMPTY, LINESTRING EMPTY, POINT(1 2), MULTIPOINT EMPTY, MULTILINESTRING EMPTY, MULTIPOLYGON EMPTY, CIRCULARSTRING EMPTY, CURVEPOLYGON EMPTY, POLYGON EMPTY, COMPOUNDCURVE EMPTY, GEOMETRYCOLLECTION EMPTY, COMPOUNDCURVE((1 1, 1 1)))\";\n+        byte[] geomCLR = hexStringToByteArray(\nn+        byte[] geogCLR = hexStringToByteArray(\nn+        byte[] geoWKB = hexStringToByteArray(\n+                \"01070000000D0000000109000000010000000102000000020000000000000000000000C7D79E59127037C00000000000000000C7D79E59127037400103000000000000000102000000000000000101000000000000000000F03F0000000000000040010400000000000000010500000000000000010600000000000000010800000000000000010A00000000000000010300000000000000010900000000000000010700000000000000010900000001000000010200000002000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection32() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(POINT(3 4), GEOMETRYCOLLECTION EMPTY, MULTIPOINT((2 3), (7 8 9.5))))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"1000000001050300000000000000000008400000000000001040000000000000004000000000000008400000000000001C400000000000002040000000000000F8FF000000000000F8FF00000000000023400300000001000000000101000000010200000007000000FFFFFFFF000000000700000000000000000701000000000000000101000000FFFFFFFF07010000000100000004040000000100000001040000000200000001\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E6100000010503000000000000000000104000000000000008400000000000000840000000000000004000000000000020400000000000001C40000000000000F8FF000000000000F8FF00000000000023400300000001000000000101000000010200000007000000FFFFFFFF000000000700000000000000000701000000000000000101000000FFFFFFFF07010000000100000004040000000100000001040000000200000001\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"01070000000100000001070000000300000001010000000000000000000840000000000000104001070000000000000001040000000200000001010000000000000000000040000000000000084001010000000000000000001C400000000000002040\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection33() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(POINT(3 4), POLYGON EMPTY, POLYGON EMPTY, MULTIPOINT((2 3), (7 8 9.5)))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"1000000001050300000000000000000008400000000000001040000000000000004000000000000008400000000000001C400000000000002040000000000000F8FF000000000000F8FF00000000000023400300000001000000000101000000010200000007000000FFFFFFFF000000000700000000000000000100000000FFFFFFFF0300000000FFFFFFFF03000000000100000004040000000100000001040000000200000001\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E6100000010503000000000000000000104000000000000008400000000000000840000000000000004000000000000020400000000000001C40000000000000F8FF000000000000F8FF00000000000023400300000001000000000101000000010200000007000000FFFFFFFF000000000700000000000000000100000000FFFFFFFF0300000000FFFFFFFF03000000000100000004040000000100000001040000000200000001\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"01070000000400000001010000000000000000000840000000000000104001030000000000000001030000000000000001040000000200000001010000000000000000000040000000000000084001010000000000000000001C400000000000002040\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection34() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(LINESTRING(1 0, 0 1, -1 0), POLYGON EMPTY, POLYGON EMPTY, LINESTRING(1 0, 0 1, -1 0))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"10000000010406000000000000000000F03F00000000000000000000000000000000000000000000F03F000000000000F0BF0000000000000000000000000000F03F00000000000000000000000000000000000000000000F03F000000000000F0BF0000000000000000020000000100000000010300000005000000FFFFFFFF000000000700000000000000000200000000FFFFFFFF0300000000FFFFFFFF03000000000100000002\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000104060000000000000000000000000000000000F03F000000000000F03F00000000000000000000000000000000000000000000F0BF0000000000000000000000000000F03F000000000000F03F00000000000000000000000000000000000000000000F0BF020000000100000000010300000005000000FFFFFFFF000000000700000000000000000200000000FFFFFFFF0300000000FFFFFFFF03000000000100000002\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"010700000004000000010200000003000000000000000000F03F00000000000000000000000000000000000000000000F03F000000000000F0BF0000000000000000010300000000000000010300000000000000010200000003000000000000000000F03F00000000000000000000000000000000000000000000F03F000000000000F0BF0000000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection35() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(POLYGON((0 0, 0 3, 3 3, 3 0, 0 0), (1 1, 1 2, 2 1, 1 1)), POLYGON EMPTY, POLYGON EMPTY, POLYGON((0 0, 0 3, 3 3, 3 0, 0 0), (1 1, 1 2, 2 1, 1 1)))\";\n+        byte[] geomCLR = hexStringToByteArray(\nn+        byte[] geogCLR = hexStringToByteArray(\nn+        byte[] geoWKB = hexStringToByteArray(\nn+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection36() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(MULTIPOINT((2 3), (7 8 9.5)), POLYGON EMPTY, POLYGON EMPTY, MULTIPOINT((2 3), (7 8 9.5)))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"10000000010504000000000000000000004000000000000008400000000000001C400000000000002040000000000000004000000000000008400000000000001C400000000000002040000000000000F8FF0000000000002340000000000000F8FF000000000000234004000000010000000001010000000102000000010300000009000000FFFFFFFF000000000700000000000000000401000000000000000101000000010000000100000000FFFFFFFF0300000000FFFFFFFF03000000000200000004060000000200000001060000000300000001\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000105040000000000000000000840000000000000004000000000000020400000000000001C400000000000000840000000000000004000000000000020400000000000001C40000000000000F8FF0000000000002340000000000000F8FF000000000000234004000000010000000001010000000102000000010300000009000000FFFFFFFF000000000700000000000000000401000000000000000101000000010000000100000000FFFFFFFF0300000000FFFFFFFF03000000000200000004060000000200000001060000000300000001\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"01070000000400000001040000000200000001010000000000000000000040000000000000084001010000000000000000001C40000000000000204001030000000000000001030000000000000001040000000200000001010000000000000000000040000000000000084001010000000000000000001C400000000000002040\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection37() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(MULTILINESTRING((0 2, 1 1), (1 0, 1 1)), POLYGON EMPTY, POLYGON EMPTY, MULTILINESTRING((0 2, 1 1), (1 0, 1 1)))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"1000000001040800000000000000000000000000000000000040000000000000F03F000000000000F03F000000000000F03F0000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040000000000000F03F000000000000F03F000000000000F03F0000000000000000000000000000F03F000000000000F03F04000000010000000001020000000104000000010600000009000000FFFFFFFF000000000700000000000000000501000000000000000201000000010000000200000000FFFFFFFF0300000000FFFFFFFF03000000000200000005060000000200000002060000000300000002\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E610000001040800000000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000F03F000000000000F03F000000000000F03F00000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000F03F000000000000F03F000000000000F03F04000000010000000001020000000104000000010600000009000000FFFFFFFF000000000700000000000000000501000000000000000201000000010000000200000000FFFFFFFF0300000000FFFFFFFF03000000000200000005060000000200000002060000000300000002\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"01070000000400000001050000000200000001020000000200000000000000000000000000000000000040000000000000F03F000000000000F03F010200000002000000000000000000F03F0000000000000000000000000000F03F000000000000F03F01030000000000000001030000000000000001050000000200000001020000000200000000000000000000000000000000000040000000000000F03F000000000000F03F010200000002000000000000000000F03F0000000000000000000000000000F03F000000000000F03F\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection38() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(MULTIPOLYGON(((1 1, 1 2, 2 1, 1 1), (0 0, 0 3, 3 3, 3 0, 0 0 7)), ((9 9, 9 10, 10 9, 9 9))), POLYGON EMPTY, POLYGON EMPTY, MULTIPOLYGON(((1 1, 1 2, 2 1, 1 1), (0 0, 0 3, 3 3, 3 0, 0 0 7)), ((9 9, 9 10, 10 9, 9 9))))\";\n+        byte[] geomCLR = hexStringToByteArray(\nn+        byte[] geogCLR = hexStringToByteArray(\nn+        byte[] geoWKB = hexStringToByteArray(\nn+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection39() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(CIRCULARSTRING(2 1 3 4, 1 2 3, 0 7 3, 1 0 3, 2 1 3), POLYGON EMPTY, POLYGON EMPTY, CIRCULARSTRING(2 1 3 4, 1 2 3, 0 7 3, 1 0 3, 2 1 3))\";\n+        byte[] geomCLR = hexStringToByteArray(\nn+        byte[] geogCLR = hexStringToByteArray(\nn+        byte[] geoWKB = hexStringToByteArray(\n+                \"0107000000040000000108000000050000000000000000000040000000000000F03F000000000000F03F000000000000004000000000000000000000000000001C40000000000000F03F00000000000000000000000000000040000000000000F03F0103000000000000000103000000000000000108000000050000000000000000000040000000000000F03F000000000000F03F000000000000004000000000000000000000000000001C40000000000000F03F00000000000000000000000000000040000000000000F03F\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection40() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(COMPOUNDCURVE((1 1, 1 1)), POLYGON EMPTY, POLYGON EMPTY, COMPOUNDCURVE((1 1, 1 1)))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"10000000020004000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F000000000000F03F000000000000F03F000000000000F03F000000000000F03F020000000300000000030200000005000000FFFFFFFF000000000700000000000000000900000000FFFFFFFF0300000000FFFFFFFF03000000000100000009020000000202\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E6100000020004000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F000000000000F03F000000000000F03F000000000000F03F000000000000F03F020000000300000000030200000005000000FFFFFFFF000000000700000000000000000900000000FFFFFFFF0300000000FFFFFFFF03000000000100000009020000000202\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"010700000004000000010900000001000000010200000002000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F010300000000000000010300000000000000010900000001000000010200000002000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection41() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(CURVEPOLYGON((0 0, 0 0, 0 0, 0 0)), POLYGON EMPTY, POLYGON EMPTY, CURVEPOLYGON((0 0, 0 0, 0 0, 0 0)))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000200080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000100000000010400000005000000FFFFFFFF000000000700000000000000000A00000000FFFFFFFF0300000000FFFFFFFF0300000000010000000A\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000200080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000100000000010400000005000000FFFFFFFF000000000700000000000000000A00000000FFFFFFFF0300000000FFFFFFFF0300000000010000000A\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"010700000004000000010A0000000100000001020000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010300000000000000010300000000000000010A0000000100000001020000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection42() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(COMPOUNDCURVE((0 -23.43778, 0 23.43778)), POLYGON EMPTY, POLYGON EMPTY, COMPOUNDCURVE((0 -23.43778, 0 23.43778)))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000204040000000000000000000000C7D79E59127037C00000000000000000C7D79E59127037400000000000000000C7D79E59127037C00000000000000000C7D79E5912703740020000000300000000030200000005000000FFFFFFFF000000000700000000000000000900000000FFFFFFFF0300000000FFFFFFFF03000000000100000009020000000202\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E6100000020404000000C7D79E59127037C00000000000000000C7D79E59127037400000000000000000C7D79E59127037C00000000000000000C7D79E59127037400000000000000000020000000300000000030200000005000000FFFFFFFF000000000700000000000000000900000000FFFFFFFF0300000000FFFFFFFF03000000000100000009020000000202\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"0107000000040000000109000000010000000102000000020000000000000000000000C7D79E59127037C00000000000000000C7D79E59127037400103000000000000000103000000000000000109000000010000000102000000020000000000000000000000C7D79E59127037C00000000000000000C7D79E5912703740\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests geometrycollection scenario.\n+     */\n+    @Test\n+    public void testGeometryCollection43() throws SQLException {\n+        String geoWKT = \"GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(POINT(3 3 1)), POLYGON EMPTY, POLYGON EMPTY, GEOMETRYCOLLECTION(POINT(3 3 1)))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000105020000000000000000000840000000000000084000000000000008400000000000000840000000000000F03F000000000000F03F020000000100000000010100000007000000FFFFFFFF000000000700000000000000000701000000000000000100000000FFFFFFFF0300000000FFFFFFFF03000000000100000007050000000100000001\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000105020000000000000000000840000000000000084000000000000008400000000000000840000000000000F03F000000000000F03F020000000100000000010100000007000000FFFFFFFF000000000700000000000000000701000000000000000100000000FFFFFFFF0300000000FFFFFFFF03000000000100000007050000000100000001\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"010700000004000000010700000001000000010100000000000000000008400000000000000840010300000000000000010300000000000000010700000001000000010100000000000000000008400000000000000840\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests basic circularstring scenario.\n+     */\n+    @Test\n+    public void testCircularString() throws SQLException {\n         String geoWKT = \"CIRCULARSTRING(2 1 3 4, 1 2 3, 0 7 3, 1 0 3, 2 1 3)\";\n-        byte[] geomWKB = hexStringToByteArray(\n+        byte[] geomCLR = hexStringToByteArray(\n                 \"000000000207050000000000000000000040000000000000F03F000000000000F03F000000000000004000000000000000000000000000001C40000000000000F03F00000000000000000000000000000040000000000000F03F000000000000084000000000000008400000000000000840000000000000084000000000000008400000000000001040000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF01000000020000000001000000FFFFFFFF0000000008\");\n-        byte[] geogWKB = hexStringToByteArray(\n+        byte[] geogCLR = hexStringToByteArray(\n                 \"E6100000020705000000000000000000F03F00000000000000400000000000000040000000000000F03F0000000000001C4000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000084000000000000008400000000000000840000000000000084000000000000008400000000000001040000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF01000000020000000001000000FFFFFFFF0000000008\");\n-        Geometry geomWKT = Geometry.deserialize(geomWKB);\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n-        assertEquals(geomWKT.asTextZM(), geoWKT);\n-        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"0108000000050000000000000000000040000000000000F03F000000000000F03F000000000000004000000000000000000000000000001C40000000000000F03F00000000000000000000000000000040000000000000F03F\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n     }\n \n+    /**\n+     * Tests empty circularstring scenario.\n+     */\n+    @Test\n+    public void testCircularStringEmpty() throws SQLException {\n+        String geoWKT = \"CIRCULARSTRING EMPTY\";\n+        byte[] geomCLR = hexStringToByteArray(\"100000000204000000000000000001000000FFFFFFFFFFFFFFFF08\");\n+        byte[] geogCLR = hexStringToByteArray(\"E61000000204000000000000000001000000FFFFFFFFFFFFFFFF08\");\n+        byte[] geoWKB = hexStringToByteArray(\"010800000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests basic compoundcurve scenario.\n+     */\n     @Test\n-    public void testCompoundCurveWkb() throws SQLException {\n+    public void testCompoundCurve() throws SQLException {\n         String geoWKT = \"COMPOUNDCURVE(CIRCULARSTRING(1 0 3, 0 1 3, 9 6 3, 8 7 3, -1 0 3), CIRCULARSTRING(-1 0 3, 7 9 3, -10 2 3), (-10 2 3, 77 77 77, 88 88 88, 2 6 4), (2 6 4, 3 3 6, 7 7 1))\";\n-        byte[] geomWKB = hexStringToByteArray(\n+        byte[] geomCLR = hexStringToByteArray(\nn-        byte[] geogWKB = hexStringToByteArray(\n+        byte[] geogCLR = hexStringToByteArray(\nn-        Geometry geomWKT = Geometry.deserialize(geomWKB);\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n-        assertEquals(geomWKT.asTextZM(), geoWKT);\n-        assertEquals(geogWKT.asTextZM(), geoWKT);\n+        byte[] geoWKB = hexStringToByteArray(\nn+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n     }\n \n+    /**\n+     * Tests basic compoundcurve scenario.\n+     */\n     @Test\n-    public void testCurvePolygonWkb() throws SQLException {\n-        String geoWKT = \"CURVEPOLYGON((0 0, 0 0, 0 0, 0 0), CIRCULARSTRING(1 3, 3 5, 4 7, 7 3, 1 3), COMPOUNDCURVE((0 -23.43778, 0 23.43778), CIRCULARSTRING(0 23.43778, -45 -23.43778, 0 -23.43778)), COMPOUNDCURVE((0 -23.43778, 7 7, 0 23.43778), CIRCULARSTRING(0 23.43778, 8 8, 8 8, -45 23.43778, -90 23.43778), (-90 23.43778, -90 -23.43778), CIRCULARSTRING(-90 -23.43778, -45 -23.43778, 0 -23.43778)))\";\n-        byte[] geomWKB = hexStringToByteArray(\nn-        byte[] geogWKB = hexStringToByteArray(\nn-        Geometry geomWKT = Geometry.deserialize(geomWKB);\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n-        assertEquals(geomWKT.asTextZM(), geoWKT);\n-        assertEquals(geogWKT.asTextZM(), geoWKT);\n+    public void testCompoundCurve2() throws SQLException {\n+        String geoWKT = \"COMPOUNDCURVE(CIRCULARSTRING(-1 0 3, 7 9 3, -10 2 3), (-10 2 3, 77 77 3, 88 88 3, 2 6 3), (2 6 3, 3 3 3, 2 6 3), CIRCULARSTRING(2 6 3, 0 1 3, 2 6 3))\";\n+        byte[] geomCLR = hexStringToByteArray(\nn+        byte[] geogCLR = hexStringToByteArray(\nn+        byte[] geoWKB = hexStringToByteArray(\n+                \"010900000004000000010800000003000000000000000000F0BF00000000000000000000000000001C40000000000000224000000000000024C0000000000000004001020000000400000000000000000024C00000000000000040000000000040534000000000004053400000000000005640000000000000564000000000000000400000000000001840010200000003000000000000000000004000000000000018400000000000000840000000000000084000000000000000400000000000001840010800000003000000000000000000004000000000000018400000000000000000000000000000F03F00000000000000400000000000001840\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n     }\n \n+    /**\n+     * Tests basic compoundcurve scenario.\n+     */\n     @Test\n-    public void testFullGlobeWkb() throws SQLException {\n+    public void testCompoundCurve3() throws SQLException {\n+        String geoWKT = \"COMPOUNDCURVE((1 1, 1 1))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"10000000020002000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F01000000030000000001000000FFFFFFFF00000000090100000002\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E6100000020002000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F01000000030000000001000000FFFFFFFF00000000090100000002\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"010900000001000000010200000002000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests empty compoundcurve scenario.\n+     */\n+    @Test\n+    public void testCompoundCurveEmpty() throws SQLException {\n+        String geoWKT = \"COMPOUNDCURVE EMPTY\";\n+        byte[] geomCLR = hexStringToByteArray(\"100000000204000000000000000001000000FFFFFFFFFFFFFFFF09\");\n+        byte[] geogCLR = hexStringToByteArray(\"E61000000204000000000000000001000000FFFFFFFFFFFFFFFF09\");\n+        byte[] geoWKB = hexStringToByteArray(\"010900000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests basic curvepolygon scenario.\n+     */\n+    @Test\n+    public void testCurvePolygon() throws SQLException {\n+        String geoWKT = \"CURVEPOLYGON((0 0, 0 0, 0 0, 0 0), CIRCULARSTRING(1 3, 3 5, 4 7, 7 3, 1 3), COMPOUNDCURVE((0 -23.43778, 0 23.43778), CIRCULARSTRING(0 23.43778, -45 -23.43778, 0 -23.43778)), COMPOUNDCURVE((0 -23.43778, 7 7, 0 23.43778), CIRCULARSTRING(0 23.43778, 8 8, 8 8, -45 23.43778, -90 23.43778), (-90 23.43778, -90 -23.43778), CIRCULARSTRING(-90 -23.43778, -45 -23.43778, 0 -23.43778)), COMPOUNDCURVE((0 1, 0 2), CIRCULARSTRING(0 2, 3 4, 0 1)), COMPOUNDCURVE((0 1, 0 2), CIRCULARSTRING(0 2, 3 4, 0 1)))\";\n+        byte[] geomCLR = hexStringToByteArray(\nn+        byte[] geogCLR = hexStringToByteArray(\nn+        byte[] geoWKB = hexStringToByteArray(\nn+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests basic curvepolygon scenario.\n+     */\n+    @Test\n+    public void testCurvePolygon2() throws SQLException {\n+        String geoWKT = \"CURVEPOLYGON((0 0, 0 0, 0 0, 0 0))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"100000000200040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000010000000001000000FFFFFFFF000000000A\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000200040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000010000000001000000FFFFFFFF000000000A\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"010A0000000100000001020000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests basic curvepolygon scenario.\n+     */\n+    @Test\n+    public void testCurvePolygon3() throws SQLException {\n+        String geoWKT = \"CURVEPOLYGON(CIRCULARSTRING(1 3, 3 5, 4 7, 7 3, 1 3))\";\n+        byte[] geomCLR = hexStringToByteArray(\n+                \"10000000020405000000000000000000F03F00000000000008400000000000000840000000000000144000000000000010400000000000001C400000000000001C400000000000000840000000000000F03F000000000000084001000000020000000001000000FFFFFFFF000000000A\");\n+        byte[] geogCLR = hexStringToByteArray(\n+                \"E61000000224050000000000000000000840000000000000F03F000000000000144000000000000008400000000000001C40000000000000104000000000000008400000000000001C400000000000000840000000000000F03F01000000020000000001000000FFFFFFFF000000000A\");\n+        byte[] geoWKB = hexStringToByteArray(\n+                \"010A00000001000000010800000005000000000000000000F03F00000000000008400000000000000840000000000000144000000000000010400000000000001C400000000000001C400000000000000840000000000000F03F0000000000000840\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests empty curvepolygon scenario.\n+     */\n+    @Test\n+    public void testCurvePolygonEmpty() throws SQLException {\n+        String geoWKT = \"CURVEPOLYGON EMPTY\";\n+        byte[] geomCLR = hexStringToByteArray(\"100000000204000000000000000001000000FFFFFFFFFFFFFFFF0A\");\n+        byte[] geogCLR = hexStringToByteArray(\"E61000000204000000000000000001000000FFFFFFFFFFFFFFFF0A\");\n+        byte[] geoWKB = hexStringToByteArray(\"010A00000000000000\");\n+        validateGeometryGeography(geoWKT, geomCLR, geogCLR, geoWKB);\n+    }\n+\n+    /**\n+     * Tests fullglobe scenario.\n+     */\n+    @Test\n+    public void testFullGlobe() throws SQLException {\n         String geoWKT = \"FULLGLOBE\";\n-        byte[] geogWKB = hexStringToByteArray(\"E61000000224000000000000000001000000FFFFFFFFFFFFFFFF0B\");\n-        Geography geogWKT = Geography.deserialize(geogWKB);\n+        byte[] geogCLR = hexStringToByteArray(\"E61000000224000000000000000001000000FFFFFFFFFFFFFFFF0B\");\n+        byte[] geoWKB = hexStringToByteArray(\"017E000000\");\n+        Geography geogWKT = Geography.deserialize(geogCLR);\n         assertEquals(geogWKT.asTextZM(), geoWKT);\n+        assertTrue(Arrays.equals(geogWKT.STAsBinary(), geoWKB));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d16ac4b3e74c2c07a3e7016a6b10edb7c16bb7bd"}, "originalPosition": 1101}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b90eaef9ef7303763c00faac9a0e4f0f3f39e144", "author": {"user": {"login": "peterbae", "name": "Peter Bae"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/b90eaef9ef7303763c00faac9a0e4f0f3f39e144", "committedDate": "2020-07-03T21:46:24Z", "message": "change tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38583318c89fcd81822a14fe5a5664efa5bfe30d", "author": {"user": {"login": "peterbae", "name": "Peter Bae"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/38583318c89fcd81822a14fe5a5664efa5bfe30d", "committedDate": "2020-07-03T21:47:16Z", "message": "remove assertTrue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNTcyMjYw", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#pullrequestreview-442572260", "createdAt": "2020-07-03T23:03:58Z", "commit": {"oid": "38583318c89fcd81822a14fe5a5664efa5bfe30d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNTc0MDE0", "url": "https://github.com/microsoft/mssql-jdbc/pull/1364#pullrequestreview-442574014", "createdAt": "2020-07-03T23:29:26Z", "commit": {"oid": "38583318c89fcd81822a14fe5a5664efa5bfe30d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2573, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}