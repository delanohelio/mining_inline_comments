{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwOTg1NTEy", "number": 1251, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMTo1NToyNFrODftjkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMDo0ODoyN1rODhRkvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTc4ODM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/Util.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMTo1NToyNFrOFpk7LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjo1Nzo0M1rOFpmeOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0MDkwOA==", "bodyText": "just nit-picking...instead of so many ident levels why not just &&?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1251#discussion_r379140908", "createdAt": "2020-02-13T21:55:24Z", "author": {"login": "lilgreenbird"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/Util.java", "diffHunk": "@@ -416,29 +416,42 @@ else if (ch == ':')\n                     break;\n                 }\n                 case inEscapedValueStart: {\n-                    if (ch == '}') {\n-                        // no trimming use the value as it is.\n-                        name = SQLServerDriver.getNormalizedPropertyName(name, logger);\n-                        if (null != name) {\n-                            if (logger.isLoggable(Level.FINE)) {\n-                                if (!name.equals(SQLServerDriverStringProperty.USER.toString())\n-                                        && !name.equals(SQLServerDriverStringProperty.PASSWORD.toString()))\n-                                    logger.fine(\"Property:\" + name + \" Value:\" + value);\n-                            }\n-                            p.put(name, value);\n-                        }\n-\n-                        name = \"\";\n-                        value = \"\";\n-                        // to eat the spaces until the ; potentially we could do without the state but\n-                        // it would not be clean\n-                        state = inEscapedValueEnd;\n-                    } else {\n+                    // check for escaped }.\n+                    // when we see a }, first check to see if this is before the end of the string to avoid index out of range exception\n+                    // then check if the character immediately after is also a }.\n+                    // if it is, then we have a }}, which is not the closing of the escaped state.\n+                    if (ch == '}' && i + 1 <= tmpUrl.trim().length() && tmpUrl.charAt(i + 1) == '}') {\n                         builder = new StringBuilder();\n                         builder.append(value);\n                         builder.append(ch);\n                         value = builder.toString();\n+                        i++; // escaped }} into a }, so increment the counter once more\n                         // same state\n+                    } else {\n+                        if (ch == '}') {\n+                            // no trimming use the value as it is.\n+                            name = SQLServerDriver.getNormalizedPropertyName(name, logger);\n+                            if (null != name) {\n+                                if (logger.isLoggable(Level.FINE)) {\n+                                    if (!name.equals(SQLServerDriverStringProperty.USER.toString())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b1fc02b3f7f222edaedfbc6e550635242294536"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2NjI2NQ==", "bodyText": "I think this code looks fine. Each layer of if statement has a purpose to it, and it's easy to read.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1251#discussion_r379166265", "createdAt": "2020-02-13T22:57:43Z", "author": {"login": "peterbae"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/Util.java", "diffHunk": "@@ -416,29 +416,42 @@ else if (ch == ':')\n                     break;\n                 }\n                 case inEscapedValueStart: {\n-                    if (ch == '}') {\n-                        // no trimming use the value as it is.\n-                        name = SQLServerDriver.getNormalizedPropertyName(name, logger);\n-                        if (null != name) {\n-                            if (logger.isLoggable(Level.FINE)) {\n-                                if (!name.equals(SQLServerDriverStringProperty.USER.toString())\n-                                        && !name.equals(SQLServerDriverStringProperty.PASSWORD.toString()))\n-                                    logger.fine(\"Property:\" + name + \" Value:\" + value);\n-                            }\n-                            p.put(name, value);\n-                        }\n-\n-                        name = \"\";\n-                        value = \"\";\n-                        // to eat the spaces until the ; potentially we could do without the state but\n-                        // it would not be clean\n-                        state = inEscapedValueEnd;\n-                    } else {\n+                    // check for escaped }.\n+                    // when we see a }, first check to see if this is before the end of the string to avoid index out of range exception\n+                    // then check if the character immediately after is also a }.\n+                    // if it is, then we have a }}, which is not the closing of the escaped state.\n+                    if (ch == '}' && i + 1 <= tmpUrl.trim().length() && tmpUrl.charAt(i + 1) == '}') {\n                         builder = new StringBuilder();\n                         builder.append(value);\n                         builder.append(ch);\n                         value = builder.toString();\n+                        i++; // escaped }} into a }, so increment the counter once more\n                         // same state\n+                    } else {\n+                        if (ch == '}') {\n+                            // no trimming use the value as it is.\n+                            name = SQLServerDriver.getNormalizedPropertyName(name, logger);\n+                            if (null != name) {\n+                                if (logger.isLoggable(Level.FINE)) {\n+                                    if (!name.equals(SQLServerDriverStringProperty.USER.toString())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0MDkwOA=="}, "originalCommit": {"oid": "5b1fc02b3f7f222edaedfbc6e550635242294536"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MjE2MDkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/Util.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMDo0MDo1MFrOFr8yXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMDo0MDo1MFrOFr8yXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYyOTAyMg==", "bodyText": "Use multi line comments here.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1251#discussion_r381629022", "createdAt": "2020-02-20T00:40:50Z", "author": {"login": "ulvii"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/Util.java", "diffHunk": "@@ -416,29 +416,42 @@ else if (ch == ':')\n                     break;\n                 }\n                 case inEscapedValueStart: {\n-                    if (ch == '}') {\n-                        // no trimming use the value as it is.\n-                        name = SQLServerDriver.getNormalizedPropertyName(name, logger);\n-                        if (null != name) {\n-                            if (logger.isLoggable(Level.FINE)) {\n-                                if (!name.equals(SQLServerDriverStringProperty.USER.toString())\n-                                        && !name.equals(SQLServerDriverStringProperty.PASSWORD.toString()))\n-                                    logger.fine(\"Property:\" + name + \" Value:\" + value);\n-                            }\n-                            p.put(name, value);\n-                        }\n-\n-                        name = \"\";\n-                        value = \"\";\n-                        // to eat the spaces until the ; potentially we could do without the state but\n-                        // it would not be clean\n-                        state = inEscapedValueEnd;\n-                    } else {\n+                    // check for escaped }.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b1fc02b3f7f222edaedfbc6e550635242294536"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MjE3NTMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/Util.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMDo0ODoyN1rOFr87Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMDo0ODoyN1rOFr87Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYzMTI2Ng==", "bodyText": "trim() should be removed here, preceding white spaces in connection string would make i smaller than tmpUrl.trim().length().", "url": "https://github.com/microsoft/mssql-jdbc/pull/1251#discussion_r381631266", "createdAt": "2020-02-20T00:48:27Z", "author": {"login": "ulvii"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/Util.java", "diffHunk": "@@ -416,29 +416,42 @@ else if (ch == ':')\n                     break;\n                 }\n                 case inEscapedValueStart: {\n-                    if (ch == '}') {\n-                        // no trimming use the value as it is.\n-                        name = SQLServerDriver.getNormalizedPropertyName(name, logger);\n-                        if (null != name) {\n-                            if (logger.isLoggable(Level.FINE)) {\n-                                if (!name.equals(SQLServerDriverStringProperty.USER.toString())\n-                                        && !name.equals(SQLServerDriverStringProperty.PASSWORD.toString()))\n-                                    logger.fine(\"Property:\" + name + \" Value:\" + value);\n-                            }\n-                            p.put(name, value);\n-                        }\n-\n-                        name = \"\";\n-                        value = \"\";\n-                        // to eat the spaces until the ; potentially we could do without the state but\n-                        // it would not be clean\n-                        state = inEscapedValueEnd;\n-                    } else {\n+                    // check for escaped }.\n+                    // when we see a }, first check to see if this is before the end of the string to avoid index out of range exception\n+                    // then check if the character immediately after is also a }.\n+                    // if it is, then we have a }}, which is not the closing of the escaped state.\n+                    if (ch == '}' && i + 1 <= tmpUrl.trim().length() && tmpUrl.charAt(i + 1) == '}') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b1fc02b3f7f222edaedfbc6e550635242294536"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1195, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}