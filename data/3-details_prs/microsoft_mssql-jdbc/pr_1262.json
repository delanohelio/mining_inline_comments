{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MTI5MTA3", "number": 1262, "title": "Feature | Cleanup Always Encrypted with secure enclaves tests", "bodyText": "Driver changes:\nChanged logic to write '0' instead of writing a byte array of '0' when attempting to pad BigIntegers that are not exactly 48 bytes in size.\nTest Changes:\nRemoved duplicate tests from EnclaveTests that are covered in JDBCEncryptionDecryption.\nRemoved unnecessary server calls to check the state of AE.\nRemoved unnecessary setup calls in CallableStatement.\nAdded Enclave computation tests for:\n\nString compares with \"LIKE\"\nNumeric compares with \" = \"\nOn the spot column decryption with \"ALTER\"\n\nAdded a negative test which creates an encrypted table and attempts to perform AEv2 operations with a connection without AEv2 enabled.", "createdAt": "2020-02-13T22:56:47Z", "url": "https://github.com/microsoft/mssql-jdbc/pull/1262", "merged": true, "mergeCommit": {"oid": "a6da1ae6eea9e10117c75afedd3b5f724a665c1e"}, "closed": true, "closedAt": "2020-04-15T21:30:54Z", "author": {"login": "rene-ye"}, "timelineItems": {"totalCount": 50, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBa8qiAH2gAyMzc1MTI5MTA3OmM5N2I4NjNjOTUzODViZGNkMWFmYzg5N2VmMzljYmViYWY0OTU1Nzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcX8acuAFqTM5NDAyOTM4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c97b863c95385bdcd1afc897ef39cbebaf495578", "author": {"user": {"login": "lilgreenbird", "name": "lilgreenbird"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/c97b863c95385bdcd1afc897ef39cbebaf495578", "committedDate": "2020-02-05T19:03:48Z", "message": "Fix AEv2 tests exclude for reqExternalSetup and cleanup (#1247)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "931158ff0e1b83cc5dcc7a81b5a5f8cf4c4f9273", "author": {"user": {"login": "lilgreenbird", "name": "lilgreenbird"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/931158ff0e1b83cc5dcc7a81b5a5f8cf4c4f9273", "committedDate": "2020-02-05T21:41:02Z", "message": "skip AKV test properly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "397d3e86ce4fcb06a0851bfa30931ebcef219174", "author": {"user": {"login": "lilgreenbird", "name": "lilgreenbird"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/397d3e86ce4fcb06a0851bfa30931ebcef219174", "committedDate": "2020-02-05T22:41:08Z", "message": "removed enclave properties string to failed errors as enclave tests could be skipped"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54b5a194e5d46552419c86e0d1f8c800f42d3de8", "author": {"user": {"login": "peterbae", "name": "Peter Bae"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/54b5a194e5d46552419c86e0d1f8c800f42d3de8", "committedDate": "2020-02-08T00:19:05Z", "message": "Fix | Add null check for getObject() with LocalTime and LocalDate (#1250)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "672b7d67caae75250c53f82a760e8d3880e62a37", "author": {"user": {"login": "lilgreenbird", "name": "lilgreenbird"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/672b7d67caae75250c53f82a760e8d3880e62a37", "committedDate": "2020-02-10T19:04:22Z", "message": "added all AKV tests to use reqExternalSetup tag so they will be skipped by default (#1254)\n\n* skip AKV test properly\r\n\r\n* removed enclave properties string to failed errors as enclave tests could be skipped"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08d8ae3f3d9a3d02896bd79232104c948860f6f6", "author": {"user": {"login": "rene-ye", "name": "v-reye"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/08d8ae3f3d9a3d02896bd79232104c948860f6f6", "committedDate": "2020-02-10T20:11:10Z", "message": "Optimize callablestatement test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c67ebd5a9be81ee34623a528c032edd2dc8e4b5", "author": {"user": {"login": "rene-ye", "name": "v-reye"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/7c67ebd5a9be81ee34623a528c032edd2dc8e4b5", "committedDate": "2020-02-12T17:20:53Z", "message": "stop checking AE all the time, also add some tags"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62d2e64a821bd68daf09e589ca000f2d92f9be39", "author": {"user": {"login": "rene-ye", "name": "v-reye"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/62d2e64a821bd68daf09e589ca000f2d92f9be39", "committedDate": "2020-02-12T18:16:19Z", "message": "some changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e05c67ed652c3796789afca27e71ac61657615ea", "author": {"user": {"login": "rene-ye", "name": "v-reye"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/e05c67ed652c3796789afca27e71ac61657615ea", "committedDate": "2020-02-12T21:16:20Z", "message": "test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8979de23d70986fa17bdd4b24077288ef89140d3", "author": {"user": {"login": "rene-ye", "name": "v-reye"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/8979de23d70986fa17bdd4b24077288ef89140d3", "committedDate": "2020-02-12T21:22:58Z", "message": "Revert \"test\"\n\nThis reverts commit e05c67ed652c3796789afca27e71ac61657615ea."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89609f8c674ca7c7962217b82498e8fd38569771", "author": {"user": {"login": "rene-ye", "name": "v-reye"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/89609f8c674ca7c7962217b82498e8fd38569771", "committedDate": "2020-02-13T18:26:08Z", "message": "Revert \"some changes\"\n\nThis reverts commit 62d2e64a821bd68daf09e589ca000f2d92f9be39."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f048f3e0e5b6f505ce101d489f336fd0f7bab4a", "author": {"user": {"login": "rene-ye", "name": "v-reye"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/2f048f3e0e5b6f505ce101d489f336fd0f7bab4a", "committedDate": "2020-02-13T21:11:09Z", "message": "delete everythign"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80013a353967db91fdd3f10af8620498493005e9", "author": {"user": {"login": "rene-ye", "name": "v-reye"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/80013a353967db91fdd3f10af8620498493005e9", "committedDate": "2020-02-13T21:50:39Z", "message": "add aev2 stuff"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff339886b47f9b85bbc3bf7da8dc598edea2b2c8", "author": {"user": {"login": "rene-ye", "name": "v-reye"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/ff339886b47f9b85bbc3bf7da8dc598edea2b2c8", "committedDate": "2020-02-13T22:50:52Z", "message": "fix index out of bounds"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ce8158f82a84aa90e515de2235a8a6d42b16b73", "author": {"user": {"login": "rene-ye", "name": "v-reye"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/1ce8158f82a84aa90e515de2235a8a6d42b16b73", "committedDate": "2020-02-13T22:56:22Z", "message": "Merge branch 'dev' of https://github.com/Microsoft/mssql-jdbc into junit\n\n# Conflicts:\n#\tsrc/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/AESetup.java\n#\tsrc/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/EnclaveTest.java\n#\tsrc/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/JDBCEncryptionDecryptionTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4793f8157449631a6681870ae69eb6cce8cdcfc2", "author": {"user": {"login": "rene-ye", "name": "v-reye"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/4793f8157449631a6681870ae69eb6cce8cdcfc2", "committedDate": "2020-02-13T23:33:44Z", "message": "fix errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67aa997c863728d7d58a0039cd78a3627cef79b6", "author": {"user": {"login": "rene-ye", "name": "v-reye"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/67aa997c863728d7d58a0039cd78a3627cef79b6", "committedDate": "2020-02-14T00:22:37Z", "message": "Remove test that doesn't belong"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d6f6a55f75caf51f097970ed6e42e8a3a8dbf34", "author": {"user": {"login": "rene-ye", "name": "v-reye"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/8d6f6a55f75caf51f097970ed6e42e8a3a8dbf34", "committedDate": "2020-02-14T16:37:33Z", "message": "revert surefire plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "752595832af81e32544d68f112675e5e982797d3", "author": {"user": {"login": "rene-ye", "name": "v-reye"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/752595832af81e32544d68f112675e5e982797d3", "committedDate": "2020-02-14T23:15:14Z", "message": "fix exclude"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjgwODUx", "url": "https://github.com/microsoft/mssql-jdbc/pull/1262#pullrequestreview-359280851", "createdAt": "2020-02-15T00:01:39Z", "commit": {"oid": "752595832af81e32544d68f112675e5e982797d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMDowMTo0MFrOFqGx_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMDowMTo0MFrOFqGx_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY5NTYxNA==", "bodyText": "Where are you testing testRichQuery, testRichQueryDate, testRichQuery if they are removed?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1262#discussion_r379695614", "createdAt": "2020-02-15T00:01:40Z", "author": {"login": "ulvii"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/JDBCEncryptionDecryptionTest.java", "diffHunk": "@@ -2138,254 +2091,6 @@ void testWithSpecifiedtype(SQLServerResultSet rs, int numberOfColumns, String[]\n         index++;\n     }\n \n-    /**\n-     * Alter Column encryption on deterministic columns to randomized - this will trigger enclave to re-encrypt\n-     * \n-     * @param stmt\n-     * @param tableName\n-     * @param table\n-     * @param values\n-     * @throws SQLException\n-     */\n-    private void testAlterColumnEncryption(SQLServerStatement stmt, String tableName, String table[][],\n-            String cekName) throws SQLException {\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo)) {\n-            for (int i = 0; i < table.length; i++) {\n-                // alter deterministic to randomized\n-                String sql = \"ALTER TABLE \" + tableName + \" ALTER COLUMN \" + ColumnType.DETERMINISTIC.name()\n-                        + table[i][0] + \" \" + table[i][1]\n-                        + String.format(encryptSql, ColumnType.RANDOMIZED.name(), cekName) + \")\";\n-                try (SQLServerPreparedStatement pstmt = (SQLServerPreparedStatement) TestUtils.getPreparedStmt(con, sql,\n-                        stmtColEncSetting)) {\n-                    stmt.execute(sql);\n-                    if (!TestUtils.isAEv2(con)) {\n-                        fail(TestResource.getResource(\"R_expectedExceptionNotThrown\"));\n-                    }\n-                } catch (SQLException e) {\n-                    if (!TestUtils.isAEv2(con)) {\n-                        fail(TestResource.getResource(\"R_expectedExceptionNotThrown\"));\n-                    } else {\n-                        fail(TestResource.getResource(\"R_AlterAEv2Error\") + e.getMessage() + \"Query: \" + sql);\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    private void testRichQuery(SQLServerStatement stmt, String tableName, String table[][],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752595832af81e32544d68f112675e5e982797d3"}, "originalPosition": 1124}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MTM2Njkz", "url": "https://github.com/microsoft/mssql-jdbc/pull/1262#pullrequestreview-379136693", "createdAt": "2020-03-23T05:12:09Z", "commit": {"oid": "752595832af81e32544d68f112675e5e982797d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNToxMjowOVrOF53INA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNToxMjowOVrOF53INA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIxNjM3Mg==", "bodyText": "Can you explain this line?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1262#discussion_r396216372", "createdAt": "2020-03-23T05:12:09Z", "author": {"login": "peterbae"}, "path": "pom.xml", "diffHunk": "@@ -52,8 +52,8 @@\n \t\t\tNTLM  - - - - - - - For tests using NTLM Authentication mode (excluded by default) \n \t\t\treqExternalSetup  - For tests requiring external setup (excluded by default)\n \t\t\t- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \n-\t\t\tDefault testing enabled with SQL Server 2019 (SQLv15) -->\n-\t\t<excludedGroups>xSQLv15, NTLM, reqExternalSetup</excludedGroups>\n+\t\t\tDefault testing enabled with no extra dependencies -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752595832af81e32544d68f112675e5e982797d3"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abc42ed62636e156c270f12b62066f57c187ba8b", "author": {"user": {"login": "rene-ye", "name": "v-reye"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/abc42ed62636e156c270f12b62066f57c187ba8b", "committedDate": "2020-04-02T20:11:41Z", "message": "Merge branch 'dev' of https://github.com/microsoft/mssql-jdbc into junit\n\n# Conflicts:\n#\tpom.xml\n#\tsrc/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/AESetup.java\n#\tsrc/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/CallableStatementTest.java\n#\tsrc/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/EnclaveTest.java\n#\tsrc/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/JDBCEncryptionDecryptionTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f70a0b2feda25d8d28d19cc383f0e529f62de7f3", "author": {"user": {"login": "rene-ye", "name": "v-reye"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/f70a0b2feda25d8d28d19cc383f0e529f62de7f3", "committedDate": "2020-04-07T16:29:34Z", "message": "revert table creation logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0437d1c37b8ff7a06d231af0a208c9d98f0051d3", "author": {"user": {"login": "rene-ye", "name": "v-reye"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/0437d1c37b8ff7a06d231af0a208c9d98f0051d3", "committedDate": "2020-04-07T16:39:25Z", "message": "fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c0726bb595c3c3ab5fd76aa0ac103395467390d", "author": {"user": {"login": "rene-ye", "name": "v-reye"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/0c0726bb595c3c3ab5fd76aa0ac103395467390d", "committedDate": "2020-04-07T16:51:56Z", "message": "alter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8193c6828b7e5aa1ec1c787d69379ab2c6b9a340", "author": {"user": {"login": "rene-ye", "name": "v-reye"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/8193c6828b7e5aa1ec1c787d69379ab2c6b9a340", "committedDate": "2020-04-07T17:11:15Z", "message": "z"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42dbb3052c4e068d6eaa9155195ea6ea92e02a4c", "author": {"user": {"login": "rene-ye", "name": "v-reye"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/42dbb3052c4e068d6eaa9155195ea6ea92e02a4c", "committedDate": "2020-04-08T16:20:35Z", "message": "z"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bedd0ad568ec52e107c8e6c5be699614e063c347", "author": {"user": {"login": "rene-ye", "name": "v-reye"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/bedd0ad568ec52e107c8e6c5be699614e063c347", "committedDate": "2020-04-08T16:49:20Z", "message": "zz"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97408bcee711a586a8f807e775a396c2cffb26fd", "author": {"user": {"login": "rene-ye", "name": "v-reye"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/97408bcee711a586a8f807e775a396c2cffb26fd", "committedDate": "2020-04-08T17:21:56Z", "message": "temp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "817cf6c41353de79d5e2d0fa1856b1d42d0e2d03", "author": {"user": {"login": "rene-ye", "name": "v-reye"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/817cf6c41353de79d5e2d0fa1856b1d42d0e2d03", "committedDate": "2020-04-08T17:37:29Z", "message": "zzz"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3ceffa755426a131c0184e0a5f71f227185a179", "author": {"user": {"login": "rene-ye", "name": "v-reye"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/f3ceffa755426a131c0184e0a5f71f227185a179", "committedDate": "2020-04-08T18:18:22Z", "message": "zzz"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11a119816069694b9de6c76a528bee434c1338a4", "author": {"user": {"login": "rene-ye", "name": "v-reye"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/11a119816069694b9de6c76a528bee434c1338a4", "committedDate": "2020-04-08T18:18:56Z", "message": "Merge branch 'dev' of https://github.com/Microsoft/mssql-jdbc into junit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ca3c581f2524b9c9551ef20519c76acd312d888", "author": {"user": {"login": "rene-ye", "name": "v-reye"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/5ca3c581f2524b9c9551ef20519c76acd312d888", "committedDate": "2020-04-08T20:16:46Z", "message": "re-add print"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMjI0Mjk3", "url": "https://github.com/microsoft/mssql-jdbc/pull/1262#pullrequestreview-391224297", "createdAt": "2020-04-10T01:28:53Z", "commit": {"oid": "5ca3c581f2524b9c9551ef20519c76acd312d888"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMToyODo1M1rOGDueMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMToyODo1M1rOGDueMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2MDMwNw==", "bodyText": "Do we need this pstmt? It gets created but doesnt get used.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1262#discussion_r406560307", "createdAt": "2020-04-10T01:28:53Z", "author": {"login": "peterbae"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/AESetup.java", "diffHunk": "@@ -1959,4 +1941,38 @@ private static void dropCMK(String cmkName, Statement stmt) throws SQLException\n                 + \" drop column master key \" + cmkName + \" end\";\n         stmt.execute(cekSql);\n     }\n+\n+    /**\n+     * Alter Column encryption on deterministic columns to randomized - this will trigger enclave to re-encrypt\n+     * \n+     * @param stmt\n+     * @param tableName\n+     * @param table\n+     * @param values\n+     * @throws SQLException\n+     */\n+    protected void testAlterColumnEncryption(SQLServerStatement stmt, String tableName, String table[][],\n+            String cekName) throws SQLException {\n+        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo)) {\n+            for (int i = 0; i < table.length; i++) {\n+                // alter deterministic to randomized\n+                String sql = \"ALTER TABLE \" + tableName + \" ALTER COLUMN \" + ColumnType.DETERMINISTIC.name()\n+                        + table[i][0] + \" \" + table[i][1]\n+                        + String.format(encryptSql, ColumnType.RANDOMIZED.name(), cekName) + \")\";\n+                try (SQLServerPreparedStatement pstmt = (SQLServerPreparedStatement) TestUtils.getPreparedStmt(con, sql,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca3c581f2524b9c9551ef20519c76acd312d888"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMjI0Nzgx", "url": "https://github.com/microsoft/mssql-jdbc/pull/1262#pullrequestreview-391224781", "createdAt": "2020-04-10T01:30:53Z", "commit": {"oid": "5ca3c581f2524b9c9551ef20519c76acd312d888"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMTozMDo1M1rOGDuf3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMTozMDo1M1rOGDuf3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2MDczNQ==", "bodyText": "Should probably leave the newline at end of file?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1262#discussion_r406560735", "createdAt": "2020-04-10T01:30:53Z", "author": {"login": "peterbae"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/JDBCEncryptionDecryptionTest.java", "diffHunk": "@@ -2296,4 +2262,4 @@ public String getAccessToken(String authority, String resource, String scope) {\n             return result.getAccessToken();\n         }\n     };\n-}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca3c581f2524b9c9551ef20519c76acd312d888"}, "originalPosition": 649}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMzExNzQx", "url": "https://github.com/microsoft/mssql-jdbc/pull/1262#pullrequestreview-391311741", "createdAt": "2020-04-10T07:42:32Z", "commit": {"oid": "5ca3c581f2524b9c9551ef20519c76acd312d888"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzo0MjozM1rOGDzmPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzo0MjozM1rOGDzmPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NDI4Ng==", "bodyText": "params don't match", "url": "https://github.com/microsoft/mssql-jdbc/pull/1262#discussion_r406644286", "createdAt": "2020-04-10T07:42:33Z", "author": {"login": "lilgreenbird"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/AESetup.java", "diffHunk": "@@ -1959,4 +1941,38 @@ private static void dropCMK(String cmkName, Statement stmt) throws SQLException\n                 + \" drop column master key \" + cmkName + \" end\";\n         stmt.execute(cekSql);\n     }\n+\n+    /**\n+     * Alter Column encryption on deterministic columns to randomized - this will trigger enclave to re-encrypt\n+     * \n+     * @param stmt\n+     * @param tableName\n+     * @param table\n+     * @param values", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca3c581f2524b9c9551ef20519c76acd312d888"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMzEzMzY5", "url": "https://github.com/microsoft/mssql-jdbc/pull/1262#pullrequestreview-391313369", "createdAt": "2020-04-10T07:46:27Z", "commit": {"oid": "5ca3c581f2524b9c9551ef20519c76acd312d888"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzo0NjoyN1rOGDzrhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzo0NjoyN1rOGDzrhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NTYzNw==", "bodyText": "this is not necessary as a sep method since it's only called once now", "url": "https://github.com/microsoft/mssql-jdbc/pull/1262#discussion_r406645637", "createdAt": "2020-04-10T07:46:27Z", "author": {"login": "lilgreenbird"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/CallableStatementTest.java", "diffHunk": "@@ -127,15 +127,15 @@\n      */\n     @BeforeAll\n     public static void initValues() throws Exception {\n-        dropAll();\n-\n         numericValues = createNumericValues(nullable);\n         byteValues = createBinaryValues(nullable);\n         dateValues = createTemporalTypesCallableStatement(nullable);\n         charValues = createCharValues(nullable);\n+\n+        initCallableStatementTest();\n     }\n \n-    void initCallableStatementTest() throws Exception {\n+    static void initCallableStatementTest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca3c581f2524b9c9551ef20519c76acd312d888"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMzE1Njkz", "url": "https://github.com/microsoft/mssql-jdbc/pull/1262#pullrequestreview-391315693", "createdAt": "2020-04-10T07:52:21Z", "commit": {"oid": "5ca3c581f2524b9c9551ef20519c76acd312d888"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzo1MjoyMlrOGDzzGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzo1MjoyMlrOGDzzGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NzU3OA==", "bodyText": "test description", "url": "https://github.com/microsoft/mssql-jdbc/pull/1262#discussion_r406647578", "createdAt": "2020-04-10T07:52:22Z", "author": {"login": "lilgreenbird"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/EnclaveTest.java", "diffHunk": "@@ -206,656 +180,172 @@ public void testAEv2Disabled(String serverName, String url, String protocol) thr\n \n         try (SQLServerConnection con = PrepUtil.getConnection(testConnectionString);\n                 SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = createCharValues(nullable);\n-            testChars(stmt, cekJks, charTable, values, TestCase.NORMAL, true);\n+            String[] values = createCharValues(false);\n+            TestUtils.dropTableIfExists(CHAR_TABLE_AE, stmt);\n+            createTable(CHAR_TABLE_AE, cekJks, charTable);\n+            populateCharNormalCase(values);\n+            testAlterColumnEncryption(stmt, CHAR_TABLE_AE, charTable, cekJks);\n             fail(TestResource.getResource(\"R_expectedExceptionNotThrown\"));\n         } catch (Throwable e) {\n             // testChars called fail()\n             assertTrue(e.getMessage().contains(TestResource.getResource(\"R_AlterAEv2Error\")));\n         }\n     }\n \n-    /**\n-     * Test case for char set string for string values\n-     * \n-     * @throws Exception\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testCharSpecificSetter(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = createCharValues(nullable);\n-\n-            testChars(stmt, cekJks, charTable, values, TestCase.NORMAL, true);\n-            testChars(stmt, cekAkv, charTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for char set string for string values using windows certificate store\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testCharSpecificSetterWindows(String serverName, String url, String protocol) throws Exception {\n-        org.junit.Assume.assumeTrue(System.getProperty(\"os.name\").startsWith(\"Windows\"));\n-\n-        checkAESetup(serverName, url, protocol);\n-\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = createCharValues(nullable);\n-\n-            testChars(stmt, cekWin, charTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for char set object for string values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testCharSetObject(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = createCharValues(nullable);\n-\n-            testChars(stmt, cekJks, charTable, values, TestCase.SETOBJECT, true);\n-            testChars(stmt, cekAkv, charTable, values, TestCase.SETOBJECT, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for char set object for jdbc string values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testCharSetObjectWithJDBCTypes(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = createCharValues(nullable);\n-\n-            testChars(stmt, cekJks, charTable, values, TestCase.SETOBJECT_WITH_JDBCTYPES, true);\n-            testChars(stmt, cekAkv, charTable, values, TestCase.SETOBJECT_WITH_JDBCTYPES, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for char set string for null values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testCharSpecificSetterNull(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = {null, null, null, null, null, null, null, null, null};\n-\n-            testChars(stmt, cekJks, charTable, values, TestCase.NORMAL, true);\n-            testChars(stmt, cekAkv, charTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for char set object for null values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testCharSetObjectNull(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = {null, null, null, null, null, null, null, null, null};\n-\n-            testChars(stmt, cekJks, charTable, values, TestCase.SETOBJECT, true);\n-            testChars(stmt, cekAkv, charTable, values, TestCase.SETOBJECT, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for char set null for null values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testCharSetNull(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = {null, null, null, null, null, null, null, null, null};\n-\n-            testChars(stmt, cekJks, charTable, values, TestCase.NULL, true);\n-            testChars(stmt, cekAkv, charTable, values, TestCase.NULL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for binary set binary for binary values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testBinarySpecificSetter(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<byte[]> values = createBinaryValues(false);\n-\n-            testBinaries(stmt, cekJks, binaryTable, values, TestCase.NORMAL, true);\n-            testBinaries(stmt, cekAkv, binaryTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for binary set binary for binary values using windows certificate store\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testBinarySpecificSetterWindows(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        org.junit.Assume.assumeTrue(System.getProperty(\"os.name\").startsWith(\"Windows\"));\n-\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<byte[]> values = createBinaryValues(false);\n-\n-            testBinaries(stmt, cekWin, binaryTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for binary set object for binary values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testBinarySetobject(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<byte[]> values = createBinaryValues(false);\n-\n-            testBinaries(stmt, cekJks, binaryTable, values, TestCase.SETOBJECT, true);\n-            testBinaries(stmt, cekAkv, binaryTable, values, TestCase.SETOBJECT, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for binary set null for binary values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testBinarySetNull(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<byte[]> values = createBinaryValues(true);\n-\n-            testBinaries(stmt, cekJks, binaryTable, values, TestCase.NULL, true);\n-            testBinaries(stmt, cekAkv, binaryTable, values, TestCase.NULL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for binary set binary for null values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testBinarySpecificSetterNull(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<byte[]> values = createBinaryValues(true);\n-\n-            testBinaries(stmt, cekJks, binaryTable, values, TestCase.NORMAL, true);\n-            testBinaries(stmt, cekAkv, binaryTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for binary set object for null values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testBinarysetObjectNull(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<byte[]> values = createBinaryValues(true);\n-\n-            testBinaries(stmt, cekJks, binaryTable, values, TestCase.SETOBJECT_NULL, true);\n-            testBinaries(stmt, cekAkv, binaryTable, values, TestCase.SETOBJECT_NULL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for binary set object for jdbc type binary values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testBinarySetObjectWithJDBCTypes(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<byte[]> values = createBinaryValues(false);\n-\n-            testBinaries(stmt, cekJks, binaryTable, values, TestCase.SETOBJECT_WITH_JDBCTYPES, true);\n-            testBinaries(stmt, cekAkv, binaryTable, values, TestCase.SETOBJECT_WITH_JDBCTYPES, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for date set date for date values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testDateSpecificSetter(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<Object> values = createTemporalTypes(nullable);\n-\n-            testDates(stmt, cekJks, dateTable, values, TestCase.NORMAL, true);\n-            testDates(stmt, cekAkv, dateTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for date set date for date values using windows certificate store\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testDateSpecificSetterWindows(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        org.junit.Assume.assumeTrue(System.getProperty(\"os.name\").startsWith(\"Windows\"));\n-\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<Object> values = createTemporalTypes(nullable);\n-\n-            testDates(stmt, cekWin, dateTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for date set object for date values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testDateSetObject(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<Object> values = createTemporalTypes(nullable);\n-\n-            testDates(stmt, cekJks, dateTable, values, TestCase.SETOBJECT, true);\n-            testDates(stmt, cekAkv, dateTable, values, TestCase.SETOBJECT, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for date set object for java date values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testDateSetObjectWithJavaType(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<Object> values = createTemporalTypes(nullable);\n-\n-            testDates(stmt, cekJks, dateTable, values, TestCase.SETOBJECT_WITH_JAVATYPES, true);\n-            testDates(stmt, cekAkv, dateTable, values, TestCase.SETOBJECT_WITH_JAVATYPES, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for date set object for jdbc date values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testDateSetObjectWithJDBCType(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<Object> values = createTemporalTypes(nullable);\n-\n-            testDates(stmt, cekJks, dateTable, values, TestCase.SETOBJECT_WITH_JDBCTYPES, true);\n-            testDates(stmt, cekAkv, dateTable, values, TestCase.SETOBJECT_WITH_JDBCTYPES, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for date set date for min/max date values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testDateSpecificSetterMinMaxValue(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            RandomData.returnMinMax = true;\n-            LinkedList<Object> values = createTemporalTypes(nullable);\n-\n-            testDates(stmt, cekJks, dateTable, values, TestCase.NORMAL, true);\n-            testDates(stmt, cekAkv, dateTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for date set date for null values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testDateSetNull(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            RandomData.returnNull = true;\n-            nullable = true;\n-            LinkedList<Object> values = createTemporalTypes(nullable);\n-\n-            testDates(stmt, cekJks, dateTable, values, TestCase.NULL, true);\n-            testDates(stmt, cekAkv, dateTable, values, TestCase.NULL, true);\n-        }\n-\n-        nullable = false;\n-        RandomData.returnNull = false;\n-    }\n-\n-    /**\n-     * Test case for date set object for null values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testDateSetObjectNull(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        RandomData.returnNull = true;\n-        nullable = true;\n-\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<Object> values = createTemporalTypes(nullable);\n-\n-            testDates(stmt, cekJks, dateTable, values, TestCase.SETOBJECT_NULL, true);\n-            testDates(stmt, cekAkv, dateTable, values, TestCase.SETOBJECT_NULL, true);\n-        }\n-\n-        nullable = false;\n-        RandomData.returnNull = false;\n-    }\n-\n-    /**\n-     * Test case for numeric set numeric for numeric values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testNumericSpecificSetter(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-\n-            String[] values1 = createNumericValues(nullable);\n-            String[] values2 = new String[values1.length];\n-            System.arraycopy(values1, 0, values2, 0, values1.length);\n-\n-            testNumerics(stmt, cekJks, numericTable, values1, values2, TestCase.NORMAL, true);\n-            testNumerics(stmt, cekAkv, numericTable, values1, values2, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for numeric set numeric for numeric values using windows certificate store\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testNumericSpecificSetterWindows(String serverName, String url, String protocol) throws Exception {\n-        org.junit.Assume.assumeTrue(System.getProperty(\"os.name\").startsWith(\"Windows\"));\n-\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-\n-            String[] values1 = createNumericValues(nullable);\n-            String[] values2 = new String[values1.length];\n-            System.arraycopy(values1, 0, values2, 0, values1.length);\n-\n-            testNumerics(stmt, cekWin, numericTable, values1, values2, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for numeric set object for numeric values F\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testNumericSetObject(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values1 = createNumericValues(nullable);\n-            String[] values2 = new String[values1.length];\n-            System.arraycopy(values1, 0, values2, 0, values1.length);\n-\n-            testNumerics(stmt, cekJks, numericTable, values1, values2, TestCase.SETOBJECT, true);\n-            testNumerics(stmt, cekAkv, numericTable, values1, values2, TestCase.SETOBJECT, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for numeric set object for jdbc type numeric values\n-     * \n-     * @throws SQLException\n+    /*\n+     * Test char", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca3c581f2524b9c9551ef20519c76acd312d888"}, "originalPosition": 681}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMzE1ODM1", "url": "https://github.com/microsoft/mssql-jdbc/pull/1262#pullrequestreview-391315835", "createdAt": "2020-04-10T07:52:42Z", "commit": {"oid": "5ca3c581f2524b9c9551ef20519c76acd312d888"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzo1Mjo0MlrOGDzzig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzo1Mjo0MlrOGDzzig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NzY5MA==", "bodyText": "test description", "url": "https://github.com/microsoft/mssql-jdbc/pull/1262#discussion_r406647690", "createdAt": "2020-04-10T07:52:42Z", "author": {"login": "lilgreenbird"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/EnclaveTest.java", "diffHunk": "@@ -206,656 +180,172 @@ public void testAEv2Disabled(String serverName, String url, String protocol) thr\n \n         try (SQLServerConnection con = PrepUtil.getConnection(testConnectionString);\n                 SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = createCharValues(nullable);\n-            testChars(stmt, cekJks, charTable, values, TestCase.NORMAL, true);\n+            String[] values = createCharValues(false);\n+            TestUtils.dropTableIfExists(CHAR_TABLE_AE, stmt);\n+            createTable(CHAR_TABLE_AE, cekJks, charTable);\n+            populateCharNormalCase(values);\n+            testAlterColumnEncryption(stmt, CHAR_TABLE_AE, charTable, cekJks);\n             fail(TestResource.getResource(\"R_expectedExceptionNotThrown\"));\n         } catch (Throwable e) {\n             // testChars called fail()\n             assertTrue(e.getMessage().contains(TestResource.getResource(\"R_AlterAEv2Error\")));\n         }\n     }\n \n-    /**\n-     * Test case for char set string for string values\n-     * \n-     * @throws Exception\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testCharSpecificSetter(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = createCharValues(nullable);\n-\n-            testChars(stmt, cekJks, charTable, values, TestCase.NORMAL, true);\n-            testChars(stmt, cekAkv, charTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for char set string for string values using windows certificate store\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testCharSpecificSetterWindows(String serverName, String url, String protocol) throws Exception {\n-        org.junit.Assume.assumeTrue(System.getProperty(\"os.name\").startsWith(\"Windows\"));\n-\n-        checkAESetup(serverName, url, protocol);\n-\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = createCharValues(nullable);\n-\n-            testChars(stmt, cekWin, charTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for char set object for string values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testCharSetObject(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = createCharValues(nullable);\n-\n-            testChars(stmt, cekJks, charTable, values, TestCase.SETOBJECT, true);\n-            testChars(stmt, cekAkv, charTable, values, TestCase.SETOBJECT, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for char set object for jdbc string values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testCharSetObjectWithJDBCTypes(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = createCharValues(nullable);\n-\n-            testChars(stmt, cekJks, charTable, values, TestCase.SETOBJECT_WITH_JDBCTYPES, true);\n-            testChars(stmt, cekAkv, charTable, values, TestCase.SETOBJECT_WITH_JDBCTYPES, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for char set string for null values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testCharSpecificSetterNull(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = {null, null, null, null, null, null, null, null, null};\n-\n-            testChars(stmt, cekJks, charTable, values, TestCase.NORMAL, true);\n-            testChars(stmt, cekAkv, charTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for char set object for null values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testCharSetObjectNull(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = {null, null, null, null, null, null, null, null, null};\n-\n-            testChars(stmt, cekJks, charTable, values, TestCase.SETOBJECT, true);\n-            testChars(stmt, cekAkv, charTable, values, TestCase.SETOBJECT, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for char set null for null values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testCharSetNull(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = {null, null, null, null, null, null, null, null, null};\n-\n-            testChars(stmt, cekJks, charTable, values, TestCase.NULL, true);\n-            testChars(stmt, cekAkv, charTable, values, TestCase.NULL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for binary set binary for binary values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testBinarySpecificSetter(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<byte[]> values = createBinaryValues(false);\n-\n-            testBinaries(stmt, cekJks, binaryTable, values, TestCase.NORMAL, true);\n-            testBinaries(stmt, cekAkv, binaryTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for binary set binary for binary values using windows certificate store\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testBinarySpecificSetterWindows(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        org.junit.Assume.assumeTrue(System.getProperty(\"os.name\").startsWith(\"Windows\"));\n-\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<byte[]> values = createBinaryValues(false);\n-\n-            testBinaries(stmt, cekWin, binaryTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for binary set object for binary values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testBinarySetobject(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<byte[]> values = createBinaryValues(false);\n-\n-            testBinaries(stmt, cekJks, binaryTable, values, TestCase.SETOBJECT, true);\n-            testBinaries(stmt, cekAkv, binaryTable, values, TestCase.SETOBJECT, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for binary set null for binary values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testBinarySetNull(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<byte[]> values = createBinaryValues(true);\n-\n-            testBinaries(stmt, cekJks, binaryTable, values, TestCase.NULL, true);\n-            testBinaries(stmt, cekAkv, binaryTable, values, TestCase.NULL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for binary set binary for null values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testBinarySpecificSetterNull(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<byte[]> values = createBinaryValues(true);\n-\n-            testBinaries(stmt, cekJks, binaryTable, values, TestCase.NORMAL, true);\n-            testBinaries(stmt, cekAkv, binaryTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for binary set object for null values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testBinarysetObjectNull(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<byte[]> values = createBinaryValues(true);\n-\n-            testBinaries(stmt, cekJks, binaryTable, values, TestCase.SETOBJECT_NULL, true);\n-            testBinaries(stmt, cekAkv, binaryTable, values, TestCase.SETOBJECT_NULL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for binary set object for jdbc type binary values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testBinarySetObjectWithJDBCTypes(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<byte[]> values = createBinaryValues(false);\n-\n-            testBinaries(stmt, cekJks, binaryTable, values, TestCase.SETOBJECT_WITH_JDBCTYPES, true);\n-            testBinaries(stmt, cekAkv, binaryTable, values, TestCase.SETOBJECT_WITH_JDBCTYPES, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for date set date for date values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testDateSpecificSetter(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<Object> values = createTemporalTypes(nullable);\n-\n-            testDates(stmt, cekJks, dateTable, values, TestCase.NORMAL, true);\n-            testDates(stmt, cekAkv, dateTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for date set date for date values using windows certificate store\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testDateSpecificSetterWindows(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        org.junit.Assume.assumeTrue(System.getProperty(\"os.name\").startsWith(\"Windows\"));\n-\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<Object> values = createTemporalTypes(nullable);\n-\n-            testDates(stmt, cekWin, dateTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for date set object for date values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testDateSetObject(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<Object> values = createTemporalTypes(nullable);\n-\n-            testDates(stmt, cekJks, dateTable, values, TestCase.SETOBJECT, true);\n-            testDates(stmt, cekAkv, dateTable, values, TestCase.SETOBJECT, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for date set object for java date values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testDateSetObjectWithJavaType(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<Object> values = createTemporalTypes(nullable);\n-\n-            testDates(stmt, cekJks, dateTable, values, TestCase.SETOBJECT_WITH_JAVATYPES, true);\n-            testDates(stmt, cekAkv, dateTable, values, TestCase.SETOBJECT_WITH_JAVATYPES, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for date set object for jdbc date values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testDateSetObjectWithJDBCType(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<Object> values = createTemporalTypes(nullable);\n-\n-            testDates(stmt, cekJks, dateTable, values, TestCase.SETOBJECT_WITH_JDBCTYPES, true);\n-            testDates(stmt, cekAkv, dateTable, values, TestCase.SETOBJECT_WITH_JDBCTYPES, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for date set date for min/max date values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testDateSpecificSetterMinMaxValue(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            RandomData.returnMinMax = true;\n-            LinkedList<Object> values = createTemporalTypes(nullable);\n-\n-            testDates(stmt, cekJks, dateTable, values, TestCase.NORMAL, true);\n-            testDates(stmt, cekAkv, dateTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for date set date for null values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testDateSetNull(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            RandomData.returnNull = true;\n-            nullable = true;\n-            LinkedList<Object> values = createTemporalTypes(nullable);\n-\n-            testDates(stmt, cekJks, dateTable, values, TestCase.NULL, true);\n-            testDates(stmt, cekAkv, dateTable, values, TestCase.NULL, true);\n-        }\n-\n-        nullable = false;\n-        RandomData.returnNull = false;\n-    }\n-\n-    /**\n-     * Test case for date set object for null values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testDateSetObjectNull(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        RandomData.returnNull = true;\n-        nullable = true;\n-\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<Object> values = createTemporalTypes(nullable);\n-\n-            testDates(stmt, cekJks, dateTable, values, TestCase.SETOBJECT_NULL, true);\n-            testDates(stmt, cekAkv, dateTable, values, TestCase.SETOBJECT_NULL, true);\n-        }\n-\n-        nullable = false;\n-        RandomData.returnNull = false;\n-    }\n-\n-    /**\n-     * Test case for numeric set numeric for numeric values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testNumericSpecificSetter(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-\n-            String[] values1 = createNumericValues(nullable);\n-            String[] values2 = new String[values1.length];\n-            System.arraycopy(values1, 0, values2, 0, values1.length);\n-\n-            testNumerics(stmt, cekJks, numericTable, values1, values2, TestCase.NORMAL, true);\n-            testNumerics(stmt, cekAkv, numericTable, values1, values2, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for numeric set numeric for numeric values using windows certificate store\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testNumericSpecificSetterWindows(String serverName, String url, String protocol) throws Exception {\n-        org.junit.Assume.assumeTrue(System.getProperty(\"os.name\").startsWith(\"Windows\"));\n-\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-\n-            String[] values1 = createNumericValues(nullable);\n-            String[] values2 = new String[values1.length];\n-            System.arraycopy(values1, 0, values2, 0, values1.length);\n-\n-            testNumerics(stmt, cekWin, numericTable, values1, values2, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for numeric set object for numeric values F\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testNumericSetObject(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values1 = createNumericValues(nullable);\n-            String[] values2 = new String[values1.length];\n-            System.arraycopy(values1, 0, values2, 0, values1.length);\n-\n-            testNumerics(stmt, cekJks, numericTable, values1, values2, TestCase.SETOBJECT, true);\n-            testNumerics(stmt, cekAkv, numericTable, values1, values2, TestCase.SETOBJECT, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for numeric set object for jdbc type numeric values\n-     * \n-     * @throws SQLException\n+    /*\n+     * Test char\n      */\n     @ParameterizedTest\n     @MethodSource(\"enclaveParams\")\n-    public void testNumericSetObjectWithJDBCTypes(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n+    public void testChar(String serverName, String url, String protocol) throws Exception {\n+        setAEConnectionString(serverName, url, protocol);\n         try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n                 SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values1 = createNumericValues(nullable);\n-            String[] values2 = new String[values1.length];\n-            System.arraycopy(values1, 0, values2, 0, values1.length);\n-\n-            testNumerics(stmt, cekJks, numericTable, values1, values2, TestCase.SETOBJECT_WITH_JDBCTYPES, true);\n-            testNumerics(stmt, cekAkv, numericTable, values1, values2, TestCase.SETOBJECT_WITH_JDBCTYPES, true);\n+            TestUtils.dropTableIfExists(CHAR_TABLE_AE, stmt);\n+            createTable(CHAR_TABLE_AE, cekJks, charTable);\n+            populateCharNormalCase(createCharValues(false));\n+            testAlterColumnEncryption(stmt, CHAR_TABLE_AE, charTable, cekJks);\n         }\n     }\n \n-    /**\n-     * Test case for numeric set numeric for max numeric values\n-     * \n-     * @throws SQLException\n+    /*\n+     * Test char", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca3c581f2524b9c9551ef20519c76acd312d888"}, "originalPosition": 709}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMzc0MjQz", "url": "https://github.com/microsoft/mssql-jdbc/pull/1262#pullrequestreview-392374243", "createdAt": "2020-04-13T19:23:35Z", "commit": {"oid": "5ca3c581f2524b9c9551ef20519c76acd312d888"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOToyMzozNVrOGEyCeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOToyMzozNVrOGEyCeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY2NzMyMA==", "bodyText": "This code throws an exception with error message \"Expected exception is not thrown.\", which might be misleading because SQLServerException will get thrown when the server does not support AEv2, which is expected. Perhaps it is better to fail with fail(e.getMessage());.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1262#discussion_r407667320", "createdAt": "2020-04-13T19:23:35Z", "author": {"login": "ulvii"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/AESetup.java", "diffHunk": "@@ -1959,4 +1941,38 @@ private static void dropCMK(String cmkName, Statement stmt) throws SQLException\n                 + \" drop column master key \" + cmkName + \" end\";\n         stmt.execute(cekSql);\n     }\n+\n+    /**\n+     * Alter Column encryption on deterministic columns to randomized - this will trigger enclave to re-encrypt\n+     * \n+     * @param stmt\n+     * @param tableName\n+     * @param table\n+     * @param values\n+     * @throws SQLException\n+     */\n+    protected void testAlterColumnEncryption(SQLServerStatement stmt, String tableName, String table[][],\n+            String cekName) throws SQLException {\n+        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo)) {\n+            for (int i = 0; i < table.length; i++) {\n+                // alter deterministic to randomized\n+                String sql = \"ALTER TABLE \" + tableName + \" ALTER COLUMN \" + ColumnType.DETERMINISTIC.name()\n+                        + table[i][0] + \" \" + table[i][1]\n+                        + String.format(encryptSql, ColumnType.RANDOMIZED.name(), cekName) + \")\";\n+                try (SQLServerPreparedStatement pstmt = (SQLServerPreparedStatement) TestUtils.getPreparedStmt(con, sql,\n+                        stmtColEncSetting)) {\n+                    stmt.execute(sql);\n+                    if (!TestUtils.isAEv2(con)) {\n+                        fail(TestResource.getResource(\"R_expectedExceptionNotThrown\"));\n+                    }\n+                } catch (SQLException e) {\n+                    if (!TestUtils.isAEv2(con)) {\n+                        fail(TestResource.getResource(\"R_expectedExceptionNotThrown\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca3c581f2524b9c9551ef20519c76acd312d888"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMzg2MjA4", "url": "https://github.com/microsoft/mssql-jdbc/pull/1262#pullrequestreview-392386208", "createdAt": "2020-04-13T19:43:06Z", "commit": {"oid": "5ca3c581f2524b9c9551ef20519c76acd312d888"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTo0MzowNlrOGEypiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTo0MzowNlrOGEypiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3NzMyMA==", "bodyText": "Do the tables get cleaned up when the tests are done?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1262#discussion_r407677320", "createdAt": "2020-04-13T19:43:06Z", "author": {"login": "ulvii"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/EnclaveTest.java", "diffHunk": "@@ -206,656 +180,172 @@ public void testAEv2Disabled(String serverName, String url, String protocol) thr\n \n         try (SQLServerConnection con = PrepUtil.getConnection(testConnectionString);\n                 SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = createCharValues(nullable);\n-            testChars(stmt, cekJks, charTable, values, TestCase.NORMAL, true);\n+            String[] values = createCharValues(false);\n+            TestUtils.dropTableIfExists(CHAR_TABLE_AE, stmt);\n+            createTable(CHAR_TABLE_AE, cekJks, charTable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca3c581f2524b9c9551ef20519c76acd312d888"}, "originalPosition": 189}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMzg3NTI0", "url": "https://github.com/microsoft/mssql-jdbc/pull/1262#pullrequestreview-392387524", "createdAt": "2020-04-13T19:45:12Z", "commit": {"oid": "5ca3c581f2524b9c9551ef20519c76acd312d888"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTo0NToxMlrOGEytww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTo0NToxMlrOGEytww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3ODQwMw==", "bodyText": "Are these tests tan in parallel or sequentially. If they are ran in parallel, wouldn't there be a conflict because tests are using the same table?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1262#discussion_r407678403", "createdAt": "2020-04-13T19:45:12Z", "author": {"login": "ulvii"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/EnclaveTest.java", "diffHunk": "@@ -206,656 +180,172 @@ public void testAEv2Disabled(String serverName, String url, String protocol) thr\n \n         try (SQLServerConnection con = PrepUtil.getConnection(testConnectionString);\n                 SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = createCharValues(nullable);\n-            testChars(stmt, cekJks, charTable, values, TestCase.NORMAL, true);\n+            String[] values = createCharValues(false);\n+            TestUtils.dropTableIfExists(CHAR_TABLE_AE, stmt);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca3c581f2524b9c9551ef20519c76acd312d888"}, "originalPosition": 188}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d27d52ba435c3aa85a5765639dea4bd0c9707ce", "author": {"user": {"login": "rene-ye", "name": "v-reye"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/0d27d52ba435c3aa85a5765639dea4bd0c9707ce", "committedDate": "2020-04-14T17:00:25Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMjMxMzI5", "url": "https://github.com/microsoft/mssql-jdbc/pull/1262#pullrequestreview-393231329", "createdAt": "2020-04-14T19:29:38Z", "commit": {"oid": "0d27d52ba435c3aa85a5765639dea4bd0c9707ce"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMzM0MzI3", "url": "https://github.com/microsoft/mssql-jdbc/pull/1262#pullrequestreview-393334327", "createdAt": "2020-04-14T22:16:35Z", "commit": {"oid": "0d27d52ba435c3aa85a5765639dea4bd0c9707ce"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjoxNjozNVrOGFi8Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjoxNjozNVrOGFi8Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ2ODQ4Mg==", "bodyText": "Expected value should come first.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1262#discussion_r408468482", "createdAt": "2020-04-14T22:16:35Z", "author": {"login": "ulvii"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/EnclaveTest.java", "diffHunk": "@@ -206,656 +181,183 @@ public void testAEv2Disabled(String serverName, String url, String protocol) thr\n \n         try (SQLServerConnection con = PrepUtil.getConnection(testConnectionString);\n                 SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = createCharValues(nullable);\n-            testChars(stmt, cekJks, charTable, values, TestCase.NORMAL, true);\n+            String[] values = createCharValues(false);\n+            TestUtils.dropTableIfExists(CHAR_TABLE_AE, stmt);\n+            createTable(CHAR_TABLE_AE, cekJks, charTable);\n+            populateCharNormalCase(values);\n+            testAlterColumnEncryption(stmt, CHAR_TABLE_AE, charTable, cekJks);\n             fail(TestResource.getResource(\"R_expectedExceptionNotThrown\"));\n         } catch (Throwable e) {\n             // testChars called fail()\n             assertTrue(e.getMessage().contains(TestResource.getResource(\"R_AlterAEv2Error\")));\n         }\n     }\n \n-    /**\n-     * Test case for char set string for string values\n-     * \n-     * @throws Exception\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testCharSpecificSetter(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = createCharValues(nullable);\n-\n-            testChars(stmt, cekJks, charTable, values, TestCase.NORMAL, true);\n-            testChars(stmt, cekAkv, charTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for char set string for string values using windows certificate store\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testCharSpecificSetterWindows(String serverName, String url, String protocol) throws Exception {\n-        org.junit.Assume.assumeTrue(System.getProperty(\"os.name\").startsWith(\"Windows\"));\n-\n-        checkAESetup(serverName, url, protocol);\n-\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = createCharValues(nullable);\n-\n-            testChars(stmt, cekWin, charTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for char set object for string values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testCharSetObject(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = createCharValues(nullable);\n-\n-            testChars(stmt, cekJks, charTable, values, TestCase.SETOBJECT, true);\n-            testChars(stmt, cekAkv, charTable, values, TestCase.SETOBJECT, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for char set object for jdbc string values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testCharSetObjectWithJDBCTypes(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = createCharValues(nullable);\n-\n-            testChars(stmt, cekJks, charTable, values, TestCase.SETOBJECT_WITH_JDBCTYPES, true);\n-            testChars(stmt, cekAkv, charTable, values, TestCase.SETOBJECT_WITH_JDBCTYPES, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for char set string for null values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testCharSpecificSetterNull(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = {null, null, null, null, null, null, null, null, null};\n-\n-            testChars(stmt, cekJks, charTable, values, TestCase.NORMAL, true);\n-            testChars(stmt, cekAkv, charTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for char set object for null values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testCharSetObjectNull(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = {null, null, null, null, null, null, null, null, null};\n-\n-            testChars(stmt, cekJks, charTable, values, TestCase.SETOBJECT, true);\n-            testChars(stmt, cekAkv, charTable, values, TestCase.SETOBJECT, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for char set null for null values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testCharSetNull(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = {null, null, null, null, null, null, null, null, null};\n-\n-            testChars(stmt, cekJks, charTable, values, TestCase.NULL, true);\n-            testChars(stmt, cekAkv, charTable, values, TestCase.NULL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for binary set binary for binary values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testBinarySpecificSetter(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<byte[]> values = createBinaryValues(false);\n-\n-            testBinaries(stmt, cekJks, binaryTable, values, TestCase.NORMAL, true);\n-            testBinaries(stmt, cekAkv, binaryTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for binary set binary for binary values using windows certificate store\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testBinarySpecificSetterWindows(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        org.junit.Assume.assumeTrue(System.getProperty(\"os.name\").startsWith(\"Windows\"));\n-\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<byte[]> values = createBinaryValues(false);\n-\n-            testBinaries(stmt, cekWin, binaryTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for binary set object for binary values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testBinarySetobject(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<byte[]> values = createBinaryValues(false);\n-\n-            testBinaries(stmt, cekJks, binaryTable, values, TestCase.SETOBJECT, true);\n-            testBinaries(stmt, cekAkv, binaryTable, values, TestCase.SETOBJECT, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for binary set null for binary values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testBinarySetNull(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<byte[]> values = createBinaryValues(true);\n-\n-            testBinaries(stmt, cekJks, binaryTable, values, TestCase.NULL, true);\n-            testBinaries(stmt, cekAkv, binaryTable, values, TestCase.NULL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for binary set binary for null values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testBinarySpecificSetterNull(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<byte[]> values = createBinaryValues(true);\n-\n-            testBinaries(stmt, cekJks, binaryTable, values, TestCase.NORMAL, true);\n-            testBinaries(stmt, cekAkv, binaryTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for binary set object for null values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testBinarysetObjectNull(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<byte[]> values = createBinaryValues(true);\n-\n-            testBinaries(stmt, cekJks, binaryTable, values, TestCase.SETOBJECT_NULL, true);\n-            testBinaries(stmt, cekAkv, binaryTable, values, TestCase.SETOBJECT_NULL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for binary set object for jdbc type binary values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testBinarySetObjectWithJDBCTypes(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<byte[]> values = createBinaryValues(false);\n-\n-            testBinaries(stmt, cekJks, binaryTable, values, TestCase.SETOBJECT_WITH_JDBCTYPES, true);\n-            testBinaries(stmt, cekAkv, binaryTable, values, TestCase.SETOBJECT_WITH_JDBCTYPES, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for date set date for date values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testDateSpecificSetter(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<Object> values = createTemporalTypes(nullable);\n-\n-            testDates(stmt, cekJks, dateTable, values, TestCase.NORMAL, true);\n-            testDates(stmt, cekAkv, dateTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for date set date for date values using windows certificate store\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testDateSpecificSetterWindows(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        org.junit.Assume.assumeTrue(System.getProperty(\"os.name\").startsWith(\"Windows\"));\n-\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<Object> values = createTemporalTypes(nullable);\n-\n-            testDates(stmt, cekWin, dateTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for date set object for date values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testDateSetObject(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<Object> values = createTemporalTypes(nullable);\n-\n-            testDates(stmt, cekJks, dateTable, values, TestCase.SETOBJECT, true);\n-            testDates(stmt, cekAkv, dateTable, values, TestCase.SETOBJECT, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for date set object for java date values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testDateSetObjectWithJavaType(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<Object> values = createTemporalTypes(nullable);\n-\n-            testDates(stmt, cekJks, dateTable, values, TestCase.SETOBJECT_WITH_JAVATYPES, true);\n-            testDates(stmt, cekAkv, dateTable, values, TestCase.SETOBJECT_WITH_JAVATYPES, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for date set object for jdbc date values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testDateSetObjectWithJDBCType(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<Object> values = createTemporalTypes(nullable);\n-\n-            testDates(stmt, cekJks, dateTable, values, TestCase.SETOBJECT_WITH_JDBCTYPES, true);\n-            testDates(stmt, cekAkv, dateTable, values, TestCase.SETOBJECT_WITH_JDBCTYPES, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for date set date for min/max date values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testDateSpecificSetterMinMaxValue(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            RandomData.returnMinMax = true;\n-            LinkedList<Object> values = createTemporalTypes(nullable);\n-\n-            testDates(stmt, cekJks, dateTable, values, TestCase.NORMAL, true);\n-            testDates(stmt, cekAkv, dateTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for date set date for null values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testDateSetNull(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            RandomData.returnNull = true;\n-            nullable = true;\n-            LinkedList<Object> values = createTemporalTypes(nullable);\n-\n-            testDates(stmt, cekJks, dateTable, values, TestCase.NULL, true);\n-            testDates(stmt, cekAkv, dateTable, values, TestCase.NULL, true);\n-        }\n-\n-        nullable = false;\n-        RandomData.returnNull = false;\n-    }\n-\n-    /**\n-     * Test case for date set object for null values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testDateSetObjectNull(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        RandomData.returnNull = true;\n-        nullable = true;\n-\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<Object> values = createTemporalTypes(nullable);\n-\n-            testDates(stmt, cekJks, dateTable, values, TestCase.SETOBJECT_NULL, true);\n-            testDates(stmt, cekAkv, dateTable, values, TestCase.SETOBJECT_NULL, true);\n-        }\n-\n-        nullable = false;\n-        RandomData.returnNull = false;\n-    }\n-\n-    /**\n-     * Test case for numeric set numeric for numeric values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testNumericSpecificSetter(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-\n-            String[] values1 = createNumericValues(nullable);\n-            String[] values2 = new String[values1.length];\n-            System.arraycopy(values1, 0, values2, 0, values1.length);\n-\n-            testNumerics(stmt, cekJks, numericTable, values1, values2, TestCase.NORMAL, true);\n-            testNumerics(stmt, cekAkv, numericTable, values1, values2, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for numeric set numeric for numeric values using windows certificate store\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testNumericSpecificSetterWindows(String serverName, String url, String protocol) throws Exception {\n-        org.junit.Assume.assumeTrue(System.getProperty(\"os.name\").startsWith(\"Windows\"));\n-\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-\n-            String[] values1 = createNumericValues(nullable);\n-            String[] values2 = new String[values1.length];\n-            System.arraycopy(values1, 0, values2, 0, values1.length);\n-\n-            testNumerics(stmt, cekWin, numericTable, values1, values2, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for numeric set object for numeric values F\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testNumericSetObject(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values1 = createNumericValues(nullable);\n-            String[] values2 = new String[values1.length];\n-            System.arraycopy(values1, 0, values2, 0, values1.length);\n-\n-            testNumerics(stmt, cekJks, numericTable, values1, values2, TestCase.SETOBJECT, true);\n-            testNumerics(stmt, cekAkv, numericTable, values1, values2, TestCase.SETOBJECT, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for numeric set object for jdbc type numeric values\n-     * \n-     * @throws SQLException\n+    /*\n+     * Tests alter column encryption on char tables\n      */\n     @ParameterizedTest\n     @MethodSource(\"enclaveParams\")\n-    public void testNumericSetObjectWithJDBCTypes(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n+    public void testChar(String serverName, String url, String protocol) throws Exception {\n+        setAEConnectionString(serverName, url, protocol);\n         try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n                 SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values1 = createNumericValues(nullable);\n-            String[] values2 = new String[values1.length];\n-            System.arraycopy(values1, 0, values2, 0, values1.length);\n-\n-            testNumerics(stmt, cekJks, numericTable, values1, values2, TestCase.SETOBJECT_WITH_JDBCTYPES, true);\n-            testNumerics(stmt, cekAkv, numericTable, values1, values2, TestCase.SETOBJECT_WITH_JDBCTYPES, true);\n+            TestUtils.dropTableIfExists(CHAR_TABLE_AE, stmt);\n+            createTable(CHAR_TABLE_AE, cekJks, charTable);\n+            populateCharNormalCase(createCharValues(false));\n+            testAlterColumnEncryption(stmt, CHAR_TABLE_AE, charTable, cekJks);\n         }\n     }\n \n-    /**\n-     * Test case for numeric set numeric for max numeric values\n-     * \n-     * @throws SQLException\n+    /*\n+     * Tests alter column encryption on char tables with AKV\n      */\n     @ParameterizedTest\n     @MethodSource(\"enclaveParams\")\n-    public void testNumericSpecificSetterMaxValue(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n+    public void testCharAkv(String serverName, String url, String protocol) throws Exception {\n+        setAEConnectionString(serverName, url, protocol);\n         try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n                 SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-\n-            String[] values1 = {Boolean.TRUE.toString(), \"255\", \"32767\", \"2147483647\", \"9223372036854775807\",\n-                    \"1.79E308\", \"1.123\", \"3.4E38\", \"999999999999999999\", \"12345.12345\", \"999999999999999999\",\n-                    \"567812.78\", \"214748.3647\", \"922337203685477.5807\", \"999999999999999999999999.9999\",\n-                    \"999999999999999999999999.9999\"};\n-            String[] values2 = {Boolean.TRUE.toString(), \"255\", \"32767\", \"2147483647\", \"9223372036854775807\",\n-                    \"1.79E308\", \"1.123\", \"3.4E38\", \"999999999999999999\", \"12345.12345\", \"999999999999999999\",\n-                    \"567812.78\", \"214748.3647\", \"922337203685477.5807\", \"999999999999999999999999.9999\",\n-                    \"999999999999999999999999.9999\"};\n-\n-            testNumerics(stmt, cekJks, numericTable, values1, values2, TestCase.NORMAL, true);\n-            testNumerics(stmt, cekAkv, numericTable, values1, values2, TestCase.NORMAL, true);\n+            TestUtils.dropTableIfExists(CHAR_TABLE_AE, stmt);\n+            createTable(CHAR_TABLE_AE, cekAkv, charTable);\n+            populateCharNormalCase(createCharValues(false));\n+            testAlterColumnEncryption(stmt, CHAR_TABLE_AE, charTable, cekAkv);\n         }\n     }\n \n     /**\n-     * Test case for numeric set numeric for min numeric values\n+     * Test FMTOnly with Always Encrypted\n      * \n      * @throws SQLException\n      */\n     @ParameterizedTest\n     @MethodSource(\"enclaveParams\")\n-    public void testNumericSpecificSetterMinValue(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values1 = {Boolean.FALSE.toString(), \"0\", \"-32768\", \"-2147483648\", \"-9223372036854775808\",\n-                    \"-1.79E308\", \"1.123\", \"-3.4E38\", \"999999999999999999\", \"12345.12345\", \"999999999999999999\",\n-                    \"567812.78\", \"-214748.3648\", \"-922337203685477.5808\", \"999999999999999999999999.9999\",\n-                    \"999999999999999999999999.9999\"};\n-            String[] values2 = {Boolean.FALSE.toString(), \"0\", \"-32768\", \"-2147483648\", \"-9223372036854775808\",\n-                    \"-1.79E308\", \"1.123\", \"-3.4E38\", \"999999999999999999\", \"12345.12345\", \"999999999999999999\",\n-                    \"567812.78\", \"-214748.3648\", \"-922337203685477.5808\", \"999999999999999999999999.9999\",\n-                    \"999999999999999999999999.9999\"};\n-\n-            testNumerics(stmt, cekJks, numericTable, values1, values2, TestCase.NORMAL, true);\n-            testNumerics(stmt, cekAkv, numericTable, values1, values2, TestCase.NORMAL, true);\n+    public void testAEFMTOnly(String serverName, String url, String protocol) throws Exception {\n+        setAEConnectionString(serverName, url, protocol);\n+        try (SQLServerConnection c = PrepUtil.getConnection(AETestConnectionString + \";useFmtOnly=true\", AEInfo);\n+                Statement s = c.createStatement()) {\n+            createTable(NUMERIC_TABLE_AE, cekJks, numericTable);\n+            String sql = \"insert into \" + NUMERIC_TABLE_AE + \" values( \" + \"?,?,?,\" + \"?,?,?,\" + \"?,?,?,\" + \"?,?,?,\"\n+                    + \"?,?,?,\" + \"?,?,?,\" + \"?,?,?,\" + \"?,?,?,\" + \"?,?,?,\" + \"?,?,?,\" + \"?,?,?,\" + \"?,?,?,\" + \"?,?,?,\"\n+                    + \"?,?,?,\" + \"?,?,?,\" + \"?,?,?\" + \")\";\n+            try (PreparedStatement p = c.prepareStatement(sql)) {\n+                ParameterMetaData pmd = p.getParameterMetaData();\n+                assertTrue(pmd.getParameterCount() == 48);\n+            }\n         }\n     }\n \n     /**\n-     * Test case for numeric set numeric for null values\n-     * \n-     * @throws SQLException\n+     * Test alter column\n      */\n     @ParameterizedTest\n     @MethodSource(\"enclaveParams\")\n-    public void testNumericSpecificSetterNull(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            nullable = true;\n-            RandomData.returnNull = true;\n-            String[] values1 = createNumericValues(nullable);\n-            String[] values2 = new String[values1.length];\n-            System.arraycopy(values1, 0, values2, 0, values1.length);\n-\n-            testNumerics(stmt, cekJks, numericTable, values1, values2, TestCase.NULL, true);\n-            testNumerics(stmt, cekAkv, numericTable, values1, values2, TestCase.NULL, true);\n+    public void testAlter(String serverName, String url, String protocol) throws Exception {\n+        setAEConnectionString(serverName, url, protocol);\n+        try (SQLServerConnection c = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n+                Statement s = c.createStatement()) {\n+            createTable(CHAR_TABLE_AE, cekJks, varcharTableSimple);\n+            PreparedStatement pstmt = c.prepareStatement(\"INSERT INTO \" + CHAR_TABLE_AE + \" VALUES (?,?,?)\");\n+            pstmt.setString(1, \"a\");\n+            pstmt.setString(2, \"b\");\n+            pstmt.setString(3, \"test\");\n+            pstmt.execute();\n+            pstmt = c.prepareStatement(\"ALTER TABLE \" + CHAR_TABLE_AE\n+                    + \" ALTER COLUMN RandomizedVarchar VARCHAR(20) NULL WITH (ONLINE = ON)\");\n+            pstmt.execute();\n         }\n-\n-        nullable = false;\n-        RandomData.returnNull = false;\n     }\n \n     /**\n-     * Test case for numeric set object for null values\n-     * \n-     * @throws SQLException\n+     * Rich Query with number compare\n      */\n     @ParameterizedTest\n     @MethodSource(\"enclaveParams\")\n-    public void testNumericSpecificSetterSetObjectNull(String serverName, String url,\n-            String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            nullable = true;\n-            RandomData.returnNull = true;\n-            String[] values1 = createNumericValues(nullable);\n-            String[] values2 = new String[values1.length];\n-            System.arraycopy(values1, 0, values2, 0, values1.length);\n-\n-            testNumerics(stmt, cekJks, numericTable, values1, values2, TestCase.NULL, true);\n-            testNumerics(stmt, cekAkv, numericTable, values1, values2, TestCase.NULL, true);\n+    public void testNumericRichQuery(String serverName, String url, String protocol) throws Exception {\n+        setAEConnectionString(serverName, url, protocol);\n+        try (SQLServerConnection c = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n+                Statement s = c.createStatement()) {\n+            createTable(NUMERIC_TABLE_AE, cekJks, numericTableSimple);\n+            PreparedStatement pstmt = c.prepareStatement(\"INSERT INTO \" + NUMERIC_TABLE_AE + \" VALUES (?,?,?)\");\n+            pstmt.setInt(1, 1);\n+            pstmt.setInt(2, 2);\n+            pstmt.setInt(3, 3);\n+            pstmt.execute();\n+            pstmt = c.prepareStatement(\"SELECT * FROM \" + NUMERIC_TABLE_AE + \" WHERE RANDOMIZEDInt = ?\");\n+            pstmt.setInt(1, 3);\n+            try (ResultSet rs = pstmt.executeQuery()) {\n+                while (rs.next()) {\n+                    assertTrue(rs.getInt(1) == 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d27d52ba435c3aa85a5765639dea4bd0c9707ce"}, "originalPosition": 852}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMzM1MTQ4", "url": "https://github.com/microsoft/mssql-jdbc/pull/1262#pullrequestreview-393335148", "createdAt": "2020-04-14T22:18:30Z", "commit": {"oid": "0d27d52ba435c3aa85a5765639dea4bd0c9707ce"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjoxODozMVrOGFi-8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjoxODozMVrOGFi-8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ2OTIzMw==", "bodyText": "Expected value should come first.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1262#discussion_r408469233", "createdAt": "2020-04-14T22:18:31Z", "author": {"login": "ulvii"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/EnclaveTest.java", "diffHunk": "@@ -206,656 +181,183 @@ public void testAEv2Disabled(String serverName, String url, String protocol) thr\n \n         try (SQLServerConnection con = PrepUtil.getConnection(testConnectionString);\n                 SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = createCharValues(nullable);\n-            testChars(stmt, cekJks, charTable, values, TestCase.NORMAL, true);\n+            String[] values = createCharValues(false);\n+            TestUtils.dropTableIfExists(CHAR_TABLE_AE, stmt);\n+            createTable(CHAR_TABLE_AE, cekJks, charTable);\n+            populateCharNormalCase(values);\n+            testAlterColumnEncryption(stmt, CHAR_TABLE_AE, charTable, cekJks);\n             fail(TestResource.getResource(\"R_expectedExceptionNotThrown\"));\n         } catch (Throwable e) {\n             // testChars called fail()\n             assertTrue(e.getMessage().contains(TestResource.getResource(\"R_AlterAEv2Error\")));\n         }\n     }\n \n-    /**\n-     * Test case for char set string for string values\n-     * \n-     * @throws Exception\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testCharSpecificSetter(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = createCharValues(nullable);\n-\n-            testChars(stmt, cekJks, charTable, values, TestCase.NORMAL, true);\n-            testChars(stmt, cekAkv, charTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for char set string for string values using windows certificate store\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testCharSpecificSetterWindows(String serverName, String url, String protocol) throws Exception {\n-        org.junit.Assume.assumeTrue(System.getProperty(\"os.name\").startsWith(\"Windows\"));\n-\n-        checkAESetup(serverName, url, protocol);\n-\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = createCharValues(nullable);\n-\n-            testChars(stmt, cekWin, charTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for char set object for string values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testCharSetObject(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = createCharValues(nullable);\n-\n-            testChars(stmt, cekJks, charTable, values, TestCase.SETOBJECT, true);\n-            testChars(stmt, cekAkv, charTable, values, TestCase.SETOBJECT, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for char set object for jdbc string values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testCharSetObjectWithJDBCTypes(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = createCharValues(nullable);\n-\n-            testChars(stmt, cekJks, charTable, values, TestCase.SETOBJECT_WITH_JDBCTYPES, true);\n-            testChars(stmt, cekAkv, charTable, values, TestCase.SETOBJECT_WITH_JDBCTYPES, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for char set string for null values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testCharSpecificSetterNull(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = {null, null, null, null, null, null, null, null, null};\n-\n-            testChars(stmt, cekJks, charTable, values, TestCase.NORMAL, true);\n-            testChars(stmt, cekAkv, charTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for char set object for null values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testCharSetObjectNull(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = {null, null, null, null, null, null, null, null, null};\n-\n-            testChars(stmt, cekJks, charTable, values, TestCase.SETOBJECT, true);\n-            testChars(stmt, cekAkv, charTable, values, TestCase.SETOBJECT, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for char set null for null values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testCharSetNull(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values = {null, null, null, null, null, null, null, null, null};\n-\n-            testChars(stmt, cekJks, charTable, values, TestCase.NULL, true);\n-            testChars(stmt, cekAkv, charTable, values, TestCase.NULL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for binary set binary for binary values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testBinarySpecificSetter(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<byte[]> values = createBinaryValues(false);\n-\n-            testBinaries(stmt, cekJks, binaryTable, values, TestCase.NORMAL, true);\n-            testBinaries(stmt, cekAkv, binaryTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for binary set binary for binary values using windows certificate store\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testBinarySpecificSetterWindows(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        org.junit.Assume.assumeTrue(System.getProperty(\"os.name\").startsWith(\"Windows\"));\n-\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<byte[]> values = createBinaryValues(false);\n-\n-            testBinaries(stmt, cekWin, binaryTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for binary set object for binary values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testBinarySetobject(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<byte[]> values = createBinaryValues(false);\n-\n-            testBinaries(stmt, cekJks, binaryTable, values, TestCase.SETOBJECT, true);\n-            testBinaries(stmt, cekAkv, binaryTable, values, TestCase.SETOBJECT, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for binary set null for binary values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testBinarySetNull(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<byte[]> values = createBinaryValues(true);\n-\n-            testBinaries(stmt, cekJks, binaryTable, values, TestCase.NULL, true);\n-            testBinaries(stmt, cekAkv, binaryTable, values, TestCase.NULL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for binary set binary for null values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testBinarySpecificSetterNull(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<byte[]> values = createBinaryValues(true);\n-\n-            testBinaries(stmt, cekJks, binaryTable, values, TestCase.NORMAL, true);\n-            testBinaries(stmt, cekAkv, binaryTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for binary set object for null values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testBinarysetObjectNull(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<byte[]> values = createBinaryValues(true);\n-\n-            testBinaries(stmt, cekJks, binaryTable, values, TestCase.SETOBJECT_NULL, true);\n-            testBinaries(stmt, cekAkv, binaryTable, values, TestCase.SETOBJECT_NULL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for binary set object for jdbc type binary values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testBinarySetObjectWithJDBCTypes(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<byte[]> values = createBinaryValues(false);\n-\n-            testBinaries(stmt, cekJks, binaryTable, values, TestCase.SETOBJECT_WITH_JDBCTYPES, true);\n-            testBinaries(stmt, cekAkv, binaryTable, values, TestCase.SETOBJECT_WITH_JDBCTYPES, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for date set date for date values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testDateSpecificSetter(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<Object> values = createTemporalTypes(nullable);\n-\n-            testDates(stmt, cekJks, dateTable, values, TestCase.NORMAL, true);\n-            testDates(stmt, cekAkv, dateTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for date set date for date values using windows certificate store\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testDateSpecificSetterWindows(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        org.junit.Assume.assumeTrue(System.getProperty(\"os.name\").startsWith(\"Windows\"));\n-\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<Object> values = createTemporalTypes(nullable);\n-\n-            testDates(stmt, cekWin, dateTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for date set object for date values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testDateSetObject(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<Object> values = createTemporalTypes(nullable);\n-\n-            testDates(stmt, cekJks, dateTable, values, TestCase.SETOBJECT, true);\n-            testDates(stmt, cekAkv, dateTable, values, TestCase.SETOBJECT, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for date set object for java date values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testDateSetObjectWithJavaType(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<Object> values = createTemporalTypes(nullable);\n-\n-            testDates(stmt, cekJks, dateTable, values, TestCase.SETOBJECT_WITH_JAVATYPES, true);\n-            testDates(stmt, cekAkv, dateTable, values, TestCase.SETOBJECT_WITH_JAVATYPES, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for date set object for jdbc date values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testDateSetObjectWithJDBCType(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<Object> values = createTemporalTypes(nullable);\n-\n-            testDates(stmt, cekJks, dateTable, values, TestCase.SETOBJECT_WITH_JDBCTYPES, true);\n-            testDates(stmt, cekAkv, dateTable, values, TestCase.SETOBJECT_WITH_JDBCTYPES, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for date set date for min/max date values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testDateSpecificSetterMinMaxValue(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            RandomData.returnMinMax = true;\n-            LinkedList<Object> values = createTemporalTypes(nullable);\n-\n-            testDates(stmt, cekJks, dateTable, values, TestCase.NORMAL, true);\n-            testDates(stmt, cekAkv, dateTable, values, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for date set date for null values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testDateSetNull(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            RandomData.returnNull = true;\n-            nullable = true;\n-            LinkedList<Object> values = createTemporalTypes(nullable);\n-\n-            testDates(stmt, cekJks, dateTable, values, TestCase.NULL, true);\n-            testDates(stmt, cekAkv, dateTable, values, TestCase.NULL, true);\n-        }\n-\n-        nullable = false;\n-        RandomData.returnNull = false;\n-    }\n-\n-    /**\n-     * Test case for date set object for null values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testDateSetObjectNull(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        RandomData.returnNull = true;\n-        nullable = true;\n-\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            LinkedList<Object> values = createTemporalTypes(nullable);\n-\n-            testDates(stmt, cekJks, dateTable, values, TestCase.SETOBJECT_NULL, true);\n-            testDates(stmt, cekAkv, dateTable, values, TestCase.SETOBJECT_NULL, true);\n-        }\n-\n-        nullable = false;\n-        RandomData.returnNull = false;\n-    }\n-\n-    /**\n-     * Test case for numeric set numeric for numeric values\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testNumericSpecificSetter(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-\n-            String[] values1 = createNumericValues(nullable);\n-            String[] values2 = new String[values1.length];\n-            System.arraycopy(values1, 0, values2, 0, values1.length);\n-\n-            testNumerics(stmt, cekJks, numericTable, values1, values2, TestCase.NORMAL, true);\n-            testNumerics(stmt, cekAkv, numericTable, values1, values2, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for numeric set numeric for numeric values using windows certificate store\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testNumericSpecificSetterWindows(String serverName, String url, String protocol) throws Exception {\n-        org.junit.Assume.assumeTrue(System.getProperty(\"os.name\").startsWith(\"Windows\"));\n-\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-\n-            String[] values1 = createNumericValues(nullable);\n-            String[] values2 = new String[values1.length];\n-            System.arraycopy(values1, 0, values2, 0, values1.length);\n-\n-            testNumerics(stmt, cekWin, numericTable, values1, values2, TestCase.NORMAL, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for numeric set object for numeric values F\n-     * \n-     * @throws SQLException\n-     */\n-    @ParameterizedTest\n-    @MethodSource(\"enclaveParams\")\n-    public void testNumericSetObject(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values1 = createNumericValues(nullable);\n-            String[] values2 = new String[values1.length];\n-            System.arraycopy(values1, 0, values2, 0, values1.length);\n-\n-            testNumerics(stmt, cekJks, numericTable, values1, values2, TestCase.SETOBJECT, true);\n-            testNumerics(stmt, cekAkv, numericTable, values1, values2, TestCase.SETOBJECT, true);\n-        }\n-    }\n-\n-    /**\n-     * Test case for numeric set object for jdbc type numeric values\n-     * \n-     * @throws SQLException\n+    /*\n+     * Tests alter column encryption on char tables\n      */\n     @ParameterizedTest\n     @MethodSource(\"enclaveParams\")\n-    public void testNumericSetObjectWithJDBCTypes(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n+    public void testChar(String serverName, String url, String protocol) throws Exception {\n+        setAEConnectionString(serverName, url, protocol);\n         try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n                 SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values1 = createNumericValues(nullable);\n-            String[] values2 = new String[values1.length];\n-            System.arraycopy(values1, 0, values2, 0, values1.length);\n-\n-            testNumerics(stmt, cekJks, numericTable, values1, values2, TestCase.SETOBJECT_WITH_JDBCTYPES, true);\n-            testNumerics(stmt, cekAkv, numericTable, values1, values2, TestCase.SETOBJECT_WITH_JDBCTYPES, true);\n+            TestUtils.dropTableIfExists(CHAR_TABLE_AE, stmt);\n+            createTable(CHAR_TABLE_AE, cekJks, charTable);\n+            populateCharNormalCase(createCharValues(false));\n+            testAlterColumnEncryption(stmt, CHAR_TABLE_AE, charTable, cekJks);\n         }\n     }\n \n-    /**\n-     * Test case for numeric set numeric for max numeric values\n-     * \n-     * @throws SQLException\n+    /*\n+     * Tests alter column encryption on char tables with AKV\n      */\n     @ParameterizedTest\n     @MethodSource(\"enclaveParams\")\n-    public void testNumericSpecificSetterMaxValue(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n+    public void testCharAkv(String serverName, String url, String protocol) throws Exception {\n+        setAEConnectionString(serverName, url, protocol);\n         try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n                 SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-\n-            String[] values1 = {Boolean.TRUE.toString(), \"255\", \"32767\", \"2147483647\", \"9223372036854775807\",\n-                    \"1.79E308\", \"1.123\", \"3.4E38\", \"999999999999999999\", \"12345.12345\", \"999999999999999999\",\n-                    \"567812.78\", \"214748.3647\", \"922337203685477.5807\", \"999999999999999999999999.9999\",\n-                    \"999999999999999999999999.9999\"};\n-            String[] values2 = {Boolean.TRUE.toString(), \"255\", \"32767\", \"2147483647\", \"9223372036854775807\",\n-                    \"1.79E308\", \"1.123\", \"3.4E38\", \"999999999999999999\", \"12345.12345\", \"999999999999999999\",\n-                    \"567812.78\", \"214748.3647\", \"922337203685477.5807\", \"999999999999999999999999.9999\",\n-                    \"999999999999999999999999.9999\"};\n-\n-            testNumerics(stmt, cekJks, numericTable, values1, values2, TestCase.NORMAL, true);\n-            testNumerics(stmt, cekAkv, numericTable, values1, values2, TestCase.NORMAL, true);\n+            TestUtils.dropTableIfExists(CHAR_TABLE_AE, stmt);\n+            createTable(CHAR_TABLE_AE, cekAkv, charTable);\n+            populateCharNormalCase(createCharValues(false));\n+            testAlterColumnEncryption(stmt, CHAR_TABLE_AE, charTable, cekAkv);\n         }\n     }\n \n     /**\n-     * Test case for numeric set numeric for min numeric values\n+     * Test FMTOnly with Always Encrypted\n      * \n      * @throws SQLException\n      */\n     @ParameterizedTest\n     @MethodSource(\"enclaveParams\")\n-    public void testNumericSpecificSetterMinValue(String serverName, String url, String protocol) throws Exception {\n-        checkAESetup(serverName, url, protocol);\n-        try (SQLServerConnection con = PrepUtil.getConnection(AETestConnectionString, AEInfo);\n-                SQLServerStatement stmt = (SQLServerStatement) con.createStatement()) {\n-            String[] values1 = {Boolean.FALSE.toString(), \"0\", \"-32768\", \"-2147483648\", \"-9223372036854775808\",\n-                    \"-1.79E308\", \"1.123\", \"-3.4E38\", \"999999999999999999\", \"12345.12345\", \"999999999999999999\",\n-                    \"567812.78\", \"-214748.3648\", \"-922337203685477.5808\", \"999999999999999999999999.9999\",\n-                    \"999999999999999999999999.9999\"};\n-            String[] values2 = {Boolean.FALSE.toString(), \"0\", \"-32768\", \"-2147483648\", \"-9223372036854775808\",\n-                    \"-1.79E308\", \"1.123\", \"-3.4E38\", \"999999999999999999\", \"12345.12345\", \"999999999999999999\",\n-                    \"567812.78\", \"-214748.3648\", \"-922337203685477.5808\", \"999999999999999999999999.9999\",\n-                    \"999999999999999999999999.9999\"};\n-\n-            testNumerics(stmt, cekJks, numericTable, values1, values2, TestCase.NORMAL, true);\n-            testNumerics(stmt, cekAkv, numericTable, values1, values2, TestCase.NORMAL, true);\n+    public void testAEFMTOnly(String serverName, String url, String protocol) throws Exception {\n+        setAEConnectionString(serverName, url, protocol);\n+        try (SQLServerConnection c = PrepUtil.getConnection(AETestConnectionString + \";useFmtOnly=true\", AEInfo);\n+                Statement s = c.createStatement()) {\n+            createTable(NUMERIC_TABLE_AE, cekJks, numericTable);\n+            String sql = \"insert into \" + NUMERIC_TABLE_AE + \" values( \" + \"?,?,?,\" + \"?,?,?,\" + \"?,?,?,\" + \"?,?,?,\"\n+                    + \"?,?,?,\" + \"?,?,?,\" + \"?,?,?,\" + \"?,?,?,\" + \"?,?,?,\" + \"?,?,?,\" + \"?,?,?,\" + \"?,?,?,\" + \"?,?,?,\"\n+                    + \"?,?,?,\" + \"?,?,?,\" + \"?,?,?\" + \")\";\n+            try (PreparedStatement p = c.prepareStatement(sql)) {\n+                ParameterMetaData pmd = p.getParameterMetaData();\n+                assertTrue(pmd.getParameterCount() == 48);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d27d52ba435c3aa85a5765639dea4bd0c9707ce"}, "originalPosition": 773}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c25da5ea6472aa47c96d3a8311d4975d85027d0", "author": {"user": {"login": "rene-ye", "name": "v-reye"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/3c25da5ea6472aa47c96d3a8311d4975d85027d0", "committedDate": "2020-04-14T22:45:50Z", "message": "Don't use pstmt"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNTA2OTcz", "url": "https://github.com/microsoft/mssql-jdbc/pull/1262#pullrequestreview-393506973", "createdAt": "2020-04-15T07:07:41Z", "commit": {"oid": "3c25da5ea6472aa47c96d3a8311d4975d85027d0"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc3f11f1b92230b1467546f950ef22a41c43d2ad", "author": {"user": {"login": "rene-ye", "name": "v-reye"}}, "url": "https://github.com/microsoft/mssql-jdbc/commit/dc3f11f1b92230b1467546f950ef22a41c43d2ad", "committedDate": "2020-04-15T16:08:05Z", "message": "put expected values first"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDI5Mzgx", "url": "https://github.com/microsoft/mssql-jdbc/pull/1262#pullrequestreview-394029381", "createdAt": "2020-04-15T18:29:32Z", "commit": {"oid": "dc3f11f1b92230b1467546f950ef22a41c43d2ad"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2678, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}