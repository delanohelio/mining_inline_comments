{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4MzQyMjE0", "number": 1430, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzoyODo0OFrOEoMFdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMDoyODoyMFrOEpnupg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTc2NTAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerPreparedStatement.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzoyODo0OFrOHZImyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODozMzo0MlrOHZKzoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExNzQ0OA==", "bodyText": "Is adding SQLTimeoutException necessary here? Could you explain this a bit?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1430#discussion_r496117448", "createdAt": "2020-09-28T17:28:48Z", "author": {"login": "ulvii"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerPreparedStatement.java", "diffHunk": "@@ -1050,7 +1050,7 @@ else if (needsPrepare)\n     }\n \n     @Override\n-    public final java.sql.ResultSetMetaData getMetaData() throws SQLServerException {\n+    public final java.sql.ResultSetMetaData getMetaData() throws SQLServerException, SQLTimeoutException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cf1c55ae0331aca66e6812de419847cce18e092"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1MzUwNQ==", "bodyText": "Yes.  buildExecuteMetaData() previously caught and wrapped the SQLTimeoutException in another exception with less info.  That's been changed so that it's no longer caught, and it gets thrown directly.  The JDBC API allows for throwing this exception type, so it shouldn't be rethrown with less info.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1430#discussion_r496153505", "createdAt": "2020-09-28T18:33:42Z", "author": {"login": "danburkert"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerPreparedStatement.java", "diffHunk": "@@ -1050,7 +1050,7 @@ else if (needsPrepare)\n     }\n \n     @Override\n-    public final java.sql.ResultSetMetaData getMetaData() throws SQLServerException {\n+    public final java.sql.ResultSetMetaData getMetaData() throws SQLServerException, SQLTimeoutException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExNzQ0OA=="}, "originalCommit": {"oid": "8cf1c55ae0331aca66e6812de419847cce18e092"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDc3OTkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerPreparedStatement.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMDoyODoyMFrOHbZxMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzoxNDozOVrOHb1W3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ5NTc5Mg==", "bodyText": "We're only catching a subset of exceptions possibly thrown from this class (SQLException -> SQLServerException) now, but we should also catch the other exceptions that could be thrown from here.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1430#discussion_r498495792", "createdAt": "2020-10-01T20:28:20Z", "author": {"login": "peterbae"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerPreparedStatement.java", "diffHunk": "@@ -1080,21 +1080,18 @@ else if (needsPrepare)\n      * @throws SQLServerException\n      * @return the result set containing the meta data\n      */\n-    private ResultSet buildExecuteMetaData() throws SQLServerException {\n+    private SQLServerResultSet buildExecuteMetaData() throws SQLServerException, SQLTimeoutException {\n         String fmtSQL = userSQL;\n \n-        ResultSet emptyResultSet = null;\n+        SQLServerResultSet emptyResultSet = null;\n         try {\n             fmtSQL = replaceMarkerWithNull(fmtSQL);\n             internalStmt = (SQLServerStatement) connection.createStatement();\n             emptyResultSet = internalStmt.executeQueryInternal(\"set fmtonly on \" + fmtSQL + \"\\nset fmtonly off\");\n-        } catch (SQLException sqle) {\n+        } catch (SQLServerException sqle) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cf1c55ae0331aca66e6812de419847cce18e092"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwMTQxOA==", "bodyText": "The point of this PR is to not catch exceptions.  All exceptions are now propagated, except the specific empty result set exception which is handled.  Previously all exceptions were caught, then a useless exception containing no details was thrown through SQLServerException.makeFromDriverError.  This PR does not change the circumstances under which exceptions are thrown, it simply ensures that the original exception is propagated with the useful details, instead of throwing a different exception with no information.  This is critical so that applications can handle errors appropriately.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1430#discussion_r498501418", "createdAt": "2020-10-01T20:40:57Z", "author": {"login": "danburkert"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerPreparedStatement.java", "diffHunk": "@@ -1080,21 +1080,18 @@ else if (needsPrepare)\n      * @throws SQLServerException\n      * @return the result set containing the meta data\n      */\n-    private ResultSet buildExecuteMetaData() throws SQLServerException {\n+    private SQLServerResultSet buildExecuteMetaData() throws SQLServerException, SQLTimeoutException {\n         String fmtSQL = userSQL;\n \n-        ResultSet emptyResultSet = null;\n+        SQLServerResultSet emptyResultSet = null;\n         try {\n             fmtSQL = replaceMarkerWithNull(fmtSQL);\n             internalStmt = (SQLServerStatement) connection.createStatement();\n             emptyResultSet = internalStmt.executeQueryInternal(\"set fmtonly on \" + fmtSQL + \"\\nset fmtonly off\");\n-        } catch (SQLException sqle) {\n+        } catch (SQLServerException sqle) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ5NTc5Mg=="}, "originalCommit": {"oid": "8cf1c55ae0331aca66e6812de419847cce18e092"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0NzgwNg==", "bodyText": "I see, thanks for the explanation.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1430#discussion_r498947806", "createdAt": "2020-10-02T17:14:39Z", "author": {"login": "peterbae"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerPreparedStatement.java", "diffHunk": "@@ -1080,21 +1080,18 @@ else if (needsPrepare)\n      * @throws SQLServerException\n      * @return the result set containing the meta data\n      */\n-    private ResultSet buildExecuteMetaData() throws SQLServerException {\n+    private SQLServerResultSet buildExecuteMetaData() throws SQLServerException, SQLTimeoutException {\n         String fmtSQL = userSQL;\n \n-        ResultSet emptyResultSet = null;\n+        SQLServerResultSet emptyResultSet = null;\n         try {\n             fmtSQL = replaceMarkerWithNull(fmtSQL);\n             internalStmt = (SQLServerStatement) connection.createStatement();\n             emptyResultSet = internalStmt.executeQueryInternal(\"set fmtonly on \" + fmtSQL + \"\\nset fmtonly off\");\n-        } catch (SQLException sqle) {\n+        } catch (SQLServerException sqle) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ5NTc5Mg=="}, "originalCommit": {"oid": "8cf1c55ae0331aca66e6812de419847cce18e092"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1167, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}