{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1MDM2Mzk3", "number": 1234, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMzozODoxMlrODZV8pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMjo0MzozOFrODaAHsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTAwNTgxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMzozODoxMlrOFfrPqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMzozODoxMlrOFfrPqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc1ODY5Ng==", "bodyText": "shouldn't this be !\"\".equals(sql)?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1234#discussion_r368758696", "createdAt": "2020-01-20T23:38:12Z", "author": {"login": "peterbae"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java", "diffHunk": "@@ -6202,7 +6202,7 @@ void writeRPCReaderUnicode(String sName, Reader re, long reLength, boolean bOut,\n \n     void sendEnclavePackage(String sql, ArrayList<byte[]> enclaveCEKs) throws SQLServerException {\n         if (null != con && con.isAEv2()) {\n-            if (null != sql && \"\" != sql && null != enclaveCEKs && 0 < enclaveCEKs.size() && con.enclaveEstablished()) {\n+            if (null != sql && \"\".equals(sql) && null != enclaveCEKs && 0 < enclaveCEKs.size() && con.enclaveEstablished()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c276216fc04725c69b637163c6f3e7252f65015"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTg5OTM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerVSMEnclaveProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMjozNzozOVrOFgtesg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMDowMDoxOVrOFgvIrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0Mzg5MA==", "bodyText": "!connection.enclaveEstablished() is removed, is that intentional?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1234#discussion_r369843890", "createdAt": "2020-01-22T22:37:39Z", "author": {"login": "ulvii"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerVSMEnclaveProvider.java", "diffHunk": "@@ -139,33 +140,27 @@ private VSMAttestationResponse validateAttestationResponse(VSMAttestationRespons\n             String preparedTypeDefinitions, Parameter[] params,\n             ArrayList<String> parameterNames) throws SQLServerException {\n         ArrayList<byte[]> enclaveRequestedCEKs = new ArrayList<>();\n-        ResultSet rs = null;\n         try (PreparedStatement stmt = connection.prepareStatement(connection.enclaveEstablished() ? SDPE1 : SDPE2)) {\n-            if (connection.enclaveEstablished()) {\n-                rs = executeSDPEv1(stmt, userSql, preparedTypeDefinitions);\n-            } else {\n-                rs = executeSDPEv2(stmt, userSql, preparedTypeDefinitions, vsmParams);\n-            }\n-            if (null == rs) {\n-                // No results. Meaning no parameter.\n-                // Should never happen.\n-                return enclaveRequestedCEKs;\n-            }\n-            processSDPEv1(userSql, preparedTypeDefinitions, params, parameterNames, connection, stmt, rs,\n-                    enclaveRequestedCEKs);\n-            // Process the third resultset.\n-            if (connection.isAEv2() && stmt.getMoreResults()) {\n-                rs = (SQLServerResultSet) stmt.getResultSet();\n-                while (rs.next()) {\n-                    hgsResponse = new VSMAttestationResponse(rs.getBytes(1));\n-                    // This validates and establishes the enclave session if valid\n-                    if (!connection.enclaveEstablished()) {\n-                        hgsResponse = validateAttestationResponse(hgsResponse);\n+            try (ResultSet rs = connection.enclaveEstablished() ? executeSDPEv1(stmt, userSql,\n+                    preparedTypeDefinitions) : executeSDPEv2(stmt, userSql, preparedTypeDefinitions, vsmParams)) {\n+                if (null == rs) {\n+                    // No results. Meaning no parameter.\n+                    // Should never happen.\n+                    return enclaveRequestedCEKs;\n+                }\n+                processSDPEv1(userSql, preparedTypeDefinitions, params, parameterNames, connection, stmt, rs,\n+                        enclaveRequestedCEKs);\n+                // Process the third resultset.\n+                if (connection.isAEv2() && stmt.getMoreResults()) {\n+                    try (ResultSet hgsRs = (SQLServerResultSet) stmt.getResultSet()) {\n+                        if (hgsRs.next()) {\n+                            hgsResponse = new VSMAttestationResponse(hgsRs.getBytes(1));\n+                            // This validates and establishes the enclave session if valid\n+                            validateAttestationResponse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "427911c408873f5c6d67c940e12a00232502c60b"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3MTAyMg==", "bodyText": "Intentional.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1234#discussion_r369871022", "createdAt": "2020-01-23T00:00:19Z", "author": {"login": "rene-ye"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerVSMEnclaveProvider.java", "diffHunk": "@@ -139,33 +140,27 @@ private VSMAttestationResponse validateAttestationResponse(VSMAttestationRespons\n             String preparedTypeDefinitions, Parameter[] params,\n             ArrayList<String> parameterNames) throws SQLServerException {\n         ArrayList<byte[]> enclaveRequestedCEKs = new ArrayList<>();\n-        ResultSet rs = null;\n         try (PreparedStatement stmt = connection.prepareStatement(connection.enclaveEstablished() ? SDPE1 : SDPE2)) {\n-            if (connection.enclaveEstablished()) {\n-                rs = executeSDPEv1(stmt, userSql, preparedTypeDefinitions);\n-            } else {\n-                rs = executeSDPEv2(stmt, userSql, preparedTypeDefinitions, vsmParams);\n-            }\n-            if (null == rs) {\n-                // No results. Meaning no parameter.\n-                // Should never happen.\n-                return enclaveRequestedCEKs;\n-            }\n-            processSDPEv1(userSql, preparedTypeDefinitions, params, parameterNames, connection, stmt, rs,\n-                    enclaveRequestedCEKs);\n-            // Process the third resultset.\n-            if (connection.isAEv2() && stmt.getMoreResults()) {\n-                rs = (SQLServerResultSet) stmt.getResultSet();\n-                while (rs.next()) {\n-                    hgsResponse = new VSMAttestationResponse(rs.getBytes(1));\n-                    // This validates and establishes the enclave session if valid\n-                    if (!connection.enclaveEstablished()) {\n-                        hgsResponse = validateAttestationResponse(hgsResponse);\n+            try (ResultSet rs = connection.enclaveEstablished() ? executeSDPEv1(stmt, userSql,\n+                    preparedTypeDefinitions) : executeSDPEv2(stmt, userSql, preparedTypeDefinitions, vsmParams)) {\n+                if (null == rs) {\n+                    // No results. Meaning no parameter.\n+                    // Should never happen.\n+                    return enclaveRequestedCEKs;\n+                }\n+                processSDPEv1(userSql, preparedTypeDefinitions, params, parameterNames, connection, stmt, rs,\n+                        enclaveRequestedCEKs);\n+                // Process the third resultset.\n+                if (connection.isAEv2() && stmt.getMoreResults()) {\n+                    try (ResultSet hgsRs = (SQLServerResultSet) stmt.getResultSet()) {\n+                        if (hgsRs.next()) {\n+                            hgsResponse = new VSMAttestationResponse(hgsRs.getBytes(1));\n+                            // This validates and establishes the enclave session if valid\n+                            validateAttestationResponse();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0Mzg5MA=="}, "originalCommit": {"oid": "427911c408873f5c6d67c940e12a00232502c60b"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTg5OTQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMjozNzo0MFrOFgteug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMjozNzo0MFrOFgteug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0Mzg5OA==", "bodyText": "looks funny, use isEmpty instead?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1234#discussion_r369843898", "createdAt": "2020-01-22T22:37:40Z", "author": {"login": "lilgreenbird"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java", "diffHunk": "@@ -6202,7 +6202,7 @@ void writeRPCReaderUnicode(String sName, Reader re, long reLength, boolean bOut,\n \n     void sendEnclavePackage(String sql, ArrayList<byte[]> enclaveCEKs) throws SQLServerException {\n         if (null != con && con.isAEv2()) {\n-            if (null != sql && \"\" != sql && null != enclaveCEKs && 0 < enclaveCEKs.size() && con.enclaveEstablished()) {\n+            if (null != sql && !\"\".equals(sql) && null != enclaveCEKs && 0 < enclaveCEKs.size() && con.enclaveEstablished()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "427911c408873f5c6d67c940e12a00232502c60b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTkwMjI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerDatabaseMetaData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMjozODo0OVrOFgtgdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMjozODo0OVrOFgtgdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0NDM0Mw==", "bodyText": "same - isEmpty?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1234#discussion_r369844343", "createdAt": "2020-01-22T22:38:49Z", "author": {"login": "lilgreenbird"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerDatabaseMetaData.java", "diffHunk": "@@ -1047,9 +1047,9 @@ private ResultSet executeSPFkeys(String[] procParams) throws SQLException, SQLTi\n                 cstmt.setString(i + 1, procParams[i]);\n             }\n             String currentDB = null;\n-            if (null != procParams[2] && procParams[2] != \"\") {// pktable_qualifier\n+            if (null != procParams[2] && !\"\".equals(procParams[2])) {// pktable_qualifier\n                 currentDB = switchCatalogs(procParams[2]);\n-            } else if (null != procParams[5] && procParams[5] != \"\") {// fktable_qualifier\n+            } else if (null != procParams[5] && !\"\".equals(procParams[5])) {// fktable_qualifier", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "427911c408873f5c6d67c940e12a00232502c60b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTkxMjMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerVSMEnclaveProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMjo0MjozMVrOFgtmaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMDowMDoxMFrOFgvIfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0NTg2Nw==", "bodyText": "Is it possible that the resultset is empty here? If it is, should we throw an exception or it is a legit scenario?", "url": "https://github.com/microsoft/mssql-jdbc/pull/1234#discussion_r369845867", "createdAt": "2020-01-22T22:42:31Z", "author": {"login": "ulvii"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerVSMEnclaveProvider.java", "diffHunk": "@@ -139,33 +140,27 @@ private VSMAttestationResponse validateAttestationResponse(VSMAttestationRespons\n             String preparedTypeDefinitions, Parameter[] params,\n             ArrayList<String> parameterNames) throws SQLServerException {\n         ArrayList<byte[]> enclaveRequestedCEKs = new ArrayList<>();\n-        ResultSet rs = null;\n         try (PreparedStatement stmt = connection.prepareStatement(connection.enclaveEstablished() ? SDPE1 : SDPE2)) {\n-            if (connection.enclaveEstablished()) {\n-                rs = executeSDPEv1(stmt, userSql, preparedTypeDefinitions);\n-            } else {\n-                rs = executeSDPEv2(stmt, userSql, preparedTypeDefinitions, vsmParams);\n-            }\n-            if (null == rs) {\n-                // No results. Meaning no parameter.\n-                // Should never happen.\n-                return enclaveRequestedCEKs;\n-            }\n-            processSDPEv1(userSql, preparedTypeDefinitions, params, parameterNames, connection, stmt, rs,\n-                    enclaveRequestedCEKs);\n-            // Process the third resultset.\n-            if (connection.isAEv2() && stmt.getMoreResults()) {\n-                rs = (SQLServerResultSet) stmt.getResultSet();\n-                while (rs.next()) {\n-                    hgsResponse = new VSMAttestationResponse(rs.getBytes(1));\n-                    // This validates and establishes the enclave session if valid\n-                    if (!connection.enclaveEstablished()) {\n-                        hgsResponse = validateAttestationResponse(hgsResponse);\n+            try (ResultSet rs = connection.enclaveEstablished() ? executeSDPEv1(stmt, userSql,\n+                    preparedTypeDefinitions) : executeSDPEv2(stmt, userSql, preparedTypeDefinitions, vsmParams)) {\n+                if (null == rs) {\n+                    // No results. Meaning no parameter.\n+                    // Should never happen.\n+                    return enclaveRequestedCEKs;\n+                }\n+                processSDPEv1(userSql, preparedTypeDefinitions, params, parameterNames, connection, stmt, rs,\n+                        enclaveRequestedCEKs);\n+                // Process the third resultset.\n+                if (connection.isAEv2() && stmt.getMoreResults()) {\n+                    try (ResultSet hgsRs = (SQLServerResultSet) stmt.getResultSet()) {\n+                        if (hgsRs.next()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "427911c408873f5c6d67c940e12a00232502c60b"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3MDk3NA==", "bodyText": "It shouldn't happen but something can go wrong, we can throw an exception.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1234#discussion_r369870974", "createdAt": "2020-01-23T00:00:10Z", "author": {"login": "rene-ye"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerVSMEnclaveProvider.java", "diffHunk": "@@ -139,33 +140,27 @@ private VSMAttestationResponse validateAttestationResponse(VSMAttestationRespons\n             String preparedTypeDefinitions, Parameter[] params,\n             ArrayList<String> parameterNames) throws SQLServerException {\n         ArrayList<byte[]> enclaveRequestedCEKs = new ArrayList<>();\n-        ResultSet rs = null;\n         try (PreparedStatement stmt = connection.prepareStatement(connection.enclaveEstablished() ? SDPE1 : SDPE2)) {\n-            if (connection.enclaveEstablished()) {\n-                rs = executeSDPEv1(stmt, userSql, preparedTypeDefinitions);\n-            } else {\n-                rs = executeSDPEv2(stmt, userSql, preparedTypeDefinitions, vsmParams);\n-            }\n-            if (null == rs) {\n-                // No results. Meaning no parameter.\n-                // Should never happen.\n-                return enclaveRequestedCEKs;\n-            }\n-            processSDPEv1(userSql, preparedTypeDefinitions, params, parameterNames, connection, stmt, rs,\n-                    enclaveRequestedCEKs);\n-            // Process the third resultset.\n-            if (connection.isAEv2() && stmt.getMoreResults()) {\n-                rs = (SQLServerResultSet) stmt.getResultSet();\n-                while (rs.next()) {\n-                    hgsResponse = new VSMAttestationResponse(rs.getBytes(1));\n-                    // This validates and establishes the enclave session if valid\n-                    if (!connection.enclaveEstablished()) {\n-                        hgsResponse = validateAttestationResponse(hgsResponse);\n+            try (ResultSet rs = connection.enclaveEstablished() ? executeSDPEv1(stmt, userSql,\n+                    preparedTypeDefinitions) : executeSDPEv2(stmt, userSql, preparedTypeDefinitions, vsmParams)) {\n+                if (null == rs) {\n+                    // No results. Meaning no parameter.\n+                    // Should never happen.\n+                    return enclaveRequestedCEKs;\n+                }\n+                processSDPEv1(userSql, preparedTypeDefinitions, params, parameterNames, connection, stmt, rs,\n+                        enclaveRequestedCEKs);\n+                // Process the third resultset.\n+                if (connection.isAEv2() && stmt.getMoreResults()) {\n+                    try (ResultSet hgsRs = (SQLServerResultSet) stmt.getResultSet()) {\n+                        if (hgsRs.next()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0NTg2Nw=="}, "originalCommit": {"oid": "427911c408873f5c6d67c940e12a00232502c60b"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTkxNTM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerAASEnclaveProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMjo0MzozOFrOFgtoFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMDowMjoxM1rOFgvKsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0NjI5Mw==", "bodyText": "The questions for VSM provider applies here too.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1234#discussion_r369846293", "createdAt": "2020-01-22T22:43:38Z", "author": {"login": "ulvii"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerAASEnclaveProvider.java", "diffHunk": "@@ -102,47 +102,42 @@ public EnclaveSession getEnclaveSession() {\n         return enclaveSession;\n     }\n \n-    private AASAttestationResponse validateAttestationResponse(AASAttestationResponse ar) throws SQLServerException {\n-        try {\n-            ar.validateToken(attestationURL, aasParams.getNonce());\n-            ar.validateDHPublicKey(aasParams.getNonce());\n-        } catch (GeneralSecurityException e) {\n-            SQLServerException.makeFromDriverError(null, this, e.getLocalizedMessage(), \"0\", false);\n+    private void validateAttestationResponse() throws SQLServerException {\n+        if (null != hgsResponse) {\n+            try {\n+                hgsResponse.validateToken(attestationURL, aasParams.getNonce());\n+                hgsResponse.validateDHPublicKey(aasParams.getNonce());\n+            } catch (GeneralSecurityException e) {\n+                SQLServerException.makeFromDriverError(null, this, e.getLocalizedMessage(), \"0\", false);\n+            }\n         }\n-        return ar;\n     }\n \n     private ArrayList<byte[]> describeParameterEncryption(SQLServerConnection connection, String userSql,\n             String preparedTypeDefinitions, Parameter[] params,\n             ArrayList<String> parameterNames) throws SQLServerException {\n         ArrayList<byte[]> enclaveRequestedCEKs = new ArrayList<>();\n-        ResultSet rs = null;\n         try (PreparedStatement stmt = connection.prepareStatement(connection.enclaveEstablished() ? SDPE1 : SDPE2)) {\n-            if (connection.enclaveEstablished()) {\n-                rs = executeSDPEv1(stmt, userSql, preparedTypeDefinitions);\n-            } else {\n-                rs = executeSDPEv2(stmt, userSql, preparedTypeDefinitions, aasParams);\n-            }\n-            if (null == rs) {\n-                // No results. Meaning no parameter.\n-                // Should never happen.\n-                return enclaveRequestedCEKs;\n-            }\n-            processSDPEv1(userSql, preparedTypeDefinitions, params, parameterNames, connection, stmt, rs,\n-                    enclaveRequestedCEKs);\n-            // Process the third resultset.\n-            if (connection.isAEv2() && stmt.getMoreResults()) {\n-                rs = (SQLServerResultSet) stmt.getResultSet();\n-                while (rs.next()) {\n-                    hgsResponse = new AASAttestationResponse(rs.getBytes(1));\n-                    // This validates and establishes the enclave session if valid\n-                    if (!connection.enclaveEstablished()) {\n-                        hgsResponse = validateAttestationResponse(hgsResponse);\n+            try (ResultSet rs = connection.enclaveEstablished() ? executeSDPEv1(stmt, userSql,\n+                    preparedTypeDefinitions) : executeSDPEv2(stmt, userSql, preparedTypeDefinitions, aasParams)) {\n+                if (null == rs) {\n+                    // No results. Meaning no parameter.\n+                    // Should never happen.\n+                    return enclaveRequestedCEKs;\n+                }\n+                processSDPEv1(userSql, preparedTypeDefinitions, params, parameterNames, connection, stmt, rs,\n+                        enclaveRequestedCEKs);\n+                // Process the third resultset.\n+                if (connection.isAEv2() && stmt.getMoreResults()) {\n+                    try (ResultSet hgsRs = (SQLServerResultSet) stmt.getResultSet()) {\n+                        if (hgsRs.next()) {\n+                            hgsResponse = new AASAttestationResponse(hgsRs.getBytes(1));\n+                            // This validates and establishes the enclave session if valid\n+                            validateAttestationResponse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "427911c408873f5c6d67c940e12a00232502c60b"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3MTUzNw==", "bodyText": "Intentional.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1234#discussion_r369871537", "createdAt": "2020-01-23T00:02:13Z", "author": {"login": "rene-ye"}, "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerAASEnclaveProvider.java", "diffHunk": "@@ -102,47 +102,42 @@ public EnclaveSession getEnclaveSession() {\n         return enclaveSession;\n     }\n \n-    private AASAttestationResponse validateAttestationResponse(AASAttestationResponse ar) throws SQLServerException {\n-        try {\n-            ar.validateToken(attestationURL, aasParams.getNonce());\n-            ar.validateDHPublicKey(aasParams.getNonce());\n-        } catch (GeneralSecurityException e) {\n-            SQLServerException.makeFromDriverError(null, this, e.getLocalizedMessage(), \"0\", false);\n+    private void validateAttestationResponse() throws SQLServerException {\n+        if (null != hgsResponse) {\n+            try {\n+                hgsResponse.validateToken(attestationURL, aasParams.getNonce());\n+                hgsResponse.validateDHPublicKey(aasParams.getNonce());\n+            } catch (GeneralSecurityException e) {\n+                SQLServerException.makeFromDriverError(null, this, e.getLocalizedMessage(), \"0\", false);\n+            }\n         }\n-        return ar;\n     }\n \n     private ArrayList<byte[]> describeParameterEncryption(SQLServerConnection connection, String userSql,\n             String preparedTypeDefinitions, Parameter[] params,\n             ArrayList<String> parameterNames) throws SQLServerException {\n         ArrayList<byte[]> enclaveRequestedCEKs = new ArrayList<>();\n-        ResultSet rs = null;\n         try (PreparedStatement stmt = connection.prepareStatement(connection.enclaveEstablished() ? SDPE1 : SDPE2)) {\n-            if (connection.enclaveEstablished()) {\n-                rs = executeSDPEv1(stmt, userSql, preparedTypeDefinitions);\n-            } else {\n-                rs = executeSDPEv2(stmt, userSql, preparedTypeDefinitions, aasParams);\n-            }\n-            if (null == rs) {\n-                // No results. Meaning no parameter.\n-                // Should never happen.\n-                return enclaveRequestedCEKs;\n-            }\n-            processSDPEv1(userSql, preparedTypeDefinitions, params, parameterNames, connection, stmt, rs,\n-                    enclaveRequestedCEKs);\n-            // Process the third resultset.\n-            if (connection.isAEv2() && stmt.getMoreResults()) {\n-                rs = (SQLServerResultSet) stmt.getResultSet();\n-                while (rs.next()) {\n-                    hgsResponse = new AASAttestationResponse(rs.getBytes(1));\n-                    // This validates and establishes the enclave session if valid\n-                    if (!connection.enclaveEstablished()) {\n-                        hgsResponse = validateAttestationResponse(hgsResponse);\n+            try (ResultSet rs = connection.enclaveEstablished() ? executeSDPEv1(stmt, userSql,\n+                    preparedTypeDefinitions) : executeSDPEv2(stmt, userSql, preparedTypeDefinitions, aasParams)) {\n+                if (null == rs) {\n+                    // No results. Meaning no parameter.\n+                    // Should never happen.\n+                    return enclaveRequestedCEKs;\n+                }\n+                processSDPEv1(userSql, preparedTypeDefinitions, params, parameterNames, connection, stmt, rs,\n+                        enclaveRequestedCEKs);\n+                // Process the third resultset.\n+                if (connection.isAEv2() && stmt.getMoreResults()) {\n+                    try (ResultSet hgsRs = (SQLServerResultSet) stmt.getResultSet()) {\n+                        if (hgsRs.next()) {\n+                            hgsResponse = new AASAttestationResponse(hgsRs.getBytes(1));\n+                            // This validates and establishes the enclave session if valid\n+                            validateAttestationResponse();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0NjI5Mw=="}, "originalCommit": {"oid": "427911c408873f5c6d67c940e12a00232502c60b"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1186, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}