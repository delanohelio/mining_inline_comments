{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MTc1MTQz", "number": 1409, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzoxMjo0MVrOEeZNbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzoyNDoxOVrOEeZb9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzA1Nzc0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/microsoft/sqlserver/jdbc/fedauth/PooledConnectionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzoxMjo0MVrOHKBWGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzoxMjo0MVrOHKBWGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2OTg1MA==", "bodyText": "Can you explain why this is necessary, why can't we just handle the exceptions better inside the runnables catch clause.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1409#discussion_r480269850", "createdAt": "2020-08-31T17:12:41Z", "author": {"login": "rene-ye"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/fedauth/PooledConnectionTest.java", "diffHunk": "@@ -37,6 +38,15 @@\n     static String charTable = TestUtils.escapeSingleQuotes(\r\n             AbstractSQLGenerator.escapeIdentifier(RandomUtil.getIdentifier(\"JDBC_PooledConnection\")));\r\n \r\n+    final AtomicReference<Throwable> throwableRef = new AtomicReference<Throwable>();\r\n+    Thread.UncaughtExceptionHandler handler = new Thread.UncaughtExceptionHandler() {\r\n+\r\n+        @Override\r\n+        public void uncaughtException(Thread t, Throwable e) {\r\n+            throwableRef.set(e);\r\n+        }\r\n+    };\r\n+\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6fbeb962bde82d9d8551c1d29cdede948f658d4"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzA4NjMzOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/microsoft/sqlserver/jdbc/fedauth/PooledConnectionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzoyMTo0MlrOHKBnjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzoyMTo0MlrOHKBnjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3NDMxNw==", "bodyText": "We've already changed r1/r2/r3 to runnables, this should be done with an ExecutorService instead. The runnables above should also not be duplicated, they don't have different contents. Suggested change:\nRunnable r = () -> {\n    try (Connection connection2 = pc.getConnection()) {\n        testUserName(connection2, azureUserName, authentication);\n    } catch (SQLException e) {\n        assertTrue(INVALID_EXCEPION_MSG + \": \" + e.getMessage(),\n                e.getMessage().contains(ERR_MSG_CONNECTION_CLOSED)\n                        || e.getMessage().contains(ERR_MSG_CONNECTION_IS_CLOSED)\n                        || e.getMessage().contains(ERR_MSG_HAS_CLOSED)\n                        || e.getMessage().contains(ERR_MSG_HAS_BEEN_CLOSED)\n                        || e.getMessage().contains(ERR_MSG_SOCKET_CLOSED));\n    } catch (Exception e) {\n        // do whatever error handling is meant to happen\n    }\n};\n\nExecutorService es = Executors.newFixedThreadPool(3);\nes.execute(r);\nes.execute(r);\nes.execute(r);\nes.shutdown();", "url": "https://github.com/microsoft/mssql-jdbc/pull/1409#discussion_r480274317", "createdAt": "2020-08-31T17:21:42Z", "author": {"login": "rene-ye"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/fedauth/PooledConnectionTest.java", "diffHunk": "@@ -200,17 +210,23 @@ private void testPooledConnectionMultiThread(long testingTimeInSeconds,\n             Random rand = new Random();\r\n             int numberOfThreadsForEachType = rand.nextInt(15) + 1; // 1 to 15\r\n             for (int i = 0; i < numberOfThreadsForEachType; i++) {\r\n-                new Thread(r1).start();\r\n-                new Thread(r2).start();\r\n-                new Thread(r3).start();\r\n-            }\r\n-\r\n-            // sleep in order to catch exception from other threads if tests fail.\r\n-            try {\r\n-                Thread.sleep(TimeUnit.SECONDS.toMillis(60));\r\n-\r\n-            } catch (InterruptedException e) {\r\n-                fail(e.getMessage());\r\n+                Thread t1 = new Thread(r1);\r\n+                Thread t2 = new Thread(r2);\r\n+                Thread t3 = new Thread(r3);\r\n+                t1.setUncaughtExceptionHandler(handler);\r\n+                t2.setUncaughtExceptionHandler(handler);\r\n+                t3.setUncaughtExceptionHandler(handler);\r\n+                t1.start();\r\n+                t2.start();\r\n+                t3.start();\r\n+                t1.join();\r\n+                t2.join();\r\n+                t3.join();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6fbeb962bde82d9d8551c1d29cdede948f658d4"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzA5NDkzOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/microsoft/sqlserver/jdbc/fedauth/PooledConnectionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzoyNDoxOVrOHKBs1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzoyNDoxOVrOHKBs1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3NTY3MA==", "bodyText": "Same idea here, there's no reason to have 3 separate runnables, or to run them with Thread objects.", "url": "https://github.com/microsoft/mssql-jdbc/pull/1409#discussion_r480275670", "createdAt": "2020-08-31T17:24:19Z", "author": {"login": "rene-ye"}, "path": "src/test/java/com/microsoft/sqlserver/jdbc/fedauth/PooledConnectionTest.java", "diffHunk": "@@ -262,16 +278,23 @@ public void testPooledConnectionWithAccessToken() throws SQLException {\n             Random rand = new Random();\r\n             int numberOfThreadsForEachType = rand.nextInt(15) + 1; // 1 to 15\r\n             for (int i = 0; i < numberOfThreadsForEachType; i++) {\r\n-                new Thread(r1).start();\r\n-                new Thread(r2).start();\r\n-                new Thread(r3).start();\r\n-            }\r\n-\r\n-            // sleep in order to catch exception from other threads if tests fail.\r\n-            try {\r\n-                Thread.sleep(TimeUnit.SECONDS.toMillis(60));\r\n-            } catch (InterruptedException e) {\r\n-                fail(e.getMessage());\r\n+                Thread t1 = new Thread(r1);\r\n+                Thread t2 = new Thread(r2);\r\n+                Thread t3 = new Thread(r3);\r\n+                t1.setUncaughtExceptionHandler(handler);\r\n+                t2.setUncaughtExceptionHandler(handler);\r\n+                t3.setUncaughtExceptionHandler(handler);\r\n+                t1.start();\r\n+                t2.start();\r\n+                t3.start();\r\n+                t1.join();\r\n+                t2.join();\r\n+                t3.join();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6fbeb962bde82d9d8551c1d29cdede948f658d4"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1148, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}