{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3MTc0NDA5", "number": 1088, "title": "[IPC Part 1] Separate communication logic from business logic", "bodyText": "This is part 1 of my Broker API changes.\nFull spec here: https://identitydivision.visualstudio.com/DevEx/_git/AuthLibrariesApiReview/pullrequest/2098\nChanges\n\nExtracted BrokerOperationExecutor from BrokerMsalController\nConverted MicrosoftAuthServiceStrategy (which was exclusive for MSAL-Broker communication) into a generic BoundServiceStrategy\nExtracted base class BoundServiceClient from MicrosoftAuthClient (so that it can be used with the generic BoundServiceStrategy - BoundServiceStrategy takes this object as its parameter)\nAdded BrokerOperationBundle to act as a 'bridge' between business logic and communication logic.\nAdded annotations in ResultAdapter classes (and made some changes to eliminate warnings)\n\nTo scope down the work, I'm disabling AccountManager and ContentProvider strategies in BrokerMsalController for now.\nVerified by a smoke test (acquire token interactive + silent + remove account) in both shared and non-shared mode. joined flow.", "createdAt": "2020-10-21T00:39:38Z", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1088", "merged": true, "mergeCommit": {"oid": "da88ea141d59b103cc954e984091f28ac91d1855"}, "closed": true, "closedAt": "2020-10-23T04:14:03Z", "author": {"login": "rpdome"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUicKLgBqjM5MDEzNDg2MDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdVL6C0ABqjM5MTE2ODI0ODM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5f434afb89e9717bdd47c6655a4ca058f8f2b813", "author": {"user": {"login": "rpdome", "name": "Dome Pongmongkol"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/5f434afb89e9717bdd47c6655a4ca058f8f2b813", "committedDate": "2020-10-21T00:36:13Z", "message": "[Part 1] Separate communication logic from business logic"}, "afterCommit": {"oid": "6676ed14a4d684272ba30ffa4b4a5c334e1173cc", "author": {"user": {"login": "rpdome", "name": "Dome Pongmongkol"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/6676ed14a4d684272ba30ffa4b4a5c334e1173cc", "committedDate": "2020-10-21T00:37:44Z", "message": "[Part 1] Separate communication logic from business logic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzOTkxMTY2", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1088#pullrequestreview-513991166", "createdAt": "2020-10-21T17:17:22Z", "commit": {"oid": "fb01abf72670c70dbc70fb7ad0e6f98cf85f26a3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzoxNzoyMlrOHl3RQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzoxNzoyMlrOHl3RQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ2NDg5Ng==", "bodyText": "Pretty sure that this should implement an interface.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1088#discussion_r509464896", "createdAt": "2020-10-21T17:17:22Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/BoundServiceClient.java", "diffHunk": "@@ -0,0 +1,156 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+\n+package com.microsoft.identity.common.internal.broker;\n+\n+import android.content.Context;\n+import android.content.Intent;\n+import android.content.pm.ResolveInfo;\n+import android.os.Bundle;\n+import android.os.IInterface;\n+import android.os.RemoteException;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.logging.Logger;\n+\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import static com.microsoft.identity.common.exception.ClientException.BOUND_SERVICE_UNAVAILABLE_OR_NOT_SUPPORTED;\n+\n+/**\n+ * Base class for a Bound Service client.\n+ * A separate client is required for each AIDL interface (android.os.IInterface)\n+ */\n+public abstract class BoundServiceClient {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb01abf72670c70dbc70fb7ad0e6f98cf85f26a3"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzOTkzNjA2", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1088#pullrequestreview-513993606", "createdAt": "2020-10-21T17:20:22Z", "commit": {"oid": "fb01abf72670c70dbc70fb7ad0e6f98cf85f26a3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzoyMDoyMlrOHl3c1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzoyMDoyMlrOHl3c1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ2Nzg2MA==", "bodyText": "Can we just use a SettableFuture here?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1088#discussion_r509467860", "createdAt": "2020-10-21T17:20:22Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/BoundServiceFuture.java", "diffHunk": "@@ -23,18 +23,24 @@\n \n package com.microsoft.identity.common.internal.broker;\n \n-import com.microsoft.identity.client.IMicrosoftAuthService;\n+import android.os.IInterface;\n+\n+import androidx.annotation.NonNull;\n \n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n \n-public class MicrosoftAuthServiceFuture implements Future<IMicrosoftAuthService> {\n+/**\n+ * A Future object for bound service.\n+ * Will block until a bound service connection is established.\n+ */\n+public class BoundServiceFuture implements Future<IInterface> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb01abf72670c70dbc70fb7ad0e6f98cf85f26a3"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MTEwNzkw", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1088#pullrequestreview-514110790", "createdAt": "2020-10-21T19:29:05Z", "commit": {"oid": "fb01abf72670c70dbc70fb7ad0e6f98cf85f26a3"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxOToyOTowNVrOHmAFAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMDo0ODowMFrOHmMrfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYwOTIxNg==", "bodyText": "I'm not sure what being generic has to do with implementing an interface.   Just that most classes should implement some interface, and since this is an abstract class, I assume that means that somewhere in the code you'll be referencing it by name... and in that spot we should reference its interface instead of any implentation, even an abstract one, unless there's some very powerful reason to care about the implementation.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1088#discussion_r509609216", "createdAt": "2020-10-21T19:29:05Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/BoundServiceClient.java", "diffHunk": "@@ -0,0 +1,156 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+\n+package com.microsoft.identity.common.internal.broker;\n+\n+import android.content.Context;\n+import android.content.Intent;\n+import android.content.pm.ResolveInfo;\n+import android.os.Bundle;\n+import android.os.IInterface;\n+import android.os.RemoteException;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.logging.Logger;\n+\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import static com.microsoft.identity.common.exception.ClientException.BOUND_SERVICE_UNAVAILABLE_OR_NOT_SUPPORTED;\n+\n+/**\n+ * Base class for a Bound Service client.\n+ * A separate client is required for each AIDL interface (android.os.IInterface)\n+ */\n+public abstract class BoundServiceClient {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ2NDg5Ng=="}, "originalCommit": {"oid": "fb01abf72670c70dbc70fb7ad0e6f98cf85f26a3"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYzOTQ0MQ==", "bodyText": "This thing is a Chain. https://en.wikipedia.org/wiki/Chain-of-responsibility_pattern", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1088#discussion_r509639441", "createdAt": "2020-10-21T20:03:33Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BrokerOperationExecutor.java", "diffHunk": "@@ -0,0 +1,187 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+\n+package com.microsoft.identity.common.internal.controllers;\n+\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.telemetry.Telemetry;\n+import com.microsoft.identity.common.internal.telemetry.events.ApiEndEvent;\n+import com.microsoft.identity.common.internal.telemetry.events.ApiStartEvent;\n+\n+import java.util.List;\n+\n+/**\n+ * Classes for executing Broker operations.\n+ * It takes in a list of IIpcStrategy, and will try to connect to the broker with each strategy. one by one.\n+ * - If the current strategy succeeds, it will return the result right away.\n+ * - If the current strategy fails due to an internal Broker error, it will return the result right away.\n+ * - If the current strategy fails to connect to the broker, it will try the next one until the list is exhausted.\n+ */\n+public class BrokerOperationExecutor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb01abf72670c70dbc70fb7ad0e6f98cf85f26a3"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY0NzI5OA==", "bodyText": "Can we keep all of them and dump them all if we fail?  More modern java has fancy methods for this by attaching suppressed exceptions to other exceptions, but we should try to do something.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1088#discussion_r509647298", "createdAt": "2020-10-21T20:10:46Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BrokerOperationExecutor.java", "diffHunk": "@@ -0,0 +1,187 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+\n+package com.microsoft.identity.common.internal.controllers;\n+\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.telemetry.Telemetry;\n+import com.microsoft.identity.common.internal.telemetry.events.ApiEndEvent;\n+import com.microsoft.identity.common.internal.telemetry.events.ApiStartEvent;\n+\n+import java.util.List;\n+\n+/**\n+ * Classes for executing Broker operations.\n+ * It takes in a list of IIpcStrategy, and will try to connect to the broker with each strategy. one by one.\n+ * - If the current strategy succeeds, it will return the result right away.\n+ * - If the current strategy fails due to an internal Broker error, it will return the result right away.\n+ * - If the current strategy fails to connect to the broker, it will try the next one until the list is exhausted.\n+ */\n+public class BrokerOperationExecutor {\n+\n+    private static final String TAG = BrokerOperationExecutor.class.getSimpleName();\n+\n+    /**\n+     * Info of a broker operation to be performed with available strategies.\n+     */\n+    public interface BrokerOperation<T> {\n+\n+        /**\n+         * Trigger any prerequisite works before making the actual request.\n+         * This was added because the existing MSAL-Broker logic has a separate hello() call.\n+         */\n+        void performPrerequisites(@NonNull IIpcStrategy strategy) throws BaseException;\n+\n+        /**\n+         * Gets a BrokerOperationBundle bundle to pass to each IpcStrategies.\n+         */\n+        @NonNull BrokerOperationBundle getBundle();\n+\n+        /**\n+         * Extracts the result object from a bundle returned by an IpcStrategy.\n+         * If the broker returns an error, this will throw an exception.\n+         */\n+        @NonNull T extractResultBundle(@Nullable final Bundle resultBundle) throws BaseException;\n+\n+        /**\n+         * Returns method name (for logging/telemetry purpose).\n+         */\n+        @NonNull String getMethodName();\n+\n+        /**\n+         * ID of the telemetry API event associated to this strategy task.\n+         * If this value returns null, no telemetry event will be emitted.\n+         */\n+        @Nullable String getTelemetryApiId();\n+\n+        /**\n+         * A method that will be invoked before the success event is emitted.\n+         * If the calling operation wants to put any value in the success event, put it here.\n+         */\n+        void putValueInSuccessEvent(ApiEndEvent event, T result);\n+    }\n+\n+    private final List<IIpcStrategy> mStrategies;\n+\n+    /**\n+     * @param strategies list of IIpcStrategy to be invoked.\n+     */\n+    public BrokerOperationExecutor(@NonNull final List<IIpcStrategy> strategies) {\n+        mStrategies = strategies;\n+    }\n+\n+    /**\n+     * A generic method that would initialize and iterate through available strategies.\n+     * It will return a result immediately if any of the strategy succeeds, or throw an exception if all of the strategies fails.\n+     */\n+    public <T extends CommandParameters, U> U execute(@NonNull final T parameters,\n+                                                      @NonNull final BrokerOperation<U> operation)\n+            throws BaseException {\n+\n+        if (operation.getTelemetryApiId() != null) {\n+            Telemetry.emit(\n+                    new ApiStartEvent()\n+                            .putProperties(parameters)\n+                            .putApiId(operation.getTelemetryApiId())\n+            );\n+        }\n+\n+        U result = null;\n+        Exception lastCaughtException = null;\n+        for (int ii = 0; ii < mStrategies.size(); ii++) {\n+            final IIpcStrategy strategy = mStrategies.get(ii);\n+            try {\n+                com.microsoft.identity.common.internal.logging.Logger.info(\n+                        TAG + operation.getMethodName(),\n+                        \"Executing with broker strategy: \"\n+                                + strategy.getClass().getSimpleName()\n+                );\n+\n+                operation.performPrerequisites(strategy);\n+\n+                final BrokerOperationBundle brokerOperationBundle = operation.getBundle();\n+                final Bundle resultBundle = strategy.communicateToBroker(brokerOperationBundle);\n+                result = operation.extractResultBundle(resultBundle);\n+\n+                break;\n+            } catch (final BrokerCommunicationException communicationException) {\n+                // These are known Broker communication exception. Try next strategy.\n+                lastCaughtException = communicationException;\n+            } catch (final BaseException exception) {\n+                // MSAL is aware of these exceptions. throw.\n+                if (operation.getTelemetryApiId() != null) {\n+                    Telemetry.emit(\n+                            new ApiEndEvent()\n+                                    .putException(exception)\n+                                    .putApiId(operation.getTelemetryApiId())\n+                    );\n+                }\n+                throw exception;\n+            } catch (final Exception exception) {\n+                // We know for a fact that in some OEM, bind service might throw a runtime exception.\n+                // Given that the type of exception here could be unpredictable,\n+                // it is better to catch 'every' exception so that we could try the next strategy - which could work.\n+                lastCaughtException = exception;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb01abf72670c70dbc70fb7ad0e6f98cf85f26a3"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxMzU3Nw==", "bodyText": "Should we have these comments here?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1088#discussion_r509813577", "createdAt": "2020-10-22T00:40:02Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/ipc/BrokerOperationBundle.java", "diffHunk": "@@ -0,0 +1,78 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+\n+package com.microsoft.identity.common.internal.broker.ipc;\n+\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import lombok.Getter;\n+\n+/**\n+ * An object that acts as a bridge between business logic and communication layer.\n+ * - Business logic will provide a request bundle, and specify which operation it wants to perform.\n+ * - Communication layer will determine how to communicate to the broker via the provided operation,\n+ * and pass the request bundle to the broker accordingly.\n+ */\n+public class BrokerOperationBundle {\n+\n+    public enum Operation {\n+        MSAL_HELLO,\n+        MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST,\n+        MSAL_ACQUIRE_TOKEN_SILENT,\n+        MSAL_GET_ACCOUNTS,\n+        MSAL_REMOVE_ACCOUNT,\n+        MSAL_GET_DEVICE_MODE,\n+        MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE,\n+        MSAL_SIGN_OUT_FROM_SHARED_DEVICE,\n+        BROKER_CONNECT_TO_INACTIVE_BROKER\n+    }\n+\n+    @Getter\n+    @NonNull\n+    final private Operation operation;\n+\n+    @Getter\n+    @Nullable\n+    final private Bundle bundle;\n+\n+    public BrokerOperationBundle(@NonNull final Operation operation,\n+                                 @Nullable final Bundle requestBundle) {\n+        this.operation = operation;\n+        this.bundle = requestBundle;\n+    }\n+\n+    public String getOperationName() {\n+        return this.operation.name();\n+    }\n+\n+//    public String getAccountManagerOperationKey(){\n+//        // TODO\n+//    }\n+//\n+//    public String getContentProviderUriPath(){\n+//        // TODO\n+//    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3385547f1b6af5a712e93d475397c23326e3c5c1"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxNDM2OQ==", "bodyText": "So here, we'd dump all of the exception information.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1088#discussion_r509814369", "createdAt": "2020-10-22T00:43:02Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BrokerOperationExecutor.java", "diffHunk": "@@ -0,0 +1,187 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+\n+package com.microsoft.identity.common.internal.controllers;\n+\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.telemetry.Telemetry;\n+import com.microsoft.identity.common.internal.telemetry.events.ApiEndEvent;\n+import com.microsoft.identity.common.internal.telemetry.events.ApiStartEvent;\n+\n+import java.util.List;\n+\n+/**\n+ * Classes for executing Broker operations.\n+ * It takes in a list of IIpcStrategy, and will try to connect to the broker with each strategy. one by one.\n+ * - If the current strategy succeeds, it will return the result right away.\n+ * - If the current strategy fails due to an internal Broker error, it will return the result right away.\n+ * - If the current strategy fails to connect to the broker, it will try the next one until the list is exhausted.\n+ */\n+public class BrokerOperationExecutor {\n+\n+    private static final String TAG = BrokerOperationExecutor.class.getSimpleName();\n+\n+    /**\n+     * Info of a broker operation to be performed with available strategies.\n+     */\n+    public interface BrokerOperation<T> {\n+\n+        /**\n+         * Trigger any prerequisite works before making the actual request.\n+         * This was added because the existing MSAL-Broker logic has a separate hello() call.\n+         */\n+        void performPrerequisites(@NonNull IIpcStrategy strategy) throws BaseException;\n+\n+        /**\n+         * Gets a BrokerOperationBundle bundle to pass to each IpcStrategies.\n+         */\n+        @NonNull BrokerOperationBundle getBundle();\n+\n+        /**\n+         * Extracts the result object from a bundle returned by an IpcStrategy.\n+         * If the broker returns an error, this will throw an exception.\n+         */\n+        @NonNull T extractResultBundle(@Nullable final Bundle resultBundle) throws BaseException;\n+\n+        /**\n+         * Returns method name (for logging/telemetry purpose).\n+         */\n+        @NonNull String getMethodName();\n+\n+        /**\n+         * ID of the telemetry API event associated to this strategy task.\n+         * If this value returns null, no telemetry event will be emitted.\n+         */\n+        @Nullable String getTelemetryApiId();\n+\n+        /**\n+         * A method that will be invoked before the success event is emitted.\n+         * If the calling operation wants to put any value in the success event, put it here.\n+         */\n+        void putValueInSuccessEvent(ApiEndEvent event, T result);\n+    }\n+\n+    private final List<IIpcStrategy> mStrategies;\n+\n+    /**\n+     * @param strategies list of IIpcStrategy to be invoked.\n+     */\n+    public BrokerOperationExecutor(@NonNull final List<IIpcStrategy> strategies) {\n+        mStrategies = strategies;\n+    }\n+\n+    /**\n+     * A generic method that would initialize and iterate through available strategies.\n+     * It will return a result immediately if any of the strategy succeeds, or throw an exception if all of the strategies fails.\n+     */\n+    public <T extends CommandParameters, U> U execute(@NonNull final T parameters,\n+                                                      @NonNull final BrokerOperation<U> operation)\n+            throws BaseException {\n+\n+        if (operation.getTelemetryApiId() != null) {\n+            Telemetry.emit(\n+                    new ApiStartEvent()\n+                            .putProperties(parameters)\n+                            .putApiId(operation.getTelemetryApiId())\n+            );\n+        }\n+\n+        U result = null;\n+        Exception lastCaughtException = null;\n+        for (int ii = 0; ii < mStrategies.size(); ii++) {\n+            final IIpcStrategy strategy = mStrategies.get(ii);\n+            try {\n+                com.microsoft.identity.common.internal.logging.Logger.info(\n+                        TAG + operation.getMethodName(),\n+                        \"Executing with broker strategy: \"\n+                                + strategy.getClass().getSimpleName()\n+                );\n+\n+                operation.performPrerequisites(strategy);\n+\n+                final BrokerOperationBundle brokerOperationBundle = operation.getBundle();\n+                final Bundle resultBundle = strategy.communicateToBroker(brokerOperationBundle);\n+                result = operation.extractResultBundle(resultBundle);\n+\n+                break;\n+            } catch (final BrokerCommunicationException communicationException) {\n+                // These are known Broker communication exception. Try next strategy.\n+                lastCaughtException = communicationException;\n+            } catch (final BaseException exception) {\n+                // MSAL is aware of these exceptions. throw.\n+                if (operation.getTelemetryApiId() != null) {\n+                    Telemetry.emit(\n+                            new ApiEndEvent()\n+                                    .putException(exception)\n+                                    .putApiId(operation.getTelemetryApiId())\n+                    );\n+                }\n+                throw exception;\n+            } catch (final Exception exception) {\n+                // We know for a fact that in some OEM, bind service might throw a runtime exception.\n+                // Given that the type of exception here could be unpredictable,\n+                // it is better to catch 'every' exception so that we could try the next strategy - which could work.\n+                lastCaughtException = exception;\n+            }\n+        }\n+\n+        // This means that we've tried every strategies...\n+        if (result == null) {\n+            final ClientException exception = new ClientException(\n+                    ErrorStrings.BROKER_BIND_SERVICE_FAILED,\n+                    \"Unable to connect to the broker\",\n+                    lastCaughtException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3385547f1b6af5a712e93d475397c23326e3c5c1"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxNTEwOQ==", "bodyText": "Can we give them a getName()?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1088#discussion_r509815109", "createdAt": "2020-10-22T00:45:49Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/ipc/IIpcStrategy.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.microsoft.identity.common.internal.broker.ipc;\n+\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+\n+/**\n+ * an interface for inter-process communication strategies.\n+ */\n+public interface IIpcStrategy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3385547f1b6af5a712e93d475397c23326e3c5c1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxNTY3OQ==", "bodyText": "Here we can time the strategy execution from outside, by using the getName() method which, for bonus points, is by contract the telemetry name.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1088#discussion_r509815679", "createdAt": "2020-10-22T00:48:00Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BrokerOperationExecutor.java", "diffHunk": "@@ -0,0 +1,187 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+\n+package com.microsoft.identity.common.internal.controllers;\n+\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.telemetry.Telemetry;\n+import com.microsoft.identity.common.internal.telemetry.events.ApiEndEvent;\n+import com.microsoft.identity.common.internal.telemetry.events.ApiStartEvent;\n+\n+import java.util.List;\n+\n+/**\n+ * Classes for executing Broker operations.\n+ * It takes in a list of IIpcStrategy, and will try to connect to the broker with each strategy. one by one.\n+ * - If the current strategy succeeds, it will return the result right away.\n+ * - If the current strategy fails due to an internal Broker error, it will return the result right away.\n+ * - If the current strategy fails to connect to the broker, it will try the next one until the list is exhausted.\n+ */\n+public class BrokerOperationExecutor {\n+\n+    private static final String TAG = BrokerOperationExecutor.class.getSimpleName();\n+\n+    /**\n+     * Info of a broker operation to be performed with available strategies.\n+     */\n+    public interface BrokerOperation<T> {\n+\n+        /**\n+         * Trigger any prerequisite works before making the actual request.\n+         * This was added because the existing MSAL-Broker logic has a separate hello() call.\n+         */\n+        void performPrerequisites(@NonNull IIpcStrategy strategy) throws BaseException;\n+\n+        /**\n+         * Gets a BrokerOperationBundle bundle to pass to each IpcStrategies.\n+         */\n+        @NonNull BrokerOperationBundle getBundle();\n+\n+        /**\n+         * Extracts the result object from a bundle returned by an IpcStrategy.\n+         * If the broker returns an error, this will throw an exception.\n+         */\n+        @NonNull T extractResultBundle(@Nullable final Bundle resultBundle) throws BaseException;\n+\n+        /**\n+         * Returns method name (for logging/telemetry purpose).\n+         */\n+        @NonNull String getMethodName();\n+\n+        /**\n+         * ID of the telemetry API event associated to this strategy task.\n+         * If this value returns null, no telemetry event will be emitted.\n+         */\n+        @Nullable String getTelemetryApiId();\n+\n+        /**\n+         * A method that will be invoked before the success event is emitted.\n+         * If the calling operation wants to put any value in the success event, put it here.\n+         */\n+        void putValueInSuccessEvent(ApiEndEvent event, T result);\n+    }\n+\n+    private final List<IIpcStrategy> mStrategies;\n+\n+    /**\n+     * @param strategies list of IIpcStrategy to be invoked.\n+     */\n+    public BrokerOperationExecutor(@NonNull final List<IIpcStrategy> strategies) {\n+        mStrategies = strategies;\n+    }\n+\n+    /**\n+     * A generic method that would initialize and iterate through available strategies.\n+     * It will return a result immediately if any of the strategy succeeds, or throw an exception if all of the strategies fails.\n+     */\n+    public <T extends CommandParameters, U> U execute(@NonNull final T parameters,\n+                                                      @NonNull final BrokerOperation<U> operation)\n+            throws BaseException {\n+\n+        if (operation.getTelemetryApiId() != null) {\n+            Telemetry.emit(\n+                    new ApiStartEvent()\n+                            .putProperties(parameters)\n+                            .putApiId(operation.getTelemetryApiId())\n+            );\n+        }\n+\n+        U result = null;\n+        Exception lastCaughtException = null;\n+        for (int ii = 0; ii < mStrategies.size(); ii++) {\n+            final IIpcStrategy strategy = mStrategies.get(ii);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3385547f1b6af5a712e93d475397c23326e3c5c1"}, "originalPosition": 123}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MTc4NTA3", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1088#pullrequestreview-515178507", "createdAt": "2020-10-22T23:06:28Z", "commit": {"oid": "eb93cb55a2bf851e5adac4c23fe7716b2fbf1bd0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMzowNjoyOFrOHm21Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMzowNjoyOFrOHm21Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwNjMxMA==", "bodyText": "We have API 19+, right?  We can add all the exceptions that you caught in this processed as suppressedExceptions to the exception that you throw by calling addSuppressed(e) on it.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1088#discussion_r510506310", "createdAt": "2020-10-22T23:06:28Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BrokerOperationExecutor.java", "diffHunk": "@@ -0,0 +1,203 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+\n+package com.microsoft.identity.common.internal.controllers;\n+\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.logging.Logger;\n+import com.microsoft.identity.common.internal.telemetry.Telemetry;\n+import com.microsoft.identity.common.internal.telemetry.events.ApiEndEvent;\n+import com.microsoft.identity.common.internal.telemetry.events.ApiStartEvent;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Classes for executing IPC service operations.\n+ * It takes in a list of IIpcStrategy, and will try to connect to the broker with each strategy. one by one.\n+ * - If the current strategy succeeds, it will return the result right away.\n+ * - If the service returns an error, it will return the result right away.\n+ * - If the current strategy fails to connect to the targeted service, it will try the next one until the list is exhausted.\n+ */\n+public class BrokerOperationExecutor {\n+\n+    private static final String TAG = BrokerOperationExecutor.class.getSimpleName();\n+\n+    /**\n+     * Info of a service operation to be performed with available strategies.\n+     */\n+    public interface BrokerOperation<T> {\n+\n+        /**\n+         * Trigger any prerequisite works before making the actual request.\n+         * This was added because the existing MSAL-Broker logic has a separate hello() call.\n+         */\n+        void performPrerequisites(@NonNull IIpcStrategy strategy) throws BaseException;\n+\n+        /**\n+         * Gets a BrokerOperationBundle bundle to pass to each IpcStrategies.\n+         */\n+        @NonNull BrokerOperationBundle getBundle();\n+\n+        /**\n+         * Extracts the result object from a bundle returned by an IpcStrategy.\n+         * If the broker returns an error, this will throw an exception.\n+         */\n+        @NonNull T extractResultBundle(@Nullable final Bundle resultBundle) throws BaseException;\n+\n+        /**\n+         * Returns method name (for logging/telemetry purpose).\n+         */\n+        @NonNull String getMethodName();\n+\n+        /**\n+         * ID of the telemetry API event associated to this strategy task.\n+         * If this value returns null, no telemetry event will be emitted.\n+         */\n+        @Nullable String getTelemetryApiId();\n+\n+        /**\n+         * A method that will be invoked before the success event is emitted.\n+         * If the calling operation wants to put any value in the success event, put it here.\n+         */\n+        void putValueInSuccessEvent(ApiEndEvent event, T result);\n+    }\n+\n+    private final List<IIpcStrategy> mStrategies;\n+\n+    /**\n+     * @param strategies list of IIpcStrategy to be invoked.\n+     */\n+    public BrokerOperationExecutor(@NonNull final List<IIpcStrategy> strategies) {\n+        mStrategies = strategies;\n+    }\n+\n+    /**\n+     * A generic method that would initialize and iterate through available strategies.\n+     * It will return a result immediately if any of the strategy succeeds, or throw an exception if all of the strategies fails.\n+     */\n+    public <T extends CommandParameters, U> U execute(@NonNull final T parameters,\n+                                                      @NonNull final BrokerOperation<U> operation)\n+            throws BaseException {\n+        final String methodName = \":execute\";\n+\n+        emitOperationStartEvent(parameters, operation);\n+\n+        if (mStrategies.size() == 0) {\n+            final ClientException exception = new ClientException(\n+                    ErrorStrings.BROKER_BIND_SERVICE_FAILED,\n+                    \"No strategies can be used to connect to the broker.\");\n+            emitOperationFailureEvent(operation, exception);\n+            throw exception;\n+        }\n+\n+        final List<BrokerCommunicationException> communicationExceptionStack = new ArrayList<>();\n+        for (final IIpcStrategy strategy : mStrategies) {\n+            try {\n+                final U result = performStrategy(strategy, operation);\n+                emitOperationSuccessEvent(operation, result);\n+                return result;\n+            } catch (final BrokerCommunicationException communicationException) {\n+                // Fails to communicate to the . Try next strategy.\n+                communicationExceptionStack.add(communicationException);\n+            } catch (final BaseException exception) {\n+                emitOperationFailureEvent((BrokerOperation<U>) operation, exception);\n+                throw exception;\n+            }\n+        }\n+\n+        // This means that we've tried every strategies... log everything...\n+        for (final BrokerCommunicationException e : communicationExceptionStack) {\n+            Logger.error(TAG + methodName, e.getMessage(), e);\n+        }\n+        final ClientException exception = new ClientException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb93cb55a2bf851e5adac4c23fe7716b2fbf1bd0"}, "originalPosition": 144}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MTc5ODgw", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1088#pullrequestreview-515179880", "createdAt": "2020-10-22T23:10:35Z", "commit": {"oid": "eb93cb55a2bf851e5adac4c23fe7716b2fbf1bd0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMzoxMDozNVrOHm250g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMzoxMDozNVrOHm250g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwNzQ3NA==", "bodyText": "nit: @AllArgsConstructor?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1088#discussion_r510507474", "createdAt": "2020-10-22T23:10:35Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/ipc/BrokerOperationBundle.java", "diffHunk": "@@ -0,0 +1,79 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+\n+package com.microsoft.identity.common.internal.broker.ipc;\n+\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import lombok.Getter;\n+\n+/**\n+ * An object that acts as a bridge between business logic and communication layer.\n+ * - Business logic will provide a request bundle, and specify which operation it wants to perform.\n+ * - Communication layer will determine how to communicate to the targeted service via the provided operation,\n+ * and pass the request bundle to the service accordingly.\n+ * <p>\n+ * Generally, the targeted service is the active broker.\n+ */\n+public class BrokerOperationBundle {\n+\n+    public enum Operation {\n+        MSAL_HELLO,\n+        MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST,\n+        MSAL_ACQUIRE_TOKEN_SILENT,\n+        MSAL_GET_ACCOUNTS,\n+        MSAL_REMOVE_ACCOUNT,\n+        MSAL_GET_DEVICE_MODE,\n+        MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE,\n+        MSAL_SIGN_OUT_FROM_SHARED_DEVICE,\n+        BROKER_GET_KEY_FROM_INACTIVE_BROKER\n+    }\n+\n+    @Getter\n+    @NonNull final private Operation operation;\n+\n+    @Getter\n+    @NonNull final private String targetBrokerAppPackageName;\n+\n+    @Getter\n+    @Nullable final private Bundle bundle;\n+\n+    public BrokerOperationBundle(@NonNull final Operation operation,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb93cb55a2bf851e5adac4c23fe7716b2fbf1bd0"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MjAzMTUw", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1088#pullrequestreview-515203150", "createdAt": "2020-10-23T00:17:40Z", "commit": {"oid": "eb93cb55a2bf851e5adac4c23fe7716b2fbf1bd0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMDoxNzo0MFrOHm4PPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMDoxNzo0MFrOHm4PPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUyOTM0MQ==", "bodyText": "Thought experiment: should this be specified in a configuration?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1088#discussion_r510529341", "createdAt": "2020-10-23T00:17:40Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BrokerOperationExecutor.java", "diffHunk": "@@ -0,0 +1,203 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+\n+package com.microsoft.identity.common.internal.controllers;\n+\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.logging.Logger;\n+import com.microsoft.identity.common.internal.telemetry.Telemetry;\n+import com.microsoft.identity.common.internal.telemetry.events.ApiEndEvent;\n+import com.microsoft.identity.common.internal.telemetry.events.ApiStartEvent;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Classes for executing IPC service operations.\n+ * It takes in a list of IIpcStrategy, and will try to connect to the broker with each strategy. one by one.\n+ * - If the current strategy succeeds, it will return the result right away.\n+ * - If the service returns an error, it will return the result right away.\n+ * - If the current strategy fails to connect to the targeted service, it will try the next one until the list is exhausted.\n+ */\n+public class BrokerOperationExecutor {\n+\n+    private static final String TAG = BrokerOperationExecutor.class.getSimpleName();\n+\n+    /**\n+     * Info of a service operation to be performed with available strategies.\n+     */\n+    public interface BrokerOperation<T> {\n+\n+        /**\n+         * Trigger any prerequisite works before making the actual request.\n+         * This was added because the existing MSAL-Broker logic has a separate hello() call.\n+         */\n+        void performPrerequisites(@NonNull IIpcStrategy strategy) throws BaseException;\n+\n+        /**\n+         * Gets a BrokerOperationBundle bundle to pass to each IpcStrategies.\n+         */\n+        @NonNull BrokerOperationBundle getBundle();\n+\n+        /**\n+         * Extracts the result object from a bundle returned by an IpcStrategy.\n+         * If the broker returns an error, this will throw an exception.\n+         */\n+        @NonNull T extractResultBundle(@Nullable final Bundle resultBundle) throws BaseException;\n+\n+        /**\n+         * Returns method name (for logging/telemetry purpose).\n+         */\n+        @NonNull String getMethodName();\n+\n+        /**\n+         * ID of the telemetry API event associated to this strategy task.\n+         * If this value returns null, no telemetry event will be emitted.\n+         */\n+        @Nullable String getTelemetryApiId();\n+\n+        /**\n+         * A method that will be invoked before the success event is emitted.\n+         * If the calling operation wants to put any value in the success event, put it here.\n+         */\n+        void putValueInSuccessEvent(ApiEndEvent event, T result);\n+    }\n+\n+    private final List<IIpcStrategy> mStrategies;\n+\n+    /**\n+     * @param strategies list of IIpcStrategy to be invoked.\n+     */\n+    public BrokerOperationExecutor(@NonNull final List<IIpcStrategy> strategies) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb93cb55a2bf851e5adac4c23fe7716b2fbf1bd0"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MjAzMjYw", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1088#pullrequestreview-515203260", "createdAt": "2020-10-23T00:18:06Z", "commit": {"oid": "eb93cb55a2bf851e5adac4c23fe7716b2fbf1bd0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b03cdd37779db74c23fc71ad3ed9b486aba4647", "author": {"user": {"login": "rpdome", "name": "Dome Pongmongkol"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/9b03cdd37779db74c23fc71ad3ed9b486aba4647", "committedDate": "2020-10-23T01:01:16Z", "message": "[Part 1] Separate communication logic from business logic"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dd7fc492ccd781528f17bad46ffc58698cab9dd7", "author": {"user": {"login": "rpdome", "name": "Dome Pongmongkol"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/dd7fc492ccd781528f17bad46ffc58698cab9dd7", "committedDate": "2020-10-22T23:20:32Z", "message": "Resolve comments"}, "afterCommit": {"oid": "9b03cdd37779db74c23fc71ad3ed9b486aba4647", "author": {"user": {"login": "rpdome", "name": "Dome Pongmongkol"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/9b03cdd37779db74c23fc71ad3ed9b486aba4647", "committedDate": "2020-10-23T01:01:16Z", "message": "[Part 1] Separate communication logic from business logic"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1388, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}