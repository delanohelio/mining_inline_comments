{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5MjM1MzQ3", "number": 1090, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMDowMjoxOFrOExZ62Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMTozNjoxOVrOExbR5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjQwMzQ1OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/ipc/ContentProviderStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMDowMjoxOFrOHnhUag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMDowMjoxOFrOHnhUag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIwMjQxMA==", "bodyText": "Do these need to be static?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1090#discussion_r511202410", "createdAt": "2020-10-24T00:02:18Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/ipc/ContentProviderStrategy.java", "diffHunk": "@@ -0,0 +1,132 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.broker.ipc;\n+\n+import android.content.Context;\n+import android.content.pm.ProviderInfo;\n+import android.database.Cursor;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.util.Base64;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.internal.logging.Logger;\n+import com.microsoft.identity.common.internal.util.ParcelableUtil;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.AUTHORITY;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.CONTENT_SCHEME;\n+\n+/**\n+ * A strategy for communicating with the targeted broker via Content Provider.\n+ */\n+public class ContentProviderStrategy implements IIpcStrategy {\n+\n+    private static final String TAG = ContentProviderStrategy.class.getName();\n+    private final Context mContext;\n+\n+    public ContentProviderStrategy(final Context context) {\n+        mContext = context;\n+    }\n+\n+    @Override\n+    @Nullable public Bundle communicateToBroker(@NonNull BrokerOperationBundle brokerOperationBundle)\n+            throws BaseException {\n+\n+        final String methodName = brokerOperationBundle.getOperation().name();\n+\n+        final Uri uri = getContentProviderURI(\n+                brokerOperationBundle.getTargetBrokerAppPackageName(),\n+                brokerOperationBundle.getContentProviderPath()\n+        );\n+        Logger.info(TAG + methodName, \"Request to BrokerContentProvider for uri path \" +\n+                brokerOperationBundle.getContentProviderPath()\n+        );\n+\n+        String marshalledRequestString = null;\n+\n+        final Bundle requestBundle = brokerOperationBundle.getBundle();\n+        if (requestBundle != null) {\n+            byte[] marshalledBytes = ParcelableUtil.marshall(requestBundle);\n+            marshalledRequestString = Base64.encodeToString(marshalledBytes, 0);\n+        }\n+\n+        final Cursor cursor = mContext.getContentResolver().query(\n+                uri,\n+                null,\n+                marshalledRequestString,\n+                null,\n+                null\n+        );\n+\n+        if (cursor != null) {\n+            final Bundle resultBundle = cursor.getExtras();\n+            cursor.close();\n+            Logger.info(TAG + methodName, \"Received successful result from Broker Content Provider.\");\n+            return resultBundle;\n+        } else {\n+            final String message = \"Failed to get result from Broker Content Provider, cursor is null\";\n+            Logger.error(TAG + methodName, message, null);\n+            throw new BrokerCommunicationException(message, null);\n+        }\n+    }\n+\n+    /**\n+     * Returns a content provider URI for the given path.\n+     */\n+    private static Uri getContentProviderURI(@NonNull final String activeBrokerPackageName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5aaa86dcbf2865f432805759509f95843d4c4bb"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjQwNDAxOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/ipc/ContentProviderStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMDowMjo1MVrOHnhUww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMDowMjo1MVrOHnhUww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIwMjQ5OQ==", "bodyText": "Is it important that these are static?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1090#discussion_r511202499", "createdAt": "2020-10-24T00:02:51Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/ipc/ContentProviderStrategy.java", "diffHunk": "@@ -0,0 +1,132 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.broker.ipc;\n+\n+import android.content.Context;\n+import android.content.pm.ProviderInfo;\n+import android.database.Cursor;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.util.Base64;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.internal.logging.Logger;\n+import com.microsoft.identity.common.internal.util.ParcelableUtil;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.AUTHORITY;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.CONTENT_SCHEME;\n+\n+/**\n+ * A strategy for communicating with the targeted broker via Content Provider.\n+ */\n+public class ContentProviderStrategy implements IIpcStrategy {\n+\n+    private static final String TAG = ContentProviderStrategy.class.getName();\n+    private final Context mContext;\n+\n+    public ContentProviderStrategy(final Context context) {\n+        mContext = context;\n+    }\n+\n+    @Override\n+    @Nullable public Bundle communicateToBroker(@NonNull BrokerOperationBundle brokerOperationBundle)\n+            throws BaseException {\n+\n+        final String methodName = brokerOperationBundle.getOperation().name();\n+\n+        final Uri uri = getContentProviderURI(\n+                brokerOperationBundle.getTargetBrokerAppPackageName(),\n+                brokerOperationBundle.getContentProviderPath()\n+        );\n+        Logger.info(TAG + methodName, \"Request to BrokerContentProvider for uri path \" +\n+                brokerOperationBundle.getContentProviderPath()\n+        );\n+\n+        String marshalledRequestString = null;\n+\n+        final Bundle requestBundle = brokerOperationBundle.getBundle();\n+        if (requestBundle != null) {\n+            byte[] marshalledBytes = ParcelableUtil.marshall(requestBundle);\n+            marshalledRequestString = Base64.encodeToString(marshalledBytes, 0);\n+        }\n+\n+        final Cursor cursor = mContext.getContentResolver().query(\n+                uri,\n+                null,\n+                marshalledRequestString,\n+                null,\n+                null\n+        );\n+\n+        if (cursor != null) {\n+            final Bundle resultBundle = cursor.getExtras();\n+            cursor.close();\n+            Logger.info(TAG + methodName, \"Received successful result from Broker Content Provider.\");\n+            return resultBundle;\n+        } else {\n+            final String message = \"Failed to get result from Broker Content Provider, cursor is null\";\n+            Logger.error(TAG + methodName, message, null);\n+            throw new BrokerCommunicationException(message, null);\n+        }\n+    }\n+\n+    /**\n+     * Returns a content provider URI for the given path.\n+     */\n+    private static Uri getContentProviderURI(@NonNull final String activeBrokerPackageName,\n+                                             @NonNull final String path) {\n+        final String authority = getContentProviderAuthority(activeBrokerPackageName);\n+        return Uri.parse(CONTENT_SCHEME + authority + path);\n+    }\n+\n+    /**\n+     * Returns content provider authority.\n+     */\n+    private static String getContentProviderAuthority(@NonNull final String activeBrokerPackageName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5aaa86dcbf2865f432805759509f95843d4c4bb"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjQwODA5OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/result/MsalBrokerResultAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMDowNjowMVrOHnhW7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMDowNjowMVrOHnhW7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIwMzA1NQ==", "bodyText": "Is this message still accurate?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1090#discussion_r511203055", "createdAt": "2020-10-24T00:06:01Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/result/MsalBrokerResultAdapter.java", "diffHunk": "@@ -496,29 +495,12 @@\n                 ErrorStrings.UNSUPPORTED_BROKER_VERSION_ERROR_MESSAGE);\n     }\n \n-    public @NonNull Bundle getBundleFromInteractiveRequestIntent(@NonNull final Intent intent) throws ClientException {\n-        final ComponentName componentName = intent.getComponent();\n-        final Bundle bundle = intent.getExtras();\n-\n-        if (componentName == null || bundle == null) {\n-            throw new ClientException(\"Unexpected error. Content of Authorization Intent should not be null.\");\n-        }\n-\n-        final Bundle resultBundle = new Bundle();\n-        resultBundle.putBundle(BUNDLE, bundle);\n-        resultBundle.putString(PACKAGE_NAME, componentName.getPackageName());\n-        resultBundle.putString(CLASS_NAME, componentName.getClassName());\n-        return resultBundle;\n-    }\n-\n     public @NonNull Intent getIntentForInteractiveRequestFromResultBundle(@NonNull final Bundle resultBundle) throws ClientException {\n-        final String packageName = resultBundle.getString(PACKAGE_NAME);\n-        final String className = resultBundle.getString(CLASS_NAME);\n-        final Bundle bundle = resultBundle.getBundle(BUNDLE);\n+        final String packageName = resultBundle.getString(BROKER_PACKAGE_NAME);\n+        final String className = resultBundle.getString(BROKER_ACTIVITY_NAME);\n \n         if (StringUtil.isEmpty(packageName) ||\n-                StringUtil.isEmpty(className) ||\n-                bundle == null) {\n+                StringUtil.isEmpty(className)) {\n             throw new ClientException(\"Unexpected error. Content of Authorization Intent bundle should not be null.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5aaa86dcbf2865f432805759509f95843d4c4bb"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjQxMzkwOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/ipc/ContentProviderStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMDoxMDozOFrOHnhaGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMDoxMDozOFrOHnhaGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIwMzg2Nw==", "bodyText": "It would be convenient to make these non-static, and just configure with a list of them.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1090#discussion_r511203867", "createdAt": "2020-10-24T00:10:38Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/ipc/ContentProviderStrategy.java", "diffHunk": "@@ -0,0 +1,132 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.broker.ipc;\n+\n+import android.content.Context;\n+import android.content.pm.ProviderInfo;\n+import android.database.Cursor;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.util.Base64;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.internal.logging.Logger;\n+import com.microsoft.identity.common.internal.util.ParcelableUtil;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.AUTHORITY;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.CONTENT_SCHEME;\n+\n+/**\n+ * A strategy for communicating with the targeted broker via Content Provider.\n+ */\n+public class ContentProviderStrategy implements IIpcStrategy {\n+\n+    private static final String TAG = ContentProviderStrategy.class.getName();\n+    private final Context mContext;\n+\n+    public ContentProviderStrategy(final Context context) {\n+        mContext = context;\n+    }\n+\n+    @Override\n+    @Nullable public Bundle communicateToBroker(@NonNull BrokerOperationBundle brokerOperationBundle)\n+            throws BaseException {\n+\n+        final String methodName = brokerOperationBundle.getOperation().name();\n+\n+        final Uri uri = getContentProviderURI(\n+                brokerOperationBundle.getTargetBrokerAppPackageName(),\n+                brokerOperationBundle.getContentProviderPath()\n+        );\n+        Logger.info(TAG + methodName, \"Request to BrokerContentProvider for uri path \" +\n+                brokerOperationBundle.getContentProviderPath()\n+        );\n+\n+        String marshalledRequestString = null;\n+\n+        final Bundle requestBundle = brokerOperationBundle.getBundle();\n+        if (requestBundle != null) {\n+            byte[] marshalledBytes = ParcelableUtil.marshall(requestBundle);\n+            marshalledRequestString = Base64.encodeToString(marshalledBytes, 0);\n+        }\n+\n+        final Cursor cursor = mContext.getContentResolver().query(\n+                uri,\n+                null,\n+                marshalledRequestString,\n+                null,\n+                null\n+        );\n+\n+        if (cursor != null) {\n+            final Bundle resultBundle = cursor.getExtras();\n+            cursor.close();\n+            Logger.info(TAG + methodName, \"Received successful result from Broker Content Provider.\");\n+            return resultBundle;\n+        } else {\n+            final String message = \"Failed to get result from Broker Content Provider, cursor is null\";\n+            Logger.error(TAG + methodName, message, null);\n+            throw new BrokerCommunicationException(message, null);\n+        }\n+    }\n+\n+    /**\n+     * Returns a content provider URI for the given path.\n+     */\n+    private static Uri getContentProviderURI(@NonNull final String activeBrokerPackageName,\n+                                             @NonNull final String path) {\n+        final String authority = getContentProviderAuthority(activeBrokerPackageName);\n+        return Uri.parse(CONTENT_SCHEME + authority + path);\n+    }\n+\n+    /**\n+     * Returns content provider authority.\n+     */\n+    private static String getContentProviderAuthority(@NonNull final String activeBrokerPackageName) {\n+        return activeBrokerPackageName + \".\" + AUTHORITY;\n+    }\n+\n+    /**\n+     * Returns true of the target package name supports this content provider strategy.\n+     */\n+    public static boolean isBrokerContentProviderAvailable(@NonNull final Context applicationContext,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5aaa86dcbf2865f432805759509f95843d4c4bb"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjYxMTU5OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/ipc/BoundServiceStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMTozMTozNFrOHnjeHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMTozNjoxNVrOHnjoLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIzNzY2MA==", "bodyText": "How is the broker going to be specified?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1090#discussion_r511237660", "createdAt": "2020-10-24T01:31:34Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/ipc/BoundServiceStrategy.java", "diffHunk": "@@ -16,7 +16,7 @@\n import java.util.concurrent.TimeoutException;\n \n /**\n- * A strategy for communicating with the active broker (:auth process) via Bound Service.\n+ * A strategy for communicating with the targeted broker via Bound Service.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "179eee0a98cc2a177cc25f9f3a575f0e036390a2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTI0MDIzOA==", "bodyText": "BrokerOperationBundle.targetBrokerAppPackageName.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1090#discussion_r511240238", "createdAt": "2020-10-24T01:36:15Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/ipc/BoundServiceStrategy.java", "diffHunk": "@@ -16,7 +16,7 @@\n import java.util.concurrent.TimeoutException;\n \n /**\n- * A strategy for communicating with the active broker (:auth process) via Bound Service.\n+ * A strategy for communicating with the targeted broker via Bound Service.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIzNzY2MA=="}, "originalCommit": {"oid": "179eee0a98cc2a177cc25f9f3a575f0e036390a2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjYxNjk3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/ipc/BrokerOperationBundle.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMTozMzoyMVrOHnjh4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMjowMToxM1rOHnkUYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIzODYyNw==", "bodyText": "Could these paths be derived out of the operation enum? (so we don't need to have this switch)", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1090#discussion_r511238627", "createdAt": "2020-10-24T01:33:21Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/ipc/BrokerOperationBundle.java", "diffHunk": "@@ -63,11 +69,42 @@\n     @Getter\n     @Nullable final private Bundle bundle;\n \n-//    public String getAccountManagerOperationKey(){\n+    //    public String getAccountManagerOperationKey(){\n //        // TODO\n //    }\n //\n-//    public String getContentProviderUriPath(){\n-//        // TODO\n-//    }\n+    public String getContentProviderPath() throws BrokerCommunicationException {\n+        final String methodName = \":getContentProviderUriPath\";\n+\n+        switch (operation) {\n+            case MSAL_HELLO:\n+                return BrokerContentProvider.HELLO_PATH;\n+\n+            case MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST:\n+                return BrokerContentProvider.ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+\n+            case MSAL_ACQUIRE_TOKEN_SILENT:\n+                return BrokerContentProvider.ACQUIRE_TOKEN_SILENT_PATH;\n+\n+            case MSAL_GET_ACCOUNTS:\n+                return BrokerContentProvider.GET_ACCOUNTS_PATH;\n+\n+            case MSAL_REMOVE_ACCOUNT:\n+                return BrokerContentProvider.REMOVE_ACCOUNTS_PATH;\n+\n+            case MSAL_GET_DEVICE_MODE:\n+                return BrokerContentProvider.GET_DEVICE_MODE_PATH;\n+\n+            case MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE:\n+                return BrokerContentProvider.GET_CURRENT_ACCOUNT_SHARED_DEVICE_PATH;\n+\n+            case MSAL_SIGN_OUT_FROM_SHARED_DEVICE:\n+                return BrokerContentProvider.SIGN_OUT_FROM_SHARED_DEVICE_PATH;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "179eee0a98cc2a177cc25f9f3a575f0e036390a2"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTI0MTAxMA==", "bodyText": "not really. the operation could be converted to a content provider path, or account manager key, or something else, depending on the communication mechanism. so it's not a 1:1 relationship.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1090#discussion_r511241010", "createdAt": "2020-10-24T01:37:38Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/ipc/BrokerOperationBundle.java", "diffHunk": "@@ -63,11 +69,42 @@\n     @Getter\n     @Nullable final private Bundle bundle;\n \n-//    public String getAccountManagerOperationKey(){\n+    //    public String getAccountManagerOperationKey(){\n //        // TODO\n //    }\n //\n-//    public String getContentProviderUriPath(){\n-//        // TODO\n-//    }\n+    public String getContentProviderPath() throws BrokerCommunicationException {\n+        final String methodName = \":getContentProviderUriPath\";\n+\n+        switch (operation) {\n+            case MSAL_HELLO:\n+                return BrokerContentProvider.HELLO_PATH;\n+\n+            case MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST:\n+                return BrokerContentProvider.ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+\n+            case MSAL_ACQUIRE_TOKEN_SILENT:\n+                return BrokerContentProvider.ACQUIRE_TOKEN_SILENT_PATH;\n+\n+            case MSAL_GET_ACCOUNTS:\n+                return BrokerContentProvider.GET_ACCOUNTS_PATH;\n+\n+            case MSAL_REMOVE_ACCOUNT:\n+                return BrokerContentProvider.REMOVE_ACCOUNTS_PATH;\n+\n+            case MSAL_GET_DEVICE_MODE:\n+                return BrokerContentProvider.GET_DEVICE_MODE_PATH;\n+\n+            case MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE:\n+                return BrokerContentProvider.GET_CURRENT_ACCOUNT_SHARED_DEVICE_PATH;\n+\n+            case MSAL_SIGN_OUT_FROM_SHARED_DEVICE:\n+                return BrokerContentProvider.SIGN_OUT_FROM_SHARED_DEVICE_PATH;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIzODYyNw=="}, "originalCommit": {"oid": "179eee0a98cc2a177cc25f9f3a575f0e036390a2"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTI0MTg1Nw==", "bodyText": "Yeah what I meant is that should we store each of those mappings inside the enum? (rather than using constants from a different file)", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1090#discussion_r511241857", "createdAt": "2020-10-24T01:39:28Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/ipc/BrokerOperationBundle.java", "diffHunk": "@@ -63,11 +69,42 @@\n     @Getter\n     @Nullable final private Bundle bundle;\n \n-//    public String getAccountManagerOperationKey(){\n+    //    public String getAccountManagerOperationKey(){\n //        // TODO\n //    }\n //\n-//    public String getContentProviderUriPath(){\n-//        // TODO\n-//    }\n+    public String getContentProviderPath() throws BrokerCommunicationException {\n+        final String methodName = \":getContentProviderUriPath\";\n+\n+        switch (operation) {\n+            case MSAL_HELLO:\n+                return BrokerContentProvider.HELLO_PATH;\n+\n+            case MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST:\n+                return BrokerContentProvider.ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+\n+            case MSAL_ACQUIRE_TOKEN_SILENT:\n+                return BrokerContentProvider.ACQUIRE_TOKEN_SILENT_PATH;\n+\n+            case MSAL_GET_ACCOUNTS:\n+                return BrokerContentProvider.GET_ACCOUNTS_PATH;\n+\n+            case MSAL_REMOVE_ACCOUNT:\n+                return BrokerContentProvider.REMOVE_ACCOUNTS_PATH;\n+\n+            case MSAL_GET_DEVICE_MODE:\n+                return BrokerContentProvider.GET_DEVICE_MODE_PATH;\n+\n+            case MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE:\n+                return BrokerContentProvider.GET_CURRENT_ACCOUNT_SHARED_DEVICE_PATH;\n+\n+            case MSAL_SIGN_OUT_FROM_SHARED_DEVICE:\n+                return BrokerContentProvider.SIGN_OUT_FROM_SHARED_DEVICE_PATH;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIzODYyNw=="}, "originalCommit": {"oid": "179eee0a98cc2a177cc25f9f3a575f0e036390a2"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTI0MjI3OA==", "bodyText": "So the operation contains mapping for each communication mechanism", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1090#discussion_r511242278", "createdAt": "2020-10-24T01:40:42Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/ipc/BrokerOperationBundle.java", "diffHunk": "@@ -63,11 +69,42 @@\n     @Getter\n     @Nullable final private Bundle bundle;\n \n-//    public String getAccountManagerOperationKey(){\n+    //    public String getAccountManagerOperationKey(){\n //        // TODO\n //    }\n //\n-//    public String getContentProviderUriPath(){\n-//        // TODO\n-//    }\n+    public String getContentProviderPath() throws BrokerCommunicationException {\n+        final String methodName = \":getContentProviderUriPath\";\n+\n+        switch (operation) {\n+            case MSAL_HELLO:\n+                return BrokerContentProvider.HELLO_PATH;\n+\n+            case MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST:\n+                return BrokerContentProvider.ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+\n+            case MSAL_ACQUIRE_TOKEN_SILENT:\n+                return BrokerContentProvider.ACQUIRE_TOKEN_SILENT_PATH;\n+\n+            case MSAL_GET_ACCOUNTS:\n+                return BrokerContentProvider.GET_ACCOUNTS_PATH;\n+\n+            case MSAL_REMOVE_ACCOUNT:\n+                return BrokerContentProvider.REMOVE_ACCOUNTS_PATH;\n+\n+            case MSAL_GET_DEVICE_MODE:\n+                return BrokerContentProvider.GET_DEVICE_MODE_PATH;\n+\n+            case MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE:\n+                return BrokerContentProvider.GET_CURRENT_ACCOUNT_SHARED_DEVICE_PATH;\n+\n+            case MSAL_SIGN_OUT_FROM_SHARED_DEVICE:\n+                return BrokerContentProvider.SIGN_OUT_FROM_SHARED_DEVICE_PATH;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIzODYyNw=="}, "originalCommit": {"oid": "179eee0a98cc2a177cc25f9f3a575f0e036390a2"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTI1MTU1NQ==", "bodyText": "I'd say no, but I don't feel strong on this.\nThe reason is that the same constants are also used on the server (broker) side, and that side should not be aware of these operation object (or it should?)", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1090#discussion_r511251555", "createdAt": "2020-10-24T02:01:13Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/ipc/BrokerOperationBundle.java", "diffHunk": "@@ -63,11 +69,42 @@\n     @Getter\n     @Nullable final private Bundle bundle;\n \n-//    public String getAccountManagerOperationKey(){\n+    //    public String getAccountManagerOperationKey(){\n //        // TODO\n //    }\n //\n-//    public String getContentProviderUriPath(){\n-//        // TODO\n-//    }\n+    public String getContentProviderPath() throws BrokerCommunicationException {\n+        final String methodName = \":getContentProviderUriPath\";\n+\n+        switch (operation) {\n+            case MSAL_HELLO:\n+                return BrokerContentProvider.HELLO_PATH;\n+\n+            case MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST:\n+                return BrokerContentProvider.ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+\n+            case MSAL_ACQUIRE_TOKEN_SILENT:\n+                return BrokerContentProvider.ACQUIRE_TOKEN_SILENT_PATH;\n+\n+            case MSAL_GET_ACCOUNTS:\n+                return BrokerContentProvider.GET_ACCOUNTS_PATH;\n+\n+            case MSAL_REMOVE_ACCOUNT:\n+                return BrokerContentProvider.REMOVE_ACCOUNTS_PATH;\n+\n+            case MSAL_GET_DEVICE_MODE:\n+                return BrokerContentProvider.GET_DEVICE_MODE_PATH;\n+\n+            case MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE:\n+                return BrokerContentProvider.GET_CURRENT_ACCOUNT_SHARED_DEVICE_PATH;\n+\n+            case MSAL_SIGN_OUT_FROM_SHARED_DEVICE:\n+                return BrokerContentProvider.SIGN_OUT_FROM_SHARED_DEVICE_PATH;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIzODYyNw=="}, "originalCommit": {"oid": "179eee0a98cc2a177cc25f9f3a575f0e036390a2"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjYyMzU2OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/ipc/ContentProviderStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMTozNToyNFrOHnjmVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMTozNToyNFrOHnjmVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIzOTc2NQ==", "bodyText": "targetedBrokerPackageName?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1090#discussion_r511239765", "createdAt": "2020-10-24T01:35:24Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/ipc/ContentProviderStrategy.java", "diffHunk": "@@ -0,0 +1,131 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.broker.ipc;\n+\n+import android.content.Context;\n+import android.content.pm.ProviderInfo;\n+import android.database.Cursor;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.util.Base64;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.internal.logging.Logger;\n+import com.microsoft.identity.common.internal.util.ParcelableUtil;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.AUTHORITY;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.CONTENT_SCHEME;\n+\n+/**\n+ * A strategy for communicating with the targeted broker via Content Provider.\n+ */\n+public class ContentProviderStrategy implements IIpcStrategy {\n+\n+    private static final String TAG = ContentProviderStrategy.class.getName();\n+    private final Context mContext;\n+\n+    public ContentProviderStrategy(final Context context) {\n+        mContext = context;\n+    }\n+\n+    @Override\n+    @Nullable public Bundle communicateToBroker(@NonNull BrokerOperationBundle brokerOperationBundle)\n+            throws BaseException {\n+\n+        final String methodName = brokerOperationBundle.getOperation().name();\n+\n+        final Uri uri = getContentProviderURI(\n+                brokerOperationBundle.getTargetBrokerAppPackageName(),\n+                brokerOperationBundle.getContentProviderPath()\n+        );\n+        Logger.info(TAG + methodName, \"Request to BrokerContentProvider for uri path \" +\n+                brokerOperationBundle.getContentProviderPath()\n+        );\n+\n+        String marshalledRequestString = null;\n+\n+        final Bundle requestBundle = brokerOperationBundle.getBundle();\n+        if (requestBundle != null) {\n+            byte[] marshalledBytes = ParcelableUtil.marshall(requestBundle);\n+            marshalledRequestString = Base64.encodeToString(marshalledBytes, 0);\n+        }\n+\n+        final Cursor cursor = mContext.getContentResolver().query(\n+                uri,\n+                null,\n+                marshalledRequestString,\n+                null,\n+                null\n+        );\n+\n+        if (cursor != null) {\n+            final Bundle resultBundle = cursor.getExtras();\n+            cursor.close();\n+            Logger.info(TAG + methodName, \"Received successful result from Broker Content Provider.\");\n+            return resultBundle;\n+        } else {\n+            final String message = \"Failed to get result from Broker Content Provider, cursor is null\";\n+            Logger.error(TAG + methodName, message, null);\n+            throw new BrokerCommunicationException(message, null);\n+        }\n+    }\n+\n+    /**\n+     * Returns a content provider URI for the given path.\n+     */\n+    private Uri getContentProviderURI(@NonNull final String activeBrokerPackageName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "179eee0a98cc2a177cc25f9f3a575f0e036390a2"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjYyNDYxOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/ipc/ContentProviderStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMTozNTo0NlrOHnjnIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMTozNTo0NlrOHnjnIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIzOTk2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private String getContentProviderAuthority(@NonNull final String activeBrokerPackageName) {\n          \n          \n            \n                private String getContentProviderAuthority(@NonNull final String targetedBrokerPackageName) {", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1090#discussion_r511239969", "createdAt": "2020-10-24T01:35:46Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/ipc/ContentProviderStrategy.java", "diffHunk": "@@ -0,0 +1,131 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.broker.ipc;\n+\n+import android.content.Context;\n+import android.content.pm.ProviderInfo;\n+import android.database.Cursor;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.util.Base64;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.internal.logging.Logger;\n+import com.microsoft.identity.common.internal.util.ParcelableUtil;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.AUTHORITY;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.CONTENT_SCHEME;\n+\n+/**\n+ * A strategy for communicating with the targeted broker via Content Provider.\n+ */\n+public class ContentProviderStrategy implements IIpcStrategy {\n+\n+    private static final String TAG = ContentProviderStrategy.class.getName();\n+    private final Context mContext;\n+\n+    public ContentProviderStrategy(final Context context) {\n+        mContext = context;\n+    }\n+\n+    @Override\n+    @Nullable public Bundle communicateToBroker(@NonNull BrokerOperationBundle brokerOperationBundle)\n+            throws BaseException {\n+\n+        final String methodName = brokerOperationBundle.getOperation().name();\n+\n+        final Uri uri = getContentProviderURI(\n+                brokerOperationBundle.getTargetBrokerAppPackageName(),\n+                brokerOperationBundle.getContentProviderPath()\n+        );\n+        Logger.info(TAG + methodName, \"Request to BrokerContentProvider for uri path \" +\n+                brokerOperationBundle.getContentProviderPath()\n+        );\n+\n+        String marshalledRequestString = null;\n+\n+        final Bundle requestBundle = brokerOperationBundle.getBundle();\n+        if (requestBundle != null) {\n+            byte[] marshalledBytes = ParcelableUtil.marshall(requestBundle);\n+            marshalledRequestString = Base64.encodeToString(marshalledBytes, 0);\n+        }\n+\n+        final Cursor cursor = mContext.getContentResolver().query(\n+                uri,\n+                null,\n+                marshalledRequestString,\n+                null,\n+                null\n+        );\n+\n+        if (cursor != null) {\n+            final Bundle resultBundle = cursor.getExtras();\n+            cursor.close();\n+            Logger.info(TAG + methodName, \"Received successful result from Broker Content Provider.\");\n+            return resultBundle;\n+        } else {\n+            final String message = \"Failed to get result from Broker Content Provider, cursor is null\";\n+            Logger.error(TAG + methodName, message, null);\n+            throw new BrokerCommunicationException(message, null);\n+        }\n+    }\n+\n+    /**\n+     * Returns a content provider URI for the given path.\n+     */\n+    private Uri getContentProviderURI(@NonNull final String activeBrokerPackageName,\n+                                      @NonNull final String path) {\n+        final String authority = getContentProviderAuthority(activeBrokerPackageName);\n+        return Uri.parse(CONTENT_SCHEME + authority + path);\n+    }\n+\n+    /**\n+     * Returns content provider authority.\n+     */\n+    private String getContentProviderAuthority(@NonNull final String activeBrokerPackageName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "179eee0a98cc2a177cc25f9f3a575f0e036390a2"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjYyNjMwOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/ipc/ContentProviderStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMTozNjoxOVrOHnjoXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMTozNjoxOVrOHnjoXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTI0MDI4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns true of the target package name supports this content provider strategy.\n          \n          \n            \n                 * Returns true if the target package name supports this content provider strategy.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1090#discussion_r511240284", "createdAt": "2020-10-24T01:36:19Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/ipc/ContentProviderStrategy.java", "diffHunk": "@@ -0,0 +1,131 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.broker.ipc;\n+\n+import android.content.Context;\n+import android.content.pm.ProviderInfo;\n+import android.database.Cursor;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.util.Base64;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.internal.logging.Logger;\n+import com.microsoft.identity.common.internal.util.ParcelableUtil;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.AUTHORITY;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.CONTENT_SCHEME;\n+\n+/**\n+ * A strategy for communicating with the targeted broker via Content Provider.\n+ */\n+public class ContentProviderStrategy implements IIpcStrategy {\n+\n+    private static final String TAG = ContentProviderStrategy.class.getName();\n+    private final Context mContext;\n+\n+    public ContentProviderStrategy(final Context context) {\n+        mContext = context;\n+    }\n+\n+    @Override\n+    @Nullable public Bundle communicateToBroker(@NonNull BrokerOperationBundle brokerOperationBundle)\n+            throws BaseException {\n+\n+        final String methodName = brokerOperationBundle.getOperation().name();\n+\n+        final Uri uri = getContentProviderURI(\n+                brokerOperationBundle.getTargetBrokerAppPackageName(),\n+                brokerOperationBundle.getContentProviderPath()\n+        );\n+        Logger.info(TAG + methodName, \"Request to BrokerContentProvider for uri path \" +\n+                brokerOperationBundle.getContentProviderPath()\n+        );\n+\n+        String marshalledRequestString = null;\n+\n+        final Bundle requestBundle = brokerOperationBundle.getBundle();\n+        if (requestBundle != null) {\n+            byte[] marshalledBytes = ParcelableUtil.marshall(requestBundle);\n+            marshalledRequestString = Base64.encodeToString(marshalledBytes, 0);\n+        }\n+\n+        final Cursor cursor = mContext.getContentResolver().query(\n+                uri,\n+                null,\n+                marshalledRequestString,\n+                null,\n+                null\n+        );\n+\n+        if (cursor != null) {\n+            final Bundle resultBundle = cursor.getExtras();\n+            cursor.close();\n+            Logger.info(TAG + methodName, \"Received successful result from Broker Content Provider.\");\n+            return resultBundle;\n+        } else {\n+            final String message = \"Failed to get result from Broker Content Provider, cursor is null\";\n+            Logger.error(TAG + methodName, message, null);\n+            throw new BrokerCommunicationException(message, null);\n+        }\n+    }\n+\n+    /**\n+     * Returns a content provider URI for the given path.\n+     */\n+    private Uri getContentProviderURI(@NonNull final String activeBrokerPackageName,\n+                                      @NonNull final String path) {\n+        final String authority = getContentProviderAuthority(activeBrokerPackageName);\n+        return Uri.parse(CONTENT_SCHEME + authority + path);\n+    }\n+\n+    /**\n+     * Returns content provider authority.\n+     */\n+    private String getContentProviderAuthority(@NonNull final String activeBrokerPackageName) {\n+        return activeBrokerPackageName + \".\" + AUTHORITY;\n+    }\n+\n+    /**\n+     * Returns true of the target package name supports this content provider strategy.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "179eee0a98cc2a177cc25f9f3a575f0e036390a2"}, "originalPosition": 116}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2023, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}