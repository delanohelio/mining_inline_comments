{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NTYyNDk5", "number": 854, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMDozNjozMFrODo4M7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDozNzo1N1rODo7xwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTkwNDQ2OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/AuthorizationActivity.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMDozNjozMFrOF3tCVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMDozOTowN1rOF3tHpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk1Mzg3Ng==", "bodyText": "This seems to early to detect rotation. What if the Activity is created, user leaves, rotates device, and returns?\nDo we need to move this to onResume()?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/854#discussion_r393953876", "createdAt": "2020-03-17T20:36:30Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/AuthorizationActivity.java", "diffHunk": "@@ -75,6 +102,8 @@ public void onCreate(@Nullable Bundle savedInstanceState) {\n                 .setTransitionStyle(FragmentTransaction.TRANSIT_FRAGMENT_FADE)\n                 .replace(R.id.authorization_activity_content, mFragment)\n                 .commit();\n+\n+        adjustLayout();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2adcf7c9d37c56a265b87b0e3acde73a231b7a31"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk1NTIzOQ==", "bodyText": "Oh, I see there's also a call in onConfigurationChanged()\nI guess this is fine?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/854#discussion_r393955239", "createdAt": "2020-03-17T20:39:07Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/AuthorizationActivity.java", "diffHunk": "@@ -75,6 +102,8 @@ public void onCreate(@Nullable Bundle savedInstanceState) {\n                 .setTransitionStyle(FragmentTransaction.TRANSIT_FRAGMENT_FADE)\n                 .replace(R.id.authorization_activity_content, mFragment)\n                 .commit();\n+\n+        adjustLayout();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk1Mzg3Ng=="}, "originalCommit": {"oid": "2adcf7c9d37c56a265b87b0e3acde73a231b7a31"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTkyMjAyOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/AuthorizationActivity.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMDo0MToxNFrOF3tM9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzoxMToyNlrOF3xPTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk1NjU5OQ==", "bodyText": "Can these constraints be defined declaratively in the XML?\nSomething like:\nif (appIsSpannned) {\n    setContentView(R.layout.spanned_authorization_activity);\n} else {\n    setContentView(R.layout.authorization_activity);\n}", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/854#discussion_r393956599", "createdAt": "2020-03-17T20:41:14Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/AuthorizationActivity.java", "diffHunk": "@@ -83,4 +112,49 @@ public void onBackPressed() {\n             super.onBackPressed();\n         }\n     }\n+\n+    @Override\n+    public void onConfigurationChanged(Configuration newConfig) {\n+        super.onConfigurationChanged(newConfig);\n+        adjustLayout();\n+    }\n+\n+    private void adjustLayout(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2adcf7c9d37c56a265b87b0e3acde73a231b7a31"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5NDU5OA==", "bodyText": "Yes, but we'll need three files for each dual screen activities.\n\nNot spanned.\nSpanned - horizontal.\nSpanned - vertical.\n\nNOTE: after getting this feedback, I realized that the current solution can be made more reusable. Therefore, I made a change to do the following.\n\nCreated a 'dual_screen_layout.xml'.\n\n\nInternally, this contains the 'content' area, and the 'blank' area.\n\n\nMoved adjustLayout() to DualScreenUtil.\n\n\nThis function now takes an activity that uses 'dual_screen_layout.xml'.\nBased on the screen state, it will adjust the 'content' and the 'blank' area appropriately.\n\n\nAny page that needs to support duo will have to do the following\n\n\ncall setContentView(R.layout.dual_screen_layout);\nattach its 'content to be displayed' to the 'content' area of dual_screen_layout.xml.\n\nThis could be a fragment, or a ViewGroup (inflated from another layout)\n\n\ncall DualScreenUtil.adjustLayoutForDualScreenActivity().\n\nThis means I'll be able to reuse this with AuthorizationActivity (Broker/MSAL),  AuthenticationActivity (ADAL), AccountChooserActivity (Broker) and any other Broker pages that might have to support Duo in the future.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/854#discussion_r393994598", "createdAt": "2020-03-17T21:58:08Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/AuthorizationActivity.java", "diffHunk": "@@ -83,4 +112,49 @@ public void onBackPressed() {\n             super.onBackPressed();\n         }\n     }\n+\n+    @Override\n+    public void onConfigurationChanged(Configuration newConfig) {\n+        super.onConfigurationChanged(newConfig);\n+        adjustLayout();\n+    }\n+\n+    private void adjustLayout(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk1NjU5OQ=="}, "originalCommit": {"oid": "2adcf7c9d37c56a265b87b0e3acde73a231b7a31"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5NTY4Mg==", "bodyText": "@rpdome Overkill to define an Activity subclass that overrides setContentView() for this to support dual-screen?\nJust riffing ideas", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/854#discussion_r393995682", "createdAt": "2020-03-17T22:00:43Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/AuthorizationActivity.java", "diffHunk": "@@ -83,4 +112,49 @@ public void onBackPressed() {\n             super.onBackPressed();\n         }\n     }\n+\n+    @Override\n+    public void onConfigurationChanged(Configuration newConfig) {\n+        super.onConfigurationChanged(newConfig);\n+        adjustLayout();\n+    }\n+\n+    private void adjustLayout(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk1NjU5OQ=="}, "originalCommit": {"oid": "2adcf7c9d37c56a265b87b0e3acde73a231b7a31"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5ODMwMw==", "bodyText": "That might make it cleaner. Let me try that.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/854#discussion_r393998303", "createdAt": "2020-03-17T22:06:57Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/AuthorizationActivity.java", "diffHunk": "@@ -83,4 +112,49 @@ public void onBackPressed() {\n             super.onBackPressed();\n         }\n     }\n+\n+    @Override\n+    public void onConfigurationChanged(Configuration newConfig) {\n+        super.onConfigurationChanged(newConfig);\n+        adjustLayout();\n+    }\n+\n+    private void adjustLayout(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk1NjU5OQ=="}, "originalCommit": {"oid": "2adcf7c9d37c56a265b87b0e3acde73a231b7a31"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyMjczMw==", "bodyText": "@iambmelt  done. Thanks for the suggestion.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/854#discussion_r394022733", "createdAt": "2020-03-17T23:11:26Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/AuthorizationActivity.java", "diffHunk": "@@ -83,4 +112,49 @@ public void onBackPressed() {\n             super.onBackPressed();\n         }\n     }\n+\n+    @Override\n+    public void onConfigurationChanged(Configuration newConfig) {\n+        super.onConfigurationChanged(newConfig);\n+        adjustLayout();\n+    }\n+\n+    private void adjustLayout(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk1NjU5OQ=="}, "originalCommit": {"oid": "2adcf7c9d37c56a265b87b0e3acde73a231b7a31"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjM2MjQwOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/ui/DualScreenActivity.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzoyNTowM1rOF3xf3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzoyNTowM1rOF3xf3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyNjk3Mg==", "bodyText": "I don't see the int result defined here. What does 0 mean? Can we javadoc?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/854#discussion_r394026972", "createdAt": "2020-03-17T23:25:03Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/ui/DualScreenActivity.java", "diffHunk": "@@ -0,0 +1,177 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ui;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+import android.content.pm.PackageManager;\n+import android.content.res.Configuration;\n+import android.graphics.Rect;\n+import android.view.LayoutInflater;\n+import android.view.Surface;\n+import android.view.WindowManager;\n+import android.widget.RelativeLayout;\n+\n+import androidx.annotation.NonNull;\n+import androidx.constraintlayout.widget.ConstraintLayout;\n+import androidx.constraintlayout.widget.ConstraintSet;\n+import androidx.fragment.app.Fragment;\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.fragment.app.FragmentTransaction;\n+\n+import com.microsoft.device.display.DisplayMask;\n+import com.microsoft.identity.common.R;\n+\n+import java.util.List;\n+\n+// This activity readjusts its child layouts so that they're displayed on both single-screen and dual-screen device correctly.\n+public class DualScreenActivity extends FragmentActivity {\n+\n+    @Override\n+    public void setContentView(int layoutResID) {\n+        initializeContentView();\n+\n+        final RelativeLayout contentLayout = findViewById(com.microsoft.identity.common.R.id.dual_screen_content);\n+        LayoutInflater.from(this).inflate(layoutResID, contentLayout);\n+    }\n+\n+    private void initializeContentView(){\n+        super.setContentView(R.layout.dual_screen_layout);\n+        adjustLayoutForDualScreenActivity();\n+    }\n+\n+    public void setFragment(@NonNull final Fragment fragment) {\n+        initializeContentView();\n+        getSupportFragmentManager()\n+                .beginTransaction()\n+                .setTransitionStyle(FragmentTransaction.TRANSIT_FRAGMENT_FADE)\n+                .replace(R.id.dual_screen_content, fragment)\n+                .commit();\n+    }\n+\n+    @Override\n+    public void onConfigurationChanged(Configuration newConfig) {\n+        super.onConfigurationChanged(newConfig);\n+        adjustLayoutForDualScreenActivity();\n+    }\n+\n+    private void adjustLayoutForDualScreenActivity() {\n+        int rotation = getRotation(this);\n+        boolean isAppSpanned = isAppSpanned(this);\n+        boolean isHorizontal = rotation == Surface.ROTATION_0 || rotation == Surface.ROTATION_180;\n+\n+        final ConstraintSet constraintSet = new ConstraintSet();\n+        constraintSet.connect(R.id.dual_screen_content, ConstraintSet.LEFT, R.id.dual_screen_layout, ConstraintSet.LEFT, 0);\n+        constraintSet.connect(R.id.dual_screen_content, ConstraintSet.RIGHT, R.id.dual_screen_layout, ConstraintSet.RIGHT, 0);\n+        constraintSet.connect(R.id.dual_screen_content, ConstraintSet.TOP, R.id.dual_screen_layout, ConstraintSet.TOP, 0);\n+        constraintSet.connect(R.id.dual_screen_content, ConstraintSet.BOTTOM, R.id.dual_screen_layout, ConstraintSet.BOTTOM, 0);\n+\n+        constraintSet.connect(R.id.dual_screen_content, ConstraintSet.LEFT, R.id.dual_screen_layout, ConstraintSet.LEFT, 0);\n+        constraintSet.connect(R.id.dual_screen_content, ConstraintSet.RIGHT, R.id.dual_screen_layout, ConstraintSet.RIGHT, 0);\n+        constraintSet.connect(R.id.dual_screen_content, ConstraintSet.TOP, R.id.dual_screen_layout, ConstraintSet.TOP, 0);\n+        constraintSet.connect(R.id.dual_screen_content, ConstraintSet.BOTTOM, R.id.dual_screen_layout, ConstraintSet.BOTTOM, 0);\n+\n+        if (isAppSpanned) {\n+            if (isHorizontal) {\n+                int duoHingeWidth = getHinge(this, rotation).width() / 2;\n+\n+                // WebView is on the right.\n+                constraintSet.connect(R.id.dual_screen_content, ConstraintSet.LEFT, R.id.vertical_guideline, ConstraintSet.RIGHT, duoHingeWidth);\n+\n+                // Empty view is on the left.\n+                constraintSet.connect(R.id.dual_screen_empty_view, ConstraintSet.RIGHT, R.id.vertical_guideline, ConstraintSet.LEFT, 0);\n+            } else {\n+                int duoHingeWidth = getHinge(this, rotation).height() / 2;\n+\n+                // WebView is on the top.\n+                constraintSet.connect(R.id.dual_screen_content, ConstraintSet.BOTTOM, R.id.horizontal_guideline, ConstraintSet.TOP, duoHingeWidth);\n+\n+                // Empty view is in the bottom.\n+                constraintSet.connect(R.id.dual_screen_empty_view, ConstraintSet.TOP, R.id.horizontal_guideline, ConstraintSet.BOTTOM, 0);\n+            }\n+        } else {\n+            // Shrink empty view. If constraint is not set, then its size will be (0,0).\n+            constraintSet.clear(R.id.dual_screen_empty_view);\n+        }\n+\n+        final ConstraintLayout dualScreenLayout = findViewById(R.id.dual_screen_layout);\n+        dualScreenLayout.setConstraintSet(constraintSet);\n+    }\n+\n+    public boolean isAppSpanned(final Activity activity) {\n+        if (!isDualScreenDevice(activity)) {\n+            return false;\n+        }\n+\n+        int rotation = getRotation(activity);\n+        Rect hinge = getHinge(activity, rotation);\n+        Rect windowRect = getWindowRect(activity);\n+\n+        if (windowRect.width() > 0 && windowRect.height() > 0) {\n+            // The windowRect doesn't intersect hinge\n+            return hinge.intersect(windowRect);\n+        }\n+\n+        return false;\n+    }\n+\n+    public int getRotation(Activity activity) {\n+        WindowManager wm = (WindowManager) activity.getSystemService(Context.WINDOW_SERVICE);\n+        int rotation = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cca7ee984c1d98f43ad1e5ac0d04085dfd80cbe3"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjM3ODU3OnYy", "diffSide": "LEFT", "path": "common/src/main/AndroidManifest.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzozNDowMFrOF3xp5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzozNDowMFrOF3xp5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyOTU0MQ==", "bodyText": "why remove keyboardhidden here?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/854#discussion_r394029541", "createdAt": "2020-03-17T23:34:00Z", "author": {"login": "kreedula"}, "path": "common/src/main/AndroidManifest.xml", "diffHunk": "@@ -7,7 +7,7 @@\n     <application>\n         <activity\n             android:name=\"com.microsoft.identity.common.internal.providers.oauth2.AuthorizationActivity\"\n-            android:configChanges=\"orientation|keyboardHidden|screenSize\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3abc8656ea41173aa65aa38c052740241b1a33d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjQ5MDI2OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/ui/DualScreenUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDozNzo1N1rOF3yt7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDo0ODo0NlrOF3y4Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0Njk1OA==", "bodyText": "these looks exactly the same as the above 4 statements, is this intended?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/854#discussion_r394046958", "createdAt": "2020-03-18T00:37:57Z", "author": {"login": "kreedula"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/ui/DualScreenUtil.java", "diffHunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ui;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+import android.content.pm.PackageManager;\n+import android.graphics.Rect;\n+import android.view.Surface;\n+import android.view.WindowManager;\n+\n+import androidx.annotation.NonNull;\n+import androidx.constraintlayout.widget.ConstraintLayout;\n+import androidx.constraintlayout.widget.ConstraintSet;\n+\n+import com.microsoft.device.display.DisplayMask;\n+import com.microsoft.identity.common.R;\n+\n+import java.util.List;\n+\n+// Adapt from https://github.com/microsoft/surface-duo-sdk-samples/blob/master/utils/src/main/java/com/microsoft/device/display/samples/utils/ScreenHelper.java\n+public class DualScreenUtil {\n+\n+    // Given a dual screen activity (an activity which uses R.layout.dual_screen_layout),\n+    // readjust its child layouts so that it's displayed on both single-screen and dual-screen device correct .\n+    public static void adjustLayoutForDualScreenActivity(@NonNull final Activity dualScreenActivity) {\n+        final ConstraintLayout dualScreenLayout = dualScreenActivity.findViewById(R.id.dual_screen_layout);\n+        if (dualScreenLayout == null) {\n+            throw new IllegalArgumentException(\"This is not a dual screen activity. \" +\n+                    \"Dual screen activity must use R.layout.dual_screen_layout.\");\n+        }\n+\n+        int rotation = getRotation(dualScreenActivity);\n+        boolean isAppSpanned = isAppSpanned(dualScreenActivity);\n+        boolean isHorizontal = rotation == Surface.ROTATION_0 || rotation == Surface.ROTATION_180;\n+\n+        final ConstraintSet constraintSet = new ConstraintSet();\n+        constraintSet.connect(R.id.dual_screen_content, ConstraintSet.LEFT, R.id.dual_screen_layout, ConstraintSet.LEFT, 0);\n+        constraintSet.connect(R.id.dual_screen_content, ConstraintSet.RIGHT, R.id.dual_screen_layout, ConstraintSet.RIGHT, 0);\n+        constraintSet.connect(R.id.dual_screen_content, ConstraintSet.TOP, R.id.dual_screen_layout, ConstraintSet.TOP, 0);\n+        constraintSet.connect(R.id.dual_screen_content, ConstraintSet.BOTTOM, R.id.dual_screen_layout, ConstraintSet.BOTTOM, 0);\n+\n+        constraintSet.connect(R.id.dual_screen_content, ConstraintSet.LEFT, R.id.dual_screen_layout, ConstraintSet.LEFT, 0);\n+        constraintSet.connect(R.id.dual_screen_content, ConstraintSet.RIGHT, R.id.dual_screen_layout, ConstraintSet.RIGHT, 0);\n+        constraintSet.connect(R.id.dual_screen_content, ConstraintSet.TOP, R.id.dual_screen_layout, ConstraintSet.TOP, 0);\n+        constraintSet.connect(R.id.dual_screen_content, ConstraintSet.BOTTOM, R.id.dual_screen_layout, ConstraintSet.BOTTOM, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74cf461a6888b4298f96cdcdceaa6589582917a0"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0OTU1OQ==", "bodyText": "nice catch. \ud83d\ude06", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/854#discussion_r394049559", "createdAt": "2020-03-18T00:48:46Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/ui/DualScreenUtil.java", "diffHunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ui;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+import android.content.pm.PackageManager;\n+import android.graphics.Rect;\n+import android.view.Surface;\n+import android.view.WindowManager;\n+\n+import androidx.annotation.NonNull;\n+import androidx.constraintlayout.widget.ConstraintLayout;\n+import androidx.constraintlayout.widget.ConstraintSet;\n+\n+import com.microsoft.device.display.DisplayMask;\n+import com.microsoft.identity.common.R;\n+\n+import java.util.List;\n+\n+// Adapt from https://github.com/microsoft/surface-duo-sdk-samples/blob/master/utils/src/main/java/com/microsoft/device/display/samples/utils/ScreenHelper.java\n+public class DualScreenUtil {\n+\n+    // Given a dual screen activity (an activity which uses R.layout.dual_screen_layout),\n+    // readjust its child layouts so that it's displayed on both single-screen and dual-screen device correct .\n+    public static void adjustLayoutForDualScreenActivity(@NonNull final Activity dualScreenActivity) {\n+        final ConstraintLayout dualScreenLayout = dualScreenActivity.findViewById(R.id.dual_screen_layout);\n+        if (dualScreenLayout == null) {\n+            throw new IllegalArgumentException(\"This is not a dual screen activity. \" +\n+                    \"Dual screen activity must use R.layout.dual_screen_layout.\");\n+        }\n+\n+        int rotation = getRotation(dualScreenActivity);\n+        boolean isAppSpanned = isAppSpanned(dualScreenActivity);\n+        boolean isHorizontal = rotation == Surface.ROTATION_0 || rotation == Surface.ROTATION_180;\n+\n+        final ConstraintSet constraintSet = new ConstraintSet();\n+        constraintSet.connect(R.id.dual_screen_content, ConstraintSet.LEFT, R.id.dual_screen_layout, ConstraintSet.LEFT, 0);\n+        constraintSet.connect(R.id.dual_screen_content, ConstraintSet.RIGHT, R.id.dual_screen_layout, ConstraintSet.RIGHT, 0);\n+        constraintSet.connect(R.id.dual_screen_content, ConstraintSet.TOP, R.id.dual_screen_layout, ConstraintSet.TOP, 0);\n+        constraintSet.connect(R.id.dual_screen_content, ConstraintSet.BOTTOM, R.id.dual_screen_layout, ConstraintSet.BOTTOM, 0);\n+\n+        constraintSet.connect(R.id.dual_screen_content, ConstraintSet.LEFT, R.id.dual_screen_layout, ConstraintSet.LEFT, 0);\n+        constraintSet.connect(R.id.dual_screen_content, ConstraintSet.RIGHT, R.id.dual_screen_layout, ConstraintSet.RIGHT, 0);\n+        constraintSet.connect(R.id.dual_screen_content, ConstraintSet.TOP, R.id.dual_screen_layout, ConstraintSet.TOP, 0);\n+        constraintSet.connect(R.id.dual_screen_content, ConstraintSet.BOTTOM, R.id.dual_screen_layout, ConstraintSet.BOTTOM, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0Njk1OA=="}, "originalCommit": {"oid": "74cf461a6888b4298f96cdcdceaa6589582917a0"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2311, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}