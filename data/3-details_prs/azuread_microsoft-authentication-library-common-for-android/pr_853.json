{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NTIwMTgy", "number": 853, "title": "Implement server telemetry v2", "bodyText": "Please refer to server side telemetry v2 schema doc for detailed guidance on the schema changes. This document was shared with the team via email.\nChanges done in this PR:\n\nImplement V2 schema (refer to the doc or see summary below)\nUse GSON to get cache value for telemetry objects saved to cache\nAdd a field called as servicedFromCache to LocalAuthenticationResult, this indicates whether token was returned from cache lookup. The field was also added to BrokerResult\nRefactor the beginInteractive in CommandDisptacher to use the CommandResult object to return the result back to caller (submitSilent was already using this pattern)\nAdd a method called isEligibleForEstsTelemetry to the command interface that indicates whether we would capture telemetry for this command.\nRemove the unit tests for telemetry in favor of E2E test that was added in the MSAL pr\n\nHere's a quick summary for the changes in v2 schema:\nSchema:\nx-client-current-telemetry = schema_version | api_id, force_refresh | platform_fields\nx-client-last-telemetry = schema_version | silent_succesful_count | failed_requests | errors | platform_fields\nFailed request and error fields are arrays.\nExample: schema_version | silent_succesful_count | api_id_1, correlation_id_1, api_id_2, correlation_id_2, api_id_3, correlation_id_3 | error_1, error_2, error_3 | platform_fields\nSome other important changes:\n\nTelemetry headers will only be sent to /token endpoint\nTelemetry data won't be removed if not logged by sts even if sent to token endpoint by client (This includes status codes such 429 and/or status codes greater than or equal to 500)\nThere is a 8KB limit for payload in request headers sent to sts, we will be capping at 4KB. We will be performing validation prior to sending header to ensure we stay within those bounds. If we have more data than that, then we keep it in the cache and pick it up during the next request to token endpoint.", "createdAt": "2020-03-16T22:13:56Z", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853", "merged": true, "mergeCommit": {"oid": "7c9336fdb99f6077f3ddcbb69b0991dba3c1372e"}, "closed": true, "closedAt": "2020-03-26T03:17:42Z", "author": {"login": "shahzaibj"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOUKCMgH2gAyMzg5NTIwMTgyOjc5NTU2ODc1NzY4OTY3ZmRjZmMwOWVlZGZhOWNkOWY3ZTQ0ODkxMWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRQh1fAFqTM4MTYxOTMwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "79556875768967fdcfc09eedfa9cd9f7e448911f", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/79556875768967fdcfc09eedfa9cd9f7e448911f", "committedDate": "2020-03-16T20:30:05Z", "message": "Implement v2 for ests telemetry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fce4c2a419f2abcd6bdf2619df0209a5f1428d0", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/4fce4c2a419f2abcd6bdf2619df0209a5f1428d0", "committedDate": "2020-03-16T22:13:21Z", "message": "Rearrange command dispatcher code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7282190b574aa371e66d86e88473ac06868b5351", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/7282190b574aa371e66d86e88473ac06868b5351", "committedDate": "2020-03-16T22:21:47Z", "message": "Add mising license"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e908c0a349eeedb336d163e3ff1c2766e619eb5", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/1e908c0a349eeedb336d163e3ff1c2766e619eb5", "committedDate": "2020-03-16T23:01:44Z", "message": "Add comments, javadoc, remove unused code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd062105f8433420d0d57c76cb5d7320f6a0d09c", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/bd062105f8433420d0d57c76cb5d7320f6a0d09c", "committedDate": "2020-03-16T23:06:14Z", "message": "Fix pmd"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbd6a7520bcfe82060da07f7241ea6545d3ee326", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/bbd6a7520bcfe82060da07f7241ea6545d3ee326", "committedDate": "2020-03-17T15:40:04Z", "message": "Send serviced from cache to BrokerResult"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c574a371f1405403207733359c85b4ae1b937c9f", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/c574a371f1405403207733359c85b4ae1b937c9f", "committedDate": "2020-03-17T19:40:05Z", "message": "Add validation for telemetry header size and sanitize"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9f505970d49e1a24f308d1ae5502ce9e1a1f8a6", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/f9f505970d49e1a24f308d1ae5502ce9e1a1f8a6", "committedDate": "2020-03-17T20:01:53Z", "message": "Merge branch 'dev' into shahzaibj/server-telemetry-v2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04116e845b306c8410bb8f24abdbb0dfa068afee", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/04116e845b306c8410bb8f24abdbb0dfa068afee", "committedDate": "2020-03-17T21:18:29Z", "message": "Merge branch 'dev' into shahzaibj/server-telemetry-v2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9", "committedDate": "2020-03-20T00:36:47Z", "message": "Merge branch 'dev' into shahzaibj/server-telemetry-v2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTkwNDQ5", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#pullrequestreview-378190449", "createdAt": "2020-03-20T01:16:48Z", "commit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMToxNjo0OFrOF5FV9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzoyNTozMFrOF6QEnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwMDY5NA==", "bodyText": "nit : use StringBuilder.append() for readability and add a constant for delimiter \"|\"", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r395400694", "createdAt": "2020-03-20T01:16:48Z", "author": {"login": "kreedula"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/LastRequestTelemetry.java", "diffHunk": "@@ -0,0 +1,118 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.eststelemetry;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class LastRequestTelemetry extends RequestTelemetry {\n+\n+    @SerializedName(\"silent_successful_count\")\n+    private int silentSuccessfulCount;\n+\n+    @SerializedName(\"failed_requests\")\n+    private List<FailedRequest> failedRequests;\n+\n+    @SerializedName(\"errors\")\n+    private List<String> errors;\n+\n+    LastRequestTelemetry(@NonNull String schemaVersion) {\n+        super(schemaVersion);\n+        silentSuccessfulCount = 0;\n+        failedRequests = new ArrayList<>();\n+        errors = new ArrayList<>();\n+    }\n+\n+    List<FailedRequest> getFailedRequests() {\n+        return failedRequests;\n+    }\n+\n+    List<String> getErrors() {\n+        return errors;\n+    }\n+\n+    @Override\n+    public String getHeaderStringForFields() {\n+        return silentSuccessfulCount + \"|\" + getHeaderStringForFields(failedRequests) + \"|\" + getHeaderStringForFields(errors);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwMjIwMw==", "bodyText": "same feedback here", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r395402203", "createdAt": "2020-03-20T01:23:50Z", "author": {"login": "kreedula"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/RequestTelemetry.java", "diffHunk": "@@ -112,34 +82,34 @@ String getCompleteTelemetryHeaderString() {\n             return null;\n         }\n \n-        final String schemaVersionString = Schema.getSchemaCompliantString(mSchemaVersion);\n-        final String commonSchemaString = getCommonTelemetryHeaderString();\n-        final String platformSchemaString = getPlatformTelemetryHeaderString();\n-        return schemaVersionString + \"|\" + commonSchemaString + \"|\" + platformSchemaString;\n-    }\n-\n-    private String getCommonTelemetryHeaderString() {\n-        final String[] commonFields = Schema.getCommonFields(mIsCurrentRequest);\n-        return getTelemetryHeaderStringFromFields(commonFields, mCommonTelemetry);\n+        return mSchemaVersion + \"|\" + this.getHeaderStringForFields() + \"|\" + getPlatformTelemetryHeaderString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyMjQ2Ng==", "bodyText": "nit: constant for the data limit value", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396622466", "createdAt": "2020-03-23T17:21:45Z", "author": {"login": "kreedula"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -321,17 +363,63 @@ String getCurrentTelemetryHeaderString() {\n             return null;\n         }\n \n-        return currentTelemetry.getCompleteTelemetryHeaderString();\n+        return currentTelemetry.getCompleteHeaderString();\n     }\n \n-    String getLastTelemetryHeaderString() {\n-        RequestTelemetry lastTelemetry = loadLastRequestTelemetryFromCache();\n-\n-        if (lastTelemetry == null) {\n+    private String getLastTelemetryHeaderString() {\n+        if (mLastRequestTelemetryCache == null) {\n             return null;\n         }\n \n-        return lastTelemetry.getCompleteTelemetryHeaderString();\n+        LastRequestTelemetry lastRequestTelemetry = (LastRequestTelemetry) mLastRequestTelemetryCache.getRequestTelemetryFromCache();\n+\n+        if (lastRequestTelemetry == null) {\n+            // we did not have anything in the telemetry cache for the last request\n+            // let's create a new object based on the data available from the current request object\n+            // and return the header string formed via that object\n+            final String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n+            final CurrentRequestTelemetry currentRequestTelemetry = mTelemetryMap.get(correlationId);\n+            lastRequestTelemetry = new LastRequestTelemetry(currentRequestTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.derive(currentRequestTelemetry);\n+            return lastRequestTelemetry.getCompleteHeaderString();\n+        }\n+\n+        // create a copy of the object retrieved from cache\n+        LastRequestTelemetry lastRequestTelemetryCopy = new LastRequestTelemetry(lastRequestTelemetry.getSchemaVersion());\n+        lastRequestTelemetryCopy = (LastRequestTelemetry) lastRequestTelemetryCopy.derive(lastRequestTelemetry);\n+\n+        // failed request data from the object retrieved from cache\n+        final List<FailedRequest> originalFailedRequests = lastRequestTelemetry.getFailedRequests();\n+\n+        // error data from the object retrieved from cache\n+        final List<String> originalErrors = lastRequestTelemetry.getErrors();\n+\n+        // the array index that marks how many elements were included in the header sent in the request\n+        int indexOfFailedRequestsAndErrors = 0;\n+\n+        for (int i = 0; i < originalFailedRequests.size(); i++) {\n+            // there is a limit of 8KB for the payload sent in request headers\n+            // we will be maxing out at 4KB to avoid HTTP 413 errors\n+            // check if we have enough space in the String to store another failed request/error element\n+            // if yes, then add it to the failed request array (for the copy)\n+            if (lastRequestTelemetryCopy.getCompleteHeaderString().length() < 3800) {\n+                lastRequestTelemetryCopy.appendFailedRequestWithError(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 426}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyMzU4MQ==", "bodyText": "Should we indicate the server somehow  that we are not sending the data due to size restrictions. i.e. just for us to be aware that this data could be skewed?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396623581", "createdAt": "2020-03-23T17:23:18Z", "author": {"login": "kreedula"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -321,17 +363,63 @@ String getCurrentTelemetryHeaderString() {\n             return null;\n         }\n \n-        return currentTelemetry.getCompleteTelemetryHeaderString();\n+        return currentTelemetry.getCompleteHeaderString();\n     }\n \n-    String getLastTelemetryHeaderString() {\n-        RequestTelemetry lastTelemetry = loadLastRequestTelemetryFromCache();\n-\n-        if (lastTelemetry == null) {\n+    private String getLastTelemetryHeaderString() {\n+        if (mLastRequestTelemetryCache == null) {\n             return null;\n         }\n \n-        return lastTelemetry.getCompleteTelemetryHeaderString();\n+        LastRequestTelemetry lastRequestTelemetry = (LastRequestTelemetry) mLastRequestTelemetryCache.getRequestTelemetryFromCache();\n+\n+        if (lastRequestTelemetry == null) {\n+            // we did not have anything in the telemetry cache for the last request\n+            // let's create a new object based on the data available from the current request object\n+            // and return the header string formed via that object\n+            final String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n+            final CurrentRequestTelemetry currentRequestTelemetry = mTelemetryMap.get(correlationId);\n+            lastRequestTelemetry = new LastRequestTelemetry(currentRequestTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.derive(currentRequestTelemetry);\n+            return lastRequestTelemetry.getCompleteHeaderString();\n+        }\n+\n+        // create a copy of the object retrieved from cache\n+        LastRequestTelemetry lastRequestTelemetryCopy = new LastRequestTelemetry(lastRequestTelemetry.getSchemaVersion());\n+        lastRequestTelemetryCopy = (LastRequestTelemetry) lastRequestTelemetryCopy.derive(lastRequestTelemetry);\n+\n+        // failed request data from the object retrieved from cache\n+        final List<FailedRequest> originalFailedRequests = lastRequestTelemetry.getFailedRequests();\n+\n+        // error data from the object retrieved from cache\n+        final List<String> originalErrors = lastRequestTelemetry.getErrors();\n+\n+        // the array index that marks how many elements were included in the header sent in the request\n+        int indexOfFailedRequestsAndErrors = 0;\n+\n+        for (int i = 0; i < originalFailedRequests.size(); i++) {\n+            // there is a limit of 8KB for the payload sent in request headers\n+            // we will be maxing out at 4KB to avoid HTTP 413 errors\n+            // check if we have enough space in the String to store another failed request/error element\n+            // if yes, then add it to the failed request array (for the copy)\n+            if (lastRequestTelemetryCopy.getCompleteHeaderString().length() < 3800) {\n+                lastRequestTelemetryCopy.appendFailedRequestWithError(\n+                        originalFailedRequests.get(indexOfFailedRequestsAndErrors),\n+                        originalErrors.get(indexOfFailedRequestsAndErrors++)\n+                );\n+            } else {\n+                // if there is no room for more data, then break out of this loop\n+                break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 432}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyMzkzOQ==", "bodyText": "nit : final here and everywhere else in the method for local variables", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396623939", "createdAt": "2020-03-23T17:23:49Z", "author": {"login": "kreedula"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -321,17 +363,63 @@ String getCurrentTelemetryHeaderString() {\n             return null;\n         }\n \n-        return currentTelemetry.getCompleteTelemetryHeaderString();\n+        return currentTelemetry.getCompleteHeaderString();\n     }\n \n-    String getLastTelemetryHeaderString() {\n-        RequestTelemetry lastTelemetry = loadLastRequestTelemetryFromCache();\n-\n-        if (lastTelemetry == null) {\n+    private String getLastTelemetryHeaderString() {\n+        if (mLastRequestTelemetryCache == null) {\n             return null;\n         }\n \n-        return lastTelemetry.getCompleteTelemetryHeaderString();\n+        LastRequestTelemetry lastRequestTelemetry = (LastRequestTelemetry) mLastRequestTelemetryCache.getRequestTelemetryFromCache();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 394}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyNTA1Mw==", "bodyText": "When would we disable this telemetry? If this method is only to check if we have telemetry or not, we might to have rename this method more appropriately", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396625053", "createdAt": "2020-03-23T17:25:30Z", "author": {"login": "kreedula"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -81,6 +86,27 @@ public void setupLastRequestTelemetryCache(@NonNull final Context context) {\n         }\n     }\n \n+    /**\n+     * Creates an entry for a Current Telemetry object for the passed in command based on whether\n+     * the command is eligible for telemetry. Saves the telemetry object to telemetry map.\n+     *\n+     * @param command The command for which to capture telemetry\n+     */\n+    public void initTelemetryForCommand(@NonNull final BaseCommand command) {\n+        setupLastRequestTelemetryCache(command.getParameters().getAppContext());\n+        final String correlationId = command.getParameters().getCorrelationId();\n+        if (command.isEligibleForEstsTelemetry()) {\n+            final CurrentRequestTelemetry currentRequestTelemetry = new CurrentRequestTelemetry();\n+            mTelemetryMap.put(correlationId, currentRequestTelemetry);\n+        }\n+    }\n+\n+    private boolean isDisabled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NzEzNDY0", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#pullrequestreview-379713464", "createdAt": "2020-03-23T18:35:27Z", "commit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODozNToyN1rOF6S9kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODozNToyN1rOF6S9kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3MjQwMQ==", "bodyText": "nit: is this private function being used elsewhere? (as in, why is it separated from the other emit with 2 params).", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396672401", "createdAt": "2020-03-23T18:35:27Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -106,33 +132,28 @@ public void emit(@Nullable final Map<String, String> telemetry) {\n      */\n     public void emit(final String key, final String value) {\n         final String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        emit(correlationId, key, value);\n+        final String compliantValueString = TelemetryUtils.getSchemaCompliantString(value);\n+        emit(correlationId, key, compliantValueString);\n     }\n \n     private void emit(final String correlationId, final String key, final String value) {\n-        RequestTelemetry currentTelemetryInstance = getCurrentTelemetryInstance(correlationId);\n+        final CurrentRequestTelemetry currentTelemetryInstance = getCurrentTelemetryInstance(correlationId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NzE5ODk3", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#pullrequestreview-379719897", "createdAt": "2020-03-23T18:44:20Z", "commit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODo0NDoyMFrOF6TSMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODo0NDoyMFrOF6TSMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3NzY4Mw==", "bodyText": "Why are we duplicating the data?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396677683", "createdAt": "2020-03-23T18:44:20Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -194,122 +215,143 @@ private IRequestTelemetryCache createLastRequestTelemetryCache(@NonNull final Co\n         return new SharedPreferencesLastRequestTelemetryCache(sharedPreferencesFileManager);\n     }\n \n-    private RequestTelemetry setupLastFromCurrent(@Nullable RequestTelemetry currentTelemetry) {\n-        if (currentTelemetry == null) {\n-            return new RequestTelemetry(Schema.CURRENT_SCHEMA_VERSION, false);\n-        }\n-\n-        RequestTelemetry lastTelemetry = new RequestTelemetry(currentTelemetry.getSchemaVersion(), false);\n-\n-        // grab whatever common fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getCommonTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        // grab whatever platform fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getPlatformTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        return lastTelemetry;\n-    }\n-\n     /**\n      * Flush the telemetry data for the current request to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n      * Removes the telemetry associated to the correlation id from the telemetry map,\n      * and saves it to the cache (SharedPreferences) as the last request telemetry.\n      */\n-    void flush() {\n-        String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        flush(correlationId);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     */\n-    public void flush(final String correlationId) {\n-        final String errorCode = null; // there was no error\n-        flush(correlationId, errorCode);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param baseException exception that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final BaseException baseException) {\n-        flush(correlationId, baseException == null ? null : baseException.getErrorCode());\n-    }\n+    public void flush(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {\n+        final String methodName = \":flush\";\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId      correlation id of the request\n-     * @param acquireTokenResult the result obtained from the acquire token call\n-     */\n-    public void flush(final String correlationId, final AcquireTokenResult acquireTokenResult) {\n-        final String errorCode = TelemetryUtils.errorFromAcquireTokenResult(acquireTokenResult);\n-        flush(correlationId, errorCode);\n-    }\n+        final String correlationId = command.getParameters().getCorrelationId();\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param errorCode     error that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final String errorCode) {\n-        final String methodName = \":flush\";\n         if (mTelemetryMap == null || correlationId == null) {\n             return;\n         }\n \n-        RequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+        CurrentRequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+\n         if (currentTelemetry == null) {\n             return;\n         }\n \n-        RequestTelemetry lastTelemetry = setupLastFromCurrent(currentTelemetry);\n-        lastTelemetry.putTelemetry(Schema.Key.CORRELATION_ID, correlationId);\n-        lastTelemetry.putTelemetry(Schema.Key.ERROR_CODE, errorCode);\n+        // load the last request object from cache\n+        LastRequestTelemetry lastRequestTelemetry = loadLastRequestTelemetryFromCache();\n+\n+        // We did not have a last request object in cache, let's create a new one and derive\n+        // fields from current request where applicable\n+        if (lastRequestTelemetry == null) {\n+            lastRequestTelemetry = new LastRequestTelemetry(currentTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.derive(currentTelemetry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 249}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NzIyODEy", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#pullrequestreview-379722812", "createdAt": "2020-03-23T18:48:25Z", "commit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODo0ODoyNVrOF6TbfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODo0ODoyNVrOF6TbfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4MDA2MA==", "bodyText": "is this thread safe? (Since we support parallel request)", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396680060", "createdAt": "2020-03-23T18:48:25Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -194,122 +215,143 @@ private IRequestTelemetryCache createLastRequestTelemetryCache(@NonNull final Co\n         return new SharedPreferencesLastRequestTelemetryCache(sharedPreferencesFileManager);\n     }\n \n-    private RequestTelemetry setupLastFromCurrent(@Nullable RequestTelemetry currentTelemetry) {\n-        if (currentTelemetry == null) {\n-            return new RequestTelemetry(Schema.CURRENT_SCHEMA_VERSION, false);\n-        }\n-\n-        RequestTelemetry lastTelemetry = new RequestTelemetry(currentTelemetry.getSchemaVersion(), false);\n-\n-        // grab whatever common fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getCommonTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        // grab whatever platform fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getPlatformTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        return lastTelemetry;\n-    }\n-\n     /**\n      * Flush the telemetry data for the current request to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n      * Removes the telemetry associated to the correlation id from the telemetry map,\n      * and saves it to the cache (SharedPreferences) as the last request telemetry.\n      */\n-    void flush() {\n-        String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        flush(correlationId);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     */\n-    public void flush(final String correlationId) {\n-        final String errorCode = null; // there was no error\n-        flush(correlationId, errorCode);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param baseException exception that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final BaseException baseException) {\n-        flush(correlationId, baseException == null ? null : baseException.getErrorCode());\n-    }\n+    public void flush(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 201}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NzM5MjM4", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#pullrequestreview-379739238", "createdAt": "2020-03-23T19:11:14Z", "commit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOToxMToxNFrOF6UOdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOToxMToxNFrOF6UOdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5MzEwOA==", "bodyText": "I think it might be risky using index as we're supporting concurrent requests.\nWhat if we have the command store a list of last request correlation ID, and if sent, then we remove the entry with the associated correlation ID from the cache?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396693108", "createdAt": "2020-03-23T19:11:14Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -194,122 +215,143 @@ private IRequestTelemetryCache createLastRequestTelemetryCache(@NonNull final Co\n         return new SharedPreferencesLastRequestTelemetryCache(sharedPreferencesFileManager);\n     }\n \n-    private RequestTelemetry setupLastFromCurrent(@Nullable RequestTelemetry currentTelemetry) {\n-        if (currentTelemetry == null) {\n-            return new RequestTelemetry(Schema.CURRENT_SCHEMA_VERSION, false);\n-        }\n-\n-        RequestTelemetry lastTelemetry = new RequestTelemetry(currentTelemetry.getSchemaVersion(), false);\n-\n-        // grab whatever common fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getCommonTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        // grab whatever platform fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getPlatformTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        return lastTelemetry;\n-    }\n-\n     /**\n      * Flush the telemetry data for the current request to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n      * Removes the telemetry associated to the correlation id from the telemetry map,\n      * and saves it to the cache (SharedPreferences) as the last request telemetry.\n      */\n-    void flush() {\n-        String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        flush(correlationId);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     */\n-    public void flush(final String correlationId) {\n-        final String errorCode = null; // there was no error\n-        flush(correlationId, errorCode);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param baseException exception that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final BaseException baseException) {\n-        flush(correlationId, baseException == null ? null : baseException.getErrorCode());\n-    }\n+    public void flush(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {\n+        final String methodName = \":flush\";\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId      correlation id of the request\n-     * @param acquireTokenResult the result obtained from the acquire token call\n-     */\n-    public void flush(final String correlationId, final AcquireTokenResult acquireTokenResult) {\n-        final String errorCode = TelemetryUtils.errorFromAcquireTokenResult(acquireTokenResult);\n-        flush(correlationId, errorCode);\n-    }\n+        final String correlationId = command.getParameters().getCorrelationId();\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param errorCode     error that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final String errorCode) {\n-        final String methodName = \":flush\";\n         if (mTelemetryMap == null || correlationId == null) {\n             return;\n         }\n \n-        RequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+        CurrentRequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+\n         if (currentTelemetry == null) {\n             return;\n         }\n \n-        RequestTelemetry lastTelemetry = setupLastFromCurrent(currentTelemetry);\n-        lastTelemetry.putTelemetry(Schema.Key.CORRELATION_ID, correlationId);\n-        lastTelemetry.putTelemetry(Schema.Key.ERROR_CODE, errorCode);\n+        // load the last request object from cache\n+        LastRequestTelemetry lastRequestTelemetry = loadLastRequestTelemetryFromCache();\n+\n+        // We did not have a last request object in cache, let's create a new one and derive\n+        // fields from current request where applicable\n+        if (lastRequestTelemetry == null) {\n+            lastRequestTelemetry = new LastRequestTelemetry(currentTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.derive(currentTelemetry);\n+        }\n+\n+        if (isTelemetryLoggedByServer(command, commandResult)) {\n+            // telemetry headers have been sent to token endpoint and logger by sts\n+            // this is the time to reset local telemetry state\n+\n+            // reset silent successful count as we just went to token endpoint\n+            lastRequestTelemetry.resetSilentSuccessCount();\n+\n+            // get the index for the last element of the failed request/error array so we can wipe\n+            // all array elements up to this point (as that data is already in PerRequestTable)\n+            // and doesn't need to be held onto or sent again\n+            final int loggedIndex = getLoggedTelemetryIndex();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 262}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7674e4f071fb68981a80f0423bfaa45b9b835441", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/7674e4f071fb68981a80f0423bfaa45b9b835441", "committedDate": "2020-03-23T19:24:15Z", "message": "Merge branch 'dev' into shahzaibj/server-telemetry-v2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5Nzg3MTQ0", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#pullrequestreview-379787144", "createdAt": "2020-03-23T20:13:46Z", "commit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDoxMzo0NlrOF6Wa0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDoxMzo0NlrOF6Wa0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcyOTA0MA==", "bodyText": "Shouldn't this value be part of the lastRequestTelemetry object (like the associated failedRequest/error arrays).", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396729040", "createdAt": "2020-03-23T20:13:46Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -194,122 +215,143 @@ private IRequestTelemetryCache createLastRequestTelemetryCache(@NonNull final Co\n         return new SharedPreferencesLastRequestTelemetryCache(sharedPreferencesFileManager);\n     }\n \n-    private RequestTelemetry setupLastFromCurrent(@Nullable RequestTelemetry currentTelemetry) {\n-        if (currentTelemetry == null) {\n-            return new RequestTelemetry(Schema.CURRENT_SCHEMA_VERSION, false);\n-        }\n-\n-        RequestTelemetry lastTelemetry = new RequestTelemetry(currentTelemetry.getSchemaVersion(), false);\n-\n-        // grab whatever common fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getCommonTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        // grab whatever platform fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getPlatformTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        return lastTelemetry;\n-    }\n-\n     /**\n      * Flush the telemetry data for the current request to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n      * Removes the telemetry associated to the correlation id from the telemetry map,\n      * and saves it to the cache (SharedPreferences) as the last request telemetry.\n      */\n-    void flush() {\n-        String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        flush(correlationId);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     */\n-    public void flush(final String correlationId) {\n-        final String errorCode = null; // there was no error\n-        flush(correlationId, errorCode);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param baseException exception that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final BaseException baseException) {\n-        flush(correlationId, baseException == null ? null : baseException.getErrorCode());\n-    }\n+    public void flush(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {\n+        final String methodName = \":flush\";\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId      correlation id of the request\n-     * @param acquireTokenResult the result obtained from the acquire token call\n-     */\n-    public void flush(final String correlationId, final AcquireTokenResult acquireTokenResult) {\n-        final String errorCode = TelemetryUtils.errorFromAcquireTokenResult(acquireTokenResult);\n-        flush(correlationId, errorCode);\n-    }\n+        final String correlationId = command.getParameters().getCorrelationId();\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param errorCode     error that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final String errorCode) {\n-        final String methodName = \":flush\";\n         if (mTelemetryMap == null || correlationId == null) {\n             return;\n         }\n \n-        RequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+        CurrentRequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+\n         if (currentTelemetry == null) {\n             return;\n         }\n \n-        RequestTelemetry lastTelemetry = setupLastFromCurrent(currentTelemetry);\n-        lastTelemetry.putTelemetry(Schema.Key.CORRELATION_ID, correlationId);\n-        lastTelemetry.putTelemetry(Schema.Key.ERROR_CODE, errorCode);\n+        // load the last request object from cache\n+        LastRequestTelemetry lastRequestTelemetry = loadLastRequestTelemetryFromCache();\n+\n+        // We did not have a last request object in cache, let's create a new one and derive\n+        // fields from current request where applicable\n+        if (lastRequestTelemetry == null) {\n+            lastRequestTelemetry = new LastRequestTelemetry(currentTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.derive(currentTelemetry);\n+        }\n+\n+        if (isTelemetryLoggedByServer(command, commandResult)) {\n+            // telemetry headers have been sent to token endpoint and logger by sts\n+            // this is the time to reset local telemetry state\n+\n+            // reset silent successful count as we just went to token endpoint\n+            lastRequestTelemetry.resetSilentSuccessCount();\n+\n+            // get the index for the last element of the failed request/error array so we can wipe\n+            // all array elements up to this point (as that data is already in PerRequestTable)\n+            // and doesn't need to be held onto or sent again\n+            final int loggedIndex = getLoggedTelemetryIndex();\n+            // headers have been logged by sts - we don't need to hold on to this data - let's wipe\n+            lastRequestTelemetry.wipeFailedRequestAndErrorForSubList(loggedIndex);\n+        }\n \n-        currentTelemetry.clearTelemetry();\n+        // get the error encountered during execution of this command\n+        final String errorCode = getErrorFromCommandResult(commandResult);\n+\n+        if (errorCode != null) {\n+            // we have an error, let's append it to the list\n+            lastRequestTelemetry.appendFailedRequestWithError(\n+                    currentTelemetry.getApiId(),\n+                    correlationId,\n+                    errorCode);\n+        } else if (command instanceof TokenCommand) {\n+            final ILocalAuthenticationResult localAuthenticationResult =\n+                    (ILocalAuthenticationResult) commandResult.getResult();\n+\n+            if (localAuthenticationResult.isServicedFromCache()) {\n+                // we returned a token from cache, let's increment the silent success count\n+                lastRequestTelemetry.incrementSilentSuccessCount();\n+            }\n+        } // else leave everything as is\n+\n+        // we're done processing telemetry for this command, let's remove it from the map\n         mTelemetryMap.remove(correlationId);\n \n-        if (mLastRequestTelemetryCache == null) {\n+        if (mLastRequestTelemetryCache != null) {\n+            // save the (updated) telemetry object back to telemetry cache\n+            mLastRequestTelemetryCache.saveRequestTelemetryToCache(lastRequestTelemetry);\n+        } else {\n             Logger.warn(\n                     TAG + methodName,\n                     \"Last Request Telemetry Cache object was null. \" +\n                             \"Unable to save request telemetry to cache.\"\n             );\n-        } else if (eligibleToCache(lastTelemetry)) {\n-            // remove old last request telemetry data from cache\n-            mLastRequestTelemetryCache.clearAll();\n-            // save new last request telemetry data to cache\n-            mLastRequestTelemetryCache.saveRequestTelemetryToCache(lastTelemetry);\n         }\n     }\n \n-    // if we don't have api id then we won't save telemetry to cache\n-    // this can happen for commands like the GetDeviceModeCommand\n-    // that are generated via a method for which we don't want telemetry\n-    private boolean eligibleToCache(RequestTelemetry lastTelemetry) {\n-        return !TextUtils.isEmpty(lastTelemetry.getSchemaVersion()) &&\n-                !TextUtils.isEmpty(lastTelemetry.getCommonTelemetry().get(Schema.Key.API_ID));\n+    @Nullable\n+    private String getErrorFromCommandResult(final CommandResult commandResult) {\n+        if (commandResult.getStatus() == CommandResult.ResultStatus.ERROR) {\n+            final BaseException baseException = (BaseException) commandResult.getResult();\n+            return baseException.getErrorCode();\n+        } else if (commandResult.getStatus() == CommandResult.ResultStatus.CANCEL) {\n+            return \"user_cancel\";\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    private boolean isTelemetryLoggedByServer(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {\n+        // This was a local operation - we didn't reach token endpoint and hence telemetry wasn't sent\n+        if (!(command instanceof TokenCommand)) {\n+            return false;\n+        }\n+\n+        if (commandResult.getStatus() == CommandResult.ResultStatus.ERROR) {\n+            BaseException baseException = (BaseException) commandResult.getResult();\n+            if (!(baseException instanceof ServiceException)) {\n+                // Telemetry not logged by server as the exception is a local exception\n+                // (request did not reach token endpoint)\n+                return false;\n+            } else {\n+                final ServiceException serviceException = (ServiceException) baseException;\n+                final int statusCode = serviceException.getHttpStatusCode();\n+                // for these status codes, headers aren't logged by ests\n+                return !(statusCode == ServiceException.DEFAULT_STATUS_CODE ||\n+                        statusCode == 429 ||\n+                        statusCode >= 500);\n+            }\n+        } else if (commandResult.getStatus() == CommandResult.ResultStatus.CANCEL) {\n+            // we did not go to token endpoint\n+            return false;\n+        } else if (commandResult.getStatus() == CommandResult.ResultStatus.COMPLETED) {\n+            if (commandResult.getResult() instanceof ILocalAuthenticationResult) {\n+                final ILocalAuthenticationResult localAuthenticationResult = (ILocalAuthenticationResult) commandResult.getResult();\n+                if (localAuthenticationResult.isServicedFromCache()) {\n+                    // we did not go to token endpoint\n+                    return false;\n+                }\n+            } else {\n+                // command probably wasn't a token command - we should never get here in that case\n+                return false;\n+            }\n+        }\n+\n+        // if we get here that means we went to token endpoint and headers were logged by sts\n+        return true;\n     }\n \n-    String getCurrentTelemetryHeaderString() {\n+    private int getLoggedTelemetryIndex() {\n+        return ((SharedPreferencesLastRequestTelemetryCache) mLastRequestTelemetryCache)\n+                .getLastTelemetryIndexSentInHeaderFromCache();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 369}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5Nzk0NjU0", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#pullrequestreview-379794654", "createdAt": "2020-03-23T20:25:21Z", "commit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDoyNToyMlrOF6Ww1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDoyNToyMlrOF6Ww1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczNDY3OA==", "bodyText": "I suggest keeping a separate copy of this inside the last request object (as same as the arrays).\nLike other values, the telemetry cache should be modified in only one place - flush().", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396734678", "createdAt": "2020-03-23T20:25:22Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -321,17 +363,63 @@ String getCurrentTelemetryHeaderString() {\n             return null;\n         }\n \n-        return currentTelemetry.getCompleteTelemetryHeaderString();\n+        return currentTelemetry.getCompleteHeaderString();\n     }\n \n-    String getLastTelemetryHeaderString() {\n-        RequestTelemetry lastTelemetry = loadLastRequestTelemetryFromCache();\n-\n-        if (lastTelemetry == null) {\n+    private String getLastTelemetryHeaderString() {\n+        if (mLastRequestTelemetryCache == null) {\n             return null;\n         }\n \n-        return lastTelemetry.getCompleteTelemetryHeaderString();\n+        LastRequestTelemetry lastRequestTelemetry = (LastRequestTelemetry) mLastRequestTelemetryCache.getRequestTelemetryFromCache();\n+\n+        if (lastRequestTelemetry == null) {\n+            // we did not have anything in the telemetry cache for the last request\n+            // let's create a new object based on the data available from the current request object\n+            // and return the header string formed via that object\n+            final String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n+            final CurrentRequestTelemetry currentRequestTelemetry = mTelemetryMap.get(correlationId);\n+            lastRequestTelemetry = new LastRequestTelemetry(currentRequestTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.derive(currentRequestTelemetry);\n+            return lastRequestTelemetry.getCompleteHeaderString();\n+        }\n+\n+        // create a copy of the object retrieved from cache\n+        LastRequestTelemetry lastRequestTelemetryCopy = new LastRequestTelemetry(lastRequestTelemetry.getSchemaVersion());\n+        lastRequestTelemetryCopy = (LastRequestTelemetry) lastRequestTelemetryCopy.derive(lastRequestTelemetry);\n+\n+        // failed request data from the object retrieved from cache\n+        final List<FailedRequest> originalFailedRequests = lastRequestTelemetry.getFailedRequests();\n+\n+        // error data from the object retrieved from cache\n+        final List<String> originalErrors = lastRequestTelemetry.getErrors();\n+\n+        // the array index that marks how many elements were included in the header sent in the request\n+        int indexOfFailedRequestsAndErrors = 0;\n+\n+        for (int i = 0; i < originalFailedRequests.size(); i++) {\n+            // there is a limit of 8KB for the payload sent in request headers\n+            // we will be maxing out at 4KB to avoid HTTP 413 errors\n+            // check if we have enough space in the String to store another failed request/error element\n+            // if yes, then add it to the failed request array (for the copy)\n+            if (lastRequestTelemetryCopy.getCompleteHeaderString().length() < 3800) {\n+                lastRequestTelemetryCopy.appendFailedRequestWithError(\n+                        originalFailedRequests.get(indexOfFailedRequestsAndErrors),\n+                        originalErrors.get(indexOfFailedRequestsAndErrors++)\n+                );\n+            } else {\n+                // if there is no room for more data, then break out of this loop\n+                break;\n+            }\n+        }\n+\n+        // tell cache where we stopped adding data to header so we can pick this up in the next\n+        // network request\n+        ((SharedPreferencesLastRequestTelemetryCache) mLastRequestTelemetryCache)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 438}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5Nzk5MDM2", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#pullrequestreview-379799036", "createdAt": "2020-03-23T20:31:38Z", "commit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDozMTozOFrOF6W-iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDozMTozOFrOF6W-iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczODE4Nw==", "bodyText": "nit: the term 'derive', along with the comment above, gave me an impression that we're actually copying everything from CurrentRequestTelemetry.\nShould we rename this to something along the line of 'copySharedValues'?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396738187", "createdAt": "2020-03-23T20:31:38Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -321,17 +363,63 @@ String getCurrentTelemetryHeaderString() {\n             return null;\n         }\n \n-        return currentTelemetry.getCompleteTelemetryHeaderString();\n+        return currentTelemetry.getCompleteHeaderString();\n     }\n \n-    String getLastTelemetryHeaderString() {\n-        RequestTelemetry lastTelemetry = loadLastRequestTelemetryFromCache();\n-\n-        if (lastTelemetry == null) {\n+    private String getLastTelemetryHeaderString() {\n+        if (mLastRequestTelemetryCache == null) {\n             return null;\n         }\n \n-        return lastTelemetry.getCompleteTelemetryHeaderString();\n+        LastRequestTelemetry lastRequestTelemetry = (LastRequestTelemetry) mLastRequestTelemetryCache.getRequestTelemetryFromCache();\n+\n+        if (lastRequestTelemetry == null) {\n+            // we did not have anything in the telemetry cache for the last request\n+            // let's create a new object based on the data available from the current request object\n+            // and return the header string formed via that object\n+            final String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n+            final CurrentRequestTelemetry currentRequestTelemetry = mTelemetryMap.get(correlationId);\n+            lastRequestTelemetry = new LastRequestTelemetry(currentRequestTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.derive(currentRequestTelemetry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 403}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5ODA0NTMw", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#pullrequestreview-379804530", "createdAt": "2020-03-23T20:39:46Z", "commit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDozOTo0NlrOF6XPpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDozOTo0NlrOF6XPpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0MjU2NA==", "bodyText": "Is this being used?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396742564", "createdAt": "2020-03-23T20:39:46Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/IRequestTelemetryCache.java", "diffHunk": "@@ -36,17 +36,31 @@\n     void saveRequestTelemetryToCache(final RequestTelemetry requestTelemetry);\n \n     /**\n-     * Get the telemetry from the cache\n+     * Get the telemetry object from the cache\n      *\n      * @return a {@link RequestTelemetry} object\n      */\n     RequestTelemetry getRequestTelemetryFromCache();\n \n+    /**\n+     * Get the schema version of this telemetry object from cache\n+     *\n+     * @return schema version for telemetry object\n+     */\n+    String getTelemetrySchemaVersionFromCache();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5ODA1NTU1", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#pullrequestreview-379805555", "createdAt": "2020-03-23T20:41:22Z", "commit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDo0MToyMlrOF6XTEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDo0MToyMlrOF6XTEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0MzQ0MA==", "bodyText": "Is this being used?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396743440", "createdAt": "2020-03-23T20:41:22Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/IRequestTelemetryCache.java", "diffHunk": "@@ -36,17 +36,31 @@\n     void saveRequestTelemetryToCache(final RequestTelemetry requestTelemetry);\n \n     /**\n-     * Get the telemetry from the cache\n+     * Get the telemetry object from the cache\n      *\n      * @return a {@link RequestTelemetry} object\n      */\n     RequestTelemetry getRequestTelemetryFromCache();\n \n+    /**\n+     * Get the schema version of this telemetry object from cache\n+     *\n+     * @return schema version for telemetry object\n+     */\n+    String getTelemetrySchemaVersionFromCache();\n+\n+    /**\n+     * Get the header string for telemetry object from cache\n+     *\n+     * @return header string for telemetry\n+     */\n+    String getTelemetryHeaderStringFromCache();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5ODA5NDg0", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#pullrequestreview-379809484", "createdAt": "2020-03-23T20:47:22Z", "commit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5ODEyNzcx", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#pullrequestreview-379812771", "createdAt": "2020-03-23T20:52:21Z", "commit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDo1MjoyMVrOF6Xoow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDo1MjoyMVrOF6Xoow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0ODk2Mw==", "bodyText": "nit: add comment, here and every new fields introduced in this PR.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396748963", "createdAt": "2020-03-23T20:52:21Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/result/LocalAuthenticationResult.java", "diffHunk": "@@ -200,4 +203,14 @@ public void setRefreshTokenAge(final String refreshTokenAge) {\n     public AccessTokenRecord getAccessTokenRecord() {\n         return mAccessTokenRecord;\n     }\n+\n+\n+    public void setServicedFromCache(Boolean servicedFromCache) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a56b8fb0741b57e50108e86cf9a1033b8cb95a63", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/a56b8fb0741b57e50108e86cf9a1033b8cb95a63", "committedDate": "2020-03-24T14:49:19Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "883533cdf0db4acd97a4afcbc847c7e6ed8a5c2b", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/883533cdf0db4acd97a4afcbc847c7e6ed8a5c2b", "committedDate": "2020-03-24T19:01:15Z", "message": "Address more comments\n\nMove away from Index to keep track of how many failed requests were sent to server, instead keep track based on Set of failed request sent and remove those when sent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddedb429ad9ee731d9ce7a8db654f3958c514beb", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/ddedb429ad9ee731d9ce7a8db654f3958c514beb", "committedDate": "2020-03-24T19:01:33Z", "message": "Merge branch 'dev' into shahzaibj/server-telemetry-v2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6aecec9879629f326a8ae484c716e852db2f7f9a", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/6aecec9879629f326a8ae484c716e852db2f7f9a", "committedDate": "2020-03-24T19:25:05Z", "message": "Fix pmd errors"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNjc1MTA5", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#pullrequestreview-380675109", "createdAt": "2020-03-24T20:34:23Z", "commit": {"oid": "6aecec9879629f326a8ae484c716e852db2f7f9a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDozNDoyNFrOF7CBAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDozNDoyNFrOF7CBAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ0MzMyOA==", "bodyText": "How would this work for parallel commands?\nEach of them will have their own copies,  how are we going to resolve the conflict? As of now I believe the last one wins (which would result in missing telemetries, if any of the concurrent commands failed).", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r397443328", "createdAt": "2020-03-24T20:34:24Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -194,122 +221,139 @@ private IRequestTelemetryCache createLastRequestTelemetryCache(@NonNull final Co\n         return new SharedPreferencesLastRequestTelemetryCache(sharedPreferencesFileManager);\n     }\n \n-    private RequestTelemetry setupLastFromCurrent(@Nullable RequestTelemetry currentTelemetry) {\n-        if (currentTelemetry == null) {\n-            return new RequestTelemetry(Schema.CURRENT_SCHEMA_VERSION, false);\n-        }\n-\n-        RequestTelemetry lastTelemetry = new RequestTelemetry(currentTelemetry.getSchemaVersion(), false);\n-\n-        // grab whatever common fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getCommonTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        // grab whatever platform fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getPlatformTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        return lastTelemetry;\n-    }\n-\n     /**\n      * Flush the telemetry data for the current request to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n      * Removes the telemetry associated to the correlation id from the telemetry map,\n      * and saves it to the cache (SharedPreferences) as the last request telemetry.\n      */\n-    void flush() {\n-        String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        flush(correlationId);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     */\n-    public void flush(final String correlationId) {\n-        final String errorCode = null; // there was no error\n-        flush(correlationId, errorCode);\n-    }\n+    public void flush(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {\n+        final String methodName = \":flush\";\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param baseException exception that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final BaseException baseException) {\n-        flush(correlationId, baseException == null ? null : baseException.getErrorCode());\n-    }\n+        final String correlationId = command.getParameters().getCorrelationId();\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId      correlation id of the request\n-     * @param acquireTokenResult the result obtained from the acquire token call\n-     */\n-    public void flush(final String correlationId, final AcquireTokenResult acquireTokenResult) {\n-        final String errorCode = TelemetryUtils.errorFromAcquireTokenResult(acquireTokenResult);\n-        flush(correlationId, errorCode);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param errorCode     error that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final String errorCode) {\n-        final String methodName = \":flush\";\n         if (mTelemetryMap == null || correlationId == null) {\n             return;\n         }\n \n-        RequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+        CurrentRequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+\n         if (currentTelemetry == null) {\n             return;\n         }\n \n-        RequestTelemetry lastTelemetry = setupLastFromCurrent(currentTelemetry);\n-        lastTelemetry.putTelemetry(Schema.Key.CORRELATION_ID, correlationId);\n-        lastTelemetry.putTelemetry(Schema.Key.ERROR_CODE, errorCode);\n+        // load the last request object from cache\n+        LastRequestTelemetry lastRequestTelemetry = loadLastRequestTelemetryFromCache();\n \n-        currentTelemetry.clearTelemetry();\n+        // We did not have a last request object in cache, let's create a new one and copySharedValues\n+        // fields from current request where applicable\n+        if (lastRequestTelemetry == null) {\n+            lastRequestTelemetry = new LastRequestTelemetry(currentTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.copySharedValues(currentTelemetry);\n+        }\n+\n+        if (isTelemetryLoggedByServer(command, commandResult)) {\n+            // telemetry headers have been sent to token endpoint and logger by sts\n+            // this is the time to reset local telemetry state\n+\n+            // reset silent successful count as we just went to token endpoint\n+            lastRequestTelemetry.resetSilentSuccessCount();\n+\n+            // get the failed request set for this request. This includes all failed request\n+            // data that has been sent to STS in this request.\n+            Set<FailedRequest> failedRequestSentSet = mSentFailedRequests.get(correlationId);\n+\n+            // headers have been logged by sts - we don't need to hold on to this data - let's wipe\n+            lastRequestTelemetry.wipeFailedRequestAndErrorForSubList(failedRequestSentSet);\n+        }\n+\n+        // get the error encountered during execution of this command\n+        final String errorCode = getErrorFromCommandResult(commandResult);\n+\n+        if (errorCode != null) {\n+            // we have an error, let's append it to the list\n+            lastRequestTelemetry.appendFailedRequest(\n+                    currentTelemetry.getApiId(),\n+                    correlationId,\n+                    errorCode);\n+        } else if (command instanceof TokenCommand) {\n+            final ILocalAuthenticationResult localAuthenticationResult =\n+                    (ILocalAuthenticationResult) commandResult.getResult();\n+\n+            if (localAuthenticationResult.isServicedFromCache()) {\n+                // we returned a token from cache, let's increment the silent success count\n+                lastRequestTelemetry.incrementSilentSuccessCount();\n+            }\n+        } // else leave everything as is\n+\n+        // we're done processing telemetry for this command, let's remove it from the map\n         mTelemetryMap.remove(correlationId);\n+        mSentFailedRequests.remove(correlationId);\n \n-        if (mLastRequestTelemetryCache == null) {\n+        if (mLastRequestTelemetryCache != null) {\n+            // save the (updated) telemetry object back to telemetry cache\n+            mLastRequestTelemetryCache.saveRequestTelemetryToCache(lastRequestTelemetry);\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6aecec9879629f326a8ae484c716e852db2f7f9a"}, "originalPosition": 309}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c05a8102c3c4218981eab9abc9ec93d8b4131e79", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/c05a8102c3c4218981eab9abc9ec93d8b4131e79", "committedDate": "2020-03-24T23:34:09Z", "message": "Make flush and getHeaderString synchronized"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec014b9efe3f649adb5416553e4ad33b3db3c15b", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/ec014b9efe3f649adb5416553e4ad33b3db3c15b", "committedDate": "2020-03-24T23:37:40Z", "message": "Merge branch 'dev' into shahzaibj/server-telemetry-v2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27cd1c6f464e711f79d90039670d20547dca8c0d", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/27cd1c6f464e711f79d90039670d20547dca8c0d", "committedDate": "2020-03-25T01:58:50Z", "message": "Merge branch 'dev' into shahzaibj/server-telemetry-v2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNDAwMTk2", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#pullrequestreview-381400196", "createdAt": "2020-03-25T17:57:42Z", "commit": {"oid": "27cd1c6f464e711f79d90039670d20547dca8c0d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNjE5MzAz", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#pullrequestreview-381619303", "createdAt": "2020-03-25T23:58:14Z", "commit": {"oid": "27cd1c6f464e711f79d90039670d20547dca8c0d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1607, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}