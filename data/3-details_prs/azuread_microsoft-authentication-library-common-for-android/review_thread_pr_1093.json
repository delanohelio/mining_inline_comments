{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5NzAyNTI0", "number": 1093, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDoyNDoxOFrOEyEsoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjoxNTo0OFrOEyb30Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTQxMjE3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/exception/BrokerCommunicationException.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDoyNDoxOVrOHog-CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzo1MjoxOVrOHoqesQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI0NTI1Ng==", "bodyText": "If this is going to be communicated, let's make it a String, so we aren't sharing any types that aren't constructible from the base platform.  Basically, that means any primitive, packaged (String, Integer, Map, List, Set...) or combination of only that.  And in this mechanism, we should specify what kinds of commands COULD be supported, so it might need to be a richer structure than just String, so that we can teach our clients how to respond to a failed attempt.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512245256", "createdAt": "2020-10-26T20:24:19Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/exception/BrokerCommunicationException.java", "diffHunk": "@@ -23,19 +23,32 @@\n \n package com.microsoft.identity.common.exception;\n \n+import lombok.Getter;\n+\n /**\n  * An exception that represents an error where MSAL cannot reach Broker (i.e. through Bind Service or AccountManager).\n  */\n public class BrokerCommunicationException extends BaseException {\n     private static final long serialVersionUID = 4959278068787428329L;\n \n+    public enum Type {\n+        OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE,\n+        OPERATION_NOT_SUPPORTED_ON_SERVER_SIDE,\n+        CONNECTION_ERROR\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5NTg5OA==", "bodyText": "We're not communicating this to the other side of IPC. This is more or less to limit the scope of, and categorize the error code for BrokerCommunicationException.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512395898", "createdAt": "2020-10-27T03:31:04Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/exception/BrokerCommunicationException.java", "diffHunk": "@@ -23,19 +23,32 @@\n \n package com.microsoft.identity.common.exception;\n \n+import lombok.Getter;\n+\n /**\n  * An exception that represents an error where MSAL cannot reach Broker (i.e. through Bind Service or AccountManager).\n  */\n public class BrokerCommunicationException extends BaseException {\n     private static final long serialVersionUID = 4959278068787428329L;\n \n+    public enum Type {\n+        OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE,\n+        OPERATION_NOT_SUPPORTED_ON_SERVER_SIDE,\n+        CONNECTION_ERROR\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI0NTI1Ng=="}, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQwMTA3Mw==", "bodyText": "Added \"StrategyType\" into BrokerCommunicationException's argument list (so that it prints more details into the log).", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512401073", "createdAt": "2020-10-27T03:52:19Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/exception/BrokerCommunicationException.java", "diffHunk": "@@ -23,19 +23,32 @@\n \n package com.microsoft.identity.common.exception;\n \n+import lombok.Getter;\n+\n /**\n  * An exception that represents an error where MSAL cannot reach Broker (i.e. through Bind Service or AccountManager).\n  */\n public class BrokerCommunicationException extends BaseException {\n     private static final long serialVersionUID = 4959278068787428329L;\n \n+    public enum Type {\n+        OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE,\n+        OPERATION_NOT_SUPPORTED_ON_SERVER_SIDE,\n+        CONNECTION_ERROR\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI0NTI1Ng=="}, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTQ1MDEzOnYy", "diffSide": "RIGHT", "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDozNToyMFrOHohVbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDozNToyMFrOHohVbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1MTI0Nw==", "bodyText": "You don't need to check both, you know that they're equal...", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512251247", "createdAt": "2020-10-26T20:35:20Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java", "diffHunk": "@@ -0,0 +1,178 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc;\n+\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.BROKER_GET_KEY_FROM_INACTIVE_BROKER;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_ACQUIRE_TOKEN_SILENT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_ACCOUNTS;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_DEVICE_MODE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_HELLO;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_REMOVE_ACCOUNT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_SIGN_OUT_FROM_SHARED_DEVICE;\n+\n+/**\n+ * IMPORTANT: This class must cover EVERY {@link com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation}.\n+ */\n+public abstract class IpcStrategyTests {\n+\n+    abstract IIpcStrategy getStrategy();\n+\n+    @Test\n+    public void testMsalHello() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    @Test\n+    public void testMsalGetIntentForInteractiveRequest() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST));\n+    }\n+\n+    @Test\n+    public void testMsalAcquireTokenSilent() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_ACQUIRE_TOKEN_SILENT));\n+    }\n+\n+    @Test\n+    public void testMsalGetAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_ACCOUNTS));\n+    }\n+\n+    @Test\n+    public void testMsalRemoveAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_REMOVE_ACCOUNT));\n+    }\n+\n+    @Test\n+    public void testMsalGetDeviceMode() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_DEVICE_MODE));\n+    }\n+\n+    @Test\n+    public void testGetCurrentAccountInSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testMsalSignOutFromSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_SIGN_OUT_FROM_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testBrokerGetKeyFromInactiveBroker() {\n+        testOperationNotSupportedOnClientSide(getMockRequestBundle(BROKER_GET_KEY_FROM_INACTIVE_BROKER));\n+    }\n+\n+    @Test\n+    public void testIpcFailed() {\n+        testIpcConnectionFailed(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    protected BrokerOperationBundle getMockRequestBundle(final BrokerOperationBundle.Operation operation) {\n+        final Bundle bundle = new Bundle();\n+        bundle.putBoolean(\"REQUEST_BUNDLE\", true);\n+\n+        return new BrokerOperationBundle(operation, \"MOCK_BROKER\", bundle);\n+    }\n+\n+    public static Bundle getMockIpcResultBundle() {\n+        final Bundle bundle = new Bundle();\n+        bundle.putBoolean(\"MOCK_SUCCESS\", true);\n+        return bundle;\n+    }\n+\n+    protected void testOperationSucceeds(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            final Bundle resultBundle = strategy.communicateToBroker(bundle);\n+            Assert.assertTrue(validateResultBundle(resultBundle, getMockIpcResultBundle()));\n+        } catch (BaseException e) {\n+            Assert.fail(\"Exception is not expected.\");\n+        }\n+    }\n+\n+    protected void testOperationNotSupportedOnClientSide(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            strategy.communicateToBroker(bundle);\n+            Assert.fail(\"Operation should fail.\");\n+        } catch (BaseException e) {\n+            Assert.assertTrue(e instanceof BrokerCommunicationException);\n+            Assert.assertSame(((BrokerCommunicationException) e).getType(), OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE);\n+        }\n+    }\n+\n+    protected void testIpcConnectionFailed(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            strategy.communicateToBroker(bundle);\n+            Assert.fail(\"Operation should fail.\");\n+        } catch (BaseException e) {\n+            Assert.assertTrue(e instanceof BrokerCommunicationException);\n+            Assert.assertSame(((BrokerCommunicationException) e).getType(), CONNECTION_ERROR);\n+        }\n+    }\n+\n+    private boolean validateResultBundle(@NonNull final Bundle resultBundle,\n+                                         @NonNull final Bundle expectedBundle) {\n+\n+        if (resultBundle.size() != expectedBundle.size()) {\n+            return false;\n+        }\n+\n+        for (final String key : resultBundle.keySet()) {\n+            final Object objA = expectedBundle.get(key);\n+            if (objA == null) {\n+                return false;\n+            }\n+\n+            final Object objB = resultBundle.get(key);\n+            if (!objA.getClass().equals(objB.getClass())) {\n+                return false;\n+            }\n+\n+            if (objA instanceof Bundle && objB instanceof Bundle) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTQ1ODQ5OnYy", "diffSide": "RIGHT", "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDozNzoxOFrOHohaPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDozNzoxOFrOHohaPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1MjQ3OA==", "bodyText": "what if objB is null?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512252478", "createdAt": "2020-10-26T20:37:18Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java", "diffHunk": "@@ -0,0 +1,178 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc;\n+\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.BROKER_GET_KEY_FROM_INACTIVE_BROKER;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_ACQUIRE_TOKEN_SILENT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_ACCOUNTS;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_DEVICE_MODE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_HELLO;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_REMOVE_ACCOUNT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_SIGN_OUT_FROM_SHARED_DEVICE;\n+\n+/**\n+ * IMPORTANT: This class must cover EVERY {@link com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation}.\n+ */\n+public abstract class IpcStrategyTests {\n+\n+    abstract IIpcStrategy getStrategy();\n+\n+    @Test\n+    public void testMsalHello() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    @Test\n+    public void testMsalGetIntentForInteractiveRequest() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST));\n+    }\n+\n+    @Test\n+    public void testMsalAcquireTokenSilent() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_ACQUIRE_TOKEN_SILENT));\n+    }\n+\n+    @Test\n+    public void testMsalGetAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_ACCOUNTS));\n+    }\n+\n+    @Test\n+    public void testMsalRemoveAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_REMOVE_ACCOUNT));\n+    }\n+\n+    @Test\n+    public void testMsalGetDeviceMode() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_DEVICE_MODE));\n+    }\n+\n+    @Test\n+    public void testGetCurrentAccountInSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testMsalSignOutFromSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_SIGN_OUT_FROM_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testBrokerGetKeyFromInactiveBroker() {\n+        testOperationNotSupportedOnClientSide(getMockRequestBundle(BROKER_GET_KEY_FROM_INACTIVE_BROKER));\n+    }\n+\n+    @Test\n+    public void testIpcFailed() {\n+        testIpcConnectionFailed(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    protected BrokerOperationBundle getMockRequestBundle(final BrokerOperationBundle.Operation operation) {\n+        final Bundle bundle = new Bundle();\n+        bundle.putBoolean(\"REQUEST_BUNDLE\", true);\n+\n+        return new BrokerOperationBundle(operation, \"MOCK_BROKER\", bundle);\n+    }\n+\n+    public static Bundle getMockIpcResultBundle() {\n+        final Bundle bundle = new Bundle();\n+        bundle.putBoolean(\"MOCK_SUCCESS\", true);\n+        return bundle;\n+    }\n+\n+    protected void testOperationSucceeds(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            final Bundle resultBundle = strategy.communicateToBroker(bundle);\n+            Assert.assertTrue(validateResultBundle(resultBundle, getMockIpcResultBundle()));\n+        } catch (BaseException e) {\n+            Assert.fail(\"Exception is not expected.\");\n+        }\n+    }\n+\n+    protected void testOperationNotSupportedOnClientSide(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            strategy.communicateToBroker(bundle);\n+            Assert.fail(\"Operation should fail.\");\n+        } catch (BaseException e) {\n+            Assert.assertTrue(e instanceof BrokerCommunicationException);\n+            Assert.assertSame(((BrokerCommunicationException) e).getType(), OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE);\n+        }\n+    }\n+\n+    protected void testIpcConnectionFailed(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            strategy.communicateToBroker(bundle);\n+            Assert.fail(\"Operation should fail.\");\n+        } catch (BaseException e) {\n+            Assert.assertTrue(e instanceof BrokerCommunicationException);\n+            Assert.assertSame(((BrokerCommunicationException) e).getType(), CONNECTION_ERROR);\n+        }\n+    }\n+\n+    private boolean validateResultBundle(@NonNull final Bundle resultBundle,\n+                                         @NonNull final Bundle expectedBundle) {\n+\n+        if (resultBundle.size() != expectedBundle.size()) {\n+            return false;\n+        }\n+\n+        for (final String key : resultBundle.keySet()) {\n+            final Object objA = expectedBundle.get(key);\n+            if (objA == null) {\n+                return false;\n+            }\n+\n+            final Object objB = resultBundle.get(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTQ3MTcwOnYy", "diffSide": "RIGHT", "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo0MTowMFrOHohiDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo0MTowMFrOHohiDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1NDQ3Nw==", "bodyText": "OnjectUtils.equals...", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512254477", "createdAt": "2020-10-26T20:41:00Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java", "diffHunk": "@@ -0,0 +1,178 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc;\n+\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.BROKER_GET_KEY_FROM_INACTIVE_BROKER;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_ACQUIRE_TOKEN_SILENT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_ACCOUNTS;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_DEVICE_MODE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_HELLO;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_REMOVE_ACCOUNT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_SIGN_OUT_FROM_SHARED_DEVICE;\n+\n+/**\n+ * IMPORTANT: This class must cover EVERY {@link com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation}.\n+ */\n+public abstract class IpcStrategyTests {\n+\n+    abstract IIpcStrategy getStrategy();\n+\n+    @Test\n+    public void testMsalHello() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    @Test\n+    public void testMsalGetIntentForInteractiveRequest() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST));\n+    }\n+\n+    @Test\n+    public void testMsalAcquireTokenSilent() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_ACQUIRE_TOKEN_SILENT));\n+    }\n+\n+    @Test\n+    public void testMsalGetAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_ACCOUNTS));\n+    }\n+\n+    @Test\n+    public void testMsalRemoveAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_REMOVE_ACCOUNT));\n+    }\n+\n+    @Test\n+    public void testMsalGetDeviceMode() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_DEVICE_MODE));\n+    }\n+\n+    @Test\n+    public void testGetCurrentAccountInSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testMsalSignOutFromSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_SIGN_OUT_FROM_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testBrokerGetKeyFromInactiveBroker() {\n+        testOperationNotSupportedOnClientSide(getMockRequestBundle(BROKER_GET_KEY_FROM_INACTIVE_BROKER));\n+    }\n+\n+    @Test\n+    public void testIpcFailed() {\n+        testIpcConnectionFailed(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    protected BrokerOperationBundle getMockRequestBundle(final BrokerOperationBundle.Operation operation) {\n+        final Bundle bundle = new Bundle();\n+        bundle.putBoolean(\"REQUEST_BUNDLE\", true);\n+\n+        return new BrokerOperationBundle(operation, \"MOCK_BROKER\", bundle);\n+    }\n+\n+    public static Bundle getMockIpcResultBundle() {\n+        final Bundle bundle = new Bundle();\n+        bundle.putBoolean(\"MOCK_SUCCESS\", true);\n+        return bundle;\n+    }\n+\n+    protected void testOperationSucceeds(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            final Bundle resultBundle = strategy.communicateToBroker(bundle);\n+            Assert.assertTrue(validateResultBundle(resultBundle, getMockIpcResultBundle()));\n+        } catch (BaseException e) {\n+            Assert.fail(\"Exception is not expected.\");\n+        }\n+    }\n+\n+    protected void testOperationNotSupportedOnClientSide(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            strategy.communicateToBroker(bundle);\n+            Assert.fail(\"Operation should fail.\");\n+        } catch (BaseException e) {\n+            Assert.assertTrue(e instanceof BrokerCommunicationException);\n+            Assert.assertSame(((BrokerCommunicationException) e).getType(), OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE);\n+        }\n+    }\n+\n+    protected void testIpcConnectionFailed(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            strategy.communicateToBroker(bundle);\n+            Assert.fail(\"Operation should fail.\");\n+        } catch (BaseException e) {\n+            Assert.assertTrue(e instanceof BrokerCommunicationException);\n+            Assert.assertSame(((BrokerCommunicationException) e).getType(), CONNECTION_ERROR);\n+        }\n+    }\n+\n+    private boolean validateResultBundle(@NonNull final Bundle resultBundle,\n+                                         @NonNull final Bundle expectedBundle) {\n+\n+        if (resultBundle.size() != expectedBundle.size()) {\n+            return false;\n+        }\n+\n+        for (final String key : resultBundle.keySet()) {\n+            final Object objA = expectedBundle.get(key);\n+            if (objA == null) {\n+                return false;\n+            }\n+\n+            final Object objB = resultBundle.get(key);\n+            if (!objA.getClass().equals(objB.getClass())) {\n+                return false;\n+            }\n+\n+            if (objA instanceof Bundle && objB instanceof Bundle) {\n+                return validateResultBundle((Bundle) objA, (Bundle) objB);\n+            } else if (!objA.equals(objB)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTQ3NTMyOnYy", "diffSide": "RIGHT", "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo0MjowNFrOHohkQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNjoxNToyN1rOHosxrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1NTA0MA==", "bodyText": "Should this go into a BundleUtils.java in testutils in common?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512255040", "createdAt": "2020-10-26T20:42:04Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java", "diffHunk": "@@ -0,0 +1,178 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc;\n+\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.BROKER_GET_KEY_FROM_INACTIVE_BROKER;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_ACQUIRE_TOKEN_SILENT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_ACCOUNTS;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_DEVICE_MODE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_HELLO;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_REMOVE_ACCOUNT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_SIGN_OUT_FROM_SHARED_DEVICE;\n+\n+/**\n+ * IMPORTANT: This class must cover EVERY {@link com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation}.\n+ */\n+public abstract class IpcStrategyTests {\n+\n+    abstract IIpcStrategy getStrategy();\n+\n+    @Test\n+    public void testMsalHello() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    @Test\n+    public void testMsalGetIntentForInteractiveRequest() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST));\n+    }\n+\n+    @Test\n+    public void testMsalAcquireTokenSilent() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_ACQUIRE_TOKEN_SILENT));\n+    }\n+\n+    @Test\n+    public void testMsalGetAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_ACCOUNTS));\n+    }\n+\n+    @Test\n+    public void testMsalRemoveAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_REMOVE_ACCOUNT));\n+    }\n+\n+    @Test\n+    public void testMsalGetDeviceMode() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_DEVICE_MODE));\n+    }\n+\n+    @Test\n+    public void testGetCurrentAccountInSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testMsalSignOutFromSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_SIGN_OUT_FROM_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testBrokerGetKeyFromInactiveBroker() {\n+        testOperationNotSupportedOnClientSide(getMockRequestBundle(BROKER_GET_KEY_FROM_INACTIVE_BROKER));\n+    }\n+\n+    @Test\n+    public void testIpcFailed() {\n+        testIpcConnectionFailed(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    protected BrokerOperationBundle getMockRequestBundle(final BrokerOperationBundle.Operation operation) {\n+        final Bundle bundle = new Bundle();\n+        bundle.putBoolean(\"REQUEST_BUNDLE\", true);\n+\n+        return new BrokerOperationBundle(operation, \"MOCK_BROKER\", bundle);\n+    }\n+\n+    public static Bundle getMockIpcResultBundle() {\n+        final Bundle bundle = new Bundle();\n+        bundle.putBoolean(\"MOCK_SUCCESS\", true);\n+        return bundle;\n+    }\n+\n+    protected void testOperationSucceeds(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            final Bundle resultBundle = strategy.communicateToBroker(bundle);\n+            Assert.assertTrue(validateResultBundle(resultBundle, getMockIpcResultBundle()));\n+        } catch (BaseException e) {\n+            Assert.fail(\"Exception is not expected.\");\n+        }\n+    }\n+\n+    protected void testOperationNotSupportedOnClientSide(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            strategy.communicateToBroker(bundle);\n+            Assert.fail(\"Operation should fail.\");\n+        } catch (BaseException e) {\n+            Assert.assertTrue(e instanceof BrokerCommunicationException);\n+            Assert.assertSame(((BrokerCommunicationException) e).getType(), OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE);\n+        }\n+    }\n+\n+    protected void testIpcConnectionFailed(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            strategy.communicateToBroker(bundle);\n+            Assert.fail(\"Operation should fail.\");\n+        } catch (BaseException e) {\n+            Assert.assertTrue(e instanceof BrokerCommunicationException);\n+            Assert.assertSame(((BrokerCommunicationException) e).getType(), CONNECTION_ERROR);\n+        }\n+    }\n+\n+    private boolean validateResultBundle(@NonNull final Bundle resultBundle,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQzODcwMg==", "bodyText": "added testImplementation dependency to testutils and hell break loose.. will do that later.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512438702", "createdAt": "2020-10-27T06:15:27Z", "author": {"login": "rpdome"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java", "diffHunk": "@@ -0,0 +1,178 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc;\n+\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.BROKER_GET_KEY_FROM_INACTIVE_BROKER;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_ACQUIRE_TOKEN_SILENT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_ACCOUNTS;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_DEVICE_MODE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_HELLO;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_REMOVE_ACCOUNT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_SIGN_OUT_FROM_SHARED_DEVICE;\n+\n+/**\n+ * IMPORTANT: This class must cover EVERY {@link com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation}.\n+ */\n+public abstract class IpcStrategyTests {\n+\n+    abstract IIpcStrategy getStrategy();\n+\n+    @Test\n+    public void testMsalHello() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    @Test\n+    public void testMsalGetIntentForInteractiveRequest() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST));\n+    }\n+\n+    @Test\n+    public void testMsalAcquireTokenSilent() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_ACQUIRE_TOKEN_SILENT));\n+    }\n+\n+    @Test\n+    public void testMsalGetAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_ACCOUNTS));\n+    }\n+\n+    @Test\n+    public void testMsalRemoveAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_REMOVE_ACCOUNT));\n+    }\n+\n+    @Test\n+    public void testMsalGetDeviceMode() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_DEVICE_MODE));\n+    }\n+\n+    @Test\n+    public void testGetCurrentAccountInSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testMsalSignOutFromSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_SIGN_OUT_FROM_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testBrokerGetKeyFromInactiveBroker() {\n+        testOperationNotSupportedOnClientSide(getMockRequestBundle(BROKER_GET_KEY_FROM_INACTIVE_BROKER));\n+    }\n+\n+    @Test\n+    public void testIpcFailed() {\n+        testIpcConnectionFailed(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    protected BrokerOperationBundle getMockRequestBundle(final BrokerOperationBundle.Operation operation) {\n+        final Bundle bundle = new Bundle();\n+        bundle.putBoolean(\"REQUEST_BUNDLE\", true);\n+\n+        return new BrokerOperationBundle(operation, \"MOCK_BROKER\", bundle);\n+    }\n+\n+    public static Bundle getMockIpcResultBundle() {\n+        final Bundle bundle = new Bundle();\n+        bundle.putBoolean(\"MOCK_SUCCESS\", true);\n+        return bundle;\n+    }\n+\n+    protected void testOperationSucceeds(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            final Bundle resultBundle = strategy.communicateToBroker(bundle);\n+            Assert.assertTrue(validateResultBundle(resultBundle, getMockIpcResultBundle()));\n+        } catch (BaseException e) {\n+            Assert.fail(\"Exception is not expected.\");\n+        }\n+    }\n+\n+    protected void testOperationNotSupportedOnClientSide(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            strategy.communicateToBroker(bundle);\n+            Assert.fail(\"Operation should fail.\");\n+        } catch (BaseException e) {\n+            Assert.assertTrue(e instanceof BrokerCommunicationException);\n+            Assert.assertSame(((BrokerCommunicationException) e).getType(), OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE);\n+        }\n+    }\n+\n+    protected void testIpcConnectionFailed(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            strategy.communicateToBroker(bundle);\n+            Assert.fail(\"Operation should fail.\");\n+        } catch (BaseException e) {\n+            Assert.assertTrue(e instanceof BrokerCommunicationException);\n+            Assert.assertSame(((BrokerCommunicationException) e).getType(), CONNECTION_ERROR);\n+        }\n+    }\n+\n+    private boolean validateResultBundle(@NonNull final Bundle resultBundle,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1NTA0MA=="}, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTQ4OTY0OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/BoundServiceClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo0NjoxMFrOHohs3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzozODozNFrOHoqRgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1NzI0Nw==", "bodyText": "Here, can we discover what operations are supported?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512257247", "createdAt": "2020-10-26T20:46:10Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/BoundServiceClient.java", "diffHunk": "@@ -127,15 +129,16 @@ public BoundServiceClient(@NonNull final Context context,\n      * @param targetServicePackageName Package name of the app this client will talk to.\n      */\n     protected @NonNull T connect(@NonNull final String targetServicePackageName)\n-            throws ClientException, InterruptedException, TimeoutException, ExecutionException {\n+            throws BrokerCommunicationException, InterruptedException, TimeoutException, ExecutionException {\n         final String methodName = \":connect\";\n \n         if (!isBoundServiceSupported(targetServicePackageName)) {\n             final String errorMessage = \"Bound service is not supported.\";\n             Logger.info(TAG + methodName, errorMessage);\n-            throw new ClientException(\n-                    BOUND_SERVICE_UNAVAILABLE_OR_NOT_SUPPORTED,\n-                    errorMessage);\n+            throw new BrokerCommunicationException(\n+                    OPERATION_NOT_SUPPORTED_ON_SERVER_SIDE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5NzY5OA==", "bodyText": "Not at this point. In this layer we're focusing on Bound Service only (and it failed).", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512397698", "createdAt": "2020-10-27T03:38:34Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/BoundServiceClient.java", "diffHunk": "@@ -127,15 +129,16 @@ public BoundServiceClient(@NonNull final Context context,\n      * @param targetServicePackageName Package name of the app this client will talk to.\n      */\n     protected @NonNull T connect(@NonNull final String targetServicePackageName)\n-            throws ClientException, InterruptedException, TimeoutException, ExecutionException {\n+            throws BrokerCommunicationException, InterruptedException, TimeoutException, ExecutionException {\n         final String methodName = \":connect\";\n \n         if (!isBoundServiceSupported(targetServicePackageName)) {\n             final String errorMessage = \"Bound service is not supported.\";\n             Logger.info(TAG + methodName, errorMessage);\n-            throw new ClientException(\n-                    BOUND_SERVICE_UNAVAILABLE_OR_NOT_SUPPORTED,\n-                    errorMessage);\n+            throw new BrokerCommunicationException(\n+                    OPERATION_NOT_SUPPORTED_ON_SERVER_SIDE,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1NzI0Nw=="}, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTQ5Mjg2OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/BrokerAccountServiceClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo0NzoxNlrOHohu5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzoxMzo1MFrOHop5ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1Nzc2NQ==", "bodyText": "This is a strange message.  How would you bind the wrong service?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512257765", "createdAt": "2020-10-26T20:47:16Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/BrokerAccountServiceClient.java", "diffHunk": "@@ -82,14 +85,16 @@ public BrokerAccountServiceClient(@NonNull final Context context,\n     @Override\n     public @Nullable Bundle performOperationInternal(@NonNull BrokerOperationBundle brokerOperationBundle,\n                                                      @NonNull IBrokerAccountService brokerAccountService)\n-            throws RemoteException, BaseException {\n+            throws RemoteException, BrokerCommunicationException {\n         final Bundle inputBundle = brokerOperationBundle.getBundle();\n         switch (brokerOperationBundle.getOperation()) {\n             case BROKER_GET_KEY_FROM_INACTIVE_BROKER:\n                 return brokerAccountService.getInactiveBrokerKey(inputBundle);\n \n             default:\n-                throw new BaseException(\"Operation not supported. Wrong service bound.\");\n+                throw new BrokerCommunicationException(OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE,\n+                        \"Operation not supported. Wrong service bound.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MTUyNQ==", "bodyText": "It means you're using the wrong BoundServiceClient. will change to Wrong BoundServiceClient used.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512391525", "createdAt": "2020-10-27T03:13:50Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/BrokerAccountServiceClient.java", "diffHunk": "@@ -82,14 +85,16 @@ public BrokerAccountServiceClient(@NonNull final Context context,\n     @Override\n     public @Nullable Bundle performOperationInternal(@NonNull BrokerOperationBundle brokerOperationBundle,\n                                                      @NonNull IBrokerAccountService brokerAccountService)\n-            throws RemoteException, BaseException {\n+            throws RemoteException, BrokerCommunicationException {\n         final Bundle inputBundle = brokerOperationBundle.getBundle();\n         switch (brokerOperationBundle.getOperation()) {\n             case BROKER_GET_KEY_FROM_INACTIVE_BROKER:\n                 return brokerAccountService.getInactiveBrokerKey(inputBundle);\n \n             default:\n-                throw new BaseException(\"Operation not supported. Wrong service bound.\");\n+                throw new BrokerCommunicationException(OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE,\n+                        \"Operation not supported. Wrong service bound.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1Nzc2NQ=="}, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTUwMDg5OnYy", "diffSide": "RIGHT", "path": "common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo0OToyN1rOHohzpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNjoyODo0M1rOHotCiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1ODk4MQ==", "bodyText": "Here we want the first one to be executed and the second not to be interacted with at all, right?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512258981", "createdAt": "2020-10-26T20:49:27Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java", "diffHunk": "@@ -0,0 +1,300 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.brokeroperationexecutor;\n+\n+import android.os.Build;\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BrokerOperationExecutor;\n+import com.microsoft.identity.common.internal.telemetry.events.ApiEndEvent;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(sdk = {Build.VERSION_CODES.N})\n+public class BrokerOperationExecutorTests {\n+\n+    final String CORRUPTED_BUNDLE_ERROR_CODE = \"corrupted_bundle\";\n+\n+    // No strategy is provided. executor should fail.\n+    @Test\n+    public void testZeroStrategy() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithSuccessResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithFailureResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithFailureResult());\n+\n+        expectSuccessResultWithFalse(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a corrupted result.\n+    @Test\n+    public void testOneStrategyWithCorruptedResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithCorruptedResult());\n+\n+        expectCorruptedBundleException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it fails with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testOneStrategyWithBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 2 strategies and both succeed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ0MzAxNw==", "bodyText": "yes. removing this though... I think it's kind of pointless. other test cases should be enough to cover 'strategy order'", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512443017", "createdAt": "2020-10-27T06:28:43Z", "author": {"login": "rpdome"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java", "diffHunk": "@@ -0,0 +1,300 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.brokeroperationexecutor;\n+\n+import android.os.Build;\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BrokerOperationExecutor;\n+import com.microsoft.identity.common.internal.telemetry.events.ApiEndEvent;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(sdk = {Build.VERSION_CODES.N})\n+public class BrokerOperationExecutorTests {\n+\n+    final String CORRUPTED_BUNDLE_ERROR_CODE = \"corrupted_bundle\";\n+\n+    // No strategy is provided. executor should fail.\n+    @Test\n+    public void testZeroStrategy() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithSuccessResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithFailureResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithFailureResult());\n+\n+        expectSuccessResultWithFalse(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a corrupted result.\n+    @Test\n+    public void testOneStrategyWithCorruptedResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithCorruptedResult());\n+\n+        expectCorruptedBundleException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it fails with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testOneStrategyWithBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 2 strategies and both succeed.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1ODk4MQ=="}, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTUwOTA5OnYy", "diffSide": "RIGHT", "path": "common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo1MTozOVrOHoh4cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNTo0Nzo0NFrOHosR7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MDIwOA==", "bodyText": "Should we distinguish \"failure of strategy\" from \"failure to communicate\" and make certain that this just does not execute the second one after the first attempt succeeds with false?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512260208", "createdAt": "2020-10-26T20:51:39Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java", "diffHunk": "@@ -0,0 +1,300 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.brokeroperationexecutor;\n+\n+import android.os.Build;\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BrokerOperationExecutor;\n+import com.microsoft.identity.common.internal.telemetry.events.ApiEndEvent;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(sdk = {Build.VERSION_CODES.N})\n+public class BrokerOperationExecutorTests {\n+\n+    final String CORRUPTED_BUNDLE_ERROR_CODE = \"corrupted_bundle\";\n+\n+    // No strategy is provided. executor should fail.\n+    @Test\n+    public void testZeroStrategy() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithSuccessResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithFailureResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithFailureResult());\n+\n+        expectSuccessResultWithFalse(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a corrupted result.\n+    @Test\n+    public void testOneStrategyWithCorruptedResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithCorruptedResult());\n+\n+        expectCorruptedBundleException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it fails with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testOneStrategyWithBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 2 strategies and both succeed.\n+    @Test\n+    public void testTwoSuccessStrategies() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one fails with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneThrowingBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one fails.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQzMDE2Ng==", "bodyText": "In this test suite, there are 4 possible outcomes.\n\nGets a bundle back, the bundle contains a valid result. The result returns true.\nGets a bundle back, the bundle contains a valid result. The result returns false.\nGets a bundle back, the bundle is invalid. (this is probably what you referred to as 'failure of Strategy')\nFails to get the bundle. (Failure to communicate)\n\nI think I used bad wording here. This test case refers to 2)", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512430166", "createdAt": "2020-10-27T05:46:06Z", "author": {"login": "rpdome"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java", "diffHunk": "@@ -0,0 +1,300 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.brokeroperationexecutor;\n+\n+import android.os.Build;\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BrokerOperationExecutor;\n+import com.microsoft.identity.common.internal.telemetry.events.ApiEndEvent;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(sdk = {Build.VERSION_CODES.N})\n+public class BrokerOperationExecutorTests {\n+\n+    final String CORRUPTED_BUNDLE_ERROR_CODE = \"corrupted_bundle\";\n+\n+    // No strategy is provided. executor should fail.\n+    @Test\n+    public void testZeroStrategy() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithSuccessResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithFailureResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithFailureResult());\n+\n+        expectSuccessResultWithFalse(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a corrupted result.\n+    @Test\n+    public void testOneStrategyWithCorruptedResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithCorruptedResult());\n+\n+        expectCorruptedBundleException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it fails with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testOneStrategyWithBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 2 strategies and both succeed.\n+    @Test\n+    public void testTwoSuccessStrategies() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one fails with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneThrowingBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one fails.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MDIwOA=="}, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQzMDU3Mw==", "bodyText": "Come to think of it, I should just combine 1 and 2. It doesn't really matter in this layer.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512430573", "createdAt": "2020-10-27T05:47:44Z", "author": {"login": "rpdome"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java", "diffHunk": "@@ -0,0 +1,300 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.brokeroperationexecutor;\n+\n+import android.os.Build;\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BrokerOperationExecutor;\n+import com.microsoft.identity.common.internal.telemetry.events.ApiEndEvent;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(sdk = {Build.VERSION_CODES.N})\n+public class BrokerOperationExecutorTests {\n+\n+    final String CORRUPTED_BUNDLE_ERROR_CODE = \"corrupted_bundle\";\n+\n+    // No strategy is provided. executor should fail.\n+    @Test\n+    public void testZeroStrategy() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithSuccessResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithFailureResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithFailureResult());\n+\n+        expectSuccessResultWithFalse(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a corrupted result.\n+    @Test\n+    public void testOneStrategyWithCorruptedResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithCorruptedResult());\n+\n+        expectCorruptedBundleException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it fails with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testOneStrategyWithBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 2 strategies and both succeed.\n+    @Test\n+    public void testTwoSuccessStrategies() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one fails with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneThrowingBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one fails.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MDIwOA=="}, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTUxMTk4OnYy", "diffSide": "RIGHT", "path": "common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo1MjoyNVrOHoh6QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzo1NTowMFrOHoqhOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MDY3Mw==", "bodyText": "This is interesting.  If the result is corrupted, I think we'd want to fall back on the rest of the chain.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512260673", "createdAt": "2020-10-26T20:52:25Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java", "diffHunk": "@@ -0,0 +1,300 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.brokeroperationexecutor;\n+\n+import android.os.Build;\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BrokerOperationExecutor;\n+import com.microsoft.identity.common.internal.telemetry.events.ApiEndEvent;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(sdk = {Build.VERSION_CODES.N})\n+public class BrokerOperationExecutorTests {\n+\n+    final String CORRUPTED_BUNDLE_ERROR_CODE = \"corrupted_bundle\";\n+\n+    // No strategy is provided. executor should fail.\n+    @Test\n+    public void testZeroStrategy() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithSuccessResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithFailureResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithFailureResult());\n+\n+        expectSuccessResultWithFalse(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a corrupted result.\n+    @Test\n+    public void testOneStrategyWithCorruptedResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithCorruptedResult());\n+\n+        expectCorruptedBundleException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it fails with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testOneStrategyWithBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 2 strategies and both succeed.\n+    @Test\n+    public void testTwoSuccessStrategies() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one fails with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneThrowingBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one fails.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneReturningFailureResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithFailureResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithFalse(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one returns a corrupted result.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneReturningCorruptedResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithCorruptedResult());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQwMTcyMw==", "bodyText": "Corrupted here doesn't mean data loss during a transfer, that, AFAIK, never happens.\nIt means the broker is sending a result bundle with unexpected format, or the data is not properly compressed. The data is 'corrupted' from the source, therefore it doesn't matter which communication channel you use - you'll always get the same result bundle.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512401723", "createdAt": "2020-10-27T03:55:00Z", "author": {"login": "rpdome"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java", "diffHunk": "@@ -0,0 +1,300 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.brokeroperationexecutor;\n+\n+import android.os.Build;\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BrokerOperationExecutor;\n+import com.microsoft.identity.common.internal.telemetry.events.ApiEndEvent;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(sdk = {Build.VERSION_CODES.N})\n+public class BrokerOperationExecutorTests {\n+\n+    final String CORRUPTED_BUNDLE_ERROR_CODE = \"corrupted_bundle\";\n+\n+    // No strategy is provided. executor should fail.\n+    @Test\n+    public void testZeroStrategy() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithSuccessResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithFailureResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithFailureResult());\n+\n+        expectSuccessResultWithFalse(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a corrupted result.\n+    @Test\n+    public void testOneStrategyWithCorruptedResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithCorruptedResult());\n+\n+        expectCorruptedBundleException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it fails with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testOneStrategyWithBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 2 strategies and both succeed.\n+    @Test\n+    public void testTwoSuccessStrategies() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one fails with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneThrowingBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one fails.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneReturningFailureResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithFailureResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithFalse(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one returns a corrupted result.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneReturningCorruptedResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithCorruptedResult());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MDY3Mw=="}, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTUxNTg0OnYy", "diffSide": "RIGHT", "path": "common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo1MzozOFrOHoh8lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNTo1MzowMFrOHosXcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MTI2OQ==", "bodyText": "In general, if the first one succeeds, the we don't want to run the other one at all, so it shouldn't matter what it does.  All of its methods can throw RuntimeException and it should have no effect, I think.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512261269", "createdAt": "2020-10-26T20:53:38Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java", "diffHunk": "@@ -0,0 +1,300 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.brokeroperationexecutor;\n+\n+import android.os.Build;\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BrokerOperationExecutor;\n+import com.microsoft.identity.common.internal.telemetry.events.ApiEndEvent;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(sdk = {Build.VERSION_CODES.N})\n+public class BrokerOperationExecutorTests {\n+\n+    final String CORRUPTED_BUNDLE_ERROR_CODE = \"corrupted_bundle\";\n+\n+    // No strategy is provided. executor should fail.\n+    @Test\n+    public void testZeroStrategy() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithSuccessResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithFailureResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithFailureResult());\n+\n+        expectSuccessResultWithFalse(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a corrupted result.\n+    @Test\n+    public void testOneStrategyWithCorruptedResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithCorruptedResult());\n+\n+        expectCorruptedBundleException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it fails with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testOneStrategyWithBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 2 strategies and both succeed.\n+    @Test\n+    public void testTwoSuccessStrategies() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one fails with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneThrowingBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one fails.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneReturningFailureResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithFailureResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithFalse(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one returns a corrupted result.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneReturningCorruptedResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithCorruptedResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectCorruptedBundleException(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the last one failed with BrokerCommunicationException inside IIpcStrategy.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQzMTk4Ng==", "bodyText": "Yep. This test case is to make sure that the order of strategy matters.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512431986", "createdAt": "2020-10-27T05:53:00Z", "author": {"login": "rpdome"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java", "diffHunk": "@@ -0,0 +1,300 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.brokeroperationexecutor;\n+\n+import android.os.Build;\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BrokerOperationExecutor;\n+import com.microsoft.identity.common.internal.telemetry.events.ApiEndEvent;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(sdk = {Build.VERSION_CODES.N})\n+public class BrokerOperationExecutorTests {\n+\n+    final String CORRUPTED_BUNDLE_ERROR_CODE = \"corrupted_bundle\";\n+\n+    // No strategy is provided. executor should fail.\n+    @Test\n+    public void testZeroStrategy() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithSuccessResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithFailureResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithFailureResult());\n+\n+        expectSuccessResultWithFalse(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a corrupted result.\n+    @Test\n+    public void testOneStrategyWithCorruptedResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithCorruptedResult());\n+\n+        expectCorruptedBundleException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it fails with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testOneStrategyWithBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 2 strategies and both succeed.\n+    @Test\n+    public void testTwoSuccessStrategies() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one fails with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneThrowingBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one fails.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneReturningFailureResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithFailureResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithFalse(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one returns a corrupted result.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneReturningCorruptedResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithCorruptedResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectCorruptedBundleException(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the last one failed with BrokerCommunicationException inside IIpcStrategy.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MTI2OQ=="}, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTUxNjY5OnYy", "diffSide": "RIGHT", "path": "common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo1Mzo1NFrOHoh9Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo1Mzo1NFrOHoh9Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MTQxNA==", "bodyText": "Same comment.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512261414", "createdAt": "2020-10-26T20:53:54Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java", "diffHunk": "@@ -0,0 +1,300 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.brokeroperationexecutor;\n+\n+import android.os.Build;\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BrokerOperationExecutor;\n+import com.microsoft.identity.common.internal.telemetry.events.ApiEndEvent;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(sdk = {Build.VERSION_CODES.N})\n+public class BrokerOperationExecutorTests {\n+\n+    final String CORRUPTED_BUNDLE_ERROR_CODE = \"corrupted_bundle\";\n+\n+    // No strategy is provided. executor should fail.\n+    @Test\n+    public void testZeroStrategy() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithSuccessResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithFailureResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithFailureResult());\n+\n+        expectSuccessResultWithFalse(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a corrupted result.\n+    @Test\n+    public void testOneStrategyWithCorruptedResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithCorruptedResult());\n+\n+        expectCorruptedBundleException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it fails with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testOneStrategyWithBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 2 strategies and both succeed.\n+    @Test\n+    public void testTwoSuccessStrategies() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one fails with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneThrowingBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one fails.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneReturningFailureResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithFailureResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithFalse(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one returns a corrupted result.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneReturningCorruptedResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithCorruptedResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectCorruptedBundleException(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the last one failed with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testTwoStrategiesWithTheLastOneThrowingBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the last one returns a failure.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTUyMTg1OnYy", "diffSide": "RIGHT", "path": "common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo1NToxNlrOHoiALw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNjoyNDowNlrOHos8Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MjE5MQ==", "bodyText": "We should have some of these throw other kinds of Exceptions and Error results.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512262191", "createdAt": "2020-10-26T20:55:16Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java", "diffHunk": "@@ -0,0 +1,300 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.brokeroperationexecutor;\n+\n+import android.os.Build;\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BrokerOperationExecutor;\n+import com.microsoft.identity.common.internal.telemetry.events.ApiEndEvent;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(sdk = {Build.VERSION_CODES.N})\n+public class BrokerOperationExecutorTests {\n+\n+    final String CORRUPTED_BUNDLE_ERROR_CODE = \"corrupted_bundle\";\n+\n+    // No strategy is provided. executor should fail.\n+    @Test\n+    public void testZeroStrategy() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithSuccessResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithFailureResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithFailureResult());\n+\n+        expectSuccessResultWithFalse(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a corrupted result.\n+    @Test\n+    public void testOneStrategyWithCorruptedResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithCorruptedResult());\n+\n+        expectCorruptedBundleException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it fails with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testOneStrategyWithBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 2 strategies and both succeed.\n+    @Test\n+    public void testTwoSuccessStrategies() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one fails with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneThrowingBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one fails.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneReturningFailureResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithFailureResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithFalse(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one returns a corrupted result.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneReturningCorruptedResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithCorruptedResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectCorruptedBundleException(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the last one failed with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testTwoStrategiesWithTheLastOneThrowingBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the last one returns a failure.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.\n+    @Test\n+    public void testTwoStrategiesWithTheLastOneReturningFailureResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+        strategyList.add(getStrategyWithFailureResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the last one returns a corrupted result.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.\n+    @Test\n+    public void testTwoStrategiesWithTheLastOneThrowingCorruptedResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+        strategyList.add(getStrategyWithCorruptedResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and both failed with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testTwoStrategiesWithBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    private void expectSuccessResultWithTrue(final List<IIpcStrategy> strategyList) {\n+        try {\n+            final BrokerOperationExecutor executor = new BrokerOperationExecutor(strategyList);\n+            Assert.assertTrue(executor.execute(getMockParameter(), getBrokerOperation()));\n+        } catch (final BaseException e) {\n+            Assert.fail(\"Unexpected exception.\");\n+        }\n+    }\n+\n+    private void expectSuccessResultWithFalse(final List<IIpcStrategy> strategyList) {\n+        try {\n+            final BrokerOperationExecutor executor = new BrokerOperationExecutor(strategyList);\n+            Assert.assertFalse(executor.execute(getMockParameter(), getBrokerOperation()));\n+        } catch (final BaseException e) {\n+            Assert.fail(\"Unexpected exception.\");\n+        }\n+    }\n+\n+    private void expectBindFailureException(final List<IIpcStrategy> strategyList) {\n+        try {\n+            final BrokerOperationExecutor executor = new BrokerOperationExecutor(strategyList);\n+            executor.execute(getMockParameter(), getBrokerOperation());\n+            Assert.fail(\"Failure is expected.\");\n+        } catch (final BaseException e) {\n+            Assert.assertTrue(e instanceof ClientException);\n+            Assert.assertEquals(e.getErrorCode(), ErrorStrings.BROKER_BIND_SERVICE_FAILED);\n+            Assert.assertEquals(e.getSuppressed().length, strategyList.size());\n+        }\n+    }\n+\n+    private void expectCorruptedBundleException(final List<IIpcStrategy> strategyList) {\n+        try {\n+            final BrokerOperationExecutor executor = new BrokerOperationExecutor(strategyList);\n+            executor.execute(getMockParameter(), getBrokerOperation());\n+            Assert.fail(\"Failure is expected.\");\n+        } catch (final BaseException e) {\n+            Assert.assertTrue(e instanceof ClientException);\n+            Assert.assertEquals(e.getErrorCode(), CORRUPTED_BUNDLE_ERROR_CODE);\n+        }\n+    }\n+\n+    private CommandParameters getMockParameter() {\n+        return CommandParameters.builder().build();\n+    }\n+\n+    private IIpcStrategy getStrategyWithSuccessResult() {\n+        return new IIpcStrategy() {\n+            @Override\n+            @Nullable public Bundle communicateToBroker(@NonNull BrokerOperationBundle bundle) throws BrokerCommunicationException {\n+                final Bundle result = new Bundle();\n+                result.putBoolean(\"SUCCESS\", true);\n+                return result;\n+            }\n+        };\n+    }\n+\n+    private IIpcStrategy getStrategyWithFailureResult() {\n+        return new IIpcStrategy() {\n+            @Override\n+            @Nullable public Bundle communicateToBroker(@NonNull BrokerOperationBundle bundle) throws BrokerCommunicationException {\n+                final Bundle result = new Bundle();\n+                result.putBoolean(\"SUCCESS\", false);\n+                return result;\n+            }\n+        };\n+    }\n+\n+    private IIpcStrategy getStrategyWithCorruptedResult() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ0MTQzNQ==", "bodyText": "added ServiceException and UserCancelException. (the other two main exceptions that inherited from BaseException - the executor can only throw BaseException)", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512441435", "createdAt": "2020-10-27T06:24:06Z", "author": {"login": "rpdome"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java", "diffHunk": "@@ -0,0 +1,300 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.brokeroperationexecutor;\n+\n+import android.os.Build;\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BrokerOperationExecutor;\n+import com.microsoft.identity.common.internal.telemetry.events.ApiEndEvent;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(sdk = {Build.VERSION_CODES.N})\n+public class BrokerOperationExecutorTests {\n+\n+    final String CORRUPTED_BUNDLE_ERROR_CODE = \"corrupted_bundle\";\n+\n+    // No strategy is provided. executor should fail.\n+    @Test\n+    public void testZeroStrategy() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithSuccessResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithFailureResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithFailureResult());\n+\n+        expectSuccessResultWithFalse(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a corrupted result.\n+    @Test\n+    public void testOneStrategyWithCorruptedResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithCorruptedResult());\n+\n+        expectCorruptedBundleException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it fails with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testOneStrategyWithBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 2 strategies and both succeed.\n+    @Test\n+    public void testTwoSuccessStrategies() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one fails with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneThrowingBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one fails.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneReturningFailureResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithFailureResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithFalse(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one returns a corrupted result.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneReturningCorruptedResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithCorruptedResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectCorruptedBundleException(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the last one failed with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testTwoStrategiesWithTheLastOneThrowingBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the last one returns a failure.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.\n+    @Test\n+    public void testTwoStrategiesWithTheLastOneReturningFailureResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+        strategyList.add(getStrategyWithFailureResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the last one returns a corrupted result.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.\n+    @Test\n+    public void testTwoStrategiesWithTheLastOneThrowingCorruptedResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+        strategyList.add(getStrategyWithCorruptedResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and both failed with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testTwoStrategiesWithBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    private void expectSuccessResultWithTrue(final List<IIpcStrategy> strategyList) {\n+        try {\n+            final BrokerOperationExecutor executor = new BrokerOperationExecutor(strategyList);\n+            Assert.assertTrue(executor.execute(getMockParameter(), getBrokerOperation()));\n+        } catch (final BaseException e) {\n+            Assert.fail(\"Unexpected exception.\");\n+        }\n+    }\n+\n+    private void expectSuccessResultWithFalse(final List<IIpcStrategy> strategyList) {\n+        try {\n+            final BrokerOperationExecutor executor = new BrokerOperationExecutor(strategyList);\n+            Assert.assertFalse(executor.execute(getMockParameter(), getBrokerOperation()));\n+        } catch (final BaseException e) {\n+            Assert.fail(\"Unexpected exception.\");\n+        }\n+    }\n+\n+    private void expectBindFailureException(final List<IIpcStrategy> strategyList) {\n+        try {\n+            final BrokerOperationExecutor executor = new BrokerOperationExecutor(strategyList);\n+            executor.execute(getMockParameter(), getBrokerOperation());\n+            Assert.fail(\"Failure is expected.\");\n+        } catch (final BaseException e) {\n+            Assert.assertTrue(e instanceof ClientException);\n+            Assert.assertEquals(e.getErrorCode(), ErrorStrings.BROKER_BIND_SERVICE_FAILED);\n+            Assert.assertEquals(e.getSuppressed().length, strategyList.size());\n+        }\n+    }\n+\n+    private void expectCorruptedBundleException(final List<IIpcStrategy> strategyList) {\n+        try {\n+            final BrokerOperationExecutor executor = new BrokerOperationExecutor(strategyList);\n+            executor.execute(getMockParameter(), getBrokerOperation());\n+            Assert.fail(\"Failure is expected.\");\n+        } catch (final BaseException e) {\n+            Assert.assertTrue(e instanceof ClientException);\n+            Assert.assertEquals(e.getErrorCode(), CORRUPTED_BUNDLE_ERROR_CODE);\n+        }\n+    }\n+\n+    private CommandParameters getMockParameter() {\n+        return CommandParameters.builder().build();\n+    }\n+\n+    private IIpcStrategy getStrategyWithSuccessResult() {\n+        return new IIpcStrategy() {\n+            @Override\n+            @Nullable public Bundle communicateToBroker(@NonNull BrokerOperationBundle bundle) throws BrokerCommunicationException {\n+                final Bundle result = new Bundle();\n+                result.putBoolean(\"SUCCESS\", true);\n+                return result;\n+            }\n+        };\n+    }\n+\n+    private IIpcStrategy getStrategyWithFailureResult() {\n+        return new IIpcStrategy() {\n+            @Override\n+            @Nullable public Bundle communicateToBroker(@NonNull BrokerOperationBundle bundle) throws BrokerCommunicationException {\n+                final Bundle result = new Bundle();\n+                result.putBoolean(\"SUCCESS\", false);\n+                return result;\n+            }\n+        };\n+    }\n+\n+    private IIpcStrategy getStrategyWithCorruptedResult() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MjE5MQ=="}, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTUzMDA5OnYy", "diffSide": "RIGHT", "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo1NzozNVrOHoiFQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNDozMDozNlrOHorDEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MzQ4OQ==", "bodyText": "Should this return a List?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512263489", "createdAt": "2020-10-26T20:57:35Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java", "diffHunk": "@@ -0,0 +1,178 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc;\n+\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.BROKER_GET_KEY_FROM_INACTIVE_BROKER;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_ACQUIRE_TOKEN_SILENT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_ACCOUNTS;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_DEVICE_MODE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_HELLO;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_REMOVE_ACCOUNT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_SIGN_OUT_FROM_SHARED_DEVICE;\n+\n+/**\n+ * IMPORTANT: This class must cover EVERY {@link com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation}.\n+ */\n+public abstract class IpcStrategyTests {\n+\n+    abstract IIpcStrategy getStrategy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQxMDM4NA==", "bodyText": "Please see the answer regarding parameterized test below.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512410384", "createdAt": "2020-10-27T04:30:36Z", "author": {"login": "rpdome"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java", "diffHunk": "@@ -0,0 +1,178 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc;\n+\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.BROKER_GET_KEY_FROM_INACTIVE_BROKER;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_ACQUIRE_TOKEN_SILENT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_ACCOUNTS;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_DEVICE_MODE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_HELLO;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_REMOVE_ACCOUNT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_SIGN_OUT_FROM_SHARED_DEVICE;\n+\n+/**\n+ * IMPORTANT: This class must cover EVERY {@link com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation}.\n+ */\n+public abstract class IpcStrategyTests {\n+\n+    abstract IIpcStrategy getStrategy();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MzQ4OQ=="}, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTUzMjYyOnYy", "diffSide": "RIGHT", "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo1ODoyNVrOHoiG7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNDoyMTowMFrOHoq6Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MzkxNw==", "bodyText": "Can we make this into a parameterized test?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512263917", "createdAt": "2020-10-26T20:58:25Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java", "diffHunk": "@@ -0,0 +1,178 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc;\n+\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.BROKER_GET_KEY_FROM_INACTIVE_BROKER;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_ACQUIRE_TOKEN_SILENT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_ACCOUNTS;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_DEVICE_MODE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_HELLO;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_REMOVE_ACCOUNT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_SIGN_OUT_FROM_SHARED_DEVICE;\n+\n+/**\n+ * IMPORTANT: This class must cover EVERY {@link com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQwODEwNg==", "bodyText": "I assume you mean making IIpcStrategy the parameter in the parameterized test.\n\nEach strategy requires different shadow classes.... so ... we could, but I don't want to put all shadow classes in one place.\nI should mark all the test functions here abstract. Once we start supporting broker IPC, these tests will diverge. (it works with all the subclasses because we're working only on MSAL-Broker communication).", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512408106", "createdAt": "2020-10-27T04:21:00Z", "author": {"login": "rpdome"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java", "diffHunk": "@@ -0,0 +1,178 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc;\n+\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.BROKER_GET_KEY_FROM_INACTIVE_BROKER;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_ACQUIRE_TOKEN_SILENT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_ACCOUNTS;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_DEVICE_MODE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_HELLO;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_REMOVE_ACCOUNT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_SIGN_OUT_FROM_SHARED_DEVICE;\n+\n+/**\n+ * IMPORTANT: This class must cover EVERY {@link com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MzkxNw=="}, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTUzMzk3OnYy", "diffSide": "RIGHT", "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo1ODo1MlrOHoiH1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjoxNjo1OVrOHpE2sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NDE0OA==", "bodyText": "Do we care if it's the same identity? (here and elsewhere)", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512264148", "createdAt": "2020-10-26T20:58:52Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java", "diffHunk": "@@ -0,0 +1,178 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc;\n+\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.BROKER_GET_KEY_FROM_INACTIVE_BROKER;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_ACQUIRE_TOKEN_SILENT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_ACCOUNTS;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_DEVICE_MODE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_HELLO;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_REMOVE_ACCOUNT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_SIGN_OUT_FROM_SHARED_DEVICE;\n+\n+/**\n+ * IMPORTANT: This class must cover EVERY {@link com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation}.\n+ */\n+public abstract class IpcStrategyTests {\n+\n+    abstract IIpcStrategy getStrategy();\n+\n+    @Test\n+    public void testMsalHello() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    @Test\n+    public void testMsalGetIntentForInteractiveRequest() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST));\n+    }\n+\n+    @Test\n+    public void testMsalAcquireTokenSilent() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_ACQUIRE_TOKEN_SILENT));\n+    }\n+\n+    @Test\n+    public void testMsalGetAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_ACCOUNTS));\n+    }\n+\n+    @Test\n+    public void testMsalRemoveAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_REMOVE_ACCOUNT));\n+    }\n+\n+    @Test\n+    public void testMsalGetDeviceMode() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_DEVICE_MODE));\n+    }\n+\n+    @Test\n+    public void testGetCurrentAccountInSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testMsalSignOutFromSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_SIGN_OUT_FROM_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testBrokerGetKeyFromInactiveBroker() {\n+        testOperationNotSupportedOnClientSide(getMockRequestBundle(BROKER_GET_KEY_FROM_INACTIVE_BROKER));\n+    }\n+\n+    @Test\n+    public void testIpcFailed() {\n+        testIpcConnectionFailed(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    protected BrokerOperationBundle getMockRequestBundle(final BrokerOperationBundle.Operation operation) {\n+        final Bundle bundle = new Bundle();\n+        bundle.putBoolean(\"REQUEST_BUNDLE\", true);\n+\n+        return new BrokerOperationBundle(operation, \"MOCK_BROKER\", bundle);\n+    }\n+\n+    public static Bundle getMockIpcResultBundle() {\n+        final Bundle bundle = new Bundle();\n+        bundle.putBoolean(\"MOCK_SUCCESS\", true);\n+        return bundle;\n+    }\n+\n+    protected void testOperationSucceeds(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            final Bundle resultBundle = strategy.communicateToBroker(bundle);\n+            Assert.assertTrue(validateResultBundle(resultBundle, getMockIpcResultBundle()));\n+        } catch (BaseException e) {\n+            Assert.fail(\"Exception is not expected.\");\n+        }\n+    }\n+\n+    protected void testOperationNotSupportedOnClientSide(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            strategy.communicateToBroker(bundle);\n+            Assert.fail(\"Operation should fail.\");\n+        } catch (BaseException e) {\n+            Assert.assertTrue(e instanceof BrokerCommunicationException);\n+            Assert.assertSame(((BrokerCommunicationException) e).getType(), OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE);\n+        }\n+    }\n+\n+    protected void testIpcConnectionFailed(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            strategy.communicateToBroker(bundle);\n+            Assert.fail(\"Operation should fail.\");\n+        } catch (BaseException e) {\n+            Assert.assertTrue(e instanceof BrokerCommunicationException);\n+            Assert.assertSame(((BrokerCommunicationException) e).getType(), CONNECTION_ERROR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyOTE4MQ==", "bodyText": "same identity?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512429181", "createdAt": "2020-10-27T05:42:40Z", "author": {"login": "rpdome"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java", "diffHunk": "@@ -0,0 +1,178 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc;\n+\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.BROKER_GET_KEY_FROM_INACTIVE_BROKER;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_ACQUIRE_TOKEN_SILENT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_ACCOUNTS;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_DEVICE_MODE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_HELLO;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_REMOVE_ACCOUNT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_SIGN_OUT_FROM_SHARED_DEVICE;\n+\n+/**\n+ * IMPORTANT: This class must cover EVERY {@link com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation}.\n+ */\n+public abstract class IpcStrategyTests {\n+\n+    abstract IIpcStrategy getStrategy();\n+\n+    @Test\n+    public void testMsalHello() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    @Test\n+    public void testMsalGetIntentForInteractiveRequest() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST));\n+    }\n+\n+    @Test\n+    public void testMsalAcquireTokenSilent() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_ACQUIRE_TOKEN_SILENT));\n+    }\n+\n+    @Test\n+    public void testMsalGetAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_ACCOUNTS));\n+    }\n+\n+    @Test\n+    public void testMsalRemoveAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_REMOVE_ACCOUNT));\n+    }\n+\n+    @Test\n+    public void testMsalGetDeviceMode() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_DEVICE_MODE));\n+    }\n+\n+    @Test\n+    public void testGetCurrentAccountInSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testMsalSignOutFromSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_SIGN_OUT_FROM_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testBrokerGetKeyFromInactiveBroker() {\n+        testOperationNotSupportedOnClientSide(getMockRequestBundle(BROKER_GET_KEY_FROM_INACTIVE_BROKER));\n+    }\n+\n+    @Test\n+    public void testIpcFailed() {\n+        testIpcConnectionFailed(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    protected BrokerOperationBundle getMockRequestBundle(final BrokerOperationBundle.Operation operation) {\n+        final Bundle bundle = new Bundle();\n+        bundle.putBoolean(\"REQUEST_BUNDLE\", true);\n+\n+        return new BrokerOperationBundle(operation, \"MOCK_BROKER\", bundle);\n+    }\n+\n+    public static Bundle getMockIpcResultBundle() {\n+        final Bundle bundle = new Bundle();\n+        bundle.putBoolean(\"MOCK_SUCCESS\", true);\n+        return bundle;\n+    }\n+\n+    protected void testOperationSucceeds(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            final Bundle resultBundle = strategy.communicateToBroker(bundle);\n+            Assert.assertTrue(validateResultBundle(resultBundle, getMockIpcResultBundle()));\n+        } catch (BaseException e) {\n+            Assert.fail(\"Exception is not expected.\");\n+        }\n+    }\n+\n+    protected void testOperationNotSupportedOnClientSide(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            strategy.communicateToBroker(bundle);\n+            Assert.fail(\"Operation should fail.\");\n+        } catch (BaseException e) {\n+            Assert.assertTrue(e instanceof BrokerCommunicationException);\n+            Assert.assertSame(((BrokerCommunicationException) e).getType(), OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE);\n+        }\n+    }\n+\n+    protected void testIpcConnectionFailed(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            strategy.communicateToBroker(bundle);\n+            Assert.fail(\"Operation should fail.\");\n+        } catch (BaseException e) {\n+            Assert.assertTrue(e instanceof BrokerCommunicationException);\n+            Assert.assertSame(((BrokerCommunicationException) e).getType(), CONNECTION_ERROR);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NDE0OA=="}, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgyODIwOQ==", "bodyText": "AssertSame is a comparison of object identity, essentially memory address.  So my question is - is it important that it's the same object or should it just need to compare equals?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512828209", "createdAt": "2020-10-27T16:10:39Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java", "diffHunk": "@@ -0,0 +1,178 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc;\n+\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.BROKER_GET_KEY_FROM_INACTIVE_BROKER;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_ACQUIRE_TOKEN_SILENT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_ACCOUNTS;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_DEVICE_MODE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_HELLO;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_REMOVE_ACCOUNT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_SIGN_OUT_FROM_SHARED_DEVICE;\n+\n+/**\n+ * IMPORTANT: This class must cover EVERY {@link com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation}.\n+ */\n+public abstract class IpcStrategyTests {\n+\n+    abstract IIpcStrategy getStrategy();\n+\n+    @Test\n+    public void testMsalHello() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    @Test\n+    public void testMsalGetIntentForInteractiveRequest() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST));\n+    }\n+\n+    @Test\n+    public void testMsalAcquireTokenSilent() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_ACQUIRE_TOKEN_SILENT));\n+    }\n+\n+    @Test\n+    public void testMsalGetAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_ACCOUNTS));\n+    }\n+\n+    @Test\n+    public void testMsalRemoveAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_REMOVE_ACCOUNT));\n+    }\n+\n+    @Test\n+    public void testMsalGetDeviceMode() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_DEVICE_MODE));\n+    }\n+\n+    @Test\n+    public void testGetCurrentAccountInSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testMsalSignOutFromSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_SIGN_OUT_FROM_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testBrokerGetKeyFromInactiveBroker() {\n+        testOperationNotSupportedOnClientSide(getMockRequestBundle(BROKER_GET_KEY_FROM_INACTIVE_BROKER));\n+    }\n+\n+    @Test\n+    public void testIpcFailed() {\n+        testIpcConnectionFailed(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    protected BrokerOperationBundle getMockRequestBundle(final BrokerOperationBundle.Operation operation) {\n+        final Bundle bundle = new Bundle();\n+        bundle.putBoolean(\"REQUEST_BUNDLE\", true);\n+\n+        return new BrokerOperationBundle(operation, \"MOCK_BROKER\", bundle);\n+    }\n+\n+    public static Bundle getMockIpcResultBundle() {\n+        final Bundle bundle = new Bundle();\n+        bundle.putBoolean(\"MOCK_SUCCESS\", true);\n+        return bundle;\n+    }\n+\n+    protected void testOperationSucceeds(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            final Bundle resultBundle = strategy.communicateToBroker(bundle);\n+            Assert.assertTrue(validateResultBundle(resultBundle, getMockIpcResultBundle()));\n+        } catch (BaseException e) {\n+            Assert.fail(\"Exception is not expected.\");\n+        }\n+    }\n+\n+    protected void testOperationNotSupportedOnClientSide(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            strategy.communicateToBroker(bundle);\n+            Assert.fail(\"Operation should fail.\");\n+        } catch (BaseException e) {\n+            Assert.assertTrue(e instanceof BrokerCommunicationException);\n+            Assert.assertSame(((BrokerCommunicationException) e).getType(), OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE);\n+        }\n+    }\n+\n+    protected void testIpcConnectionFailed(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            strategy.communicateToBroker(bundle);\n+            Assert.fail(\"Operation should fail.\");\n+        } catch (BaseException e) {\n+            Assert.assertTrue(e instanceof BrokerCommunicationException);\n+            Assert.assertSame(((BrokerCommunicationException) e).getType(), CONNECTION_ERROR);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NDE0OA=="}, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgzMjEwNA==", "bodyText": "ah ok. assertEquals makes more sense then. not sure why this is not throwing an error :/", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512832104", "createdAt": "2020-10-27T16:15:37Z", "author": {"login": "rpdome"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java", "diffHunk": "@@ -0,0 +1,178 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc;\n+\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.BROKER_GET_KEY_FROM_INACTIVE_BROKER;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_ACQUIRE_TOKEN_SILENT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_ACCOUNTS;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_DEVICE_MODE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_HELLO;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_REMOVE_ACCOUNT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_SIGN_OUT_FROM_SHARED_DEVICE;\n+\n+/**\n+ * IMPORTANT: This class must cover EVERY {@link com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation}.\n+ */\n+public abstract class IpcStrategyTests {\n+\n+    abstract IIpcStrategy getStrategy();\n+\n+    @Test\n+    public void testMsalHello() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    @Test\n+    public void testMsalGetIntentForInteractiveRequest() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST));\n+    }\n+\n+    @Test\n+    public void testMsalAcquireTokenSilent() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_ACQUIRE_TOKEN_SILENT));\n+    }\n+\n+    @Test\n+    public void testMsalGetAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_ACCOUNTS));\n+    }\n+\n+    @Test\n+    public void testMsalRemoveAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_REMOVE_ACCOUNT));\n+    }\n+\n+    @Test\n+    public void testMsalGetDeviceMode() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_DEVICE_MODE));\n+    }\n+\n+    @Test\n+    public void testGetCurrentAccountInSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testMsalSignOutFromSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_SIGN_OUT_FROM_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testBrokerGetKeyFromInactiveBroker() {\n+        testOperationNotSupportedOnClientSide(getMockRequestBundle(BROKER_GET_KEY_FROM_INACTIVE_BROKER));\n+    }\n+\n+    @Test\n+    public void testIpcFailed() {\n+        testIpcConnectionFailed(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    protected BrokerOperationBundle getMockRequestBundle(final BrokerOperationBundle.Operation operation) {\n+        final Bundle bundle = new Bundle();\n+        bundle.putBoolean(\"REQUEST_BUNDLE\", true);\n+\n+        return new BrokerOperationBundle(operation, \"MOCK_BROKER\", bundle);\n+    }\n+\n+    public static Bundle getMockIpcResultBundle() {\n+        final Bundle bundle = new Bundle();\n+        bundle.putBoolean(\"MOCK_SUCCESS\", true);\n+        return bundle;\n+    }\n+\n+    protected void testOperationSucceeds(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            final Bundle resultBundle = strategy.communicateToBroker(bundle);\n+            Assert.assertTrue(validateResultBundle(resultBundle, getMockIpcResultBundle()));\n+        } catch (BaseException e) {\n+            Assert.fail(\"Exception is not expected.\");\n+        }\n+    }\n+\n+    protected void testOperationNotSupportedOnClientSide(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            strategy.communicateToBroker(bundle);\n+            Assert.fail(\"Operation should fail.\");\n+        } catch (BaseException e) {\n+            Assert.assertTrue(e instanceof BrokerCommunicationException);\n+            Assert.assertSame(((BrokerCommunicationException) e).getType(), OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE);\n+        }\n+    }\n+\n+    protected void testIpcConnectionFailed(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            strategy.communicateToBroker(bundle);\n+            Assert.fail(\"Operation should fail.\");\n+        } catch (BaseException e) {\n+            Assert.assertTrue(e instanceof BrokerCommunicationException);\n+            Assert.assertSame(((BrokerCommunicationException) e).getType(), CONNECTION_ERROR);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NDE0OA=="}, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgzMzIwMg==", "bodyText": "Because it's an enum. ;-)", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512833202", "createdAt": "2020-10-27T16:16:59Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java", "diffHunk": "@@ -0,0 +1,178 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc;\n+\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.BROKER_GET_KEY_FROM_INACTIVE_BROKER;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_ACQUIRE_TOKEN_SILENT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_ACCOUNTS;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_DEVICE_MODE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_HELLO;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_REMOVE_ACCOUNT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_SIGN_OUT_FROM_SHARED_DEVICE;\n+\n+/**\n+ * IMPORTANT: This class must cover EVERY {@link com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation}.\n+ */\n+public abstract class IpcStrategyTests {\n+\n+    abstract IIpcStrategy getStrategy();\n+\n+    @Test\n+    public void testMsalHello() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    @Test\n+    public void testMsalGetIntentForInteractiveRequest() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST));\n+    }\n+\n+    @Test\n+    public void testMsalAcquireTokenSilent() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_ACQUIRE_TOKEN_SILENT));\n+    }\n+\n+    @Test\n+    public void testMsalGetAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_ACCOUNTS));\n+    }\n+\n+    @Test\n+    public void testMsalRemoveAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_REMOVE_ACCOUNT));\n+    }\n+\n+    @Test\n+    public void testMsalGetDeviceMode() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_DEVICE_MODE));\n+    }\n+\n+    @Test\n+    public void testGetCurrentAccountInSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testMsalSignOutFromSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_SIGN_OUT_FROM_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testBrokerGetKeyFromInactiveBroker() {\n+        testOperationNotSupportedOnClientSide(getMockRequestBundle(BROKER_GET_KEY_FROM_INACTIVE_BROKER));\n+    }\n+\n+    @Test\n+    public void testIpcFailed() {\n+        testIpcConnectionFailed(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    protected BrokerOperationBundle getMockRequestBundle(final BrokerOperationBundle.Operation operation) {\n+        final Bundle bundle = new Bundle();\n+        bundle.putBoolean(\"REQUEST_BUNDLE\", true);\n+\n+        return new BrokerOperationBundle(operation, \"MOCK_BROKER\", bundle);\n+    }\n+\n+    public static Bundle getMockIpcResultBundle() {\n+        final Bundle bundle = new Bundle();\n+        bundle.putBoolean(\"MOCK_SUCCESS\", true);\n+        return bundle;\n+    }\n+\n+    protected void testOperationSucceeds(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            final Bundle resultBundle = strategy.communicateToBroker(bundle);\n+            Assert.assertTrue(validateResultBundle(resultBundle, getMockIpcResultBundle()));\n+        } catch (BaseException e) {\n+            Assert.fail(\"Exception is not expected.\");\n+        }\n+    }\n+\n+    protected void testOperationNotSupportedOnClientSide(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            strategy.communicateToBroker(bundle);\n+            Assert.fail(\"Operation should fail.\");\n+        } catch (BaseException e) {\n+            Assert.assertTrue(e instanceof BrokerCommunicationException);\n+            Assert.assertSame(((BrokerCommunicationException) e).getType(), OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE);\n+        }\n+    }\n+\n+    protected void testIpcConnectionFailed(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            strategy.communicateToBroker(bundle);\n+            Assert.fail(\"Operation should fail.\");\n+        } catch (BaseException e) {\n+            Assert.assertTrue(e instanceof BrokerCommunicationException);\n+            Assert.assertSame(((BrokerCommunicationException) e).getType(), CONNECTION_ERROR);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NDE0OA=="}, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTU0MTkxOnYy", "diffSide": "RIGHT", "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/mock/MockContextForBoundServiceConnectionFailed.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowMTowOFrOHoiMjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODowNToxNFrOHpJ8Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NTM1OA==", "bodyText": "might be nice to parameterize this thing so you could make it throw them all by using a static factory that takes the exception to throw.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512265358", "createdAt": "2020-10-26T21:01:08Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/mock/MockContextForBoundServiceConnectionFailed.java", "diffHunk": "@@ -0,0 +1,43 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc.mock;\n+\n+import android.os.IInterface;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.internal.broker.BoundServiceClient;\n+\n+import org.robolectric.annotation.Implements;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+@Implements(BoundServiceClient.class)\n+public class MockContextForBoundServiceConnectionFailed<T extends IInterface> {\n+    protected @NonNull T connect(@NonNull final String targetServicePackageName)\n+            throws ClientException, InterruptedException, TimeoutException, ExecutionException {\n+        throw new TimeoutException(\"Connection timed out\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ0MDAzMA==", "bodyText": "can you parameterize a shadow class? (I couldn't find a way to do so)", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512440030", "createdAt": "2020-10-27T06:19:35Z", "author": {"login": "rpdome"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/mock/MockContextForBoundServiceConnectionFailed.java", "diffHunk": "@@ -0,0 +1,43 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc.mock;\n+\n+import android.os.IInterface;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.internal.broker.BoundServiceClient;\n+\n+import org.robolectric.annotation.Implements;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+@Implements(BoundServiceClient.class)\n+public class MockContextForBoundServiceConnectionFailed<T extends IInterface> {\n+    protected @NonNull T connect(@NonNull final String targetServicePackageName)\n+            throws ClientException, InterruptedException, TimeoutException, ExecutionException {\n+        throw new TimeoutException(\"Connection timed out\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NTM1OA=="}, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgzNDE5MQ==", "bodyText": "I was thinking more about whether a shadow is the right way to deal with this, since BoundServiceClient is, I think, our own class.  We shouldn't need to use a shadow for it.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512834191", "createdAt": "2020-10-27T16:18:11Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/mock/MockContextForBoundServiceConnectionFailed.java", "diffHunk": "@@ -0,0 +1,43 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc.mock;\n+\n+import android.os.IInterface;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.internal.broker.BoundServiceClient;\n+\n+import org.robolectric.annotation.Implements;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+@Implements(BoundServiceClient.class)\n+public class MockContextForBoundServiceConnectionFailed<T extends IInterface> {\n+    protected @NonNull T connect(@NonNull final String targetServicePackageName)\n+            throws ClientException, InterruptedException, TimeoutException, ExecutionException {\n+        throw new TimeoutException(\"Connection timed out\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NTM1OA=="}, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkxNjUxNQ==", "bodyText": "we don't necessarily need shadow, but IMO it's easier/cleaner to implement this way.\nRight now, each method are calling testOperationXXXXX(), and that function is pulling the strategy object from getStrategy(). If we don't use shadow, we would have to supply IIpcStrategy object in every methods, across all 3 strategies.\nShadowing allows us to easily modify the injected object in specific test cases.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512916515", "createdAt": "2020-10-27T18:05:14Z", "author": {"login": "rpdome"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/mock/MockContextForBoundServiceConnectionFailed.java", "diffHunk": "@@ -0,0 +1,43 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc.mock;\n+\n+import android.os.IInterface;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.internal.broker.BoundServiceClient;\n+\n+import org.robolectric.annotation.Implements;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+@Implements(BoundServiceClient.class)\n+public class MockContextForBoundServiceConnectionFailed<T extends IInterface> {\n+    protected @NonNull T connect(@NonNull final String targetServicePackageName)\n+            throws ClientException, InterruptedException, TimeoutException, ExecutionException {\n+        throw new TimeoutException(\"Connection timed out\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NTM1OA=="}, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTU0NDQ2OnYy", "diffSide": "RIGHT", "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/mock/MockContextForBoundServiceWithSuccessResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowMTo1MFrOHoiOGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzoyNTowN1rOHoqEpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NTc1NA==", "bodyText": "Does it matter what this returns?  If we're really expecting that it isn't called, throw UnsupportedOperationException and then you'll know if that idea changes.  If it is being called, what happenes if it doesn't return null?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512265754", "createdAt": "2020-10-26T21:01:50Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/mock/MockContextForBoundServiceWithSuccessResult.java", "diffHunk": "@@ -0,0 +1,89 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc.mock;\n+\n+import android.content.Intent;\n+import android.os.Bundle;\n+import android.os.IBinder;\n+import android.os.IInterface;\n+import android.os.RemoteException;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.IMicrosoftAuthService;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.internal.broker.BoundServiceClient;\n+import com.microsoft.identity.common.internal.ipc.IpcStrategyTests;\n+\n+import org.robolectric.annotation.Implements;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+@Implements(BoundServiceClient.class)\n+public class MockContextForBoundServiceWithSuccessResult<T extends IInterface> {\n+    protected @NonNull T connect(@NonNull final String targetServicePackageName)\n+            throws ClientException, InterruptedException, TimeoutException, ExecutionException {\n+        final IMicrosoftAuthService authService = new IMicrosoftAuthService() {\n+            @Override public IBinder asBinder() {\n+                return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5NDQwNg==", "bodyText": "We don't really use it here. (it should be used if we're doing the actual bind)", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512394406", "createdAt": "2020-10-27T03:25:07Z", "author": {"login": "rpdome"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/mock/MockContextForBoundServiceWithSuccessResult.java", "diffHunk": "@@ -0,0 +1,89 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc.mock;\n+\n+import android.content.Intent;\n+import android.os.Bundle;\n+import android.os.IBinder;\n+import android.os.IInterface;\n+import android.os.RemoteException;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.IMicrosoftAuthService;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.internal.broker.BoundServiceClient;\n+import com.microsoft.identity.common.internal.ipc.IpcStrategyTests;\n+\n+import org.robolectric.annotation.Implements;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+@Implements(BoundServiceClient.class)\n+public class MockContextForBoundServiceWithSuccessResult<T extends IInterface> {\n+    protected @NonNull T connect(@NonNull final String targetServicePackageName)\n+            throws ClientException, InterruptedException, TimeoutException, ExecutionException {\n+        final IMicrosoftAuthService authService = new IMicrosoftAuthService() {\n+            @Override public IBinder asBinder() {\n+                return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NTc1NA=="}, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTU1MDUzOnYy", "diffSide": "RIGHT", "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowMzozNVrOHoiRuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzoxNTo1NlrOHop7fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NjY4MQ==", "bodyText": "Do we need to use a fake one?  Could we actually just pull a sample Bundle from the actual code?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512266681", "createdAt": "2020-10-26T21:03:35Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java", "diffHunk": "@@ -0,0 +1,178 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc;\n+\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.BROKER_GET_KEY_FROM_INACTIVE_BROKER;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_ACQUIRE_TOKEN_SILENT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_ACCOUNTS;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_DEVICE_MODE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_HELLO;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_REMOVE_ACCOUNT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_SIGN_OUT_FROM_SHARED_DEVICE;\n+\n+/**\n+ * IMPORTANT: This class must cover EVERY {@link com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation}.\n+ */\n+public abstract class IpcStrategyTests {\n+\n+    abstract IIpcStrategy getStrategy();\n+\n+    @Test\n+    public void testMsalHello() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    @Test\n+    public void testMsalGetIntentForInteractiveRequest() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST));\n+    }\n+\n+    @Test\n+    public void testMsalAcquireTokenSilent() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_ACQUIRE_TOKEN_SILENT));\n+    }\n+\n+    @Test\n+    public void testMsalGetAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_ACCOUNTS));\n+    }\n+\n+    @Test\n+    public void testMsalRemoveAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_REMOVE_ACCOUNT));\n+    }\n+\n+    @Test\n+    public void testMsalGetDeviceMode() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_DEVICE_MODE));\n+    }\n+\n+    @Test\n+    public void testGetCurrentAccountInSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testMsalSignOutFromSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_SIGN_OUT_FROM_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testBrokerGetKeyFromInactiveBroker() {\n+        testOperationNotSupportedOnClientSide(getMockRequestBundle(BROKER_GET_KEY_FROM_INACTIVE_BROKER));\n+    }\n+\n+    @Test\n+    public void testIpcFailed() {\n+        testIpcConnectionFailed(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    protected BrokerOperationBundle getMockRequestBundle(final BrokerOperationBundle.Operation operation) {\n+        final Bundle bundle = new Bundle();\n+        bundle.putBoolean(\"REQUEST_BUNDLE\", true);\n+\n+        return new BrokerOperationBundle(operation, \"MOCK_BROKER\", bundle);\n+    }\n+\n+    public static Bundle getMockIpcResultBundle() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MjA2MA==", "bodyText": "I intentionally did not use the actual sample bundle - since that depends on the MSAL-Broker protocol.\nThis test case should be protocol-agnostic.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512392060", "createdAt": "2020-10-27T03:15:56Z", "author": {"login": "rpdome"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java", "diffHunk": "@@ -0,0 +1,178 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc;\n+\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.BROKER_GET_KEY_FROM_INACTIVE_BROKER;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_ACQUIRE_TOKEN_SILENT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_ACCOUNTS;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_DEVICE_MODE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_HELLO;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_REMOVE_ACCOUNT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_SIGN_OUT_FROM_SHARED_DEVICE;\n+\n+/**\n+ * IMPORTANT: This class must cover EVERY {@link com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation}.\n+ */\n+public abstract class IpcStrategyTests {\n+\n+    abstract IIpcStrategy getStrategy();\n+\n+    @Test\n+    public void testMsalHello() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    @Test\n+    public void testMsalGetIntentForInteractiveRequest() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST));\n+    }\n+\n+    @Test\n+    public void testMsalAcquireTokenSilent() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_ACQUIRE_TOKEN_SILENT));\n+    }\n+\n+    @Test\n+    public void testMsalGetAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_ACCOUNTS));\n+    }\n+\n+    @Test\n+    public void testMsalRemoveAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_REMOVE_ACCOUNT));\n+    }\n+\n+    @Test\n+    public void testMsalGetDeviceMode() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_DEVICE_MODE));\n+    }\n+\n+    @Test\n+    public void testGetCurrentAccountInSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testMsalSignOutFromSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_SIGN_OUT_FROM_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testBrokerGetKeyFromInactiveBroker() {\n+        testOperationNotSupportedOnClientSide(getMockRequestBundle(BROKER_GET_KEY_FROM_INACTIVE_BROKER));\n+    }\n+\n+    @Test\n+    public void testIpcFailed() {\n+        testIpcConnectionFailed(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    protected BrokerOperationBundle getMockRequestBundle(final BrokerOperationBundle.Operation operation) {\n+        final Bundle bundle = new Bundle();\n+        bundle.putBoolean(\"REQUEST_BUNDLE\", true);\n+\n+        return new BrokerOperationBundle(operation, \"MOCK_BROKER\", bundle);\n+    }\n+\n+    public static Bundle getMockIpcResultBundle() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NjY4MQ=="}, "originalCommit": {"oid": "e445dae9a949cd0deb5acba63030ed790ed36558"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzIwOTEzOnYy", "diffSide": "RIGHT", "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/mock/ShadowBoundServiceClientConnectionFailed.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjoxNTo0OFrOHpEzAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjoxNTo0OFrOHpEzAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgzMjI1Ng==", "bodyText": "We're shadowing our own class here.  There's probably a better way.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512832256", "createdAt": "2020-10-27T16:15:48Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/mock/ShadowBoundServiceClientConnectionFailed.java", "diffHunk": "@@ -0,0 +1,43 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc.mock;\n+\n+import android.os.IInterface;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.internal.broker.BoundServiceClient;\n+\n+import org.robolectric.annotation.Implements;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+@Implements(BoundServiceClient.class)\n+public class ShadowBoundServiceClientConnectionFailed<T extends IInterface> {\n+    protected @NonNull T connect(@NonNull final String targetServicePackageName)\n+            throws ClientException, InterruptedException, TimeoutException, ExecutionException {\n+        throw new TimeoutException(\"Connection timed out\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be2c7f58399613de7d3f17033ed72718a6d01852"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2040, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}