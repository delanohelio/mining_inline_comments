{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2OTg4NDMz", "number": 893, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNzo0NzoxM1rOD04qPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMDozMzoxMlrOD09VcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzgwODYwOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNzo0NzoxM1rOGKDGoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOToxOToxMVrOGKHAqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE4OTc5Mw==", "bodyText": "Remove this comment, may add more confusion than clarity", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/893#discussion_r413189793", "createdAt": "2020-04-22T17:47:13Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -552,6 +553,76 @@ public ICacheRecord load(@NonNull final String clientId,\n                 null // not applicable\n         );\n \n+        {\n+            // If we didn't find an RT in the cache, this could be a \"TSL-seed\" or \"dual-client stack\"\n+            // scenario\n+            //\n+            // Defining these terms:\n+            // TSL-seed: another 1P TSL integrated app has put a token into our cache so we can\n+            //     pick it up\n+            //\n+            // Dual-Client stack: two FoCI-enabled app registrations are sharing a single binary\n+            //     and accordingly, can share RTs.\n+            //     Examples for this might be TFL/TFW - which uses multiple client ids to enable\n+            //     different scenarios depending on enterprise vs. consumer usage\n+\n+            // Unlike the broker, where we check if an app is FoCI prior to making a network call\n+            // with an arbitrary FoCI RT we find in the cache, if we're in standalone mode and find\n+            // a FoCI RT in the cache, the current app must also be FoCI (!!!)\n+            //\n+            // Making the assumption that the current client id can use any FoCI RT we find in the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52ccd794f299a9e14544114a0992e4deabeaacab"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIwMzkxOA==", "bodyText": "I would prefer to keep the comment, I think it is quite helpful.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/893#discussion_r413203918", "createdAt": "2020-04-22T18:07:01Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -552,6 +553,76 @@ public ICacheRecord load(@NonNull final String clientId,\n                 null // not applicable\n         );\n \n+        {\n+            // If we didn't find an RT in the cache, this could be a \"TSL-seed\" or \"dual-client stack\"\n+            // scenario\n+            //\n+            // Defining these terms:\n+            // TSL-seed: another 1P TSL integrated app has put a token into our cache so we can\n+            //     pick it up\n+            //\n+            // Dual-Client stack: two FoCI-enabled app registrations are sharing a single binary\n+            //     and accordingly, can share RTs.\n+            //     Examples for this might be TFL/TFW - which uses multiple client ids to enable\n+            //     different scenarios depending on enterprise vs. consumer usage\n+\n+            // Unlike the broker, where we check if an app is FoCI prior to making a network call\n+            // with an arbitrary FoCI RT we find in the cache, if we're in standalone mode and find\n+            // a FoCI RT in the cache, the current app must also be FoCI (!!!)\n+            //\n+            // Making the assumption that the current client id can use any FoCI RT we find in the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE4OTc5Mw=="}, "originalCommit": {"oid": "52ccd794f299a9e14544114a0992e4deabeaacab"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1MTE3Ng==", "bodyText": "Ok, will re-add with some slightly modified language based on feedback I received offline", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/893#discussion_r413251176", "createdAt": "2020-04-22T19:15:10Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -552,6 +553,76 @@ public ICacheRecord load(@NonNull final String clientId,\n                 null // not applicable\n         );\n \n+        {\n+            // If we didn't find an RT in the cache, this could be a \"TSL-seed\" or \"dual-client stack\"\n+            // scenario\n+            //\n+            // Defining these terms:\n+            // TSL-seed: another 1P TSL integrated app has put a token into our cache so we can\n+            //     pick it up\n+            //\n+            // Dual-Client stack: two FoCI-enabled app registrations are sharing a single binary\n+            //     and accordingly, can share RTs.\n+            //     Examples for this might be TFL/TFW - which uses multiple client ids to enable\n+            //     different scenarios depending on enterprise vs. consumer usage\n+\n+            // Unlike the broker, where we check if an app is FoCI prior to making a network call\n+            // with an arbitrary FoCI RT we find in the cache, if we're in standalone mode and find\n+            // a FoCI RT in the cache, the current app must also be FoCI (!!!)\n+            //\n+            // Making the assumption that the current client id can use any FoCI RT we find in the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE4OTc5Mw=="}, "originalCommit": {"oid": "52ccd794f299a9e14544114a0992e4deabeaacab"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1MzgwMg==", "bodyText": "Readded in 63183e3", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/893#discussion_r413253802", "createdAt": "2020-04-22T19:19:11Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -552,6 +553,76 @@ public ICacheRecord load(@NonNull final String clientId,\n                 null // not applicable\n         );\n \n+        {\n+            // If we didn't find an RT in the cache, this could be a \"TSL-seed\" or \"dual-client stack\"\n+            // scenario\n+            //\n+            // Defining these terms:\n+            // TSL-seed: another 1P TSL integrated app has put a token into our cache so we can\n+            //     pick it up\n+            //\n+            // Dual-Client stack: two FoCI-enabled app registrations are sharing a single binary\n+            //     and accordingly, can share RTs.\n+            //     Examples for this might be TFL/TFW - which uses multiple client ids to enable\n+            //     different scenarios depending on enterprise vs. consumer usage\n+\n+            // Unlike the broker, where we check if an app is FoCI prior to making a network call\n+            // with an arbitrary FoCI RT we find in the cache, if we're in standalone mode and find\n+            // a FoCI RT in the cache, the current app must also be FoCI (!!!)\n+            //\n+            // Making the assumption that the current client id can use any FoCI RT we find in the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE4OTc5Mw=="}, "originalCommit": {"oid": "52ccd794f299a9e14544114a0992e4deabeaacab"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2Nzg5NTMwOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODowNTo0MlrOGKD6OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODozMjoyOVrOGKFD-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIwMzAwMQ==", "bodyText": "Are there any (or could there be any) first party apps that are not part of FoCI for some reason?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/893#discussion_r413203001", "createdAt": "2020-04-22T18:05:42Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -552,6 +553,76 @@ public ICacheRecord load(@NonNull final String clientId,\n                 null // not applicable\n         );\n \n+        {\n+            // If we didn't find an RT in the cache, this could be a \"TSL-seed\" or \"dual-client stack\"\n+            // scenario\n+            //\n+            // Defining these terms:\n+            // TSL-seed: another 1P TSL integrated app has put a token into our cache so we can\n+            //     pick it up\n+            //\n+            // Dual-Client stack: two FoCI-enabled app registrations are sharing a single binary\n+            //     and accordingly, can share RTs.\n+            //     Examples for this might be TFL/TFW - which uses multiple client ids to enable\n+            //     different scenarios depending on enterprise vs. consumer usage\n+\n+            // Unlike the broker, where we check if an app is FoCI prior to making a network call\n+            // with an arbitrary FoCI RT we find in the cache, if we're in standalone mode and find\n+            // a FoCI RT in the cache, the current app must also be FoCI (!!!)\n+            //\n+            // Making the assumption that the current client id can use any FoCI RT we find in the\n+            // cache is strictly contingent that app developers NOT mix 1P & 3P registrations into\n+            // the same binary. If you do this, Bad Things will happen and you'll get confusing\n+            // errors that the RT used doesn't match the client app registration. Also, this\n+            // assumption means we don't need to implement \"FoCI probing\" and/or track FoCI app meta\n+\n+            if (refreshTokens.isEmpty()) {\n+                // Look for an arbitrary RT matching the current user.\n+                // If we find one, check that it is FoCI, if it is, assume it works.\n+                final List<Credential> fallbackRts = mAccountCredentialCache.getCredentialsFilteredBy(\n+                        account.getHomeAccountId(),\n+                        account.getEnvironment(),\n+                        CredentialType.RefreshToken,\n+                        null, // wildcard (*)\n+                        isMultiResourceCapable\n+                                ? null // wildcard (*)\n+                                : account.getRealm(),\n+                        isMultiResourceCapable\n+                                ? null // wildcard (*)\n+                                : target,\n+                        null // not applicable\n+                );\n+\n+                if (!fallbackRts.isEmpty()) {\n+                    Logger.verbose(\n+                            TAG + methodName,\n+                            \"Inspecting fallback RTs for a FoCI match.\"\n+                    );\n+\n+                    // Any arbitrary RT should be OK -- if multiple clients are stacked, they're either", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52ccd794f299a9e14544114a0992e4deabeaacab"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIyMTg4Mw==", "bodyText": "Yes, we do have 1P apps that are not FoCI. They won't benefit from these changes\nHad an offline sync w/ @shoatman -- the output of our discussion was that any 1P app that plans to dual-client stack must have both be FoCI, or neither. We won't support a 'blended' model where one is and the other is not", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/893#discussion_r413221883", "createdAt": "2020-04-22T18:32:29Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -552,6 +553,76 @@ public ICacheRecord load(@NonNull final String clientId,\n                 null // not applicable\n         );\n \n+        {\n+            // If we didn't find an RT in the cache, this could be a \"TSL-seed\" or \"dual-client stack\"\n+            // scenario\n+            //\n+            // Defining these terms:\n+            // TSL-seed: another 1P TSL integrated app has put a token into our cache so we can\n+            //     pick it up\n+            //\n+            // Dual-Client stack: two FoCI-enabled app registrations are sharing a single binary\n+            //     and accordingly, can share RTs.\n+            //     Examples for this might be TFL/TFW - which uses multiple client ids to enable\n+            //     different scenarios depending on enterprise vs. consumer usage\n+\n+            // Unlike the broker, where we check if an app is FoCI prior to making a network call\n+            // with an arbitrary FoCI RT we find in the cache, if we're in standalone mode and find\n+            // a FoCI RT in the cache, the current app must also be FoCI (!!!)\n+            //\n+            // Making the assumption that the current client id can use any FoCI RT we find in the\n+            // cache is strictly contingent that app developers NOT mix 1P & 3P registrations into\n+            // the same binary. If you do this, Bad Things will happen and you'll get confusing\n+            // errors that the RT used doesn't match the client app registration. Also, this\n+            // assumption means we don't need to implement \"FoCI probing\" and/or track FoCI app meta\n+\n+            if (refreshTokens.isEmpty()) {\n+                // Look for an arbitrary RT matching the current user.\n+                // If we find one, check that it is FoCI, if it is, assume it works.\n+                final List<Credential> fallbackRts = mAccountCredentialCache.getCredentialsFilteredBy(\n+                        account.getHomeAccountId(),\n+                        account.getEnvironment(),\n+                        CredentialType.RefreshToken,\n+                        null, // wildcard (*)\n+                        isMultiResourceCapable\n+                                ? null // wildcard (*)\n+                                : account.getRealm(),\n+                        isMultiResourceCapable\n+                                ? null // wildcard (*)\n+                                : target,\n+                        null // not applicable\n+                );\n+\n+                if (!fallbackRts.isEmpty()) {\n+                    Logger.verbose(\n+                            TAG + methodName,\n+                            \"Inspecting fallback RTs for a FoCI match.\"\n+                    );\n+\n+                    // Any arbitrary RT should be OK -- if multiple clients are stacked, they're either", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIwMzAwMQ=="}, "originalCommit": {"oid": "52ccd794f299a9e14544114a0992e4deabeaacab"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzkyMTU0OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODoxMDo1OFrOGKEKqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOToxMzowNVrOGKGxhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIwNzIxMA==", "bodyText": "Left similar comment below, basically I want to know if some app can have multiple client id stacked, let's say three, and all of them are 1P registrations. Could there be case that even though all three are 1P, but for some reason one of them is not part of FoCI, whereas the other two are. Is this case possible? And should we implement probing for it?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/893#discussion_r413207210", "createdAt": "2020-04-22T18:10:58Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -552,6 +553,76 @@ public ICacheRecord load(@NonNull final String clientId,\n                 null // not applicable\n         );\n \n+        {\n+            // If we didn't find an RT in the cache, this could be a \"TSL-seed\" or \"dual-client stack\"\n+            // scenario\n+            //\n+            // Defining these terms:\n+            // TSL-seed: another 1P TSL integrated app has put a token into our cache so we can\n+            //     pick it up\n+            //\n+            // Dual-Client stack: two FoCI-enabled app registrations are sharing a single binary\n+            //     and accordingly, can share RTs.\n+            //     Examples for this might be TFL/TFW - which uses multiple client ids to enable\n+            //     different scenarios depending on enterprise vs. consumer usage\n+\n+            // Unlike the broker, where we check if an app is FoCI prior to making a network call\n+            // with an arbitrary FoCI RT we find in the cache, if we're in standalone mode and find\n+            // a FoCI RT in the cache, the current app must also be FoCI (!!!)\n+            //\n+            // Making the assumption that the current client id can use any FoCI RT we find in the\n+            // cache is strictly contingent that app developers NOT mix 1P & 3P registrations into\n+            // the same binary. If you do this, Bad Things will happen and you'll get confusing\n+            // errors that the RT used doesn't match the client app registration. Also, this\n+            // assumption means we don't need to implement \"FoCI probing\" and/or track FoCI app meta", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52ccd794f299a9e14544114a0992e4deabeaacab"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0OTkyNQ==", "bodyText": "See comment here -- we won't support this by-design. Not supporting it let's us dodge having to bring probe logic out of broker", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/893#discussion_r413249925", "createdAt": "2020-04-22T19:13:05Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -552,6 +553,76 @@ public ICacheRecord load(@NonNull final String clientId,\n                 null // not applicable\n         );\n \n+        {\n+            // If we didn't find an RT in the cache, this could be a \"TSL-seed\" or \"dual-client stack\"\n+            // scenario\n+            //\n+            // Defining these terms:\n+            // TSL-seed: another 1P TSL integrated app has put a token into our cache so we can\n+            //     pick it up\n+            //\n+            // Dual-Client stack: two FoCI-enabled app registrations are sharing a single binary\n+            //     and accordingly, can share RTs.\n+            //     Examples for this might be TFL/TFW - which uses multiple client ids to enable\n+            //     different scenarios depending on enterprise vs. consumer usage\n+\n+            // Unlike the broker, where we check if an app is FoCI prior to making a network call\n+            // with an arbitrary FoCI RT we find in the cache, if we're in standalone mode and find\n+            // a FoCI RT in the cache, the current app must also be FoCI (!!!)\n+            //\n+            // Making the assumption that the current client id can use any FoCI RT we find in the\n+            // cache is strictly contingent that app developers NOT mix 1P & 3P registrations into\n+            // the same binary. If you do this, Bad Things will happen and you'll get confusing\n+            // errors that the RT used doesn't match the client app registration. Also, this\n+            // assumption means we don't need to implement \"FoCI probing\" and/or track FoCI app meta", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIwNzIxMA=="}, "originalCommit": {"oid": "52ccd794f299a9e14544114a0992e4deabeaacab"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODAyMjg3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODozMzoyOVrOGKFGzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOToxMDo0M1rOGKGrzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIyMjYwNA==", "bodyText": "nit: Since finding refresh tokens is now complicated, should it be in its own (potentially set of) private method(s)?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/893#discussion_r413222604", "createdAt": "2020-04-22T18:33:29Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -552,6 +553,70 @@ public ICacheRecord load(@NonNull final String clientId,\n                 null // not applicable\n         );\n \n+        {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8209896f99f6548b3bdbef4f8dee156c59865fc7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIyNTc0NQ==", "bodyText": "Yeah, I'll take that feedback. This method becoming long", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/893#discussion_r413225745", "createdAt": "2020-04-22T18:38:09Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -552,6 +553,70 @@ public ICacheRecord load(@NonNull final String clientId,\n                 null // not applicable\n         );\n \n+        {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIyMjYwNA=="}, "originalCommit": {"oid": "8209896f99f6548b3bdbef4f8dee156c59865fc7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0ODQ2MA==", "bodyText": "Resolved via\n\na22f456\n\nTweaked javadoc in:\n\n3ab2e13", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/893#discussion_r413248460", "createdAt": "2020-04-22T19:10:43Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -552,6 +553,70 @@ public ICacheRecord load(@NonNull final String clientId,\n                 null // not applicable\n         );\n \n+        {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIyMjYwNA=="}, "originalCommit": {"oid": "8209896f99f6548b3bdbef4f8dee156c59865fc7"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODU3NDU2OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMDozMzoxMlrOGKKZ4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMToxNzo1M1rOGKMQLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMwOTQwOA==", "bodyText": "Is this a safe copy that we're adding to, with guaranteed mutability, for all implementations of the cache interface?  One would think, but the interface documentation is vague on what we're getting back here other than that it implements List.  Should we take a copy before we mutate it or relax the final modifier on the refreshTokens reference so we can just reassign it since we only want the first element anyway?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/893#discussion_r413309408", "createdAt": "2020-04-22T20:33:12Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -552,6 +552,35 @@ public ICacheRecord load(@NonNull final String clientId,\n                 null // not applicable\n         );\n \n+        if (refreshTokens.isEmpty()) {\n+            // If we didn't find an RT in the cache, this could be a \"TSL-seed\" or \"dual-client stack\"\n+            // scenario\n+            //\n+            // Defining these terms:\n+            // TSL-seed: another 1P TSL integrated app has put a token into our cache so we can\n+            //     pick it up\n+            //\n+            // Dual-Client stack: two FoCI-enabled app registrations are sharing a single binary\n+            //     and accordingly, can share RTs.\n+            //     Examples for this might be TFL/TFW - which uses multiple client ids to enable\n+            //     different scenarios depending on enterprise vs. consumer usage\n+\n+            // Unlike the broker, where we check if an app is FoCI prior to making a network call\n+            // with an arbitrary FoCI RT we find in the cache, if we're in standalone mode and find\n+            // a FoCI RT in the cache, the current app must also be FoCI (!!!)\n+            //\n+            // Making the assumption that the current client id can use any FoCI RT we find in the\n+            // cache is strictly contingent that app developers NOT mix FoCI/non-FoCI registrations\n+            // into same binary. If you do this, you'll get confusing errors that the RT used doesn't\n+            // match the client app registration. This assumption means we don't need to implement\n+            // \"FoCI probing\" and/or track FoCI app meta\n+            final Credential fallbackFrt = getFamilyRefreshTokenForAccount(account);\n+\n+            if (null != fallbackFrt) {\n+                refreshTokens.add(fallbackFrt);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ecfac346edd4b2a6077f8b127faa28915cd2df0"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMzMTAxMA==", "bodyText": "The List is mutable, but as you mention, the interface is vague on this point.\nI'll take the suggestion to remove the final modifier and will reassign the List -- API vagueries should ideally be ironed out as well so I'll spot check classes and make updates to the javadoc where appropriate as part of this PR\nThere's probably >1 interface floating around here that is ambiguous on the mutability/immutability of the resulting Collection. As you see them, feel free to file an issue (or plural issues) if you see more places like that this that need clarity and those can be addressed either piecemeal or as part of a larger effort", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/893#discussion_r413331010", "createdAt": "2020-04-22T21:03:13Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -552,6 +552,35 @@ public ICacheRecord load(@NonNull final String clientId,\n                 null // not applicable\n         );\n \n+        if (refreshTokens.isEmpty()) {\n+            // If we didn't find an RT in the cache, this could be a \"TSL-seed\" or \"dual-client stack\"\n+            // scenario\n+            //\n+            // Defining these terms:\n+            // TSL-seed: another 1P TSL integrated app has put a token into our cache so we can\n+            //     pick it up\n+            //\n+            // Dual-Client stack: two FoCI-enabled app registrations are sharing a single binary\n+            //     and accordingly, can share RTs.\n+            //     Examples for this might be TFL/TFW - which uses multiple client ids to enable\n+            //     different scenarios depending on enterprise vs. consumer usage\n+\n+            // Unlike the broker, where we check if an app is FoCI prior to making a network call\n+            // with an arbitrary FoCI RT we find in the cache, if we're in standalone mode and find\n+            // a FoCI RT in the cache, the current app must also be FoCI (!!!)\n+            //\n+            // Making the assumption that the current client id can use any FoCI RT we find in the\n+            // cache is strictly contingent that app developers NOT mix FoCI/non-FoCI registrations\n+            // into same binary. If you do this, you'll get confusing errors that the RT used doesn't\n+            // match the client app registration. This assumption means we don't need to implement\n+            // \"FoCI probing\" and/or track FoCI app meta\n+            final Credential fallbackFrt = getFamilyRefreshTokenForAccount(account);\n+\n+            if (null != fallbackFrt) {\n+                refreshTokens.add(fallbackFrt);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMwOTQwOA=="}, "originalCommit": {"oid": "2ecfac346edd4b2a6077f8b127faa28915cd2df0"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMzOTY5Mg==", "bodyText": "Javadoc/mutability clarifed in:\n\n7df4abf\n\nList reinit + add (even tho we know List is mutable) in:\n\na1b4f1b\n\nStrictly speaking we could take the attitude that the changes in 7df4abf make a1b4f1b unnecessary, but I'm fine to incorporate that original suggestion and leave as-is", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/893#discussion_r413339692", "createdAt": "2020-04-22T21:17:53Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -552,6 +552,35 @@ public ICacheRecord load(@NonNull final String clientId,\n                 null // not applicable\n         );\n \n+        if (refreshTokens.isEmpty()) {\n+            // If we didn't find an RT in the cache, this could be a \"TSL-seed\" or \"dual-client stack\"\n+            // scenario\n+            //\n+            // Defining these terms:\n+            // TSL-seed: another 1P TSL integrated app has put a token into our cache so we can\n+            //     pick it up\n+            //\n+            // Dual-Client stack: two FoCI-enabled app registrations are sharing a single binary\n+            //     and accordingly, can share RTs.\n+            //     Examples for this might be TFL/TFW - which uses multiple client ids to enable\n+            //     different scenarios depending on enterprise vs. consumer usage\n+\n+            // Unlike the broker, where we check if an app is FoCI prior to making a network call\n+            // with an arbitrary FoCI RT we find in the cache, if we're in standalone mode and find\n+            // a FoCI RT in the cache, the current app must also be FoCI (!!!)\n+            //\n+            // Making the assumption that the current client id can use any FoCI RT we find in the\n+            // cache is strictly contingent that app developers NOT mix FoCI/non-FoCI registrations\n+            // into same binary. If you do this, you'll get confusing errors that the RT used doesn't\n+            // match the client app registration. This assumption means we don't need to implement\n+            // \"FoCI probing\" and/or track FoCI app meta\n+            final Credential fallbackFrt = getFamilyRefreshTokenForAccount(account);\n+\n+            if (null != fallbackFrt) {\n+                refreshTokens.add(fallbackFrt);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMwOTQwOA=="}, "originalCommit": {"oid": "2ecfac346edd4b2a6077f8b127faa28915cd2df0"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2345, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}