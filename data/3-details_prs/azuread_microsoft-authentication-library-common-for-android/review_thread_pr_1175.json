{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzOTMyNjc4", "number": 1175, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwNjoxNDo1MFrOFJ7_9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yN1QyMTozNzoxNlrOGDrYkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTY0NTM1OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/perf_tool/Gen3MeasurementsData.cs", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwNjoxNDo1MFrOIMeF_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNzoyNTo1MlrOIP1SAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk0Njg3Nw==", "bodyText": "consider using better name. Gen3MeasurementsData -- doesn't provide clear info.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r549946877", "createdAt": "2020-12-30T06:14:50Z", "author": {"login": "dabbcomputers"}, "path": "uiautomationutilities/perf_tool/Gen3MeasurementsData.cs", "diffHunk": "@@ -0,0 +1,33 @@\n+\ufeffusing System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace PerfDiffResultMailer\n+{\n+    public class Gen3MeasurementsData : IEquatable<Gen3MeasurementsData>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b948c121c1d10691382b177b85eb017f5c2e810"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQ3MjUxNQ==", "bodyText": "Agreed,\nRenamed to MeasurementsData.cs", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r553472515", "createdAt": "2021-01-07T17:25:52Z", "author": {"login": "neeravagarwalmicrosoft"}, "path": "uiautomationutilities/perf_tool/Gen3MeasurementsData.cs", "diffHunk": "@@ -0,0 +1,33 @@\n+\ufeffusing System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace PerfDiffResultMailer\n+{\n+    public class Gen3MeasurementsData : IEquatable<Gen3MeasurementsData>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk0Njg3Nw=="}, "originalCommit": {"oid": "1b948c121c1d10691382b177b85eb017f5c2e810"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTY0ODAzOnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/perf_tool/MathUtils.cs", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwNjoxNjozNVrOIMeHQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNzoyNjoyNFrOIP1TQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk0NzIwMg==", "bodyText": "remove", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r549947202", "createdAt": "2020-12-30T06:16:35Z", "author": {"login": "dabbcomputers"}, "path": "uiautomationutilities/perf_tool/MathUtils.cs", "diffHunk": "@@ -0,0 +1,111 @@\n+\ufeffusing System;\n+using System.Collections.Generic;\n+using System.Linq;\n+\n+namespace PerfClTool.Measurement\n+{\n+    internal class MathUtils\n+    {\n+        public static double GetStdDeviation(List<double> values)\n+        {\n+            var average = values.Average();\n+            if (values.Count == 1)\n+            {\n+                return 0.0;\n+            }\n+\n+            var stdev = 0.0;\n+\n+            for (var n = 0; n < values.Count; n++)\n+            {\n+                stdev += Math.Pow(values[n] - average, 2);\n+            }\n+\n+            stdev = Math.Sqrt(stdev / (values.Count - 1));\n+\n+            return stdev;\n+        }\n+        public static double GetPercentile(List<double> values, int percentile)\n+        {\n+            if (percentile < 0 || percentile > 100)\n+            {\n+                throw new ArgumentException(\"Percentile can't be calculated for nonsensical index \" + percentile);\n+            }\n+\n+            if (values.Count == 1)\n+            {\n+                return values[0];\n+            }\n+\n+            values.Sort();\n+\n+            var n = percentile / 100.0 * (values.Count - 1) + 1.0;\n+            double left = 0.0, right = 0.0;\n+\n+            if (n >= 1)\n+            {\n+                left = values[(int)Math.Floor(n) - 1];\n+                right = values[(int)Math.Floor(n)];\n+            }\n+            else\n+            {\n+                left = values[0];\n+                right = values[1];\n+            }\n+\n+            if (left == right)\n+            {\n+                return left;\n+            }\n+\n+            var part = n - Math.Floor(n);\n+            return left + part * (right - left);\n+        }\n+\n+        public static List<double> GetMinSdSubset(List<double> values, int factor)\n+        {\n+            values.Sort();\n+            double average;\n+            if (values.Count == 1)\n+            {\n+                average = values[0];\n+            }\n+\n+            if (factor <= 0 || factor > 100)\n+            {\n+                throw new ArgumentException(\"Closest can't be calculated for nonsensical index \" + factor);\n+            }\n+\n+            var setSize = (int)(0.5 + (float)values.Count * factor / 100);\n+            //PerfConsole.LogInfoMessage(\"For a sample size of {0}, closest set size is {1}\", values.Count, setSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b948c121c1d10691382b177b85eb017f5c2e810"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQ3MjgzMw==", "bodyText": "Taken care of this.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r553472833", "createdAt": "2021-01-07T17:26:24Z", "author": {"login": "neeravagarwalmicrosoft"}, "path": "uiautomationutilities/perf_tool/MathUtils.cs", "diffHunk": "@@ -0,0 +1,111 @@\n+\ufeffusing System;\n+using System.Collections.Generic;\n+using System.Linq;\n+\n+namespace PerfClTool.Measurement\n+{\n+    internal class MathUtils\n+    {\n+        public static double GetStdDeviation(List<double> values)\n+        {\n+            var average = values.Average();\n+            if (values.Count == 1)\n+            {\n+                return 0.0;\n+            }\n+\n+            var stdev = 0.0;\n+\n+            for (var n = 0; n < values.Count; n++)\n+            {\n+                stdev += Math.Pow(values[n] - average, 2);\n+            }\n+\n+            stdev = Math.Sqrt(stdev / (values.Count - 1));\n+\n+            return stdev;\n+        }\n+        public static double GetPercentile(List<double> values, int percentile)\n+        {\n+            if (percentile < 0 || percentile > 100)\n+            {\n+                throw new ArgumentException(\"Percentile can't be calculated for nonsensical index \" + percentile);\n+            }\n+\n+            if (values.Count == 1)\n+            {\n+                return values[0];\n+            }\n+\n+            values.Sort();\n+\n+            var n = percentile / 100.0 * (values.Count - 1) + 1.0;\n+            double left = 0.0, right = 0.0;\n+\n+            if (n >= 1)\n+            {\n+                left = values[(int)Math.Floor(n) - 1];\n+                right = values[(int)Math.Floor(n)];\n+            }\n+            else\n+            {\n+                left = values[0];\n+                right = values[1];\n+            }\n+\n+            if (left == right)\n+            {\n+                return left;\n+            }\n+\n+            var part = n - Math.Floor(n);\n+            return left + part * (right - left);\n+        }\n+\n+        public static List<double> GetMinSdSubset(List<double> values, int factor)\n+        {\n+            values.Sort();\n+            double average;\n+            if (values.Count == 1)\n+            {\n+                average = values[0];\n+            }\n+\n+            if (factor <= 0 || factor > 100)\n+            {\n+                throw new ArgumentException(\"Closest can't be calculated for nonsensical index \" + factor);\n+            }\n+\n+            var setSize = (int)(0.5 + (float)values.Count * factor / 100);\n+            //PerfConsole.LogInfoMessage(\"For a sample size of {0}, closest set size is {1}\", values.Count, setSize);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk0NzIwMg=="}, "originalCommit": {"oid": "1b948c121c1d10691382b177b85eb017f5c2e810"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTY0ODkyOnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/perf_tool/MathUtils.cs", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwNjoxNzoxNFrOIMeHsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNzoyNjo0N1rOIP1UTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk0NzMxNQ==", "bodyText": "remove and check for other instances as well.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r549947315", "createdAt": "2020-12-30T06:17:14Z", "author": {"login": "dabbcomputers"}, "path": "uiautomationutilities/perf_tool/MathUtils.cs", "diffHunk": "@@ -0,0 +1,111 @@\n+\ufeffusing System;\n+using System.Collections.Generic;\n+using System.Linq;\n+\n+namespace PerfClTool.Measurement\n+{\n+    internal class MathUtils\n+    {\n+        public static double GetStdDeviation(List<double> values)\n+        {\n+            var average = values.Average();\n+            if (values.Count == 1)\n+            {\n+                return 0.0;\n+            }\n+\n+            var stdev = 0.0;\n+\n+            for (var n = 0; n < values.Count; n++)\n+            {\n+                stdev += Math.Pow(values[n] - average, 2);\n+            }\n+\n+            stdev = Math.Sqrt(stdev / (values.Count - 1));\n+\n+            return stdev;\n+        }\n+        public static double GetPercentile(List<double> values, int percentile)\n+        {\n+            if (percentile < 0 || percentile > 100)\n+            {\n+                throw new ArgumentException(\"Percentile can't be calculated for nonsensical index \" + percentile);\n+            }\n+\n+            if (values.Count == 1)\n+            {\n+                return values[0];\n+            }\n+\n+            values.Sort();\n+\n+            var n = percentile / 100.0 * (values.Count - 1) + 1.0;\n+            double left = 0.0, right = 0.0;\n+\n+            if (n >= 1)\n+            {\n+                left = values[(int)Math.Floor(n) - 1];\n+                right = values[(int)Math.Floor(n)];\n+            }\n+            else\n+            {\n+                left = values[0];\n+                right = values[1];\n+            }\n+\n+            if (left == right)\n+            {\n+                return left;\n+            }\n+\n+            var part = n - Math.Floor(n);\n+            return left + part * (right - left);\n+        }\n+\n+        public static List<double> GetMinSdSubset(List<double> values, int factor)\n+        {\n+            values.Sort();\n+            double average;\n+            if (values.Count == 1)\n+            {\n+                average = values[0];\n+            }\n+\n+            if (factor <= 0 || factor > 100)\n+            {\n+                throw new ArgumentException(\"Closest can't be calculated for nonsensical index \" + factor);\n+            }\n+\n+            var setSize = (int)(0.5 + (float)values.Count * factor / 100);\n+            //PerfConsole.LogInfoMessage(\"For a sample size of {0}, closest set size is {1}\", values.Count, setSize);\n+\n+            if (setSize <= 0)\n+            {\n+                throw new ArgumentException(\"Factor - {0} too small for {1} iterations \" + factor,\n+                    values.Count.ToString());\n+            }\n+\n+            var currLow = 0;\n+            var currHigh = setSize - 1;\n+            var globalLow = 0;\n+            var globalHigh = setSize - 1;\n+            double globalSd = int.MaxValue;\n+\n+            while (currHigh < values.Count)\n+            {\n+                var currSd = GetStdDeviation(values.GetRange(currLow, setSize));\n+                if (currSd <= globalSd)\n+                {\n+                    globalSd = currSd;\n+                    globalLow = currLow;\n+                    globalHigh = currHigh;\n+                }\n+                currHigh++;\n+                currLow++;\n+            }\n+            /*PerfConsole.LogInfoMessage(\"Closest Subset {0}%/{1} Range is {2} - {3} \", factor, values.Count, globalLow,\n+                globalHigh);*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b948c121c1d10691382b177b85eb017f5c2e810"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQ3MzEwMQ==", "bodyText": "Taken care of this.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r553473101", "createdAt": "2021-01-07T17:26:47Z", "author": {"login": "neeravagarwalmicrosoft"}, "path": "uiautomationutilities/perf_tool/MathUtils.cs", "diffHunk": "@@ -0,0 +1,111 @@\n+\ufeffusing System;\n+using System.Collections.Generic;\n+using System.Linq;\n+\n+namespace PerfClTool.Measurement\n+{\n+    internal class MathUtils\n+    {\n+        public static double GetStdDeviation(List<double> values)\n+        {\n+            var average = values.Average();\n+            if (values.Count == 1)\n+            {\n+                return 0.0;\n+            }\n+\n+            var stdev = 0.0;\n+\n+            for (var n = 0; n < values.Count; n++)\n+            {\n+                stdev += Math.Pow(values[n] - average, 2);\n+            }\n+\n+            stdev = Math.Sqrt(stdev / (values.Count - 1));\n+\n+            return stdev;\n+        }\n+        public static double GetPercentile(List<double> values, int percentile)\n+        {\n+            if (percentile < 0 || percentile > 100)\n+            {\n+                throw new ArgumentException(\"Percentile can't be calculated for nonsensical index \" + percentile);\n+            }\n+\n+            if (values.Count == 1)\n+            {\n+                return values[0];\n+            }\n+\n+            values.Sort();\n+\n+            var n = percentile / 100.0 * (values.Count - 1) + 1.0;\n+            double left = 0.0, right = 0.0;\n+\n+            if (n >= 1)\n+            {\n+                left = values[(int)Math.Floor(n) - 1];\n+                right = values[(int)Math.Floor(n)];\n+            }\n+            else\n+            {\n+                left = values[0];\n+                right = values[1];\n+            }\n+\n+            if (left == right)\n+            {\n+                return left;\n+            }\n+\n+            var part = n - Math.Floor(n);\n+            return left + part * (right - left);\n+        }\n+\n+        public static List<double> GetMinSdSubset(List<double> values, int factor)\n+        {\n+            values.Sort();\n+            double average;\n+            if (values.Count == 1)\n+            {\n+                average = values[0];\n+            }\n+\n+            if (factor <= 0 || factor > 100)\n+            {\n+                throw new ArgumentException(\"Closest can't be calculated for nonsensical index \" + factor);\n+            }\n+\n+            var setSize = (int)(0.5 + (float)values.Count * factor / 100);\n+            //PerfConsole.LogInfoMessage(\"For a sample size of {0}, closest set size is {1}\", values.Count, setSize);\n+\n+            if (setSize <= 0)\n+            {\n+                throw new ArgumentException(\"Factor - {0} too small for {1} iterations \" + factor,\n+                    values.Count.ToString());\n+            }\n+\n+            var currLow = 0;\n+            var currHigh = setSize - 1;\n+            var globalLow = 0;\n+            var globalHigh = setSize - 1;\n+            double globalSd = int.MaxValue;\n+\n+            while (currHigh < values.Count)\n+            {\n+                var currSd = GetStdDeviation(values.GetRange(currLow, setSize));\n+                if (currSd <= globalSd)\n+                {\n+                    globalSd = currSd;\n+                    globalLow = currLow;\n+                    globalHigh = currHigh;\n+                }\n+                currHigh++;\n+                currLow++;\n+            }\n+            /*PerfConsole.LogInfoMessage(\"Closest Subset {0}%/{1} Range is {2} - {3} \", factor, values.Count, globalLow,\n+                globalHigh);*/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk0NzMxNQ=="}, "originalCommit": {"oid": "1b948c121c1d10691382b177b85eb017f5c2e810"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTY1NTUwOnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/perf_tool/PerfData.cs", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwNjoyMzoxMFrOIMeLSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNzoyNjo1NlrOIP1Uuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk0ODIzMw==", "bodyText": "what are chances of changing this headers order?\nif its too frequent I would say do string comparison and return index from from a utility.\nint MapHeaderToIndex(token)\n{\n\nswitch(token):\n\ncase \"TimeStamp\":\n\nreturn 0;\n}", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r549948233", "createdAt": "2020-12-30T06:23:10Z", "author": {"login": "dabbcomputers"}, "path": "uiautomationutilities/perf_tool/PerfData.cs", "diffHunk": "@@ -0,0 +1,173 @@\n+\ufeffusing System;\n+using System.Collections.Generic;\n+using System.Globalization;\n+using System.IO;\n+using System.Linq;\n+using System.Text;\n+\n+namespace PerfClTool.Measurement\n+{\n+    internal class PerfData\n+    {\n+        public List<PerfDataRecord> PerfDataRecordsList = new List<PerfDataRecord>();\n+        private PerfDataRecord _headers;\n+        //private static readonly string s_perfMarkersNameMappingFile = Path.Combine(\"codemarkersMapping.csv\");\n+        public PerfData(string filePath)\n+        {\n+            if (!File.Exists(filePath))\n+            {\n+                throw new Exception($\"File not found {filePath}\");\n+            }\n+            PerfDataRecordsList = File.ReadLines(filePath)\n+                .Select(line => line.Split(','))\n+                .Select(tokens => new PerfDataRecord(\n+                    tokens[0], //TimeStamp\n+                    tokens[1], //Marker", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b948c121c1d10691382b177b85eb017f5c2e810"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQ3MzIxMQ==", "bodyText": "Taken care of this.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r553473211", "createdAt": "2021-01-07T17:26:56Z", "author": {"login": "neeravagarwalmicrosoft"}, "path": "uiautomationutilities/perf_tool/PerfData.cs", "diffHunk": "@@ -0,0 +1,173 @@\n+\ufeffusing System;\n+using System.Collections.Generic;\n+using System.Globalization;\n+using System.IO;\n+using System.Linq;\n+using System.Text;\n+\n+namespace PerfClTool.Measurement\n+{\n+    internal class PerfData\n+    {\n+        public List<PerfDataRecord> PerfDataRecordsList = new List<PerfDataRecord>();\n+        private PerfDataRecord _headers;\n+        //private static readonly string s_perfMarkersNameMappingFile = Path.Combine(\"codemarkersMapping.csv\");\n+        public PerfData(string filePath)\n+        {\n+            if (!File.Exists(filePath))\n+            {\n+                throw new Exception($\"File not found {filePath}\");\n+            }\n+            PerfDataRecordsList = File.ReadLines(filePath)\n+                .Select(line => line.Split(','))\n+                .Select(tokens => new PerfDataRecord(\n+                    tokens[0], //TimeStamp\n+                    tokens[1], //Marker", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk0ODIzMw=="}, "originalCommit": {"oid": "1b948c121c1d10691382b177b85eb017f5c2e810"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTM4NDY3OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/perf_tool/Gen3MeasurementsData.cs", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNjozMjowNFrOIPgnow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxNjo1MDowMFrOIVxDog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEzMzk4Nw==", "bodyText": "Comments please", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r553133987", "createdAt": "2021-01-07T06:32:04Z", "author": {"login": "Om83"}, "path": "uiautomationutilities/perf_tool/Gen3MeasurementsData.cs", "diffHunk": "@@ -0,0 +1,33 @@\n+\ufeffusing System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace PerfDiffResultMailer\n+{\n+    public class Gen3MeasurementsData : IEquatable<Gen3MeasurementsData>\n+    {\n+        public string ScenarioName { get; set; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e1fd7d8a5da711ba64fcc4757c54926909cd44f"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY5NDc1NA==", "bodyText": "I have added the comments. Thanks for the suggestion.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r559694754", "createdAt": "2021-01-18T16:50:00Z", "author": {"login": "neeravagarwalmicrosoft"}, "path": "uiautomationutilities/perf_tool/Gen3MeasurementsData.cs", "diffHunk": "@@ -0,0 +1,33 @@\n+\ufeffusing System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace PerfDiffResultMailer\n+{\n+    public class Gen3MeasurementsData : IEquatable<Gen3MeasurementsData>\n+    {\n+        public string ScenarioName { get; set; }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEzMzk4Nw=="}, "originalCommit": {"oid": "2e1fd7d8a5da711ba64fcc4757c54926909cd44f"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTM4NzU0OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/perf_tool/Gen3MeasurementsData.cs", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNjozMzoyMFrOIPgpIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxNjo1MjoxNVrOIVxIOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEzNDM2OQ==", "bodyText": "meaningful name here as well.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r553134369", "createdAt": "2021-01-07T06:33:20Z", "author": {"login": "Om83"}, "path": "uiautomationutilities/perf_tool/Gen3MeasurementsData.cs", "diffHunk": "@@ -0,0 +1,33 @@\n+\ufeffusing System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace PerfDiffResultMailer\n+{\n+    public class Gen3MeasurementsData : IEquatable<Gen3MeasurementsData>\n+    {\n+        public string ScenarioName { get; set; }\n+        public string ActivityName { get; set; }\n+        public string MeasurementName { get; set; }\n+\n+        public override bool Equals(object obj)\n+        {\n+            return this.Equals(obj as Gen3MeasurementsData);\n+        }\n+        public override int GetHashCode()\n+        {\n+            string x = this.MeasurementName + this.ScenarioName + this.ActivityName;\n+            return x.GetHashCode();\n+        }\n+        public bool Equals(Gen3MeasurementsData other)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e1fd7d8a5da711ba64fcc4757c54926909cd44f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY5NTkyOQ==", "bodyText": "Renamed \"Gen3MeasurementsData\" to \"MeasurementsData\". Thanks for the suggestion.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r559695929", "createdAt": "2021-01-18T16:52:15Z", "author": {"login": "neeravagarwalmicrosoft"}, "path": "uiautomationutilities/perf_tool/Gen3MeasurementsData.cs", "diffHunk": "@@ -0,0 +1,33 @@\n+\ufeffusing System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace PerfDiffResultMailer\n+{\n+    public class Gen3MeasurementsData : IEquatable<Gen3MeasurementsData>\n+    {\n+        public string ScenarioName { get; set; }\n+        public string ActivityName { get; set; }\n+        public string MeasurementName { get; set; }\n+\n+        public override bool Equals(object obj)\n+        {\n+            return this.Equals(obj as Gen3MeasurementsData);\n+        }\n+        public override int GetHashCode()\n+        {\n+            string x = this.MeasurementName + this.ScenarioName + this.ActivityName;\n+            return x.GetHashCode();\n+        }\n+        public bool Equals(Gen3MeasurementsData other)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEzNDM2OQ=="}, "originalCommit": {"oid": "2e1fd7d8a5da711ba64fcc4757c54926909cd44f"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTQwMTczOnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/perf_tool/Program.cs", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNjozOTo1OVrOIPgw8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxNjo1MDo0MFrOIVxFBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEzNjM2OA==", "bodyText": "Fix Name", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r553136368", "createdAt": "2021-01-07T06:39:59Z", "author": {"login": "Om83"}, "path": "uiautomationutilities/perf_tool/Program.cs", "diffHunk": "@@ -0,0 +1,14 @@\n+\ufeffusing System;\n+using TestScript;\n+\n+namespace ConsoleApp1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e1fd7d8a5da711ba64fcc4757c54926909cd44f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY5NTEwOQ==", "bodyText": "I have renamed the namespace to \"IdentityPerfTestApp\". Thanks for the suggestion.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r559695109", "createdAt": "2021-01-18T16:50:40Z", "author": {"login": "neeravagarwalmicrosoft"}, "path": "uiautomationutilities/perf_tool/Program.cs", "diffHunk": "@@ -0,0 +1,14 @@\n+\ufeffusing System;\n+using TestScript;\n+\n+namespace ConsoleApp1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEzNjM2OA=="}, "originalCommit": {"oid": "2e1fd7d8a5da711ba64fcc4757c54926909cd44f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTQwMzE5OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/perf_tool/Program.cs", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNjo0MDozNlrOIPgxtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxNjo1MToyOVrOIVxGqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEzNjU2Nw==", "bodyText": "Do we need this .. make it more meaningful", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r553136567", "createdAt": "2021-01-07T06:40:36Z", "author": {"login": "Om83"}, "path": "uiautomationutilities/perf_tool/Program.cs", "diffHunk": "@@ -0,0 +1,14 @@\n+\ufeffusing System;\n+using TestScript;\n+\n+namespace ConsoleApp1\n+{\n+    class Program\n+    {\n+        static void Main(string[] args)\n+        {\n+            Console.WriteLine(\"Hello World!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e1fd7d8a5da711ba64fcc4757c54926909cd44f"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY5NTUzMA==", "bodyText": "Removed the unnecessary print. Thanks for the suggestion.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r559695530", "createdAt": "2021-01-18T16:51:29Z", "author": {"login": "neeravagarwalmicrosoft"}, "path": "uiautomationutilities/perf_tool/Program.cs", "diffHunk": "@@ -0,0 +1,14 @@\n+\ufeffusing System;\n+using TestScript;\n+\n+namespace ConsoleApp1\n+{\n+    class Program\n+    {\n+        static void Main(string[] args)\n+        {\n+            Console.WriteLine(\"Hello World!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEzNjU2Nw=="}, "originalCommit": {"oid": "2e1fd7d8a5da711ba64fcc4757c54926909cd44f"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTQyMjAyOnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/perf_tool/Properties/launchSettings.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNjo0OToyOFrOIPg8VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxNjo1MTozOVrOIVxHAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEzOTI4NA==", "bodyText": "Please change this to androididentity@microsoft.com.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r553139284", "createdAt": "2021-01-07T06:49:28Z", "author": {"login": "Om83"}, "path": "uiautomationutilities/perf_tool/Properties/launchSettings.json", "diffHunk": "@@ -0,0 +1,8 @@\n+{\n+  \"profiles\": {\n+    \"ConsoleApp1\": {\n+      \"commandName\": \"Project\",\n+      \"commandLineArgs\": \"C:\\\\testdata\\\\ . PerfDataBase PerfDataTarget \\\"\\\" 696614 Pixel2 API28 21.11.3.3 21.11.3.4 MSALTestApp idlab1@msidlab4.onmicrosoft.com xxxxxxxx Neerav.Agarwal@microsoft.com MSALAcquireToken 696614\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e1fd7d8a5da711ba64fcc4757c54926909cd44f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY5NTYxNg==", "bodyText": "Done. Thanks for the suggestion.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r559695616", "createdAt": "2021-01-18T16:51:39Z", "author": {"login": "neeravagarwalmicrosoft"}, "path": "uiautomationutilities/perf_tool/Properties/launchSettings.json", "diffHunk": "@@ -0,0 +1,8 @@\n+{\n+  \"profiles\": {\n+    \"ConsoleApp1\": {\n+      \"commandName\": \"Project\",\n+      \"commandLineArgs\": \"C:\\\\testdata\\\\ . PerfDataBase PerfDataTarget \\\"\\\" 696614 Pixel2 API28 21.11.3.3 21.11.3.4 MSALTestApp idlab1@msidlab4.onmicrosoft.com xxxxxxxx Neerav.Agarwal@microsoft.com MSALAcquireToken 696614\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEzOTI4NA=="}, "originalCommit": {"oid": "2e1fd7d8a5da711ba64fcc4757c54926909cd44f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NzQ5NDU0OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/perf_tool/MathUtils.cs", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNjo1NDowMFrOIQZksA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxNjo0OTo0MVrOIVxC3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA2NzEyMA==", "bodyText": "Add license here and everywhere", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r554067120", "createdAt": "2021-01-08T16:54:00Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/perf_tool/MathUtils.cs", "diffHunk": "@@ -0,0 +1,108 @@\n+\ufeffusing System;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "daf8affc170850832e2d8c7ffccfef66a4a69071"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY5NDU1OA==", "bodyText": "Done. Thanks for the suggestion.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r559694558", "createdAt": "2021-01-18T16:49:41Z", "author": {"login": "neeravagarwalmicrosoft"}, "path": "uiautomationutilities/perf_tool/MathUtils.cs", "diffHunk": "@@ -0,0 +1,108 @@\n+\ufeffusing System;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA2NzEyMA=="}, "originalCommit": {"oid": "daf8affc170850832e2d8c7ffccfef66a4a69071"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5OTgyODQyOnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/perf_tool/MathUtils.cs", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNjo0MToyOVrOISKXVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxMDowMDowN1rOIVh1cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkxNTA5NQ==", "bodyText": "How many values are we expecting in this list?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r555915095", "createdAt": "2021-01-12T16:41:29Z", "author": {"login": "AdamBJohnsonx"}, "path": "uiautomationutilities/perf_tool/MathUtils.cs", "diffHunk": "@@ -0,0 +1,108 @@\n+\ufeffusing System;\n+using System.Collections.Generic;\n+using System.Linq;\n+\n+namespace PerfClTool.Measurement\n+{\n+    internal class MathUtils\n+    {\n+        public static double GetStdDeviation(List<double> values)\n+        {\n+            var average = values.Average();\n+            if (values.Count == 1)\n+            {\n+                return 0.0;\n+            }\n+\n+            var stdev = 0.0;\n+\n+            for (var n = 0; n < values.Count; n++)\n+            {\n+                stdev += Math.Pow(values[n] - average, 2);\n+            }\n+\n+            stdev = Math.Sqrt(stdev / (values.Count - 1));\n+\n+            return stdev;\n+        }\n+        public static double GetPercentile(List<double> values, int percentile)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec07808e7b488fb09b221c280e2aaee562a560a8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ0NTM2MQ==", "bodyText": "@AdamBJohnsonx , the number of times the test is running (Number of iterations of same scenario), will be the length of the list.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r559445361", "createdAt": "2021-01-18T10:00:07Z", "author": {"login": "neeravagarwalmicrosoft"}, "path": "uiautomationutilities/perf_tool/MathUtils.cs", "diffHunk": "@@ -0,0 +1,108 @@\n+\ufeffusing System;\n+using System.Collections.Generic;\n+using System.Linq;\n+\n+namespace PerfClTool.Measurement\n+{\n+    internal class MathUtils\n+    {\n+        public static double GetStdDeviation(List<double> values)\n+        {\n+            var average = values.Average();\n+            if (values.Count == 1)\n+            {\n+                return 0.0;\n+            }\n+\n+            var stdev = 0.0;\n+\n+            for (var n = 0; n < values.Count; n++)\n+            {\n+                stdev += Math.Pow(values[n] - average, 2);\n+            }\n+\n+            stdev = Math.Sqrt(stdev / (values.Count - 1));\n+\n+            return stdev;\n+        }\n+        public static double GetPercentile(List<double> values, int percentile)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkxNTA5NQ=="}, "originalCommit": {"oid": "ec07808e7b488fb09b221c280e2aaee562a560a8"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA0ODIyMTczOnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/perf_tool/MeasurementsStore.cs", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNVQwMDoxNDoxN1rOJgy8iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNVQwMDo0NDoyNlrOJgzgGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODM2ODkwNQ==", "bodyText": "If we're commenting this out, either say why or remove it?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r638368905", "createdAt": "2021-05-25T00:14:17Z", "author": {"login": "AdamBJohnsonx"}, "path": "uiautomationutilities/perf_tool/MeasurementsStore.cs", "diffHunk": "@@ -0,0 +1,151 @@\n+\ufeff//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+\n+using System;\n+using System.Collections.Generic;\n+//using PerfClTool.DbClasses;\n+using System.Linq;\n+\n+namespace PerfClTool.Measurement\n+{\n+    internal class MeasurementsStore\n+    {\n+        public static Dictionary<string, List<PerfMeasurementsSet>> AllScenarioMeasurements { get; private set; }\n+        static MeasurementsStore()\n+        {\n+            AllScenarioMeasurements = new Dictionary<string, List<PerfMeasurementsSet>>();\n+        }\n+\n+        public static void clear()\n+        {\n+            AllScenarioMeasurements = new Dictionary<string, List<PerfMeasurementsSet>>();\n+        }\n+\n+        public static void AddScenarioIterationMeasurements(String scenarioName, PerfData perfData, List<PerfMeasurementConfiguration> enabledMeasurementsConfiguration)\n+        {\n+            if (!AllScenarioMeasurements.ContainsKey(scenarioName))\n+            {\n+                AllScenarioMeasurements.Add(scenarioName, new List<PerfMeasurementsSet>());\n+                foreach (var measurementConfiguration in enabledMeasurementsConfiguration)\n+                {\n+                    AllScenarioMeasurements[scenarioName].Add(new PerfMeasurementsSet(measurementConfiguration));\n+                }\n+            }\n+            foreach (var measurementSet in AllScenarioMeasurements[scenarioName])\n+            {\n+                measurementSet.AddIterationMeasurement(perfData);\n+            }\n+        }\n+\n+        public static void GenerateAggregateMeasurements()\n+        {\n+            foreach (var measurementSetList in AllScenarioMeasurements.Values)\n+            {\n+                //Delete any measurementSet that has no actual data.\n+                measurementSetList.RemoveAll(x => x._iterationMeasurements.Count == 0);\n+                measurementSetList.ForEach(t => t.GenerateAggregateMeasurements());\n+            }\n+        }\n+\n+        public static void DumpResponseTimeSummaryToFile(String fileName)\n+        {\n+            PerfMeasurementsSet.AppendMeasurementSummaryHeadersToFile(fileName);\n+            foreach (var scenarioMeasurements in AllScenarioMeasurements)\n+            {\n+                AllScenarioMeasurements[scenarioMeasurements.Key].ForEach(t => t.AppendMeasurementSummaryToFile(fileName, scenarioMeasurements.Key, PerformanceMetricType.ResponseTime));\n+            }\n+        }\n+\n+        public static void DumpRssEndSummaryToFile(String fileName)\n+        {\n+            PerfMeasurementsSet.AppendMeasurementSummaryHeadersToFile(fileName);\n+            foreach (var scenarioMeasurements in AllScenarioMeasurements)\n+            {\n+                AllScenarioMeasurements[scenarioMeasurements.Key].ForEach(t => t.AppendMeasurementSummaryToFile(fileName, scenarioMeasurements.Key, PerformanceMetricType.RssEnd));\n+            }\n+        }\n+        public static void DumpVssEndSummaryToFile(String fileName)\n+        {\n+            PerfMeasurementsSet.AppendMeasurementSummaryHeadersToFile(fileName);\n+            foreach (var scenarioMeasurements in AllScenarioMeasurements)\n+            {\n+                AllScenarioMeasurements[scenarioMeasurements.Key].ForEach(t => t.AppendMeasurementSummaryToFile(fileName, scenarioMeasurements.Key, PerformanceMetricType.VssEnd));\n+            }\n+        }\n+\n+        public static void DumpAllMeasurementsDataToFile(String fileName)\n+        {\n+            foreach (var scenarioMeasurements in AllScenarioMeasurements)\n+            {\n+                AllScenarioMeasurements[scenarioMeasurements.Key].ForEach(t => t.AppendMeasurementsDataToFile(fileName, scenarioMeasurements.Key));\n+            }\n+        }\n+        /*public static void InsertMeasurementsInDb(String taskId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "708f967775f6c953d1edc806e95a33e85a1e23c3"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODM3ODAwOQ==", "bodyText": "+1", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r638378009", "createdAt": "2021-05-25T00:44:26Z", "author": {"login": "iambmelt"}, "path": "uiautomationutilities/perf_tool/MeasurementsStore.cs", "diffHunk": "@@ -0,0 +1,151 @@\n+\ufeff//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+\n+using System;\n+using System.Collections.Generic;\n+//using PerfClTool.DbClasses;\n+using System.Linq;\n+\n+namespace PerfClTool.Measurement\n+{\n+    internal class MeasurementsStore\n+    {\n+        public static Dictionary<string, List<PerfMeasurementsSet>> AllScenarioMeasurements { get; private set; }\n+        static MeasurementsStore()\n+        {\n+            AllScenarioMeasurements = new Dictionary<string, List<PerfMeasurementsSet>>();\n+        }\n+\n+        public static void clear()\n+        {\n+            AllScenarioMeasurements = new Dictionary<string, List<PerfMeasurementsSet>>();\n+        }\n+\n+        public static void AddScenarioIterationMeasurements(String scenarioName, PerfData perfData, List<PerfMeasurementConfiguration> enabledMeasurementsConfiguration)\n+        {\n+            if (!AllScenarioMeasurements.ContainsKey(scenarioName))\n+            {\n+                AllScenarioMeasurements.Add(scenarioName, new List<PerfMeasurementsSet>());\n+                foreach (var measurementConfiguration in enabledMeasurementsConfiguration)\n+                {\n+                    AllScenarioMeasurements[scenarioName].Add(new PerfMeasurementsSet(measurementConfiguration));\n+                }\n+            }\n+            foreach (var measurementSet in AllScenarioMeasurements[scenarioName])\n+            {\n+                measurementSet.AddIterationMeasurement(perfData);\n+            }\n+        }\n+\n+        public static void GenerateAggregateMeasurements()\n+        {\n+            foreach (var measurementSetList in AllScenarioMeasurements.Values)\n+            {\n+                //Delete any measurementSet that has no actual data.\n+                measurementSetList.RemoveAll(x => x._iterationMeasurements.Count == 0);\n+                measurementSetList.ForEach(t => t.GenerateAggregateMeasurements());\n+            }\n+        }\n+\n+        public static void DumpResponseTimeSummaryToFile(String fileName)\n+        {\n+            PerfMeasurementsSet.AppendMeasurementSummaryHeadersToFile(fileName);\n+            foreach (var scenarioMeasurements in AllScenarioMeasurements)\n+            {\n+                AllScenarioMeasurements[scenarioMeasurements.Key].ForEach(t => t.AppendMeasurementSummaryToFile(fileName, scenarioMeasurements.Key, PerformanceMetricType.ResponseTime));\n+            }\n+        }\n+\n+        public static void DumpRssEndSummaryToFile(String fileName)\n+        {\n+            PerfMeasurementsSet.AppendMeasurementSummaryHeadersToFile(fileName);\n+            foreach (var scenarioMeasurements in AllScenarioMeasurements)\n+            {\n+                AllScenarioMeasurements[scenarioMeasurements.Key].ForEach(t => t.AppendMeasurementSummaryToFile(fileName, scenarioMeasurements.Key, PerformanceMetricType.RssEnd));\n+            }\n+        }\n+        public static void DumpVssEndSummaryToFile(String fileName)\n+        {\n+            PerfMeasurementsSet.AppendMeasurementSummaryHeadersToFile(fileName);\n+            foreach (var scenarioMeasurements in AllScenarioMeasurements)\n+            {\n+                AllScenarioMeasurements[scenarioMeasurements.Key].ForEach(t => t.AppendMeasurementSummaryToFile(fileName, scenarioMeasurements.Key, PerformanceMetricType.VssEnd));\n+            }\n+        }\n+\n+        public static void DumpAllMeasurementsDataToFile(String fileName)\n+        {\n+            foreach (var scenarioMeasurements in AllScenarioMeasurements)\n+            {\n+                AllScenarioMeasurements[scenarioMeasurements.Key].ForEach(t => t.AppendMeasurementsDataToFile(fileName, scenarioMeasurements.Key));\n+            }\n+        }\n+        /*public static void InsertMeasurementsInDb(String taskId)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODM2ODkwNQ=="}, "originalCommit": {"oid": "708f967775f6c953d1edc806e95a33e85a1e23c3"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA0ODI0NDk0OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/.gitignore", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNVQwMDoyNDo1MVrOJgzJNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNVQwMDoyNDo1MVrOJgzJNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODM3MjE1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /perf_tool/obj/\n          \n          \n            \n            /perf_tool/obj/\n          \n          \n            \n            \n          \n      \n    \n    \n  \n\n(adding newline for EOF/posix compat)", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r638372150", "createdAt": "2021-05-25T00:24:51Z", "author": {"login": "iambmelt"}, "path": "uiautomationutilities/.gitignore", "diffHunk": "@@ -1 +1,3 @@\n /build\n+/perf_tool/.vs/\n+/perf_tool/obj/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "708f967775f6c953d1edc806e95a33e85a1e23c3"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA0ODI3NDA0OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/perf_tool/MathUtils.cs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNVQwMDozODo1M1rOJgzZeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNVQwMDozODo1M1rOJgzZeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODM3NjMxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public static double GetPercentile(List<double> values, int percentile)\n          \n          \n            \n            \n          \n          \n            \n                    public static double GetPercentile(List<double> values, int percentile)", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r638376314", "createdAt": "2021-05-25T00:38:53Z", "author": {"login": "iambmelt"}, "path": "uiautomationutilities/perf_tool/MathUtils.cs", "diffHunk": "@@ -0,0 +1,131 @@\n+\ufeff//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+\n+namespace PerfClTool.Measurement\n+{\n+    internal class MathUtils\n+    {\n+        public static double GetStdDeviation(List<double> values)\n+        {\n+            var average = values.Average();\n+            if (values.Count == 1)\n+            {\n+                return 0.0;\n+            }\n+\n+            var stdev = 0.0;\n+\n+            for (var n = 0; n < values.Count; n++)\n+            {\n+                stdev += Math.Pow(values[n] - average, 2);\n+            }\n+\n+            stdev = Math.Sqrt(stdev / (values.Count - 1));\n+\n+            return stdev;\n+        }\n+        public static double GetPercentile(List<double> values, int percentile)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65625c6d673afc86ec7477d919efb7fdc07c6a42"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA0ODI4NTI2OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/perf_tool/PerformanceMetric.cs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNVQwMDo0NDowOFrOJgzfog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNVQwMDo0NDowOFrOJgzfog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODM3Nzg5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                internal class ResponseTimeMetric : PerformanceMetric\n          \n          \n            \n            \n          \n          \n            \n                internal class ResponseTimeMetric : PerformanceMetric\n          \n      \n    \n    \n  \n\n(Just minor formatting)", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r638377890", "createdAt": "2021-05-25T00:44:08Z", "author": {"login": "iambmelt"}, "path": "uiautomationutilities/perf_tool/PerformanceMetric.cs", "diffHunk": "@@ -0,0 +1,95 @@\n+\ufeff//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+\n+using System;\n+\n+namespace PerfClTool.Measurement\n+{\n+    public enum PerformanceMetricType\n+    {\n+        ResponseTime,\n+        RssBegin,\n+        RssEnd,\n+        RssDelta,\n+        VssBegin,\n+        VssEnd,\n+        VssDelta\n+    }\n+\n+    internal abstract class PerformanceMetric\n+    {\n+        public abstract String Name { get; }\n+        public double MeasurementValue { get; set; }\n+        public PerformanceMetric(PerfDataRecord start, PerfDataRecord end){}\n+        public PerformanceMetric(Double value) { }\n+        public override string ToString() => MeasurementValue.ToString(format: \"F2\");\n+    }\n+    internal class ResponseTimeMetric : PerformanceMetric", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65625c6d673afc86ec7477d919efb7fdc07c6a42"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA0ODI4ODQzOnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/perf_tool/PerfData.cs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNVQwMDo0NTozNlrOJgzhWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNVQwMDo0NTozNlrOJgzhWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODM3ODMzMA==", "bodyText": "Same feedback here - comment?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r638378330", "createdAt": "2021-05-25T00:45:36Z", "author": {"login": "iambmelt"}, "path": "uiautomationutilities/perf_tool/PerfData.cs", "diffHunk": "@@ -0,0 +1,202 @@\n+\ufeff//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Globalization;\n+using System.IO;\n+using System.Linq;\n+using System.Text;\n+\n+namespace PerfClTool.Measurement\n+{\n+    internal class PerfData\n+    {\n+        public List<PerfDataRecord> PerfDataRecordsList = new List<PerfDataRecord>();\n+        private PerfDataRecord _headers;\n+        public PerfData(string filePath)\n+        {\n+            if (!File.Exists(filePath))\n+            {\n+                throw new Exception($\"File not found {filePath}\");\n+            }\n+            PerfDataRecordsList = File.ReadLines(filePath)\n+                .Select(line => line.Split(','))\n+                .Select(tokens => new PerfDataRecord(\n+                    tokens[MapHeaderToIndex(\"TimeStamp\")],\n+                    tokens[MapHeaderToIndex(\"Marker\")],\n+                    tokens[MapHeaderToIndex(\"Time\")],\n+                    tokens[MapHeaderToIndex(\"Thread\")],\n+                    tokens[MapHeaderToIndex(\"CpuUsed\")],\n+                    tokens[MapHeaderToIndex(\"CpuTotal\")],\n+                    tokens[MapHeaderToIndex(\"ResidentSize\")],\n+                    tokens[MapHeaderToIndex(\"VirtualSize\")],\n+                    tokens[MapHeaderToIndex(\"WifiSent\")],\n+                    tokens[MapHeaderToIndex(\"WifiRecv\")],\n+                    tokens[MapHeaderToIndex(\"WwanSent\")],\n+                    tokens[MapHeaderToIndex(\"WwanRecv\")],\n+                    tokens[MapHeaderToIndex(\"AppSent\")],\n+                    tokens[MapHeaderToIndex(\"AppRecv\")],\n+                    tokens[MapHeaderToIndex(\"Battery\")],\n+                    tokens[MapHeaderToIndex(\"SystemDiskRead\")],\n+                    tokens[MapHeaderToIndex(\"SystemDiskWrite\")]\n+                    )\n+                ).ToList();\n+            //Check if header is present\n+            if (PerfDataRecordsList.ElementAt(0).TimeStamp.Equals(\"TimeStamp\"))\n+            {\n+                _headers = PerfDataRecordsList.ElementAt(0);\n+                PerfDataRecordsList.RemoveAt(0);\n+            }\n+        }\n+\n+        private int MapHeaderToIndex(string token)\n+        {\n+            switch(token)\n+            {\n+                case \"TimeStamp\": return 0;\n+                case \"Marker\": return 1;\n+                case \"Time\": return 2;\n+                case \"Thread\": return 3;\n+                case \"CpuUsed\": return 4;\n+                case \"CpuTotal\": return 5;\n+                case \"ResidentSize\": return 6;\n+                case \"VirtualSize\": return 7;\n+                case \"WifiSent\": return 8;\n+                case \"WifiRecv\": return 9;\n+                case \"WwanSent\": return 10;\n+                case \"WwanRecv\": return 11;\n+                case \"AppSent\": return 12;\n+                case \"AppRecv\": return 13;\n+                case \"Battery\": return 14;\n+                case \"SystemDiskRead\": return 15;\n+                case \"SystemDiskWrite\": return 16;\n+                default: return -1;\n+            }\n+        }\n+\n+        public PerfDataRecord FindMarker(String marker, int skipCount = 0)\n+        {\n+            var records = PerfDataRecordsList.Where(t => t.Marker.Equals(marker, StringComparison.InvariantCultureIgnoreCase));\n+            if (records.Count() > skipCount)\n+            {\n+                return records.ElementAt(skipCount);\n+            }\n+            else\n+            {\n+                return null;\n+            }\n+        }\n+        public void AddMarkerNames()\n+        {\n+            _headers.MarkerName = \"MarkerName\";\n+        }\n+        public void AdjustTimeElapsed()\n+        {\n+            var firstMarkerTimeElapsed = Int64.Parse(PerfDataRecordsList.ElementAt(0).Time);\n+            if (firstMarkerTimeElapsed != 0)\n+            {\n+                foreach (var perfRecord in PerfDataRecordsList)\n+                {\n+                    perfRecord.Time = (Int64.Parse(perfRecord.Time) - firstMarkerTimeElapsed).ToString();\n+                }\n+            }\n+        }\n+\n+        public static void AppendAllHeadersToFile(String filePath)\n+        {\n+            StringBuilder sb = new StringBuilder();\n+            //Add Headers\n+            sb.AppendLine(\"Marker,MarkerName,Time(ms),Thread,ResidentSize,VirtualSize\");\n+            File.AppendAllText(filePath, sb.ToString());\n+        }\n+\n+        public void AppendMarkersDataToFile(string filePath)\n+        {\n+            var sb = new StringBuilder();\n+            foreach(var dataRecord in PerfDataRecordsList)\n+            {\n+                sb.AppendLine($\"{dataRecord.Marker},{dataRecord.MarkerName},{long.Parse(dataRecord.Time)/1000},{dataRecord.Thread},{dataRecord.ResidentSize},{dataRecord.VirtualSize}\");\n+            }\n+            File.AppendAllText(filePath, sb.ToString());\n+        }\n+\n+        public void AddPidCreationTime(DateTime startTime)\n+        {\n+            var firstRecord = PerfDataRecordsList.ElementAt(0);\n+            /*if (!(firstRecord.Marker.Equals(\"1\") || firstRecord.Marker.Equals(\"10011\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65625c6d673afc86ec7477d919efb7fdc07c6a42"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA0ODI5Mjk1OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/perf_tool/PerfDataRecord.cs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNVQwMDo0Nzo0NFrOJgzj2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNVQwMDo0Nzo0NFrOJgzj2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODM3ODk3MQ==", "bodyText": "Can we clean up the formatting to prevent having to side-scroll past 100-ish chars? This, and in all files", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r638378971", "createdAt": "2021-05-25T00:47:44Z", "author": {"login": "iambmelt"}, "path": "uiautomationutilities/perf_tool/PerfDataRecord.cs", "diffHunk": "@@ -0,0 +1,75 @@\n+\ufeff//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+\n+using System;\n+\n+namespace PerfClTool.Measurement\n+{\n+    internal class PerfDataRecord\n+    {\n+        public static readonly string ValueNotApplicable = \"NA\";\n+        public PerfDataRecord(string timeStamp, string marker, string time, string thread, string cpuUsed, string cpuTotal, string residentSize, string virtualSize, string wifiSent, string wifiRecv, string wwanSent, string wwanRecv, string appSent, string appRecv, string battery, string systemDiskRead, string systemDiskWrite)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65625c6d673afc86ec7477d919efb7fdc07c6a42"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA0ODI5NTcwOnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/perf_tool/Properties/launchSettings.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNVQwMDo0ODo1OVrOJgzlXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNVQwMDo0ODo1OVrOJgzlXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODM3OTM1OQ==", "bodyText": "I assume we don't want to check this in in this form....", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r638379359", "createdAt": "2021-05-25T00:48:59Z", "author": {"login": "iambmelt"}, "path": "uiautomationutilities/perf_tool/Properties/launchSettings.json", "diffHunk": "@@ -0,0 +1,8 @@\n+{\n+  \"profiles\": {\n+    \"IdentityPerfTestApp\": {\n+      \"commandName\": \"Project\",\n+      \"commandLineArgs\": \"C:\\\\testdata\\\\basefiles\\\\ C:\\\\testdata\\\\targetfiles\\\\ 705902 705916 Pixel2 API28 MSALTestApp idlab1@msidlab4.onmicrosoft.com xxxxxxxx Neerav.Agarwal@microsoft.com,androididentity@microsoft.com\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65625c6d673afc86ec7477d919efb7fdc07c6a42"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA0ODI5NTkzOnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/perf_tool/Properties/launchSettings.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNVQwMDo0OTowNlrOJgzlfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNVQwMDo0OTowNlrOJgzlfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODM3OTM4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r638379389", "createdAt": "2021-05-25T00:49:06Z", "author": {"login": "iambmelt"}, "path": "uiautomationutilities/perf_tool/Properties/launchSettings.json", "diffHunk": "@@ -0,0 +1,8 @@\n+{\n+  \"profiles\": {\n+    \"IdentityPerfTestApp\": {\n+      \"commandName\": \"Project\",\n+      \"commandLineArgs\": \"C:\\\\testdata\\\\basefiles\\\\ C:\\\\testdata\\\\targetfiles\\\\ 705902 705916 Pixel2 API28 MSALTestApp idlab1@msidlab4.onmicrosoft.com xxxxxxxx Neerav.Agarwal@microsoft.com,androididentity@microsoft.com\"\n+    }\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65625c6d673afc86ec7477d919efb7fdc07c6a42"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA0ODI5NzgzOnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/perf_tool/ReportHelper.cs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNVQwMDo0OTo1OFrOJgzmig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNVQwMDo0OTo1OFrOJgzmig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODM3OTY1OA==", "bodyText": "If not needed, can we clean up commented out src? Here and everywhere", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r638379658", "createdAt": "2021-05-25T00:49:58Z", "author": {"login": "iambmelt"}, "path": "uiautomationutilities/perf_tool/ReportHelper.cs", "diffHunk": "@@ -0,0 +1,223 @@\n+\ufeff//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+\n+using System;\n+using System.IO;\n+using System.Net;\n+using System.Net.Mail;\n+using System.Net.Mime;\n+using System.Text;\n+\n+namespace PerfClTool\n+{\n+    internal class ReportHelper\n+    {\n+        public struct TableResultSummary\n+        {\n+            public int PassCount;\n+            public int FailCount;\n+        }\n+\n+        /// <summary>\n+        ///     This Method takes the Original HTML Blob and adds the entries in a CSV file as a Table in the HTML blob\n+        /// </summary>\n+        /// <param name=\"result\">HTML blob</param>\n+        /// <param name=\"CSVFile\">Path to the CSV File</param>\n+        public static TableResultSummary putCSVinHTMLTable(ref StringBuilder result, string CSVFile)\n+        {\n+            var TableResultSummary = new TableResultSummary();\n+            var totalPass = 0;\n+            var totalFail = 0;\n+            const char token = ',';\n+\n+\n+            var lines = File.ReadAllLines(CSVFile);\n+            result.Append(\n+                \"\\n<table border=1 BORDERCOLOR=BLUE cellpadding=10 cellspacing=10 bgcolor=#F2F2F2 style=\\\"border-collapse: collapse; \\\">\\n\");\n+            var count = 0;\n+            //string row;\n+            string headerRow = \"\";\n+            string lessImportantScenarios = \"\";\n+            string importantScenarios = \"\";\n+            foreach (var line in lines)\n+            {\n+                var parts = line.Split(token);\n+                var partsToOutput = new String[parts.Length - 1];\n+                Array.Copy(parts, partsToOutput, parts.Length - 1);\n+                if (count++ == 0)\n+                {\n+                    //Header row\n+                    headerRow = \"<tr bgcolor=#E5DFEC><td><b><FONT FACE=\\\"Calibri\\\">\" +\n+                          string.Join(\"</FONT></b></td><td><b><FONT FACE=\\\"Calibri\\\">\", partsToOutput) +\n+                          \"</FONT></b></td></tr>\\n\";\n+                }\n+\n+                else if (parts[parts.Length - 1].Equals( \"true\", StringComparison.InvariantCultureIgnoreCase))\n+                {\n+                    //main scenario\n+                    importantScenarios = importantScenarios + \"<tr><td>\" + string.Join(\"</td><td><FONT FACE=\\\"Calibri\\\">\", partsToOutput) + \"</FONT></td></tr>\\n\";\n+                }\n+                else if (parts[parts.Length - 1].Equals(\"false\",StringComparison.InvariantCultureIgnoreCase))\n+                {\n+                    lessImportantScenarios = lessImportantScenarios + \"<tr bgcolor=#fdfcff><td>\" + string.Join(\"</td><td><FONT FACE=\\\"Calibri\\\">\", partsToOutput) + \"</FONT></td></tr>\\n\";\n+                }\n+            }\n+            result.Append(headerRow);\n+            result.Append(importantScenarios);\n+            result.Append(lessImportantScenarios);\n+\n+            result.Append(\"</table>\\n\");\n+            TableResultSummary.PassCount = totalPass;\n+            TableResultSummary.FailCount = totalFail;\n+            return TableResultSummary;\n+        }\n+        public static void ShowResultNSendEmail(string stringhtml, string fromAddress, string fromPassword, string toList)\n+        {\n+            try\n+            {\n+                //var resourceDir = Path.Combine(PerfJobContext.GetInstance().ExeDir, \"Resources\"); Changed here", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65625c6d673afc86ec7477d919efb7fdc07c6a42"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA0ODMwNDgyOnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/perf_tool/ReportHelper.cs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNVQwMDo1MzoyOVrOJgzqsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNVQwMDo1MzoyOVrOJgzqsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODM4MDcyMg==", "bodyText": "This function is documented... great! Can we (piecemeal) take steps to do this across the other classes comprising this perf measurement tool? Our team is going to be responsible for owning this implementation for the foreseeable future, it would be great to have it well documented with cleanly formatted source, etc. Incl. removing broken/commented out/inaccessible code", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r638380722", "createdAt": "2021-05-25T00:53:29Z", "author": {"login": "iambmelt"}, "path": "uiautomationutilities/perf_tool/ReportHelper.cs", "diffHunk": "@@ -0,0 +1,223 @@\n+\ufeff//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+\n+using System;\n+using System.IO;\n+using System.Net;\n+using System.Net.Mail;\n+using System.Net.Mime;\n+using System.Text;\n+\n+namespace PerfClTool\n+{\n+    internal class ReportHelper\n+    {\n+        public struct TableResultSummary\n+        {\n+            public int PassCount;\n+            public int FailCount;\n+        }\n+\n+        /// <summary>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65625c6d673afc86ec7477d919efb7fdc07c6a42"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA0ODMxMjE2OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/perf_tool/PerfData.cs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNVQwMDo1NzoyMlrOJgzvCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNVQwMDo1NzoyMlrOJgzvCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODM4MTgzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public void AddMarkerNames()\n          \n          \n            \n            \n          \n          \n            \n                    public void AddMarkerNames()\n          \n      \n    \n    \n  \n\nGeneral formatting preference: let's add some line breaks between functions to keep the source easily visually scannable. Public methods to get documentation or have their visibility reduced (if they shouldn't be public)", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r638381833", "createdAt": "2021-05-25T00:57:22Z", "author": {"login": "iambmelt"}, "path": "uiautomationutilities/perf_tool/PerfData.cs", "diffHunk": "@@ -0,0 +1,202 @@\n+\ufeff//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Globalization;\n+using System.IO;\n+using System.Linq;\n+using System.Text;\n+\n+namespace PerfClTool.Measurement\n+{\n+    internal class PerfData\n+    {\n+        public List<PerfDataRecord> PerfDataRecordsList = new List<PerfDataRecord>();\n+        private PerfDataRecord _headers;\n+        public PerfData(string filePath)\n+        {\n+            if (!File.Exists(filePath))\n+            {\n+                throw new Exception($\"File not found {filePath}\");\n+            }\n+            PerfDataRecordsList = File.ReadLines(filePath)\n+                .Select(line => line.Split(','))\n+                .Select(tokens => new PerfDataRecord(\n+                    tokens[MapHeaderToIndex(\"TimeStamp\")],\n+                    tokens[MapHeaderToIndex(\"Marker\")],\n+                    tokens[MapHeaderToIndex(\"Time\")],\n+                    tokens[MapHeaderToIndex(\"Thread\")],\n+                    tokens[MapHeaderToIndex(\"CpuUsed\")],\n+                    tokens[MapHeaderToIndex(\"CpuTotal\")],\n+                    tokens[MapHeaderToIndex(\"ResidentSize\")],\n+                    tokens[MapHeaderToIndex(\"VirtualSize\")],\n+                    tokens[MapHeaderToIndex(\"WifiSent\")],\n+                    tokens[MapHeaderToIndex(\"WifiRecv\")],\n+                    tokens[MapHeaderToIndex(\"WwanSent\")],\n+                    tokens[MapHeaderToIndex(\"WwanRecv\")],\n+                    tokens[MapHeaderToIndex(\"AppSent\")],\n+                    tokens[MapHeaderToIndex(\"AppRecv\")],\n+                    tokens[MapHeaderToIndex(\"Battery\")],\n+                    tokens[MapHeaderToIndex(\"SystemDiskRead\")],\n+                    tokens[MapHeaderToIndex(\"SystemDiskWrite\")]\n+                    )\n+                ).ToList();\n+            //Check if header is present\n+            if (PerfDataRecordsList.ElementAt(0).TimeStamp.Equals(\"TimeStamp\"))\n+            {\n+                _headers = PerfDataRecordsList.ElementAt(0);\n+                PerfDataRecordsList.RemoveAt(0);\n+            }\n+        }\n+\n+        private int MapHeaderToIndex(string token)\n+        {\n+            switch(token)\n+            {\n+                case \"TimeStamp\": return 0;\n+                case \"Marker\": return 1;\n+                case \"Time\": return 2;\n+                case \"Thread\": return 3;\n+                case \"CpuUsed\": return 4;\n+                case \"CpuTotal\": return 5;\n+                case \"ResidentSize\": return 6;\n+                case \"VirtualSize\": return 7;\n+                case \"WifiSent\": return 8;\n+                case \"WifiRecv\": return 9;\n+                case \"WwanSent\": return 10;\n+                case \"WwanRecv\": return 11;\n+                case \"AppSent\": return 12;\n+                case \"AppRecv\": return 13;\n+                case \"Battery\": return 14;\n+                case \"SystemDiskRead\": return 15;\n+                case \"SystemDiskWrite\": return 16;\n+                default: return -1;\n+            }\n+        }\n+\n+        public PerfDataRecord FindMarker(String marker, int skipCount = 0)\n+        {\n+            var records = PerfDataRecordsList.Where(t => t.Marker.Equals(marker, StringComparison.InvariantCultureIgnoreCase));\n+            if (records.Count() > skipCount)\n+            {\n+                return records.ElementAt(skipCount);\n+            }\n+            else\n+            {\n+                return null;\n+            }\n+        }\n+        public void AddMarkerNames()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65625c6d673afc86ec7477d919efb7fdc07c6a42"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA0ODMxNTA1OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/perf_tool/PerfDataConfiguration.cs", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNVQwMDo1ODo1NVrOJgzwvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNlQxNjowNDozN1rOJiO9zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODM4MjI3MQ==", "bodyText": "Some cleanup items for this file (potentially across multiple files)\n\nConstants can be used to refer to reused xml tags/properties\nLine breaks between functions\nClass/method docs", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r638382271", "createdAt": "2021-05-25T00:58:55Z", "author": {"login": "iambmelt"}, "path": "uiautomationutilities/perf_tool/PerfDataConfiguration.cs", "diffHunk": "@@ -0,0 +1,118 @@\n+\ufeff//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+\n+using System.Collections.Generic;\n+using System.Xml.Serialization;\n+\n+namespace PerfClTool.Measurement\n+{\n+    [XmlRoot(ElementName = \"MeasurementConfiguration\")]\n+    public class MeasurementConfiguration\n+    {\n+        [XmlAttribute(AttributeName = \"Id\")]\n+        public string Id { get; set; }\n+        [XmlAttribute(AttributeName = \"StartMarker\")]\n+        public string StartMarker { get; set; }\n+        [XmlAttribute(AttributeName = \"EndMarker\")]\n+        public string EndMarker { get; set; }\n+        [XmlAttribute(AttributeName = \"startskip\")]\n+        public string Startskip { get; set; }\n+        [XmlAttribute(AttributeName = \"EndSkip\")]\n+        public string EndSkip { get; set; }\n+        [XmlAttribute(AttributeName = \"Name\")]\n+        public string Name { get; set; }\n+    }\n+\n+    [XmlRoot(ElementName = \"MeasurementsConfigurations\")]\n+    public class MeasurementsConfigurations\n+    {\n+        [XmlElement(ElementName = \"MeasurementConfiguration\")]\n+        public List<MeasurementConfiguration> MeasurementConfiguration { get; set; }\n+    }\n+\n+    [XmlRoot(ElementName = \"Measurement\")]\n+    public class Measurement\n+    {\n+        [XmlAttribute(AttributeName = \"Id\")]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65625c6d673afc86ec7477d919efb7fdc07c6a42"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTg3NjU1Nw==", "bodyText": "Will reach out on the first point", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r639876557", "createdAt": "2021-05-26T16:04:37Z", "author": {"login": "paulkagiri"}, "path": "uiautomationutilities/perf_tool/PerfDataConfiguration.cs", "diffHunk": "@@ -0,0 +1,118 @@\n+\ufeff//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+\n+using System.Collections.Generic;\n+using System.Xml.Serialization;\n+\n+namespace PerfClTool.Measurement\n+{\n+    [XmlRoot(ElementName = \"MeasurementConfiguration\")]\n+    public class MeasurementConfiguration\n+    {\n+        [XmlAttribute(AttributeName = \"Id\")]\n+        public string Id { get; set; }\n+        [XmlAttribute(AttributeName = \"StartMarker\")]\n+        public string StartMarker { get; set; }\n+        [XmlAttribute(AttributeName = \"EndMarker\")]\n+        public string EndMarker { get; set; }\n+        [XmlAttribute(AttributeName = \"startskip\")]\n+        public string Startskip { get; set; }\n+        [XmlAttribute(AttributeName = \"EndSkip\")]\n+        public string EndSkip { get; set; }\n+        [XmlAttribute(AttributeName = \"Name\")]\n+        public string Name { get; set; }\n+    }\n+\n+    [XmlRoot(ElementName = \"MeasurementsConfigurations\")]\n+    public class MeasurementsConfigurations\n+    {\n+        [XmlElement(ElementName = \"MeasurementConfiguration\")]\n+        public List<MeasurementConfiguration> MeasurementConfiguration { get; set; }\n+    }\n+\n+    [XmlRoot(ElementName = \"Measurement\")]\n+    public class Measurement\n+    {\n+        [XmlAttribute(AttributeName = \"Id\")]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODM4MjI3MQ=="}, "originalCommit": {"oid": "65625c6d673afc86ec7477d919efb7fdc07c6a42"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA2MTAxMTIwOnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/perf_tool/readme.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yN1QwNzowNjozN1rOJirfUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yN1QwNzowNjozN1rOJirfUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDM0Mzg5MA==", "bodyText": "We can improve the formatting of this doc i.e. apply heading styles when appropriate", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r640343890", "createdAt": "2021-05-27T07:06:37Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/perf_tool/readme.md", "diffHunk": "@@ -0,0 +1,158 @@\n+Perf tool walk through recording: https://msit.microsoftstream.com/video/8930a1ff-0400-9887-b080-f1eb55ce8803", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80880e61fad7f0bd7e9594f78c716decd2b54175"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA2NTA5NzE0OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/perf_tool/readme.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yN1QyMTozNzoxNlrOJjSttQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yN1QyMTozNzoxNlrOJjSttQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDk4NjU0OQ==", "bodyText": "Let's plan to do a brownbag on this topic; I think this would be useful to demonstrate", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1175#discussion_r640986549", "createdAt": "2021-05-27T21:37:16Z", "author": {"login": "iambmelt"}, "path": "uiautomationutilities/perf_tool/readme.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# Perf tool walk through\n+\n+**Recording:** https://msit.microsoftstream.com/video/8930a1ff-0400-9887-b080-f1eb55ce8803\n+\n+**Source code of C# tool:** \n+- Repo: https://github.com/AzureAD/microsoft-authentication-library-common-for-android\n+- Location: /uiautomationutilities/perf_tool\n+\n+**Pipeline information:** https://dev.azure.com/IdentityDivision/IDDP/_build?definitionId=1254\n+\n+### The source/path of the files:\n+- **New files:**\n+\t- command.cs\n+\t- PerfDataConfiguration.xml\n+\t- PerfMeasurementConfigurationsProvider.cs\n+\t- Program.cs\n+- **PerfCL files:**\n+\t- MathUtils.cs: \n+\t- MeasurementsConfiguration.cs\n+\t- MeasurementsStore.cs\n+\t- PerfData.cs\n+\t- PerfDataConfiguration.cs\n+\t- PerfDataRecord.cs\n+\t- PerfMeasurement.cs\n+\t- PerfMeasurementsSet.cs\n+\t- PerformanceMetric.cs\n+\t- ReportHelper.cs\n+\t- XMLUtility.cs\n+- **PerfDiffResultMailer files:**\n+\t- Gen3MeasurementsData.cs -> Renamed to -> MeasurementsData.cs\n+\t- Parameter.cs\n+\t- Task.cs\n+\t- View.cs\n+\n+### Source details of the files:\n+\n+- **New files:** \n+\t- Source: None\n+\t- Contact: Neerav Agarwal (Neerav.Agarwal@microsoft.com)\n+- **PerfCL files:** \n+\t- Source: \\\\daddev\\office\\16.0\\13328.10000\\src\\toolsrc\\PerfCLTool\n+\t- Contact: Arpit Aggarwal (Aggarwal.Arpit@microsoft.com)\n+- **PerfDiffResultMailer files:** \n+\t- Source: \\\\officestore\\scratch\\gargupta\\PerfDiffResultMailer\\\n+\t- Contact: Garima Gupta (Garima.Gupta@microsoft.com)\n+\n+\n+### Steps to modify the code to add a new marker and see it in the report:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e7ca7cad96aca17022ff19adfdc0a451ec6ab2f"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1976, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}