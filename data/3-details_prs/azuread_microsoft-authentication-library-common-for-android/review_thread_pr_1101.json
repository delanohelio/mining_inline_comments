{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExMzUyMTUw", "number": 1101, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjoxNjowOFrOEy5DZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODowODo0MFrOEz6DkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNzk5MDEzOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjoxNjowOFrOHpyRcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwNTo0MTo0M1rOHrlJqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU3NzMzMQ==", "bodyText": "Can we describe this via a schema rather than a number?  Might be brokerApi/1.0.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1101#discussion_r513577331", "createdAt": "2020-10-28T16:16:08Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java", "diffHunk": "@@ -645,9 +645,14 @@\n         public static final String BROKER_ACTIVITY_NAME = \"broker.activity.name\";\n \n         /**\n-         * The maximum broker protocol version that common supports.\n+         * The newest Msal-To-Broker protocol version.\n          */\n-        public static final String BROKER_PROTOCOL_VERSION_CODE = \"5.0\";\n+        public static final String MSAL_TO_BROKER_PROTOCOL_VERSION_CODE = \"5.0\";\n+\n+        /**\n+         * The newest BrokerAPI-To-Broker protocol version.\n+         */\n+        public static final String BROKER_API_TO_BROKER_PROTOCOL_VERSION_CODE = \"1.0\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338c202b26b99b4642d3a5381f6971017b7e9f0e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEzOTE5MQ==", "bodyText": "We definitely can, but what would be the benefit over using a number?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1101#discussion_r514139191", "createdAt": "2020-10-29T10:03:23Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java", "diffHunk": "@@ -645,9 +645,14 @@\n         public static final String BROKER_ACTIVITY_NAME = \"broker.activity.name\";\n \n         /**\n-         * The maximum broker protocol version that common supports.\n+         * The newest Msal-To-Broker protocol version.\n          */\n-        public static final String BROKER_PROTOCOL_VERSION_CODE = \"5.0\";\n+        public static final String MSAL_TO_BROKER_PROTOCOL_VERSION_CODE = \"5.0\";\n+\n+        /**\n+         * The newest BrokerAPI-To-Broker protocol version.\n+         */\n+        public static final String BROKER_API_TO_BROKER_PROTOCOL_VERSION_CODE = \"1.0\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU3NzMzMQ=="}, "originalCommit": {"oid": "338c202b26b99b4642d3a5381f6971017b7e9f0e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI3OTMyNA==", "bodyText": "Mainly that we can use it as a way to explicitly describe how to get the description of the message that's sent.  We're not going to do that, right now, but I'd like to tee that up.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1101#discussion_r515279324", "createdAt": "2020-10-30T17:52:45Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java", "diffHunk": "@@ -645,9 +645,14 @@\n         public static final String BROKER_ACTIVITY_NAME = \"broker.activity.name\";\n \n         /**\n-         * The maximum broker protocol version that common supports.\n+         * The newest Msal-To-Broker protocol version.\n          */\n-        public static final String BROKER_PROTOCOL_VERSION_CODE = \"5.0\";\n+        public static final String MSAL_TO_BROKER_PROTOCOL_VERSION_CODE = \"5.0\";\n+\n+        /**\n+         * The newest BrokerAPI-To-Broker protocol version.\n+         */\n+        public static final String BROKER_API_TO_BROKER_PROTOCOL_VERSION_CODE = \"1.0\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU3NzMzMQ=="}, "originalCommit": {"oid": "338c202b26b99b4642d3a5381f6971017b7e9f0e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1OTQ5OA==", "bodyText": "The bundle itself is technically a kind of schema. I think we can add metadata to the bundle directly.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1101#discussion_r515459498", "createdAt": "2020-10-31T05:41:43Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java", "diffHunk": "@@ -645,9 +645,14 @@\n         public static final String BROKER_ACTIVITY_NAME = \"broker.activity.name\";\n \n         /**\n-         * The maximum broker protocol version that common supports.\n+         * The newest Msal-To-Broker protocol version.\n          */\n-        public static final String BROKER_PROTOCOL_VERSION_CODE = \"5.0\";\n+        public static final String MSAL_TO_BROKER_PROTOCOL_VERSION_CODE = \"5.0\";\n+\n+        /**\n+         * The newest BrokerAPI-To-Broker protocol version.\n+         */\n+        public static final String BROKER_API_TO_BROKER_PROTOCOL_VERSION_CODE = \"1.0\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU3NzMzMQ=="}, "originalCommit": {"oid": "338c202b26b99b4642d3a5381f6971017b7e9f0e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODA2NTk2OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/util/StringUtil.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjozMTozOVrOHpzATw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQxNzoyODowMlrOHrozow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU4OTMyNw==", "bodyText": "So smaller and larger don't really mean anything for communication APIs.  The only real question is, \"can I understand a message in this format\" and \"could you understand a message I send\".  Better still is a mechanism that would enable you to send appropriate messages or understand them.  Much like we decoupled communication channel from content, the actual message content can be separated into message, structure, and encoding.  The message is something represented by an abstract schema, the structure of the message, and the encoding on the message - what's in it, how can I read it (JSON, protobuf, xml), and what do I need to do to what you send in order to read it (gzip, base64, etc)?  That's kind of the North Star here, to be able to fiddle around with these three different aspects of communication independently.\nNow, I'm not saying that we should get there now, but if we're putting together a new mechanism (the broker-broker api distinction) there's an opportunity to get closer, maybe.  This is a long comment to say that we should write the method not about smaller or larger, but basically based on whether we can understand the message that will be sent.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1101#discussion_r513589327", "createdAt": "2020-10-28T16:31:39Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/util/StringUtil.java", "diffHunk": "@@ -159,6 +159,22 @@ public static int compareSemanticVersion(@NonNull final String thisVersion,\n         return 0;\n     }\n \n+    /**\n+     * Returns true if the first semantic version is smaller or equal to the second version.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338c202b26b99b4642d3a5381f6971017b7e9f0e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ4MzEzOQ==", "bodyText": "This is thought provoking.\nIMO, it makes sense to me for MSAL hello actually 'negotiate' the protocol version, and the reason is that, unlike services in general, it's possible that user may never update the Broker app, and ended up having a newer protocol version on the other side.\nSo it's not just \"could you understand a message I send\", but more like, \"let's find a middle ground that both of us can communicate.\"\nHaving said that, we have never really leveraged the negotiated version outside the hello() function, and we should.\nI was originally planning to start documenting each version of IPC protocols, and this comment made me realized that we could go one step forward.\nWe could actually use the negotiated protocol version to \"pick the protocol\" that both side uses to communicate.\nInstead of having just one copy of the protocol/adapter on each sides - we can have one copy for EACH version of the protocol. Once you get the negotiated version, you plug that into a factory class ON BOTH SIDES, and it would spew out the operation code itself (i.e. how :auth would do getAccounts, removeAccount ,etc.) and how the bundle should be packed and unpacked, etc.\nThis way, the code will document itself, and there's less chance that we'll mess up the protocol logic. (i.e. with one adapter like what we have now, we might accidentally remove a field in the latest protocol version while talking to the older broker which demands it)\n(I actually spent the whole afternoon trying this out.. and I'll send out a (draft) PR soon, but this will have a lower priority than another BRT injection PR I'll send out. I think this can wait. It shouldn't be hard to 'fix forward' this in both BrokerAPI and MSAL).", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1101#discussion_r515483139", "createdAt": "2020-10-31T10:38:08Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/util/StringUtil.java", "diffHunk": "@@ -159,6 +159,22 @@ public static int compareSemanticVersion(@NonNull final String thisVersion,\n         return 0;\n     }\n \n+    /**\n+     * Returns true if the first semantic version is smaller or equal to the second version.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU4OTMyNw=="}, "originalCommit": {"oid": "338c202b26b99b4642d3a5381f6971017b7e9f0e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUxOTM5NQ==", "bodyText": "Yes.  That's precisely it, I think.  Think HTTP.  I send you a POST or a PUT with a MIME type attached.  You use that MIME type to understand the message that I sent OR you reject it with a list of content types that you do understand.   For each of these content types, I typically have a content type handler, that constructs an object that I can act upon from the message body.  This instruction appears in the envelope surrounding the message body.  Similar for encoding, both Content-Encoding and Transfer-Encoding.\nSome of the content that is exchanged is a self-describing structure (XML is an example), in that it is contains information that the recipient could use to construct a way to unpackage the message.  Then the question becomes about the the message - is that something that I can understand - similar enough and asserted to be the same that I can act on it.\nTo respond, the caller told me what kind of message they expect in his initial correspondence.  I can select any one of the mechanisms that I have available to produce responses by consulting that list.\nNow the problem comes in when you don't actually have a common way to pass messages.  If we can assert that the message that's being transmitted is substantially similar for a given path, then we can encode into the envelope away of discovering the ability to understand the structure.\nI think that the HTTP designers also have a very similar mechanism (OPTIONS) to our HELLO, but I have always avoided this like the plague, since it's an additional API endpoint to handle as well as an obligate extra round-trip, always opting for the reject-and-specify model.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1101#discussion_r515519395", "createdAt": "2020-10-31T17:28:02Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/util/StringUtil.java", "diffHunk": "@@ -159,6 +159,22 @@ public static int compareSemanticVersion(@NonNull final String thisVersion,\n         return 0;\n     }\n \n+    /**\n+     * Returns true if the first semantic version is smaller or equal to the second version.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU4OTMyNw=="}, "originalCommit": {"oid": "338c202b26b99b4642d3a5381f6971017b7e9f0e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODY0MDE2OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BrokerOperationExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODowODo0MFrOHra0HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODowODo0MFrOHra0HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI5MDE0MQ==", "bodyText": "Do we want to allow parameters to be null here?  I see this, and I think we should have another method that doesn't take parameters rather than one that allows it to be null.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1101#discussion_r515290141", "createdAt": "2020-10-30T18:08:40Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BrokerOperationExecutor.java", "diffHunk": "@@ -155,7 +155,7 @@ public BrokerOperationExecutor(@NonNull final List<IIpcStrategy> strategies) {\n         throw exception;\n     }\n \n-    private <T extends CommandParameters, U> void emitOperationStartEvent(@NonNull final T parameters,\n+    private <T extends CommandParameters, U> void emitOperationStartEvent(@Nullable final T parameters,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338c202b26b99b4642d3a5381f6971017b7e9f0e"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2050, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}