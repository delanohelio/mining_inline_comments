{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNDg0Mzc4", "number": 889, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMDo1Mjo1NFrODx39hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwMDoxMzo1OVrOD2AKjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjIzNjg3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMDo1Mjo1NFrOGFmA3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzowMTozMlrOGK_iXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUxODg3Ng==", "bodyText": "I don't think we can support this currently -- support may also not be needed", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#discussion_r408518876", "createdAt": "2020-04-15T00:52:54Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "diffHunk": "@@ -158,27 +166,83 @@ public static HttpResponse sendPost(final URL requestUrl, final Map<String, Stri\n      * @return HttpResponse\n      * @throws IOException throw if service error happen during http request.\n      */\n-    public static HttpResponse sendGet(final URL requestUrl, final Map<String, String> requestHeaders)\n+    public static HttpResponse sendGet(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders)\n             throws IOException {\n         Telemetry.emit(\n                 new HttpStartEvent()\n                         .putMethod(REQUEST_METHOD_GET)\n                         .putPath(requestUrl)\n-                        .putRequestIdHeader(requestHeaders == null ? null : requestHeaders.get(CLIENT_REQUEST_ID))\n+                        .putRequestIdHeader(requestHeaders.get(CLIENT_REQUEST_ID))\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_GET\n         );\n \n-        final HttpRequest httpRequest = new HttpRequest(requestUrl, requestHeaders, REQUEST_METHOD_GET);\n         final HttpResponse response = httpRequest.send();\n \n         final HttpEndEvent httpEndEvent = new HttpEndEvent();\n+\n         if (response != null) {\n             httpEndEvent.putStatusCode(response.getStatusCode());\n         }\n+\n         Telemetry.emit(httpEndEvent);\n \n         return response;\n     }\n \n+    public static HttpResponse sendHead(@NonNull final URL requestUrl,\n+                                        @NonNull final Map<String, String> requestHeaders) {\n+        // TODO\n+        return null;\n+    }\n+\n+    public static HttpResponse sendPut(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders,\n+                                       @Nullable final byte[] requestContent,\n+                                       @Nullable final String requestContentType) {\n+        // TODO\n+        return null;\n+    }\n+\n+    public static HttpResponse sendDelete(@NonNull final URL requestUrl,\n+                                          @NonNull final Map<String, String> requestHeaders,\n+                                          @Nullable final byte[] requestContent,\n+                                          @Nullable final String requestContentType) {\n+        // TODO\n+        return null;\n+    }\n+\n+    public static HttpResponse sendTrace(@NonNull final URL requestUrl,\n+                                         @NonNull final Map<String, String> requestHeaders) {\n+        // TODO\n+        return null;\n+    }\n+\n+    public static HttpResponse sendOptions(@NonNull final URL requestUrl,\n+                                           @NonNull final Map<String, String> requestHeaders) {\n+        // TODO\n+        return null;\n+    }\n+\n+    public static HttpResponse sendConnect(@NonNull final URL requestUrl,\n+                                           @NonNull final Map<String, String> requestHeaders) {\n+        // TODO Can this be supported? I suspect not.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1261f8b7695024d19cca4b2d8792b689251cc4fd"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3OTkzNA==", "bodyText": "Not needed. Resolving", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#discussion_r414179934", "createdAt": "2020-04-23T23:01:32Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "diffHunk": "@@ -158,27 +166,83 @@ public static HttpResponse sendPost(final URL requestUrl, final Map<String, Stri\n      * @return HttpResponse\n      * @throws IOException throw if service error happen during http request.\n      */\n-    public static HttpResponse sendGet(final URL requestUrl, final Map<String, String> requestHeaders)\n+    public static HttpResponse sendGet(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders)\n             throws IOException {\n         Telemetry.emit(\n                 new HttpStartEvent()\n                         .putMethod(REQUEST_METHOD_GET)\n                         .putPath(requestUrl)\n-                        .putRequestIdHeader(requestHeaders == null ? null : requestHeaders.get(CLIENT_REQUEST_ID))\n+                        .putRequestIdHeader(requestHeaders.get(CLIENT_REQUEST_ID))\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_GET\n         );\n \n-        final HttpRequest httpRequest = new HttpRequest(requestUrl, requestHeaders, REQUEST_METHOD_GET);\n         final HttpResponse response = httpRequest.send();\n \n         final HttpEndEvent httpEndEvent = new HttpEndEvent();\n+\n         if (response != null) {\n             httpEndEvent.putStatusCode(response.getStatusCode());\n         }\n+\n         Telemetry.emit(httpEndEvent);\n \n         return response;\n     }\n \n+    public static HttpResponse sendHead(@NonNull final URL requestUrl,\n+                                        @NonNull final Map<String, String> requestHeaders) {\n+        // TODO\n+        return null;\n+    }\n+\n+    public static HttpResponse sendPut(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders,\n+                                       @Nullable final byte[] requestContent,\n+                                       @Nullable final String requestContentType) {\n+        // TODO\n+        return null;\n+    }\n+\n+    public static HttpResponse sendDelete(@NonNull final URL requestUrl,\n+                                          @NonNull final Map<String, String> requestHeaders,\n+                                          @Nullable final byte[] requestContent,\n+                                          @Nullable final String requestContentType) {\n+        // TODO\n+        return null;\n+    }\n+\n+    public static HttpResponse sendTrace(@NonNull final URL requestUrl,\n+                                         @NonNull final Map<String, String> requestHeaders) {\n+        // TODO\n+        return null;\n+    }\n+\n+    public static HttpResponse sendOptions(@NonNull final URL requestUrl,\n+                                           @NonNull final Map<String, String> requestHeaders) {\n+        // TODO\n+        return null;\n+    }\n+\n+    public static HttpResponse sendConnect(@NonNull final URL requestUrl,\n+                                           @NonNull final Map<String, String> requestHeaders) {\n+        // TODO Can this be supported? I suspect not.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUxODg3Ng=="}, "originalCommit": {"oid": "1261f8b7695024d19cca4b2d8792b689251cc4fd"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTg0NjY4OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0NjowM1rOGGI-Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMjo1OToxM1rOGK_erw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MTY4Nw==", "bodyText": "javadoc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#discussion_r409091687", "createdAt": "2020-04-15T19:46:03Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "diffHunk": "@@ -158,24 +203,223 @@ public static HttpResponse sendPost(final URL requestUrl, final Map<String, Stri\n      * @return HttpResponse\n      * @throws IOException throw if service error happen during http request.\n      */\n-    public static HttpResponse sendGet(final URL requestUrl, final Map<String, String> requestHeaders)\n+    public static HttpResponse sendGet(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders)\n             throws IOException {\n-        Telemetry.emit(\n-                new HttpStartEvent()\n-                        .putMethod(REQUEST_METHOD_GET)\n-                        .putPath(requestUrl)\n-                        .putRequestIdHeader(requestHeaders == null ? null : requestHeaders.get(CLIENT_REQUEST_ID))\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_GET,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_GET\n         );\n \n-        final HttpRequest httpRequest = new HttpRequest(requestUrl, requestHeaders, REQUEST_METHOD_GET);\n         final HttpResponse response = httpRequest.send();\n \n-        final HttpEndEvent httpEndEvent = new HttpEndEvent();\n-        if (response != null) {\n-            httpEndEvent.putStatusCode(response.getStatusCode());\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendHead(@NonNull final URL requestUrl,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0966fbc2d63835466991d86d432d168378d5294"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3ODk5MQ==", "bodyText": "Resolved in 5bdd4b7", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#discussion_r414178991", "createdAt": "2020-04-23T22:59:13Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "diffHunk": "@@ -158,24 +203,223 @@ public static HttpResponse sendPost(final URL requestUrl, final Map<String, Stri\n      * @return HttpResponse\n      * @throws IOException throw if service error happen during http request.\n      */\n-    public static HttpResponse sendGet(final URL requestUrl, final Map<String, String> requestHeaders)\n+    public static HttpResponse sendGet(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders)\n             throws IOException {\n-        Telemetry.emit(\n-                new HttpStartEvent()\n-                        .putMethod(REQUEST_METHOD_GET)\n-                        .putPath(requestUrl)\n-                        .putRequestIdHeader(requestHeaders == null ? null : requestHeaders.get(CLIENT_REQUEST_ID))\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_GET,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_GET\n         );\n \n-        final HttpRequest httpRequest = new HttpRequest(requestUrl, requestHeaders, REQUEST_METHOD_GET);\n         final HttpResponse response = httpRequest.send();\n \n-        final HttpEndEvent httpEndEvent = new HttpEndEvent();\n-        if (response != null) {\n-            httpEndEvent.putStatusCode(response.getStatusCode());\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendHead(@NonNull final URL requestUrl,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MTY4Nw=="}, "originalCommit": {"oid": "e0966fbc2d63835466991d86d432d168378d5294"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTg0Njc4OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0NjowN1rOGGI-hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMjo1OToyOVrOGK_fFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MTcxNg==", "bodyText": "javadoc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#discussion_r409091716", "createdAt": "2020-04-15T19:46:07Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "diffHunk": "@@ -158,24 +203,223 @@ public static HttpResponse sendPost(final URL requestUrl, final Map<String, Stri\n      * @return HttpResponse\n      * @throws IOException throw if service error happen during http request.\n      */\n-    public static HttpResponse sendGet(final URL requestUrl, final Map<String, String> requestHeaders)\n+    public static HttpResponse sendGet(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders)\n             throws IOException {\n-        Telemetry.emit(\n-                new HttpStartEvent()\n-                        .putMethod(REQUEST_METHOD_GET)\n-                        .putPath(requestUrl)\n-                        .putRequestIdHeader(requestHeaders == null ? null : requestHeaders.get(CLIENT_REQUEST_ID))\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_GET,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_GET\n         );\n \n-        final HttpRequest httpRequest = new HttpRequest(requestUrl, requestHeaders, REQUEST_METHOD_GET);\n         final HttpResponse response = httpRequest.send();\n \n-        final HttpEndEvent httpEndEvent = new HttpEndEvent();\n-        if (response != null) {\n-            httpEndEvent.putStatusCode(response.getStatusCode());\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendHead(@NonNull final URL requestUrl,\n+                                        @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_HEAD,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_HEAD\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendPut(@NonNull final URL requestUrl,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0966fbc2d63835466991d86d432d168378d5294"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3OTA5Mw==", "bodyText": "Resolved in 5bdd4b7", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#discussion_r414179093", "createdAt": "2020-04-23T22:59:29Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "diffHunk": "@@ -158,24 +203,223 @@ public static HttpResponse sendPost(final URL requestUrl, final Map<String, Stri\n      * @return HttpResponse\n      * @throws IOException throw if service error happen during http request.\n      */\n-    public static HttpResponse sendGet(final URL requestUrl, final Map<String, String> requestHeaders)\n+    public static HttpResponse sendGet(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders)\n             throws IOException {\n-        Telemetry.emit(\n-                new HttpStartEvent()\n-                        .putMethod(REQUEST_METHOD_GET)\n-                        .putPath(requestUrl)\n-                        .putRequestIdHeader(requestHeaders == null ? null : requestHeaders.get(CLIENT_REQUEST_ID))\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_GET,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_GET\n         );\n \n-        final HttpRequest httpRequest = new HttpRequest(requestUrl, requestHeaders, REQUEST_METHOD_GET);\n         final HttpResponse response = httpRequest.send();\n \n-        final HttpEndEvent httpEndEvent = new HttpEndEvent();\n-        if (response != null) {\n-            httpEndEvent.putStatusCode(response.getStatusCode());\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendHead(@NonNull final URL requestUrl,\n+                                        @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_HEAD,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_HEAD\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendPut(@NonNull final URL requestUrl,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MTcxNg=="}, "originalCommit": {"oid": "e0966fbc2d63835466991d86d432d168378d5294"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTg0NzEwOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0NjoxMVrOGGI-rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMjo1OTozNlrOGK_fNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MTc1Nw==", "bodyText": "javadoc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#discussion_r409091757", "createdAt": "2020-04-15T19:46:11Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "diffHunk": "@@ -158,24 +203,223 @@ public static HttpResponse sendPost(final URL requestUrl, final Map<String, Stri\n      * @return HttpResponse\n      * @throws IOException throw if service error happen during http request.\n      */\n-    public static HttpResponse sendGet(final URL requestUrl, final Map<String, String> requestHeaders)\n+    public static HttpResponse sendGet(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders)\n             throws IOException {\n-        Telemetry.emit(\n-                new HttpStartEvent()\n-                        .putMethod(REQUEST_METHOD_GET)\n-                        .putPath(requestUrl)\n-                        .putRequestIdHeader(requestHeaders == null ? null : requestHeaders.get(CLIENT_REQUEST_ID))\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_GET,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_GET\n         );\n \n-        final HttpRequest httpRequest = new HttpRequest(requestUrl, requestHeaders, REQUEST_METHOD_GET);\n         final HttpResponse response = httpRequest.send();\n \n-        final HttpEndEvent httpEndEvent = new HttpEndEvent();\n-        if (response != null) {\n-            httpEndEvent.putStatusCode(response.getStatusCode());\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendHead(@NonNull final URL requestUrl,\n+                                        @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_HEAD,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_HEAD\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendPut(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders,\n+                                       @Nullable final byte[] requestContent,\n+                                       @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_PUT,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_PUT,\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendDelete(@NonNull final URL requestUrl,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0966fbc2d63835466991d86d432d168378d5294"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3OTEyNg==", "bodyText": "Resolved in 5bdd4b7", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#discussion_r414179126", "createdAt": "2020-04-23T22:59:36Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "diffHunk": "@@ -158,24 +203,223 @@ public static HttpResponse sendPost(final URL requestUrl, final Map<String, Stri\n      * @return HttpResponse\n      * @throws IOException throw if service error happen during http request.\n      */\n-    public static HttpResponse sendGet(final URL requestUrl, final Map<String, String> requestHeaders)\n+    public static HttpResponse sendGet(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders)\n             throws IOException {\n-        Telemetry.emit(\n-                new HttpStartEvent()\n-                        .putMethod(REQUEST_METHOD_GET)\n-                        .putPath(requestUrl)\n-                        .putRequestIdHeader(requestHeaders == null ? null : requestHeaders.get(CLIENT_REQUEST_ID))\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_GET,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_GET\n         );\n \n-        final HttpRequest httpRequest = new HttpRequest(requestUrl, requestHeaders, REQUEST_METHOD_GET);\n         final HttpResponse response = httpRequest.send();\n \n-        final HttpEndEvent httpEndEvent = new HttpEndEvent();\n-        if (response != null) {\n-            httpEndEvent.putStatusCode(response.getStatusCode());\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendHead(@NonNull final URL requestUrl,\n+                                        @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_HEAD,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_HEAD\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendPut(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders,\n+                                       @Nullable final byte[] requestContent,\n+                                       @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_PUT,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_PUT,\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendDelete(@NonNull final URL requestUrl,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MTc1Nw=="}, "originalCommit": {"oid": "e0966fbc2d63835466991d86d432d168378d5294"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTg0NzI1OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0NjoxNFrOGGI-xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMjo1OTo0M1rOGK_fXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MTc4Mw==", "bodyText": "javadoc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#discussion_r409091783", "createdAt": "2020-04-15T19:46:14Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "diffHunk": "@@ -158,24 +203,223 @@ public static HttpResponse sendPost(final URL requestUrl, final Map<String, Stri\n      * @return HttpResponse\n      * @throws IOException throw if service error happen during http request.\n      */\n-    public static HttpResponse sendGet(final URL requestUrl, final Map<String, String> requestHeaders)\n+    public static HttpResponse sendGet(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders)\n             throws IOException {\n-        Telemetry.emit(\n-                new HttpStartEvent()\n-                        .putMethod(REQUEST_METHOD_GET)\n-                        .putPath(requestUrl)\n-                        .putRequestIdHeader(requestHeaders == null ? null : requestHeaders.get(CLIENT_REQUEST_ID))\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_GET,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_GET\n         );\n \n-        final HttpRequest httpRequest = new HttpRequest(requestUrl, requestHeaders, REQUEST_METHOD_GET);\n         final HttpResponse response = httpRequest.send();\n \n-        final HttpEndEvent httpEndEvent = new HttpEndEvent();\n-        if (response != null) {\n-            httpEndEvent.putStatusCode(response.getStatusCode());\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendHead(@NonNull final URL requestUrl,\n+                                        @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_HEAD,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_HEAD\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendPut(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders,\n+                                       @Nullable final byte[] requestContent,\n+                                       @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_PUT,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_PUT,\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendDelete(@NonNull final URL requestUrl,\n+                                          @NonNull final Map<String, String> requestHeaders,\n+                                          @Nullable final byte[] requestContent,\n+                                          @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_DELETE,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_DELETE,\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendTrace(@NonNull final URL requestUrl,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0966fbc2d63835466991d86d432d168378d5294"}, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3OTE2Ng==", "bodyText": "Resolved in 5bdd4b7", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#discussion_r414179166", "createdAt": "2020-04-23T22:59:43Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "diffHunk": "@@ -158,24 +203,223 @@ public static HttpResponse sendPost(final URL requestUrl, final Map<String, Stri\n      * @return HttpResponse\n      * @throws IOException throw if service error happen during http request.\n      */\n-    public static HttpResponse sendGet(final URL requestUrl, final Map<String, String> requestHeaders)\n+    public static HttpResponse sendGet(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders)\n             throws IOException {\n-        Telemetry.emit(\n-                new HttpStartEvent()\n-                        .putMethod(REQUEST_METHOD_GET)\n-                        .putPath(requestUrl)\n-                        .putRequestIdHeader(requestHeaders == null ? null : requestHeaders.get(CLIENT_REQUEST_ID))\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_GET,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_GET\n         );\n \n-        final HttpRequest httpRequest = new HttpRequest(requestUrl, requestHeaders, REQUEST_METHOD_GET);\n         final HttpResponse response = httpRequest.send();\n \n-        final HttpEndEvent httpEndEvent = new HttpEndEvent();\n-        if (response != null) {\n-            httpEndEvent.putStatusCode(response.getStatusCode());\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendHead(@NonNull final URL requestUrl,\n+                                        @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_HEAD,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_HEAD\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendPut(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders,\n+                                       @Nullable final byte[] requestContent,\n+                                       @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_PUT,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_PUT,\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendDelete(@NonNull final URL requestUrl,\n+                                          @NonNull final Map<String, String> requestHeaders,\n+                                          @Nullable final byte[] requestContent,\n+                                          @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_DELETE,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_DELETE,\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendTrace(@NonNull final URL requestUrl,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MTc4Mw=="}, "originalCommit": {"oid": "e0966fbc2d63835466991d86d432d168378d5294"}, "originalPosition": 227}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTg0NzQwOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0NjoxOFrOGGI-4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMjo1OTo1MlrOGK_fiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MTgxMQ==", "bodyText": "javadoc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#discussion_r409091811", "createdAt": "2020-04-15T19:46:18Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "diffHunk": "@@ -158,24 +203,223 @@ public static HttpResponse sendPost(final URL requestUrl, final Map<String, Stri\n      * @return HttpResponse\n      * @throws IOException throw if service error happen during http request.\n      */\n-    public static HttpResponse sendGet(final URL requestUrl, final Map<String, String> requestHeaders)\n+    public static HttpResponse sendGet(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders)\n             throws IOException {\n-        Telemetry.emit(\n-                new HttpStartEvent()\n-                        .putMethod(REQUEST_METHOD_GET)\n-                        .putPath(requestUrl)\n-                        .putRequestIdHeader(requestHeaders == null ? null : requestHeaders.get(CLIENT_REQUEST_ID))\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_GET,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_GET\n         );\n \n-        final HttpRequest httpRequest = new HttpRequest(requestUrl, requestHeaders, REQUEST_METHOD_GET);\n         final HttpResponse response = httpRequest.send();\n \n-        final HttpEndEvent httpEndEvent = new HttpEndEvent();\n-        if (response != null) {\n-            httpEndEvent.putStatusCode(response.getStatusCode());\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendHead(@NonNull final URL requestUrl,\n+                                        @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_HEAD,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_HEAD\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendPut(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders,\n+                                       @Nullable final byte[] requestContent,\n+                                       @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_PUT,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_PUT,\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendDelete(@NonNull final URL requestUrl,\n+                                          @NonNull final Map<String, String> requestHeaders,\n+                                          @Nullable final byte[] requestContent,\n+                                          @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_DELETE,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_DELETE,\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendTrace(@NonNull final URL requestUrl,\n+                                         @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_TRACE,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_TRACE\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendOptions(@NonNull final URL requestUrl,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0966fbc2d63835466991d86d432d168378d5294"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3OTIwOQ==", "bodyText": "Resolved in 5bdd4b7", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#discussion_r414179209", "createdAt": "2020-04-23T22:59:52Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "diffHunk": "@@ -158,24 +203,223 @@ public static HttpResponse sendPost(final URL requestUrl, final Map<String, Stri\n      * @return HttpResponse\n      * @throws IOException throw if service error happen during http request.\n      */\n-    public static HttpResponse sendGet(final URL requestUrl, final Map<String, String> requestHeaders)\n+    public static HttpResponse sendGet(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders)\n             throws IOException {\n-        Telemetry.emit(\n-                new HttpStartEvent()\n-                        .putMethod(REQUEST_METHOD_GET)\n-                        .putPath(requestUrl)\n-                        .putRequestIdHeader(requestHeaders == null ? null : requestHeaders.get(CLIENT_REQUEST_ID))\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_GET,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_GET\n         );\n \n-        final HttpRequest httpRequest = new HttpRequest(requestUrl, requestHeaders, REQUEST_METHOD_GET);\n         final HttpResponse response = httpRequest.send();\n \n-        final HttpEndEvent httpEndEvent = new HttpEndEvent();\n-        if (response != null) {\n-            httpEndEvent.putStatusCode(response.getStatusCode());\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendHead(@NonNull final URL requestUrl,\n+                                        @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_HEAD,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_HEAD\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendPut(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders,\n+                                       @Nullable final byte[] requestContent,\n+                                       @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_PUT,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_PUT,\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendDelete(@NonNull final URL requestUrl,\n+                                          @NonNull final Map<String, String> requestHeaders,\n+                                          @Nullable final byte[] requestContent,\n+                                          @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_DELETE,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_DELETE,\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendTrace(@NonNull final URL requestUrl,\n+                                         @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_TRACE,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_TRACE\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendOptions(@NonNull final URL requestUrl,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MTgxMQ=="}, "originalCommit": {"oid": "e0966fbc2d63835466991d86d432d168378d5294"}, "originalPosition": 249}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTg0NzU1OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0NjoyMlrOGGI-_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMjo1OTo1OVrOGK_ftA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MTgzNg==", "bodyText": "javadoc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#discussion_r409091836", "createdAt": "2020-04-15T19:46:22Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "diffHunk": "@@ -158,24 +203,223 @@ public static HttpResponse sendPost(final URL requestUrl, final Map<String, Stri\n      * @return HttpResponse\n      * @throws IOException throw if service error happen during http request.\n      */\n-    public static HttpResponse sendGet(final URL requestUrl, final Map<String, String> requestHeaders)\n+    public static HttpResponse sendGet(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders)\n             throws IOException {\n-        Telemetry.emit(\n-                new HttpStartEvent()\n-                        .putMethod(REQUEST_METHOD_GET)\n-                        .putPath(requestUrl)\n-                        .putRequestIdHeader(requestHeaders == null ? null : requestHeaders.get(CLIENT_REQUEST_ID))\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_GET,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_GET\n         );\n \n-        final HttpRequest httpRequest = new HttpRequest(requestUrl, requestHeaders, REQUEST_METHOD_GET);\n         final HttpResponse response = httpRequest.send();\n \n-        final HttpEndEvent httpEndEvent = new HttpEndEvent();\n-        if (response != null) {\n-            httpEndEvent.putStatusCode(response.getStatusCode());\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendHead(@NonNull final URL requestUrl,\n+                                        @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_HEAD,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_HEAD\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendPut(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders,\n+                                       @Nullable final byte[] requestContent,\n+                                       @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_PUT,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_PUT,\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendDelete(@NonNull final URL requestUrl,\n+                                          @NonNull final Map<String, String> requestHeaders,\n+                                          @Nullable final byte[] requestContent,\n+                                          @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_DELETE,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_DELETE,\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendTrace(@NonNull final URL requestUrl,\n+                                         @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_TRACE,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_TRACE\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendOptions(@NonNull final URL requestUrl,\n+                                           @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_OPTIONS,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_OPTIONS\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendPatch(@NonNull final URL requestUrl,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0966fbc2d63835466991d86d432d168378d5294"}, "originalPosition": 271}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3OTI1Mg==", "bodyText": "Resolved in 5bdd4b7", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#discussion_r414179252", "createdAt": "2020-04-23T22:59:59Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "diffHunk": "@@ -158,24 +203,223 @@ public static HttpResponse sendPost(final URL requestUrl, final Map<String, Stri\n      * @return HttpResponse\n      * @throws IOException throw if service error happen during http request.\n      */\n-    public static HttpResponse sendGet(final URL requestUrl, final Map<String, String> requestHeaders)\n+    public static HttpResponse sendGet(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders)\n             throws IOException {\n-        Telemetry.emit(\n-                new HttpStartEvent()\n-                        .putMethod(REQUEST_METHOD_GET)\n-                        .putPath(requestUrl)\n-                        .putRequestIdHeader(requestHeaders == null ? null : requestHeaders.get(CLIENT_REQUEST_ID))\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_GET,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_GET\n         );\n \n-        final HttpRequest httpRequest = new HttpRequest(requestUrl, requestHeaders, REQUEST_METHOD_GET);\n         final HttpResponse response = httpRequest.send();\n \n-        final HttpEndEvent httpEndEvent = new HttpEndEvent();\n-        if (response != null) {\n-            httpEndEvent.putStatusCode(response.getStatusCode());\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendHead(@NonNull final URL requestUrl,\n+                                        @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_HEAD,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_HEAD\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendPut(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders,\n+                                       @Nullable final byte[] requestContent,\n+                                       @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_PUT,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_PUT,\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendDelete(@NonNull final URL requestUrl,\n+                                          @NonNull final Map<String, String> requestHeaders,\n+                                          @Nullable final byte[] requestContent,\n+                                          @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_DELETE,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_DELETE,\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendTrace(@NonNull final URL requestUrl,\n+                                         @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_TRACE,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_TRACE\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendOptions(@NonNull final URL requestUrl,\n+                                           @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_OPTIONS,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_OPTIONS\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendPatch(@NonNull final URL requestUrl,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MTgzNg=="}, "originalCommit": {"oid": "e0966fbc2d63835466991d86d432d168378d5294"}, "originalPosition": 271}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTg0Nzc5OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0NjoyN1rOGGI_IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzowMDoyMFrOGK_gSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MTg3Mw==", "bodyText": "javadoc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#discussion_r409091873", "createdAt": "2020-04-15T19:46:27Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "diffHunk": "@@ -158,24 +203,223 @@ public static HttpResponse sendPost(final URL requestUrl, final Map<String, Stri\n      * @return HttpResponse\n      * @throws IOException throw if service error happen during http request.\n      */\n-    public static HttpResponse sendGet(final URL requestUrl, final Map<String, String> requestHeaders)\n+    public static HttpResponse sendGet(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders)\n             throws IOException {\n-        Telemetry.emit(\n-                new HttpStartEvent()\n-                        .putMethod(REQUEST_METHOD_GET)\n-                        .putPath(requestUrl)\n-                        .putRequestIdHeader(requestHeaders == null ? null : requestHeaders.get(CLIENT_REQUEST_ID))\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_GET,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_GET\n         );\n \n-        final HttpRequest httpRequest = new HttpRequest(requestUrl, requestHeaders, REQUEST_METHOD_GET);\n         final HttpResponse response = httpRequest.send();\n \n-        final HttpEndEvent httpEndEvent = new HttpEndEvent();\n-        if (response != null) {\n-            httpEndEvent.putStatusCode(response.getStatusCode());\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendHead(@NonNull final URL requestUrl,\n+                                        @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_HEAD,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_HEAD\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendPut(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders,\n+                                       @Nullable final byte[] requestContent,\n+                                       @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_PUT,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_PUT,\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendDelete(@NonNull final URL requestUrl,\n+                                          @NonNull final Map<String, String> requestHeaders,\n+                                          @Nullable final byte[] requestContent,\n+                                          @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_DELETE,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_DELETE,\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendTrace(@NonNull final URL requestUrl,\n+                                         @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_TRACE,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_TRACE\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendOptions(@NonNull final URL requestUrl,\n+                                           @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_OPTIONS,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_OPTIONS\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendPatch(@NonNull final URL requestUrl,\n+                                         @NonNull final Map<String, String> requestHeaders,\n+                                         @Nullable final byte[] requestContent,\n+                                         @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_PATCH,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        // Because HttpURLConnection predates RFC-5789, we need to fallback on POST w/ a backcompat\n+        // workaround. See: https://stackoverflow.com/a/32503192/741827\n+        requestHeaders.put(\"X-HTTP-Method-Override\", \"PATCH\");\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_POST, // HttpURLConnection doesn't natively support PATCH\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendWithMethod(@NonNull final String httpMethod,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0966fbc2d63835466991d86d432d168378d5294"}, "originalPosition": 301}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3OTQwMg==", "bodyText": "Resolved in 5bdd4b7", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#discussion_r414179402", "createdAt": "2020-04-23T23:00:20Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "diffHunk": "@@ -158,24 +203,223 @@ public static HttpResponse sendPost(final URL requestUrl, final Map<String, Stri\n      * @return HttpResponse\n      * @throws IOException throw if service error happen during http request.\n      */\n-    public static HttpResponse sendGet(final URL requestUrl, final Map<String, String> requestHeaders)\n+    public static HttpResponse sendGet(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders)\n             throws IOException {\n-        Telemetry.emit(\n-                new HttpStartEvent()\n-                        .putMethod(REQUEST_METHOD_GET)\n-                        .putPath(requestUrl)\n-                        .putRequestIdHeader(requestHeaders == null ? null : requestHeaders.get(CLIENT_REQUEST_ID))\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_GET,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_GET\n         );\n \n-        final HttpRequest httpRequest = new HttpRequest(requestUrl, requestHeaders, REQUEST_METHOD_GET);\n         final HttpResponse response = httpRequest.send();\n \n-        final HttpEndEvent httpEndEvent = new HttpEndEvent();\n-        if (response != null) {\n-            httpEndEvent.putStatusCode(response.getStatusCode());\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendHead(@NonNull final URL requestUrl,\n+                                        @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_HEAD,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_HEAD\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendPut(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders,\n+                                       @Nullable final byte[] requestContent,\n+                                       @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_PUT,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_PUT,\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendDelete(@NonNull final URL requestUrl,\n+                                          @NonNull final Map<String, String> requestHeaders,\n+                                          @Nullable final byte[] requestContent,\n+                                          @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_DELETE,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_DELETE,\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendTrace(@NonNull final URL requestUrl,\n+                                         @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_TRACE,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_TRACE\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendOptions(@NonNull final URL requestUrl,\n+                                           @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_OPTIONS,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_OPTIONS\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendPatch(@NonNull final URL requestUrl,\n+                                         @NonNull final Map<String, String> requestHeaders,\n+                                         @Nullable final byte[] requestContent,\n+                                         @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_PATCH,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        // Because HttpURLConnection predates RFC-5789, we need to fallback on POST w/ a backcompat\n+        // workaround. See: https://stackoverflow.com/a/32503192/741827\n+        requestHeaders.put(\"X-HTTP-Method-Override\", \"PATCH\");\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_POST, // HttpURLConnection doesn't natively support PATCH\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendWithMethod(@NonNull final String httpMethod,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MTg3Mw=="}, "originalCommit": {"oid": "e0966fbc2d63835466991d86d432d168378d5294"}, "originalPosition": 301}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTg0ODM3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0NjozNlrOGGI_gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzowMDo0MlrOGK_g5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MTk2OA==", "bodyText": "Refactor other methods to call this one", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#discussion_r409091968", "createdAt": "2020-04-15T19:46:36Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "diffHunk": "@@ -158,24 +203,223 @@ public static HttpResponse sendPost(final URL requestUrl, final Map<String, Stri\n      * @return HttpResponse\n      * @throws IOException throw if service error happen during http request.\n      */\n-    public static HttpResponse sendGet(final URL requestUrl, final Map<String, String> requestHeaders)\n+    public static HttpResponse sendGet(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders)\n             throws IOException {\n-        Telemetry.emit(\n-                new HttpStartEvent()\n-                        .putMethod(REQUEST_METHOD_GET)\n-                        .putPath(requestUrl)\n-                        .putRequestIdHeader(requestHeaders == null ? null : requestHeaders.get(CLIENT_REQUEST_ID))\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_GET,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_GET\n         );\n \n-        final HttpRequest httpRequest = new HttpRequest(requestUrl, requestHeaders, REQUEST_METHOD_GET);\n         final HttpResponse response = httpRequest.send();\n \n-        final HttpEndEvent httpEndEvent = new HttpEndEvent();\n-        if (response != null) {\n-            httpEndEvent.putStatusCode(response.getStatusCode());\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendHead(@NonNull final URL requestUrl,\n+                                        @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_HEAD,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_HEAD\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendPut(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders,\n+                                       @Nullable final byte[] requestContent,\n+                                       @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_PUT,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_PUT,\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendDelete(@NonNull final URL requestUrl,\n+                                          @NonNull final Map<String, String> requestHeaders,\n+                                          @Nullable final byte[] requestContent,\n+                                          @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_DELETE,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_DELETE,\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendTrace(@NonNull final URL requestUrl,\n+                                         @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_TRACE,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_TRACE\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendOptions(@NonNull final URL requestUrl,\n+                                           @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_OPTIONS,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_OPTIONS\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendPatch(@NonNull final URL requestUrl,\n+                                         @NonNull final Map<String, String> requestHeaders,\n+                                         @Nullable final byte[] requestContent,\n+                                         @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_PATCH,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        // Because HttpURLConnection predates RFC-5789, we need to fallback on POST w/ a backcompat\n+        // workaround. See: https://stackoverflow.com/a/32503192/741827\n+        requestHeaders.put(\"X-HTTP-Method-Override\", \"PATCH\");\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_POST, // HttpURLConnection doesn't natively support PATCH\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendWithMethod(@NonNull final String httpMethod,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0966fbc2d63835466991d86d432d168378d5294"}, "originalPosition": 301}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3OTU1OA==", "bodyText": "Resolved in f7703d4", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#discussion_r414179558", "createdAt": "2020-04-23T23:00:42Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "diffHunk": "@@ -158,24 +203,223 @@ public static HttpResponse sendPost(final URL requestUrl, final Map<String, Stri\n      * @return HttpResponse\n      * @throws IOException throw if service error happen during http request.\n      */\n-    public static HttpResponse sendGet(final URL requestUrl, final Map<String, String> requestHeaders)\n+    public static HttpResponse sendGet(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders)\n             throws IOException {\n-        Telemetry.emit(\n-                new HttpStartEvent()\n-                        .putMethod(REQUEST_METHOD_GET)\n-                        .putPath(requestUrl)\n-                        .putRequestIdHeader(requestHeaders == null ? null : requestHeaders.get(CLIENT_REQUEST_ID))\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_GET,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_GET\n         );\n \n-        final HttpRequest httpRequest = new HttpRequest(requestUrl, requestHeaders, REQUEST_METHOD_GET);\n         final HttpResponse response = httpRequest.send();\n \n-        final HttpEndEvent httpEndEvent = new HttpEndEvent();\n-        if (response != null) {\n-            httpEndEvent.putStatusCode(response.getStatusCode());\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendHead(@NonNull final URL requestUrl,\n+                                        @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_HEAD,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_HEAD\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendPut(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders,\n+                                       @Nullable final byte[] requestContent,\n+                                       @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_PUT,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_PUT,\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendDelete(@NonNull final URL requestUrl,\n+                                          @NonNull final Map<String, String> requestHeaders,\n+                                          @Nullable final byte[] requestContent,\n+                                          @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_DELETE,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_DELETE,\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendTrace(@NonNull final URL requestUrl,\n+                                         @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_TRACE,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_TRACE\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendOptions(@NonNull final URL requestUrl,\n+                                           @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_OPTIONS,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_OPTIONS\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendPatch(@NonNull final URL requestUrl,\n+                                         @NonNull final Map<String, String> requestHeaders,\n+                                         @Nullable final byte[] requestContent,\n+                                         @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_PATCH,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        // Because HttpURLConnection predates RFC-5789, we need to fallback on POST w/ a backcompat\n+        // workaround. See: https://stackoverflow.com/a/32503192/741827\n+        requestHeaders.put(\"X-HTTP-Method-Override\", \"PATCH\");\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_POST, // HttpURLConnection doesn't natively support PATCH\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendWithMethod(@NonNull final String httpMethod,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MTk2OA=="}, "originalCommit": {"oid": "e0966fbc2d63835466991d86d432d168378d5294"}, "originalPosition": 301}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3OTUyMzk4OnYy", "diffSide": "RIGHT", "path": "common/src/androidTest/java/com/microsoft/identity/common/HttpRequestTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwMDoxMzo1OVrOGLtTFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwMDoxNjowNFrOGLtVBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkyOTY4NQ==", "bodyText": "I think we can remove this comment now", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#discussion_r414929685", "createdAt": "2020-04-25T00:13:59Z", "author": {"login": "shahzaibj"}, "path": "common/src/androidTest/java/com/microsoft/identity/common/HttpRequestTest.java", "diffHunk": "@@ -0,0 +1,816 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+\n+package com.microsoft.identity.common;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import com.microsoft.identity.common.internal.net.HttpRequest;\n+import com.microsoft.identity.common.internal.net.HttpResponse;\n+import com.microsoft.identity.common.internal.net.HttpUrlConnectionFactory;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InOrder;\n+import org.mockito.Mockito;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+\n+import static com.microsoft.identity.common.MockUtil.getMockedConnectionWithFailureResponse;\n+import static com.microsoft.identity.common.internal.net.HttpUrlConnectionFactory.addMockedConnection;\n+import static com.microsoft.identity.common.internal.net.HttpUrlConnectionFactory.getMockedConnectionCountInQueue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for {@link HttpRequest}.\n+ * <p>\n+ * We need to fix setup of these tests as something is missing post moving from MSAL to common", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64f61fd8f9a9cf8d2f54bebce2e664355e4aa300"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkyOTc1MA==", "bodyText": "Yup, good catch", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#discussion_r414929750", "createdAt": "2020-04-25T00:14:14Z", "author": {"login": "iambmelt"}, "path": "common/src/androidTest/java/com/microsoft/identity/common/HttpRequestTest.java", "diffHunk": "@@ -0,0 +1,816 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+\n+package com.microsoft.identity.common;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import com.microsoft.identity.common.internal.net.HttpRequest;\n+import com.microsoft.identity.common.internal.net.HttpResponse;\n+import com.microsoft.identity.common.internal.net.HttpUrlConnectionFactory;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InOrder;\n+import org.mockito.Mockito;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+\n+import static com.microsoft.identity.common.MockUtil.getMockedConnectionWithFailureResponse;\n+import static com.microsoft.identity.common.internal.net.HttpUrlConnectionFactory.addMockedConnection;\n+import static com.microsoft.identity.common.internal.net.HttpUrlConnectionFactory.getMockedConnectionCountInQueue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for {@link HttpRequest}.\n+ * <p>\n+ * We need to fix setup of these tests as something is missing post moving from MSAL to common", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkyOTY4NQ=="}, "originalCommit": {"oid": "64f61fd8f9a9cf8d2f54bebce2e664355e4aa300"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkzMDE4Mw==", "bodyText": "Fixed in c17b8cc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#discussion_r414930183", "createdAt": "2020-04-25T00:16:04Z", "author": {"login": "iambmelt"}, "path": "common/src/androidTest/java/com/microsoft/identity/common/HttpRequestTest.java", "diffHunk": "@@ -0,0 +1,816 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+\n+package com.microsoft.identity.common;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import com.microsoft.identity.common.internal.net.HttpRequest;\n+import com.microsoft.identity.common.internal.net.HttpResponse;\n+import com.microsoft.identity.common.internal.net.HttpUrlConnectionFactory;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InOrder;\n+import org.mockito.Mockito;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+\n+import static com.microsoft.identity.common.MockUtil.getMockedConnectionWithFailureResponse;\n+import static com.microsoft.identity.common.internal.net.HttpUrlConnectionFactory.addMockedConnection;\n+import static com.microsoft.identity.common.internal.net.HttpUrlConnectionFactory.getMockedConnectionCountInQueue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for {@link HttpRequest}.\n+ * <p>\n+ * We need to fix setup of these tests as something is missing post moving from MSAL to common", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkyOTY4NQ=="}, "originalCommit": {"oid": "64f61fd8f9a9cf8d2f54bebce2e664355e4aa300"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2336, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}