{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyODc5MDgy", "number": 1012, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjowNTo0OVrOEcI55Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODoxOToyNVrOEcMItw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTQxNDc3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/result/ResultFuture.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjowNTo0OVrOHGfMMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjoxNDowMFrOHGfhiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NDUyOA==", "bodyText": "nah.  You can return.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1012#discussion_r476564528", "createdAt": "2020-08-25T16:05:49Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/result/ResultFuture.java", "diffHunk": "@@ -28,21 +59,55 @@ public boolean isDone() {\n     @Override\n     public T get() throws InterruptedException {\n         mCountDownLatch.await();\n+\n+        if (null != mException) {\n+            throw new RuntimeException(mException);\n+        }\n+\n         return mResult;\n     }\n \n     @Override\n-    public T get(long l, TimeUnit timeUnit) throws InterruptedException, TimeoutException {\n+    public T get(final long l, @NonNull final TimeUnit timeUnit) throws InterruptedException, TimeoutException {\n         if (mCountDownLatch.await(l, timeUnit)) {\n+            if (null != mException) {\n+                throw new RuntimeException(mException);\n+            }\n+\n             return mResult;\n         } else {\n-            throw new TimeoutException();\n+            throw new TimeoutException(\n+                    \"Timed out waiting for: \"\n+                            + l // duration\n+                            + timeUnit.name() // units\n+            );\n         }\n+    }\n+\n+    public synchronized void setException(@NonNull final Exception exception) {\n+        mException = exception;\n+        mCountDownLatch.countDown();\n \n+        for (final BiConsumer<T, Throwable> consumer : mConsumers) {\n+            consumer.accept(mResult, exception);\n+        }\n     }\n \n-    public void setResult(T result) {\n+    public synchronized void setResult(@Nullable final T result) {\n         mResult = result;\n         mCountDownLatch.countDown();\n+\n+        for (final BiConsumer<T, Throwable> consumer : mConsumers) {\n+            consumer.accept(result, mException);\n+        }\n+    }\n+\n+    public synchronized void whenComplete(@NonNull final BiConsumer<T, Throwable> consumerToAdd) {\n+        if (isDone()) {\n+            consumerToAdd.accept(mResult, mException);\n+        }\n+\n+        // TODO Should we still add the consumer even if the ResultFuture isDone() == true?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b814f9995c4edd5edf8b66ab101f49837f11374f"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NzA2NA==", "bodyText": "Great --  I'll yank that out", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1012#discussion_r476567064", "createdAt": "2020-08-25T16:09:25Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/result/ResultFuture.java", "diffHunk": "@@ -28,21 +59,55 @@ public boolean isDone() {\n     @Override\n     public T get() throws InterruptedException {\n         mCountDownLatch.await();\n+\n+        if (null != mException) {\n+            throw new RuntimeException(mException);\n+        }\n+\n         return mResult;\n     }\n \n     @Override\n-    public T get(long l, TimeUnit timeUnit) throws InterruptedException, TimeoutException {\n+    public T get(final long l, @NonNull final TimeUnit timeUnit) throws InterruptedException, TimeoutException {\n         if (mCountDownLatch.await(l, timeUnit)) {\n+            if (null != mException) {\n+                throw new RuntimeException(mException);\n+            }\n+\n             return mResult;\n         } else {\n-            throw new TimeoutException();\n+            throw new TimeoutException(\n+                    \"Timed out waiting for: \"\n+                            + l // duration\n+                            + timeUnit.name() // units\n+            );\n         }\n+    }\n+\n+    public synchronized void setException(@NonNull final Exception exception) {\n+        mException = exception;\n+        mCountDownLatch.countDown();\n \n+        for (final BiConsumer<T, Throwable> consumer : mConsumers) {\n+            consumer.accept(mResult, exception);\n+        }\n     }\n \n-    public void setResult(T result) {\n+    public synchronized void setResult(@Nullable final T result) {\n         mResult = result;\n         mCountDownLatch.countDown();\n+\n+        for (final BiConsumer<T, Throwable> consumer : mConsumers) {\n+            consumer.accept(result, mException);\n+        }\n+    }\n+\n+    public synchronized void whenComplete(@NonNull final BiConsumer<T, Throwable> consumerToAdd) {\n+        if (isDone()) {\n+            consumerToAdd.accept(mResult, mException);\n+        }\n+\n+        // TODO Should we still add the consumer even if the ResultFuture isDone() == true?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NDUyOA=="}, "originalCommit": {"oid": "b814f9995c4edd5edf8b66ab101f49837f11374f"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2OTk5Mg==", "bodyText": "40c7fbc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1012#discussion_r476569992", "createdAt": "2020-08-25T16:14:00Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/result/ResultFuture.java", "diffHunk": "@@ -28,21 +59,55 @@ public boolean isDone() {\n     @Override\n     public T get() throws InterruptedException {\n         mCountDownLatch.await();\n+\n+        if (null != mException) {\n+            throw new RuntimeException(mException);\n+        }\n+\n         return mResult;\n     }\n \n     @Override\n-    public T get(long l, TimeUnit timeUnit) throws InterruptedException, TimeoutException {\n+    public T get(final long l, @NonNull final TimeUnit timeUnit) throws InterruptedException, TimeoutException {\n         if (mCountDownLatch.await(l, timeUnit)) {\n+            if (null != mException) {\n+                throw new RuntimeException(mException);\n+            }\n+\n             return mResult;\n         } else {\n-            throw new TimeoutException();\n+            throw new TimeoutException(\n+                    \"Timed out waiting for: \"\n+                            + l // duration\n+                            + timeUnit.name() // units\n+            );\n         }\n+    }\n+\n+    public synchronized void setException(@NonNull final Exception exception) {\n+        mException = exception;\n+        mCountDownLatch.countDown();\n \n+        for (final BiConsumer<T, Throwable> consumer : mConsumers) {\n+            consumer.accept(mResult, exception);\n+        }\n     }\n \n-    public void setResult(T result) {\n+    public synchronized void setResult(@Nullable final T result) {\n         mResult = result;\n         mCountDownLatch.countDown();\n+\n+        for (final BiConsumer<T, Throwable> consumer : mConsumers) {\n+            consumer.accept(result, mException);\n+        }\n+    }\n+\n+    public synchronized void whenComplete(@NonNull final BiConsumer<T, Throwable> consumerToAdd) {\n+        if (isDone()) {\n+            consumerToAdd.accept(mResult, mException);\n+        }\n+\n+        // TODO Should we still add the consumer even if the ResultFuture isDone() == true?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NDUyOA=="}, "originalCommit": {"oid": "b814f9995c4edd5edf8b66ab101f49837f11374f"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTQxNjY2OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/result/ResultFuture.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjowNjoxNVrOHGfNUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjo0NDozMVrOHGguTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NDgxNg==", "bodyText": "At this point, you could drop all references in this list.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1012#discussion_r476564816", "createdAt": "2020-08-25T16:06:15Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/result/ResultFuture.java", "diffHunk": "@@ -28,21 +59,55 @@ public boolean isDone() {\n     @Override\n     public T get() throws InterruptedException {\n         mCountDownLatch.await();\n+\n+        if (null != mException) {\n+            throw new RuntimeException(mException);\n+        }\n+\n         return mResult;\n     }\n \n     @Override\n-    public T get(long l, TimeUnit timeUnit) throws InterruptedException, TimeoutException {\n+    public T get(final long l, @NonNull final TimeUnit timeUnit) throws InterruptedException, TimeoutException {\n         if (mCountDownLatch.await(l, timeUnit)) {\n+            if (null != mException) {\n+                throw new RuntimeException(mException);\n+            }\n+\n             return mResult;\n         } else {\n-            throw new TimeoutException();\n+            throw new TimeoutException(\n+                    \"Timed out waiting for: \"\n+                            + l // duration\n+                            + timeUnit.name() // units\n+            );\n         }\n+    }\n+\n+    public synchronized void setException(@NonNull final Exception exception) {\n+        mException = exception;\n+        mCountDownLatch.countDown();\n \n+        for (final BiConsumer<T, Throwable> consumer : mConsumers) {\n+            consumer.accept(mResult, exception);\n+        }\n     }\n \n-    public void setResult(T result) {\n+    public synchronized void setResult(@Nullable final T result) {\n         mResult = result;\n         mCountDownLatch.countDown();\n+\n+        for (final BiConsumer<T, Throwable> consumer : mConsumers) {\n+            consumer.accept(result, mException);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b814f9995c4edd5edf8b66ab101f49837f11374f"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4OTY0Ng==", "bodyText": "47d8fa9", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1012#discussion_r476589646", "createdAt": "2020-08-25T16:44:31Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/result/ResultFuture.java", "diffHunk": "@@ -28,21 +59,55 @@ public boolean isDone() {\n     @Override\n     public T get() throws InterruptedException {\n         mCountDownLatch.await();\n+\n+        if (null != mException) {\n+            throw new RuntimeException(mException);\n+        }\n+\n         return mResult;\n     }\n \n     @Override\n-    public T get(long l, TimeUnit timeUnit) throws InterruptedException, TimeoutException {\n+    public T get(final long l, @NonNull final TimeUnit timeUnit) throws InterruptedException, TimeoutException {\n         if (mCountDownLatch.await(l, timeUnit)) {\n+            if (null != mException) {\n+                throw new RuntimeException(mException);\n+            }\n+\n             return mResult;\n         } else {\n-            throw new TimeoutException();\n+            throw new TimeoutException(\n+                    \"Timed out waiting for: \"\n+                            + l // duration\n+                            + timeUnit.name() // units\n+            );\n         }\n+    }\n+\n+    public synchronized void setException(@NonNull final Exception exception) {\n+        mException = exception;\n+        mCountDownLatch.countDown();\n \n+        for (final BiConsumer<T, Throwable> consumer : mConsumers) {\n+            consumer.accept(mResult, exception);\n+        }\n     }\n \n-    public void setResult(T result) {\n+    public synchronized void setResult(@Nullable final T result) {\n         mResult = result;\n         mCountDownLatch.countDown();\n+\n+        for (final BiConsumer<T, Throwable> consumer : mConsumers) {\n+            consumer.accept(result, mException);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NDgxNg=="}, "originalCommit": {"oid": "b814f9995c4edd5edf8b66ab101f49837f11374f"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTQyOTI1OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjowODo1NlrOHGfU1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjoxNTo1N1rOHGfmmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2Njc0MA==", "bodyText": "Remove commented out code", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1012#discussion_r476566740", "createdAt": "2020-08-25T16:08:56Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java", "diffHunk": "@@ -73,7 +77,8 @@\n     private static final Object sLock = new Object();\n     private static InteractiveTokenCommand sCommand = null;\n     private static final CommandResultCache sCommandResultCache = new CommandResultCache();\n-    private static final Set<BaseCommand> sExecutingCommands = Collections.synchronizedSet(new HashSet<BaseCommand>());\n+    //private static final Set<BaseCommand> sExecutingCommands = Collections.synchronizedSet(new HashSet<BaseCommand>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b814f9995c4edd5edf8b66ab101f49837f11374f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3MTI5MA==", "bodyText": "6fdb152", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1012#discussion_r476571290", "createdAt": "2020-08-25T16:15:57Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java", "diffHunk": "@@ -73,7 +77,8 @@\n     private static final Object sLock = new Object();\n     private static InteractiveTokenCommand sCommand = null;\n     private static final CommandResultCache sCommandResultCache = new CommandResultCache();\n-    private static final Set<BaseCommand> sExecutingCommands = Collections.synchronizedSet(new HashSet<BaseCommand>());\n+    //private static final Set<BaseCommand> sExecutingCommands = Collections.synchronizedSet(new HashSet<BaseCommand>());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2Njc0MA=="}, "originalCommit": {"oid": "b814f9995c4edd5edf8b66ab101f49837f11374f"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTQzMjQwOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/result/ResultFuture.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjowOTo0M1rOHGfW0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjoyMjoyNVrOHGf3dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NzI1MA==", "bodyText": "Add javadoc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1012#discussion_r476567250", "createdAt": "2020-08-25T16:09:43Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/result/ResultFuture.java", "diffHunk": "@@ -28,21 +59,55 @@ public boolean isDone() {\n     @Override\n     public T get() throws InterruptedException {\n         mCountDownLatch.await();\n+\n+        if (null != mException) {\n+            throw new RuntimeException(mException);\n+        }\n+\n         return mResult;\n     }\n \n     @Override\n-    public T get(long l, TimeUnit timeUnit) throws InterruptedException, TimeoutException {\n+    public T get(final long l, @NonNull final TimeUnit timeUnit) throws InterruptedException, TimeoutException {\n         if (mCountDownLatch.await(l, timeUnit)) {\n+            if (null != mException) {\n+                throw new RuntimeException(mException);\n+            }\n+\n             return mResult;\n         } else {\n-            throw new TimeoutException();\n+            throw new TimeoutException(\n+                    \"Timed out waiting for: \"\n+                            + l // duration\n+                            + timeUnit.name() // units\n+            );\n         }\n+    }\n+\n+    public synchronized void setException(@NonNull final Exception exception) {\n+        mException = exception;\n+        mCountDownLatch.countDown();\n \n+        for (final BiConsumer<T, Throwable> consumer : mConsumers) {\n+            consumer.accept(mResult, exception);\n+        }\n     }\n \n-    public void setResult(T result) {\n+    public synchronized void setResult(@Nullable final T result) {\n         mResult = result;\n         mCountDownLatch.countDown();\n+\n+        for (final BiConsumer<T, Throwable> consumer : mConsumers) {\n+            consumer.accept(result, mException);\n+        }\n+    }\n+\n+    public synchronized void whenComplete(@NonNull final BiConsumer<T, Throwable> consumerToAdd) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b814f9995c4edd5edf8b66ab101f49837f11374f"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3NTYwNA==", "bodyText": "1d0cfe6", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1012#discussion_r476575604", "createdAt": "2020-08-25T16:22:25Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/result/ResultFuture.java", "diffHunk": "@@ -28,21 +59,55 @@ public boolean isDone() {\n     @Override\n     public T get() throws InterruptedException {\n         mCountDownLatch.await();\n+\n+        if (null != mException) {\n+            throw new RuntimeException(mException);\n+        }\n+\n         return mResult;\n     }\n \n     @Override\n-    public T get(long l, TimeUnit timeUnit) throws InterruptedException, TimeoutException {\n+    public T get(final long l, @NonNull final TimeUnit timeUnit) throws InterruptedException, TimeoutException {\n         if (mCountDownLatch.await(l, timeUnit)) {\n+            if (null != mException) {\n+                throw new RuntimeException(mException);\n+            }\n+\n             return mResult;\n         } else {\n-            throw new TimeoutException();\n+            throw new TimeoutException(\n+                    \"Timed out waiting for: \"\n+                            + l // duration\n+                            + timeUnit.name() // units\n+            );\n         }\n+    }\n+\n+    public synchronized void setException(@NonNull final Exception exception) {\n+        mException = exception;\n+        mCountDownLatch.countDown();\n \n+        for (final BiConsumer<T, Throwable> consumer : mConsumers) {\n+            consumer.accept(mResult, exception);\n+        }\n     }\n \n-    public void setResult(T result) {\n+    public synchronized void setResult(@Nullable final T result) {\n         mResult = result;\n         mCountDownLatch.countDown();\n+\n+        for (final BiConsumer<T, Throwable> consumer : mConsumers) {\n+            consumer.accept(result, mException);\n+        }\n+    }\n+\n+    public synchronized void whenComplete(@NonNull final BiConsumer<T, Throwable> consumerToAdd) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NzI1MA=="}, "originalCommit": {"oid": "b814f9995c4edd5edf8b66ab101f49837f11374f"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTQzMjc4OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/result/ResultFuture.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjowOTo0OFrOHGfXEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjoyMjozMlrOHGf3ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NzMxMw==", "bodyText": "Add javadoc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1012#discussion_r476567313", "createdAt": "2020-08-25T16:09:48Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/result/ResultFuture.java", "diffHunk": "@@ -28,21 +59,55 @@ public boolean isDone() {\n     @Override\n     public T get() throws InterruptedException {\n         mCountDownLatch.await();\n+\n+        if (null != mException) {\n+            throw new RuntimeException(mException);\n+        }\n+\n         return mResult;\n     }\n \n     @Override\n-    public T get(long l, TimeUnit timeUnit) throws InterruptedException, TimeoutException {\n+    public T get(final long l, @NonNull final TimeUnit timeUnit) throws InterruptedException, TimeoutException {\n         if (mCountDownLatch.await(l, timeUnit)) {\n+            if (null != mException) {\n+                throw new RuntimeException(mException);\n+            }\n+\n             return mResult;\n         } else {\n-            throw new TimeoutException();\n+            throw new TimeoutException(\n+                    \"Timed out waiting for: \"\n+                            + l // duration\n+                            + timeUnit.name() // units\n+            );\n         }\n+    }\n+\n+    public synchronized void setException(@NonNull final Exception exception) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b814f9995c4edd5edf8b66ab101f49837f11374f"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3NTY3NA==", "bodyText": "1d0cfe6", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1012#discussion_r476575674", "createdAt": "2020-08-25T16:22:32Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/result/ResultFuture.java", "diffHunk": "@@ -28,21 +59,55 @@ public boolean isDone() {\n     @Override\n     public T get() throws InterruptedException {\n         mCountDownLatch.await();\n+\n+        if (null != mException) {\n+            throw new RuntimeException(mException);\n+        }\n+\n         return mResult;\n     }\n \n     @Override\n-    public T get(long l, TimeUnit timeUnit) throws InterruptedException, TimeoutException {\n+    public T get(final long l, @NonNull final TimeUnit timeUnit) throws InterruptedException, TimeoutException {\n         if (mCountDownLatch.await(l, timeUnit)) {\n+            if (null != mException) {\n+                throw new RuntimeException(mException);\n+            }\n+\n             return mResult;\n         } else {\n-            throw new TimeoutException();\n+            throw new TimeoutException(\n+                    \"Timed out waiting for: \"\n+                            + l // duration\n+                            + timeUnit.name() // units\n+            );\n         }\n+    }\n+\n+    public synchronized void setException(@NonNull final Exception exception) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NzMxMw=="}, "originalCommit": {"oid": "b814f9995c4edd5edf8b66ab101f49837f11374f"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTQ0NDQyOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/result/ResultFuture.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjoxMjo0MVrOHGfeLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoxNjozMFrOHGh7XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2OTEzMg==", "bodyText": "I was looking at this, I thought Future threw ExecutionExcepttion as well.  If it does, that's a better throw than runtime below.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1012#discussion_r476569132", "createdAt": "2020-08-25T16:12:41Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/result/ResultFuture.java", "diffHunk": "@@ -28,21 +59,55 @@ public boolean isDone() {\n     @Override\n     public T get() throws InterruptedException {\n         mCountDownLatch.await();\n+\n+        if (null != mException) {\n+            throw new RuntimeException(mException);\n+        }\n+\n         return mResult;\n     }\n \n     @Override\n-    public T get(long l, TimeUnit timeUnit) throws InterruptedException, TimeoutException {\n+    public T get(final long l, @NonNull final TimeUnit timeUnit) throws InterruptedException, TimeoutException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b814f9995c4edd5edf8b66ab101f49837f11374f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwOTM3Mg==", "bodyText": "fae0847\nAdding this checked Exception will require another PR to add try/catch blocks to MSAL so keep an eye out for that once this merges", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1012#discussion_r476609372", "createdAt": "2020-08-25T17:16:30Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/result/ResultFuture.java", "diffHunk": "@@ -28,21 +59,55 @@ public boolean isDone() {\n     @Override\n     public T get() throws InterruptedException {\n         mCountDownLatch.await();\n+\n+        if (null != mException) {\n+            throw new RuntimeException(mException);\n+        }\n+\n         return mResult;\n     }\n \n     @Override\n-    public T get(long l, TimeUnit timeUnit) throws InterruptedException, TimeoutException {\n+    public T get(final long l, @NonNull final TimeUnit timeUnit) throws InterruptedException, TimeoutException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2OTEzMg=="}, "originalCommit": {"oid": "b814f9995c4edd5edf8b66ab101f49837f11374f"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTQ2OTU1OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjoxOTowMVrOHGfuVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzo0ODowMVrOHGjORA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3MzI3MA==", "bodyText": "OK, this is your tricky synchronization part using concurrentMap.  You don't want to risk overwriting a concurrent writer without synchronizing this entire method.  So you make the result future and it's empty.  You then putIfAbsent into the sExecutingCommandMap.  If it returns null, then it did not populate the map and you add your listener to the future that you created since it was added to the map.  If it returns non-null, then you lost the race and you need add a listener to that future and return, since the command is already running.\nYou mainly run the get first because a get in the map is far cheaper than a putIfAbsent.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1012#discussion_r476573270", "createdAt": "2020-08-25T16:19:01Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java", "diffHunk": "@@ -87,15 +92,16 @@ public static void submitSilent(@NonNull final BaseCommand command) {\n                 \"Beginning execution of silent command.\"\n         );\n \n-        if (sExecutingCommands.contains(command)) {\n-            new Handler(Looper.getMainLooper()).post(new Runnable() {\n-                @Override\n-                public void run() {\n-                    command.getCallback().onError(new ClientException(ClientException.DUPLICATE_COMMAND, \"The same command was already received and is being processed.\"));\n-                }\n-            });\n-        } else if (command.isEligibleForCaching()) {\n-            sExecutingCommands.add(command);\n+        final Handler handler = new Handler(Looper.getMainLooper());\n+        ResultFuture<CommandResult> future = sExecutingCommandMap.get(command);\n+\n+        if (null != future) {\n+            future.whenComplete(getCommandResultConsumer(command, handler));\n+            return;\n+        } else {\n+            final ResultFuture<CommandResult> resultFuture = new ResultFuture<>();\n+            resultFuture.whenComplete(getCommandResultConsumer(command, handler));\n+            sExecutingCommandMap.put(command, resultFuture);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b814f9995c4edd5edf8b66ab101f49837f11374f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyMzE0NQ==", "bodyText": "If it returns null, then it did not populate the map and you add your listener to the future that you created since it was added to the map. If it returns non-null, then you lost the race and you need add a listener to that future and return, since the command is already running.\n\nThis seems backwards -- wouldn't returning null indicate that I did win? Looking at:\nhttps://developer.android.com/reference/java/util/concurrent/ConcurrentHashMap?hl=en#putIfAbsent(K,%20V)", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1012#discussion_r476623145", "createdAt": "2020-08-25T17:35:05Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java", "diffHunk": "@@ -87,15 +92,16 @@ public static void submitSilent(@NonNull final BaseCommand command) {\n                 \"Beginning execution of silent command.\"\n         );\n \n-        if (sExecutingCommands.contains(command)) {\n-            new Handler(Looper.getMainLooper()).post(new Runnable() {\n-                @Override\n-                public void run() {\n-                    command.getCallback().onError(new ClientException(ClientException.DUPLICATE_COMMAND, \"The same command was already received and is being processed.\"));\n-                }\n-            });\n-        } else if (command.isEligibleForCaching()) {\n-            sExecutingCommands.add(command);\n+        final Handler handler = new Handler(Looper.getMainLooper());\n+        ResultFuture<CommandResult> future = sExecutingCommandMap.get(command);\n+\n+        if (null != future) {\n+            future.whenComplete(getCommandResultConsumer(command, handler));\n+            return;\n+        } else {\n+            final ResultFuture<CommandResult> resultFuture = new ResultFuture<>();\n+            resultFuture.whenComplete(getCommandResultConsumer(command, handler));\n+            sExecutingCommandMap.put(command, resultFuture);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3MzI3MA=="}, "originalCommit": {"oid": "b814f9995c4edd5edf8b66ab101f49837f11374f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyNDc5Mg==", "bodyText": "You're right.  And my statement was internally inconsistent, even.  If it returns null, it did populate the map and you add the callback to the future that you created and start execution.  If it returns non-null, add and return.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1012#discussion_r476624792", "createdAt": "2020-08-25T17:37:58Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java", "diffHunk": "@@ -87,15 +92,16 @@ public static void submitSilent(@NonNull final BaseCommand command) {\n                 \"Beginning execution of silent command.\"\n         );\n \n-        if (sExecutingCommands.contains(command)) {\n-            new Handler(Looper.getMainLooper()).post(new Runnable() {\n-                @Override\n-                public void run() {\n-                    command.getCallback().onError(new ClientException(ClientException.DUPLICATE_COMMAND, \"The same command was already received and is being processed.\"));\n-                }\n-            });\n-        } else if (command.isEligibleForCaching()) {\n-            sExecutingCommands.add(command);\n+        final Handler handler = new Handler(Looper.getMainLooper());\n+        ResultFuture<CommandResult> future = sExecutingCommandMap.get(command);\n+\n+        if (null != future) {\n+            future.whenComplete(getCommandResultConsumer(command, handler));\n+            return;\n+        } else {\n+            final ResultFuture<CommandResult> resultFuture = new ResultFuture<>();\n+            resultFuture.whenComplete(getCommandResultConsumer(command, handler));\n+            sExecutingCommandMap.put(command, resultFuture);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3MzI3MA=="}, "originalCommit": {"oid": "b814f9995c4edd5edf8b66ab101f49837f11374f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyNDgyNw==", "bodyText": "Think we're saying the same thing?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1012#discussion_r476624827", "createdAt": "2020-08-25T17:38:02Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java", "diffHunk": "@@ -87,15 +92,16 @@ public static void submitSilent(@NonNull final BaseCommand command) {\n                 \"Beginning execution of silent command.\"\n         );\n \n-        if (sExecutingCommands.contains(command)) {\n-            new Handler(Looper.getMainLooper()).post(new Runnable() {\n-                @Override\n-                public void run() {\n-                    command.getCallback().onError(new ClientException(ClientException.DUPLICATE_COMMAND, \"The same command was already received and is being processed.\"));\n-                }\n-            });\n-        } else if (command.isEligibleForCaching()) {\n-            sExecutingCommands.add(command);\n+        final Handler handler = new Handler(Looper.getMainLooper());\n+        ResultFuture<CommandResult> future = sExecutingCommandMap.get(command);\n+\n+        if (null != future) {\n+            future.whenComplete(getCommandResultConsumer(command, handler));\n+            return;\n+        } else {\n+            final ResultFuture<CommandResult> resultFuture = new ResultFuture<>();\n+            resultFuture.whenComplete(getCommandResultConsumer(command, handler));\n+            sExecutingCommandMap.put(command, resultFuture);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3MzI3MA=="}, "originalCommit": {"oid": "b814f9995c4edd5edf8b66ab101f49837f11374f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyNjA3NA==", "bodyText": "Ah gotcha", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1012#discussion_r476626074", "createdAt": "2020-08-25T17:40:11Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java", "diffHunk": "@@ -87,15 +92,16 @@ public static void submitSilent(@NonNull final BaseCommand command) {\n                 \"Beginning execution of silent command.\"\n         );\n \n-        if (sExecutingCommands.contains(command)) {\n-            new Handler(Looper.getMainLooper()).post(new Runnable() {\n-                @Override\n-                public void run() {\n-                    command.getCallback().onError(new ClientException(ClientException.DUPLICATE_COMMAND, \"The same command was already received and is being processed.\"));\n-                }\n-            });\n-        } else if (command.isEligibleForCaching()) {\n-            sExecutingCommands.add(command);\n+        final Handler handler = new Handler(Looper.getMainLooper());\n+        ResultFuture<CommandResult> future = sExecutingCommandMap.get(command);\n+\n+        if (null != future) {\n+            future.whenComplete(getCommandResultConsumer(command, handler));\n+            return;\n+        } else {\n+            final ResultFuture<CommandResult> resultFuture = new ResultFuture<>();\n+            resultFuture.whenComplete(getCommandResultConsumer(command, handler));\n+            sExecutingCommandMap.put(command, resultFuture);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3MzI3MA=="}, "originalCommit": {"oid": "b814f9995c4edd5edf8b66ab101f49837f11374f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyNjM0OA==", "bodyText": "Think we're saying the same thing?\n\nYes.  I'm trying to agree. ;-)", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1012#discussion_r476626348", "createdAt": "2020-08-25T17:40:39Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java", "diffHunk": "@@ -87,15 +92,16 @@ public static void submitSilent(@NonNull final BaseCommand command) {\n                 \"Beginning execution of silent command.\"\n         );\n \n-        if (sExecutingCommands.contains(command)) {\n-            new Handler(Looper.getMainLooper()).post(new Runnable() {\n-                @Override\n-                public void run() {\n-                    command.getCallback().onError(new ClientException(ClientException.DUPLICATE_COMMAND, \"The same command was already received and is being processed.\"));\n-                }\n-            });\n-        } else if (command.isEligibleForCaching()) {\n-            sExecutingCommands.add(command);\n+        final Handler handler = new Handler(Looper.getMainLooper());\n+        ResultFuture<CommandResult> future = sExecutingCommandMap.get(command);\n+\n+        if (null != future) {\n+            future.whenComplete(getCommandResultConsumer(command, handler));\n+            return;\n+        } else {\n+            final ResultFuture<CommandResult> resultFuture = new ResultFuture<>();\n+            resultFuture.whenComplete(getCommandResultConsumer(command, handler));\n+            sExecutingCommandMap.put(command, resultFuture);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3MzI3MA=="}, "originalCommit": {"oid": "b814f9995c4edd5edf8b66ab101f49837f11374f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYzMDU5Ng==", "bodyText": "@AdamBJohnsonx Pushed changes in 98528c6 -- can you spot check me on this commit?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1012#discussion_r476630596", "createdAt": "2020-08-25T17:48:01Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java", "diffHunk": "@@ -87,15 +92,16 @@ public static void submitSilent(@NonNull final BaseCommand command) {\n                 \"Beginning execution of silent command.\"\n         );\n \n-        if (sExecutingCommands.contains(command)) {\n-            new Handler(Looper.getMainLooper()).post(new Runnable() {\n-                @Override\n-                public void run() {\n-                    command.getCallback().onError(new ClientException(ClientException.DUPLICATE_COMMAND, \"The same command was already received and is being processed.\"));\n-                }\n-            });\n-        } else if (command.isEligibleForCaching()) {\n-            sExecutingCommands.add(command);\n+        final Handler handler = new Handler(Looper.getMainLooper());\n+        ResultFuture<CommandResult> future = sExecutingCommandMap.get(command);\n+\n+        if (null != future) {\n+            future.whenComplete(getCommandResultConsumer(command, handler));\n+            return;\n+        } else {\n+            final ResultFuture<CommandResult> resultFuture = new ResultFuture<>();\n+            resultFuture.whenComplete(getCommandResultConsumer(command, handler));\n+            sExecutingCommandMap.put(command, resultFuture);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3MzI3MA=="}, "originalCommit": {"oid": "b814f9995c4edd5edf8b66ab101f49837f11374f"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTQ4NTQxOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjoyMjo0NVrOHGf4Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODoyODozNlrOHGkm9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3NTgyMw==", "bodyText": "Well, do we?  Long term, it's a better way of communicating error states.  The contract here is that either you have a result or you have a throwable.  Mostly, the code for these looks like if (t == null) { error handling; return; } result handling;", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1012#discussion_r476575823", "createdAt": "2020-08-25T16:22:45Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java", "diffHunk": "@@ -139,14 +144,24 @@ public void run() {\n                 Telemetry.getInstance().flush(correlationId);\n                 EstsTelemetry.getInstance().flush(command, commandResult);\n \n-                sExecutingCommands.remove(command);\n-\n                 //Return the result via the callback\n-                returnCommandResult(command, commandResult, handler);\n+                sExecutingCommandMap.remove(command).setResult(commandResult);\n             }\n         });\n     }\n \n+    private static BiConsumer<CommandResult, Throwable> getCommandResultConsumer(\n+            @NonNull final BaseCommand command,\n+            @NonNull final Handler handler) {\n+        return new BiConsumer<CommandResult, Throwable>() {\n+            @Override\n+            public void accept(CommandResult result, Throwable throwable) {\n+                // We can ignore the second (exception) param, not used.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b814f9995c4edd5edf8b66ab101f49837f11374f"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY1MzMwMw==", "bodyText": "Applied in 91ed0a7", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1012#discussion_r476653303", "createdAt": "2020-08-25T18:28:36Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java", "diffHunk": "@@ -139,14 +144,24 @@ public void run() {\n                 Telemetry.getInstance().flush(correlationId);\n                 EstsTelemetry.getInstance().flush(command, commandResult);\n \n-                sExecutingCommands.remove(command);\n-\n                 //Return the result via the callback\n-                returnCommandResult(command, commandResult, handler);\n+                sExecutingCommandMap.remove(command).setResult(commandResult);\n             }\n         });\n     }\n \n+    private static BiConsumer<CommandResult, Throwable> getCommandResultConsumer(\n+            @NonNull final BaseCommand command,\n+            @NonNull final Handler handler) {\n+        return new BiConsumer<CommandResult, Throwable>() {\n+            @Override\n+            public void accept(CommandResult result, Throwable throwable) {\n+                // We can ignore the second (exception) param, not used.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3NTgyMw=="}, "originalCommit": {"oid": "b814f9995c4edd5edf8b66ab101f49837f11374f"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTUzMjUwOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjozNDowNFrOHGgVdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODoyNzozOFrOHGkk5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4MzI4NA==", "bodyText": "Hm.  OK, so we might want to pass in this executor to whenComplete.  As you may notice, in the event of a complete request, we're going to run the call back on whatever the current thread is running on.  If that's OK, it's more straightforward.  But if we want our callback to run on the silentExecutor thread in the event that the result is already completed by the time we attempt to run it, we probably want to pass this executor into whenComplete to use in the event we hit that case.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1012#discussion_r476583284", "createdAt": "2020-08-25T16:34:04Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java", "diffHunk": "@@ -87,15 +92,16 @@ public static void submitSilent(@NonNull final BaseCommand command) {\n                 \"Beginning execution of silent command.\"\n         );\n \n-        if (sExecutingCommands.contains(command)) {\n-            new Handler(Looper.getMainLooper()).post(new Runnable() {\n-                @Override\n-                public void run() {\n-                    command.getCallback().onError(new ClientException(ClientException.DUPLICATE_COMMAND, \"The same command was already received and is being processed.\"));\n-                }\n-            });\n-        } else if (command.isEligibleForCaching()) {\n-            sExecutingCommands.add(command);\n+        final Handler handler = new Handler(Looper.getMainLooper());\n+        ResultFuture<CommandResult> future = sExecutingCommandMap.get(command);\n+\n+        if (null != future) {\n+            future.whenComplete(getCommandResultConsumer(command, handler));\n+            return;\n+        } else {\n+            final ResultFuture<CommandResult> resultFuture = new ResultFuture<>();\n+            resultFuture.whenComplete(getCommandResultConsumer(command, handler));\n+            sExecutingCommandMap.put(command, resultFuture);\n         }\n \n         sSilentExecutor.execute(new Runnable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b814f9995c4edd5edf8b66ab101f49837f11374f"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYzOTUwMg==", "bodyText": "Correct me if I'm wrong here.... I think we want to leave as-is, as calling back on the silentExecutor would be a threading behavioral change", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1012#discussion_r476639502", "createdAt": "2020-08-25T18:03:17Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java", "diffHunk": "@@ -87,15 +92,16 @@ public static void submitSilent(@NonNull final BaseCommand command) {\n                 \"Beginning execution of silent command.\"\n         );\n \n-        if (sExecutingCommands.contains(command)) {\n-            new Handler(Looper.getMainLooper()).post(new Runnable() {\n-                @Override\n-                public void run() {\n-                    command.getCallback().onError(new ClientException(ClientException.DUPLICATE_COMMAND, \"The same command was already received and is being processed.\"));\n-                }\n-            });\n-        } else if (command.isEligibleForCaching()) {\n-            sExecutingCommands.add(command);\n+        final Handler handler = new Handler(Looper.getMainLooper());\n+        ResultFuture<CommandResult> future = sExecutingCommandMap.get(command);\n+\n+        if (null != future) {\n+            future.whenComplete(getCommandResultConsumer(command, handler));\n+            return;\n+        } else {\n+            final ResultFuture<CommandResult> resultFuture = new ResultFuture<>();\n+            resultFuture.whenComplete(getCommandResultConsumer(command, handler));\n+            sExecutingCommandMap.put(command, resultFuture);\n         }\n \n         sSilentExecutor.execute(new Runnable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4MzI4NA=="}, "originalCommit": {"oid": "b814f9995c4edd5edf8b66ab101f49837f11374f"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0ODcxNA==", "bodyText": "returnCommandResult is called by the runnable that was submitted previously, I thought.  Unless it has a way to transfer back to the calling thread, which I don't see, we currently call back from that executor.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1012#discussion_r476648714", "createdAt": "2020-08-25T18:20:23Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java", "diffHunk": "@@ -87,15 +92,16 @@ public static void submitSilent(@NonNull final BaseCommand command) {\n                 \"Beginning execution of silent command.\"\n         );\n \n-        if (sExecutingCommands.contains(command)) {\n-            new Handler(Looper.getMainLooper()).post(new Runnable() {\n-                @Override\n-                public void run() {\n-                    command.getCallback().onError(new ClientException(ClientException.DUPLICATE_COMMAND, \"The same command was already received and is being processed.\"));\n-                }\n-            });\n-        } else if (command.isEligibleForCaching()) {\n-            sExecutingCommands.add(command);\n+        final Handler handler = new Handler(Looper.getMainLooper());\n+        ResultFuture<CommandResult> future = sExecutingCommandMap.get(command);\n+\n+        if (null != future) {\n+            future.whenComplete(getCommandResultConsumer(command, handler));\n+            return;\n+        } else {\n+            final ResultFuture<CommandResult> resultFuture = new ResultFuture<>();\n+            resultFuture.whenComplete(getCommandResultConsumer(command, handler));\n+            sExecutingCommandMap.put(command, resultFuture);\n         }\n \n         sSilentExecutor.execute(new Runnable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4MzI4NA=="}, "originalCommit": {"oid": "b814f9995c4edd5edf8b66ab101f49837f11374f"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY1MDI5Mw==", "bodyText": "It posts back on the Handler created at ~L94 see:\nhttps://github.com/AzureAD/microsoft-authentication-library-common-for-android/blob/iambmelt/command-sub-fix-905-redux/common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java#L230", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1012#discussion_r476650293", "createdAt": "2020-08-25T18:23:09Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java", "diffHunk": "@@ -87,15 +92,16 @@ public static void submitSilent(@NonNull final BaseCommand command) {\n                 \"Beginning execution of silent command.\"\n         );\n \n-        if (sExecutingCommands.contains(command)) {\n-            new Handler(Looper.getMainLooper()).post(new Runnable() {\n-                @Override\n-                public void run() {\n-                    command.getCallback().onError(new ClientException(ClientException.DUPLICATE_COMMAND, \"The same command was already received and is being processed.\"));\n-                }\n-            });\n-        } else if (command.isEligibleForCaching()) {\n-            sExecutingCommands.add(command);\n+        final Handler handler = new Handler(Looper.getMainLooper());\n+        ResultFuture<CommandResult> future = sExecutingCommandMap.get(command);\n+\n+        if (null != future) {\n+            future.whenComplete(getCommandResultConsumer(command, handler));\n+            return;\n+        } else {\n+            final ResultFuture<CommandResult> resultFuture = new ResultFuture<>();\n+            resultFuture.whenComplete(getCommandResultConsumer(command, handler));\n+            sExecutingCommandMap.put(command, resultFuture);\n         }\n \n         sSilentExecutor.execute(new Runnable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4MzI4NA=="}, "originalCommit": {"oid": "b814f9995c4edd5edf8b66ab101f49837f11374f"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY1MjAwMw==", "bodyText": "Wild.  OK, then it doesn't matter. Good - it's simpler like this.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1012#discussion_r476652003", "createdAt": "2020-08-25T18:26:11Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java", "diffHunk": "@@ -87,15 +92,16 @@ public static void submitSilent(@NonNull final BaseCommand command) {\n                 \"Beginning execution of silent command.\"\n         );\n \n-        if (sExecutingCommands.contains(command)) {\n-            new Handler(Looper.getMainLooper()).post(new Runnable() {\n-                @Override\n-                public void run() {\n-                    command.getCallback().onError(new ClientException(ClientException.DUPLICATE_COMMAND, \"The same command was already received and is being processed.\"));\n-                }\n-            });\n-        } else if (command.isEligibleForCaching()) {\n-            sExecutingCommands.add(command);\n+        final Handler handler = new Handler(Looper.getMainLooper());\n+        ResultFuture<CommandResult> future = sExecutingCommandMap.get(command);\n+\n+        if (null != future) {\n+            future.whenComplete(getCommandResultConsumer(command, handler));\n+            return;\n+        } else {\n+            final ResultFuture<CommandResult> resultFuture = new ResultFuture<>();\n+            resultFuture.whenComplete(getCommandResultConsumer(command, handler));\n+            sExecutingCommandMap.put(command, resultFuture);\n         }\n \n         sSilentExecutor.execute(new Runnable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4MzI4NA=="}, "originalCommit": {"oid": "b814f9995c4edd5edf8b66ab101f49837f11374f"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY1Mjc3NA==", "bodyText": "gg", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1012#discussion_r476652774", "createdAt": "2020-08-25T18:27:38Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java", "diffHunk": "@@ -87,15 +92,16 @@ public static void submitSilent(@NonNull final BaseCommand command) {\n                 \"Beginning execution of silent command.\"\n         );\n \n-        if (sExecutingCommands.contains(command)) {\n-            new Handler(Looper.getMainLooper()).post(new Runnable() {\n-                @Override\n-                public void run() {\n-                    command.getCallback().onError(new ClientException(ClientException.DUPLICATE_COMMAND, \"The same command was already received and is being processed.\"));\n-                }\n-            });\n-        } else if (command.isEligibleForCaching()) {\n-            sExecutingCommands.add(command);\n+        final Handler handler = new Handler(Looper.getMainLooper());\n+        ResultFuture<CommandResult> future = sExecutingCommandMap.get(command);\n+\n+        if (null != future) {\n+            future.whenComplete(getCommandResultConsumer(command, handler));\n+            return;\n+        } else {\n+            final ResultFuture<CommandResult> resultFuture = new ResultFuture<>();\n+            resultFuture.whenComplete(getCommandResultConsumer(command, handler));\n+            sExecutingCommandMap.put(command, resultFuture);\n         }\n \n         sSilentExecutor.execute(new Runnable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4MzI4NA=="}, "originalCommit": {"oid": "b814f9995c4edd5edf8b66ab101f49837f11374f"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTk0NDIzOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODoxOToyNVrOHGkTDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODoyMDo0NlrOHGkV8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0ODIwNg==", "bodyText": "Don't think you need this.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1012#discussion_r476648206", "createdAt": "2020-08-25T18:19:25Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java", "diffHunk": "@@ -87,15 +91,26 @@ public static void submitSilent(@NonNull final BaseCommand command) {\n                 \"Beginning execution of silent command.\"\n         );\n \n-        if (sExecutingCommands.contains(command)) {\n-            new Handler(Looper.getMainLooper()).post(new Runnable() {\n-                @Override\n-                public void run() {\n-                    command.getCallback().onError(new ClientException(ClientException.DUPLICATE_COMMAND, \"The same command was already received and is being processed.\"));\n-                }\n-            });\n-        } else if (command.isEligibleForCaching()) {\n-            sExecutingCommands.add(command);\n+        final Handler handler = new Handler(Looper.getMainLooper());\n+        ResultFuture<CommandResult> future = sExecutingCommandMap.get(command);\n+\n+        if (null != future) {\n+            future.whenComplete(getCommandResultConsumer(command, handler));\n+            return;\n+        } else {\n+            final ResultFuture<CommandResult> resultFuture = new ResultFuture<>();\n+            final ResultFuture<CommandResult> putValue = sExecutingCommandMap.putIfAbsent(command, resultFuture);\n+\n+            if (null == putValue) {\n+                // our value was inserted.\n+                resultFuture.whenComplete(getCommandResultConsumer(command, handler));\n+            } else {\n+                // Our value was not inserted, grab the one that was and hang a new listener off it\n+                putValue.whenComplete(getCommandResultConsumer(command, handler));\n+                return;\n+            }\n+\n+            sExecutingCommandMap.put(command, resultFuture);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "906d601b4ea55041efd1f6eae8799f0790ed537d"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0ODk0Ng==", "bodyText": "Already removed, just didn't push the change -- it's in b908342", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1012#discussion_r476648946", "createdAt": "2020-08-25T18:20:46Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java", "diffHunk": "@@ -87,15 +91,26 @@ public static void submitSilent(@NonNull final BaseCommand command) {\n                 \"Beginning execution of silent command.\"\n         );\n \n-        if (sExecutingCommands.contains(command)) {\n-            new Handler(Looper.getMainLooper()).post(new Runnable() {\n-                @Override\n-                public void run() {\n-                    command.getCallback().onError(new ClientException(ClientException.DUPLICATE_COMMAND, \"The same command was already received and is being processed.\"));\n-                }\n-            });\n-        } else if (command.isEligibleForCaching()) {\n-            sExecutingCommands.add(command);\n+        final Handler handler = new Handler(Looper.getMainLooper());\n+        ResultFuture<CommandResult> future = sExecutingCommandMap.get(command);\n+\n+        if (null != future) {\n+            future.whenComplete(getCommandResultConsumer(command, handler));\n+            return;\n+        } else {\n+            final ResultFuture<CommandResult> resultFuture = new ResultFuture<>();\n+            final ResultFuture<CommandResult> putValue = sExecutingCommandMap.putIfAbsent(command, resultFuture);\n+\n+            if (null == putValue) {\n+                // our value was inserted.\n+                resultFuture.whenComplete(getCommandResultConsumer(command, handler));\n+            } else {\n+                // Our value was not inserted, grab the one that was and hang a new listener off it\n+                putValue.whenComplete(getCommandResultConsumer(command, handler));\n+                return;\n+            }\n+\n+            sExecutingCommandMap.put(command, resultFuture);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0ODIwNg=="}, "originalCommit": {"oid": "906d601b4ea55041efd1f6eae8799f0790ed537d"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2223, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}