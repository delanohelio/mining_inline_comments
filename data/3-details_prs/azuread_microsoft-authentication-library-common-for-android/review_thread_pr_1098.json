{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwOTg5OTky", "number": 1098, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOTowOTowOVrOEygnOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOToxMDoyN1rOEygpZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzk4NTg1OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOTowOTowOVrOHpMZvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOToxMjoyM1rOHpMhEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1Njg2Mg==", "bodyText": "Remove before merging", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1098#discussion_r512956862", "createdAt": "2020-10-27T19:09:09Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -312,12 +312,16 @@ public ICacheRecord save(@NonNull final GenericOAuth2Strategy oAuth2Strategy,\n         );\n \n         // remove old refresh token if it's MRRT or FRT\n-        removeRefreshTokenIfNeeded(accountToSave, refreshTokenToSave);\n+        // removeRefreshTokenIfNeeded(accountToSave, refreshTokenToSave);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d1bd984e8355fa2692eac8414e01c5f31eefbdd"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1ODczOQ==", "bodyText": "03b1279", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1098#discussion_r512958739", "createdAt": "2020-10-27T19:12:23Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -312,12 +312,16 @@ public ICacheRecord save(@NonNull final GenericOAuth2Strategy oAuth2Strategy,\n         );\n \n         // remove old refresh token if it's MRRT or FRT\n-        removeRefreshTokenIfNeeded(accountToSave, refreshTokenToSave);\n+        // removeRefreshTokenIfNeeded(accountToSave, refreshTokenToSave);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1Njg2Mg=="}, "originalCommit": {"oid": "1d1bd984e8355fa2692eac8414e01c5f31eefbdd"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzk4NjY4OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOTowOToyMFrOHpMaMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOToxMjoyOVrOHpMhPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1Njk3Ng==", "bodyText": "Update this comment", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1098#discussion_r512956976", "createdAt": "2020-10-27T19:09:20Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -312,12 +312,16 @@ public ICacheRecord save(@NonNull final GenericOAuth2Strategy oAuth2Strategy,\n         );\n \n         // remove old refresh token if it's MRRT or FRT\n-        removeRefreshTokenIfNeeded(accountToSave, refreshTokenToSave);\n+        // removeRefreshTokenIfNeeded(accountToSave, refreshTokenToSave);\n \n         // Save the Account and Credentials...\n         saveAccounts(accountToSave);\n         saveCredentialsInternal(accessTokenToSave, refreshTokenToSave, idTokenToSave);\n \n+        // Add a new method, where we delete all of the refresh tokens in the cache", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d1bd984e8355fa2692eac8414e01c5f31eefbdd"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1ODc4Mg==", "bodyText": "03b1279", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1098#discussion_r512958782", "createdAt": "2020-10-27T19:12:29Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -312,12 +312,16 @@ public ICacheRecord save(@NonNull final GenericOAuth2Strategy oAuth2Strategy,\n         );\n \n         // remove old refresh token if it's MRRT or FRT\n-        removeRefreshTokenIfNeeded(accountToSave, refreshTokenToSave);\n+        // removeRefreshTokenIfNeeded(accountToSave, refreshTokenToSave);\n \n         // Save the Account and Credentials...\n         saveAccounts(accountToSave);\n         saveCredentialsInternal(accessTokenToSave, refreshTokenToSave, idTokenToSave);\n \n+        // Add a new method, where we delete all of the refresh tokens in the cache", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1Njk3Ng=="}, "originalCommit": {"oid": "1d1bd984e8355fa2692eac8414e01c5f31eefbdd"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzk4ODA5OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOTowOTo0MlrOHpMbDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOToxMzozMFrOHpMjeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1NzE5Ng==", "bodyText": "Rename this param", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1098#discussion_r512957196", "createdAt": "2020-10-27T19:09:42Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -327,6 +331,129 @@ public ICacheRecord save(@NonNull final GenericOAuth2Strategy oAuth2Strategy,\n         return result;\n     }\n \n+    private void removeAllRefreshTokensExcept(@NonNull final AccountRecord accountRecord,\n+                                              @NonNull final RefreshTokenRecord refreshTokenRecord) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d1bd984e8355fa2692eac8414e01c5f31eefbdd"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1OTM1Mw==", "bodyText": "5cdc936", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1098#discussion_r512959353", "createdAt": "2020-10-27T19:13:30Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -327,6 +331,129 @@ public ICacheRecord save(@NonNull final GenericOAuth2Strategy oAuth2Strategy,\n         return result;\n     }\n \n+    private void removeAllRefreshTokensExcept(@NonNull final AccountRecord accountRecord,\n+                                              @NonNull final RefreshTokenRecord refreshTokenRecord) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1NzE5Ng=="}, "originalCommit": {"oid": "1d1bd984e8355fa2692eac8414e01c5f31eefbdd"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzk4ODczOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOTowOTo0OFrOHpMbYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOToxNTo0NlrOHpMovA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1NzI4Mg==", "bodyText": "Add javadoc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1098#discussion_r512957282", "createdAt": "2020-10-27T19:09:48Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -327,6 +331,129 @@ public ICacheRecord save(@NonNull final GenericOAuth2Strategy oAuth2Strategy,\n         return result;\n     }\n \n+    private void removeAllRefreshTokensExcept(@NonNull final AccountRecord accountRecord,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d1bd984e8355fa2692eac8414e01c5f31eefbdd"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk2MDcwMA==", "bodyText": "905e9b3", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1098#discussion_r512960700", "createdAt": "2020-10-27T19:15:46Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -327,6 +331,129 @@ public ICacheRecord save(@NonNull final GenericOAuth2Strategy oAuth2Strategy,\n         return result;\n     }\n \n+    private void removeAllRefreshTokensExcept(@NonNull final AccountRecord accountRecord,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1NzI4Mg=="}, "originalCommit": {"oid": "1d1bd984e8355fa2692eac8414e01c5f31eefbdd"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzk5MDgzOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOToxMDoxOFrOHpMcoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOToxOTozNFrOHpMw9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1NzYwMA==", "bodyText": "Add a comment", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1098#discussion_r512957600", "createdAt": "2020-10-27T19:10:18Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -327,6 +331,129 @@ public ICacheRecord save(@NonNull final GenericOAuth2Strategy oAuth2Strategy,\n         return result;\n     }\n \n+    private void removeAllRefreshTokensExcept(@NonNull final AccountRecord accountRecord,\n+                                              @NonNull final RefreshTokenRecord refreshTokenRecord) {\n+        // Delete all of the refresh tokens associated with this account, except for the provided one\n+        final String methodName = \":removeAllRefreshTokensExcept\";\n+        final boolean isFamilyRefreshToken = !StringExtensions.isNullOrBlank(\n+                refreshTokenRecord.getFamilyId()\n+        );\n+\n+        Logger.info(\n+                TAG + methodName,\n+                \"isFamilyRefreshToken? [\" + isFamilyRefreshToken + \"]\"\n+        );\n+\n+        final boolean isMultiResourceCapable = MicrosoftAccount.AUTHORITY_TYPE_V1_V2.equals(\n+                accountRecord.getAuthorityType()\n+        );\n+\n+        Logger.info(\n+                TAG + methodName,\n+                \"isMultiResourceCapable? [\" + isMultiResourceCapable + \"]\"\n+        );\n+\n+        if (isFamilyRefreshToken || isMultiResourceCapable) {\n+            final String environment = accountRecord.getEnvironment();\n+            final String clientId = refreshTokenRecord.getClientId();\n+\n+            final int refreshTokensRemoved = removeRefreshTokensForAccountExcept(\n+                    accountRecord,\n+                    isFamilyRefreshToken,\n+                    environment,\n+                    clientId,\n+                    refreshTokenRecord\n+            );\n+\n+            Logger.info(\n+                    TAG + methodName,\n+                    \"Refresh tokens removed: [\" + refreshTokensRemoved + \"]\"\n+            );\n+\n+            if (refreshTokensRemoved > 1) {\n+                Logger.warn(\n+                        TAG + methodName,\n+                        \"Multiple refresh tokens found for Account.\"\n+                );\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Deletes all of the local refresh tokens on disk for the associated account, except for the\n+     * refresh token provided.\n+     *\n+     * @param accountRecord                    The {@link AccountRecord} for whome tokens should be deleted.\n+     * @param isFamilyRefreshToken             Indicates whether or not the tokens targeted for deletion should\n+     *                                         scope across all client_ids or not.\n+     * @param environment                      The cloud for which tokens should be deleted.\n+     * @param clientId                         The client_id for which tokens should be deleted, if not FRT.\n+     * @param deletionExemptRefreshTokenRecord The refresh token we want to exempt from deletion.\n+     * @return The number of tokens we removed from the cache.\n+     */\n+    private int removeRefreshTokensForAccountExcept(@NonNull final AccountRecord accountRecord,\n+                                                    final boolean isFamilyRefreshToken,\n+                                                    @NonNull final String environment,\n+                                                    @Nullable final String clientId,\n+                                                    @NonNull final RefreshTokenRecord deletionExemptRefreshTokenRecord) {\n+        return removeCredentialsOfTypeForAccountExcept(\n+                environment,\n+                isFamilyRefreshToken\n+                        // Delete all RTs, irrespective of client_id\n+                        // (so long as it is not the exempted record)\n+                        ? null\n+                        : clientId,\n+                CredentialType.RefreshToken,\n+                accountRecord,\n+                true,\n+                deletionExemptRefreshTokenRecord\n+        );\n+    }\n+\n+    /**\n+     * Removes Credentials of the supplied type for the supplied Account; skipping any record\n+     * specified as exempt.\n+     *\n+     * @param environment          Entity which issued the token represented as a host.\n+     * @param clientId             The clientId of the target app.\n+     * @param credentialType       The type of Credential to remove.\n+     * @param targetAccount        The target Account whose Credentials should be removed.\n+     * @param realmAgnostic        True if the specified action should be completed irrespective of realm.\n+     * @param deletionExemptRecord A record which explicitly must not be removed.\n+     * @return The number of Credentials removed.\n+     */\n+    private int removeCredentialsOfTypeForAccountExcept(@NonNull final String environment,\n+                                                        @Nullable final String clientId,\n+                                                        @NonNull final CredentialType credentialType,\n+                                                        @NonNull final AccountRecord targetAccount,\n+                                                        final boolean realmAgnostic,\n+                                                        @NonNull final Credential deletionExemptRecord) {\n+        int credentialsRemoved = 0;\n+\n+        // Query it for Credentials matching the supplied targetAccount\n+        final List<Credential> credentialsToRemove =\n+                mAccountCredentialCache.getCredentialsFilteredBy(\n+                        targetAccount.getHomeAccountId(),\n+                        environment,\n+                        credentialType,\n+                        clientId,\n+                        realmAgnostic\n+                                ? null // wildcard (*) realm\n+                                : targetAccount.getRealm(),\n+                        null, // wildcard (*) target,\n+                        null\n+                );\n+\n+        for (final Credential credentialToRemove : credentialsToRemove) {\n+            if (!deletionExemptRecord.equals(credentialToRemove)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d1bd984e8355fa2692eac8414e01c5f31eefbdd"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk2MjgwNQ==", "bodyText": "904d7cc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1098#discussion_r512962805", "createdAt": "2020-10-27T19:19:34Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -327,6 +331,129 @@ public ICacheRecord save(@NonNull final GenericOAuth2Strategy oAuth2Strategy,\n         return result;\n     }\n \n+    private void removeAllRefreshTokensExcept(@NonNull final AccountRecord accountRecord,\n+                                              @NonNull final RefreshTokenRecord refreshTokenRecord) {\n+        // Delete all of the refresh tokens associated with this account, except for the provided one\n+        final String methodName = \":removeAllRefreshTokensExcept\";\n+        final boolean isFamilyRefreshToken = !StringExtensions.isNullOrBlank(\n+                refreshTokenRecord.getFamilyId()\n+        );\n+\n+        Logger.info(\n+                TAG + methodName,\n+                \"isFamilyRefreshToken? [\" + isFamilyRefreshToken + \"]\"\n+        );\n+\n+        final boolean isMultiResourceCapable = MicrosoftAccount.AUTHORITY_TYPE_V1_V2.equals(\n+                accountRecord.getAuthorityType()\n+        );\n+\n+        Logger.info(\n+                TAG + methodName,\n+                \"isMultiResourceCapable? [\" + isMultiResourceCapable + \"]\"\n+        );\n+\n+        if (isFamilyRefreshToken || isMultiResourceCapable) {\n+            final String environment = accountRecord.getEnvironment();\n+            final String clientId = refreshTokenRecord.getClientId();\n+\n+            final int refreshTokensRemoved = removeRefreshTokensForAccountExcept(\n+                    accountRecord,\n+                    isFamilyRefreshToken,\n+                    environment,\n+                    clientId,\n+                    refreshTokenRecord\n+            );\n+\n+            Logger.info(\n+                    TAG + methodName,\n+                    \"Refresh tokens removed: [\" + refreshTokensRemoved + \"]\"\n+            );\n+\n+            if (refreshTokensRemoved > 1) {\n+                Logger.warn(\n+                        TAG + methodName,\n+                        \"Multiple refresh tokens found for Account.\"\n+                );\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Deletes all of the local refresh tokens on disk for the associated account, except for the\n+     * refresh token provided.\n+     *\n+     * @param accountRecord                    The {@link AccountRecord} for whome tokens should be deleted.\n+     * @param isFamilyRefreshToken             Indicates whether or not the tokens targeted for deletion should\n+     *                                         scope across all client_ids or not.\n+     * @param environment                      The cloud for which tokens should be deleted.\n+     * @param clientId                         The client_id for which tokens should be deleted, if not FRT.\n+     * @param deletionExemptRefreshTokenRecord The refresh token we want to exempt from deletion.\n+     * @return The number of tokens we removed from the cache.\n+     */\n+    private int removeRefreshTokensForAccountExcept(@NonNull final AccountRecord accountRecord,\n+                                                    final boolean isFamilyRefreshToken,\n+                                                    @NonNull final String environment,\n+                                                    @Nullable final String clientId,\n+                                                    @NonNull final RefreshTokenRecord deletionExemptRefreshTokenRecord) {\n+        return removeCredentialsOfTypeForAccountExcept(\n+                environment,\n+                isFamilyRefreshToken\n+                        // Delete all RTs, irrespective of client_id\n+                        // (so long as it is not the exempted record)\n+                        ? null\n+                        : clientId,\n+                CredentialType.RefreshToken,\n+                accountRecord,\n+                true,\n+                deletionExemptRefreshTokenRecord\n+        );\n+    }\n+\n+    /**\n+     * Removes Credentials of the supplied type for the supplied Account; skipping any record\n+     * specified as exempt.\n+     *\n+     * @param environment          Entity which issued the token represented as a host.\n+     * @param clientId             The clientId of the target app.\n+     * @param credentialType       The type of Credential to remove.\n+     * @param targetAccount        The target Account whose Credentials should be removed.\n+     * @param realmAgnostic        True if the specified action should be completed irrespective of realm.\n+     * @param deletionExemptRecord A record which explicitly must not be removed.\n+     * @return The number of Credentials removed.\n+     */\n+    private int removeCredentialsOfTypeForAccountExcept(@NonNull final String environment,\n+                                                        @Nullable final String clientId,\n+                                                        @NonNull final CredentialType credentialType,\n+                                                        @NonNull final AccountRecord targetAccount,\n+                                                        final boolean realmAgnostic,\n+                                                        @NonNull final Credential deletionExemptRecord) {\n+        int credentialsRemoved = 0;\n+\n+        // Query it for Credentials matching the supplied targetAccount\n+        final List<Credential> credentialsToRemove =\n+                mAccountCredentialCache.getCredentialsFilteredBy(\n+                        targetAccount.getHomeAccountId(),\n+                        environment,\n+                        credentialType,\n+                        clientId,\n+                        realmAgnostic\n+                                ? null // wildcard (*) realm\n+                                : targetAccount.getRealm(),\n+                        null, // wildcard (*) target,\n+                        null\n+                );\n+\n+        for (final Credential credentialToRemove : credentialsToRemove) {\n+            if (!deletionExemptRecord.equals(credentialToRemove)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1NzYwMA=="}, "originalCommit": {"oid": "1d1bd984e8355fa2692eac8414e01c5f31eefbdd"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzk5MTQzOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOToxMDoyOFrOHpMdBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOToyMzoyMlrOHpM8Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1NzcwMA==", "bodyText": "Update this also...", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1098#discussion_r512957700", "createdAt": "2020-10-27T19:10:28Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -1689,6 +1816,7 @@ public void setSingleSignOnState(final GenericAccount account,\n         );\n \n         if (isFamilyRefreshToken || isMultiResourceCapable) {\n+            // TODO Consider updating this method for Teams' fix", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d1bd984e8355fa2692eac8414e01c5f31eefbdd"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk2NTY1MQ==", "bodyText": "de0042f", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1098#discussion_r512965651", "createdAt": "2020-10-27T19:23:22Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -1689,6 +1816,7 @@ public void setSingleSignOnState(final GenericAccount account,\n         );\n \n         if (isFamilyRefreshToken || isMultiResourceCapable) {\n+            // TODO Consider updating this method for Teams' fix", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1NzcwMA=="}, "originalCommit": {"oid": "1d1bd984e8355fa2692eac8414e01c5f31eefbdd"}, "originalPosition": 152}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2046, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}