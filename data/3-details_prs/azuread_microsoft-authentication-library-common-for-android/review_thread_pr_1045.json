{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwNjQ5MzQy", "number": 1045, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMjoxMDoyNFrOEl5ldg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMjo0ODowNFrOEmSnbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTc2MjQ2OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMjoxMDoyNFrOHVoLQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMjoxMDoyNFrOHVoLQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ0MDM4Ng==", "bodyText": "Javadoc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r492440386", "createdAt": "2020-09-22T02:10:24Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "diffHunk": "@@ -113,6 +113,42 @@ public String toString() {\n         }\n     }\n \n+    enum Cipher {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5aa3c8ca495b1c84ce1d9bc838dccdb64b417be"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTc2NTU2OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMjoxMjo0NVrOHVoM9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTozMDo0NFrOHWJSzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ0MDgyMg==", "bodyText": "Probably shouldn't even bother to support this", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r492440822", "createdAt": "2020-09-22T02:12:45Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "diffHunk": "@@ -113,6 +113,42 @@ public String toString() {\n         }\n     }\n \n+    enum Cipher {\n+\n+        @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR2)\n+        RSA_ECB_PKCS1_PADDING(\"RSA/ECB/PKCS1Padding\"),\n+\n+        @RequiresApi(Build.VERSION_CODES.M)\n+        RSA_ECB_OAEPWithSHA1AndMGF1Padding(\"RSA/ECB/OAEPWithSHA-1AndMGF1Padding\"),\n+\n+        @RequiresApi(Build.VERSION_CODES.M)\n+        RSA_ECB_OAEPWithSHA_224AndMGF1Padding(\"RSA/ECB/OAEPWithSHA-224AndMGF1Padding\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5aa3c8ca495b1c84ce1d9bc838dccdb64b417be"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4Mjk5MA==", "bodyText": "c6240d5", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r492982990", "createdAt": "2020-09-22T19:30:44Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "diffHunk": "@@ -113,6 +113,42 @@ public String toString() {\n         }\n     }\n \n+    enum Cipher {\n+\n+        @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR2)\n+        RSA_ECB_PKCS1_PADDING(\"RSA/ECB/PKCS1Padding\"),\n+\n+        @RequiresApi(Build.VERSION_CODES.M)\n+        RSA_ECB_OAEPWithSHA1AndMGF1Padding(\"RSA/ECB/OAEPWithSHA-1AndMGF1Padding\"),\n+\n+        @RequiresApi(Build.VERSION_CODES.M)\n+        RSA_ECB_OAEPWithSHA_224AndMGF1Padding(\"RSA/ECB/OAEPWithSHA-224AndMGF1Padding\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ0MDgyMg=="}, "originalCommit": {"oid": "d5aa3c8ca495b1c84ce1d9bc838dccdb64b417be"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTc3Mzk1OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMjoxODo0N1rOHVoRgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDoyMTowOVrOHWK6Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ0MTk4Nw==", "bodyText": "const", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r492441987", "createdAt": "2020-09-22T02:18:47Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -615,6 +617,42 @@ public boolean verify(@NonNull final SigningAlgorithm alg,\n         return false;\n     }\n \n+    @Override\n+    public String encrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String plaintext) throws ClientException {\n+        try {\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+            final RSAPublicKey publicKey = (RSAPublicKey) privateKeyEntry.getCertificate().getPublicKey();\n+            final javax.crypto.Cipher input = javax.crypto.Cipher.getInstance(\n+                    cipher.toString(),\n+                    \"AndroidOpenSSL\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5aa3c8ca495b1c84ce1d9bc838dccdb64b417be"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwOTQ0Ng==", "bodyText": "Removed https://issuetracker.google.com/issues/37091211", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493009446", "createdAt": "2020-09-22T20:21:09Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -615,6 +617,42 @@ public boolean verify(@NonNull final SigningAlgorithm alg,\n         return false;\n     }\n \n+    @Override\n+    public String encrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String plaintext) throws ClientException {\n+        try {\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+            final RSAPublicKey publicKey = (RSAPublicKey) privateKeyEntry.getCertificate().getPublicKey();\n+            final javax.crypto.Cipher input = javax.crypto.Cipher.getInstance(\n+                    cipher.toString(),\n+                    \"AndroidOpenSSL\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ0MTk4Nw=="}, "originalCommit": {"oid": "d5aa3c8ca495b1c84ce1d9bc838dccdb64b417be"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTg2OTc0OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMzoyNjoyNVrOHVpGmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNDowMzoxMVrOHVpixQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NTU3Ng==", "bodyText": "Use interface", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r492455576", "createdAt": "2020-09-22T03:26:25Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -615,6 +617,42 @@ public boolean verify(@NonNull final SigningAlgorithm alg,\n         return false;\n     }\n \n+    @Override\n+    public String encrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String plaintext) throws ClientException {\n+        try {\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+            final RSAPublicKey publicKey = (RSAPublicKey) privateKeyEntry.getCertificate().getPublicKey();\n+            final javax.crypto.Cipher input = javax.crypto.Cipher.getInstance(\n+                    cipher.toString(),\n+                    \"AndroidOpenSSL\"\n+            );\n+            input.init(javax.crypto.Cipher.ENCRYPT_MODE, publicKey);\n+            final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5aa3c8ca495b1c84ce1d9bc838dccdb64b417be"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ2Mjc4OQ==", "bodyText": "wontfix (using #toByteArray())", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r492462789", "createdAt": "2020-09-22T04:03:11Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -615,6 +617,42 @@ public boolean verify(@NonNull final SigningAlgorithm alg,\n         return false;\n     }\n \n+    @Override\n+    public String encrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String plaintext) throws ClientException {\n+        try {\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+            final RSAPublicKey publicKey = (RSAPublicKey) privateKeyEntry.getCertificate().getPublicKey();\n+            final javax.crypto.Cipher input = javax.crypto.Cipher.getInstance(\n+                    cipher.toString(),\n+                    \"AndroidOpenSSL\"\n+            );\n+            input.init(javax.crypto.Cipher.ENCRYPT_MODE, publicKey);\n+            final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NTU3Ng=="}, "originalCommit": {"oid": "d5aa3c8ca495b1c84ce1d9bc838dccdb64b417be"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTg2OTg3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMzoyNjozMlrOHVpGqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNDowNToyNVrOHVpkoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NTU5NQ==", "bodyText": "Use interface", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r492455595", "createdAt": "2020-09-22T03:26:32Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -615,6 +617,42 @@ public boolean verify(@NonNull final SigningAlgorithm alg,\n         return false;\n     }\n \n+    @Override\n+    public String encrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String plaintext) throws ClientException {\n+        try {\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+            final RSAPublicKey publicKey = (RSAPublicKey) privateKeyEntry.getCertificate().getPublicKey();\n+            final javax.crypto.Cipher input = javax.crypto.Cipher.getInstance(\n+                    cipher.toString(),\n+                    \"AndroidOpenSSL\"\n+            );\n+            input.init(javax.crypto.Cipher.ENCRYPT_MODE, publicKey);\n+            final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+            final CipherOutputStream cipherOutputStream = new CipherOutputStream(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5aa3c8ca495b1c84ce1d9bc838dccdb64b417be"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ2MzI2NA==", "bodyText": "3bc1a53", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r492463264", "createdAt": "2020-09-22T04:05:25Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -615,6 +617,42 @@ public boolean verify(@NonNull final SigningAlgorithm alg,\n         return false;\n     }\n \n+    @Override\n+    public String encrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String plaintext) throws ClientException {\n+        try {\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+            final RSAPublicKey publicKey = (RSAPublicKey) privateKeyEntry.getCertificate().getPublicKey();\n+            final javax.crypto.Cipher input = javax.crypto.Cipher.getInstance(\n+                    cipher.toString(),\n+                    \"AndroidOpenSSL\"\n+            );\n+            input.init(javax.crypto.Cipher.ENCRYPT_MODE, publicKey);\n+            final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+            final CipherOutputStream cipherOutputStream = new CipherOutputStream(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NTU5NQ=="}, "originalCommit": {"oid": "d5aa3c8ca495b1c84ce1d9bc838dccdb64b417be"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTg3MDA3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMzoyNjo0MlrOHVpG0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNDoyODo1N1rOHVp3Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NTYzMw==", "bodyText": "Multi-catch block", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r492455633", "createdAt": "2020-09-22T03:26:42Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -615,6 +617,42 @@ public boolean verify(@NonNull final SigningAlgorithm alg,\n         return false;\n     }\n \n+    @Override\n+    public String encrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String plaintext) throws ClientException {\n+        try {\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+            final RSAPublicKey publicKey = (RSAPublicKey) privateKeyEntry.getCertificate().getPublicKey();\n+            final javax.crypto.Cipher input = javax.crypto.Cipher.getInstance(\n+                    cipher.toString(),\n+                    \"AndroidOpenSSL\"\n+            );\n+            input.init(javax.crypto.Cipher.ENCRYPT_MODE, publicKey);\n+            final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+            final CipherOutputStream cipherOutputStream = new CipherOutputStream(\n+                    outputStream,\n+                    input\n+            );\n+            cipherOutputStream.write(plaintext.getBytes(\"UTF-8\"));\n+            cipherOutputStream.close();\n+\n+            byte[] encryptedBase64Data = outputStream.toByteArray();\n+            return Base64.encodeToString(encryptedBase64Data, Base64.DEFAULT);\n+        } catch (Exception e) {\n+            // TODO Cleanup", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5aa3c8ca495b1c84ce1d9bc838dccdb64b417be"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ2ODA3MQ==", "bodyText": "52021d2", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r492468071", "createdAt": "2020-09-22T04:28:57Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -615,6 +617,42 @@ public boolean verify(@NonNull final SigningAlgorithm alg,\n         return false;\n     }\n \n+    @Override\n+    public String encrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String plaintext) throws ClientException {\n+        try {\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+            final RSAPublicKey publicKey = (RSAPublicKey) privateKeyEntry.getCertificate().getPublicKey();\n+            final javax.crypto.Cipher input = javax.crypto.Cipher.getInstance(\n+                    cipher.toString(),\n+                    \"AndroidOpenSSL\"\n+            );\n+            input.init(javax.crypto.Cipher.ENCRYPT_MODE, publicKey);\n+            final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+            final CipherOutputStream cipherOutputStream = new CipherOutputStream(\n+                    outputStream,\n+                    input\n+            );\n+            cipherOutputStream.write(plaintext.getBytes(\"UTF-8\"));\n+            cipherOutputStream.close();\n+\n+            byte[] encryptedBase64Data = outputStream.toByteArray();\n+            return Base64.encodeToString(encryptedBase64Data, Base64.DEFAULT);\n+        } catch (Exception e) {\n+            // TODO Cleanup", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NTYzMw=="}, "originalCommit": {"oid": "d5aa3c8ca495b1c84ce1d9bc838dccdb64b417be"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTg3MDM1OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMzoyNjo0OVrOHVpG8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNDoyOTo0M1rOHVp4GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NTY2Ng==", "bodyText": "throw", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r492455666", "createdAt": "2020-09-22T03:26:49Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -615,6 +617,42 @@ public boolean verify(@NonNull final SigningAlgorithm alg,\n         return false;\n     }\n \n+    @Override\n+    public String encrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String plaintext) throws ClientException {\n+        try {\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+            final RSAPublicKey publicKey = (RSAPublicKey) privateKeyEntry.getCertificate().getPublicKey();\n+            final javax.crypto.Cipher input = javax.crypto.Cipher.getInstance(\n+                    cipher.toString(),\n+                    \"AndroidOpenSSL\"\n+            );\n+            input.init(javax.crypto.Cipher.ENCRYPT_MODE, publicKey);\n+            final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+            final CipherOutputStream cipherOutputStream = new CipherOutputStream(\n+                    outputStream,\n+                    input\n+            );\n+            cipherOutputStream.write(plaintext.getBytes(\"UTF-8\"));\n+            cipherOutputStream.close();\n+\n+            byte[] encryptedBase64Data = outputStream.toByteArray();\n+            return Base64.encodeToString(encryptedBase64Data, Base64.DEFAULT);\n+        } catch (Exception e) {\n+            // TODO Cleanup\n+        }\n+\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5aa3c8ca495b1c84ce1d9bc838dccdb64b417be"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ2ODI0OQ==", "bodyText": "52021d2", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r492468249", "createdAt": "2020-09-22T04:29:43Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -615,6 +617,42 @@ public boolean verify(@NonNull final SigningAlgorithm alg,\n         return false;\n     }\n \n+    @Override\n+    public String encrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String plaintext) throws ClientException {\n+        try {\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+            final RSAPublicKey publicKey = (RSAPublicKey) privateKeyEntry.getCertificate().getPublicKey();\n+            final javax.crypto.Cipher input = javax.crypto.Cipher.getInstance(\n+                    cipher.toString(),\n+                    \"AndroidOpenSSL\"\n+            );\n+            input.init(javax.crypto.Cipher.ENCRYPT_MODE, publicKey);\n+            final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+            final CipherOutputStream cipherOutputStream = new CipherOutputStream(\n+                    outputStream,\n+                    input\n+            );\n+            cipherOutputStream.write(plaintext.getBytes(\"UTF-8\"));\n+            cipherOutputStream.close();\n+\n+            byte[] encryptedBase64Data = outputStream.toByteArray();\n+            return Base64.encodeToString(encryptedBase64Data, Base64.DEFAULT);\n+        } catch (Exception e) {\n+            // TODO Cleanup\n+        }\n+\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NTY2Ng=="}, "originalCommit": {"oid": "d5aa3c8ca495b1c84ce1d9bc838dccdb64b417be"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTg3MTkzOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMzoyODowN1rOHVpH4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOToyOTo0M1rOHWJQjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NTkwNA==", "bodyText": "Remove (deprecated)", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r492455904", "createdAt": "2020-09-22T03:28:07Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "diffHunk": "@@ -113,6 +113,42 @@ public String toString() {\n         }\n     }\n \n+    enum Cipher {\n+\n+        @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR2)\n+        RSA_ECB_PKCS1_PADDING(\"RSA/ECB/PKCS1Padding\"),\n+\n+        @RequiresApi(Build.VERSION_CODES.M)\n+        RSA_ECB_OAEPWithSHA1AndMGF1Padding(\"RSA/ECB/OAEPWithSHA-1AndMGF1Padding\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5aa3c8ca495b1c84ce1d9bc838dccdb64b417be"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4MjQxMw==", "bodyText": "c6240d5", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r492982413", "createdAt": "2020-09-22T19:29:43Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "diffHunk": "@@ -113,6 +113,42 @@ public String toString() {\n         }\n     }\n \n+    enum Cipher {\n+\n+        @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR2)\n+        RSA_ECB_PKCS1_PADDING(\"RSA/ECB/PKCS1Padding\"),\n+\n+        @RequiresApi(Build.VERSION_CODES.M)\n+        RSA_ECB_OAEPWithSHA1AndMGF1Padding(\"RSA/ECB/OAEPWithSHA-1AndMGF1Padding\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NTkwNA=="}, "originalCommit": {"oid": "d5aa3c8ca495b1c84ce1d9bc838dccdb64b417be"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTg4NTI3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMzozODoyNVrOHVpPRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMzozODoyNVrOHVpPRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1Nzc5Nw==", "bodyText": "\"No padding\" not going to be supported (too insecure, ind-cpa)", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r492457797", "createdAt": "2020-09-22T03:38:25Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "diffHunk": "@@ -113,6 +113,42 @@ public String toString() {\n         }\n     }\n \n+    enum Cipher {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5aa3c8ca495b1c84ce1d9bc838dccdb64b417be"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTQ3MzQwOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDozMTo0NVrOHWLQ7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMToyOToyOFrOHWNDxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxNTI3OA==", "bodyText": "Do we not have a Base64Stream running around somewhere?  https://developer.android.com/reference/android/util/Base64InputStream", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493015278", "createdAt": "2020-09-22T20:31:45Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -615,6 +625,162 @@ public boolean verify(@NonNull final SigningAlgorithm alg,\n         return false;\n     }\n \n+    @Override\n+    public String encrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String plaintext) throws ClientException {\n+        final String methodName = \":encrypt\";\n+        final String errCode;\n+        final Exception exception;\n+\n+        try {\n+            // Load our key material\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+\n+            // Get a ref to our public key\n+            final PublicKey publicKey = privateKeyEntry.getCertificate().getPublicKey();\n+\n+            // Init our Cipher\n+            final javax.crypto.Cipher input = javax.crypto.Cipher.getInstance(cipher.toString());\n+            input.init(javax.crypto.Cipher.ENCRYPT_MODE, publicKey);\n+\n+            // Declare an OutputStream to hold our encrypted data\n+            final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+\n+            // Wrap it in our CipherOutputStream, write the contents...\n+            final OutputStream cipherOutputStream = new CipherOutputStream(outputStream, input);\n+            cipherOutputStream.write(plaintext.getBytes(ENCODING_UTF8));\n+            cipherOutputStream.close();\n+\n+            // Flatten our OutputStream to an array\n+            byte[] encryptedBase64Data = outputStream.toByteArray();\n+\n+            // Base64 encode to stringify\n+            return Base64.encodeToString(encryptedBase64Data, Base64.DEFAULT);\n+        } catch (final InvalidKeyException e) {\n+            errCode = INVALID_KEY;\n+            exception = e;\n+        } catch (final UnrecoverableEntryException e) {\n+            errCode = INVALID_PROTECTION_PARAMS;\n+            exception = e;\n+        } catch (final NoSuchAlgorithmException e) {\n+            errCode = NO_SUCH_ALGORITHM;\n+            exception = e;\n+        } catch (final KeyStoreException e) {\n+            errCode = KEYSTORE_NOT_INITIALIZED;\n+            exception = e;\n+        } catch (final NoSuchPaddingException e) {\n+            errCode = NO_SUCH_PADDING;\n+            exception = e;\n+        } catch (final UnsupportedEncodingException e) {\n+            errCode = UNSUPPORTED_ENCODING;\n+            exception = e;\n+        } catch (final IOException e) {\n+            errCode = IO_ERROR;\n+            exception = e;\n+        }\n+\n+        final ClientException clientException = new ClientException(\n+                errCode,\n+                exception.getMessage(),\n+                exception\n+        );\n+\n+        Logger.error(\n+                TAG + methodName,\n+                errCode,\n+                exception\n+        );\n+\n+        throw clientException;\n+    }\n+\n+    @Override\n+    public String decrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String ciphertext) throws ClientException {\n+        final String methodName = \":decrypt\";\n+        final String errCode;\n+        final Exception exception;\n+\n+        try {\n+            // Load our key material\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+\n+            // Get a reference to our private key (will not be loaded into app process)\n+            final PrivateKey privateKey = privateKeyEntry.getPrivateKey();\n+\n+            // Init our cipher instance, don't use a named provider as there seems to be a mix of\n+            // BoringSSL & AndroidOpenSSL\n+            // https://issuetracker.google.com/issues/37091211\n+            final javax.crypto.Cipher outputCipher = javax.crypto.Cipher.getInstance(cipher.toString());\n+            outputCipher.init(javax.crypto.Cipher.DECRYPT_MODE, privateKey);\n+\n+            // Put our ciphertext into an InputStream\n+            final CipherInputStream cipherInputStream = new CipherInputStream(\n+                    new ByteArrayInputStream(\n+                            Base64.decode(\n+                                    ciphertext,\n+                                    Base64.DEFAULT\n+                            )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "942d42f096b83398cd29234f46877b987be10aed"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA0NDY3Nw==", "bodyText": "84e6855", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493044677", "createdAt": "2020-09-22T21:29:28Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -615,6 +625,162 @@ public boolean verify(@NonNull final SigningAlgorithm alg,\n         return false;\n     }\n \n+    @Override\n+    public String encrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String plaintext) throws ClientException {\n+        final String methodName = \":encrypt\";\n+        final String errCode;\n+        final Exception exception;\n+\n+        try {\n+            // Load our key material\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+\n+            // Get a ref to our public key\n+            final PublicKey publicKey = privateKeyEntry.getCertificate().getPublicKey();\n+\n+            // Init our Cipher\n+            final javax.crypto.Cipher input = javax.crypto.Cipher.getInstance(cipher.toString());\n+            input.init(javax.crypto.Cipher.ENCRYPT_MODE, publicKey);\n+\n+            // Declare an OutputStream to hold our encrypted data\n+            final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+\n+            // Wrap it in our CipherOutputStream, write the contents...\n+            final OutputStream cipherOutputStream = new CipherOutputStream(outputStream, input);\n+            cipherOutputStream.write(plaintext.getBytes(ENCODING_UTF8));\n+            cipherOutputStream.close();\n+\n+            // Flatten our OutputStream to an array\n+            byte[] encryptedBase64Data = outputStream.toByteArray();\n+\n+            // Base64 encode to stringify\n+            return Base64.encodeToString(encryptedBase64Data, Base64.DEFAULT);\n+        } catch (final InvalidKeyException e) {\n+            errCode = INVALID_KEY;\n+            exception = e;\n+        } catch (final UnrecoverableEntryException e) {\n+            errCode = INVALID_PROTECTION_PARAMS;\n+            exception = e;\n+        } catch (final NoSuchAlgorithmException e) {\n+            errCode = NO_SUCH_ALGORITHM;\n+            exception = e;\n+        } catch (final KeyStoreException e) {\n+            errCode = KEYSTORE_NOT_INITIALIZED;\n+            exception = e;\n+        } catch (final NoSuchPaddingException e) {\n+            errCode = NO_SUCH_PADDING;\n+            exception = e;\n+        } catch (final UnsupportedEncodingException e) {\n+            errCode = UNSUPPORTED_ENCODING;\n+            exception = e;\n+        } catch (final IOException e) {\n+            errCode = IO_ERROR;\n+            exception = e;\n+        }\n+\n+        final ClientException clientException = new ClientException(\n+                errCode,\n+                exception.getMessage(),\n+                exception\n+        );\n+\n+        Logger.error(\n+                TAG + methodName,\n+                errCode,\n+                exception\n+        );\n+\n+        throw clientException;\n+    }\n+\n+    @Override\n+    public String decrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String ciphertext) throws ClientException {\n+        final String methodName = \":decrypt\";\n+        final String errCode;\n+        final Exception exception;\n+\n+        try {\n+            // Load our key material\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+\n+            // Get a reference to our private key (will not be loaded into app process)\n+            final PrivateKey privateKey = privateKeyEntry.getPrivateKey();\n+\n+            // Init our cipher instance, don't use a named provider as there seems to be a mix of\n+            // BoringSSL & AndroidOpenSSL\n+            // https://issuetracker.google.com/issues/37091211\n+            final javax.crypto.Cipher outputCipher = javax.crypto.Cipher.getInstance(cipher.toString());\n+            outputCipher.init(javax.crypto.Cipher.DECRYPT_MODE, privateKey);\n+\n+            // Put our ciphertext into an InputStream\n+            final CipherInputStream cipherInputStream = new CipherInputStream(\n+                    new ByteArrayInputStream(\n+                            Base64.decode(\n+                                    ciphertext,\n+                                    Base64.DEFAULT\n+                            )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxNTI3OA=="}, "originalCommit": {"oid": "942d42f096b83398cd29234f46877b987be10aed"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTQ5MDAxOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDozNjozMFrOHWLbAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMToyOTowN1rOHWNDGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxNzg1OA==", "bodyText": "This is a lot of copying.  Why not jut put it in a InputStreamReader: https://docs.oracle.com/javase/8/docs/api/java/io/InputStreamReader.html ?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493017858", "createdAt": "2020-09-22T20:36:30Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -615,6 +625,162 @@ public boolean verify(@NonNull final SigningAlgorithm alg,\n         return false;\n     }\n \n+    @Override\n+    public String encrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String plaintext) throws ClientException {\n+        final String methodName = \":encrypt\";\n+        final String errCode;\n+        final Exception exception;\n+\n+        try {\n+            // Load our key material\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+\n+            // Get a ref to our public key\n+            final PublicKey publicKey = privateKeyEntry.getCertificate().getPublicKey();\n+\n+            // Init our Cipher\n+            final javax.crypto.Cipher input = javax.crypto.Cipher.getInstance(cipher.toString());\n+            input.init(javax.crypto.Cipher.ENCRYPT_MODE, publicKey);\n+\n+            // Declare an OutputStream to hold our encrypted data\n+            final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+\n+            // Wrap it in our CipherOutputStream, write the contents...\n+            final OutputStream cipherOutputStream = new CipherOutputStream(outputStream, input);\n+            cipherOutputStream.write(plaintext.getBytes(ENCODING_UTF8));\n+            cipherOutputStream.close();\n+\n+            // Flatten our OutputStream to an array\n+            byte[] encryptedBase64Data = outputStream.toByteArray();\n+\n+            // Base64 encode to stringify\n+            return Base64.encodeToString(encryptedBase64Data, Base64.DEFAULT);\n+        } catch (final InvalidKeyException e) {\n+            errCode = INVALID_KEY;\n+            exception = e;\n+        } catch (final UnrecoverableEntryException e) {\n+            errCode = INVALID_PROTECTION_PARAMS;\n+            exception = e;\n+        } catch (final NoSuchAlgorithmException e) {\n+            errCode = NO_SUCH_ALGORITHM;\n+            exception = e;\n+        } catch (final KeyStoreException e) {\n+            errCode = KEYSTORE_NOT_INITIALIZED;\n+            exception = e;\n+        } catch (final NoSuchPaddingException e) {\n+            errCode = NO_SUCH_PADDING;\n+            exception = e;\n+        } catch (final UnsupportedEncodingException e) {\n+            errCode = UNSUPPORTED_ENCODING;\n+            exception = e;\n+        } catch (final IOException e) {\n+            errCode = IO_ERROR;\n+            exception = e;\n+        }\n+\n+        final ClientException clientException = new ClientException(\n+                errCode,\n+                exception.getMessage(),\n+                exception\n+        );\n+\n+        Logger.error(\n+                TAG + methodName,\n+                errCode,\n+                exception\n+        );\n+\n+        throw clientException;\n+    }\n+\n+    @Override\n+    public String decrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String ciphertext) throws ClientException {\n+        final String methodName = \":decrypt\";\n+        final String errCode;\n+        final Exception exception;\n+\n+        try {\n+            // Load our key material\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+\n+            // Get a reference to our private key (will not be loaded into app process)\n+            final PrivateKey privateKey = privateKeyEntry.getPrivateKey();\n+\n+            // Init our cipher instance, don't use a named provider as there seems to be a mix of\n+            // BoringSSL & AndroidOpenSSL\n+            // https://issuetracker.google.com/issues/37091211\n+            final javax.crypto.Cipher outputCipher = javax.crypto.Cipher.getInstance(cipher.toString());\n+            outputCipher.init(javax.crypto.Cipher.DECRYPT_MODE, privateKey);\n+\n+            // Put our ciphertext into an InputStream\n+            final CipherInputStream cipherInputStream = new CipherInputStream(\n+                    new ByteArrayInputStream(\n+                            Base64.decode(\n+                                    ciphertext,\n+                                    Base64.DEFAULT\n+                            )\n+                    ),\n+                    outputCipher // Our decryption cipher\n+            );\n+\n+            // Declare a List for dynamic sizing\n+            final List<Byte> values = new ArrayList<>();\n+\n+            // Iterate over bytes, adding them to our List\n+            int nextByte;\n+            while ((nextByte = cipherInputStream.read()) != -1) {\n+                values.add((byte) nextByte);\n+            }\n+\n+            final byte[] bytes = new byte[values.size()];\n+\n+            for (int ii = 0; ii < bytes.length; ii++) {\n+                bytes[ii] = values.get(ii);\n+            }\n+\n+            return new String(bytes, 0, bytes.length, ENCODING_SCHEME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "942d42f096b83398cd29234f46877b987be10aed"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA0NDUwNg==", "bodyText": "Lookin' tidier already\n84e6855", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493044506", "createdAt": "2020-09-22T21:29:07Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -615,6 +625,162 @@ public boolean verify(@NonNull final SigningAlgorithm alg,\n         return false;\n     }\n \n+    @Override\n+    public String encrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String plaintext) throws ClientException {\n+        final String methodName = \":encrypt\";\n+        final String errCode;\n+        final Exception exception;\n+\n+        try {\n+            // Load our key material\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+\n+            // Get a ref to our public key\n+            final PublicKey publicKey = privateKeyEntry.getCertificate().getPublicKey();\n+\n+            // Init our Cipher\n+            final javax.crypto.Cipher input = javax.crypto.Cipher.getInstance(cipher.toString());\n+            input.init(javax.crypto.Cipher.ENCRYPT_MODE, publicKey);\n+\n+            // Declare an OutputStream to hold our encrypted data\n+            final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+\n+            // Wrap it in our CipherOutputStream, write the contents...\n+            final OutputStream cipherOutputStream = new CipherOutputStream(outputStream, input);\n+            cipherOutputStream.write(plaintext.getBytes(ENCODING_UTF8));\n+            cipherOutputStream.close();\n+\n+            // Flatten our OutputStream to an array\n+            byte[] encryptedBase64Data = outputStream.toByteArray();\n+\n+            // Base64 encode to stringify\n+            return Base64.encodeToString(encryptedBase64Data, Base64.DEFAULT);\n+        } catch (final InvalidKeyException e) {\n+            errCode = INVALID_KEY;\n+            exception = e;\n+        } catch (final UnrecoverableEntryException e) {\n+            errCode = INVALID_PROTECTION_PARAMS;\n+            exception = e;\n+        } catch (final NoSuchAlgorithmException e) {\n+            errCode = NO_SUCH_ALGORITHM;\n+            exception = e;\n+        } catch (final KeyStoreException e) {\n+            errCode = KEYSTORE_NOT_INITIALIZED;\n+            exception = e;\n+        } catch (final NoSuchPaddingException e) {\n+            errCode = NO_SUCH_PADDING;\n+            exception = e;\n+        } catch (final UnsupportedEncodingException e) {\n+            errCode = UNSUPPORTED_ENCODING;\n+            exception = e;\n+        } catch (final IOException e) {\n+            errCode = IO_ERROR;\n+            exception = e;\n+        }\n+\n+        final ClientException clientException = new ClientException(\n+                errCode,\n+                exception.getMessage(),\n+                exception\n+        );\n+\n+        Logger.error(\n+                TAG + methodName,\n+                errCode,\n+                exception\n+        );\n+\n+        throw clientException;\n+    }\n+\n+    @Override\n+    public String decrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String ciphertext) throws ClientException {\n+        final String methodName = \":decrypt\";\n+        final String errCode;\n+        final Exception exception;\n+\n+        try {\n+            // Load our key material\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+\n+            // Get a reference to our private key (will not be loaded into app process)\n+            final PrivateKey privateKey = privateKeyEntry.getPrivateKey();\n+\n+            // Init our cipher instance, don't use a named provider as there seems to be a mix of\n+            // BoringSSL & AndroidOpenSSL\n+            // https://issuetracker.google.com/issues/37091211\n+            final javax.crypto.Cipher outputCipher = javax.crypto.Cipher.getInstance(cipher.toString());\n+            outputCipher.init(javax.crypto.Cipher.DECRYPT_MODE, privateKey);\n+\n+            // Put our ciphertext into an InputStream\n+            final CipherInputStream cipherInputStream = new CipherInputStream(\n+                    new ByteArrayInputStream(\n+                            Base64.decode(\n+                                    ciphertext,\n+                                    Base64.DEFAULT\n+                            )\n+                    ),\n+                    outputCipher // Our decryption cipher\n+            );\n+\n+            // Declare a List for dynamic sizing\n+            final List<Byte> values = new ArrayList<>();\n+\n+            // Iterate over bytes, adding them to our List\n+            int nextByte;\n+            while ((nextByte = cipherInputStream.read()) != -1) {\n+                values.add((byte) nextByte);\n+            }\n+\n+            final byte[] bytes = new byte[values.size()];\n+\n+            for (int ii = 0; ii < bytes.length; ii++) {\n+                bytes[ii] = values.get(ii);\n+            }\n+\n+            return new String(bytes, 0, bytes.length, ENCODING_SCHEME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxNzg1OA=="}, "originalCommit": {"oid": "942d42f096b83398cd29234f46877b987be10aed"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTUyNjY0OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDo0Njo1N1rOHWLxWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDo1MjoxM1rOHWL8Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyMzU3OA==", "bodyText": "Not going to support this cipher, as it requires use of deprecated sha-1", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493023578", "createdAt": "2020-09-22T20:46:57Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "diffHunk": "@@ -113,6 +113,39 @@ public String toString() {\n         }\n     }\n \n+    /**\n+     * Ciphers supported by our underlying keystore. Asymmetric ciphers shown only.\n+     */\n+    enum Cipher {\n+\n+        @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR2)\n+        RSA_ECB_PKCS1_PADDING(\"RSA/ECB/PKCS1Padding\"),\n+\n+        @RequiresApi(Build.VERSION_CODES.M)\n+        RSA_ECB_OAEPWithSHA_256AndMGF1Padding(\"RSA/ECB/OAEPWithSHA-256AndMGF1Padding\"),\n+\n+        @RequiresApi(Build.VERSION_CODES.M)\n+        RSA_ECB_OAEPWithSHA_384AndMGF1Padding(\"RSA/ECB/OAEPWithSHA-384AndMGF1Padding\"),\n+\n+        @RequiresApi(Build.VERSION_CODES.M)\n+        RSA_ECB_OAEPWithSHA_512AndMGF1Padding(\"RSA/ECB/OAEPWithSHA-512AndMGF1Padding\"),\n+\n+        @RequiresApi(Build.VERSION_CODES.M)\n+        RSA_ECB_OAEPPadding(\"RSA/ECB/OAEPPadding\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "942d42f096b83398cd29234f46877b987be10aed"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyNjM4Mw==", "bodyText": "78cd460", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493026383", "createdAt": "2020-09-22T20:52:13Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "diffHunk": "@@ -113,6 +113,39 @@ public String toString() {\n         }\n     }\n \n+    /**\n+     * Ciphers supported by our underlying keystore. Asymmetric ciphers shown only.\n+     */\n+    enum Cipher {\n+\n+        @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR2)\n+        RSA_ECB_PKCS1_PADDING(\"RSA/ECB/PKCS1Padding\"),\n+\n+        @RequiresApi(Build.VERSION_CODES.M)\n+        RSA_ECB_OAEPWithSHA_256AndMGF1Padding(\"RSA/ECB/OAEPWithSHA-256AndMGF1Padding\"),\n+\n+        @RequiresApi(Build.VERSION_CODES.M)\n+        RSA_ECB_OAEPWithSHA_384AndMGF1Padding(\"RSA/ECB/OAEPWithSHA-384AndMGF1Padding\"),\n+\n+        @RequiresApi(Build.VERSION_CODES.M)\n+        RSA_ECB_OAEPWithSHA_512AndMGF1Padding(\"RSA/ECB/OAEPWithSHA-512AndMGF1Padding\"),\n+\n+        @RequiresApi(Build.VERSION_CODES.M)\n+        RSA_ECB_OAEPPadding(\"RSA/ECB/OAEPPadding\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyMzU3OA=="}, "originalCommit": {"oid": "942d42f096b83398cd29234f46877b987be10aed"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTUzODIwOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDo1MDoxNlrOHWL4ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMzoxNTozM1rOHWPg3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyNTM4Ng==", "bodyText": "Similar to my other comments, you may be able to use a Base64OutputStream here.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493025386", "createdAt": "2020-09-22T20:50:16Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -615,6 +625,162 @@ public boolean verify(@NonNull final SigningAlgorithm alg,\n         return false;\n     }\n \n+    @Override\n+    public String encrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String plaintext) throws ClientException {\n+        final String methodName = \":encrypt\";\n+        final String errCode;\n+        final Exception exception;\n+\n+        try {\n+            // Load our key material\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+\n+            // Get a ref to our public key\n+            final PublicKey publicKey = privateKeyEntry.getCertificate().getPublicKey();\n+\n+            // Init our Cipher\n+            final javax.crypto.Cipher input = javax.crypto.Cipher.getInstance(cipher.toString());\n+            input.init(javax.crypto.Cipher.ENCRYPT_MODE, publicKey);\n+\n+            // Declare an OutputStream to hold our encrypted data\n+            final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+\n+            // Wrap it in our CipherOutputStream, write the contents...\n+            final OutputStream cipherOutputStream = new CipherOutputStream(outputStream, input);\n+            cipherOutputStream.write(plaintext.getBytes(ENCODING_UTF8));\n+            cipherOutputStream.close();\n+\n+            // Flatten our OutputStream to an array\n+            byte[] encryptedBase64Data = outputStream.toByteArray();\n+\n+            // Base64 encode to stringify\n+            return Base64.encodeToString(encryptedBase64Data, Base64.DEFAULT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "942d42f096b83398cd29234f46877b987be10aed"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1OTAyMA==", "bodyText": "Applied in 02668e9\nKind've breaking-even syntactically. This may be a bit more idiomatic", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493059020", "createdAt": "2020-09-22T22:02:19Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -615,6 +625,162 @@ public boolean verify(@NonNull final SigningAlgorithm alg,\n         return false;\n     }\n \n+    @Override\n+    public String encrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String plaintext) throws ClientException {\n+        final String methodName = \":encrypt\";\n+        final String errCode;\n+        final Exception exception;\n+\n+        try {\n+            // Load our key material\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+\n+            // Get a ref to our public key\n+            final PublicKey publicKey = privateKeyEntry.getCertificate().getPublicKey();\n+\n+            // Init our Cipher\n+            final javax.crypto.Cipher input = javax.crypto.Cipher.getInstance(cipher.toString());\n+            input.init(javax.crypto.Cipher.ENCRYPT_MODE, publicKey);\n+\n+            // Declare an OutputStream to hold our encrypted data\n+            final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+\n+            // Wrap it in our CipherOutputStream, write the contents...\n+            final OutputStream cipherOutputStream = new CipherOutputStream(outputStream, input);\n+            cipherOutputStream.write(plaintext.getBytes(ENCODING_UTF8));\n+            cipherOutputStream.close();\n+\n+            // Flatten our OutputStream to an array\n+            byte[] encryptedBase64Data = outputStream.toByteArray();\n+\n+            // Base64 encode to stringify\n+            return Base64.encodeToString(encryptedBase64Data, Base64.DEFAULT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyNTM4Ng=="}, "originalCommit": {"oid": "942d42f096b83398cd29234f46877b987be10aed"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4NDg5Mw==", "bodyText": "If we go to min API 19, then we get try-with-resources, where you can:\ntry(Stream one = makeStream();\nStream two = makeAnotherStream(one)) {\ndo things with streams\n}\nNo closing, nothing else.\nCan we add multiDexEnabled true to our code, or is there a ProGuard issue with that?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493084893", "createdAt": "2020-09-22T23:15:33Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -615,6 +625,162 @@ public boolean verify(@NonNull final SigningAlgorithm alg,\n         return false;\n     }\n \n+    @Override\n+    public String encrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String plaintext) throws ClientException {\n+        final String methodName = \":encrypt\";\n+        final String errCode;\n+        final Exception exception;\n+\n+        try {\n+            // Load our key material\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+\n+            // Get a ref to our public key\n+            final PublicKey publicKey = privateKeyEntry.getCertificate().getPublicKey();\n+\n+            // Init our Cipher\n+            final javax.crypto.Cipher input = javax.crypto.Cipher.getInstance(cipher.toString());\n+            input.init(javax.crypto.Cipher.ENCRYPT_MODE, publicKey);\n+\n+            // Declare an OutputStream to hold our encrypted data\n+            final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+\n+            // Wrap it in our CipherOutputStream, write the contents...\n+            final OutputStream cipherOutputStream = new CipherOutputStream(outputStream, input);\n+            cipherOutputStream.write(plaintext.getBytes(ENCODING_UTF8));\n+            cipherOutputStream.close();\n+\n+            // Flatten our OutputStream to an array\n+            byte[] encryptedBase64Data = outputStream.toByteArray();\n+\n+            // Base64 encode to stringify\n+            return Base64.encodeToString(encryptedBase64Data, Base64.DEFAULT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyNTM4Ng=="}, "originalCommit": {"oid": "942d42f096b83398cd29234f46877b987be10aed"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTc1NDA5OnYy", "diffSide": "RIGHT", "path": "common/src/androidTest/java/com/microsoft/identity/common/internal/platform/DevicePoPManagerTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMjowMjozNVrOHWN8Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMjowNjo0NVrOHWOCPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1OTEwNw==", "bodyText": "Remove this test", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493059107", "createdAt": "2020-09-22T22:02:35Z", "author": {"login": "iambmelt"}, "path": "common/src/androidTest/java/com/microsoft/identity/common/internal/platform/DevicePoPManagerTests.java", "diffHunk": "@@ -366,4 +367,19 @@ public void testAsymmetricKeyHasPublicKeyJwk() throws ClientException {\n         Assert.assertNotNull(n);\n         Assert.assertFalse(n.getAsString().isEmpty());\n     }\n+\n+    @Test\n+    public void testCanEncryptDataPkcs1() throws ClientException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02668e90e3683ef1ab9c0ee843f7a1457a2e0c8b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2MDY2OQ==", "bodyText": "76f3122", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493060669", "createdAt": "2020-09-22T22:06:45Z", "author": {"login": "iambmelt"}, "path": "common/src/androidTest/java/com/microsoft/identity/common/internal/platform/DevicePoPManagerTests.java", "diffHunk": "@@ -366,4 +367,19 @@ public void testAsymmetricKeyHasPublicKeyJwk() throws ClientException {\n         Assert.assertNotNull(n);\n         Assert.assertFalse(n.getAsString().isEmpty());\n     }\n+\n+    @Test\n+    public void testCanEncryptDataPkcs1() throws ClientException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1OTEwNw=="}, "originalCommit": {"oid": "02668e90e3683ef1ab9c0ee843f7a1457a2e0c8b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTg1NTY0OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMjo0NDoyNFrOHWO4_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMzoyNzowMlrOHWPuNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA3NDY4Nw==", "bodyText": "Close in a finally block to avoid any potential resource leaks.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493074687", "createdAt": "2020-09-22T22:44:24Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -615,6 +626,163 @@ public boolean verify(@NonNull final SigningAlgorithm alg,\n         return false;\n     }\n \n+    @Override\n+    public String encrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String plaintext) throws ClientException {\n+        final String methodName = \":encrypt\";\n+        final String errCode;\n+        final Exception exception;\n+\n+        try {\n+            // Load our key material\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+\n+            // Get a ref to our public key\n+            final PublicKey publicKey = privateKeyEntry.getCertificate().getPublicKey();\n+\n+            // Init our Cipher\n+            final javax.crypto.Cipher input = javax.crypto.Cipher.getInstance(cipher.toString());\n+            input.init(javax.crypto.Cipher.ENCRYPT_MODE, publicKey);\n+\n+            // Declare an OutputStream to hold our encrypted data\n+            final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n+\n+            // Create a B64Stream to encode our incoming data, and write it to our ByteArrayStream\n+            final Base64OutputStream base64OutputStream = new Base64OutputStream(\n+                    byteArrayOutputStream,\n+                    Base64.DEFAULT\n+            );\n+\n+            // Wrap it in our CipherOutputStream, write the contents...\n+            final OutputStream cipherOutputStream = new CipherOutputStream(base64OutputStream, input);\n+            cipherOutputStream.write(plaintext.getBytes(ENCODING_UTF8));\n+            cipherOutputStream.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76f3122d48004af2fede7113def1337011a6d7f5"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA3NjMwMw==", "bodyText": "ACK", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493076303", "createdAt": "2020-09-22T22:49:26Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -615,6 +626,163 @@ public boolean verify(@NonNull final SigningAlgorithm alg,\n         return false;\n     }\n \n+    @Override\n+    public String encrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String plaintext) throws ClientException {\n+        final String methodName = \":encrypt\";\n+        final String errCode;\n+        final Exception exception;\n+\n+        try {\n+            // Load our key material\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+\n+            // Get a ref to our public key\n+            final PublicKey publicKey = privateKeyEntry.getCertificate().getPublicKey();\n+\n+            // Init our Cipher\n+            final javax.crypto.Cipher input = javax.crypto.Cipher.getInstance(cipher.toString());\n+            input.init(javax.crypto.Cipher.ENCRYPT_MODE, publicKey);\n+\n+            // Declare an OutputStream to hold our encrypted data\n+            final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n+\n+            // Create a B64Stream to encode our incoming data, and write it to our ByteArrayStream\n+            final Base64OutputStream base64OutputStream = new Base64OutputStream(\n+                    byteArrayOutputStream,\n+                    Base64.DEFAULT\n+            );\n+\n+            // Wrap it in our CipherOutputStream, write the contents...\n+            final OutputStream cipherOutputStream = new CipherOutputStream(base64OutputStream, input);\n+            cipherOutputStream.write(plaintext.getBytes(ENCODING_UTF8));\n+            cipherOutputStream.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA3NDY4Nw=="}, "originalCommit": {"oid": "76f3122d48004af2fede7113def1337011a6d7f5"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4ODMxMA==", "bodyText": "da7aff8", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493088310", "createdAt": "2020-09-22T23:27:02Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -615,6 +626,163 @@ public boolean verify(@NonNull final SigningAlgorithm alg,\n         return false;\n     }\n \n+    @Override\n+    public String encrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String plaintext) throws ClientException {\n+        final String methodName = \":encrypt\";\n+        final String errCode;\n+        final Exception exception;\n+\n+        try {\n+            // Load our key material\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+\n+            // Get a ref to our public key\n+            final PublicKey publicKey = privateKeyEntry.getCertificate().getPublicKey();\n+\n+            // Init our Cipher\n+            final javax.crypto.Cipher input = javax.crypto.Cipher.getInstance(cipher.toString());\n+            input.init(javax.crypto.Cipher.ENCRYPT_MODE, publicKey);\n+\n+            // Declare an OutputStream to hold our encrypted data\n+            final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n+\n+            // Create a B64Stream to encode our incoming data, and write it to our ByteArrayStream\n+            final Base64OutputStream base64OutputStream = new Base64OutputStream(\n+                    byteArrayOutputStream,\n+                    Base64.DEFAULT\n+            );\n+\n+            // Wrap it in our CipherOutputStream, write the contents...\n+            final OutputStream cipherOutputStream = new CipherOutputStream(base64OutputStream, input);\n+            cipherOutputStream.write(plaintext.getBytes(ENCODING_UTF8));\n+            cipherOutputStream.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA3NDY4Nw=="}, "originalCommit": {"oid": "76f3122d48004af2fede7113def1337011a6d7f5"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTg2MzUxOnYy", "diffSide": "RIGHT", "path": "common/src/androidTest/java/com/microsoft/identity/common/internal/platform/DevicePoPManagerEncryptionTests.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMjo0ODowNFrOHWO9wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMzoyODo1NFrOHWPwgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA3NTkwNQ==", "bodyText": "For grins, here, maybe make sure that !DATA_TO_ENCRYPT.equals(cipherText)", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493075905", "createdAt": "2020-09-22T22:48:04Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/androidTest/java/com/microsoft/identity/common/internal/platform/DevicePoPManagerEncryptionTests.java", "diffHunk": "@@ -0,0 +1,101 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.platform;\n+\n+import android.os.Build;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.exception.ClientException;\n+\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.io.IOException;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.cert.CertificateException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.internal.platform.IDevicePopManager.Cipher.RSA_ECB_OAEPWithSHA_256AndMGF1Padding;\n+import static com.microsoft.identity.common.internal.platform.IDevicePopManager.Cipher.RSA_ECB_OAEPWithSHA_384AndMGF1Padding;\n+import static com.microsoft.identity.common.internal.platform.IDevicePopManager.Cipher.RSA_ECB_OAEPWithSHA_512AndMGF1Padding;\n+import static com.microsoft.identity.common.internal.platform.IDevicePopManager.Cipher.RSA_ECB_PKCS1_PADDING;\n+\n+// Note: Test cannot use robolectric due to the following open issue\n+// https://github.com/robolectric/robolectric/issues/1518\n+@RunWith(Parameterized.class)\n+public class DevicePoPManagerEncryptionTests {\n+\n+    private static final String DATA_TO_ENCRYPT = \"The quick brown fox jumped over the lazy dog.\";\n+\n+    private final IDevicePopManager devicePopManager;\n+    private final IDevicePopManager.Cipher cipher;\n+\n+    @Parameterized.Parameters\n+    public static Iterable<IDevicePopManager.Cipher> testParams() {\n+        final List<IDevicePopManager.Cipher> ciphers = new ArrayList<>();\n+\n+        // Only execute these tests at appropriate API levels...\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {\n+            ciphers.add(RSA_ECB_PKCS1_PADDING);\n+        }\n+\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n+            ciphers.add(RSA_ECB_OAEPWithSHA_256AndMGF1Padding);\n+            ciphers.add(RSA_ECB_OAEPWithSHA_384AndMGF1Padding);\n+            ciphers.add(RSA_ECB_OAEPWithSHA_512AndMGF1Padding);\n+        }\n+\n+        return ciphers;\n+    }\n+\n+    public DevicePoPManagerEncryptionTests(final IDevicePopManager.Cipher cipher)\n+            throws CertificateException, NoSuchAlgorithmException, KeyStoreException, IOException {\n+        devicePopManager = new DevicePopManager();\n+        this.cipher = cipher;\n+    }\n+\n+    @Before\n+    public void setUp() throws ClientException {\n+        devicePopManager.generateAsymmetricKey(ApplicationProvider.getApplicationContext());\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        devicePopManager.clearAsymmetricKey();\n+    }\n+\n+    @Test\n+    public void testEncryption() throws ClientException {\n+        final String cipherText = devicePopManager.encrypt(cipher, DATA_TO_ENCRYPT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76f3122d48004af2fede7113def1337011a6d7f5"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA3NjMxNw==", "bodyText": "ACK", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493076317", "createdAt": "2020-09-22T22:49:30Z", "author": {"login": "iambmelt"}, "path": "common/src/androidTest/java/com/microsoft/identity/common/internal/platform/DevicePoPManagerEncryptionTests.java", "diffHunk": "@@ -0,0 +1,101 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.platform;\n+\n+import android.os.Build;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.exception.ClientException;\n+\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.io.IOException;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.cert.CertificateException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.internal.platform.IDevicePopManager.Cipher.RSA_ECB_OAEPWithSHA_256AndMGF1Padding;\n+import static com.microsoft.identity.common.internal.platform.IDevicePopManager.Cipher.RSA_ECB_OAEPWithSHA_384AndMGF1Padding;\n+import static com.microsoft.identity.common.internal.platform.IDevicePopManager.Cipher.RSA_ECB_OAEPWithSHA_512AndMGF1Padding;\n+import static com.microsoft.identity.common.internal.platform.IDevicePopManager.Cipher.RSA_ECB_PKCS1_PADDING;\n+\n+// Note: Test cannot use robolectric due to the following open issue\n+// https://github.com/robolectric/robolectric/issues/1518\n+@RunWith(Parameterized.class)\n+public class DevicePoPManagerEncryptionTests {\n+\n+    private static final String DATA_TO_ENCRYPT = \"The quick brown fox jumped over the lazy dog.\";\n+\n+    private final IDevicePopManager devicePopManager;\n+    private final IDevicePopManager.Cipher cipher;\n+\n+    @Parameterized.Parameters\n+    public static Iterable<IDevicePopManager.Cipher> testParams() {\n+        final List<IDevicePopManager.Cipher> ciphers = new ArrayList<>();\n+\n+        // Only execute these tests at appropriate API levels...\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {\n+            ciphers.add(RSA_ECB_PKCS1_PADDING);\n+        }\n+\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n+            ciphers.add(RSA_ECB_OAEPWithSHA_256AndMGF1Padding);\n+            ciphers.add(RSA_ECB_OAEPWithSHA_384AndMGF1Padding);\n+            ciphers.add(RSA_ECB_OAEPWithSHA_512AndMGF1Padding);\n+        }\n+\n+        return ciphers;\n+    }\n+\n+    public DevicePoPManagerEncryptionTests(final IDevicePopManager.Cipher cipher)\n+            throws CertificateException, NoSuchAlgorithmException, KeyStoreException, IOException {\n+        devicePopManager = new DevicePopManager();\n+        this.cipher = cipher;\n+    }\n+\n+    @Before\n+    public void setUp() throws ClientException {\n+        devicePopManager.generateAsymmetricKey(ApplicationProvider.getApplicationContext());\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        devicePopManager.clearAsymmetricKey();\n+    }\n+\n+    @Test\n+    public void testEncryption() throws ClientException {\n+        final String cipherText = devicePopManager.encrypt(cipher, DATA_TO_ENCRYPT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA3NTkwNQ=="}, "originalCommit": {"oid": "76f3122d48004af2fede7113def1337011a6d7f5"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4ODg5OQ==", "bodyText": "4ec108d", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493088899", "createdAt": "2020-09-22T23:28:54Z", "author": {"login": "iambmelt"}, "path": "common/src/androidTest/java/com/microsoft/identity/common/internal/platform/DevicePoPManagerEncryptionTests.java", "diffHunk": "@@ -0,0 +1,101 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.platform;\n+\n+import android.os.Build;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.exception.ClientException;\n+\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.io.IOException;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.cert.CertificateException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.internal.platform.IDevicePopManager.Cipher.RSA_ECB_OAEPWithSHA_256AndMGF1Padding;\n+import static com.microsoft.identity.common.internal.platform.IDevicePopManager.Cipher.RSA_ECB_OAEPWithSHA_384AndMGF1Padding;\n+import static com.microsoft.identity.common.internal.platform.IDevicePopManager.Cipher.RSA_ECB_OAEPWithSHA_512AndMGF1Padding;\n+import static com.microsoft.identity.common.internal.platform.IDevicePopManager.Cipher.RSA_ECB_PKCS1_PADDING;\n+\n+// Note: Test cannot use robolectric due to the following open issue\n+// https://github.com/robolectric/robolectric/issues/1518\n+@RunWith(Parameterized.class)\n+public class DevicePoPManagerEncryptionTests {\n+\n+    private static final String DATA_TO_ENCRYPT = \"The quick brown fox jumped over the lazy dog.\";\n+\n+    private final IDevicePopManager devicePopManager;\n+    private final IDevicePopManager.Cipher cipher;\n+\n+    @Parameterized.Parameters\n+    public static Iterable<IDevicePopManager.Cipher> testParams() {\n+        final List<IDevicePopManager.Cipher> ciphers = new ArrayList<>();\n+\n+        // Only execute these tests at appropriate API levels...\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {\n+            ciphers.add(RSA_ECB_PKCS1_PADDING);\n+        }\n+\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n+            ciphers.add(RSA_ECB_OAEPWithSHA_256AndMGF1Padding);\n+            ciphers.add(RSA_ECB_OAEPWithSHA_384AndMGF1Padding);\n+            ciphers.add(RSA_ECB_OAEPWithSHA_512AndMGF1Padding);\n+        }\n+\n+        return ciphers;\n+    }\n+\n+    public DevicePoPManagerEncryptionTests(final IDevicePopManager.Cipher cipher)\n+            throws CertificateException, NoSuchAlgorithmException, KeyStoreException, IOException {\n+        devicePopManager = new DevicePopManager();\n+        this.cipher = cipher;\n+    }\n+\n+    @Before\n+    public void setUp() throws ClientException {\n+        devicePopManager.generateAsymmetricKey(ApplicationProvider.getApplicationContext());\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        devicePopManager.clearAsymmetricKey();\n+    }\n+\n+    @Test\n+    public void testEncryption() throws ClientException {\n+        final String cipherText = devicePopManager.encrypt(cipher, DATA_TO_ENCRYPT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA3NTkwNQ=="}, "originalCommit": {"oid": "76f3122d48004af2fede7113def1337011a6d7f5"}, "originalPosition": 96}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2277, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}