{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MzA5Mzkz", "number": 794, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMzo1Mjo1NFrODdhatQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNDoxNzoxMlrODdjxfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjgyODA1OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/AbstractAccountCredentialCache.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMzo1Mjo1NVrOFmLM6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNDoxNDo1NFrOFmO0kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3MzczOQ==", "bodyText": "nit: should we even expose this boolean? (as we always use 'true' as its value)", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/794#discussion_r375573739", "createdAt": "2020-02-05T23:52:55Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/AbstractAccountCredentialCache.java", "diffHunk": "@@ -210,13 +212,16 @@\n     /**\n      * Examines the intersections of the provided targets (scopes).\n      *\n-     * @param targetToMatch    The target value[s] our cache-query is looking for.\n-     * @param credentialTarget The target against which our sought value will be compared.\n+     * @param targetToMatch     The target value[s] our cache-query is looking for.\n+     * @param credentialTarget  The target against which our sought value will be compared.\n+     * @param omitDefaultScopes True if MSAL's default scopes should be considered in this lookup.\n+     *                          False otherwise.\n      * @return True, if the credentialTarget contains all of the targets (scopes) declared by\n      * targetToMatch. False otherwise.\n      */\n     static boolean targetsIntersect(@NonNull final String targetToMatch,\n-                                    @NonNull final String credentialTarget) {\n+                                    @NonNull final String credentialTarget,\n+                                    boolean omitDefaultScopes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a85a0ea57678202caa705568ee5eaae6da69e6dd"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYzMzA0MQ==", "bodyText": "I think it would be good to have in case if a child implementation of AbstractAccountCredentialCache wishes to override it in the future", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/794#discussion_r375633041", "createdAt": "2020-02-06T04:14:54Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/AbstractAccountCredentialCache.java", "diffHunk": "@@ -210,13 +212,16 @@\n     /**\n      * Examines the intersections of the provided targets (scopes).\n      *\n-     * @param targetToMatch    The target value[s] our cache-query is looking for.\n-     * @param credentialTarget The target against which our sought value will be compared.\n+     * @param targetToMatch     The target value[s] our cache-query is looking for.\n+     * @param credentialTarget  The target against which our sought value will be compared.\n+     * @param omitDefaultScopes True if MSAL's default scopes should be considered in this lookup.\n+     *                          False otherwise.\n      * @return True, if the credentialTarget contains all of the targets (scopes) declared by\n      * targetToMatch. False otherwise.\n      */\n     static boolean targetsIntersect(@NonNull final String targetToMatch,\n-                                    @NonNull final String credentialTarget) {\n+                                    @NonNull final String credentialTarget,\n+                                    boolean omitDefaultScopes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3MzczOQ=="}, "originalCommit": {"oid": "a85a0ea57678202caa705568ee5eaae6da69e6dd"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzIxNDA0OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MicrosoftStsAccountCredentialAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNDoxNzoxMlrOFmO2EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODo1NjowNVrOFmmc6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYzMzQyNQ==", "bodyText": "I think it would be better to use a StringBuilder here as the size of the scope set isn't known and could be big", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/794#discussion_r375633425", "createdAt": "2020-02-06T04:17:12Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MicrosoftStsAccountCredentialAdapter.java", "diffHunk": "@@ -129,18 +130,27 @@ private String getCredentialType(@NonNull final String tokenType) {\n      * @param responseScope The response scope to parse.\n      * @return The target containing default scopes.\n      */\n-    private String getTarget(@NonNull final String responseScope) {\n-        if (responseScope.contains(AuthenticationConstants.OAuth2Scopes.OPEN_ID_SCOPE)) {\n-            if (responseScope.contains(AuthenticationConstants.OAuth2Scopes.OFFLINE_ACCESS_SCOPE)) {\n-                return responseScope;\n-            } else {\n-                return responseScope + \" \" + AuthenticationConstants.OAuth2Scopes.OFFLINE_ACCESS_SCOPE;\n+    private String getTarget(@NonNull final String requestScope,\n+                             @NonNull final String responseScope) {\n+        String scopesToCache = \"\";\n+\n+        if (TextUtils.isEmpty(responseScope)) {\n+            // The response scopes were empty -- per https://tools.ietf.org/html/rfc6749#section-3.3\n+            // we are going to fall back to a the request scopes minus any default scopes....\n+            final String[] requestScopes = requestScope.split(\"\\\\s+\");\n+            final Set<String> requestScopeSet = new HashSet<>(Arrays.asList(requestScopes));\n+            requestScopeSet.removeAll(DEFAULT_SCOPES);\n+\n+            for (final String scope : requestScopeSet) {\n+                scopesToCache += scope + \" \";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a85a0ea57678202caa705568ee5eaae6da69e6dd"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAyMDIwMA==", "bodyText": "The perf of + and StringBuilder is fairly comparable due to compiler optimizations. Given that StringBuilder hurts readability IMO, I'm going to leave as is.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/794#discussion_r376020200", "createdAt": "2020-02-06T18:56:05Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MicrosoftStsAccountCredentialAdapter.java", "diffHunk": "@@ -129,18 +130,27 @@ private String getCredentialType(@NonNull final String tokenType) {\n      * @param responseScope The response scope to parse.\n      * @return The target containing default scopes.\n      */\n-    private String getTarget(@NonNull final String responseScope) {\n-        if (responseScope.contains(AuthenticationConstants.OAuth2Scopes.OPEN_ID_SCOPE)) {\n-            if (responseScope.contains(AuthenticationConstants.OAuth2Scopes.OFFLINE_ACCESS_SCOPE)) {\n-                return responseScope;\n-            } else {\n-                return responseScope + \" \" + AuthenticationConstants.OAuth2Scopes.OFFLINE_ACCESS_SCOPE;\n+    private String getTarget(@NonNull final String requestScope,\n+                             @NonNull final String responseScope) {\n+        String scopesToCache = \"\";\n+\n+        if (TextUtils.isEmpty(responseScope)) {\n+            // The response scopes were empty -- per https://tools.ietf.org/html/rfc6749#section-3.3\n+            // we are going to fall back to a the request scopes minus any default scopes....\n+            final String[] requestScopes = requestScope.split(\"\\\\s+\");\n+            final Set<String> requestScopeSet = new HashSet<>(Arrays.asList(requestScopes));\n+            requestScopeSet.removeAll(DEFAULT_SCOPES);\n+\n+            for (final String scope : requestScopeSet) {\n+                scopesToCache += scope + \" \";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYzMzQyNQ=="}, "originalCommit": {"oid": "a85a0ea57678202caa705568ee5eaae6da69e6dd"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2443, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}