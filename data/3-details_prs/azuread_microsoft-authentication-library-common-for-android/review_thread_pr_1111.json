{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MDkyNzc0", "number": 1111, "reviewThreads": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMToxNjoyNFrOE1dMAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDoyMjoyOVrOE4aejw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDg4MTk1OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BaseController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMToxNjoyNFrOHtvbHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMTozMTozOFrOHtvsYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyNDk1Ng==", "bodyText": "javadoc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r517724956", "createdAt": "2020-11-05T01:16:24Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BaseController.java", "diffHunk": "@@ -745,4 +747,6 @@ public ICacheRecord finalizeCacheRecordForResult(@NonNull final ICacheRecord cac\n \n         return cacheRecord;\n     }\n+\n+    public abstract GenerateShrResult generateSignedHttpRequest(GenerateShrCommandParameters parameters) throws Exception;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b74fa8ff7003a67d00f3b7d399b8f68621d6746"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyOTM3Ng==", "bodyText": "eb85b0c", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r517729376", "createdAt": "2020-11-05T01:31:38Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BaseController.java", "diffHunk": "@@ -745,4 +747,6 @@ public ICacheRecord finalizeCacheRecordForResult(@NonNull final ICacheRecord cac\n \n         return cacheRecord;\n     }\n+\n+    public abstract GenerateShrResult generateSignedHttpRequest(GenerateShrCommandParameters parameters) throws Exception;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyNDk1Ng=="}, "originalCommit": {"oid": "5b74fa8ff7003a67d00f3b7d399b8f68621d6746"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDg4MjQ1OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/parameters/GenerateShrCommandParameters.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMToxNjozN1rOHtvbXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMTozMzozMFrOHtvuag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyNTAyMw==", "bodyText": "javadoc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r517725023", "createdAt": "2020-11-05T01:16:37Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/parameters/GenerateShrCommandParameters.java", "diffHunk": "@@ -0,0 +1,42 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands.parameters;\n+\n+import com.microsoft.identity.common.internal.authscheme.IPoPAuthenticationSchemeParams;\n+\n+import lombok.Getter;\n+import lombok.experimental.SuperBuilder;\n+\n+/**\n+ * Parameter class for generating SHRs.\n+ */\n+@Getter\n+@SuperBuilder\n+public class GenerateShrCommandParameters extends CommandParameters {\n+\n+    private static final String TAG = GenerateShrCommandParameters.class.getSimpleName();\n+\n+    private String homeAccountId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b74fa8ff7003a67d00f3b7d399b8f68621d6746"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyOTg5OA==", "bodyText": "30a89ec", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r517729898", "createdAt": "2020-11-05T01:33:30Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/parameters/GenerateShrCommandParameters.java", "diffHunk": "@@ -0,0 +1,42 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands.parameters;\n+\n+import com.microsoft.identity.common.internal.authscheme.IPoPAuthenticationSchemeParams;\n+\n+import lombok.Getter;\n+import lombok.experimental.SuperBuilder;\n+\n+/**\n+ * Parameter class for generating SHRs.\n+ */\n+@Getter\n+@SuperBuilder\n+public class GenerateShrCommandParameters extends CommandParameters {\n+\n+    private static final String TAG = GenerateShrCommandParameters.class.getSimpleName();\n+\n+    private String homeAccountId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyNTAyMw=="}, "originalCommit": {"oid": "5b74fa8ff7003a67d00f3b7d399b8f68621d6746"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDg4MzQ5OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMToxNzoxMFrOHtvb_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMTozNjoyN1rOHtvxqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyNTE4MA==", "bodyText": "javadoc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r517725180", "createdAt": "2020-11-05T01:17:10Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -692,6 +694,64 @@ public AcquireTokenResult acquireDeviceCodeFlowToken(\n         return acquireTokenResult;\n     }\n \n+    @Override\n+    public GenerateShrResult generateSignedHttpRequest(\n+            @NonNull final GenerateShrCommandParameters parameters) throws Exception {\n+        final Context context = parameters.getAndroidApplicationContext();\n+        final IClockSkewManager clockSkewManager = new ClockSkewManager(context);\n+        final OAuth2TokenCache cache = parameters.getOAuth2TokenCache();\n+        final String clientId = parameters.getClientId();\n+        final String homeAccountId = parameters.getHomeAccountId();\n+        final IPoPAuthenticationSchemeParams popSchemeParams = parameters.getPopParameters();\n+\n+        if (credentialsExistForAccountLocally(cache, clientId, homeAccountId)) {\n+            // Perform the signing locally...\n+            return generateSignedHttpRequestInternal(context, clockSkewManager, popSchemeParams);\n+        } else {\n+            throw new UiRequiredException(NO_ACCOUNT_FOUND, \"Account does not exist locally.\");\n+        }\n+    }\n+\n+    private synchronized GenerateShrResult generateSignedHttpRequestInternal(@NonNull final Context context,\n+                                                                             @NonNull final IClockSkewManager clockSkewManager,\n+                                                                             @NonNull final IPoPAuthenticationSchemeParams popSchemeParams) throws ClientException {\n+        // Clock-skew correction values\n+        final long ONE_SECOND_MILLIS = 1000L;\n+        final long timestampMillis = clockSkewManager.getAdjustedReferenceTime().getTime();\n+\n+        final String httpMethodStr = popSchemeParams.getHttpMethod();\n+        final URL resourceUrl = popSchemeParams.getUrl();\n+        final String nonce = popSchemeParams.getNonce();\n+        final String clientClaims = popSchemeParams.getClientClaims();\n+        final IDevicePopManager popMgr = Device.getDevicePoPManagerInstance();\n+\n+        // Generate keys, if none exist (should already be initialized)\n+        if (!popMgr.asymmetricKeyExists()) {\n+            popMgr.generateAsymmetricKey(context);\n+        }\n+\n+        final String shr = popMgr.mintSignedHttpRequest(\n+                httpMethodStr,\n+                timestampMillis / ONE_SECOND_MILLIS,\n+                resourceUrl,\n+                nonce,\n+                clientClaims\n+        );\n+\n+        // Create our result object\n+        final GenerateShrResult result = new GenerateShrResult();\n+        result.setShr(shr);\n+\n+        return result;\n+    }\n+\n+    private boolean credentialsExistForAccountLocally(@NonNull final OAuth2TokenCache cache,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b74fa8ff7003a67d00f3b7d399b8f68621d6746"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzczMDY5NQ==", "bodyText": "786262c", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r517730695", "createdAt": "2020-11-05T01:36:20Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -692,6 +694,64 @@ public AcquireTokenResult acquireDeviceCodeFlowToken(\n         return acquireTokenResult;\n     }\n \n+    @Override\n+    public GenerateShrResult generateSignedHttpRequest(\n+            @NonNull final GenerateShrCommandParameters parameters) throws Exception {\n+        final Context context = parameters.getAndroidApplicationContext();\n+        final IClockSkewManager clockSkewManager = new ClockSkewManager(context);\n+        final OAuth2TokenCache cache = parameters.getOAuth2TokenCache();\n+        final String clientId = parameters.getClientId();\n+        final String homeAccountId = parameters.getHomeAccountId();\n+        final IPoPAuthenticationSchemeParams popSchemeParams = parameters.getPopParameters();\n+\n+        if (credentialsExistForAccountLocally(cache, clientId, homeAccountId)) {\n+            // Perform the signing locally...\n+            return generateSignedHttpRequestInternal(context, clockSkewManager, popSchemeParams);\n+        } else {\n+            throw new UiRequiredException(NO_ACCOUNT_FOUND, \"Account does not exist locally.\");\n+        }\n+    }\n+\n+    private synchronized GenerateShrResult generateSignedHttpRequestInternal(@NonNull final Context context,\n+                                                                             @NonNull final IClockSkewManager clockSkewManager,\n+                                                                             @NonNull final IPoPAuthenticationSchemeParams popSchemeParams) throws ClientException {\n+        // Clock-skew correction values\n+        final long ONE_SECOND_MILLIS = 1000L;\n+        final long timestampMillis = clockSkewManager.getAdjustedReferenceTime().getTime();\n+\n+        final String httpMethodStr = popSchemeParams.getHttpMethod();\n+        final URL resourceUrl = popSchemeParams.getUrl();\n+        final String nonce = popSchemeParams.getNonce();\n+        final String clientClaims = popSchemeParams.getClientClaims();\n+        final IDevicePopManager popMgr = Device.getDevicePoPManagerInstance();\n+\n+        // Generate keys, if none exist (should already be initialized)\n+        if (!popMgr.asymmetricKeyExists()) {\n+            popMgr.generateAsymmetricKey(context);\n+        }\n+\n+        final String shr = popMgr.mintSignedHttpRequest(\n+                httpMethodStr,\n+                timestampMillis / ONE_SECOND_MILLIS,\n+                resourceUrl,\n+                nonce,\n+                clientClaims\n+        );\n+\n+        // Create our result object\n+        final GenerateShrResult result = new GenerateShrResult();\n+        result.setShr(shr);\n+\n+        return result;\n+    }\n+\n+    private boolean credentialsExistForAccountLocally(@NonNull final OAuth2TokenCache cache,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyNTE4MA=="}, "originalCommit": {"oid": "5b74fa8ff7003a67d00f3b7d399b8f68621d6746"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzczMDczMA==", "bodyText": "Also renamed this method", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r517730730", "createdAt": "2020-11-05T01:36:27Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -692,6 +694,64 @@ public AcquireTokenResult acquireDeviceCodeFlowToken(\n         return acquireTokenResult;\n     }\n \n+    @Override\n+    public GenerateShrResult generateSignedHttpRequest(\n+            @NonNull final GenerateShrCommandParameters parameters) throws Exception {\n+        final Context context = parameters.getAndroidApplicationContext();\n+        final IClockSkewManager clockSkewManager = new ClockSkewManager(context);\n+        final OAuth2TokenCache cache = parameters.getOAuth2TokenCache();\n+        final String clientId = parameters.getClientId();\n+        final String homeAccountId = parameters.getHomeAccountId();\n+        final IPoPAuthenticationSchemeParams popSchemeParams = parameters.getPopParameters();\n+\n+        if (credentialsExistForAccountLocally(cache, clientId, homeAccountId)) {\n+            // Perform the signing locally...\n+            return generateSignedHttpRequestInternal(context, clockSkewManager, popSchemeParams);\n+        } else {\n+            throw new UiRequiredException(NO_ACCOUNT_FOUND, \"Account does not exist locally.\");\n+        }\n+    }\n+\n+    private synchronized GenerateShrResult generateSignedHttpRequestInternal(@NonNull final Context context,\n+                                                                             @NonNull final IClockSkewManager clockSkewManager,\n+                                                                             @NonNull final IPoPAuthenticationSchemeParams popSchemeParams) throws ClientException {\n+        // Clock-skew correction values\n+        final long ONE_SECOND_MILLIS = 1000L;\n+        final long timestampMillis = clockSkewManager.getAdjustedReferenceTime().getTime();\n+\n+        final String httpMethodStr = popSchemeParams.getHttpMethod();\n+        final URL resourceUrl = popSchemeParams.getUrl();\n+        final String nonce = popSchemeParams.getNonce();\n+        final String clientClaims = popSchemeParams.getClientClaims();\n+        final IDevicePopManager popMgr = Device.getDevicePoPManagerInstance();\n+\n+        // Generate keys, if none exist (should already be initialized)\n+        if (!popMgr.asymmetricKeyExists()) {\n+            popMgr.generateAsymmetricKey(context);\n+        }\n+\n+        final String shr = popMgr.mintSignedHttpRequest(\n+                httpMethodStr,\n+                timestampMillis / ONE_SECOND_MILLIS,\n+                resourceUrl,\n+                nonce,\n+                clientClaims\n+        );\n+\n+        // Create our result object\n+        final GenerateShrResult result = new GenerateShrResult();\n+        result.setShr(shr);\n+\n+        return result;\n+    }\n+\n+    private boolean credentialsExistForAccountLocally(@NonNull final OAuth2TokenCache cache,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyNTE4MA=="}, "originalCommit": {"oid": "5b74fa8ff7003a67d00f3b7d399b8f68621d6746"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDg4NDAxOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMToxNzoyNFrOHtvcRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMTo0NDoxMlrOHtv6sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyNTI1NA==", "bodyText": "javadoc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r517725254", "createdAt": "2020-11-05T01:17:24Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -692,6 +694,64 @@ public AcquireTokenResult acquireDeviceCodeFlowToken(\n         return acquireTokenResult;\n     }\n \n+    @Override\n+    public GenerateShrResult generateSignedHttpRequest(\n+            @NonNull final GenerateShrCommandParameters parameters) throws Exception {\n+        final Context context = parameters.getAndroidApplicationContext();\n+        final IClockSkewManager clockSkewManager = new ClockSkewManager(context);\n+        final OAuth2TokenCache cache = parameters.getOAuth2TokenCache();\n+        final String clientId = parameters.getClientId();\n+        final String homeAccountId = parameters.getHomeAccountId();\n+        final IPoPAuthenticationSchemeParams popSchemeParams = parameters.getPopParameters();\n+\n+        if (credentialsExistForAccountLocally(cache, clientId, homeAccountId)) {\n+            // Perform the signing locally...\n+            return generateSignedHttpRequestInternal(context, clockSkewManager, popSchemeParams);\n+        } else {\n+            throw new UiRequiredException(NO_ACCOUNT_FOUND, \"Account does not exist locally.\");\n+        }\n+    }\n+\n+    private synchronized GenerateShrResult generateSignedHttpRequestInternal(@NonNull final Context context,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b74fa8ff7003a67d00f3b7d399b8f68621d6746"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzczMzA0MQ==", "bodyText": "1ed79bf", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r517733041", "createdAt": "2020-11-05T01:44:12Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -692,6 +694,64 @@ public AcquireTokenResult acquireDeviceCodeFlowToken(\n         return acquireTokenResult;\n     }\n \n+    @Override\n+    public GenerateShrResult generateSignedHttpRequest(\n+            @NonNull final GenerateShrCommandParameters parameters) throws Exception {\n+        final Context context = parameters.getAndroidApplicationContext();\n+        final IClockSkewManager clockSkewManager = new ClockSkewManager(context);\n+        final OAuth2TokenCache cache = parameters.getOAuth2TokenCache();\n+        final String clientId = parameters.getClientId();\n+        final String homeAccountId = parameters.getHomeAccountId();\n+        final IPoPAuthenticationSchemeParams popSchemeParams = parameters.getPopParameters();\n+\n+        if (credentialsExistForAccountLocally(cache, clientId, homeAccountId)) {\n+            // Perform the signing locally...\n+            return generateSignedHttpRequestInternal(context, clockSkewManager, popSchemeParams);\n+        } else {\n+            throw new UiRequiredException(NO_ACCOUNT_FOUND, \"Account does not exist locally.\");\n+        }\n+    }\n+\n+    private synchronized GenerateShrResult generateSignedHttpRequestInternal(@NonNull final Context context,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyNTI1NA=="}, "originalCommit": {"oid": "5b74fa8ff7003a67d00f3b7d399b8f68621d6746"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTY3OTYwOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMTo0MzoxNFrOHudLEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDozNjozN1rOHu8x8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ3NDUxNQ==", "bodyText": "Comment: these are errors returned from the broker", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518474515", "createdAt": "2020-11-06T01:43:14Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "diffHunk": "@@ -0,0 +1,106 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.UiRequiredException;\n+import com.microsoft.identity.common.internal.commands.parameters.GenerateShrCommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BaseController;\n+import com.microsoft.identity.common.internal.result.GenerateShrResult;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.ErrorStrings.NO_ACCOUNT_FOUND;\n+\n+/**\n+ * Command class to perform generation of AT-less SHRs on behalf of a user.\n+ */\n+public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n+\n+    private static final String TAG = GenerateShrCommand.class.getSimpleName();\n+\n+    public GenerateShrCommand(@NonNull final GenerateShrCommandParameters parameters,\n+                              @NonNull final List<BaseController> controllers,\n+                              @NonNull final CommandCallback<GenerateShrResult, BaseException> callback,\n+                              @NonNull final String publicApiId) {\n+        super(parameters, controllers, callback, publicApiId);\n+    }\n+\n+    @Override\n+    public GenerateShrResult execute() throws Exception {\n+        final String methodName = \":execute\";\n+\n+        GenerateShrResult result = null;\n+        final GenerateShrCommandParameters parameters = (GenerateShrCommandParameters) getParameters();\n+\n+        // Iterate over our controllers, to service the request either locally or via the broker...\n+        BaseController controller;\n+        for (int ii = 0; ii < getControllers().size(); ii++) {\n+            controller = getControllers().get(ii);\n+\n+            com.microsoft.identity.common.internal.logging.Logger.verbose(\n+                    TAG + methodName,\n+                    \"Executing with controller: \"\n+                            + controller.getClass().getSimpleName()\n+            );\n+\n+            try {\n+                result = controller.generateSignedHttpRequest(parameters);\n+\n+                if (null != result.getErrorCode()) {\n+                    final String errorCode = result.getErrorCode();\n+                    final String errorMessage = result.getErrorMessage();\n+\n+                    if (NO_ACCOUNT_FOUND.equalsIgnoreCase(errorCode)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk5MjM2OQ==", "bodyText": "590e031", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518992369", "createdAt": "2020-11-06T20:36:37Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "diffHunk": "@@ -0,0 +1,106 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.UiRequiredException;\n+import com.microsoft.identity.common.internal.commands.parameters.GenerateShrCommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BaseController;\n+import com.microsoft.identity.common.internal.result.GenerateShrResult;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.ErrorStrings.NO_ACCOUNT_FOUND;\n+\n+/**\n+ * Command class to perform generation of AT-less SHRs on behalf of a user.\n+ */\n+public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n+\n+    private static final String TAG = GenerateShrCommand.class.getSimpleName();\n+\n+    public GenerateShrCommand(@NonNull final GenerateShrCommandParameters parameters,\n+                              @NonNull final List<BaseController> controllers,\n+                              @NonNull final CommandCallback<GenerateShrResult, BaseException> callback,\n+                              @NonNull final String publicApiId) {\n+        super(parameters, controllers, callback, publicApiId);\n+    }\n+\n+    @Override\n+    public GenerateShrResult execute() throws Exception {\n+        final String methodName = \":execute\";\n+\n+        GenerateShrResult result = null;\n+        final GenerateShrCommandParameters parameters = (GenerateShrCommandParameters) getParameters();\n+\n+        // Iterate over our controllers, to service the request either locally or via the broker...\n+        BaseController controller;\n+        for (int ii = 0; ii < getControllers().size(); ii++) {\n+            controller = getControllers().get(ii);\n+\n+            com.microsoft.identity.common.internal.logging.Logger.verbose(\n+                    TAG + methodName,\n+                    \"Executing with controller: \"\n+                            + controller.getClass().getSimpleName()\n+            );\n+\n+            try {\n+                result = controller.generateSignedHttpRequest(parameters);\n+\n+                if (null != result.getErrorCode()) {\n+                    final String errorCode = result.getErrorCode();\n+                    final String errorMessage = result.getErrorMessage();\n+\n+                    if (NO_ACCOUNT_FOUND.equalsIgnoreCase(errorCode)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ3NDUxNQ=="}, "originalCommit": {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTY4MDUzOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BrokerMsalController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMTo0Mzo0MlrOHudLlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDowMDozOVrOHu7quw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ3NDY0NA==", "bodyText": "Document unused", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518474644", "createdAt": "2020-11-06T01:43:42Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BrokerMsalController.java", "diffHunk": "@@ -753,6 +756,60 @@ public AcquireTokenResult acquireDeviceCodeFlowToken(@SuppressWarnings(WarningTy\n         throw new ClientException(\"acquireDeviceCodeFlowToken() not supported in BrokerMsalController\");\n     }\n \n+    @Override\n+    public GenerateShrResult generateSignedHttpRequest(@NonNull final GenerateShrCommandParameters parameters) throws Exception {\n+        return mBrokerOperationExecutor.execute(parameters, new BrokerOperation<GenerateShrResult>() {\n+\n+            private String negotiatedBrokerProtocolVersion;\n+\n+            @Override\n+            public void performPrerequisites(final @NonNull IIpcStrategy strategy) throws BaseException {\n+                negotiatedBrokerProtocolVersion = hello(strategy, parameters);\n+            }\n+\n+            @NonNull\n+            @Override\n+            public BrokerOperationBundle getBundle() {\n+                return new BrokerOperationBundle(\n+                        MSAL_GENERATE_SHR,\n+                        mActiveBrokerPackageName,\n+                        mRequestAdapter.getRequestBundleForGenerateShr(\n+                                parameters,\n+                                negotiatedBrokerProtocolVersion\n+                        )\n+                );\n+            }\n+\n+            @NonNull\n+            @Override\n+            public GenerateShrResult extractResultBundle(@Nullable final Bundle resultBundle) throws BaseException {\n+                if (null == resultBundle) {\n+                    throw mResultAdapter.getExceptionForEmptyResultBundle();\n+                }\n+\n+                return mResultAdapter.getGenerateShrResultFromResultBundle(resultBundle);\n+            }\n+\n+            @NonNull\n+            @Override\n+            public String getMethodName() {\n+                return \":generateSignedHttpRequest\";\n+            }\n+\n+            @Nullable\n+            @Override\n+            public String getTelemetryApiId() {\n+                return null;\n+            }\n+\n+            @Override\n+            public void putValueInSuccessEvent(@NonNull final ApiEndEvent event,\n+                                               @NonNull final GenerateShrResult result) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3NDEzOQ==", "bodyText": "6ec3f20", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518974139", "createdAt": "2020-11-06T20:00:39Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BrokerMsalController.java", "diffHunk": "@@ -753,6 +756,60 @@ public AcquireTokenResult acquireDeviceCodeFlowToken(@SuppressWarnings(WarningTy\n         throw new ClientException(\"acquireDeviceCodeFlowToken() not supported in BrokerMsalController\");\n     }\n \n+    @Override\n+    public GenerateShrResult generateSignedHttpRequest(@NonNull final GenerateShrCommandParameters parameters) throws Exception {\n+        return mBrokerOperationExecutor.execute(parameters, new BrokerOperation<GenerateShrResult>() {\n+\n+            private String negotiatedBrokerProtocolVersion;\n+\n+            @Override\n+            public void performPrerequisites(final @NonNull IIpcStrategy strategy) throws BaseException {\n+                negotiatedBrokerProtocolVersion = hello(strategy, parameters);\n+            }\n+\n+            @NonNull\n+            @Override\n+            public BrokerOperationBundle getBundle() {\n+                return new BrokerOperationBundle(\n+                        MSAL_GENERATE_SHR,\n+                        mActiveBrokerPackageName,\n+                        mRequestAdapter.getRequestBundleForGenerateShr(\n+                                parameters,\n+                                negotiatedBrokerProtocolVersion\n+                        )\n+                );\n+            }\n+\n+            @NonNull\n+            @Override\n+            public GenerateShrResult extractResultBundle(@Nullable final Bundle resultBundle) throws BaseException {\n+                if (null == resultBundle) {\n+                    throw mResultAdapter.getExceptionForEmptyResultBundle();\n+                }\n+\n+                return mResultAdapter.getGenerateShrResultFromResultBundle(resultBundle);\n+            }\n+\n+            @NonNull\n+            @Override\n+            public String getMethodName() {\n+                return \":generateSignedHttpRequest\";\n+            }\n+\n+            @Nullable\n+            @Override\n+            public String getTelemetryApiId() {\n+                return null;\n+            }\n+\n+            @Override\n+            public void putValueInSuccessEvent(@NonNull final ApiEndEvent event,\n+                                               @NonNull final GenerateShrResult result) {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ3NDY0NA=="}, "originalCommit": {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTgzMjUzOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMzowNDozOVrOHuej7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDoyNzo1M1rOHu8i_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5NzI2Mg==", "bodyText": "Fix this", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518497262", "createdAt": "2020-11-06T03:04:39Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java", "diffHunk": "@@ -1209,7 +1214,12 @@\n          * Time out for the AccountManager's remove account operation in broker.\n          */\n         public static final int ACCOUNT_MANAGER_REMOVE_ACCOUNT_TIMEOUT_IN_MILLISECONDS = 5000;\n-        \n+\n+        /**\n+         * The Bundle key name of serialized parameters for the PoP auth scheme.\n+         */\n+        public static final String AUTHSCHEME_PARAMS_POP = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4ODU0Mw==", "bodyText": "2a7cdc7", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518988543", "createdAt": "2020-11-06T20:27:53Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java", "diffHunk": "@@ -1209,7 +1214,12 @@\n          * Time out for the AccountManager's remove account operation in broker.\n          */\n         public static final int ACCOUNT_MANAGER_REMOVE_ACCOUNT_TIMEOUT_IN_MILLISECONDS = 5000;\n-        \n+\n+        /**\n+         * The Bundle key name of serialized parameters for the PoP auth scheme.\n+         */\n+        public static final String AUTHSCHEME_PARAMS_POP = \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5NzI2Mg=="}, "originalCommit": {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTgzNDE3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMzowNToyOVrOHuek2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDoyNzowNlrOHu8hww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5NzQ5Ng==", "bodyText": "Fix comment: Msal-to-Broker", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518497496", "createdAt": "2020-11-06T03:05:29Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java", "diffHunk": "@@ -1348,6 +1358,11 @@\n          */\n         public static final String MSAL_SIGN_OUT_FROM_SHARED_DEVICE_PATH = \"/signOutFromSharedDevice\";\n \n+        /**\n+         * URI Path constant for BrokerApi-to-Broker generateShr request using ContentProvider.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4ODIyNw==", "bodyText": "0f2bb80", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518988227", "createdAt": "2020-11-06T20:27:06Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java", "diffHunk": "@@ -1348,6 +1358,11 @@\n          */\n         public static final String MSAL_SIGN_OUT_FROM_SHARED_DEVICE_PATH = \"/signOutFromSharedDevice\";\n \n+        /**\n+         * URI Path constant for BrokerApi-to-Broker generateShr request using ContentProvider.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5NzQ5Ng=="}, "originalCommit": {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTgzNTMzOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMzowNjowOVrOHueldg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNTowMTo1NlrOHugPLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5NzY1NA==", "bodyText": "@rpdome So this value is completely arbitrary? Can I 'claim' 13?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518497654", "createdAt": "2020-11-06T03:06:09Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java", "diffHunk": "@@ -1427,6 +1442,11 @@\n          * BrokerContentProvider URI code constant for BrokerApi-to-Broker updateBrt request.\n          */\n         public static final int BROKER_API_UPDATE_BRT_CODE = 12;\n+\n+        /**\n+         * BrokerContentProvider URI code constant for MSAL-to-Broker generateSHR request.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUyNDcxNg==", "bodyText": "yep", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518524716", "createdAt": "2020-11-06T05:01:56Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java", "diffHunk": "@@ -1427,6 +1442,11 @@\n          * BrokerContentProvider URI code constant for BrokerApi-to-Broker updateBrt request.\n          */\n         public static final int BROKER_API_UPDATE_BRT_CODE = 12;\n+\n+        /**\n+         * BrokerContentProvider URI code constant for MSAL-to-Broker generateSHR request.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5NzY1NA=="}, "originalCommit": {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTgzNjQwOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/authscheme/PopAuthenticationSchemeInternal.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMzowNjo1NVrOHuemGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMTozMTozMFrOHwIP5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5NzgxOA==", "bodyText": "Increment min broker hello api", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518497818", "createdAt": "2020-11-06T03:06:55Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/authscheme/PopAuthenticationSchemeInternal.java", "diffHunk": "@@ -68,26 +70,70 @@\n     @SerializedName(NONCE)\n     private String mNonce;\n \n+    @SerializedName(CLIENT_CLAIMS)\n+    private String mClientClaims;\n+\n     /**\n      * Constructor for gson use.\n      */\n     PopAuthenticationSchemeInternal() {\n         super(SCHEME_POP);\n     }\n \n+    @Deprecated\n     public PopAuthenticationSchemeInternal(@NonNull final IClockSkewManager clockSkewManager,\n-                                    @Nullable final String httpMethod,\n-                                    @NonNull final URL url,\n-                                    @Nullable final String nonce) {\n+                                           @Nullable final String httpMethod,\n+                                           @NonNull final URL url,\n+                                           @Nullable final String nonce) {\n         super(SCHEME_POP);\n         mClockSkewManager = clockSkewManager;\n         mHttpMethod = httpMethod;\n         mUrl = url;\n         mNonce = nonce;\n     }\n \n+    public PopAuthenticationSchemeInternal(@NonNull final IClockSkewManager clockSkewManager,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIyODgzOA==", "bodyText": "AzureAD/microsoft-authentication-library-for-android@c30c347", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r520228838", "createdAt": "2020-11-10T01:31:30Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/authscheme/PopAuthenticationSchemeInternal.java", "diffHunk": "@@ -68,26 +70,70 @@\n     @SerializedName(NONCE)\n     private String mNonce;\n \n+    @SerializedName(CLIENT_CLAIMS)\n+    private String mClientClaims;\n+\n     /**\n      * Constructor for gson use.\n      */\n     PopAuthenticationSchemeInternal() {\n         super(SCHEME_POP);\n     }\n \n+    @Deprecated\n     public PopAuthenticationSchemeInternal(@NonNull final IClockSkewManager clockSkewManager,\n-                                    @Nullable final String httpMethod,\n-                                    @NonNull final URL url,\n-                                    @Nullable final String nonce) {\n+                                           @Nullable final String httpMethod,\n+                                           @NonNull final URL url,\n+                                           @Nullable final String nonce) {\n         super(SCHEME_POP);\n         mClockSkewManager = clockSkewManager;\n         mHttpMethod = httpMethod;\n         mUrl = url;\n         mNonce = nonce;\n     }\n \n+    public PopAuthenticationSchemeInternal(@NonNull final IClockSkewManager clockSkewManager,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5NzgxOA=="}, "originalCommit": {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTgzNjcyOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/authscheme/PopAuthenticationSchemeInternal.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMzowNzowOFrOHuemRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMzowNTowOVrOHvALlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5Nzg2MA==", "bodyText": "javadoc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518497860", "createdAt": "2020-11-06T03:07:08Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/authscheme/PopAuthenticationSchemeInternal.java", "diffHunk": "@@ -68,26 +70,70 @@\n     @SerializedName(NONCE)\n     private String mNonce;\n \n+    @SerializedName(CLIENT_CLAIMS)\n+    private String mClientClaims;\n+\n     /**\n      * Constructor for gson use.\n      */\n     PopAuthenticationSchemeInternal() {\n         super(SCHEME_POP);\n     }\n \n+    @Deprecated\n     public PopAuthenticationSchemeInternal(@NonNull final IClockSkewManager clockSkewManager,\n-                                    @Nullable final String httpMethod,\n-                                    @NonNull final URL url,\n-                                    @Nullable final String nonce) {\n+                                           @Nullable final String httpMethod,\n+                                           @NonNull final URL url,\n+                                           @Nullable final String nonce) {\n         super(SCHEME_POP);\n         mClockSkewManager = clockSkewManager;\n         mHttpMethod = httpMethod;\n         mUrl = url;\n         mNonce = nonce;\n     }\n \n+    public PopAuthenticationSchemeInternal(@NonNull final IClockSkewManager clockSkewManager,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0ODA4Ng==", "bodyText": "60aa871", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r519048086", "createdAt": "2020-11-06T23:05:09Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/authscheme/PopAuthenticationSchemeInternal.java", "diffHunk": "@@ -68,26 +70,70 @@\n     @SerializedName(NONCE)\n     private String mNonce;\n \n+    @SerializedName(CLIENT_CLAIMS)\n+    private String mClientClaims;\n+\n     /**\n      * Constructor for gson use.\n      */\n     PopAuthenticationSchemeInternal() {\n         super(SCHEME_POP);\n     }\n \n+    @Deprecated\n     public PopAuthenticationSchemeInternal(@NonNull final IClockSkewManager clockSkewManager,\n-                                    @Nullable final String httpMethod,\n-                                    @NonNull final URL url,\n-                                    @Nullable final String nonce) {\n+                                           @Nullable final String httpMethod,\n+                                           @NonNull final URL url,\n+                                           @Nullable final String nonce) {\n         super(SCHEME_POP);\n         mClockSkewManager = clockSkewManager;\n         mHttpMethod = httpMethod;\n         mUrl = url;\n         mNonce = nonce;\n     }\n \n+    public PopAuthenticationSchemeInternal(@NonNull final IClockSkewManager clockSkewManager,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5Nzg2MA=="}, "originalCommit": {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTgzODY5OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMzowODowOVrOHuencA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMjoxNTozNVrOHu_N9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5ODE2MA==", "bodyText": "Javadoc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518498160", "createdAt": "2020-11-06T03:08:09Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "diffHunk": "@@ -0,0 +1,106 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.UiRequiredException;\n+import com.microsoft.identity.common.internal.commands.parameters.GenerateShrCommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BaseController;\n+import com.microsoft.identity.common.internal.result.GenerateShrResult;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.ErrorStrings.NO_ACCOUNT_FOUND;\n+\n+/**\n+ * Command class to perform generation of AT-less SHRs on behalf of a user.\n+ */\n+public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n+\n+    private static final String TAG = GenerateShrCommand.class.getSimpleName();\n+\n+    public GenerateShrCommand(@NonNull final GenerateShrCommandParameters parameters,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAzMjMxMA==", "bodyText": "cd6c57e", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r519032310", "createdAt": "2020-11-06T22:15:35Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "diffHunk": "@@ -0,0 +1,106 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.UiRequiredException;\n+import com.microsoft.identity.common.internal.commands.parameters.GenerateShrCommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BaseController;\n+import com.microsoft.identity.common.internal.result.GenerateShrResult;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.ErrorStrings.NO_ACCOUNT_FOUND;\n+\n+/**\n+ * Command class to perform generation of AT-less SHRs on behalf of a user.\n+ */\n+public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n+\n+    private static final String TAG = GenerateShrCommand.class.getSimpleName();\n+\n+    public GenerateShrCommand(@NonNull final GenerateShrCommandParameters parameters,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5ODE2MA=="}, "originalCommit": {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTgzOTc3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMzowODo0NFrOHueoDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMjo0MToyMFrOHu_viw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5ODMxNw==", "bodyText": "Expand upon this comment -- when is the command serviced locally vs remotely?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518498317", "createdAt": "2020-11-06T03:08:44Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "diffHunk": "@@ -0,0 +1,106 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.UiRequiredException;\n+import com.microsoft.identity.common.internal.commands.parameters.GenerateShrCommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BaseController;\n+import com.microsoft.identity.common.internal.result.GenerateShrResult;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.ErrorStrings.NO_ACCOUNT_FOUND;\n+\n+/**\n+ * Command class to perform generation of AT-less SHRs on behalf of a user.\n+ */\n+public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n+\n+    private static final String TAG = GenerateShrCommand.class.getSimpleName();\n+\n+    public GenerateShrCommand(@NonNull final GenerateShrCommandParameters parameters,\n+                              @NonNull final List<BaseController> controllers,\n+                              @NonNull final CommandCallback<GenerateShrResult, BaseException> callback,\n+                              @NonNull final String publicApiId) {\n+        super(parameters, controllers, callback, publicApiId);\n+    }\n+\n+    @Override\n+    public GenerateShrResult execute() throws Exception {\n+        final String methodName = \":execute\";\n+\n+        GenerateShrResult result = null;\n+        final GenerateShrCommandParameters parameters = (GenerateShrCommandParameters) getParameters();\n+\n+        // Iterate over our controllers, to service the request either locally or via the broker...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0MDkwNw==", "bodyText": "7e986dd", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r519040907", "createdAt": "2020-11-06T22:41:20Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "diffHunk": "@@ -0,0 +1,106 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.UiRequiredException;\n+import com.microsoft.identity.common.internal.commands.parameters.GenerateShrCommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BaseController;\n+import com.microsoft.identity.common.internal.result.GenerateShrResult;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.ErrorStrings.NO_ACCOUNT_FOUND;\n+\n+/**\n+ * Command class to perform generation of AT-less SHRs on behalf of a user.\n+ */\n+public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n+\n+    private static final String TAG = GenerateShrCommand.class.getSimpleName();\n+\n+    public GenerateShrCommand(@NonNull final GenerateShrCommandParameters parameters,\n+                              @NonNull final List<BaseController> controllers,\n+                              @NonNull final CommandCallback<GenerateShrResult, BaseException> callback,\n+                              @NonNull final String publicApiId) {\n+        super(parameters, controllers, callback, publicApiId);\n+    }\n+\n+    @Override\n+    public GenerateShrResult execute() throws Exception {\n+        final String methodName = \":execute\";\n+\n+        GenerateShrResult result = null;\n+        final GenerateShrCommandParameters parameters = (GenerateShrCommandParameters) getParameters();\n+\n+        // Iterate over our controllers, to service the request either locally or via the broker...", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5ODMxNw=="}, "originalCommit": {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTg0MjkwOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BrokerMsalController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMzoxMDoyNVrOHuep3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMzoxMDoyNVrOHuep3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5ODc4MA==", "bodyText": "Assign a telemetry api id", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518498780", "createdAt": "2020-11-06T03:10:25Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BrokerMsalController.java", "diffHunk": "@@ -753,6 +756,60 @@ public AcquireTokenResult acquireDeviceCodeFlowToken(@SuppressWarnings(WarningTy\n         throw new ClientException(\"acquireDeviceCodeFlowToken() not supported in BrokerMsalController\");\n     }\n \n+    @Override\n+    public GenerateShrResult generateSignedHttpRequest(@NonNull final GenerateShrCommandParameters parameters) throws Exception {\n+        return mBrokerOperationExecutor.execute(parameters, new BrokerOperation<GenerateShrResult>() {\n+\n+            private String negotiatedBrokerProtocolVersion;\n+\n+            @Override\n+            public void performPrerequisites(final @NonNull IIpcStrategy strategy) throws BaseException {\n+                negotiatedBrokerProtocolVersion = hello(strategy, parameters);\n+            }\n+\n+            @NonNull\n+            @Override\n+            public BrokerOperationBundle getBundle() {\n+                return new BrokerOperationBundle(\n+                        MSAL_GENERATE_SHR,\n+                        mActiveBrokerPackageName,\n+                        mRequestAdapter.getRequestBundleForGenerateShr(\n+                                parameters,\n+                                negotiatedBrokerProtocolVersion\n+                        )\n+                );\n+            }\n+\n+            @NonNull\n+            @Override\n+            public GenerateShrResult extractResultBundle(@Nullable final Bundle resultBundle) throws BaseException {\n+                if (null == resultBundle) {\n+                    throw mResultAdapter.getExceptionForEmptyResultBundle();\n+                }\n+\n+                return mResultAdapter.getGenerateShrResultFromResultBundle(resultBundle);\n+            }\n+\n+            @NonNull\n+            @Override\n+            public String getMethodName() {\n+                return \":generateSignedHttpRequest\";\n+            }\n+\n+            @Nullable\n+            @Override\n+            public String getTelemetryApiId() {\n+                return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTg0MzcxOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMzoxMTowMVrOHueqYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMzoxNDowNFrOHvAUgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5ODkxMg==", "bodyText": "Better place to put this?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518498912", "createdAt": "2020-11-06T03:11:01Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -692,6 +694,82 @@ public AcquireTokenResult acquireDeviceCodeFlowToken(\n         return acquireTokenResult;\n     }\n \n+    @Override\n+    public GenerateShrResult generateSignedHttpRequest(\n+            @NonNull final GenerateShrCommandParameters parameters) throws Exception {\n+        final Context context = parameters.getAndroidApplicationContext();\n+        final IClockSkewManager clockSkewManager = new ClockSkewManager(context);\n+        final OAuth2TokenCache cache = parameters.getOAuth2TokenCache();\n+        final String clientId = parameters.getClientId();\n+        final String homeAccountId = parameters.getHomeAccountId();\n+        final IPoPAuthenticationSchemeParams popSchemeParams = parameters.getPopParameters();\n+\n+        if (userHasLocalAccountRecord(cache, clientId, homeAccountId)) {\n+            // Perform the signing locally...\n+            return generateSignedHttpRequestInternal(context, clockSkewManager, popSchemeParams);\n+        } else {\n+            throw new UiRequiredException(NO_ACCOUNT_FOUND, \"Account does not exist.\");\n+        }\n+    }\n+\n+    /**\n+     * Generates an AT-less SHR using the PoPMgr's internal signing key.\n+     *\n+     * @param context          The current application's {@link Context}.\n+     * @param clockSkewManager An instance of {@link IClockSkewManager}, used to mitigate\n+     *                         clock-skew/drift.\n+     * @param popSchemeParams  The input params used to create the resulting SHR.\n+     * @return The {@link GenerateShrResult} containing the resulint SHR.\n+     * @throws ClientException If an error is encountered.\n+     */\n+    public static synchronized GenerateShrResult generateSignedHttpRequestInternal(@NonNull final Context context,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA1MDM2OQ==", "bodyText": "909c6c0", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r519050369", "createdAt": "2020-11-06T23:14:04Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -692,6 +694,82 @@ public AcquireTokenResult acquireDeviceCodeFlowToken(\n         return acquireTokenResult;\n     }\n \n+    @Override\n+    public GenerateShrResult generateSignedHttpRequest(\n+            @NonNull final GenerateShrCommandParameters parameters) throws Exception {\n+        final Context context = parameters.getAndroidApplicationContext();\n+        final IClockSkewManager clockSkewManager = new ClockSkewManager(context);\n+        final OAuth2TokenCache cache = parameters.getOAuth2TokenCache();\n+        final String clientId = parameters.getClientId();\n+        final String homeAccountId = parameters.getHomeAccountId();\n+        final IPoPAuthenticationSchemeParams popSchemeParams = parameters.getPopParameters();\n+\n+        if (userHasLocalAccountRecord(cache, clientId, homeAccountId)) {\n+            // Perform the signing locally...\n+            return generateSignedHttpRequestInternal(context, clockSkewManager, popSchemeParams);\n+        } else {\n+            throw new UiRequiredException(NO_ACCOUNT_FOUND, \"Account does not exist.\");\n+        }\n+    }\n+\n+    /**\n+     * Generates an AT-less SHR using the PoPMgr's internal signing key.\n+     *\n+     * @param context          The current application's {@link Context}.\n+     * @param clockSkewManager An instance of {@link IClockSkewManager}, used to mitigate\n+     *                         clock-skew/drift.\n+     * @param popSchemeParams  The input params used to create the resulting SHR.\n+     * @return The {@link GenerateShrResult} containing the resulint SHR.\n+     * @throws ClientException If an error is encountered.\n+     */\n+    public static synchronized GenerateShrResult generateSignedHttpRequestInternal(@NonNull final Context context,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5ODkxMg=="}, "originalCommit": {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTg0NDY1OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMzoxMTozNVrOHueq7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDozNDozM1rOHu8ufg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5OTA1NQ==", "bodyText": "say why!", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518499055", "createdAt": "2020-11-06T03:11:35Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -953,15 +958,68 @@ public String mintSignedAccessToken(@Nullable final String httpMethod,\n                                         @NonNull final URL requestUrl,\n                                         @NonNull final String accessToken,\n                                         @Nullable final String nonce) throws ClientException {\n+        return mintSignedAccessToken(\n+                httpMethod,\n+                timestamp,\n+                requestUrl,\n+                accessToken,\n+                nonce,\n+                null\n+        );\n+    }\n+\n+    @Override\n+    public String mintSignedAccessToken(@Nullable String httpMethod,\n+                                        final long timestamp,\n+                                        @NonNull final URL requestUrl,\n+                                        @NonNull final String accessToken,\n+                                        @Nullable final String nonce,\n+                                        @Nullable final String clientClaims) throws ClientException {\n+        return mintSignedHttpRequestInternal(\n+                httpMethod,\n+                timestamp,\n+                requestUrl,\n+                accessToken,\n+                nonce,\n+                clientClaims\n+        );\n+    }\n+\n+    @Override\n+    public String mintSignedHttpRequest(@Nullable final String httpMethod,\n+                                        final long timestamp,\n+                                        @NonNull final URL requestUrl,\n+                                        @Nullable final String nonce,\n+                                        @Nullable final String clientClaims) throws ClientException {\n+        return mintSignedHttpRequestInternal(\n+                httpMethod,\n+                timestamp,\n+                requestUrl,\n+                null, // No AT used in this flow", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk5MTQ4Ng==", "bodyText": "88337fc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518991486", "createdAt": "2020-11-06T20:34:33Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -953,15 +958,68 @@ public String mintSignedAccessToken(@Nullable final String httpMethod,\n                                         @NonNull final URL requestUrl,\n                                         @NonNull final String accessToken,\n                                         @Nullable final String nonce) throws ClientException {\n+        return mintSignedAccessToken(\n+                httpMethod,\n+                timestamp,\n+                requestUrl,\n+                accessToken,\n+                nonce,\n+                null\n+        );\n+    }\n+\n+    @Override\n+    public String mintSignedAccessToken(@Nullable String httpMethod,\n+                                        final long timestamp,\n+                                        @NonNull final URL requestUrl,\n+                                        @NonNull final String accessToken,\n+                                        @Nullable final String nonce,\n+                                        @Nullable final String clientClaims) throws ClientException {\n+        return mintSignedHttpRequestInternal(\n+                httpMethod,\n+                timestamp,\n+                requestUrl,\n+                accessToken,\n+                nonce,\n+                clientClaims\n+        );\n+    }\n+\n+    @Override\n+    public String mintSignedHttpRequest(@Nullable final String httpMethod,\n+                                        final long timestamp,\n+                                        @NonNull final URL requestUrl,\n+                                        @Nullable final String nonce,\n+                                        @Nullable final String clientClaims) throws ClientException {\n+        return mintSignedHttpRequestInternal(\n+                httpMethod,\n+                timestamp,\n+                requestUrl,\n+                null, // No AT used in this flow", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5OTA1NQ=="}, "originalCommit": {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTg0NTI3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMzoxMTo1MlrOHuerQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDozMzozNVrOHu8szA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5OTEzOQ==", "bodyText": "Document this is only allowed to support generateShr", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518499139", "createdAt": "2020-11-06T03:11:52Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -953,15 +958,68 @@ public String mintSignedAccessToken(@Nullable final String httpMethod,\n                                         @NonNull final URL requestUrl,\n                                         @NonNull final String accessToken,\n                                         @Nullable final String nonce) throws ClientException {\n+        return mintSignedAccessToken(\n+                httpMethod,\n+                timestamp,\n+                requestUrl,\n+                accessToken,\n+                nonce,\n+                null\n+        );\n+    }\n+\n+    @Override\n+    public String mintSignedAccessToken(@Nullable String httpMethod,\n+                                        final long timestamp,\n+                                        @NonNull final URL requestUrl,\n+                                        @NonNull final String accessToken,\n+                                        @Nullable final String nonce,\n+                                        @Nullable final String clientClaims) throws ClientException {\n+        return mintSignedHttpRequestInternal(\n+                httpMethod,\n+                timestamp,\n+                requestUrl,\n+                accessToken,\n+                nonce,\n+                clientClaims\n+        );\n+    }\n+\n+    @Override\n+    public String mintSignedHttpRequest(@Nullable final String httpMethod,\n+                                        final long timestamp,\n+                                        @NonNull final URL requestUrl,\n+                                        @Nullable final String nonce,\n+                                        @Nullable final String clientClaims) throws ClientException {\n+        return mintSignedHttpRequestInternal(\n+                httpMethod,\n+                timestamp,\n+                requestUrl,\n+                null, // No AT used in this flow\n+                nonce,\n+                clientClaims\n+        );\n+    }\n+\n+    private String mintSignedHttpRequestInternal(@Nullable final String httpMethod,\n+                                                 final long timestamp,\n+                                                 @NonNull final URL requestUrl,\n+                                                 @Nullable final String accessToken,\n+                                                 @Nullable final String nonce,\n+                                                 @Nullable final String clientClaims) throws ClientException {\n         final Exception exception;\n         final String errCode;\n \n         try {\n             final JWTClaimsSet.Builder claimsBuilder = new JWTClaimsSet.Builder();\n-            claimsBuilder.claim(\n-                    SignedHttpRequestJwtClaims.ACCESS_TOKEN,\n-                    accessToken\n-            );\n+\n+            if (!TextUtils.isEmpty(accessToken)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk5MTA1Mg==", "bodyText": "3b0f892", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518991052", "createdAt": "2020-11-06T20:33:35Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -953,15 +958,68 @@ public String mintSignedAccessToken(@Nullable final String httpMethod,\n                                         @NonNull final URL requestUrl,\n                                         @NonNull final String accessToken,\n                                         @Nullable final String nonce) throws ClientException {\n+        return mintSignedAccessToken(\n+                httpMethod,\n+                timestamp,\n+                requestUrl,\n+                accessToken,\n+                nonce,\n+                null\n+        );\n+    }\n+\n+    @Override\n+    public String mintSignedAccessToken(@Nullable String httpMethod,\n+                                        final long timestamp,\n+                                        @NonNull final URL requestUrl,\n+                                        @NonNull final String accessToken,\n+                                        @Nullable final String nonce,\n+                                        @Nullable final String clientClaims) throws ClientException {\n+        return mintSignedHttpRequestInternal(\n+                httpMethod,\n+                timestamp,\n+                requestUrl,\n+                accessToken,\n+                nonce,\n+                clientClaims\n+        );\n+    }\n+\n+    @Override\n+    public String mintSignedHttpRequest(@Nullable final String httpMethod,\n+                                        final long timestamp,\n+                                        @NonNull final URL requestUrl,\n+                                        @Nullable final String nonce,\n+                                        @Nullable final String clientClaims) throws ClientException {\n+        return mintSignedHttpRequestInternal(\n+                httpMethod,\n+                timestamp,\n+                requestUrl,\n+                null, // No AT used in this flow\n+                nonce,\n+                clientClaims\n+        );\n+    }\n+\n+    private String mintSignedHttpRequestInternal(@Nullable final String httpMethod,\n+                                                 final long timestamp,\n+                                                 @NonNull final URL requestUrl,\n+                                                 @Nullable final String accessToken,\n+                                                 @Nullable final String nonce,\n+                                                 @Nullable final String clientClaims) throws ClientException {\n         final Exception exception;\n         final String errCode;\n \n         try {\n             final JWTClaimsSet.Builder claimsBuilder = new JWTClaimsSet.Builder();\n-            claimsBuilder.claim(\n-                    SignedHttpRequestJwtClaims.ACCESS_TOKEN,\n-                    accessToken\n-            );\n+\n+            if (!TextUtils.isEmpty(accessToken)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5OTEzOQ=="}, "originalCommit": {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTg0Njg1OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMzoxMjo1M1rOHuesKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDozMTowNlrOHu8okg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5OTM2OA==", "bodyText": "Fix this comment - no at exists", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518499368", "createdAt": "2020-11-06T03:12:53Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "diffHunk": "@@ -284,4 +284,42 @@ String mintSignedAccessToken(String httpMethod,\n                                  String accessToken,\n                                  String nonce\n     ) throws ClientException;\n+\n+    /**\n+     * Api to create the signed PoP access token.\n+     *\n+     * @param httpMethod   (Optional) The HTTP method that will be used with this outbound request.\n+     * @param timestamp    Seconds since January 1st, 1970 (UTC).\n+     * @param requestUrl   The recipient URL of the outbound request.\n+     * @param accessToken  The access_token from which to derive the signed JWT.\n+     * @param nonce        (Optional) Arbitrary value used for replay protection by middleware.\n+     * @param clientClaims (Optional) Arbitrary String data provided by the caller. Used as the\n+     *                     client_claims value.\n+     * @return The signed PoP access token.\n+     */\n+    String mintSignedAccessToken(String httpMethod,\n+                                 long timestamp,\n+                                 URL requestUrl,\n+                                 String accessToken,\n+                                 String nonce,\n+                                 String clientClaims\n+    ) throws ClientException;\n+\n+    /**\n+     * Api to create the signed PoP access token.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4OTk3MA==", "bodyText": "7d469c3", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518989970", "createdAt": "2020-11-06T20:31:06Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "diffHunk": "@@ -284,4 +284,42 @@ String mintSignedAccessToken(String httpMethod,\n                                  String accessToken,\n                                  String nonce\n     ) throws ClientException;\n+\n+    /**\n+     * Api to create the signed PoP access token.\n+     *\n+     * @param httpMethod   (Optional) The HTTP method that will be used with this outbound request.\n+     * @param timestamp    Seconds since January 1st, 1970 (UTC).\n+     * @param requestUrl   The recipient URL of the outbound request.\n+     * @param accessToken  The access_token from which to derive the signed JWT.\n+     * @param nonce        (Optional) Arbitrary value used for replay protection by middleware.\n+     * @param clientClaims (Optional) Arbitrary String data provided by the caller. Used as the\n+     *                     client_claims value.\n+     * @return The signed PoP access token.\n+     */\n+    String mintSignedAccessToken(String httpMethod,\n+                                 long timestamp,\n+                                 URL requestUrl,\n+                                 String accessToken,\n+                                 String nonce,\n+                                 String clientClaims\n+    ) throws ClientException;\n+\n+    /**\n+     * Api to create the signed PoP access token.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5OTM2OA=="}, "originalCommit": {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTg0NzMwOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/request/MsalBrokerRequestAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMzoxMzoxNFrOHuesbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDoyOTozMlrOHu8lxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5OTQzOA==", "bodyText": "1 line", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518499438", "createdAt": "2020-11-06T03:13:14Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/request/MsalBrokerRequestAdapter.java", "diffHunk": "@@ -196,7 +206,7 @@ public BrokerInteractiveTokenCommandParameters brokerInteractiveParametersFromAc\n         }\n \n         int callingAppUid = intent.getIntExtra(\n-                AuthenticationConstants.Broker.CALLER_INFO_UID, 0\n+                CALLER_INFO_UID, 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4OTI1NQ==", "bodyText": "45f71b2", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518989255", "createdAt": "2020-11-06T20:29:32Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/request/MsalBrokerRequestAdapter.java", "diffHunk": "@@ -196,7 +206,7 @@ public BrokerInteractiveTokenCommandParameters brokerInteractiveParametersFromAc\n         }\n \n         int callingAppUid = intent.getIntExtra(\n-                AuthenticationConstants.Broker.CALLER_INFO_UID, 0\n+                CALLER_INFO_UID, 0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5OTQzOA=="}, "originalCommit": {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTg1MTk5OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMzoxNjowMFrOHuevDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMzo1NzoxNlrOHvA9_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwMDEwOA==", "bodyText": "Make this behave like the broker -- don't throw an Exception, instead, return an initialized error", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518500108", "createdAt": "2020-11-06T03:16:00Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -692,6 +694,82 @@ public AcquireTokenResult acquireDeviceCodeFlowToken(\n         return acquireTokenResult;\n     }\n \n+    @Override\n+    public GenerateShrResult generateSignedHttpRequest(\n+            @NonNull final GenerateShrCommandParameters parameters) throws Exception {\n+        final Context context = parameters.getAndroidApplicationContext();\n+        final IClockSkewManager clockSkewManager = new ClockSkewManager(context);\n+        final OAuth2TokenCache cache = parameters.getOAuth2TokenCache();\n+        final String clientId = parameters.getClientId();\n+        final String homeAccountId = parameters.getHomeAccountId();\n+        final IPoPAuthenticationSchemeParams popSchemeParams = parameters.getPopParameters();\n+\n+        if (userHasLocalAccountRecord(cache, clientId, homeAccountId)) {\n+            // Perform the signing locally...\n+            return generateSignedHttpRequestInternal(context, clockSkewManager, popSchemeParams);\n+        } else {\n+            throw new UiRequiredException(NO_ACCOUNT_FOUND, \"Account does not exist.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA2MDk4OA==", "bodyText": "0ae4907", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r519060988", "createdAt": "2020-11-06T23:57:16Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -692,6 +694,82 @@ public AcquireTokenResult acquireDeviceCodeFlowToken(\n         return acquireTokenResult;\n     }\n \n+    @Override\n+    public GenerateShrResult generateSignedHttpRequest(\n+            @NonNull final GenerateShrCommandParameters parameters) throws Exception {\n+        final Context context = parameters.getAndroidApplicationContext();\n+        final IClockSkewManager clockSkewManager = new ClockSkewManager(context);\n+        final OAuth2TokenCache cache = parameters.getOAuth2TokenCache();\n+        final String clientId = parameters.getClientId();\n+        final String homeAccountId = parameters.getHomeAccountId();\n+        final IPoPAuthenticationSchemeParams popSchemeParams = parameters.getPopParameters();\n+\n+        if (userHasLocalAccountRecord(cache, clientId, homeAccountId)) {\n+            // Perform the signing locally...\n+            return generateSignedHttpRequestInternal(context, clockSkewManager, popSchemeParams);\n+        } else {\n+            throw new UiRequiredException(NO_ACCOUNT_FOUND, \"Account does not exist.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwMDEwOA=="}, "originalCommit": {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTg3MTUzOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMzoyODoyMFrOHue58g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMzo1NzoxMlrOHvA96g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwMjg5OA==", "bodyText": "Refactor this out", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518502898", "createdAt": "2020-11-06T03:28:20Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "diffHunk": "@@ -0,0 +1,106 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.UiRequiredException;\n+import com.microsoft.identity.common.internal.commands.parameters.GenerateShrCommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BaseController;\n+import com.microsoft.identity.common.internal.result.GenerateShrResult;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.ErrorStrings.NO_ACCOUNT_FOUND;\n+\n+/**\n+ * Command class to perform generation of AT-less SHRs on behalf of a user.\n+ */\n+public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n+\n+    private static final String TAG = GenerateShrCommand.class.getSimpleName();\n+\n+    public GenerateShrCommand(@NonNull final GenerateShrCommandParameters parameters,\n+                              @NonNull final List<BaseController> controllers,\n+                              @NonNull final CommandCallback<GenerateShrResult, BaseException> callback,\n+                              @NonNull final String publicApiId) {\n+        super(parameters, controllers, callback, publicApiId);\n+    }\n+\n+    @Override\n+    public GenerateShrResult execute() throws Exception {\n+        final String methodName = \":execute\";\n+\n+        GenerateShrResult result = null;\n+        final GenerateShrCommandParameters parameters = (GenerateShrCommandParameters) getParameters();\n+\n+        // Iterate over our controllers, to service the request either locally or via the broker...\n+        BaseController controller;\n+        for (int ii = 0; ii < getControllers().size(); ii++) {\n+            controller = getControllers().get(ii);\n+\n+            com.microsoft.identity.common.internal.logging.Logger.verbose(\n+                    TAG + methodName,\n+                    \"Executing with controller: \"\n+                            + controller.getClass().getSimpleName()\n+            );\n+\n+            try {\n+                result = controller.generateSignedHttpRequest(parameters);\n+\n+                if (null != result.getErrorCode()) {\n+                    final String errorCode = result.getErrorCode();\n+                    final String errorMessage = result.getErrorMessage();\n+\n+                    if (NO_ACCOUNT_FOUND.equalsIgnoreCase(errorCode)) {\n+                        throw new UiRequiredException(errorCode, errorMessage);\n+                    } else {\n+                        throw new ClientException(errorCode, errorMessage);\n+                    }\n+                }\n+\n+            } catch (final UiRequiredException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA2MDk3MA==", "bodyText": "0ae4907", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r519060970", "createdAt": "2020-11-06T23:57:12Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "diffHunk": "@@ -0,0 +1,106 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.UiRequiredException;\n+import com.microsoft.identity.common.internal.commands.parameters.GenerateShrCommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BaseController;\n+import com.microsoft.identity.common.internal.result.GenerateShrResult;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.ErrorStrings.NO_ACCOUNT_FOUND;\n+\n+/**\n+ * Command class to perform generation of AT-less SHRs on behalf of a user.\n+ */\n+public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n+\n+    private static final String TAG = GenerateShrCommand.class.getSimpleName();\n+\n+    public GenerateShrCommand(@NonNull final GenerateShrCommandParameters parameters,\n+                              @NonNull final List<BaseController> controllers,\n+                              @NonNull final CommandCallback<GenerateShrResult, BaseException> callback,\n+                              @NonNull final String publicApiId) {\n+        super(parameters, controllers, callback, publicApiId);\n+    }\n+\n+    @Override\n+    public GenerateShrResult execute() throws Exception {\n+        final String methodName = \":execute\";\n+\n+        GenerateShrResult result = null;\n+        final GenerateShrCommandParameters parameters = (GenerateShrCommandParameters) getParameters();\n+\n+        // Iterate over our controllers, to service the request either locally or via the broker...\n+        BaseController controller;\n+        for (int ii = 0; ii < getControllers().size(); ii++) {\n+            controller = getControllers().get(ii);\n+\n+            com.microsoft.identity.common.internal.logging.Logger.verbose(\n+                    TAG + methodName,\n+                    \"Executing with controller: \"\n+                            + controller.getClass().getSimpleName()\n+            );\n+\n+            try {\n+                result = controller.generateSignedHttpRequest(parameters);\n+\n+                if (null != result.getErrorCode()) {\n+                    final String errorCode = result.getErrorCode();\n+                    final String errorMessage = result.getErrorMessage();\n+\n+                    if (NO_ACCOUNT_FOUND.equalsIgnoreCase(errorCode)) {\n+                        throw new UiRequiredException(errorCode, errorMessage);\n+                    } else {\n+                        throw new ClientException(errorCode, errorMessage);\n+                    }\n+                }\n+\n+            } catch (final UiRequiredException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwMjg5OA=="}, "originalCommit": {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzQwNTczOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/result/MsalBrokerResultAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMzoxODozM1rOHvAZDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMTowMTozMlrOHvBtxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA1MTUzNQ==", "bodyText": "javadoc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r519051535", "createdAt": "2020-11-06T23:18:33Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/result/MsalBrokerResultAdapter.java", "diffHunk": "@@ -628,4 +629,14 @@ public boolean getDeviceModeFromResultBundle(@NonNull final Bundle bundle) throw\n     public @NonNull ClientException getExceptionForEmptyResultBundle() {\n         return new ClientException(INVALID_BROKER_BUNDLE, \"Broker Result not returned from Broker.\");\n     }\n+\n+    public GenerateShrResult getGenerateShrResultFromResultBundle(@NonNull final Bundle resultBundle) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aede0aa29d87280fda3c00d5f3ca11700091c922"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA3MzIyMA==", "bodyText": "cb32c15", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r519073220", "createdAt": "2020-11-07T01:01:32Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/result/MsalBrokerResultAdapter.java", "diffHunk": "@@ -628,4 +629,14 @@ public boolean getDeviceModeFromResultBundle(@NonNull final Bundle bundle) throw\n     public @NonNull ClientException getExceptionForEmptyResultBundle() {\n         return new ClientException(INVALID_BROKER_BUNDLE, \"Broker Result not returned from Broker.\");\n     }\n+\n+    public GenerateShrResult getGenerateShrResultFromResultBundle(@NonNull final Bundle resultBundle) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA1MTUzNQ=="}, "originalCommit": {"oid": "aede0aa29d87280fda3c00d5f3ca11700091c922"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzY2MzcyOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMzowNDo0MVrOHvCkNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMzowNDo0MVrOHvCkNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA4NzE1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // the embedded PoP keys. If not local user-state exists, the broker will be delegated to\n          \n          \n            \n                    // the embedded PoP keys. If no local user-state exists, the broker will be delegated to", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r519087159", "createdAt": "2020-11-07T03:04:41Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "diffHunk": "@@ -0,0 +1,110 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.UiRequiredException;\n+import com.microsoft.identity.common.internal.commands.parameters.GenerateShrCommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BaseController;\n+import com.microsoft.identity.common.internal.result.GenerateShrResult;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.ErrorStrings.NO_ACCOUNT_FOUND;\n+\n+/**\n+ * Command class to perform generation of AT-less SHRs on behalf of a user.\n+ */\n+public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n+\n+    private static final String TAG = GenerateShrCommand.class.getSimpleName();\n+\n+    /**\n+     * Constructs a new GenerateShrCommand.\n+     *\n+     * @param parameters  The command's input parameters.\n+     * @param controllers The controllers on which to run this command.\n+     * @param callback    The command to notify once execution has completed.\n+     * @param publicApiId The public API ID of this command.\n+     */\n+    public GenerateShrCommand(@NonNull final GenerateShrCommandParameters parameters,\n+                              @NonNull final List<BaseController> controllers,\n+                              @NonNull final CommandCallback<GenerateShrResult, BaseException> callback,\n+                              @NonNull final String publicApiId) {\n+        super(parameters, controllers, callback, publicApiId);\n+    }\n+\n+    @Override\n+    public GenerateShrResult execute() throws Exception {\n+        final String methodName = \":execute\";\n+\n+        GenerateShrResult result = null;\n+        final GenerateShrCommandParameters parameters = (GenerateShrCommandParameters) getParameters();\n+\n+        // Iterate over our controllers, to service the request either locally or via the broker...\n+        // if the local (embedded) cache contains tokens for the supplied user, we will sign using\n+        // the embedded PoP keys. If not local user-state exists, the broker will be delegated to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27dbe428130ccbfb1030f62e9bd60e5d3c14a450"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NDA0NzI5OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwNzozODo1MVrOHvGULA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMTozOTo0MVrOHwIZdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE0ODU4OA==", "bodyText": "TODO: run this error path in a manual test", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r519148588", "createdAt": "2020-11-07T07:38:51Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "diffHunk": "@@ -0,0 +1,110 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.UiRequiredException;\n+import com.microsoft.identity.common.internal.commands.parameters.GenerateShrCommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BaseController;\n+import com.microsoft.identity.common.internal.result.GenerateShrResult;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.ErrorStrings.NO_ACCOUNT_FOUND;\n+\n+/**\n+ * Command class to perform generation of AT-less SHRs on behalf of a user.\n+ */\n+public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n+\n+    private static final String TAG = GenerateShrCommand.class.getSimpleName();\n+\n+    /**\n+     * Constructs a new GenerateShrCommand.\n+     *\n+     * @param parameters  The command's input parameters.\n+     * @param controllers The controllers on which to run this command.\n+     * @param callback    The command to notify once execution has completed.\n+     * @param publicApiId The public API ID of this command.\n+     */\n+    public GenerateShrCommand(@NonNull final GenerateShrCommandParameters parameters,\n+                              @NonNull final List<BaseController> controllers,\n+                              @NonNull final CommandCallback<GenerateShrResult, BaseException> callback,\n+                              @NonNull final String publicApiId) {\n+        super(parameters, controllers, callback, publicApiId);\n+    }\n+\n+    @Override\n+    public GenerateShrResult execute() throws Exception {\n+        final String methodName = \":execute\";\n+\n+        GenerateShrResult result = null;\n+        final GenerateShrCommandParameters parameters = (GenerateShrCommandParameters) getParameters();\n+\n+        // Iterate over our controllers, to service the request either locally or via the broker...\n+        // if the local (embedded) cache contains tokens for the supplied user, we will sign using\n+        // the embedded PoP keys. If no local user-state exists, the broker will be delegated to\n+        // where the same check is performed.\n+        BaseController controller;\n+        for (int ii = 0; ii < getControllers().size(); ii++) {\n+            controller = getControllers().get(ii);\n+\n+            com.microsoft.identity.common.internal.logging.Logger.verbose(\n+                    TAG + methodName,\n+                    \"Executing with controller: \"\n+                            + controller.getClass().getSimpleName()\n+            );\n+\n+            result = controller.generateSignedHttpRequest(parameters);\n+\n+            if (null != result.getErrorCode()) {\n+                final String errorCode = result.getErrorCode();\n+                final String errorMessage = result.getErrorMessage();\n+\n+                // To support a shared communication model between the local flow and the\n+                // broker flow, errors will be returned as properties of the result, instead\n+                // of as thrown Exceptions\n+                if (NO_ACCOUNT_FOUND.equalsIgnoreCase(errorCode)) {\n+                    if (getControllers().size() > ii + 1) {\n+                        // Try our next controller\n+                        continue;\n+                    } else {\n+                        throw new UiRequiredException(errorCode, errorMessage);\n+                    }\n+                } else {\n+                    throw new ClientException(errorCode, errorMessage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bcec4f7d2a6210e25b34e4c69643b804ce24aa9"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIzMTI4Nw==", "bodyText": "Tested and behaves as expected.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r520231287", "createdAt": "2020-11-10T01:39:41Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "diffHunk": "@@ -0,0 +1,110 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.UiRequiredException;\n+import com.microsoft.identity.common.internal.commands.parameters.GenerateShrCommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BaseController;\n+import com.microsoft.identity.common.internal.result.GenerateShrResult;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.ErrorStrings.NO_ACCOUNT_FOUND;\n+\n+/**\n+ * Command class to perform generation of AT-less SHRs on behalf of a user.\n+ */\n+public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n+\n+    private static final String TAG = GenerateShrCommand.class.getSimpleName();\n+\n+    /**\n+     * Constructs a new GenerateShrCommand.\n+     *\n+     * @param parameters  The command's input parameters.\n+     * @param controllers The controllers on which to run this command.\n+     * @param callback    The command to notify once execution has completed.\n+     * @param publicApiId The public API ID of this command.\n+     */\n+    public GenerateShrCommand(@NonNull final GenerateShrCommandParameters parameters,\n+                              @NonNull final List<BaseController> controllers,\n+                              @NonNull final CommandCallback<GenerateShrResult, BaseException> callback,\n+                              @NonNull final String publicApiId) {\n+        super(parameters, controllers, callback, publicApiId);\n+    }\n+\n+    @Override\n+    public GenerateShrResult execute() throws Exception {\n+        final String methodName = \":execute\";\n+\n+        GenerateShrResult result = null;\n+        final GenerateShrCommandParameters parameters = (GenerateShrCommandParameters) getParameters();\n+\n+        // Iterate over our controllers, to service the request either locally or via the broker...\n+        // if the local (embedded) cache contains tokens for the supplied user, we will sign using\n+        // the embedded PoP keys. If no local user-state exists, the broker will be delegated to\n+        // where the same check is performed.\n+        BaseController controller;\n+        for (int ii = 0; ii < getControllers().size(); ii++) {\n+            controller = getControllers().get(ii);\n+\n+            com.microsoft.identity.common.internal.logging.Logger.verbose(\n+                    TAG + methodName,\n+                    \"Executing with controller: \"\n+                            + controller.getClass().getSimpleName()\n+            );\n+\n+            result = controller.generateSignedHttpRequest(parameters);\n+\n+            if (null != result.getErrorCode()) {\n+                final String errorCode = result.getErrorCode();\n+                final String errorMessage = result.getErrorMessage();\n+\n+                // To support a shared communication model between the local flow and the\n+                // broker flow, errors will be returned as properties of the result, instead\n+                // of as thrown Exceptions\n+                if (NO_ACCOUNT_FOUND.equalsIgnoreCase(errorCode)) {\n+                    if (getControllers().size() > ii + 1) {\n+                        // Try our next controller\n+                        continue;\n+                    } else {\n+                        throw new UiRequiredException(errorCode, errorMessage);\n+                    }\n+                } else {\n+                    throw new ClientException(errorCode, errorMessage);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE0ODU4OA=="}, "originalCommit": {"oid": "1bcec4f7d2a6210e25b34e4c69643b804ce24aa9"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTkwNDc0OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODowNzozNVrOHv7K9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMTozNToyMlrOHwIUQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAxNDU4Mw==", "bodyText": "Not required -- there is no interaction with the server here.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r520014583", "createdAt": "2020-11-09T18:07:35Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "diffHunk": "@@ -0,0 +1,110 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.UiRequiredException;\n+import com.microsoft.identity.common.internal.commands.parameters.GenerateShrCommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BaseController;\n+import com.microsoft.identity.common.internal.result.GenerateShrResult;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.ErrorStrings.NO_ACCOUNT_FOUND;\n+\n+/**\n+ * Command class to perform generation of AT-less SHRs on behalf of a user.\n+ */\n+public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n+\n+    private static final String TAG = GenerateShrCommand.class.getSimpleName();\n+\n+    /**\n+     * Constructs a new GenerateShrCommand.\n+     *\n+     * @param parameters  The command's input parameters.\n+     * @param controllers The controllers on which to run this command.\n+     * @param callback    The command to notify once execution has completed.\n+     * @param publicApiId The public API ID of this command.\n+     */\n+    public GenerateShrCommand(@NonNull final GenerateShrCommandParameters parameters,\n+                              @NonNull final List<BaseController> controllers,\n+                              @NonNull final CommandCallback<GenerateShrResult, BaseException> callback,\n+                              @NonNull final String publicApiId) {\n+        super(parameters, controllers, callback, publicApiId);\n+    }\n+\n+    @Override\n+    public GenerateShrResult execute() throws Exception {\n+        final String methodName = \":execute\";\n+\n+        GenerateShrResult result = null;\n+        final GenerateShrCommandParameters parameters = (GenerateShrCommandParameters) getParameters();\n+\n+        // Iterate over our controllers, to service the request either locally or via the broker...\n+        // if the local (embedded) cache contains tokens for the supplied user, we will sign using\n+        // the embedded PoP keys. If no local user-state exists, the broker will be delegated to\n+        // where the same check is performed.\n+        BaseController controller;\n+        for (int ii = 0; ii < getControllers().size(); ii++) {\n+            controller = getControllers().get(ii);\n+\n+            com.microsoft.identity.common.internal.logging.Logger.verbose(\n+                    TAG + methodName,\n+                    \"Executing with controller: \"\n+                            + controller.getClass().getSimpleName()\n+            );\n+\n+            result = controller.generateSignedHttpRequest(parameters);\n+\n+            if (null != result.getErrorCode()) {\n+                final String errorCode = result.getErrorCode();\n+                final String errorMessage = result.getErrorMessage();\n+\n+                // To support a shared communication model between the local flow and the\n+                // broker flow, errors will be returned as properties of the result, instead\n+                // of as thrown Exceptions\n+                if (NO_ACCOUNT_FOUND.equalsIgnoreCase(errorCode)) {\n+                    if (getControllers().size() > ii + 1) {\n+                        // Try our next controller\n+                        continue;\n+                    } else {\n+                        throw new UiRequiredException(errorCode, errorMessage);\n+                    }\n+                } else {\n+                    throw new ClientException(errorCode, errorMessage);\n+                }\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean isEligibleForEstsTelemetry() {\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bcec4f7d2a6210e25b34e4c69643b804ce24aa9"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAxNDY5NA==", "bodyText": "(Add comment)", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r520014694", "createdAt": "2020-11-09T18:07:47Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "diffHunk": "@@ -0,0 +1,110 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.UiRequiredException;\n+import com.microsoft.identity.common.internal.commands.parameters.GenerateShrCommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BaseController;\n+import com.microsoft.identity.common.internal.result.GenerateShrResult;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.ErrorStrings.NO_ACCOUNT_FOUND;\n+\n+/**\n+ * Command class to perform generation of AT-less SHRs on behalf of a user.\n+ */\n+public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n+\n+    private static final String TAG = GenerateShrCommand.class.getSimpleName();\n+\n+    /**\n+     * Constructs a new GenerateShrCommand.\n+     *\n+     * @param parameters  The command's input parameters.\n+     * @param controllers The controllers on which to run this command.\n+     * @param callback    The command to notify once execution has completed.\n+     * @param publicApiId The public API ID of this command.\n+     */\n+    public GenerateShrCommand(@NonNull final GenerateShrCommandParameters parameters,\n+                              @NonNull final List<BaseController> controllers,\n+                              @NonNull final CommandCallback<GenerateShrResult, BaseException> callback,\n+                              @NonNull final String publicApiId) {\n+        super(parameters, controllers, callback, publicApiId);\n+    }\n+\n+    @Override\n+    public GenerateShrResult execute() throws Exception {\n+        final String methodName = \":execute\";\n+\n+        GenerateShrResult result = null;\n+        final GenerateShrCommandParameters parameters = (GenerateShrCommandParameters) getParameters();\n+\n+        // Iterate over our controllers, to service the request either locally or via the broker...\n+        // if the local (embedded) cache contains tokens for the supplied user, we will sign using\n+        // the embedded PoP keys. If no local user-state exists, the broker will be delegated to\n+        // where the same check is performed.\n+        BaseController controller;\n+        for (int ii = 0; ii < getControllers().size(); ii++) {\n+            controller = getControllers().get(ii);\n+\n+            com.microsoft.identity.common.internal.logging.Logger.verbose(\n+                    TAG + methodName,\n+                    \"Executing with controller: \"\n+                            + controller.getClass().getSimpleName()\n+            );\n+\n+            result = controller.generateSignedHttpRequest(parameters);\n+\n+            if (null != result.getErrorCode()) {\n+                final String errorCode = result.getErrorCode();\n+                final String errorMessage = result.getErrorMessage();\n+\n+                // To support a shared communication model between the local flow and the\n+                // broker flow, errors will be returned as properties of the result, instead\n+                // of as thrown Exceptions\n+                if (NO_ACCOUNT_FOUND.equalsIgnoreCase(errorCode)) {\n+                    if (getControllers().size() > ii + 1) {\n+                        // Try our next controller\n+                        continue;\n+                    } else {\n+                        throw new UiRequiredException(errorCode, errorMessage);\n+                    }\n+                } else {\n+                    throw new ClientException(errorCode, errorMessage);\n+                }\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean isEligibleForEstsTelemetry() {\n+        return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAxNDU4Mw=="}, "originalCommit": {"oid": "1bcec4f7d2a6210e25b34e4c69643b804ce24aa9"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIyOTk1Mg==", "bodyText": "f9a2fcd", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r520229952", "createdAt": "2020-11-10T01:35:22Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "diffHunk": "@@ -0,0 +1,110 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.UiRequiredException;\n+import com.microsoft.identity.common.internal.commands.parameters.GenerateShrCommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BaseController;\n+import com.microsoft.identity.common.internal.result.GenerateShrResult;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.ErrorStrings.NO_ACCOUNT_FOUND;\n+\n+/**\n+ * Command class to perform generation of AT-less SHRs on behalf of a user.\n+ */\n+public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n+\n+    private static final String TAG = GenerateShrCommand.class.getSimpleName();\n+\n+    /**\n+     * Constructs a new GenerateShrCommand.\n+     *\n+     * @param parameters  The command's input parameters.\n+     * @param controllers The controllers on which to run this command.\n+     * @param callback    The command to notify once execution has completed.\n+     * @param publicApiId The public API ID of this command.\n+     */\n+    public GenerateShrCommand(@NonNull final GenerateShrCommandParameters parameters,\n+                              @NonNull final List<BaseController> controllers,\n+                              @NonNull final CommandCallback<GenerateShrResult, BaseException> callback,\n+                              @NonNull final String publicApiId) {\n+        super(parameters, controllers, callback, publicApiId);\n+    }\n+\n+    @Override\n+    public GenerateShrResult execute() throws Exception {\n+        final String methodName = \":execute\";\n+\n+        GenerateShrResult result = null;\n+        final GenerateShrCommandParameters parameters = (GenerateShrCommandParameters) getParameters();\n+\n+        // Iterate over our controllers, to service the request either locally or via the broker...\n+        // if the local (embedded) cache contains tokens for the supplied user, we will sign using\n+        // the embedded PoP keys. If no local user-state exists, the broker will be delegated to\n+        // where the same check is performed.\n+        BaseController controller;\n+        for (int ii = 0; ii < getControllers().size(); ii++) {\n+            controller = getControllers().get(ii);\n+\n+            com.microsoft.identity.common.internal.logging.Logger.verbose(\n+                    TAG + methodName,\n+                    \"Executing with controller: \"\n+                            + controller.getClass().getSimpleName()\n+            );\n+\n+            result = controller.generateSignedHttpRequest(parameters);\n+\n+            if (null != result.getErrorCode()) {\n+                final String errorCode = result.getErrorCode();\n+                final String errorMessage = result.getErrorMessage();\n+\n+                // To support a shared communication model between the local flow and the\n+                // broker flow, errors will be returned as properties of the result, instead\n+                // of as thrown Exceptions\n+                if (NO_ACCOUNT_FOUND.equalsIgnoreCase(errorCode)) {\n+                    if (getControllers().size() > ii + 1) {\n+                        // Try our next controller\n+                        continue;\n+                    } else {\n+                        throw new UiRequiredException(errorCode, errorMessage);\n+                    }\n+                } else {\n+                    throw new ClientException(errorCode, errorMessage);\n+                }\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean isEligibleForEstsTelemetry() {\n+        return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAxNDU4Mw=="}, "originalCommit": {"oid": "1bcec4f7d2a6210e25b34e4c69643b804ce24aa9"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Njc5Mjk5OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNDowNzo0NFrOHw9Z-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMjoxMjowNFrOHxgKuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5OTc2OA==", "bodyText": "How are we certain that the local controller is the first one in the list here?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r521099768", "createdAt": "2020-11-11T04:07:44Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "diffHunk": "@@ -0,0 +1,111 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.UiRequiredException;\n+import com.microsoft.identity.common.internal.commands.parameters.GenerateShrCommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BaseController;\n+import com.microsoft.identity.common.internal.result.GenerateShrResult;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.ErrorStrings.NO_ACCOUNT_FOUND;\n+\n+/**\n+ * Command class to perform generation of AT-less SHRs on behalf of a user.\n+ */\n+public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n+\n+    private static final String TAG = GenerateShrCommand.class.getSimpleName();\n+\n+    /**\n+     * Constructs a new GenerateShrCommand.\n+     *\n+     * @param parameters  The command's input parameters.\n+     * @param controllers The controllers on which to run this command.\n+     * @param callback    The command to notify once execution has completed.\n+     * @param publicApiId The public API ID of this command.\n+     */\n+    public GenerateShrCommand(@NonNull final GenerateShrCommandParameters parameters,\n+                              @NonNull final List<BaseController> controllers,\n+                              @NonNull final CommandCallback<GenerateShrResult, BaseException> callback,\n+                              @NonNull final String publicApiId) {\n+        super(parameters, controllers, callback, publicApiId);\n+    }\n+\n+    @Override\n+    public GenerateShrResult execute() throws Exception {\n+        final String methodName = \":execute\";\n+\n+        GenerateShrResult result = null;\n+        final GenerateShrCommandParameters parameters = (GenerateShrCommandParameters) getParameters();\n+\n+        // Iterate over our controllers, to service the request either locally or via the broker...\n+        // if the local (embedded) cache contains tokens for the supplied user, we will sign using\n+        // the embedded PoP keys. If no local user-state exists, the broker will be delegated to\n+        // where the same check is performed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcae65808d3c9827839d12a8d4cbe074d719ccdf"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2NzA1Mg==", "bodyText": "This works the same way as the SilentTokenCommand: by calling MsalControllerFactory#getAllControllers where the local controller is always the first one tried. See:\nhttps://github.com/AzureAD/microsoft-authentication-library-for-android/blob/dev/msal/src/main/java/com/microsoft/identity/client/internal/controllers/MSALControllerFactory.java#L100", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r521667052", "createdAt": "2020-11-11T22:06:52Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "diffHunk": "@@ -0,0 +1,111 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.UiRequiredException;\n+import com.microsoft.identity.common.internal.commands.parameters.GenerateShrCommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BaseController;\n+import com.microsoft.identity.common.internal.result.GenerateShrResult;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.ErrorStrings.NO_ACCOUNT_FOUND;\n+\n+/**\n+ * Command class to perform generation of AT-less SHRs on behalf of a user.\n+ */\n+public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n+\n+    private static final String TAG = GenerateShrCommand.class.getSimpleName();\n+\n+    /**\n+     * Constructs a new GenerateShrCommand.\n+     *\n+     * @param parameters  The command's input parameters.\n+     * @param controllers The controllers on which to run this command.\n+     * @param callback    The command to notify once execution has completed.\n+     * @param publicApiId The public API ID of this command.\n+     */\n+    public GenerateShrCommand(@NonNull final GenerateShrCommandParameters parameters,\n+                              @NonNull final List<BaseController> controllers,\n+                              @NonNull final CommandCallback<GenerateShrResult, BaseException> callback,\n+                              @NonNull final String publicApiId) {\n+        super(parameters, controllers, callback, publicApiId);\n+    }\n+\n+    @Override\n+    public GenerateShrResult execute() throws Exception {\n+        final String methodName = \":execute\";\n+\n+        GenerateShrResult result = null;\n+        final GenerateShrCommandParameters parameters = (GenerateShrCommandParameters) getParameters();\n+\n+        // Iterate over our controllers, to service the request either locally or via the broker...\n+        // if the local (embedded) cache contains tokens for the supplied user, we will sign using\n+        // the embedded PoP keys. If no local user-state exists, the broker will be delegated to\n+        // where the same check is performed.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5OTc2OA=="}, "originalCommit": {"oid": "dcae65808d3c9827839d12a8d4cbe074d719ccdf"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2OTMwNw==", "bodyText": "Marking resolved; feel free to unresolve if you have more feedback on this", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r521669307", "createdAt": "2020-11-11T22:12:04Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "diffHunk": "@@ -0,0 +1,111 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.UiRequiredException;\n+import com.microsoft.identity.common.internal.commands.parameters.GenerateShrCommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BaseController;\n+import com.microsoft.identity.common.internal.result.GenerateShrResult;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.ErrorStrings.NO_ACCOUNT_FOUND;\n+\n+/**\n+ * Command class to perform generation of AT-less SHRs on behalf of a user.\n+ */\n+public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n+\n+    private static final String TAG = GenerateShrCommand.class.getSimpleName();\n+\n+    /**\n+     * Constructs a new GenerateShrCommand.\n+     *\n+     * @param parameters  The command's input parameters.\n+     * @param controllers The controllers on which to run this command.\n+     * @param callback    The command to notify once execution has completed.\n+     * @param publicApiId The public API ID of this command.\n+     */\n+    public GenerateShrCommand(@NonNull final GenerateShrCommandParameters parameters,\n+                              @NonNull final List<BaseController> controllers,\n+                              @NonNull final CommandCallback<GenerateShrResult, BaseException> callback,\n+                              @NonNull final String publicApiId) {\n+        super(parameters, controllers, callback, publicApiId);\n+    }\n+\n+    @Override\n+    public GenerateShrResult execute() throws Exception {\n+        final String methodName = \":execute\";\n+\n+        GenerateShrResult result = null;\n+        final GenerateShrCommandParameters parameters = (GenerateShrCommandParameters) getParameters();\n+\n+        // Iterate over our controllers, to service the request either locally or via the broker...\n+        // if the local (embedded) cache contains tokens for the supplied user, we will sign using\n+        // the embedded PoP keys. If no local user-state exists, the broker will be delegated to\n+        // where the same check is performed.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5OTc2OA=="}, "originalCommit": {"oid": "dcae65808d3c9827839d12a8d4cbe074d719ccdf"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Njc5NTAyOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNDowOTowOFrOHw9bOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMjoxMToyOFrOHxgJvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwMDA4OQ==", "bodyText": "what do we mean by shared communication model? are these controllers talking to each other?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r521100089", "createdAt": "2020-11-11T04:09:08Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "diffHunk": "@@ -0,0 +1,111 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.UiRequiredException;\n+import com.microsoft.identity.common.internal.commands.parameters.GenerateShrCommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BaseController;\n+import com.microsoft.identity.common.internal.result.GenerateShrResult;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.ErrorStrings.NO_ACCOUNT_FOUND;\n+\n+/**\n+ * Command class to perform generation of AT-less SHRs on behalf of a user.\n+ */\n+public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n+\n+    private static final String TAG = GenerateShrCommand.class.getSimpleName();\n+\n+    /**\n+     * Constructs a new GenerateShrCommand.\n+     *\n+     * @param parameters  The command's input parameters.\n+     * @param controllers The controllers on which to run this command.\n+     * @param callback    The command to notify once execution has completed.\n+     * @param publicApiId The public API ID of this command.\n+     */\n+    public GenerateShrCommand(@NonNull final GenerateShrCommandParameters parameters,\n+                              @NonNull final List<BaseController> controllers,\n+                              @NonNull final CommandCallback<GenerateShrResult, BaseException> callback,\n+                              @NonNull final String publicApiId) {\n+        super(parameters, controllers, callback, publicApiId);\n+    }\n+\n+    @Override\n+    public GenerateShrResult execute() throws Exception {\n+        final String methodName = \":execute\";\n+\n+        GenerateShrResult result = null;\n+        final GenerateShrCommandParameters parameters = (GenerateShrCommandParameters) getParameters();\n+\n+        // Iterate over our controllers, to service the request either locally or via the broker...\n+        // if the local (embedded) cache contains tokens for the supplied user, we will sign using\n+        // the embedded PoP keys. If no local user-state exists, the broker will be delegated to\n+        // where the same check is performed.\n+        BaseController controller;\n+        for (int ii = 0; ii < getControllers().size(); ii++) {\n+            controller = getControllers().get(ii);\n+\n+            com.microsoft.identity.common.internal.logging.Logger.verbose(\n+                    TAG + methodName,\n+                    \"Executing with controller: \"\n+                            + controller.getClass().getSimpleName()\n+            );\n+\n+            result = controller.generateSignedHttpRequest(parameters);\n+\n+            if (null != result.getErrorCode()) {\n+                final String errorCode = result.getErrorCode();\n+                final String errorMessage = result.getErrorMessage();\n+\n+                // To support a shared communication model between the local flow and the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcae65808d3c9827839d12a8d4cbe074d719ccdf"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2ODYyMA==", "bodyText": "No no -- this refers to the fact that errors from the various controllers (local or broker) aren't thrown, but are instead returned as properties of the GenerateShrResult. So even though we could use throw locally, we don't so that the local controller behaves like the broker (where we cannot throw Exceptions across process boundaries) I'll clarify this comment", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r521668620", "createdAt": "2020-11-11T22:10:21Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "diffHunk": "@@ -0,0 +1,111 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.UiRequiredException;\n+import com.microsoft.identity.common.internal.commands.parameters.GenerateShrCommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BaseController;\n+import com.microsoft.identity.common.internal.result.GenerateShrResult;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.ErrorStrings.NO_ACCOUNT_FOUND;\n+\n+/**\n+ * Command class to perform generation of AT-less SHRs on behalf of a user.\n+ */\n+public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n+\n+    private static final String TAG = GenerateShrCommand.class.getSimpleName();\n+\n+    /**\n+     * Constructs a new GenerateShrCommand.\n+     *\n+     * @param parameters  The command's input parameters.\n+     * @param controllers The controllers on which to run this command.\n+     * @param callback    The command to notify once execution has completed.\n+     * @param publicApiId The public API ID of this command.\n+     */\n+    public GenerateShrCommand(@NonNull final GenerateShrCommandParameters parameters,\n+                              @NonNull final List<BaseController> controllers,\n+                              @NonNull final CommandCallback<GenerateShrResult, BaseException> callback,\n+                              @NonNull final String publicApiId) {\n+        super(parameters, controllers, callback, publicApiId);\n+    }\n+\n+    @Override\n+    public GenerateShrResult execute() throws Exception {\n+        final String methodName = \":execute\";\n+\n+        GenerateShrResult result = null;\n+        final GenerateShrCommandParameters parameters = (GenerateShrCommandParameters) getParameters();\n+\n+        // Iterate over our controllers, to service the request either locally or via the broker...\n+        // if the local (embedded) cache contains tokens for the supplied user, we will sign using\n+        // the embedded PoP keys. If no local user-state exists, the broker will be delegated to\n+        // where the same check is performed.\n+        BaseController controller;\n+        for (int ii = 0; ii < getControllers().size(); ii++) {\n+            controller = getControllers().get(ii);\n+\n+            com.microsoft.identity.common.internal.logging.Logger.verbose(\n+                    TAG + methodName,\n+                    \"Executing with controller: \"\n+                            + controller.getClass().getSimpleName()\n+            );\n+\n+            result = controller.generateSignedHttpRequest(parameters);\n+\n+            if (null != result.getErrorCode()) {\n+                final String errorCode = result.getErrorCode();\n+                final String errorMessage = result.getErrorMessage();\n+\n+                // To support a shared communication model between the local flow and the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwMDA4OQ=="}, "originalCommit": {"oid": "dcae65808d3c9827839d12a8d4cbe074d719ccdf"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2OTA1NQ==", "bodyText": "Update this comment to change shared -> consistent", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r521669055", "createdAt": "2020-11-11T22:11:28Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "diffHunk": "@@ -0,0 +1,111 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.UiRequiredException;\n+import com.microsoft.identity.common.internal.commands.parameters.GenerateShrCommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BaseController;\n+import com.microsoft.identity.common.internal.result.GenerateShrResult;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.ErrorStrings.NO_ACCOUNT_FOUND;\n+\n+/**\n+ * Command class to perform generation of AT-less SHRs on behalf of a user.\n+ */\n+public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n+\n+    private static final String TAG = GenerateShrCommand.class.getSimpleName();\n+\n+    /**\n+     * Constructs a new GenerateShrCommand.\n+     *\n+     * @param parameters  The command's input parameters.\n+     * @param controllers The controllers on which to run this command.\n+     * @param callback    The command to notify once execution has completed.\n+     * @param publicApiId The public API ID of this command.\n+     */\n+    public GenerateShrCommand(@NonNull final GenerateShrCommandParameters parameters,\n+                              @NonNull final List<BaseController> controllers,\n+                              @NonNull final CommandCallback<GenerateShrResult, BaseException> callback,\n+                              @NonNull final String publicApiId) {\n+        super(parameters, controllers, callback, publicApiId);\n+    }\n+\n+    @Override\n+    public GenerateShrResult execute() throws Exception {\n+        final String methodName = \":execute\";\n+\n+        GenerateShrResult result = null;\n+        final GenerateShrCommandParameters parameters = (GenerateShrCommandParameters) getParameters();\n+\n+        // Iterate over our controllers, to service the request either locally or via the broker...\n+        // if the local (embedded) cache contains tokens for the supplied user, we will sign using\n+        // the embedded PoP keys. If no local user-state exists, the broker will be delegated to\n+        // where the same check is performed.\n+        BaseController controller;\n+        for (int ii = 0; ii < getControllers().size(); ii++) {\n+            controller = getControllers().get(ii);\n+\n+            com.microsoft.identity.common.internal.logging.Logger.verbose(\n+                    TAG + methodName,\n+                    \"Executing with controller: \"\n+                            + controller.getClass().getSimpleName()\n+            );\n+\n+            result = controller.generateSignedHttpRequest(parameters);\n+\n+            if (null != result.getErrorCode()) {\n+                final String errorCode = result.getErrorCode();\n+                final String errorMessage = result.getErrorMessage();\n+\n+                // To support a shared communication model between the local flow and the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwMDA4OQ=="}, "originalCommit": {"oid": "dcae65808d3c9827839d12a8d4cbe074d719ccdf"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjgwNTQ0OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/request/MsalBrokerRequestAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNDoxNTowMlrOHw9hAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMjoyNjo1OVrOHxgkeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwMTU2OQ==", "bodyText": "needs formatting", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r521101569", "createdAt": "2020-11-11T04:15:02Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/request/MsalBrokerRequestAdapter.java", "diffHunk": "@@ -597,11 +584,40 @@ public Bundle getRequestBundleForRemoveAccount(@NonNull final RemoveAccountComma\n     public Bundle getRequestBundleForRemoveAccountFromSharedDevice(@NonNull final RemoveAccountCommandParameters parameters,\n                                                                    @Nullable final String negotiatedBrokerProtocolVersion) {\n         final Bundle requestBundle = new Bundle();\n-        requestBundle.putString(\n-                AuthenticationConstants.Broker.NEGOTIATED_BP_VERSION_KEY,\n-                negotiatedBrokerProtocolVersion\n+        requestBundle.putString(NEGOTIATED_BP_VERSION_KEY, negotiatedBrokerProtocolVersion);\n+\n+        return requestBundle;\n+    }\n+\n+    /**\n+     * Method to construct a request {@link Bundle} for broker generateShr", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcae65808d3c9827839d12a8d4cbe074d719ccdf"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY3NTg5OA==", "bodyText": "a98d10d", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r521675898", "createdAt": "2020-11-11T22:26:59Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/request/MsalBrokerRequestAdapter.java", "diffHunk": "@@ -597,11 +584,40 @@ public Bundle getRequestBundleForRemoveAccount(@NonNull final RemoveAccountComma\n     public Bundle getRequestBundleForRemoveAccountFromSharedDevice(@NonNull final RemoveAccountCommandParameters parameters,\n                                                                    @Nullable final String negotiatedBrokerProtocolVersion) {\n         final Bundle requestBundle = new Bundle();\n-        requestBundle.putString(\n-                AuthenticationConstants.Broker.NEGOTIATED_BP_VERSION_KEY,\n-                negotiatedBrokerProtocolVersion\n+        requestBundle.putString(NEGOTIATED_BP_VERSION_KEY, negotiatedBrokerProtocolVersion);\n+\n+        return requestBundle;\n+    }\n+\n+    /**\n+     * Method to construct a request {@link Bundle} for broker generateShr", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwMTU2OQ=="}, "originalCommit": {"oid": "dcae65808d3c9827839d12a8d4cbe074d719ccdf"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjgwNzUxOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/result/GenerateShrResult.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNDoxNjoxMlrOHw9iOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMjoyMzo0NlrOHxgfMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwMTg4MA==", "bodyText": "could potentially use lombok's @Getter annotation in this class", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r521101880", "createdAt": "2020-11-11T04:16:12Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/result/GenerateShrResult.java", "diffHunk": "@@ -0,0 +1,117 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.result;\n+\n+import androidx.annotation.Nullable;\n+\n+import com.google.gson.annotations.SerializedName;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+\n+/**\n+ * The result of a generateShr request.\n+ */\n+public class GenerateShrResult {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcae65808d3c9827839d12a8d4cbe074d719ccdf"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2OTQyMw==", "bodyText": "Ah yep -- will do", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r521669423", "createdAt": "2020-11-11T22:12:17Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/result/GenerateShrResult.java", "diffHunk": "@@ -0,0 +1,117 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.result;\n+\n+import androidx.annotation.Nullable;\n+\n+import com.google.gson.annotations.SerializedName;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+\n+/**\n+ * The result of a generateShr request.\n+ */\n+public class GenerateShrResult {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwMTg4MA=="}, "originalCommit": {"oid": "dcae65808d3c9827839d12a8d4cbe074d719ccdf"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY3NDU0Nw==", "bodyText": "2e99e21", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r521674547", "createdAt": "2020-11-11T22:23:46Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/result/GenerateShrResult.java", "diffHunk": "@@ -0,0 +1,117 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.result;\n+\n+import androidx.annotation.Nullable;\n+\n+import com.google.gson.annotations.SerializedName;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+\n+/**\n+ * The result of a generateShr request.\n+ */\n+public class GenerateShrResult {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwMTg4MA=="}, "originalCommit": {"oid": "dcae65808d3c9827839d12a8d4cbe074d719ccdf"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjgwNzkwOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/result/MsalBrokerResultAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNDoxNjozMVrOHw9icw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMjoyODo1OFrOHxgntw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwMTkzOQ==", "bodyText": "seems to need formatting", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r521101939", "createdAt": "2020-11-11T04:16:31Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/result/MsalBrokerResultAdapter.java", "diffHunk": "@@ -628,4 +629,20 @@ public boolean getDeviceModeFromResultBundle(@NonNull final Bundle bundle) throw\n     public @NonNull ClientException getExceptionForEmptyResultBundle() {\n         return new ClientException(INVALID_BROKER_BUNDLE, \"Broker Result not returned from Broker.\");\n     }\n+\n+    /**\n+     * Deserializes the {@link GenerateShrResult} object from the broker response {@link Bundle}.\n+     * @param resultBundle The result Bundle produced by the broker.\n+     * @return The deserialized GenerateShrResult object containing the result (or corresponding\n+     * error).\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcae65808d3c9827839d12a8d4cbe074d719ccdf"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY3NjcyNw==", "bodyText": "9ad1ad6", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r521676727", "createdAt": "2020-11-11T22:28:58Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/result/MsalBrokerResultAdapter.java", "diffHunk": "@@ -628,4 +629,20 @@ public boolean getDeviceModeFromResultBundle(@NonNull final Bundle bundle) throw\n     public @NonNull ClientException getExceptionForEmptyResultBundle() {\n         return new ClientException(INVALID_BROKER_BUNDLE, \"Broker Result not returned from Broker.\");\n     }\n+\n+    /**\n+     * Deserializes the {@link GenerateShrResult} object from the broker response {@link Bundle}.\n+     * @param resultBundle The result Bundle produced by the broker.\n+     * @return The deserialized GenerateShrResult object containing the result (or corresponding\n+     * error).\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwMTkzOQ=="}, "originalCommit": {"oid": "dcae65808d3c9827839d12a8d4cbe074d719ccdf"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MDQzNTUxOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMjoxMDo1MFrOHxgIzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMjoxMDo1MFrOHxgIzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2ODgxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            // To support a shared communication model between the local flow and the\n          \n          \n            \n                            // To support a consistent communication model between the local flow and the", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r521668815", "createdAt": "2020-11-11T22:10:50Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "diffHunk": "@@ -0,0 +1,111 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.UiRequiredException;\n+import com.microsoft.identity.common.internal.commands.parameters.GenerateShrCommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BaseController;\n+import com.microsoft.identity.common.internal.result.GenerateShrResult;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.ErrorStrings.NO_ACCOUNT_FOUND;\n+\n+/**\n+ * Command class to perform generation of AT-less SHRs on behalf of a user.\n+ */\n+public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n+\n+    private static final String TAG = GenerateShrCommand.class.getSimpleName();\n+\n+    /**\n+     * Constructs a new GenerateShrCommand.\n+     *\n+     * @param parameters  The command's input parameters.\n+     * @param controllers The controllers on which to run this command.\n+     * @param callback    The command to notify once execution has completed.\n+     * @param publicApiId The public API ID of this command.\n+     */\n+    public GenerateShrCommand(@NonNull final GenerateShrCommandParameters parameters,\n+                              @NonNull final List<BaseController> controllers,\n+                              @NonNull final CommandCallback<GenerateShrResult, BaseException> callback,\n+                              @NonNull final String publicApiId) {\n+        super(parameters, controllers, callback, publicApiId);\n+    }\n+\n+    @Override\n+    public GenerateShrResult execute() throws Exception {\n+        final String methodName = \":execute\";\n+\n+        GenerateShrResult result = null;\n+        final GenerateShrCommandParameters parameters = (GenerateShrCommandParameters) getParameters();\n+\n+        // Iterate over our controllers, to service the request either locally or via the broker...\n+        // if the local (embedded) cache contains tokens for the supplied user, we will sign using\n+        // the embedded PoP keys. If no local user-state exists, the broker will be delegated to\n+        // where the same check is performed.\n+        BaseController controller;\n+        for (int ii = 0; ii < getControllers().size(); ii++) {\n+            controller = getControllers().get(ii);\n+\n+            com.microsoft.identity.common.internal.logging.Logger.verbose(\n+                    TAG + methodName,\n+                    \"Executing with controller: \"\n+                            + controller.getClass().getSimpleName()\n+            );\n+\n+            result = controller.generateSignedHttpRequest(parameters);\n+\n+            if (null != result.getErrorCode()) {\n+                final String errorCode = result.getErrorCode();\n+                final String errorMessage = result.getErrorMessage();\n+\n+                // To support a shared communication model between the local flow and the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcae65808d3c9827839d12a8d4cbe074d719ccdf"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MDU4MjM5OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMzowNToyMFrOHxhekA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMzozNzoyNVrOHxiWIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY5MDc2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public static final String AUTHSCHEME_PARAMS_POP = \"pop_parameters\";\n          \n          \n            \n                    public static final String AUTH_SCHEME_PARAMS_POP = \"pop_parameters\";", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r521690768", "createdAt": "2020-11-11T23:05:20Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java", "diffHunk": "@@ -1209,7 +1214,12 @@\n          * Time out for the AccountManager's remove account operation in broker.\n          */\n         public static final int ACCOUNT_MANAGER_REMOVE_ACCOUNT_TIMEOUT_IN_MILLISECONDS = 5000;\n-        \n+\n+        /**\n+         * The Bundle key name of serialized parameters for the PoP auth scheme.\n+         */\n+        public static final String AUTHSCHEME_PARAMS_POP = \"pop_parameters\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ad1ad613d45e16b2cc0cba623a2e74998f0dcf7"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTcwNDk5Mg==", "bodyText": "Applying this suggestion, but requires more changes than this -- so doing in\nf6b0601", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r521704992", "createdAt": "2020-11-11T23:37:25Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java", "diffHunk": "@@ -1209,7 +1214,12 @@\n          * Time out for the AccountManager's remove account operation in broker.\n          */\n         public static final int ACCOUNT_MANAGER_REMOVE_ACCOUNT_TIMEOUT_IN_MILLISECONDS = 5000;\n-        \n+\n+        /**\n+         * The Bundle key name of serialized parameters for the PoP auth scheme.\n+         */\n+        public static final String AUTHSCHEME_PARAMS_POP = \"pop_parameters\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY5MDc2OA=="}, "originalCommit": {"oid": "9ad1ad613d45e16b2cc0cba623a2e74998f0dcf7"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NTg5NTE5OnYy", "diffSide": "RIGHT", "path": "changelog.txt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDoyMjoyOVrOHyUW6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMjozMzo1OFrOHyXW3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyNDM5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - (Requires minimum_required_broker_protocol_version of 6.0+) Adds support for client_claims in PoP token requests.\n          \n          \n            \n            - (Requires minimum_required_broker_protocol_version of 6.0+) Adds support for generating SignedHttpRequests (SHRs) without embedding an AT.\n          \n          \n            \n            - Bumped MSAL Broker Protocol version to 6.0\n          \n          \n            \n            - (Requires minimum_required_broker_protocol_version of 6.0+) Adds support for client_claims in PoP token requests.\n          \n          \n            \n            - (Requires minimum_required_broker_protocol_version of 6.0+) Adds support for generating SignedHttpRequests (SHRs) without embedding an AT.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r522524392", "createdAt": "2020-11-13T00:22:29Z", "author": {"login": "shahzaibj"}, "path": "changelog.txt", "diffHunk": "@@ -21,6 +21,8 @@ Version 3.0.6\n     - [Part 5.5] make changes to support the Broker API work (#1101)\n - Make change to support Broker API's updateBrokerRT() functionality (#1107).\n - Introduce a cache for Hello() protocol (#1108)\n+- (Requires minimum_required_broker_protocol_version of 6.0+) Adds support for client_claims in PoP token requests.\n+- (Requires minimum_required_broker_protocol_version of 6.0+) Adds support for generating SignedHttpRequests (SHRs) without embedding an AT.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6b06016dcda4d5a0cfbbadaac7af301adc584ec"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU3MzUzMg==", "bodyText": "I'll take it!", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r522573532", "createdAt": "2020-11-13T02:33:58Z", "author": {"login": "iambmelt"}, "path": "changelog.txt", "diffHunk": "@@ -21,6 +21,8 @@ Version 3.0.6\n     - [Part 5.5] make changes to support the Broker API work (#1101)\n - Make change to support Broker API's updateBrokerRT() functionality (#1107).\n - Introduce a cache for Hello() protocol (#1108)\n+- (Requires minimum_required_broker_protocol_version of 6.0+) Adds support for client_claims in PoP token requests.\n+- (Requires minimum_required_broker_protocol_version of 6.0+) Adds support for generating SignedHttpRequests (SHRs) without embedding an AT.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyNDM5Mg=="}, "originalCommit": {"oid": "f6b06016dcda4d5a0cfbbadaac7af301adc584ec"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2067, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}