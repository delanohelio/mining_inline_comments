{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2MDE2NzY2", "number": 1177, "title": "Add PRT storage support for MSAL-CPP", "bodyText": "Add PRT storage support for MSAL-CPP.\nDraft PR: AzureAD/microsoft-authentication-library-for-cpp#1836\nStorageAdapter.java and StorageManager.java", "createdAt": "2020-12-28T09:38:38Z", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177", "merged": true, "mergeCommit": {"oid": "19ad5f8d1fb2e2672773a26335757307e10893a0"}, "closed": true, "closedAt": "2021-02-18T02:37:19Z", "author": {"login": "richard1122"}, "timelineItems": {"totalCount": 53, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdqi5l8ABqjQxNTE1MzYxMjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd7LsRogFqTU5Mjc5NDY1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f5f80907da174060a395f1c0475a1ae5be9b6405", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/f5f80907da174060a395f1c0475a1ae5be9b6405", "committedDate": "2020-12-28T09:40:26Z", "message": "Update changelog.txt"}, "afterCommit": {"oid": "dadacfccebc12a96f4ee6e6007eef1c252915207", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/dadacfccebc12a96f4ee6e6007eef1c252915207", "committedDate": "2020-12-28T09:41:24Z", "message": "Update changelog.txt"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dadacfccebc12a96f4ee6e6007eef1c252915207", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/dadacfccebc12a96f4ee6e6007eef1c252915207", "committedDate": "2020-12-28T09:41:24Z", "message": "Update changelog.txt"}, "afterCommit": {"oid": "615fdb829d260c124955129e31a85064cd09f7bd", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/615fdb829d260c124955129e31a85064cd09f7bd", "committedDate": "2020-12-28T13:39:31Z", "message": "Add PRT storage support"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "615fdb829d260c124955129e31a85064cd09f7bd", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/615fdb829d260c124955129e31a85064cd09f7bd", "committedDate": "2020-12-28T13:39:31Z", "message": "Add PRT storage support"}, "afterCommit": {"oid": "7b6d670601520f3901118a84aef725916b939a2e", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/7b6d670601520f3901118a84aef725916b939a2e", "committedDate": "2021-01-06T05:13:42Z", "message": "Update changelog.txt"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyOTQ1NjU5", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#pullrequestreview-562945659", "createdAt": "2021-01-06T18:30:38Z", "commit": {"oid": "7b6d670601520f3901118a84aef725916b939a2e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODozMDozOFrOIPRvAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODozMDozOFrOIPRvAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5MDExMg==", "bodyText": "At a glance, this doesn't look correct.... IIRC RefreshToken credential types set \"\" as the realm, my suspicion is that PRTs should be cached according to the same rules. This should be confirmed with the iOS team for consistency", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r552890112", "createdAt": "2021-01-06T18:30:38Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "diffHunk": "@@ -183,6 +185,10 @@ public String generateCacheKey(Credential credential) {\n             final IdTokenRecord idToken = (IdTokenRecord) credential;\n             cacheKey = cacheKey.replace(REALM, sanitizeNull(idToken.getRealm()));\n             cacheKey = cacheKey.replace(TARGET, \"\");\n+        } else if (credential instanceof PrimaryRefreshTokenRecord) {\n+            final PrimaryRefreshTokenRecord primaryRefreshTokenRecord = (PrimaryRefreshTokenRecord) credential;\n+            cacheKey = cacheKey.replace(REALM, sanitizeNull(primaryRefreshTokenRecord.getRealm()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b6d670601520f3901118a84aef725916b939a2e"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyOTUwNzk4", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#pullrequestreview-562950798", "createdAt": "2021-01-06T18:38:16Z", "commit": {"oid": "7b6d670601520f3901118a84aef725916b939a2e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODozODoxNlrOIPR-Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODozODoxNlrOIPR-Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5Mzk2Mw==", "bodyText": "nit: the format, as I understand it, will be something like \"3.0\", not \"V3\"", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r552893963", "createdAt": "2021-01-06T18:38:16Z", "author": {"login": "iambmelt"}, "path": "common/src/androidTest/java/com/microsoft/identity/common/MsalOAuth2TokenCacheTest.java", "diffHunk": "@@ -190,6 +195,20 @@\n             mGeneratedIdToken.setClientId(clientId);\n             mGeneratedIdToken.setSecret(idTokenSecret);\n             mGeneratedIdToken.setAuthority(\"https://sts.windows.net/0287f963-2d72-4363-9e3a-5705c5b0f031/\");\n+\n+            mGeneratedPrimaryRefreshToken = new PrimaryRefreshTokenRecord();\n+            mGeneratedPrimaryRefreshToken.setSecret(rtSecret);\n+            mGeneratedPrimaryRefreshToken.setTarget(target);\n+            mGeneratedPrimaryRefreshToken.setHomeAccountId(homeAccountId);\n+            mGeneratedPrimaryRefreshToken.setEnvironment(environment);\n+            mGeneratedPrimaryRefreshToken.setCredentialType(PrimaryRefreshToken.name());\n+            mGeneratedPrimaryRefreshToken.setClientId(clientId);\n+            mGeneratedPrimaryRefreshToken.setFamilyId(familyId);\n+            mGeneratedPrimaryRefreshToken.setRealm(realm);\n+            mGeneratedPrimaryRefreshToken.setExpiresOn(expiresOn);\n+            mGeneratedPrimaryRefreshToken.setCachedAt(cacheAt);\n+            mGeneratedPrimaryRefreshToken.setSessionKey(prtSessionKey);\n+            mGeneratedPrimaryRefreshToken.setPrtProtocolVersion(\"V3\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b6d670601520f3901118a84aef725916b939a2e"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyOTUxMzEx", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#pullrequestreview-562951311", "createdAt": "2021-01-06T18:39:07Z", "commit": {"oid": "7b6d670601520f3901118a84aef725916b939a2e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODozOTowN1rOIPR_mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODozOTowN1rOIPR_mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5NDM2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            }else {\n          \n          \n            \n                            } else {", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r552894360", "createdAt": "2021-01-06T18:39:07Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/SharedPreferencesAccountCredentialCache.java", "diffHunk": "@@ -430,7 +430,10 @@ public static CredentialType getCredentialTypeForCredentialCacheKey(@NonNull fin\n                 } else if (CredentialType.V1IdToken.name().equalsIgnoreCase(credentialTypeStr)) {\n                     type = CredentialType.V1IdToken;\n                     break;\n-                } else {\n+                } else if (CredentialType.PrimaryRefreshToken.name().equalsIgnoreCase(credentialTypeStr)) {\n+                    type = CredentialType.PrimaryRefreshToken;\n+                    break;\n+                }else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b6d670601520f3901118a84aef725916b939a2e"}, "originalPosition": 8}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ce7ed4cbf3c858c1060fc04bd704ea9256809f9c", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/ce7ed4cbf3c858c1060fc04bd704ea9256809f9c", "committedDate": "2021-01-07T01:54:32Z", "message": "Update common/src/main/java/com/microsoft/identity/common/internal/cache/SharedPreferencesAccountCredentialCache.java\n\nCo-authored-by: Brian Melton-Grace <brianmel@microsoft.com>"}, "afterCommit": {"oid": "7306af07e96b9d2aae1f37a90659c16fc72cd401", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/7306af07e96b9d2aae1f37a90659c16fc72cd401", "committedDate": "2021-01-20T09:44:46Z", "message": "Update version, tweak"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "87d0a9db17b4e29e3d6ee4ac3b0ba3cba1c4290e", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/87d0a9db17b4e29e3d6ee4ac3b0ba3cba1c4290e", "committedDate": "2021-01-21T06:07:29Z", "message": "Add PRT cache key tests"}, "afterCommit": {"oid": "3fd76bb2c3c0a90371da53e62fa3dd9023a92670", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/3fd76bb2c3c0a90371da53e62fa3dd9023a92670", "committedDate": "2021-01-21T06:10:17Z", "message": "Add PRT cache key tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczMDIyMTY2", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#pullrequestreview-573022166", "createdAt": "2021-01-21T06:42:00Z", "commit": {"oid": "3fd76bb2c3c0a90371da53e62fa3dd9023a92670"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwNjo0MjowMFrOIXnfMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwNjo0MjowMFrOIXnfMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTYzNTEyMQ==", "bodyText": "Hi @jbzdarkid, could you help review this?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r561635121", "createdAt": "2021-01-21T06:42:00Z", "author": {"login": "richard1122"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/WebViewAuthorizationFragment.java", "diffHunk": "@@ -139,14 +140,11 @@ public void onPageLoaded() {\n                         // Inject the javascript string from testing. This should only be evaluated if we haven't sent\n                         // an auth result already.\n                         if (mAuthResultSent == false && !StringExtensions.isNullOrBlank(mPostPageLoadedJavascript)) {\n-                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n-                                mWebView.evaluateJavascript(mPostPageLoadedJavascript, null);\n-                            } else {\n-                                // On earlier versions of Android, javascript has to be loaded with a custom scheme.\n-                                // In these cases, Android will helpfully unescape any octects it finds. Unfortunately,\n-                                // our javascript may contain the '%' character, so we escape it again, to undo that.\n-                                mWebView.loadUrl(\"javascript:\" + mPostPageLoadedJavascript.replace(\"%\", \"%25\"));\n-                            }\n+                            // TODO: #1268511 use EvaluteJavascript after tests are stable.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fd76bb2c3c0a90371da53e62fa3dd9023a92670"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczMDIyOTI3", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#pullrequestreview-573022927", "createdAt": "2021-01-21T06:43:52Z", "commit": {"oid": "3fd76bb2c3c0a90371da53e62fa3dd9023a92670"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwNjo0Mzo1MlrOIXnhcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwNjo0Mzo1MlrOIXnhcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTYzNTY5OA==", "bodyText": "Hi @oldalton, this is cache key for PRT.\nNow it only constructed from HOME_ACCOUNT_ID, ENVIRONMENT and CREDENTIAL_TYPE.\nTests add primaryRefreshTokenCacheKeyComplete", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r561635698", "createdAt": "2021-01-21T06:43:52Z", "author": {"login": "richard1122"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "diffHunk": "@@ -163,6 +164,8 @@ public String generateCacheKey(Credential credential) {\n             }\n \n             cacheKey = cacheKey.replace(CLIENT_ID, familyIdForCacheKey);\n+        } else if (credential instanceof PrimaryRefreshTokenRecord) {\n+            cacheKey = cacheKey.replace(CLIENT_ID, \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fd76bb2c3c0a90371da53e62fa3dd9023a92670"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0Njg4MDkx", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#pullrequestreview-574688091", "createdAt": "2021-01-22T23:14:31Z", "commit": {"oid": "06913bcd582bd5147bb724836af056ec8aecb3cb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQyMzoxNDozMVrOIY4uWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQyMzoxNDozMVrOIY4uWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk2NjEwNQ==", "bodyText": "I don't understand this. Why is this value being set to \"\"? Can you point me towards where this is outlined in the schema spec?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r562966105", "createdAt": "2021-01-22T23:14:31Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "diffHunk": "@@ -192,6 +196,9 @@ public String generateCacheKey(Credential credential) {\n             final IdTokenRecord idToken = (IdTokenRecord) credential;\n             cacheKey = cacheKey.replace(REALM, sanitizeNull(idToken.getRealm()));\n             cacheKey = cacheKey.replace(TARGET, \"\");\n+        } else if (credential instanceof PrimaryRefreshTokenRecord) {\n+            cacheKey = cacheKey.replace(REALM, \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06913bcd582bd5147bb724836af056ec8aecb3cb"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0Njg4MTY1", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#pullrequestreview-574688165", "createdAt": "2021-01-22T23:14:44Z", "commit": {"oid": "06913bcd582bd5147bb724836af056ec8aecb3cb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQyMzoxNDo0NFrOIY4ulA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQyMzoxNDo0NFrOIY4ulA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk2NjE2NA==", "bodyText": "Same here.... I don't understand this. Why is this value being set to \"\"? Can you point me towards where this is outlined in the schema spec?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r562966164", "createdAt": "2021-01-22T23:14:44Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "diffHunk": "@@ -192,6 +196,9 @@ public String generateCacheKey(Credential credential) {\n             final IdTokenRecord idToken = (IdTokenRecord) credential;\n             cacheKey = cacheKey.replace(REALM, sanitizeNull(idToken.getRealm()));\n             cacheKey = cacheKey.replace(TARGET, \"\");\n+        } else if (credential instanceof PrimaryRefreshTokenRecord) {\n+            cacheKey = cacheKey.replace(REALM, \"\");\n+            cacheKey = cacheKey.replace(TARGET, \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06913bcd582bd5147bb724836af056ec8aecb3cb"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0Njg4NjM1", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#pullrequestreview-574688635", "createdAt": "2021-01-22T23:16:11Z", "commit": {"oid": "06913bcd582bd5147bb724836af056ec8aecb3cb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQyMzoxNjoxMlrOIY4wcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQyMzoxNjoxMlrOIY4wcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk2NjY0MA==", "bodyText": "What is meant here by \"reversed\"? This naming unclear to me", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r562966640", "createdAt": "2021-01-22T23:16:12Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "diffHunk": "@@ -72,6 +73,7 @@\n      */\n     public static final String CACHE_VALUE_SEPARATOR = \"-\";\n     private static final String FOCI_PREFIX = \"foci-\";\n+    private static final String REVERSED_PRT_CLIENT_ID = \"1\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06913bcd582bd5147bb724836af056ec8aecb3cb"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc1OTMzNTM0", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#pullrequestreview-575933534", "createdAt": "2021-01-26T01:17:43Z", "commit": {"oid": "47c6a5746e68b3d1cb366e3d001e67e83c55f23b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQwMToxNzo0M1rOIaA7uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQwMToxNzo0M1rOIaA7uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDE0OTE3Nw==", "bodyText": "Could we instead move this logic 'up' such that its more like\nfinal boolean mustMatchOnClientId = !StringExtensions.isNullOrBlank(clientId) && !(credential instanceof PrimaryRefreshTokenRecord) ;", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r564149177", "createdAt": "2021-01-26T01:17:43Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/AbstractAccountCredentialCache.java", "diffHunk": "@@ -176,7 +180,7 @@\n                 matches = matches && equalsIgnoreCaseTrim(credentialType.name(), credential.getCredentialType());\n             }\n \n-            if (mustMatchOnClientId) {\n+            if (mustMatchOnClientId && !(credential instanceof PrimaryRefreshTokenRecord)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47c6a5746e68b3d1cb366e3d001e67e83c55f23b"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc1OTQwNDE5", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#pullrequestreview-575940419", "createdAt": "2021-01-26T01:27:40Z", "commit": {"oid": "47c6a5746e68b3d1cb366e3d001e67e83c55f23b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQwMToyNzo0MFrOIaBPaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQwMToyNzo0MFrOIaBPaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDE1NDIxOQ==", "bodyText": "This now appears unused... do we need a property to track the realm? If not, can this be removed?\nIt would be great to understand whether the PRT needs to be associated with a realm\n\nFundamentally, it has a realm component of its cache key, but its always \"\" -- can we safely assume we will never need to lookup a PRT by realm?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r564154219", "createdAt": "2021-01-26T01:27:40Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,256 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+        /**\n+         * String of realm.\n+         */\n+        public static final String REALM = \"realm\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47c6a5746e68b3d1cb366e3d001e67e83c55f23b"}, "originalPosition": 43}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b4f6b781a412d25cb81d6750d4930cee7f606067", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/b4f6b781a412d25cb81d6750d4930cee7f606067", "committedDate": "2021-01-26T02:39:39Z", "message": "Move mustMatchOnClientId logic"}, "afterCommit": {"oid": "f71dd1edf124d7fe840a0f1ec2634905ea203321", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/f71dd1edf124d7fe840a0f1ec2634905ea203321", "committedDate": "2021-01-26T02:42:59Z", "message": "Delete REALM from PRT record"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc2ODI4Mjk4", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#pullrequestreview-576828298", "createdAt": "2021-01-26T22:48:53Z", "commit": {"oid": "fff151f2090532efcca75f0deeec220ac9426eaa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMjo0ODo1M1rOIauBRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMjo0ODo1M1rOIauBRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg4Nzg3OQ==", "bodyText": "Can this be a value class? We'd (potentially) have to write an InstanceCreator, but we wouldn't need to worry about those setter methods, nor about making sure anything using it was properly synchronized w.r.t. creation.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r564887879", "createdAt": "2021-01-26T22:48:53Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,252 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+public class PrimaryRefreshTokenRecord extends Credential {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fff151f2090532efcca75f0deeec220ac9426eaa"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc2ODM4MDg3", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#pullrequestreview-576838087", "createdAt": "2021-01-26T22:59:28Z", "commit": {"oid": "fff151f2090532efcca75f0deeec220ac9426eaa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMjo1OToyOFrOIauVuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMjo1OToyOFrOIauVuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg5MzExMg==", "bodyText": "Extra lines", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r564893112", "createdAt": "2021-01-26T22:59:28Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,252 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+\n+        /**\n+         * String of session_key.\n+         */\n+        public static final String SESSION_KEY = \"session_key\";\n+\n+        /**\n+         * String of session_key_rolling_date.\n+         */\n+        public static final String SESSION_KEY_ROLLING_DATE = \"session_key_rolling_date\";\n+\n+        /**\n+         * String of prt_protocol_version.\n+         */\n+        public static final String PRT_PROTOCOL_VERSION = \"prt_protocol_version\";\n+    }\n+\n+    /**\n+     * 1st Party Application Family ID.\n+     */\n+    @SerializedName(FAMILY_ID)\n+    private String mFamilyId;\n+\n+    /**\n+     * PRT expiry time.\u202fThis value is returned from the server as refresh_token_expires_in that\n+     * should be added to local time.\n+     */\n+    @SerializedName(EXPIRES_ON)\n+    private String mExpiresOn;\n+\n+    /**\n+     * Session key of PRT.\n+     */\n+    @SerializedName(SESSION_KEY)\n+    private String mSessionKey;\n+\n+    /**\n+     * The version of the PRT Protocol being used, version 3 supports no device_id.\n+     */\n+    @SerializedName(PRT_PROTOCOL_VERSION)\n+    private String mPrtProtocolVersion;\n+\n+    /**\n+     * Session key expiry time.\u202fThis value is determined by the client and set to 60 days after the\n+     * session key was initally issued\n+     */\n+    @SerializedName(SESSION_KEY_ROLLING_DATE)\n+    private String mSessionKeyRollingDate;\n+\n+    /**\n+     * Gets the family_id.\n+     *\n+     * @return The family_id to get.\n+     */\n+    public String getFamilyId() {\n+        return mFamilyId;\n+    }\n+\n+    /**\n+     * Sets the family_id.\n+     *\n+     * @param familyId The family_id to set.\n+     */\n+    public void setFamilyId(final String familyId) {\n+        mFamilyId = familyId;\n+    }\n+\n+    public boolean isExpired(final String expires) {\n+        // Init a Calendar for the current time/date\n+        final Calendar calendar = Calendar.getInstance();\n+        final Date validity = calendar.getTime();\n+        // Init a Date for the accessToken's expiry\n+        long epoch = Long.valueOf(expires);\n+        final Date expiresOn = new Date(\n+                TimeUnit.SECONDS.toMillis(epoch)\n+        );\n+        return expiresOn.before(validity);\n+    }\n+\n+    @Override\n+    public boolean isExpired() {\n+        return isExpired(getExpiresOn());\n+    }\n+\n+    /**\n+     * Gets the expires_on.\n+     * @return The expires_on to get.\n+     */\n+    public String getExpiresOn() {\n+        return mExpiresOn;\n+    }\n+\n+    /**\n+     * Sets the expires_on.\n+     * @param expiresOn The expires_on to set.\n+     */\n+    public void setExpiresOn(String expiresOn) {\n+        mExpiresOn = expiresOn;\n+    }\n+\n+    /**\n+     * Gets the session_key.\n+     * @return The session_key to get.\n+     */\n+    public String getSessionKey() {\n+        return mSessionKey;\n+    }\n+\n+    /**\n+     * Sets the session_key.\n+     *\n+     * @param sessionKey The session_key to set.\n+     */\n+    public void setSessionKey(String sessionKey) {\n+        mSessionKey = sessionKey;\n+    }\n+\n+    /**\n+     * Gets the prt_protocol_version.\n+     *\n+     * @return The prt_protocol_version to get.\n+     */\n+    public String getPrtProtocolVersion() {\n+        return mPrtProtocolVersion;\n+    }\n+\n+    /**\n+     * Sets the prt_protocol_version.\n+     *\n+     * @param prtProtocolVersion The prt_protocol_version to set.\n+     */\n+    public void setPrtProtocolVersion(String prtProtocolVersion) {\n+        mPrtProtocolVersion = prtProtocolVersion;\n+    }\n+\n+    /**\n+     * Gets the session_key_rolling_date.\n+     *\n+     * @return The session_key_rolling_date to get.\n+     */\n+    public String getSessionKeyRollingDate() {\n+        return mSessionKeyRollingDate;\n+    }\n+\n+    /**\n+     * Sets the session_key_rolling_date.\n+     * @param sessionKeyRollingDate The session_key_rolling_date to set.\n+     */\n+    public void setSessionKeyRollingDate(String sessionKeyRollingDate) {\n+        mSessionKeyRollingDate = sessionKeyRollingDate;\n+    }\n+\n+    //CHECKSTYLE:OFF\n+    // This method is generated. Checkstyle and/or PMD has been disabled.\n+    // This method *must* be regenerated if the class' structural definition changes through the\n+    // addition/subtraction of fields.\n+    @SuppressWarnings(\"PMD\")\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        if (!super.equals(o)) return false;\n+\n+        PrimaryRefreshTokenRecord that = (PrimaryRefreshTokenRecord) o;\n+\n+        if (mFamilyId != null ? !mFamilyId.equals(that.mFamilyId) : that.mFamilyId != null)\n+            return false;\n+        if (mExpiresOn != null ? !mExpiresOn.equals(that.mExpiresOn) : that.mExpiresOn != null)\n+            return false;\n+        if (mSessionKey != null ? !mSessionKey.equals(that.mSessionKey) : that.mSessionKey != null)\n+            return false;\n+        if (mPrtProtocolVersion != null ? !mPrtProtocolVersion.equals(that.mPrtProtocolVersion) : that.mPrtProtocolVersion != null)\n+            return false;\n+        return mSessionKeyRollingDate != null ? mSessionKeyRollingDate.equals(that.mSessionKeyRollingDate) : that.mSessionKeyRollingDate == null;\n+    }\n+    //CHECKSTYLE:ON\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fff151f2090532efcca75f0deeec220ac9426eaa"}, "originalPosition": 217}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc2ODM5NjA4", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#pullrequestreview-576839608", "createdAt": "2021-01-26T23:02:12Z", "commit": {"oid": "fff151f2090532efcca75f0deeec220ac9426eaa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMzowMjoxM1rOIauiAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMzowMjoxM1rOIauiAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg5NjI1Nw==", "bodyText": "Can we just pick these up with @EqualsAndHashCode?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r564896257", "createdAt": "2021-01-26T23:02:13Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,252 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+\n+        /**\n+         * String of session_key.\n+         */\n+        public static final String SESSION_KEY = \"session_key\";\n+\n+        /**\n+         * String of session_key_rolling_date.\n+         */\n+        public static final String SESSION_KEY_ROLLING_DATE = \"session_key_rolling_date\";\n+\n+        /**\n+         * String of prt_protocol_version.\n+         */\n+        public static final String PRT_PROTOCOL_VERSION = \"prt_protocol_version\";\n+    }\n+\n+    /**\n+     * 1st Party Application Family ID.\n+     */\n+    @SerializedName(FAMILY_ID)\n+    private String mFamilyId;\n+\n+    /**\n+     * PRT expiry time.\u202fThis value is returned from the server as refresh_token_expires_in that\n+     * should be added to local time.\n+     */\n+    @SerializedName(EXPIRES_ON)\n+    private String mExpiresOn;\n+\n+    /**\n+     * Session key of PRT.\n+     */\n+    @SerializedName(SESSION_KEY)\n+    private String mSessionKey;\n+\n+    /**\n+     * The version of the PRT Protocol being used, version 3 supports no device_id.\n+     */\n+    @SerializedName(PRT_PROTOCOL_VERSION)\n+    private String mPrtProtocolVersion;\n+\n+    /**\n+     * Session key expiry time.\u202fThis value is determined by the client and set to 60 days after the\n+     * session key was initally issued\n+     */\n+    @SerializedName(SESSION_KEY_ROLLING_DATE)\n+    private String mSessionKeyRollingDate;\n+\n+    /**\n+     * Gets the family_id.\n+     *\n+     * @return The family_id to get.\n+     */\n+    public String getFamilyId() {\n+        return mFamilyId;\n+    }\n+\n+    /**\n+     * Sets the family_id.\n+     *\n+     * @param familyId The family_id to set.\n+     */\n+    public void setFamilyId(final String familyId) {\n+        mFamilyId = familyId;\n+    }\n+\n+    public boolean isExpired(final String expires) {\n+        // Init a Calendar for the current time/date\n+        final Calendar calendar = Calendar.getInstance();\n+        final Date validity = calendar.getTime();\n+        // Init a Date for the accessToken's expiry\n+        long epoch = Long.valueOf(expires);\n+        final Date expiresOn = new Date(\n+                TimeUnit.SECONDS.toMillis(epoch)\n+        );\n+        return expiresOn.before(validity);\n+    }\n+\n+    @Override\n+    public boolean isExpired() {\n+        return isExpired(getExpiresOn());\n+    }\n+\n+    /**\n+     * Gets the expires_on.\n+     * @return The expires_on to get.\n+     */\n+    public String getExpiresOn() {\n+        return mExpiresOn;\n+    }\n+\n+    /**\n+     * Sets the expires_on.\n+     * @param expiresOn The expires_on to set.\n+     */\n+    public void setExpiresOn(String expiresOn) {\n+        mExpiresOn = expiresOn;\n+    }\n+\n+    /**\n+     * Gets the session_key.\n+     * @return The session_key to get.\n+     */\n+    public String getSessionKey() {\n+        return mSessionKey;\n+    }\n+\n+    /**\n+     * Sets the session_key.\n+     *\n+     * @param sessionKey The session_key to set.\n+     */\n+    public void setSessionKey(String sessionKey) {\n+        mSessionKey = sessionKey;\n+    }\n+\n+    /**\n+     * Gets the prt_protocol_version.\n+     *\n+     * @return The prt_protocol_version to get.\n+     */\n+    public String getPrtProtocolVersion() {\n+        return mPrtProtocolVersion;\n+    }\n+\n+    /**\n+     * Sets the prt_protocol_version.\n+     *\n+     * @param prtProtocolVersion The prt_protocol_version to set.\n+     */\n+    public void setPrtProtocolVersion(String prtProtocolVersion) {\n+        mPrtProtocolVersion = prtProtocolVersion;\n+    }\n+\n+    /**\n+     * Gets the session_key_rolling_date.\n+     *\n+     * @return The session_key_rolling_date to get.\n+     */\n+    public String getSessionKeyRollingDate() {\n+        return mSessionKeyRollingDate;\n+    }\n+\n+    /**\n+     * Sets the session_key_rolling_date.\n+     * @param sessionKeyRollingDate The session_key_rolling_date to set.\n+     */\n+    public void setSessionKeyRollingDate(String sessionKeyRollingDate) {\n+        mSessionKeyRollingDate = sessionKeyRollingDate;\n+    }\n+\n+    //CHECKSTYLE:OFF\n+    // This method is generated. Checkstyle and/or PMD has been disabled.\n+    // This method *must* be regenerated if the class' structural definition changes through the\n+    // addition/subtraction of fields.\n+    @SuppressWarnings(\"PMD\")\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        if (!super.equals(o)) return false;\n+\n+        PrimaryRefreshTokenRecord that = (PrimaryRefreshTokenRecord) o;\n+\n+        if (mFamilyId != null ? !mFamilyId.equals(that.mFamilyId) : that.mFamilyId != null)\n+            return false;\n+        if (mExpiresOn != null ? !mExpiresOn.equals(that.mExpiresOn) : that.mExpiresOn != null)\n+            return false;\n+        if (mSessionKey != null ? !mSessionKey.equals(that.mSessionKey) : that.mSessionKey != null)\n+            return false;\n+        if (mPrtProtocolVersion != null ? !mPrtProtocolVersion.equals(that.mPrtProtocolVersion) : that.mPrtProtocolVersion != null)\n+            return false;\n+        return mSessionKeyRollingDate != null ? mSessionKeyRollingDate.equals(that.mSessionKeyRollingDate) : that.mSessionKeyRollingDate == null;\n+    }\n+    //CHECKSTYLE:ON", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fff151f2090532efcca75f0deeec220ac9426eaa"}, "originalPosition": 215}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc2ODQxMDY4", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#pullrequestreview-576841068", "createdAt": "2021-01-26T23:04:56Z", "commit": {"oid": "fff151f2090532efcca75f0deeec220ac9426eaa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMzowNDo1NlrOIausVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMzowNDo1NlrOIausVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg5ODkwMA==", "bodyText": "Could this just be Long.valueOf(expires) * 1000 <  System.currentTimeMillis?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r564898900", "createdAt": "2021-01-26T23:04:56Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,252 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+\n+        /**\n+         * String of session_key.\n+         */\n+        public static final String SESSION_KEY = \"session_key\";\n+\n+        /**\n+         * String of session_key_rolling_date.\n+         */\n+        public static final String SESSION_KEY_ROLLING_DATE = \"session_key_rolling_date\";\n+\n+        /**\n+         * String of prt_protocol_version.\n+         */\n+        public static final String PRT_PROTOCOL_VERSION = \"prt_protocol_version\";\n+    }\n+\n+    /**\n+     * 1st Party Application Family ID.\n+     */\n+    @SerializedName(FAMILY_ID)\n+    private String mFamilyId;\n+\n+    /**\n+     * PRT expiry time.\u202fThis value is returned from the server as refresh_token_expires_in that\n+     * should be added to local time.\n+     */\n+    @SerializedName(EXPIRES_ON)\n+    private String mExpiresOn;\n+\n+    /**\n+     * Session key of PRT.\n+     */\n+    @SerializedName(SESSION_KEY)\n+    private String mSessionKey;\n+\n+    /**\n+     * The version of the PRT Protocol being used, version 3 supports no device_id.\n+     */\n+    @SerializedName(PRT_PROTOCOL_VERSION)\n+    private String mPrtProtocolVersion;\n+\n+    /**\n+     * Session key expiry time.\u202fThis value is determined by the client and set to 60 days after the\n+     * session key was initally issued\n+     */\n+    @SerializedName(SESSION_KEY_ROLLING_DATE)\n+    private String mSessionKeyRollingDate;\n+\n+    /**\n+     * Gets the family_id.\n+     *\n+     * @return The family_id to get.\n+     */\n+    public String getFamilyId() {\n+        return mFamilyId;\n+    }\n+\n+    /**\n+     * Sets the family_id.\n+     *\n+     * @param familyId The family_id to set.\n+     */\n+    public void setFamilyId(final String familyId) {\n+        mFamilyId = familyId;\n+    }\n+\n+    public boolean isExpired(final String expires) {\n+        // Init a Calendar for the current time/date\n+        final Calendar calendar = Calendar.getInstance();\n+        final Date validity = calendar.getTime();\n+        // Init a Date for the accessToken's expiry\n+        long epoch = Long.valueOf(expires);\n+        final Date expiresOn = new Date(\n+                TimeUnit.SECONDS.toMillis(epoch)\n+        );\n+        return expiresOn.before(validity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fff151f2090532efcca75f0deeec220ac9426eaa"}, "originalPosition": 116}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc2ODQxOTMz", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#pullrequestreview-576841933", "createdAt": "2021-01-26T23:06:31Z", "commit": {"oid": "fff151f2090532efcca75f0deeec220ac9426eaa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMzowNjozMVrOIauvQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMzowNjozMVrOIauvQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg5OTY0OQ==", "bodyText": "can we put the units in the name of this argument?  expirationTimeEpochSeconds?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r564899649", "createdAt": "2021-01-26T23:06:31Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,252 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+\n+        /**\n+         * String of session_key.\n+         */\n+        public static final String SESSION_KEY = \"session_key\";\n+\n+        /**\n+         * String of session_key_rolling_date.\n+         */\n+        public static final String SESSION_KEY_ROLLING_DATE = \"session_key_rolling_date\";\n+\n+        /**\n+         * String of prt_protocol_version.\n+         */\n+        public static final String PRT_PROTOCOL_VERSION = \"prt_protocol_version\";\n+    }\n+\n+    /**\n+     * 1st Party Application Family ID.\n+     */\n+    @SerializedName(FAMILY_ID)\n+    private String mFamilyId;\n+\n+    /**\n+     * PRT expiry time.\u202fThis value is returned from the server as refresh_token_expires_in that\n+     * should be added to local time.\n+     */\n+    @SerializedName(EXPIRES_ON)\n+    private String mExpiresOn;\n+\n+    /**\n+     * Session key of PRT.\n+     */\n+    @SerializedName(SESSION_KEY)\n+    private String mSessionKey;\n+\n+    /**\n+     * The version of the PRT Protocol being used, version 3 supports no device_id.\n+     */\n+    @SerializedName(PRT_PROTOCOL_VERSION)\n+    private String mPrtProtocolVersion;\n+\n+    /**\n+     * Session key expiry time.\u202fThis value is determined by the client and set to 60 days after the\n+     * session key was initally issued\n+     */\n+    @SerializedName(SESSION_KEY_ROLLING_DATE)\n+    private String mSessionKeyRollingDate;\n+\n+    /**\n+     * Gets the family_id.\n+     *\n+     * @return The family_id to get.\n+     */\n+    public String getFamilyId() {\n+        return mFamilyId;\n+    }\n+\n+    /**\n+     * Sets the family_id.\n+     *\n+     * @param familyId The family_id to set.\n+     */\n+    public void setFamilyId(final String familyId) {\n+        mFamilyId = familyId;\n+    }\n+\n+    public boolean isExpired(final String expires) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fff151f2090532efcca75f0deeec220ac9426eaa"}, "originalPosition": 107}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc2ODQ0MDMw", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#pullrequestreview-576844030", "createdAt": "2021-01-26T23:10:33Z", "commit": {"oid": "fff151f2090532efcca75f0deeec220ac9426eaa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMzoxMDozM1rOIau2Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMzoxMDozM1rOIau2Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDkwMTQ0Mw==", "bodyText": "Can we put the units in the parameter name, since I think this is epoch seconds.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r564901443", "createdAt": "2021-01-26T23:10:33Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,252 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+\n+        /**\n+         * String of session_key.\n+         */\n+        public static final String SESSION_KEY = \"session_key\";\n+\n+        /**\n+         * String of session_key_rolling_date.\n+         */\n+        public static final String SESSION_KEY_ROLLING_DATE = \"session_key_rolling_date\";\n+\n+        /**\n+         * String of prt_protocol_version.\n+         */\n+        public static final String PRT_PROTOCOL_VERSION = \"prt_protocol_version\";\n+    }\n+\n+    /**\n+     * 1st Party Application Family ID.\n+     */\n+    @SerializedName(FAMILY_ID)\n+    private String mFamilyId;\n+\n+    /**\n+     * PRT expiry time.\u202fThis value is returned from the server as refresh_token_expires_in that\n+     * should be added to local time.\n+     */\n+    @SerializedName(EXPIRES_ON)\n+    private String mExpiresOn;\n+\n+    /**\n+     * Session key of PRT.\n+     */\n+    @SerializedName(SESSION_KEY)\n+    private String mSessionKey;\n+\n+    /**\n+     * The version of the PRT Protocol being used, version 3 supports no device_id.\n+     */\n+    @SerializedName(PRT_PROTOCOL_VERSION)\n+    private String mPrtProtocolVersion;\n+\n+    /**\n+     * Session key expiry time.\u202fThis value is determined by the client and set to 60 days after the\n+     * session key was initally issued\n+     */\n+    @SerializedName(SESSION_KEY_ROLLING_DATE)\n+    private String mSessionKeyRollingDate;\n+\n+    /**\n+     * Gets the family_id.\n+     *\n+     * @return The family_id to get.\n+     */\n+    public String getFamilyId() {\n+        return mFamilyId;\n+    }\n+\n+    /**\n+     * Sets the family_id.\n+     *\n+     * @param familyId The family_id to set.\n+     */\n+    public void setFamilyId(final String familyId) {\n+        mFamilyId = familyId;\n+    }\n+\n+    public boolean isExpired(final String expires) {\n+        // Init a Calendar for the current time/date\n+        final Calendar calendar = Calendar.getInstance();\n+        final Date validity = calendar.getTime();\n+        // Init a Date for the accessToken's expiry\n+        long epoch = Long.valueOf(expires);\n+        final Date expiresOn = new Date(\n+                TimeUnit.SECONDS.toMillis(epoch)\n+        );\n+        return expiresOn.before(validity);\n+    }\n+\n+    @Override\n+    public boolean isExpired() {\n+        return isExpired(getExpiresOn());\n+    }\n+\n+    /**\n+     * Gets the expires_on.\n+     * @return The expires_on to get.\n+     */\n+    public String getExpiresOn() {\n+        return mExpiresOn;\n+    }\n+\n+    /**\n+     * Sets the expires_on.\n+     * @param expiresOn The expires_on to set.\n+     */\n+    public void setExpiresOn(String expiresOn) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fff151f2090532efcca75f0deeec220ac9426eaa"}, "originalPosition": 136}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fff151f2090532efcca75f0deeec220ac9426eaa", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/fff151f2090532efcca75f0deeec220ac9426eaa", "committedDate": "2021-01-26T03:21:53Z", "message": "Use real client id for cache key"}, "afterCommit": {"oid": "a1f79f2c35e4e1b058befc5bdf92f6254704209f", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/a1f79f2c35e4e1b058befc5bdf92f6254704209f", "committedDate": "2021-01-28T09:53:56Z", "message": "Update PrimaryRefreshTokenRecord.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc4MTY0MTM2", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#pullrequestreview-578164136", "createdAt": "2021-01-28T10:00:20Z", "commit": {"oid": "e2053682ece7828b06366616988ce60f0dc1ab7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxMDowMDoyMFrOIbvowA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxMDowMDoyMFrOIbvowA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTk2Mjk0NA==", "bodyText": "@jbzdarkid Hi, I keep your evaluateJavascript here. It should not cause test unstable. I'll try more after this PR merged.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r565962944", "createdAt": "2021-01-28T10:00:20Z", "author": {"login": "richard1122"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/WebViewAuthorizationFragment.java", "diffHunk": "@@ -138,7 +139,7 @@ public void onPageLoaded() {\n \n                         // Inject the javascript string from testing. This should only be evaluated if we haven't sent\n                         // an auth result already.\n-                        if (mAuthResultSent == false && !StringExtensions.isNullOrBlank(mPostPageLoadedJavascript)) {\n+                        if (!mAuthResultSent && !StringExtensions.isNullOrBlank(mPostPageLoadedJavascript)) {\n                             if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n                                 mWebView.evaluateJavascript(mPostPageLoadedJavascript, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2053682ece7828b06366616988ce60f0dc1ab7e"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc4NzI1Njc0", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#pullrequestreview-578725674", "createdAt": "2021-01-28T20:45:38Z", "commit": {"oid": "e2053682ece7828b06366616988ce60f0dc1ab7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQyMDo0NTozOFrOIcKB4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQyMDo0NTozOFrOIcKB4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjM5NTM2MQ==", "bodyText": "Auth scheme shouldn't apply here -- please confirm this test passes with null as its param as well. This criteria doesn't apply to PRTs", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r566395361", "createdAt": "2021-01-28T20:45:38Z", "author": {"login": "iambmelt"}, "path": "common/src/androidTest/java/com/microsoft/identity/common/SharedPreferencesAccountCredentialCacheTest.java", "diffHunk": "@@ -1466,6 +1469,75 @@ public void getCredentialsNoHomeAccountIdNoTarget() {\n         assertEquals(2, credentials.size());\n     }\n \n+    @Test\n+    public void getCredentialsPRTNoClientId() {\n+        final PrimaryRefreshTokenRecord primaryRefreshToken = new PrimaryRefreshTokenRecord();\n+        primaryRefreshToken.setHomeAccountId(HOME_ACCOUNT_ID);\n+        primaryRefreshToken.setEnvironment(ENVIRONMENT);\n+        primaryRefreshToken.setCredentialType(CredentialType.PrimaryRefreshToken.name().toLowerCase(Locale.US));\n+        primaryRefreshToken.setClientId(CLIENT_ID);\n+        primaryRefreshToken.setSessionKey(SESSION_KEY);\n+\n+        mSharedPreferencesAccountCredentialCache.saveCredential(primaryRefreshToken);\n+\n+        List<Credential> credentials = mSharedPreferencesAccountCredentialCache.getCredentialsFilteredBy(\n+                HOME_ACCOUNT_ID,\n+                ENVIRONMENT,\n+                CredentialType.PrimaryRefreshToken,\n+                null, /* client id */\n+                null,\n+                null,\n+                BEARER_AUTHENTICATION_SCHEME.getName()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2053682ece7828b06366616988ce60f0dc1ab7e"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc4NzI1OTM5", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#pullrequestreview-578725939", "createdAt": "2021-01-28T20:46:01Z", "commit": {"oid": "e2053682ece7828b06366616988ce60f0dc1ab7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQyMDo0NjowMlrOIcKCxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQyMDo0NjowMlrOIcKCxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjM5NTU4OQ==", "bodyText": "Same here - scheme should only apply to ATs", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r566395589", "createdAt": "2021-01-28T20:46:02Z", "author": {"login": "iambmelt"}, "path": "common/src/androidTest/java/com/microsoft/identity/common/SharedPreferencesAccountCredentialCacheTest.java", "diffHunk": "@@ -1466,6 +1469,75 @@ public void getCredentialsNoHomeAccountIdNoTarget() {\n         assertEquals(2, credentials.size());\n     }\n \n+    @Test\n+    public void getCredentialsPRTNoClientId() {\n+        final PrimaryRefreshTokenRecord primaryRefreshToken = new PrimaryRefreshTokenRecord();\n+        primaryRefreshToken.setHomeAccountId(HOME_ACCOUNT_ID);\n+        primaryRefreshToken.setEnvironment(ENVIRONMENT);\n+        primaryRefreshToken.setCredentialType(CredentialType.PrimaryRefreshToken.name().toLowerCase(Locale.US));\n+        primaryRefreshToken.setClientId(CLIENT_ID);\n+        primaryRefreshToken.setSessionKey(SESSION_KEY);\n+\n+        mSharedPreferencesAccountCredentialCache.saveCredential(primaryRefreshToken);\n+\n+        List<Credential> credentials = mSharedPreferencesAccountCredentialCache.getCredentialsFilteredBy(\n+                HOME_ACCOUNT_ID,\n+                ENVIRONMENT,\n+                CredentialType.PrimaryRefreshToken,\n+                null, /* client id */\n+                null,\n+                null,\n+                BEARER_AUTHENTICATION_SCHEME.getName()\n+        );\n+        assertEquals(1, credentials.size());\n+    }\n+\n+    @Test\n+    public void getCredentialsPRTClientId() {\n+        final PrimaryRefreshTokenRecord primaryRefreshToken = new PrimaryRefreshTokenRecord();\n+        primaryRefreshToken.setHomeAccountId(HOME_ACCOUNT_ID);\n+        primaryRefreshToken.setEnvironment(ENVIRONMENT);\n+        primaryRefreshToken.setCredentialType(CredentialType.PrimaryRefreshToken.name().toLowerCase(Locale.US));\n+        primaryRefreshToken.setClientId(CLIENT_ID);\n+        primaryRefreshToken.setSessionKey(SESSION_KEY);\n+\n+        mSharedPreferencesAccountCredentialCache.saveCredential(primaryRefreshToken);\n+\n+        List<Credential> credentials = mSharedPreferencesAccountCredentialCache.getCredentialsFilteredBy(\n+                HOME_ACCOUNT_ID,\n+                ENVIRONMENT,\n+                CredentialType.PrimaryRefreshToken,\n+                CLIENT_ID,\n+                null,\n+                null,\n+                BEARER_AUTHENTICATION_SCHEME.getName()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2053682ece7828b06366616988ce60f0dc1ab7e"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc4NzM0ODMz", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#pullrequestreview-578734833", "createdAt": "2021-01-28T20:58:37Z", "commit": {"oid": "e2053682ece7828b06366616988ce60f0dc1ab7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQyMDo1ODozN1rOIcKdow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQyMDo1ODozN1rOIcKdow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjQwMjQ2Nw==", "bodyText": "Let's include the format of this value. I'm guessing it's probably epoch seconds? Would be good to have this info in the javadoc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r566402467", "createdAt": "2021-01-28T20:58:37Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,203 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import lombok.EqualsAndHashCode;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+@EqualsAndHashCode(callSuper = true, doNotUseGetters = true)\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+\n+        /**\n+         * String of session_key.\n+         */\n+        public static final String SESSION_KEY = \"session_key\";\n+\n+        /**\n+         * String of session_key_rolling_date.\n+         */\n+        public static final String SESSION_KEY_ROLLING_DATE = \"session_key_rolling_date\";\n+\n+        /**\n+         * String of prt_protocol_version.\n+         */\n+        public static final String PRT_PROTOCOL_VERSION = \"prt_protocol_version\";\n+    }\n+\n+    /**\n+     * 1st Party Application Family ID.\n+     */\n+    @SerializedName(FAMILY_ID)\n+    private String mFamilyId;\n+\n+    /**\n+     * PRT expiry time.\u202fThis value is returned from the server as refresh_token_expires_in that\n+     * should be added to local time.\n+     */\n+    @SerializedName(EXPIRES_ON)\n+    private String mExpiresOn;\n+\n+    /**\n+     * Session key of PRT.\n+     */\n+    @SerializedName(SESSION_KEY)\n+    private String mSessionKey;\n+\n+    /**\n+     * The version of the PRT Protocol being used, version 3 supports no device_id.\n+     */\n+    @SerializedName(PRT_PROTOCOL_VERSION)\n+    private String mPrtProtocolVersion;\n+\n+    /**\n+     * Session key expiry time.\u202fThis value is determined by the client and set to 60 days after the\n+     * session key was initally issued\n+     */\n+    @SerializedName(SESSION_KEY_ROLLING_DATE)\n+    private String mSessionKeyRollingDate;\n+\n+    /**\n+     * Gets the family_id.\n+     *\n+     * @return The family_id to get.\n+     */\n+    public String getFamilyId() {\n+        return mFamilyId;\n+    }\n+\n+    /**\n+     * Sets the family_id.\n+     *\n+     * @param familyId The family_id to set.\n+     */\n+    public void setFamilyId(final String familyId) {\n+        mFamilyId = familyId;\n+    }\n+\n+    public boolean isExpired(final String expirationTimeEpochSeconds) {\n+        return Long.parseLong(expirationTimeEpochSeconds) * 1000 < System.currentTimeMillis();\n+    }\n+\n+    @Override\n+    public boolean isExpired() {\n+        return isExpired(getExpiresOn());\n+    }\n+\n+    /**\n+     * Gets the expires_on.\n+     * @return The expires_on to get.\n+     */\n+    public String getExpiresOn() {\n+        return mExpiresOn;\n+    }\n+\n+    /**\n+     * Sets the expires_on.\n+     * @param expiresOn The expires_on to set.\n+     */\n+    public void setExpiresOn(String expiresOn) {\n+        mExpiresOn = expiresOn;\n+    }\n+\n+    /**\n+     * Gets the session_key.\n+     * @return The session_key to get.\n+     */\n+    public String getSessionKey() {\n+        return mSessionKey;\n+    }\n+\n+    /**\n+     * Sets the session_key.\n+     *\n+     * @param sessionKey The session_key to set.\n+     */\n+    public void setSessionKey(String sessionKey) {\n+        mSessionKey = sessionKey;\n+    }\n+\n+    /**\n+     * Gets the prt_protocol_version.\n+     *\n+     * @return The prt_protocol_version to get.\n+     */\n+    public String getPrtProtocolVersion() {\n+        return mPrtProtocolVersion;\n+    }\n+\n+    /**\n+     * Sets the prt_protocol_version.\n+     *\n+     * @param prtProtocolVersion The prt_protocol_version to set.\n+     */\n+    public void setPrtProtocolVersion(String prtProtocolVersion) {\n+        mPrtProtocolVersion = prtProtocolVersion;\n+    }\n+\n+    /**\n+     * Gets the session_key_rolling_date.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2053682ece7828b06366616988ce60f0dc1ab7e"}, "originalPosition": 171}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc4NzM0OTg5", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#pullrequestreview-578734989", "createdAt": "2021-01-28T20:58:51Z", "commit": {"oid": "e2053682ece7828b06366616988ce60f0dc1ab7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQyMDo1ODo1MVrOIcKeKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQyMDo1ODo1MVrOIcKeKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjQwMjYwMQ==", "bodyText": "Same here.... format?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r566402601", "createdAt": "2021-01-28T20:58:51Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,203 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import lombok.EqualsAndHashCode;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+@EqualsAndHashCode(callSuper = true, doNotUseGetters = true)\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+\n+        /**\n+         * String of session_key.\n+         */\n+        public static final String SESSION_KEY = \"session_key\";\n+\n+        /**\n+         * String of session_key_rolling_date.\n+         */\n+        public static final String SESSION_KEY_ROLLING_DATE = \"session_key_rolling_date\";\n+\n+        /**\n+         * String of prt_protocol_version.\n+         */\n+        public static final String PRT_PROTOCOL_VERSION = \"prt_protocol_version\";\n+    }\n+\n+    /**\n+     * 1st Party Application Family ID.\n+     */\n+    @SerializedName(FAMILY_ID)\n+    private String mFamilyId;\n+\n+    /**\n+     * PRT expiry time.\u202fThis value is returned from the server as refresh_token_expires_in that\n+     * should be added to local time.\n+     */\n+    @SerializedName(EXPIRES_ON)\n+    private String mExpiresOn;\n+\n+    /**\n+     * Session key of PRT.\n+     */\n+    @SerializedName(SESSION_KEY)\n+    private String mSessionKey;\n+\n+    /**\n+     * The version of the PRT Protocol being used, version 3 supports no device_id.\n+     */\n+    @SerializedName(PRT_PROTOCOL_VERSION)\n+    private String mPrtProtocolVersion;\n+\n+    /**\n+     * Session key expiry time.\u202fThis value is determined by the client and set to 60 days after the\n+     * session key was initally issued\n+     */\n+    @SerializedName(SESSION_KEY_ROLLING_DATE)\n+    private String mSessionKeyRollingDate;\n+\n+    /**\n+     * Gets the family_id.\n+     *\n+     * @return The family_id to get.\n+     */\n+    public String getFamilyId() {\n+        return mFamilyId;\n+    }\n+\n+    /**\n+     * Sets the family_id.\n+     *\n+     * @param familyId The family_id to set.\n+     */\n+    public void setFamilyId(final String familyId) {\n+        mFamilyId = familyId;\n+    }\n+\n+    public boolean isExpired(final String expirationTimeEpochSeconds) {\n+        return Long.parseLong(expirationTimeEpochSeconds) * 1000 < System.currentTimeMillis();\n+    }\n+\n+    @Override\n+    public boolean isExpired() {\n+        return isExpired(getExpiresOn());\n+    }\n+\n+    /**\n+     * Gets the expires_on.\n+     * @return The expires_on to get.\n+     */\n+    public String getExpiresOn() {\n+        return mExpiresOn;\n+    }\n+\n+    /**\n+     * Sets the expires_on.\n+     * @param expiresOn The expires_on to set.\n+     */\n+    public void setExpiresOn(String expiresOn) {\n+        mExpiresOn = expiresOn;\n+    }\n+\n+    /**\n+     * Gets the session_key.\n+     * @return The session_key to get.\n+     */\n+    public String getSessionKey() {\n+        return mSessionKey;\n+    }\n+\n+    /**\n+     * Sets the session_key.\n+     *\n+     * @param sessionKey The session_key to set.\n+     */\n+    public void setSessionKey(String sessionKey) {\n+        mSessionKey = sessionKey;\n+    }\n+\n+    /**\n+     * Gets the prt_protocol_version.\n+     *\n+     * @return The prt_protocol_version to get.\n+     */\n+    public String getPrtProtocolVersion() {\n+        return mPrtProtocolVersion;\n+    }\n+\n+    /**\n+     * Sets the prt_protocol_version.\n+     *\n+     * @param prtProtocolVersion The prt_protocol_version to set.\n+     */\n+    public void setPrtProtocolVersion(String prtProtocolVersion) {\n+        mPrtProtocolVersion = prtProtocolVersion;\n+    }\n+\n+    /**\n+     * Gets the session_key_rolling_date.\n+     *\n+     * @return The session_key_rolling_date to get.\n+     */\n+    public String getSessionKeyRollingDate() {\n+        return mSessionKeyRollingDate;\n+    }\n+\n+    /**\n+     * Sets the session_key_rolling_date.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2053682ece7828b06366616988ce60f0dc1ab7e"}, "originalPosition": 180}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc4NzM1NTMz", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#pullrequestreview-578735533", "createdAt": "2021-01-28T20:59:35Z", "commit": {"oid": "e2053682ece7828b06366616988ce60f0dc1ab7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQyMDo1OTozNVrOIcKfyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQyMDo1OTozNVrOIcKfyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjQwMzAxNg==", "bodyText": "Increasing the patch version?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r566403016", "createdAt": "2021-01-28T20:59:35Z", "author": {"login": "iambmelt"}, "path": "common/versioning/version.properties", "diffHunk": "@@ -1,4 +1,4 @@\n-#Wed Jan 27 23:18:25 UTC 2021\n-versionName=3.0.9\n+#Mon Jan 27 18:00:00 UTC 2021\n+versionName=3.0.10", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2053682ece7828b06366616988ce60f0dc1ab7e"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc4NzM1ODg1", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#pullrequestreview-578735885", "createdAt": "2021-01-28T21:00:04Z", "commit": {"oid": "e2053682ece7828b06366616988ce60f0dc1ab7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQyMTowMDowNVrOIcKg-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQyMTowMDowNVrOIcKg-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjQwMzMyMg==", "bodyText": "Did we ever close on storing this value elsewhere?\n/cc @AdamBJohnsonx @hieunguyenmsft", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r566403322", "createdAt": "2021-01-28T21:00:05Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,203 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import lombok.EqualsAndHashCode;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+@EqualsAndHashCode(callSuper = true, doNotUseGetters = true)\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+\n+        /**\n+         * String of session_key.\n+         */\n+        public static final String SESSION_KEY = \"session_key\";\n+\n+        /**\n+         * String of session_key_rolling_date.\n+         */\n+        public static final String SESSION_KEY_ROLLING_DATE = \"session_key_rolling_date\";\n+\n+        /**\n+         * String of prt_protocol_version.\n+         */\n+        public static final String PRT_PROTOCOL_VERSION = \"prt_protocol_version\";\n+    }\n+\n+    /**\n+     * 1st Party Application Family ID.\n+     */\n+    @SerializedName(FAMILY_ID)\n+    private String mFamilyId;\n+\n+    /**\n+     * PRT expiry time.\u202fThis value is returned from the server as refresh_token_expires_in that\n+     * should be added to local time.\n+     */\n+    @SerializedName(EXPIRES_ON)\n+    private String mExpiresOn;\n+\n+    /**\n+     * Session key of PRT.\n+     */\n+    @SerializedName(SESSION_KEY)\n+    private String mSessionKey;\n+\n+    /**\n+     * The version of the PRT Protocol being used, version 3 supports no device_id.\n+     */\n+    @SerializedName(PRT_PROTOCOL_VERSION)\n+    private String mPrtProtocolVersion;\n+\n+    /**\n+     * Session key expiry time.\u202fThis value is determined by the client and set to 60 days after the\n+     * session key was initally issued\n+     */\n+    @SerializedName(SESSION_KEY_ROLLING_DATE)\n+    private String mSessionKeyRollingDate;\n+\n+    /**\n+     * Gets the family_id.\n+     *\n+     * @return The family_id to get.\n+     */\n+    public String getFamilyId() {\n+        return mFamilyId;\n+    }\n+\n+    /**\n+     * Sets the family_id.\n+     *\n+     * @param familyId The family_id to set.\n+     */\n+    public void setFamilyId(final String familyId) {\n+        mFamilyId = familyId;\n+    }\n+\n+    public boolean isExpired(final String expirationTimeEpochSeconds) {\n+        return Long.parseLong(expirationTimeEpochSeconds) * 1000 < System.currentTimeMillis();\n+    }\n+\n+    @Override\n+    public boolean isExpired() {\n+        return isExpired(getExpiresOn());\n+    }\n+\n+    /**\n+     * Gets the expires_on.\n+     * @return The expires_on to get.\n+     */\n+    public String getExpiresOn() {\n+        return mExpiresOn;\n+    }\n+\n+    /**\n+     * Sets the expires_on.\n+     * @param expiresOn The expires_on to set.\n+     */\n+    public void setExpiresOn(String expiresOn) {\n+        mExpiresOn = expiresOn;\n+    }\n+\n+    /**\n+     * Gets the session_key.\n+     * @return The session_key to get.\n+     */\n+    public String getSessionKey() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2053682ece7828b06366616988ce60f0dc1ab7e"}, "originalPosition": 139}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e2053682ece7828b06366616988ce60f0dc1ab7e", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/e2053682ece7828b06366616988ce60f0dc1ab7e", "committedDate": "2021-01-28T09:58:45Z", "message": "Revert evaluateJavascript"}, "afterCommit": {"oid": "a76009aafd4d02b52ad05cc8b07e9cb8165764c5", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/a76009aafd4d02b52ad05cc8b07e9cb8165764c5", "committedDate": "2021-02-17T12:01:22Z", "message": "Revert evaluateJavascript"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkyNjQxMzQw", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#pullrequestreview-592641340", "createdAt": "2021-02-17T21:25:30Z", "commit": {"oid": "9892c79952ddbbfd2266c1e90c87196349ada101"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QyMToyNTozMFrOInLlRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QyMToyNTozMFrOInLlRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzk1NTE0MA==", "bodyText": "Can we go ahead and adopt my change to indicate whether this session key value is a literal session key or a key alias by adding a column here that could say this thing?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r577955140", "createdAt": "2021-02-17T21:25:30Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import lombok.EqualsAndHashCode;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+@EqualsAndHashCode(callSuper = true, doNotUseGetters = true)\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+\n+        /**\n+         * String of session_key.\n+         */\n+        public static final String SESSION_KEY = \"session_key\";\n+\n+        /**\n+         * String of session_key_rolling_date.\n+         */\n+        public static final String SESSION_KEY_ROLLING_DATE = \"session_key_rolling_date\";\n+\n+        /**\n+         * String of prt_protocol_version.\n+         */\n+        public static final String PRT_PROTOCOL_VERSION = \"prt_protocol_version\";\n+    }\n+\n+    /**\n+     * 1st Party Application Family ID.\n+     */\n+    @SerializedName(FAMILY_ID)\n+    private String mFamilyId;\n+\n+    /**\n+     * PRT expiry time.\u202fThis value is returned from the server as refresh_token_expires_in that\n+     * should be added to local time. Measured in milliseconds from epoch (1970).\n+     */\n+    @SerializedName(EXPIRES_ON)\n+    private String mExpiresOn;\n+\n+    /**\n+     * Session key of PRT.\n+     */\n+    @SerializedName(SESSION_KEY)\n+    private String mSessionKey;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9892c79952ddbbfd2266c1e90c87196349ada101"}, "originalPosition": 77}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcbd6dc893589597cda9c3ef3518484129aa1590", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/fcbd6dc893589597cda9c3ef3518484129aa1590", "committedDate": "2021-02-18T02:09:22Z", "message": "Add PRT storage support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0707e205d2df19eb1e8892b6f1141296d8ceb76b", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/0707e205d2df19eb1e8892b6f1141296d8ceb76b", "committedDate": "2021-02-18T02:09:48Z", "message": "Update changelog.txt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe0499a1583df8fc2fc9120640020c7ad3e1799f", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/fe0499a1583df8fc2fc9120640020c7ad3e1799f", "committedDate": "2021-02-18T02:09:48Z", "message": "Revert EvaluteJavascript"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3e19560c0058dbe9dba4177fd270464c4d9a0b9", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/f3e19560c0058dbe9dba4177fd270464c4d9a0b9", "committedDate": "2021-02-18T02:09:48Z", "message": "Update version, tweak"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d757e5005b34d10283594cc497c9b4e99c12c5ed", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/d757e5005b34d10283594cc497c9b4e99c12c5ed", "committedDate": "2021-02-18T02:09:48Z", "message": "Tests update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "261d70c259a5daf93669df0513bcdb1597e1cba9", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/261d70c259a5daf93669df0513bcdb1597e1cba9", "committedDate": "2021-02-18T02:09:49Z", "message": "Storage folling up fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc85aed80a9555eab380cb5c75192d9259c2079b", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/dc85aed80a9555eab380cb5c75192d9259c2079b", "committedDate": "2021-02-18T02:09:49Z", "message": "Cache key update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a33b57a75e622f022a5b2be7f715d247acc6d2c2", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/a33b57a75e622f022a5b2be7f715d247acc6d2c2", "committedDate": "2021-02-18T02:09:49Z", "message": "Add comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb862611e0d6571fa611f304614daf060861c114", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/eb862611e0d6571fa611f304614daf060861c114", "committedDate": "2021-02-18T02:09:49Z", "message": "Add PRT cache key tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1a5d8f216f0386a9d3a72d8a9900ec5f24f6b4f", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/e1a5d8f216f0386a9d3a72d8a9900ec5f24f6b4f", "committedDate": "2021-02-18T02:09:49Z", "message": "Follow PRT docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "175c1d3afe9244470dc85cce42c8ed224267444a", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/175c1d3afe9244470dc85cce42c8ed224267444a", "committedDate": "2021-02-18T02:09:49Z", "message": "Add family_id back"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afffbdb0cd4655e54b628fef08484e7fe68ff25f", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/afffbdb0cd4655e54b628fef08484e7fe68ff25f", "committedDate": "2021-02-18T02:09:50Z", "message": "Typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4cba035e2ab047c8ce195339cf0d758e42548d1", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/a4cba035e2ab047c8ce195339cf0d758e42548d1", "committedDate": "2021-02-18T02:09:50Z", "message": "Filter PRT without client id"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a307d420da8e088e33c38a8850fce1051ba1eea", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/4a307d420da8e088e33c38a8850fce1051ba1eea", "committedDate": "2021-02-18T02:09:50Z", "message": "Move mustMatchOnClientId logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3c97fb6116d2fbd809b5dd2f563b6517c31b6d2", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/d3c97fb6116d2fbd809b5dd2f563b6517c31b6d2", "committedDate": "2021-02-18T02:09:50Z", "message": "Delete REALM from PRT record"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c1e6e52d9d757194ade62418f2b4f19e8cff2a4", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/1c1e6e52d9d757194ade62418f2b4f19e8cff2a4", "committedDate": "2021-02-18T02:09:50Z", "message": "Use real client id for cache key"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41d253ec937ef7e70f2ba55ef1c5781f571cf4f6", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/41d253ec937ef7e70f2ba55ef1c5781f571cf4f6", "committedDate": "2021-02-18T02:09:51Z", "message": "Update PrimaryRefreshTokenRecord.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a880cf8b4f7cad0850920706680e62c6d1833ecd", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/a880cf8b4f7cad0850920706680e62c6d1833ecd", "committedDate": "2021-02-18T02:09:51Z", "message": "Revert evaluateJavascript"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2391b5fbcb33eb62fb5865b1b0e46e294b47d5b", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/d2391b5fbcb33eb62fb5865b1b0e46e294b47d5b", "committedDate": "2021-02-18T02:10:23Z", "message": "Comments, tests, version update"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9892c79952ddbbfd2266c1e90c87196349ada101", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/9892c79952ddbbfd2266c1e90c87196349ada101", "committedDate": "2021-02-17T12:18:06Z", "message": "Comments, tests, version update"}, "afterCommit": {"oid": "d2391b5fbcb33eb62fb5865b1b0e46e294b47d5b", "author": {"user": {"login": "richard1122", "name": "Richard He"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/d2391b5fbcb33eb62fb5865b1b0e46e294b47d5b", "committedDate": "2021-02-18T02:10:23Z", "message": "Comments, tests, version update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkyNzk0NjU2", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#pullrequestreview-592794656", "createdAt": "2021-02-18T02:16:05Z", "commit": {"oid": "d2391b5fbcb33eb62fb5865b1b0e46e294b47d5b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1358, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}