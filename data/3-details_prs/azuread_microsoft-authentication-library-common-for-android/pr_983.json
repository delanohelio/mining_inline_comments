{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NTUyNjIy", "number": 983, "title": "Device Code Flow Final PR", "bodyText": "Final major Common PR for the Device Code Flow implementation.\nAdded invalid_grant for DCF to ErrorStrings\nAdded some logging to DeviceCodeFlowCommand\nAdjusted createTokenRequest() in MicrosoftStsOAuth2Strategy for DCF\nAdded 'mDeviceCode' to MicrosoftTokenRequest' Implemented getDeviceCode()inOAuth2StrategyAddedDEVICE_CODEtoGrantTypesinTokenRequestAdded Telemtry codes inTelemetryEventStrings`\nLocalMsalController was recently moved to Common, so included following changes:\nImplemented deviceCodeFlowAuthRequest and acquireDeviceCodeFlowToken in LocalMsalController\nAdded Exception handling in LocalMsalController\nShould be merged before MSAL PR: AzureAD/microsoft-authentication-library-for-android#1112", "createdAt": "2020-07-29T16:36:12Z", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983", "merged": true, "mergeCommit": {"oid": "b3cb6af43e1f0e1fe60491700f4b5bc4021ce68f"}, "closed": true, "closedAt": "2020-08-07T00:59:58Z", "author": {"login": "t-fadura"}, "timelineItems": {"totalCount": 50, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5F4HXgH2gAyNDU4NTUyNjIyOjZkMjllM2JmNmRkN2E5MDQxODBlNjJjNTg5NGIyZTRkMjM1MDU1Mjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8FFexgH2gAyNDU4NTUyNjIyOjQ1YWIxMjg3OWFkZjQ5MDJkNjcxYjBjNzM1ZjczMTY1NzViMzUxZWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6d29e3bf6dd7a904180e62c5894b2e4d23505529", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/6d29e3bf6dd7a904180e62c5894b2e4d23505529", "committedDate": "2020-07-27T18:10:35Z", "message": "Some work in BaseController"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f9b459442c3220aba7daa85b727c522a45f079d", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/1f9b459442c3220aba7daa85b727c522a45f079d", "committedDate": "2020-07-29T15:51:21Z", "message": "End-to-end working"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d93ffdfd2c08dfb76bbf729033f589822ca9ccac", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/d93ffdfd2c08dfb76bbf729033f589822ca9ccac", "committedDate": "2020-07-29T16:27:06Z", "message": "Small tweaks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e6e357ce089b4a7ab47ff001c882a68827bb565", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/4e6e357ce089b4a7ab47ff001c882a68827bb565", "committedDate": "2020-07-29T16:39:14Z", "message": "Merge branch 'dev' into t-fadura/dcf-main"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NzUyMDU4", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#pullrequestreview-457752058", "createdAt": "2020-07-29T17:47:35Z", "commit": {"oid": "4e6e357ce089b4a7ab47ff001c882a68827bb565"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzo0NzozNVrOG5DamQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzo0NzozNVrOG5DamQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3Nzk3Nw==", "bodyText": "We should have a constant for this somewhere already, let me track it down", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462477977", "createdAt": "2020-07-29T17:47:35Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/exception/ErrorStrings.java", "diffHunk": "@@ -422,9 +422,16 @@ private ErrorStrings() {\n     public final static String DEVICE_CODE_FLOW_EXPIRED_TOKEN_CODE = \"expired_token\";\n     public final static String DEVICE_CODE_FLOW_EXPIRED_TOKEN_MESSAGE = \"The token has expired, therefore authentication is no longer possible with this flow attempt. Re-run the Device Code Flow Protocol to try again.\";\n \n+    /**\n+     * Device Code Flow only.\n+     * The token was polled again after it was already received.\n+     */\n+    public final static String DEVICE_CODE_FLOW_INVALID_GRANT_CODE = \"invalid_grant\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e6e357ce089b4a7ab47ff001c882a68827bb565"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NzUzNzE3", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#pullrequestreview-457753717", "createdAt": "2020-07-29T17:49:46Z", "commit": {"oid": "4e6e357ce089b4a7ab47ff001c882a68827bb565"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzo0OTo0NlrOG5Df0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzo0OTo0NlrOG5Df0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3OTMxNA==", "bodyText": "Will this be shown to users? If yes, we'll need to have this localized", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462479314", "createdAt": "2020-07-29T17:49:46Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/exception/ErrorStrings.java", "diffHunk": "@@ -422,9 +422,16 @@ private ErrorStrings() {\n     public final static String DEVICE_CODE_FLOW_EXPIRED_TOKEN_CODE = \"expired_token\";\n     public final static String DEVICE_CODE_FLOW_EXPIRED_TOKEN_MESSAGE = \"The token has expired, therefore authentication is no longer possible with this flow attempt. Re-run the Device Code Flow Protocol to try again.\";\n \n+    /**\n+     * Device Code Flow only.\n+     * The token was polled again after it was already received.\n+     */\n+    public final static String DEVICE_CODE_FLOW_INVALID_GRANT_CODE = \"invalid_grant\";\n+    public final static String DEVICE_CODE_FLOW_INVALID_GRANT_MESSAGE = \"The token for this device code has already been redeemed. To receive another access token, please re-run the Device Code Flow protocol.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e6e357ce089b4a7ab47ff001c882a68827bb565"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NzU0NDcy", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#pullrequestreview-457754472", "createdAt": "2020-07-29T17:50:51Z", "commit": {"oid": "4e6e357ce089b4a7ab47ff001c882a68827bb565"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzo1MDo1MlrOG5Diew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzo1MDo1MlrOG5Diew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3OTk5NQ==", "bodyText": "Minor nit: input variable could be final", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462479995", "createdAt": "2020-07-29T17:50:52Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/microsoft/MicrosoftTokenRequest.java", "diffHunk": "@@ -180,4 +185,12 @@ public String getMicrosoftEnrollmentId() {\n     public void setMicrosoftEnrollmentId(String microsoftEnrollmentId) {\n         this.mMicrosoftEnrollmentId = microsoftEnrollmentId;\n     }\n+\n+    public String getDeviceCode() {\n+        return mDeviceCode;\n+    }\n+\n+    public void setDeviceCode(String deviceCode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e6e357ce089b4a7ab47ff001c882a68827bb565"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NzU1NDAw", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#pullrequestreview-457755400", "createdAt": "2020-07-29T17:52:07Z", "commit": {"oid": "4e6e357ce089b4a7ab47ff001c882a68827bb565"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzo1MjowN1rOG5DlVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzo1MjowN1rOG5DlVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4MDcyNA==", "bodyText": "Let's declare this value @Nullable (as looks to be unassigned in auth code flow)\n@Nullable\npublic String getDeviceCode() {\n    // ...\n}", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462480724", "createdAt": "2020-07-29T17:52:07Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/microsoft/MicrosoftTokenRequest.java", "diffHunk": "@@ -180,4 +185,12 @@ public String getMicrosoftEnrollmentId() {\n     public void setMicrosoftEnrollmentId(String microsoftEnrollmentId) {\n         this.mMicrosoftEnrollmentId = microsoftEnrollmentId;\n     }\n+\n+    public String getDeviceCode() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e6e357ce089b4a7ab47ff001c882a68827bb565"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NzU3MTYy", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#pullrequestreview-457757162", "createdAt": "2020-07-29T17:54:27Z", "commit": {"oid": "4e6e357ce089b4a7ab47ff001c882a68827bb565"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzo1NDoyN1rOG5DqkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzo1NDoyN1rOG5DqkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4MjA2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public AuthorizationResult getDeviceCode(MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable String authorityUrl) throws IOException {\n          \n          \n            \n                public AuthorizationResult getDeviceCode(@NonNull final MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable final String authorityUrl) throws IOException {", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462482065", "createdAt": "2020-07-29T17:54:27Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java", "diffHunk": "@@ -230,6 +245,101 @@ protected final void setAuthorizationEndpoint(final String authorizationEndpoint\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n+    public AuthorizationResult getDeviceCode(MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable String authorityUrl) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e6e357ce089b4a7ab47ff001c882a68827bb565"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NzYyMDMx", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#pullrequestreview-457762031", "createdAt": "2020-07-29T18:00:50Z", "commit": {"oid": "4e6e357ce089b4a7ab47ff001c882a68827bb565"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODowMDo1MFrOG5D5yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODowMDo1MFrOG5D5yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4NTk2MA==", "bodyText": "Networking code shouldn't be at this level of abstraction; instead delegate to existing implementation in HttpRequest.java", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462485960", "createdAt": "2020-07-29T18:00:50Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java", "diffHunk": "@@ -230,6 +245,101 @@ protected final void setAuthorizationEndpoint(final String authorizationEndpoint\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n+    public AuthorizationResult getDeviceCode(MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable String authorityUrl) throws IOException {\n+        final String methodName = \":getDeviceCode\";\n+\n+        // Set up connection\n+        String urlBody;\n+\n+        if (authorityUrl == null) {\n+            // Fetch the tenant from the authority\n+            String tenant = authorizationRequest.getAuthority().getPath().split(\"/\")[1];\n+\n+            // Set up Device Code Flow authorization url\n+            urlBody = \"https://login.microsoftonline.com/\" + tenant + \"/oauth2/v2.0/devicecode\";\n+        }\n+        else {\n+            urlBody = authorityUrl;\n+        }\n+\n+        URL url = new URL(urlBody);\n+\n+        final HttpURLConnection con = (HttpsURLConnection) url.openConnection();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e6e357ce089b4a7ab47ff001c882a68827bb565"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NzYyNjMy", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#pullrequestreview-457762632", "createdAt": "2020-07-29T18:01:41Z", "commit": {"oid": "4e6e357ce089b4a7ab47ff001c882a68827bb565"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODowMTo0MVrOG5D7nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODowMTo0MVrOG5D7nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4NjQyOQ==", "bodyText": "This is Microsoft specific, this should move down the object inheritance hierarchy and into MicrosoftStsOAuth2Strategy", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462486429", "createdAt": "2020-07-29T18:01:41Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java", "diffHunk": "@@ -230,6 +245,101 @@ protected final void setAuthorizationEndpoint(final String authorizationEndpoint\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n+    public AuthorizationResult getDeviceCode(MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable String authorityUrl) throws IOException {\n+        final String methodName = \":getDeviceCode\";\n+\n+        // Set up connection\n+        String urlBody;\n+\n+        if (authorityUrl == null) {\n+            // Fetch the tenant from the authority\n+            String tenant = authorizationRequest.getAuthority().getPath().split(\"/\")[1];\n+\n+            // Set up Device Code Flow authorization url\n+            urlBody = \"https://login.microsoftonline.com/\" + tenant + \"/oauth2/v2.0/devicecode\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e6e357ce089b4a7ab47ff001c882a68827bb565"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NzgwNDU1", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#pullrequestreview-457780455", "createdAt": "2020-07-29T18:26:49Z", "commit": {"oid": "4e6e357ce089b4a7ab47ff001c882a68827bb565"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODoyNjo0OVrOG5E0kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODoyNjo0OVrOG5E0kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwMTAxMA==", "bodyText": "We need to pull this logic into the MicrosoftStsOAuth2Configuration -- I don't think we want to extract the tenant info like this from the URL, but instead we should inspect the PublicClientApplicationConfiguration to get the audience/tenant.\nHazard from parsing it from the URL is that this basically assumes the URL structure will never change. For AAD today, that's a safe assumption -- if we add support for direct-ADFS auth later though, this will break", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462501010", "createdAt": "2020-07-29T18:26:49Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java", "diffHunk": "@@ -230,6 +245,101 @@ protected final void setAuthorizationEndpoint(final String authorizationEndpoint\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n+    public AuthorizationResult getDeviceCode(MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable String authorityUrl) throws IOException {\n+        final String methodName = \":getDeviceCode\";\n+\n+        // Set up connection\n+        String urlBody;\n+\n+        if (authorityUrl == null) {\n+            // Fetch the tenant from the authority\n+            String tenant = authorizationRequest.getAuthority().getPath().split(\"/\")[1];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e6e357ce089b4a7ab47ff001c882a68827bb565"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NzgxMTcx", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#pullrequestreview-457781171", "createdAt": "2020-07-29T18:27:47Z", "commit": {"oid": "4e6e357ce089b4a7ab47ff001c882a68827bb565"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5379463012bc628f8858bb7ad8547cd0edae95d1", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/5379463012bc628f8858bb7ad8547cd0edae95d1", "committedDate": "2020-07-29T18:44:39Z", "message": "Update getDeviceCode() signature\n\nCo-authored-by: Brian Melton-Grace <brianmel@microsoft.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3ODA5Nzk4", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#pullrequestreview-457809798", "createdAt": "2020-07-29T19:08:04Z", "commit": {"oid": "4e6e357ce089b4a7ab47ff001c882a68827bb565"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxOTowODowNFrOG5GP-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxOTowODowNFrOG5GP-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyNDQxMQ==", "bodyText": "Any ideas where code would be found?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462524411", "createdAt": "2020-07-29T19:08:04Z", "author": {"login": "t-fadura"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java", "diffHunk": "@@ -230,6 +245,101 @@ protected final void setAuthorizationEndpoint(final String authorizationEndpoint\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n+    public AuthorizationResult getDeviceCode(MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable String authorityUrl) throws IOException {\n+        final String methodName = \":getDeviceCode\";\n+\n+        // Set up connection\n+        String urlBody;\n+\n+        if (authorityUrl == null) {\n+            // Fetch the tenant from the authority\n+            String tenant = authorizationRequest.getAuthority().getPath().split(\"/\")[1];\n+\n+            // Set up Device Code Flow authorization url\n+            urlBody = \"https://login.microsoftonline.com/\" + tenant + \"/oauth2/v2.0/devicecode\";\n+        }\n+        else {\n+            urlBody = authorityUrl;\n+        }\n+\n+        URL url = new URL(urlBody);\n+\n+        final HttpURLConnection con = (HttpsURLConnection) url.openConnection();\n+        con.setRequestMethod(\"POST\");\n+        con.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+        con.setConnectTimeout(5000);\n+        con.setReadTimeout(5000);\n+\n+        // Set up request body\n+        con.setDoOutput(true);\n+        final DataOutputStream out = new DataOutputStream(con.getOutputStream());\n+        StringBuilder encodedResult = new StringBuilder();\n+\n+        // Encode client_id\n+        encodedResult.append(URLEncoder.encode(\"client_id\", \"UTF-8\"));\n+        encodedResult.append(\"=\");\n+        encodedResult.append(URLEncoder.encode(authorizationRequest.getClientId(), \"UTF-8\"));\n+        encodedResult.append(\"&\");\n+\n+        // Encode scope\n+        encodedResult.append(URLEncoder.encode(\"scope\", \"UTF-8\"));\n+        encodedResult.append(\"=\");\n+        encodedResult.append(URLEncoder.encode(authorizationRequest.getScope(), \"UTF-8\"));\n+\n+        // Attach request body\n+        final String convertedParams = encodedResult.toString();\n+        out.writeBytes(convertedParams);\n+        out.flush();\n+        out.close();\n+\n+        // Send request and create the authorization result\n+        // MicrosoftSTAuthorizationResultFactory not used since no Intent is being created\n+        final int authorizationCode = con.getResponseCode();\n+        final BufferedReader streamReader;\n+        final AuthorizationResult authorizationResult;\n+\n+        // Check if the request was successful\n+        // Any code below 300 (HTTP_MULT_CHOICE) is considered a success\n+        if (authorizationCode < HttpsURLConnection.HTTP_MULT_CHOICE){\n+            // Get and parse response body\n+            streamReader = new BufferedReader(new InputStreamReader(con.getInputStream()));\n+            final String responseBody = streamReader.readLine();\n+            final HashMap<String, String> parsedResponseBody = new Gson().fromJson(responseBody, new TypeToken<HashMap<String, String>>() {}.getType());\n+\n+            // Create response and result objects\n+            // Not sure where \"code\" is stored. Not found in the input stream...\n+            final MicrosoftStsAuthorizationResponse authorizationResponse =\n+                    new MicrosoftStsAuthorizationResponse(null, authorizationRequest.getState(), parsedResponseBody);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e6e357ce089b4a7ab47ff001c882a68827bb565"}, "originalPosition": 110}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3Nzg1NDQw", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#pullrequestreview-457785440", "createdAt": "2020-07-29T18:33:39Z", "commit": {"oid": "4e6e357ce089b4a7ab47ff001c882a68827bb565"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODozMzozOVrOG5FD-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxOTowOToxM1rOG5GScw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwNDk1NQ==", "bodyText": "We never localize error message though.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462504955", "createdAt": "2020-07-29T18:33:39Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/exception/ErrorStrings.java", "diffHunk": "@@ -422,9 +422,16 @@ private ErrorStrings() {\n     public final static String DEVICE_CODE_FLOW_EXPIRED_TOKEN_CODE = \"expired_token\";\n     public final static String DEVICE_CODE_FLOW_EXPIRED_TOKEN_MESSAGE = \"The token has expired, therefore authentication is no longer possible with this flow attempt. Re-run the Device Code Flow Protocol to try again.\";\n \n+    /**\n+     * Device Code Flow only.\n+     * The token was polled again after it was already received.\n+     */\n+    public final static String DEVICE_CODE_FLOW_INVALID_GRANT_CODE = \"invalid_grant\";\n+    public final static String DEVICE_CODE_FLOW_INVALID_GRANT_MESSAGE = \"The token for this device code has already been redeemed. To receive another access token, please re-run the Device Code Flow protocol.\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3OTMxNA=="}, "originalCommit": {"oid": "4e6e357ce089b4a7ab47ff001c882a68827bb565"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwNTI4Nw==", "bodyText": "nit: final", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462505287", "createdAt": "2020-07-29T18:34:14Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/DeviceCodeFlowCommand.java", "diffHunk": "@@ -73,7 +80,14 @@ public AcquireTokenResult execute() throws Exception {\n         );\n \n         // Call acquireDeviceCodeFlowToken to get token result (Part 2 of DCF)\n-        return controller.acquireDeviceCodeFlowToken(authorizationResult, commandParameters);\n+        AcquireTokenResult tokenResult = controller.acquireDeviceCodeFlowToken(authorizationResult, commandParameters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e6e357ce089b4a7ab47ff001c882a68827bb565"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyMTY5MA==", "bodyText": "On a side note, we should be able to just append /oauth2/v2.0/devicecode to the authority URL (getAuthority() inside MicrosoftStsOAuth2Configuration - see getTokenEndpoint() and getEndpointUrlFromRootAndSuffix() for more info)\n(eventually, if the server teams agreed to add the endpoint to well known config, then we would have the exact same logic as getTokenEndpoint() - use that first, then use hardcoded string as a fallback.)", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462521690", "createdAt": "2020-07-29T19:03:18Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java", "diffHunk": "@@ -230,6 +245,101 @@ protected final void setAuthorizationEndpoint(final String authorizationEndpoint\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n+    public AuthorizationResult getDeviceCode(MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable String authorityUrl) throws IOException {\n+        final String methodName = \":getDeviceCode\";\n+\n+        // Set up connection\n+        String urlBody;\n+\n+        if (authorityUrl == null) {\n+            // Fetch the tenant from the authority\n+            String tenant = authorizationRequest.getAuthority().getPath().split(\"/\")[1];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwMTAxMA=="}, "originalCommit": {"oid": "4e6e357ce089b4a7ab47ff001c882a68827bb565"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyNTA0Mw==", "bodyText": "utilize serializeObjectToFormUrlEncoded()", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462525043", "createdAt": "2020-07-29T19:09:13Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java", "diffHunk": "@@ -230,6 +245,101 @@ protected final void setAuthorizationEndpoint(final String authorizationEndpoint\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n+    public AuthorizationResult getDeviceCode(MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable String authorityUrl) throws IOException {\n+        final String methodName = \":getDeviceCode\";\n+\n+        // Set up connection\n+        String urlBody;\n+\n+        if (authorityUrl == null) {\n+            // Fetch the tenant from the authority\n+            String tenant = authorizationRequest.getAuthority().getPath().split(\"/\")[1];\n+\n+            // Set up Device Code Flow authorization url\n+            urlBody = \"https://login.microsoftonline.com/\" + tenant + \"/oauth2/v2.0/devicecode\";\n+        }\n+        else {\n+            urlBody = authorityUrl;\n+        }\n+\n+        URL url = new URL(urlBody);\n+\n+        final HttpURLConnection con = (HttpsURLConnection) url.openConnection();\n+        con.setRequestMethod(\"POST\");\n+        con.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+        con.setConnectTimeout(5000);\n+        con.setReadTimeout(5000);\n+\n+        // Set up request body\n+        con.setDoOutput(true);\n+        final DataOutputStream out = new DataOutputStream(con.getOutputStream());\n+        StringBuilder encodedResult = new StringBuilder();\n+\n+        // Encode client_id\n+        encodedResult.append(URLEncoder.encode(\"client_id\", \"UTF-8\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e6e357ce089b4a7ab47ff001c882a68827bb565"}, "originalPosition": 77}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22d538aeb40834f79e9be318b187e52d5e1afae1", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/22d538aeb40834f79e9be318b187e52d5e1afae1", "committedDate": "2020-07-29T20:54:24Z", "message": "getDeviceCode now using HttpRequest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c0803e29a9d68094dc85b291b3fc07741b9d5c9", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/2c0803e29a9d68094dc85b291b3fc07741b9d5c9", "committedDate": "2020-07-29T21:50:26Z", "message": "Merge branch 'dev' into t-fadura/dcf-main"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cb330e9585063a02e79ba3083abaa683d90acb5", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/0cb330e9585063a02e79ba3083abaa683d90acb5", "committedDate": "2020-07-29T22:07:03Z", "message": "Fixed some suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3OTMyOTc3", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#pullrequestreview-457932977", "createdAt": "2020-07-29T22:09:08Z", "commit": {"oid": "0cb330e9585063a02e79ba3083abaa683d90acb5"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ac355b940583e01f48e0e41021edb3ab09b6736", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/0ac355b940583e01f48e0e41021edb3ab09b6736", "committedDate": "2020-07-30T01:09:58Z", "message": "Merge branch 'dev' into t-fadura/dcf-main"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5555450bf9f9b312e98dc00b643e1c6849e90837", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/5555450bf9f9b312e98dc00b643e1c6849e90837", "committedDate": "2020-07-30T18:38:05Z", "message": "removed some imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63a64548c68430f0188f4e20a7934d0700b766e3", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/63a64548c68430f0188f4e20a7934d0700b766e3", "committedDate": "2020-07-30T18:38:25Z", "message": "Merge branch 't-fadura/dcf-main' of https://github.com/AzureAD/microsoft-authentication-library-common-for-android into t-fadura/dcf-main"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e54a00acc1d09152d5cd7d8f1af8b3576f3bfbc0", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/e54a00acc1d09152d5cd7d8f1af8b3576f3bfbc0", "committedDate": "2020-07-30T21:29:48Z", "message": "Added authorityUri parameter to getDeviceCode()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ec55495065bdd517d8bf30171067026fee9214a", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/1ec55495065bdd517d8bf30171067026fee9214a", "committedDate": "2020-07-30T21:31:15Z", "message": "removed unneeded import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4Nzc0Nzg0", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#pullrequestreview-458774784", "createdAt": "2020-07-30T21:38:32Z", "commit": {"oid": "1ec55495065bdd517d8bf30171067026fee9214a"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4Nzk4MTY5", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#pullrequestreview-458798169", "createdAt": "2020-07-30T22:22:44Z", "commit": {"oid": "1ec55495065bdd517d8bf30171067026fee9214a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMjoyMjo0NFrOG512qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMjoyMjo0NFrOG512qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMwNDM2Mw==", "bodyText": "These constants look to be out of range for the DCF IDS (600-699)\nFor this, we'll need to update the value to be in this range, and update the spec to account for which value that you use:\n\nSpec -- Msft corpnet reqd", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r463304363", "createdAt": "2020-07-30T22:22:44Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/telemetry/TelemetryEventStrings.java", "diffHunk": "@@ -192,6 +192,8 @@\n         public static final String LOCAL_ACQUIRE_TOKEN_SILENT= \"103\";\n         public static final String LOCAL_GET_ACCOUNTS= \"106\";\n         public static final String LOCAL_REMOVE_ACCOUNT= \"107\";\n+        public static final String LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE = \"108\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ec55495065bdd517d8bf30171067026fee9214a"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4ODQ5MzI3", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#pullrequestreview-458849327", "createdAt": "2020-07-31T00:34:35Z", "commit": {"oid": "1ec55495065bdd517d8bf30171067026fee9214a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDozNDozNlrOG54SxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDozNDozNlrOG54SxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0NDMyNQ==", "bodyText": "Is LOCAL_COMPLETE_ACQUIRE_TOKEN_INTERACTIVE supposed to be \"102\"?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r463344325", "createdAt": "2020-07-31T00:34:36Z", "author": {"login": "t-fadura"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/telemetry/TelemetryEventStrings.java", "diffHunk": "@@ -192,6 +192,8 @@\n         public static final String LOCAL_ACQUIRE_TOKEN_SILENT= \"103\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ec55495065bdd517d8bf30171067026fee9214a"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a34e8fb54a7bcc569d18deb3600ccf589a53b2b8", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/a34e8fb54a7bcc569d18deb3600ccf589a53b2b8", "committedDate": "2020-07-31T16:25:31Z", "message": "Merge branch 'dev' of https://github.com/AzureAD/microsoft-authentication-library-common-for-android into t-fadura/dcf-main"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "825222e0dabec8b0737919610b923e02bd5f5d0a", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/825222e0dabec8b0737919610b923e02bd5f5d0a", "committedDate": "2020-07-31T16:45:45Z", "message": "Added DCF code to newly migrated LocalMSALController"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2334eb55fa3522948c8f0f18cbf2457d03832ef", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/e2334eb55fa3522948c8f0f18cbf2457d03832ef", "committedDate": "2020-07-31T18:44:47Z", "message": "new error string"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "560e21a0faeace773d32ac3233293c36502c87ca", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/560e21a0faeace773d32ac3233293c36502c87ca", "committedDate": "2020-08-01T04:40:31Z", "message": "added another DCF error code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3be54e0852ed411bf457ec2b2b7fe545dc489417", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/3be54e0852ed411bf457ec2b2b7fe545dc489417", "committedDate": "2020-08-04T15:56:46Z", "message": "Merge branch 'dev' into t-fadura/dcf-main"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMjU5MjU0", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#pullrequestreview-461259254", "createdAt": "2020-08-05T00:18:31Z", "commit": {"oid": "3be54e0852ed411bf457ec2b2b7fe545dc489417"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDoxODozMlrOG71yHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDoxODozMlrOG71yHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMDM1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public final static String DEVICE_CODE_FLOW_AUTHORIZATION_PENDING_CODE = \"authorization_pending\";\n          \n          \n            \n                public final static String DEVICE_CODE_FLOW_AUTHORIZATION_PENDING_ERROR_CODE = \"authorization_pending\";", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465400350", "createdAt": "2020-08-05T00:18:32Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/exception/ErrorStrings.java", "diffHunk": "@@ -408,6 +408,12 @@ private ErrorStrings() {\n                     \"Please make sure to use your organizational account. \" +\n                     \"If that doesn\u2019t help, please return the device to your administrator.\";\n \n+    /**\n+     * Device Code Flow only.\n+     * Authorization has not been completed yet.\n+     */\n+    public final static String DEVICE_CODE_FLOW_AUTHORIZATION_PENDING_CODE = \"authorization_pending\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3be54e0852ed411bf457ec2b2b7fe545dc489417"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMjYwNzM0", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#pullrequestreview-461260734", "createdAt": "2020-08-05T00:23:32Z", "commit": {"oid": "3be54e0852ed411bf457ec2b2b7fe545dc489417"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDoyMzozMlrOG713Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDoyMzozMlrOG713Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMTY5MA==", "bodyText": "with token\n\nAre we certain about this?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465401690", "createdAt": "2020-08-05T00:23:32Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/DeviceCodeFlowCommand.java", "diffHunk": "@@ -72,7 +80,14 @@ public AcquireTokenResult execute() throws Exception {\n         );\n \n         // Call acquireDeviceCodeFlowToken to get token result (Part 2 of DCF)\n-        return controller.acquireDeviceCodeFlowToken(authorizationResult, commandParameters);\n+        final AcquireTokenResult tokenResult = controller.acquireDeviceCodeFlowToken(authorizationResult, commandParameters);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow command exiting with token...\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3be54e0852ed411bf457ec2b2b7fe545dc489417"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMjY2ODky", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#pullrequestreview-461266892", "createdAt": "2020-08-05T00:45:23Z", "commit": {"oid": "3be54e0852ed411bf457ec2b2b7fe545dc489417"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDo0NToyM1rOG72N0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDo0NToyM1rOG72N0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNzQ0MA==", "bodyText": "Why was common the audience to begin with?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465407440", "createdAt": "2020-08-05T00:45:23Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/microsoft/microsoftsts/MicrosoftStsOAuth2Strategy.java", "diffHunk": "@@ -343,9 +343,23 @@ public MicrosoftStsTokenRequest createTokenRequest(@NonNull final MicrosoftStsAu\n         tokenRequest.setClientId(request.getClientId());\n         tokenRequest.setScope(request.getTokenScope());\n         tokenRequest.setClaims(request.getClaims());\n-        tokenRequest.setGrantType(TokenRequest.GrantTypes.AUTHORIZATION_CODE);\n         setTokenRequestCorrelationId(tokenRequest);\n \n+        // Existence of a device code inside of the response object implies Device Code Flow is being used\n+        if (response.getDeviceCode() != null) {\n+            tokenRequest.setGrantType(TokenRequest.GrantTypes.DEVICE_CODE);\n+            tokenRequest.setDeviceCode(response.getDeviceCode());\n+\n+            // mTenantId from mAudience (being \"common\") is being added to the path in AzureActiveDirectoryAuthority", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3be54e0852ed411bf457ec2b2b7fe545dc489417"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMjY3MTMy", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#pullrequestreview-461267132", "createdAt": "2020-08-05T00:46:14Z", "commit": {"oid": "3be54e0852ed411bf457ec2b2b7fe545dc489417"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDo0NjoxNVrOG72Ojw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDo0NjoxNVrOG72Ojw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNzYzMQ==", "bodyText": "We shouldn't be doing this hack -- we need to find the exact issue here", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465407631", "createdAt": "2020-08-05T00:46:15Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/microsoft/microsoftsts/MicrosoftStsOAuth2Strategy.java", "diffHunk": "@@ -343,9 +343,23 @@ public MicrosoftStsTokenRequest createTokenRequest(@NonNull final MicrosoftStsAu\n         tokenRequest.setClientId(request.getClientId());\n         tokenRequest.setScope(request.getTokenScope());\n         tokenRequest.setClaims(request.getClaims());\n-        tokenRequest.setGrantType(TokenRequest.GrantTypes.AUTHORIZATION_CODE);\n         setTokenRequestCorrelationId(tokenRequest);\n \n+        // Existence of a device code inside of the response object implies Device Code Flow is being used\n+        if (response.getDeviceCode() != null) {\n+            tokenRequest.setGrantType(TokenRequest.GrantTypes.DEVICE_CODE);\n+            tokenRequest.setDeviceCode(response.getDeviceCode());\n+\n+            // mTenantId from mAudience (being \"common\") is being added to the path in AzureActiveDirectoryAuthority\n+            // Needed to omit \"\\common\" from the endpoint so as to not break DCF\n+            // mTokenEndPoint be automatically reset in future commands\n+            String newTokenEndpoint = this.mTokenEndpoint.replace(\"/common/\", \"/\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3be54e0852ed411bf457ec2b2b7fe545dc489417"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMjY4MDIz", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#pullrequestreview-461268023", "createdAt": "2020-08-05T00:49:33Z", "commit": {"oid": "3be54e0852ed411bf457ec2b2b7fe545dc489417"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDo0OTozM1rOG72R0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDo0OTozM1rOG72R0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwODQ2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected static final String DEVICE_CODE_CONTENT_TYPE = \"application/x-www-form-urlencoded\";\n          \n          \n            \n                protected static final String DEVICE_CODE_CONTENT_TYPE = TOKEN_REQUEST_CONTENT_TYPE;", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465408464", "createdAt": "2020-08-05T00:49:33Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java", "diffHunk": "@@ -77,6 +87,7 @@\n     private static final String TAG = OAuth2Strategy.class.getSimpleName();\n \n     protected static final String TOKEN_REQUEST_CONTENT_TYPE = \"application/x-www-form-urlencoded\";\n+    protected static final String DEVICE_CODE_CONTENT_TYPE = \"application/x-www-form-urlencoded\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3be54e0852ed411bf457ec2b2b7fe545dc489417"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMjYxMzA5", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#pullrequestreview-461261309", "createdAt": "2020-08-05T00:25:24Z", "commit": {"oid": "3be54e0852ed411bf457ec2b2b7fe545dc489417"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDoyNToyNFrOG715hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMTowMToxMVrOG72ejQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMjI0Nw==", "bodyText": "very minor nit: We might not need a separate function here.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465402247", "createdAt": "2020-08-05T00:25:24Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -459,14 +466,227 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws ServiceException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        final String authorityUri = ((AzureActiveDirectoryAuthority) parametersWithScopes.getAuthority()).getAudience().getCloudUrl();\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest, authorityUri);\n+\n+        validateServiceResult(authorizationResult);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow authorization step finished...\"\n+        );\n+        logResult(TAG, authorizationResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        return authorizationResult;\n     }\n \n     @Override\n-    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(\n+            final AuthorizationResult authorizationResult,\n+            final DeviceCodeFlowCommandParameters parameters)\n+            throws ServiceException, ClientException, IOException {\n+\n+        // Logging start of method\n+        final String methodName = \":acquireDeviceCodeFlowToken\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Polling for token...\"\n+        );\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        // Create empty AcquireTokenResult object\n+        final AcquireTokenResult acquireTokenResult = new AcquireTokenResult();\n+\n+        // Assign authorization result\n+        acquireTokenResult.setAuthorizationResult(authorizationResult);\n+\n+        // Fetch the Authorization Response\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parameters.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parameters\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 2: Poll for token\n+        TokenResult tokenResult = null;\n+\n+        // Create token request outside of loop so it isn't re-created after every loop\n+        final MicrosoftStsTokenRequest tokenRequest = (MicrosoftStsTokenRequest) oAuth2Strategy.createTokenRequest(\n+                mAuthorizationRequest,\n+                authorizationResponse,\n+                parameters.getAuthenticationScheme()\n+        );\n+\n+        // Fetch wait interval\n+        final int interval = Integer.parseInt(authorizationResponse.getInterval()) * 1000;\n+\n+        String errorCode = ErrorStrings.DEVICE_CODE_FLOW_AUTHORIZATION_PENDING_CODE;\n+\n+        // Loop to send multiple requests checking for token\n+        while (authorizationPending(errorCode)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3be54e0852ed411bf457ec2b2b7fe545dc489417"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMjc5Mw==", "bodyText": "nit: We probably can just put this on top of the while loop. I'm not expecting the first request to be done within [interval] seconds.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465402793", "createdAt": "2020-08-05T00:27:25Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -459,14 +466,227 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws ServiceException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        final String authorityUri = ((AzureActiveDirectoryAuthority) parametersWithScopes.getAuthority()).getAudience().getCloudUrl();\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest, authorityUri);\n+\n+        validateServiceResult(authorizationResult);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow authorization step finished...\"\n+        );\n+        logResult(TAG, authorizationResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        return authorizationResult;\n     }\n \n     @Override\n-    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(\n+            final AuthorizationResult authorizationResult,\n+            final DeviceCodeFlowCommandParameters parameters)\n+            throws ServiceException, ClientException, IOException {\n+\n+        // Logging start of method\n+        final String methodName = \":acquireDeviceCodeFlowToken\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Polling for token...\"\n+        );\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        // Create empty AcquireTokenResult object\n+        final AcquireTokenResult acquireTokenResult = new AcquireTokenResult();\n+\n+        // Assign authorization result\n+        acquireTokenResult.setAuthorizationResult(authorizationResult);\n+\n+        // Fetch the Authorization Response\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parameters.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parameters\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 2: Poll for token\n+        TokenResult tokenResult = null;\n+\n+        // Create token request outside of loop so it isn't re-created after every loop\n+        final MicrosoftStsTokenRequest tokenRequest = (MicrosoftStsTokenRequest) oAuth2Strategy.createTokenRequest(\n+                mAuthorizationRequest,\n+                authorizationResponse,\n+                parameters.getAuthenticationScheme()\n+        );\n+\n+        // Fetch wait interval\n+        final int interval = Integer.parseInt(authorizationResponse.getInterval()) * 1000;\n+\n+        String errorCode = ErrorStrings.DEVICE_CODE_FLOW_AUTHORIZATION_PENDING_CODE;\n+\n+        // Loop to send multiple requests checking for token\n+        while (authorizationPending(errorCode)) {\n+            errorCode = \"\"; // Reset error code\n+\n+            // Execute Token Request\n+            tokenResult = oAuth2Strategy.requestToken(tokenRequest);\n+\n+            // Fetch error if the request failed\n+            if (tokenResult.getErrorResponse() != null) {\n+                errorCode = tokenResult.getErrorResponse().getError();\n+            }\n+\n+            // Check if authorization is pending\n+            if (authorizationPending(errorCode)) {\n+                // Wait between polls\n+                ThreadUtils.sleepSafely(interval, TAG,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3be54e0852ed411bf457ec2b2b7fe545dc489417"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMzU4MA==", "bodyText": "Should this be above acquireTokenResult.setTokenResult()?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465403580", "createdAt": "2020-08-05T00:30:09Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -459,14 +466,227 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws ServiceException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        final String authorityUri = ((AzureActiveDirectoryAuthority) parametersWithScopes.getAuthority()).getAudience().getCloudUrl();\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest, authorityUri);\n+\n+        validateServiceResult(authorizationResult);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow authorization step finished...\"\n+        );\n+        logResult(TAG, authorizationResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        return authorizationResult;\n     }\n \n     @Override\n-    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(\n+            final AuthorizationResult authorizationResult,\n+            final DeviceCodeFlowCommandParameters parameters)\n+            throws ServiceException, ClientException, IOException {\n+\n+        // Logging start of method\n+        final String methodName = \":acquireDeviceCodeFlowToken\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Polling for token...\"\n+        );\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        // Create empty AcquireTokenResult object\n+        final AcquireTokenResult acquireTokenResult = new AcquireTokenResult();\n+\n+        // Assign authorization result\n+        acquireTokenResult.setAuthorizationResult(authorizationResult);\n+\n+        // Fetch the Authorization Response\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parameters.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parameters\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 2: Poll for token\n+        TokenResult tokenResult = null;\n+\n+        // Create token request outside of loop so it isn't re-created after every loop\n+        final MicrosoftStsTokenRequest tokenRequest = (MicrosoftStsTokenRequest) oAuth2Strategy.createTokenRequest(\n+                mAuthorizationRequest,\n+                authorizationResponse,\n+                parameters.getAuthenticationScheme()\n+        );\n+\n+        // Fetch wait interval\n+        final int interval = Integer.parseInt(authorizationResponse.getInterval()) * 1000;\n+\n+        String errorCode = ErrorStrings.DEVICE_CODE_FLOW_AUTHORIZATION_PENDING_CODE;\n+\n+        // Loop to send multiple requests checking for token\n+        while (authorizationPending(errorCode)) {\n+            errorCode = \"\"; // Reset error code\n+\n+            // Execute Token Request\n+            tokenResult = oAuth2Strategy.requestToken(tokenRequest);\n+\n+            // Fetch error if the request failed\n+            if (tokenResult.getErrorResponse() != null) {\n+                errorCode = tokenResult.getErrorResponse().getError();\n+            }\n+\n+            // Check if authorization is pending\n+            if (authorizationPending(errorCode)) {\n+                // Wait between polls\n+                ThreadUtils.sleepSafely(interval, TAG,\n+                        \"Attempting to sleep thread during Device Code Flow token polling...\");\n+            }\n+        }\n+\n+        // Assign token result\n+        acquireTokenResult.setTokenResult(tokenResult);\n+\n+        // Validate request success, may throw MsalServiceException\n+        validateServiceResult(tokenResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3be54e0852ed411bf457ec2b2b7fe545dc489417"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNTUwOQ==", "bodyText": "We shouldn't try to fix the issue here. I think there's a bug in AzureActiveDirectoryAuthority. If a TenantID is provided, it should not be appended with /common.\nDevice code flow also supports /common. How would this work if you use /common in authority.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465405509", "createdAt": "2020-08-05T00:37:49Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/microsoft/microsoftsts/MicrosoftStsOAuth2Strategy.java", "diffHunk": "@@ -343,9 +343,23 @@ public MicrosoftStsTokenRequest createTokenRequest(@NonNull final MicrosoftStsAu\n         tokenRequest.setClientId(request.getClientId());\n         tokenRequest.setScope(request.getTokenScope());\n         tokenRequest.setClaims(request.getClaims());\n-        tokenRequest.setGrantType(TokenRequest.GrantTypes.AUTHORIZATION_CODE);\n         setTokenRequestCorrelationId(tokenRequest);\n \n+        // Existence of a device code inside of the response object implies Device Code Flow is being used\n+        if (response.getDeviceCode() != null) {\n+            tokenRequest.setGrantType(TokenRequest.GrantTypes.DEVICE_CODE);\n+            tokenRequest.setDeviceCode(response.getDeviceCode());\n+\n+            // mTenantId from mAudience (being \"common\") is being added to the path in AzureActiveDirectoryAuthority\n+            // Needed to omit \"\\common\" from the endpoint so as to not break DCF\n+            // mTokenEndPoint be automatically reset in future commands\n+            String newTokenEndpoint = this.mTokenEndpoint.replace(\"/common/\", \"/\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3be54e0852ed411bf457ec2b2b7fe545dc489417"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNjQzMQ==", "bodyText": "@t-fadura please extract this function to MicrosoftStsOAuth2Configuration. No need to fetch the endpoint from .well-known/openid-configuration yet.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465406431", "createdAt": "2020-08-05T00:41:35Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java", "diffHunk": "@@ -230,6 +245,101 @@ protected final void setAuthorizationEndpoint(final String authorizationEndpoint\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n+    public AuthorizationResult getDeviceCode(MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable String authorityUrl) throws IOException {\n+        final String methodName = \":getDeviceCode\";\n+\n+        // Set up connection\n+        String urlBody;\n+\n+        if (authorityUrl == null) {\n+            // Fetch the tenant from the authority\n+            String tenant = authorizationRequest.getAuthority().getPath().split(\"/\")[1];\n+\n+            // Set up Device Code Flow authorization url\n+            urlBody = \"https://login.microsoftonline.com/\" + tenant + \"/oauth2/v2.0/devicecode\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4NjQyOQ=="}, "originalCommit": {"oid": "4e6e357ce089b4a7ab47ff001c882a68827bb565"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxMTcyNQ==", "bodyText": "nit: new line for comment.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465411725", "createdAt": "2020-08-05T01:01:11Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java", "diffHunk": "@@ -230,6 +241,80 @@ protected final void setAuthorizationEndpoint(final String authorizationEndpoint\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n+    public AuthorizationResult getDeviceCode(@NonNull final MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable final String authorityUri) throws IOException {\n+        final String methodName = \":getDeviceCode\";\n+\n+        // Set up connection\n+        String urlBody;\n+\n+        if (authorityUri != null) {\n+            urlBody = authorityUri + \"/oauth2/v2.0/devicecode\";\n+        }\n+        else {\n+            // Fetch the tenant from the authority\n+            String tenant = authorizationRequest.getAuthority().getPath().split(\"/\")[1];\n+\n+            // Set up Device Code Flow authorization url\n+            urlBody = \"https://login.microsoftonline.com/\" + tenant + \"/oauth2/v2.0/devicecode\";\n+        }\n+\n+        // Set up headers and request body\n+        final String requestBody = ObjectMapper.serializeObjectToFormUrlEncoded(authorizationRequest);\n+        final Map<String, String> headers = new TreeMap<>();\n+        headers.put(CLIENT_REQUEST_ID, DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID));\n+        headers.putAll(EstsTelemetry.getInstance().getTelemetryHeaders());\n+\n+        // Send request\n+        final HttpResponse response = HttpRequest.sendPost(\n+                new URL(urlBody),\n+                headers,\n+                requestBody.getBytes(ObjectMapper.ENCODING_SCHEME),\n+                DEVICE_CODE_CONTENT_TYPE\n+        );\n+\n+        // Create the authorization result\n+        // MicrosoftSTAuthorizationResultFactory not used since no Intent is being created\n+        AuthorizationResult authorizationResult;\n+\n+        // Check if the request was successful\n+        // Any code below 300 (HTTP_MULT_CHOICE) is considered a success\n+        if (response.getStatusCode() < HttpsURLConnection.HTTP_MULT_CHOICE){\n+            // Get and parse response body\n+            final HashMap<String, String> parsedResponseBody = new Gson().fromJson(response.getBody(), new TypeToken<HashMap<String, String>>() {}.getType());\n+\n+            // Create response and result objects\n+            // Not sure where \"code\" is stored. Not found in the input stream...\n+            final MicrosoftStsAuthorizationResponse authorizationResponse =\n+                    new MicrosoftStsAuthorizationResponse(null, authorizationRequest.getState(), parsedResponseBody);\n+            authorizationResult = new MicrosoftStsAuthorizationResult(AuthorizationStatus.SUCCESS, authorizationResponse);\n+\n+            Logger.verbose(\n+                    TAG + methodName,\n+                    \"Device Code Flow authorization successful...\"\n+            );\n+        }\n+        else { // Request failed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3be54e0852ed411bf457ec2b2b7fe545dc489417"}, "originalPosition": 101}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1c76c205e1a5529db2bc03c86a88243f5e13c2a", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/f1c76c205e1a5529db2bc03c86a88243f5e13c2a", "committedDate": "2020-08-05T01:11:31Z", "message": "DEVICE_CODE_CONTENT_TYPE change\n\nCo-authored-by: Shahzaib <37125644+shahzaibj@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae18f0d35cce749bcec2b8a76457aa9b08b4717c", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/ae18f0d35cce749bcec2b8a76457aa9b08b4717c", "committedDate": "2020-08-05T02:14:19Z", "message": "Updated errors, some suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd4a14ef8f8087cface7e88de6ccd7b21356ec29", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/fd4a14ef8f8087cface7e88de6ccd7b21356ec29", "committedDate": "2020-08-05T02:14:24Z", "message": "Merge branch 't-fadura/dcf-main' of https://github.com/AzureAD/microsoft-authentication-library-common-for-android into t-fadura/dcf-main"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3ODcwNzM4", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#pullrequestreview-457870738", "createdAt": "2020-07-29T20:26:45Z", "commit": {"oid": "5379463012bc628f8858bb7ad8547cd0edae95d1"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDoyNjo0NVrOG5I4eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDozNToyN1rOG5JLCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2NzU0NA==", "bodyText": "since we don't have try-with-resources (unless you want to take an android studio upgrade), you'll want to try { } finally { out.close() }. Similar changes should happen for your stream readers.  Let us not leave anything open by accident.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462567544", "createdAt": "2020-07-29T20:26:45Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java", "diffHunk": "@@ -230,6 +245,101 @@ protected final void setAuthorizationEndpoint(final String authorizationEndpoint\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n+    public AuthorizationResult getDeviceCode(@NonNull final MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable final String authorityUrl) throws IOException {\n+        final String methodName = \":getDeviceCode\";\n+\n+        // Set up connection\n+        String urlBody;\n+\n+        if (authorityUrl == null) {\n+            // Fetch the tenant from the authority\n+            String tenant = authorizationRequest.getAuthority().getPath().split(\"/\")[1];\n+\n+            // Set up Device Code Flow authorization url\n+            urlBody = \"https://login.microsoftonline.com/\" + tenant + \"/oauth2/v2.0/devicecode\";\n+        }\n+        else {\n+            urlBody = authorityUrl;\n+        }\n+\n+        URL url = new URL(urlBody);\n+\n+        final HttpURLConnection con = (HttpsURLConnection) url.openConnection();\n+        con.setRequestMethod(\"POST\");\n+        con.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+        con.setConnectTimeout(5000);\n+        con.setReadTimeout(5000);\n+\n+        // Set up request body\n+        con.setDoOutput(true);\n+        final DataOutputStream out = new DataOutputStream(con.getOutputStream());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5379463012bc628f8858bb7ad8547cd0edae95d1"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2NzkxNQ==", "bodyText": "Is there a benefit to reusing this reference?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462567915", "createdAt": "2020-07-29T20:27:27Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java", "diffHunk": "@@ -230,6 +245,101 @@ protected final void setAuthorizationEndpoint(final String authorizationEndpoint\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n+    public AuthorizationResult getDeviceCode(@NonNull final MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable final String authorityUrl) throws IOException {\n+        final String methodName = \":getDeviceCode\";\n+\n+        // Set up connection\n+        String urlBody;\n+\n+        if (authorityUrl == null) {\n+            // Fetch the tenant from the authority\n+            String tenant = authorizationRequest.getAuthority().getPath().split(\"/\")[1];\n+\n+            // Set up Device Code Flow authorization url\n+            urlBody = \"https://login.microsoftonline.com/\" + tenant + \"/oauth2/v2.0/devicecode\";\n+        }\n+        else {\n+            urlBody = authorityUrl;\n+        }\n+\n+        URL url = new URL(urlBody);\n+\n+        final HttpURLConnection con = (HttpsURLConnection) url.openConnection();\n+        con.setRequestMethod(\"POST\");\n+        con.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+        con.setConnectTimeout(5000);\n+        con.setReadTimeout(5000);\n+\n+        // Set up request body\n+        con.setDoOutput(true);\n+        final DataOutputStream out = new DataOutputStream(con.getOutputStream());\n+        StringBuilder encodedResult = new StringBuilder();\n+\n+        // Encode client_id\n+        encodedResult.append(URLEncoder.encode(\"client_id\", \"UTF-8\"));\n+        encodedResult.append(\"=\");\n+        encodedResult.append(URLEncoder.encode(authorizationRequest.getClientId(), \"UTF-8\"));\n+        encodedResult.append(\"&\");\n+\n+        // Encode scope\n+        encodedResult.append(URLEncoder.encode(\"scope\", \"UTF-8\"));\n+        encodedResult.append(\"=\");\n+        encodedResult.append(URLEncoder.encode(authorizationRequest.getScope(), \"UTF-8\"));\n+\n+        // Attach request body\n+        final String convertedParams = encodedResult.toString();\n+        out.writeBytes(convertedParams);\n+        out.flush();\n+        out.close();\n+\n+        // Send request and create the authorization result\n+        // MicrosoftSTAuthorizationResultFactory not used since no Intent is being created\n+        final int authorizationCode = con.getResponseCode();\n+        final BufferedReader streamReader;\n+        final AuthorizationResult authorizationResult;\n+\n+        // Check if the request was successful\n+        // Any code below 300 (HTTP_MULT_CHOICE) is considered a success\n+        if (authorizationCode < HttpsURLConnection.HTTP_MULT_CHOICE){\n+            // Get and parse response body\n+            streamReader = new BufferedReader(new InputStreamReader(con.getInputStream()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5379463012bc628f8858bb7ad8547cd0edae95d1"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3MDI0MQ==", "bodyText": "Interesting.  Why not just hand the Reader to Gson.fromJson()?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462570241", "createdAt": "2020-07-29T20:31:36Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java", "diffHunk": "@@ -230,6 +245,101 @@ protected final void setAuthorizationEndpoint(final String authorizationEndpoint\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n+    public AuthorizationResult getDeviceCode(@NonNull final MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable final String authorityUrl) throws IOException {\n+        final String methodName = \":getDeviceCode\";\n+\n+        // Set up connection\n+        String urlBody;\n+\n+        if (authorityUrl == null) {\n+            // Fetch the tenant from the authority\n+            String tenant = authorizationRequest.getAuthority().getPath().split(\"/\")[1];\n+\n+            // Set up Device Code Flow authorization url\n+            urlBody = \"https://login.microsoftonline.com/\" + tenant + \"/oauth2/v2.0/devicecode\";\n+        }\n+        else {\n+            urlBody = authorityUrl;\n+        }\n+\n+        URL url = new URL(urlBody);\n+\n+        final HttpURLConnection con = (HttpsURLConnection) url.openConnection();\n+        con.setRequestMethod(\"POST\");\n+        con.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+        con.setConnectTimeout(5000);\n+        con.setReadTimeout(5000);\n+\n+        // Set up request body\n+        con.setDoOutput(true);\n+        final DataOutputStream out = new DataOutputStream(con.getOutputStream());\n+        StringBuilder encodedResult = new StringBuilder();\n+\n+        // Encode client_id\n+        encodedResult.append(URLEncoder.encode(\"client_id\", \"UTF-8\"));\n+        encodedResult.append(\"=\");\n+        encodedResult.append(URLEncoder.encode(authorizationRequest.getClientId(), \"UTF-8\"));\n+        encodedResult.append(\"&\");\n+\n+        // Encode scope\n+        encodedResult.append(URLEncoder.encode(\"scope\", \"UTF-8\"));\n+        encodedResult.append(\"=\");\n+        encodedResult.append(URLEncoder.encode(authorizationRequest.getScope(), \"UTF-8\"));\n+\n+        // Attach request body\n+        final String convertedParams = encodedResult.toString();\n+        out.writeBytes(convertedParams);\n+        out.flush();\n+        out.close();\n+\n+        // Send request and create the authorization result\n+        // MicrosoftSTAuthorizationResultFactory not used since no Intent is being created\n+        final int authorizationCode = con.getResponseCode();\n+        final BufferedReader streamReader;\n+        final AuthorizationResult authorizationResult;\n+\n+        // Check if the request was successful\n+        // Any code below 300 (HTTP_MULT_CHOICE) is considered a success\n+        if (authorizationCode < HttpsURLConnection.HTTP_MULT_CHOICE){\n+            // Get and parse response body\n+            streamReader = new BufferedReader(new InputStreamReader(con.getInputStream()));\n+            final String responseBody = streamReader.readLine();\n+            final HashMap<String, String> parsedResponseBody = new Gson().fromJson(responseBody, new TypeToken<HashMap<String, String>>() {}.getType());\n+\n+            // Create response and result objects\n+            // Not sure where \"code\" is stored. Not found in the input stream...\n+            final MicrosoftStsAuthorizationResponse authorizationResponse =\n+                    new MicrosoftStsAuthorizationResponse(null, authorizationRequest.getState(), parsedResponseBody);\n+            authorizationResult = new MicrosoftStsAuthorizationResult(AuthorizationStatus.SUCCESS, authorizationResponse);\n+\n+            Logger.verbose(\n+                    TAG + methodName,\n+                    \"Device Code Flow authorization successful...\"\n+            );\n+        }\n+        else {\n+            // Get and parse response body\n+            streamReader = new BufferedReader(new InputStreamReader(con.getErrorStream()));\n+            final String responseBody = streamReader.readLine();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5379463012bc628f8858bb7ad8547cd0edae95d1"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3MjI5Ng==", "bodyText": "Do we want to specify the character set here?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        streamReader = new BufferedReader(new InputStreamReader(con.getInputStream()));\n          \n          \n            \n                        streamReader = new BufferedReader(new InputStreamReader(con.getInputStream(), \"UTF-8\"));", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462572296", "createdAt": "2020-07-29T20:35:27Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java", "diffHunk": "@@ -230,6 +245,101 @@ protected final void setAuthorizationEndpoint(final String authorizationEndpoint\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n+    public AuthorizationResult getDeviceCode(@NonNull final MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable final String authorityUrl) throws IOException {\n+        final String methodName = \":getDeviceCode\";\n+\n+        // Set up connection\n+        String urlBody;\n+\n+        if (authorityUrl == null) {\n+            // Fetch the tenant from the authority\n+            String tenant = authorizationRequest.getAuthority().getPath().split(\"/\")[1];\n+\n+            // Set up Device Code Flow authorization url\n+            urlBody = \"https://login.microsoftonline.com/\" + tenant + \"/oauth2/v2.0/devicecode\";\n+        }\n+        else {\n+            urlBody = authorityUrl;\n+        }\n+\n+        URL url = new URL(urlBody);\n+\n+        final HttpURLConnection con = (HttpsURLConnection) url.openConnection();\n+        con.setRequestMethod(\"POST\");\n+        con.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+        con.setConnectTimeout(5000);\n+        con.setReadTimeout(5000);\n+\n+        // Set up request body\n+        con.setDoOutput(true);\n+        final DataOutputStream out = new DataOutputStream(con.getOutputStream());\n+        StringBuilder encodedResult = new StringBuilder();\n+\n+        // Encode client_id\n+        encodedResult.append(URLEncoder.encode(\"client_id\", \"UTF-8\"));\n+        encodedResult.append(\"=\");\n+        encodedResult.append(URLEncoder.encode(authorizationRequest.getClientId(), \"UTF-8\"));\n+        encodedResult.append(\"&\");\n+\n+        // Encode scope\n+        encodedResult.append(URLEncoder.encode(\"scope\", \"UTF-8\"));\n+        encodedResult.append(\"=\");\n+        encodedResult.append(URLEncoder.encode(authorizationRequest.getScope(), \"UTF-8\"));\n+\n+        // Attach request body\n+        final String convertedParams = encodedResult.toString();\n+        out.writeBytes(convertedParams);\n+        out.flush();\n+        out.close();\n+\n+        // Send request and create the authorization result\n+        // MicrosoftSTAuthorizationResultFactory not used since no Intent is being created\n+        final int authorizationCode = con.getResponseCode();\n+        final BufferedReader streamReader;\n+        final AuthorizationResult authorizationResult;\n+\n+        // Check if the request was successful\n+        // Any code below 300 (HTTP_MULT_CHOICE) is considered a success\n+        if (authorizationCode < HttpsURLConnection.HTTP_MULT_CHOICE){\n+            // Get and parse response body\n+            streamReader = new BufferedReader(new InputStreamReader(con.getInputStream()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5379463012bc628f8858bb7ad8547cd0edae95d1"}, "originalPosition": 103}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b27c7b68d8ea3c3e408da7dd9733120abb621a4d", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/b27c7b68d8ea3c3e408da7dd9733120abb621a4d", "committedDate": "2020-08-05T21:04:54Z", "message": "fixed authority problem"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMDMyNzY1", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#pullrequestreview-462032765", "createdAt": "2020-08-05T21:21:01Z", "commit": {"oid": "b27c7b68d8ea3c3e408da7dd9733120abb621a4d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMDYyMDk0", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#pullrequestreview-462062094", "createdAt": "2020-08-05T22:17:28Z", "commit": {"oid": "b27c7b68d8ea3c3e408da7dd9733120abb621a4d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMDc2MTkz", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#pullrequestreview-462076193", "createdAt": "2020-08-05T22:51:06Z", "commit": {"oid": "b27c7b68d8ea3c3e408da7dd9733120abb621a4d"}, "state": "APPROVED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjo1MTowNlrOG8dPVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzoxMDowNlrOG8do3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA0NjgwNg==", "bodyText": "nit: final", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r466046806", "createdAt": "2020-08-05T22:51:06Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -459,14 +465,236 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws ServiceException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        Authority.KnownAuthorityResult authorityResult = Authority.getKnownAuthorityResult(parametersWithScopes.getAuthority());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b27c7b68d8ea3c3e408da7dd9733120abb621a4d"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA0ODc3OQ==", "bodyText": "This would also have to emit telemetry event... You could wrap the whole logic in a try catch block. In the catch block, you emit an exception event, and then rethrow. (so that you don't have to do it multiple time - i.e. under getKnown() and here).", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r466048779", "createdAt": "2020-08-05T22:56:48Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -459,14 +465,236 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws ServiceException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        Authority.KnownAuthorityResult authorityResult = Authority.getKnownAuthorityResult(parametersWithScopes.getAuthority());\n+\n+        //0.1 If not known throw resulting exception\n+        if (!authorityResult.getKnown()) {\n+            Telemetry.emit(\n+                    new ApiEndEvent()\n+                            .putException(authorityResult.getClientException())\n+                            .putApiId(TelemetryEventStrings.Api.LOCAL_ACQUIRE_TOKEN_INTERACTIVE)\n+            );\n+\n+            throw authorityResult.getClientException();\n+        }\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest);\n+\n+        validateServiceResult(authorizationResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b27c7b68d8ea3c3e408da7dd9733120abb621a4d"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA0OTEwMA==", "bodyText": "Same with acquireDeviceCodeFlowToken()", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r466049100", "createdAt": "2020-08-05T22:57:41Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -459,14 +465,236 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws ServiceException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        Authority.KnownAuthorityResult authorityResult = Authority.getKnownAuthorityResult(parametersWithScopes.getAuthority());\n+\n+        //0.1 If not known throw resulting exception\n+        if (!authorityResult.getKnown()) {\n+            Telemetry.emit(\n+                    new ApiEndEvent()\n+                            .putException(authorityResult.getClientException())\n+                            .putApiId(TelemetryEventStrings.Api.LOCAL_ACQUIRE_TOKEN_INTERACTIVE)\n+            );\n+\n+            throw authorityResult.getClientException();\n+        }\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest);\n+\n+        validateServiceResult(authorizationResult);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA0ODc3OQ=="}, "originalCommit": {"oid": "b27c7b68d8ea3c3e408da7dd9733120abb621a4d"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA1MDY2Mg==", "bodyText": "nit: intervalInMilliseconds?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r466050662", "createdAt": "2020-08-05T23:02:21Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -459,14 +465,236 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws ServiceException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        Authority.KnownAuthorityResult authorityResult = Authority.getKnownAuthorityResult(parametersWithScopes.getAuthority());\n+\n+        //0.1 If not known throw resulting exception\n+        if (!authorityResult.getKnown()) {\n+            Telemetry.emit(\n+                    new ApiEndEvent()\n+                            .putException(authorityResult.getClientException())\n+                            .putApiId(TelemetryEventStrings.Api.LOCAL_ACQUIRE_TOKEN_INTERACTIVE)\n+            );\n+\n+            throw authorityResult.getClientException();\n+        }\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest);\n+\n+        validateServiceResult(authorizationResult);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow authorization step finished...\"\n+        );\n+        logResult(TAG, authorizationResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        return authorizationResult;\n     }\n \n     @Override\n-    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(\n+            final AuthorizationResult authorizationResult,\n+            final DeviceCodeFlowCommandParameters parameters)\n+            throws ServiceException, ClientException, IOException {\n+\n+        // Logging start of method\n+        final String methodName = \":acquireDeviceCodeFlowToken\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Polling for token...\"\n+        );\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        // Create empty AcquireTokenResult object\n+        final AcquireTokenResult acquireTokenResult = new AcquireTokenResult();\n+\n+        // Assign authorization result\n+        acquireTokenResult.setAuthorizationResult(authorizationResult);\n+\n+        // Fetch the Authorization Response\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parameters.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parameters\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 2: Poll for token\n+        TokenResult tokenResult = null;\n+\n+        // Create token request outside of loop so it isn't re-created after every loop\n+        final MicrosoftStsTokenRequest tokenRequest = (MicrosoftStsTokenRequest) oAuth2Strategy.createTokenRequest(\n+                mAuthorizationRequest,\n+                authorizationResponse,\n+                parameters.getAuthenticationScheme()\n+        );\n+\n+        // Fetch wait interval\n+        final int interval = Integer.parseInt(authorizationResponse.getInterval()) * 1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b27c7b68d8ea3c3e408da7dd9733120abb621a4d"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA1Mjg2NA==", "bodyText": "Can we extract this into MicrosoftStsOAuth2Configuration.getDeviceCodeEndpoint()?\nNo need to fetch the endpoint from .well-known/openid-configuration yet. (If you could add a TODO there that we're pending server change, that would be really great.)", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r466052864", "createdAt": "2020-08-05T23:08:49Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java", "diffHunk": "@@ -230,6 +240,70 @@ protected final void setAuthorizationEndpoint(final String authorizationEndpoint\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n+    public AuthorizationResult getDeviceCode(@NonNull final MicrosoftStsAuthorizationRequest authorizationRequest) throws IOException {\n+        final String methodName = \":getDeviceCode\";\n+\n+        final String urlBody = ((MicrosoftStsOAuth2Configuration) mConfig).getAuthorityUrl().toString() + \"/oauth2/v2.0/devicecode\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b27c7b68d8ea3c3e408da7dd9733120abb621a4d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA1MzE5NA==", "bodyText": "nit: Update this comment to reflect your conversation with @iambmelt  below?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r466053194", "createdAt": "2020-08-05T23:09:40Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java", "diffHunk": "@@ -230,6 +240,70 @@ protected final void setAuthorizationEndpoint(final String authorizationEndpoint\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n+    public AuthorizationResult getDeviceCode(@NonNull final MicrosoftStsAuthorizationRequest authorizationRequest) throws IOException {\n+        final String methodName = \":getDeviceCode\";\n+\n+        final String urlBody = ((MicrosoftStsOAuth2Configuration) mConfig).getAuthorityUrl().toString() + \"/oauth2/v2.0/devicecode\";\n+\n+        // Set up headers and request body\n+        final String requestBody = ObjectMapper.serializeObjectToFormUrlEncoded(authorizationRequest);\n+        final Map<String, String> headers = new TreeMap<>();\n+        headers.put(CLIENT_REQUEST_ID, DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID));\n+        headers.putAll(EstsTelemetry.getInstance().getTelemetryHeaders());\n+\n+        // Send request\n+        final HttpResponse response = HttpRequest.sendPost(\n+                new URL(urlBody),\n+                headers,\n+                requestBody.getBytes(ObjectMapper.ENCODING_SCHEME),\n+                DEVICE_CODE_CONTENT_TYPE\n+        );\n+\n+        // Create the authorization result\n+        // MicrosoftSTAuthorizationResultFactory not used since no Intent is being created\n+        AuthorizationResult authorizationResult;\n+\n+        // Check if the request was successful\n+        // Any code below 300 (HTTP_MULT_CHOICE) is considered a success\n+        if (response.getStatusCode() < HttpsURLConnection.HTTP_MULT_CHOICE){\n+            // Get and parse response body\n+            final HashMap<String, String> parsedResponseBody = new Gson().fromJson(response.getBody(), new TypeToken<HashMap<String, String>>() {}.getType());\n+\n+            // Create response and result objects\n+            // Not sure where \"code\" is stored. Not found in the input stream...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b27c7b68d8ea3c3e408da7dd9733120abb621a4d"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA1MzM0MA==", "bodyText": "nit: early return? (so there's no need to create a AuthorizationResult pointer in line 264).", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r466053340", "createdAt": "2020-08-05T23:10:06Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java", "diffHunk": "@@ -230,6 +240,70 @@ protected final void setAuthorizationEndpoint(final String authorizationEndpoint\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n+    public AuthorizationResult getDeviceCode(@NonNull final MicrosoftStsAuthorizationRequest authorizationRequest) throws IOException {\n+        final String methodName = \":getDeviceCode\";\n+\n+        final String urlBody = ((MicrosoftStsOAuth2Configuration) mConfig).getAuthorityUrl().toString() + \"/oauth2/v2.0/devicecode\";\n+\n+        // Set up headers and request body\n+        final String requestBody = ObjectMapper.serializeObjectToFormUrlEncoded(authorizationRequest);\n+        final Map<String, String> headers = new TreeMap<>();\n+        headers.put(CLIENT_REQUEST_ID, DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID));\n+        headers.putAll(EstsTelemetry.getInstance().getTelemetryHeaders());\n+\n+        // Send request\n+        final HttpResponse response = HttpRequest.sendPost(\n+                new URL(urlBody),\n+                headers,\n+                requestBody.getBytes(ObjectMapper.ENCODING_SCHEME),\n+                DEVICE_CODE_CONTENT_TYPE\n+        );\n+\n+        // Create the authorization result\n+        // MicrosoftSTAuthorizationResultFactory not used since no Intent is being created\n+        AuthorizationResult authorizationResult;\n+\n+        // Check if the request was successful\n+        // Any code below 300 (HTTP_MULT_CHOICE) is considered a success\n+        if (response.getStatusCode() < HttpsURLConnection.HTTP_MULT_CHOICE){\n+            // Get and parse response body\n+            final HashMap<String, String> parsedResponseBody = new Gson().fromJson(response.getBody(), new TypeToken<HashMap<String, String>>() {}.getType());\n+\n+            // Create response and result objects\n+            // Not sure where \"code\" is stored. Not found in the input stream...\n+            final MicrosoftStsAuthorizationResponse authorizationResponse =\n+                    new MicrosoftStsAuthorizationResponse(null, authorizationRequest.getState(), parsedResponseBody);\n+            authorizationResult = new MicrosoftStsAuthorizationResult(AuthorizationStatus.SUCCESS, authorizationResponse);\n+\n+            Logger.verbose(\n+                    TAG + methodName,\n+                    \"Device Code Flow authorization successful...\"\n+            );\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b27c7b68d8ea3c3e408da7dd9733120abb621a4d"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "204b114130fafbed33830c78a690e15300a3712e", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/204b114130fafbed33830c78a690e15300a3712e", "committedDate": "2020-08-06T00:37:57Z", "message": "Merge branch 'dev' into t-fadura/dcf-main"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e734989d4d301d63887a546ff6691e475acdee4", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/0e734989d4d301d63887a546ff6691e475acdee4", "committedDate": "2020-08-06T00:56:44Z", "message": "Telemetry emit for exception, other suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45ab12879adf4902d671b0c735f7316575b351ec", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/45ab12879adf4902d671b0c735f7316575b351ec", "committedDate": "2020-08-06T00:57:03Z", "message": "Merge branch 't-fadura/dcf-main' of https://github.com/AzureAD/microsoft-authentication-library-common-for-android into t-fadura/dcf-main"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1507, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}