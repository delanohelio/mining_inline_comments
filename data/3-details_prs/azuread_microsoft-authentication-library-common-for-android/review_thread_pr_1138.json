{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2MDU1NjIz", "number": 1138, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMTozMjoyNlrOE87kLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMjoxMzoxOVrOE9c5sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzI1OTM0OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/LogcatLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMTozMjoyNlrOH5V_xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMTo1Mjo1NFrOH6JIaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5MTI3MQ==", "bodyText": "Why?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r529891271", "createdAt": "2020-11-24T21:32:26Z", "author": {"login": "AdamBJohnsonx"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/LogcatLogger.java", "diffHunk": "@@ -0,0 +1,96 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import android.util.Log;\n+\n+import androidx.annotation.NonNull;\n+\n+import lombok.EqualsAndHashCode;\n+\n+/**\n+ * An implementation of {@link ILogger} to send logs to Android logcat. This is just a wrapper\n+ * around {@link Log} utility provided by Android. If you just want to purely send logs to logcat,\n+ * then you should not use this {@link LogcatLogger} and rather use the Android provided\n+ * {@link Log} API.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyOTA2Nw==", "bodyText": "Removed that statement after moving to appender model", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530729067", "createdAt": "2020-11-26T01:52:54Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/LogcatLogger.java", "diffHunk": "@@ -0,0 +1,96 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import android.util.Log;\n+\n+import androidx.annotation.NonNull;\n+\n+import lombok.EqualsAndHashCode;\n+\n+/**\n+ * An implementation of {@link ILogger} to send logs to Android logcat. This is just a wrapper\n+ * around {@link Log} utility provided by Android. If you just want to purely send logs to logcat,\n+ * then you should not use this {@link LogcatLogger} and rather use the Android provided\n+ * {@link Log} API.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5MTI3MQ=="}, "originalCommit": {"oid": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzI3MzQzOnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/ILogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMTozNjo1MlrOH5WICw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMTo1NDo0NFrOH6JKQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5MzM4Nw==", "bodyText": "A bug question: Do we need another interface here with our own logging system?  I was kind of hoping that we could shift to logback or slf4j so that we could have better control over the emitted messages, and so that we could get logging out of our dependencies that already use java.util.logging or some other mechanism.\nSo if we're going down this path, for the most part, logging subsystems at this point tend to split their functionality into two different pieces.  You have a Logger, which is the interface used by the code and knows nothing about how the data is consumed.  This typically translates whatever various inputs the user gives to it into a message class, potentially filtered by a configuration, and then forwards that message to a series of appenders.  The appenders are what takes care of writing things to files (in this case, though it could be sending things on a socket), and they can be configured and controlled on a finer granularity than what we have here.\nI'm just seeing us writing a lot of our own loggers (there's one in OneAuth, too).\nEdit: we talked about this. If we start trying to use this in common or MSAL we need to devote some engineering to it if we're not going to just use something else.  If it's just for tests, that's OK, but maybe split output management from log routing and log ingestion.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r529893387", "createdAt": "2020-11-24T21:36:52Z", "author": {"login": "AdamBJohnsonx"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/ILogger.java", "diffHunk": "@@ -0,0 +1,122 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import androidx.annotation.NonNull;\n+\n+/**\n+ * An interface for sending log messages.\n+ */\n+public interface ILogger {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyOTUzNw==", "bodyText": "Added an interface for appenders.....currently all logs are routed to all (registered) appenders...we could refactor in the future to route specific logs to specific appenders based on tags or something else.....will keep that out of scope of this PR", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530729537", "createdAt": "2020-11-26T01:54:44Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/ILogger.java", "diffHunk": "@@ -0,0 +1,122 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import androidx.annotation.NonNull;\n+\n+/**\n+ * An interface for sending log messages.\n+ */\n+public interface ILogger {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5MzM4Nw=="}, "originalCommit": {"oid": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzI4MTI4OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/Logger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMTozOToyNVrOH5WMyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMTo1NDo1NlrOH6JKcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5NDYwMg==", "bodyText": "nit: this doesn't appear to be abstract.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r529894602", "createdAt": "2020-11-24T21:39:25Z", "author": {"login": "AdamBJohnsonx"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/Logger.java", "diffHunk": "@@ -0,0 +1,160 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import androidx.annotation.NonNull;\n+\n+/**\n+ * An abstract logger to write/send logs. The actual implementation of logger used may differ.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyOTU4NQ==", "bodyText": "Addressed", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530729585", "createdAt": "2020-11-26T01:54:56Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/Logger.java", "diffHunk": "@@ -0,0 +1,160 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import androidx.annotation.NonNull;\n+\n+/**\n+ * An abstract logger to write/send logs. The actual implementation of logger used may differ.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5NDYwMg=="}, "originalCommit": {"oid": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzMwNDg0OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMTo0NTo1MVrOH5WaeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMTo1NToyMFrOH6JLOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5ODEwNA==", "bodyText": "If we split this as Logger/Appender, then output classes don't need to have level-specific methods.  It has one goal - every appender has a format, apply the format to the message and append the output to the output sink.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r529898104", "createdAt": "2020-11-24T21:45:51Z", "author": {"login": "AdamBJohnsonx"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java", "diffHunk": "@@ -0,0 +1,154 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.client.ui.automation.utils.AdbShellUtils;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import lombok.EqualsAndHashCode;\n+\n+/**\n+ * An implementation of {@link ILogger} to write logs to a file on desk. The filename must be\n+ * supplied to the FileLogger and the file will be created in the files directory reserved by the OS\n+ * for the calling application. This directory is what is returned by {@link Context#getFilesDir()}.\n+ */\n+@EqualsAndHashCode\n+public class FileLogger implements ILogger {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyOTc4Nw==", "bodyText": "Addressed by adding appender interface as suggested", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530729787", "createdAt": "2020-11-26T01:55:20Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java", "diffHunk": "@@ -0,0 +1,154 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.client.ui.automation.utils.AdbShellUtils;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import lombok.EqualsAndHashCode;\n+\n+/**\n+ * An implementation of {@link ILogger} to write logs to a file on desk. The filename must be\n+ * supplied to the FileLogger and the file will be created in the files directory reserved by the OS\n+ * for the calling application. This directory is what is returned by {@link Context#getFilesDir()}.\n+ */\n+@EqualsAndHashCode\n+public class FileLogger implements ILogger {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5ODEwNA=="}, "originalCommit": {"oid": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzMwODExOnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMTo0Njo0OVrOH5WceA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMTo1NjoxM1rOH6JMSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5ODYxNg==", "bodyText": "We probably don't want to open and close the file writer every log line write.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r529898616", "createdAt": "2020-11-24T21:46:49Z", "author": {"login": "AdamBJohnsonx"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java", "diffHunk": "@@ -0,0 +1,154 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.client.ui.automation.utils.AdbShellUtils;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import lombok.EqualsAndHashCode;\n+\n+/**\n+ * An implementation of {@link ILogger} to write logs to a file on desk. The filename must be\n+ * supplied to the FileLogger and the file will be created in the files directory reserved by the OS\n+ * for the calling application. This directory is what is returned by {@link Context#getFilesDir()}.\n+ */\n+@EqualsAndHashCode\n+public class FileLogger implements ILogger {\n+\n+    private static final String DATE_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n+\n+    private final String mFileName;\n+\n+    public FileLogger(@NonNull final String filename) {\n+        mFileName = filename;\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.ERROR, tag, message, null);\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.ERROR, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.WARN, tag, message, null);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.WARN, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.INFO, tag, message, null);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.INFO, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.VERBOSE, tag, message, null);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.VERBOSE, tag, message, exception);\n+    }\n+\n+    private void log(LogLevel logLevel, String tag, String message, Throwable throwable) {\n+        final String logMessage = formatMessage(logLevel, tag, message, throwable);\n+        writeLogToFile(logMessage);\n+    }\n+\n+    private void writeLogToFile(final String logMessage) {\n+        try {\n+            final File logFile = getLogFile();\n+            //BufferedWriter for performance, true to set append to file flag\n+            BufferedWriter buf = new BufferedWriter(new FileWriter(logFile, true));\n+            buf.append(logMessage);\n+            buf.newLine();\n+            buf.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMDA1OQ==", "bodyText": "Addressed....we will open the file on construction of the appender...I have also added a public method to close it if needed...and if someone calls that then we would also unregister the appender.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530730059", "createdAt": "2020-11-26T01:56:13Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java", "diffHunk": "@@ -0,0 +1,154 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.client.ui.automation.utils.AdbShellUtils;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import lombok.EqualsAndHashCode;\n+\n+/**\n+ * An implementation of {@link ILogger} to write logs to a file on desk. The filename must be\n+ * supplied to the FileLogger and the file will be created in the files directory reserved by the OS\n+ * for the calling application. This directory is what is returned by {@link Context#getFilesDir()}.\n+ */\n+@EqualsAndHashCode\n+public class FileLogger implements ILogger {\n+\n+    private static final String DATE_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n+\n+    private final String mFileName;\n+\n+    public FileLogger(@NonNull final String filename) {\n+        mFileName = filename;\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.ERROR, tag, message, null);\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.ERROR, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.WARN, tag, message, null);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.WARN, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.INFO, tag, message, null);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.INFO, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.VERBOSE, tag, message, null);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.VERBOSE, tag, message, exception);\n+    }\n+\n+    private void log(LogLevel logLevel, String tag, String message, Throwable throwable) {\n+        final String logMessage = formatMessage(logLevel, tag, message, throwable);\n+        writeLogToFile(logMessage);\n+    }\n+\n+    private void writeLogToFile(final String logMessage) {\n+        try {\n+            final File logFile = getLogFile();\n+            //BufferedWriter for performance, true to set append to file flag\n+            BufferedWriter buf = new BufferedWriter(new FileWriter(logFile, true));\n+            buf.append(logMessage);\n+            buf.newLine();\n+            buf.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5ODYxNg=="}, "originalCommit": {"oid": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzMyMjU0OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMTo0OTo1OFrOH5WlbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMTo1NjozOVrOH6JMyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkwMDkwOA==", "bodyText": "The question of how do you log error messages encountered while logging...I've written a loggerlogger before, to push my logging events that I got errors while logging to stderr and hope for the best.  That's probably what we want to do here, but using logcat.  It may need to be throttled.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r529900908", "createdAt": "2020-11-24T21:49:58Z", "author": {"login": "AdamBJohnsonx"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java", "diffHunk": "@@ -0,0 +1,154 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.client.ui.automation.utils.AdbShellUtils;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import lombok.EqualsAndHashCode;\n+\n+/**\n+ * An implementation of {@link ILogger} to write logs to a file on desk. The filename must be\n+ * supplied to the FileLogger and the file will be created in the files directory reserved by the OS\n+ * for the calling application. This directory is what is returned by {@link Context#getFilesDir()}.\n+ */\n+@EqualsAndHashCode\n+public class FileLogger implements ILogger {\n+\n+    private static final String DATE_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n+\n+    private final String mFileName;\n+\n+    public FileLogger(@NonNull final String filename) {\n+        mFileName = filename;\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.ERROR, tag, message, null);\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.ERROR, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.WARN, tag, message, null);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.WARN, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.INFO, tag, message, null);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.INFO, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.VERBOSE, tag, message, null);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.VERBOSE, tag, message, exception);\n+    }\n+\n+    private void log(LogLevel logLevel, String tag, String message, Throwable throwable) {\n+        final String logMessage = formatMessage(logLevel, tag, message, throwable);\n+        writeLogToFile(logMessage);\n+    }\n+\n+    private void writeLogToFile(final String logMessage) {\n+        try {\n+            final File logFile = getLogFile();\n+            //BufferedWriter for performance, true to set append to file flag\n+            BufferedWriter buf = new BufferedWriter(new FileWriter(logFile, true));\n+            buf.append(logMessage);\n+            buf.newLine();\n+            buf.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMDE4NA==", "bodyText": "Added exception logging using Android logcat", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530730184", "createdAt": "2020-11-26T01:56:39Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java", "diffHunk": "@@ -0,0 +1,154 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.client.ui.automation.utils.AdbShellUtils;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import lombok.EqualsAndHashCode;\n+\n+/**\n+ * An implementation of {@link ILogger} to write logs to a file on desk. The filename must be\n+ * supplied to the FileLogger and the file will be created in the files directory reserved by the OS\n+ * for the calling application. This directory is what is returned by {@link Context#getFilesDir()}.\n+ */\n+@EqualsAndHashCode\n+public class FileLogger implements ILogger {\n+\n+    private static final String DATE_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n+\n+    private final String mFileName;\n+\n+    public FileLogger(@NonNull final String filename) {\n+        mFileName = filename;\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.ERROR, tag, message, null);\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.ERROR, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.WARN, tag, message, null);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.WARN, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.INFO, tag, message, null);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.INFO, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.VERBOSE, tag, message, null);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.VERBOSE, tag, message, exception);\n+    }\n+\n+    private void log(LogLevel logLevel, String tag, String message, Throwable throwable) {\n+        final String logMessage = formatMessage(logLevel, tag, message, throwable);\n+        writeLogToFile(logMessage);\n+    }\n+\n+    private void writeLogToFile(final String logMessage) {\n+        try {\n+            final File logFile = getLogFile();\n+            //BufferedWriter for performance, true to set append to file flag\n+            BufferedWriter buf = new BufferedWriter(new FileWriter(logFile, true));\n+            buf.append(logMessage);\n+            buf.newLine();\n+            buf.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkwMDkwOA=="}, "originalCommit": {"oid": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzMzMTc3OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMTo1MToyMFrOH5Wrgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMTo1NzoxN1rOH6JNeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkwMjQ2Nw==", "bodyText": "Can we open this and create our bufferedWriter on construction?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r529902467", "createdAt": "2020-11-24T21:51:20Z", "author": {"login": "AdamBJohnsonx"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java", "diffHunk": "@@ -0,0 +1,154 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.client.ui.automation.utils.AdbShellUtils;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import lombok.EqualsAndHashCode;\n+\n+/**\n+ * An implementation of {@link ILogger} to write logs to a file on desk. The filename must be\n+ * supplied to the FileLogger and the file will be created in the files directory reserved by the OS\n+ * for the calling application. This directory is what is returned by {@link Context#getFilesDir()}.\n+ */\n+@EqualsAndHashCode\n+public class FileLogger implements ILogger {\n+\n+    private static final String DATE_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n+\n+    private final String mFileName;\n+\n+    public FileLogger(@NonNull final String filename) {\n+        mFileName = filename;\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.ERROR, tag, message, null);\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.ERROR, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.WARN, tag, message, null);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.WARN, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.INFO, tag, message, null);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.INFO, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.VERBOSE, tag, message, null);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.VERBOSE, tag, message, exception);\n+    }\n+\n+    private void log(LogLevel logLevel, String tag, String message, Throwable throwable) {\n+        final String logMessage = formatMessage(logLevel, tag, message, throwable);\n+        writeLogToFile(logMessage);\n+    }\n+\n+    private void writeLogToFile(final String logMessage) {\n+        try {\n+            final File logFile = getLogFile();\n+            //BufferedWriter for performance, true to set append to file flag\n+            BufferedWriter buf = new BufferedWriter(new FileWriter(logFile, true));\n+            buf.append(logMessage);\n+            buf.newLine();\n+            buf.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public File getLogFile() throws IOException {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        final File directory = context.getFilesDir();\n+        final File logFile = new File(directory, mFileName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMDM2MQ==", "bodyText": "Addressed by Open/Creating file and writer on construction of the appender.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530730361", "createdAt": "2020-11-26T01:57:17Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java", "diffHunk": "@@ -0,0 +1,154 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.client.ui.automation.utils.AdbShellUtils;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import lombok.EqualsAndHashCode;\n+\n+/**\n+ * An implementation of {@link ILogger} to write logs to a file on desk. The filename must be\n+ * supplied to the FileLogger and the file will be created in the files directory reserved by the OS\n+ * for the calling application. This directory is what is returned by {@link Context#getFilesDir()}.\n+ */\n+@EqualsAndHashCode\n+public class FileLogger implements ILogger {\n+\n+    private static final String DATE_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n+\n+    private final String mFileName;\n+\n+    public FileLogger(@NonNull final String filename) {\n+        mFileName = filename;\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.ERROR, tag, message, null);\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.ERROR, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.WARN, tag, message, null);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.WARN, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.INFO, tag, message, null);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.INFO, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.VERBOSE, tag, message, null);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.VERBOSE, tag, message, exception);\n+    }\n+\n+    private void log(LogLevel logLevel, String tag, String message, Throwable throwable) {\n+        final String logMessage = formatMessage(logLevel, tag, message, throwable);\n+        writeLogToFile(logMessage);\n+    }\n+\n+    private void writeLogToFile(final String logMessage) {\n+        try {\n+            final File logFile = getLogFile();\n+            //BufferedWriter for performance, true to set append to file flag\n+            BufferedWriter buf = new BufferedWriter(new FileWriter(logFile, true));\n+            buf.append(logMessage);\n+            buf.newLine();\n+            buf.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public File getLogFile() throws IOException {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        final File directory = context.getFilesDir();\n+        final File logFile = new File(directory, mFileName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkwMjQ2Nw=="}, "originalCommit": {"oid": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzM0ODI5OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMTo1NDowMVrOH5W2Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMTo1ODowMVrOH6JOJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkwNTI1NA==", "bodyText": "Rather than take this as given, can we delegate it to a LogFormat class that we could allow people to supply on contstruction?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r529905254", "createdAt": "2020-11-24T21:54:01Z", "author": {"login": "AdamBJohnsonx"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java", "diffHunk": "@@ -0,0 +1,154 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.client.ui.automation.utils.AdbShellUtils;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import lombok.EqualsAndHashCode;\n+\n+/**\n+ * An implementation of {@link ILogger} to write logs to a file on desk. The filename must be\n+ * supplied to the FileLogger and the file will be created in the files directory reserved by the OS\n+ * for the calling application. This directory is what is returned by {@link Context#getFilesDir()}.\n+ */\n+@EqualsAndHashCode\n+public class FileLogger implements ILogger {\n+\n+    private static final String DATE_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n+\n+    private final String mFileName;\n+\n+    public FileLogger(@NonNull final String filename) {\n+        mFileName = filename;\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.ERROR, tag, message, null);\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.ERROR, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.WARN, tag, message, null);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.WARN, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.INFO, tag, message, null);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.INFO, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.VERBOSE, tag, message, null);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.VERBOSE, tag, message, exception);\n+    }\n+\n+    private void log(LogLevel logLevel, String tag, String message, Throwable throwable) {\n+        final String logMessage = formatMessage(logLevel, tag, message, throwable);\n+        writeLogToFile(logMessage);\n+    }\n+\n+    private void writeLogToFile(final String logMessage) {\n+        try {\n+            final File logFile = getLogFile();\n+            //BufferedWriter for performance, true to set append to file flag\n+            BufferedWriter buf = new BufferedWriter(new FileWriter(logFile, true));\n+            buf.append(logMessage);\n+            buf.newLine();\n+            buf.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public File getLogFile() throws IOException {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        final File directory = context.getFilesDir();\n+        final File logFile = new File(directory, mFileName);\n+\n+        if (!logFile.exists()) {\n+            final boolean fileCreated = logFile.createNewFile();\n+            if (!fileCreated) {\n+                throw new IOException(\"Unable to create new log file :(\");\n+            }\n+        }\n+\n+        return logFile;\n+    }\n+\n+    public String getLogFileName() {\n+        return mFileName;\n+    }\n+\n+    private String formatMessage(\n+            @NonNull final LogLevel logLevel,\n+            @NonNull final String tag,\n+            @NonNull final String message,\n+            @Nullable final Throwable throwable) {\n+        final String logMessage = getUTCDateTimeAsString() + \": \" + logLevel.getLabel() + \"/\" + tag\n+                + \": \" + message;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMDUzMw==", "bodyText": "Added an interface for Log Formatter that will be suppled on construction.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530730533", "createdAt": "2020-11-26T01:58:01Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java", "diffHunk": "@@ -0,0 +1,154 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.client.ui.automation.utils.AdbShellUtils;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import lombok.EqualsAndHashCode;\n+\n+/**\n+ * An implementation of {@link ILogger} to write logs to a file on desk. The filename must be\n+ * supplied to the FileLogger and the file will be created in the files directory reserved by the OS\n+ * for the calling application. This directory is what is returned by {@link Context#getFilesDir()}.\n+ */\n+@EqualsAndHashCode\n+public class FileLogger implements ILogger {\n+\n+    private static final String DATE_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n+\n+    private final String mFileName;\n+\n+    public FileLogger(@NonNull final String filename) {\n+        mFileName = filename;\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.ERROR, tag, message, null);\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.ERROR, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.WARN, tag, message, null);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.WARN, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.INFO, tag, message, null);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.INFO, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.VERBOSE, tag, message, null);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.VERBOSE, tag, message, exception);\n+    }\n+\n+    private void log(LogLevel logLevel, String tag, String message, Throwable throwable) {\n+        final String logMessage = formatMessage(logLevel, tag, message, throwable);\n+        writeLogToFile(logMessage);\n+    }\n+\n+    private void writeLogToFile(final String logMessage) {\n+        try {\n+            final File logFile = getLogFile();\n+            //BufferedWriter for performance, true to set append to file flag\n+            BufferedWriter buf = new BufferedWriter(new FileWriter(logFile, true));\n+            buf.append(logMessage);\n+            buf.newLine();\n+            buf.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public File getLogFile() throws IOException {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        final File directory = context.getFilesDir();\n+        final File logFile = new File(directory, mFileName);\n+\n+        if (!logFile.exists()) {\n+            final boolean fileCreated = logFile.createNewFile();\n+            if (!fileCreated) {\n+                throw new IOException(\"Unable to create new log file :(\");\n+            }\n+        }\n+\n+        return logFile;\n+    }\n+\n+    public String getLogFileName() {\n+        return mFileName;\n+    }\n+\n+    private String formatMessage(\n+            @NonNull final LogLevel logLevel,\n+            @NonNull final String tag,\n+            @NonNull final String message,\n+            @Nullable final Throwable throwable) {\n+        final String logMessage = getUTCDateTimeAsString() + \": \" + logLevel.getLabel() + \"/\" + tag\n+                + \": \" + message;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkwNTI1NA=="}, "originalCommit": {"oid": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzM1MDcwOnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMTo1NDoyNFrOH5W4Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMTo1OToyOVrOH6JPsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkwNTY4Mw==", "bodyText": "We'll eventually need to put all the exception messaging on a single line, to deal with attacks against the logging stream.  Not as important for test frameworks, but depending on your ambitions here, you may want to consider that.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r529905683", "createdAt": "2020-11-24T21:54:24Z", "author": {"login": "AdamBJohnsonx"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java", "diffHunk": "@@ -0,0 +1,154 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.client.ui.automation.utils.AdbShellUtils;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import lombok.EqualsAndHashCode;\n+\n+/**\n+ * An implementation of {@link ILogger} to write logs to a file on desk. The filename must be\n+ * supplied to the FileLogger and the file will be created in the files directory reserved by the OS\n+ * for the calling application. This directory is what is returned by {@link Context#getFilesDir()}.\n+ */\n+@EqualsAndHashCode\n+public class FileLogger implements ILogger {\n+\n+    private static final String DATE_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n+\n+    private final String mFileName;\n+\n+    public FileLogger(@NonNull final String filename) {\n+        mFileName = filename;\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.ERROR, tag, message, null);\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.ERROR, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.WARN, tag, message, null);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.WARN, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.INFO, tag, message, null);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.INFO, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.VERBOSE, tag, message, null);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.VERBOSE, tag, message, exception);\n+    }\n+\n+    private void log(LogLevel logLevel, String tag, String message, Throwable throwable) {\n+        final String logMessage = formatMessage(logLevel, tag, message, throwable);\n+        writeLogToFile(logMessage);\n+    }\n+\n+    private void writeLogToFile(final String logMessage) {\n+        try {\n+            final File logFile = getLogFile();\n+            //BufferedWriter for performance, true to set append to file flag\n+            BufferedWriter buf = new BufferedWriter(new FileWriter(logFile, true));\n+            buf.append(logMessage);\n+            buf.newLine();\n+            buf.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public File getLogFile() throws IOException {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        final File directory = context.getFilesDir();\n+        final File logFile = new File(directory, mFileName);\n+\n+        if (!logFile.exists()) {\n+            final boolean fileCreated = logFile.createNewFile();\n+            if (!fileCreated) {\n+                throw new IOException(\"Unable to create new log file :(\");\n+            }\n+        }\n+\n+        return logFile;\n+    }\n+\n+    public String getLogFileName() {\n+        return mFileName;\n+    }\n+\n+    private String formatMessage(\n+            @NonNull final LogLevel logLevel,\n+            @NonNull final String tag,\n+            @NonNull final String message,\n+            @Nullable final Throwable throwable) {\n+        final String logMessage = getUTCDateTimeAsString() + \": \" + logLevel.getLabel() + \"/\" + tag\n+                + \": \" + message;\n+        return logMessage + (throwable == null ? \"\" : '\\n' + Log.getStackTraceString(throwable));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMDkzMA==", "bodyText": "Leaving as is for now", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530730930", "createdAt": "2020-11-26T01:59:29Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java", "diffHunk": "@@ -0,0 +1,154 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.client.ui.automation.utils.AdbShellUtils;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import lombok.EqualsAndHashCode;\n+\n+/**\n+ * An implementation of {@link ILogger} to write logs to a file on desk. The filename must be\n+ * supplied to the FileLogger and the file will be created in the files directory reserved by the OS\n+ * for the calling application. This directory is what is returned by {@link Context#getFilesDir()}.\n+ */\n+@EqualsAndHashCode\n+public class FileLogger implements ILogger {\n+\n+    private static final String DATE_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n+\n+    private final String mFileName;\n+\n+    public FileLogger(@NonNull final String filename) {\n+        mFileName = filename;\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.ERROR, tag, message, null);\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.ERROR, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.WARN, tag, message, null);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.WARN, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.INFO, tag, message, null);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.INFO, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.VERBOSE, tag, message, null);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.VERBOSE, tag, message, exception);\n+    }\n+\n+    private void log(LogLevel logLevel, String tag, String message, Throwable throwable) {\n+        final String logMessage = formatMessage(logLevel, tag, message, throwable);\n+        writeLogToFile(logMessage);\n+    }\n+\n+    private void writeLogToFile(final String logMessage) {\n+        try {\n+            final File logFile = getLogFile();\n+            //BufferedWriter for performance, true to set append to file flag\n+            BufferedWriter buf = new BufferedWriter(new FileWriter(logFile, true));\n+            buf.append(logMessage);\n+            buf.newLine();\n+            buf.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public File getLogFile() throws IOException {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        final File directory = context.getFilesDir();\n+        final File logFile = new File(directory, mFileName);\n+\n+        if (!logFile.exists()) {\n+            final boolean fileCreated = logFile.createNewFile();\n+            if (!fileCreated) {\n+                throw new IOException(\"Unable to create new log file :(\");\n+            }\n+        }\n+\n+        return logFile;\n+    }\n+\n+    public String getLogFileName() {\n+        return mFileName;\n+    }\n+\n+    private String formatMessage(\n+            @NonNull final LogLevel logLevel,\n+            @NonNull final String tag,\n+            @NonNull final String message,\n+            @Nullable final Throwable throwable) {\n+        final String logMessage = getUTCDateTimeAsString() + \": \" + logLevel.getLabel() + \"/\" + tag\n+                + \": \" + message;\n+        return logMessage + (throwable == null ? \"\" : '\\n' + Log.getStackTraceString(throwable));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkwNTY4Mw=="}, "originalCommit": {"oid": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzU3MzM1OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjoyODo1MlrOH5ZHhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjoyODo1MlrOH5ZHhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk0MjQwNA==", "bodyText": "Can we, conditionally, on API > 26, use the java.time methods for this rather than SimpleDateFormat?\nSomething like:\n// Alternately, use ISO_INSTANT here.\nreturn DateTimeFormatter .RFC_1123_DATE_TIME.format(Instant.now());", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r529942404", "createdAt": "2020-11-24T22:28:52Z", "author": {"login": "AdamBJohnsonx"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java", "diffHunk": "@@ -0,0 +1,154 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.client.ui.automation.utils.AdbShellUtils;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import lombok.EqualsAndHashCode;\n+\n+/**\n+ * An implementation of {@link ILogger} to write logs to a file on desk. The filename must be\n+ * supplied to the FileLogger and the file will be created in the files directory reserved by the OS\n+ * for the calling application. This directory is what is returned by {@link Context#getFilesDir()}.\n+ */\n+@EqualsAndHashCode\n+public class FileLogger implements ILogger {\n+\n+    private static final String DATE_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n+\n+    private final String mFileName;\n+\n+    public FileLogger(@NonNull final String filename) {\n+        mFileName = filename;\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.ERROR, tag, message, null);\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.ERROR, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.WARN, tag, message, null);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.WARN, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.INFO, tag, message, null);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.INFO, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.VERBOSE, tag, message, null);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.VERBOSE, tag, message, exception);\n+    }\n+\n+    private void log(LogLevel logLevel, String tag, String message, Throwable throwable) {\n+        final String logMessage = formatMessage(logLevel, tag, message, throwable);\n+        writeLogToFile(logMessage);\n+    }\n+\n+    private void writeLogToFile(final String logMessage) {\n+        try {\n+            final File logFile = getLogFile();\n+            //BufferedWriter for performance, true to set append to file flag\n+            BufferedWriter buf = new BufferedWriter(new FileWriter(logFile, true));\n+            buf.append(logMessage);\n+            buf.newLine();\n+            buf.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public File getLogFile() throws IOException {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        final File directory = context.getFilesDir();\n+        final File logFile = new File(directory, mFileName);\n+\n+        if (!logFile.exists()) {\n+            final boolean fileCreated = logFile.createNewFile();\n+            if (!fileCreated) {\n+                throw new IOException(\"Unable to create new log file :(\");\n+            }\n+        }\n+\n+        return logFile;\n+    }\n+\n+    public String getLogFileName() {\n+        return mFileName;\n+    }\n+\n+    private String formatMessage(\n+            @NonNull final LogLevel logLevel,\n+            @NonNull final String tag,\n+            @NonNull final String message,\n+            @Nullable final Throwable throwable) {\n+        final String logMessage = getUTCDateTimeAsString() + \": \" + logLevel.getLabel() + \"/\" + tag\n+                + \": \" + message;\n+        return logMessage + (throwable == null ? \"\" : '\\n' + Log.getStackTraceString(throwable));\n+    }\n+\n+    private static String getUTCDateTimeAsString() {\n+        final SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT, Locale.getDefault());\n+        dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+\n+        return dateFormat.format(new Date());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzYyNDI0OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/LoggerRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjozNjo0NVrOH5ZoOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMTo1OTo0N1rOH6JQCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk1MDc3OQ==", "bodyText": "Anyway, if you adopt my suggestion this becomes an AppenderRegistry instead of a Logger registry.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r529950779", "createdAt": "2020-11-24T22:36:45Z", "author": {"login": "AdamBJohnsonx"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/LoggerRegistry.java", "diffHunk": "@@ -0,0 +1,79 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * A registry that holds all the loggers in use by the {@link Logger}.\n+ */\n+public class LoggerRegistry {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMTAxNg==", "bodyText": "Renamed to AppenderRegistry", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530731016", "createdAt": "2020-11-26T01:59:47Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/LoggerRegistry.java", "diffHunk": "@@ -0,0 +1,79 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * A registry that holds all the loggers in use by the {@link Logger}.\n+ */\n+public class LoggerRegistry {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk1MDc3OQ=="}, "originalCommit": {"oid": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzYzODA4OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/BrokerSupportRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjozODo0OVrOH5ZxGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMjowMDo0OFrOH6JRJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk1MzA0OQ==", "bodyText": "Here's an opportunity: instead of using static references inline, can we take a per-class instance as a static variable?  That would align us with normal logging anyway.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r529953049", "createdAt": "2020-11-24T22:38:49Z", "author": {"login": "AdamBJohnsonx"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/BrokerSupportRule.java", "diffHunk": "@@ -61,7 +62,7 @@ public Statement apply(final Statement base, final Description description) {\n         return new Statement() {\n             @Override\n             public void evaluate() throws Throwable {\n-                Log.i(TAG, \"Applying rule....\");\n+                Logger.i(TAG, \"Applying rule....\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMTMwMA==", "bodyText": "As discussed on chat the other day....keeping static references for now....we could do this later in a separate PR if needed.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530731300", "createdAt": "2020-11-26T02:00:48Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/BrokerSupportRule.java", "diffHunk": "@@ -61,7 +62,7 @@ public Statement apply(final Statement base, final Description description) {\n         return new Statement() {\n             @Override\n             public void evaluate() throws Throwable {\n-                Log.i(TAG, \"Applying rule....\");\n+                Logger.i(TAG, \"Applying rule....\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk1MzA0OQ=="}, "originalCommit": {"oid": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzY2Nzg4OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/Logger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjo0MzowM1rOH5aDQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMjowMToyOVrOH6JRzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk1NzY5Ng==", "bodyText": "If this became a LoggerFactory that generated ILogger instances on a per-tag basis that delegated to all registered appenders (potentially for that tag) you'd have something that looked a lot like log4j and java.util.Logging.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r529957696", "createdAt": "2020-11-24T22:43:03Z", "author": {"login": "AdamBJohnsonx"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/Logger.java", "diffHunk": "@@ -0,0 +1,160 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import androidx.annotation.NonNull;\n+\n+/**\n+ * An abstract logger to write/send logs. The actual implementation of logger used may differ.\n+ * The logger must be registered with the {@link LoggerRegistry} to use that logging implementation.\n+ */\n+public class Logger {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMTQ3MA==", "bodyText": "As discussed on chat the other day....not moving for factory pattern yet....keeping static references for now....we could do this later in a separate PR if needed.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530731470", "createdAt": "2020-11-26T02:01:29Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/Logger.java", "diffHunk": "@@ -0,0 +1,160 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import androidx.annotation.NonNull;\n+\n+/**\n+ * An abstract logger to write/send logs. The actual implementation of logger used may differ.\n+ * The logger must be registered with the {@link LoggerRegistry} to use that logging implementation.\n+ */\n+public class Logger {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk1NzY5Ng=="}, "originalCommit": {"oid": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzY4OTI4OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/utils/CommonUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjo0NjoyMVrOH5aQug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMTo1MjoyOFrOH6JH-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2MTE0Ng==", "bodyText": "Nit:\nreturn Arrays.asList(new BrokerCompanyPortal(), new BrokerMicrosoftAuthenticator(), new BrokerHost());", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r529961146", "createdAt": "2020-11-24T22:46:21Z", "author": {"login": "AdamBJohnsonx"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/utils/CommonUtils.java", "diffHunk": "@@ -123,11 +127,34 @@ public static boolean isPackageInstalled(@NonNull final String packageName) {\n         return false;\n     }\n \n+    /**\n+     * Get a list of all brokers supported by our MSAL/ADAL sdks. These list contains all possible\n+     * broker apps regardless of active build variant.\n+     *\n+     * @return a {@link List} of {@link ITestBroker} objects\n+     */\n     public static List<ITestBroker> getAllPossibleTestBrokers() {\n         final List<ITestBroker> brokerList = new ArrayList<>();\n         brokerList.add(new BrokerCompanyPortal());\n         brokerList.add(new BrokerMicrosoftAuthenticator());\n         brokerList.add(new BrokerHost());\n         return brokerList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2MjE5Ng==", "bodyText": "(it might need help to understand the type of the array, in which case new ITestBroker[]{...})", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r529962196", "createdAt": "2020-11-24T22:47:23Z", "author": {"login": "AdamBJohnsonx"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/utils/CommonUtils.java", "diffHunk": "@@ -123,11 +127,34 @@ public static boolean isPackageInstalled(@NonNull final String packageName) {\n         return false;\n     }\n \n+    /**\n+     * Get a list of all brokers supported by our MSAL/ADAL sdks. These list contains all possible\n+     * broker apps regardless of active build variant.\n+     *\n+     * @return a {@link List} of {@link ITestBroker} objects\n+     */\n     public static List<ITestBroker> getAllPossibleTestBrokers() {\n         final List<ITestBroker> brokerList = new ArrayList<>();\n         brokerList.add(new BrokerCompanyPortal());\n         brokerList.add(new BrokerMicrosoftAuthenticator());\n         brokerList.add(new BrokerHost());\n         return brokerList;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2MTE0Ng=="}, "originalCommit": {"oid": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyODk1Mg==", "bodyText": "Addressed", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530728952", "createdAt": "2020-11-26T01:52:28Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/utils/CommonUtils.java", "diffHunk": "@@ -123,11 +127,34 @@ public static boolean isPackageInstalled(@NonNull final String packageName) {\n         return false;\n     }\n \n+    /**\n+     * Get a list of all brokers supported by our MSAL/ADAL sdks. These list contains all possible\n+     * broker apps regardless of active build variant.\n+     *\n+     * @return a {@link List} of {@link ITestBroker} objects\n+     */\n     public static List<ITestBroker> getAllPossibleTestBrokers() {\n         final List<ITestBroker> brokerList = new ArrayList<>();\n         brokerList.add(new BrokerCompanyPortal());\n         brokerList.add(new BrokerMicrosoftAuthenticator());\n         brokerList.add(new BrokerHost());\n         return brokerList;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2MTE0Ng=="}, "originalCommit": {"oid": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzcwOTc5OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/utils/AdbShellUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjo0OTo0NFrOH5aeYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMTo1MjoyMVrOH6JH3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2NDY0MA==", "bodyText": "You may want to check for existence, or use -p to tolerate it if it's already there.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    executeShellCommand(\"mkdir /sdcard/automation\");\n          \n          \n            \n                    executeShellCommand(\"mkdir -p /sdcard/automation\");", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r529964640", "createdAt": "2020-11-24T22:49:44Z", "author": {"login": "AdamBJohnsonx"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/utils/AdbShellUtils.java", "diffHunk": "@@ -150,4 +163,9 @@ public static void copyApkForPackage(@NonNull final String packageName,\n     public static void copyFile(@NonNull final String srcFile, @NonNull final String destFile) {\n         executeShellCommand(\"cp \" + srcFile + \" \" + destFile);\n     }\n+\n+    public static void copyToSdCard(@NonNull final String srcFile, @NonNull final String destFile) {\n+        executeShellCommand(\"mkdir /sdcard/automation\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyODkyNw==", "bodyText": "Addressed", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530728927", "createdAt": "2020-11-26T01:52:21Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/utils/AdbShellUtils.java", "diffHunk": "@@ -150,4 +163,9 @@ public static void copyApkForPackage(@NonNull final String packageName,\n     public static void copyFile(@NonNull final String srcFile, @NonNull final String destFile) {\n         executeShellCommand(\"cp \" + srcFile + \" \" + destFile);\n     }\n+\n+    public static void copyToSdCard(@NonNull final String srcFile, @NonNull final String destFile) {\n+        executeShellCommand(\"mkdir /sdcard/automation\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2NDY0MA=="}, "originalCommit": {"oid": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODcwNjAyOnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/appender/AppenderRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMjowNDozMFrOH6JUzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQyMDowNDo1OVrOH7c2zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMjIzNg==", "bodyText": "nit: since this is a set, and our primary use case is iterating it, a LinkedHashSet will be slightly more efficient.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530732236", "createdAt": "2020-11-26T02:04:30Z", "author": {"login": "AdamBJohnsonx"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/appender/AppenderRegistry.java", "diffHunk": "@@ -0,0 +1,81 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging.appender;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.ui.automation.logging.Logger;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * A registry that holds all the loggers in use by the {@link Logger}.\n+ */\n+public class AppenderRegistry {\n+\n+    private static final AppenderRegistry INSTANCE = new AppenderRegistry();\n+\n+    private final Set<IAppender> mRegisteredAppenders = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "434b41f2dfe7211bd4174ed0be007b194ded1f49"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwMDgxMw==", "bodyText": "Addressed", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r532100813", "createdAt": "2020-11-28T20:04:59Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/appender/AppenderRegistry.java", "diffHunk": "@@ -0,0 +1,81 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging.appender;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.ui.automation.logging.Logger;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * A registry that holds all the loggers in use by the {@link Logger}.\n+ */\n+public class AppenderRegistry {\n+\n+    private static final AppenderRegistry INSTANCE = new AppenderRegistry();\n+\n+    private final Set<IAppender> mRegisteredAppenders = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMjIzNg=="}, "originalCommit": {"oid": "434b41f2dfe7211bd4174ed0be007b194ded1f49"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODcxMDYxOnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/appender/ConsoleAppender.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMjowNzowN1rOH6JXbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQyMDowNTowNFrOH7c2zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMjkwOQ==", "bodyText": "nit: an AbstractAppender might be overkill, but would simplify these classes further.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530732909", "createdAt": "2020-11-26T02:07:07Z", "author": {"login": "AdamBJohnsonx"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/appender/ConsoleAppender.java", "diffHunk": "@@ -0,0 +1,44 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging.appender;\n+\n+import com.microsoft.identity.client.ui.automation.logging.LogLevel;\n+import com.microsoft.identity.client.ui.automation.logging.formatter.ILogFormatter;\n+\n+/**\n+ * An implementation of {@link IAppender} to send logs to Console (Standard Output).\n+ */\n+public class ConsoleAppender implements IAppender {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "434b41f2dfe7211bd4174ed0be007b194ded1f49"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwMDgxNQ==", "bodyText": "Addressed", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r532100815", "createdAt": "2020-11-28T20:05:04Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/appender/ConsoleAppender.java", "diffHunk": "@@ -0,0 +1,44 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging.appender;\n+\n+import com.microsoft.identity.client.ui.automation.logging.LogLevel;\n+import com.microsoft.identity.client.ui.automation.logging.formatter.ILogFormatter;\n+\n+/**\n+ * An implementation of {@link IAppender} to send logs to Console (Standard Output).\n+ */\n+public class ConsoleAppender implements IAppender {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMjkwOQ=="}, "originalCommit": {"oid": "434b41f2dfe7211bd4174ed0be007b194ded1f49"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODcyMTE0OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/appender/FileAppender.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMjoxMzoxOVrOH6Jdew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQyMDowNTowOVrOH7c23g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczNDQ1OQ==", "bodyText": "Just a thought - you might want to flush this writer every line.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530734459", "createdAt": "2020-11-26T02:13:19Z", "author": {"login": "AdamBJohnsonx"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/appender/FileAppender.java", "diffHunk": "@@ -0,0 +1,131 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging.appender;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import androidx.annotation.NonNull;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.client.ui.automation.logging.LogLevel;\n+import com.microsoft.identity.client.ui.automation.logging.formatter.ILogFormatter;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+\n+/**\n+ * An implementation of {@link IAppender} to write logs to a file on desk. The filename must be\n+ * supplied to the FileLogger and the file will be created in the files directory reserved by the OS\n+ * for the calling application. This directory is what is returned by {@link Context#getFilesDir()}.\n+ */\n+public class FileAppender implements IAppender {\n+\n+    private static final String TAG = FileAppender.class.getSimpleName();\n+\n+    private final String mFileName;\n+    private final File mLogFile;\n+    private final BufferedWriter mBufferedWriter;\n+    private final ILogFormatter mLogFormatter;\n+\n+    /**\n+     * Constructor for create a new File Appender object. This file appender will write logs to a\n+     * log file with the name that is supplied via this constructor. It will throw an\n+     * {@link IOException} if an error occurs while trying to create and open the log file.\n+     *\n+     * @param filename     the filename to use while creating log file\n+     * @param logFormatter the log formatter to use while writing logs to file\n+     * @throws IOException an exception that is thrown if an error occurs while creating log file\n+     */\n+    public FileAppender(@NonNull final String filename, @NonNull final ILogFormatter logFormatter) throws IOException {\n+        mFileName = filename;\n+        mLogFile = createLogFile(filename);\n+        mBufferedWriter = new BufferedWriter(new FileWriter(mLogFile, true));\n+        mLogFormatter = logFormatter;\n+    }\n+\n+    @Override\n+    public void append(LogLevel logLevel, String tag, String message, Throwable throwable) {\n+        final String logMessage = mLogFormatter.format(logLevel, tag, message, throwable);\n+        try {\n+            writeUsingBufferedWriter(logMessage);\n+        } catch (final IOException e) {\n+            Log.e(TAG, \"Error while trying to write log to file.\", e);\n+        }\n+    }\n+\n+    private void writeUsingBufferedWriter(final String message) throws IOException {\n+        mBufferedWriter.append(message);\n+        mBufferedWriter.newLine();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59c760671c440684f04561d6a520fd0bf9c03a27"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwMDgzMA==", "bodyText": "Addressed", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r532100830", "createdAt": "2020-11-28T20:05:09Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/appender/FileAppender.java", "diffHunk": "@@ -0,0 +1,131 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging.appender;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import androidx.annotation.NonNull;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.client.ui.automation.logging.LogLevel;\n+import com.microsoft.identity.client.ui.automation.logging.formatter.ILogFormatter;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+\n+/**\n+ * An implementation of {@link IAppender} to write logs to a file on desk. The filename must be\n+ * supplied to the FileLogger and the file will be created in the files directory reserved by the OS\n+ * for the calling application. This directory is what is returned by {@link Context#getFilesDir()}.\n+ */\n+public class FileAppender implements IAppender {\n+\n+    private static final String TAG = FileAppender.class.getSimpleName();\n+\n+    private final String mFileName;\n+    private final File mLogFile;\n+    private final BufferedWriter mBufferedWriter;\n+    private final ILogFormatter mLogFormatter;\n+\n+    /**\n+     * Constructor for create a new File Appender object. This file appender will write logs to a\n+     * log file with the name that is supplied via this constructor. It will throw an\n+     * {@link IOException} if an error occurs while trying to create and open the log file.\n+     *\n+     * @param filename     the filename to use while creating log file\n+     * @param logFormatter the log formatter to use while writing logs to file\n+     * @throws IOException an exception that is thrown if an error occurs while creating log file\n+     */\n+    public FileAppender(@NonNull final String filename, @NonNull final ILogFormatter logFormatter) throws IOException {\n+        mFileName = filename;\n+        mLogFile = createLogFile(filename);\n+        mBufferedWriter = new BufferedWriter(new FileWriter(mLogFile, true));\n+        mLogFormatter = logFormatter;\n+    }\n+\n+    @Override\n+    public void append(LogLevel logLevel, String tag, String message, Throwable throwable) {\n+        final String logMessage = mLogFormatter.format(logLevel, tag, message, throwable);\n+        try {\n+            writeUsingBufferedWriter(logMessage);\n+        } catch (final IOException e) {\n+            Log.e(TAG, \"Error while trying to write log to file.\", e);\n+        }\n+    }\n+\n+    private void writeUsingBufferedWriter(final String message) throws IOException {\n+        mBufferedWriter.append(message);\n+        mBufferedWriter.newLine();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczNDQ1OQ=="}, "originalCommit": {"oid": "59c760671c440684f04561d6a520fd0bf9c03a27"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2102, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}