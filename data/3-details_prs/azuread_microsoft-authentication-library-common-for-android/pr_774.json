{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNjgzODY3", "number": 774, "title": "Added new public api to save credentials directly", "bodyText": "Changed was required to support MSAL CPP adapters", "createdAt": "2020-01-11T02:13:40Z", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/774", "merged": true, "mergeCommit": {"oid": "5a6f43cd30ff8d8ec237329934123eaaf4faa498"}, "closed": true, "closedAt": "2020-01-14T00:17:27Z", "author": {"login": "kreedula"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb5JfB3gH2gAyMzYxNjgzODY3OjVhMTFhM2I3YzZjMzg1NjE3NWRjY2ZiNTRhZjg3OGM5N2Y2NWIyNGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb6HfQqgFqTM0MjI1OTcxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5a11a3b7c6c3856175dccfb54af878c97f65b24a", "author": {"user": null}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/5a11a3b7c6c3856175dccfb54af878c97f65b24a", "committedDate": "2020-01-11T02:11:39Z", "message": "Added new public api to save credentials directly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f901cea5d9f6da633a7e5c0d8034982f83adc3b5", "author": {"user": null}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/f901cea5d9f6da633a7e5c0d8034982f83adc3b5", "committedDate": "2020-01-13T22:04:34Z", "message": "Remove unused method to fix pmd"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMTc0NDI2", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/774#pullrequestreview-342174426", "createdAt": "2020-01-13T22:10:52Z", "commit": {"oid": "f901cea5d9f6da633a7e5c0d8034982f83adc3b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjoxMDo1MlrOFdGSXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjoxMDo1MlrOFdGSXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA1NjAzMQ==", "bodyText": "Optionally you could test if this array is isEmpty()", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/774#discussion_r366056031", "createdAt": "2020-01-13T22:10:52Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -151,6 +152,52 @@ public MsalOAuth2TokenCache(final Context context,\n         );\n     }\n \n+    /**\n+     * @param accountRecord : AccountRecord associated with the input credentials.\n+     * @param credentials   : list of Credential which can include AccessTokenRecord, IdTokenRecord and RefreshTokenRecord.\n+     *                      Note : Both IdTokenRecord and RefreshTokenRecord need to be non null. AccessTokenRecord can be optional.\n+     * @throws ClientException : If the supplied Account or Credential are null or schema invalid.\n+     */\n+    public void saveCredentials(@NonNull final AccountRecord accountRecord,\n+                                @NonNull final Credential... credentials) throws ClientException {\n+        if (credentials == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f901cea5d9f6da633a7e5c0d8034982f83adc3b5"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMTc0NTg1", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/774#pullrequestreview-342174585", "createdAt": "2020-01-13T22:11:02Z", "commit": {"oid": "f901cea5d9f6da633a7e5c0d8034982f83adc3b5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMTgwNzk4", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/774#pullrequestreview-342180798", "createdAt": "2020-01-13T22:23:18Z", "commit": {"oid": "5a11a3b7c6c3856175dccfb54af878c97f65b24a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjoyMzoxOFrOFdGl2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjoyMzoxOFrOFdGl2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2MTAxNw==", "bodyText": "I'm thinking if we should override this class and add this method only in the inherited classs (i.e. MsalCppOAuth2TokenCache).\nThis way, we would be able to minimize exposing this to MSAL devs.\nWe can mark the original saveCredentials as protected.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/774#discussion_r366061017", "createdAt": "2020-01-13T22:23:18Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -151,6 +152,52 @@ public MsalOAuth2TokenCache(final Context context,\n         );\n     }\n \n+    /**\n+     * @param accountRecord : AccountRecord associated with the input credentials.\n+     * @param credentials   : list of Credential which can include AccessTokenRecord, IdTokenRecord and RefreshTokenRecord.\n+     *                      Note : Both IdTokenRecord and RefreshTokenRecord need to be non null. AccessTokenRecord can be optional.\n+     * @throws ClientException : If the supplied Account or Credential are null or schema invalid.\n+     */\n+    public void saveCredentials(@NonNull final AccountRecord accountRecord,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a11a3b7c6c3856175dccfb54af878c97f65b24a"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMTgyMzA3", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/774#pullrequestreview-342182307", "createdAt": "2020-01-13T22:26:25Z", "commit": {"oid": "f901cea5d9f6da633a7e5c0d8034982f83adc3b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjoyNjoyNVrOFdGq2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjoyNjoyNVrOFdGq2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2MjI5OQ==", "bodyText": "Should we explicitly list these three records in the params? (instead of passing it as an array).", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/774#discussion_r366062299", "createdAt": "2020-01-13T22:26:25Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -151,6 +152,52 @@ public MsalOAuth2TokenCache(final Context context,\n         );\n     }\n \n+    /**\n+     * @param accountRecord : AccountRecord associated with the input credentials.\n+     * @param credentials   : list of Credential which can include AccessTokenRecord, IdTokenRecord and RefreshTokenRecord.\n+     *                      Note : Both IdTokenRecord and RefreshTokenRecord need to be non null. AccessTokenRecord can be optional.\n+     * @throws ClientException : If the supplied Account or Credential are null or schema invalid.\n+     */\n+    public void saveCredentials(@NonNull final AccountRecord accountRecord,\n+                                @NonNull final Credential... credentials) throws ClientException {\n+        if (credentials == null) {\n+            throw new ClientException(\"Credential array passed in is null\");\n+        }\n+\n+        AccessTokenRecord accessTokenRecord = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f901cea5d9f6da633a7e5c0d8034982f83adc3b5"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMTgzNjYy", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/774#pullrequestreview-342183662", "createdAt": "2020-01-13T22:29:12Z", "commit": {"oid": "f901cea5d9f6da633a7e5c0d8034982f83adc3b5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70eadd72ea8ad7259a1354c887f0b3603c00e8ba", "author": {"user": null}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/70eadd72ea8ad7259a1354c887f0b3603c00e8ba", "committedDate": "2020-01-13T22:51:32Z", "message": "Addressing comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "495e92a65562b0b39253a4c48f3d2eeb05ad7b69", "author": {"user": null}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/495e92a65562b0b39253a4c48f3d2eeb05ad7b69", "committedDate": "2020-01-13T22:54:08Z", "message": "Addressing more comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc08e34c2d5ea36cb41de08f33fe756d0b57e895", "author": {"user": null}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/dc08e34c2d5ea36cb41de08f33fe756d0b57e895", "committedDate": "2020-01-13T23:13:57Z", "message": "Added new factory method for MSALCppOAuth2Cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbaaba48c80bed44ec6cf1a6e718496c504effee", "author": {"user": null}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/bbaaba48c80bed44ec6cf1a6e718496c504effee", "committedDate": "2020-01-13T23:16:19Z", "message": "Formatting changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMjIyOTU3", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/774#pullrequestreview-342222957", "createdAt": "2020-01-14T00:12:46Z", "commit": {"oid": "bbaaba48c80bed44ec6cf1a6e718496c504effee"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMjU5NzEz", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/774#pullrequestreview-342259713", "createdAt": "2020-01-14T02:26:00Z", "commit": {"oid": "bbaaba48c80bed44ec6cf1a6e718496c504effee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMjoyNjowMFrOFdKk-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMjoyNjowMFrOFdKk-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEyNjMzMA==", "bodyText": "@kreedula It occurs to me now that we ought to add some thread safety around this API -- if a few different threads start calling removeRefreshTokenIfNeeded() simultaneously we're going to have race conditions writing/reading from disk (saving new RTs while writing deleting old ones)", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/774#discussion_r366126330", "createdAt": "2020-01-14T02:26:00Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalCppOAuth2TokenCache.java", "diffHunk": "@@ -0,0 +1,151 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.cache;\n+\n+import android.content.Context;\n+\n+import com.microsoft.identity.common.BaseAccount;\n+import com.microsoft.identity.common.adal.internal.cache.IStorageHelper;\n+import com.microsoft.identity.common.adal.internal.cache.StorageHelper;\n+import com.microsoft.identity.common.adal.internal.util.StringExtensions;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.internal.dto.AccessTokenRecord;\n+import com.microsoft.identity.common.internal.dto.AccountCredentialBase;\n+import com.microsoft.identity.common.internal.dto.AccountRecord;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+import com.microsoft.identity.common.internal.dto.IdTokenRecord;\n+import com.microsoft.identity.common.internal.dto.RefreshTokenRecord;\n+import com.microsoft.identity.common.internal.logging.Logger;\n+import com.microsoft.identity.common.internal.providers.microsoft.MicrosoftAccount;\n+import com.microsoft.identity.common.internal.providers.microsoft.MicrosoftRefreshToken;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationRequest;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsTokenResponse;\n+import com.microsoft.identity.common.internal.providers.oauth2.AuthorizationRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2TokenCache;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenResponse;\n+import com.microsoft.identity.common.internal.telemetry.Telemetry;\n+import com.microsoft.identity.common.internal.telemetry.events.CacheEndEvent;\n+import com.microsoft.identity.common.internal.telemetry.events.CacheStartEvent;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import static com.microsoft.identity.common.exception.ErrorStrings.ACCOUNT_IS_SCHEMA_NONCOMPLIANT;\n+import static com.microsoft.identity.common.exception.ErrorStrings.CREDENTIAL_IS_SCHEMA_NONCOMPLIANT;\n+import static com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache.DEFAULT_ACCOUNT_CREDENTIAL_SHARED_PREFERENCES;\n+import static com.microsoft.identity.common.internal.dto.CredentialType.ID_TOKEN_TYPES;\n+\n+/**\n+ * Sub class of {@link MsalCppOAuth2TokenCache} to add specific public api's required for MSAL CPP library.\n+ */\n+public class MsalCppOAuth2TokenCache\n+        <GenericOAuth2Strategy extends OAuth2Strategy,\n+                GenericAuthorizationRequest extends AuthorizationRequest,\n+                GenericTokenResponse extends TokenResponse,\n+                GenericAccount extends BaseAccount,\n+                GenericRefreshToken extends com.microsoft.identity.common.internal.providers.oauth2.RefreshToken>\n+        extends MsalOAuth2TokenCache<\n+        GenericOAuth2Strategy,\n+        GenericAuthorizationRequest,\n+        GenericTokenResponse,\n+        GenericAccount,\n+        GenericRefreshToken> {\n+\n+\n+    /**\n+     * Constructor of MsalOAuth2TokenCache.\n+     *\n+     * @param context                  Context\n+     * @param accountCredentialCache   IAccountCredentialCache\n+     * @param accountCredentialAdapter IAccountCredentialAdapter\n+     */\n+    private MsalCppOAuth2TokenCache(final Context context,\n+                                   final IAccountCredentialCache accountCredentialCache,\n+                                   final IAccountCredentialAdapter accountCredentialAdapter) {\n+        super(context, accountCredentialCache, accountCredentialAdapter);\n+    }\n+\n+    /**\n+     * Factory method for creating an instance of MsalCppOAuth2TokenCache\n+     * <p>\n+     * NOTE: Currently this is configured for AAD v2 as the only IDP\n+     *\n+     * @param context The Application Context\n+     * @return An instance of the MsalCppOAuth2TokenCache.\n+     */\n+    public static MsalCppOAuth2TokenCache create(@NonNull final Context context){\n+        final MsalOAuth2TokenCache msalOAuth2TokenCache = MsalOAuth2TokenCache.create(context);\n+        return new MsalCppOAuth2TokenCache(\n+                context,\n+                msalOAuth2TokenCache.getAccountCredentialCache(),\n+                msalOAuth2TokenCache.getAccountCredentialAdapter()\n+        );\n+    }\n+\n+    /**\n+     * @param accountRecord : AccountRecord associated with the input credentials.\n+     * @param credentials   : list of Credential which can include AccessTokenRecord, IdTokenRecord and RefreshTokenRecord.\n+     *                      Note : Both IdTokenRecord and RefreshTokenRecord need to be non null. AccessTokenRecord can be optional.\n+     * @throws ClientException : If the supplied Account or Credential are null or schema invalid.\n+     */\n+    public void saveCredentials(@NonNull final AccountRecord accountRecord,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbaaba48c80bed44ec6cf1a6e718496c504effee"}, "originalPosition": 121}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1707, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}