{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NTIwMTgy", "number": 853, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMToxNjo0OFrODpueiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDozNDoyM1rODq9bpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDc5NjkxOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/LastRequestTelemetry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMToxNjo0OFrOF5FV9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo1MToxMVrOF6z-NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwMDY5NA==", "bodyText": "nit : use StringBuilder.append() for readability and add a constant for delimiter \"|\"", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r395400694", "createdAt": "2020-03-20T01:16:48Z", "author": {"login": "kreedula"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/LastRequestTelemetry.java", "diffHunk": "@@ -0,0 +1,118 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.eststelemetry;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class LastRequestTelemetry extends RequestTelemetry {\n+\n+    @SerializedName(\"silent_successful_count\")\n+    private int silentSuccessfulCount;\n+\n+    @SerializedName(\"failed_requests\")\n+    private List<FailedRequest> failedRequests;\n+\n+    @SerializedName(\"errors\")\n+    private List<String> errors;\n+\n+    LastRequestTelemetry(@NonNull String schemaVersion) {\n+        super(schemaVersion);\n+        silentSuccessfulCount = 0;\n+        failedRequests = new ArrayList<>();\n+        errors = new ArrayList<>();\n+    }\n+\n+    List<FailedRequest> getFailedRequests() {\n+        return failedRequests;\n+    }\n+\n+    List<String> getErrors() {\n+        return errors;\n+    }\n+\n+    @Override\n+    public String getHeaderStringForFields() {\n+        return silentSuccessfulCount + \"|\" + getHeaderStringForFields(failedRequests) + \"|\" + getHeaderStringForFields(errors);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxMzIzNg==", "bodyText": "Addressed", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r397213236", "createdAt": "2020-03-24T14:51:11Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/LastRequestTelemetry.java", "diffHunk": "@@ -0,0 +1,118 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.eststelemetry;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class LastRequestTelemetry extends RequestTelemetry {\n+\n+    @SerializedName(\"silent_successful_count\")\n+    private int silentSuccessfulCount;\n+\n+    @SerializedName(\"failed_requests\")\n+    private List<FailedRequest> failedRequests;\n+\n+    @SerializedName(\"errors\")\n+    private List<String> errors;\n+\n+    LastRequestTelemetry(@NonNull String schemaVersion) {\n+        super(schemaVersion);\n+        silentSuccessfulCount = 0;\n+        failedRequests = new ArrayList<>();\n+        errors = new ArrayList<>();\n+    }\n+\n+    List<FailedRequest> getFailedRequests() {\n+        return failedRequests;\n+    }\n+\n+    List<String> getErrors() {\n+        return errors;\n+    }\n+\n+    @Override\n+    public String getHeaderStringForFields() {\n+        return silentSuccessfulCount + \"|\" + getHeaderStringForFields(failedRequests) + \"|\" + getHeaderStringForFields(errors);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwMDY5NA=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDgwNjg2OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/RequestTelemetry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMToyMzo1MFrOF5Fb2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo1MToxOVrOF6z-kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwMjIwMw==", "bodyText": "same feedback here", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r395402203", "createdAt": "2020-03-20T01:23:50Z", "author": {"login": "kreedula"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/RequestTelemetry.java", "diffHunk": "@@ -112,34 +82,34 @@ String getCompleteTelemetryHeaderString() {\n             return null;\n         }\n \n-        final String schemaVersionString = Schema.getSchemaCompliantString(mSchemaVersion);\n-        final String commonSchemaString = getCommonTelemetryHeaderString();\n-        final String platformSchemaString = getPlatformTelemetryHeaderString();\n-        return schemaVersionString + \"|\" + commonSchemaString + \"|\" + platformSchemaString;\n-    }\n-\n-    private String getCommonTelemetryHeaderString() {\n-        final String[] commonFields = Schema.getCommonFields(mIsCurrentRequest);\n-        return getTelemetryHeaderStringFromFields(commonFields, mCommonTelemetry);\n+        return mSchemaVersion + \"|\" + this.getHeaderStringForFields() + \"|\" + getPlatformTelemetryHeaderString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxMzMyOQ==", "bodyText": "Addressed", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r397213329", "createdAt": "2020-03-24T14:51:19Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/RequestTelemetry.java", "diffHunk": "@@ -112,34 +82,34 @@ String getCompleteTelemetryHeaderString() {\n             return null;\n         }\n \n-        final String schemaVersionString = Schema.getSchemaCompliantString(mSchemaVersion);\n-        final String commonSchemaString = getCommonTelemetryHeaderString();\n-        final String platformSchemaString = getPlatformTelemetryHeaderString();\n-        return schemaVersionString + \"|\" + commonSchemaString + \"|\" + platformSchemaString;\n-    }\n-\n-    private String getCommonTelemetryHeaderString() {\n-        final String[] commonFields = Schema.getCommonFields(mIsCurrentRequest);\n-        return getTelemetryHeaderStringFromFields(commonFields, mCommonTelemetry);\n+        return mSchemaVersion + \"|\" + this.getHeaderStringForFields() + \"|\" + getPlatformTelemetryHeaderString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwMjIwMw=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODY2ODQzOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzoyMTo0NVrOF6P6gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo1MToyNlrOF6z-8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyMjQ2Ng==", "bodyText": "nit: constant for the data limit value", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396622466", "createdAt": "2020-03-23T17:21:45Z", "author": {"login": "kreedula"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -321,17 +363,63 @@ String getCurrentTelemetryHeaderString() {\n             return null;\n         }\n \n-        return currentTelemetry.getCompleteTelemetryHeaderString();\n+        return currentTelemetry.getCompleteHeaderString();\n     }\n \n-    String getLastTelemetryHeaderString() {\n-        RequestTelemetry lastTelemetry = loadLastRequestTelemetryFromCache();\n-\n-        if (lastTelemetry == null) {\n+    private String getLastTelemetryHeaderString() {\n+        if (mLastRequestTelemetryCache == null) {\n             return null;\n         }\n \n-        return lastTelemetry.getCompleteTelemetryHeaderString();\n+        LastRequestTelemetry lastRequestTelemetry = (LastRequestTelemetry) mLastRequestTelemetryCache.getRequestTelemetryFromCache();\n+\n+        if (lastRequestTelemetry == null) {\n+            // we did not have anything in the telemetry cache for the last request\n+            // let's create a new object based on the data available from the current request object\n+            // and return the header string formed via that object\n+            final String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n+            final CurrentRequestTelemetry currentRequestTelemetry = mTelemetryMap.get(correlationId);\n+            lastRequestTelemetry = new LastRequestTelemetry(currentRequestTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.derive(currentRequestTelemetry);\n+            return lastRequestTelemetry.getCompleteHeaderString();\n+        }\n+\n+        // create a copy of the object retrieved from cache\n+        LastRequestTelemetry lastRequestTelemetryCopy = new LastRequestTelemetry(lastRequestTelemetry.getSchemaVersion());\n+        lastRequestTelemetryCopy = (LastRequestTelemetry) lastRequestTelemetryCopy.derive(lastRequestTelemetry);\n+\n+        // failed request data from the object retrieved from cache\n+        final List<FailedRequest> originalFailedRequests = lastRequestTelemetry.getFailedRequests();\n+\n+        // error data from the object retrieved from cache\n+        final List<String> originalErrors = lastRequestTelemetry.getErrors();\n+\n+        // the array index that marks how many elements were included in the header sent in the request\n+        int indexOfFailedRequestsAndErrors = 0;\n+\n+        for (int i = 0; i < originalFailedRequests.size(); i++) {\n+            // there is a limit of 8KB for the payload sent in request headers\n+            // we will be maxing out at 4KB to avoid HTTP 413 errors\n+            // check if we have enough space in the String to store another failed request/error element\n+            // if yes, then add it to the failed request array (for the copy)\n+            if (lastRequestTelemetryCopy.getCompleteHeaderString().length() < 3800) {\n+                lastRequestTelemetryCopy.appendFailedRequestWithError(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 426}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxMzQyNw==", "bodyText": "Addressed", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r397213427", "createdAt": "2020-03-24T14:51:26Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -321,17 +363,63 @@ String getCurrentTelemetryHeaderString() {\n             return null;\n         }\n \n-        return currentTelemetry.getCompleteTelemetryHeaderString();\n+        return currentTelemetry.getCompleteHeaderString();\n     }\n \n-    String getLastTelemetryHeaderString() {\n-        RequestTelemetry lastTelemetry = loadLastRequestTelemetryFromCache();\n-\n-        if (lastTelemetry == null) {\n+    private String getLastTelemetryHeaderString() {\n+        if (mLastRequestTelemetryCache == null) {\n             return null;\n         }\n \n-        return lastTelemetry.getCompleteTelemetryHeaderString();\n+        LastRequestTelemetry lastRequestTelemetry = (LastRequestTelemetry) mLastRequestTelemetryCache.getRequestTelemetryFromCache();\n+\n+        if (lastRequestTelemetry == null) {\n+            // we did not have anything in the telemetry cache for the last request\n+            // let's create a new object based on the data available from the current request object\n+            // and return the header string formed via that object\n+            final String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n+            final CurrentRequestTelemetry currentRequestTelemetry = mTelemetryMap.get(correlationId);\n+            lastRequestTelemetry = new LastRequestTelemetry(currentRequestTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.derive(currentRequestTelemetry);\n+            return lastRequestTelemetry.getCompleteHeaderString();\n+        }\n+\n+        // create a copy of the object retrieved from cache\n+        LastRequestTelemetry lastRequestTelemetryCopy = new LastRequestTelemetry(lastRequestTelemetry.getSchemaVersion());\n+        lastRequestTelemetryCopy = (LastRequestTelemetry) lastRequestTelemetryCopy.derive(lastRequestTelemetry);\n+\n+        // failed request data from the object retrieved from cache\n+        final List<FailedRequest> originalFailedRequests = lastRequestTelemetry.getFailedRequests();\n+\n+        // error data from the object retrieved from cache\n+        final List<String> originalErrors = lastRequestTelemetry.getErrors();\n+\n+        // the array index that marks how many elements were included in the header sent in the request\n+        int indexOfFailedRequestsAndErrors = 0;\n+\n+        for (int i = 0; i < originalFailedRequests.size(); i++) {\n+            // there is a limit of 8KB for the payload sent in request headers\n+            // we will be maxing out at 4KB to avoid HTTP 413 errors\n+            // check if we have enough space in the String to store another failed request/error element\n+            // if yes, then add it to the failed request array (for the copy)\n+            if (lastRequestTelemetryCopy.getCompleteHeaderString().length() < 3800) {\n+                lastRequestTelemetryCopy.appendFailedRequestWithError(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyMjQ2Ng=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 426}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODY3NTM1OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzoyMzoxOFrOF6P-3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTowNzozM1rOF6_HyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyMzU4MQ==", "bodyText": "Should we indicate the server somehow  that we are not sending the data due to size restrictions. i.e. just for us to be aware that this data could be skewed?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396623581", "createdAt": "2020-03-23T17:23:18Z", "author": {"login": "kreedula"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -321,17 +363,63 @@ String getCurrentTelemetryHeaderString() {\n             return null;\n         }\n \n-        return currentTelemetry.getCompleteTelemetryHeaderString();\n+        return currentTelemetry.getCompleteHeaderString();\n     }\n \n-    String getLastTelemetryHeaderString() {\n-        RequestTelemetry lastTelemetry = loadLastRequestTelemetryFromCache();\n-\n-        if (lastTelemetry == null) {\n+    private String getLastTelemetryHeaderString() {\n+        if (mLastRequestTelemetryCache == null) {\n             return null;\n         }\n \n-        return lastTelemetry.getCompleteTelemetryHeaderString();\n+        LastRequestTelemetry lastRequestTelemetry = (LastRequestTelemetry) mLastRequestTelemetryCache.getRequestTelemetryFromCache();\n+\n+        if (lastRequestTelemetry == null) {\n+            // we did not have anything in the telemetry cache for the last request\n+            // let's create a new object based on the data available from the current request object\n+            // and return the header string formed via that object\n+            final String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n+            final CurrentRequestTelemetry currentRequestTelemetry = mTelemetryMap.get(correlationId);\n+            lastRequestTelemetry = new LastRequestTelemetry(currentRequestTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.derive(currentRequestTelemetry);\n+            return lastRequestTelemetry.getCompleteHeaderString();\n+        }\n+\n+        // create a copy of the object retrieved from cache\n+        LastRequestTelemetry lastRequestTelemetryCopy = new LastRequestTelemetry(lastRequestTelemetry.getSchemaVersion());\n+        lastRequestTelemetryCopy = (LastRequestTelemetry) lastRequestTelemetryCopy.derive(lastRequestTelemetry);\n+\n+        // failed request data from the object retrieved from cache\n+        final List<FailedRequest> originalFailedRequests = lastRequestTelemetry.getFailedRequests();\n+\n+        // error data from the object retrieved from cache\n+        final List<String> originalErrors = lastRequestTelemetry.getErrors();\n+\n+        // the array index that marks how many elements were included in the header sent in the request\n+        int indexOfFailedRequestsAndErrors = 0;\n+\n+        for (int i = 0; i < originalFailedRequests.size(); i++) {\n+            // there is a limit of 8KB for the payload sent in request headers\n+            // we will be maxing out at 4KB to avoid HTTP 413 errors\n+            // check if we have enough space in the String to store another failed request/error element\n+            // if yes, then add it to the failed request array (for the copy)\n+            if (lastRequestTelemetryCopy.getCompleteHeaderString().length() < 3800) {\n+                lastRequestTelemetryCopy.appendFailedRequestWithError(\n+                        originalFailedRequests.get(indexOfFailedRequestsAndErrors),\n+                        originalErrors.get(indexOfFailedRequestsAndErrors++)\n+                );\n+            } else {\n+                // if there is no room for more data, then break out of this loop\n+                break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 432}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY1NTg1OA==", "bodyText": "Such a field is not currently part of the schema. I can add something to the platform telemetry for Android. Something like a 0 or 1 value indicating whether all the data is sent or not. So when we view our own telemetry then we know whether we have sent all the data or not. Or we could actually add a number indicating how many errors were either sent or kept on hold. I think the former is better i.e. it is probably sufficient to know whether all was sent or not and tell us to look at additional rows in the PerRequestTable. I don't see much value from knowing exactly how much was sent or not. What do you think @kreedula ?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396655858", "createdAt": "2020-03-23T18:11:23Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -321,17 +363,63 @@ String getCurrentTelemetryHeaderString() {\n             return null;\n         }\n \n-        return currentTelemetry.getCompleteTelemetryHeaderString();\n+        return currentTelemetry.getCompleteHeaderString();\n     }\n \n-    String getLastTelemetryHeaderString() {\n-        RequestTelemetry lastTelemetry = loadLastRequestTelemetryFromCache();\n-\n-        if (lastTelemetry == null) {\n+    private String getLastTelemetryHeaderString() {\n+        if (mLastRequestTelemetryCache == null) {\n             return null;\n         }\n \n-        return lastTelemetry.getCompleteTelemetryHeaderString();\n+        LastRequestTelemetry lastRequestTelemetry = (LastRequestTelemetry) mLastRequestTelemetryCache.getRequestTelemetryFromCache();\n+\n+        if (lastRequestTelemetry == null) {\n+            // we did not have anything in the telemetry cache for the last request\n+            // let's create a new object based on the data available from the current request object\n+            // and return the header string formed via that object\n+            final String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n+            final CurrentRequestTelemetry currentRequestTelemetry = mTelemetryMap.get(correlationId);\n+            lastRequestTelemetry = new LastRequestTelemetry(currentRequestTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.derive(currentRequestTelemetry);\n+            return lastRequestTelemetry.getCompleteHeaderString();\n+        }\n+\n+        // create a copy of the object retrieved from cache\n+        LastRequestTelemetry lastRequestTelemetryCopy = new LastRequestTelemetry(lastRequestTelemetry.getSchemaVersion());\n+        lastRequestTelemetryCopy = (LastRequestTelemetry) lastRequestTelemetryCopy.derive(lastRequestTelemetry);\n+\n+        // failed request data from the object retrieved from cache\n+        final List<FailedRequest> originalFailedRequests = lastRequestTelemetry.getFailedRequests();\n+\n+        // error data from the object retrieved from cache\n+        final List<String> originalErrors = lastRequestTelemetry.getErrors();\n+\n+        // the array index that marks how many elements were included in the header sent in the request\n+        int indexOfFailedRequestsAndErrors = 0;\n+\n+        for (int i = 0; i < originalFailedRequests.size(); i++) {\n+            // there is a limit of 8KB for the payload sent in request headers\n+            // we will be maxing out at 4KB to avoid HTTP 413 errors\n+            // check if we have enough space in the String to store another failed request/error element\n+            // if yes, then add it to the failed request array (for the copy)\n+            if (lastRequestTelemetryCopy.getCompleteHeaderString().length() < 3800) {\n+                lastRequestTelemetryCopy.appendFailedRequestWithError(\n+                        originalFailedRequests.get(indexOfFailedRequestsAndErrors),\n+                        originalErrors.get(indexOfFailedRequestsAndErrors++)\n+                );\n+            } else {\n+                // if there is no room for more data, then break out of this loop\n+                break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyMzU4MQ=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 432}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4MzcxMQ==", "bodyText": "I think sending a boolean (0 or 1) to indicate if the data is partial or complete would be helpful .My primary concern raising this is , potentially in future we might end up sending partial data for every request and keep on accumulating old data , thus latest data could be lagging. Atleast having this information will help us to investigate and we probably can increase the payload if needed.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396683711", "createdAt": "2020-03-23T18:54:41Z", "author": {"login": "kreedula"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -321,17 +363,63 @@ String getCurrentTelemetryHeaderString() {\n             return null;\n         }\n \n-        return currentTelemetry.getCompleteTelemetryHeaderString();\n+        return currentTelemetry.getCompleteHeaderString();\n     }\n \n-    String getLastTelemetryHeaderString() {\n-        RequestTelemetry lastTelemetry = loadLastRequestTelemetryFromCache();\n-\n-        if (lastTelemetry == null) {\n+    private String getLastTelemetryHeaderString() {\n+        if (mLastRequestTelemetryCache == null) {\n             return null;\n         }\n \n-        return lastTelemetry.getCompleteTelemetryHeaderString();\n+        LastRequestTelemetry lastRequestTelemetry = (LastRequestTelemetry) mLastRequestTelemetryCache.getRequestTelemetryFromCache();\n+\n+        if (lastRequestTelemetry == null) {\n+            // we did not have anything in the telemetry cache for the last request\n+            // let's create a new object based on the data available from the current request object\n+            // and return the header string formed via that object\n+            final String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n+            final CurrentRequestTelemetry currentRequestTelemetry = mTelemetryMap.get(correlationId);\n+            lastRequestTelemetry = new LastRequestTelemetry(currentRequestTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.derive(currentRequestTelemetry);\n+            return lastRequestTelemetry.getCompleteHeaderString();\n+        }\n+\n+        // create a copy of the object retrieved from cache\n+        LastRequestTelemetry lastRequestTelemetryCopy = new LastRequestTelemetry(lastRequestTelemetry.getSchemaVersion());\n+        lastRequestTelemetryCopy = (LastRequestTelemetry) lastRequestTelemetryCopy.derive(lastRequestTelemetry);\n+\n+        // failed request data from the object retrieved from cache\n+        final List<FailedRequest> originalFailedRequests = lastRequestTelemetry.getFailedRequests();\n+\n+        // error data from the object retrieved from cache\n+        final List<String> originalErrors = lastRequestTelemetry.getErrors();\n+\n+        // the array index that marks how many elements were included in the header sent in the request\n+        int indexOfFailedRequestsAndErrors = 0;\n+\n+        for (int i = 0; i < originalFailedRequests.size(); i++) {\n+            // there is a limit of 8KB for the payload sent in request headers\n+            // we will be maxing out at 4KB to avoid HTTP 413 errors\n+            // check if we have enough space in the String to store another failed request/error element\n+            // if yes, then add it to the failed request array (for the copy)\n+            if (lastRequestTelemetryCopy.getCompleteHeaderString().length() < 3800) {\n+                lastRequestTelemetryCopy.appendFailedRequestWithError(\n+                        originalFailedRequests.get(indexOfFailedRequestsAndErrors),\n+                        originalErrors.get(indexOfFailedRequestsAndErrors++)\n+                );\n+            } else {\n+                // if there is no room for more data, then break out of this loop\n+                break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyMzU4MQ=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 432}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM5NTkxMg==", "bodyText": "Addressed", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r397395912", "createdAt": "2020-03-24T19:07:33Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -321,17 +363,63 @@ String getCurrentTelemetryHeaderString() {\n             return null;\n         }\n \n-        return currentTelemetry.getCompleteTelemetryHeaderString();\n+        return currentTelemetry.getCompleteHeaderString();\n     }\n \n-    String getLastTelemetryHeaderString() {\n-        RequestTelemetry lastTelemetry = loadLastRequestTelemetryFromCache();\n-\n-        if (lastTelemetry == null) {\n+    private String getLastTelemetryHeaderString() {\n+        if (mLastRequestTelemetryCache == null) {\n             return null;\n         }\n \n-        return lastTelemetry.getCompleteTelemetryHeaderString();\n+        LastRequestTelemetry lastRequestTelemetry = (LastRequestTelemetry) mLastRequestTelemetryCache.getRequestTelemetryFromCache();\n+\n+        if (lastRequestTelemetry == null) {\n+            // we did not have anything in the telemetry cache for the last request\n+            // let's create a new object based on the data available from the current request object\n+            // and return the header string formed via that object\n+            final String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n+            final CurrentRequestTelemetry currentRequestTelemetry = mTelemetryMap.get(correlationId);\n+            lastRequestTelemetry = new LastRequestTelemetry(currentRequestTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.derive(currentRequestTelemetry);\n+            return lastRequestTelemetry.getCompleteHeaderString();\n+        }\n+\n+        // create a copy of the object retrieved from cache\n+        LastRequestTelemetry lastRequestTelemetryCopy = new LastRequestTelemetry(lastRequestTelemetry.getSchemaVersion());\n+        lastRequestTelemetryCopy = (LastRequestTelemetry) lastRequestTelemetryCopy.derive(lastRequestTelemetry);\n+\n+        // failed request data from the object retrieved from cache\n+        final List<FailedRequest> originalFailedRequests = lastRequestTelemetry.getFailedRequests();\n+\n+        // error data from the object retrieved from cache\n+        final List<String> originalErrors = lastRequestTelemetry.getErrors();\n+\n+        // the array index that marks how many elements were included in the header sent in the request\n+        int indexOfFailedRequestsAndErrors = 0;\n+\n+        for (int i = 0; i < originalFailedRequests.size(); i++) {\n+            // there is a limit of 8KB for the payload sent in request headers\n+            // we will be maxing out at 4KB to avoid HTTP 413 errors\n+            // check if we have enough space in the String to store another failed request/error element\n+            // if yes, then add it to the failed request array (for the copy)\n+            if (lastRequestTelemetryCopy.getCompleteHeaderString().length() < 3800) {\n+                lastRequestTelemetryCopy.appendFailedRequestWithError(\n+                        originalFailedRequests.get(indexOfFailedRequestsAndErrors),\n+                        originalErrors.get(indexOfFailedRequestsAndErrors++)\n+                );\n+            } else {\n+                // if there is no room for more data, then break out of this loop\n+                break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyMzU4MQ=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 432}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODY3NzQ2OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzoyMzo0OVrOF6QAQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo1MTo0MlrOF6z_zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyMzkzOQ==", "bodyText": "nit : final here and everywhere else in the method for local variables", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396623939", "createdAt": "2020-03-23T17:23:49Z", "author": {"login": "kreedula"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -321,17 +363,63 @@ String getCurrentTelemetryHeaderString() {\n             return null;\n         }\n \n-        return currentTelemetry.getCompleteTelemetryHeaderString();\n+        return currentTelemetry.getCompleteHeaderString();\n     }\n \n-    String getLastTelemetryHeaderString() {\n-        RequestTelemetry lastTelemetry = loadLastRequestTelemetryFromCache();\n-\n-        if (lastTelemetry == null) {\n+    private String getLastTelemetryHeaderString() {\n+        if (mLastRequestTelemetryCache == null) {\n             return null;\n         }\n \n-        return lastTelemetry.getCompleteTelemetryHeaderString();\n+        LastRequestTelemetry lastRequestTelemetry = (LastRequestTelemetry) mLastRequestTelemetryCache.getRequestTelemetryFromCache();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 394}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxMzY0Ng==", "bodyText": "Addressed", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r397213646", "createdAt": "2020-03-24T14:51:42Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -321,17 +363,63 @@ String getCurrentTelemetryHeaderString() {\n             return null;\n         }\n \n-        return currentTelemetry.getCompleteTelemetryHeaderString();\n+        return currentTelemetry.getCompleteHeaderString();\n     }\n \n-    String getLastTelemetryHeaderString() {\n-        RequestTelemetry lastTelemetry = loadLastRequestTelemetryFromCache();\n-\n-        if (lastTelemetry == null) {\n+    private String getLastTelemetryHeaderString() {\n+        if (mLastRequestTelemetryCache == null) {\n             return null;\n         }\n \n-        return lastTelemetry.getCompleteTelemetryHeaderString();\n+        LastRequestTelemetry lastRequestTelemetry = (LastRequestTelemetry) mLastRequestTelemetryCache.getRequestTelemetryFromCache();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyMzkzOQ=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 394}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODY4Mzc5OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzoyNTozMFrOF6QEnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo1MTo1NFrOF60AcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyNTA1Mw==", "bodyText": "When would we disable this telemetry? If this method is only to check if we have telemetry or not, we might to have rename this method more appropriately", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396625053", "createdAt": "2020-03-23T17:25:30Z", "author": {"login": "kreedula"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -81,6 +86,27 @@ public void setupLastRequestTelemetryCache(@NonNull final Context context) {\n         }\n     }\n \n+    /**\n+     * Creates an entry for a Current Telemetry object for the passed in command based on whether\n+     * the command is eligible for telemetry. Saves the telemetry object to telemetry map.\n+     *\n+     * @param command The command for which to capture telemetry\n+     */\n+    public void initTelemetryForCommand(@NonNull final BaseCommand command) {\n+        setupLastRequestTelemetryCache(command.getParameters().getAppContext());\n+        final String correlationId = command.getParameters().getCorrelationId();\n+        if (command.isEligibleForEstsTelemetry()) {\n+            final CurrentRequestTelemetry currentRequestTelemetry = new CurrentRequestTelemetry();\n+            mTelemetryMap.put(correlationId, currentRequestTelemetry);\n+        }\n+    }\n+\n+    private boolean isDisabled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYzNjI1Mg==", "bodyText": "It is disabled in the sense disabled for a command such as the GetDeviceModeCommand that returns false for isEligibleForEstsTelemetry, but I agree this can be renamed to something better. Perhaps isCurrentTelemetryAvailable or isTelemetryCaptured?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396636252", "createdAt": "2020-03-23T17:42:05Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -81,6 +86,27 @@ public void setupLastRequestTelemetryCache(@NonNull final Context context) {\n         }\n     }\n \n+    /**\n+     * Creates an entry for a Current Telemetry object for the passed in command based on whether\n+     * the command is eligible for telemetry. Saves the telemetry object to telemetry map.\n+     *\n+     * @param command The command for which to capture telemetry\n+     */\n+    public void initTelemetryForCommand(@NonNull final BaseCommand command) {\n+        setupLastRequestTelemetryCache(command.getParameters().getAppContext());\n+        final String correlationId = command.getParameters().getCorrelationId();\n+        if (command.isEligibleForEstsTelemetry()) {\n+            final CurrentRequestTelemetry currentRequestTelemetry = new CurrentRequestTelemetry();\n+            mTelemetryMap.put(correlationId, currentRequestTelemetry);\n+        }\n+    }\n+\n+    private boolean isDisabled() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyNTA1Mw=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY0NDcwNA==", "bodyText": "Yup, isCurrentTelemetryAvailable seems better to me", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396644704", "createdAt": "2020-03-23T17:54:36Z", "author": {"login": "kreedula"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -81,6 +86,27 @@ public void setupLastRequestTelemetryCache(@NonNull final Context context) {\n         }\n     }\n \n+    /**\n+     * Creates an entry for a Current Telemetry object for the passed in command based on whether\n+     * the command is eligible for telemetry. Saves the telemetry object to telemetry map.\n+     *\n+     * @param command The command for which to capture telemetry\n+     */\n+    public void initTelemetryForCommand(@NonNull final BaseCommand command) {\n+        setupLastRequestTelemetryCache(command.getParameters().getAppContext());\n+        final String correlationId = command.getParameters().getCorrelationId();\n+        if (command.isEligibleForEstsTelemetry()) {\n+            final CurrentRequestTelemetry currentRequestTelemetry = new CurrentRequestTelemetry();\n+            mTelemetryMap.put(correlationId, currentRequestTelemetry);\n+        }\n+    }\n+\n+    private boolean isDisabled() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyNTA1Mw=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3MDY3NQ==", "bodyText": "I'd suggest using 'eligible' instead of 'avaiable' - so that we know it came from isEligibleForEstsTelemetry", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396670675", "createdAt": "2020-03-23T18:32:41Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -81,6 +86,27 @@ public void setupLastRequestTelemetryCache(@NonNull final Context context) {\n         }\n     }\n \n+    /**\n+     * Creates an entry for a Current Telemetry object for the passed in command based on whether\n+     * the command is eligible for telemetry. Saves the telemetry object to telemetry map.\n+     *\n+     * @param command The command for which to capture telemetry\n+     */\n+    public void initTelemetryForCommand(@NonNull final BaseCommand command) {\n+        setupLastRequestTelemetryCache(command.getParameters().getAppContext());\n+        final String correlationId = command.getParameters().getCorrelationId();\n+        if (command.isEligibleForEstsTelemetry()) {\n+            final CurrentRequestTelemetry currentRequestTelemetry = new CurrentRequestTelemetry();\n+            mTelemetryMap.put(correlationId, currentRequestTelemetry);\n+        }\n+    }\n+\n+    private boolean isDisabled() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyNTA1Mw=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3NTgyMw==", "bodyText": "That may not be necessarily true. If we refactor the code in the future and introduce a bug then we may not have telemetry due to a bug and not simply because a command wasn't eligible.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396675823", "createdAt": "2020-03-23T18:41:09Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -81,6 +86,27 @@ public void setupLastRequestTelemetryCache(@NonNull final Context context) {\n         }\n     }\n \n+    /**\n+     * Creates an entry for a Current Telemetry object for the passed in command based on whether\n+     * the command is eligible for telemetry. Saves the telemetry object to telemetry map.\n+     *\n+     * @param command The command for which to capture telemetry\n+     */\n+    public void initTelemetryForCommand(@NonNull final BaseCommand command) {\n+        setupLastRequestTelemetryCache(command.getParameters().getAppContext());\n+        final String correlationId = command.getParameters().getCorrelationId();\n+        if (command.isEligibleForEstsTelemetry()) {\n+            final CurrentRequestTelemetry currentRequestTelemetry = new CurrentRequestTelemetry();\n+            mTelemetryMap.put(correlationId, currentRequestTelemetry);\n+        }\n+    }\n+\n+    private boolean isDisabled() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyNTA1Mw=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxMzgwOQ==", "bodyText": "Addressed", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r397213809", "createdAt": "2020-03-24T14:51:54Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -81,6 +86,27 @@ public void setupLastRequestTelemetryCache(@NonNull final Context context) {\n         }\n     }\n \n+    /**\n+     * Creates an entry for a Current Telemetry object for the passed in command based on whether\n+     * the command is eligible for telemetry. Saves the telemetry object to telemetry map.\n+     *\n+     * @param command The command for which to capture telemetry\n+     */\n+    public void initTelemetryForCommand(@NonNull final BaseCommand command) {\n+        setupLastRequestTelemetryCache(command.getParameters().getAppContext());\n+        final String correlationId = command.getParameters().getCorrelationId();\n+        if (command.isEligibleForEstsTelemetry()) {\n+            final CurrentRequestTelemetry currentRequestTelemetry = new CurrentRequestTelemetry();\n+            mTelemetryMap.put(correlationId, currentRequestTelemetry);\n+        }\n+    }\n+\n+    private boolean isDisabled() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyNTA1Mw=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODk3NTgyOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODozNToyN1rOF6S9kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo1MjowNFrOF60BAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3MjQwMQ==", "bodyText": "nit: is this private function being used elsewhere? (as in, why is it separated from the other emit with 2 params).", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396672401", "createdAt": "2020-03-23T18:35:27Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -106,33 +132,28 @@ public void emit(@Nullable final Map<String, String> telemetry) {\n      */\n     public void emit(final String key, final String value) {\n         final String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        emit(correlationId, key, value);\n+        final String compliantValueString = TelemetryUtils.getSchemaCompliantString(value);\n+        emit(correlationId, key, compliantValueString);\n     }\n \n     private void emit(final String correlationId, final String key, final String value) {\n-        RequestTelemetry currentTelemetryInstance = getCurrentTelemetryInstance(correlationId);\n+        final CurrentRequestTelemetry currentTelemetryInstance = getCurrentTelemetryInstance(correlationId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3NDU5Ng==", "bodyText": "No it is not being elsewhere", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396674596", "createdAt": "2020-03-23T18:38:59Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -106,33 +132,28 @@ public void emit(@Nullable final Map<String, String> telemetry) {\n      */\n     public void emit(final String key, final String value) {\n         final String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        emit(correlationId, key, value);\n+        final String compliantValueString = TelemetryUtils.getSchemaCompliantString(value);\n+        emit(correlationId, key, compliantValueString);\n     }\n \n     private void emit(final String correlationId, final String key, final String value) {\n-        RequestTelemetry currentTelemetryInstance = getCurrentTelemetryInstance(correlationId);\n+        final CurrentRequestTelemetry currentTelemetryInstance = getCurrentTelemetryInstance(correlationId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3MjQwMQ=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3NDgwOA==", "bodyText": "I can remove it and move the logic to the two param method", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396674808", "createdAt": "2020-03-23T18:39:22Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -106,33 +132,28 @@ public void emit(@Nullable final Map<String, String> telemetry) {\n      */\n     public void emit(final String key, final String value) {\n         final String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        emit(correlationId, key, value);\n+        final String compliantValueString = TelemetryUtils.getSchemaCompliantString(value);\n+        emit(correlationId, key, compliantValueString);\n     }\n \n     private void emit(final String correlationId, final String key, final String value) {\n-        RequestTelemetry currentTelemetryInstance = getCurrentTelemetryInstance(correlationId);\n+        final CurrentRequestTelemetry currentTelemetryInstance = getCurrentTelemetryInstance(correlationId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3MjQwMQ=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxMzk1NQ==", "bodyText": "Addressed", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r397213955", "createdAt": "2020-03-24T14:52:04Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -106,33 +132,28 @@ public void emit(@Nullable final Map<String, String> telemetry) {\n      */\n     public void emit(final String key, final String value) {\n         final String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        emit(correlationId, key, value);\n+        final String compliantValueString = TelemetryUtils.getSchemaCompliantString(value);\n+        emit(correlationId, key, compliantValueString);\n     }\n \n     private void emit(final String correlationId, final String key, final String value) {\n-        RequestTelemetry currentTelemetryInstance = getCurrentTelemetryInstance(correlationId);\n+        final CurrentRequestTelemetry currentTelemetryInstance = getCurrentTelemetryInstance(correlationId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3MjQwMQ=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTAwOTUwOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODo0NDoyMFrOF6TSMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOToxNDo0OVrOF6UWKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3NzY4Mw==", "bodyText": "Why are we duplicating the data?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396677683", "createdAt": "2020-03-23T18:44:20Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -194,122 +215,143 @@ private IRequestTelemetryCache createLastRequestTelemetryCache(@NonNull final Co\n         return new SharedPreferencesLastRequestTelemetryCache(sharedPreferencesFileManager);\n     }\n \n-    private RequestTelemetry setupLastFromCurrent(@Nullable RequestTelemetry currentTelemetry) {\n-        if (currentTelemetry == null) {\n-            return new RequestTelemetry(Schema.CURRENT_SCHEMA_VERSION, false);\n-        }\n-\n-        RequestTelemetry lastTelemetry = new RequestTelemetry(currentTelemetry.getSchemaVersion(), false);\n-\n-        // grab whatever common fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getCommonTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        // grab whatever platform fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getPlatformTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        return lastTelemetry;\n-    }\n-\n     /**\n      * Flush the telemetry data for the current request to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n      * Removes the telemetry associated to the correlation id from the telemetry map,\n      * and saves it to the cache (SharedPreferences) as the last request telemetry.\n      */\n-    void flush() {\n-        String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        flush(correlationId);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     */\n-    public void flush(final String correlationId) {\n-        final String errorCode = null; // there was no error\n-        flush(correlationId, errorCode);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param baseException exception that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final BaseException baseException) {\n-        flush(correlationId, baseException == null ? null : baseException.getErrorCode());\n-    }\n+    public void flush(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {\n+        final String methodName = \":flush\";\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId      correlation id of the request\n-     * @param acquireTokenResult the result obtained from the acquire token call\n-     */\n-    public void flush(final String correlationId, final AcquireTokenResult acquireTokenResult) {\n-        final String errorCode = TelemetryUtils.errorFromAcquireTokenResult(acquireTokenResult);\n-        flush(correlationId, errorCode);\n-    }\n+        final String correlationId = command.getParameters().getCorrelationId();\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param errorCode     error that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final String errorCode) {\n-        final String methodName = \":flush\";\n         if (mTelemetryMap == null || correlationId == null) {\n             return;\n         }\n \n-        RequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+        CurrentRequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+\n         if (currentTelemetry == null) {\n             return;\n         }\n \n-        RequestTelemetry lastTelemetry = setupLastFromCurrent(currentTelemetry);\n-        lastTelemetry.putTelemetry(Schema.Key.CORRELATION_ID, correlationId);\n-        lastTelemetry.putTelemetry(Schema.Key.ERROR_CODE, errorCode);\n+        // load the last request object from cache\n+        LastRequestTelemetry lastRequestTelemetry = loadLastRequestTelemetryFromCache();\n+\n+        // We did not have a last request object in cache, let's create a new one and derive\n+        // fields from current request where applicable\n+        if (lastRequestTelemetry == null) {\n+            lastRequestTelemetry = new LastRequestTelemetry(currentTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.derive(currentTelemetry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3ODgzNg==", "bodyText": "duplicating?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396678836", "createdAt": "2020-03-23T18:46:18Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -194,122 +215,143 @@ private IRequestTelemetryCache createLastRequestTelemetryCache(@NonNull final Co\n         return new SharedPreferencesLastRequestTelemetryCache(sharedPreferencesFileManager);\n     }\n \n-    private RequestTelemetry setupLastFromCurrent(@Nullable RequestTelemetry currentTelemetry) {\n-        if (currentTelemetry == null) {\n-            return new RequestTelemetry(Schema.CURRENT_SCHEMA_VERSION, false);\n-        }\n-\n-        RequestTelemetry lastTelemetry = new RequestTelemetry(currentTelemetry.getSchemaVersion(), false);\n-\n-        // grab whatever common fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getCommonTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        // grab whatever platform fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getPlatformTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        return lastTelemetry;\n-    }\n-\n     /**\n      * Flush the telemetry data for the current request to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n      * Removes the telemetry associated to the correlation id from the telemetry map,\n      * and saves it to the cache (SharedPreferences) as the last request telemetry.\n      */\n-    void flush() {\n-        String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        flush(correlationId);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     */\n-    public void flush(final String correlationId) {\n-        final String errorCode = null; // there was no error\n-        flush(correlationId, errorCode);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param baseException exception that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final BaseException baseException) {\n-        flush(correlationId, baseException == null ? null : baseException.getErrorCode());\n-    }\n+    public void flush(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {\n+        final String methodName = \":flush\";\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId      correlation id of the request\n-     * @param acquireTokenResult the result obtained from the acquire token call\n-     */\n-    public void flush(final String correlationId, final AcquireTokenResult acquireTokenResult) {\n-        final String errorCode = TelemetryUtils.errorFromAcquireTokenResult(acquireTokenResult);\n-        flush(correlationId, errorCode);\n-    }\n+        final String correlationId = command.getParameters().getCorrelationId();\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param errorCode     error that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final String errorCode) {\n-        final String methodName = \":flush\";\n         if (mTelemetryMap == null || correlationId == null) {\n             return;\n         }\n \n-        RequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+        CurrentRequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+\n         if (currentTelemetry == null) {\n             return;\n         }\n \n-        RequestTelemetry lastTelemetry = setupLastFromCurrent(currentTelemetry);\n-        lastTelemetry.putTelemetry(Schema.Key.CORRELATION_ID, correlationId);\n-        lastTelemetry.putTelemetry(Schema.Key.ERROR_CODE, errorCode);\n+        // load the last request object from cache\n+        LastRequestTelemetry lastRequestTelemetry = loadLastRequestTelemetryFromCache();\n+\n+        // We did not have a last request object in cache, let's create a new one and derive\n+        // fields from current request where applicable\n+        if (lastRequestTelemetry == null) {\n+            lastRequestTelemetry = new LastRequestTelemetry(currentTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.derive(currentTelemetry);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3NzY4Mw=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4MDMwMQ==", "bodyText": "The data there needs to be on both current request and last request telemetry objects. derive is just a helper method to grab all the common platform fields easily without explicitly calling emit for each one.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396680301", "createdAt": "2020-03-23T18:48:51Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -194,122 +215,143 @@ private IRequestTelemetryCache createLastRequestTelemetryCache(@NonNull final Co\n         return new SharedPreferencesLastRequestTelemetryCache(sharedPreferencesFileManager);\n     }\n \n-    private RequestTelemetry setupLastFromCurrent(@Nullable RequestTelemetry currentTelemetry) {\n-        if (currentTelemetry == null) {\n-            return new RequestTelemetry(Schema.CURRENT_SCHEMA_VERSION, false);\n-        }\n-\n-        RequestTelemetry lastTelemetry = new RequestTelemetry(currentTelemetry.getSchemaVersion(), false);\n-\n-        // grab whatever common fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getCommonTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        // grab whatever platform fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getPlatformTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        return lastTelemetry;\n-    }\n-\n     /**\n      * Flush the telemetry data for the current request to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n      * Removes the telemetry associated to the correlation id from the telemetry map,\n      * and saves it to the cache (SharedPreferences) as the last request telemetry.\n      */\n-    void flush() {\n-        String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        flush(correlationId);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     */\n-    public void flush(final String correlationId) {\n-        final String errorCode = null; // there was no error\n-        flush(correlationId, errorCode);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param baseException exception that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final BaseException baseException) {\n-        flush(correlationId, baseException == null ? null : baseException.getErrorCode());\n-    }\n+    public void flush(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {\n+        final String methodName = \":flush\";\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId      correlation id of the request\n-     * @param acquireTokenResult the result obtained from the acquire token call\n-     */\n-    public void flush(final String correlationId, final AcquireTokenResult acquireTokenResult) {\n-        final String errorCode = TelemetryUtils.errorFromAcquireTokenResult(acquireTokenResult);\n-        flush(correlationId, errorCode);\n-    }\n+        final String correlationId = command.getParameters().getCorrelationId();\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param errorCode     error that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final String errorCode) {\n-        final String methodName = \":flush\";\n         if (mTelemetryMap == null || correlationId == null) {\n             return;\n         }\n \n-        RequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+        CurrentRequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+\n         if (currentTelemetry == null) {\n             return;\n         }\n \n-        RequestTelemetry lastTelemetry = setupLastFromCurrent(currentTelemetry);\n-        lastTelemetry.putTelemetry(Schema.Key.CORRELATION_ID, correlationId);\n-        lastTelemetry.putTelemetry(Schema.Key.ERROR_CODE, errorCode);\n+        // load the last request object from cache\n+        LastRequestTelemetry lastRequestTelemetry = loadLastRequestTelemetryFromCache();\n+\n+        // We did not have a last request object in cache, let's create a new one and derive\n+        // fields from current request where applicable\n+        if (lastRequestTelemetry == null) {\n+            lastRequestTelemetry = new LastRequestTelemetry(currentTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.derive(currentTelemetry);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3NzY4Mw=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5MDgyNQ==", "bodyText": "It was sort of confusing to me to have the same telemetry object in both fields (current and last).\nI would expect us to only send 'previous failing requests' in this 'Last request' fields. Isn't that the case?\n(If this particular request is not sent and it failed, only then we added it to the cache, and the next request would pick it up and send it to the server).", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396690825", "createdAt": "2020-03-23T19:07:02Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -194,122 +215,143 @@ private IRequestTelemetryCache createLastRequestTelemetryCache(@NonNull final Co\n         return new SharedPreferencesLastRequestTelemetryCache(sharedPreferencesFileManager);\n     }\n \n-    private RequestTelemetry setupLastFromCurrent(@Nullable RequestTelemetry currentTelemetry) {\n-        if (currentTelemetry == null) {\n-            return new RequestTelemetry(Schema.CURRENT_SCHEMA_VERSION, false);\n-        }\n-\n-        RequestTelemetry lastTelemetry = new RequestTelemetry(currentTelemetry.getSchemaVersion(), false);\n-\n-        // grab whatever common fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getCommonTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        // grab whatever platform fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getPlatformTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        return lastTelemetry;\n-    }\n-\n     /**\n      * Flush the telemetry data for the current request to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n      * Removes the telemetry associated to the correlation id from the telemetry map,\n      * and saves it to the cache (SharedPreferences) as the last request telemetry.\n      */\n-    void flush() {\n-        String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        flush(correlationId);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     */\n-    public void flush(final String correlationId) {\n-        final String errorCode = null; // there was no error\n-        flush(correlationId, errorCode);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param baseException exception that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final BaseException baseException) {\n-        flush(correlationId, baseException == null ? null : baseException.getErrorCode());\n-    }\n+    public void flush(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {\n+        final String methodName = \":flush\";\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId      correlation id of the request\n-     * @param acquireTokenResult the result obtained from the acquire token call\n-     */\n-    public void flush(final String correlationId, final AcquireTokenResult acquireTokenResult) {\n-        final String errorCode = TelemetryUtils.errorFromAcquireTokenResult(acquireTokenResult);\n-        flush(correlationId, errorCode);\n-    }\n+        final String correlationId = command.getParameters().getCorrelationId();\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param errorCode     error that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final String errorCode) {\n-        final String methodName = \":flush\";\n         if (mTelemetryMap == null || correlationId == null) {\n             return;\n         }\n \n-        RequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+        CurrentRequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+\n         if (currentTelemetry == null) {\n             return;\n         }\n \n-        RequestTelemetry lastTelemetry = setupLastFromCurrent(currentTelemetry);\n-        lastTelemetry.putTelemetry(Schema.Key.CORRELATION_ID, correlationId);\n-        lastTelemetry.putTelemetry(Schema.Key.ERROR_CODE, errorCode);\n+        // load the last request object from cache\n+        LastRequestTelemetry lastRequestTelemetry = loadLastRequestTelemetryFromCache();\n+\n+        // We did not have a last request object in cache, let's create a new one and derive\n+        // fields from current request where applicable\n+        if (lastRequestTelemetry == null) {\n+            lastRequestTelemetry = new LastRequestTelemetry(currentTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.derive(currentTelemetry);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3NzY4Mw=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5NTA4MA==", "bodyText": "Yes, that's right, we only send previous failing requests/errors. However, we also have to abide by the schema and send all fields/delimiters regardless of whether they have value or not. So it there are no last request telemetry available in the cache, then we need to send something like this:\n2|0|||\ni.e. We still send the schema version all delimiters", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396695080", "createdAt": "2020-03-23T19:14:49Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -194,122 +215,143 @@ private IRequestTelemetryCache createLastRequestTelemetryCache(@NonNull final Co\n         return new SharedPreferencesLastRequestTelemetryCache(sharedPreferencesFileManager);\n     }\n \n-    private RequestTelemetry setupLastFromCurrent(@Nullable RequestTelemetry currentTelemetry) {\n-        if (currentTelemetry == null) {\n-            return new RequestTelemetry(Schema.CURRENT_SCHEMA_VERSION, false);\n-        }\n-\n-        RequestTelemetry lastTelemetry = new RequestTelemetry(currentTelemetry.getSchemaVersion(), false);\n-\n-        // grab whatever common fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getCommonTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        // grab whatever platform fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getPlatformTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        return lastTelemetry;\n-    }\n-\n     /**\n      * Flush the telemetry data for the current request to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n      * Removes the telemetry associated to the correlation id from the telemetry map,\n      * and saves it to the cache (SharedPreferences) as the last request telemetry.\n      */\n-    void flush() {\n-        String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        flush(correlationId);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     */\n-    public void flush(final String correlationId) {\n-        final String errorCode = null; // there was no error\n-        flush(correlationId, errorCode);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param baseException exception that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final BaseException baseException) {\n-        flush(correlationId, baseException == null ? null : baseException.getErrorCode());\n-    }\n+    public void flush(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {\n+        final String methodName = \":flush\";\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId      correlation id of the request\n-     * @param acquireTokenResult the result obtained from the acquire token call\n-     */\n-    public void flush(final String correlationId, final AcquireTokenResult acquireTokenResult) {\n-        final String errorCode = TelemetryUtils.errorFromAcquireTokenResult(acquireTokenResult);\n-        flush(correlationId, errorCode);\n-    }\n+        final String correlationId = command.getParameters().getCorrelationId();\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param errorCode     error that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final String errorCode) {\n-        final String methodName = \":flush\";\n         if (mTelemetryMap == null || correlationId == null) {\n             return;\n         }\n \n-        RequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+        CurrentRequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+\n         if (currentTelemetry == null) {\n             return;\n         }\n \n-        RequestTelemetry lastTelemetry = setupLastFromCurrent(currentTelemetry);\n-        lastTelemetry.putTelemetry(Schema.Key.CORRELATION_ID, correlationId);\n-        lastTelemetry.putTelemetry(Schema.Key.ERROR_CODE, errorCode);\n+        // load the last request object from cache\n+        LastRequestTelemetry lastRequestTelemetry = loadLastRequestTelemetryFromCache();\n+\n+        // We did not have a last request object in cache, let's create a new one and derive\n+        // fields from current request where applicable\n+        if (lastRequestTelemetry == null) {\n+            lastRequestTelemetry = new LastRequestTelemetry(currentTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.derive(currentTelemetry);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3NzY4Mw=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 249}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTAyNDgxOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODo0ODoyNVrOF6TbfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOTowOTo0OFrOF6ULmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4MDA2MA==", "bodyText": "is this thread safe? (Since we support parallel request)", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396680060", "createdAt": "2020-03-23T18:48:25Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -194,122 +215,143 @@ private IRequestTelemetryCache createLastRequestTelemetryCache(@NonNull final Co\n         return new SharedPreferencesLastRequestTelemetryCache(sharedPreferencesFileManager);\n     }\n \n-    private RequestTelemetry setupLastFromCurrent(@Nullable RequestTelemetry currentTelemetry) {\n-        if (currentTelemetry == null) {\n-            return new RequestTelemetry(Schema.CURRENT_SCHEMA_VERSION, false);\n-        }\n-\n-        RequestTelemetry lastTelemetry = new RequestTelemetry(currentTelemetry.getSchemaVersion(), false);\n-\n-        // grab whatever common fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getCommonTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        // grab whatever platform fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getPlatformTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        return lastTelemetry;\n-    }\n-\n     /**\n      * Flush the telemetry data for the current request to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n      * Removes the telemetry associated to the correlation id from the telemetry map,\n      * and saves it to the cache (SharedPreferences) as the last request telemetry.\n      */\n-    void flush() {\n-        String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        flush(correlationId);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     */\n-    public void flush(final String correlationId) {\n-        final String errorCode = null; // there was no error\n-        flush(correlationId, errorCode);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param baseException exception that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final BaseException baseException) {\n-        flush(correlationId, baseException == null ? null : baseException.getErrorCode());\n-    }\n+    public void flush(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4MDk5MA==", "bodyText": "Yes, we are using concurrent data structures.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396680990", "createdAt": "2020-03-23T18:50:04Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -194,122 +215,143 @@ private IRequestTelemetryCache createLastRequestTelemetryCache(@NonNull final Co\n         return new SharedPreferencesLastRequestTelemetryCache(sharedPreferencesFileManager);\n     }\n \n-    private RequestTelemetry setupLastFromCurrent(@Nullable RequestTelemetry currentTelemetry) {\n-        if (currentTelemetry == null) {\n-            return new RequestTelemetry(Schema.CURRENT_SCHEMA_VERSION, false);\n-        }\n-\n-        RequestTelemetry lastTelemetry = new RequestTelemetry(currentTelemetry.getSchemaVersion(), false);\n-\n-        // grab whatever common fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getCommonTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        // grab whatever platform fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getPlatformTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        return lastTelemetry;\n-    }\n-\n     /**\n      * Flush the telemetry data for the current request to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n      * Removes the telemetry associated to the correlation id from the telemetry map,\n      * and saves it to the cache (SharedPreferences) as the last request telemetry.\n      */\n-    void flush() {\n-        String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        flush(correlationId);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     */\n-    public void flush(final String correlationId) {\n-        final String errorCode = null; // there was no error\n-        flush(correlationId, errorCode);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param baseException exception that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final BaseException baseException) {\n-        flush(correlationId, baseException == null ? null : baseException.getErrorCode());\n-    }\n+    public void flush(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4MDA2MA=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4NzczMg==", "bodyText": "What I meant was... is it technically possible for any two concurrent requests to send the same set of 'failed_requests' or 'errors'. If so, would the server side be able to deal with it.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396687732", "createdAt": "2020-03-23T19:01:28Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -194,122 +215,143 @@ private IRequestTelemetryCache createLastRequestTelemetryCache(@NonNull final Co\n         return new SharedPreferencesLastRequestTelemetryCache(sharedPreferencesFileManager);\n     }\n \n-    private RequestTelemetry setupLastFromCurrent(@Nullable RequestTelemetry currentTelemetry) {\n-        if (currentTelemetry == null) {\n-            return new RequestTelemetry(Schema.CURRENT_SCHEMA_VERSION, false);\n-        }\n-\n-        RequestTelemetry lastTelemetry = new RequestTelemetry(currentTelemetry.getSchemaVersion(), false);\n-\n-        // grab whatever common fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getCommonTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        // grab whatever platform fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getPlatformTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        return lastTelemetry;\n-    }\n-\n     /**\n      * Flush the telemetry data for the current request to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n      * Removes the telemetry associated to the correlation id from the telemetry map,\n      * and saves it to the cache (SharedPreferences) as the last request telemetry.\n      */\n-    void flush() {\n-        String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        flush(correlationId);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     */\n-    public void flush(final String correlationId) {\n-        final String errorCode = null; // there was no error\n-        flush(correlationId, errorCode);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param baseException exception that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final BaseException baseException) {\n-        flush(correlationId, baseException == null ? null : baseException.getErrorCode());\n-    }\n+    public void flush(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4MDA2MA=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5MjM3OQ==", "bodyText": "Yes, it is possible, and the server won't do anything. It means that we would have duplicated data there.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396692379", "createdAt": "2020-03-23T19:09:48Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -194,122 +215,143 @@ private IRequestTelemetryCache createLastRequestTelemetryCache(@NonNull final Co\n         return new SharedPreferencesLastRequestTelemetryCache(sharedPreferencesFileManager);\n     }\n \n-    private RequestTelemetry setupLastFromCurrent(@Nullable RequestTelemetry currentTelemetry) {\n-        if (currentTelemetry == null) {\n-            return new RequestTelemetry(Schema.CURRENT_SCHEMA_VERSION, false);\n-        }\n-\n-        RequestTelemetry lastTelemetry = new RequestTelemetry(currentTelemetry.getSchemaVersion(), false);\n-\n-        // grab whatever common fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getCommonTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        // grab whatever platform fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getPlatformTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        return lastTelemetry;\n-    }\n-\n     /**\n      * Flush the telemetry data for the current request to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n      * Removes the telemetry associated to the correlation id from the telemetry map,\n      * and saves it to the cache (SharedPreferences) as the last request telemetry.\n      */\n-    void flush() {\n-        String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        flush(correlationId);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     */\n-    public void flush(final String correlationId) {\n-        final String errorCode = null; // there was no error\n-        flush(correlationId, errorCode);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param baseException exception that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final BaseException baseException) {\n-        flush(correlationId, baseException == null ? null : baseException.getErrorCode());\n-    }\n+    public void flush(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4MDA2MA=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTEwMjkwOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOToxMToxNFrOF6UOdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOToxNDoxN1rOF6_W4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5MzEwOA==", "bodyText": "I think it might be risky using index as we're supporting concurrent requests.\nWhat if we have the command store a list of last request correlation ID, and if sent, then we remove the entry with the associated correlation ID from the cache?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396693108", "createdAt": "2020-03-23T19:11:14Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -194,122 +215,143 @@ private IRequestTelemetryCache createLastRequestTelemetryCache(@NonNull final Co\n         return new SharedPreferencesLastRequestTelemetryCache(sharedPreferencesFileManager);\n     }\n \n-    private RequestTelemetry setupLastFromCurrent(@Nullable RequestTelemetry currentTelemetry) {\n-        if (currentTelemetry == null) {\n-            return new RequestTelemetry(Schema.CURRENT_SCHEMA_VERSION, false);\n-        }\n-\n-        RequestTelemetry lastTelemetry = new RequestTelemetry(currentTelemetry.getSchemaVersion(), false);\n-\n-        // grab whatever common fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getCommonTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        // grab whatever platform fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getPlatformTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        return lastTelemetry;\n-    }\n-\n     /**\n      * Flush the telemetry data for the current request to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n      * Removes the telemetry associated to the correlation id from the telemetry map,\n      * and saves it to the cache (SharedPreferences) as the last request telemetry.\n      */\n-    void flush() {\n-        String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        flush(correlationId);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     */\n-    public void flush(final String correlationId) {\n-        final String errorCode = null; // there was no error\n-        flush(correlationId, errorCode);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param baseException exception that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final BaseException baseException) {\n-        flush(correlationId, baseException == null ? null : baseException.getErrorCode());\n-    }\n+    public void flush(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {\n+        final String methodName = \":flush\";\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId      correlation id of the request\n-     * @param acquireTokenResult the result obtained from the acquire token call\n-     */\n-    public void flush(final String correlationId, final AcquireTokenResult acquireTokenResult) {\n-        final String errorCode = TelemetryUtils.errorFromAcquireTokenResult(acquireTokenResult);\n-        flush(correlationId, errorCode);\n-    }\n+        final String correlationId = command.getParameters().getCorrelationId();\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param errorCode     error that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final String errorCode) {\n-        final String methodName = \":flush\";\n         if (mTelemetryMap == null || correlationId == null) {\n             return;\n         }\n \n-        RequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+        CurrentRequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+\n         if (currentTelemetry == null) {\n             return;\n         }\n \n-        RequestTelemetry lastTelemetry = setupLastFromCurrent(currentTelemetry);\n-        lastTelemetry.putTelemetry(Schema.Key.CORRELATION_ID, correlationId);\n-        lastTelemetry.putTelemetry(Schema.Key.ERROR_CODE, errorCode);\n+        // load the last request object from cache\n+        LastRequestTelemetry lastRequestTelemetry = loadLastRequestTelemetryFromCache();\n+\n+        // We did not have a last request object in cache, let's create a new one and derive\n+        // fields from current request where applicable\n+        if (lastRequestTelemetry == null) {\n+            lastRequestTelemetry = new LastRequestTelemetry(currentTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.derive(currentTelemetry);\n+        }\n+\n+        if (isTelemetryLoggedByServer(command, commandResult)) {\n+            // telemetry headers have been sent to token endpoint and logger by sts\n+            // this is the time to reset local telemetry state\n+\n+            // reset silent successful count as we just went to token endpoint\n+            lastRequestTelemetry.resetSilentSuccessCount();\n+\n+            // get the index for the last element of the failed request/error array so we can wipe\n+            // all array elements up to this point (as that data is already in PerRequestTable)\n+            // and doesn't need to be held onto or sent again\n+            final int loggedIndex = getLoggedTelemetryIndex();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 262}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5ODY3Ng==", "bodyText": "It is basically separation of concerns. I don't fully understand what you're suggesting but right now the data is stored in the SharedPreferences and persists. Are you suggesting to store in the Command? Commands are temporary so once those are over we would lose information.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396698676", "createdAt": "2020-03-23T19:21:21Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -194,122 +215,143 @@ private IRequestTelemetryCache createLastRequestTelemetryCache(@NonNull final Co\n         return new SharedPreferencesLastRequestTelemetryCache(sharedPreferencesFileManager);\n     }\n \n-    private RequestTelemetry setupLastFromCurrent(@Nullable RequestTelemetry currentTelemetry) {\n-        if (currentTelemetry == null) {\n-            return new RequestTelemetry(Schema.CURRENT_SCHEMA_VERSION, false);\n-        }\n-\n-        RequestTelemetry lastTelemetry = new RequestTelemetry(currentTelemetry.getSchemaVersion(), false);\n-\n-        // grab whatever common fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getCommonTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        // grab whatever platform fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getPlatformTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        return lastTelemetry;\n-    }\n-\n     /**\n      * Flush the telemetry data for the current request to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n      * Removes the telemetry associated to the correlation id from the telemetry map,\n      * and saves it to the cache (SharedPreferences) as the last request telemetry.\n      */\n-    void flush() {\n-        String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        flush(correlationId);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     */\n-    public void flush(final String correlationId) {\n-        final String errorCode = null; // there was no error\n-        flush(correlationId, errorCode);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param baseException exception that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final BaseException baseException) {\n-        flush(correlationId, baseException == null ? null : baseException.getErrorCode());\n-    }\n+    public void flush(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {\n+        final String methodName = \":flush\";\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId      correlation id of the request\n-     * @param acquireTokenResult the result obtained from the acquire token call\n-     */\n-    public void flush(final String correlationId, final AcquireTokenResult acquireTokenResult) {\n-        final String errorCode = TelemetryUtils.errorFromAcquireTokenResult(acquireTokenResult);\n-        flush(correlationId, errorCode);\n-    }\n+        final String correlationId = command.getParameters().getCorrelationId();\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param errorCode     error that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final String errorCode) {\n-        final String methodName = \":flush\";\n         if (mTelemetryMap == null || correlationId == null) {\n             return;\n         }\n \n-        RequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+        CurrentRequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+\n         if (currentTelemetry == null) {\n             return;\n         }\n \n-        RequestTelemetry lastTelemetry = setupLastFromCurrent(currentTelemetry);\n-        lastTelemetry.putTelemetry(Schema.Key.CORRELATION_ID, correlationId);\n-        lastTelemetry.putTelemetry(Schema.Key.ERROR_CODE, errorCode);\n+        // load the last request object from cache\n+        LastRequestTelemetry lastRequestTelemetry = loadLastRequestTelemetryFromCache();\n+\n+        // We did not have a last request object in cache, let's create a new one and derive\n+        // fields from current request where applicable\n+        if (lastRequestTelemetry == null) {\n+            lastRequestTelemetry = new LastRequestTelemetry(currentTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.derive(currentTelemetry);\n+        }\n+\n+        if (isTelemetryLoggedByServer(command, commandResult)) {\n+            // telemetry headers have been sent to token endpoint and logger by sts\n+            // this is the time to reset local telemetry state\n+\n+            // reset silent successful count as we just went to token endpoint\n+            lastRequestTelemetry.resetSilentSuccessCount();\n+\n+            // get the index for the last element of the failed request/error array so we can wipe\n+            // all array elements up to this point (as that data is already in PerRequestTable)\n+            // and doesn't need to be held onto or sent again\n+            final int loggedIndex = getLoggedTelemetryIndex();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5MzEwOA=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 262}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcwNzE3Mg==", "bodyText": "Let's say if we have more than 1 command running at the same time, and then they get the same value from getLoggedTelemetryIndex() and then try to wipe at the same time, would index out of bound occur?\nI was suggesting storing the 'key' of failed request/error cache entry inside command, and then use those keys to wipe the values out. This would make it thread-safe. (the first wipe will win, the later wipes will not do anything).", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396707172", "createdAt": "2020-03-23T19:36:28Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -194,122 +215,143 @@ private IRequestTelemetryCache createLastRequestTelemetryCache(@NonNull final Co\n         return new SharedPreferencesLastRequestTelemetryCache(sharedPreferencesFileManager);\n     }\n \n-    private RequestTelemetry setupLastFromCurrent(@Nullable RequestTelemetry currentTelemetry) {\n-        if (currentTelemetry == null) {\n-            return new RequestTelemetry(Schema.CURRENT_SCHEMA_VERSION, false);\n-        }\n-\n-        RequestTelemetry lastTelemetry = new RequestTelemetry(currentTelemetry.getSchemaVersion(), false);\n-\n-        // grab whatever common fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getCommonTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        // grab whatever platform fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getPlatformTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        return lastTelemetry;\n-    }\n-\n     /**\n      * Flush the telemetry data for the current request to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n      * Removes the telemetry associated to the correlation id from the telemetry map,\n      * and saves it to the cache (SharedPreferences) as the last request telemetry.\n      */\n-    void flush() {\n-        String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        flush(correlationId);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     */\n-    public void flush(final String correlationId) {\n-        final String errorCode = null; // there was no error\n-        flush(correlationId, errorCode);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param baseException exception that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final BaseException baseException) {\n-        flush(correlationId, baseException == null ? null : baseException.getErrorCode());\n-    }\n+    public void flush(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {\n+        final String methodName = \":flush\";\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId      correlation id of the request\n-     * @param acquireTokenResult the result obtained from the acquire token call\n-     */\n-    public void flush(final String correlationId, final AcquireTokenResult acquireTokenResult) {\n-        final String errorCode = TelemetryUtils.errorFromAcquireTokenResult(acquireTokenResult);\n-        flush(correlationId, errorCode);\n-    }\n+        final String correlationId = command.getParameters().getCorrelationId();\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param errorCode     error that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final String errorCode) {\n-        final String methodName = \":flush\";\n         if (mTelemetryMap == null || correlationId == null) {\n             return;\n         }\n \n-        RequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+        CurrentRequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+\n         if (currentTelemetry == null) {\n             return;\n         }\n \n-        RequestTelemetry lastTelemetry = setupLastFromCurrent(currentTelemetry);\n-        lastTelemetry.putTelemetry(Schema.Key.CORRELATION_ID, correlationId);\n-        lastTelemetry.putTelemetry(Schema.Key.ERROR_CODE, errorCode);\n+        // load the last request object from cache\n+        LastRequestTelemetry lastRequestTelemetry = loadLastRequestTelemetryFromCache();\n+\n+        // We did not have a last request object in cache, let's create a new one and derive\n+        // fields from current request where applicable\n+        if (lastRequestTelemetry == null) {\n+            lastRequestTelemetry = new LastRequestTelemetry(currentTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.derive(currentTelemetry);\n+        }\n+\n+        if (isTelemetryLoggedByServer(command, commandResult)) {\n+            // telemetry headers have been sent to token endpoint and logger by sts\n+            // this is the time to reset local telemetry state\n+\n+            // reset silent successful count as we just went to token endpoint\n+            lastRequestTelemetry.resetSilentSuccessCount();\n+\n+            // get the index for the last element of the failed request/error array so we can wipe\n+            // all array elements up to this point (as that data is already in PerRequestTable)\n+            // and doesn't need to be held onto or sent again\n+            final int loggedIndex = getLoggedTelemetryIndex();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5MzEwOA=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 262}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcwNzU1NQ==", "bodyText": "or there might be another way to address this. My concern is primarily the OutOfBound exception.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396707555", "createdAt": "2020-03-23T19:37:11Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -194,122 +215,143 @@ private IRequestTelemetryCache createLastRequestTelemetryCache(@NonNull final Co\n         return new SharedPreferencesLastRequestTelemetryCache(sharedPreferencesFileManager);\n     }\n \n-    private RequestTelemetry setupLastFromCurrent(@Nullable RequestTelemetry currentTelemetry) {\n-        if (currentTelemetry == null) {\n-            return new RequestTelemetry(Schema.CURRENT_SCHEMA_VERSION, false);\n-        }\n-\n-        RequestTelemetry lastTelemetry = new RequestTelemetry(currentTelemetry.getSchemaVersion(), false);\n-\n-        // grab whatever common fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getCommonTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        // grab whatever platform fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getPlatformTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        return lastTelemetry;\n-    }\n-\n     /**\n      * Flush the telemetry data for the current request to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n      * Removes the telemetry associated to the correlation id from the telemetry map,\n      * and saves it to the cache (SharedPreferences) as the last request telemetry.\n      */\n-    void flush() {\n-        String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        flush(correlationId);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     */\n-    public void flush(final String correlationId) {\n-        final String errorCode = null; // there was no error\n-        flush(correlationId, errorCode);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param baseException exception that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final BaseException baseException) {\n-        flush(correlationId, baseException == null ? null : baseException.getErrorCode());\n-    }\n+    public void flush(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {\n+        final String methodName = \":flush\";\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId      correlation id of the request\n-     * @param acquireTokenResult the result obtained from the acquire token call\n-     */\n-    public void flush(final String correlationId, final AcquireTokenResult acquireTokenResult) {\n-        final String errorCode = TelemetryUtils.errorFromAcquireTokenResult(acquireTokenResult);\n-        flush(correlationId, errorCode);\n-    }\n+        final String correlationId = command.getParameters().getCorrelationId();\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param errorCode     error that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final String errorCode) {\n-        final String methodName = \":flush\";\n         if (mTelemetryMap == null || correlationId == null) {\n             return;\n         }\n \n-        RequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+        CurrentRequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+\n         if (currentTelemetry == null) {\n             return;\n         }\n \n-        RequestTelemetry lastTelemetry = setupLastFromCurrent(currentTelemetry);\n-        lastTelemetry.putTelemetry(Schema.Key.CORRELATION_ID, correlationId);\n-        lastTelemetry.putTelemetry(Schema.Key.ERROR_CODE, errorCode);\n+        // load the last request object from cache\n+        LastRequestTelemetry lastRequestTelemetry = loadLastRequestTelemetryFromCache();\n+\n+        // We did not have a last request object in cache, let's create a new one and derive\n+        // fields from current request where applicable\n+        if (lastRequestTelemetry == null) {\n+            lastRequestTelemetry = new LastRequestTelemetry(currentTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.derive(currentTelemetry);\n+        }\n+\n+        if (isTelemetryLoggedByServer(command, commandResult)) {\n+            // telemetry headers have been sent to token endpoint and logger by sts\n+            // this is the time to reset local telemetry state\n+\n+            // reset silent successful count as we just went to token endpoint\n+            lastRequestTelemetry.resetSilentSuccessCount();\n+\n+            // get the index for the last element of the failed request/error array so we can wipe\n+            // all array elements up to this point (as that data is already in PerRequestTable)\n+            // and doesn't need to be held onto or sent again\n+            final int loggedIndex = getLoggedTelemetryIndex();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5MzEwOA=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 262}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcxMzQ1MA==", "bodyText": "OutOfBound should not occur as wipe is an instance method so even though these are concurrent requests, they each should have a different instance of the Last Request Telemetry object and hence when wiped is called, then it is called on the instance that is being used during the execution of that flush method. Inside wipe, we have a check like this for index:\n        if (index < 0 || index > failedRequests.size() || index > errors.size()) { return; }\nI think this should ensure that we're safe. What do you think?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396713450", "createdAt": "2020-03-23T19:45:07Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -194,122 +215,143 @@ private IRequestTelemetryCache createLastRequestTelemetryCache(@NonNull final Co\n         return new SharedPreferencesLastRequestTelemetryCache(sharedPreferencesFileManager);\n     }\n \n-    private RequestTelemetry setupLastFromCurrent(@Nullable RequestTelemetry currentTelemetry) {\n-        if (currentTelemetry == null) {\n-            return new RequestTelemetry(Schema.CURRENT_SCHEMA_VERSION, false);\n-        }\n-\n-        RequestTelemetry lastTelemetry = new RequestTelemetry(currentTelemetry.getSchemaVersion(), false);\n-\n-        // grab whatever common fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getCommonTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        // grab whatever platform fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getPlatformTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        return lastTelemetry;\n-    }\n-\n     /**\n      * Flush the telemetry data for the current request to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n      * Removes the telemetry associated to the correlation id from the telemetry map,\n      * and saves it to the cache (SharedPreferences) as the last request telemetry.\n      */\n-    void flush() {\n-        String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        flush(correlationId);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     */\n-    public void flush(final String correlationId) {\n-        final String errorCode = null; // there was no error\n-        flush(correlationId, errorCode);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param baseException exception that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final BaseException baseException) {\n-        flush(correlationId, baseException == null ? null : baseException.getErrorCode());\n-    }\n+    public void flush(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {\n+        final String methodName = \":flush\";\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId      correlation id of the request\n-     * @param acquireTokenResult the result obtained from the acquire token call\n-     */\n-    public void flush(final String correlationId, final AcquireTokenResult acquireTokenResult) {\n-        final String errorCode = TelemetryUtils.errorFromAcquireTokenResult(acquireTokenResult);\n-        flush(correlationId, errorCode);\n-    }\n+        final String correlationId = command.getParameters().getCorrelationId();\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param errorCode     error that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final String errorCode) {\n-        final String methodName = \":flush\";\n         if (mTelemetryMap == null || correlationId == null) {\n             return;\n         }\n \n-        RequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+        CurrentRequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+\n         if (currentTelemetry == null) {\n             return;\n         }\n \n-        RequestTelemetry lastTelemetry = setupLastFromCurrent(currentTelemetry);\n-        lastTelemetry.putTelemetry(Schema.Key.CORRELATION_ID, correlationId);\n-        lastTelemetry.putTelemetry(Schema.Key.ERROR_CODE, errorCode);\n+        // load the last request object from cache\n+        LastRequestTelemetry lastRequestTelemetry = loadLastRequestTelemetryFromCache();\n+\n+        // We did not have a last request object in cache, let's create a new one and derive\n+        // fields from current request where applicable\n+        if (lastRequestTelemetry == null) {\n+            lastRequestTelemetry = new LastRequestTelemetry(currentTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.derive(currentTelemetry);\n+        }\n+\n+        if (isTelemetryLoggedByServer(command, commandResult)) {\n+            // telemetry headers have been sent to token endpoint and logger by sts\n+            // this is the time to reset local telemetry state\n+\n+            // reset silent successful count as we just went to token endpoint\n+            lastRequestTelemetry.resetSilentSuccessCount();\n+\n+            // get the index for the last element of the failed request/error array so we can wipe\n+            // all array elements up to this point (as that data is already in PerRequestTable)\n+            // and doesn't need to be held onto or sent again\n+            final int loggedIndex = getLoggedTelemetryIndex();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5MzEwOA=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 262}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcxODA2MA==", "bodyText": "ahh.. ok. so you wipe from each instance then proceed to save those instances to the cache, and in this case the last one wins.\nOk in this case we should be safe from OOB. I'm still in the middle of PR and thought that you saved those request/error entries separately.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396718060", "createdAt": "2020-03-23T19:52:58Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -194,122 +215,143 @@ private IRequestTelemetryCache createLastRequestTelemetryCache(@NonNull final Co\n         return new SharedPreferencesLastRequestTelemetryCache(sharedPreferencesFileManager);\n     }\n \n-    private RequestTelemetry setupLastFromCurrent(@Nullable RequestTelemetry currentTelemetry) {\n-        if (currentTelemetry == null) {\n-            return new RequestTelemetry(Schema.CURRENT_SCHEMA_VERSION, false);\n-        }\n-\n-        RequestTelemetry lastTelemetry = new RequestTelemetry(currentTelemetry.getSchemaVersion(), false);\n-\n-        // grab whatever common fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getCommonTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        // grab whatever platform fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getPlatformTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        return lastTelemetry;\n-    }\n-\n     /**\n      * Flush the telemetry data for the current request to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n      * Removes the telemetry associated to the correlation id from the telemetry map,\n      * and saves it to the cache (SharedPreferences) as the last request telemetry.\n      */\n-    void flush() {\n-        String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        flush(correlationId);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     */\n-    public void flush(final String correlationId) {\n-        final String errorCode = null; // there was no error\n-        flush(correlationId, errorCode);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param baseException exception that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final BaseException baseException) {\n-        flush(correlationId, baseException == null ? null : baseException.getErrorCode());\n-    }\n+    public void flush(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {\n+        final String methodName = \":flush\";\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId      correlation id of the request\n-     * @param acquireTokenResult the result obtained from the acquire token call\n-     */\n-    public void flush(final String correlationId, final AcquireTokenResult acquireTokenResult) {\n-        final String errorCode = TelemetryUtils.errorFromAcquireTokenResult(acquireTokenResult);\n-        flush(correlationId, errorCode);\n-    }\n+        final String correlationId = command.getParameters().getCorrelationId();\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param errorCode     error that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final String errorCode) {\n-        final String methodName = \":flush\";\n         if (mTelemetryMap == null || correlationId == null) {\n             return;\n         }\n \n-        RequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+        CurrentRequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+\n         if (currentTelemetry == null) {\n             return;\n         }\n \n-        RequestTelemetry lastTelemetry = setupLastFromCurrent(currentTelemetry);\n-        lastTelemetry.putTelemetry(Schema.Key.CORRELATION_ID, correlationId);\n-        lastTelemetry.putTelemetry(Schema.Key.ERROR_CODE, errorCode);\n+        // load the last request object from cache\n+        LastRequestTelemetry lastRequestTelemetry = loadLastRequestTelemetryFromCache();\n+\n+        // We did not have a last request object in cache, let's create a new one and derive\n+        // fields from current request where applicable\n+        if (lastRequestTelemetry == null) {\n+            lastRequestTelemetry = new LastRequestTelemetry(currentTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.derive(currentTelemetry);\n+        }\n+\n+        if (isTelemetryLoggedByServer(command, commandResult)) {\n+            // telemetry headers have been sent to token endpoint and logger by sts\n+            // this is the time to reset local telemetry state\n+\n+            // reset silent successful count as we just went to token endpoint\n+            lastRequestTelemetry.resetSilentSuccessCount();\n+\n+            // get the index for the last element of the failed request/error array so we can wipe\n+            // all array elements up to this point (as that data is already in PerRequestTable)\n+            // and doesn't need to be held onto or sent again\n+            final int loggedIndex = getLoggedTelemetryIndex();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5MzEwOA=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 262}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcyMDk1Ng==", "bodyText": "The potential error that could happen in this case is a missing telemetry (i.e. There are 5 concurrent requests, the 3rd request failed, but the 5th overwrites the lastRequestTelemetry object).\nWhich could potentially be solved if saveRequestTelemetryToCache actually 'merges' the request. Not sure if the code would be straightforward/easy to understand though.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396720956", "createdAt": "2020-03-23T19:58:22Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -194,122 +215,143 @@ private IRequestTelemetryCache createLastRequestTelemetryCache(@NonNull final Co\n         return new SharedPreferencesLastRequestTelemetryCache(sharedPreferencesFileManager);\n     }\n \n-    private RequestTelemetry setupLastFromCurrent(@Nullable RequestTelemetry currentTelemetry) {\n-        if (currentTelemetry == null) {\n-            return new RequestTelemetry(Schema.CURRENT_SCHEMA_VERSION, false);\n-        }\n-\n-        RequestTelemetry lastTelemetry = new RequestTelemetry(currentTelemetry.getSchemaVersion(), false);\n-\n-        // grab whatever common fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getCommonTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        // grab whatever platform fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getPlatformTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        return lastTelemetry;\n-    }\n-\n     /**\n      * Flush the telemetry data for the current request to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n      * Removes the telemetry associated to the correlation id from the telemetry map,\n      * and saves it to the cache (SharedPreferences) as the last request telemetry.\n      */\n-    void flush() {\n-        String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        flush(correlationId);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     */\n-    public void flush(final String correlationId) {\n-        final String errorCode = null; // there was no error\n-        flush(correlationId, errorCode);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param baseException exception that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final BaseException baseException) {\n-        flush(correlationId, baseException == null ? null : baseException.getErrorCode());\n-    }\n+    public void flush(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {\n+        final String methodName = \":flush\";\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId      correlation id of the request\n-     * @param acquireTokenResult the result obtained from the acquire token call\n-     */\n-    public void flush(final String correlationId, final AcquireTokenResult acquireTokenResult) {\n-        final String errorCode = TelemetryUtils.errorFromAcquireTokenResult(acquireTokenResult);\n-        flush(correlationId, errorCode);\n-    }\n+        final String correlationId = command.getParameters().getCorrelationId();\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param errorCode     error that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final String errorCode) {\n-        final String methodName = \":flush\";\n         if (mTelemetryMap == null || correlationId == null) {\n             return;\n         }\n \n-        RequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+        CurrentRequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+\n         if (currentTelemetry == null) {\n             return;\n         }\n \n-        RequestTelemetry lastTelemetry = setupLastFromCurrent(currentTelemetry);\n-        lastTelemetry.putTelemetry(Schema.Key.CORRELATION_ID, correlationId);\n-        lastTelemetry.putTelemetry(Schema.Key.ERROR_CODE, errorCode);\n+        // load the last request object from cache\n+        LastRequestTelemetry lastRequestTelemetry = loadLastRequestTelemetryFromCache();\n+\n+        // We did not have a last request object in cache, let's create a new one and derive\n+        // fields from current request where applicable\n+        if (lastRequestTelemetry == null) {\n+            lastRequestTelemetry = new LastRequestTelemetry(currentTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.derive(currentTelemetry);\n+        }\n+\n+        if (isTelemetryLoggedByServer(command, commandResult)) {\n+            // telemetry headers have been sent to token endpoint and logger by sts\n+            // this is the time to reset local telemetry state\n+\n+            // reset silent successful count as we just went to token endpoint\n+            lastRequestTelemetry.resetSilentSuccessCount();\n+\n+            // get the index for the last element of the failed request/error array so we can wipe\n+            // all array elements up to this point (as that data is already in PerRequestTable)\n+            // and doesn't need to be held onto or sent again\n+            final int loggedIndex = getLoggedTelemetryIndex();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5MzEwOA=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 262}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcyNDA5OQ==", "bodyText": "Having each command keeping track of what 'last request/error' it sent might be more straightforward IMHO. In this case, we can be certain we only wipe the ones that are already sent.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396724099", "createdAt": "2020-03-23T20:04:11Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -194,122 +215,143 @@ private IRequestTelemetryCache createLastRequestTelemetryCache(@NonNull final Co\n         return new SharedPreferencesLastRequestTelemetryCache(sharedPreferencesFileManager);\n     }\n \n-    private RequestTelemetry setupLastFromCurrent(@Nullable RequestTelemetry currentTelemetry) {\n-        if (currentTelemetry == null) {\n-            return new RequestTelemetry(Schema.CURRENT_SCHEMA_VERSION, false);\n-        }\n-\n-        RequestTelemetry lastTelemetry = new RequestTelemetry(currentTelemetry.getSchemaVersion(), false);\n-\n-        // grab whatever common fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getCommonTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        // grab whatever platform fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getPlatformTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        return lastTelemetry;\n-    }\n-\n     /**\n      * Flush the telemetry data for the current request to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n      * Removes the telemetry associated to the correlation id from the telemetry map,\n      * and saves it to the cache (SharedPreferences) as the last request telemetry.\n      */\n-    void flush() {\n-        String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        flush(correlationId);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     */\n-    public void flush(final String correlationId) {\n-        final String errorCode = null; // there was no error\n-        flush(correlationId, errorCode);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param baseException exception that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final BaseException baseException) {\n-        flush(correlationId, baseException == null ? null : baseException.getErrorCode());\n-    }\n+    public void flush(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {\n+        final String methodName = \":flush\";\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId      correlation id of the request\n-     * @param acquireTokenResult the result obtained from the acquire token call\n-     */\n-    public void flush(final String correlationId, final AcquireTokenResult acquireTokenResult) {\n-        final String errorCode = TelemetryUtils.errorFromAcquireTokenResult(acquireTokenResult);\n-        flush(correlationId, errorCode);\n-    }\n+        final String correlationId = command.getParameters().getCorrelationId();\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param errorCode     error that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final String errorCode) {\n-        final String methodName = \":flush\";\n         if (mTelemetryMap == null || correlationId == null) {\n             return;\n         }\n \n-        RequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+        CurrentRequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+\n         if (currentTelemetry == null) {\n             return;\n         }\n \n-        RequestTelemetry lastTelemetry = setupLastFromCurrent(currentTelemetry);\n-        lastTelemetry.putTelemetry(Schema.Key.CORRELATION_ID, correlationId);\n-        lastTelemetry.putTelemetry(Schema.Key.ERROR_CODE, errorCode);\n+        // load the last request object from cache\n+        LastRequestTelemetry lastRequestTelemetry = loadLastRequestTelemetryFromCache();\n+\n+        // We did not have a last request object in cache, let's create a new one and derive\n+        // fields from current request where applicable\n+        if (lastRequestTelemetry == null) {\n+            lastRequestTelemetry = new LastRequestTelemetry(currentTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.derive(currentTelemetry);\n+        }\n+\n+        if (isTelemetryLoggedByServer(command, commandResult)) {\n+            // telemetry headers have been sent to token endpoint and logger by sts\n+            // this is the time to reset local telemetry state\n+\n+            // reset silent successful count as we just went to token endpoint\n+            lastRequestTelemetry.resetSilentSuccessCount();\n+\n+            // get the index for the last element of the failed request/error array so we can wipe\n+            // all array elements up to this point (as that data is already in PerRequestTable)\n+            // and doesn't need to be held onto or sent again\n+            final int loggedIndex = getLoggedTelemetryIndex();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5MzEwOA=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 262}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM5OTc3Ng==", "bodyText": "@rpdome I've taken your suggestion and refactored the code. I didn't do at the command though as I believe telemetry should be kept separate from commands as much as possible due to separation of concerns. Also the currently executing command isn't available from everywhere. We would have to put the entire command object on the DiagnosticContext if we are to achieve that. I want to avoid doing that. So to solve this problem I've create a new Set at the telemetry layer that keeps track of all the failed requests sent to the server for the currently executing request and then later when we flush, we just remove all of these from the cache as these are sent. Two FailedRequest objects are considered the same if they have the same correlationId so I'm using that as you suggested to keep track of this. The index is no longer used and I've removed that. Thanks for the suggestion!", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r397399776", "createdAt": "2020-03-24T19:14:17Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -194,122 +215,143 @@ private IRequestTelemetryCache createLastRequestTelemetryCache(@NonNull final Co\n         return new SharedPreferencesLastRequestTelemetryCache(sharedPreferencesFileManager);\n     }\n \n-    private RequestTelemetry setupLastFromCurrent(@Nullable RequestTelemetry currentTelemetry) {\n-        if (currentTelemetry == null) {\n-            return new RequestTelemetry(Schema.CURRENT_SCHEMA_VERSION, false);\n-        }\n-\n-        RequestTelemetry lastTelemetry = new RequestTelemetry(currentTelemetry.getSchemaVersion(), false);\n-\n-        // grab whatever common fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getCommonTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        // grab whatever platform fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getPlatformTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        return lastTelemetry;\n-    }\n-\n     /**\n      * Flush the telemetry data for the current request to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n      * Removes the telemetry associated to the correlation id from the telemetry map,\n      * and saves it to the cache (SharedPreferences) as the last request telemetry.\n      */\n-    void flush() {\n-        String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        flush(correlationId);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     */\n-    public void flush(final String correlationId) {\n-        final String errorCode = null; // there was no error\n-        flush(correlationId, errorCode);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param baseException exception that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final BaseException baseException) {\n-        flush(correlationId, baseException == null ? null : baseException.getErrorCode());\n-    }\n+    public void flush(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {\n+        final String methodName = \":flush\";\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId      correlation id of the request\n-     * @param acquireTokenResult the result obtained from the acquire token call\n-     */\n-    public void flush(final String correlationId, final AcquireTokenResult acquireTokenResult) {\n-        final String errorCode = TelemetryUtils.errorFromAcquireTokenResult(acquireTokenResult);\n-        flush(correlationId, errorCode);\n-    }\n+        final String correlationId = command.getParameters().getCorrelationId();\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param errorCode     error that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final String errorCode) {\n-        final String methodName = \":flush\";\n         if (mTelemetryMap == null || correlationId == null) {\n             return;\n         }\n \n-        RequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+        CurrentRequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+\n         if (currentTelemetry == null) {\n             return;\n         }\n \n-        RequestTelemetry lastTelemetry = setupLastFromCurrent(currentTelemetry);\n-        lastTelemetry.putTelemetry(Schema.Key.CORRELATION_ID, correlationId);\n-        lastTelemetry.putTelemetry(Schema.Key.ERROR_CODE, errorCode);\n+        // load the last request object from cache\n+        LastRequestTelemetry lastRequestTelemetry = loadLastRequestTelemetryFromCache();\n+\n+        // We did not have a last request object in cache, let's create a new one and derive\n+        // fields from current request where applicable\n+        if (lastRequestTelemetry == null) {\n+            lastRequestTelemetry = new LastRequestTelemetry(currentTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.derive(currentTelemetry);\n+        }\n+\n+        if (isTelemetryLoggedByServer(command, commandResult)) {\n+            // telemetry headers have been sent to token endpoint and logger by sts\n+            // this is the time to reset local telemetry state\n+\n+            // reset silent successful count as we just went to token endpoint\n+            lastRequestTelemetry.resetSilentSuccessCount();\n+\n+            // get the index for the last element of the failed request/error array so we can wipe\n+            // all array elements up to this point (as that data is already in PerRequestTable)\n+            // and doesn't need to be held onto or sent again\n+            final int loggedIndex = getLoggedTelemetryIndex();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5MzEwOA=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 262}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTMyMjAxOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDoxMzo0NlrOF6Wa0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjoyMTo1OVrOF6aRCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcyOTA0MA==", "bodyText": "Shouldn't this value be part of the lastRequestTelemetry object (like the associated failedRequest/error arrays).", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396729040", "createdAt": "2020-03-23T20:13:46Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -194,122 +215,143 @@ private IRequestTelemetryCache createLastRequestTelemetryCache(@NonNull final Co\n         return new SharedPreferencesLastRequestTelemetryCache(sharedPreferencesFileManager);\n     }\n \n-    private RequestTelemetry setupLastFromCurrent(@Nullable RequestTelemetry currentTelemetry) {\n-        if (currentTelemetry == null) {\n-            return new RequestTelemetry(Schema.CURRENT_SCHEMA_VERSION, false);\n-        }\n-\n-        RequestTelemetry lastTelemetry = new RequestTelemetry(currentTelemetry.getSchemaVersion(), false);\n-\n-        // grab whatever common fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getCommonTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        // grab whatever platform fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getPlatformTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        return lastTelemetry;\n-    }\n-\n     /**\n      * Flush the telemetry data for the current request to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n      * Removes the telemetry associated to the correlation id from the telemetry map,\n      * and saves it to the cache (SharedPreferences) as the last request telemetry.\n      */\n-    void flush() {\n-        String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        flush(correlationId);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     */\n-    public void flush(final String correlationId) {\n-        final String errorCode = null; // there was no error\n-        flush(correlationId, errorCode);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param baseException exception that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final BaseException baseException) {\n-        flush(correlationId, baseException == null ? null : baseException.getErrorCode());\n-    }\n+    public void flush(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {\n+        final String methodName = \":flush\";\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId      correlation id of the request\n-     * @param acquireTokenResult the result obtained from the acquire token call\n-     */\n-    public void flush(final String correlationId, final AcquireTokenResult acquireTokenResult) {\n-        final String errorCode = TelemetryUtils.errorFromAcquireTokenResult(acquireTokenResult);\n-        flush(correlationId, errorCode);\n-    }\n+        final String correlationId = command.getParameters().getCorrelationId();\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param errorCode     error that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final String errorCode) {\n-        final String methodName = \":flush\";\n         if (mTelemetryMap == null || correlationId == null) {\n             return;\n         }\n \n-        RequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+        CurrentRequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+\n         if (currentTelemetry == null) {\n             return;\n         }\n \n-        RequestTelemetry lastTelemetry = setupLastFromCurrent(currentTelemetry);\n-        lastTelemetry.putTelemetry(Schema.Key.CORRELATION_ID, correlationId);\n-        lastTelemetry.putTelemetry(Schema.Key.ERROR_CODE, errorCode);\n+        // load the last request object from cache\n+        LastRequestTelemetry lastRequestTelemetry = loadLastRequestTelemetryFromCache();\n+\n+        // We did not have a last request object in cache, let's create a new one and derive\n+        // fields from current request where applicable\n+        if (lastRequestTelemetry == null) {\n+            lastRequestTelemetry = new LastRequestTelemetry(currentTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.derive(currentTelemetry);\n+        }\n+\n+        if (isTelemetryLoggedByServer(command, commandResult)) {\n+            // telemetry headers have been sent to token endpoint and logger by sts\n+            // this is the time to reset local telemetry state\n+\n+            // reset silent successful count as we just went to token endpoint\n+            lastRequestTelemetry.resetSilentSuccessCount();\n+\n+            // get the index for the last element of the failed request/error array so we can wipe\n+            // all array elements up to this point (as that data is already in PerRequestTable)\n+            // and doesn't need to be held onto or sent again\n+            final int loggedIndex = getLoggedTelemetryIndex();\n+            // headers have been logged by sts - we don't need to hold on to this data - let's wipe\n+            lastRequestTelemetry.wipeFailedRequestAndErrorForSubList(loggedIndex);\n+        }\n \n-        currentTelemetry.clearTelemetry();\n+        // get the error encountered during execution of this command\n+        final String errorCode = getErrorFromCommandResult(commandResult);\n+\n+        if (errorCode != null) {\n+            // we have an error, let's append it to the list\n+            lastRequestTelemetry.appendFailedRequestWithError(\n+                    currentTelemetry.getApiId(),\n+                    correlationId,\n+                    errorCode);\n+        } else if (command instanceof TokenCommand) {\n+            final ILocalAuthenticationResult localAuthenticationResult =\n+                    (ILocalAuthenticationResult) commandResult.getResult();\n+\n+            if (localAuthenticationResult.isServicedFromCache()) {\n+                // we returned a token from cache, let's increment the silent success count\n+                lastRequestTelemetry.incrementSilentSuccessCount();\n+            }\n+        } // else leave everything as is\n+\n+        // we're done processing telemetry for this command, let's remove it from the map\n         mTelemetryMap.remove(correlationId);\n \n-        if (mLastRequestTelemetryCache == null) {\n+        if (mLastRequestTelemetryCache != null) {\n+            // save the (updated) telemetry object back to telemetry cache\n+            mLastRequestTelemetryCache.saveRequestTelemetryToCache(lastRequestTelemetry);\n+        } else {\n             Logger.warn(\n                     TAG + methodName,\n                     \"Last Request Telemetry Cache object was null. \" +\n                             \"Unable to save request telemetry to cache.\"\n             );\n-        } else if (eligibleToCache(lastTelemetry)) {\n-            // remove old last request telemetry data from cache\n-            mLastRequestTelemetryCache.clearAll();\n-            // save new last request telemetry data to cache\n-            mLastRequestTelemetryCache.saveRequestTelemetryToCache(lastTelemetry);\n         }\n     }\n \n-    // if we don't have api id then we won't save telemetry to cache\n-    // this can happen for commands like the GetDeviceModeCommand\n-    // that are generated via a method for which we don't want telemetry\n-    private boolean eligibleToCache(RequestTelemetry lastTelemetry) {\n-        return !TextUtils.isEmpty(lastTelemetry.getSchemaVersion()) &&\n-                !TextUtils.isEmpty(lastTelemetry.getCommonTelemetry().get(Schema.Key.API_ID));\n+    @Nullable\n+    private String getErrorFromCommandResult(final CommandResult commandResult) {\n+        if (commandResult.getStatus() == CommandResult.ResultStatus.ERROR) {\n+            final BaseException baseException = (BaseException) commandResult.getResult();\n+            return baseException.getErrorCode();\n+        } else if (commandResult.getStatus() == CommandResult.ResultStatus.CANCEL) {\n+            return \"user_cancel\";\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    private boolean isTelemetryLoggedByServer(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {\n+        // This was a local operation - we didn't reach token endpoint and hence telemetry wasn't sent\n+        if (!(command instanceof TokenCommand)) {\n+            return false;\n+        }\n+\n+        if (commandResult.getStatus() == CommandResult.ResultStatus.ERROR) {\n+            BaseException baseException = (BaseException) commandResult.getResult();\n+            if (!(baseException instanceof ServiceException)) {\n+                // Telemetry not logged by server as the exception is a local exception\n+                // (request did not reach token endpoint)\n+                return false;\n+            } else {\n+                final ServiceException serviceException = (ServiceException) baseException;\n+                final int statusCode = serviceException.getHttpStatusCode();\n+                // for these status codes, headers aren't logged by ests\n+                return !(statusCode == ServiceException.DEFAULT_STATUS_CODE ||\n+                        statusCode == 429 ||\n+                        statusCode >= 500);\n+            }\n+        } else if (commandResult.getStatus() == CommandResult.ResultStatus.CANCEL) {\n+            // we did not go to token endpoint\n+            return false;\n+        } else if (commandResult.getStatus() == CommandResult.ResultStatus.COMPLETED) {\n+            if (commandResult.getResult() instanceof ILocalAuthenticationResult) {\n+                final ILocalAuthenticationResult localAuthenticationResult = (ILocalAuthenticationResult) commandResult.getResult();\n+                if (localAuthenticationResult.isServicedFromCache()) {\n+                    // we did not go to token endpoint\n+                    return false;\n+                }\n+            } else {\n+                // command probably wasn't a token command - we should never get here in that case\n+                return false;\n+            }\n+        }\n+\n+        // if we get here that means we went to token endpoint and headers were logged by sts\n+        return true;\n     }\n \n-    String getCurrentTelemetryHeaderString() {\n+    private int getLoggedTelemetryIndex() {\n+        return ((SharedPreferencesLastRequestTelemetryCache) mLastRequestTelemetryCache)\n+                .getLastTelemetryIndexSentInHeaderFromCache();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 369}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5MjA3NQ==", "bodyText": "No, this value isn't actually part of telemetry i.e. it isn't actually a field in the schema and hence I didn't add it LastRequest Telemetry class.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396792075", "createdAt": "2020-03-23T22:21:59Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -194,122 +215,143 @@ private IRequestTelemetryCache createLastRequestTelemetryCache(@NonNull final Co\n         return new SharedPreferencesLastRequestTelemetryCache(sharedPreferencesFileManager);\n     }\n \n-    private RequestTelemetry setupLastFromCurrent(@Nullable RequestTelemetry currentTelemetry) {\n-        if (currentTelemetry == null) {\n-            return new RequestTelemetry(Schema.CURRENT_SCHEMA_VERSION, false);\n-        }\n-\n-        RequestTelemetry lastTelemetry = new RequestTelemetry(currentTelemetry.getSchemaVersion(), false);\n-\n-        // grab whatever common fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getCommonTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        // grab whatever platform fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getPlatformTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        return lastTelemetry;\n-    }\n-\n     /**\n      * Flush the telemetry data for the current request to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n      * Removes the telemetry associated to the correlation id from the telemetry map,\n      * and saves it to the cache (SharedPreferences) as the last request telemetry.\n      */\n-    void flush() {\n-        String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        flush(correlationId);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     */\n-    public void flush(final String correlationId) {\n-        final String errorCode = null; // there was no error\n-        flush(correlationId, errorCode);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param baseException exception that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final BaseException baseException) {\n-        flush(correlationId, baseException == null ? null : baseException.getErrorCode());\n-    }\n+    public void flush(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {\n+        final String methodName = \":flush\";\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId      correlation id of the request\n-     * @param acquireTokenResult the result obtained from the acquire token call\n-     */\n-    public void flush(final String correlationId, final AcquireTokenResult acquireTokenResult) {\n-        final String errorCode = TelemetryUtils.errorFromAcquireTokenResult(acquireTokenResult);\n-        flush(correlationId, errorCode);\n-    }\n+        final String correlationId = command.getParameters().getCorrelationId();\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param errorCode     error that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final String errorCode) {\n-        final String methodName = \":flush\";\n         if (mTelemetryMap == null || correlationId == null) {\n             return;\n         }\n \n-        RequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+        CurrentRequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+\n         if (currentTelemetry == null) {\n             return;\n         }\n \n-        RequestTelemetry lastTelemetry = setupLastFromCurrent(currentTelemetry);\n-        lastTelemetry.putTelemetry(Schema.Key.CORRELATION_ID, correlationId);\n-        lastTelemetry.putTelemetry(Schema.Key.ERROR_CODE, errorCode);\n+        // load the last request object from cache\n+        LastRequestTelemetry lastRequestTelemetry = loadLastRequestTelemetryFromCache();\n+\n+        // We did not have a last request object in cache, let's create a new one and derive\n+        // fields from current request where applicable\n+        if (lastRequestTelemetry == null) {\n+            lastRequestTelemetry = new LastRequestTelemetry(currentTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.derive(currentTelemetry);\n+        }\n+\n+        if (isTelemetryLoggedByServer(command, commandResult)) {\n+            // telemetry headers have been sent to token endpoint and logger by sts\n+            // this is the time to reset local telemetry state\n+\n+            // reset silent successful count as we just went to token endpoint\n+            lastRequestTelemetry.resetSilentSuccessCount();\n+\n+            // get the index for the last element of the failed request/error array so we can wipe\n+            // all array elements up to this point (as that data is already in PerRequestTable)\n+            // and doesn't need to be held onto or sent again\n+            final int loggedIndex = getLoggedTelemetryIndex();\n+            // headers have been logged by sts - we don't need to hold on to this data - let's wipe\n+            lastRequestTelemetry.wipeFailedRequestAndErrorForSubList(loggedIndex);\n+        }\n \n-        currentTelemetry.clearTelemetry();\n+        // get the error encountered during execution of this command\n+        final String errorCode = getErrorFromCommandResult(commandResult);\n+\n+        if (errorCode != null) {\n+            // we have an error, let's append it to the list\n+            lastRequestTelemetry.appendFailedRequestWithError(\n+                    currentTelemetry.getApiId(),\n+                    correlationId,\n+                    errorCode);\n+        } else if (command instanceof TokenCommand) {\n+            final ILocalAuthenticationResult localAuthenticationResult =\n+                    (ILocalAuthenticationResult) commandResult.getResult();\n+\n+            if (localAuthenticationResult.isServicedFromCache()) {\n+                // we returned a token from cache, let's increment the silent success count\n+                lastRequestTelemetry.incrementSilentSuccessCount();\n+            }\n+        } // else leave everything as is\n+\n+        // we're done processing telemetry for this command, let's remove it from the map\n         mTelemetryMap.remove(correlationId);\n \n-        if (mLastRequestTelemetryCache == null) {\n+        if (mLastRequestTelemetryCache != null) {\n+            // save the (updated) telemetry object back to telemetry cache\n+            mLastRequestTelemetryCache.saveRequestTelemetryToCache(lastRequestTelemetry);\n+        } else {\n             Logger.warn(\n                     TAG + methodName,\n                     \"Last Request Telemetry Cache object was null. \" +\n                             \"Unable to save request telemetry to cache.\"\n             );\n-        } else if (eligibleToCache(lastTelemetry)) {\n-            // remove old last request telemetry data from cache\n-            mLastRequestTelemetryCache.clearAll();\n-            // save new last request telemetry data to cache\n-            mLastRequestTelemetryCache.saveRequestTelemetryToCache(lastTelemetry);\n         }\n     }\n \n-    // if we don't have api id then we won't save telemetry to cache\n-    // this can happen for commands like the GetDeviceModeCommand\n-    // that are generated via a method for which we don't want telemetry\n-    private boolean eligibleToCache(RequestTelemetry lastTelemetry) {\n-        return !TextUtils.isEmpty(lastTelemetry.getSchemaVersion()) &&\n-                !TextUtils.isEmpty(lastTelemetry.getCommonTelemetry().get(Schema.Key.API_ID));\n+    @Nullable\n+    private String getErrorFromCommandResult(final CommandResult commandResult) {\n+        if (commandResult.getStatus() == CommandResult.ResultStatus.ERROR) {\n+            final BaseException baseException = (BaseException) commandResult.getResult();\n+            return baseException.getErrorCode();\n+        } else if (commandResult.getStatus() == CommandResult.ResultStatus.CANCEL) {\n+            return \"user_cancel\";\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    private boolean isTelemetryLoggedByServer(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {\n+        // This was a local operation - we didn't reach token endpoint and hence telemetry wasn't sent\n+        if (!(command instanceof TokenCommand)) {\n+            return false;\n+        }\n+\n+        if (commandResult.getStatus() == CommandResult.ResultStatus.ERROR) {\n+            BaseException baseException = (BaseException) commandResult.getResult();\n+            if (!(baseException instanceof ServiceException)) {\n+                // Telemetry not logged by server as the exception is a local exception\n+                // (request did not reach token endpoint)\n+                return false;\n+            } else {\n+                final ServiceException serviceException = (ServiceException) baseException;\n+                final int statusCode = serviceException.getHttpStatusCode();\n+                // for these status codes, headers aren't logged by ests\n+                return !(statusCode == ServiceException.DEFAULT_STATUS_CODE ||\n+                        statusCode == 429 ||\n+                        statusCode >= 500);\n+            }\n+        } else if (commandResult.getStatus() == CommandResult.ResultStatus.CANCEL) {\n+            // we did not go to token endpoint\n+            return false;\n+        } else if (commandResult.getStatus() == CommandResult.ResultStatus.COMPLETED) {\n+            if (commandResult.getResult() instanceof ILocalAuthenticationResult) {\n+                final ILocalAuthenticationResult localAuthenticationResult = (ILocalAuthenticationResult) commandResult.getResult();\n+                if (localAuthenticationResult.isServicedFromCache()) {\n+                    // we did not go to token endpoint\n+                    return false;\n+                }\n+            } else {\n+                // command probably wasn't a token command - we should never get here in that case\n+                return false;\n+            }\n+        }\n+\n+        // if we get here that means we went to token endpoint and headers were logged by sts\n+        return true;\n     }\n \n-    String getCurrentTelemetryHeaderString() {\n+    private int getLoggedTelemetryIndex() {\n+        return ((SharedPreferencesLastRequestTelemetryCache) mLastRequestTelemetryCache)\n+                .getLastTelemetryIndexSentInHeaderFromCache();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcyOTA0MA=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 369}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTM1NDU2OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDoyNToyMlrOF6Ww1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOToxNToyOFrOF6_ZdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczNDY3OA==", "bodyText": "I suggest keeping a separate copy of this inside the last request object (as same as the arrays).\nLike other values, the telemetry cache should be modified in only one place - flush().", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396734678", "createdAt": "2020-03-23T20:25:22Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -321,17 +363,63 @@ String getCurrentTelemetryHeaderString() {\n             return null;\n         }\n \n-        return currentTelemetry.getCompleteTelemetryHeaderString();\n+        return currentTelemetry.getCompleteHeaderString();\n     }\n \n-    String getLastTelemetryHeaderString() {\n-        RequestTelemetry lastTelemetry = loadLastRequestTelemetryFromCache();\n-\n-        if (lastTelemetry == null) {\n+    private String getLastTelemetryHeaderString() {\n+        if (mLastRequestTelemetryCache == null) {\n             return null;\n         }\n \n-        return lastTelemetry.getCompleteTelemetryHeaderString();\n+        LastRequestTelemetry lastRequestTelemetry = (LastRequestTelemetry) mLastRequestTelemetryCache.getRequestTelemetryFromCache();\n+\n+        if (lastRequestTelemetry == null) {\n+            // we did not have anything in the telemetry cache for the last request\n+            // let's create a new object based on the data available from the current request object\n+            // and return the header string formed via that object\n+            final String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n+            final CurrentRequestTelemetry currentRequestTelemetry = mTelemetryMap.get(correlationId);\n+            lastRequestTelemetry = new LastRequestTelemetry(currentRequestTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.derive(currentRequestTelemetry);\n+            return lastRequestTelemetry.getCompleteHeaderString();\n+        }\n+\n+        // create a copy of the object retrieved from cache\n+        LastRequestTelemetry lastRequestTelemetryCopy = new LastRequestTelemetry(lastRequestTelemetry.getSchemaVersion());\n+        lastRequestTelemetryCopy = (LastRequestTelemetry) lastRequestTelemetryCopy.derive(lastRequestTelemetry);\n+\n+        // failed request data from the object retrieved from cache\n+        final List<FailedRequest> originalFailedRequests = lastRequestTelemetry.getFailedRequests();\n+\n+        // error data from the object retrieved from cache\n+        final List<String> originalErrors = lastRequestTelemetry.getErrors();\n+\n+        // the array index that marks how many elements were included in the header sent in the request\n+        int indexOfFailedRequestsAndErrors = 0;\n+\n+        for (int i = 0; i < originalFailedRequests.size(); i++) {\n+            // there is a limit of 8KB for the payload sent in request headers\n+            // we will be maxing out at 4KB to avoid HTTP 413 errors\n+            // check if we have enough space in the String to store another failed request/error element\n+            // if yes, then add it to the failed request array (for the copy)\n+            if (lastRequestTelemetryCopy.getCompleteHeaderString().length() < 3800) {\n+                lastRequestTelemetryCopy.appendFailedRequestWithError(\n+                        originalFailedRequests.get(indexOfFailedRequestsAndErrors),\n+                        originalErrors.get(indexOfFailedRequestsAndErrors++)\n+                );\n+            } else {\n+                // if there is no room for more data, then break out of this loop\n+                break;\n+            }\n+        }\n+\n+        // tell cache where we stopped adding data to header so we can pick this up in the next\n+        // network request\n+        ((SharedPreferencesLastRequestTelemetryCache) mLastRequestTelemetryCache)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 438}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQwMDQzNw==", "bodyText": "This field has been removed now per your suggestion.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r397400437", "createdAt": "2020-03-24T19:15:28Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -321,17 +363,63 @@ String getCurrentTelemetryHeaderString() {\n             return null;\n         }\n \n-        return currentTelemetry.getCompleteTelemetryHeaderString();\n+        return currentTelemetry.getCompleteHeaderString();\n     }\n \n-    String getLastTelemetryHeaderString() {\n-        RequestTelemetry lastTelemetry = loadLastRequestTelemetryFromCache();\n-\n-        if (lastTelemetry == null) {\n+    private String getLastTelemetryHeaderString() {\n+        if (mLastRequestTelemetryCache == null) {\n             return null;\n         }\n \n-        return lastTelemetry.getCompleteTelemetryHeaderString();\n+        LastRequestTelemetry lastRequestTelemetry = (LastRequestTelemetry) mLastRequestTelemetryCache.getRequestTelemetryFromCache();\n+\n+        if (lastRequestTelemetry == null) {\n+            // we did not have anything in the telemetry cache for the last request\n+            // let's create a new object based on the data available from the current request object\n+            // and return the header string formed via that object\n+            final String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n+            final CurrentRequestTelemetry currentRequestTelemetry = mTelemetryMap.get(correlationId);\n+            lastRequestTelemetry = new LastRequestTelemetry(currentRequestTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.derive(currentRequestTelemetry);\n+            return lastRequestTelemetry.getCompleteHeaderString();\n+        }\n+\n+        // create a copy of the object retrieved from cache\n+        LastRequestTelemetry lastRequestTelemetryCopy = new LastRequestTelemetry(lastRequestTelemetry.getSchemaVersion());\n+        lastRequestTelemetryCopy = (LastRequestTelemetry) lastRequestTelemetryCopy.derive(lastRequestTelemetry);\n+\n+        // failed request data from the object retrieved from cache\n+        final List<FailedRequest> originalFailedRequests = lastRequestTelemetry.getFailedRequests();\n+\n+        // error data from the object retrieved from cache\n+        final List<String> originalErrors = lastRequestTelemetry.getErrors();\n+\n+        // the array index that marks how many elements were included in the header sent in the request\n+        int indexOfFailedRequestsAndErrors = 0;\n+\n+        for (int i = 0; i < originalFailedRequests.size(); i++) {\n+            // there is a limit of 8KB for the payload sent in request headers\n+            // we will be maxing out at 4KB to avoid HTTP 413 errors\n+            // check if we have enough space in the String to store another failed request/error element\n+            // if yes, then add it to the failed request array (for the copy)\n+            if (lastRequestTelemetryCopy.getCompleteHeaderString().length() < 3800) {\n+                lastRequestTelemetryCopy.appendFailedRequestWithError(\n+                        originalFailedRequests.get(indexOfFailedRequestsAndErrors),\n+                        originalErrors.get(indexOfFailedRequestsAndErrors++)\n+                );\n+            } else {\n+                // if there is no room for more data, then break out of this loop\n+                break;\n+            }\n+        }\n+\n+        // tell cache where we stopped adding data to header so we can pick this up in the next\n+        // network request\n+        ((SharedPreferencesLastRequestTelemetryCache) mLastRequestTelemetryCache)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczNDY3OA=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 438}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTM3NjA3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDozMTozOFrOF6W-iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo1MjozNVrOF60Cmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczODE4Nw==", "bodyText": "nit: the term 'derive', along with the comment above, gave me an impression that we're actually copying everything from CurrentRequestTelemetry.\nShould we rename this to something along the line of 'copySharedValues'?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396738187", "createdAt": "2020-03-23T20:31:38Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -321,17 +363,63 @@ String getCurrentTelemetryHeaderString() {\n             return null;\n         }\n \n-        return currentTelemetry.getCompleteTelemetryHeaderString();\n+        return currentTelemetry.getCompleteHeaderString();\n     }\n \n-    String getLastTelemetryHeaderString() {\n-        RequestTelemetry lastTelemetry = loadLastRequestTelemetryFromCache();\n-\n-        if (lastTelemetry == null) {\n+    private String getLastTelemetryHeaderString() {\n+        if (mLastRequestTelemetryCache == null) {\n             return null;\n         }\n \n-        return lastTelemetry.getCompleteTelemetryHeaderString();\n+        LastRequestTelemetry lastRequestTelemetry = (LastRequestTelemetry) mLastRequestTelemetryCache.getRequestTelemetryFromCache();\n+\n+        if (lastRequestTelemetry == null) {\n+            // we did not have anything in the telemetry cache for the last request\n+            // let's create a new object based on the data available from the current request object\n+            // and return the header string formed via that object\n+            final String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n+            final CurrentRequestTelemetry currentRequestTelemetry = mTelemetryMap.get(correlationId);\n+            lastRequestTelemetry = new LastRequestTelemetry(currentRequestTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.derive(currentRequestTelemetry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 403}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNDM2Mg==", "bodyText": "Addressed", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r397214362", "createdAt": "2020-03-24T14:52:35Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -321,17 +363,63 @@ String getCurrentTelemetryHeaderString() {\n             return null;\n         }\n \n-        return currentTelemetry.getCompleteTelemetryHeaderString();\n+        return currentTelemetry.getCompleteHeaderString();\n     }\n \n-    String getLastTelemetryHeaderString() {\n-        RequestTelemetry lastTelemetry = loadLastRequestTelemetryFromCache();\n-\n-        if (lastTelemetry == null) {\n+    private String getLastTelemetryHeaderString() {\n+        if (mLastRequestTelemetryCache == null) {\n             return null;\n         }\n \n-        return lastTelemetry.getCompleteTelemetryHeaderString();\n+        LastRequestTelemetry lastRequestTelemetry = (LastRequestTelemetry) mLastRequestTelemetryCache.getRequestTelemetryFromCache();\n+\n+        if (lastRequestTelemetry == null) {\n+            // we did not have anything in the telemetry cache for the last request\n+            // let's create a new object based on the data available from the current request object\n+            // and return the header string formed via that object\n+            final String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n+            final CurrentRequestTelemetry currentRequestTelemetry = mTelemetryMap.get(correlationId);\n+            lastRequestTelemetry = new LastRequestTelemetry(currentRequestTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.derive(currentRequestTelemetry);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczODE4Nw=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 403}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTQwMzU4OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/IRequestTelemetryCache.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDozOTo0NlrOF6XPpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo1Mjo0MlrOF60C-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0MjU2NA==", "bodyText": "Is this being used?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396742564", "createdAt": "2020-03-23T20:39:46Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/IRequestTelemetryCache.java", "diffHunk": "@@ -36,17 +36,31 @@\n     void saveRequestTelemetryToCache(final RequestTelemetry requestTelemetry);\n \n     /**\n-     * Get the telemetry from the cache\n+     * Get the telemetry object from the cache\n      *\n      * @return a {@link RequestTelemetry} object\n      */\n     RequestTelemetry getRequestTelemetryFromCache();\n \n+    /**\n+     * Get the schema version of this telemetry object from cache\n+     *\n+     * @return schema version for telemetry object\n+     */\n+    String getTelemetrySchemaVersionFromCache();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc3ODMxOQ==", "bodyText": "No, I added them initially because I planned to use them but didn't. We may need these when we implement future schema versions, but I can remove it for now.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396778319", "createdAt": "2020-03-23T21:51:16Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/IRequestTelemetryCache.java", "diffHunk": "@@ -36,17 +36,31 @@\n     void saveRequestTelemetryToCache(final RequestTelemetry requestTelemetry);\n \n     /**\n-     * Get the telemetry from the cache\n+     * Get the telemetry object from the cache\n      *\n      * @return a {@link RequestTelemetry} object\n      */\n     RequestTelemetry getRequestTelemetryFromCache();\n \n+    /**\n+     * Get the schema version of this telemetry object from cache\n+     *\n+     * @return schema version for telemetry object\n+     */\n+    String getTelemetrySchemaVersionFromCache();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0MjU2NA=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNDQ1OQ==", "bodyText": "Addressed", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r397214459", "createdAt": "2020-03-24T14:52:42Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/IRequestTelemetryCache.java", "diffHunk": "@@ -36,17 +36,31 @@\n     void saveRequestTelemetryToCache(final RequestTelemetry requestTelemetry);\n \n     /**\n-     * Get the telemetry from the cache\n+     * Get the telemetry object from the cache\n      *\n      * @return a {@link RequestTelemetry} object\n      */\n     RequestTelemetry getRequestTelemetryFromCache();\n \n+    /**\n+     * Get the schema version of this telemetry object from cache\n+     *\n+     * @return schema version for telemetry object\n+     */\n+    String getTelemetrySchemaVersionFromCache();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0MjU2NA=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTQwOTE2OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/IRequestTelemetryCache.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDo0MToyMlrOF6XTEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo1Mjo0OVrOF60DSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0MzQ0MA==", "bodyText": "Is this being used?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396743440", "createdAt": "2020-03-23T20:41:22Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/IRequestTelemetryCache.java", "diffHunk": "@@ -36,17 +36,31 @@\n     void saveRequestTelemetryToCache(final RequestTelemetry requestTelemetry);\n \n     /**\n-     * Get the telemetry from the cache\n+     * Get the telemetry object from the cache\n      *\n      * @return a {@link RequestTelemetry} object\n      */\n     RequestTelemetry getRequestTelemetryFromCache();\n \n+    /**\n+     * Get the schema version of this telemetry object from cache\n+     *\n+     * @return schema version for telemetry object\n+     */\n+    String getTelemetrySchemaVersionFromCache();\n+\n+    /**\n+     * Get the header string for telemetry object from cache\n+     *\n+     * @return header string for telemetry\n+     */\n+    String getTelemetryHeaderStringFromCache();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc3ODM1NQ==", "bodyText": "No, I added them initially because I planned to use them but didn't. We may need these when we implement future schema versions, but I can remove it for now.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396778355", "createdAt": "2020-03-23T21:51:20Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/IRequestTelemetryCache.java", "diffHunk": "@@ -36,17 +36,31 @@\n     void saveRequestTelemetryToCache(final RequestTelemetry requestTelemetry);\n \n     /**\n-     * Get the telemetry from the cache\n+     * Get the telemetry object from the cache\n      *\n      * @return a {@link RequestTelemetry} object\n      */\n     RequestTelemetry getRequestTelemetryFromCache();\n \n+    /**\n+     * Get the schema version of this telemetry object from cache\n+     *\n+     * @return schema version for telemetry object\n+     */\n+    String getTelemetrySchemaVersionFromCache();\n+\n+    /**\n+     * Get the header string for telemetry object from cache\n+     *\n+     * @return header string for telemetry\n+     */\n+    String getTelemetryHeaderStringFromCache();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0MzQ0MA=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNDUzNw==", "bodyText": "Addressed", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r397214537", "createdAt": "2020-03-24T14:52:49Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/IRequestTelemetryCache.java", "diffHunk": "@@ -36,17 +36,31 @@\n     void saveRequestTelemetryToCache(final RequestTelemetry requestTelemetry);\n \n     /**\n-     * Get the telemetry from the cache\n+     * Get the telemetry object from the cache\n      *\n      * @return a {@link RequestTelemetry} object\n      */\n     RequestTelemetry getRequestTelemetryFromCache();\n \n+    /**\n+     * Get the schema version of this telemetry object from cache\n+     *\n+     * @return schema version for telemetry object\n+     */\n+    String getTelemetrySchemaVersionFromCache();\n+\n+    /**\n+     * Get the header string for telemetry object from cache\n+     *\n+     * @return header string for telemetry\n+     */\n+    String getTelemetryHeaderStringFromCache();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0MzQ0MA=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTQ0MjczOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/result/LocalAuthenticationResult.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDo1MjoyMVrOF6Xoow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo1Mjo1NVrOF60Duw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0ODk2Mw==", "bodyText": "nit: add comment, here and every new fields introduced in this PR.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396748963", "createdAt": "2020-03-23T20:52:21Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/result/LocalAuthenticationResult.java", "diffHunk": "@@ -200,4 +203,14 @@ public void setRefreshTokenAge(final String refreshTokenAge) {\n     public AccessTokenRecord getAccessTokenRecord() {\n         return mAccessTokenRecord;\n     }\n+\n+\n+    public void setServicedFromCache(Boolean servicedFromCache) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc4MTQwOA==", "bodyText": "Seems like this method is actually not being used - so I'll just remove it", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r396781408", "createdAt": "2020-03-23T21:57:47Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/result/LocalAuthenticationResult.java", "diffHunk": "@@ -200,4 +203,14 @@ public void setRefreshTokenAge(final String refreshTokenAge) {\n     public AccessTokenRecord getAccessTokenRecord() {\n         return mAccessTokenRecord;\n     }\n+\n+\n+    public void setServicedFromCache(Boolean servicedFromCache) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0ODk2Mw=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNDY1MQ==", "bodyText": "Addressed", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r397214651", "createdAt": "2020-03-24T14:52:55Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/result/LocalAuthenticationResult.java", "diffHunk": "@@ -200,4 +203,14 @@ public void setRefreshTokenAge(final String refreshTokenAge) {\n     public AccessTokenRecord getAccessTokenRecord() {\n         return mAccessTokenRecord;\n     }\n+\n+\n+    public void setServicedFromCache(Boolean servicedFromCache) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0ODk2Mw=="}, "originalCommit": {"oid": "49d5cf475c008bf511a6a6f28bb7ccfc2300f2c9"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzczMjg0OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDozNDoyNFrOF7CBAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMzozNzowMVrOF7HC2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ0MzMyOA==", "bodyText": "How would this work for parallel commands?\nEach of them will have their own copies,  how are we going to resolve the conflict? As of now I believe the last one wins (which would result in missing telemetries, if any of the concurrent commands failed).", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r397443328", "createdAt": "2020-03-24T20:34:24Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -194,122 +221,139 @@ private IRequestTelemetryCache createLastRequestTelemetryCache(@NonNull final Co\n         return new SharedPreferencesLastRequestTelemetryCache(sharedPreferencesFileManager);\n     }\n \n-    private RequestTelemetry setupLastFromCurrent(@Nullable RequestTelemetry currentTelemetry) {\n-        if (currentTelemetry == null) {\n-            return new RequestTelemetry(Schema.CURRENT_SCHEMA_VERSION, false);\n-        }\n-\n-        RequestTelemetry lastTelemetry = new RequestTelemetry(currentTelemetry.getSchemaVersion(), false);\n-\n-        // grab whatever common fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getCommonTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        // grab whatever platform fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getPlatformTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        return lastTelemetry;\n-    }\n-\n     /**\n      * Flush the telemetry data for the current request to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n      * Removes the telemetry associated to the correlation id from the telemetry map,\n      * and saves it to the cache (SharedPreferences) as the last request telemetry.\n      */\n-    void flush() {\n-        String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        flush(correlationId);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     */\n-    public void flush(final String correlationId) {\n-        final String errorCode = null; // there was no error\n-        flush(correlationId, errorCode);\n-    }\n+    public void flush(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {\n+        final String methodName = \":flush\";\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param baseException exception that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final BaseException baseException) {\n-        flush(correlationId, baseException == null ? null : baseException.getErrorCode());\n-    }\n+        final String correlationId = command.getParameters().getCorrelationId();\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId      correlation id of the request\n-     * @param acquireTokenResult the result obtained from the acquire token call\n-     */\n-    public void flush(final String correlationId, final AcquireTokenResult acquireTokenResult) {\n-        final String errorCode = TelemetryUtils.errorFromAcquireTokenResult(acquireTokenResult);\n-        flush(correlationId, errorCode);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param errorCode     error that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final String errorCode) {\n-        final String methodName = \":flush\";\n         if (mTelemetryMap == null || correlationId == null) {\n             return;\n         }\n \n-        RequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+        CurrentRequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+\n         if (currentTelemetry == null) {\n             return;\n         }\n \n-        RequestTelemetry lastTelemetry = setupLastFromCurrent(currentTelemetry);\n-        lastTelemetry.putTelemetry(Schema.Key.CORRELATION_ID, correlationId);\n-        lastTelemetry.putTelemetry(Schema.Key.ERROR_CODE, errorCode);\n+        // load the last request object from cache\n+        LastRequestTelemetry lastRequestTelemetry = loadLastRequestTelemetryFromCache();\n \n-        currentTelemetry.clearTelemetry();\n+        // We did not have a last request object in cache, let's create a new one and copySharedValues\n+        // fields from current request where applicable\n+        if (lastRequestTelemetry == null) {\n+            lastRequestTelemetry = new LastRequestTelemetry(currentTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.copySharedValues(currentTelemetry);\n+        }\n+\n+        if (isTelemetryLoggedByServer(command, commandResult)) {\n+            // telemetry headers have been sent to token endpoint and logger by sts\n+            // this is the time to reset local telemetry state\n+\n+            // reset silent successful count as we just went to token endpoint\n+            lastRequestTelemetry.resetSilentSuccessCount();\n+\n+            // get the failed request set for this request. This includes all failed request\n+            // data that has been sent to STS in this request.\n+            Set<FailedRequest> failedRequestSentSet = mSentFailedRequests.get(correlationId);\n+\n+            // headers have been logged by sts - we don't need to hold on to this data - let's wipe\n+            lastRequestTelemetry.wipeFailedRequestAndErrorForSubList(failedRequestSentSet);\n+        }\n+\n+        // get the error encountered during execution of this command\n+        final String errorCode = getErrorFromCommandResult(commandResult);\n+\n+        if (errorCode != null) {\n+            // we have an error, let's append it to the list\n+            lastRequestTelemetry.appendFailedRequest(\n+                    currentTelemetry.getApiId(),\n+                    correlationId,\n+                    errorCode);\n+        } else if (command instanceof TokenCommand) {\n+            final ILocalAuthenticationResult localAuthenticationResult =\n+                    (ILocalAuthenticationResult) commandResult.getResult();\n+\n+            if (localAuthenticationResult.isServicedFromCache()) {\n+                // we returned a token from cache, let's increment the silent success count\n+                lastRequestTelemetry.incrementSilentSuccessCount();\n+            }\n+        } // else leave everything as is\n+\n+        // we're done processing telemetry for this command, let's remove it from the map\n         mTelemetryMap.remove(correlationId);\n+        mSentFailedRequests.remove(correlationId);\n \n-        if (mLastRequestTelemetryCache == null) {\n+        if (mLastRequestTelemetryCache != null) {\n+            // save the (updated) telemetry object back to telemetry cache\n+            mLastRequestTelemetryCache.saveRequestTelemetryToCache(lastRequestTelemetry);\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6aecec9879629f326a8ae484c716e852db2f7f9a"}, "originalPosition": 309}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5MjMwOA==", "bodyText": "If it happens at exactly the same time then yes some data will get overriden and some telemetry may go missing. Do you think I should make this method synchronized?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r397492308", "createdAt": "2020-03-24T22:10:24Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -194,122 +221,139 @@ private IRequestTelemetryCache createLastRequestTelemetryCache(@NonNull final Co\n         return new SharedPreferencesLastRequestTelemetryCache(sharedPreferencesFileManager);\n     }\n \n-    private RequestTelemetry setupLastFromCurrent(@Nullable RequestTelemetry currentTelemetry) {\n-        if (currentTelemetry == null) {\n-            return new RequestTelemetry(Schema.CURRENT_SCHEMA_VERSION, false);\n-        }\n-\n-        RequestTelemetry lastTelemetry = new RequestTelemetry(currentTelemetry.getSchemaVersion(), false);\n-\n-        // grab whatever common fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getCommonTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        // grab whatever platform fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getPlatformTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        return lastTelemetry;\n-    }\n-\n     /**\n      * Flush the telemetry data for the current request to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n      * Removes the telemetry associated to the correlation id from the telemetry map,\n      * and saves it to the cache (SharedPreferences) as the last request telemetry.\n      */\n-    void flush() {\n-        String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        flush(correlationId);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     */\n-    public void flush(final String correlationId) {\n-        final String errorCode = null; // there was no error\n-        flush(correlationId, errorCode);\n-    }\n+    public void flush(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {\n+        final String methodName = \":flush\";\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param baseException exception that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final BaseException baseException) {\n-        flush(correlationId, baseException == null ? null : baseException.getErrorCode());\n-    }\n+        final String correlationId = command.getParameters().getCorrelationId();\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId      correlation id of the request\n-     * @param acquireTokenResult the result obtained from the acquire token call\n-     */\n-    public void flush(final String correlationId, final AcquireTokenResult acquireTokenResult) {\n-        final String errorCode = TelemetryUtils.errorFromAcquireTokenResult(acquireTokenResult);\n-        flush(correlationId, errorCode);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param errorCode     error that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final String errorCode) {\n-        final String methodName = \":flush\";\n         if (mTelemetryMap == null || correlationId == null) {\n             return;\n         }\n \n-        RequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+        CurrentRequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+\n         if (currentTelemetry == null) {\n             return;\n         }\n \n-        RequestTelemetry lastTelemetry = setupLastFromCurrent(currentTelemetry);\n-        lastTelemetry.putTelemetry(Schema.Key.CORRELATION_ID, correlationId);\n-        lastTelemetry.putTelemetry(Schema.Key.ERROR_CODE, errorCode);\n+        // load the last request object from cache\n+        LastRequestTelemetry lastRequestTelemetry = loadLastRequestTelemetryFromCache();\n \n-        currentTelemetry.clearTelemetry();\n+        // We did not have a last request object in cache, let's create a new one and copySharedValues\n+        // fields from current request where applicable\n+        if (lastRequestTelemetry == null) {\n+            lastRequestTelemetry = new LastRequestTelemetry(currentTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.copySharedValues(currentTelemetry);\n+        }\n+\n+        if (isTelemetryLoggedByServer(command, commandResult)) {\n+            // telemetry headers have been sent to token endpoint and logger by sts\n+            // this is the time to reset local telemetry state\n+\n+            // reset silent successful count as we just went to token endpoint\n+            lastRequestTelemetry.resetSilentSuccessCount();\n+\n+            // get the failed request set for this request. This includes all failed request\n+            // data that has been sent to STS in this request.\n+            Set<FailedRequest> failedRequestSentSet = mSentFailedRequests.get(correlationId);\n+\n+            // headers have been logged by sts - we don't need to hold on to this data - let's wipe\n+            lastRequestTelemetry.wipeFailedRequestAndErrorForSubList(failedRequestSentSet);\n+        }\n+\n+        // get the error encountered during execution of this command\n+        final String errorCode = getErrorFromCommandResult(commandResult);\n+\n+        if (errorCode != null) {\n+            // we have an error, let's append it to the list\n+            lastRequestTelemetry.appendFailedRequest(\n+                    currentTelemetry.getApiId(),\n+                    correlationId,\n+                    errorCode);\n+        } else if (command instanceof TokenCommand) {\n+            final ILocalAuthenticationResult localAuthenticationResult =\n+                    (ILocalAuthenticationResult) commandResult.getResult();\n+\n+            if (localAuthenticationResult.isServicedFromCache()) {\n+                // we returned a token from cache, let's increment the silent success count\n+                lastRequestTelemetry.incrementSilentSuccessCount();\n+            }\n+        } // else leave everything as is\n+\n+        // we're done processing telemetry for this command, let's remove it from the map\n         mTelemetryMap.remove(correlationId);\n+        mSentFailedRequests.remove(correlationId);\n \n-        if (mLastRequestTelemetryCache == null) {\n+        if (mLastRequestTelemetryCache != null) {\n+            // save the (updated) telemetry object back to telemetry cache\n+            mLastRequestTelemetryCache.saveRequestTelemetryToCache(lastRequestTelemetry);\n+        } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ0MzMyOA=="}, "originalCommit": {"oid": "6aecec9879629f326a8ae484c716e852db2f7f9a"}, "originalPosition": 309}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwMDc0Mg==", "bodyText": "If we want to make it synchronized, then we have to make flush() synchronized - one has to save before the other loads.\nalternatively, we could save the 'changes' instead of the whole request telemetry object. (i.e. delete A, add B).", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r397500742", "createdAt": "2020-03-24T22:29:56Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -194,122 +221,139 @@ private IRequestTelemetryCache createLastRequestTelemetryCache(@NonNull final Co\n         return new SharedPreferencesLastRequestTelemetryCache(sharedPreferencesFileManager);\n     }\n \n-    private RequestTelemetry setupLastFromCurrent(@Nullable RequestTelemetry currentTelemetry) {\n-        if (currentTelemetry == null) {\n-            return new RequestTelemetry(Schema.CURRENT_SCHEMA_VERSION, false);\n-        }\n-\n-        RequestTelemetry lastTelemetry = new RequestTelemetry(currentTelemetry.getSchemaVersion(), false);\n-\n-        // grab whatever common fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getCommonTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        // grab whatever platform fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getPlatformTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        return lastTelemetry;\n-    }\n-\n     /**\n      * Flush the telemetry data for the current request to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n      * Removes the telemetry associated to the correlation id from the telemetry map,\n      * and saves it to the cache (SharedPreferences) as the last request telemetry.\n      */\n-    void flush() {\n-        String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        flush(correlationId);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     */\n-    public void flush(final String correlationId) {\n-        final String errorCode = null; // there was no error\n-        flush(correlationId, errorCode);\n-    }\n+    public void flush(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {\n+        final String methodName = \":flush\";\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param baseException exception that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final BaseException baseException) {\n-        flush(correlationId, baseException == null ? null : baseException.getErrorCode());\n-    }\n+        final String correlationId = command.getParameters().getCorrelationId();\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId      correlation id of the request\n-     * @param acquireTokenResult the result obtained from the acquire token call\n-     */\n-    public void flush(final String correlationId, final AcquireTokenResult acquireTokenResult) {\n-        final String errorCode = TelemetryUtils.errorFromAcquireTokenResult(acquireTokenResult);\n-        flush(correlationId, errorCode);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param errorCode     error that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final String errorCode) {\n-        final String methodName = \":flush\";\n         if (mTelemetryMap == null || correlationId == null) {\n             return;\n         }\n \n-        RequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+        CurrentRequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+\n         if (currentTelemetry == null) {\n             return;\n         }\n \n-        RequestTelemetry lastTelemetry = setupLastFromCurrent(currentTelemetry);\n-        lastTelemetry.putTelemetry(Schema.Key.CORRELATION_ID, correlationId);\n-        lastTelemetry.putTelemetry(Schema.Key.ERROR_CODE, errorCode);\n+        // load the last request object from cache\n+        LastRequestTelemetry lastRequestTelemetry = loadLastRequestTelemetryFromCache();\n \n-        currentTelemetry.clearTelemetry();\n+        // We did not have a last request object in cache, let's create a new one and copySharedValues\n+        // fields from current request where applicable\n+        if (lastRequestTelemetry == null) {\n+            lastRequestTelemetry = new LastRequestTelemetry(currentTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.copySharedValues(currentTelemetry);\n+        }\n+\n+        if (isTelemetryLoggedByServer(command, commandResult)) {\n+            // telemetry headers have been sent to token endpoint and logger by sts\n+            // this is the time to reset local telemetry state\n+\n+            // reset silent successful count as we just went to token endpoint\n+            lastRequestTelemetry.resetSilentSuccessCount();\n+\n+            // get the failed request set for this request. This includes all failed request\n+            // data that has been sent to STS in this request.\n+            Set<FailedRequest> failedRequestSentSet = mSentFailedRequests.get(correlationId);\n+\n+            // headers have been logged by sts - we don't need to hold on to this data - let's wipe\n+            lastRequestTelemetry.wipeFailedRequestAndErrorForSubList(failedRequestSentSet);\n+        }\n+\n+        // get the error encountered during execution of this command\n+        final String errorCode = getErrorFromCommandResult(commandResult);\n+\n+        if (errorCode != null) {\n+            // we have an error, let's append it to the list\n+            lastRequestTelemetry.appendFailedRequest(\n+                    currentTelemetry.getApiId(),\n+                    correlationId,\n+                    errorCode);\n+        } else if (command instanceof TokenCommand) {\n+            final ILocalAuthenticationResult localAuthenticationResult =\n+                    (ILocalAuthenticationResult) commandResult.getResult();\n+\n+            if (localAuthenticationResult.isServicedFromCache()) {\n+                // we returned a token from cache, let's increment the silent success count\n+                lastRequestTelemetry.incrementSilentSuccessCount();\n+            }\n+        } // else leave everything as is\n+\n+        // we're done processing telemetry for this command, let's remove it from the map\n         mTelemetryMap.remove(correlationId);\n+        mSentFailedRequests.remove(correlationId);\n \n-        if (mLastRequestTelemetryCache == null) {\n+        if (mLastRequestTelemetryCache != null) {\n+            // save the (updated) telemetry object back to telemetry cache\n+            mLastRequestTelemetryCache.saveRequestTelemetryToCache(lastRequestTelemetry);\n+        } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ0MzMyOA=="}, "originalCommit": {"oid": "6aecec9879629f326a8ae484c716e852db2f7f9a"}, "originalPosition": 309}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNzQ4NA==", "bodyText": "I was thinking about making both flush and getTelemetryHeaders synchorized. What do you think about that?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r397507484", "createdAt": "2020-03-24T22:47:16Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -194,122 +221,139 @@ private IRequestTelemetryCache createLastRequestTelemetryCache(@NonNull final Co\n         return new SharedPreferencesLastRequestTelemetryCache(sharedPreferencesFileManager);\n     }\n \n-    private RequestTelemetry setupLastFromCurrent(@Nullable RequestTelemetry currentTelemetry) {\n-        if (currentTelemetry == null) {\n-            return new RequestTelemetry(Schema.CURRENT_SCHEMA_VERSION, false);\n-        }\n-\n-        RequestTelemetry lastTelemetry = new RequestTelemetry(currentTelemetry.getSchemaVersion(), false);\n-\n-        // grab whatever common fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getCommonTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        // grab whatever platform fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getPlatformTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        return lastTelemetry;\n-    }\n-\n     /**\n      * Flush the telemetry data for the current request to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n      * Removes the telemetry associated to the correlation id from the telemetry map,\n      * and saves it to the cache (SharedPreferences) as the last request telemetry.\n      */\n-    void flush() {\n-        String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        flush(correlationId);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     */\n-    public void flush(final String correlationId) {\n-        final String errorCode = null; // there was no error\n-        flush(correlationId, errorCode);\n-    }\n+    public void flush(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {\n+        final String methodName = \":flush\";\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param baseException exception that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final BaseException baseException) {\n-        flush(correlationId, baseException == null ? null : baseException.getErrorCode());\n-    }\n+        final String correlationId = command.getParameters().getCorrelationId();\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId      correlation id of the request\n-     * @param acquireTokenResult the result obtained from the acquire token call\n-     */\n-    public void flush(final String correlationId, final AcquireTokenResult acquireTokenResult) {\n-        final String errorCode = TelemetryUtils.errorFromAcquireTokenResult(acquireTokenResult);\n-        flush(correlationId, errorCode);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param errorCode     error that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final String errorCode) {\n-        final String methodName = \":flush\";\n         if (mTelemetryMap == null || correlationId == null) {\n             return;\n         }\n \n-        RequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+        CurrentRequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+\n         if (currentTelemetry == null) {\n             return;\n         }\n \n-        RequestTelemetry lastTelemetry = setupLastFromCurrent(currentTelemetry);\n-        lastTelemetry.putTelemetry(Schema.Key.CORRELATION_ID, correlationId);\n-        lastTelemetry.putTelemetry(Schema.Key.ERROR_CODE, errorCode);\n+        // load the last request object from cache\n+        LastRequestTelemetry lastRequestTelemetry = loadLastRequestTelemetryFromCache();\n \n-        currentTelemetry.clearTelemetry();\n+        // We did not have a last request object in cache, let's create a new one and copySharedValues\n+        // fields from current request where applicable\n+        if (lastRequestTelemetry == null) {\n+            lastRequestTelemetry = new LastRequestTelemetry(currentTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.copySharedValues(currentTelemetry);\n+        }\n+\n+        if (isTelemetryLoggedByServer(command, commandResult)) {\n+            // telemetry headers have been sent to token endpoint and logger by sts\n+            // this is the time to reset local telemetry state\n+\n+            // reset silent successful count as we just went to token endpoint\n+            lastRequestTelemetry.resetSilentSuccessCount();\n+\n+            // get the failed request set for this request. This includes all failed request\n+            // data that has been sent to STS in this request.\n+            Set<FailedRequest> failedRequestSentSet = mSentFailedRequests.get(correlationId);\n+\n+            // headers have been logged by sts - we don't need to hold on to this data - let's wipe\n+            lastRequestTelemetry.wipeFailedRequestAndErrorForSubList(failedRequestSentSet);\n+        }\n+\n+        // get the error encountered during execution of this command\n+        final String errorCode = getErrorFromCommandResult(commandResult);\n+\n+        if (errorCode != null) {\n+            // we have an error, let's append it to the list\n+            lastRequestTelemetry.appendFailedRequest(\n+                    currentTelemetry.getApiId(),\n+                    correlationId,\n+                    errorCode);\n+        } else if (command instanceof TokenCommand) {\n+            final ILocalAuthenticationResult localAuthenticationResult =\n+                    (ILocalAuthenticationResult) commandResult.getResult();\n+\n+            if (localAuthenticationResult.isServicedFromCache()) {\n+                // we returned a token from cache, let's increment the silent success count\n+                lastRequestTelemetry.incrementSilentSuccessCount();\n+            }\n+        } // else leave everything as is\n+\n+        // we're done processing telemetry for this command, let's remove it from the map\n         mTelemetryMap.remove(correlationId);\n+        mSentFailedRequests.remove(correlationId);\n \n-        if (mLastRequestTelemetryCache == null) {\n+        if (mLastRequestTelemetryCache != null) {\n+            // save the (updated) telemetry object back to telemetry cache\n+            mLastRequestTelemetryCache.saveRequestTelemetryToCache(lastRequestTelemetry);\n+        } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ0MzMyOA=="}, "originalCommit": {"oid": "6aecec9879629f326a8ae484c716e852db2f7f9a"}, "originalPosition": 309}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNzM5Nw==", "bodyText": "That would be simpler to implement, but probably be a bottleneck if there are multiple requests.... so.. tradeoffs here.\nThis probably depends on the number of parallel requests we're expecting - especially in Broker.\nI personally prefer #2, but if you think it's too complicated (to maintain) and not worth the performance gain, then I'm also fine with #1 as well. I'll let you make the call.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r397517397", "createdAt": "2020-03-24T23:13:42Z", "author": {"login": "rpdome"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -194,122 +221,139 @@ private IRequestTelemetryCache createLastRequestTelemetryCache(@NonNull final Co\n         return new SharedPreferencesLastRequestTelemetryCache(sharedPreferencesFileManager);\n     }\n \n-    private RequestTelemetry setupLastFromCurrent(@Nullable RequestTelemetry currentTelemetry) {\n-        if (currentTelemetry == null) {\n-            return new RequestTelemetry(Schema.CURRENT_SCHEMA_VERSION, false);\n-        }\n-\n-        RequestTelemetry lastTelemetry = new RequestTelemetry(currentTelemetry.getSchemaVersion(), false);\n-\n-        // grab whatever common fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getCommonTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        // grab whatever platform fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getPlatformTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        return lastTelemetry;\n-    }\n-\n     /**\n      * Flush the telemetry data for the current request to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n      * Removes the telemetry associated to the correlation id from the telemetry map,\n      * and saves it to the cache (SharedPreferences) as the last request telemetry.\n      */\n-    void flush() {\n-        String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        flush(correlationId);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     */\n-    public void flush(final String correlationId) {\n-        final String errorCode = null; // there was no error\n-        flush(correlationId, errorCode);\n-    }\n+    public void flush(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {\n+        final String methodName = \":flush\";\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param baseException exception that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final BaseException baseException) {\n-        flush(correlationId, baseException == null ? null : baseException.getErrorCode());\n-    }\n+        final String correlationId = command.getParameters().getCorrelationId();\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId      correlation id of the request\n-     * @param acquireTokenResult the result obtained from the acquire token call\n-     */\n-    public void flush(final String correlationId, final AcquireTokenResult acquireTokenResult) {\n-        final String errorCode = TelemetryUtils.errorFromAcquireTokenResult(acquireTokenResult);\n-        flush(correlationId, errorCode);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param errorCode     error that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final String errorCode) {\n-        final String methodName = \":flush\";\n         if (mTelemetryMap == null || correlationId == null) {\n             return;\n         }\n \n-        RequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+        CurrentRequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+\n         if (currentTelemetry == null) {\n             return;\n         }\n \n-        RequestTelemetry lastTelemetry = setupLastFromCurrent(currentTelemetry);\n-        lastTelemetry.putTelemetry(Schema.Key.CORRELATION_ID, correlationId);\n-        lastTelemetry.putTelemetry(Schema.Key.ERROR_CODE, errorCode);\n+        // load the last request object from cache\n+        LastRequestTelemetry lastRequestTelemetry = loadLastRequestTelemetryFromCache();\n \n-        currentTelemetry.clearTelemetry();\n+        // We did not have a last request object in cache, let's create a new one and copySharedValues\n+        // fields from current request where applicable\n+        if (lastRequestTelemetry == null) {\n+            lastRequestTelemetry = new LastRequestTelemetry(currentTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.copySharedValues(currentTelemetry);\n+        }\n+\n+        if (isTelemetryLoggedByServer(command, commandResult)) {\n+            // telemetry headers have been sent to token endpoint and logger by sts\n+            // this is the time to reset local telemetry state\n+\n+            // reset silent successful count as we just went to token endpoint\n+            lastRequestTelemetry.resetSilentSuccessCount();\n+\n+            // get the failed request set for this request. This includes all failed request\n+            // data that has been sent to STS in this request.\n+            Set<FailedRequest> failedRequestSentSet = mSentFailedRequests.get(correlationId);\n+\n+            // headers have been logged by sts - we don't need to hold on to this data - let's wipe\n+            lastRequestTelemetry.wipeFailedRequestAndErrorForSubList(failedRequestSentSet);\n+        }\n+\n+        // get the error encountered during execution of this command\n+        final String errorCode = getErrorFromCommandResult(commandResult);\n+\n+        if (errorCode != null) {\n+            // we have an error, let's append it to the list\n+            lastRequestTelemetry.appendFailedRequest(\n+                    currentTelemetry.getApiId(),\n+                    correlationId,\n+                    errorCode);\n+        } else if (command instanceof TokenCommand) {\n+            final ILocalAuthenticationResult localAuthenticationResult =\n+                    (ILocalAuthenticationResult) commandResult.getResult();\n+\n+            if (localAuthenticationResult.isServicedFromCache()) {\n+                // we returned a token from cache, let's increment the silent success count\n+                lastRequestTelemetry.incrementSilentSuccessCount();\n+            }\n+        } // else leave everything as is\n+\n+        // we're done processing telemetry for this command, let's remove it from the map\n         mTelemetryMap.remove(correlationId);\n+        mSentFailedRequests.remove(correlationId);\n \n-        if (mLastRequestTelemetryCache == null) {\n+        if (mLastRequestTelemetryCache != null) {\n+            // save the (updated) telemetry object back to telemetry cache\n+            mLastRequestTelemetryCache.saveRequestTelemetryToCache(lastRequestTelemetry);\n+        } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ0MzMyOA=="}, "originalCommit": {"oid": "6aecec9879629f326a8ae484c716e852db2f7f9a"}, "originalPosition": 309}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyNTcyMQ==", "bodyText": "Yeah I think 2 would be complicated to maintain and not worth the effort/performance gain.\nI went ahead using the 1st approach and addressed it here: c05a810", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/853#discussion_r397525721", "createdAt": "2020-03-24T23:37:01Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/eststelemetry/EstsTelemetry.java", "diffHunk": "@@ -194,122 +221,139 @@ private IRequestTelemetryCache createLastRequestTelemetryCache(@NonNull final Co\n         return new SharedPreferencesLastRequestTelemetryCache(sharedPreferencesFileManager);\n     }\n \n-    private RequestTelemetry setupLastFromCurrent(@Nullable RequestTelemetry currentTelemetry) {\n-        if (currentTelemetry == null) {\n-            return new RequestTelemetry(Schema.CURRENT_SCHEMA_VERSION, false);\n-        }\n-\n-        RequestTelemetry lastTelemetry = new RequestTelemetry(currentTelemetry.getSchemaVersion(), false);\n-\n-        // grab whatever common fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getCommonTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        // grab whatever platform fields we can from current request\n-        for (Map.Entry<String, String> entry : currentTelemetry.getPlatformTelemetry().entrySet()) {\n-            lastTelemetry.putTelemetry(entry.getKey(), entry.getValue());\n-        }\n-\n-        return lastTelemetry;\n-    }\n-\n     /**\n      * Flush the telemetry data for the current request to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n      * Removes the telemetry associated to the correlation id from the telemetry map,\n      * and saves it to the cache (SharedPreferences) as the last request telemetry.\n      */\n-    void flush() {\n-        String correlationId = DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID);\n-        flush(correlationId);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     */\n-    public void flush(final String correlationId) {\n-        final String errorCode = null; // there was no error\n-        flush(correlationId, errorCode);\n-    }\n+    public void flush(@NonNull final BaseCommand command, @NonNull final CommandResult commandResult) {\n+        final String methodName = \":flush\";\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param baseException exception that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final BaseException baseException) {\n-        flush(correlationId, baseException == null ? null : baseException.getErrorCode());\n-    }\n+        final String correlationId = command.getParameters().getCorrelationId();\n \n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId      correlation id of the request\n-     * @param acquireTokenResult the result obtained from the acquire token call\n-     */\n-    public void flush(final String correlationId, final AcquireTokenResult acquireTokenResult) {\n-        final String errorCode = TelemetryUtils.errorFromAcquireTokenResult(acquireTokenResult);\n-        flush(correlationId, errorCode);\n-    }\n-\n-    /**\n-     * Flush the telemetry data associated to the correlation id to the {@link android.content.SharedPreferences} using the {@link SharedPreferencesLastRequestTelemetryCache}.\n-     * Removes the telemetry associated to the correlation id from the telemetry map,\n-     * and saves it to the cache (SharedPreferences) as the last request telemetry.\n-     *\n-     * @param correlationId correlation id of the request\n-     * @param errorCode     error that may have occurred during the request\n-     */\n-    public void flush(final String correlationId, final String errorCode) {\n-        final String methodName = \":flush\";\n         if (mTelemetryMap == null || correlationId == null) {\n             return;\n         }\n \n-        RequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+        CurrentRequestTelemetry currentTelemetry = mTelemetryMap.get(correlationId);\n+\n         if (currentTelemetry == null) {\n             return;\n         }\n \n-        RequestTelemetry lastTelemetry = setupLastFromCurrent(currentTelemetry);\n-        lastTelemetry.putTelemetry(Schema.Key.CORRELATION_ID, correlationId);\n-        lastTelemetry.putTelemetry(Schema.Key.ERROR_CODE, errorCode);\n+        // load the last request object from cache\n+        LastRequestTelemetry lastRequestTelemetry = loadLastRequestTelemetryFromCache();\n \n-        currentTelemetry.clearTelemetry();\n+        // We did not have a last request object in cache, let's create a new one and copySharedValues\n+        // fields from current request where applicable\n+        if (lastRequestTelemetry == null) {\n+            lastRequestTelemetry = new LastRequestTelemetry(currentTelemetry.getSchemaVersion());\n+            lastRequestTelemetry = (LastRequestTelemetry) lastRequestTelemetry.copySharedValues(currentTelemetry);\n+        }\n+\n+        if (isTelemetryLoggedByServer(command, commandResult)) {\n+            // telemetry headers have been sent to token endpoint and logger by sts\n+            // this is the time to reset local telemetry state\n+\n+            // reset silent successful count as we just went to token endpoint\n+            lastRequestTelemetry.resetSilentSuccessCount();\n+\n+            // get the failed request set for this request. This includes all failed request\n+            // data that has been sent to STS in this request.\n+            Set<FailedRequest> failedRequestSentSet = mSentFailedRequests.get(correlationId);\n+\n+            // headers have been logged by sts - we don't need to hold on to this data - let's wipe\n+            lastRequestTelemetry.wipeFailedRequestAndErrorForSubList(failedRequestSentSet);\n+        }\n+\n+        // get the error encountered during execution of this command\n+        final String errorCode = getErrorFromCommandResult(commandResult);\n+\n+        if (errorCode != null) {\n+            // we have an error, let's append it to the list\n+            lastRequestTelemetry.appendFailedRequest(\n+                    currentTelemetry.getApiId(),\n+                    correlationId,\n+                    errorCode);\n+        } else if (command instanceof TokenCommand) {\n+            final ILocalAuthenticationResult localAuthenticationResult =\n+                    (ILocalAuthenticationResult) commandResult.getResult();\n+\n+            if (localAuthenticationResult.isServicedFromCache()) {\n+                // we returned a token from cache, let's increment the silent success count\n+                lastRequestTelemetry.incrementSilentSuccessCount();\n+            }\n+        } // else leave everything as is\n+\n+        // we're done processing telemetry for this command, let's remove it from the map\n         mTelemetryMap.remove(correlationId);\n+        mSentFailedRequests.remove(correlationId);\n \n-        if (mLastRequestTelemetryCache == null) {\n+        if (mLastRequestTelemetryCache != null) {\n+            // save the (updated) telemetry object back to telemetry cache\n+            mLastRequestTelemetryCache.saveRequestTelemetryToCache(lastRequestTelemetry);\n+        } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ0MzMyOA=="}, "originalCommit": {"oid": "6aecec9879629f326a8ae484c716e852db2f7f9a"}, "originalPosition": 309}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2307, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}