{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2MTM2ODE1", "number": 920, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODoxNTo1NlrOEBdt4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDo1MzoxNVrOECURpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTcwOTE1OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODoxNTo1NlrOGdU8Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDowMzoxMlrOGeraSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwNTAxNQ==", "bodyText": "nano-nit: it's odd that these lines moved.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r433405015", "createdAt": "2020-06-01T18:15:56Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -60,6 +57,9 @@\n import java.util.List;\n import java.util.Set;\n \n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38521d4fa15e7f1dd3d04cb97c8388903184384d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyMTcwNw==", "bodyText": "Android studio's  Auto rearrange moved it, so i think was not formatted as AndroidStudio's import format", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r434821707", "createdAt": "2020-06-03T20:03:12Z", "author": {"login": "kreedula"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -60,6 +57,9 @@\n import java.util.List;\n import java.util.Set;\n \n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwNTAxNQ=="}, "originalCommit": {"oid": "38521d4fa15e7f1dd3d04cb97c8388903184384d"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTcyNjQ5OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODoyMToxM1rOGdVHDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDowMzoyN1rOGera7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwNzc1OQ==", "bodyText": "nit: spacing after Load.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r433407759", "createdAt": "2020-06-01T18:21:13Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -672,6 +672,27 @@ private Credential getFamilyRefreshTokenForAccount(@NonNull final AccountRecord\n         return result;\n     }\n \n+    /**\n+     * Load  FRTs from the cache for an account matching the homeAccountId", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38521d4fa15e7f1dd3d04cb97c8388903184384d"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyMTg3MA==", "bodyText": "Addressed via fff3f7e", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r434821870", "createdAt": "2020-06-03T20:03:27Z", "author": {"login": "kreedula"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -672,6 +672,27 @@ private Credential getFamilyRefreshTokenForAccount(@NonNull final AccountRecord\n         return result;\n     }\n \n+    /**\n+     * Load  FRTs from the cache for an account matching the homeAccountId", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwNzc1OQ=="}, "originalCommit": {"oid": "38521d4fa15e7f1dd3d04cb97c8388903184384d"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTcyODkwOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/migration/TokenCacheItemMigrationAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODoyMTo1NVrOGdVIeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDowMzo1NVrOGerbzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwODEyMg==", "bodyText": "Why the ':' on refreshTokenRecord but nothing else?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r433408122", "createdAt": "2020-06-01T18:21:55Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/migration/TokenCacheItemMigrationAdapter.java", "diffHunk": "@@ -127,25 +128,26 @@\n      *\n      * @param clientId    String of the given client id.\n      * @param redirectUri redirect url string of the given client id.\n-     * @param cacheRecord Foci cache record.\n+     * @param accountRecord account record of request\n+     * @param refreshTokenRecord : refresh token record of FOCI account", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38521d4fa15e7f1dd3d04cb97c8388903184384d"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyMjA5NA==", "bodyText": "typo, Addressed via fff3f7e", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r434822094", "createdAt": "2020-06-03T20:03:55Z", "author": {"login": "kreedula"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/migration/TokenCacheItemMigrationAdapter.java", "diffHunk": "@@ -127,25 +128,26 @@\n      *\n      * @param clientId    String of the given client id.\n      * @param redirectUri redirect url string of the given client id.\n-     * @param cacheRecord Foci cache record.\n+     * @param accountRecord account record of request\n+     * @param refreshTokenRecord : refresh token record of FOCI account", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwODEyMg=="}, "originalCommit": {"oid": "38521d4fa15e7f1dd3d04cb97c8388903184384d"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTczODQyOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/migration/TokenCacheItemMigrationAdapter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODoyNDo1MVrOGdVOeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDoyODowOVrOGesLZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwOTY1Nw==", "bodyText": "Question: I've seen this pattern in the code, and I was wondering why we're not relying on the logger to yank the method out of the call stack from where the log line occurs.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r433409657", "createdAt": "2020-06-01T18:24:51Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/migration/TokenCacheItemMigrationAdapter.java", "diffHunk": "@@ -127,25 +128,26 @@\n      *\n      * @param clientId    String of the given client id.\n      * @param redirectUri redirect url string of the given client id.\n-     * @param cacheRecord Foci cache record.\n+     * @param accountRecord account record of request\n+     * @param refreshTokenRecord : refresh token record of FOCI account\n      * @return true if the given client id can use the cached foci token. False, otherwise.\n      * @throws ClientException\n      * @throws IOException\n      */\n-    public static boolean tryFociTokenWithGivenClientId(@NonNull final BrokerOAuth2TokenCache brokerOAuth2TokenCache,\n+    public static boolean tryFociTokenWithGivenClientId(@NonNull final OAuth2TokenCache brokerOAuth2TokenCache,\n                                                         @NonNull final String clientId,\n                                                         @NonNull final String redirectUri,\n-                                                        @NonNull final ICacheRecord cacheRecord)\n+                                                        @NonNull final RefreshTokenRecord refreshTokenRecord,\n+                                                        @NonNull final IAccountRecord accountRecord)\n             throws ClientException, IOException {\n         final String methodName = \":tryFociTokenWithGivenClientId\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38521d4fa15e7f1dd3d04cb97c8388903184384d"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyMzg0OA==", "bodyText": "Currently I believe our logger doesn't have functionality to get method names atleast for logs without stack trace. If we get to that functionality it would be great. To answer your question , it's been a pattern we historically followed, I am not a big fan of it personally too, but we haven't invested any cycles to change this.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r434823848", "createdAt": "2020-06-03T20:07:31Z", "author": {"login": "kreedula"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/migration/TokenCacheItemMigrationAdapter.java", "diffHunk": "@@ -127,25 +128,26 @@\n      *\n      * @param clientId    String of the given client id.\n      * @param redirectUri redirect url string of the given client id.\n-     * @param cacheRecord Foci cache record.\n+     * @param accountRecord account record of request\n+     * @param refreshTokenRecord : refresh token record of FOCI account\n      * @return true if the given client id can use the cached foci token. False, otherwise.\n      * @throws ClientException\n      * @throws IOException\n      */\n-    public static boolean tryFociTokenWithGivenClientId(@NonNull final BrokerOAuth2TokenCache brokerOAuth2TokenCache,\n+    public static boolean tryFociTokenWithGivenClientId(@NonNull final OAuth2TokenCache brokerOAuth2TokenCache,\n                                                         @NonNull final String clientId,\n                                                         @NonNull final String redirectUri,\n-                                                        @NonNull final ICacheRecord cacheRecord)\n+                                                        @NonNull final RefreshTokenRecord refreshTokenRecord,\n+                                                        @NonNull final IAccountRecord accountRecord)\n             throws ClientException, IOException {\n         final String methodName = \":tryFociTokenWithGivenClientId\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwOTY1Nw=="}, "originalCommit": {"oid": "38521d4fa15e7f1dd3d04cb97c8388903184384d"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzMDcyMg==", "bodyText": "Cool.  I actually tried writing a few things to change the logging stack, but it gets to be a really big change quickly.  I'm curious why we don't use one of the more standard logging frameworks like, say, slf4j, maybe it's binary size?\nAnyway, why I'm concerned a little, from https://developer.android.com/reference/android/util/Log.html :\nthat when you're building the string to pass into Log.d, the compiler uses a StringBuilder and at least three allocations occur: the StringBuilder itself, the buffer, and the String object. Realistically, there is also another buffer allocation and copy, and even more pressure on the gc. That means that if your log message is filtered out, you might be doing significant work and incurring significant overhead.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r434830722", "createdAt": "2020-06-03T20:21:24Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/migration/TokenCacheItemMigrationAdapter.java", "diffHunk": "@@ -127,25 +128,26 @@\n      *\n      * @param clientId    String of the given client id.\n      * @param redirectUri redirect url string of the given client id.\n-     * @param cacheRecord Foci cache record.\n+     * @param accountRecord account record of request\n+     * @param refreshTokenRecord : refresh token record of FOCI account\n      * @return true if the given client id can use the cached foci token. False, otherwise.\n      * @throws ClientException\n      * @throws IOException\n      */\n-    public static boolean tryFociTokenWithGivenClientId(@NonNull final BrokerOAuth2TokenCache brokerOAuth2TokenCache,\n+    public static boolean tryFociTokenWithGivenClientId(@NonNull final OAuth2TokenCache brokerOAuth2TokenCache,\n                                                         @NonNull final String clientId,\n                                                         @NonNull final String redirectUri,\n-                                                        @NonNull final ICacheRecord cacheRecord)\n+                                                        @NonNull final RefreshTokenRecord refreshTokenRecord,\n+                                                        @NonNull final IAccountRecord accountRecord)\n             throws ClientException, IOException {\n         final String methodName = \":tryFociTokenWithGivenClientId\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwOTY1Nw=="}, "originalCommit": {"oid": "38521d4fa15e7f1dd3d04cb97c8388903184384d"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzNDI3OA==", "bodyText": "IIRC, we looked at doing this awhile back and saw a lot of slowness around using Thread.getStackTrace to inspect the caller function. Now that threading has moved to a background thread this may be less of concern, depending on the internal mechanics of the getStackTrace implementation and runtime (ART vs Dalvik).", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r434834278", "createdAt": "2020-06-03T20:28:09Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/migration/TokenCacheItemMigrationAdapter.java", "diffHunk": "@@ -127,25 +128,26 @@\n      *\n      * @param clientId    String of the given client id.\n      * @param redirectUri redirect url string of the given client id.\n-     * @param cacheRecord Foci cache record.\n+     * @param accountRecord account record of request\n+     * @param refreshTokenRecord : refresh token record of FOCI account\n      * @return true if the given client id can use the cached foci token. False, otherwise.\n      * @throws ClientException\n      * @throws IOException\n      */\n-    public static boolean tryFociTokenWithGivenClientId(@NonNull final BrokerOAuth2TokenCache brokerOAuth2TokenCache,\n+    public static boolean tryFociTokenWithGivenClientId(@NonNull final OAuth2TokenCache brokerOAuth2TokenCache,\n                                                         @NonNull final String clientId,\n                                                         @NonNull final String redirectUri,\n-                                                        @NonNull final ICacheRecord cacheRecord)\n+                                                        @NonNull final RefreshTokenRecord refreshTokenRecord,\n+                                                        @NonNull final IAccountRecord accountRecord)\n             throws ClientException, IOException {\n         final String methodName = \":tryFociTokenWithGivenClientId\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwOTY1Nw=="}, "originalCommit": {"oid": "38521d4fa15e7f1dd3d04cb97c8388903184384d"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTc2MjM2OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BaseController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODozMjoxMVrOGdVdow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDowODoxOFrOGerkUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxMzUzOQ==", "bodyText": "The enclosing method is already Very Long(tm) - should this be a separate method?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r433413539", "createdAt": "2020-06-01T18:32:11Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BaseController.java", "diffHunk": "@@ -525,6 +527,41 @@ protected AccountRecord getCachedAccountRecord(\n                     );\n         }\n \n+        if (null == targetAccount && parameters.getOAuth2TokenCache() instanceof MsalOAuth2TokenCache) {\n+            // check for FOCI tokens, if available make a request to service to see if the client id is FOCI and save the tokens\n+            final RefreshTokenRecord refreshTokenRecord = ((MsalOAuth2TokenCache) parameters\n+                    .getOAuth2TokenCache())\n+                    .getFamilyRefreshTokenForHomeAccountId(homeAccountId);\n+\n+            if (refreshTokenRecord != null) {\n+                try {\n+                    TokenCacheItemMigrationAdapter.tryFociTokenWithGivenClientId(\n+                            parameters.getOAuth2TokenCache(),\n+                            parameters.getClientId(),\n+                            parameters.getRedirectUri(),\n+                            refreshTokenRecord,\n+                            parameters.getAccount()\n+                    );\n+\n+                    // Try to look for account again in the cache\n+                    targetAccount = parameters\n+                            .getOAuth2TokenCache()\n+                            .getAccountByLocalAccountId(\n+                                    null,\n+                                    clientId,\n+                                    localAccountId\n+                            );\n+                } catch (IOException e) {\n+                    Logger.warn(TAG,\n+                            \"Error while attempting to validate client: \"\n+                                    + clientId + \" is part of family \" + e.getMessage()\n+                    );\n+                }\n+            } else {\n+                Logger.info(TAG, \"No Foci tokens found for homeAccountId \" + homeAccountId);\n+            }\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38521d4fa15e7f1dd3d04cb97c8388903184384d"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyNDI3Mw==", "bodyText": "I'd buy that argument. Addressed via fff3f7e", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r434824273", "createdAt": "2020-06-03T20:08:18Z", "author": {"login": "kreedula"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BaseController.java", "diffHunk": "@@ -525,6 +527,41 @@ protected AccountRecord getCachedAccountRecord(\n                     );\n         }\n \n+        if (null == targetAccount && parameters.getOAuth2TokenCache() instanceof MsalOAuth2TokenCache) {\n+            // check for FOCI tokens, if available make a request to service to see if the client id is FOCI and save the tokens\n+            final RefreshTokenRecord refreshTokenRecord = ((MsalOAuth2TokenCache) parameters\n+                    .getOAuth2TokenCache())\n+                    .getFamilyRefreshTokenForHomeAccountId(homeAccountId);\n+\n+            if (refreshTokenRecord != null) {\n+                try {\n+                    TokenCacheItemMigrationAdapter.tryFociTokenWithGivenClientId(\n+                            parameters.getOAuth2TokenCache(),\n+                            parameters.getClientId(),\n+                            parameters.getRedirectUri(),\n+                            refreshTokenRecord,\n+                            parameters.getAccount()\n+                    );\n+\n+                    // Try to look for account again in the cache\n+                    targetAccount = parameters\n+                            .getOAuth2TokenCache()\n+                            .getAccountByLocalAccountId(\n+                                    null,\n+                                    clientId,\n+                                    localAccountId\n+                            );\n+                } catch (IOException e) {\n+                    Logger.warn(TAG,\n+                            \"Error while attempting to validate client: \"\n+                                    + clientId + \" is part of family \" + e.getMessage()\n+                    );\n+                }\n+            } else {\n+                Logger.info(TAG, \"No Foci tokens found for homeAccountId \" + homeAccountId);\n+            }\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxMzUzOQ=="}, "originalCommit": {"oid": "38521d4fa15e7f1dd3d04cb97c8388903184384d"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTc3MTUyOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BaseController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODozNDo1MlrOGdVjPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDowOTowN1rOGerlsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxNDk3Mg==", "bodyText": "The indentation here is almost deceptive.  Maybe a local reference to the token cache would help.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r433414972", "createdAt": "2020-06-01T18:34:52Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BaseController.java", "diffHunk": "@@ -525,6 +527,41 @@ protected AccountRecord getCachedAccountRecord(\n                     );\n         }\n \n+        if (null == targetAccount && parameters.getOAuth2TokenCache() instanceof MsalOAuth2TokenCache) {\n+            // check for FOCI tokens, if available make a request to service to see if the client id is FOCI and save the tokens\n+            final RefreshTokenRecord refreshTokenRecord = ((MsalOAuth2TokenCache) parameters\n+                    .getOAuth2TokenCache())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38521d4fa15e7f1dd3d04cb97c8388903184384d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyNDYyNA==", "bodyText": "fixed it , now taking it has an arg. See fff3f7e", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r434824624", "createdAt": "2020-06-03T20:09:07Z", "author": {"login": "kreedula"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BaseController.java", "diffHunk": "@@ -525,6 +527,41 @@ protected AccountRecord getCachedAccountRecord(\n                     );\n         }\n \n+        if (null == targetAccount && parameters.getOAuth2TokenCache() instanceof MsalOAuth2TokenCache) {\n+            // check for FOCI tokens, if available make a request to service to see if the client id is FOCI and save the tokens\n+            final RefreshTokenRecord refreshTokenRecord = ((MsalOAuth2TokenCache) parameters\n+                    .getOAuth2TokenCache())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxNDk3Mg=="}, "originalCommit": {"oid": "38521d4fa15e7f1dd3d04cb97c8388903184384d"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTc4Mjc5OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODozODoyNlrOGdVqUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTozNTozNFrOGeBLbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxNjc4Nw==", "bodyText": "Can I get you to add two tests to the MsalOAuth2TokenCacheTest for this? 1 to test successful retrieval and another to test null when no matches", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r433416787", "createdAt": "2020-06-01T18:38:26Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -672,6 +672,27 @@ private Credential getFamilyRefreshTokenForAccount(@NonNull final AccountRecord\n         return result;\n     }\n \n+    /**\n+     * Load  FRTs from the cache for an account matching the homeAccountId\n+     * @param homeAccountId : homeAccountId for which FRT is sought\n+     * @return an FRT if available else null.\n+     */\n+    @Nullable\n+    public RefreshTokenRecord getFamilyRefreshTokenForHomeAccountId(@NonNull final String homeAccountId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38521d4fa15e7f1dd3d04cb97c8388903184384d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyOTc3NQ==", "bodyText": "added tests as suggested", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r434129775", "createdAt": "2020-06-02T19:35:34Z", "author": {"login": "kreedula"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -672,6 +672,27 @@ private Credential getFamilyRefreshTokenForAccount(@NonNull final AccountRecord\n         return result;\n     }\n \n+    /**\n+     * Load  FRTs from the cache for an account matching the homeAccountId\n+     * @param homeAccountId : homeAccountId for which FRT is sought\n+     * @return an FRT if available else null.\n+     */\n+    @Nullable\n+    public RefreshTokenRecord getFamilyRefreshTokenForHomeAccountId(@NonNull final String homeAccountId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxNjc4Nw=="}, "originalCommit": {"oid": "38521d4fa15e7f1dd3d04cb97c8388903184384d"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTc4NjE0OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BaseController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODozOTozN1rOGdVsng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDowOToyOFrOGermaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxNzM3NA==", "bodyText": "we didn't rewrite the clientId reference.  Why get it again?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r433417374", "createdAt": "2020-06-01T18:39:37Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BaseController.java", "diffHunk": "@@ -525,6 +527,41 @@ protected AccountRecord getCachedAccountRecord(\n                     );\n         }\n \n+        if (null == targetAccount && parameters.getOAuth2TokenCache() instanceof MsalOAuth2TokenCache) {\n+            // check for FOCI tokens, if available make a request to service to see if the client id is FOCI and save the tokens\n+            final RefreshTokenRecord refreshTokenRecord = ((MsalOAuth2TokenCache) parameters\n+                    .getOAuth2TokenCache())\n+                    .getFamilyRefreshTokenForHomeAccountId(homeAccountId);\n+\n+            if (refreshTokenRecord != null) {\n+                try {\n+                    TokenCacheItemMigrationAdapter.tryFociTokenWithGivenClientId(\n+                            parameters.getOAuth2TokenCache(),\n+                            parameters.getClientId(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38521d4fa15e7f1dd3d04cb97c8388903184384d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyNDgwOA==", "bodyText": "Good catch, fixed it here : fff3f7e", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r434824808", "createdAt": "2020-06-03T20:09:28Z", "author": {"login": "kreedula"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BaseController.java", "diffHunk": "@@ -525,6 +527,41 @@ protected AccountRecord getCachedAccountRecord(\n                     );\n         }\n \n+        if (null == targetAccount && parameters.getOAuth2TokenCache() instanceof MsalOAuth2TokenCache) {\n+            // check for FOCI tokens, if available make a request to service to see if the client id is FOCI and save the tokens\n+            final RefreshTokenRecord refreshTokenRecord = ((MsalOAuth2TokenCache) parameters\n+                    .getOAuth2TokenCache())\n+                    .getFamilyRefreshTokenForHomeAccountId(homeAccountId);\n+\n+            if (refreshTokenRecord != null) {\n+                try {\n+                    TokenCacheItemMigrationAdapter.tryFociTokenWithGivenClientId(\n+                            parameters.getOAuth2TokenCache(),\n+                            parameters.getClientId(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxNzM3NA=="}, "originalCommit": {"oid": "38521d4fa15e7f1dd3d04cb97c8388903184384d"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTgyMjAwOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/migration/TokenCacheItemMigrationAdapter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODo1MDowNlrOGdWC5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTozNToxMFrOGeBKpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQyMzA3Nw==", "bodyText": "API breaking change FYI\nWould it be better to make an additive change here?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r433423077", "createdAt": "2020-06-01T18:50:06Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/migration/TokenCacheItemMigrationAdapter.java", "diffHunk": "@@ -127,25 +128,26 @@\n      *\n      * @param clientId    String of the given client id.\n      * @param redirectUri redirect url string of the given client id.\n-     * @param cacheRecord Foci cache record.\n+     * @param accountRecord account record of request\n+     * @param refreshTokenRecord : refresh token record of FOCI account\n      * @return true if the given client id can use the cached foci token. False, otherwise.\n      * @throws ClientException\n      * @throws IOException\n      */\n-    public static boolean tryFociTokenWithGivenClientId(@NonNull final BrokerOAuth2TokenCache brokerOAuth2TokenCache,\n+    public static boolean tryFociTokenWithGivenClientId(@NonNull final OAuth2TokenCache brokerOAuth2TokenCache,\n                                                         @NonNull final String clientId,\n                                                         @NonNull final String redirectUri,\n-                                                        @NonNull final ICacheRecord cacheRecord)\n+                                                        @NonNull final RefreshTokenRecord refreshTokenRecord,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38521d4fa15e7f1dd3d04cb97c8388903184384d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ0ODQyNQ==", "bodyText": "yup, broker uses it too. I made changes on broker , shouldn't have an impact,  but I think it is better to add as an additive to be safe , will make changes", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r433448425", "createdAt": "2020-06-01T19:41:03Z", "author": {"login": "kreedula"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/migration/TokenCacheItemMigrationAdapter.java", "diffHunk": "@@ -127,25 +128,26 @@\n      *\n      * @param clientId    String of the given client id.\n      * @param redirectUri redirect url string of the given client id.\n-     * @param cacheRecord Foci cache record.\n+     * @param accountRecord account record of request\n+     * @param refreshTokenRecord : refresh token record of FOCI account\n      * @return true if the given client id can use the cached foci token. False, otherwise.\n      * @throws ClientException\n      * @throws IOException\n      */\n-    public static boolean tryFociTokenWithGivenClientId(@NonNull final BrokerOAuth2TokenCache brokerOAuth2TokenCache,\n+    public static boolean tryFociTokenWithGivenClientId(@NonNull final OAuth2TokenCache brokerOAuth2TokenCache,\n                                                         @NonNull final String clientId,\n                                                         @NonNull final String redirectUri,\n-                                                        @NonNull final ICacheRecord cacheRecord)\n+                                                        @NonNull final RefreshTokenRecord refreshTokenRecord,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQyMzA3Nw=="}, "originalCommit": {"oid": "38521d4fa15e7f1dd3d04cb97c8388903184384d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyOTU3Mg==", "bodyText": "added as an additive change", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r434129572", "createdAt": "2020-06-02T19:35:10Z", "author": {"login": "kreedula"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/migration/TokenCacheItemMigrationAdapter.java", "diffHunk": "@@ -127,25 +128,26 @@\n      *\n      * @param clientId    String of the given client id.\n      * @param redirectUri redirect url string of the given client id.\n-     * @param cacheRecord Foci cache record.\n+     * @param accountRecord account record of request\n+     * @param refreshTokenRecord : refresh token record of FOCI account\n      * @return true if the given client id can use the cached foci token. False, otherwise.\n      * @throws ClientException\n      * @throws IOException\n      */\n-    public static boolean tryFociTokenWithGivenClientId(@NonNull final BrokerOAuth2TokenCache brokerOAuth2TokenCache,\n+    public static boolean tryFociTokenWithGivenClientId(@NonNull final OAuth2TokenCache brokerOAuth2TokenCache,\n                                                         @NonNull final String clientId,\n                                                         @NonNull final String redirectUri,\n-                                                        @NonNull final ICacheRecord cacheRecord)\n+                                                        @NonNull final RefreshTokenRecord refreshTokenRecord,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQyMzA3Nw=="}, "originalCommit": {"oid": "38521d4fa15e7f1dd3d04cb97c8388903184384d"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTgyNDU4OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/migration/TokenCacheItemMigrationAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODo1MDo1N1rOGdWEmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTozNDozOVrOGeBJig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQyMzUxNA==", "bodyText": "Same here it looks like.... another API breaking change I think?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r433423514", "createdAt": "2020-06-01T18:50:57Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/migration/TokenCacheItemMigrationAdapter.java", "diffHunk": "@@ -617,14 +619,14 @@ public static MicrosoftStsTokenRequest createTokenRequest(@NonNull final String\n         return tokenRequest;\n     }\n \n-    public static MicrosoftStsAuthorizationRequest createAuthRequest(@NonNull final MicrosoftStsOAuth2Strategy strategy,\n-                                                                     @NonNull final ICacheRecord cacheRecord,\n+    private static MicrosoftStsAuthorizationRequest createAuthRequest(@NonNull final MicrosoftStsOAuth2Strategy strategy,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38521d4fa15e7f1dd3d04cb97c8388903184384d"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyOTI5MA==", "bodyText": "this is just used internally as a helper function, can be private changed the scope to be internal to this class", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r434129290", "createdAt": "2020-06-02T19:34:39Z", "author": {"login": "kreedula"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/migration/TokenCacheItemMigrationAdapter.java", "diffHunk": "@@ -617,14 +619,14 @@ public static MicrosoftStsTokenRequest createTokenRequest(@NonNull final String\n         return tokenRequest;\n     }\n \n-    public static MicrosoftStsAuthorizationRequest createAuthRequest(@NonNull final MicrosoftStsOAuth2Strategy strategy,\n-                                                                     @NonNull final ICacheRecord cacheRecord,\n+    private static MicrosoftStsAuthorizationRequest createAuthRequest(@NonNull final MicrosoftStsOAuth2Strategy strategy,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQyMzUxNA=="}, "originalCommit": {"oid": "38521d4fa15e7f1dd3d04cb97c8388903184384d"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDIyMjcyOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTozOToyMlrOGeBS2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDoxMDoyNFrOGeroJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMTY3Mg==", "bodyText": "When does this return something that's not a RefreshTokenRecord?  If I go look at the code, it only sets credential being returned if it is instanceof RefreshTokenRecord, I think.  It's a private method - should we change the signature?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r434131672", "createdAt": "2020-06-02T19:39:22Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -672,6 +672,27 @@ private Credential getFamilyRefreshTokenForAccount(@NonNull final AccountRecord\n         return result;\n     }\n \n+    /**\n+     * Load  FRTs from the cache for an account matching the homeAccountId\n+     * @param homeAccountId : homeAccountId for which FRT is sought\n+     * @return an FRT if available else null.\n+     */\n+    @Nullable\n+    public RefreshTokenRecord getFamilyRefreshTokenForHomeAccountId(@NonNull final String homeAccountId) {\n+        final List<AccountRecord> accountRecords = mAccountCredentialCache.getAccounts();\n+\n+        for (AccountRecord accountRecord : accountRecords) {\n+            if (accountRecord.getHomeAccountId().equals(homeAccountId)) {\n+                final Credential rt = getFamilyRefreshTokenForAccount(accountRecord);\n+\n+                if (rt instanceof RefreshTokenRecord) {\n+                    return (RefreshTokenRecord) rt;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f32ac487d6c5e7a404e749c0b565a49b4292bfb1"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyNTI1Mg==", "bodyText": "Good point, agree. Addressed via fff3f7e", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r434825252", "createdAt": "2020-06-03T20:10:24Z", "author": {"login": "kreedula"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -672,6 +672,27 @@ private Credential getFamilyRefreshTokenForAccount(@NonNull final AccountRecord\n         return result;\n     }\n \n+    /**\n+     * Load  FRTs from the cache for an account matching the homeAccountId\n+     * @param homeAccountId : homeAccountId for which FRT is sought\n+     * @return an FRT if available else null.\n+     */\n+    @Nullable\n+    public RefreshTokenRecord getFamilyRefreshTokenForHomeAccountId(@NonNull final String homeAccountId) {\n+        final List<AccountRecord> accountRecords = mAccountCredentialCache.getAccounts();\n+\n+        for (AccountRecord accountRecord : accountRecords) {\n+            if (accountRecord.getHomeAccountId().equals(homeAccountId)) {\n+                final Credential rt = getFamilyRefreshTokenForAccount(accountRecord);\n+\n+                if (rt instanceof RefreshTokenRecord) {\n+                    return (RefreshTokenRecord) rt;\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMTY3Mg=="}, "originalCommit": {"oid": "f32ac487d6c5e7a404e749c0b565a49b4292bfb1"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODUyNDQxOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BaseController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDoxMzozNVrOGert3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMToxOToxM1rOGet--g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyNjcxNg==", "bodyText": "nit: space after cast.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r434826716", "createdAt": "2020-06-03T20:13:35Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BaseController.java", "diffHunk": "@@ -525,6 +528,13 @@ protected AccountRecord getCachedAccountRecord(\n                     );\n         }\n \n+        if (null == targetAccount && parameters.getOAuth2TokenCache() instanceof MsalOAuth2TokenCache) {\n+            targetAccount = getAccountWithFRTIfAvailable(\n+                    parameters,\n+                    (MsalOAuth2TokenCache)parameters.getOAuth2TokenCache()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2851b245067b3adaeed8dc0e99f8ce8ea158ea66"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2Mzg2Ng==", "bodyText": "Addressed via : b8f4d0e", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r434863866", "createdAt": "2020-06-03T21:19:13Z", "author": {"login": "kreedula"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BaseController.java", "diffHunk": "@@ -525,6 +528,13 @@ protected AccountRecord getCachedAccountRecord(\n                     );\n         }\n \n+        if (null == targetAccount && parameters.getOAuth2TokenCache() instanceof MsalOAuth2TokenCache) {\n+            targetAccount = getAccountWithFRTIfAvailable(\n+                    parameters,\n+                    (MsalOAuth2TokenCache)parameters.getOAuth2TokenCache()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyNjcxNg=="}, "originalCommit": {"oid": "2851b245067b3adaeed8dc0e99f8ce8ea158ea66"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODU2NTI3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDoyNjoyN1rOGesH-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMToxODo1OVrOGet-gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzMzQwMw==", "bodyText": "nit: inline?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r434833403", "createdAt": "2020-06-03T20:26:27Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -672,6 +672,23 @@ private Credential getFamilyRefreshTokenForAccount(@NonNull final AccountRecord\n         return result;\n     }\n \n+    /**\n+     * Load FRTs from the cache for an account matching the homeAccountId\n+     * @param homeAccountId : homeAccountId for which FRT is sought\n+     * @return an FRT if available else null.\n+     */\n+    @Nullable\n+    public RefreshTokenRecord getFamilyRefreshTokenForHomeAccountId(@NonNull final String homeAccountId) {\n+        final List<AccountRecord> accountRecords = mAccountCredentialCache.getAccounts();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2851b245067b3adaeed8dc0e99f8ce8ea158ea66"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2Mzc0NA==", "bodyText": "Addressed via : b8f4d0e", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r434863744", "createdAt": "2020-06-03T21:18:59Z", "author": {"login": "kreedula"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -672,6 +672,23 @@ private Credential getFamilyRefreshTokenForAccount(@NonNull final AccountRecord\n         return result;\n     }\n \n+    /**\n+     * Load FRTs from the cache for an account matching the homeAccountId\n+     * @param homeAccountId : homeAccountId for which FRT is sought\n+     * @return an FRT if available else null.\n+     */\n+    @Nullable\n+    public RefreshTokenRecord getFamilyRefreshTokenForHomeAccountId(@NonNull final String homeAccountId) {\n+        final List<AccountRecord> accountRecords = mAccountCredentialCache.getAccounts();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzMzQwMw=="}, "originalCommit": {"oid": "2851b245067b3adaeed8dc0e99f8ce8ea158ea66"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODU5NzAzOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/migration/TokenCacheItemMigrationAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDozNzozMVrOGesdDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDozNzozMVrOGesdDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzODc5OA==", "bodyText": "Random comment: I kinda want to write StringUtil.defaultIfEmpty(String a, String b) -> isEmpty(a) ? b : a;", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r434838798", "createdAt": "2020-06-03T20:37:31Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/migration/TokenCacheItemMigrationAdapter.java", "diffHunk": "@@ -135,17 +139,40 @@\n     public static boolean tryFociTokenWithGivenClientId(@NonNull final BrokerOAuth2TokenCache brokerOAuth2TokenCache,\n                                                         @NonNull final String clientId,\n                                                         @NonNull final String redirectUri,\n-                                                        @NonNull final ICacheRecord cacheRecord)\n+                                                        @NonNull final ICacheRecord cacheRecord) throws IOException, ClientException {\n+        return tryFociTokenWithGivenClientId(\n+                brokerOAuth2TokenCache,\n+                clientId, redirectUri,\n+                cacheRecord.getRefreshToken(),\n+                cacheRecord.getAccount()\n+        );\n+    }\n+\n+    /**\n+     * Testing whether the given client ID can use the cached foci to refresh token.\n+     *\n+     * @param clientId    String of the given client id.\n+     * @param redirectUri redirect url string of the given client id.\n+     * @param accountRecord account record of request\n+     * @param refreshTokenRecord refresh token record of FOCI account\n+     * @return true if the given client id can use the cached foci token. False, otherwise.\n+     * @throws ClientException\n+     * @throws IOException\n+     */\n+    public static boolean tryFociTokenWithGivenClientId(@NonNull final OAuth2TokenCache brokerOAuth2TokenCache,\n+                                                        @NonNull final String clientId,\n+                                                        @NonNull final String redirectUri,\n+                                                        @NonNull final RefreshTokenRecord refreshTokenRecord,\n+                                                        @NonNull final IAccountRecord accountRecord)\n             throws ClientException, IOException {\n         final String methodName = \":tryFociTokenWithGivenClientId\";\n         final MicrosoftStsOAuth2Configuration config = new MicrosoftStsOAuth2Configuration();\n \n         //Get authority url\n         final Uri.Builder requestUrlBuilder = new Uri.Builder();\n-        final String tenantId = cacheRecord.getAccount().getRealm();\n         requestUrlBuilder.scheme(\"https\")\n-                .authority(cacheRecord.getRefreshToken().getEnvironment())\n-                .appendPath(StringUtil.isEmpty(tenantId) ? ALL_ACCOUNTS_TENANT_ID : tenantId);\n+                .authority(refreshTokenRecord.getEnvironment())\n+                .appendPath(StringUtil.isEmpty(accountRecord.getRealm()) ? ALL_ACCOUNTS_TENANT_ID : accountRecord.getRealm());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72f6a15d7557006bcbc3f72d8daf18e7d7b9c195"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODY0ODA1OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BaseController.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDo1MzoxNVrOGes84g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMToyNjoxNFrOGeytgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0Njk0Ng==", "bodyText": "OK, we have the token then we make this call.  We stuff it into the datastore as a side effect, then go back to the datastore to pull it out again.  There's probably a reason we don't just return it... but anyway, this method returns a boolean value that we're not checking.  Should we check it?  Should we return the token instead?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r434846946", "createdAt": "2020-06-03T20:53:15Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BaseController.java", "diffHunk": "@@ -552,6 +562,48 @@ protected AccountRecord getCachedAccountRecord(\n         return targetAccount;\n     }\n \n+    @Nullable\n+    private AccountRecord getAccountWithFRTIfAvailable(@NonNull final SilentTokenCommandParameters parameters,\n+                                                       @NonNull final MsalOAuth2TokenCache msalOAuth2TokenCache){\n+\n+        final String homeAccountId = parameters.getAccount().getHomeAccountId();\n+        final String clientId = parameters.getClientId();\n+\n+        // check for FOCI tokens for the homeAccountId\n+        final RefreshTokenRecord refreshTokenRecord = msalOAuth2TokenCache\n+                .getFamilyRefreshTokenForHomeAccountId(homeAccountId);\n+\n+        if (refreshTokenRecord != null) {\n+            try {\n+                // foci token is available, make a request to service to see if the client id is FOCI and save the tokens\n+                TokenCacheItemMigrationAdapter.tryFociTokenWithGivenClientId(\n+                        parameters.getOAuth2TokenCache(),\n+                        clientId,\n+                        parameters.getRedirectUri(),\n+                        refreshTokenRecord,\n+                        parameters.getAccount()\n+                );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72f6a15d7557006bcbc3f72d8daf18e7d7b9c195"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2MjkyMg==", "bodyText": "The use case here is:\nWe have a Family Refresh Token for an Microsoft first party client id(Teams for Life here) for this user after he signs in\nNow we get a silent request for this IAccount with another Microsoft first party client id(Teams for Work) - at this point we don't have any account associated with this client id.\nWhat this change enables is, if the user has Family Refresh Token (applicable only for MSFT ), we try to make a dummy silent request in tryFociTokenWithGivenClientId with the FRT, default scopes and the new client id  and if the request succeeds we save the account and tokens for this client id in this cache. The access token here won't be used and will be replaced as it has just the default scopes.\nNow the caller when it looks for the IAccount for this client, it gets one and makes the actual request for an access token for the required scopes passed in using the new RT which was saved.\nThe boolean can be ignored in our case, as we have sufficient logging in tryFociTokenWithGivenClientId to understand if the request succeeds.\nHope this helps", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r434862922", "createdAt": "2020-06-03T21:17:19Z", "author": {"login": "kreedula"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BaseController.java", "diffHunk": "@@ -552,6 +562,48 @@ protected AccountRecord getCachedAccountRecord(\n         return targetAccount;\n     }\n \n+    @Nullable\n+    private AccountRecord getAccountWithFRTIfAvailable(@NonNull final SilentTokenCommandParameters parameters,\n+                                                       @NonNull final MsalOAuth2TokenCache msalOAuth2TokenCache){\n+\n+        final String homeAccountId = parameters.getAccount().getHomeAccountId();\n+        final String clientId = parameters.getClientId();\n+\n+        // check for FOCI tokens for the homeAccountId\n+        final RefreshTokenRecord refreshTokenRecord = msalOAuth2TokenCache\n+                .getFamilyRefreshTokenForHomeAccountId(homeAccountId);\n+\n+        if (refreshTokenRecord != null) {\n+            try {\n+                // foci token is available, make a request to service to see if the client id is FOCI and save the tokens\n+                TokenCacheItemMigrationAdapter.tryFociTokenWithGivenClientId(\n+                        parameters.getOAuth2TokenCache(),\n+                        clientId,\n+                        parameters.getRedirectUri(),\n+                        refreshTokenRecord,\n+                        parameters.getAccount()\n+                );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0Njk0Ng=="}, "originalCommit": {"oid": "72f6a15d7557006bcbc3f72d8daf18e7d7b9c195"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4MTIzMQ==", "bodyText": "Oh, no, thanks for bearing with me.\nOK, so the interesting side effect of tryFociWithGivenClientId is to bind the FRT to the new client id and store these refresh tokens by client id in the cache.  Is it possible to return a non-null AccountRecord from the call to getAccountByLocalAccountId even if the attempt to execute the family token refresh failed with the new client id? It seems like it shouldn't, right now, but that's largely because I'm thinking that the sole purpose of this method is to return an account iff this is a client id that part of the family, and if that was the case the refresh would have succeeded.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r434881231", "createdAt": "2020-06-03T21:58:30Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BaseController.java", "diffHunk": "@@ -552,6 +562,48 @@ protected AccountRecord getCachedAccountRecord(\n         return targetAccount;\n     }\n \n+    @Nullable\n+    private AccountRecord getAccountWithFRTIfAvailable(@NonNull final SilentTokenCommandParameters parameters,\n+                                                       @NonNull final MsalOAuth2TokenCache msalOAuth2TokenCache){\n+\n+        final String homeAccountId = parameters.getAccount().getHomeAccountId();\n+        final String clientId = parameters.getClientId();\n+\n+        // check for FOCI tokens for the homeAccountId\n+        final RefreshTokenRecord refreshTokenRecord = msalOAuth2TokenCache\n+                .getFamilyRefreshTokenForHomeAccountId(homeAccountId);\n+\n+        if (refreshTokenRecord != null) {\n+            try {\n+                // foci token is available, make a request to service to see if the client id is FOCI and save the tokens\n+                TokenCacheItemMigrationAdapter.tryFociTokenWithGivenClientId(\n+                        parameters.getOAuth2TokenCache(),\n+                        clientId,\n+                        parameters.getRedirectUri(),\n+                        refreshTokenRecord,\n+                        parameters.getAccount()\n+                );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0Njk0Ng=="}, "originalCommit": {"oid": "72f6a15d7557006bcbc3f72d8daf18e7d7b9c195"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk0MTMxNQ==", "bodyText": "yes, not just a side effect, i could say the primary purpose of this tryFociWithGivenClientId is to insert an AccountRecord for the given client, if it's part of FOCI (we determine this by sending a request with FRT and if it succeeds).\nAnd yes, if the token request with FRT failed , we should not get an AccountRecord when getAccountByLocalAccountId is invoked with that client id in this scenerio", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/920#discussion_r434941315", "createdAt": "2020-06-04T01:26:14Z", "author": {"login": "kreedula"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BaseController.java", "diffHunk": "@@ -552,6 +562,48 @@ protected AccountRecord getCachedAccountRecord(\n         return targetAccount;\n     }\n \n+    @Nullable\n+    private AccountRecord getAccountWithFRTIfAvailable(@NonNull final SilentTokenCommandParameters parameters,\n+                                                       @NonNull final MsalOAuth2TokenCache msalOAuth2TokenCache){\n+\n+        final String homeAccountId = parameters.getAccount().getHomeAccountId();\n+        final String clientId = parameters.getClientId();\n+\n+        // check for FOCI tokens for the homeAccountId\n+        final RefreshTokenRecord refreshTokenRecord = msalOAuth2TokenCache\n+                .getFamilyRefreshTokenForHomeAccountId(homeAccountId);\n+\n+        if (refreshTokenRecord != null) {\n+            try {\n+                // foci token is available, make a request to service to see if the client id is FOCI and save the tokens\n+                TokenCacheItemMigrationAdapter.tryFociTokenWithGivenClientId(\n+                        parameters.getOAuth2TokenCache(),\n+                        clientId,\n+                        parameters.getRedirectUri(),\n+                        refreshTokenRecord,\n+                        parameters.getAccount()\n+                );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0Njk0Ng=="}, "originalCommit": {"oid": "72f6a15d7557006bcbc3f72d8daf18e7d7b9c195"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2372, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}