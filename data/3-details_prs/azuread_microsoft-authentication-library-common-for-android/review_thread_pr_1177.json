{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2MDE2NzY2", "number": 1177, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODozMDozOFrOFL24Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QyMToyNTozMFrOFblaQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3OTc3NzUxOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODozMDozOFrOIPRvAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQyMDoyNjoyN1rOIXQ9Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5MDExMg==", "bodyText": "At a glance, this doesn't look correct.... IIRC RefreshToken credential types set \"\" as the realm, my suspicion is that PRTs should be cached according to the same rules. This should be confirmed with the iOS team for consistency", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r552890112", "createdAt": "2021-01-06T18:30:38Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "diffHunk": "@@ -183,6 +185,10 @@ public String generateCacheKey(Credential credential) {\n             final IdTokenRecord idToken = (IdTokenRecord) credential;\n             cacheKey = cacheKey.replace(REALM, sanitizeNull(idToken.getRealm()));\n             cacheKey = cacheKey.replace(TARGET, \"\");\n+        } else if (credential instanceof PrimaryRefreshTokenRecord) {\n+            final PrimaryRefreshTokenRecord primaryRefreshTokenRecord = (PrimaryRefreshTokenRecord) credential;\n+            cacheKey = cacheKey.replace(REALM, sanitizeNull(primaryRefreshTokenRecord.getRealm()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b6d670601520f3901118a84aef725916b939a2e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc5NDMyNg==", "bodyText": "Thanks. Changed REALM to \"\". And also do we need to set client_id to \"\" as well for PRT ?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r560794326", "createdAt": "2021-01-20T09:05:42Z", "author": {"login": "richard1122"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "diffHunk": "@@ -183,6 +185,10 @@ public String generateCacheKey(Credential credential) {\n             final IdTokenRecord idToken = (IdTokenRecord) credential;\n             cacheKey = cacheKey.replace(REALM, sanitizeNull(idToken.getRealm()));\n             cacheKey = cacheKey.replace(TARGET, \"\");\n+        } else if (credential instanceof PrimaryRefreshTokenRecord) {\n+            final PrimaryRefreshTokenRecord primaryRefreshTokenRecord = (PrimaryRefreshTokenRecord) credential;\n+            cacheKey = cacheKey.replace(REALM, sanitizeNull(primaryRefreshTokenRecord.getRealm()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5MDExMg=="}, "originalCommit": {"oid": "7b6d670601520f3901118a84aef725916b939a2e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI2NjAyMg==", "bodyText": "@richard1122 please confirm the desired cache-key behavior with @oldalton and write your tests accordingly", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r561266022", "createdAt": "2021-01-20T20:26:27Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "diffHunk": "@@ -183,6 +185,10 @@ public String generateCacheKey(Credential credential) {\n             final IdTokenRecord idToken = (IdTokenRecord) credential;\n             cacheKey = cacheKey.replace(REALM, sanitizeNull(idToken.getRealm()));\n             cacheKey = cacheKey.replace(TARGET, \"\");\n+        } else if (credential instanceof PrimaryRefreshTokenRecord) {\n+            final PrimaryRefreshTokenRecord primaryRefreshTokenRecord = (PrimaryRefreshTokenRecord) credential;\n+            cacheKey = cacheKey.replace(REALM, sanitizeNull(primaryRefreshTokenRecord.getRealm()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5MDExMg=="}, "originalCommit": {"oid": "7b6d670601520f3901118a84aef725916b939a2e"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3OTgwMDk1OnYy", "diffSide": "RIGHT", "path": "common/src/androidTest/java/com/microsoft/identity/common/MsalOAuth2TokenCacheTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODozODoxNlrOIPR-Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODozODoxNlrOIPR-Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5Mzk2Mw==", "bodyText": "nit: the format, as I understand it, will be something like \"3.0\", not \"V3\"", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r552893963", "createdAt": "2021-01-06T18:38:16Z", "author": {"login": "iambmelt"}, "path": "common/src/androidTest/java/com/microsoft/identity/common/MsalOAuth2TokenCacheTest.java", "diffHunk": "@@ -190,6 +195,20 @@\n             mGeneratedIdToken.setClientId(clientId);\n             mGeneratedIdToken.setSecret(idTokenSecret);\n             mGeneratedIdToken.setAuthority(\"https://sts.windows.net/0287f963-2d72-4363-9e3a-5705c5b0f031/\");\n+\n+            mGeneratedPrimaryRefreshToken = new PrimaryRefreshTokenRecord();\n+            mGeneratedPrimaryRefreshToken.setSecret(rtSecret);\n+            mGeneratedPrimaryRefreshToken.setTarget(target);\n+            mGeneratedPrimaryRefreshToken.setHomeAccountId(homeAccountId);\n+            mGeneratedPrimaryRefreshToken.setEnvironment(environment);\n+            mGeneratedPrimaryRefreshToken.setCredentialType(PrimaryRefreshToken.name());\n+            mGeneratedPrimaryRefreshToken.setClientId(clientId);\n+            mGeneratedPrimaryRefreshToken.setFamilyId(familyId);\n+            mGeneratedPrimaryRefreshToken.setRealm(realm);\n+            mGeneratedPrimaryRefreshToken.setExpiresOn(expiresOn);\n+            mGeneratedPrimaryRefreshToken.setCachedAt(cacheAt);\n+            mGeneratedPrimaryRefreshToken.setSessionKey(prtSessionKey);\n+            mGeneratedPrimaryRefreshToken.setPrtProtocolVersion(\"V3\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b6d670601520f3901118a84aef725916b939a2e"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3OTgwMzU4OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/SharedPreferencesAccountCredentialCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODozOTowN1rOIPR_mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODozOTowN1rOIPR_mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5NDM2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            }else {\n          \n          \n            \n                            } else {", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r552894360", "createdAt": "2021-01-06T18:39:07Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/SharedPreferencesAccountCredentialCache.java", "diffHunk": "@@ -430,7 +430,10 @@ public static CredentialType getCredentialTypeForCredentialCacheKey(@NonNull fin\n                 } else if (CredentialType.V1IdToken.name().equalsIgnoreCase(credentialTypeStr)) {\n                     type = CredentialType.V1IdToken;\n                     break;\n-                } else {\n+                } else if (CredentialType.PrimaryRefreshToken.name().equalsIgnoreCase(credentialTypeStr)) {\n+                    type = CredentialType.PrimaryRefreshToken;\n+                    break;\n+                }else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b6d670601520f3901118a84aef725916b939a2e"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzNjU2MzE3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/WebViewAuthorizationFragment.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwNjo0MjowMFrOIXnfMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwODozMTo1OFrOIXqmoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTYzNTEyMQ==", "bodyText": "Hi @jbzdarkid, could you help review this?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r561635121", "createdAt": "2021-01-21T06:42:00Z", "author": {"login": "richard1122"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/WebViewAuthorizationFragment.java", "diffHunk": "@@ -139,14 +140,11 @@ public void onPageLoaded() {\n                         // Inject the javascript string from testing. This should only be evaluated if we haven't sent\n                         // an auth result already.\n                         if (mAuthResultSent == false && !StringExtensions.isNullOrBlank(mPostPageLoadedJavascript)) {\n-                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n-                                mWebView.evaluateJavascript(mPostPageLoadedJavascript, null);\n-                            } else {\n-                                // On earlier versions of Android, javascript has to be loaded with a custom scheme.\n-                                // In these cases, Android will helpfully unescape any octects it finds. Unfortunately,\n-                                // our javascript may contain the '%' character, so we escape it again, to undo that.\n-                                mWebView.loadUrl(\"javascript:\" + mPostPageLoadedJavascript.replace(\"%\", \"%25\"));\n-                            }\n+                            // TODO: #1268511 use EvaluteJavascript after tests are stable.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fd76bb2c3c0a90371da53e62fa3dd9023a92670"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY3NDI1OQ==", "bodyText": "Can you explain what part of this wasn't working? I saw no issues with evaluateJavascript in the tests that Brian & I ran.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r561674259", "createdAt": "2021-01-21T08:11:49Z", "author": {"login": "jbzdarkid"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/WebViewAuthorizationFragment.java", "diffHunk": "@@ -139,14 +140,11 @@ public void onPageLoaded() {\n                         // Inject the javascript string from testing. This should only be evaluated if we haven't sent\n                         // an auth result already.\n                         if (mAuthResultSent == false && !StringExtensions.isNullOrBlank(mPostPageLoadedJavascript)) {\n-                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n-                                mWebView.evaluateJavascript(mPostPageLoadedJavascript, null);\n-                            } else {\n-                                // On earlier versions of Android, javascript has to be loaded with a custom scheme.\n-                                // In these cases, Android will helpfully unescape any octects it finds. Unfortunately,\n-                                // our javascript may contain the '%' character, so we escape it again, to undo that.\n-                                mWebView.loadUrl(\"javascript:\" + mPostPageLoadedJavascript.replace(\"%\", \"%25\"));\n-                            }\n+                            // TODO: #1268511 use EvaluteJavascript after tests are stable.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTYzNTEyMQ=="}, "originalCommit": {"oid": "3fd76bb2c3c0a90371da53e62fa3dd9023a92670"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY4NjE3Ng==", "bodyText": "In the WIP PR to enable InteractivePrtApiTests: https://github.com/AzureAD/microsoft-authentication-library-for-cpp/pull/1836/files#diff-a8ca4d4dabdc4dd14163d2252bf0d0f7db2cdf9bc7627e2e7c4dd61a7a6b09adR269\nThe webview will stuck at signin page, and after connected devtools, I saw endless requests canceled. Added some captures.\nhttps://identitydivision.visualstudio.com/DevEx/_workitems/edit/1268511/", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r561686176", "createdAt": "2021-01-21T08:31:58Z", "author": {"login": "richard1122"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/WebViewAuthorizationFragment.java", "diffHunk": "@@ -139,14 +140,11 @@ public void onPageLoaded() {\n                         // Inject the javascript string from testing. This should only be evaluated if we haven't sent\n                         // an auth result already.\n                         if (mAuthResultSent == false && !StringExtensions.isNullOrBlank(mPostPageLoadedJavascript)) {\n-                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n-                                mWebView.evaluateJavascript(mPostPageLoadedJavascript, null);\n-                            } else {\n-                                // On earlier versions of Android, javascript has to be loaded with a custom scheme.\n-                                // In these cases, Android will helpfully unescape any octects it finds. Unfortunately,\n-                                // our javascript may contain the '%' character, so we escape it again, to undo that.\n-                                mWebView.loadUrl(\"javascript:\" + mPostPageLoadedJavascript.replace(\"%\", \"%25\"));\n-                            }\n+                            // TODO: #1268511 use EvaluteJavascript after tests are stable.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTYzNTEyMQ=="}, "originalCommit": {"oid": "3fd76bb2c3c0a90371da53e62fa3dd9023a92670"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzNjU2NzAzOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwNjo0Mzo1MlrOIXnhcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxMjozMToxNFrOIYiXxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTYzNTY5OA==", "bodyText": "Hi @oldalton, this is cache key for PRT.\nNow it only constructed from HOME_ACCOUNT_ID, ENVIRONMENT and CREDENTIAL_TYPE.\nTests add primaryRefreshTokenCacheKeyComplete", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r561635698", "createdAt": "2021-01-21T06:43:52Z", "author": {"login": "richard1122"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "diffHunk": "@@ -163,6 +164,8 @@ public String generateCacheKey(Credential credential) {\n             }\n \n             cacheKey = cacheKey.replace(CLIENT_ID, familyIdForCacheKey);\n+        } else if (credential instanceof PrimaryRefreshTokenRecord) {\n+            cacheKey = cacheKey.replace(CLIENT_ID, \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fd76bb2c3c0a90371da53e62fa3dd9023a92670"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjE1MTYyMA==", "bodyText": "Hi, please follow the schema as described here: https://identitydivision.visualstudio.com/DevEx/_git/AuthLibrariesApiReview?path=%2FSSO%2FSchema.md (Primary refresh token schema section)\nKey should contain home account id, environment, credential type, and clientId in a specific order.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r562151620", "createdAt": "2021-01-21T19:44:57Z", "author": {"login": "oldalton"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "diffHunk": "@@ -163,6 +164,8 @@ public String generateCacheKey(Credential credential) {\n             }\n \n             cacheKey = cacheKey.replace(CLIENT_ID, familyIdForCacheKey);\n+        } else if (credential instanceof PrimaryRefreshTokenRecord) {\n+            cacheKey = cacheKey.replace(CLIENT_ID, \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTYzNTY5OA=="}, "originalCommit": {"oid": "3fd76bb2c3c0a90371da53e62fa3dd9023a92670"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU5OTg3Nw==", "bodyText": "Thanks, please help review again..", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r562599877", "createdAt": "2021-01-22T12:31:14Z", "author": {"login": "richard1122"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "diffHunk": "@@ -163,6 +164,8 @@ public String generateCacheKey(Credential credential) {\n             }\n \n             cacheKey = cacheKey.replace(CLIENT_ID, familyIdForCacheKey);\n+        } else if (credential instanceof PrimaryRefreshTokenRecord) {\n+            cacheKey = cacheKey.replace(CLIENT_ID, \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTYzNTY5OA=="}, "originalCommit": {"oid": "3fd76bb2c3c0a90371da53e62fa3dd9023a92670"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NTE2NjcyOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQyMzoxNDozMVrOIY4uWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOFQwMjowOTo1N1rOInS_nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk2NjEwNQ==", "bodyText": "I don't understand this. Why is this value being set to \"\"? Can you point me towards where this is outlined in the schema spec?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r562966105", "createdAt": "2021-01-22T23:14:31Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "diffHunk": "@@ -192,6 +196,9 @@ public String generateCacheKey(Credential credential) {\n             final IdTokenRecord idToken = (IdTokenRecord) credential;\n             cacheKey = cacheKey.replace(REALM, sanitizeNull(idToken.getRealm()));\n             cacheKey = cacheKey.replace(TARGET, \"\");\n+        } else if (credential instanceof PrimaryRefreshTokenRecord) {\n+            cacheKey = cacheKey.replace(REALM, \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06913bcd582bd5147bb724836af056ec8aecb3cb"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk2ODM4NQ==", "bodyText": "OK -  I believe this comes from here - can you please update the implementation of AbstractAccountCredentialCache#getCredentialsFilteredByInternal() to ensure this is handled correctly when filtering serialized records? It looks like PRT lookups need to behave like wildcards when filtering by realm and target. See uses of mustMatchOnRealm and mustMatchOnTarget", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r562968385", "createdAt": "2021-01-22T23:21:56Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "diffHunk": "@@ -192,6 +196,9 @@ public String generateCacheKey(Credential credential) {\n             final IdTokenRecord idToken = (IdTokenRecord) credential;\n             cacheKey = cacheKey.replace(REALM, sanitizeNull(idToken.getRealm()));\n             cacheKey = cacheKey.replace(TARGET, \"\");\n+        } else if (credential instanceof PrimaryRefreshTokenRecord) {\n+            cacheKey = cacheKey.replace(REALM, \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk2NjEwNQ=="}, "originalCommit": {"oid": "06913bcd582bd5147bb724836af056ec8aecb3cb"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzQ2OTc2OA==", "bodyText": "Just looked mustMatchOnTarget, mustMatchOnRealm, it works as wildcard for PRT.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r563469768", "createdAt": "2021-01-25T05:25:30Z", "author": {"login": "richard1122"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "diffHunk": "@@ -192,6 +196,9 @@ public String generateCacheKey(Credential credential) {\n             final IdTokenRecord idToken = (IdTokenRecord) credential;\n             cacheKey = cacheKey.replace(REALM, sanitizeNull(idToken.getRealm()));\n             cacheKey = cacheKey.replace(TARGET, \"\");\n+        } else if (credential instanceof PrimaryRefreshTokenRecord) {\n+            cacheKey = cacheKey.replace(REALM, \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk2NjEwNQ=="}, "originalCommit": {"oid": "06913bcd582bd5147bb724836af056ec8aecb3cb"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzUxMjA4Ng==", "bodyText": "Also updated mustMatchOnClientId to not filter by client_id for PRT, and added two tests.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r563512086", "createdAt": "2021-01-25T07:38:40Z", "author": {"login": "richard1122"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "diffHunk": "@@ -192,6 +196,9 @@ public String generateCacheKey(Credential credential) {\n             final IdTokenRecord idToken = (IdTokenRecord) credential;\n             cacheKey = cacheKey.replace(REALM, sanitizeNull(idToken.getRealm()));\n             cacheKey = cacheKey.replace(TARGET, \"\");\n+        } else if (credential instanceof PrimaryRefreshTokenRecord) {\n+            cacheKey = cacheKey.replace(REALM, \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk2NjEwNQ=="}, "originalCommit": {"oid": "06913bcd582bd5147bb724836af056ec8aecb3cb"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzkyNzE3NA==", "bodyText": "Also updated mustMatchOnClientId to not filter by client_id for PRT, and added two tests.\n\n@richard1122 I no longer see these changes in this PR. Not needed?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r577927174", "createdAt": "2021-02-17T20:38:28Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "diffHunk": "@@ -192,6 +196,9 @@ public String generateCacheKey(Credential credential) {\n             final IdTokenRecord idToken = (IdTokenRecord) credential;\n             cacheKey = cacheKey.replace(REALM, sanitizeNull(idToken.getRealm()));\n             cacheKey = cacheKey.replace(TARGET, \"\");\n+        } else if (credential instanceof PrimaryRefreshTokenRecord) {\n+            cacheKey = cacheKey.replace(REALM, \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk2NjEwNQ=="}, "originalCommit": {"oid": "06913bcd582bd5147bb724836af056ec8aecb3cb"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODA3NDUzNA==", "bodyText": "Hi @iambmelt , from discussion here, we will continue support filter by client id, and let caller decide.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r578074534", "createdAt": "2021-02-18T02:04:30Z", "author": {"login": "richard1122"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "diffHunk": "@@ -192,6 +196,9 @@ public String generateCacheKey(Credential credential) {\n             final IdTokenRecord idToken = (IdTokenRecord) credential;\n             cacheKey = cacheKey.replace(REALM, sanitizeNull(idToken.getRealm()));\n             cacheKey = cacheKey.replace(TARGET, \"\");\n+        } else if (credential instanceof PrimaryRefreshTokenRecord) {\n+            cacheKey = cacheKey.replace(REALM, \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk2NjEwNQ=="}, "originalCommit": {"oid": "06913bcd582bd5147bb724836af056ec8aecb3cb"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODA3NjU3Mg==", "bodyText": "ACK, resolved", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r578076572", "createdAt": "2021-02-18T02:09:57Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "diffHunk": "@@ -192,6 +196,9 @@ public String generateCacheKey(Credential credential) {\n             final IdTokenRecord idToken = (IdTokenRecord) credential;\n             cacheKey = cacheKey.replace(REALM, sanitizeNull(idToken.getRealm()));\n             cacheKey = cacheKey.replace(TARGET, \"\");\n+        } else if (credential instanceof PrimaryRefreshTokenRecord) {\n+            cacheKey = cacheKey.replace(REALM, \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk2NjEwNQ=="}, "originalCommit": {"oid": "06913bcd582bd5147bb724836af056ec8aecb3cb"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NTE2NzA4OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQyMzoxNDo0NFrOIY4ulA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQyMzoyMzoyOFrOIY440g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk2NjE2NA==", "bodyText": "Same here.... I don't understand this. Why is this value being set to \"\"? Can you point me towards where this is outlined in the schema spec?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r562966164", "createdAt": "2021-01-22T23:14:44Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "diffHunk": "@@ -192,6 +196,9 @@ public String generateCacheKey(Credential credential) {\n             final IdTokenRecord idToken = (IdTokenRecord) credential;\n             cacheKey = cacheKey.replace(REALM, sanitizeNull(idToken.getRealm()));\n             cacheKey = cacheKey.replace(TARGET, \"\");\n+        } else if (credential instanceof PrimaryRefreshTokenRecord) {\n+            cacheKey = cacheKey.replace(REALM, \"\");\n+            cacheKey = cacheKey.replace(TARGET, \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06913bcd582bd5147bb724836af056ec8aecb3cb"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk2ODc4Ng==", "bodyText": "OK - I think is same as here, please see this comment re: updating filter logic used for serialized instances", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r562968786", "createdAt": "2021-01-22T23:23:28Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "diffHunk": "@@ -192,6 +196,9 @@ public String generateCacheKey(Credential credential) {\n             final IdTokenRecord idToken = (IdTokenRecord) credential;\n             cacheKey = cacheKey.replace(REALM, sanitizeNull(idToken.getRealm()));\n             cacheKey = cacheKey.replace(TARGET, \"\");\n+        } else if (credential instanceof PrimaryRefreshTokenRecord) {\n+            cacheKey = cacheKey.replace(REALM, \"\");\n+            cacheKey = cacheKey.replace(TARGET, \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk2NjE2NA=="}, "originalCommit": {"oid": "06913bcd582bd5147bb724836af056ec8aecb3cb"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NTE3MDQ4OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "isResolved": true, "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQyMzoxNjoxMlrOIY4wcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQwMzoyMzoyM1rOIaDfaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk2NjY0MA==", "bodyText": "What is meant here by \"reversed\"? This naming unclear to me", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r562966640", "createdAt": "2021-01-22T23:16:12Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "diffHunk": "@@ -72,6 +73,7 @@\n      */\n     public static final String CACHE_VALUE_SEPARATOR = \"-\";\n     private static final String FOCI_PREFIX = \"foci-\";\n+    private static final String REVERSED_PRT_CLIENT_ID = \"1\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06913bcd582bd5147bb724836af056ec8aecb3cb"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzQ3MzA1Nw==", "bodyText": "It's typo. Updated to RESERVED_PRT_CLIENT_ID.\nJust like windows code", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r563473057", "createdAt": "2021-01-25T05:37:41Z", "author": {"login": "richard1122"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "diffHunk": "@@ -72,6 +73,7 @@\n      */\n     public static final String CACHE_VALUE_SEPARATOR = \"-\";\n     private static final String FOCI_PREFIX = \"foci-\";\n+    private static final String REVERSED_PRT_CLIENT_ID = \"1\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk2NjY0MA=="}, "originalCommit": {"oid": "06913bcd582bd5147bb724836af056ec8aecb3cb"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk4MDEwMw==", "bodyText": "Should we use the actual clientId that you're using for PRT acquisition?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r563980103", "createdAt": "2021-01-25T19:17:48Z", "author": {"login": "oldalton"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "diffHunk": "@@ -72,6 +73,7 @@\n      */\n     public static final String CACHE_VALUE_SEPARATOR = \"-\";\n     private static final String FOCI_PREFIX = \"foci-\";\n+    private static final String REVERSED_PRT_CLIENT_ID = \"1\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk2NjY0MA=="}, "originalCommit": {"oid": "06913bcd582bd5147bb724836af056ec8aecb3cb"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDE0ODE4OA==", "bodyText": "Should we use the actual clientId that you're using for PRT acquisition?\n\nSame question", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r564148188", "createdAt": "2021-01-26T01:14:48Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "diffHunk": "@@ -72,6 +73,7 @@\n      */\n     public static final String CACHE_VALUE_SEPARATOR = \"-\";\n     private static final String FOCI_PREFIX = \"foci-\";\n+    private static final String REVERSED_PRT_CLIENT_ID = \"1\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk2NjY0MA=="}, "originalCommit": {"oid": "06913bcd582bd5147bb724836af056ec8aecb3cb"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDE0ODk4NQ==", "bodyText": "We can change it, but then we'd have to update code on other platforms too. I don't know if we want to make that step before we have to.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r564148985", "createdAt": "2021-01-26T01:17:12Z", "author": {"login": "jbzdarkid"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "diffHunk": "@@ -72,6 +73,7 @@\n      */\n     public static final String CACHE_VALUE_SEPARATOR = \"-\";\n     private static final String FOCI_PREFIX = \"foci-\";\n+    private static final String REVERSED_PRT_CLIENT_ID = \"1\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk2NjY0MA=="}, "originalCommit": {"oid": "06913bcd582bd5147bb724836af056ec8aecb3cb"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDE1MDM5OQ==", "bodyText": "(It looks like this is by-design: is it documented though?)", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r564150399", "createdAt": "2021-01-26T01:20:44Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "diffHunk": "@@ -72,6 +73,7 @@\n      */\n     public static final String CACHE_VALUE_SEPARATOR = \"-\";\n     private static final String FOCI_PREFIX = \"foci-\";\n+    private static final String REVERSED_PRT_CLIENT_ID = \"1\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk2NjY0MA=="}, "originalCommit": {"oid": "06913bcd582bd5147bb724836af056ec8aecb3cb"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDE3ODI5NA==", "bodyText": "I have no idea. It's same as windows code. Let me know your decision.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r564178294", "createdAt": "2021-01-26T02:39:02Z", "author": {"login": "richard1122"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "diffHunk": "@@ -72,6 +73,7 @@\n      */\n     public static final String CACHE_VALUE_SEPARATOR = \"-\";\n     private static final String FOCI_PREFIX = \"foci-\";\n+    private static final String REVERSED_PRT_CLIENT_ID = \"1\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk2NjY0MA=="}, "originalCommit": {"oid": "06913bcd582bd5147bb724836af056ec8aecb3cb"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDE4NTAwMg==", "bodyText": "Gotcha, thanks @richard1122\n@oldalton What's your take on this? This seems to run counter to the schema's definition of client_id with respect to PrimaryRefreshTokens. Personally, I'm not sure I'd have done it this way: I may have used the caller's real client_id and then had lookup logic that can handle either the id or a wildcarded value (meaning \"any\")\n/cc @jbzdarkid", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r564185002", "createdAt": "2021-01-26T03:01:06Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "diffHunk": "@@ -72,6 +73,7 @@\n      */\n     public static final String CACHE_VALUE_SEPARATOR = \"-\";\n     private static final String FOCI_PREFIX = \"foci-\";\n+    private static final String REVERSED_PRT_CLIENT_ID = \"1\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk2NjY0MA=="}, "originalCommit": {"oid": "06913bcd582bd5147bb724836af056ec8aecb3cb"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDE4NjY5Mw==", "bodyText": "I agree - we use real broker clientId in iOS and macOS broker as well for PRT storage, so this is inconsistent with it. However, if it would be a breaking SSO change and it doesn't conflict with other PRT storages, then agree with @jbzdarkid that we might not want to do it. If it's not a breaking SSO change though, let's make the change now rather than after we ship.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r564186693", "createdAt": "2021-01-26T03:07:00Z", "author": {"login": "oldalton"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "diffHunk": "@@ -72,6 +73,7 @@\n      */\n     public static final String CACHE_VALUE_SEPARATOR = \"-\";\n     private static final String FOCI_PREFIX = \"foci-\";\n+    private static final String REVERSED_PRT_CLIENT_ID = \"1\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk2NjY0MA=="}, "originalCommit": {"oid": "06913bcd582bd5147bb724836af056ec8aecb3cb"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDE4NzcwNQ==", "bodyText": "OK, so we are going to:\n\nSave real client id in cache key\nFetch by real client id or (wildcard -- any), caller decide\n\nI'll make the change and update tests.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r564187705", "createdAt": "2021-01-26T03:10:40Z", "author": {"login": "richard1122"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "diffHunk": "@@ -72,6 +73,7 @@\n      */\n     public static final String CACHE_VALUE_SEPARATOR = \"-\";\n     private static final String FOCI_PREFIX = \"foci-\";\n+    private static final String REVERSED_PRT_CLIENT_ID = \"1\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk2NjY0MA=="}, "originalCommit": {"oid": "06913bcd582bd5147bb724836af056ec8aecb3cb"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDE5MTA4MA==", "bodyText": "Update, please help review, thanks !", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r564191080", "createdAt": "2021-01-26T03:23:23Z", "author": {"login": "richard1122"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/CacheKeyValueDelegate.java", "diffHunk": "@@ -72,6 +73,7 @@\n      */\n     public static final String CACHE_VALUE_SEPARATOR = \"-\";\n     private static final String FOCI_PREFIX = \"foci-\";\n+    private static final String REVERSED_PRT_CLIENT_ID = \"1\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk2NjY0MA=="}, "originalCommit": {"oid": "06913bcd582bd5147bb724836af056ec8aecb3cb"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1MzI3NDkwOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/AbstractAccountCredentialCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQwMToxNzo0M1rOIaA7uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQwMjo0NDo1M1rOIaC0XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDE0OTE3Nw==", "bodyText": "Could we instead move this logic 'up' such that its more like\nfinal boolean mustMatchOnClientId = !StringExtensions.isNullOrBlank(clientId) && !(credential instanceof PrimaryRefreshTokenRecord) ;", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r564149177", "createdAt": "2021-01-26T01:17:43Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/AbstractAccountCredentialCache.java", "diffHunk": "@@ -176,7 +180,7 @@\n                 matches = matches && equalsIgnoreCaseTrim(credentialType.name(), credential.getCredentialType());\n             }\n \n-            if (mustMatchOnClientId) {\n+            if (mustMatchOnClientId && !(credential instanceof PrimaryRefreshTokenRecord)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47c6a5746e68b3d1cb366e3d001e67e83c55f23b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDE4MDA2MA==", "bodyText": "Thanks, updated.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r564180060", "createdAt": "2021-01-26T02:44:53Z", "author": {"login": "richard1122"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/AbstractAccountCredentialCache.java", "diffHunk": "@@ -176,7 +180,7 @@\n                 matches = matches && equalsIgnoreCaseTrim(credentialType.name(), credential.getCredentialType());\n             }\n \n-            if (mustMatchOnClientId) {\n+            if (mustMatchOnClientId && !(credential instanceof PrimaryRefreshTokenRecord)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDE0OTE3Nw=="}, "originalCommit": {"oid": "47c6a5746e68b3d1cb366e3d001e67e83c55f23b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1MzMxMDQxOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQwMToyNzo0MFrOIaBPaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQwMjo0NTowNFrOIaC0hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDE1NDIxOQ==", "bodyText": "This now appears unused... do we need a property to track the realm? If not, can this be removed?\nIt would be great to understand whether the PRT needs to be associated with a realm\n\nFundamentally, it has a realm component of its cache key, but its always \"\" -- can we safely assume we will never need to lookup a PRT by realm?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r564154219", "createdAt": "2021-01-26T01:27:40Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,256 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+        /**\n+         * String of realm.\n+         */\n+        public static final String REALM = \"realm\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47c6a5746e68b3d1cb366e3d001e67e83c55f23b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDE3NDkwNg==", "bodyText": "From this doc, realm is not needed in PRT. I'll delete this field.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r564174906", "createdAt": "2021-01-26T02:28:22Z", "author": {"login": "richard1122"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,256 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+        /**\n+         * String of realm.\n+         */\n+        public static final String REALM = \"realm\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDE1NDIxOQ=="}, "originalCommit": {"oid": "47c6a5746e68b3d1cb366e3d001e67e83c55f23b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDE4MDEwMw==", "bodyText": "Deleted", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r564180103", "createdAt": "2021-01-26T02:45:04Z", "author": {"login": "richard1122"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,256 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+        /**\n+         * String of realm.\n+         */\n+        public static final String REALM = \"realm\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDE1NDIxOQ=="}, "originalCommit": {"oid": "47c6a5746e68b3d1cb366e3d001e67e83c55f23b"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1Nzk5Mjc1OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMjo0ODo1M1rOIauBRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMzowMzowMFrOIauldg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg4Nzg3OQ==", "bodyText": "Can this be a value class? We'd (potentially) have to write an InstanceCreator, but we wouldn't need to worry about those setter methods, nor about making sure anything using it was properly synchronized w.r.t. creation.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r564887879", "createdAt": "2021-01-26T22:48:53Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,252 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+public class PrimaryRefreshTokenRecord extends Credential {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fff151f2090532efcca75f0deeec220ac9426eaa"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg5NzE0Mg==", "bodyText": "OK, that might be too much, because it's inheritance level is deep.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r564897142", "createdAt": "2021-01-26T23:03:00Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,252 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+public class PrimaryRefreshTokenRecord extends Credential {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg4Nzg3OQ=="}, "originalCommit": {"oid": "fff151f2090532efcca75f0deeec220ac9426eaa"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1ODAyNjE2OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMjo1OToyOFrOIauVuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMjo1OToyOFrOIauVuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg5MzExMg==", "bodyText": "Extra lines", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r564893112", "createdAt": "2021-01-26T22:59:28Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,252 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+\n+        /**\n+         * String of session_key.\n+         */\n+        public static final String SESSION_KEY = \"session_key\";\n+\n+        /**\n+         * String of session_key_rolling_date.\n+         */\n+        public static final String SESSION_KEY_ROLLING_DATE = \"session_key_rolling_date\";\n+\n+        /**\n+         * String of prt_protocol_version.\n+         */\n+        public static final String PRT_PROTOCOL_VERSION = \"prt_protocol_version\";\n+    }\n+\n+    /**\n+     * 1st Party Application Family ID.\n+     */\n+    @SerializedName(FAMILY_ID)\n+    private String mFamilyId;\n+\n+    /**\n+     * PRT expiry time.\u202fThis value is returned from the server as refresh_token_expires_in that\n+     * should be added to local time.\n+     */\n+    @SerializedName(EXPIRES_ON)\n+    private String mExpiresOn;\n+\n+    /**\n+     * Session key of PRT.\n+     */\n+    @SerializedName(SESSION_KEY)\n+    private String mSessionKey;\n+\n+    /**\n+     * The version of the PRT Protocol being used, version 3 supports no device_id.\n+     */\n+    @SerializedName(PRT_PROTOCOL_VERSION)\n+    private String mPrtProtocolVersion;\n+\n+    /**\n+     * Session key expiry time.\u202fThis value is determined by the client and set to 60 days after the\n+     * session key was initally issued\n+     */\n+    @SerializedName(SESSION_KEY_ROLLING_DATE)\n+    private String mSessionKeyRollingDate;\n+\n+    /**\n+     * Gets the family_id.\n+     *\n+     * @return The family_id to get.\n+     */\n+    public String getFamilyId() {\n+        return mFamilyId;\n+    }\n+\n+    /**\n+     * Sets the family_id.\n+     *\n+     * @param familyId The family_id to set.\n+     */\n+    public void setFamilyId(final String familyId) {\n+        mFamilyId = familyId;\n+    }\n+\n+    public boolean isExpired(final String expires) {\n+        // Init a Calendar for the current time/date\n+        final Calendar calendar = Calendar.getInstance();\n+        final Date validity = calendar.getTime();\n+        // Init a Date for the accessToken's expiry\n+        long epoch = Long.valueOf(expires);\n+        final Date expiresOn = new Date(\n+                TimeUnit.SECONDS.toMillis(epoch)\n+        );\n+        return expiresOn.before(validity);\n+    }\n+\n+    @Override\n+    public boolean isExpired() {\n+        return isExpired(getExpiresOn());\n+    }\n+\n+    /**\n+     * Gets the expires_on.\n+     * @return The expires_on to get.\n+     */\n+    public String getExpiresOn() {\n+        return mExpiresOn;\n+    }\n+\n+    /**\n+     * Sets the expires_on.\n+     * @param expiresOn The expires_on to set.\n+     */\n+    public void setExpiresOn(String expiresOn) {\n+        mExpiresOn = expiresOn;\n+    }\n+\n+    /**\n+     * Gets the session_key.\n+     * @return The session_key to get.\n+     */\n+    public String getSessionKey() {\n+        return mSessionKey;\n+    }\n+\n+    /**\n+     * Sets the session_key.\n+     *\n+     * @param sessionKey The session_key to set.\n+     */\n+    public void setSessionKey(String sessionKey) {\n+        mSessionKey = sessionKey;\n+    }\n+\n+    /**\n+     * Gets the prt_protocol_version.\n+     *\n+     * @return The prt_protocol_version to get.\n+     */\n+    public String getPrtProtocolVersion() {\n+        return mPrtProtocolVersion;\n+    }\n+\n+    /**\n+     * Sets the prt_protocol_version.\n+     *\n+     * @param prtProtocolVersion The prt_protocol_version to set.\n+     */\n+    public void setPrtProtocolVersion(String prtProtocolVersion) {\n+        mPrtProtocolVersion = prtProtocolVersion;\n+    }\n+\n+    /**\n+     * Gets the session_key_rolling_date.\n+     *\n+     * @return The session_key_rolling_date to get.\n+     */\n+    public String getSessionKeyRollingDate() {\n+        return mSessionKeyRollingDate;\n+    }\n+\n+    /**\n+     * Sets the session_key_rolling_date.\n+     * @param sessionKeyRollingDate The session_key_rolling_date to set.\n+     */\n+    public void setSessionKeyRollingDate(String sessionKeyRollingDate) {\n+        mSessionKeyRollingDate = sessionKeyRollingDate;\n+    }\n+\n+    //CHECKSTYLE:OFF\n+    // This method is generated. Checkstyle and/or PMD has been disabled.\n+    // This method *must* be regenerated if the class' structural definition changes through the\n+    // addition/subtraction of fields.\n+    @SuppressWarnings(\"PMD\")\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        if (!super.equals(o)) return false;\n+\n+        PrimaryRefreshTokenRecord that = (PrimaryRefreshTokenRecord) o;\n+\n+        if (mFamilyId != null ? !mFamilyId.equals(that.mFamilyId) : that.mFamilyId != null)\n+            return false;\n+        if (mExpiresOn != null ? !mExpiresOn.equals(that.mExpiresOn) : that.mExpiresOn != null)\n+            return false;\n+        if (mSessionKey != null ? !mSessionKey.equals(that.mSessionKey) : that.mSessionKey != null)\n+            return false;\n+        if (mPrtProtocolVersion != null ? !mPrtProtocolVersion.equals(that.mPrtProtocolVersion) : that.mPrtProtocolVersion != null)\n+            return false;\n+        return mSessionKeyRollingDate != null ? mSessionKeyRollingDate.equals(that.mSessionKeyRollingDate) : that.mSessionKeyRollingDate == null;\n+    }\n+    //CHECKSTYLE:ON\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fff151f2090532efcca75f0deeec220ac9426eaa"}, "originalPosition": 217}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1ODA0MjkyOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMzowMjoxM1rOIauiAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMzowMjoxM1rOIauiAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg5NjI1Nw==", "bodyText": "Can we just pick these up with @EqualsAndHashCode?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r564896257", "createdAt": "2021-01-26T23:02:13Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,252 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+\n+        /**\n+         * String of session_key.\n+         */\n+        public static final String SESSION_KEY = \"session_key\";\n+\n+        /**\n+         * String of session_key_rolling_date.\n+         */\n+        public static final String SESSION_KEY_ROLLING_DATE = \"session_key_rolling_date\";\n+\n+        /**\n+         * String of prt_protocol_version.\n+         */\n+        public static final String PRT_PROTOCOL_VERSION = \"prt_protocol_version\";\n+    }\n+\n+    /**\n+     * 1st Party Application Family ID.\n+     */\n+    @SerializedName(FAMILY_ID)\n+    private String mFamilyId;\n+\n+    /**\n+     * PRT expiry time.\u202fThis value is returned from the server as refresh_token_expires_in that\n+     * should be added to local time.\n+     */\n+    @SerializedName(EXPIRES_ON)\n+    private String mExpiresOn;\n+\n+    /**\n+     * Session key of PRT.\n+     */\n+    @SerializedName(SESSION_KEY)\n+    private String mSessionKey;\n+\n+    /**\n+     * The version of the PRT Protocol being used, version 3 supports no device_id.\n+     */\n+    @SerializedName(PRT_PROTOCOL_VERSION)\n+    private String mPrtProtocolVersion;\n+\n+    /**\n+     * Session key expiry time.\u202fThis value is determined by the client and set to 60 days after the\n+     * session key was initally issued\n+     */\n+    @SerializedName(SESSION_KEY_ROLLING_DATE)\n+    private String mSessionKeyRollingDate;\n+\n+    /**\n+     * Gets the family_id.\n+     *\n+     * @return The family_id to get.\n+     */\n+    public String getFamilyId() {\n+        return mFamilyId;\n+    }\n+\n+    /**\n+     * Sets the family_id.\n+     *\n+     * @param familyId The family_id to set.\n+     */\n+    public void setFamilyId(final String familyId) {\n+        mFamilyId = familyId;\n+    }\n+\n+    public boolean isExpired(final String expires) {\n+        // Init a Calendar for the current time/date\n+        final Calendar calendar = Calendar.getInstance();\n+        final Date validity = calendar.getTime();\n+        // Init a Date for the accessToken's expiry\n+        long epoch = Long.valueOf(expires);\n+        final Date expiresOn = new Date(\n+                TimeUnit.SECONDS.toMillis(epoch)\n+        );\n+        return expiresOn.before(validity);\n+    }\n+\n+    @Override\n+    public boolean isExpired() {\n+        return isExpired(getExpiresOn());\n+    }\n+\n+    /**\n+     * Gets the expires_on.\n+     * @return The expires_on to get.\n+     */\n+    public String getExpiresOn() {\n+        return mExpiresOn;\n+    }\n+\n+    /**\n+     * Sets the expires_on.\n+     * @param expiresOn The expires_on to set.\n+     */\n+    public void setExpiresOn(String expiresOn) {\n+        mExpiresOn = expiresOn;\n+    }\n+\n+    /**\n+     * Gets the session_key.\n+     * @return The session_key to get.\n+     */\n+    public String getSessionKey() {\n+        return mSessionKey;\n+    }\n+\n+    /**\n+     * Sets the session_key.\n+     *\n+     * @param sessionKey The session_key to set.\n+     */\n+    public void setSessionKey(String sessionKey) {\n+        mSessionKey = sessionKey;\n+    }\n+\n+    /**\n+     * Gets the prt_protocol_version.\n+     *\n+     * @return The prt_protocol_version to get.\n+     */\n+    public String getPrtProtocolVersion() {\n+        return mPrtProtocolVersion;\n+    }\n+\n+    /**\n+     * Sets the prt_protocol_version.\n+     *\n+     * @param prtProtocolVersion The prt_protocol_version to set.\n+     */\n+    public void setPrtProtocolVersion(String prtProtocolVersion) {\n+        mPrtProtocolVersion = prtProtocolVersion;\n+    }\n+\n+    /**\n+     * Gets the session_key_rolling_date.\n+     *\n+     * @return The session_key_rolling_date to get.\n+     */\n+    public String getSessionKeyRollingDate() {\n+        return mSessionKeyRollingDate;\n+    }\n+\n+    /**\n+     * Sets the session_key_rolling_date.\n+     * @param sessionKeyRollingDate The session_key_rolling_date to set.\n+     */\n+    public void setSessionKeyRollingDate(String sessionKeyRollingDate) {\n+        mSessionKeyRollingDate = sessionKeyRollingDate;\n+    }\n+\n+    //CHECKSTYLE:OFF\n+    // This method is generated. Checkstyle and/or PMD has been disabled.\n+    // This method *must* be regenerated if the class' structural definition changes through the\n+    // addition/subtraction of fields.\n+    @SuppressWarnings(\"PMD\")\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        if (!super.equals(o)) return false;\n+\n+        PrimaryRefreshTokenRecord that = (PrimaryRefreshTokenRecord) o;\n+\n+        if (mFamilyId != null ? !mFamilyId.equals(that.mFamilyId) : that.mFamilyId != null)\n+            return false;\n+        if (mExpiresOn != null ? !mExpiresOn.equals(that.mExpiresOn) : that.mExpiresOn != null)\n+            return false;\n+        if (mSessionKey != null ? !mSessionKey.equals(that.mSessionKey) : that.mSessionKey != null)\n+            return false;\n+        if (mPrtProtocolVersion != null ? !mPrtProtocolVersion.equals(that.mPrtProtocolVersion) : that.mPrtProtocolVersion != null)\n+            return false;\n+        return mSessionKeyRollingDate != null ? mSessionKeyRollingDate.equals(that.mSessionKeyRollingDate) : that.mSessionKeyRollingDate == null;\n+    }\n+    //CHECKSTYLE:ON", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fff151f2090532efcca75f0deeec220ac9426eaa"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1ODA1NjU5OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMzowNDo1NlrOIausVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQwOTo1NToxMFrOIbvZxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg5ODkwMA==", "bodyText": "Could this just be Long.valueOf(expires) * 1000 <  System.currentTimeMillis?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r564898900", "createdAt": "2021-01-26T23:04:56Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,252 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+\n+        /**\n+         * String of session_key.\n+         */\n+        public static final String SESSION_KEY = \"session_key\";\n+\n+        /**\n+         * String of session_key_rolling_date.\n+         */\n+        public static final String SESSION_KEY_ROLLING_DATE = \"session_key_rolling_date\";\n+\n+        /**\n+         * String of prt_protocol_version.\n+         */\n+        public static final String PRT_PROTOCOL_VERSION = \"prt_protocol_version\";\n+    }\n+\n+    /**\n+     * 1st Party Application Family ID.\n+     */\n+    @SerializedName(FAMILY_ID)\n+    private String mFamilyId;\n+\n+    /**\n+     * PRT expiry time.\u202fThis value is returned from the server as refresh_token_expires_in that\n+     * should be added to local time.\n+     */\n+    @SerializedName(EXPIRES_ON)\n+    private String mExpiresOn;\n+\n+    /**\n+     * Session key of PRT.\n+     */\n+    @SerializedName(SESSION_KEY)\n+    private String mSessionKey;\n+\n+    /**\n+     * The version of the PRT Protocol being used, version 3 supports no device_id.\n+     */\n+    @SerializedName(PRT_PROTOCOL_VERSION)\n+    private String mPrtProtocolVersion;\n+\n+    /**\n+     * Session key expiry time.\u202fThis value is determined by the client and set to 60 days after the\n+     * session key was initally issued\n+     */\n+    @SerializedName(SESSION_KEY_ROLLING_DATE)\n+    private String mSessionKeyRollingDate;\n+\n+    /**\n+     * Gets the family_id.\n+     *\n+     * @return The family_id to get.\n+     */\n+    public String getFamilyId() {\n+        return mFamilyId;\n+    }\n+\n+    /**\n+     * Sets the family_id.\n+     *\n+     * @param familyId The family_id to set.\n+     */\n+    public void setFamilyId(final String familyId) {\n+        mFamilyId = familyId;\n+    }\n+\n+    public boolean isExpired(final String expires) {\n+        // Init a Calendar for the current time/date\n+        final Calendar calendar = Calendar.getInstance();\n+        final Date validity = calendar.getTime();\n+        // Init a Date for the accessToken's expiry\n+        long epoch = Long.valueOf(expires);\n+        final Date expiresOn = new Date(\n+                TimeUnit.SECONDS.toMillis(epoch)\n+        );\n+        return expiresOn.before(validity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fff151f2090532efcca75f0deeec220ac9426eaa"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTk1OTExMA==", "bodyText": "Updated, thanks", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r565959110", "createdAt": "2021-01-28T09:55:10Z", "author": {"login": "richard1122"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,252 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+\n+        /**\n+         * String of session_key.\n+         */\n+        public static final String SESSION_KEY = \"session_key\";\n+\n+        /**\n+         * String of session_key_rolling_date.\n+         */\n+        public static final String SESSION_KEY_ROLLING_DATE = \"session_key_rolling_date\";\n+\n+        /**\n+         * String of prt_protocol_version.\n+         */\n+        public static final String PRT_PROTOCOL_VERSION = \"prt_protocol_version\";\n+    }\n+\n+    /**\n+     * 1st Party Application Family ID.\n+     */\n+    @SerializedName(FAMILY_ID)\n+    private String mFamilyId;\n+\n+    /**\n+     * PRT expiry time.\u202fThis value is returned from the server as refresh_token_expires_in that\n+     * should be added to local time.\n+     */\n+    @SerializedName(EXPIRES_ON)\n+    private String mExpiresOn;\n+\n+    /**\n+     * Session key of PRT.\n+     */\n+    @SerializedName(SESSION_KEY)\n+    private String mSessionKey;\n+\n+    /**\n+     * The version of the PRT Protocol being used, version 3 supports no device_id.\n+     */\n+    @SerializedName(PRT_PROTOCOL_VERSION)\n+    private String mPrtProtocolVersion;\n+\n+    /**\n+     * Session key expiry time.\u202fThis value is determined by the client and set to 60 days after the\n+     * session key was initally issued\n+     */\n+    @SerializedName(SESSION_KEY_ROLLING_DATE)\n+    private String mSessionKeyRollingDate;\n+\n+    /**\n+     * Gets the family_id.\n+     *\n+     * @return The family_id to get.\n+     */\n+    public String getFamilyId() {\n+        return mFamilyId;\n+    }\n+\n+    /**\n+     * Sets the family_id.\n+     *\n+     * @param familyId The family_id to set.\n+     */\n+    public void setFamilyId(final String familyId) {\n+        mFamilyId = familyId;\n+    }\n+\n+    public boolean isExpired(final String expires) {\n+        // Init a Calendar for the current time/date\n+        final Calendar calendar = Calendar.getInstance();\n+        final Date validity = calendar.getTime();\n+        // Init a Date for the accessToken's expiry\n+        long epoch = Long.valueOf(expires);\n+        final Date expiresOn = new Date(\n+                TimeUnit.SECONDS.toMillis(epoch)\n+        );\n+        return expiresOn.before(validity);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg5ODkwMA=="}, "originalCommit": {"oid": "fff151f2090532efcca75f0deeec220ac9426eaa"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1ODA2MTUxOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMzowNjozMVrOIauvQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMzowNjozMVrOIauvQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg5OTY0OQ==", "bodyText": "can we put the units in the name of this argument?  expirationTimeEpochSeconds?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r564899649", "createdAt": "2021-01-26T23:06:31Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,252 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+\n+        /**\n+         * String of session_key.\n+         */\n+        public static final String SESSION_KEY = \"session_key\";\n+\n+        /**\n+         * String of session_key_rolling_date.\n+         */\n+        public static final String SESSION_KEY_ROLLING_DATE = \"session_key_rolling_date\";\n+\n+        /**\n+         * String of prt_protocol_version.\n+         */\n+        public static final String PRT_PROTOCOL_VERSION = \"prt_protocol_version\";\n+    }\n+\n+    /**\n+     * 1st Party Application Family ID.\n+     */\n+    @SerializedName(FAMILY_ID)\n+    private String mFamilyId;\n+\n+    /**\n+     * PRT expiry time.\u202fThis value is returned from the server as refresh_token_expires_in that\n+     * should be added to local time.\n+     */\n+    @SerializedName(EXPIRES_ON)\n+    private String mExpiresOn;\n+\n+    /**\n+     * Session key of PRT.\n+     */\n+    @SerializedName(SESSION_KEY)\n+    private String mSessionKey;\n+\n+    /**\n+     * The version of the PRT Protocol being used, version 3 supports no device_id.\n+     */\n+    @SerializedName(PRT_PROTOCOL_VERSION)\n+    private String mPrtProtocolVersion;\n+\n+    /**\n+     * Session key expiry time.\u202fThis value is determined by the client and set to 60 days after the\n+     * session key was initally issued\n+     */\n+    @SerializedName(SESSION_KEY_ROLLING_DATE)\n+    private String mSessionKeyRollingDate;\n+\n+    /**\n+     * Gets the family_id.\n+     *\n+     * @return The family_id to get.\n+     */\n+    public String getFamilyId() {\n+        return mFamilyId;\n+    }\n+\n+    /**\n+     * Sets the family_id.\n+     *\n+     * @param familyId The family_id to set.\n+     */\n+    public void setFamilyId(final String familyId) {\n+        mFamilyId = familyId;\n+    }\n+\n+    public boolean isExpired(final String expires) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fff151f2090532efcca75f0deeec220ac9426eaa"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1ODA3MzQ3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMzoxMDozM1rOIau2Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQyMDo1OTo0OFrOIcKgQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDkwMTQ0Mw==", "bodyText": "Can we put the units in the parameter name, since I think this is epoch seconds.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r564901443", "createdAt": "2021-01-26T23:10:33Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,252 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+\n+        /**\n+         * String of session_key.\n+         */\n+        public static final String SESSION_KEY = \"session_key\";\n+\n+        /**\n+         * String of session_key_rolling_date.\n+         */\n+        public static final String SESSION_KEY_ROLLING_DATE = \"session_key_rolling_date\";\n+\n+        /**\n+         * String of prt_protocol_version.\n+         */\n+        public static final String PRT_PROTOCOL_VERSION = \"prt_protocol_version\";\n+    }\n+\n+    /**\n+     * 1st Party Application Family ID.\n+     */\n+    @SerializedName(FAMILY_ID)\n+    private String mFamilyId;\n+\n+    /**\n+     * PRT expiry time.\u202fThis value is returned from the server as refresh_token_expires_in that\n+     * should be added to local time.\n+     */\n+    @SerializedName(EXPIRES_ON)\n+    private String mExpiresOn;\n+\n+    /**\n+     * Session key of PRT.\n+     */\n+    @SerializedName(SESSION_KEY)\n+    private String mSessionKey;\n+\n+    /**\n+     * The version of the PRT Protocol being used, version 3 supports no device_id.\n+     */\n+    @SerializedName(PRT_PROTOCOL_VERSION)\n+    private String mPrtProtocolVersion;\n+\n+    /**\n+     * Session key expiry time.\u202fThis value is determined by the client and set to 60 days after the\n+     * session key was initally issued\n+     */\n+    @SerializedName(SESSION_KEY_ROLLING_DATE)\n+    private String mSessionKeyRollingDate;\n+\n+    /**\n+     * Gets the family_id.\n+     *\n+     * @return The family_id to get.\n+     */\n+    public String getFamilyId() {\n+        return mFamilyId;\n+    }\n+\n+    /**\n+     * Sets the family_id.\n+     *\n+     * @param familyId The family_id to set.\n+     */\n+    public void setFamilyId(final String familyId) {\n+        mFamilyId = familyId;\n+    }\n+\n+    public boolean isExpired(final String expires) {\n+        // Init a Calendar for the current time/date\n+        final Calendar calendar = Calendar.getInstance();\n+        final Date validity = calendar.getTime();\n+        // Init a Date for the accessToken's expiry\n+        long epoch = Long.valueOf(expires);\n+        final Date expiresOn = new Date(\n+                TimeUnit.SECONDS.toMillis(epoch)\n+        );\n+        return expiresOn.before(validity);\n+    }\n+\n+    @Override\n+    public boolean isExpired() {\n+        return isExpired(getExpiresOn());\n+    }\n+\n+    /**\n+     * Gets the expires_on.\n+     * @return The expires_on to get.\n+     */\n+    public String getExpiresOn() {\n+        return mExpiresOn;\n+    }\n+\n+    /**\n+     * Sets the expires_on.\n+     * @param expiresOn The expires_on to set.\n+     */\n+    public void setExpiresOn(String expiresOn) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fff151f2090532efcca75f0deeec220ac9426eaa"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTk2MDU2MQ==", "bodyText": "It's same as AccessTokenRecord, we can just leave it?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r565960561", "createdAt": "2021-01-28T09:57:05Z", "author": {"login": "richard1122"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,252 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+\n+        /**\n+         * String of session_key.\n+         */\n+        public static final String SESSION_KEY = \"session_key\";\n+\n+        /**\n+         * String of session_key_rolling_date.\n+         */\n+        public static final String SESSION_KEY_ROLLING_DATE = \"session_key_rolling_date\";\n+\n+        /**\n+         * String of prt_protocol_version.\n+         */\n+        public static final String PRT_PROTOCOL_VERSION = \"prt_protocol_version\";\n+    }\n+\n+    /**\n+     * 1st Party Application Family ID.\n+     */\n+    @SerializedName(FAMILY_ID)\n+    private String mFamilyId;\n+\n+    /**\n+     * PRT expiry time.\u202fThis value is returned from the server as refresh_token_expires_in that\n+     * should be added to local time.\n+     */\n+    @SerializedName(EXPIRES_ON)\n+    private String mExpiresOn;\n+\n+    /**\n+     * Session key of PRT.\n+     */\n+    @SerializedName(SESSION_KEY)\n+    private String mSessionKey;\n+\n+    /**\n+     * The version of the PRT Protocol being used, version 3 supports no device_id.\n+     */\n+    @SerializedName(PRT_PROTOCOL_VERSION)\n+    private String mPrtProtocolVersion;\n+\n+    /**\n+     * Session key expiry time.\u202fThis value is determined by the client and set to 60 days after the\n+     * session key was initally issued\n+     */\n+    @SerializedName(SESSION_KEY_ROLLING_DATE)\n+    private String mSessionKeyRollingDate;\n+\n+    /**\n+     * Gets the family_id.\n+     *\n+     * @return The family_id to get.\n+     */\n+    public String getFamilyId() {\n+        return mFamilyId;\n+    }\n+\n+    /**\n+     * Sets the family_id.\n+     *\n+     * @param familyId The family_id to set.\n+     */\n+    public void setFamilyId(final String familyId) {\n+        mFamilyId = familyId;\n+    }\n+\n+    public boolean isExpired(final String expires) {\n+        // Init a Calendar for the current time/date\n+        final Calendar calendar = Calendar.getInstance();\n+        final Date validity = calendar.getTime();\n+        // Init a Date for the accessToken's expiry\n+        long epoch = Long.valueOf(expires);\n+        final Date expiresOn = new Date(\n+                TimeUnit.SECONDS.toMillis(epoch)\n+        );\n+        return expiresOn.before(validity);\n+    }\n+\n+    @Override\n+    public boolean isExpired() {\n+        return isExpired(getExpiresOn());\n+    }\n+\n+    /**\n+     * Gets the expires_on.\n+     * @return The expires_on to get.\n+     */\n+    public String getExpiresOn() {\n+        return mExpiresOn;\n+    }\n+\n+    /**\n+     * Sets the expires_on.\n+     * @param expiresOn The expires_on to set.\n+     */\n+    public void setExpiresOn(String expiresOn) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDkwMTQ0Mw=="}, "originalCommit": {"oid": "fff151f2090532efcca75f0deeec220ac9426eaa"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjQwMzEzOA==", "bodyText": "Eh.  I'd like to change it everywhere, if I could.  Since it's a String, it doesn't tell the developer anything about what's in it - for all a programmer knows without looking at the implementation it's an ISO date string.  Not a huge issue, just something that could be better.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r566403138", "createdAt": "2021-01-28T20:59:48Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,252 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+\n+        /**\n+         * String of session_key.\n+         */\n+        public static final String SESSION_KEY = \"session_key\";\n+\n+        /**\n+         * String of session_key_rolling_date.\n+         */\n+        public static final String SESSION_KEY_ROLLING_DATE = \"session_key_rolling_date\";\n+\n+        /**\n+         * String of prt_protocol_version.\n+         */\n+        public static final String PRT_PROTOCOL_VERSION = \"prt_protocol_version\";\n+    }\n+\n+    /**\n+     * 1st Party Application Family ID.\n+     */\n+    @SerializedName(FAMILY_ID)\n+    private String mFamilyId;\n+\n+    /**\n+     * PRT expiry time.\u202fThis value is returned from the server as refresh_token_expires_in that\n+     * should be added to local time.\n+     */\n+    @SerializedName(EXPIRES_ON)\n+    private String mExpiresOn;\n+\n+    /**\n+     * Session key of PRT.\n+     */\n+    @SerializedName(SESSION_KEY)\n+    private String mSessionKey;\n+\n+    /**\n+     * The version of the PRT Protocol being used, version 3 supports no device_id.\n+     */\n+    @SerializedName(PRT_PROTOCOL_VERSION)\n+    private String mPrtProtocolVersion;\n+\n+    /**\n+     * Session key expiry time.\u202fThis value is determined by the client and set to 60 days after the\n+     * session key was initally issued\n+     */\n+    @SerializedName(SESSION_KEY_ROLLING_DATE)\n+    private String mSessionKeyRollingDate;\n+\n+    /**\n+     * Gets the family_id.\n+     *\n+     * @return The family_id to get.\n+     */\n+    public String getFamilyId() {\n+        return mFamilyId;\n+    }\n+\n+    /**\n+     * Sets the family_id.\n+     *\n+     * @param familyId The family_id to set.\n+     */\n+    public void setFamilyId(final String familyId) {\n+        mFamilyId = familyId;\n+    }\n+\n+    public boolean isExpired(final String expires) {\n+        // Init a Calendar for the current time/date\n+        final Calendar calendar = Calendar.getInstance();\n+        final Date validity = calendar.getTime();\n+        // Init a Date for the accessToken's expiry\n+        long epoch = Long.valueOf(expires);\n+        final Date expiresOn = new Date(\n+                TimeUnit.SECONDS.toMillis(epoch)\n+        );\n+        return expiresOn.before(validity);\n+    }\n+\n+    @Override\n+    public boolean isExpired() {\n+        return isExpired(getExpiresOn());\n+    }\n+\n+    /**\n+     * Gets the expires_on.\n+     * @return The expires_on to get.\n+     */\n+    public String getExpiresOn() {\n+        return mExpiresOn;\n+    }\n+\n+    /**\n+     * Sets the expires_on.\n+     * @param expiresOn The expires_on to set.\n+     */\n+    public void setExpiresOn(String expiresOn) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDkwMTQ0Mw=="}, "originalCommit": {"oid": "fff151f2090532efcca75f0deeec220ac9426eaa"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NDk1Njk3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/WebViewAuthorizationFragment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxMDowMDoyMFrOIbvowA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQyMDozNzo1MlrOIcJx2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTk2Mjk0NA==", "bodyText": "@jbzdarkid Hi, I keep your evaluateJavascript here. It should not cause test unstable. I'll try more after this PR merged.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r565962944", "createdAt": "2021-01-28T10:00:20Z", "author": {"login": "richard1122"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/WebViewAuthorizationFragment.java", "diffHunk": "@@ -138,7 +139,7 @@ public void onPageLoaded() {\n \n                         // Inject the javascript string from testing. This should only be evaluated if we haven't sent\n                         // an auth result already.\n-                        if (mAuthResultSent == false && !StringExtensions.isNullOrBlank(mPostPageLoadedJavascript)) {\n+                        if (!mAuthResultSent && !StringExtensions.isNullOrBlank(mPostPageLoadedJavascript)) {\n                             if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n                                 mWebView.evaluateJavascript(mPostPageLoadedJavascript, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2053682ece7828b06366616988ce60f0dc1ab7e"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjM5MTI1OQ==", "bodyText": "<3 Thank you, I'm happy to help you with investigation if you need.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r566391259", "createdAt": "2021-01-28T20:37:52Z", "author": {"login": "jbzdarkid"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/WebViewAuthorizationFragment.java", "diffHunk": "@@ -138,7 +139,7 @@ public void onPageLoaded() {\n \n                         // Inject the javascript string from testing. This should only be evaluated if we haven't sent\n                         // an auth result already.\n-                        if (mAuthResultSent == false && !StringExtensions.isNullOrBlank(mPostPageLoadedJavascript)) {\n+                        if (!mAuthResultSent && !StringExtensions.isNullOrBlank(mPostPageLoadedJavascript)) {\n                             if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n                                 mWebView.evaluateJavascript(mPostPageLoadedJavascript, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTk2Mjk0NA=="}, "originalCommit": {"oid": "e2053682ece7828b06366616988ce60f0dc1ab7e"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NzY5OTUxOnYy", "diffSide": "RIGHT", "path": "common/src/androidTest/java/com/microsoft/identity/common/SharedPreferencesAccountCredentialCacheTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQyMDo0NTozOFrOIcKB4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QxMjoxOToxNVrOImzySA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjM5NTM2MQ==", "bodyText": "Auth scheme shouldn't apply here -- please confirm this test passes with null as its param as well. This criteria doesn't apply to PRTs", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r566395361", "createdAt": "2021-01-28T20:45:38Z", "author": {"login": "iambmelt"}, "path": "common/src/androidTest/java/com/microsoft/identity/common/SharedPreferencesAccountCredentialCacheTest.java", "diffHunk": "@@ -1466,6 +1469,75 @@ public void getCredentialsNoHomeAccountIdNoTarget() {\n         assertEquals(2, credentials.size());\n     }\n \n+    @Test\n+    public void getCredentialsPRTNoClientId() {\n+        final PrimaryRefreshTokenRecord primaryRefreshToken = new PrimaryRefreshTokenRecord();\n+        primaryRefreshToken.setHomeAccountId(HOME_ACCOUNT_ID);\n+        primaryRefreshToken.setEnvironment(ENVIRONMENT);\n+        primaryRefreshToken.setCredentialType(CredentialType.PrimaryRefreshToken.name().toLowerCase(Locale.US));\n+        primaryRefreshToken.setClientId(CLIENT_ID);\n+        primaryRefreshToken.setSessionKey(SESSION_KEY);\n+\n+        mSharedPreferencesAccountCredentialCache.saveCredential(primaryRefreshToken);\n+\n+        List<Credential> credentials = mSharedPreferencesAccountCredentialCache.getCredentialsFilteredBy(\n+                HOME_ACCOUNT_ID,\n+                ENVIRONMENT,\n+                CredentialType.PrimaryRefreshToken,\n+                null, /* client id */\n+                null,\n+                null,\n+                BEARER_AUTHENTICATION_SCHEME.getName()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2053682ece7828b06366616988ce60f0dc1ab7e"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzU2NTI1Ng==", "bodyText": "Thanks, deleted.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r577565256", "createdAt": "2021-02-17T12:19:15Z", "author": {"login": "richard1122"}, "path": "common/src/androidTest/java/com/microsoft/identity/common/SharedPreferencesAccountCredentialCacheTest.java", "diffHunk": "@@ -1466,6 +1469,75 @@ public void getCredentialsNoHomeAccountIdNoTarget() {\n         assertEquals(2, credentials.size());\n     }\n \n+    @Test\n+    public void getCredentialsPRTNoClientId() {\n+        final PrimaryRefreshTokenRecord primaryRefreshToken = new PrimaryRefreshTokenRecord();\n+        primaryRefreshToken.setHomeAccountId(HOME_ACCOUNT_ID);\n+        primaryRefreshToken.setEnvironment(ENVIRONMENT);\n+        primaryRefreshToken.setCredentialType(CredentialType.PrimaryRefreshToken.name().toLowerCase(Locale.US));\n+        primaryRefreshToken.setClientId(CLIENT_ID);\n+        primaryRefreshToken.setSessionKey(SESSION_KEY);\n+\n+        mSharedPreferencesAccountCredentialCache.saveCredential(primaryRefreshToken);\n+\n+        List<Credential> credentials = mSharedPreferencesAccountCredentialCache.getCredentialsFilteredBy(\n+                HOME_ACCOUNT_ID,\n+                ENVIRONMENT,\n+                CredentialType.PrimaryRefreshToken,\n+                null, /* client id */\n+                null,\n+                null,\n+                BEARER_AUTHENTICATION_SCHEME.getName()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjM5NTM2MQ=="}, "originalCommit": {"oid": "e2053682ece7828b06366616988ce60f0dc1ab7e"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NzcwMDk4OnYy", "diffSide": "RIGHT", "path": "common/src/androidTest/java/com/microsoft/identity/common/SharedPreferencesAccountCredentialCacheTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQyMDo0NjowMlrOIcKCxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QxMjoxOToyMFrOImzyfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjM5NTU4OQ==", "bodyText": "Same here - scheme should only apply to ATs", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r566395589", "createdAt": "2021-01-28T20:46:02Z", "author": {"login": "iambmelt"}, "path": "common/src/androidTest/java/com/microsoft/identity/common/SharedPreferencesAccountCredentialCacheTest.java", "diffHunk": "@@ -1466,6 +1469,75 @@ public void getCredentialsNoHomeAccountIdNoTarget() {\n         assertEquals(2, credentials.size());\n     }\n \n+    @Test\n+    public void getCredentialsPRTNoClientId() {\n+        final PrimaryRefreshTokenRecord primaryRefreshToken = new PrimaryRefreshTokenRecord();\n+        primaryRefreshToken.setHomeAccountId(HOME_ACCOUNT_ID);\n+        primaryRefreshToken.setEnvironment(ENVIRONMENT);\n+        primaryRefreshToken.setCredentialType(CredentialType.PrimaryRefreshToken.name().toLowerCase(Locale.US));\n+        primaryRefreshToken.setClientId(CLIENT_ID);\n+        primaryRefreshToken.setSessionKey(SESSION_KEY);\n+\n+        mSharedPreferencesAccountCredentialCache.saveCredential(primaryRefreshToken);\n+\n+        List<Credential> credentials = mSharedPreferencesAccountCredentialCache.getCredentialsFilteredBy(\n+                HOME_ACCOUNT_ID,\n+                ENVIRONMENT,\n+                CredentialType.PrimaryRefreshToken,\n+                null, /* client id */\n+                null,\n+                null,\n+                BEARER_AUTHENTICATION_SCHEME.getName()\n+        );\n+        assertEquals(1, credentials.size());\n+    }\n+\n+    @Test\n+    public void getCredentialsPRTClientId() {\n+        final PrimaryRefreshTokenRecord primaryRefreshToken = new PrimaryRefreshTokenRecord();\n+        primaryRefreshToken.setHomeAccountId(HOME_ACCOUNT_ID);\n+        primaryRefreshToken.setEnvironment(ENVIRONMENT);\n+        primaryRefreshToken.setCredentialType(CredentialType.PrimaryRefreshToken.name().toLowerCase(Locale.US));\n+        primaryRefreshToken.setClientId(CLIENT_ID);\n+        primaryRefreshToken.setSessionKey(SESSION_KEY);\n+\n+        mSharedPreferencesAccountCredentialCache.saveCredential(primaryRefreshToken);\n+\n+        List<Credential> credentials = mSharedPreferencesAccountCredentialCache.getCredentialsFilteredBy(\n+                HOME_ACCOUNT_ID,\n+                ENVIRONMENT,\n+                CredentialType.PrimaryRefreshToken,\n+                CLIENT_ID,\n+                null,\n+                null,\n+                BEARER_AUTHENTICATION_SCHEME.getName()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2053682ece7828b06366616988ce60f0dc1ab7e"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzU2NTMwOA==", "bodyText": "Thanks, deleted.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r577565308", "createdAt": "2021-02-17T12:19:20Z", "author": {"login": "richard1122"}, "path": "common/src/androidTest/java/com/microsoft/identity/common/SharedPreferencesAccountCredentialCacheTest.java", "diffHunk": "@@ -1466,6 +1469,75 @@ public void getCredentialsNoHomeAccountIdNoTarget() {\n         assertEquals(2, credentials.size());\n     }\n \n+    @Test\n+    public void getCredentialsPRTNoClientId() {\n+        final PrimaryRefreshTokenRecord primaryRefreshToken = new PrimaryRefreshTokenRecord();\n+        primaryRefreshToken.setHomeAccountId(HOME_ACCOUNT_ID);\n+        primaryRefreshToken.setEnvironment(ENVIRONMENT);\n+        primaryRefreshToken.setCredentialType(CredentialType.PrimaryRefreshToken.name().toLowerCase(Locale.US));\n+        primaryRefreshToken.setClientId(CLIENT_ID);\n+        primaryRefreshToken.setSessionKey(SESSION_KEY);\n+\n+        mSharedPreferencesAccountCredentialCache.saveCredential(primaryRefreshToken);\n+\n+        List<Credential> credentials = mSharedPreferencesAccountCredentialCache.getCredentialsFilteredBy(\n+                HOME_ACCOUNT_ID,\n+                ENVIRONMENT,\n+                CredentialType.PrimaryRefreshToken,\n+                null, /* client id */\n+                null,\n+                null,\n+                BEARER_AUTHENTICATION_SCHEME.getName()\n+        );\n+        assertEquals(1, credentials.size());\n+    }\n+\n+    @Test\n+    public void getCredentialsPRTClientId() {\n+        final PrimaryRefreshTokenRecord primaryRefreshToken = new PrimaryRefreshTokenRecord();\n+        primaryRefreshToken.setHomeAccountId(HOME_ACCOUNT_ID);\n+        primaryRefreshToken.setEnvironment(ENVIRONMENT);\n+        primaryRefreshToken.setCredentialType(CredentialType.PrimaryRefreshToken.name().toLowerCase(Locale.US));\n+        primaryRefreshToken.setClientId(CLIENT_ID);\n+        primaryRefreshToken.setSessionKey(SESSION_KEY);\n+\n+        mSharedPreferencesAccountCredentialCache.saveCredential(primaryRefreshToken);\n+\n+        List<Credential> credentials = mSharedPreferencesAccountCredentialCache.getCredentialsFilteredBy(\n+                HOME_ACCOUNT_ID,\n+                ENVIRONMENT,\n+                CredentialType.PrimaryRefreshToken,\n+                CLIENT_ID,\n+                null,\n+                null,\n+                BEARER_AUTHENTICATION_SCHEME.getName()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjM5NTU4OQ=="}, "originalCommit": {"oid": "e2053682ece7828b06366616988ce60f0dc1ab7e"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2Nzc0NTIxOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQyMDo1ODozN1rOIcKdow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QxMjoxOTo0M1rOImzzcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjQwMjQ2Nw==", "bodyText": "Let's include the format of this value. I'm guessing it's probably epoch seconds? Would be good to have this info in the javadoc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r566402467", "createdAt": "2021-01-28T20:58:37Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,203 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import lombok.EqualsAndHashCode;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+@EqualsAndHashCode(callSuper = true, doNotUseGetters = true)\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+\n+        /**\n+         * String of session_key.\n+         */\n+        public static final String SESSION_KEY = \"session_key\";\n+\n+        /**\n+         * String of session_key_rolling_date.\n+         */\n+        public static final String SESSION_KEY_ROLLING_DATE = \"session_key_rolling_date\";\n+\n+        /**\n+         * String of prt_protocol_version.\n+         */\n+        public static final String PRT_PROTOCOL_VERSION = \"prt_protocol_version\";\n+    }\n+\n+    /**\n+     * 1st Party Application Family ID.\n+     */\n+    @SerializedName(FAMILY_ID)\n+    private String mFamilyId;\n+\n+    /**\n+     * PRT expiry time.\u202fThis value is returned from the server as refresh_token_expires_in that\n+     * should be added to local time.\n+     */\n+    @SerializedName(EXPIRES_ON)\n+    private String mExpiresOn;\n+\n+    /**\n+     * Session key of PRT.\n+     */\n+    @SerializedName(SESSION_KEY)\n+    private String mSessionKey;\n+\n+    /**\n+     * The version of the PRT Protocol being used, version 3 supports no device_id.\n+     */\n+    @SerializedName(PRT_PROTOCOL_VERSION)\n+    private String mPrtProtocolVersion;\n+\n+    /**\n+     * Session key expiry time.\u202fThis value is determined by the client and set to 60 days after the\n+     * session key was initally issued\n+     */\n+    @SerializedName(SESSION_KEY_ROLLING_DATE)\n+    private String mSessionKeyRollingDate;\n+\n+    /**\n+     * Gets the family_id.\n+     *\n+     * @return The family_id to get.\n+     */\n+    public String getFamilyId() {\n+        return mFamilyId;\n+    }\n+\n+    /**\n+     * Sets the family_id.\n+     *\n+     * @param familyId The family_id to set.\n+     */\n+    public void setFamilyId(final String familyId) {\n+        mFamilyId = familyId;\n+    }\n+\n+    public boolean isExpired(final String expirationTimeEpochSeconds) {\n+        return Long.parseLong(expirationTimeEpochSeconds) * 1000 < System.currentTimeMillis();\n+    }\n+\n+    @Override\n+    public boolean isExpired() {\n+        return isExpired(getExpiresOn());\n+    }\n+\n+    /**\n+     * Gets the expires_on.\n+     * @return The expires_on to get.\n+     */\n+    public String getExpiresOn() {\n+        return mExpiresOn;\n+    }\n+\n+    /**\n+     * Sets the expires_on.\n+     * @param expiresOn The expires_on to set.\n+     */\n+    public void setExpiresOn(String expiresOn) {\n+        mExpiresOn = expiresOn;\n+    }\n+\n+    /**\n+     * Gets the session_key.\n+     * @return The session_key to get.\n+     */\n+    public String getSessionKey() {\n+        return mSessionKey;\n+    }\n+\n+    /**\n+     * Sets the session_key.\n+     *\n+     * @param sessionKey The session_key to set.\n+     */\n+    public void setSessionKey(String sessionKey) {\n+        mSessionKey = sessionKey;\n+    }\n+\n+    /**\n+     * Gets the prt_protocol_version.\n+     *\n+     * @return The prt_protocol_version to get.\n+     */\n+    public String getPrtProtocolVersion() {\n+        return mPrtProtocolVersion;\n+    }\n+\n+    /**\n+     * Sets the prt_protocol_version.\n+     *\n+     * @param prtProtocolVersion The prt_protocol_version to set.\n+     */\n+    public void setPrtProtocolVersion(String prtProtocolVersion) {\n+        mPrtProtocolVersion = prtProtocolVersion;\n+    }\n+\n+    /**\n+     * Gets the session_key_rolling_date.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2053682ece7828b06366616988ce60f0dc1ab7e"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzU2NTU1Mg==", "bodyText": "Thanks, Comments and format updated.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r577565552", "createdAt": "2021-02-17T12:19:43Z", "author": {"login": "richard1122"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,203 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import lombok.EqualsAndHashCode;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+@EqualsAndHashCode(callSuper = true, doNotUseGetters = true)\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+\n+        /**\n+         * String of session_key.\n+         */\n+        public static final String SESSION_KEY = \"session_key\";\n+\n+        /**\n+         * String of session_key_rolling_date.\n+         */\n+        public static final String SESSION_KEY_ROLLING_DATE = \"session_key_rolling_date\";\n+\n+        /**\n+         * String of prt_protocol_version.\n+         */\n+        public static final String PRT_PROTOCOL_VERSION = \"prt_protocol_version\";\n+    }\n+\n+    /**\n+     * 1st Party Application Family ID.\n+     */\n+    @SerializedName(FAMILY_ID)\n+    private String mFamilyId;\n+\n+    /**\n+     * PRT expiry time.\u202fThis value is returned from the server as refresh_token_expires_in that\n+     * should be added to local time.\n+     */\n+    @SerializedName(EXPIRES_ON)\n+    private String mExpiresOn;\n+\n+    /**\n+     * Session key of PRT.\n+     */\n+    @SerializedName(SESSION_KEY)\n+    private String mSessionKey;\n+\n+    /**\n+     * The version of the PRT Protocol being used, version 3 supports no device_id.\n+     */\n+    @SerializedName(PRT_PROTOCOL_VERSION)\n+    private String mPrtProtocolVersion;\n+\n+    /**\n+     * Session key expiry time.\u202fThis value is determined by the client and set to 60 days after the\n+     * session key was initally issued\n+     */\n+    @SerializedName(SESSION_KEY_ROLLING_DATE)\n+    private String mSessionKeyRollingDate;\n+\n+    /**\n+     * Gets the family_id.\n+     *\n+     * @return The family_id to get.\n+     */\n+    public String getFamilyId() {\n+        return mFamilyId;\n+    }\n+\n+    /**\n+     * Sets the family_id.\n+     *\n+     * @param familyId The family_id to set.\n+     */\n+    public void setFamilyId(final String familyId) {\n+        mFamilyId = familyId;\n+    }\n+\n+    public boolean isExpired(final String expirationTimeEpochSeconds) {\n+        return Long.parseLong(expirationTimeEpochSeconds) * 1000 < System.currentTimeMillis();\n+    }\n+\n+    @Override\n+    public boolean isExpired() {\n+        return isExpired(getExpiresOn());\n+    }\n+\n+    /**\n+     * Gets the expires_on.\n+     * @return The expires_on to get.\n+     */\n+    public String getExpiresOn() {\n+        return mExpiresOn;\n+    }\n+\n+    /**\n+     * Sets the expires_on.\n+     * @param expiresOn The expires_on to set.\n+     */\n+    public void setExpiresOn(String expiresOn) {\n+        mExpiresOn = expiresOn;\n+    }\n+\n+    /**\n+     * Gets the session_key.\n+     * @return The session_key to get.\n+     */\n+    public String getSessionKey() {\n+        return mSessionKey;\n+    }\n+\n+    /**\n+     * Sets the session_key.\n+     *\n+     * @param sessionKey The session_key to set.\n+     */\n+    public void setSessionKey(String sessionKey) {\n+        mSessionKey = sessionKey;\n+    }\n+\n+    /**\n+     * Gets the prt_protocol_version.\n+     *\n+     * @return The prt_protocol_version to get.\n+     */\n+    public String getPrtProtocolVersion() {\n+        return mPrtProtocolVersion;\n+    }\n+\n+    /**\n+     * Sets the prt_protocol_version.\n+     *\n+     * @param prtProtocolVersion The prt_protocol_version to set.\n+     */\n+    public void setPrtProtocolVersion(String prtProtocolVersion) {\n+        mPrtProtocolVersion = prtProtocolVersion;\n+    }\n+\n+    /**\n+     * Gets the session_key_rolling_date.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjQwMjQ2Nw=="}, "originalCommit": {"oid": "e2053682ece7828b06366616988ce60f0dc1ab7e"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2Nzc0NjI2OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQyMDo1ODo1MVrOIcKeKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQyMDo1ODo1MVrOIcKeKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjQwMjYwMQ==", "bodyText": "Same here.... format?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r566402601", "createdAt": "2021-01-28T20:58:51Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,203 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import lombok.EqualsAndHashCode;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+@EqualsAndHashCode(callSuper = true, doNotUseGetters = true)\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+\n+        /**\n+         * String of session_key.\n+         */\n+        public static final String SESSION_KEY = \"session_key\";\n+\n+        /**\n+         * String of session_key_rolling_date.\n+         */\n+        public static final String SESSION_KEY_ROLLING_DATE = \"session_key_rolling_date\";\n+\n+        /**\n+         * String of prt_protocol_version.\n+         */\n+        public static final String PRT_PROTOCOL_VERSION = \"prt_protocol_version\";\n+    }\n+\n+    /**\n+     * 1st Party Application Family ID.\n+     */\n+    @SerializedName(FAMILY_ID)\n+    private String mFamilyId;\n+\n+    /**\n+     * PRT expiry time.\u202fThis value is returned from the server as refresh_token_expires_in that\n+     * should be added to local time.\n+     */\n+    @SerializedName(EXPIRES_ON)\n+    private String mExpiresOn;\n+\n+    /**\n+     * Session key of PRT.\n+     */\n+    @SerializedName(SESSION_KEY)\n+    private String mSessionKey;\n+\n+    /**\n+     * The version of the PRT Protocol being used, version 3 supports no device_id.\n+     */\n+    @SerializedName(PRT_PROTOCOL_VERSION)\n+    private String mPrtProtocolVersion;\n+\n+    /**\n+     * Session key expiry time.\u202fThis value is determined by the client and set to 60 days after the\n+     * session key was initally issued\n+     */\n+    @SerializedName(SESSION_KEY_ROLLING_DATE)\n+    private String mSessionKeyRollingDate;\n+\n+    /**\n+     * Gets the family_id.\n+     *\n+     * @return The family_id to get.\n+     */\n+    public String getFamilyId() {\n+        return mFamilyId;\n+    }\n+\n+    /**\n+     * Sets the family_id.\n+     *\n+     * @param familyId The family_id to set.\n+     */\n+    public void setFamilyId(final String familyId) {\n+        mFamilyId = familyId;\n+    }\n+\n+    public boolean isExpired(final String expirationTimeEpochSeconds) {\n+        return Long.parseLong(expirationTimeEpochSeconds) * 1000 < System.currentTimeMillis();\n+    }\n+\n+    @Override\n+    public boolean isExpired() {\n+        return isExpired(getExpiresOn());\n+    }\n+\n+    /**\n+     * Gets the expires_on.\n+     * @return The expires_on to get.\n+     */\n+    public String getExpiresOn() {\n+        return mExpiresOn;\n+    }\n+\n+    /**\n+     * Sets the expires_on.\n+     * @param expiresOn The expires_on to set.\n+     */\n+    public void setExpiresOn(String expiresOn) {\n+        mExpiresOn = expiresOn;\n+    }\n+\n+    /**\n+     * Gets the session_key.\n+     * @return The session_key to get.\n+     */\n+    public String getSessionKey() {\n+        return mSessionKey;\n+    }\n+\n+    /**\n+     * Sets the session_key.\n+     *\n+     * @param sessionKey The session_key to set.\n+     */\n+    public void setSessionKey(String sessionKey) {\n+        mSessionKey = sessionKey;\n+    }\n+\n+    /**\n+     * Gets the prt_protocol_version.\n+     *\n+     * @return The prt_protocol_version to get.\n+     */\n+    public String getPrtProtocolVersion() {\n+        return mPrtProtocolVersion;\n+    }\n+\n+    /**\n+     * Sets the prt_protocol_version.\n+     *\n+     * @param prtProtocolVersion The prt_protocol_version to set.\n+     */\n+    public void setPrtProtocolVersion(String prtProtocolVersion) {\n+        mPrtProtocolVersion = prtProtocolVersion;\n+    }\n+\n+    /**\n+     * Gets the session_key_rolling_date.\n+     *\n+     * @return The session_key_rolling_date to get.\n+     */\n+    public String getSessionKeyRollingDate() {\n+        return mSessionKeyRollingDate;\n+    }\n+\n+    /**\n+     * Sets the session_key_rolling_date.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2053682ece7828b06366616988ce60f0dc1ab7e"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2Nzc0ODk4OnYy", "diffSide": "RIGHT", "path": "common/versioning/version.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQyMDo1OTozNVrOIcKfyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QxMjoxOTo1OFrOImz0Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjQwMzAxNg==", "bodyText": "Increasing the patch version?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r566403016", "createdAt": "2021-01-28T20:59:35Z", "author": {"login": "iambmelt"}, "path": "common/versioning/version.properties", "diffHunk": "@@ -1,4 +1,4 @@\n-#Wed Jan 27 23:18:25 UTC 2021\n-versionName=3.0.9\n+#Mon Jan 27 18:00:00 UTC 2021\n+versionName=3.0.10", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2053682ece7828b06366616988ce60f0dc1ab7e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzU2NTcxNA==", "bodyText": "Updated to 3.1.1", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r577565714", "createdAt": "2021-02-17T12:19:58Z", "author": {"login": "richard1122"}, "path": "common/versioning/version.properties", "diffHunk": "@@ -1,4 +1,4 @@\n-#Wed Jan 27 23:18:25 UTC 2021\n-versionName=3.0.9\n+#Mon Jan 27 18:00:00 UTC 2021\n+versionName=3.0.10", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjQwMzAxNg=="}, "originalCommit": {"oid": "e2053682ece7828b06366616988ce60f0dc1ab7e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2Nzc1MTE1OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQyMTowMDowNVrOIcKg-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOFQwMjoxMjo0MFrOInTDjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjQwMzMyMg==", "bodyText": "Did we ever close on storing this value elsewhere?\n/cc @AdamBJohnsonx @hieunguyenmsft", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r566403322", "createdAt": "2021-01-28T21:00:05Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,203 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import lombok.EqualsAndHashCode;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+@EqualsAndHashCode(callSuper = true, doNotUseGetters = true)\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+\n+        /**\n+         * String of session_key.\n+         */\n+        public static final String SESSION_KEY = \"session_key\";\n+\n+        /**\n+         * String of session_key_rolling_date.\n+         */\n+        public static final String SESSION_KEY_ROLLING_DATE = \"session_key_rolling_date\";\n+\n+        /**\n+         * String of prt_protocol_version.\n+         */\n+        public static final String PRT_PROTOCOL_VERSION = \"prt_protocol_version\";\n+    }\n+\n+    /**\n+     * 1st Party Application Family ID.\n+     */\n+    @SerializedName(FAMILY_ID)\n+    private String mFamilyId;\n+\n+    /**\n+     * PRT expiry time.\u202fThis value is returned from the server as refresh_token_expires_in that\n+     * should be added to local time.\n+     */\n+    @SerializedName(EXPIRES_ON)\n+    private String mExpiresOn;\n+\n+    /**\n+     * Session key of PRT.\n+     */\n+    @SerializedName(SESSION_KEY)\n+    private String mSessionKey;\n+\n+    /**\n+     * The version of the PRT Protocol being used, version 3 supports no device_id.\n+     */\n+    @SerializedName(PRT_PROTOCOL_VERSION)\n+    private String mPrtProtocolVersion;\n+\n+    /**\n+     * Session key expiry time.\u202fThis value is determined by the client and set to 60 days after the\n+     * session key was initally issued\n+     */\n+    @SerializedName(SESSION_KEY_ROLLING_DATE)\n+    private String mSessionKeyRollingDate;\n+\n+    /**\n+     * Gets the family_id.\n+     *\n+     * @return The family_id to get.\n+     */\n+    public String getFamilyId() {\n+        return mFamilyId;\n+    }\n+\n+    /**\n+     * Sets the family_id.\n+     *\n+     * @param familyId The family_id to set.\n+     */\n+    public void setFamilyId(final String familyId) {\n+        mFamilyId = familyId;\n+    }\n+\n+    public boolean isExpired(final String expirationTimeEpochSeconds) {\n+        return Long.parseLong(expirationTimeEpochSeconds) * 1000 < System.currentTimeMillis();\n+    }\n+\n+    @Override\n+    public boolean isExpired() {\n+        return isExpired(getExpiresOn());\n+    }\n+\n+    /**\n+     * Gets the expires_on.\n+     * @return The expires_on to get.\n+     */\n+    public String getExpiresOn() {\n+        return mExpiresOn;\n+    }\n+\n+    /**\n+     * Sets the expires_on.\n+     * @param expiresOn The expires_on to set.\n+     */\n+    public void setExpiresOn(String expiresOn) {\n+        mExpiresOn = expiresOn;\n+    }\n+\n+    /**\n+     * Gets the session_key.\n+     * @return The session_key to get.\n+     */\n+    public String getSessionKey() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2053682ece7828b06366616988ce60f0dc1ab7e"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjQwNTEwMQ==", "bodyText": "As far as I'm aware of, no.  We should be able to abstract away whether this is a key or key identifier.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r566405101", "createdAt": "2021-01-28T21:03:40Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,203 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import lombok.EqualsAndHashCode;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+@EqualsAndHashCode(callSuper = true, doNotUseGetters = true)\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+\n+        /**\n+         * String of session_key.\n+         */\n+        public static final String SESSION_KEY = \"session_key\";\n+\n+        /**\n+         * String of session_key_rolling_date.\n+         */\n+        public static final String SESSION_KEY_ROLLING_DATE = \"session_key_rolling_date\";\n+\n+        /**\n+         * String of prt_protocol_version.\n+         */\n+        public static final String PRT_PROTOCOL_VERSION = \"prt_protocol_version\";\n+    }\n+\n+    /**\n+     * 1st Party Application Family ID.\n+     */\n+    @SerializedName(FAMILY_ID)\n+    private String mFamilyId;\n+\n+    /**\n+     * PRT expiry time.\u202fThis value is returned from the server as refresh_token_expires_in that\n+     * should be added to local time.\n+     */\n+    @SerializedName(EXPIRES_ON)\n+    private String mExpiresOn;\n+\n+    /**\n+     * Session key of PRT.\n+     */\n+    @SerializedName(SESSION_KEY)\n+    private String mSessionKey;\n+\n+    /**\n+     * The version of the PRT Protocol being used, version 3 supports no device_id.\n+     */\n+    @SerializedName(PRT_PROTOCOL_VERSION)\n+    private String mPrtProtocolVersion;\n+\n+    /**\n+     * Session key expiry time.\u202fThis value is determined by the client and set to 60 days after the\n+     * session key was initally issued\n+     */\n+    @SerializedName(SESSION_KEY_ROLLING_DATE)\n+    private String mSessionKeyRollingDate;\n+\n+    /**\n+     * Gets the family_id.\n+     *\n+     * @return The family_id to get.\n+     */\n+    public String getFamilyId() {\n+        return mFamilyId;\n+    }\n+\n+    /**\n+     * Sets the family_id.\n+     *\n+     * @param familyId The family_id to set.\n+     */\n+    public void setFamilyId(final String familyId) {\n+        mFamilyId = familyId;\n+    }\n+\n+    public boolean isExpired(final String expirationTimeEpochSeconds) {\n+        return Long.parseLong(expirationTimeEpochSeconds) * 1000 < System.currentTimeMillis();\n+    }\n+\n+    @Override\n+    public boolean isExpired() {\n+        return isExpired(getExpiresOn());\n+    }\n+\n+    /**\n+     * Gets the expires_on.\n+     * @return The expires_on to get.\n+     */\n+    public String getExpiresOn() {\n+        return mExpiresOn;\n+    }\n+\n+    /**\n+     * Sets the expires_on.\n+     * @param expiresOn The expires_on to set.\n+     */\n+    public void setExpiresOn(String expiresOn) {\n+        mExpiresOn = expiresOn;\n+    }\n+\n+    /**\n+     * Gets the session_key.\n+     * @return The session_key to get.\n+     */\n+    public String getSessionKey() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjQwMzMyMg=="}, "originalCommit": {"oid": "e2053682ece7828b06366616988ce60f0dc1ab7e"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzc4ODY2Mg==", "bodyText": "Sorry @iambmelt I missed this notificatio :( In iOS the session_key is stored in keychain storage + in memory.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r577788662", "createdAt": "2021-02-17T17:08:31Z", "author": {"login": "hieunguyenmsft"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,203 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import lombok.EqualsAndHashCode;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+@EqualsAndHashCode(callSuper = true, doNotUseGetters = true)\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+\n+        /**\n+         * String of session_key.\n+         */\n+        public static final String SESSION_KEY = \"session_key\";\n+\n+        /**\n+         * String of session_key_rolling_date.\n+         */\n+        public static final String SESSION_KEY_ROLLING_DATE = \"session_key_rolling_date\";\n+\n+        /**\n+         * String of prt_protocol_version.\n+         */\n+        public static final String PRT_PROTOCOL_VERSION = \"prt_protocol_version\";\n+    }\n+\n+    /**\n+     * 1st Party Application Family ID.\n+     */\n+    @SerializedName(FAMILY_ID)\n+    private String mFamilyId;\n+\n+    /**\n+     * PRT expiry time.\u202fThis value is returned from the server as refresh_token_expires_in that\n+     * should be added to local time.\n+     */\n+    @SerializedName(EXPIRES_ON)\n+    private String mExpiresOn;\n+\n+    /**\n+     * Session key of PRT.\n+     */\n+    @SerializedName(SESSION_KEY)\n+    private String mSessionKey;\n+\n+    /**\n+     * The version of the PRT Protocol being used, version 3 supports no device_id.\n+     */\n+    @SerializedName(PRT_PROTOCOL_VERSION)\n+    private String mPrtProtocolVersion;\n+\n+    /**\n+     * Session key expiry time.\u202fThis value is determined by the client and set to 60 days after the\n+     * session key was initally issued\n+     */\n+    @SerializedName(SESSION_KEY_ROLLING_DATE)\n+    private String mSessionKeyRollingDate;\n+\n+    /**\n+     * Gets the family_id.\n+     *\n+     * @return The family_id to get.\n+     */\n+    public String getFamilyId() {\n+        return mFamilyId;\n+    }\n+\n+    /**\n+     * Sets the family_id.\n+     *\n+     * @param familyId The family_id to set.\n+     */\n+    public void setFamilyId(final String familyId) {\n+        mFamilyId = familyId;\n+    }\n+\n+    public boolean isExpired(final String expirationTimeEpochSeconds) {\n+        return Long.parseLong(expirationTimeEpochSeconds) * 1000 < System.currentTimeMillis();\n+    }\n+\n+    @Override\n+    public boolean isExpired() {\n+        return isExpired(getExpiresOn());\n+    }\n+\n+    /**\n+     * Gets the expires_on.\n+     * @return The expires_on to get.\n+     */\n+    public String getExpiresOn() {\n+        return mExpiresOn;\n+    }\n+\n+    /**\n+     * Sets the expires_on.\n+     * @param expiresOn The expires_on to set.\n+     */\n+    public void setExpiresOn(String expiresOn) {\n+        mExpiresOn = expiresOn;\n+    }\n+\n+    /**\n+     * Gets the session_key.\n+     * @return The session_key to get.\n+     */\n+    public String getSessionKey() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjQwMzMyMg=="}, "originalCommit": {"oid": "e2053682ece7828b06366616988ce60f0dc1ab7e"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODA3NzU4MQ==", "bodyText": "Continuing this discussion below, with @AdamBJohnsonx", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r578077581", "createdAt": "2021-02-18T02:12:40Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,203 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import lombok.EqualsAndHashCode;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+@EqualsAndHashCode(callSuper = true, doNotUseGetters = true)\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+\n+        /**\n+         * String of session_key.\n+         */\n+        public static final String SESSION_KEY = \"session_key\";\n+\n+        /**\n+         * String of session_key_rolling_date.\n+         */\n+        public static final String SESSION_KEY_ROLLING_DATE = \"session_key_rolling_date\";\n+\n+        /**\n+         * String of prt_protocol_version.\n+         */\n+        public static final String PRT_PROTOCOL_VERSION = \"prt_protocol_version\";\n+    }\n+\n+    /**\n+     * 1st Party Application Family ID.\n+     */\n+    @SerializedName(FAMILY_ID)\n+    private String mFamilyId;\n+\n+    /**\n+     * PRT expiry time.\u202fThis value is returned from the server as refresh_token_expires_in that\n+     * should be added to local time.\n+     */\n+    @SerializedName(EXPIRES_ON)\n+    private String mExpiresOn;\n+\n+    /**\n+     * Session key of PRT.\n+     */\n+    @SerializedName(SESSION_KEY)\n+    private String mSessionKey;\n+\n+    /**\n+     * The version of the PRT Protocol being used, version 3 supports no device_id.\n+     */\n+    @SerializedName(PRT_PROTOCOL_VERSION)\n+    private String mPrtProtocolVersion;\n+\n+    /**\n+     * Session key expiry time.\u202fThis value is determined by the client and set to 60 days after the\n+     * session key was initally issued\n+     */\n+    @SerializedName(SESSION_KEY_ROLLING_DATE)\n+    private String mSessionKeyRollingDate;\n+\n+    /**\n+     * Gets the family_id.\n+     *\n+     * @return The family_id to get.\n+     */\n+    public String getFamilyId() {\n+        return mFamilyId;\n+    }\n+\n+    /**\n+     * Sets the family_id.\n+     *\n+     * @param familyId The family_id to set.\n+     */\n+    public void setFamilyId(final String familyId) {\n+        mFamilyId = familyId;\n+    }\n+\n+    public boolean isExpired(final String expirationTimeEpochSeconds) {\n+        return Long.parseLong(expirationTimeEpochSeconds) * 1000 < System.currentTimeMillis();\n+    }\n+\n+    @Override\n+    public boolean isExpired() {\n+        return isExpired(getExpiresOn());\n+    }\n+\n+    /**\n+     * Gets the expires_on.\n+     * @return The expires_on to get.\n+     */\n+    public String getExpiresOn() {\n+        return mExpiresOn;\n+    }\n+\n+    /**\n+     * Sets the expires_on.\n+     * @param expiresOn The expires_on to set.\n+     */\n+    public void setExpiresOn(String expiresOn) {\n+        mExpiresOn = expiresOn;\n+    }\n+\n+    /**\n+     * Gets the session_key.\n+     * @return The session_key to get.\n+     */\n+    public String getSessionKey() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjQwMzMyMg=="}, "originalCommit": {"oid": "e2053682ece7828b06366616988ce60f0dc1ab7e"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY0NDY4ODAzOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QyMToyNTozMFrOInLlRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOFQwMjoxOTowNlrOInTL9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzk1NTE0MA==", "bodyText": "Can we go ahead and adopt my change to indicate whether this session key value is a literal session key or a key alias by adding a column here that could say this thing?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r577955140", "createdAt": "2021-02-17T21:25:30Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import lombok.EqualsAndHashCode;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+@EqualsAndHashCode(callSuper = true, doNotUseGetters = true)\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+\n+        /**\n+         * String of session_key.\n+         */\n+        public static final String SESSION_KEY = \"session_key\";\n+\n+        /**\n+         * String of session_key_rolling_date.\n+         */\n+        public static final String SESSION_KEY_ROLLING_DATE = \"session_key_rolling_date\";\n+\n+        /**\n+         * String of prt_protocol_version.\n+         */\n+        public static final String PRT_PROTOCOL_VERSION = \"prt_protocol_version\";\n+    }\n+\n+    /**\n+     * 1st Party Application Family ID.\n+     */\n+    @SerializedName(FAMILY_ID)\n+    private String mFamilyId;\n+\n+    /**\n+     * PRT expiry time.\u202fThis value is returned from the server as refresh_token_expires_in that\n+     * should be added to local time. Measured in milliseconds from epoch (1970).\n+     */\n+    @SerializedName(EXPIRES_ON)\n+    private String mExpiresOn;\n+\n+    /**\n+     * Session key of PRT.\n+     */\n+    @SerializedName(SESSION_KEY)\n+    private String mSessionKey;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9892c79952ddbbfd2266c1e90c87196349ada101"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzk1NzY3MA==", "bodyText": "It's kind-of less important because the broker should never be able to read this cache and <->.  I'd prefer to handle these keys as an interface that doesn't ever expose the key material to a cavalier user rather than as the key itself, but that detail will be in the cpp code review.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r577957670", "createdAt": "2021-02-17T21:29:44Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import lombok.EqualsAndHashCode;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+@EqualsAndHashCode(callSuper = true, doNotUseGetters = true)\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+\n+        /**\n+         * String of session_key.\n+         */\n+        public static final String SESSION_KEY = \"session_key\";\n+\n+        /**\n+         * String of session_key_rolling_date.\n+         */\n+        public static final String SESSION_KEY_ROLLING_DATE = \"session_key_rolling_date\";\n+\n+        /**\n+         * String of prt_protocol_version.\n+         */\n+        public static final String PRT_PROTOCOL_VERSION = \"prt_protocol_version\";\n+    }\n+\n+    /**\n+     * 1st Party Application Family ID.\n+     */\n+    @SerializedName(FAMILY_ID)\n+    private String mFamilyId;\n+\n+    /**\n+     * PRT expiry time.\u202fThis value is returned from the server as refresh_token_expires_in that\n+     * should be added to local time. Measured in milliseconds from epoch (1970).\n+     */\n+    @SerializedName(EXPIRES_ON)\n+    private String mExpiresOn;\n+\n+    /**\n+     * Session key of PRT.\n+     */\n+    @SerializedName(SESSION_KEY)\n+    private String mSessionKey;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzk1NTE0MA=="}, "originalCommit": {"oid": "9892c79952ddbbfd2266c1e90c87196349ada101"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzk2NTM1NQ==", "bodyText": "Can we go ahead and adopt my change to indicate whether this session key value is a literal session key or a key alias by adding a column here that could say this thing?\n\n@AdamBJohnsonx @oldalton and I have signed off on this PR, assuming you have no other outstanding design items I am of the impression we can consider this design approved should you want to move forward with it\nhttps://identitydivision.visualstudio.com/DevEx/_git/AuthLibrariesApiReview/pullrequest/2654", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r577965355", "createdAt": "2021-02-17T21:43:18Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import lombok.EqualsAndHashCode;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+@EqualsAndHashCode(callSuper = true, doNotUseGetters = true)\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+\n+        /**\n+         * String of session_key.\n+         */\n+        public static final String SESSION_KEY = \"session_key\";\n+\n+        /**\n+         * String of session_key_rolling_date.\n+         */\n+        public static final String SESSION_KEY_ROLLING_DATE = \"session_key_rolling_date\";\n+\n+        /**\n+         * String of prt_protocol_version.\n+         */\n+        public static final String PRT_PROTOCOL_VERSION = \"prt_protocol_version\";\n+    }\n+\n+    /**\n+     * 1st Party Application Family ID.\n+     */\n+    @SerializedName(FAMILY_ID)\n+    private String mFamilyId;\n+\n+    /**\n+     * PRT expiry time.\u202fThis value is returned from the server as refresh_token_expires_in that\n+     * should be added to local time. Measured in milliseconds from epoch (1970).\n+     */\n+    @SerializedName(EXPIRES_ON)\n+    private String mExpiresOn;\n+\n+    /**\n+     * Session key of PRT.\n+     */\n+    @SerializedName(SESSION_KEY)\n+    private String mSessionKey;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzk1NTE0MA=="}, "originalCommit": {"oid": "9892c79952ddbbfd2266c1e90c87196349ada101"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzk3ODQ0NA==", "bodyText": "I've added a sample to the doc as requested", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r577978444", "createdAt": "2021-02-17T22:06:53Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import lombok.EqualsAndHashCode;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+@EqualsAndHashCode(callSuper = true, doNotUseGetters = true)\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+\n+        /**\n+         * String of session_key.\n+         */\n+        public static final String SESSION_KEY = \"session_key\";\n+\n+        /**\n+         * String of session_key_rolling_date.\n+         */\n+        public static final String SESSION_KEY_ROLLING_DATE = \"session_key_rolling_date\";\n+\n+        /**\n+         * String of prt_protocol_version.\n+         */\n+        public static final String PRT_PROTOCOL_VERSION = \"prt_protocol_version\";\n+    }\n+\n+    /**\n+     * 1st Party Application Family ID.\n+     */\n+    @SerializedName(FAMILY_ID)\n+    private String mFamilyId;\n+\n+    /**\n+     * PRT expiry time.\u202fThis value is returned from the server as refresh_token_expires_in that\n+     * should be added to local time. Measured in milliseconds from epoch (1970).\n+     */\n+    @SerializedName(EXPIRES_ON)\n+    private String mExpiresOn;\n+\n+    /**\n+     * Session key of PRT.\n+     */\n+    @SerializedName(SESSION_KEY)\n+    private String mSessionKey;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzk1NTE0MA=="}, "originalCommit": {"oid": "9892c79952ddbbfd2266c1e90c87196349ada101"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzk4MDIyMQ==", "bodyText": "I don't see anything to add other than that unless somebody wants to hate the name.  I've marked it as complete, then.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r577980221", "createdAt": "2021-02-17T22:10:13Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import lombok.EqualsAndHashCode;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+@EqualsAndHashCode(callSuper = true, doNotUseGetters = true)\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+\n+        /**\n+         * String of session_key.\n+         */\n+        public static final String SESSION_KEY = \"session_key\";\n+\n+        /**\n+         * String of session_key_rolling_date.\n+         */\n+        public static final String SESSION_KEY_ROLLING_DATE = \"session_key_rolling_date\";\n+\n+        /**\n+         * String of prt_protocol_version.\n+         */\n+        public static final String PRT_PROTOCOL_VERSION = \"prt_protocol_version\";\n+    }\n+\n+    /**\n+     * 1st Party Application Family ID.\n+     */\n+    @SerializedName(FAMILY_ID)\n+    private String mFamilyId;\n+\n+    /**\n+     * PRT expiry time.\u202fThis value is returned from the server as refresh_token_expires_in that\n+     * should be added to local time. Measured in milliseconds from epoch (1970).\n+     */\n+    @SerializedName(EXPIRES_ON)\n+    private String mExpiresOn;\n+\n+    /**\n+     * Session key of PRT.\n+     */\n+    @SerializedName(SESSION_KEY)\n+    private String mSessionKey;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzk1NTE0MA=="}, "originalCommit": {"oid": "9892c79952ddbbfd2266c1e90c87196349ada101"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODA3ODIzNw==", "bodyText": "Thanks @AdamBJohnsonx\n@richard1122 Overall your changes LGTM, as Adam is going to be building some of his implementation off of this work, please review his proposal above and determine if it makes sense to include in this work. Apart from this, I am prepared to sign off on this implementation", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r578078237", "createdAt": "2021-02-18T02:14:37Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import lombok.EqualsAndHashCode;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+@EqualsAndHashCode(callSuper = true, doNotUseGetters = true)\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+\n+        /**\n+         * String of session_key.\n+         */\n+        public static final String SESSION_KEY = \"session_key\";\n+\n+        /**\n+         * String of session_key_rolling_date.\n+         */\n+        public static final String SESSION_KEY_ROLLING_DATE = \"session_key_rolling_date\";\n+\n+        /**\n+         * String of prt_protocol_version.\n+         */\n+        public static final String PRT_PROTOCOL_VERSION = \"prt_protocol_version\";\n+    }\n+\n+    /**\n+     * 1st Party Application Family ID.\n+     */\n+    @SerializedName(FAMILY_ID)\n+    private String mFamilyId;\n+\n+    /**\n+     * PRT expiry time.\u202fThis value is returned from the server as refresh_token_expires_in that\n+     * should be added to local time. Measured in milliseconds from epoch (1970).\n+     */\n+    @SerializedName(EXPIRES_ON)\n+    private String mExpiresOn;\n+\n+    /**\n+     * Session key of PRT.\n+     */\n+    @SerializedName(SESSION_KEY)\n+    private String mSessionKey;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzk1NTE0MA=="}, "originalCommit": {"oid": "9892c79952ddbbfd2266c1e90c87196349ada101"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODA3OTczNA==", "bodyText": "Thanks @iambmelt , @AdamBJohnsonx . I suggest we take the hardware-backed session key into another new PR. Let's discuss in my PR in MSAL-CPP. See if we can move some encryption/decryption methods into commons. (I'd like to open another PR if needed)", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1177#discussion_r578079734", "createdAt": "2021-02-18T02:19:06Z", "author": {"login": "richard1122"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/dto/PrimaryRefreshTokenRecord.java", "diffHunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import lombok.EqualsAndHashCode;\n+\n+import static com.microsoft.identity.common.internal.dto.PrimaryRefreshTokenRecord.SerializedNames.*;\n+\n+@EqualsAndHashCode(callSuper = true, doNotUseGetters = true)\n+public class PrimaryRefreshTokenRecord extends Credential {\n+\n+    public static class SerializedNames extends Credential.SerializedNames {\n+        /**\n+         * String of family id.\n+         */\n+        public static final String FAMILY_ID = \"family_id\";\n+\n+        /**\n+         * String of session_key.\n+         */\n+        public static final String SESSION_KEY = \"session_key\";\n+\n+        /**\n+         * String of session_key_rolling_date.\n+         */\n+        public static final String SESSION_KEY_ROLLING_DATE = \"session_key_rolling_date\";\n+\n+        /**\n+         * String of prt_protocol_version.\n+         */\n+        public static final String PRT_PROTOCOL_VERSION = \"prt_protocol_version\";\n+    }\n+\n+    /**\n+     * 1st Party Application Family ID.\n+     */\n+    @SerializedName(FAMILY_ID)\n+    private String mFamilyId;\n+\n+    /**\n+     * PRT expiry time.\u202fThis value is returned from the server as refresh_token_expires_in that\n+     * should be added to local time. Measured in milliseconds from epoch (1970).\n+     */\n+    @SerializedName(EXPIRES_ON)\n+    private String mExpiresOn;\n+\n+    /**\n+     * Session key of PRT.\n+     */\n+    @SerializedName(SESSION_KEY)\n+    private String mSessionKey;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzk1NTE0MA=="}, "originalCommit": {"oid": "9892c79952ddbbfd2266c1e90c87196349ada101"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1980, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}