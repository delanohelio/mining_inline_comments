{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MDc2MDgz", "number": 939, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzozMToyOFrOEHqpyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMDo1MzowMlrOEHxoxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDc0MzEzOnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/interaction/b2c/B2CProvider.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzozMToyOFrOGnKbBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOTo1Mzo1OFrOGps7iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxODQwNA==", "bodyText": "Is there a reason that these are not anonymous implementations created via static methods? i.e. B2CProvider.local(), etc.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/939#discussion_r443718404", "createdAt": "2020-06-22T17:31:28Z", "author": {"login": "AdamBJohnsonx"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/interaction/b2c/B2CProvider.java", "diffHunk": "@@ -0,0 +1,96 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.interaction.b2c;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+\n+import lombok.Getter;\n+\n+/**\n+ * A class modeling a B2C Provider that is being used during a B2C UI Test\n+ */\n+@Getter\n+public abstract class B2CProvider {\n+\n+    @NonNull\n+    private String providerName;\n+\n+    @Nullable // should be null for LOCAL B2C provider\n+    private String idpSelectionBtnResourceId;\n+\n+    @Nullable // should be null for LOCAL B2C provider\n+    private String domainHint; // this can be used as query param to /authorize endpoint\n+\n+    public B2CProvider(@NonNull final String providerName,\n+                       @Nullable final String idpSelectionBtnResourceId,\n+                       @Nullable final String domainHint) {\n+        this.providerName = providerName;\n+        this.idpSelectionBtnResourceId = idpSelectionBtnResourceId;\n+        this.domainHint = domainHint;\n+    }\n+\n+    /**\n+     * Indicates if the B2C Provider is a non-local IdP\n+     *\n+     * @return a boolean indicating if B2C Provider is an external IdP\n+     */\n+    protected boolean isExternalIdp() {\n+        return !(this instanceof Local);\n+    }\n+\n+    public static class Local extends B2CProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a2d860a79120effff08e0fc58cef3dccb958c88"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczMzUyOA==", "bodyText": "Actually, looking at #1074, would this be better as an enumeration?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/939#discussion_r443733528", "createdAt": "2020-06-22T17:59:31Z", "author": {"login": "AdamBJohnsonx"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/interaction/b2c/B2CProvider.java", "diffHunk": "@@ -0,0 +1,96 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.interaction.b2c;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+\n+import lombok.Getter;\n+\n+/**\n+ * A class modeling a B2C Provider that is being used during a B2C UI Test\n+ */\n+@Getter\n+public abstract class B2CProvider {\n+\n+    @NonNull\n+    private String providerName;\n+\n+    @Nullable // should be null for LOCAL B2C provider\n+    private String idpSelectionBtnResourceId;\n+\n+    @Nullable // should be null for LOCAL B2C provider\n+    private String domainHint; // this can be used as query param to /authorize endpoint\n+\n+    public B2CProvider(@NonNull final String providerName,\n+                       @Nullable final String idpSelectionBtnResourceId,\n+                       @Nullable final String domainHint) {\n+        this.providerName = providerName;\n+        this.idpSelectionBtnResourceId = idpSelectionBtnResourceId;\n+        this.domainHint = domainHint;\n+    }\n+\n+    /**\n+     * Indicates if the B2C Provider is a non-local IdP\n+     *\n+     * @return a boolean indicating if B2C Provider is an external IdP\n+     */\n+    protected boolean isExternalIdp() {\n+        return !(this instanceof Local);\n+    }\n+\n+    public static class Local extends B2CProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxODQwNA=="}, "originalCommit": {"oid": "4a2d860a79120effff08e0fc58cef3dccb958c88"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1NDkzMA==", "bodyText": "I need them to be classes as I've put data on them", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/939#discussion_r445254930", "createdAt": "2020-06-25T01:14:43Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/interaction/b2c/B2CProvider.java", "diffHunk": "@@ -0,0 +1,96 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.interaction.b2c;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+\n+import lombok.Getter;\n+\n+/**\n+ * A class modeling a B2C Provider that is being used during a B2C UI Test\n+ */\n+@Getter\n+public abstract class B2CProvider {\n+\n+    @NonNull\n+    private String providerName;\n+\n+    @Nullable // should be null for LOCAL B2C provider\n+    private String idpSelectionBtnResourceId;\n+\n+    @Nullable // should be null for LOCAL B2C provider\n+    private String domainHint; // this can be used as query param to /authorize endpoint\n+\n+    public B2CProvider(@NonNull final String providerName,\n+                       @Nullable final String idpSelectionBtnResourceId,\n+                       @Nullable final String domainHint) {\n+        this.providerName = providerName;\n+        this.idpSelectionBtnResourceId = idpSelectionBtnResourceId;\n+        this.domainHint = domainHint;\n+    }\n+\n+    /**\n+     * Indicates if the B2C Provider is a non-local IdP\n+     *\n+     * @return a boolean indicating if B2C Provider is an external IdP\n+     */\n+    protected boolean isExternalIdp() {\n+        return !(this instanceof Local);\n+    }\n+\n+    public static class Local extends B2CProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxODQwNA=="}, "originalCommit": {"oid": "4a2d860a79120effff08e0fc58cef3dccb958c88"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1OTgyNQ==", "bodyText": "I don't follow.  Do you mutate the data post-construction?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/939#discussion_r445259825", "createdAt": "2020-06-25T01:33:30Z", "author": {"login": "AdamBJohnsonx"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/interaction/b2c/B2CProvider.java", "diffHunk": "@@ -0,0 +1,96 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.interaction.b2c;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+\n+import lombok.Getter;\n+\n+/**\n+ * A class modeling a B2C Provider that is being used during a B2C UI Test\n+ */\n+@Getter\n+public abstract class B2CProvider {\n+\n+    @NonNull\n+    private String providerName;\n+\n+    @Nullable // should be null for LOCAL B2C provider\n+    private String idpSelectionBtnResourceId;\n+\n+    @Nullable // should be null for LOCAL B2C provider\n+    private String domainHint; // this can be used as query param to /authorize endpoint\n+\n+    public B2CProvider(@NonNull final String providerName,\n+                       @Nullable final String idpSelectionBtnResourceId,\n+                       @Nullable final String domainHint) {\n+        this.providerName = providerName;\n+        this.idpSelectionBtnResourceId = idpSelectionBtnResourceId;\n+        this.domainHint = domainHint;\n+    }\n+\n+    /**\n+     * Indicates if the B2C Provider is a non-local IdP\n+     *\n+     * @return a boolean indicating if B2C Provider is an external IdP\n+     */\n+    protected boolean isExternalIdp() {\n+        return !(this instanceof Local);\n+    }\n+\n+    public static class Local extends B2CProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxODQwNA=="}, "originalCommit": {"oid": "4a2d860a79120effff08e0fc58cef3dccb958c88"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM4MDkzOQ==", "bodyText": "Changed to enum here: ccb06be", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/939#discussion_r446380939", "createdAt": "2020-06-26T19:53:58Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/interaction/b2c/B2CProvider.java", "diffHunk": "@@ -0,0 +1,96 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.interaction.b2c;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+\n+import lombok.Getter;\n+\n+/**\n+ * A class modeling a B2C Provider that is being used during a B2C UI Test\n+ */\n+@Getter\n+public abstract class B2CProvider {\n+\n+    @NonNull\n+    private String providerName;\n+\n+    @Nullable // should be null for LOCAL B2C provider\n+    private String idpSelectionBtnResourceId;\n+\n+    @Nullable // should be null for LOCAL B2C provider\n+    private String domainHint; // this can be used as query param to /authorize endpoint\n+\n+    public B2CProvider(@NonNull final String providerName,\n+                       @Nullable final String idpSelectionBtnResourceId,\n+                       @Nullable final String domainHint) {\n+        this.providerName = providerName;\n+        this.idpSelectionBtnResourceId = idpSelectionBtnResourceId;\n+        this.domainHint = domainHint;\n+    }\n+\n+    /**\n+     * Indicates if the B2C Provider is a non-local IdP\n+     *\n+     * @return a boolean indicating if B2C Provider is an external IdP\n+     */\n+    protected boolean isExternalIdp() {\n+        return !(this instanceof Local);\n+    }\n+\n+    public static class Local extends B2CProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxODQwNA=="}, "originalCommit": {"oid": "4a2d860a79120effff08e0fc58cef3dccb958c88"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDc3MTQyOnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/interaction/b2c/B2CProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzo0MDozN1rOGnKtow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOTo1MzoyNlrOGps6sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcyMzE3MQ==", "bodyText": "Why not just override the method for the LOCAL implementation and have it return true otherwise?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/939#discussion_r443723171", "createdAt": "2020-06-22T17:40:37Z", "author": {"login": "AdamBJohnsonx"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/interaction/b2c/B2CProvider.java", "diffHunk": "@@ -0,0 +1,96 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.interaction.b2c;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+\n+import lombok.Getter;\n+\n+/**\n+ * A class modeling a B2C Provider that is being used during a B2C UI Test\n+ */\n+@Getter\n+public abstract class B2CProvider {\n+\n+    @NonNull\n+    private String providerName;\n+\n+    @Nullable // should be null for LOCAL B2C provider\n+    private String idpSelectionBtnResourceId;\n+\n+    @Nullable // should be null for LOCAL B2C provider\n+    private String domainHint; // this can be used as query param to /authorize endpoint\n+\n+    public B2CProvider(@NonNull final String providerName,\n+                       @Nullable final String idpSelectionBtnResourceId,\n+                       @Nullable final String domainHint) {\n+        this.providerName = providerName;\n+        this.idpSelectionBtnResourceId = idpSelectionBtnResourceId;\n+        this.domainHint = domainHint;\n+    }\n+\n+    /**\n+     * Indicates if the B2C Provider is a non-local IdP\n+     *\n+     * @return a boolean indicating if B2C Provider is an external IdP\n+     */\n+    protected boolean isExternalIdp() {\n+        return !(this instanceof Local);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a2d860a79120effff08e0fc58cef3dccb958c88"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM4MDcyMw==", "bodyText": "Removed the method completely as not really needed", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/939#discussion_r446380723", "createdAt": "2020-06-26T19:53:26Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/interaction/b2c/B2CProvider.java", "diffHunk": "@@ -0,0 +1,96 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.interaction.b2c;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+\n+import lombok.Getter;\n+\n+/**\n+ * A class modeling a B2C Provider that is being used during a B2C UI Test\n+ */\n+@Getter\n+public abstract class B2CProvider {\n+\n+    @NonNull\n+    private String providerName;\n+\n+    @Nullable // should be null for LOCAL B2C provider\n+    private String idpSelectionBtnResourceId;\n+\n+    @Nullable // should be null for LOCAL B2C provider\n+    private String domainHint; // this can be used as query param to /authorize endpoint\n+\n+    public B2CProvider(@NonNull final String providerName,\n+                       @Nullable final String idpSelectionBtnResourceId,\n+                       @Nullable final String domainHint) {\n+        this.providerName = providerName;\n+        this.idpSelectionBtnResourceId = idpSelectionBtnResourceId;\n+        this.domainHint = domainHint;\n+    }\n+\n+    /**\n+     * Indicates if the B2C Provider is a non-local IdP\n+     *\n+     * @return a boolean indicating if B2C Provider is an external IdP\n+     */\n+    protected boolean isExternalIdp() {\n+        return !(this instanceof Local);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcyMzE3MQ=="}, "originalCommit": {"oid": "4a2d860a79120effff08e0fc58cef3dccb958c88"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDc5NjU5OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/interaction/b2c/IdLabB2cSisoPolicyPromptHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzo0ODowN1rOGnK9dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOTo1NjoyMlrOGps_VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcyNzIyMQ==", "bodyText": "|| ?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/939#discussion_r443727221", "createdAt": "2020-06-22T17:48:07Z", "author": {"login": "AdamBJohnsonx"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/interaction/b2c/IdLabB2cSisoPolicyPromptHandler.java", "diffHunk": "@@ -0,0 +1,79 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.interaction.b2c;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.ui.automation.interaction.AadLoginComponentHandler;\n+import com.microsoft.identity.client.ui.automation.interaction.AbstractPromptHandler;\n+import com.microsoft.identity.client.ui.automation.interaction.ILoginComponentHandler;\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+\n+/**\n+ * A Prompt handler for MSIDLAB B2C SISO Policy\n+ */\n+public class IdLabB2cSisoPolicyPromptHandler extends AbstractPromptHandler {\n+\n+    public IdLabB2cSisoPolicyPromptHandler(@NonNull final B2CPromptHandlerParameters parameters) {\n+        super(getAppropriateLoginComponentHandler(parameters), parameters);\n+    }\n+\n+    @Override\n+    public void handlePrompt(@NonNull final String username, @NonNull final String password) {\n+        final B2CPromptHandlerParameters b2CPromptHandlerParameters =\n+                (B2CPromptHandlerParameters) parameters;\n+\n+        final B2CProvider b2CProvider = b2CPromptHandlerParameters.getB2cProvider();\n+\n+        if (b2CProvider.isExternalIdp()) {\n+            assert b2CProvider.getIdpSelectionBtnResourceId() != null;\n+            UiAutomatorUtils.handleButtonClick(b2CProvider.getIdpSelectionBtnResourceId());\n+        }\n+\n+        if (!b2CProvider.isExternalIdp() && !parameters.isLoginHintProvided()) {\n+            loginComponentHandler.handleEmailField(username);\n+        } else if (b2CProvider.isExternalIdp() && !parameters.isSessionExpected()) {\n+            loginComponentHandler.handleEmailField(username);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a2d860a79120effff08e0fc58cef3dccb958c88"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1NTAzMQ==", "bodyText": "It needs to be an && (at least for this policy)", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/939#discussion_r445255031", "createdAt": "2020-06-25T01:15:06Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/interaction/b2c/IdLabB2cSisoPolicyPromptHandler.java", "diffHunk": "@@ -0,0 +1,79 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.interaction.b2c;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.ui.automation.interaction.AadLoginComponentHandler;\n+import com.microsoft.identity.client.ui.automation.interaction.AbstractPromptHandler;\n+import com.microsoft.identity.client.ui.automation.interaction.ILoginComponentHandler;\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+\n+/**\n+ * A Prompt handler for MSIDLAB B2C SISO Policy\n+ */\n+public class IdLabB2cSisoPolicyPromptHandler extends AbstractPromptHandler {\n+\n+    public IdLabB2cSisoPolicyPromptHandler(@NonNull final B2CPromptHandlerParameters parameters) {\n+        super(getAppropriateLoginComponentHandler(parameters), parameters);\n+    }\n+\n+    @Override\n+    public void handlePrompt(@NonNull final String username, @NonNull final String password) {\n+        final B2CPromptHandlerParameters b2CPromptHandlerParameters =\n+                (B2CPromptHandlerParameters) parameters;\n+\n+        final B2CProvider b2CProvider = b2CPromptHandlerParameters.getB2cProvider();\n+\n+        if (b2CProvider.isExternalIdp()) {\n+            assert b2CProvider.getIdpSelectionBtnResourceId() != null;\n+            UiAutomatorUtils.handleButtonClick(b2CProvider.getIdpSelectionBtnResourceId());\n+        }\n+\n+        if (!b2CProvider.isExternalIdp() && !parameters.isLoginHintProvided()) {\n+            loginComponentHandler.handleEmailField(username);\n+        } else if (b2CProvider.isExternalIdp() && !parameters.isSessionExpected()) {\n+            loginComponentHandler.handleEmailField(username);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcyNzIyMQ=="}, "originalCommit": {"oid": "4a2d860a79120effff08e0fc58cef3dccb958c88"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1ODkyOA==", "bodyText": "What I was saying here was:\nif((!b2CProvider.isExternalIdp() && !parameters.isLoginHintProvided()) ||\n(b2CProvider.isExternalIdp() && !parameters.isSessionExpected())) {\nloginComponentHandler.handleEmailField(username);\n}", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/939#discussion_r445258928", "createdAt": "2020-06-25T01:29:56Z", "author": {"login": "AdamBJohnsonx"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/interaction/b2c/IdLabB2cSisoPolicyPromptHandler.java", "diffHunk": "@@ -0,0 +1,79 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.interaction.b2c;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.ui.automation.interaction.AadLoginComponentHandler;\n+import com.microsoft.identity.client.ui.automation.interaction.AbstractPromptHandler;\n+import com.microsoft.identity.client.ui.automation.interaction.ILoginComponentHandler;\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+\n+/**\n+ * A Prompt handler for MSIDLAB B2C SISO Policy\n+ */\n+public class IdLabB2cSisoPolicyPromptHandler extends AbstractPromptHandler {\n+\n+    public IdLabB2cSisoPolicyPromptHandler(@NonNull final B2CPromptHandlerParameters parameters) {\n+        super(getAppropriateLoginComponentHandler(parameters), parameters);\n+    }\n+\n+    @Override\n+    public void handlePrompt(@NonNull final String username, @NonNull final String password) {\n+        final B2CPromptHandlerParameters b2CPromptHandlerParameters =\n+                (B2CPromptHandlerParameters) parameters;\n+\n+        final B2CProvider b2CProvider = b2CPromptHandlerParameters.getB2cProvider();\n+\n+        if (b2CProvider.isExternalIdp()) {\n+            assert b2CProvider.getIdpSelectionBtnResourceId() != null;\n+            UiAutomatorUtils.handleButtonClick(b2CProvider.getIdpSelectionBtnResourceId());\n+        }\n+\n+        if (!b2CProvider.isExternalIdp() && !parameters.isLoginHintProvided()) {\n+            loginComponentHandler.handleEmailField(username);\n+        } else if (b2CProvider.isExternalIdp() && !parameters.isSessionExpected()) {\n+            loginComponentHandler.handleEmailField(username);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcyNzIyMQ=="}, "originalCommit": {"oid": "4a2d860a79120effff08e0fc58cef3dccb958c88"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM4MTkwOQ==", "bodyText": "Addressed here: 87dcc74", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/939#discussion_r446381909", "createdAt": "2020-06-26T19:56:22Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/interaction/b2c/IdLabB2cSisoPolicyPromptHandler.java", "diffHunk": "@@ -0,0 +1,79 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.interaction.b2c;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.ui.automation.interaction.AadLoginComponentHandler;\n+import com.microsoft.identity.client.ui.automation.interaction.AbstractPromptHandler;\n+import com.microsoft.identity.client.ui.automation.interaction.ILoginComponentHandler;\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+\n+/**\n+ * A Prompt handler for MSIDLAB B2C SISO Policy\n+ */\n+public class IdLabB2cSisoPolicyPromptHandler extends AbstractPromptHandler {\n+\n+    public IdLabB2cSisoPolicyPromptHandler(@NonNull final B2CPromptHandlerParameters parameters) {\n+        super(getAppropriateLoginComponentHandler(parameters), parameters);\n+    }\n+\n+    @Override\n+    public void handlePrompt(@NonNull final String username, @NonNull final String password) {\n+        final B2CPromptHandlerParameters b2CPromptHandlerParameters =\n+                (B2CPromptHandlerParameters) parameters;\n+\n+        final B2CProvider b2CProvider = b2CPromptHandlerParameters.getB2cProvider();\n+\n+        if (b2CProvider.isExternalIdp()) {\n+            assert b2CProvider.getIdpSelectionBtnResourceId() != null;\n+            UiAutomatorUtils.handleButtonClick(b2CProvider.getIdpSelectionBtnResourceId());\n+        }\n+\n+        if (!b2CProvider.isExternalIdp() && !parameters.isLoginHintProvided()) {\n+            loginComponentHandler.handleEmailField(username);\n+        } else if (b2CProvider.isExternalIdp() && !parameters.isSessionExpected()) {\n+            loginComponentHandler.handleEmailField(username);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcyNzIyMQ=="}, "originalCommit": {"oid": "4a2d860a79120effff08e0fc58cef3dccb958c88"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTc2ODUyOnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/interaction/b2c/B2CIdLabLocalLoginComponentHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMzo0NjowN1rOGnUgeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMToxNjowN1rOGooOhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg4MzY0MQ==", "bodyText": "should this be called explicitly?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/939#discussion_r443883641", "createdAt": "2020-06-22T23:46:07Z", "author": {"login": "rpdome"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/interaction/b2c/B2CIdLabLocalLoginComponentHandler.java", "diffHunk": "@@ -0,0 +1,80 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.interaction.b2c;\n+\n+import androidx.annotation.NonNull;\n+import androidx.test.uiautomator.UiObject;\n+\n+import com.microsoft.identity.client.ui.automation.interaction.ILoginComponentHandler;\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+/**\n+ * A login component handler for B2C Local IdP\n+ */\n+public class B2CIdLabLocalLoginComponentHandler implements ILoginComponentHandler {\n+\n+    @Override\n+    public void handleEmailField(@NonNull final String username) {\n+        UiAutomatorUtils.handleInput(\"logonIdentifier\", username);\n+    }\n+\n+    @Override\n+    public void handlePasswordField(@NonNull final String password) {\n+        UiAutomatorUtils.handleInput(\"password\", password);\n+        handleNextButton();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a2d860a79120effff08e0fc58cef3dccb958c88"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1NTMwMw==", "bodyText": "It doesn't have to be, but I've done it in this way so the caller doesn't have to decide if they need to handle next btn or not depending on the IdP. The caller just needs to handle the email / password fields.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/939#discussion_r445255303", "createdAt": "2020-06-25T01:16:07Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/interaction/b2c/B2CIdLabLocalLoginComponentHandler.java", "diffHunk": "@@ -0,0 +1,80 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.interaction.b2c;\n+\n+import androidx.annotation.NonNull;\n+import androidx.test.uiautomator.UiObject;\n+\n+import com.microsoft.identity.client.ui.automation.interaction.ILoginComponentHandler;\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+/**\n+ * A login component handler for B2C Local IdP\n+ */\n+public class B2CIdLabLocalLoginComponentHandler implements ILoginComponentHandler {\n+\n+    @Override\n+    public void handleEmailField(@NonNull final String username) {\n+        UiAutomatorUtils.handleInput(\"logonIdentifier\", username);\n+    }\n+\n+    @Override\n+    public void handlePasswordField(@NonNull final String password) {\n+        UiAutomatorUtils.handleInput(\"password\", password);\n+        handleNextButton();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg4MzY0MQ=="}, "originalCommit": {"oid": "4a2d860a79120effff08e0fc58cef3dccb958c88"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTc5MjU0OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/interaction/b2c/B2CProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMzo1OTowNVrOGnUvAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMToxNzoxNlrOGooPqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg4NzM2Mg==", "bodyText": "nit: suggest renaming to MSA (an internal term for outlook/hotmail/live account).", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/939#discussion_r443887362", "createdAt": "2020-06-22T23:59:05Z", "author": {"login": "rpdome"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/interaction/b2c/B2CProvider.java", "diffHunk": "@@ -0,0 +1,96 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.interaction.b2c;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+\n+import lombok.Getter;\n+\n+/**\n+ * A class modeling a B2C Provider that is being used during a B2C UI Test\n+ */\n+@Getter\n+public abstract class B2CProvider {\n+\n+    @NonNull\n+    private String providerName;\n+\n+    @Nullable // should be null for LOCAL B2C provider\n+    private String idpSelectionBtnResourceId;\n+\n+    @Nullable // should be null for LOCAL B2C provider\n+    private String domainHint; // this can be used as query param to /authorize endpoint\n+\n+    public B2CProvider(@NonNull final String providerName,\n+                       @Nullable final String idpSelectionBtnResourceId,\n+                       @Nullable final String domainHint) {\n+        this.providerName = providerName;\n+        this.idpSelectionBtnResourceId = idpSelectionBtnResourceId;\n+        this.domainHint = domainHint;\n+    }\n+\n+    /**\n+     * Indicates if the B2C Provider is a non-local IdP\n+     *\n+     * @return a boolean indicating if B2C Provider is an external IdP\n+     */\n+    protected boolean isExternalIdp() {\n+        return !(this instanceof Local);\n+    }\n+\n+    public static class Local extends B2CProvider {\n+        public Local() {\n+            super(LabConstants.B2CProvider.LOCAL, null, null);\n+        }\n+    }\n+\n+    public static class Google extends B2CProvider {\n+        public Google() {\n+            super(LabConstants.B2CProvider.GOOGLE,\n+                    \"GoogleExchange\",\n+                    \"google.com\"\n+            );\n+        }\n+    }\n+\n+    public static class Facebook extends B2CProvider {\n+        public Facebook() {\n+            super(LabConstants.B2CProvider.FACEBOOK,\n+                    \"FacebookExchange\",\n+                    \"facebook.com\"\n+            );\n+        }\n+    }\n+\n+    public static class Microsoft extends B2CProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a2d860a79120effff08e0fc58cef3dccb958c88"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1NTU5NA==", "bodyText": "I'm using the same name that is provided by the LAB API (so it easier to keep track of the mapping)", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/939#discussion_r445255594", "createdAt": "2020-06-25T01:17:16Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/interaction/b2c/B2CProvider.java", "diffHunk": "@@ -0,0 +1,96 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.interaction.b2c;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+\n+import lombok.Getter;\n+\n+/**\n+ * A class modeling a B2C Provider that is being used during a B2C UI Test\n+ */\n+@Getter\n+public abstract class B2CProvider {\n+\n+    @NonNull\n+    private String providerName;\n+\n+    @Nullable // should be null for LOCAL B2C provider\n+    private String idpSelectionBtnResourceId;\n+\n+    @Nullable // should be null for LOCAL B2C provider\n+    private String domainHint; // this can be used as query param to /authorize endpoint\n+\n+    public B2CProvider(@NonNull final String providerName,\n+                       @Nullable final String idpSelectionBtnResourceId,\n+                       @Nullable final String domainHint) {\n+        this.providerName = providerName;\n+        this.idpSelectionBtnResourceId = idpSelectionBtnResourceId;\n+        this.domainHint = domainHint;\n+    }\n+\n+    /**\n+     * Indicates if the B2C Provider is a non-local IdP\n+     *\n+     * @return a boolean indicating if B2C Provider is an external IdP\n+     */\n+    protected boolean isExternalIdp() {\n+        return !(this instanceof Local);\n+    }\n+\n+    public static class Local extends B2CProvider {\n+        public Local() {\n+            super(LabConstants.B2CProvider.LOCAL, null, null);\n+        }\n+    }\n+\n+    public static class Google extends B2CProvider {\n+        public Google() {\n+            super(LabConstants.B2CProvider.GOOGLE,\n+                    \"GoogleExchange\",\n+                    \"google.com\"\n+            );\n+        }\n+    }\n+\n+    public static class Facebook extends B2CProvider {\n+        public Facebook() {\n+            super(LabConstants.B2CProvider.FACEBOOK,\n+                    \"FacebookExchange\",\n+                    \"facebook.com\"\n+            );\n+        }\n+    }\n+\n+    public static class Microsoft extends B2CProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg4NzM2Mg=="}, "originalCommit": {"oid": "4a2d860a79120effff08e0fc58cef3dccb958c88"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTgwNDI4OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/interaction/b2c/FacebookLoginComponentHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMDowNDo1NVrOGnU15A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMToyOTowNFrOGoobvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg4OTEyNA==", "bodyText": "should 62-71 be a function in UiAutomatorUtils? (That takes in a class type and label)", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/939#discussion_r443889124", "createdAt": "2020-06-23T00:04:55Z", "author": {"login": "rpdome"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/interaction/b2c/FacebookLoginComponentHandler.java", "diffHunk": "@@ -0,0 +1,101 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.interaction.b2c;\n+\n+import android.widget.Button;\n+\n+import androidx.annotation.NonNull;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.uiautomator.UiDevice;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+import androidx.test.uiautomator.UiSelector;\n+\n+import com.microsoft.identity.client.ui.automation.interaction.ILoginComponentHandler;\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+\n+/**\n+ * A login component handler for Facebook IdP\n+ */\n+public class FacebookLoginComponentHandler implements ILoginComponentHandler {\n+\n+    @Override\n+    public void handleEmailField(@NonNull final String username) {\n+        UiAutomatorUtils.handleInput(\"m_login_email\", username);\n+    }\n+\n+    @Override\n+    public void handlePasswordField(@NonNull final String password) {\n+        UiAutomatorUtils.handleInput(\"m_login_password\", password);\n+        handleNextButton();\n+    }\n+\n+    @Override\n+    public void handleBackButton() {\n+        UiAutomatorUtils.pressBack();\n+    }\n+\n+    @Override\n+    public void handleNextButton() {\n+        final UiDevice device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a2d860a79120effff08e0fc58cef3dccb958c88"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1ODY4NQ==", "bodyText": "Okay, I've simplified it a bit and moved most of the logic to UiAutomatorUtils", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/939#discussion_r445258685", "createdAt": "2020-06-25T01:29:04Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/interaction/b2c/FacebookLoginComponentHandler.java", "diffHunk": "@@ -0,0 +1,101 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.interaction.b2c;\n+\n+import android.widget.Button;\n+\n+import androidx.annotation.NonNull;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.uiautomator.UiDevice;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+import androidx.test.uiautomator.UiSelector;\n+\n+import com.microsoft.identity.client.ui.automation.interaction.ILoginComponentHandler;\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+\n+/**\n+ * A login component handler for Facebook IdP\n+ */\n+public class FacebookLoginComponentHandler implements ILoginComponentHandler {\n+\n+    @Override\n+    public void handleEmailField(@NonNull final String username) {\n+        UiAutomatorUtils.handleInput(\"m_login_email\", username);\n+    }\n+\n+    @Override\n+    public void handlePasswordField(@NonNull final String password) {\n+        UiAutomatorUtils.handleInput(\"m_login_password\", password);\n+        handleNextButton();\n+    }\n+\n+    @Override\n+    public void handleBackButton() {\n+        UiAutomatorUtils.pressBack();\n+    }\n+\n+    @Override\n+    public void handleNextButton() {\n+        final UiDevice device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg4OTEyNA=="}, "originalCommit": {"oid": "4a2d860a79120effff08e0fc58cef3dccb958c88"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTgwODExOnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/interaction/b2c/GoogleLoginComponentHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMDowNzowNVrOGnU4Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMToxOTo0OVrOGooSdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg4OTcyMg==", "bodyText": "why do we have to do 51-58 here (but we don't have to in FB's case?)", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/939#discussion_r443889722", "createdAt": "2020-06-23T00:07:05Z", "author": {"login": "rpdome"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/interaction/b2c/GoogleLoginComponentHandler.java", "diffHunk": "@@ -0,0 +1,108 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.interaction.b2c;\n+\n+import android.widget.EditText;\n+\n+import androidx.annotation.NonNull;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+import androidx.test.uiautomator.UiSelector;\n+\n+import com.microsoft.identity.client.ui.automation.interaction.ILoginComponentHandler;\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+\n+/**\n+ * A login component handler for Google IdP\n+ */\n+public class GoogleLoginComponentHandler implements ILoginComponentHandler {\n+\n+    @Override\n+    public void handleEmailField(@NonNull final String username) {\n+        UiAutomatorUtils.handleInput(\"identifierId\", username);\n+        handleNextButton();\n+    }\n+\n+    @Override\n+    public void handlePasswordField(@NonNull final String password) {\n+        UiAutomatorUtils.handleInput(\"password\", password);\n+        final UiObject passwordBox = UiAutomatorUtils.obtainUiObjectWithResourceId(\"password\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a2d860a79120effff08e0fc58cef3dccb958c88"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1NjMwOQ==", "bodyText": "FB, thankfully declared a resource id for each of the edit text fields, however, google didn't. In this case, Google instead has a resource id assigned to parent outer level password box that contains a label for the inner password edit text field. The actual inner edit text field doesn't contain any resource id....hence we need to do this logic to find the actual element for the password field.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/939#discussion_r445256309", "createdAt": "2020-06-25T01:19:49Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/interaction/b2c/GoogleLoginComponentHandler.java", "diffHunk": "@@ -0,0 +1,108 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.interaction.b2c;\n+\n+import android.widget.EditText;\n+\n+import androidx.annotation.NonNull;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+import androidx.test.uiautomator.UiSelector;\n+\n+import com.microsoft.identity.client.ui.automation.interaction.ILoginComponentHandler;\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+\n+/**\n+ * A login component handler for Google IdP\n+ */\n+public class GoogleLoginComponentHandler implements ILoginComponentHandler {\n+\n+    @Override\n+    public void handleEmailField(@NonNull final String username) {\n+        UiAutomatorUtils.handleInput(\"identifierId\", username);\n+        handleNextButton();\n+    }\n+\n+    @Override\n+    public void handlePasswordField(@NonNull final String password) {\n+        UiAutomatorUtils.handleInput(\"password\", password);\n+        final UiObject passwordBox = UiAutomatorUtils.obtainUiObjectWithResourceId(\"password\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg4OTcyMg=="}, "originalCommit": {"oid": "4a2d860a79120effff08e0fc58cef3dccb958c88"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTg4NzAwOnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/interaction/b2c/GoogleLoginComponentHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMDo1Mjo0NlrOGnVnPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOTo1NToyN1rOGps91g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwMTc1OA==", "bodyText": "These messages need to say Google instead of Local", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/939#discussion_r443901758", "createdAt": "2020-06-23T00:52:46Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/interaction/b2c/GoogleLoginComponentHandler.java", "diffHunk": "@@ -0,0 +1,108 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.interaction.b2c;\n+\n+import android.widget.EditText;\n+\n+import androidx.annotation.NonNull;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+import androidx.test.uiautomator.UiSelector;\n+\n+import com.microsoft.identity.client.ui.automation.interaction.ILoginComponentHandler;\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+\n+/**\n+ * A login component handler for Google IdP\n+ */\n+public class GoogleLoginComponentHandler implements ILoginComponentHandler {\n+\n+    @Override\n+    public void handleEmailField(@NonNull final String username) {\n+        UiAutomatorUtils.handleInput(\"identifierId\", username);\n+        handleNextButton();\n+    }\n+\n+    @Override\n+    public void handlePasswordField(@NonNull final String password) {\n+        UiAutomatorUtils.handleInput(\"password\", password);\n+        final UiObject passwordBox = UiAutomatorUtils.obtainUiObjectWithResourceId(\"password\");\n+\n+        try {\n+            final UiObject passwordInput = passwordBox.getChild(\n+                    new UiSelector().className(EditText.class)\n+            );\n+\n+            passwordInput.setText(password);\n+        } catch (UiObjectNotFoundException e) {\n+            Assert.fail(e.getMessage());\n+        }\n+\n+        handleNextButton();\n+    }\n+\n+    @Override\n+    public void handleBackButton() {\n+        UiAutomatorUtils.pressBack();\n+    }\n+\n+    @Override\n+    public void handleNextButton() {\n+        final UiObject nextBtn = UiAutomatorUtils.obtainUiObjectWithText(\"Next\");\n+        try {\n+            nextBtn.click();\n+        } catch (UiObjectNotFoundException e) {\n+            Assert.fail(e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public void handleAccountPicker(@NonNull final String username) {\n+        throw new UnsupportedOperationException(\"Not supported for B2C Local Provider\");\n+    }\n+\n+    private UiObject getConsentScreen() {\n+        return UiAutomatorUtils.obtainUiObjectWithResourceId(\"consentHeader\");\n+    }\n+\n+    @Override\n+    public void confirmConsentPageReceived() {\n+        throw new UnsupportedOperationException(\"Not supported for B2C Local Provider\");\n+    }\n+\n+    @Override\n+    public void acceptConsent() {\n+        throw new UnsupportedOperationException(\"Not supported for B2C Local Provider\");\n+    }\n+\n+    public void declineConsent() {\n+        throw new UnsupportedOperationException(\"Not supported for B2C Local Provider\");\n+    }\n+\n+    @Override\n+    public void handleSpeedBump() {\n+        throw new UnsupportedOperationException(\"Not supported for B2C Local Provider\");\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a2d860a79120effff08e0fc58cef3dccb958c88"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1ODQ1OA==", "bodyText": "Could they be in an abstract class that calls into an abstract getName() method so we don't have to write it in every case?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/939#discussion_r445258458", "createdAt": "2020-06-25T01:28:06Z", "author": {"login": "AdamBJohnsonx"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/interaction/b2c/GoogleLoginComponentHandler.java", "diffHunk": "@@ -0,0 +1,108 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.interaction.b2c;\n+\n+import android.widget.EditText;\n+\n+import androidx.annotation.NonNull;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+import androidx.test.uiautomator.UiSelector;\n+\n+import com.microsoft.identity.client.ui.automation.interaction.ILoginComponentHandler;\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+\n+/**\n+ * A login component handler for Google IdP\n+ */\n+public class GoogleLoginComponentHandler implements ILoginComponentHandler {\n+\n+    @Override\n+    public void handleEmailField(@NonNull final String username) {\n+        UiAutomatorUtils.handleInput(\"identifierId\", username);\n+        handleNextButton();\n+    }\n+\n+    @Override\n+    public void handlePasswordField(@NonNull final String password) {\n+        UiAutomatorUtils.handleInput(\"password\", password);\n+        final UiObject passwordBox = UiAutomatorUtils.obtainUiObjectWithResourceId(\"password\");\n+\n+        try {\n+            final UiObject passwordInput = passwordBox.getChild(\n+                    new UiSelector().className(EditText.class)\n+            );\n+\n+            passwordInput.setText(password);\n+        } catch (UiObjectNotFoundException e) {\n+            Assert.fail(e.getMessage());\n+        }\n+\n+        handleNextButton();\n+    }\n+\n+    @Override\n+    public void handleBackButton() {\n+        UiAutomatorUtils.pressBack();\n+    }\n+\n+    @Override\n+    public void handleNextButton() {\n+        final UiObject nextBtn = UiAutomatorUtils.obtainUiObjectWithText(\"Next\");\n+        try {\n+            nextBtn.click();\n+        } catch (UiObjectNotFoundException e) {\n+            Assert.fail(e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public void handleAccountPicker(@NonNull final String username) {\n+        throw new UnsupportedOperationException(\"Not supported for B2C Local Provider\");\n+    }\n+\n+    private UiObject getConsentScreen() {\n+        return UiAutomatorUtils.obtainUiObjectWithResourceId(\"consentHeader\");\n+    }\n+\n+    @Override\n+    public void confirmConsentPageReceived() {\n+        throw new UnsupportedOperationException(\"Not supported for B2C Local Provider\");\n+    }\n+\n+    @Override\n+    public void acceptConsent() {\n+        throw new UnsupportedOperationException(\"Not supported for B2C Local Provider\");\n+    }\n+\n+    public void declineConsent() {\n+        throw new UnsupportedOperationException(\"Not supported for B2C Local Provider\");\n+    }\n+\n+    @Override\n+    public void handleSpeedBump() {\n+        throw new UnsupportedOperationException(\"Not supported for B2C Local Provider\");\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwMTc1OA=="}, "originalCommit": {"oid": "4a2d860a79120effff08e0fc58cef3dccb958c88"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM4MTUyNg==", "bodyText": "Addressed here: 8d08d26", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/939#discussion_r446381526", "createdAt": "2020-06-26T19:55:27Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/interaction/b2c/GoogleLoginComponentHandler.java", "diffHunk": "@@ -0,0 +1,108 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.interaction.b2c;\n+\n+import android.widget.EditText;\n+\n+import androidx.annotation.NonNull;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+import androidx.test.uiautomator.UiSelector;\n+\n+import com.microsoft.identity.client.ui.automation.interaction.ILoginComponentHandler;\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+\n+/**\n+ * A login component handler for Google IdP\n+ */\n+public class GoogleLoginComponentHandler implements ILoginComponentHandler {\n+\n+    @Override\n+    public void handleEmailField(@NonNull final String username) {\n+        UiAutomatorUtils.handleInput(\"identifierId\", username);\n+        handleNextButton();\n+    }\n+\n+    @Override\n+    public void handlePasswordField(@NonNull final String password) {\n+        UiAutomatorUtils.handleInput(\"password\", password);\n+        final UiObject passwordBox = UiAutomatorUtils.obtainUiObjectWithResourceId(\"password\");\n+\n+        try {\n+            final UiObject passwordInput = passwordBox.getChild(\n+                    new UiSelector().className(EditText.class)\n+            );\n+\n+            passwordInput.setText(password);\n+        } catch (UiObjectNotFoundException e) {\n+            Assert.fail(e.getMessage());\n+        }\n+\n+        handleNextButton();\n+    }\n+\n+    @Override\n+    public void handleBackButton() {\n+        UiAutomatorUtils.pressBack();\n+    }\n+\n+    @Override\n+    public void handleNextButton() {\n+        final UiObject nextBtn = UiAutomatorUtils.obtainUiObjectWithText(\"Next\");\n+        try {\n+            nextBtn.click();\n+        } catch (UiObjectNotFoundException e) {\n+            Assert.fail(e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public void handleAccountPicker(@NonNull final String username) {\n+        throw new UnsupportedOperationException(\"Not supported for B2C Local Provider\");\n+    }\n+\n+    private UiObject getConsentScreen() {\n+        return UiAutomatorUtils.obtainUiObjectWithResourceId(\"consentHeader\");\n+    }\n+\n+    @Override\n+    public void confirmConsentPageReceived() {\n+        throw new UnsupportedOperationException(\"Not supported for B2C Local Provider\");\n+    }\n+\n+    @Override\n+    public void acceptConsent() {\n+        throw new UnsupportedOperationException(\"Not supported for B2C Local Provider\");\n+    }\n+\n+    public void declineConsent() {\n+        throw new UnsupportedOperationException(\"Not supported for B2C Local Provider\");\n+    }\n+\n+    @Override\n+    public void handleSpeedBump() {\n+        throw new UnsupportedOperationException(\"Not supported for B2C Local Provider\");\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwMTc1OA=="}, "originalCommit": {"oid": "4a2d860a79120effff08e0fc58cef3dccb958c88"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTg4NzQxOnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/interaction/b2c/FacebookLoginComponentHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMDo1MzowMlrOGnVnhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOTo1NTo0OFrOGps-ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwMTgzMA==", "bodyText": "These messages need to say Facebook instead of Local", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/939#discussion_r443901830", "createdAt": "2020-06-23T00:53:02Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/interaction/b2c/FacebookLoginComponentHandler.java", "diffHunk": "@@ -0,0 +1,101 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.interaction.b2c;\n+\n+import android.widget.Button;\n+\n+import androidx.annotation.NonNull;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.uiautomator.UiDevice;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+import androidx.test.uiautomator.UiSelector;\n+\n+import com.microsoft.identity.client.ui.automation.interaction.ILoginComponentHandler;\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+\n+/**\n+ * A login component handler for Facebook IdP\n+ */\n+public class FacebookLoginComponentHandler implements ILoginComponentHandler {\n+\n+    @Override\n+    public void handleEmailField(@NonNull final String username) {\n+        UiAutomatorUtils.handleInput(\"m_login_email\", username);\n+    }\n+\n+    @Override\n+    public void handlePasswordField(@NonNull final String password) {\n+        UiAutomatorUtils.handleInput(\"m_login_password\", password);\n+        handleNextButton();\n+    }\n+\n+    @Override\n+    public void handleBackButton() {\n+        UiAutomatorUtils.pressBack();\n+    }\n+\n+    @Override\n+    public void handleNextButton() {\n+        final UiDevice device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());\n+        final UiObject nextBtn = device.findObject(\n+                new UiSelector().className(Button.class).text(\"Log In\")\n+        );\n+\n+        try {\n+            nextBtn.click();\n+        } catch (UiObjectNotFoundException e) {\n+            Assert.fail(e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public void handleAccountPicker(@NonNull final String username) {\n+        throw new UnsupportedOperationException(\"Not supported for B2C Local Provider\");\n+    }\n+\n+    private UiObject getConsentScreen() {\n+        return UiAutomatorUtils.obtainUiObjectWithResourceId(\"consentHeader\");\n+    }\n+\n+    @Override\n+    public void confirmConsentPageReceived() {\n+        throw new UnsupportedOperationException(\"Not supported for B2C Local Provider\");\n+    }\n+\n+    @Override\n+    public void acceptConsent() {\n+        throw new UnsupportedOperationException(\"Not supported for B2C Local Provider\");\n+    }\n+\n+    public void declineConsent() {\n+        throw new UnsupportedOperationException(\"Not supported for B2C Local Provider\");\n+    }\n+\n+    @Override\n+    public void handleSpeedBump() {\n+        throw new UnsupportedOperationException(\"Not supported for B2C Local Provider\");\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a2d860a79120effff08e0fc58cef3dccb958c88"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM4MTY2OA==", "bodyText": "Addressed here: 8d08d26", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/939#discussion_r446381668", "createdAt": "2020-06-26T19:55:48Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/interaction/b2c/FacebookLoginComponentHandler.java", "diffHunk": "@@ -0,0 +1,101 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.interaction.b2c;\n+\n+import android.widget.Button;\n+\n+import androidx.annotation.NonNull;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.uiautomator.UiDevice;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+import androidx.test.uiautomator.UiSelector;\n+\n+import com.microsoft.identity.client.ui.automation.interaction.ILoginComponentHandler;\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+\n+/**\n+ * A login component handler for Facebook IdP\n+ */\n+public class FacebookLoginComponentHandler implements ILoginComponentHandler {\n+\n+    @Override\n+    public void handleEmailField(@NonNull final String username) {\n+        UiAutomatorUtils.handleInput(\"m_login_email\", username);\n+    }\n+\n+    @Override\n+    public void handlePasswordField(@NonNull final String password) {\n+        UiAutomatorUtils.handleInput(\"m_login_password\", password);\n+        handleNextButton();\n+    }\n+\n+    @Override\n+    public void handleBackButton() {\n+        UiAutomatorUtils.pressBack();\n+    }\n+\n+    @Override\n+    public void handleNextButton() {\n+        final UiDevice device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());\n+        final UiObject nextBtn = device.findObject(\n+                new UiSelector().className(Button.class).text(\"Log In\")\n+        );\n+\n+        try {\n+            nextBtn.click();\n+        } catch (UiObjectNotFoundException e) {\n+            Assert.fail(e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public void handleAccountPicker(@NonNull final String username) {\n+        throw new UnsupportedOperationException(\"Not supported for B2C Local Provider\");\n+    }\n+\n+    private UiObject getConsentScreen() {\n+        return UiAutomatorUtils.obtainUiObjectWithResourceId(\"consentHeader\");\n+    }\n+\n+    @Override\n+    public void confirmConsentPageReceived() {\n+        throw new UnsupportedOperationException(\"Not supported for B2C Local Provider\");\n+    }\n+\n+    @Override\n+    public void acceptConsent() {\n+        throw new UnsupportedOperationException(\"Not supported for B2C Local Provider\");\n+    }\n+\n+    public void declineConsent() {\n+        throw new UnsupportedOperationException(\"Not supported for B2C Local Provider\");\n+    }\n+\n+    @Override\n+    public void handleSpeedBump() {\n+        throw new UnsupportedOperationException(\"Not supported for B2C Local Provider\");\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwMTgzMA=="}, "originalCommit": {"oid": "4a2d860a79120effff08e0fc58cef3dccb958c88"}, "originalPosition": 101}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2398, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}