{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNDg0Mzc4", "number": 889, "title": "Closes #888 - Adds support for additional HTTP request methods", "bodyText": "See #888", "createdAt": "2020-04-15T00:52:10Z", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889", "merged": true, "mergeCommit": {"oid": "2dbc606753e03a790424739180b83cb012f1315e"}, "closed": true, "closedAt": "2020-04-25T00:36:36Z", "author": {"login": "iambmelt"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXtQ-0gH2gAyNDAzNDg0Mzc4OjEyNjFmOGI3Njk1MDI0ZDE5Y2NhNGIyZDg3OTJiNjg5MjUxY2M0ZmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABca6weIgFqTQwMDMzMjc5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1261f8b7695024d19cca4b2d8792b689251cc4fd", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/1261f8b7695024d19cca4b2d8792b689251cc4fd", "committedDate": "2020-04-15T00:50:37Z", "message": "WIP - adding new methods, applying annots"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMzg5MjUy", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#pullrequestreview-393389252", "createdAt": "2020-04-15T00:52:54Z", "commit": {"oid": "1261f8b7695024d19cca4b2d8792b689251cc4fd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMDo1Mjo1NFrOGFmA3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMDo1Mjo1NFrOGFmA3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUxODg3Ng==", "bodyText": "I don't think we can support this currently -- support may also not be needed", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#discussion_r408518876", "createdAt": "2020-04-15T00:52:54Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "diffHunk": "@@ -158,27 +166,83 @@ public static HttpResponse sendPost(final URL requestUrl, final Map<String, Stri\n      * @return HttpResponse\n      * @throws IOException throw if service error happen during http request.\n      */\n-    public static HttpResponse sendGet(final URL requestUrl, final Map<String, String> requestHeaders)\n+    public static HttpResponse sendGet(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders)\n             throws IOException {\n         Telemetry.emit(\n                 new HttpStartEvent()\n                         .putMethod(REQUEST_METHOD_GET)\n                         .putPath(requestUrl)\n-                        .putRequestIdHeader(requestHeaders == null ? null : requestHeaders.get(CLIENT_REQUEST_ID))\n+                        .putRequestIdHeader(requestHeaders.get(CLIENT_REQUEST_ID))\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_GET\n         );\n \n-        final HttpRequest httpRequest = new HttpRequest(requestUrl, requestHeaders, REQUEST_METHOD_GET);\n         final HttpResponse response = httpRequest.send();\n \n         final HttpEndEvent httpEndEvent = new HttpEndEvent();\n+\n         if (response != null) {\n             httpEndEvent.putStatusCode(response.getStatusCode());\n         }\n+\n         Telemetry.emit(httpEndEvent);\n \n         return response;\n     }\n \n+    public static HttpResponse sendHead(@NonNull final URL requestUrl,\n+                                        @NonNull final Map<String, String> requestHeaders) {\n+        // TODO\n+        return null;\n+    }\n+\n+    public static HttpResponse sendPut(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders,\n+                                       @Nullable final byte[] requestContent,\n+                                       @Nullable final String requestContentType) {\n+        // TODO\n+        return null;\n+    }\n+\n+    public static HttpResponse sendDelete(@NonNull final URL requestUrl,\n+                                          @NonNull final Map<String, String> requestHeaders,\n+                                          @Nullable final byte[] requestContent,\n+                                          @Nullable final String requestContentType) {\n+        // TODO\n+        return null;\n+    }\n+\n+    public static HttpResponse sendTrace(@NonNull final URL requestUrl,\n+                                         @NonNull final Map<String, String> requestHeaders) {\n+        // TODO\n+        return null;\n+    }\n+\n+    public static HttpResponse sendOptions(@NonNull final URL requestUrl,\n+                                           @NonNull final Map<String, String> requestHeaders) {\n+        // TODO\n+        return null;\n+    }\n+\n+    public static HttpResponse sendConnect(@NonNull final URL requestUrl,\n+                                           @NonNull final Map<String, String> requestHeaders) {\n+        // TODO Can this be supported? I suspect not.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1261f8b7695024d19cca4b2d8792b689251cc4fd"}, "originalPosition": 104}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af4810218ee2c35a3dedac3f63a33209cefc180b", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/af4810218ee2c35a3dedac3f63a33209cefc180b", "committedDate": "2020-04-15T19:28:47Z", "message": "Additional impl, refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24832f9605dd0fad297177f5fc995f7fa35a5094", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/24832f9605dd0fad297177f5fc995f7fa35a5094", "committedDate": "2020-04-15T19:29:22Z", "message": "Merge branch 'dev' into iambmelt/888"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0966fbc2d63835466991d86d432d168378d5294", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/e0966fbc2d63835466991d86d432d168378d5294", "committedDate": "2020-04-15T19:44:05Z", "message": "Adding sendWithMethod -- this is so I can refactor out duplicative code\nin other paths"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDgyNzky", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#pullrequestreview-394082792", "createdAt": "2020-04-15T19:46:03Z", "commit": {"oid": "e0966fbc2d63835466991d86d432d168378d5294"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0NjowM1rOGGI-Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0NjowM1rOGGI-Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MTY4Nw==", "bodyText": "javadoc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#discussion_r409091687", "createdAt": "2020-04-15T19:46:03Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "diffHunk": "@@ -158,24 +203,223 @@ public static HttpResponse sendPost(final URL requestUrl, final Map<String, Stri\n      * @return HttpResponse\n      * @throws IOException throw if service error happen during http request.\n      */\n-    public static HttpResponse sendGet(final URL requestUrl, final Map<String, String> requestHeaders)\n+    public static HttpResponse sendGet(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders)\n             throws IOException {\n-        Telemetry.emit(\n-                new HttpStartEvent()\n-                        .putMethod(REQUEST_METHOD_GET)\n-                        .putPath(requestUrl)\n-                        .putRequestIdHeader(requestHeaders == null ? null : requestHeaders.get(CLIENT_REQUEST_ID))\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_GET,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_GET\n         );\n \n-        final HttpRequest httpRequest = new HttpRequest(requestUrl, requestHeaders, REQUEST_METHOD_GET);\n         final HttpResponse response = httpRequest.send();\n \n-        final HttpEndEvent httpEndEvent = new HttpEndEvent();\n-        if (response != null) {\n-            httpEndEvent.putStatusCode(response.getStatusCode());\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendHead(@NonNull final URL requestUrl,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0966fbc2d63835466991d86d432d168378d5294"}, "originalPosition": 153}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDgyODM5", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#pullrequestreview-394082839", "createdAt": "2020-04-15T19:46:07Z", "commit": {"oid": "e0966fbc2d63835466991d86d432d168378d5294"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0NjowN1rOGGI-hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0NjowN1rOGGI-hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MTcxNg==", "bodyText": "javadoc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#discussion_r409091716", "createdAt": "2020-04-15T19:46:07Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "diffHunk": "@@ -158,24 +203,223 @@ public static HttpResponse sendPost(final URL requestUrl, final Map<String, Stri\n      * @return HttpResponse\n      * @throws IOException throw if service error happen during http request.\n      */\n-    public static HttpResponse sendGet(final URL requestUrl, final Map<String, String> requestHeaders)\n+    public static HttpResponse sendGet(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders)\n             throws IOException {\n-        Telemetry.emit(\n-                new HttpStartEvent()\n-                        .putMethod(REQUEST_METHOD_GET)\n-                        .putPath(requestUrl)\n-                        .putRequestIdHeader(requestHeaders == null ? null : requestHeaders.get(CLIENT_REQUEST_ID))\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_GET,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_GET\n         );\n \n-        final HttpRequest httpRequest = new HttpRequest(requestUrl, requestHeaders, REQUEST_METHOD_GET);\n         final HttpResponse response = httpRequest.send();\n \n-        final HttpEndEvent httpEndEvent = new HttpEndEvent();\n-        if (response != null) {\n-            httpEndEvent.putStatusCode(response.getStatusCode());\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendHead(@NonNull final URL requestUrl,\n+                                        @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_HEAD,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_HEAD\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendPut(@NonNull final URL requestUrl,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0966fbc2d63835466991d86d432d168378d5294"}, "originalPosition": 175}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDgyODg0", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#pullrequestreview-394082884", "createdAt": "2020-04-15T19:46:11Z", "commit": {"oid": "e0966fbc2d63835466991d86d432d168378d5294"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0NjoxMVrOGGI-rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0NjoxMVrOGGI-rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MTc1Nw==", "bodyText": "javadoc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#discussion_r409091757", "createdAt": "2020-04-15T19:46:11Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "diffHunk": "@@ -158,24 +203,223 @@ public static HttpResponse sendPost(final URL requestUrl, final Map<String, Stri\n      * @return HttpResponse\n      * @throws IOException throw if service error happen during http request.\n      */\n-    public static HttpResponse sendGet(final URL requestUrl, final Map<String, String> requestHeaders)\n+    public static HttpResponse sendGet(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders)\n             throws IOException {\n-        Telemetry.emit(\n-                new HttpStartEvent()\n-                        .putMethod(REQUEST_METHOD_GET)\n-                        .putPath(requestUrl)\n-                        .putRequestIdHeader(requestHeaders == null ? null : requestHeaders.get(CLIENT_REQUEST_ID))\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_GET,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_GET\n         );\n \n-        final HttpRequest httpRequest = new HttpRequest(requestUrl, requestHeaders, REQUEST_METHOD_GET);\n         final HttpResponse response = httpRequest.send();\n \n-        final HttpEndEvent httpEndEvent = new HttpEndEvent();\n-        if (response != null) {\n-            httpEndEvent.putStatusCode(response.getStatusCode());\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendHead(@NonNull final URL requestUrl,\n+                                        @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_HEAD,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_HEAD\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendPut(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders,\n+                                       @Nullable final byte[] requestContent,\n+                                       @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_PUT,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_PUT,\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendDelete(@NonNull final URL requestUrl,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0966fbc2d63835466991d86d432d168378d5294"}, "originalPosition": 201}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDgyOTI5", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#pullrequestreview-394082929", "createdAt": "2020-04-15T19:46:14Z", "commit": {"oid": "e0966fbc2d63835466991d86d432d168378d5294"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0NjoxNFrOGGI-xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0NjoxNFrOGGI-xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MTc4Mw==", "bodyText": "javadoc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#discussion_r409091783", "createdAt": "2020-04-15T19:46:14Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "diffHunk": "@@ -158,24 +203,223 @@ public static HttpResponse sendPost(final URL requestUrl, final Map<String, Stri\n      * @return HttpResponse\n      * @throws IOException throw if service error happen during http request.\n      */\n-    public static HttpResponse sendGet(final URL requestUrl, final Map<String, String> requestHeaders)\n+    public static HttpResponse sendGet(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders)\n             throws IOException {\n-        Telemetry.emit(\n-                new HttpStartEvent()\n-                        .putMethod(REQUEST_METHOD_GET)\n-                        .putPath(requestUrl)\n-                        .putRequestIdHeader(requestHeaders == null ? null : requestHeaders.get(CLIENT_REQUEST_ID))\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_GET,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_GET\n         );\n \n-        final HttpRequest httpRequest = new HttpRequest(requestUrl, requestHeaders, REQUEST_METHOD_GET);\n         final HttpResponse response = httpRequest.send();\n \n-        final HttpEndEvent httpEndEvent = new HttpEndEvent();\n-        if (response != null) {\n-            httpEndEvent.putStatusCode(response.getStatusCode());\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendHead(@NonNull final URL requestUrl,\n+                                        @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_HEAD,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_HEAD\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendPut(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders,\n+                                       @Nullable final byte[] requestContent,\n+                                       @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_PUT,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_PUT,\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendDelete(@NonNull final URL requestUrl,\n+                                          @NonNull final Map<String, String> requestHeaders,\n+                                          @Nullable final byte[] requestContent,\n+                                          @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_DELETE,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_DELETE,\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendTrace(@NonNull final URL requestUrl,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0966fbc2d63835466991d86d432d168378d5294"}, "originalPosition": 227}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDgyOTYw", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#pullrequestreview-394082960", "createdAt": "2020-04-15T19:46:18Z", "commit": {"oid": "e0966fbc2d63835466991d86d432d168378d5294"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0NjoxOFrOGGI-4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0NjoxOFrOGGI-4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MTgxMQ==", "bodyText": "javadoc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#discussion_r409091811", "createdAt": "2020-04-15T19:46:18Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "diffHunk": "@@ -158,24 +203,223 @@ public static HttpResponse sendPost(final URL requestUrl, final Map<String, Stri\n      * @return HttpResponse\n      * @throws IOException throw if service error happen during http request.\n      */\n-    public static HttpResponse sendGet(final URL requestUrl, final Map<String, String> requestHeaders)\n+    public static HttpResponse sendGet(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders)\n             throws IOException {\n-        Telemetry.emit(\n-                new HttpStartEvent()\n-                        .putMethod(REQUEST_METHOD_GET)\n-                        .putPath(requestUrl)\n-                        .putRequestIdHeader(requestHeaders == null ? null : requestHeaders.get(CLIENT_REQUEST_ID))\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_GET,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_GET\n         );\n \n-        final HttpRequest httpRequest = new HttpRequest(requestUrl, requestHeaders, REQUEST_METHOD_GET);\n         final HttpResponse response = httpRequest.send();\n \n-        final HttpEndEvent httpEndEvent = new HttpEndEvent();\n-        if (response != null) {\n-            httpEndEvent.putStatusCode(response.getStatusCode());\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendHead(@NonNull final URL requestUrl,\n+                                        @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_HEAD,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_HEAD\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendPut(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders,\n+                                       @Nullable final byte[] requestContent,\n+                                       @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_PUT,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_PUT,\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendDelete(@NonNull final URL requestUrl,\n+                                          @NonNull final Map<String, String> requestHeaders,\n+                                          @Nullable final byte[] requestContent,\n+                                          @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_DELETE,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_DELETE,\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendTrace(@NonNull final URL requestUrl,\n+                                         @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_TRACE,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_TRACE\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendOptions(@NonNull final URL requestUrl,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0966fbc2d63835466991d86d432d168378d5294"}, "originalPosition": 249}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDgyOTkz", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#pullrequestreview-394082993", "createdAt": "2020-04-15T19:46:22Z", "commit": {"oid": "e0966fbc2d63835466991d86d432d168378d5294"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0NjoyMlrOGGI-_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0NjoyMlrOGGI-_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MTgzNg==", "bodyText": "javadoc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#discussion_r409091836", "createdAt": "2020-04-15T19:46:22Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "diffHunk": "@@ -158,24 +203,223 @@ public static HttpResponse sendPost(final URL requestUrl, final Map<String, Stri\n      * @return HttpResponse\n      * @throws IOException throw if service error happen during http request.\n      */\n-    public static HttpResponse sendGet(final URL requestUrl, final Map<String, String> requestHeaders)\n+    public static HttpResponse sendGet(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders)\n             throws IOException {\n-        Telemetry.emit(\n-                new HttpStartEvent()\n-                        .putMethod(REQUEST_METHOD_GET)\n-                        .putPath(requestUrl)\n-                        .putRequestIdHeader(requestHeaders == null ? null : requestHeaders.get(CLIENT_REQUEST_ID))\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_GET,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_GET\n         );\n \n-        final HttpRequest httpRequest = new HttpRequest(requestUrl, requestHeaders, REQUEST_METHOD_GET);\n         final HttpResponse response = httpRequest.send();\n \n-        final HttpEndEvent httpEndEvent = new HttpEndEvent();\n-        if (response != null) {\n-            httpEndEvent.putStatusCode(response.getStatusCode());\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendHead(@NonNull final URL requestUrl,\n+                                        @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_HEAD,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_HEAD\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendPut(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders,\n+                                       @Nullable final byte[] requestContent,\n+                                       @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_PUT,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_PUT,\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendDelete(@NonNull final URL requestUrl,\n+                                          @NonNull final Map<String, String> requestHeaders,\n+                                          @Nullable final byte[] requestContent,\n+                                          @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_DELETE,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_DELETE,\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendTrace(@NonNull final URL requestUrl,\n+                                         @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_TRACE,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_TRACE\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendOptions(@NonNull final URL requestUrl,\n+                                           @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_OPTIONS,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_OPTIONS\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendPatch(@NonNull final URL requestUrl,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0966fbc2d63835466991d86d432d168378d5294"}, "originalPosition": 271}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDgzMDQ5", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#pullrequestreview-394083049", "createdAt": "2020-04-15T19:46:27Z", "commit": {"oid": "e0966fbc2d63835466991d86d432d168378d5294"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0NjoyN1rOGGI_IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0NjoyN1rOGGI_IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MTg3Mw==", "bodyText": "javadoc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#discussion_r409091873", "createdAt": "2020-04-15T19:46:27Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "diffHunk": "@@ -158,24 +203,223 @@ public static HttpResponse sendPost(final URL requestUrl, final Map<String, Stri\n      * @return HttpResponse\n      * @throws IOException throw if service error happen during http request.\n      */\n-    public static HttpResponse sendGet(final URL requestUrl, final Map<String, String> requestHeaders)\n+    public static HttpResponse sendGet(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders)\n             throws IOException {\n-        Telemetry.emit(\n-                new HttpStartEvent()\n-                        .putMethod(REQUEST_METHOD_GET)\n-                        .putPath(requestUrl)\n-                        .putRequestIdHeader(requestHeaders == null ? null : requestHeaders.get(CLIENT_REQUEST_ID))\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_GET,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_GET\n         );\n \n-        final HttpRequest httpRequest = new HttpRequest(requestUrl, requestHeaders, REQUEST_METHOD_GET);\n         final HttpResponse response = httpRequest.send();\n \n-        final HttpEndEvent httpEndEvent = new HttpEndEvent();\n-        if (response != null) {\n-            httpEndEvent.putStatusCode(response.getStatusCode());\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendHead(@NonNull final URL requestUrl,\n+                                        @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_HEAD,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_HEAD\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendPut(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders,\n+                                       @Nullable final byte[] requestContent,\n+                                       @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_PUT,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_PUT,\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendDelete(@NonNull final URL requestUrl,\n+                                          @NonNull final Map<String, String> requestHeaders,\n+                                          @Nullable final byte[] requestContent,\n+                                          @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_DELETE,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_DELETE,\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendTrace(@NonNull final URL requestUrl,\n+                                         @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_TRACE,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_TRACE\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendOptions(@NonNull final URL requestUrl,\n+                                           @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_OPTIONS,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_OPTIONS\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendPatch(@NonNull final URL requestUrl,\n+                                         @NonNull final Map<String, String> requestHeaders,\n+                                         @Nullable final byte[] requestContent,\n+                                         @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_PATCH,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        // Because HttpURLConnection predates RFC-5789, we need to fallback on POST w/ a backcompat\n+        // workaround. See: https://stackoverflow.com/a/32503192/741827\n+        requestHeaders.put(\"X-HTTP-Method-Override\", \"PATCH\");\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_POST, // HttpURLConnection doesn't natively support PATCH\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendWithMethod(@NonNull final String httpMethod,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0966fbc2d63835466991d86d432d168378d5294"}, "originalPosition": 301}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDgzMTUw", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#pullrequestreview-394083150", "createdAt": "2020-04-15T19:46:36Z", "commit": {"oid": "e0966fbc2d63835466991d86d432d168378d5294"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0NjozNlrOGGI_gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0NjozNlrOGGI_gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MTk2OA==", "bodyText": "Refactor other methods to call this one", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#discussion_r409091968", "createdAt": "2020-04-15T19:46:36Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/net/HttpRequest.java", "diffHunk": "@@ -158,24 +203,223 @@ public static HttpResponse sendPost(final URL requestUrl, final Map<String, Stri\n      * @return HttpResponse\n      * @throws IOException throw if service error happen during http request.\n      */\n-    public static HttpResponse sendGet(final URL requestUrl, final Map<String, String> requestHeaders)\n+    public static HttpResponse sendGet(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders)\n             throws IOException {\n-        Telemetry.emit(\n-                new HttpStartEvent()\n-                        .putMethod(REQUEST_METHOD_GET)\n-                        .putPath(requestUrl)\n-                        .putRequestIdHeader(requestHeaders == null ? null : requestHeaders.get(CLIENT_REQUEST_ID))\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_GET,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_GET\n         );\n \n-        final HttpRequest httpRequest = new HttpRequest(requestUrl, requestHeaders, REQUEST_METHOD_GET);\n         final HttpResponse response = httpRequest.send();\n \n-        final HttpEndEvent httpEndEvent = new HttpEndEvent();\n-        if (response != null) {\n-            httpEndEvent.putStatusCode(response.getStatusCode());\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendHead(@NonNull final URL requestUrl,\n+                                        @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_HEAD,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_HEAD\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendPut(@NonNull final URL requestUrl,\n+                                       @NonNull final Map<String, String> requestHeaders,\n+                                       @Nullable final byte[] requestContent,\n+                                       @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_PUT,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_PUT,\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendDelete(@NonNull final URL requestUrl,\n+                                          @NonNull final Map<String, String> requestHeaders,\n+                                          @Nullable final byte[] requestContent,\n+                                          @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_DELETE,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_DELETE,\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendTrace(@NonNull final URL requestUrl,\n+                                         @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_TRACE,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_TRACE\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendOptions(@NonNull final URL requestUrl,\n+                                           @NonNull final Map<String, String> requestHeaders)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_OPTIONS,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_OPTIONS\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendPatch(@NonNull final URL requestUrl,\n+                                         @NonNull final Map<String, String> requestHeaders,\n+                                         @Nullable final byte[] requestContent,\n+                                         @Nullable final String requestContentType)\n+            throws IOException {\n+        recordHttpTelemetryEventStart(\n+                REQUEST_METHOD_PATCH,\n+                requestUrl,\n+                requestHeaders.get(CLIENT_REQUEST_ID)\n+        );\n+\n+        // Because HttpURLConnection predates RFC-5789, we need to fallback on POST w/ a backcompat\n+        // workaround. See: https://stackoverflow.com/a/32503192/741827\n+        requestHeaders.put(\"X-HTTP-Method-Override\", \"PATCH\");\n+\n+        final HttpRequest httpRequest = new HttpRequest(\n+                requestUrl,\n+                requestHeaders,\n+                REQUEST_METHOD_POST, // HttpURLConnection doesn't natively support PATCH\n+                requestContent,\n+                requestContentType\n+        );\n+\n+        final HttpResponse response = httpRequest.send();\n+\n+        recordHttpTelemetryEventEnd(response);\n+\n+        return response;\n+    }\n+\n+    public static HttpResponse sendWithMethod(@NonNull final String httpMethod,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0966fbc2d63835466991d86d432d168378d5294"}, "originalPosition": 301}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7703d44d3354e084c9cf46813ccd0b16b56cc5b", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/f7703d44d3354e084c9cf46813ccd0b16b56cc5b", "committedDate": "2020-04-16T01:33:41Z", "message": "Refactor, code sharing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc58e1bd6460e970886e4ff4f5942ea29f885d90", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/dc58e1bd6460e970886e4ff4f5942ea29f885d90", "committedDate": "2020-04-16T16:28:00Z", "message": "Merge branch 'dev' into iambmelt/888"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ef76ddf922e3b22424594a06ccd732150fe7e06", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/8ef76ddf922e3b22424594a06ccd732150fe7e06", "committedDate": "2020-04-23T21:46:32Z", "message": "Merge branch 'dev' into iambmelt/888"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bdd4b78e1e7fb084ef92f7264a10c6fc664480c", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/5bdd4b78e1e7fb084ef92f7264a10c6fc664480c", "committedDate": "2020-04-23T22:56:07Z", "message": "Tidying up javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64f61fd8f9a9cf8d2f54bebce2e664355e4aa300", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/64f61fd8f9a9cf8d2f54bebce2e664355e4aa300", "committedDate": "2020-04-24T23:54:30Z", "message": "Experimental: test fixes (#896)\n\n* Experimental: test fixes\r\n\r\n* Lots of formatting changes\r\n\r\n* Make method private\r\n\r\n* Adding new tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMzMyNTA1", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#pullrequestreview-400332505", "createdAt": "2020-04-25T00:13:59Z", "commit": {"oid": "64f61fd8f9a9cf8d2f54bebce2e664355e4aa300"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwMDoxMzo1OVrOGLtTFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwMDoxMzo1OVrOGLtTFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkyOTY4NQ==", "bodyText": "I think we can remove this comment now", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#discussion_r414929685", "createdAt": "2020-04-25T00:13:59Z", "author": {"login": "shahzaibj"}, "path": "common/src/androidTest/java/com/microsoft/identity/common/HttpRequestTest.java", "diffHunk": "@@ -0,0 +1,816 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+\n+package com.microsoft.identity.common;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import com.microsoft.identity.common.internal.net.HttpRequest;\n+import com.microsoft.identity.common.internal.net.HttpResponse;\n+import com.microsoft.identity.common.internal.net.HttpUrlConnectionFactory;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InOrder;\n+import org.mockito.Mockito;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+\n+import static com.microsoft.identity.common.MockUtil.getMockedConnectionWithFailureResponse;\n+import static com.microsoft.identity.common.internal.net.HttpUrlConnectionFactory.addMockedConnection;\n+import static com.microsoft.identity.common.internal.net.HttpUrlConnectionFactory.getMockedConnectionCountInQueue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for {@link HttpRequest}.\n+ * <p>\n+ * We need to fix setup of these tests as something is missing post moving from MSAL to common", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64f61fd8f9a9cf8d2f54bebce2e664355e4aa300"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c17b8ccab1722b99bfea6ef691c12a6b92bdacc7", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/c17b8ccab1722b99bfea6ef691c12a6b92bdacc7", "committedDate": "2020-04-25T00:15:16Z", "message": "Removing old comment / no longer applies"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMzMyNzk1", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/889#pullrequestreview-400332795", "createdAt": "2020-04-25T00:15:33Z", "commit": {"oid": "64f61fd8f9a9cf8d2f54bebce2e664355e4aa300"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1627, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}