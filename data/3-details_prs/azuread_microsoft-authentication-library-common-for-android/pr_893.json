{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2OTg4NDMz", "number": 893, "title": "Shared cache RT pickup, dual client stack support", "bodyText": "Tracking (corpnet required):\n\nhttps://identitydivision.visualstudio.com/Engineering/DevEx%20-%20Android/_queries/query/785e80fc-880c-4271-bfdf-4e15ac87f5d2/\nhttps://domoreexp.visualstudio.com/DefaultCollection/MSTeams/_workitems/edit/881449\n\nChanges in this PR:\n\nWhen looking up RTs in the local cache, if we don't find any that match our exact client id, use a FoCI RT if one is available\n\nWhat does this change enable?\n\nIf another app has stashed tokens in our local cache, we'll pick them up even if the client_id doesn't match if one of those apps is FoCI enabled\nSilent auth between two FoCI apps without broker if they dual-client stack\n\nDon't we risk picking up the wrong RT?\nWe shouldn't because of few things.\n\nNon-broker apps are sandboxed, so apps only a share a cache if they are FoCI or if they are \"dual-client\" (two client ids in one binary)\nAs a rule, we should say that FoCI apps can only dual-client stack with another FoCI app. Thou shalt not blend 1P & 3P registrations in a single binary\nSince 3P apps aren't FoCI, this new fallback/lookup logic will never yield a token in those cases\nThis logic can be hit inside the broker, but broker sandboxes app caches in a way that this shouldn't make a difference. The broker cache sandboxing works like this:\n\nAll FoCI apps together\nAll non-FoCI apps get their own cache", "createdAt": "2020-04-22T01:19:20Z", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/893", "merged": true, "mergeCommit": {"oid": "6f972601f677961f783f2b0dea64d902bcedb663"}, "closed": true, "closedAt": "2020-04-22T21:55:29Z", "author": {"login": "iambmelt"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZ9qMUgH2gAyNDA2OTg4NDMzOjUyY2NkNzk0ZjI5OWE5ZTE0NTQ0MTE0YTA5OTJlNGRlYWJlYWFjYWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaPCueAFqTM5ODU5NzgwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "52ccd794f299a9e14544114a0992e4deabeaacab", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/52ccd794f299a9e14544114a0992e4deabeaacab", "committedDate": "2020-04-22T01:04:29Z", "message": "WIP - TSL pickup, dual client stack support"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NDMyMDcz", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/893#pullrequestreview-398432073", "createdAt": "2020-04-22T17:47:13Z", "commit": {"oid": "52ccd794f299a9e14544114a0992e4deabeaacab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNzo0NzoxM1rOGKDGoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNzo0NzoxM1rOGKDGoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE4OTc5Mw==", "bodyText": "Remove this comment, may add more confusion than clarity", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/893#discussion_r413189793", "createdAt": "2020-04-22T17:47:13Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -552,6 +553,76 @@ public ICacheRecord load(@NonNull final String clientId,\n                 null // not applicable\n         );\n \n+        {\n+            // If we didn't find an RT in the cache, this could be a \"TSL-seed\" or \"dual-client stack\"\n+            // scenario\n+            //\n+            // Defining these terms:\n+            // TSL-seed: another 1P TSL integrated app has put a token into our cache so we can\n+            //     pick it up\n+            //\n+            // Dual-Client stack: two FoCI-enabled app registrations are sharing a single binary\n+            //     and accordingly, can share RTs.\n+            //     Examples for this might be TFL/TFW - which uses multiple client ids to enable\n+            //     different scenarios depending on enterprise vs. consumer usage\n+\n+            // Unlike the broker, where we check if an app is FoCI prior to making a network call\n+            // with an arbitrary FoCI RT we find in the cache, if we're in standalone mode and find\n+            // a FoCI RT in the cache, the current app must also be FoCI (!!!)\n+            //\n+            // Making the assumption that the current client id can use any FoCI RT we find in the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52ccd794f299a9e14544114a0992e4deabeaacab"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NDQ2NTg2", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/893#pullrequestreview-398446586", "createdAt": "2020-04-22T18:05:42Z", "commit": {"oid": "52ccd794f299a9e14544114a0992e4deabeaacab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODowNTo0MlrOGKD6OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODowNTo0MlrOGKD6OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIwMzAwMQ==", "bodyText": "Are there any (or could there be any) first party apps that are not part of FoCI for some reason?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/893#discussion_r413203001", "createdAt": "2020-04-22T18:05:42Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -552,6 +553,76 @@ public ICacheRecord load(@NonNull final String clientId,\n                 null // not applicable\n         );\n \n+        {\n+            // If we didn't find an RT in the cache, this could be a \"TSL-seed\" or \"dual-client stack\"\n+            // scenario\n+            //\n+            // Defining these terms:\n+            // TSL-seed: another 1P TSL integrated app has put a token into our cache so we can\n+            //     pick it up\n+            //\n+            // Dual-Client stack: two FoCI-enabled app registrations are sharing a single binary\n+            //     and accordingly, can share RTs.\n+            //     Examples for this might be TFL/TFW - which uses multiple client ids to enable\n+            //     different scenarios depending on enterprise vs. consumer usage\n+\n+            // Unlike the broker, where we check if an app is FoCI prior to making a network call\n+            // with an arbitrary FoCI RT we find in the cache, if we're in standalone mode and find\n+            // a FoCI RT in the cache, the current app must also be FoCI (!!!)\n+            //\n+            // Making the assumption that the current client id can use any FoCI RT we find in the\n+            // cache is strictly contingent that app developers NOT mix 1P & 3P registrations into\n+            // the same binary. If you do this, Bad Things will happen and you'll get confusing\n+            // errors that the RT used doesn't match the client app registration. Also, this\n+            // assumption means we don't need to implement \"FoCI probing\" and/or track FoCI app meta\n+\n+            if (refreshTokens.isEmpty()) {\n+                // Look for an arbitrary RT matching the current user.\n+                // If we find one, check that it is FoCI, if it is, assume it works.\n+                final List<Credential> fallbackRts = mAccountCredentialCache.getCredentialsFilteredBy(\n+                        account.getHomeAccountId(),\n+                        account.getEnvironment(),\n+                        CredentialType.RefreshToken,\n+                        null, // wildcard (*)\n+                        isMultiResourceCapable\n+                                ? null // wildcard (*)\n+                                : account.getRealm(),\n+                        isMultiResourceCapable\n+                                ? null // wildcard (*)\n+                                : target,\n+                        null // not applicable\n+                );\n+\n+                if (!fallbackRts.isEmpty()) {\n+                    Logger.verbose(\n+                            TAG + methodName,\n+                            \"Inspecting fallback RTs for a FoCI match.\"\n+                    );\n+\n+                    // Any arbitrary RT should be OK -- if multiple clients are stacked, they're either", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52ccd794f299a9e14544114a0992e4deabeaacab"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8209896f99f6548b3bdbef4f8dee156c59865fc7", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/8209896f99f6548b3bdbef4f8dee156c59865fc7", "committedDate": "2020-04-22T18:10:10Z", "message": "Removing potentially confusing comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NDUxMjM4", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/893#pullrequestreview-398451238", "createdAt": "2020-04-22T18:10:58Z", "commit": {"oid": "52ccd794f299a9e14544114a0992e4deabeaacab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODoxMDo1OFrOGKEKqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODoxMDo1OFrOGKEKqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIwNzIxMA==", "bodyText": "Left similar comment below, basically I want to know if some app can have multiple client id stacked, let's say three, and all of them are 1P registrations. Could there be case that even though all three are 1P, but for some reason one of them is not part of FoCI, whereas the other two are. Is this case possible? And should we implement probing for it?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/893#discussion_r413207210", "createdAt": "2020-04-22T18:10:58Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -552,6 +553,76 @@ public ICacheRecord load(@NonNull final String clientId,\n                 null // not applicable\n         );\n \n+        {\n+            // If we didn't find an RT in the cache, this could be a \"TSL-seed\" or \"dual-client stack\"\n+            // scenario\n+            //\n+            // Defining these terms:\n+            // TSL-seed: another 1P TSL integrated app has put a token into our cache so we can\n+            //     pick it up\n+            //\n+            // Dual-Client stack: two FoCI-enabled app registrations are sharing a single binary\n+            //     and accordingly, can share RTs.\n+            //     Examples for this might be TFL/TFW - which uses multiple client ids to enable\n+            //     different scenarios depending on enterprise vs. consumer usage\n+\n+            // Unlike the broker, where we check if an app is FoCI prior to making a network call\n+            // with an arbitrary FoCI RT we find in the cache, if we're in standalone mode and find\n+            // a FoCI RT in the cache, the current app must also be FoCI (!!!)\n+            //\n+            // Making the assumption that the current client id can use any FoCI RT we find in the\n+            // cache is strictly contingent that app developers NOT mix 1P & 3P registrations into\n+            // the same binary. If you do this, Bad Things will happen and you'll get confusing\n+            // errors that the RT used doesn't match the client app registration. Also, this\n+            // assumption means we don't need to implement \"FoCI probing\" and/or track FoCI app meta", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52ccd794f299a9e14544114a0992e4deabeaacab"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NDY4MjY2", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/893#pullrequestreview-398468266", "createdAt": "2020-04-22T18:33:28Z", "commit": {"oid": "8209896f99f6548b3bdbef4f8dee156c59865fc7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODozMzoyOVrOGKFGzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODozMzoyOVrOGKFGzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIyMjYwNA==", "bodyText": "nit: Since finding refresh tokens is now complicated, should it be in its own (potentially set of) private method(s)?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/893#discussion_r413222604", "createdAt": "2020-04-22T18:33:29Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -552,6 +553,70 @@ public ICacheRecord load(@NonNull final String clientId,\n                 null // not applicable\n         );\n \n+        {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8209896f99f6548b3bdbef4f8dee156c59865fc7"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a22f456f20136fe51c96c5c2cf5d786c39b841ba", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/a22f456f20136fe51c96c5c2cf5d786c39b841ba", "committedDate": "2020-04-22T19:08:25Z", "message": "Breaking method out, readability, CR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ab2e13c109012a373bc56cee8ad0f81382d2644", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/3ab2e13c109012a373bc56cee8ad0f81382d2644", "committedDate": "2020-04-22T19:09:38Z", "message": "Fixing javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NDk1ODYx", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/893#pullrequestreview-398495861", "createdAt": "2020-04-22T19:10:22Z", "commit": {"oid": "3ab2e13c109012a373bc56cee8ad0f81382d2644"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NTAwMjI2", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/893#pullrequestreview-398500226", "createdAt": "2020-04-22T19:16:51Z", "commit": {"oid": "3ab2e13c109012a373bc56cee8ad0f81382d2644"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63183e37f5a41ef6f676c57f23377a26d3f584bb", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/63183e37f5a41ef6f676c57f23377a26d3f584bb", "committedDate": "2020-04-22T19:18:38Z", "message": "Cleaning up comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ecfac346edd4b2a6077f8b127faa28915cd2df0", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/2ecfac346edd4b2a6077f8b127faa28915cd2df0", "committedDate": "2020-04-22T19:20:33Z", "message": "Fix PMD. Remove unused variable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "956694d3bfc198b7fe8c47bda7c4c86f4ef8ad65", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/956694d3bfc198b7fe8c47bda7c4c86f4ef8ad65", "committedDate": "2020-04-22T20:12:10Z", "message": "Adding unit test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NTYzOTky", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/893#pullrequestreview-398563992", "createdAt": "2020-04-22T20:33:12Z", "commit": {"oid": "2ecfac346edd4b2a6077f8b127faa28915cd2df0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMDozMzoxMlrOGKKZ4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMDozMzoxMlrOGKKZ4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMwOTQwOA==", "bodyText": "Is this a safe copy that we're adding to, with guaranteed mutability, for all implementations of the cache interface?  One would think, but the interface documentation is vague on what we're getting back here other than that it implements List.  Should we take a copy before we mutate it or relax the final modifier on the refreshTokens reference so we can just reassign it since we only want the first element anyway?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/893#discussion_r413309408", "createdAt": "2020-04-22T20:33:12Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -552,6 +552,35 @@ public ICacheRecord load(@NonNull final String clientId,\n                 null // not applicable\n         );\n \n+        if (refreshTokens.isEmpty()) {\n+            // If we didn't find an RT in the cache, this could be a \"TSL-seed\" or \"dual-client stack\"\n+            // scenario\n+            //\n+            // Defining these terms:\n+            // TSL-seed: another 1P TSL integrated app has put a token into our cache so we can\n+            //     pick it up\n+            //\n+            // Dual-Client stack: two FoCI-enabled app registrations are sharing a single binary\n+            //     and accordingly, can share RTs.\n+            //     Examples for this might be TFL/TFW - which uses multiple client ids to enable\n+            //     different scenarios depending on enterprise vs. consumer usage\n+\n+            // Unlike the broker, where we check if an app is FoCI prior to making a network call\n+            // with an arbitrary FoCI RT we find in the cache, if we're in standalone mode and find\n+            // a FoCI RT in the cache, the current app must also be FoCI (!!!)\n+            //\n+            // Making the assumption that the current client id can use any FoCI RT we find in the\n+            // cache is strictly contingent that app developers NOT mix FoCI/non-FoCI registrations\n+            // into same binary. If you do this, you'll get confusing errors that the RT used doesn't\n+            // match the client app registration. This assumption means we don't need to implement\n+            // \"FoCI probing\" and/or track FoCI app meta\n+            final Credential fallbackFrt = getFamilyRefreshTokenForAccount(account);\n+\n+            if (null != fallbackFrt) {\n+                refreshTokens.add(fallbackFrt);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ecfac346edd4b2a6077f8b127faa28915cd2df0"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7df4abf2dc56e75d737ab1c7f6c94c99fe8e4c81", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/7df4abf2dc56e75d737ab1c7f6c94c99fe8e4c81", "committedDate": "2020-04-22T21:15:00Z", "message": "Clarifying javadoc on interface result mutability"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1b4f1b113bf53c57c349ab7bb114dcd7e83a965", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/a1b4f1b113bf53c57c349ab7bb114dcd7e83a965", "committedDate": "2020-04-22T21:15:28Z", "message": "Make no assumptions about mutability, set a new List and add the result"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NTk3ODA4", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/893#pullrequestreview-398597808", "createdAt": "2020-04-22T21:19:40Z", "commit": {"oid": "a1b4f1b113bf53c57c349ab7bb114dcd7e83a965"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1632, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}