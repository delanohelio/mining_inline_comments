{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwMzMwODEw", "number": 1026, "title": "Add support for exporting public key data, signing arbitrary string data", "bodyText": "Added in this PR:\n\nSupport for public key export\n\nX.509 SubjectPublicKeyInfo\nJWK (RFC-7517)\n\n\nSupport for signing/verifying arbitrary data with various algs", "createdAt": "2020-09-05T00:53:20Z", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026", "merged": true, "mergeCommit": {"oid": "3e9ccec6b5f57ed8434826d895dca2d03c87cfc8"}, "closed": true, "closedAt": "2020-09-16T00:00:30Z", "author": {"login": "iambmelt"}, "timelineItems": {"totalCount": 55, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFu-2GAH2gAyNDgwMzMwODEwOjljZWZmNDZlNzFjNGNlM2ZjOWU4MjQwNzk4YzM3ZTA3ZWVkYWRkMWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJQdBWAH2gAyNDgwMzMwODEwOmQwOTA4OWJmZjgyOTU5YmVmZDkwM2ZlNWMxM2Y1ZWQ4MTQwNWU2YWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9ceff46e71c4ce3fc9e8240798c37e07eedadd1c", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/9ceff46e71c4ce3fc9e8240798c37e07eedadd1c", "committedDate": "2020-09-05T00:51:08Z", "message": "Add support for exporting X.509 public key as ASN.1"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMDE3NjE4", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#pullrequestreview-483017618", "createdAt": "2020-09-05T00:55:12Z", "commit": {"oid": "9ceff46e71c4ce3fc9e8240798c37e07eedadd1c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwMDo1NToxMlrOHNeZbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwMDo1NToxMlrOHNeZbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg5MTU2Ng==", "bodyText": "Update javadoc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r483891566", "createdAt": "2020-09-05T00:55:12Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "diffHunk": "@@ -90,6 +94,21 @@\n      */\n     void getRequestConfirmation(TaskCompletedCallbackWithError<String, ClientException> callback);\n \n+    /**\n+     * Signs an arbitrary piece of String data.\n+     *\n+     * @param input The input to sign.\n+     * @return The input data, signed by our private key.\n+     */\n+    String sign(String input) throws ClientException;\n+\n+    /**\n+     * Gets the public key associated with this DevicePoPManager formatted as an X.509 ASN1 Dump.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ceff46e71c4ce3fc9e8240798c37e07eedadd1c"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "423c2b3431555c40229d6e9c29ab4b6f1a7eb3ce", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/423c2b3431555c40229d6e9c29ab4b6f1a7eb3ce", "committedDate": "2020-09-05T00:56:39Z", "message": "Update javadoc for code changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e6f2a32826a8536fc36e7f14b58aedc69c49961", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/0e6f2a32826a8536fc36e7f14b58aedc69c49961", "committedDate": "2020-09-05T01:20:57Z", "message": "Renaming format enums"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMDE5NzI1", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#pullrequestreview-483019725", "createdAt": "2020-09-05T01:21:52Z", "commit": {"oid": "0e6f2a32826a8536fc36e7f14b58aedc69c49961"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwMToyMTo1M1rOHNej_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwMToyMTo1M1rOHNej_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg5NDI2OA==", "bodyText": "Reference:\n\nhttps://connect2id.com/products/nimbus-jose-jwt/examples/pem-encoded-objects", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r483894268", "createdAt": "2020-09-05T01:21:53Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "diffHunk": "@@ -34,6 +34,11 @@\n  */\n public interface IDevicePopManager {\n \n+    enum PublicKeyFormat {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e6f2a32826a8536fc36e7f14b58aedc69c49961"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMDE5OTAw", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#pullrequestreview-483019900", "createdAt": "2020-09-05T01:24:07Z", "commit": {"oid": "0e6f2a32826a8536fc36e7f14b58aedc69c49961"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwMToyNDowN1rOHNekpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwMToyNDowN1rOHNekpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg5NDQzOA==", "bodyText": "TODO determine signing strategy, or if multiple should be employed.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r483894438", "createdAt": "2020-09-05T01:24:07Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -441,6 +444,66 @@ public void run() {\n         });\n     }\n \n+    @Override\n+    public String sign(@NonNull final String input) throws ClientException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e6f2a32826a8536fc36e7f14b58aedc69c49961"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMDIwMDUx", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#pullrequestreview-483020051", "createdAt": "2020-09-05T01:25:59Z", "commit": {"oid": "0e6f2a32826a8536fc36e7f14b58aedc69c49961"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwMToyNTo1OVrOHNelmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwMToyNTo1OVrOHNelmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg5NDY4Mg==", "bodyText": "TODO: Do we need to accept something like a SigningParams; for instance, to specify an algorithm?\nAlso, the OneAuth API assumes signing cannot fail... we need some way to return error if this operation fails", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r483894682", "createdAt": "2020-09-05T01:25:59Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "diffHunk": "@@ -90,6 +95,23 @@\n      */\n     void getRequestConfirmation(TaskCompletedCallbackWithError<String, ClientException> callback);\n \n+    /**\n+     * Signs an arbitrary piece of String data.\n+     *\n+     * @param input The input to sign.\n+     * @return The input data, signed by our private key.\n+     */\n+    String sign(String input) throws ClientException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e6f2a32826a8536fc36e7f14b58aedc69c49961"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "600e07cbd03d9ee6982250a005f464aded22a454", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/600e07cbd03d9ee6982250a005f464aded22a454", "committedDate": "2020-09-08T22:20:20Z", "message": "Implement support for getAsymmetricKeyCreationDate()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae7ec8f1a0cccc638512c4946caeb7e6af11d960", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/ae7ec8f1a0cccc638512c4946caeb7e6af11d960", "committedDate": "2020-09-08T22:22:18Z", "message": "Remove unused code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0c052f84d2b8261d2b6d216039a5252b4e93108", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/e0c052f84d2b8261d2b6d216039a5252b4e93108", "committedDate": "2020-09-08T22:24:50Z", "message": "Merge branch 'dev' into iambmelt/oneauth-pop-extensions-1"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NTMzMjk4", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#pullrequestreview-484533298", "createdAt": "2020-09-08T22:28:30Z", "commit": {"oid": "0e6f2a32826a8536fc36e7f14b58aedc69c49961"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMjoyODozMFrOHOwEzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMjoyODozMFrOHOwEzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIyOTc3NA==", "bodyText": "If this is an enum, you could use a switch. Potential benefits, some static analysis tools will complain at you if you're not handling all of the potential enumerated values correctly.\nAlso, if you've got an unknown format, it would be really nice to have logged what the value actually was.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r485229774", "createdAt": "2020-09-08T22:28:30Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -441,6 +444,66 @@ public void run() {\n         });\n     }\n \n+    @Override\n+    public String sign(@NonNull final String input) throws ClientException {\n+        // TODO Sign how???\n+        // RS256? SHA256withECDSA?\n+        return null;\n+    }\n+\n+    @Override\n+    public String getPublicKey(@NonNull final PublicKeyFormat format) throws ClientException {\n+        if (X_509_SubjectPublicKeyInfo_ASN_1 == format) {\n+            return getX509SubjectPublicKeyInfo();\n+        } else if (PKCS1_RSAPublicKey == format) {\n+            return getPkcs1RsaPublicKey();\n+        } else {\n+            throw new ClientException(UNKNOWN_EXPORT_FORMAT);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e6f2a32826a8536fc36e7f14b58aedc69c49961"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d10b1561f3ea65a6f3a3e6dc8f5da638c9ba86f", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/8d10b1561f3ea65a6f3a3e6dc8f5da638c9ba86f", "committedDate": "2020-09-08T22:39:24Z", "message": "Use switch not if/else"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e78cf6b7b6a14598b1e39a107815a6aa62d7fc92", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/e78cf6b7b6a14598b1e39a107815a6aa62d7fc92", "committedDate": "2020-09-08T22:42:26Z", "message": "Error msg + logging improvement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "818b11f8b87ffecc6e184eee8415acd877ecfc5f", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/818b11f8b87ffecc6e184eee8415acd877ecfc5f", "committedDate": "2020-09-08T23:21:22Z", "message": "Add unit tests for new methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b21d1045de1feebb8686df19dc5a7557b1fd16c", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/7b21d1045de1feebb8686df19dc5a7557b1fd16c", "committedDate": "2020-09-09T00:44:08Z", "message": "Add support for signing (SHA256+RSA), adds relevant unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26b358b9b7821dd25bc1937d3ab34b7d189d89be", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/26b358b9b7821dd25bc1937d3ab34b7d189d89be", "committedDate": "2020-09-09T00:58:18Z", "message": "Minor code cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b3fd3fd50079a703f99ceec7830b0aa602816e2", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/2b3fd3fd50079a703f99ceec7830b0aa602816e2", "committedDate": "2020-09-10T02:03:42Z", "message": "Use default encoding/decoding"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f01d4d0cb1f8497b08fd75d5d0aff346a3f6886a", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/f01d4d0cb1f8497b08fd75d5d0aff346a3f6886a", "committedDate": "2020-09-10T20:55:49Z", "message": "Add jwk export format support + tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8491a08b7f47015985e7aa429a21136b9122989a", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/8491a08b7f47015985e7aa429a21136b9122989a", "committedDate": "2020-09-10T20:59:13Z", "message": "Merge branch 'dev' into iambmelt/oneauth-pop-extensions-1"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzA2NTc5", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#pullrequestreview-486306579", "createdAt": "2020-09-10T21:00:11Z", "commit": {"oid": "8491a08b7f47015985e7aa429a21136b9122989a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTowMDoxMVrOHQFkKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTowMDoxMVrOHQFkKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMDQ0Mg==", "bodyText": "TODO: document the signing algorithm", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486630442", "createdAt": "2020-09-10T21:00:11Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "diffHunk": "@@ -90,6 +104,32 @@\n      */\n     void getRequestConfirmation(TaskCompletedCallbackWithError<String, ClientException> callback);\n \n+    /**\n+     * Signs an arbitrary piece of String data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8491a08b7f47015985e7aa429a21136b9122989a"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzA2ODA0", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#pullrequestreview-486306804", "createdAt": "2020-09-10T21:00:30Z", "commit": {"oid": "8491a08b7f47015985e7aa429a21136b9122989a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTowMDozMFrOHQFkyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTowMDozMFrOHQFkyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMDYwMA==", "bodyText": "TODO: document the signing algorithm verified", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486630600", "createdAt": "2020-09-10T21:00:30Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "diffHunk": "@@ -90,6 +104,32 @@\n      */\n     void getRequestConfirmation(TaskCompletedCallbackWithError<String, ClientException> callback);\n \n+    /**\n+     * Signs an arbitrary piece of String data.\n+     *\n+     * @param input The input to sign.\n+     * @return The input data, signed by our private key.\n+     */\n+    String sign(String input) throws ClientException;\n+\n+    /**\n+     * Verify a signature previously made by our Private Key.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8491a08b7f47015985e7aa429a21136b9122989a"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzA3MjI3", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#pullrequestreview-486307227", "createdAt": "2020-09-10T21:01:13Z", "commit": {"oid": "8491a08b7f47015985e7aa429a21136b9122989a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTowMToxM1rOHQFmFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTowMToxM1rOHQFmFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMDkzNQ==", "bodyText": "@NonNull return type", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486630935", "createdAt": "2020-09-10T21:01:13Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -441,6 +493,209 @@ public void run() {\n         });\n     }\n \n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8491a08b7f47015985e7aa429a21136b9122989a"}, "originalPosition": 108}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzA3NDUy", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#pullrequestreview-486307452", "createdAt": "2020-09-10T21:01:34Z", "commit": {"oid": "8491a08b7f47015985e7aa429a21136b9122989a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTowMTozNFrOHQFm0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTowMTozNFrOHQFm0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMTEyMA==", "bodyText": "@NonNull return value", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486631120", "createdAt": "2020-09-10T21:01:34Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -441,6 +493,209 @@ public void run() {\n         });\n     }\n \n+    @Override\n+    public String sign(@NonNull final String input) throws ClientException {\n+        final Exception exception;\n+        final String errCode;\n+\n+        try {\n+            final byte[] inputBytesToSign = input.getBytes(ENCODING_UTF8);\n+            final KeyStore.Entry keyEntry = mKeyStore.getEntry(KEYSTORE_ENTRY_ALIAS, null);\n+\n+            if (!(keyEntry instanceof KeyStore.PrivateKeyEntry)) {\n+                Logger.warn(\n+                        TAG + \":sign\",\n+                        PRIVATE_KEY_NOT_FOUND\n+                );\n+                throw new ClientException(INVALID_KEY_MISSING);\n+            }\n+\n+            final Signature signature = Signature.getInstance(SHA_256_WITH_RSA);\n+            signature.initSign(((KeyStore.PrivateKeyEntry) keyEntry).getPrivateKey());\n+            signature.update(inputBytesToSign);\n+            final byte[] signedBytes = signature.sign();\n+            return Base64.encodeToString(signedBytes, Base64.DEFAULT);\n+        } catch (final KeyStoreException e) {\n+            exception = e;\n+            errCode = KEYSTORE_NOT_INITIALIZED;\n+        } catch (final NoSuchAlgorithmException e) {\n+            exception = e;\n+            errCode = NO_SUCH_ALGORITHM;\n+        } catch (final UnrecoverableEntryException e) {\n+            exception = e;\n+            errCode = INVALID_PROTECTION_PARAMS;\n+        } catch (final InvalidKeyException e) {\n+            exception = e;\n+            errCode = INVALID_KEY;\n+        } catch (final SignatureException e) {\n+            exception = e;\n+            errCode = SIGNING_FAILURE;\n+        } catch (final UnsupportedEncodingException e) {\n+            exception = e;\n+            errCode = UNSUPPORTED_ENCODING;\n+        }\n+\n+        final ClientException clientException = new ClientException(\n+                errCode,\n+                exception.getMessage(),\n+                exception\n+        );\n+\n+        Logger.error(\n+                TAG,\n+                clientException.getMessage(),\n+                clientException\n+        );\n+\n+        throw clientException;\n+    }\n+\n+    @Override\n+    public boolean verify(@NonNull final String plainText, @NonNull final String signatureStr) {\n+        final String errCode;\n+        final Exception exception;\n+\n+        try {\n+            final byte[] inputBytesToVerify = plainText.getBytes(ENCODING_UTF8);\n+            final KeyStore.Entry keyEntry = mKeyStore.getEntry(KEYSTORE_ENTRY_ALIAS, null);\n+\n+            if (!(keyEntry instanceof KeyStore.PrivateKeyEntry)) {\n+                Logger.warn(\n+                        TAG + \":verify\",\n+                        PRIVATE_KEY_NOT_FOUND\n+                );\n+                return false;\n+            }\n+\n+            final Signature signature = Signature.getInstance(SHA_256_WITH_RSA);\n+            signature.initVerify(((KeyStore.PrivateKeyEntry) keyEntry).getCertificate());\n+            signature.update(inputBytesToVerify);\n+            final byte[] signatureBytes = Base64.decode(signatureStr, Base64.DEFAULT);\n+\n+            return signature.verify(signatureBytes);\n+        } catch (final UnsupportedEncodingException e) {\n+            errCode = UNSUPPORTED_ENCODING;\n+            exception = e;\n+        } catch (final NoSuchAlgorithmException e) {\n+            errCode = NO_SUCH_ALGORITHM;\n+            exception = e;\n+        } catch (final KeyStoreException e) {\n+            errCode = KEYSTORE_NOT_INITIALIZED;\n+            exception = e;\n+        } catch (final UnrecoverableEntryException e) {\n+            errCode = INVALID_PROTECTION_PARAMS;\n+            exception = e;\n+        } catch (final InvalidKeyException e) {\n+            errCode = INVALID_KEY;\n+            exception = e;\n+        } catch (final SignatureException e) {\n+            errCode = SIGNING_FAILURE;\n+            exception = e;\n+        }\n+\n+        Logger.error(\n+                TAG + \":verify\",\n+                errCode,\n+                exception\n+        );\n+\n+        return false;\n+    }\n+\n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8491a08b7f47015985e7aa429a21136b9122989a"}, "originalPosition": 217}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzA3NjEx", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#pullrequestreview-486307611", "createdAt": "2020-09-10T21:01:48Z", "commit": {"oid": "8491a08b7f47015985e7aa429a21136b9122989a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTowMTo0OVrOHQFnSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTowMTo0OVrOHQFnSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMTI0MQ==", "bodyText": "@NonNull return type", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486631241", "createdAt": "2020-09-10T21:01:49Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -441,6 +493,209 @@ public void run() {\n         });\n     }\n \n+    @Override\n+    public String sign(@NonNull final String input) throws ClientException {\n+        final Exception exception;\n+        final String errCode;\n+\n+        try {\n+            final byte[] inputBytesToSign = input.getBytes(ENCODING_UTF8);\n+            final KeyStore.Entry keyEntry = mKeyStore.getEntry(KEYSTORE_ENTRY_ALIAS, null);\n+\n+            if (!(keyEntry instanceof KeyStore.PrivateKeyEntry)) {\n+                Logger.warn(\n+                        TAG + \":sign\",\n+                        PRIVATE_KEY_NOT_FOUND\n+                );\n+                throw new ClientException(INVALID_KEY_MISSING);\n+            }\n+\n+            final Signature signature = Signature.getInstance(SHA_256_WITH_RSA);\n+            signature.initSign(((KeyStore.PrivateKeyEntry) keyEntry).getPrivateKey());\n+            signature.update(inputBytesToSign);\n+            final byte[] signedBytes = signature.sign();\n+            return Base64.encodeToString(signedBytes, Base64.DEFAULT);\n+        } catch (final KeyStoreException e) {\n+            exception = e;\n+            errCode = KEYSTORE_NOT_INITIALIZED;\n+        } catch (final NoSuchAlgorithmException e) {\n+            exception = e;\n+            errCode = NO_SUCH_ALGORITHM;\n+        } catch (final UnrecoverableEntryException e) {\n+            exception = e;\n+            errCode = INVALID_PROTECTION_PARAMS;\n+        } catch (final InvalidKeyException e) {\n+            exception = e;\n+            errCode = INVALID_KEY;\n+        } catch (final SignatureException e) {\n+            exception = e;\n+            errCode = SIGNING_FAILURE;\n+        } catch (final UnsupportedEncodingException e) {\n+            exception = e;\n+            errCode = UNSUPPORTED_ENCODING;\n+        }\n+\n+        final ClientException clientException = new ClientException(\n+                errCode,\n+                exception.getMessage(),\n+                exception\n+        );\n+\n+        Logger.error(\n+                TAG,\n+                clientException.getMessage(),\n+                clientException\n+        );\n+\n+        throw clientException;\n+    }\n+\n+    @Override\n+    public boolean verify(@NonNull final String plainText, @NonNull final String signatureStr) {\n+        final String errCode;\n+        final Exception exception;\n+\n+        try {\n+            final byte[] inputBytesToVerify = plainText.getBytes(ENCODING_UTF8);\n+            final KeyStore.Entry keyEntry = mKeyStore.getEntry(KEYSTORE_ENTRY_ALIAS, null);\n+\n+            if (!(keyEntry instanceof KeyStore.PrivateKeyEntry)) {\n+                Logger.warn(\n+                        TAG + \":verify\",\n+                        PRIVATE_KEY_NOT_FOUND\n+                );\n+                return false;\n+            }\n+\n+            final Signature signature = Signature.getInstance(SHA_256_WITH_RSA);\n+            signature.initVerify(((KeyStore.PrivateKeyEntry) keyEntry).getCertificate());\n+            signature.update(inputBytesToVerify);\n+            final byte[] signatureBytes = Base64.decode(signatureStr, Base64.DEFAULT);\n+\n+            return signature.verify(signatureBytes);\n+        } catch (final UnsupportedEncodingException e) {\n+            errCode = UNSUPPORTED_ENCODING;\n+            exception = e;\n+        } catch (final NoSuchAlgorithmException e) {\n+            errCode = NO_SUCH_ALGORITHM;\n+            exception = e;\n+        } catch (final KeyStoreException e) {\n+            errCode = KEYSTORE_NOT_INITIALIZED;\n+            exception = e;\n+        } catch (final UnrecoverableEntryException e) {\n+            errCode = INVALID_PROTECTION_PARAMS;\n+            exception = e;\n+        } catch (final InvalidKeyException e) {\n+            errCode = INVALID_KEY;\n+            exception = e;\n+        } catch (final SignatureException e) {\n+            errCode = SIGNING_FAILURE;\n+            exception = e;\n+        }\n+\n+        Logger.error(\n+                TAG + \":verify\",\n+                errCode,\n+                exception\n+        );\n+\n+        return false;\n+    }\n+\n+    @Override\n+    public String getPublicKey(@NonNull final PublicKeyFormat format) throws ClientException {\n+        switch (format) {\n+            case X_509_SubjectPublicKeyInfo_ASN_1:\n+                return getX509SubjectPublicKeyInfo();\n+            case JWK:\n+                return getJwkPublicKey();\n+            default:\n+                final String errMsg = \"Unrecognized or unsupported key format: \" + format;\n+                final ClientException clientException = new ClientException(\n+                        UNKNOWN_EXPORT_FORMAT,\n+                        errMsg\n+                );\n+\n+                Logger.error(\n+                        TAG + \":getPublicKey\",\n+                        errMsg,\n+                        clientException\n+                );\n+\n+                throw clientException;\n+        }\n+    }\n+\n+    private String getJwkPublicKey() throws ClientException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8491a08b7f47015985e7aa429a21136b9122989a"}, "originalPosition": 241}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzA3NzQ2", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#pullrequestreview-486307746", "createdAt": "2020-09-10T21:02:00Z", "commit": {"oid": "8491a08b7f47015985e7aa429a21136b9122989a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTowMjowMFrOHQFnuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTowMjowMFrOHQFnuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMTM1Mw==", "bodyText": "Javadoc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486631353", "createdAt": "2020-09-10T21:02:00Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "diffHunk": "@@ -28,12 +28,18 @@\n import com.microsoft.identity.common.internal.controllers.TaskCompletedCallbackWithError;\n \n import java.net.URL;\n+import java.util.Date;\n \n /**\n  * Internal convenience class interface for PoP related functions.\n  */\n public interface IDevicePopManager {\n \n+    enum PublicKeyFormat {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8491a08b7f47015985e7aa429a21136b9122989a"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzA4MzAz", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#pullrequestreview-486308303", "createdAt": "2020-09-10T21:02:55Z", "commit": {"oid": "8491a08b7f47015985e7aa429a21136b9122989a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTowMjo1NVrOHQFpbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTowMjo1NVrOHQFpbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMTc4OA==", "bodyText": "Why is this constant public when the other is not?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486631788", "createdAt": "2020-09-10T21:02:55Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -108,6 +117,16 @@\n      */\n     private static final int RSA_KEY_SIZE = 2048;\n \n+    /**\n+     * Our designated signing algorithm; used for JWTs and generalized signing actions.\n+     */\n+    private static final String SHA_256_WITH_RSA = \"SHA256withRSA\";\n+\n+    /**\n+     * Log message when private key material cannot be found.\n+     */\n+    public static final String PRIVATE_KEY_NOT_FOUND = \"Not an instance of a PrivateKeyEntry\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8491a08b7f47015985e7aa429a21136b9122989a"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzA4OTU4", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#pullrequestreview-486308958", "createdAt": "2020-09-10T21:03:59Z", "commit": {"oid": "8491a08b7f47015985e7aa429a21136b9122989a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTowMzo1OVrOHQFrkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTowMzo1OVrOHQFrkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMjMzOA==", "bodyText": "ATM Machine?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * JWK key for inner object.\n          \n          \n            \n                     * JWK for inner object.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486632338", "createdAt": "2020-09-10T21:03:59Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -184,6 +203,11 @@\n          * A random value used for replay protection.\n          */\n         private static final String NONCE = \"nonce\";\n+\n+        /**\n+         * JWK key for inner object.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8491a08b7f47015985e7aa429a21136b9122989a"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b39b87a82690fac2528ad8990973016a1c453516", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/b39b87a82690fac2528ad8990973016a1c453516", "committedDate": "2020-09-10T21:04:56Z", "message": "Log msg private vis"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e099e46a4933667293680a3e12d8bbb08788789e", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/e099e46a4933667293680a3e12d8bbb08788789e", "committedDate": "2020-09-10T21:08:05Z", "message": "Update common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\n\nCo-authored-by: AdamBJohnsonx <63813613+AdamBJohnsonx@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzEyODMx", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#pullrequestreview-486312831", "createdAt": "2020-09-10T21:10:20Z", "commit": {"oid": "e099e46a4933667293680a3e12d8bbb08788789e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMToxMDoyMFrOHQF3ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMToxMDoyMFrOHQF3ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzNTM4Nw==", "bodyText": "Remove extra newline", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486635387", "createdAt": "2020-09-10T21:10:20Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -441,6 +493,209 @@ public void run() {\n         });\n     }\n \n+    @Override\n+    public String sign(@NonNull final String input) throws ClientException {\n+        final Exception exception;\n+        final String errCode;\n+\n+        try {\n+            final byte[] inputBytesToSign = input.getBytes(ENCODING_UTF8);\n+            final KeyStore.Entry keyEntry = mKeyStore.getEntry(KEYSTORE_ENTRY_ALIAS, null);\n+\n+            if (!(keyEntry instanceof KeyStore.PrivateKeyEntry)) {\n+                Logger.warn(\n+                        TAG + \":sign\",\n+                        PRIVATE_KEY_NOT_FOUND\n+                );\n+                throw new ClientException(INVALID_KEY_MISSING);\n+            }\n+\n+            final Signature signature = Signature.getInstance(SHA_256_WITH_RSA);\n+            signature.initSign(((KeyStore.PrivateKeyEntry) keyEntry).getPrivateKey());\n+            signature.update(inputBytesToSign);\n+            final byte[] signedBytes = signature.sign();\n+            return Base64.encodeToString(signedBytes, Base64.DEFAULT);\n+        } catch (final KeyStoreException e) {\n+            exception = e;\n+            errCode = KEYSTORE_NOT_INITIALIZED;\n+        } catch (final NoSuchAlgorithmException e) {\n+            exception = e;\n+            errCode = NO_SUCH_ALGORITHM;\n+        } catch (final UnrecoverableEntryException e) {\n+            exception = e;\n+            errCode = INVALID_PROTECTION_PARAMS;\n+        } catch (final InvalidKeyException e) {\n+            exception = e;\n+            errCode = INVALID_KEY;\n+        } catch (final SignatureException e) {\n+            exception = e;\n+            errCode = SIGNING_FAILURE;\n+        } catch (final UnsupportedEncodingException e) {\n+            exception = e;\n+            errCode = UNSUPPORTED_ENCODING;\n+        }\n+\n+        final ClientException clientException = new ClientException(\n+                errCode,\n+                exception.getMessage(),\n+                exception\n+        );\n+\n+        Logger.error(\n+                TAG,\n+                clientException.getMessage(),\n+                clientException\n+        );\n+\n+        throw clientException;\n+    }\n+\n+    @Override\n+    public boolean verify(@NonNull final String plainText, @NonNull final String signatureStr) {\n+        final String errCode;\n+        final Exception exception;\n+\n+        try {\n+            final byte[] inputBytesToVerify = plainText.getBytes(ENCODING_UTF8);\n+            final KeyStore.Entry keyEntry = mKeyStore.getEntry(KEYSTORE_ENTRY_ALIAS, null);\n+\n+            if (!(keyEntry instanceof KeyStore.PrivateKeyEntry)) {\n+                Logger.warn(\n+                        TAG + \":verify\",\n+                        PRIVATE_KEY_NOT_FOUND\n+                );\n+                return false;\n+            }\n+\n+            final Signature signature = Signature.getInstance(SHA_256_WITH_RSA);\n+            signature.initVerify(((KeyStore.PrivateKeyEntry) keyEntry).getCertificate());\n+            signature.update(inputBytesToVerify);\n+            final byte[] signatureBytes = Base64.decode(signatureStr, Base64.DEFAULT);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e099e46a4933667293680a3e12d8bbb08788789e"}, "originalPosition": 186}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzEzMDE2", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#pullrequestreview-486313016", "createdAt": "2020-09-10T21:10:39Z", "commit": {"oid": "e099e46a4933667293680a3e12d8bbb08788789e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMToxMDozOVrOHQF4DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMToxMDozOVrOHQF4DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzNTUzMw==", "bodyText": "Remove resolved TODO", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486635533", "createdAt": "2020-09-10T21:10:39Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -441,6 +493,209 @@ public void run() {\n         });\n     }\n \n+    @Override\n+    public String sign(@NonNull final String input) throws ClientException {\n+        final Exception exception;\n+        final String errCode;\n+\n+        try {\n+            final byte[] inputBytesToSign = input.getBytes(ENCODING_UTF8);\n+            final KeyStore.Entry keyEntry = mKeyStore.getEntry(KEYSTORE_ENTRY_ALIAS, null);\n+\n+            if (!(keyEntry instanceof KeyStore.PrivateKeyEntry)) {\n+                Logger.warn(\n+                        TAG + \":sign\",\n+                        PRIVATE_KEY_NOT_FOUND\n+                );\n+                throw new ClientException(INVALID_KEY_MISSING);\n+            }\n+\n+            final Signature signature = Signature.getInstance(SHA_256_WITH_RSA);\n+            signature.initSign(((KeyStore.PrivateKeyEntry) keyEntry).getPrivateKey());\n+            signature.update(inputBytesToSign);\n+            final byte[] signedBytes = signature.sign();\n+            return Base64.encodeToString(signedBytes, Base64.DEFAULT);\n+        } catch (final KeyStoreException e) {\n+            exception = e;\n+            errCode = KEYSTORE_NOT_INITIALIZED;\n+        } catch (final NoSuchAlgorithmException e) {\n+            exception = e;\n+            errCode = NO_SUCH_ALGORITHM;\n+        } catch (final UnrecoverableEntryException e) {\n+            exception = e;\n+            errCode = INVALID_PROTECTION_PARAMS;\n+        } catch (final InvalidKeyException e) {\n+            exception = e;\n+            errCode = INVALID_KEY;\n+        } catch (final SignatureException e) {\n+            exception = e;\n+            errCode = SIGNING_FAILURE;\n+        } catch (final UnsupportedEncodingException e) {\n+            exception = e;\n+            errCode = UNSUPPORTED_ENCODING;\n+        }\n+\n+        final ClientException clientException = new ClientException(\n+                errCode,\n+                exception.getMessage(),\n+                exception\n+        );\n+\n+        Logger.error(\n+                TAG,\n+                clientException.getMessage(),\n+                clientException\n+        );\n+\n+        throw clientException;\n+    }\n+\n+    @Override\n+    public boolean verify(@NonNull final String plainText, @NonNull final String signatureStr) {\n+        final String errCode;\n+        final Exception exception;\n+\n+        try {\n+            final byte[] inputBytesToVerify = plainText.getBytes(ENCODING_UTF8);\n+            final KeyStore.Entry keyEntry = mKeyStore.getEntry(KEYSTORE_ENTRY_ALIAS, null);\n+\n+            if (!(keyEntry instanceof KeyStore.PrivateKeyEntry)) {\n+                Logger.warn(\n+                        TAG + \":verify\",\n+                        PRIVATE_KEY_NOT_FOUND\n+                );\n+                return false;\n+            }\n+\n+            final Signature signature = Signature.getInstance(SHA_256_WITH_RSA);\n+            signature.initVerify(((KeyStore.PrivateKeyEntry) keyEntry).getCertificate());\n+            signature.update(inputBytesToVerify);\n+            final byte[] signatureBytes = Base64.decode(signatureStr, Base64.DEFAULT);\n+\n+            return signature.verify(signatureBytes);\n+        } catch (final UnsupportedEncodingException e) {\n+            errCode = UNSUPPORTED_ENCODING;\n+            exception = e;\n+        } catch (final NoSuchAlgorithmException e) {\n+            errCode = NO_SUCH_ALGORITHM;\n+            exception = e;\n+        } catch (final KeyStoreException e) {\n+            errCode = KEYSTORE_NOT_INITIALIZED;\n+            exception = e;\n+        } catch (final UnrecoverableEntryException e) {\n+            errCode = INVALID_PROTECTION_PARAMS;\n+            exception = e;\n+        } catch (final InvalidKeyException e) {\n+            errCode = INVALID_KEY;\n+            exception = e;\n+        } catch (final SignatureException e) {\n+            errCode = SIGNING_FAILURE;\n+            exception = e;\n+        }\n+\n+        Logger.error(\n+                TAG + \":verify\",\n+                errCode,\n+                exception\n+        );\n+\n+        return false;\n+    }\n+\n+    @Override\n+    public String getPublicKey(@NonNull final PublicKeyFormat format) throws ClientException {\n+        switch (format) {\n+            case X_509_SubjectPublicKeyInfo_ASN_1:\n+                return getX509SubjectPublicKeyInfo();\n+            case JWK:\n+                return getJwkPublicKey();\n+            default:\n+                final String errMsg = \"Unrecognized or unsupported key format: \" + format;\n+                final ClientException clientException = new ClientException(\n+                        UNKNOWN_EXPORT_FORMAT,\n+                        errMsg\n+                );\n+\n+                Logger.error(\n+                        TAG + \":getPublicKey\",\n+                        errMsg,\n+                        clientException\n+                );\n+\n+                throw clientException;\n+        }\n+    }\n+\n+    private String getJwkPublicKey() throws ClientException {\n+        final Exception exception;\n+        final String errCode;\n+\n+        try {\n+            final net.minidev.json.JSONObject jwkJson = getDevicePopJwkMinifiedJson();\n+            return jwkJson.getAsString(SignedHttpRequestJwtClaims.JWK); // TODO create a constant", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e099e46a4933667293680a3e12d8bbb08788789e"}, "originalPosition": 247}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65c2d016ec8eb6d6317ec731adb0d042a33ddeb4", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/65c2d016ec8eb6d6317ec731adb0d042a33ddeb4", "committedDate": "2020-09-10T21:12:47Z", "message": "Javadoc signing/verification API algs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f65f1596212fe20b71e69ae9a0adef47f045e0a3", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/f65f1596212fe20b71e69ae9a0adef47f045e0a3", "committedDate": "2020-09-10T21:20:22Z", "message": "Adding javadoc for public key export formats"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ffb1b78e4d5a297cb78e0790b0d7083d9532667", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/8ffb1b78e4d5a297cb78e0790b0d7083d9532667", "committedDate": "2020-09-10T21:21:32Z", "message": "Clean up stray newline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c113f14d669829b12886b717dc301d05d1a64425", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/c113f14d669829b12886b717dc301d05d1a64425", "committedDate": "2020-09-10T21:22:23Z", "message": "Removing resolved TODO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bda5f733b49c782e667af7c1cc5dc97135b14380", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/bda5f733b49c782e667af7c1cc5dc97135b14380", "committedDate": "2020-09-10T21:26:37Z", "message": "Adding nullability annots"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5b83a8164005426b0552488cbe194b3c283f05b", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/e5b83a8164005426b0552488cbe194b3c283f05b", "committedDate": "2020-09-10T22:35:07Z", "message": "WIP signing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0312398104ed6597b0ac5cfeaf1aa111a9a056e", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/c0312398104ed6597b0ac5cfeaf1aa111a9a056e", "committedDate": "2020-09-10T22:45:28Z", "message": "Code cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af0ca035a02c8d8dff1acf345dbcd1cf586bb204", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/af0ca035a02c8d8dff1acf345dbcd1cf586bb204", "committedDate": "2020-09-10T22:47:10Z", "message": "Tweaking javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzY0NTIx", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#pullrequestreview-486364521", "createdAt": "2020-09-10T22:53:26Z", "commit": {"oid": "af0ca035a02c8d8dff1acf345dbcd1cf586bb204"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjo1MzoyNlrOHQIawg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjo1MzoyNlrOHQIawg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3NzE4Ng==", "bodyText": "FYI Robolectric cannot be used here -- it throws Exceptions that the AndroidKeystore cannot be used. Falling back to emulator tests.....", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486677186", "createdAt": "2020-09-10T22:53:26Z", "author": {"login": "iambmelt"}, "path": "common/src/androidTest/java/com/microsoft/identity/common/internal/platform/DevicePoPManagerSigningTests.java", "diffHunk": "@@ -0,0 +1,108 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.platform;\n+\n+import android.os.Build;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.exception.ClientException;\n+\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.io.IOException;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.cert.CertificateException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.internal.platform.DevicePopManager.SigningAlgorithms.MD5_WITH_RSA;\n+import static com.microsoft.identity.common.internal.platform.DevicePopManager.SigningAlgorithms.NONE_WITH_RSA;\n+import static com.microsoft.identity.common.internal.platform.DevicePopManager.SigningAlgorithms.SHA_256_WITH_RSA;\n+import static com.microsoft.identity.common.internal.platform.DevicePopManager.SigningAlgorithms.SHA_256_WITH_RSA_PSS;\n+import static com.microsoft.identity.common.internal.platform.DevicePopManager.SigningAlgorithms.SHA_384_WITH_RSA;\n+import static com.microsoft.identity.common.internal.platform.DevicePopManager.SigningAlgorithms.SHA_384_WITH_RSA_PSS;\n+import static com.microsoft.identity.common.internal.platform.DevicePopManager.SigningAlgorithms.SHA_512_WITH_RSA;\n+import static com.microsoft.identity.common.internal.platform.DevicePopManager.SigningAlgorithms.SHA_512_WITH_RSA_PSS;\n+\n+@RunWith(Parameterized.class)\n+public class DevicePoPManagerSigningTests {\n+\n+    private static final String DATA_TO_SIGN = \"The quick brown fox jumped over the lazy dog.\";\n+\n+    private final IDevicePopManager devicePopManager;\n+    private final String signingAlg;\n+\n+    @Parameterized.Parameters", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0ca035a02c8d8dff1acf345dbcd1cf586bb204"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzcwNDY5", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#pullrequestreview-486370469", "createdAt": "2020-09-10T23:09:23Z", "commit": {"oid": "af0ca035a02c8d8dff1acf345dbcd1cf586bb204"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMzowOToyM1rOHQIuag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMzowOToyM1rOHQIuag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4MjIxOA==", "bodyText": "Update changelog", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486682218", "createdAt": "2020-09-10T23:09:23Z", "author": {"login": "iambmelt"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -98,6 +107,37 @@\n \n     private static final String TAG = DevicePopManager.class.getSimpleName();\n \n+    /**\n+     * Signing algorithms supported by our underlying keystore. Not all algs available at all device\n+     * levels.\n+     */\n+    public static class SigningAlgorithms {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0ca035a02c8d8dff1acf345dbcd1cf586bb204"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12d7a01f595789c8926c4b009f4b173bb07322ef", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/12d7a01f595789c8926c4b009f4b173bb07322ef", "committedDate": "2020-09-10T23:14:46Z", "message": "Update changelog for PoP enhancements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fff58021cd09ecc36fcad8fc29a4d45c03f70bab", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/fff58021cd09ecc36fcad8fc29a4d45c03f70bab", "committedDate": "2020-09-14T20:18:24Z", "message": "Merge branch 'dev' into iambmelt/oneauth-pop-extensions-1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c201e4f48b995f9b8a86a7e975939e30829d426", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/8c201e4f48b995f9b8a86a7e975939e30829d426", "committedDate": "2020-09-15T17:49:49Z", "message": "Merge branch 'dev' into iambmelt/oneauth-pop-extensions-1"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MDU1MDg5", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#pullrequestreview-489055089", "createdAt": "2020-09-15T20:42:45Z", "commit": {"oid": "8c201e4f48b995f9b8a86a7e975939e30829d426"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDo0Mjo0NlrOHSTz5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDo0Mjo0NlrOHSTz5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2MDk5Nw==", "bodyText": "nit: rename to testAsymmetricKeyCreationDateNullWhenUninitialized", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r488960997", "createdAt": "2020-09-15T20:42:46Z", "author": {"login": "shahzaibj"}, "path": "common/src/androidTest/java/com/microsoft/identity/common/internal/platform/DevicePoPManagerTests.java", "diffHunk": "@@ -289,4 +302,60 @@ public void testMintSignedAccessTokenContainsRequisiteClaims()\n         Assert.assertEquals(nonce, jwtClaimsSet.getClaim(\"nonce\"));\n         Assert.assertNotNull(jwtClaimsSet.getClaim(\"cnf\"));\n     }\n+\n+    @Test\n+    public void testAsymmetricKeyNullWhenUninitialized() throws ClientException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c201e4f48b995f9b8a86a7e975939e30829d426"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MDU2NjI4", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#pullrequestreview-489056628", "createdAt": "2020-09-15T20:45:12Z", "commit": {"oid": "8c201e4f48b995f9b8a86a7e975939e30829d426"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDo0NToxMlrOHST4rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDo0NToxMlrOHST4rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2MjIyMg==", "bodyText": "What data type are these? If these are Strings, should we also assert not empty String?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r488962222", "createdAt": "2020-09-15T20:45:12Z", "author": {"login": "shahzaibj"}, "path": "common/src/androidTest/java/com/microsoft/identity/common/internal/platform/DevicePoPManagerTests.java", "diffHunk": "@@ -289,4 +302,60 @@ public void testMintSignedAccessTokenContainsRequisiteClaims()\n         Assert.assertEquals(nonce, jwtClaimsSet.getClaim(\"nonce\"));\n         Assert.assertNotNull(jwtClaimsSet.getClaim(\"cnf\"));\n     }\n+\n+    @Test\n+    public void testAsymmetricKeyNullWhenUninitialized() throws ClientException {\n+        final Date createdDate = mDevicePopManager.getAsymmetricKeyCreationDate();\n+        Assert.assertNull(createdDate);\n+    }\n+\n+    @Test\n+    public void testAsymmetricKeyHasCreationDate() throws ClientException {\n+        final Date createdDate = mDevicePopManager.getAsymmetricKeyCreationDate();\n+        Assert.assertNull(createdDate);\n+\n+        // Generate it\n+        mDevicePopManager.generateAsymmetricKey(mContext);\n+\n+        // Assert the Date exists\n+        Assert.assertNotNull(mDevicePopManager.getAsymmetricKeyCreationDate());\n+    }\n+\n+    @Test\n+    public void testAsymmetricKeyHasPublicKeyX509() throws ClientException, NoSuchAlgorithmException, InvalidKeySpecException {\n+        // Generate keys\n+        mDevicePopManager.generateAsymmetricKey(mContext);\n+\n+        // Get the public key\n+        final String publicKey = mDevicePopManager.getPublicKey(X_509_SubjectPublicKeyInfo_ASN_1);\n+\n+        // Rehydrate the certificate\n+        final byte[] bytes = Base64.decode(publicKey, Base64.DEFAULT);\n+        final KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n+        final PublicKey pubKeyRestored = keyFactory.generatePublic(new X509EncodedKeySpec(bytes));\n+        Assert.assertEquals(\"X.509\", pubKeyRestored.getFormat());\n+    }\n+\n+    @Test\n+    public void testAsymmetricKeyHasPublicKeyJwk() throws ClientException {\n+        // Generate keys\n+        mDevicePopManager.generateAsymmetricKey(mContext);\n+\n+        // Get the public key\n+        final String publicKey = mDevicePopManager.getPublicKey(JWK);\n+\n+        // Convert it to JSON, parse to verify fields\n+        final JsonElement jwkElement = new JsonParser().parse(publicKey);\n+\n+        // Convert to JsonObject to extract claims\n+        final JsonObject jwkObj = jwkElement.getAsJsonObject();\n+\n+        // We should expect the following claims...\n+        // 'kty' - Key Type - Identifies the cryptographic alg used with this key (ex: RSA, EC)\n+        // 'e' - Public Exponent - The exponent used on signed/encoded data to decode the orig value\n+        // 'n' - Modulus - The product of two prime numbers used to generate the key pair\n+        Assert.assertNotNull(jwkObj.get(\"kty\"));\n+        Assert.assertNotNull(jwkObj.get(\"e\"));\n+        Assert.assertNotNull(jwkObj.get(\"n\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c201e4f48b995f9b8a86a7e975939e30829d426"}, "originalPosition": 93}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf890e25e09cf5beb74c4c0a10f9a206ac7af973", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/cf890e25e09cf5beb74c4c0a10f9a206ac7af973", "committedDate": "2020-09-15T20:46:29Z", "message": "Rename test method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MDU4MTcw", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#pullrequestreview-489058170", "createdAt": "2020-09-15T20:47:25Z", "commit": {"oid": "8c201e4f48b995f9b8a86a7e975939e30829d426"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDo0NzoyNVrOHST9bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDo0NzoyNVrOHST9bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2MzQzNg==", "bodyText": "Could/should this be an enum?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r488963436", "createdAt": "2020-09-15T20:47:25Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -98,6 +107,37 @@\n \n     private static final String TAG = DevicePopManager.class.getSimpleName();\n \n+    /**\n+     * Signing algorithms supported by our underlying keystore. Not all algs available at all device\n+     * levels.\n+     */\n+    public static class SigningAlgorithms {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c201e4f48b995f9b8a86a7e975939e30829d426"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MDU4OTgw", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#pullrequestreview-489058980", "createdAt": "2020-09-15T20:48:39Z", "commit": {"oid": "8c201e4f48b995f9b8a86a7e975939e30829d426"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDo0ODozOVrOHST_rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDo0ODozOVrOHST_rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2NDAxNA==", "bodyText": "may be store :sign in a var called methodName to follow the pattern in other places", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r488964014", "createdAt": "2020-09-15T20:48:39Z", "author": {"login": "shahzaibj"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -441,6 +519,214 @@ public void run() {\n         });\n     }\n \n+    @Override\n+    public @NonNull\n+    String sign(@NonNull final String alg,\n+                @NonNull final String input) throws ClientException {\n+        final Exception exception;\n+        final String errCode;\n+\n+        try {\n+            final byte[] inputBytesToSign = input.getBytes(ENCODING_UTF8);\n+            final KeyStore.Entry keyEntry = mKeyStore.getEntry(KEYSTORE_ENTRY_ALIAS, null);\n+\n+            if (!(keyEntry instanceof KeyStore.PrivateKeyEntry)) {\n+                Logger.warn(\n+                        TAG + \":sign\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c201e4f48b995f9b8a86a7e975939e30829d426"}, "originalPosition": 154}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MDYwODg4", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#pullrequestreview-489060888", "createdAt": "2020-09-15T20:51:37Z", "commit": {"oid": "cf890e25e09cf5beb74c4c0a10f9a206ac7af973"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NDA2MTIy", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#pullrequestreview-486406122", "createdAt": "2020-09-11T01:00:43Z", "commit": {"oid": "12d7a01f595789c8926c4b009f4b173bb07322ef"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMTowMDo0NFrOHQKolg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMTowMDo0NFrOHQKolg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcxMzQ5NA==", "bodyText": "I've asked this question a lot on these - is there any reason that this can't be an enum?  You'll get compile-time safety in that case and it'll promote to an interface-level enum.  You'll have to change this code to support new algorithms that may appear, however.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486713494", "createdAt": "2020-09-11T01:00:44Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -98,6 +107,37 @@\n \n     private static final String TAG = DevicePopManager.class.getSimpleName();\n \n+    /**\n+     * Signing algorithms supported by our underlying keystore. Not all algs available at all device\n+     * levels.\n+     */\n+    public static class SigningAlgorithms {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12d7a01f595789c8926c4b009f4b173bb07322ef"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef84e4ac69a53770a901b7fa2498c1bcff58790f", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/ef84e4ac69a53770a901b7fa2498c1bcff58790f", "committedDate": "2020-09-15T20:55:24Z", "message": "Method names as private instance vars for logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0edbdc137706382640b4a580e6579e53e4ed2bfb", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/0edbdc137706382640b4a580e6579e53e4ed2bfb", "committedDate": "2020-09-15T22:35:36Z", "message": "Merge branch 'dev' into iambmelt/oneauth-pop-extensions-1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef45a531f4458dca339b34f159080bfbd1b39bf1", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/ef45a531f4458dca339b34f159080bfbd1b39bf1", "committedDate": "2020-09-15T23:07:17Z", "message": "Convert class of strings to enum"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d09089bff82959befd903fe5c13f5ed81405e6aa", "author": {"user": {"login": "iambmelt", "name": "Brian Melton-Grace"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/d09089bff82959befd903fe5c13f5ed81405e6aa", "committedDate": "2020-09-15T23:32:44Z", "message": "Adding a nullability test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1563, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}