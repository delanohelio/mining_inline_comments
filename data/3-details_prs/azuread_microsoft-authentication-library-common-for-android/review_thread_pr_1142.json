{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwODE4NjI0", "number": 1142, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMzo1NToyMVrOE_6nsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzozNjo0NVrOFEk2nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDU2MTc5OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMzo1NToyMVrOH94YwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDowNToxNVrOH94lFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0OTAyNQ==", "bodyText": "add license", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r534649025", "createdAt": "2020-12-03T03:55:21Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package com.microsoft.identity.client.ui.automation.rules;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5201c8387621a0f44d57fbdbe02953b693549e1a"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MjE4MQ==", "bodyText": "added license.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r534652181", "createdAt": "2020-12-03T04:05:15Z", "author": {"login": "kkrishnareddy"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package com.microsoft.identity.client.ui.automation.rules;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0OTAyNQ=="}, "originalCommit": {"oid": "5201c8387621a0f44d57fbdbe02953b693549e1a"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDU2MjExOnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMzo1NToyOVrOH94Y8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDowNTozMFrOH94lcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0OTA3NQ==", "bodyText": "add javadoc", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r534649075", "createdAt": "2020-12-03T03:55:29Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package com.microsoft.identity.client.ui.automation.rules;\n+\n+import android.app.KeyguardManager;\n+import android.content.Context;\n+import android.os.Build;\n+import android.provider.Settings;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.uiautomator.UiDevice;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import static com.microsoft.identity.client.ui.automation.utils.CommonUtils.launchIntent;\n+\n+public class DevicePinSetupRule implements TestRule {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5201c8387621a0f44d57fbdbe02953b693549e1a"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MjI3NA==", "bodyText": "added javadoc.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r534652274", "createdAt": "2020-12-03T04:05:30Z", "author": {"login": "kkrishnareddy"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package com.microsoft.identity.client.ui.automation.rules;\n+\n+import android.app.KeyguardManager;\n+import android.content.Context;\n+import android.os.Build;\n+import android.provider.Settings;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.uiautomator.UiDevice;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import static com.microsoft.identity.client.ui.automation.utils.CommonUtils.launchIntent;\n+\n+public class DevicePinSetupRule implements TestRule {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0OTA3NQ=="}, "originalCommit": {"oid": "5201c8387621a0f44d57fbdbe02953b693549e1a"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDU2Mzk5OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMzo1NjoyNFrOH94aDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDoxNjowNVrOH94ygQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0OTM1OQ==", "bodyText": "what does this comment about api 16+ mean here?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r534649359", "createdAt": "2020-12-03T03:56:24Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package com.microsoft.identity.client.ui.automation.rules;\n+\n+import android.app.KeyguardManager;\n+import android.content.Context;\n+import android.os.Build;\n+import android.provider.Settings;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.uiautomator.UiDevice;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import static com.microsoft.identity.client.ui.automation.utils.CommonUtils.launchIntent;\n+\n+public class DevicePinSetupRule implements TestRule {\n+\n+    final Boolean isLocked = IsDeviceSecured();\n+\n+    @Override\n+    public Statement apply(final Statement base, final Description description) {\n+        return new Statement() {\n+            @Override\n+            public void evaluate() throws Throwable {\n+                if (!isLocked) {\n+                    setLock();\n+                }\n+                base.evaluate();\n+            }\n+        };\n+    }\n+\n+    private boolean IsDeviceSecured() {\n+        Context context = ApplicationProvider.getApplicationContext();\n+        KeyguardManager keyguardManager =\n+                (KeyguardManager) context.getSystemService(Context.KEYGUARD_SERVICE); //api 16+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5201c8387621a0f44d57fbdbe02953b693549e1a"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1NTYxNw==", "bodyText": "it supports for api version greater than 16.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r534655617", "createdAt": "2020-12-03T04:16:05Z", "author": {"login": "kkrishnareddy"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package com.microsoft.identity.client.ui.automation.rules;\n+\n+import android.app.KeyguardManager;\n+import android.content.Context;\n+import android.os.Build;\n+import android.provider.Settings;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.uiautomator.UiDevice;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import static com.microsoft.identity.client.ui.automation.utils.CommonUtils.launchIntent;\n+\n+public class DevicePinSetupRule implements TestRule {\n+\n+    final Boolean isLocked = IsDeviceSecured();\n+\n+    @Override\n+    public Statement apply(final Statement base, final Description description) {\n+        return new Statement() {\n+            @Override\n+            public void evaluate() throws Throwable {\n+                if (!isLocked) {\n+                    setLock();\n+                }\n+                base.evaluate();\n+            }\n+        };\n+    }\n+\n+    private boolean IsDeviceSecured() {\n+        Context context = ApplicationProvider.getApplicationContext();\n+        KeyguardManager keyguardManager =\n+                (KeyguardManager) context.getSystemService(Context.KEYGUARD_SERVICE); //api 16+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0OTM1OQ=="}, "originalCommit": {"oid": "5201c8387621a0f44d57fbdbe02953b693549e1a"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDU2NzI2OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMzo1Nzo0OFrOH94b6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDowNjowMVrOH94mFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0OTgzNA==", "bodyText": "variable names should start with lower case as pinButton", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r534649834", "createdAt": "2020-12-03T03:57:48Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package com.microsoft.identity.client.ui.automation.rules;\n+\n+import android.app.KeyguardManager;\n+import android.content.Context;\n+import android.os.Build;\n+import android.provider.Settings;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.uiautomator.UiDevice;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import static com.microsoft.identity.client.ui.automation.utils.CommonUtils.launchIntent;\n+\n+public class DevicePinSetupRule implements TestRule {\n+\n+    final Boolean isLocked = IsDeviceSecured();\n+\n+    @Override\n+    public Statement apply(final Statement base, final Description description) {\n+        return new Statement() {\n+            @Override\n+            public void evaluate() throws Throwable {\n+                if (!isLocked) {\n+                    setLock();\n+                }\n+                base.evaluate();\n+            }\n+        };\n+    }\n+\n+    private boolean IsDeviceSecured() {\n+        Context context = ApplicationProvider.getApplicationContext();\n+        KeyguardManager keyguardManager =\n+                (KeyguardManager) context.getSystemService(Context.KEYGUARD_SERVICE); //api 16+\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n+            return keyguardManager.isDeviceSecure();\n+        }\n+        return keyguardManager.isKeyguardSecure();\n+    }\n+\n+    private void setLock() throws UiObjectNotFoundException {\n+\n+        UiDevice device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());\n+        launchIntent(Settings.ACTION_SECURITY_SETTINGS);\n+\n+        UiObject screenLock = UiAutomatorUtils.obtainUiObjectWithText(\"Screen lock\");\n+        Assert.assertTrue(screenLock.exists());\n+        screenLock.click();\n+        //click on PIN.\n+        UiObject PinButton = UiAutomatorUtils.obtainUiObjectWithExactText(\"PIN\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5201c8387621a0f44d57fbdbe02953b693549e1a"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MjQzOA==", "bodyText": "changed to pinButton", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r534652438", "createdAt": "2020-12-03T04:06:01Z", "author": {"login": "kkrishnareddy"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package com.microsoft.identity.client.ui.automation.rules;\n+\n+import android.app.KeyguardManager;\n+import android.content.Context;\n+import android.os.Build;\n+import android.provider.Settings;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.uiautomator.UiDevice;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import static com.microsoft.identity.client.ui.automation.utils.CommonUtils.launchIntent;\n+\n+public class DevicePinSetupRule implements TestRule {\n+\n+    final Boolean isLocked = IsDeviceSecured();\n+\n+    @Override\n+    public Statement apply(final Statement base, final Description description) {\n+        return new Statement() {\n+            @Override\n+            public void evaluate() throws Throwable {\n+                if (!isLocked) {\n+                    setLock();\n+                }\n+                base.evaluate();\n+            }\n+        };\n+    }\n+\n+    private boolean IsDeviceSecured() {\n+        Context context = ApplicationProvider.getApplicationContext();\n+        KeyguardManager keyguardManager =\n+                (KeyguardManager) context.getSystemService(Context.KEYGUARD_SERVICE); //api 16+\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n+            return keyguardManager.isDeviceSecure();\n+        }\n+        return keyguardManager.isKeyguardSecure();\n+    }\n+\n+    private void setLock() throws UiObjectNotFoundException {\n+\n+        UiDevice device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());\n+        launchIntent(Settings.ACTION_SECURITY_SETTINGS);\n+\n+        UiObject screenLock = UiAutomatorUtils.obtainUiObjectWithText(\"Screen lock\");\n+        Assert.assertTrue(screenLock.exists());\n+        screenLock.click();\n+        //click on PIN.\n+        UiObject PinButton = UiAutomatorUtils.obtainUiObjectWithExactText(\"PIN\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0OTgzNA=="}, "originalCommit": {"oid": "5201c8387621a0f44d57fbdbe02953b693549e1a"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDU2OTMyOnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMzo1ODo1NFrOH94dMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDoxNjoxN1rOH94yrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MDE2Mw==", "bodyText": "Let's put the pin code 1234 in a global constant and just reference the constant here", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r534650163", "createdAt": "2020-12-03T03:58:54Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package com.microsoft.identity.client.ui.automation.rules;\n+\n+import android.app.KeyguardManager;\n+import android.content.Context;\n+import android.os.Build;\n+import android.provider.Settings;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.uiautomator.UiDevice;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import static com.microsoft.identity.client.ui.automation.utils.CommonUtils.launchIntent;\n+\n+public class DevicePinSetupRule implements TestRule {\n+\n+    final Boolean isLocked = IsDeviceSecured();\n+\n+    @Override\n+    public Statement apply(final Statement base, final Description description) {\n+        return new Statement() {\n+            @Override\n+            public void evaluate() throws Throwable {\n+                if (!isLocked) {\n+                    setLock();\n+                }\n+                base.evaluate();\n+            }\n+        };\n+    }\n+\n+    private boolean IsDeviceSecured() {\n+        Context context = ApplicationProvider.getApplicationContext();\n+        KeyguardManager keyguardManager =\n+                (KeyguardManager) context.getSystemService(Context.KEYGUARD_SERVICE); //api 16+\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n+            return keyguardManager.isDeviceSecure();\n+        }\n+        return keyguardManager.isKeyguardSecure();\n+    }\n+\n+    private void setLock() throws UiObjectNotFoundException {\n+\n+        UiDevice device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());\n+        launchIntent(Settings.ACTION_SECURITY_SETTINGS);\n+\n+        UiObject screenLock = UiAutomatorUtils.obtainUiObjectWithText(\"Screen lock\");\n+        Assert.assertTrue(screenLock.exists());\n+        screenLock.click();\n+        //click on PIN.\n+        UiObject PinButton = UiAutomatorUtils.obtainUiObjectWithExactText(\"PIN\");\n+        Assert.assertTrue(PinButton.exists());\n+        PinButton.click();\n+\n+        //click on NO\n+        UiObject noButton = UiAutomatorUtils.obtainUiObjectWithExactText(\"NO\");\n+        Assert.assertTrue(noButton.exists());\n+        noButton.click();\n+\n+        //press 1234\n+        UiObject passwordField = UiAutomatorUtils.obtainUiObjectWithResourceId(\"com.android.settings:id/password_entry\");\n+        Assert.assertTrue(passwordField.exists());\n+        passwordField.setText(\"1234\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5201c8387621a0f44d57fbdbe02953b693549e1a"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1NTY2Mg==", "bodyText": "done.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r534655662", "createdAt": "2020-12-03T04:16:17Z", "author": {"login": "kkrishnareddy"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package com.microsoft.identity.client.ui.automation.rules;\n+\n+import android.app.KeyguardManager;\n+import android.content.Context;\n+import android.os.Build;\n+import android.provider.Settings;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.uiautomator.UiDevice;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import static com.microsoft.identity.client.ui.automation.utils.CommonUtils.launchIntent;\n+\n+public class DevicePinSetupRule implements TestRule {\n+\n+    final Boolean isLocked = IsDeviceSecured();\n+\n+    @Override\n+    public Statement apply(final Statement base, final Description description) {\n+        return new Statement() {\n+            @Override\n+            public void evaluate() throws Throwable {\n+                if (!isLocked) {\n+                    setLock();\n+                }\n+                base.evaluate();\n+            }\n+        };\n+    }\n+\n+    private boolean IsDeviceSecured() {\n+        Context context = ApplicationProvider.getApplicationContext();\n+        KeyguardManager keyguardManager =\n+                (KeyguardManager) context.getSystemService(Context.KEYGUARD_SERVICE); //api 16+\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n+            return keyguardManager.isDeviceSecure();\n+        }\n+        return keyguardManager.isKeyguardSecure();\n+    }\n+\n+    private void setLock() throws UiObjectNotFoundException {\n+\n+        UiDevice device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());\n+        launchIntent(Settings.ACTION_SECURITY_SETTINGS);\n+\n+        UiObject screenLock = UiAutomatorUtils.obtainUiObjectWithText(\"Screen lock\");\n+        Assert.assertTrue(screenLock.exists());\n+        screenLock.click();\n+        //click on PIN.\n+        UiObject PinButton = UiAutomatorUtils.obtainUiObjectWithExactText(\"PIN\");\n+        Assert.assertTrue(PinButton.exists());\n+        PinButton.click();\n+\n+        //click on NO\n+        UiObject noButton = UiAutomatorUtils.obtainUiObjectWithExactText(\"NO\");\n+        Assert.assertTrue(noButton.exists());\n+        noButton.click();\n+\n+        //press 1234\n+        UiObject passwordField = UiAutomatorUtils.obtainUiObjectWithResourceId(\"com.android.settings:id/password_entry\");\n+        Assert.assertTrue(passwordField.exists());\n+        passwordField.setText(\"1234\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MDE2Mw=="}, "originalCommit": {"oid": "5201c8387621a0f44d57fbdbe02953b693549e1a"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDU3MDIzOnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMzo1OToyMlrOH94dxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDoxNjoyNlrOH94zAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MDMwOQ==", "bodyText": "If this line is not needed then let's remove it", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r534650309", "createdAt": "2020-12-03T03:59:22Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package com.microsoft.identity.client.ui.automation.rules;\n+\n+import android.app.KeyguardManager;\n+import android.content.Context;\n+import android.os.Build;\n+import android.provider.Settings;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.uiautomator.UiDevice;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import static com.microsoft.identity.client.ui.automation.utils.CommonUtils.launchIntent;\n+\n+public class DevicePinSetupRule implements TestRule {\n+\n+    final Boolean isLocked = IsDeviceSecured();\n+\n+    @Override\n+    public Statement apply(final Statement base, final Description description) {\n+        return new Statement() {\n+            @Override\n+            public void evaluate() throws Throwable {\n+                if (!isLocked) {\n+                    setLock();\n+                }\n+                base.evaluate();\n+            }\n+        };\n+    }\n+\n+    private boolean IsDeviceSecured() {\n+        Context context = ApplicationProvider.getApplicationContext();\n+        KeyguardManager keyguardManager =\n+                (KeyguardManager) context.getSystemService(Context.KEYGUARD_SERVICE); //api 16+\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n+            return keyguardManager.isDeviceSecure();\n+        }\n+        return keyguardManager.isKeyguardSecure();\n+    }\n+\n+    private void setLock() throws UiObjectNotFoundException {\n+\n+        UiDevice device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());\n+        launchIntent(Settings.ACTION_SECURITY_SETTINGS);\n+\n+        UiObject screenLock = UiAutomatorUtils.obtainUiObjectWithText(\"Screen lock\");\n+        Assert.assertTrue(screenLock.exists());\n+        screenLock.click();\n+        //click on PIN.\n+        UiObject PinButton = UiAutomatorUtils.obtainUiObjectWithExactText(\"PIN\");\n+        Assert.assertTrue(PinButton.exists());\n+        PinButton.click();\n+\n+        //click on NO\n+        UiObject noButton = UiAutomatorUtils.obtainUiObjectWithExactText(\"NO\");\n+        Assert.assertTrue(noButton.exists());\n+        noButton.click();\n+\n+        //press 1234\n+        UiObject passwordField = UiAutomatorUtils.obtainUiObjectWithResourceId(\"com.android.settings:id/password_entry\");\n+        Assert.assertTrue(passwordField.exists());\n+        passwordField.setText(\"1234\");\n+        //press Enter.\n+        //UiDevice device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5201c8387621a0f44d57fbdbe02953b693549e1a"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1NTc0NQ==", "bodyText": "removed the line.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r534655745", "createdAt": "2020-12-03T04:16:26Z", "author": {"login": "kkrishnareddy"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package com.microsoft.identity.client.ui.automation.rules;\n+\n+import android.app.KeyguardManager;\n+import android.content.Context;\n+import android.os.Build;\n+import android.provider.Settings;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.uiautomator.UiDevice;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import static com.microsoft.identity.client.ui.automation.utils.CommonUtils.launchIntent;\n+\n+public class DevicePinSetupRule implements TestRule {\n+\n+    final Boolean isLocked = IsDeviceSecured();\n+\n+    @Override\n+    public Statement apply(final Statement base, final Description description) {\n+        return new Statement() {\n+            @Override\n+            public void evaluate() throws Throwable {\n+                if (!isLocked) {\n+                    setLock();\n+                }\n+                base.evaluate();\n+            }\n+        };\n+    }\n+\n+    private boolean IsDeviceSecured() {\n+        Context context = ApplicationProvider.getApplicationContext();\n+        KeyguardManager keyguardManager =\n+                (KeyguardManager) context.getSystemService(Context.KEYGUARD_SERVICE); //api 16+\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n+            return keyguardManager.isDeviceSecure();\n+        }\n+        return keyguardManager.isKeyguardSecure();\n+    }\n+\n+    private void setLock() throws UiObjectNotFoundException {\n+\n+        UiDevice device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());\n+        launchIntent(Settings.ACTION_SECURITY_SETTINGS);\n+\n+        UiObject screenLock = UiAutomatorUtils.obtainUiObjectWithText(\"Screen lock\");\n+        Assert.assertTrue(screenLock.exists());\n+        screenLock.click();\n+        //click on PIN.\n+        UiObject PinButton = UiAutomatorUtils.obtainUiObjectWithExactText(\"PIN\");\n+        Assert.assertTrue(PinButton.exists());\n+        PinButton.click();\n+\n+        //click on NO\n+        UiObject noButton = UiAutomatorUtils.obtainUiObjectWithExactText(\"NO\");\n+        Assert.assertTrue(noButton.exists());\n+        noButton.click();\n+\n+        //press 1234\n+        UiObject passwordField = UiAutomatorUtils.obtainUiObjectWithResourceId(\"com.android.settings:id/password_entry\");\n+        Assert.assertTrue(passwordField.exists());\n+        passwordField.setText(\"1234\");\n+        //press Enter.\n+        //UiDevice device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MDMwOQ=="}, "originalCommit": {"oid": "5201c8387621a0f44d57fbdbe02953b693549e1a"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDU3MDkxOnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMzo1OTozOVrOH94eIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDoxNjo0MFrOH94zUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MDQwMA==", "bodyText": "nit: add final to all variables where applicable", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r534650400", "createdAt": "2020-12-03T03:59:39Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package com.microsoft.identity.client.ui.automation.rules;\n+\n+import android.app.KeyguardManager;\n+import android.content.Context;\n+import android.os.Build;\n+import android.provider.Settings;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.uiautomator.UiDevice;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import static com.microsoft.identity.client.ui.automation.utils.CommonUtils.launchIntent;\n+\n+public class DevicePinSetupRule implements TestRule {\n+\n+    final Boolean isLocked = IsDeviceSecured();\n+\n+    @Override\n+    public Statement apply(final Statement base, final Description description) {\n+        return new Statement() {\n+            @Override\n+            public void evaluate() throws Throwable {\n+                if (!isLocked) {\n+                    setLock();\n+                }\n+                base.evaluate();\n+            }\n+        };\n+    }\n+\n+    private boolean IsDeviceSecured() {\n+        Context context = ApplicationProvider.getApplicationContext();\n+        KeyguardManager keyguardManager =\n+                (KeyguardManager) context.getSystemService(Context.KEYGUARD_SERVICE); //api 16+\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n+            return keyguardManager.isDeviceSecure();\n+        }\n+        return keyguardManager.isKeyguardSecure();\n+    }\n+\n+    private void setLock() throws UiObjectNotFoundException {\n+\n+        UiDevice device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5201c8387621a0f44d57fbdbe02953b693549e1a"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1NTgyNA==", "bodyText": "made all variables to final", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r534655824", "createdAt": "2020-12-03T04:16:40Z", "author": {"login": "kkrishnareddy"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package com.microsoft.identity.client.ui.automation.rules;\n+\n+import android.app.KeyguardManager;\n+import android.content.Context;\n+import android.os.Build;\n+import android.provider.Settings;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.uiautomator.UiDevice;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import static com.microsoft.identity.client.ui.automation.utils.CommonUtils.launchIntent;\n+\n+public class DevicePinSetupRule implements TestRule {\n+\n+    final Boolean isLocked = IsDeviceSecured();\n+\n+    @Override\n+    public Statement apply(final Statement base, final Description description) {\n+        return new Statement() {\n+            @Override\n+            public void evaluate() throws Throwable {\n+                if (!isLocked) {\n+                    setLock();\n+                }\n+                base.evaluate();\n+            }\n+        };\n+    }\n+\n+    private boolean IsDeviceSecured() {\n+        Context context = ApplicationProvider.getApplicationContext();\n+        KeyguardManager keyguardManager =\n+                (KeyguardManager) context.getSystemService(Context.KEYGUARD_SERVICE); //api 16+\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n+            return keyguardManager.isDeviceSecure();\n+        }\n+        return keyguardManager.isKeyguardSecure();\n+    }\n+\n+    private void setLock() throws UiObjectNotFoundException {\n+\n+        UiDevice device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MDQwMA=="}, "originalCommit": {"oid": "5201c8387621a0f44d57fbdbe02953b693549e1a"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDU3MTQ1OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/utils/CommonUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMzo1OTo1NVrOH94edw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDoyNDoxMVrOH948HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MDQ4Nw==", "bodyText": "Since this is public, let's add some javadoc for it", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r534650487", "createdAt": "2020-12-03T03:59:55Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/utils/CommonUtils.java", "diffHunk": "@@ -159,4 +159,11 @@ public static void copyFileToFolderInSdCard(final File file, @Nullable final Str\n         AdbShellUtils.executeShellCommand(\"mkdir -p \" + destinationPath);\n         AdbShellUtils.executeShellCommandAsCurrentPackage(\"cp \" + filePath + \" \" + destFilePath);\n     }\n+\n+    public static void launchIntent(@NonNull final String action) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5201c8387621a0f44d57fbdbe02953b693549e1a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1ODA3Nw==", "bodyText": "added the javadoc.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r534658077", "createdAt": "2020-12-03T04:24:11Z", "author": {"login": "kkrishnareddy"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/utils/CommonUtils.java", "diffHunk": "@@ -159,4 +159,11 @@ public static void copyFileToFolderInSdCard(final File file, @Nullable final Str\n         AdbShellUtils.executeShellCommand(\"mkdir -p \" + destinationPath);\n         AdbShellUtils.executeShellCommandAsCurrentPackage(\"cp \" + filePath + \" \" + destFilePath);\n     }\n+\n+    public static void launchIntent(@NonNull final String action) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MDQ4Nw=="}, "originalCommit": {"oid": "5201c8387621a0f44d57fbdbe02953b693549e1a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDU3NDMxOnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDowMTowNVrOH94gCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDowMTowNVrOH94gCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MDg5MQ==", "bodyText": "nit: add final to variables when possible", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r534650891", "createdAt": "2020-12-03T04:01:05Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package com.microsoft.identity.client.ui.automation.rules;\n+\n+import android.app.KeyguardManager;\n+import android.content.Context;\n+import android.os.Build;\n+import android.provider.Settings;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.uiautomator.UiDevice;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import static com.microsoft.identity.client.ui.automation.utils.CommonUtils.launchIntent;\n+\n+public class DevicePinSetupRule implements TestRule {\n+\n+    final Boolean isLocked = IsDeviceSecured();\n+\n+    @Override\n+    public Statement apply(final Statement base, final Description description) {\n+        return new Statement() {\n+            @Override\n+            public void evaluate() throws Throwable {\n+                if (!isLocked) {\n+                    setLock();\n+                }\n+                base.evaluate();\n+            }\n+        };\n+    }\n+\n+    private boolean IsDeviceSecured() {\n+        Context context = ApplicationProvider.getApplicationContext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5201c8387621a0f44d57fbdbe02953b693549e1a"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDU3NTc4OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDowMTozOFrOH94g2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDowMTozOFrOH94g2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MTA5OQ==", "bodyText": "do we need this member variable? Can we just not call the isDeviceSecured method whenever needed?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r534651099", "createdAt": "2020-12-03T04:01:38Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package com.microsoft.identity.client.ui.automation.rules;\n+\n+import android.app.KeyguardManager;\n+import android.content.Context;\n+import android.os.Build;\n+import android.provider.Settings;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.uiautomator.UiDevice;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import static com.microsoft.identity.client.ui.automation.utils.CommonUtils.launchIntent;\n+\n+public class DevicePinSetupRule implements TestRule {\n+\n+    final Boolean isLocked = IsDeviceSecured();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5201c8387621a0f44d57fbdbe02953b693549e1a"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDU3NjQ0OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDowMTo1OVrOH94hQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDowMTo1OVrOH94hQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MTIwMA==", "bodyText": "Method names should start with lower case\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private boolean IsDeviceSecured() {\n          \n          \n            \n                private boolean isDeviceSecured() {", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r534651200", "createdAt": "2020-12-03T04:01:59Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package com.microsoft.identity.client.ui.automation.rules;\n+\n+import android.app.KeyguardManager;\n+import android.content.Context;\n+import android.os.Build;\n+import android.provider.Settings;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.uiautomator.UiDevice;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import static com.microsoft.identity.client.ui.automation.utils.CommonUtils.launchIntent;\n+\n+public class DevicePinSetupRule implements TestRule {\n+\n+    final Boolean isLocked = IsDeviceSecured();\n+\n+    @Override\n+    public Statement apply(final Statement base, final Description description) {\n+        return new Statement() {\n+            @Override\n+            public void evaluate() throws Throwable {\n+                if (!isLocked) {\n+                    setLock();\n+                }\n+                base.evaluate();\n+            }\n+        };\n+    }\n+\n+    private boolean IsDeviceSecured() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5201c8387621a0f44d57fbdbe02953b693549e1a"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MDQzNDU4OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNzo1NToyN1rOIC76pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNzo1NToyN1rOIC76pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk0OTczMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final String password = \"1234\";\n          \n          \n            \n                static final String PASSWORD = \"1234\";", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r539949733", "createdAt": "2020-12-10T07:55:27Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "diffHunk": "@@ -0,0 +1,103 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.rules;\n+\n+import android.app.KeyguardManager;\n+import android.content.Context;\n+import android.os.Build;\n+import android.provider.Settings;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.uiautomator.UiDevice;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import static com.microsoft.identity.client.ui.automation.utils.CommonUtils.launchIntent;\n+\n+/**\n+ * A test rule that allows you to setup PIN for the device if the pin is not setup and\n+ * if it is already setup then it will keep the same PIN.\n+ */\n+public class DevicePinSetupRule implements TestRule {\n+\n+    final String password = \"1234\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1673c06eb2f359c4151a1062f4399daed43a00bb"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MDQzODg1OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/utils/CommonUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNzo1NjozMVrOIC789g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNzo1NjozMVrOIC789g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk1MDMyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * it will launch activity specified in the action.\n          \n          \n            \n                 * Launches an activity specified by the action.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r539950326", "createdAt": "2020-12-10T07:56:31Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/utils/CommonUtils.java", "diffHunk": "@@ -159,4 +159,15 @@ public static void copyFileToFolderInSdCard(final File file, @Nullable final Str\n         AdbShellUtils.executeShellCommand(\"mkdir -p \" + destinationPath);\n         AdbShellUtils.executeShellCommandAsCurrentPackage(\"cp \" + filePath + \" \" + destFilePath);\n     }\n+\n+    /**\n+     * it will launch activity specified in the action.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1673c06eb2f359c4151a1062f4399daed43a00bb"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMjQzNzE5OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxODoyMTowNlrOIEnM4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzoxODoxOFrOIEu0fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTcwNzQ4OQ==", "bodyText": "I did not get NO button on my device and therefore test is failing....for me it goes straight to entering the PIN.\nBy the way, I think this entire method needs to move to the ISettings class and change logic based on device", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r541707489", "createdAt": "2020-12-12T18:21:06Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "diffHunk": "@@ -0,0 +1,103 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.rules;\n+\n+import android.app.KeyguardManager;\n+import android.content.Context;\n+import android.os.Build;\n+import android.provider.Settings;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.uiautomator.UiDevice;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import static com.microsoft.identity.client.ui.automation.utils.CommonUtils.launchIntent;\n+\n+/**\n+ * A test rule that allows you to setup PIN for the device if the pin is not setup and\n+ * if it is already setup then it will keep the same PIN.\n+ */\n+public class DevicePinSetupRule implements TestRule {\n+\n+    static final String PASSWORD = \"1234\";\n+\n+    @Override\n+    public Statement apply(final Statement base, final Description description) {\n+        return new Statement() {\n+            @Override\n+            public void evaluate() throws Throwable {\n+                if (!isDeviceSecured()) {\n+                    setLock();\n+                }\n+                base.evaluate();\n+            }\n+        };\n+    }\n+\n+    private boolean isDeviceSecured() {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        final KeyguardManager keyguardManager =\n+                (KeyguardManager) context.getSystemService(Context.KEYGUARD_SERVICE);\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n+            return keyguardManager.isDeviceSecure();\n+        }\n+        return keyguardManager.isKeyguardSecure();\n+    }\n+\n+    private void setLock() throws UiObjectNotFoundException {\n+\n+        final UiDevice device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());\n+        launchIntent(Settings.ACTION_SECURITY_SETTINGS);\n+\n+        final UiObject screenLock = UiAutomatorUtils.obtainUiObjectWithText(\"Screen lock\");\n+        Assert.assertTrue(screenLock.exists());\n+        screenLock.click();\n+        final UiObject pinButton = UiAutomatorUtils.obtainUiObjectWithExactText(\"PIN\");\n+        Assert.assertTrue(pinButton.exists());\n+        pinButton.click();\n+        final UiObject noButton = UiAutomatorUtils.obtainUiObjectWithExactText(\"NO\");\n+        Assert.assertTrue(noButton.exists());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9350b0150d2ed3987b759340c727af6fdb31cd7e"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTcwOTE0OQ==", "bodyText": "Why are we clicking on the NO button here? (I don't see such a button)", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r541709149", "createdAt": "2020-12-12T18:23:46Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "diffHunk": "@@ -0,0 +1,103 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.rules;\n+\n+import android.app.KeyguardManager;\n+import android.content.Context;\n+import android.os.Build;\n+import android.provider.Settings;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.uiautomator.UiDevice;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import static com.microsoft.identity.client.ui.automation.utils.CommonUtils.launchIntent;\n+\n+/**\n+ * A test rule that allows you to setup PIN for the device if the pin is not setup and\n+ * if it is already setup then it will keep the same PIN.\n+ */\n+public class DevicePinSetupRule implements TestRule {\n+\n+    static final String PASSWORD = \"1234\";\n+\n+    @Override\n+    public Statement apply(final Statement base, final Description description) {\n+        return new Statement() {\n+            @Override\n+            public void evaluate() throws Throwable {\n+                if (!isDeviceSecured()) {\n+                    setLock();\n+                }\n+                base.evaluate();\n+            }\n+        };\n+    }\n+\n+    private boolean isDeviceSecured() {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        final KeyguardManager keyguardManager =\n+                (KeyguardManager) context.getSystemService(Context.KEYGUARD_SERVICE);\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n+            return keyguardManager.isDeviceSecure();\n+        }\n+        return keyguardManager.isKeyguardSecure();\n+    }\n+\n+    private void setLock() throws UiObjectNotFoundException {\n+\n+        final UiDevice device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());\n+        launchIntent(Settings.ACTION_SECURITY_SETTINGS);\n+\n+        final UiObject screenLock = UiAutomatorUtils.obtainUiObjectWithText(\"Screen lock\");\n+        Assert.assertTrue(screenLock.exists());\n+        screenLock.click();\n+        final UiObject pinButton = UiAutomatorUtils.obtainUiObjectWithExactText(\"PIN\");\n+        Assert.assertTrue(pinButton.exists());\n+        pinButton.click();\n+        final UiObject noButton = UiAutomatorUtils.obtainUiObjectWithExactText(\"NO\");\n+        Assert.assertTrue(noButton.exists());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTcwNzQ4OQ=="}, "originalCommit": {"oid": "9350b0150d2ed3987b759340c727af6fdb31cd7e"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgyMTExNQ==", "bodyText": "In India, I think we are getting it no Button.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r541821115", "createdAt": "2020-12-13T01:52:42Z", "author": {"login": "kkrishnareddy"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "diffHunk": "@@ -0,0 +1,103 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.rules;\n+\n+import android.app.KeyguardManager;\n+import android.content.Context;\n+import android.os.Build;\n+import android.provider.Settings;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.uiautomator.UiDevice;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import static com.microsoft.identity.client.ui.automation.utils.CommonUtils.launchIntent;\n+\n+/**\n+ * A test rule that allows you to setup PIN for the device if the pin is not setup and\n+ * if it is already setup then it will keep the same PIN.\n+ */\n+public class DevicePinSetupRule implements TestRule {\n+\n+    static final String PASSWORD = \"1234\";\n+\n+    @Override\n+    public Statement apply(final Statement base, final Description description) {\n+        return new Statement() {\n+            @Override\n+            public void evaluate() throws Throwable {\n+                if (!isDeviceSecured()) {\n+                    setLock();\n+                }\n+                base.evaluate();\n+            }\n+        };\n+    }\n+\n+    private boolean isDeviceSecured() {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        final KeyguardManager keyguardManager =\n+                (KeyguardManager) context.getSystemService(Context.KEYGUARD_SERVICE);\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n+            return keyguardManager.isDeviceSecure();\n+        }\n+        return keyguardManager.isKeyguardSecure();\n+    }\n+\n+    private void setLock() throws UiObjectNotFoundException {\n+\n+        final UiDevice device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());\n+        launchIntent(Settings.ACTION_SECURITY_SETTINGS);\n+\n+        final UiObject screenLock = UiAutomatorUtils.obtainUiObjectWithText(\"Screen lock\");\n+        Assert.assertTrue(screenLock.exists());\n+        screenLock.click();\n+        final UiObject pinButton = UiAutomatorUtils.obtainUiObjectWithExactText(\"PIN\");\n+        Assert.assertTrue(pinButton.exists());\n+        pinButton.click();\n+        final UiObject noButton = UiAutomatorUtils.obtainUiObjectWithExactText(\"NO\");\n+        Assert.assertTrue(noButton.exists());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTcwNzQ4OQ=="}, "originalCommit": {"oid": "9350b0150d2ed3987b759340c727af6fdb31cd7e"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgyMjY1OQ==", "bodyText": "Okay let's remove the no button click....and also let's move this entire logic to ISettings so we can change resource ids etc...based on API level and device", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r541822659", "createdAt": "2020-12-13T02:04:37Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "diffHunk": "@@ -0,0 +1,103 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.rules;\n+\n+import android.app.KeyguardManager;\n+import android.content.Context;\n+import android.os.Build;\n+import android.provider.Settings;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.uiautomator.UiDevice;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import static com.microsoft.identity.client.ui.automation.utils.CommonUtils.launchIntent;\n+\n+/**\n+ * A test rule that allows you to setup PIN for the device if the pin is not setup and\n+ * if it is already setup then it will keep the same PIN.\n+ */\n+public class DevicePinSetupRule implements TestRule {\n+\n+    static final String PASSWORD = \"1234\";\n+\n+    @Override\n+    public Statement apply(final Statement base, final Description description) {\n+        return new Statement() {\n+            @Override\n+            public void evaluate() throws Throwable {\n+                if (!isDeviceSecured()) {\n+                    setLock();\n+                }\n+                base.evaluate();\n+            }\n+        };\n+    }\n+\n+    private boolean isDeviceSecured() {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        final KeyguardManager keyguardManager =\n+                (KeyguardManager) context.getSystemService(Context.KEYGUARD_SERVICE);\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n+            return keyguardManager.isDeviceSecure();\n+        }\n+        return keyguardManager.isKeyguardSecure();\n+    }\n+\n+    private void setLock() throws UiObjectNotFoundException {\n+\n+        final UiDevice device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());\n+        launchIntent(Settings.ACTION_SECURITY_SETTINGS);\n+\n+        final UiObject screenLock = UiAutomatorUtils.obtainUiObjectWithText(\"Screen lock\");\n+        Assert.assertTrue(screenLock.exists());\n+        screenLock.click();\n+        final UiObject pinButton = UiAutomatorUtils.obtainUiObjectWithExactText(\"PIN\");\n+        Assert.assertTrue(pinButton.exists());\n+        pinButton.click();\n+        final UiObject noButton = UiAutomatorUtils.obtainUiObjectWithExactText(\"NO\");\n+        Assert.assertTrue(noButton.exists());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTcwNzQ4OQ=="}, "originalCommit": {"oid": "9350b0150d2ed3987b759340c727af6fdb31cd7e"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMDc2Mw==", "bodyText": "For API 28 I am getting no Button, but for API 29 I am not getting any NO Button.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r541830763", "createdAt": "2020-12-13T03:07:18Z", "author": {"login": "kkrishnareddy"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "diffHunk": "@@ -0,0 +1,103 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.rules;\n+\n+import android.app.KeyguardManager;\n+import android.content.Context;\n+import android.os.Build;\n+import android.provider.Settings;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.uiautomator.UiDevice;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import static com.microsoft.identity.client.ui.automation.utils.CommonUtils.launchIntent;\n+\n+/**\n+ * A test rule that allows you to setup PIN for the device if the pin is not setup and\n+ * if it is already setup then it will keep the same PIN.\n+ */\n+public class DevicePinSetupRule implements TestRule {\n+\n+    static final String PASSWORD = \"1234\";\n+\n+    @Override\n+    public Statement apply(final Statement base, final Description description) {\n+        return new Statement() {\n+            @Override\n+            public void evaluate() throws Throwable {\n+                if (!isDeviceSecured()) {\n+                    setLock();\n+                }\n+                base.evaluate();\n+            }\n+        };\n+    }\n+\n+    private boolean isDeviceSecured() {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        final KeyguardManager keyguardManager =\n+                (KeyguardManager) context.getSystemService(Context.KEYGUARD_SERVICE);\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n+            return keyguardManager.isDeviceSecure();\n+        }\n+        return keyguardManager.isKeyguardSecure();\n+    }\n+\n+    private void setLock() throws UiObjectNotFoundException {\n+\n+        final UiDevice device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());\n+        launchIntent(Settings.ACTION_SECURITY_SETTINGS);\n+\n+        final UiObject screenLock = UiAutomatorUtils.obtainUiObjectWithText(\"Screen lock\");\n+        Assert.assertTrue(screenLock.exists());\n+        screenLock.click();\n+        final UiObject pinButton = UiAutomatorUtils.obtainUiObjectWithExactText(\"PIN\");\n+        Assert.assertTrue(pinButton.exists());\n+        pinButton.click();\n+        final UiObject noButton = UiAutomatorUtils.obtainUiObjectWithExactText(\"NO\");\n+        Assert.assertTrue(noButton.exists());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTcwNzQ4OQ=="}, "originalCommit": {"oid": "9350b0150d2ed3987b759340c727af6fdb31cd7e"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMTY2MQ==", "bodyText": "Moved the entire logic to ISettings. and it supports API 28 and API 29. and I didn't written logic for the Samsung device.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r541831661", "createdAt": "2020-12-13T03:13:49Z", "author": {"login": "kkrishnareddy"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "diffHunk": "@@ -0,0 +1,103 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.rules;\n+\n+import android.app.KeyguardManager;\n+import android.content.Context;\n+import android.os.Build;\n+import android.provider.Settings;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.uiautomator.UiDevice;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import static com.microsoft.identity.client.ui.automation.utils.CommonUtils.launchIntent;\n+\n+/**\n+ * A test rule that allows you to setup PIN for the device if the pin is not setup and\n+ * if it is already setup then it will keep the same PIN.\n+ */\n+public class DevicePinSetupRule implements TestRule {\n+\n+    static final String PASSWORD = \"1234\";\n+\n+    @Override\n+    public Statement apply(final Statement base, final Description description) {\n+        return new Statement() {\n+            @Override\n+            public void evaluate() throws Throwable {\n+                if (!isDeviceSecured()) {\n+                    setLock();\n+                }\n+                base.evaluate();\n+            }\n+        };\n+    }\n+\n+    private boolean isDeviceSecured() {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        final KeyguardManager keyguardManager =\n+                (KeyguardManager) context.getSystemService(Context.KEYGUARD_SERVICE);\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n+            return keyguardManager.isDeviceSecure();\n+        }\n+        return keyguardManager.isKeyguardSecure();\n+    }\n+\n+    private void setLock() throws UiObjectNotFoundException {\n+\n+        final UiDevice device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());\n+        launchIntent(Settings.ACTION_SECURITY_SETTINGS);\n+\n+        final UiObject screenLock = UiAutomatorUtils.obtainUiObjectWithText(\"Screen lock\");\n+        Assert.assertTrue(screenLock.exists());\n+        screenLock.click();\n+        final UiObject pinButton = UiAutomatorUtils.obtainUiObjectWithExactText(\"PIN\");\n+        Assert.assertTrue(pinButton.exists());\n+        pinButton.click();\n+        final UiObject noButton = UiAutomatorUtils.obtainUiObjectWithExactText(\"NO\");\n+        Assert.assertTrue(noButton.exists());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTcwNzQ4OQ=="}, "originalCommit": {"oid": "9350b0150d2ed3987b759340c727af6fdb31cd7e"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMjMxNw==", "bodyText": "Interesting....I did not get NO button for either API 28 or 29...so yeah probably a difference in behavior based on location....\nFor samsung device, you can skip it for now....I will add that logic in later", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r541832317", "createdAt": "2020-12-13T03:18:18Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "diffHunk": "@@ -0,0 +1,103 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.rules;\n+\n+import android.app.KeyguardManager;\n+import android.content.Context;\n+import android.os.Build;\n+import android.provider.Settings;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.uiautomator.UiDevice;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import static com.microsoft.identity.client.ui.automation.utils.CommonUtils.launchIntent;\n+\n+/**\n+ * A test rule that allows you to setup PIN for the device if the pin is not setup and\n+ * if it is already setup then it will keep the same PIN.\n+ */\n+public class DevicePinSetupRule implements TestRule {\n+\n+    static final String PASSWORD = \"1234\";\n+\n+    @Override\n+    public Statement apply(final Statement base, final Description description) {\n+        return new Statement() {\n+            @Override\n+            public void evaluate() throws Throwable {\n+                if (!isDeviceSecured()) {\n+                    setLock();\n+                }\n+                base.evaluate();\n+            }\n+        };\n+    }\n+\n+    private boolean isDeviceSecured() {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        final KeyguardManager keyguardManager =\n+                (KeyguardManager) context.getSystemService(Context.KEYGUARD_SERVICE);\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n+            return keyguardManager.isDeviceSecure();\n+        }\n+        return keyguardManager.isKeyguardSecure();\n+    }\n+\n+    private void setLock() throws UiObjectNotFoundException {\n+\n+        final UiDevice device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());\n+        launchIntent(Settings.ACTION_SECURITY_SETTINGS);\n+\n+        final UiObject screenLock = UiAutomatorUtils.obtainUiObjectWithText(\"Screen lock\");\n+        Assert.assertTrue(screenLock.exists());\n+        screenLock.click();\n+        final UiObject pinButton = UiAutomatorUtils.obtainUiObjectWithExactText(\"PIN\");\n+        Assert.assertTrue(pinButton.exists());\n+        pinButton.click();\n+        final UiObject noButton = UiAutomatorUtils.obtainUiObjectWithExactText(\"NO\");\n+        Assert.assertTrue(noButton.exists());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTcwNzQ4OQ=="}, "originalCommit": {"oid": "9350b0150d2ed3987b759340c727af6fdb31cd7e"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzQwMzk1OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/device/settings/ISettings.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzoxOTo1MVrOIEu1Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzoyMTo0OFrOIEu2aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMjU0Ng==", "bodyText": "Can we rename this to something like setPinOnDevice?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r541832546", "createdAt": "2020-12-13T03:19:51Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/device/settings/ISettings.java", "diffHunk": "@@ -87,4 +88,14 @@ void addWorkAccount(final ITestBroker expectedBroker,\n      * UI appears on the device. It will activate the admin for whichever admin requested the activation.\n      */\n     void activateAdmin();\n+\n+    /**\n+     * Adds screen lock to the device.\n+     */\n+    void addPinSetup() throws UiObjectNotFoundException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f584f76e802948e8225d17dcf9afe467a7306d6"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMjY4Nw==", "bodyText": "Also can we accept the PIN as a parameter to this method? Inside the method then we can just set whatever PIN was supplied as the argument", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r541832687", "createdAt": "2020-12-13T03:20:56Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/device/settings/ISettings.java", "diffHunk": "@@ -87,4 +88,14 @@ void addWorkAccount(final ITestBroker expectedBroker,\n      * UI appears on the device. It will activate the admin for whichever admin requested the activation.\n      */\n     void activateAdmin();\n+\n+    /**\n+     * Adds screen lock to the device.\n+     */\n+    void addPinSetup() throws UiObjectNotFoundException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMjU0Ng=="}, "originalCommit": {"oid": "6f584f76e802948e8225d17dcf9afe467a7306d6"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMjcwMw==", "bodyText": "I will rename it to setPinOnDevice.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r541832703", "createdAt": "2020-12-13T03:21:13Z", "author": {"login": "kkrishnareddy"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/device/settings/ISettings.java", "diffHunk": "@@ -87,4 +88,14 @@ void addWorkAccount(final ITestBroker expectedBroker,\n      * UI appears on the device. It will activate the admin for whichever admin requested the activation.\n      */\n     void activateAdmin();\n+\n+    /**\n+     * Adds screen lock to the device.\n+     */\n+    void addPinSetup() throws UiObjectNotFoundException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMjU0Ng=="}, "originalCommit": {"oid": "6f584f76e802948e8225d17dcf9afe467a7306d6"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMjgxMQ==", "bodyText": "So basically when you call this method in the rule, then you will pass in the pin value", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r541832811", "createdAt": "2020-12-13T03:21:48Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/device/settings/ISettings.java", "diffHunk": "@@ -87,4 +88,14 @@ void addWorkAccount(final ITestBroker expectedBroker,\n      * UI appears on the device. It will activate the admin for whichever admin requested the activation.\n      */\n     void activateAdmin();\n+\n+    /**\n+     * Adds screen lock to the device.\n+     */\n+    void addPinSetup() throws UiObjectNotFoundException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMjU0Ng=="}, "originalCommit": {"oid": "6f584f76e802948e8225d17dcf9afe467a7306d6"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzQxNTMxOnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzoyOToyOVrOIEu6HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzoyOToyOVrOIEu6HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMzc1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                static final String PASSWORD = \"1234\";\n          \n          \n            \n                static final String PIN = \"1234\";", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r541833756", "createdAt": "2020-12-13T03:29:29Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "diffHunk": "@@ -0,0 +1,80 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.rules;\n+\n+import android.app.KeyguardManager;\n+import android.content.Context;\n+import android.os.Build;\n+import android.provider.Settings;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.uiautomator.UiDevice;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+\n+import com.microsoft.identity.client.ui.automation.TestContext;\n+import com.microsoft.identity.client.ui.automation.device.settings.BaseSettings;\n+import com.microsoft.identity.client.ui.automation.device.settings.ISettings;\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import static com.microsoft.identity.client.ui.automation.utils.CommonUtils.launchIntent;\n+\n+/**\n+ * A test rule that allows you to setup PIN for the device if the pin is not setup and\n+ * if it is already setup then it will keep the same PIN.\n+ */\n+public class DevicePinSetupRule implements TestRule {\n+\n+    static final String PASSWORD = \"1234\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7962950872248f65f7d0570d43ad11840411dd5"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzQxNjg4OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzozMDoyOFrOIEu6xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzozMDoyOFrOIEu6xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMzkyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                TestContext.getTestContext().getTestDevice().getSettings().setPinOnDevice(PASSWORD);\n          \n          \n            \n                                TestContext.getTestContext().getTestDevice().getSettings().setPinOnDevice(PIN);", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r541833925", "createdAt": "2020-12-13T03:30:28Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/DevicePinSetupRule.java", "diffHunk": "@@ -0,0 +1,80 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.rules;\n+\n+import android.app.KeyguardManager;\n+import android.content.Context;\n+import android.os.Build;\n+import android.provider.Settings;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.uiautomator.UiDevice;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+\n+import com.microsoft.identity.client.ui.automation.TestContext;\n+import com.microsoft.identity.client.ui.automation.device.settings.BaseSettings;\n+import com.microsoft.identity.client.ui.automation.device.settings.ISettings;\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import static com.microsoft.identity.client.ui.automation.utils.CommonUtils.launchIntent;\n+\n+/**\n+ * A test rule that allows you to setup PIN for the device if the pin is not setup and\n+ * if it is already setup then it will keep the same PIN.\n+ */\n+public class DevicePinSetupRule implements TestRule {\n+\n+    static final String PIN = \"1234\";\n+\n+    @Override\n+    public Statement apply(final Statement base, final Description description) {\n+        return new Statement() {\n+            @Override\n+            public void evaluate() throws Throwable {\n+                if (!isDeviceSecured()) {\n+                    TestContext.getTestContext().getTestDevice().getSettings().setPinOnDevice(PASSWORD);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8c816fe602e2071b53c4a80f3b6e97ecb8cba75"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzQyNDI4OnYy", "diffSide": "RIGHT", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/device/settings/GoogleSettings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzozNjo0NVrOIEu92Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzozNjo0NVrOIEu92Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzNDcxMw==", "bodyText": "That's how it seems to come up on my Pixel 3 (there may be difference in API 29 on Pixel 2 vs 3)....let's change it to this to get it to work on Pixel 3\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        final UiObject doneButton = UiAutomatorUtils.obtainUiObjectWithExactText(\"DONE\");\n          \n          \n            \n                        final UiObject doneButton = UiAutomatorUtils.obtainUiObjectWithExactText(\"Done\");", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1142#discussion_r541834713", "createdAt": "2020-12-13T03:36:45Z", "author": {"login": "shahzaibj"}, "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/device/settings/GoogleSettings.java", "diffHunk": "@@ -240,6 +240,32 @@ private UiObject obtainDisableAdminButton(final DeviceAdmin deviceAdmin) {\n         );\n     }\n \n+    @Override\n+    public void setPinOnDevice(final String password) throws UiObjectNotFoundException {\n+        UiDevice device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());\n+        launchScreenLockPage();\n+        final UiObject screenLock = UiAutomatorUtils.obtainUiObjectWithText(\"Screen lock\");\n+        Assert.assertTrue(screenLock.exists());\n+        screenLock.click();\n+        final UiObject pinButton = UiAutomatorUtils.obtainUiObjectWithExactText(\"PIN\");\n+        Assert.assertTrue(pinButton.exists());\n+        pinButton.click();\n+        UiAutomatorUtils.handleInput(\"com.android.settings:id/password_entry\", password);\n+        device.pressEnter();\n+        UiAutomatorUtils.handleInput(\"com.android.settings:id/password_entry\", password);\n+        device.pressEnter();\n+        handleDoneButton();\n+    }\n+\n+    private void handleDoneButton() throws UiObjectNotFoundException {\n+        if (android.os.Build.VERSION.SDK_INT == 28) {\n+            UiAutomatorUtils.handleButtonClick(\"com.android.settings:id/redaction_done_button\");\n+        } else {\n+            final UiObject doneButton = UiAutomatorUtils.obtainUiObjectWithExactText(\"DONE\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37ff6983fd55651ff8a1911140e570921195239f"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2113, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}