{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4NDM5NTIx", "number": 1003, "title": "Android/token manipulation", "bodyText": "utility function to edit the all the tokens stored in the cache.", "createdAt": "2020-08-16T12:36:58Z", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003", "merged": true, "mergeCommit": {"oid": "6ac088b262abab90fba382f739f5a3208617cf5e"}, "closed": true, "closedAt": "2020-08-19T06:27:37Z", "author": {"login": "jaiswalh"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-OBt6AH2gAyNDY4NDM5NTIxOjRjYjAyZTc2ZjEzYTJmYzBlNmQ4OWU0MDgwMzMwYmY4YjhiMzhlZjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAVO_egH2gAyNDY4NDM5NTIxOmE5ZjZmMjA5MmUxOWE5ZmExYjJmNmViMmRmMTJjNDhmOTE4M2E4YzI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4cb02e76f13a2fc0e6d89e4080330bf8b8b38ef9", "author": {"user": {"login": "jaiswalh", "name": "Himanshu Jaiswal"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/4cb02e76f13a2fc0e6d89e4080330bf8b8b38ef9", "committedDate": "2020-08-12T16:29:56Z", "message": "added utility function for token manipulation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8a8de2b534cee95b91b926a4a8d4ec79bf5a931", "author": {"user": {"login": "jaiswalh", "name": "Himanshu Jaiswal"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/c8a8de2b534cee95b91b926a4a8d4ec79bf5a931", "committedDate": "2020-08-12T20:21:33Z", "message": "added comments and modify the editTokenSignature method."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7db0944f08e79309de2d9675d7eaf2c2a23aec17", "author": {"user": {"login": "jaiswalh", "name": "Himanshu Jaiswal"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/7db0944f08e79309de2d9675d7eaf2c2a23aec17", "committedDate": "2020-08-16T12:38:23Z", "message": "Merge branch 'dev' into android/token_manipulation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MjQ2Mzg0", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#pullrequestreview-468246384", "createdAt": "2020-08-17T07:59:05Z", "commit": {"oid": "7db0944f08e79309de2d9675d7eaf2c2a23aec17"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNzo1OTowNlrOHBeR-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODo1MToyMFrOHBgAFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwNjc0Ng==", "bodyText": "nit: small case for 1st letter for SharedPrefName.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471306746", "createdAt": "2020-08-17T07:59:06Z", "author": {"login": "saugup-ms"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,159 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    private static boolean isAccessToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.AccessToken;\n+    }\n+\n+    private static boolean isRefreshToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.RefreshToken;\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param SharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String SharedPrefName, Predicate<String> predicate, Function<String, String> editor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7db0944f08e79309de2d9675d7eaf2c2a23aec17"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMxMjU1Nw==", "bodyText": "Do you want to add a check if '.' is not found and 3 segments are not there? Put Assert there", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471312557", "createdAt": "2020-08-17T08:10:44Z", "author": {"login": "saugup-ms"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,159 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    private static boolean isAccessToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.AccessToken;\n+    }\n+\n+    private static boolean isRefreshToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.RefreshToken;\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param SharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String SharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = getSharedPreferences(SharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param SharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String SharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(SharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param SharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String SharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(SharedPrefName, predicate, editor);\n+    }\n+\n+    private static SharedPreferences getSharedPreferences(final String sharedPrefName) {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        return context.getSharedPreferences(sharedPrefName, Context.MODE_PRIVATE);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String editTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        String signature = segments[segments.length - 1];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7db0944f08e79309de2d9675d7eaf2c2a23aec17"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMzNDE5OQ==", "bodyText": "Is there any reason of randomization to 26? It can be any character other than 'a' to 'z'", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471334199", "createdAt": "2020-08-17T08:49:59Z", "author": {"login": "saugup-ms"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,159 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    private static boolean isAccessToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.AccessToken;\n+    }\n+\n+    private static boolean isRefreshToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.RefreshToken;\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param SharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String SharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = getSharedPreferences(SharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param SharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String SharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(SharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param SharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String SharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(SharedPrefName, predicate, editor);\n+    }\n+\n+    private static SharedPreferences getSharedPreferences(final String sharedPrefName) {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        return context.getSharedPreferences(sharedPrefName, Context.MODE_PRIVATE);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String editTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        String signature = segments[segments.length - 1];\n+\n+        StringBuilder sb = new StringBuilder(signature);\n+        Random rnd = new Random();\n+        int rndIndex = rnd.nextInt(sb.length());\n+        char charAtRndPosition = sb.charAt(rndIndex);\n+        char rndChar = (char) ('a' + rnd.nextInt(26));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7db0944f08e79309de2d9675d7eaf2c2a23aec17"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMzNDkzNQ==", "bodyText": "Can we avoid this loop? You can change the character at that index directly.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471334935", "createdAt": "2020-08-17T08:51:20Z", "author": {"login": "saugup-ms"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,159 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    private static boolean isAccessToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.AccessToken;\n+    }\n+\n+    private static boolean isRefreshToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.RefreshToken;\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param SharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String SharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = getSharedPreferences(SharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param SharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String SharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(SharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param SharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String SharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(SharedPrefName, predicate, editor);\n+    }\n+\n+    private static SharedPreferences getSharedPreferences(final String sharedPrefName) {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        return context.getSharedPreferences(sharedPrefName, Context.MODE_PRIVATE);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String editTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        String signature = segments[segments.length - 1];\n+\n+        StringBuilder sb = new StringBuilder(signature);\n+        Random rnd = new Random();\n+        int rndIndex = rnd.nextInt(sb.length());\n+        char charAtRndPosition = sb.charAt(rndIndex);\n+        char rndChar = (char) ('a' + rnd.nextInt(26));\n+\n+        while (charAtRndPosition == rndChar) {\n+            rndIndex = rnd.nextInt(sb.length());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7db0944f08e79309de2d9675d7eaf2c2a23aec17"}, "originalPosition": 150}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4NjI0Njg4", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#pullrequestreview-468624688", "createdAt": "2020-08-17T16:40:30Z", "commit": {"oid": "7db0944f08e79309de2d9675d7eaf2c2a23aec17"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjo0MDozMVrOHBwYDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjo0MDozMVrOHBwYDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYwMzIxNQ==", "bodyText": "Looks to be the same as this: https://github.com/AzureAD/microsoft-authentication-library-common-for-android/blob/dev/testutils/src/main/java/com/microsoft/identity/internal/testutils/TestUtils.java#L56\nIs there a need to duplicate it?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471603215", "createdAt": "2020-08-17T16:40:31Z", "author": {"login": "shahzaibj"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,159 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    private static boolean isAccessToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.AccessToken;\n+    }\n+\n+    private static boolean isRefreshToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.RefreshToken;\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param SharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String SharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = getSharedPreferences(SharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param SharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String SharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(SharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param SharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String SharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(SharedPrefName, predicate, editor);\n+    }\n+\n+    private static SharedPreferences getSharedPreferences(final String sharedPrefName) {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        return context.getSharedPreferences(sharedPrefName, Context.MODE_PRIVATE);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7db0944f08e79309de2d9675d7eaf2c2a23aec17"}, "originalPosition": 130}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4NjI1MjUz", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#pullrequestreview-468625253", "createdAt": "2020-08-17T16:41:18Z", "commit": {"oid": "7db0944f08e79309de2d9675d7eaf2c2a23aec17"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjo0MToxOFrOHBwZzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjo0MToxOFrOHBwZzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYwMzY2MA==", "bodyText": "Looks to be the same as this: https://github.com/AzureAD/microsoft-authentication-library-common-for-android/blob/dev/testutils/src/main/java/com/microsoft/identity/internal/testutils/TestUtils.java#L52\nIs there a need to duplicate it?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471603660", "createdAt": "2020-08-17T16:41:18Z", "author": {"login": "shahzaibj"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,159 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    private static boolean isAccessToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.AccessToken;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7db0944f08e79309de2d9675d7eaf2c2a23aec17"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4NjI2NTk2", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#pullrequestreview-468626596", "createdAt": "2020-08-17T16:43:03Z", "commit": {"oid": "7db0944f08e79309de2d9675d7eaf2c2a23aec17"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b89f4c7a8807eb7981b8ae0378501d20effec2d", "author": {"user": {"login": "jaiswalh", "name": "Himanshu Jaiswal"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/9b89f4c7a8807eb7981b8ae0378501d20effec2d", "committedDate": "2020-08-17T18:22:47Z", "message": "using existing methods in TestUtils to avoid duplication of method."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c", "author": {"user": {"login": "jaiswalh", "name": "Himanshu Jaiswal"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/980922f81e0922bbc82b8252e614215451f96d2c", "committedDate": "2020-08-17T18:24:20Z", "message": "Merge remote-tracking branch 'origin/android/token_manipulation' into android/token_manipulation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4NjA4MjA3", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#pullrequestreview-468608207", "createdAt": "2020-08-17T16:18:17Z", "commit": {"oid": "7db0944f08e79309de2d9675d7eaf2c2a23aec17"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjoxODoxN1rOHBvmCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMjowMjoxMlrOHB8WLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU5MDQxMA==", "bodyText": "anything in base64, right?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471590410", "createdAt": "2020-08-17T16:18:17Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,159 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    private static boolean isAccessToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.AccessToken;\n+    }\n+\n+    private static boolean isRefreshToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.RefreshToken;\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param SharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String SharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = getSharedPreferences(SharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param SharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String SharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(SharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param SharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String SharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(SharedPrefName, predicate, editor);\n+    }\n+\n+    private static SharedPreferences getSharedPreferences(final String sharedPrefName) {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        return context.getSharedPreferences(sharedPrefName, Context.MODE_PRIVATE);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String editTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        String signature = segments[segments.length - 1];\n+\n+        StringBuilder sb = new StringBuilder(signature);\n+        Random rnd = new Random();\n+        int rndIndex = rnd.nextInt(sb.length());\n+        char charAtRndPosition = sb.charAt(rndIndex);\n+        char rndChar = (char) ('a' + rnd.nextInt(26));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMzNDE5OQ=="}, "originalCommit": {"oid": "7db0944f08e79309de2d9675d7eaf2c2a23aec17"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc5ODE5OQ==", "bodyText": "A head-of-class javadoc section would be nice-to-have here.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471798199", "createdAt": "2020-08-17T21:59:22Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc5ODM3Mg==", "bodyText": "public members should have documentation.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471798372", "createdAt": "2020-08-17T21:59:52Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc5ODY4NA==", "bodyText": "this should probably be public, with appropriate documentation, so that people can implement it.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471798684", "createdAt": "2020-08-17T22:00:31Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc5OTM0MA==", "bodyText": "nit: maybe randomizeCharacterInTokenSignature", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471799340", "createdAt": "2020-08-17T22:02:12Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String editTokenSignature(String string) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 126}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5MDA3Njg4", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#pullrequestreview-469007688", "createdAt": "2020-08-18T05:48:18Z", "commit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNTo0ODoxOFrOHCEQXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNTo1NToxMVrOHCEZLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkyODkyNg==", "bodyText": "for public method use PascalCasing", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471928926", "createdAt": "2020-08-18T05:48:18Z", "author": {"login": "dabbcomputers"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkyOTQwNw==", "bodyText": "is it sure that cacheValue will be instance of string? what if it is not? Should we log or fail?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471929407", "createdAt": "2020-08-18T05:49:40Z", "author": {"login": "dabbcomputers"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkyOTYzOA==", "bodyText": "same PascalCasing for public ones at all places.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471929638", "createdAt": "2020-08-18T05:50:16Z", "author": {"login": "dabbcomputers"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkyOTg3NA==", "bodyText": "avoid using short forms", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471929874", "createdAt": "2020-08-18T05:51:02Z", "author": {"login": "dabbcomputers"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String editTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        if (segments.length != 2) {\n+            throw new AssertionError(\"not JWT\");\n+        }\n+\n+        String signature = segments[segments.length - 1];\n+        StringBuilder sb = new StringBuilder(signature);\n+        Random rnd = new Random();\n+        int rndIndex = rnd.nextInt(sb.length());\n+        char charAtRndPosition = sb.charAt(rndIndex);\n+        char rndChar = (char) ('a' + rnd.nextInt(26));\n+\n+        if (charAtRndPosition == rndChar) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkyOTkzNQ==", "bodyText": "significant name here", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471929935", "createdAt": "2020-08-18T05:51:13Z", "author": {"login": "dabbcomputers"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String editTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        if (segments.length != 2) {\n+            throw new AssertionError(\"not JWT\");\n+        }\n+\n+        String signature = segments[segments.length - 1];\n+        StringBuilder sb = new StringBuilder(signature);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkzMDc4OA==", "bodyText": "this can go outside 'a' to 'z' range", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471930788", "createdAt": "2020-08-18T05:54:02Z", "author": {"login": "dabbcomputers"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String editTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        if (segments.length != 2) {\n+            throw new AssertionError(\"not JWT\");\n+        }\n+\n+        String signature = segments[segments.length - 1];\n+        StringBuilder sb = new StringBuilder(signature);\n+        Random rnd = new Random();\n+        int rndIndex = rnd.nextInt(sb.length());\n+        char charAtRndPosition = sb.charAt(rndIndex);\n+        char rndChar = (char) ('a' + rnd.nextInt(26));\n+\n+        if (charAtRndPosition == rndChar) {\n+            rndChar = (char) (charAtRndPosition + rnd.nextInt(26));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkzMTE4MQ==", "bodyText": "we know that there will be 2 segment then its better to use index to avoid confusion.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471931181", "createdAt": "2020-08-18T05:55:11Z", "author": {"login": "dabbcomputers"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String editTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        if (segments.length != 2) {\n+            throw new AssertionError(\"not JWT\");\n+        }\n+\n+        String signature = segments[segments.length - 1];\n+        StringBuilder sb = new StringBuilder(signature);\n+        Random rnd = new Random();\n+        int rndIndex = rnd.nextInt(sb.length());\n+        char charAtRndPosition = sb.charAt(rndIndex);\n+        char rndChar = (char) ('a' + rnd.nextInt(26));\n+\n+        if (charAtRndPosition == rndChar) {\n+            rndChar = (char) (charAtRndPosition + rnd.nextInt(26));\n+        }\n+\n+        sb.setCharAt(rndIndex, rndChar);\n+        segments[segments.length - 1] = sb.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 144}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3", "author": {"user": {"login": "jaiswalh", "name": "Himanshu Jaiswal"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3", "committedDate": "2020-08-18T15:54:46Z", "message": "Added java documentation for the public methods and updated logic of randomizeCharacterInTokenSignature method."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NjEzMzE4", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#pullrequestreview-469613318", "createdAt": "2020-08-18T16:14:23Z", "commit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxNDoyM1rOHCb5Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxNDoyM1rOHCb5Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxNjI0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n          \n          \n            \n                public void editAllTokenInCache(@NonNull final String sharedPrefName, @NonNull final Predicate<String> predicate, @NonNull final Function<String, String> editor) {", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472316242", "createdAt": "2020-08-18T16:14:23Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NjE0NjI4", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#pullrequestreview-469614628", "createdAt": "2020-08-18T16:15:59Z", "commit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxNTo1OVrOHCb9XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxNTo1OVrOHCb9XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxNzI3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n          \n          \n            \n                    SharedPreferences.Editor prefEditor = sharedPref.edit();\n          \n          \n            \n                    Map<String, ?> cacheEntries = sharedPref.getAll();\n          \n          \n            \n                    final SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n          \n          \n            \n                    final SharedPreferences.Editor prefEditor = sharedPref.edit();\n          \n          \n            \n                    final Map<String, ?> cacheEntries = sharedPref.getAll();", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472317277", "createdAt": "2020-08-18T16:15:59Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NjE0OTY3", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#pullrequestreview-469614967", "createdAt": "2020-08-18T16:16:23Z", "commit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxNjoyM1rOHCb-Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxNjoyM1rOHCb-Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxNzU0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n          \n          \n            \n                    for (final Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472317542", "createdAt": "2020-08-18T16:16:23Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NjE1Mjgz", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#pullrequestreview-469615283", "createdAt": "2020-08-18T16:16:45Z", "commit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxNjo0NlrOHCb_dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxNjo0NlrOHCb_dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxNzgxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String keyToEdit = cacheEntry.getKey();\n          \n          \n            \n                        if (predicate.test(keyToEdit)) {\n          \n          \n            \n                            Object cacheValue = cacheEntries.get(keyToEdit);\n          \n          \n            \n                        final String keyToEdit = cacheEntry.getKey();\n          \n          \n            \n                        if (predicate.test(keyToEdit)) {\n          \n          \n            \n                            final Object cacheValue = cacheEntries.get(keyToEdit);", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472317813", "createdAt": "2020-08-18T16:16:46Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NjE1NTU1", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#pullrequestreview-469615555", "createdAt": "2020-08-18T16:17:04Z", "commit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxNzowNFrOHCcAPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxNzowNFrOHCcAPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxODAxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n          \n          \n            \n                                final Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472318013", "createdAt": "2020-08-18T16:17:04Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NjE1OTYy", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#pullrequestreview-469615962", "createdAt": "2020-08-18T16:17:34Z", "commit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxNzozNFrOHCcBZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxNzozNFrOHCcBZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxODMwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n          \n          \n            \n                public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, @NonNull final Function<String, String> editor) {", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472318308", "createdAt": "2020-08-18T16:17:34Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NjE2Mjg2", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#pullrequestreview-469616286", "createdAt": "2020-08-18T16:17:54Z", "commit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxNzo1NFrOHCcCRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxNzo1NFrOHCcCRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxODUzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Predicate<String> predicate = new Predicate<String>() {\n          \n          \n            \n                    final Predicate<String> predicate = new Predicate<String>() {", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472318532", "createdAt": "2020-08-18T16:17:54Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NjE2NTE3", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#pullrequestreview-469616517", "createdAt": "2020-08-18T16:18:12Z", "commit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxODoxMlrOHCcC-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxODoxMlrOHCcC-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxODcxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Predicate<String> predicate = new Predicate<String>() {\n          \n          \n            \n                    final Predicate<String> predicate = new Predicate<String>() {", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472318714", "createdAt": "2020-08-18T16:18:12Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 120}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NjE2OTA1", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#pullrequestreview-469616905", "createdAt": "2020-08-18T16:18:37Z", "commit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxODozN1rOHCcECw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxODozN1rOHCcECw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxODk4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String[] segments = string.split(\".\");\n          \n          \n            \n                    final String[] segments = string.split(\".\");", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472318987", "createdAt": "2020-08-18T16:18:37Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String randomizeCharacterInTokenSignature(String string) {\n+        String[] segments = string.split(\".\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 138}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NjE3NTQ5", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#pullrequestreview-469617549", "createdAt": "2020-08-18T16:19:23Z", "commit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxOToyM1rOHCcF5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxOToyM1rOHCcF5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxOTQ2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String signature = segments[2];\n          \n          \n            \n                    final String signature = segments[2];", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472319462", "createdAt": "2020-08-18T16:19:23Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String randomizeCharacterInTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        if (segments.length != 3) {\n+            throw new AssertionError(\"not JWT\");\n+        }\n+\n+        // segment[2] = signature of token which is the 3rd part of the string.\n+        String signature = segments[2];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 144}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NjE3NzQ0", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#pullrequestreview-469617744", "createdAt": "2020-08-18T16:19:36Z", "commit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxOTozNlrOHCcGgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxOTozNlrOHCcGgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxOTYxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    StringBuilder signatureBuilder = new StringBuilder(signature);\n          \n          \n            \n                    final StringBuilder signatureBuilder = new StringBuilder(signature);", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472319619", "createdAt": "2020-08-18T16:19:36Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String randomizeCharacterInTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        if (segments.length != 3) {\n+            throw new AssertionError(\"not JWT\");\n+        }\n+\n+        // segment[2] = signature of token which is the 3rd part of the string.\n+        String signature = segments[2];\n+        StringBuilder signatureBuilder = new StringBuilder(signature);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 145}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NjE3OTY3", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#pullrequestreview-469617967", "createdAt": "2020-08-18T16:19:52Z", "commit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxOTo1M1rOHCcHNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxOTo1M1rOHCcHNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxOTc5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Random random = new Random();\n          \n          \n            \n                    final Random random = new Random();", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472319797", "createdAt": "2020-08-18T16:19:53Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String randomizeCharacterInTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        if (segments.length != 3) {\n+            throw new AssertionError(\"not JWT\");\n+        }\n+\n+        // segment[2] = signature of token which is the 3rd part of the string.\n+        String signature = segments[2];\n+        StringBuilder signatureBuilder = new StringBuilder(signature);\n+        Random random = new Random();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 146}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NjE4Njc5", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#pullrequestreview-469618679", "createdAt": "2020-08-18T16:20:17Z", "commit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoyMDoxOFrOHCcIdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoyMDoxOFrOHCcIdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMyMDExOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    int index = random.nextInt(signatureBuilder.length());\n          \n          \n            \n                    final int index = random.nextInt(signatureBuilder.length());", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472320118", "createdAt": "2020-08-18T16:20:18Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String randomizeCharacterInTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        if (segments.length != 3) {\n+            throw new AssertionError(\"not JWT\");\n+        }\n+\n+        // segment[2] = signature of token which is the 3rd part of the string.\n+        String signature = segments[2];\n+        StringBuilder signatureBuilder = new StringBuilder(signature);\n+        Random random = new Random();\n+        int index = random.nextInt(signatureBuilder.length());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 147}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NjE4OTg1", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#pullrequestreview-469618985", "createdAt": "2020-08-18T16:20:41Z", "commit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoyMDo0MVrOHCcJdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoyMDo0MVrOHCcJdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMyMDM3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String base64Chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n          \n          \n            \n                    final String base64Chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472320373", "createdAt": "2020-08-18T16:20:41Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String randomizeCharacterInTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        if (segments.length != 3) {\n+            throw new AssertionError(\"not JWT\");\n+        }\n+\n+        // segment[2] = signature of token which is the 3rd part of the string.\n+        String signature = segments[2];\n+        StringBuilder signatureBuilder = new StringBuilder(signature);\n+        Random random = new Random();\n+        int index = random.nextInt(signatureBuilder.length());\n+\n+        // get random character from the base64 string.\n+        String base64Chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 150}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc186282d1779a5cec52dc6142a69771c082df9c", "author": {"user": {"login": "jaiswalh", "name": "Himanshu Jaiswal"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/cc186282d1779a5cec52dc6142a69771c082df9c", "committedDate": "2020-08-18T20:15:40Z", "message": "Added final keyword for the variables used in the file."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5ODExODI0", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#pullrequestreview-469811824", "createdAt": "2020-08-18T20:36:28Z", "commit": {"oid": "cc186282d1779a5cec52dc6142a69771c082df9c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwMTQ0NjAw", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#pullrequestreview-470144600", "createdAt": "2020-08-19T05:56:14Z", "commit": {"oid": "cc186282d1779a5cec52dc6142a69771c082df9c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9f6f2092e19a9fa1b2f6eb2df12c48f9183a8c2", "author": {"user": {"login": "jaiswalh", "name": "Himanshu Jaiswal"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/a9f6f2092e19a9fa1b2f6eb2df12c48f9183a8c2", "committedDate": "2020-08-19T06:01:37Z", "message": "Merge branch 'dev' into android/token_manipulation"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1528, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}