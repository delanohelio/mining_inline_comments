{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwNDE5NDI1", "number": 964, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOToyMzoxMVrOEPRRdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOToyNjozOVrOEPRYDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDQ3MDk1OnYy", "diffSide": "RIGHT", "path": "common/src/androidTest/java/com/microsoft/identity/common/MsalOAuth2TokenCacheTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOToyMzoxMVrOGy5MXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOTo1OTozNVrOGy6q1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxOTAzOQ==", "bodyText": "Should we check that these have some particular value?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/964#discussion_r456019039", "createdAt": "2020-07-16T19:23:11Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/androidTest/java/com/microsoft/identity/common/MsalOAuth2TokenCacheTest.java", "diffHunk": "@@ -344,6 +389,28 @@ public void saveTokensWithAggregationSingleEntry() throws ClientException {\n         assertNotNull(entry.getRefreshToken());\n     }\n \n+    @Test\n+    public void saveTokensWithAggregationSingleEntryWithMalformedDataInCache() throws ClientException {\n+        // Prepopulate the cache with unparseable, junk data\n+        mSharedPreferencesFileManager.putString(JUNK_KEY, JUNK_VALUE);\n+\n+        final List<ICacheRecord> result = loadTestBundleIntoCacheWithAggregation(\n+                defaultTestBundleV2\n+        );\n+\n+        assertEquals(1, result.size());\n+\n+        final ICacheRecord entry = result.get(0);\n+\n+        assertNotNull(entry.getAccount());\n+        assertNotNull(entry.getIdToken());\n+        assertNotNull(entry.getAccessToken());\n+        assertNotNull(entry.getRefreshToken());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9295da14e2430c8d5273a27c6597dd3ad7ef036f"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA0MzIyMw==", "bodyText": "Refined in 895c3d2", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/964#discussion_r456043223", "createdAt": "2020-07-16T19:59:35Z", "author": {"login": "iambmelt"}, "path": "common/src/androidTest/java/com/microsoft/identity/common/MsalOAuth2TokenCacheTest.java", "diffHunk": "@@ -344,6 +389,28 @@ public void saveTokensWithAggregationSingleEntry() throws ClientException {\n         assertNotNull(entry.getRefreshToken());\n     }\n \n+    @Test\n+    public void saveTokensWithAggregationSingleEntryWithMalformedDataInCache() throws ClientException {\n+        // Prepopulate the cache with unparseable, junk data\n+        mSharedPreferencesFileManager.putString(JUNK_KEY, JUNK_VALUE);\n+\n+        final List<ICacheRecord> result = loadTestBundleIntoCacheWithAggregation(\n+                defaultTestBundleV2\n+        );\n+\n+        assertEquals(1, result.size());\n+\n+        final ICacheRecord entry = result.get(0);\n+\n+        assertNotNull(entry.getAccount());\n+        assertNotNull(entry.getIdToken());\n+        assertNotNull(entry.getAccessToken());\n+        assertNotNull(entry.getRefreshToken());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxOTAzOQ=="}, "originalCommit": {"oid": "9295da14e2430c8d5273a27c6597dd3ad7ef036f"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDQ4NzgwOnYy", "diffSide": "RIGHT", "path": "common/src/androidTest/java/com/microsoft/identity/common/MsalOAuth2TokenCacheTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOToyNjozOVrOGy5W8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDoxMzo0MlrOGy7GkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAyMTc0Ng==", "bodyText": "nit: if CredentialType is an enum, then you could replace with a switch.  Also, I think you can provide a string in the fail() method saying why it is failing and assist the poor person viewing the test failure to fix it.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/964#discussion_r456021746", "createdAt": "2020-07-16T19:26:39Z", "author": {"login": "AdamBJohnsonx"}, "path": "common/src/androidTest/java/com/microsoft/identity/common/MsalOAuth2TokenCacheTest.java", "diffHunk": "@@ -294,6 +297,48 @@ public void saveTokens() throws Exception {\n         assertEquals(defaultTestBundleV2.mGeneratedIdToken, ids.get(0));\n     }\n \n+    @Test\n+    public void saveTokensWithMalformedDataInCache() throws Exception {\n+        // Prepopulate the cache with unparseable, junk data\n+        mSharedPreferencesFileManager.putString(JUNK_KEY, JUNK_VALUE);\n+\n+        mOauth2TokenCache.save(\n+                mockStrategy,\n+                mockRequest,\n+                mockResponse\n+        );\n+\n+        final List<AccountRecord> accounts = accountCredentialCache.getAccounts();\n+        assertEquals(1, accounts.size());\n+        assertEquals(defaultTestBundleV2.mGeneratedAccount, accounts.get(0));\n+\n+        final List<Credential> credentials = accountCredentialCache.getCredentials();\n+        assertEquals(3, credentials.size());\n+\n+        final List<Credential> rts = new ArrayList<>();\n+        final List<Credential> ats = new ArrayList<>();\n+        final List<Credential> ids = new ArrayList<>();\n+\n+        for (final Credential credential : credentials) {\n+            if (credential.getCredentialType().equalsIgnoreCase(CredentialType.AccessToken.name())) {\n+                ats.add(credential);\n+            } else if (credential.getCredentialType().equalsIgnoreCase(CredentialType.RefreshToken.name())) {\n+                rts.add(credential);\n+            } else if (credential.getCredentialType().equalsIgnoreCase(CredentialType.IdToken.name())) {\n+                ids.add(credential);\n+            } else {\n+                fail();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9295da14e2430c8d5273a27c6597dd3ad7ef036f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA1MDMyMQ==", "bodyText": "Applied changes in 8d37efe, c6044e9", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/964#discussion_r456050321", "createdAt": "2020-07-16T20:13:42Z", "author": {"login": "iambmelt"}, "path": "common/src/androidTest/java/com/microsoft/identity/common/MsalOAuth2TokenCacheTest.java", "diffHunk": "@@ -294,6 +297,48 @@ public void saveTokens() throws Exception {\n         assertEquals(defaultTestBundleV2.mGeneratedIdToken, ids.get(0));\n     }\n \n+    @Test\n+    public void saveTokensWithMalformedDataInCache() throws Exception {\n+        // Prepopulate the cache with unparseable, junk data\n+        mSharedPreferencesFileManager.putString(JUNK_KEY, JUNK_VALUE);\n+\n+        mOauth2TokenCache.save(\n+                mockStrategy,\n+                mockRequest,\n+                mockResponse\n+        );\n+\n+        final List<AccountRecord> accounts = accountCredentialCache.getAccounts();\n+        assertEquals(1, accounts.size());\n+        assertEquals(defaultTestBundleV2.mGeneratedAccount, accounts.get(0));\n+\n+        final List<Credential> credentials = accountCredentialCache.getCredentials();\n+        assertEquals(3, credentials.size());\n+\n+        final List<Credential> rts = new ArrayList<>();\n+        final List<Credential> ats = new ArrayList<>();\n+        final List<Credential> ids = new ArrayList<>();\n+\n+        for (final Credential credential : credentials) {\n+            if (credential.getCredentialType().equalsIgnoreCase(CredentialType.AccessToken.name())) {\n+                ats.add(credential);\n+            } else if (credential.getCredentialType().equalsIgnoreCase(CredentialType.RefreshToken.name())) {\n+                rts.add(credential);\n+            } else if (credential.getCredentialType().equalsIgnoreCase(CredentialType.IdToken.name())) {\n+                ids.add(credential);\n+            } else {\n+                fail();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAyMTc0Ng=="}, "originalCommit": {"oid": "9295da14e2430c8d5273a27c6597dd3ad7ef036f"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2159, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}