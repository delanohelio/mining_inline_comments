{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4NDM5NTIx", "number": 1003, "reviewThreads": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNzo1OTowNlrOEY8CeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoyMDo0MVrOEZjrDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NTg0OTUzOnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNzo1OTowNlrOHBeR-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjozNDoyMVrOHBwKIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwNjc0Ng==", "bodyText": "nit: small case for 1st letter for SharedPrefName.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471306746", "createdAt": "2020-08-17T07:59:06Z", "author": {"login": "saugup-ms"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,159 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    private static boolean isAccessToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.AccessToken;\n+    }\n+\n+    private static boolean isRefreshToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.RefreshToken;\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param SharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String SharedPrefName, Predicate<String> predicate, Function<String, String> editor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7db0944f08e79309de2d9675d7eaf2c2a23aec17"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU5OTY0OQ==", "bodyText": "I have changed the letter in next commit.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471599649", "createdAt": "2020-08-17T16:34:21Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,159 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    private static boolean isAccessToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.AccessToken;\n+    }\n+\n+    private static boolean isRefreshToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.RefreshToken;\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param SharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String SharedPrefName, Predicate<String> predicate, Function<String, String> editor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwNjc0Ng=="}, "originalCommit": {"oid": "7db0944f08e79309de2d9675d7eaf2c2a23aec17"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NTg4NzYyOnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODoxMDo0NFrOHBeorQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjozNjo0NFrOHBwPoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMxMjU1Nw==", "bodyText": "Do you want to add a check if '.' is not found and 3 segments are not there? Put Assert there", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471312557", "createdAt": "2020-08-17T08:10:44Z", "author": {"login": "saugup-ms"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,159 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    private static boolean isAccessToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.AccessToken;\n+    }\n+\n+    private static boolean isRefreshToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.RefreshToken;\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param SharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String SharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = getSharedPreferences(SharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param SharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String SharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(SharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param SharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String SharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(SharedPrefName, predicate, editor);\n+    }\n+\n+    private static SharedPreferences getSharedPreferences(final String sharedPrefName) {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        return context.getSharedPreferences(sharedPrefName, Context.MODE_PRIVATE);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String editTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        String signature = segments[segments.length - 1];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7db0944f08e79309de2d9675d7eaf2c2a23aec17"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYwMTA1Nw==", "bodyText": "added AssertionError exception whenever string is not segmented into 3 parts by period. \".\".", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471601057", "createdAt": "2020-08-17T16:36:44Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,159 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    private static boolean isAccessToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.AccessToken;\n+    }\n+\n+    private static boolean isRefreshToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.RefreshToken;\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param SharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String SharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = getSharedPreferences(SharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param SharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String SharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(SharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param SharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String SharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(SharedPrefName, predicate, editor);\n+    }\n+\n+    private static SharedPreferences getSharedPreferences(final String sharedPrefName) {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        return context.getSharedPreferences(sharedPrefName, Context.MODE_PRIVATE);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String editTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        String signature = segments[segments.length - 1];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMxMjU1Nw=="}, "originalCommit": {"oid": "7db0944f08e79309de2d9675d7eaf2c2a23aec17"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NjAzMjU4OnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODo0OTo1OVrOHBf9Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjozMzo0NVrOHBwI5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMzNDE5OQ==", "bodyText": "Is there any reason of randomization to 26? It can be any character other than 'a' to 'z'", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471334199", "createdAt": "2020-08-17T08:49:59Z", "author": {"login": "saugup-ms"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,159 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    private static boolean isAccessToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.AccessToken;\n+    }\n+\n+    private static boolean isRefreshToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.RefreshToken;\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param SharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String SharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = getSharedPreferences(SharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param SharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String SharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(SharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param SharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String SharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(SharedPrefName, predicate, editor);\n+    }\n+\n+    private static SharedPreferences getSharedPreferences(final String sharedPrefName) {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        return context.getSharedPreferences(sharedPrefName, Context.MODE_PRIVATE);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String editTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        String signature = segments[segments.length - 1];\n+\n+        StringBuilder sb = new StringBuilder(signature);\n+        Random rnd = new Random();\n+        int rndIndex = rnd.nextInt(sb.length());\n+        char charAtRndPosition = sb.charAt(rndIndex);\n+        char rndChar = (char) ('a' + rnd.nextInt(26));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7db0944f08e79309de2d9675d7eaf2c2a23aec17"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU5MDQxMA==", "bodyText": "anything in base64, right?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471590410", "createdAt": "2020-08-17T16:18:17Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,159 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    private static boolean isAccessToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.AccessToken;\n+    }\n+\n+    private static boolean isRefreshToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.RefreshToken;\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param SharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String SharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = getSharedPreferences(SharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param SharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String SharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(SharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param SharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String SharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(SharedPrefName, predicate, editor);\n+    }\n+\n+    private static SharedPreferences getSharedPreferences(final String sharedPrefName) {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        return context.getSharedPreferences(sharedPrefName, Context.MODE_PRIVATE);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String editTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        String signature = segments[segments.length - 1];\n+\n+        StringBuilder sb = new StringBuilder(signature);\n+        Random rnd = new Random();\n+        int rndIndex = rnd.nextInt(sb.length());\n+        char charAtRndPosition = sb.charAt(rndIndex);\n+        char rndChar = (char) ('a' + rnd.nextInt(26));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMzNDE5OQ=="}, "originalCommit": {"oid": "7db0944f08e79309de2d9675d7eaf2c2a23aec17"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU5OTMzNQ==", "bodyText": "yes, character could vary beyond the \"a to z\" range however our purpose here is to just invalidate the signature and that could be done by changing any one character.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471599335", "createdAt": "2020-08-17T16:33:45Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,159 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    private static boolean isAccessToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.AccessToken;\n+    }\n+\n+    private static boolean isRefreshToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.RefreshToken;\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param SharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String SharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = getSharedPreferences(SharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param SharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String SharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(SharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param SharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String SharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(SharedPrefName, predicate, editor);\n+    }\n+\n+    private static SharedPreferences getSharedPreferences(final String sharedPrefName) {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        return context.getSharedPreferences(sharedPrefName, Context.MODE_PRIVATE);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String editTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        String signature = segments[segments.length - 1];\n+\n+        StringBuilder sb = new StringBuilder(signature);\n+        Random rnd = new Random();\n+        int rndIndex = rnd.nextInt(sb.length());\n+        char charAtRndPosition = sb.charAt(rndIndex);\n+        char rndChar = (char) ('a' + rnd.nextInt(26));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMzNDE5OQ=="}, "originalCommit": {"oid": "7db0944f08e79309de2d9675d7eaf2c2a23aec17"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NjAzNzU0OnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODo1MToyMFrOHBgAFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjozODo0NVrOHBwUBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMzNDkzNQ==", "bodyText": "Can we avoid this loop? You can change the character at that index directly.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471334935", "createdAt": "2020-08-17T08:51:20Z", "author": {"login": "saugup-ms"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,159 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    private static boolean isAccessToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.AccessToken;\n+    }\n+\n+    private static boolean isRefreshToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.RefreshToken;\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param SharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String SharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = getSharedPreferences(SharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param SharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String SharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(SharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param SharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String SharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(SharedPrefName, predicate, editor);\n+    }\n+\n+    private static SharedPreferences getSharedPreferences(final String sharedPrefName) {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        return context.getSharedPreferences(sharedPrefName, Context.MODE_PRIVATE);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String editTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        String signature = segments[segments.length - 1];\n+\n+        StringBuilder sb = new StringBuilder(signature);\n+        Random rnd = new Random();\n+        int rndIndex = rnd.nextInt(sb.length());\n+        char charAtRndPosition = sb.charAt(rndIndex);\n+        char rndChar = (char) ('a' + rnd.nextInt(26));\n+\n+        while (charAtRndPosition == rndChar) {\n+            rndIndex = rnd.nextInt(sb.length());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7db0944f08e79309de2d9675d7eaf2c2a23aec17"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYwMjE4Mw==", "bodyText": "It has been resolved in next commit. loop has been avoided by adding the next random position in the exiting character.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471602183", "createdAt": "2020-08-17T16:38:45Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,159 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    private static boolean isAccessToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.AccessToken;\n+    }\n+\n+    private static boolean isRefreshToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.RefreshToken;\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param SharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String SharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = getSharedPreferences(SharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param SharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String SharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(SharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param SharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String SharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(SharedPrefName, predicate, editor);\n+    }\n+\n+    private static SharedPreferences getSharedPreferences(final String sharedPrefName) {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        return context.getSharedPreferences(sharedPrefName, Context.MODE_PRIVATE);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String editTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        String signature = segments[segments.length - 1];\n+\n+        StringBuilder sb = new StringBuilder(signature);\n+        Random rnd = new Random();\n+        int rndIndex = rnd.nextInt(sb.length());\n+        char charAtRndPosition = sb.charAt(rndIndex);\n+        char rndChar = (char) ('a' + rnd.nextInt(26));\n+\n+        while (charAtRndPosition == rndChar) {\n+            rndIndex = rnd.nextInt(sb.length());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMzNDkzNQ=="}, "originalCommit": {"oid": "7db0944f08e79309de2d9675d7eaf2c2a23aec17"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Nzc3Njc3OnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjo0MDozMVrOHBwYDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODoyNTo1NlrOHB1GiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYwMzIxNQ==", "bodyText": "Looks to be the same as this: https://github.com/AzureAD/microsoft-authentication-library-common-for-android/blob/dev/testutils/src/main/java/com/microsoft/identity/internal/testutils/TestUtils.java#L56\nIs there a need to duplicate it?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471603215", "createdAt": "2020-08-17T16:40:31Z", "author": {"login": "shahzaibj"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,159 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    private static boolean isAccessToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.AccessToken;\n+    }\n+\n+    private static boolean isRefreshToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.RefreshToken;\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param SharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String SharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = getSharedPreferences(SharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param SharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String SharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(SharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param SharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String SharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(SharedPrefName, predicate, editor);\n+    }\n+\n+    private static SharedPreferences getSharedPreferences(final String sharedPrefName) {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        return context.getSharedPreferences(sharedPrefName, Context.MODE_PRIVATE);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7db0944f08e79309de2d9675d7eaf2c2a23aec17"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYxMjcxNA==", "bodyText": "Methods are private in TestUtils.java file and this file never used therefore I do not understand the purpose this file.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471612714", "createdAt": "2020-08-17T16:57:03Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,159 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    private static boolean isAccessToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.AccessToken;\n+    }\n+\n+    private static boolean isRefreshToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.RefreshToken;\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param SharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String SharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = getSharedPreferences(SharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param SharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String SharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(SharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param SharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String SharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(SharedPrefName, predicate, editor);\n+    }\n+\n+    private static SharedPreferences getSharedPreferences(final String sharedPrefName) {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        return context.getSharedPreferences(sharedPrefName, Context.MODE_PRIVATE);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYwMzIxNQ=="}, "originalCommit": {"oid": "7db0944f08e79309de2d9675d7eaf2c2a23aec17"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYxNTQ4MA==", "bodyText": "It is indeed used. It is currently being used in tests in MSAL and Broker. See this MSAL Test for instance: https://github.com/AzureAD/microsoft-authentication-library-for-android/blob/dev/msal/src/test/java/com/microsoft/identity/client/e2e/tests/network/AcquireTokenNetworkTest.java#L167\nAlso you can make them public if you want.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471615480", "createdAt": "2020-08-17T17:01:54Z", "author": {"login": "shahzaibj"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,159 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    private static boolean isAccessToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.AccessToken;\n+    }\n+\n+    private static boolean isRefreshToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.RefreshToken;\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param SharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String SharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = getSharedPreferences(SharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param SharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String SharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(SharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param SharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String SharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(SharedPrefName, predicate, editor);\n+    }\n+\n+    private static SharedPreferences getSharedPreferences(final String sharedPrefName) {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        return context.getSharedPreferences(sharedPrefName, Context.MODE_PRIVATE);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYwMzIxNQ=="}, "originalCommit": {"oid": "7db0944f08e79309de2d9675d7eaf2c2a23aec17"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY4MDY0OQ==", "bodyText": "Changes has been made accordingly.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471680649", "createdAt": "2020-08-17T18:25:56Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,159 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    private static boolean isAccessToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.AccessToken;\n+    }\n+\n+    private static boolean isRefreshToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.RefreshToken;\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param SharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String SharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = getSharedPreferences(SharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param SharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String SharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(SharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param SharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String SharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(SharedPrefName, predicate, editor);\n+    }\n+\n+    private static SharedPreferences getSharedPreferences(final String sharedPrefName) {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        return context.getSharedPreferences(sharedPrefName, Context.MODE_PRIVATE);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYwMzIxNQ=="}, "originalCommit": {"oid": "7db0944f08e79309de2d9675d7eaf2c2a23aec17"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Nzc3OTcyOnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjo0MToxOFrOHBwZzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODoyNzowOFrOHB1MjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYwMzY2MA==", "bodyText": "Looks to be the same as this: https://github.com/AzureAD/microsoft-authentication-library-common-for-android/blob/dev/testutils/src/main/java/com/microsoft/identity/internal/testutils/TestUtils.java#L52\nIs there a need to duplicate it?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471603660", "createdAt": "2020-08-17T16:41:18Z", "author": {"login": "shahzaibj"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,159 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    private static boolean isAccessToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.AccessToken;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7db0944f08e79309de2d9675d7eaf2c2a23aec17"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY4MjE4OA==", "bodyText": "Removed duplicate method.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471682188", "createdAt": "2020-08-17T18:27:08Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,159 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    private static boolean isAccessToken(@NonNull final String cacheKey) {\n+        return SharedPreferencesAccountCredentialCache.getCredentialTypeForCredentialCacheKey(cacheKey) == CredentialType.AccessToken;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYwMzY2MA=="}, "originalCommit": {"oid": "7db0944f08e79309de2d9675d7eaf2c2a23aec17"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODk3OTI4OnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMTo1OToyMlrOHB8Rtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDozOTozNVrOHCXwQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc5ODE5OQ==", "bodyText": "A head-of-class javadoc section would be nice-to-have here.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471798199", "createdAt": "2020-08-17T21:59:22Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI0ODM4NA==", "bodyText": "Added javadoc section in the next commit.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472248384", "createdAt": "2020-08-18T14:39:35Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc5ODE5OQ=="}, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODk4MDQyOnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMTo1OTo1MlrOHB8SZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDo0MDowMVrOHCXxjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc5ODM3Mg==", "bodyText": "public members should have documentation.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471798372", "createdAt": "2020-08-17T21:59:52Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI0ODcxNw==", "bodyText": "Added documentation for the method in the next commit.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472248717", "createdAt": "2020-08-18T14:40:01Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc5ODM3Mg=="}, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODk4MjQ3OnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMjowMDozMVrOHB8TnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDo0MToyMVrOHCX1vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc5ODY4NA==", "bodyText": "this should probably be public, with appropriate documentation, so that people can implement it.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471798684", "createdAt": "2020-08-17T22:00:31Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI0OTc4OA==", "bodyText": "changed the access type to public so it can be implemented and added documentation for the method in the next commit.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472249788", "createdAt": "2020-08-18T14:41:21Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc5ODY4NA=="}, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODk4Njc4OnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMjowMjoxMlrOHB8WLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDo0NDo0MFrOHCX_1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc5OTM0MA==", "bodyText": "nit: maybe randomizeCharacterInTokenSignature", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471799340", "createdAt": "2020-08-17T22:02:12Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String editTokenSignature(String string) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1MjM3NA==", "bodyText": "change the method name.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472252374", "createdAt": "2020-08-18T14:44:40Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String editTokenSignature(String string) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc5OTM0MA=="}, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTg2MjIwOnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNTo0ODoxOFrOHCEQXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjowODozMVrOHCbqtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkyODkyNg==", "bodyText": "for public method use PascalCasing", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471928926", "createdAt": "2020-08-18T05:48:18Z", "author": {"login": "dabbcomputers"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1NDk4NA==", "bodyText": "In java, methods should be verbs, in mixed case with the first letter lowercase, with the first letter of each internal word capitalized.\nis there any reason for using PascalCasing ?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472254984", "createdAt": "2020-08-18T14:47:59Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkyODkyNg=="}, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxMjUwMg==", "bodyText": "Please use android java style for java, and C# style for C#.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472312502", "createdAt": "2020-08-18T16:08:31Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkyODkyNg=="}, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTg2NTI2OnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNTo0OTo0MFrOHCESPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDoyMTozN1rOHCk8iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkyOTQwNw==", "bodyText": "is it sure that cacheValue will be instance of string? what if it is not? Should we log or fail?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471929407", "createdAt": "2020-08-18T05:49:40Z", "author": {"login": "dabbcomputers"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1NTgxNw==", "bodyText": "cache value is string when stored in the shared preference therefore we would get string whenever we fetch cache value form the cache.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472255817", "createdAt": "2020-08-18T14:49:05Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkyOTQwNw=="}, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM0NzI4Mw==", "bodyText": "why we are checking it then?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472347283", "createdAt": "2020-08-18T17:03:17Z", "author": {"login": "dabbcomputers"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkyOTQwNw=="}, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ0MjE4Mw==", "bodyText": "sharedPeference getall() method returns a Map<String, ?> containing list of key/value pairs representing the preference.\n\"?\" which represent any object therefore the Map maps string key to any possible object value. Here our object is of string because both key/value are string when stored in the shared preference. Moreover check has been added to ensure only tokens(value are of string object) should be fetched.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472442183", "createdAt": "2020-08-18T19:52:31Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkyOTQwNw=="}, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ0MzE1OQ==", "bodyText": "We should probably just let it throw a ClassCastException rather than trying to be clever.  This is a test utility.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472443159", "createdAt": "2020-08-18T19:54:25Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkyOTQwNw=="}, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ2NDUyMQ==", "bodyText": "Make sense. cast cacheValue to string.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472464521", "createdAt": "2020-08-18T20:21:37Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkyOTQwNw=="}, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTg2NjkxOnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNTo1MDoxNlrOHCETJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxMDoxMlrOHCbvPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkyOTYzOA==", "bodyText": "same PascalCasing for public ones at all places.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471929638", "createdAt": "2020-08-18T05:50:16Z", "author": {"login": "dabbcomputers"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1ODAwOQ==", "bodyText": "n java, methods should be verbs, in mixed case with the first letter lowercase, with the first letter of each internal word capitalized.\nis there any reason for using PascalCasing ?", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472258009", "createdAt": "2020-08-18T14:51:54Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkyOTYzOA=="}, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxMzY2Mw==", "bodyText": "Don't use pascal casing.  That's not the correct idiom for java.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472313663", "createdAt": "2020-08-18T16:10:12Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkyOTYzOA=="}, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTg2ODU1OnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNTo1MTowMlrOHCEUEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDo1MjoyOVrOHCYXkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkyOTg3NA==", "bodyText": "avoid using short forms", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471929874", "createdAt": "2020-08-18T05:51:02Z", "author": {"login": "dabbcomputers"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String editTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        if (segments.length != 2) {\n+            throw new AssertionError(\"not JWT\");\n+        }\n+\n+        String signature = segments[segments.length - 1];\n+        StringBuilder sb = new StringBuilder(signature);\n+        Random rnd = new Random();\n+        int rndIndex = rnd.nextInt(sb.length());\n+        char charAtRndPosition = sb.charAt(rndIndex);\n+        char rndChar = (char) ('a' + rnd.nextInt(26));\n+\n+        if (charAtRndPosition == rndChar) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1ODQ1MQ==", "bodyText": "updated the variable name.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472258451", "createdAt": "2020-08-18T14:52:29Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String editTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        if (segments.length != 2) {\n+            throw new AssertionError(\"not JWT\");\n+        }\n+\n+        String signature = segments[segments.length - 1];\n+        StringBuilder sb = new StringBuilder(signature);\n+        Random rnd = new Random();\n+        int rndIndex = rnd.nextInt(sb.length());\n+        char charAtRndPosition = sb.charAt(rndIndex);\n+        char rndChar = (char) ('a' + rnd.nextInt(26));\n+\n+        if (charAtRndPosition == rndChar) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkyOTg3NA=="}, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTg2ODk3OnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNTo1MToxM1rOHCEUTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDo1Mzo0N1rOHCYbew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkyOTkzNQ==", "bodyText": "significant name here", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471929935", "createdAt": "2020-08-18T05:51:13Z", "author": {"login": "dabbcomputers"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String editTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        if (segments.length != 2) {\n+            throw new AssertionError(\"not JWT\");\n+        }\n+\n+        String signature = segments[segments.length - 1];\n+        StringBuilder sb = new StringBuilder(signature);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1OTQ1MQ==", "bodyText": "updated the name.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472259451", "createdAt": "2020-08-18T14:53:47Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String editTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        if (segments.length != 2) {\n+            throw new AssertionError(\"not JWT\");\n+        }\n+\n+        String signature = segments[segments.length - 1];\n+        StringBuilder sb = new StringBuilder(signature);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkyOTkzNQ=="}, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTg3NDU1OnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNTo1NDowMlrOHCEXpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDo1NDo1MVrOHCYe1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkzMDc4OA==", "bodyText": "this can go outside 'a' to 'z' range", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471930788", "createdAt": "2020-08-18T05:54:02Z", "author": {"login": "dabbcomputers"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String editTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        if (segments.length != 2) {\n+            throw new AssertionError(\"not JWT\");\n+        }\n+\n+        String signature = segments[segments.length - 1];\n+        StringBuilder sb = new StringBuilder(signature);\n+        Random rnd = new Random();\n+        int rndIndex = rnd.nextInt(sb.length());\n+        char charAtRndPosition = sb.charAt(rndIndex);\n+        char rndChar = (char) ('a' + rnd.nextInt(26));\n+\n+        if (charAtRndPosition == rndChar) {\n+            rndChar = (char) (charAtRndPosition + rnd.nextInt(26));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI2MDMxMA==", "bodyText": "the purpose is to introduce any junk character in place of existing character so to invalidate.\nI have updated the logic to get character from base64 characters only and do not go out of bound.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472260310", "createdAt": "2020-08-18T14:54:51Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String editTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        if (segments.length != 2) {\n+            throw new AssertionError(\"not JWT\");\n+        }\n+\n+        String signature = segments[segments.length - 1];\n+        StringBuilder sb = new StringBuilder(signature);\n+        Random rnd = new Random();\n+        int rndIndex = rnd.nextInt(sb.length());\n+        char charAtRndPosition = sb.charAt(rndIndex);\n+        char rndChar = (char) ('a' + rnd.nextInt(26));\n+\n+        if (charAtRndPosition == rndChar) {\n+            rndChar = (char) (charAtRndPosition + rnd.nextInt(26));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkzMDc4OA=="}, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTg3NzExOnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNTo1NToxMVrOHCEZLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDo1NjozNVrOHCYkVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkzMTE4MQ==", "bodyText": "we know that there will be 2 segment then its better to use index to avoid confusion.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r471931181", "createdAt": "2020-08-18T05:55:11Z", "author": {"login": "dabbcomputers"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String editTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        if (segments.length != 2) {\n+            throw new AssertionError(\"not JWT\");\n+        }\n+\n+        String signature = segments[segments.length - 1];\n+        StringBuilder sb = new StringBuilder(signature);\n+        Random rnd = new Random();\n+        int rndIndex = rnd.nextInt(sb.length());\n+        char charAtRndPosition = sb.charAt(rndIndex);\n+        char rndChar = (char) ('a' + rnd.nextInt(26));\n+\n+        if (charAtRndPosition == rndChar) {\n+            rndChar = (char) (charAtRndPosition + rnd.nextInt(26));\n+        }\n+\n+        sb.setCharAt(rndIndex, rndChar);\n+        segments[segments.length - 1] = sb.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI2MTcxOQ==", "bodyText": "I have made a mistake here, there would be 3 segments and index 0,1,2 were segments of header, payload and signature respectively. I have updated and used index to avoid confusion.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472261719", "createdAt": "2020-08-18T14:56:35Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.cache.SharedPreferencesAccountCredentialCache;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return editTokenSignature(s);\n+        }\n+    };\n+\n+    private interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on taken type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String editTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        if (segments.length != 2) {\n+            throw new AssertionError(\"not JWT\");\n+        }\n+\n+        String signature = segments[segments.length - 1];\n+        StringBuilder sb = new StringBuilder(signature);\n+        Random rnd = new Random();\n+        int rndIndex = rnd.nextInt(sb.length());\n+        char charAtRndPosition = sb.charAt(rndIndex);\n+        char rndChar = (char) ('a' + rnd.nextInt(26));\n+\n+        if (charAtRndPosition == rndChar) {\n+            rndChar = (char) (charAtRndPosition + rnd.nextInt(26));\n+        }\n+\n+        sb.setCharAt(rndIndex, rndChar);\n+        segments[segments.length - 1] = sb.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkzMTE4MQ=="}, "originalCommit": {"oid": "980922f81e0922bbc82b8252e614215451f96d2c"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjMxNzU5OnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxNDoyM1rOHCb5Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOToyNDozMVrOHCiuAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxNjI0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n          \n          \n            \n                public void editAllTokenInCache(@NonNull final String sharedPrefName, @NonNull final Predicate<String> predicate, @NonNull final Function<String, String> editor) {", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472316242", "createdAt": "2020-08-18T16:14:23Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyODAzMw==", "bodyText": "Added final keyword and NonNull", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472428033", "createdAt": "2020-08-18T19:24:31Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxNjI0Mg=="}, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjMyNDA1OnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxNTo1OVrOHCb9XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOToyNDowOVrOHCitFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxNzI3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n          \n          \n            \n                    SharedPreferences.Editor prefEditor = sharedPref.edit();\n          \n          \n            \n                    Map<String, ?> cacheEntries = sharedPref.getAll();\n          \n          \n            \n                    final SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n          \n          \n            \n                    final SharedPreferences.Editor prefEditor = sharedPref.edit();\n          \n          \n            \n                    final Map<String, ?> cacheEntries = sharedPref.getAll();", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472317277", "createdAt": "2020-08-18T16:15:59Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyNzc5OQ==", "bodyText": "Added final keyword.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472427799", "createdAt": "2020-08-18T19:24:09Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxNzI3Nw=="}, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjMyNTY2OnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxNjoyM1rOHCb-Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOToyNDowMlrOHCis2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxNzU0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n          \n          \n            \n                    for (final Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472317542", "createdAt": "2020-08-18T16:16:23Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyNzczNg==", "bodyText": "Added final keyword.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472427736", "createdAt": "2020-08-18T19:24:02Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxNzU0Mg=="}, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjMyNzQ4OnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxNjo0NlrOHCb_dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOToyMzo1NFrOHCiskQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxNzgxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String keyToEdit = cacheEntry.getKey();\n          \n          \n            \n                        if (predicate.test(keyToEdit)) {\n          \n          \n            \n                            Object cacheValue = cacheEntries.get(keyToEdit);\n          \n          \n            \n                        final String keyToEdit = cacheEntry.getKey();\n          \n          \n            \n                        if (predicate.test(keyToEdit)) {\n          \n          \n            \n                            final Object cacheValue = cacheEntries.get(keyToEdit);", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472317813", "createdAt": "2020-08-18T16:16:46Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyNzY2NQ==", "bodyText": "Added final keyword.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472427665", "createdAt": "2020-08-18T19:23:54Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxNzgxMw=="}, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjMyODc1OnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxNzowNFrOHCcAPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOToyMzo0OFrOHCisYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxODAxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n          \n          \n            \n                                final Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472318013", "createdAt": "2020-08-18T16:17:04Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyNzYxNg==", "bodyText": "Added final keyword.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472427616", "createdAt": "2020-08-18T19:23:48Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxODAxMw=="}, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjMzMDU1OnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxNzozNFrOHCcBZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOToyMzo0MFrOHCisJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxODMwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n          \n          \n            \n                public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, @NonNull final Function<String, String> editor) {", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472318308", "createdAt": "2020-08-18T16:17:34Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyNzU1Ng==", "bodyText": "Added final keyword.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472427556", "createdAt": "2020-08-18T19:23:40Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxODMwOA=="}, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjMzMjAwOnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxNzo1NFrOHCcCRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOToyMzozNlrOHCir-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxODUzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Predicate<String> predicate = new Predicate<String>() {\n          \n          \n            \n                    final Predicate<String> predicate = new Predicate<String>() {", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472318532", "createdAt": "2020-08-18T16:17:54Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyNzUxNQ==", "bodyText": "Added final keyword.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472427515", "createdAt": "2020-08-18T19:23:36Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxODUzMg=="}, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjMzMzA4OnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxODoxMlrOHCcC-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOToyMzozMFrOHCiryg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxODcxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Predicate<String> predicate = new Predicate<String>() {\n          \n          \n            \n                    final Predicate<String> predicate = new Predicate<String>() {", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472318714", "createdAt": "2020-08-18T16:18:12Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyNzQ2Ng==", "bodyText": "Added final keyword.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472427466", "createdAt": "2020-08-18T19:23:30Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxODcxNA=="}, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjMzNDU1OnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxODozN1rOHCcECw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOToyMzoyN1rOHCirsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxODk4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String[] segments = string.split(\".\");\n          \n          \n            \n                    final String[] segments = string.split(\".\");", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472318987", "createdAt": "2020-08-18T16:18:37Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String randomizeCharacterInTokenSignature(String string) {\n+        String[] segments = string.split(\".\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyNzQ0Mg==", "bodyText": "Added final keyword.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472427442", "createdAt": "2020-08-18T19:23:27Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String randomizeCharacterInTokenSignature(String string) {\n+        String[] segments = string.split(\".\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxODk4Nw=="}, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjMzNzU3OnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxOToyM1rOHCcF5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOToyMzoxOVrOHCirWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxOTQ2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String signature = segments[2];\n          \n          \n            \n                    final String signature = segments[2];", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472319462", "createdAt": "2020-08-18T16:19:23Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String randomizeCharacterInTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        if (segments.length != 3) {\n+            throw new AssertionError(\"not JWT\");\n+        }\n+\n+        // segment[2] = signature of token which is the 3rd part of the string.\n+        String signature = segments[2];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyNzM1NQ==", "bodyText": "Added final keyword.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472427355", "createdAt": "2020-08-18T19:23:19Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String randomizeCharacterInTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        if (segments.length != 3) {\n+            throw new AssertionError(\"not JWT\");\n+        }\n+\n+        // segment[2] = signature of token which is the 3rd part of the string.\n+        String signature = segments[2];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxOTQ2Mg=="}, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjMzODU1OnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxOTozNlrOHCcGgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOToyMzowMlrOHCiqvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxOTYxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    StringBuilder signatureBuilder = new StringBuilder(signature);\n          \n          \n            \n                    final StringBuilder signatureBuilder = new StringBuilder(signature);", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472319619", "createdAt": "2020-08-18T16:19:36Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String randomizeCharacterInTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        if (segments.length != 3) {\n+            throw new AssertionError(\"not JWT\");\n+        }\n+\n+        // segment[2] = signature of token which is the 3rd part of the string.\n+        String signature = segments[2];\n+        StringBuilder signatureBuilder = new StringBuilder(signature);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyNzE5Nw==", "bodyText": "updated the file.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472427197", "createdAt": "2020-08-18T19:23:02Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String randomizeCharacterInTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        if (segments.length != 3) {\n+            throw new AssertionError(\"not JWT\");\n+        }\n+\n+        // segment[2] = signature of token which is the 3rd part of the string.\n+        String signature = segments[2];\n+        StringBuilder signatureBuilder = new StringBuilder(signature);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxOTYxOQ=="}, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjMzOTY4OnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoxOTo1M1rOHCcHNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOToyMjo1NVrOHCiqgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxOTc5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Random random = new Random();\n          \n          \n            \n                    final Random random = new Random();", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472319797", "createdAt": "2020-08-18T16:19:53Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String randomizeCharacterInTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        if (segments.length != 3) {\n+            throw new AssertionError(\"not JWT\");\n+        }\n+\n+        // segment[2] = signature of token which is the 3rd part of the string.\n+        String signature = segments[2];\n+        StringBuilder signatureBuilder = new StringBuilder(signature);\n+        Random random = new Random();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyNzEzNg==", "bodyText": "updated the file.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472427136", "createdAt": "2020-08-18T19:22:55Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String randomizeCharacterInTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        if (segments.length != 3) {\n+            throw new AssertionError(\"not JWT\");\n+        }\n+\n+        // segment[2] = signature of token which is the 3rd part of the string.\n+        String signature = segments[2];\n+        StringBuilder signatureBuilder = new StringBuilder(signature);\n+        Random random = new Random();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxOTc5Nw=="}, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjM0MTY4OnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoyMDoxOFrOHCcIdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOToyMjo0OVrOHCiqQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMyMDExOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    int index = random.nextInt(signatureBuilder.length());\n          \n          \n            \n                    final int index = random.nextInt(signatureBuilder.length());", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472320118", "createdAt": "2020-08-18T16:20:18Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String randomizeCharacterInTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        if (segments.length != 3) {\n+            throw new AssertionError(\"not JWT\");\n+        }\n+\n+        // segment[2] = signature of token which is the 3rd part of the string.\n+        String signature = segments[2];\n+        StringBuilder signatureBuilder = new StringBuilder(signature);\n+        Random random = new Random();\n+        int index = random.nextInt(signatureBuilder.length());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyNzA3NQ==", "bodyText": "updated the file.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472427075", "createdAt": "2020-08-18T19:22:49Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String randomizeCharacterInTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        if (segments.length != 3) {\n+            throw new AssertionError(\"not JWT\");\n+        }\n+\n+        // segment[2] = signature of token which is the 3rd part of the string.\n+        String signature = segments[2];\n+        StringBuilder signatureBuilder = new StringBuilder(signature);\n+        Random random = new Random();\n+        int index = random.nextInt(signatureBuilder.length());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMyMDExOA=="}, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjM0MzE4OnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoyMDo0MVrOHCcJdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOToyMjozMlrOHCipsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMyMDM3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String base64Chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n          \n          \n            \n                    final String base64Chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472320373", "createdAt": "2020-08-18T16:20:41Z", "author": {"login": "AdamBJohnsonx"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String randomizeCharacterInTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        if (segments.length != 3) {\n+            throw new AssertionError(\"not JWT\");\n+        }\n+\n+        // segment[2] = signature of token which is the 3rd part of the string.\n+        String signature = segments[2];\n+        StringBuilder signatureBuilder = new StringBuilder(signature);\n+        Random random = new Random();\n+        int index = random.nextInt(signatureBuilder.length());\n+\n+        // get random character from the base64 string.\n+        String base64Chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyNjkzMA==", "bodyText": "updated the file.", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1003#discussion_r472426930", "createdAt": "2020-08-18T19:22:32Z", "author": {"login": "jaiswalh"}, "path": "testutils/src/main/java/com/microsoft/identity/internal/testutils/CacheUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.internal.testutils;\n+\n+import android.content.SharedPreferences;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.arch.core.util.Function;\n+\n+import com.microsoft.identity.common.internal.cache.CacheKeyValueDelegate;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+\n+import java.util.Map;\n+import java.util.Random;\n+\n+\n+/**\n+ * This class provide utility to modify the tokens stored in the cache by providing predicate and Function\n+ * generic interface. This provide caller flexibility to write its own editing functions to modify the tokens\n+ * stored in the cache.\n+ */\n+public class CacheUtils {\n+\n+    private static final CacheKeyValueDelegate CACHE_KEY_VALUE_DELEGATE = new CacheKeyValueDelegate();\n+\n+    /**\n+     * Functional interface for editing signature of the token.\n+     */\n+    public static final Function<String, String> TOKEN_SIGNATURE_EDITOR = new Function<String, String>() {\n+        @Override\n+        public String apply(String s) {\n+            return randomizeCharacterInTokenSignature(s);\n+        }\n+    };\n+\n+    /**\n+     * Generic functional interface to give caller flexibility of code to evaluate on the given\n+     * arguments.\n+     *\n+     * @param <T> input arguments to evaluate.\n+     */\n+    public interface Predicate<T> {\n+        boolean test(T t);\n+    }\n+\n+    /**\n+     * This method will edit all the token specified by the predicate using the  editor\n+     * in the shared preference.\n+     *\n+     * @param sharedPrefName Name of the shared preference where token has been stored.\n+     * @param predicate      Generic functional interface representing function that returns true\n+     *                       or false depending on token type.\n+     * @param editor         Functional interface to have any number of token editing method.\n+     */\n+    public void editAllTokenInCache(@NonNull final String sharedPrefName, Predicate<String> predicate, Function<String, String> editor) {\n+        SharedPreferences sharedPref = TestUtils.getSharedPreferences(sharedPrefName);\n+        SharedPreferences.Editor prefEditor = sharedPref.edit();\n+        Map<String, ?> cacheEntries = sharedPref.getAll();\n+\n+        //get all the key from the cache entry, verify and edit it.\n+        for (Map.Entry<String, ?> cacheEntry : cacheEntries.entrySet()) {\n+            String keyToEdit = cacheEntry.getKey();\n+            if (predicate.test(keyToEdit)) {\n+                Object cacheValue = cacheEntries.get(keyToEdit);\n+                if (cacheValue instanceof String) {\n+                    Credential credential = CACHE_KEY_VALUE_DELEGATE.fromCacheValue((String) cacheValue, Credential.class);\n+                    credential.setSecret(editor.apply(credential.getSecret()));\n+                    prefEditor.putString(keyToEdit, CACHE_KEY_VALUE_DELEGATE.generateCacheValue(credential));\n+                    prefEditor.apply();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * utility function to edit Access Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllAccessTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isAccessToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * utility function to edit Refresh Token.\n+     *\n+     * @param sharedPrefName Name of the shared preference.\n+     * @param editor         Functional interface for token editing method.\n+     */\n+    public void editAllRefreshTokenInCache(@NonNull final String sharedPrefName, Function<String, String> editor) {\n+        Predicate<String> predicate = new Predicate<String>() {\n+            @Override\n+            public boolean test(String cacheKey) {\n+                return TestUtils.isRefreshToken(cacheKey);\n+            }\n+        };\n+\n+        editAllTokenInCache(sharedPrefName, predicate, editor);\n+    }\n+\n+    /**\n+     * Split the string into 3 segment separated by period \".\" and set the\n+     * random character at the random position in the 3rd segment.\n+     *\n+     * @param string string to be edited.\n+     * @return edited string.\n+     */\n+    private static String randomizeCharacterInTokenSignature(String string) {\n+        String[] segments = string.split(\".\");\n+        if (segments.length != 3) {\n+            throw new AssertionError(\"not JWT\");\n+        }\n+\n+        // segment[2] = signature of token which is the 3rd part of the string.\n+        String signature = segments[2];\n+        StringBuilder signatureBuilder = new StringBuilder(signature);\n+        Random random = new Random();\n+        int index = random.nextInt(signatureBuilder.length());\n+\n+        // get random character from the base64 string.\n+        String base64Chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMyMDM3Mw=="}, "originalCommit": {"oid": "c5ecce7cbe58f2b44f0311a6bbaa10d1380a2aa3"}, "originalPosition": 150}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2211, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}