{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MDUwMTQ4", "number": 426, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxODowMzowNlrOEAnemA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxODowNTozOVrOEAnhxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDgyMjY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxODowMzowNlrOGcAnTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMzoyMjowMFrOGcJ82A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAyMzM3NA==", "bodyText": "return listSamlProviderConfigs(pageToken, FirebaseUserManager.MAX_LIST_PROVIDER_CONFIGS_RESULTS);", "url": "https://github.com/firebase/firebase-admin-java/pull/426#discussion_r432023374", "createdAt": "2020-05-28T18:03:06Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -1335,6 +1336,93 @@ protected SamlProviderConfig execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Gets a page of SAML Auth provider configs starting from the specified {@code pageToken}. Page\n+   * size will be limited to 100 provider configs.\n+   *\n+   * @param pageToken A non-empty page token string, or null to retrieve the first page of provider\n+   *     configs.\n+   * @return A {@link ListProviderConfigsPage} instance.\n+   * @throws IllegalArgumentException If the specified page token is empty\n+   * @throws FirebaseAuthException If an error occurs while retrieving provider config data.\n+   */\n+  public ListProviderConfigsPage<SamlProviderConfig> listSamlProviderConfigs(\n+        @Nullable String pageToken) throws FirebaseAuthException {\n+    int maxResults = FirebaseUserManager.MAX_LIST_PROVIDER_CONFIGS_RESULTS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41e9ccaecd49ce87ad15fc2dadb8dd0e05da1d12"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE3NjM0NA==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-admin-java/pull/426#discussion_r432176344", "createdAt": "2020-05-28T23:22:00Z", "author": {"login": "micahstairs"}, "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -1335,6 +1336,93 @@ protected SamlProviderConfig execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Gets a page of SAML Auth provider configs starting from the specified {@code pageToken}. Page\n+   * size will be limited to 100 provider configs.\n+   *\n+   * @param pageToken A non-empty page token string, or null to retrieve the first page of provider\n+   *     configs.\n+   * @return A {@link ListProviderConfigsPage} instance.\n+   * @throws IllegalArgumentException If the specified page token is empty\n+   * @throws FirebaseAuthException If an error occurs while retrieving provider config data.\n+   */\n+  public ListProviderConfigsPage<SamlProviderConfig> listSamlProviderConfigs(\n+        @Nullable String pageToken) throws FirebaseAuthException {\n+    int maxResults = FirebaseUserManager.MAX_LIST_PROVIDER_CONFIGS_RESULTS;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAyMzM3NA=="}, "originalCommit": {"oid": "41e9ccaecd49ce87ad15fc2dadb8dd0e05da1d12"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDgyNjU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/internal/ListSamlProviderConfigsResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxODowNDoyNlrOGcAp4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMzoyMjowOFrOGcJ9Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAyNDAzNA==", "bodyText": "Unnecessary?", "url": "https://github.com/firebase/firebase-admin-java/pull/426#discussion_r432024034", "createdAt": "2020-05-28T18:04:26Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/internal/ListSamlProviderConfigsResponse.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth.internal;\n+\n+import com.google.api.client.util.Key;\n+import com.google.common.collect.ImmutableList;\n+import com.google.firebase.auth.SamlProviderConfig;\n+import java.util.List;\n+\n+/**\n+ * JSON data binding for ListInboundSamlConfigsResponse messages sent by Google identity toolkit\n+ * service.\n+ */\n+public final class ListSamlProviderConfigsResponse\n+    implements ListProviderConfigsResponse<SamlProviderConfig> {\n+\n+  @Key(\"inboundSamlConfigs\")\n+  private List<SamlProviderConfig> providerConfigs;\n+\n+  @Key(\"nextPageToken\")\n+  private String pageToken;\n+\n+  public ListSamlProviderConfigsResponse() { }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41e9ccaecd49ce87ad15fc2dadb8dd0e05da1d12"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE3NjM5OA==", "bodyText": "Removed.", "url": "https://github.com/firebase/firebase-admin-java/pull/426#discussion_r432176398", "createdAt": "2020-05-28T23:22:08Z", "author": {"login": "micahstairs"}, "path": "src/main/java/com/google/firebase/auth/internal/ListSamlProviderConfigsResponse.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth.internal;\n+\n+import com.google.api.client.util.Key;\n+import com.google.common.collect.ImmutableList;\n+import com.google.firebase.auth.SamlProviderConfig;\n+import java.util.List;\n+\n+/**\n+ * JSON data binding for ListInboundSamlConfigsResponse messages sent by Google identity toolkit\n+ * service.\n+ */\n+public final class ListSamlProviderConfigsResponse\n+    implements ListProviderConfigsResponse<SamlProviderConfig> {\n+\n+  @Key(\"inboundSamlConfigs\")\n+  private List<SamlProviderConfig> providerConfigs;\n+\n+  @Key(\"nextPageToken\")\n+  private String pageToken;\n+\n+  public ListSamlProviderConfigsResponse() { }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAyNDAzNA=="}, "originalCommit": {"oid": "41e9ccaecd49ce87ad15fc2dadb8dd0e05da1d12"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDgyOTA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/internal/ListSamlProviderConfigsResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxODowNTowNlrOGcAraA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMzoyMjoyMFrOGcJ9WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAyNDQyNA==", "bodyText": "Strings.nullToEmpty()", "url": "https://github.com/firebase/firebase-admin-java/pull/426#discussion_r432024424", "createdAt": "2020-05-28T18:05:06Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/internal/ListSamlProviderConfigsResponse.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth.internal;\n+\n+import com.google.api.client.util.Key;\n+import com.google.common.collect.ImmutableList;\n+import com.google.firebase.auth.SamlProviderConfig;\n+import java.util.List;\n+\n+/**\n+ * JSON data binding for ListInboundSamlConfigsResponse messages sent by Google identity toolkit\n+ * service.\n+ */\n+public final class ListSamlProviderConfigsResponse\n+    implements ListProviderConfigsResponse<SamlProviderConfig> {\n+\n+  @Key(\"inboundSamlConfigs\")\n+  private List<SamlProviderConfig> providerConfigs;\n+\n+  @Key(\"nextPageToken\")\n+  private String pageToken;\n+\n+  public ListSamlProviderConfigsResponse() { }\n+\n+  @Override\n+  public List<SamlProviderConfig> getProviderConfigs() {\n+    return providerConfigs == null ? ImmutableList.<SamlProviderConfig>of() : providerConfigs;\n+  }\n+\n+  @Override\n+  public boolean hasProviderConfigs() {\n+    return providerConfigs != null && !providerConfigs.isEmpty();\n+  }\n+\n+  @Override\n+  public String getPageToken() {\n+    return pageToken == null ? \"\" : pageToken;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41e9ccaecd49ce87ad15fc2dadb8dd0e05da1d12"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE3NjQ3Mw==", "bodyText": "Nice! That's cleaner.", "url": "https://github.com/firebase/firebase-admin-java/pull/426#discussion_r432176473", "createdAt": "2020-05-28T23:22:20Z", "author": {"login": "micahstairs"}, "path": "src/main/java/com/google/firebase/auth/internal/ListSamlProviderConfigsResponse.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth.internal;\n+\n+import com.google.api.client.util.Key;\n+import com.google.common.collect.ImmutableList;\n+import com.google.firebase.auth.SamlProviderConfig;\n+import java.util.List;\n+\n+/**\n+ * JSON data binding for ListInboundSamlConfigsResponse messages sent by Google identity toolkit\n+ * service.\n+ */\n+public final class ListSamlProviderConfigsResponse\n+    implements ListProviderConfigsResponse<SamlProviderConfig> {\n+\n+  @Key(\"inboundSamlConfigs\")\n+  private List<SamlProviderConfig> providerConfigs;\n+\n+  @Key(\"nextPageToken\")\n+  private String pageToken;\n+\n+  public ListSamlProviderConfigsResponse() { }\n+\n+  @Override\n+  public List<SamlProviderConfig> getProviderConfigs() {\n+    return providerConfigs == null ? ImmutableList.<SamlProviderConfig>of() : providerConfigs;\n+  }\n+\n+  @Override\n+  public boolean hasProviderConfigs() {\n+    return providerConfigs != null && !providerConfigs.isEmpty();\n+  }\n+\n+  @Override\n+  public String getPageToken() {\n+    return pageToken == null ? \"\" : pageToken;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAyNDQyNA=="}, "originalCommit": {"oid": "41e9ccaecd49ce87ad15fc2dadb8dd0e05da1d12"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDgzMDc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/internal/ListOidcProviderConfigsResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxODowNTozOVrOGcAsig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMzoyMjoyOFrOGcJ9jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAyNDcxNA==", "bodyText": "You can remove the default constructor now.", "url": "https://github.com/firebase/firebase-admin-java/pull/426#discussion_r432024714", "createdAt": "2020-05-28T18:05:39Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/internal/ListOidcProviderConfigsResponse.java", "diffHunk": "@@ -36,14 +34,6 @@\n   @Key(\"nextPageToken\")\n   private String pageToken;\n \n-  @VisibleForTesting\n-  public ListOidcProviderConfigsResponse(\n-      List<OidcProviderConfig> providerConfigs,\n-      String pageToken) {\n-    this.providerConfigs = providerConfigs;\n-    this.pageToken = pageToken;\n-  }\n-\n   public ListOidcProviderConfigsResponse() { }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41e9ccaecd49ce87ad15fc2dadb8dd0e05da1d12"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE3NjUyNw==", "bodyText": "Good point! Done.", "url": "https://github.com/firebase/firebase-admin-java/pull/426#discussion_r432176527", "createdAt": "2020-05-28T23:22:28Z", "author": {"login": "micahstairs"}, "path": "src/main/java/com/google/firebase/auth/internal/ListOidcProviderConfigsResponse.java", "diffHunk": "@@ -36,14 +34,6 @@\n   @Key(\"nextPageToken\")\n   private String pageToken;\n \n-  @VisibleForTesting\n-  public ListOidcProviderConfigsResponse(\n-      List<OidcProviderConfig> providerConfigs,\n-      String pageToken) {\n-    this.providerConfigs = providerConfigs;\n-    this.pageToken = pageToken;\n-  }\n-\n   public ListOidcProviderConfigsResponse() { }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAyNDcxNA=="}, "originalCommit": {"oid": "41e9ccaecd49ce87ad15fc2dadb8dd0e05da1d12"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1597, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}