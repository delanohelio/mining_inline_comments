{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MTcwOTkz", "number": 420, "title": "Add operations to create and delete SAML provider configs.", "bodyText": "This adds operations to create and delete SAML provider configs. I've included both unit tests and integration tests.\nI'm a little concerned about the number of assertions I have in a few of the tests. I'm open to any suggestions you may have!", "createdAt": "2020-05-17T20:43:27Z", "url": "https://github.com/firebase/firebase-admin-java/pull/420", "merged": true, "mergeCommit": {"oid": "ae4c0ecdd935142022cb3e322320cea7d1ebde9f"}, "closed": true, "closedAt": "2020-05-21T23:26:13Z", "author": {"login": "micahstairs"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcioONlABqjMzNDk0MzQyNTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjmIQ3gH2gAyNDE5MTcwOTkzOmFhMmJmODkwOGI5ZjJlNDE1MGM3NDk2ZTdhMTM5YTg1ZjY3OTU4ODI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "89202d9417a50c0f2c75f2624ce6c609b0c018de", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/89202d9417a50c0f2c75f2624ce6c609b0c018de", "committedDate": "2020-05-17T20:39:41Z", "message": "Add create and delete operations for SAML provider configs."}, "afterCommit": {"oid": "72170c4f6abfad3cfc0dd57a19c994c0149dcaf1", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/72170c4f6abfad3cfc0dd57a19c994c0149dcaf1", "committedDate": "2020-05-18T23:10:37Z", "message": "Add create and delete operations for SAML provider configs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28db8336e0010958b39af6c654b9e0cc5df5c2c8", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/28db8336e0010958b39af6c654b9e0cc5df5c2c8", "committedDate": "2020-05-18T23:13:09Z", "message": "Add create and delete operations for SAML provider configs."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "72170c4f6abfad3cfc0dd57a19c994c0149dcaf1", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/72170c4f6abfad3cfc0dd57a19c994c0149dcaf1", "committedDate": "2020-05-18T23:10:37Z", "message": "Add create and delete operations for SAML provider configs."}, "afterCommit": {"oid": "28db8336e0010958b39af6c654b9e0cc5df5c2c8", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/28db8336e0010958b39af6c654b9e0cc5df5c2c8", "committedDate": "2020-05-18T23:13:09Z", "message": "Add create and delete operations for SAML provider configs."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1ODA2ODA2", "url": "https://github.com/firebase/firebase-admin-java/pull/420#pullrequestreview-415806806", "createdAt": "2020-05-21T00:41:17Z", "commit": {"oid": "28db8336e0010958b39af6c654b9e0cc5df5c2c8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMDo0MToxN1rOGYih0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMDo1MDo1NlrOGYirqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM4NDcyMg==", "bodyText": "SAML auth provider config", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428384722", "createdAt": "2020-05-21T00:41:17Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -1186,6 +1186,86 @@ protected Void execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Creates a new provider SAML Auth config with the attributes contained in the specified {@link", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28db8336e0010958b39af6c654b9e0cc5df5c2c8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM4NDg1NA==", "bodyText": "Also check for prefix and throw?", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428384854", "createdAt": "2020-05-21T00:41:55Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -1186,6 +1186,86 @@ protected Void execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Creates a new provider SAML Auth config with the attributes contained in the specified {@link\n+   * SamlProviderConfig.CreateRequest}.\n+   *\n+   * @param request A non-null {@link SamlProviderConfig.CreateRequest} instance.\n+   * @return An {@link SamlProviderConfig} instance corresponding to the newly created provider\n+   *     config.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws FirebaseAuthException if an error occurs while creating the provider config.\n+   */\n+  public SamlProviderConfig createSamlProviderConfig(\n+      @NonNull SamlProviderConfig.CreateRequest request) throws FirebaseAuthException {\n+    return createSamlProviderConfigOp(request).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #createSamlProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param request A non-null {@link SamlProviderConfig.CreateRequest} instance.\n+   * @return An {@code ApiFuture} which will complete successfully with a {@link SamlProviderConfig}\n+   *     instance corresponding to the newly created provider config. If an error occurs while\n+   *     creating the provider config, the future throws a {@link FirebaseAuthException}.\n+   * @throws NullPointerException if the provided request is null.\n+   */\n+  public ApiFuture<SamlProviderConfig> createSamlProviderConfigAsync(\n+      @NonNull SamlProviderConfig.CreateRequest request) {\n+    return createSamlProviderConfigOp(request).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<SamlProviderConfig, FirebaseAuthException>\n+      createSamlProviderConfigOp(final SamlProviderConfig.CreateRequest request) {\n+    checkNotDestroyed();\n+    checkNotNull(request, \"Create request must not be null.\");\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<SamlProviderConfig, FirebaseAuthException>() {\n+      @Override\n+      protected SamlProviderConfig execute() throws FirebaseAuthException {\n+        return userManager.createSamlProviderConfig(request);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Deletes the SAML Auth provider config identified by the specified provider ID.\n+   *\n+   * @param providerId A provider ID string.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty.\n+   * @throws FirebaseAuthException If an error occurs while deleting the provider config.\n+   */\n+  public void deleteSamlProviderConfig(@NonNull String providerId) throws FirebaseAuthException {\n+    deleteSamlProviderConfigOp(providerId).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #deleteSamlProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param providerId A provider ID string.\n+   * @return An {@code ApiFuture} which will complete successfully when the specified provider\n+   *     config has been deleted. If an error occurs while deleting the provider config, the future\n+   *     throws a {@link FirebaseAuthException}.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty.\n+   */\n+  public ApiFuture<Void> deleteSamlProviderConfigAsync(String providerId) {\n+    return deleteSamlProviderConfigOp(providerId).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<Void, FirebaseAuthException> deleteSamlProviderConfigOp(\n+      final String providerId) {\n+    checkNotDestroyed();\n+    checkArgument(!Strings.isNullOrEmpty(providerId), \"Provider ID must not be null or empty.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28db8336e0010958b39af6c654b9e0cc5df5c2c8"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM4NTE2MA==", "bodyText": "Ideally all argument validation should happen outside the CallableOperation. This looks like it would validate the request parameters within the CallableOperation.", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428385160", "createdAt": "2020-05-21T00:43:09Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -1186,6 +1186,86 @@ protected Void execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Creates a new provider SAML Auth config with the attributes contained in the specified {@link\n+   * SamlProviderConfig.CreateRequest}.\n+   *\n+   * @param request A non-null {@link SamlProviderConfig.CreateRequest} instance.\n+   * @return An {@link SamlProviderConfig} instance corresponding to the newly created provider\n+   *     config.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws FirebaseAuthException if an error occurs while creating the provider config.\n+   */\n+  public SamlProviderConfig createSamlProviderConfig(\n+      @NonNull SamlProviderConfig.CreateRequest request) throws FirebaseAuthException {\n+    return createSamlProviderConfigOp(request).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #createSamlProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param request A non-null {@link SamlProviderConfig.CreateRequest} instance.\n+   * @return An {@code ApiFuture} which will complete successfully with a {@link SamlProviderConfig}\n+   *     instance corresponding to the newly created provider config. If an error occurs while\n+   *     creating the provider config, the future throws a {@link FirebaseAuthException}.\n+   * @throws NullPointerException if the provided request is null.\n+   */\n+  public ApiFuture<SamlProviderConfig> createSamlProviderConfigAsync(\n+      @NonNull SamlProviderConfig.CreateRequest request) {\n+    return createSamlProviderConfigOp(request).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<SamlProviderConfig, FirebaseAuthException>\n+      createSamlProviderConfigOp(final SamlProviderConfig.CreateRequest request) {\n+    checkNotDestroyed();\n+    checkNotNull(request, \"Create request must not be null.\");\n+    final FirebaseUserManager userManager = getUserManager();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28db8336e0010958b39af6c654b9e0cc5df5c2c8"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM4NzI0MA==", "bodyText": "Just a hunch. See if you can use GenericJson in place of Map<String, Object>. If it works, it would clean things up a bit.", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428387240", "createdAt": "2020-05-21T00:50:56Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java", "diffHunk": "@@ -1730,17 +1730,207 @@ public void testDeleteProviderConfigWithNotFoundError() throws Exception {\n   }\n \n   @Test\n-  public void testTenantAwareDeleteProviderConfig() throws Exception {\n+  public void testTenantAwareDeleteOidcProviderConfig() throws Exception {\n     TestResponseInterceptor interceptor = initializeAppForTenantAwareUserManagement(\n         \"TENANT_ID\",\n         \"{}\");\n     TenantAwareFirebaseAuth tenantAwareAuth =\n         FirebaseAuth.getInstance().getTenantManager().getAuthForTenant(\"TENANT_ID\");\n \n-    tenantAwareAuth.deleteOidcProviderConfig(\"PROVIDER_ID\");\n+    tenantAwareAuth.deleteOidcProviderConfig(\"oidc.provider-id\");\n \n     checkRequestHeaders(interceptor);\n-    checkUrl(interceptor, \"DELETE\", TENANTS_BASE_URL + \"/TENANT_ID/oauthIdpConfigs/PROVIDER_ID\");\n+    String expectedUrl = TENANTS_BASE_URL + \"/TENANT_ID/oauthIdpConfigs/oidc.provider-id\";\n+    checkUrl(interceptor, \"DELETE\", expectedUrl);\n+  }\n+\n+  @Test\n+  public void testCreateSamlProvider() throws Exception {\n+    TestResponseInterceptor interceptor = initializeAppForUserManagement(\n+        TestUtils.loadResource(\"saml.json\"));\n+    // TODO(micahstairs): Add 'signRequest' to the create request once that field is added to\n+    // SamlProviderConfig.\n+    SamlProviderConfig.CreateRequest createRequest =\n+        new SamlProviderConfig.CreateRequest()\n+          .setProviderId(\"saml.provider-id\")\n+          .setDisplayName(\"DISPLAY_NAME\")\n+          .setEnabled(true)\n+          .setIdpEntityId(\"IDP_ENTITY_ID\")\n+          .setSsoUrl(\"https://example.com/login\")\n+          .addX509Certificate(\"certificate1\")\n+          .addX509Certificate(\"certificate2\")\n+          .setRpEntityId(\"RP_ENTITY_ID\")\n+          .setCallbackUrl(\"https://projectId.firebaseapp.com/__/auth/handler\");\n+\n+    SamlProviderConfig config = FirebaseAuth.getInstance().createSamlProviderConfig(createRequest);\n+\n+    checkSamlProviderConfig(config, \"saml.provider-id\");\n+    checkRequestHeaders(interceptor);\n+    checkUrl(interceptor, \"POST\", PROJECT_BASE_URL + \"/inboundSamlConfigs\");\n+    GenericUrl url = interceptor.getResponse().getRequest().getUrl();\n+    assertEquals(\"saml.provider-id\", url.getFirst(\"inboundSamlConfigId\"));\n+\n+    GenericJson parsed = parseRequestContent(interceptor);\n+    assertEquals(\"DISPLAY_NAME\", parsed.get(\"displayName\"));\n+    assertTrue((boolean) parsed.get(\"enabled\"));\n+    Map<String, Object> idpConfig = (Map<String, Object>) parsed.get(\"idpConfig\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28db8336e0010958b39af6c654b9e0cc5df5c2c8"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6efa9e7970b589a32e04b2dcc9bf707d44aa1c37", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/6efa9e7970b589a32e04b2dcc9bf707d44aa1c37", "committedDate": "2020-05-21T02:47:36Z", "message": "Clean up provider config ID prefix assertions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06d1db98d27963373cc71fe00f8fe6d8995d5b2e", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/06d1db98d27963373cc71fe00f8fe6d8995d5b2e", "committedDate": "2020-05-21T03:15:39Z", "message": "Move argument validation of create provider config methods outside CallableOperation."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2Mzg5OTEy", "url": "https://github.com/firebase/firebase-admin-java/pull/420#pullrequestreview-416389912", "createdAt": "2020-05-21T18:29:54Z", "commit": {"oid": "06d1db98d27963373cc71fe00f8fe6d8995d5b2e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxODoyOTo1NFrOGY-DFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxODo0MTozOVrOGY-arA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzNTYwNQ==", "bodyText": "This still reads a bit weird. Shouldn't it be a new OIDC auth provider config...?", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428835605", "createdAt": "2020-05-21T18:29:54Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -939,13 +939,15 @@ protected String execute() throws FirebaseAuthException {\n   }\n \n   /**\n-   * Creates a new provider OIDC Auth config with the attributes contained in the specified {@link\n-   * OidcProviderConfig.CreateRequest}.\n+   * Creates a new provider OIDC Auth provider config with the attributes contained in the specified", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06d1db98d27963373cc71fe00f8fe6d8995d5b2e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzNjk3MQ==", "bodyText": "Seems we can remove this helper method now and just call checkOidcProviderId() in its place.", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428836971", "createdAt": "2020-05-21T18:32:34Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/OidcProviderConfig.java", "diffHunk": "@@ -102,7 +108,7 @@ CreateRequest getThis() {\n     }\n \n     void assertValidProviderIdFormat(String providerId) {\n-      checkArgument(providerId.startsWith(\"oidc.\"), \"Invalid OIDC provider ID: \" + providerId);\n+      checkOidcProviderId(providerId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06d1db98d27963373cc71fe00f8fe6d8995d5b2e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzODg5Ng==", "bodyText": "OidcProviderConfig", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428838896", "createdAt": "2020-05-21T18:36:22Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/auth/OidcProviderConfigTest.java", "diffHunk": "@@ -51,6 +51,26 @@ public void testJsonDeserialization() throws IOException {\n     assertEquals(\"https://oidc.com/issuer\", config.getIssuer());\n   }\n \n+  @Test\n+  public void testCheckSamlProviderId() {\n+    SamlProviderConfig.checkSamlProviderId(\"saml.valid-id\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06d1db98d27963373cc71fe00f8fe6d8995d5b2e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzOTU1NQ==", "bodyText": "Is there a better way capture these tests without directly testing on internal methods? May be run tests on public methods getProviderConfig() and deleteProviderConfig() with invalid arguments to verify this behavior.", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428839555", "createdAt": "2020-05-21T18:37:28Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/auth/OidcProviderConfigTest.java", "diffHunk": "@@ -51,6 +51,26 @@ public void testJsonDeserialization() throws IOException {\n     assertEquals(\"https://oidc.com/issuer\", config.getIssuer());\n   }\n \n+  @Test\n+  public void testCheckSamlProviderId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06d1db98d27963373cc71fe00f8fe6d8995d5b2e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg0MTY0NA==", "bodyText": "Remove this helper as well.", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428841644", "createdAt": "2020-05-21T18:41:39Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/SamlProviderConfig.java", "diffHunk": "@@ -183,7 +189,7 @@ CreateRequest getThis() {\n     }\n \n     void assertValidProviderIdFormat(String providerId) {\n-      checkArgument(providerId.startsWith(\"saml.\"), \"Invalid SAML provider ID: \" + providerId);\n+      checkSamlProviderId(providerId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06d1db98d27963373cc71fe00f8fe6d8995d5b2e"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "810eb4ba73a37c10144bebf81db9f63526ec201b", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/810eb4ba73a37c10144bebf81db9f63526ec201b", "committedDate": "2020-05-21T19:58:43Z", "message": "Address two suggestions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "907c4953f80379c689948c2f8abcf5916940a130", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/907c4953f80379c689948c2f8abcf5916940a130", "committedDate": "2020-05-21T21:23:44Z", "message": "Clean up prefix checks and move testing to API level."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NTQ3NTMy", "url": "https://github.com/firebase/firebase-admin-java/pull/420#pullrequestreview-416547532", "createdAt": "2020-05-21T22:59:13Z", "commit": {"oid": "907c4953f80379c689948c2f8abcf5916940a130"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMjo1OToxNFrOGZFmbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMjo1OToxNFrOGZFmbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk1OTM0MQ==", "bodyText": "Nit: You can also pass a value like saml.InvallidProviderId here so the invalid prefix will get tested more explicitly.", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428959341", "createdAt": "2020-05-21T22:59:14Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java", "diffHunk": "@@ -1606,6 +1606,32 @@ public void testGetOidcProviderConfig() throws Exception {\n     checkUrl(interceptor, \"GET\", PROJECT_BASE_URL + \"/oauthIdpConfigs/oidc.provider-id\");\n   }\n \n+  @Test\n+  public void testGetOidcProviderConfigMissingId() throws Exception {\n+    TestResponseInterceptor interceptor = initializeAppForUserManagement(\n+        TestUtils.loadResource(\"oidc.json\"));\n+\n+    try {\n+      FirebaseAuth.getInstance().getOidcProviderConfig(null);\n+      fail(\"No error thrown for missing provider ID.\");\n+    } catch (IllegalArgumentException e) {\n+      // Expected.\n+    }\n+  }\n+\n+  @Test\n+  public void testGetOidcProviderConfigInvalidId() throws Exception {\n+    TestResponseInterceptor interceptor = initializeAppForUserManagement(\n+        TestUtils.loadResource(\"oidc.json\"));\n+\n+    try {\n+      FirebaseAuth.getInstance().getOidcProviderConfig(\"not a valid provider ID\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "907c4953f80379c689948c2f8abcf5916940a130"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa2bf8908b9f2e4150c7496e7a139a85f6795882", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/aa2bf8908b9f2e4150c7496e7a139a85f6795882", "committedDate": "2020-05-21T23:18:51Z", "message": "Rename invalid provider config IDs used in unit tests."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2883, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}