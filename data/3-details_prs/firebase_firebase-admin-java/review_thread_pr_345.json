{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxMTIyOTg2", "number": 345, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDowMjo1OFrODW-BXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xOVQwMDoyNjozN1rOFnz_Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDExNDIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDowMjo1OFrOFcB3gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDowMjo1OFrOFcB3gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkzNTA0Mw==", "bodyText": "This would overwrite previous values such that:\nUpdateRequest ur = ...;\nur.deleteProvider(\"google.com\").deleteProvider(\"facebook.com\")\n\nwould result in only the facebook.com provider being deleted.\nBetter might be: UpdateRequest setDeleteProviders(Iterable<String> providerIds). You could optionally add UpdateRequest addDeleteProvider(String) and/or UpdateRequest addDeleteProviders(Iterable<String>).\nSee further discussion here: http://go/java-practices/builders#special. (Second bullet point).", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r364935043", "createdAt": "2020-01-09T20:02:58Z", "author": {"login": "rsgowman"}, "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -528,6 +532,17 @@ UpdateRequest setValidSince(long epochSeconds) {\n       return this;\n     }\n \n+    UpdateRequest linkProvider(@NonNull UserProvider userProvider) {\n+      properties.put(\"linkProviderUserInfo\", userProvider);\n+      return this;\n+    }\n+\n+    UpdateRequest deleteProvider(String providerId) {\n+      checkProviderId(providerId);\n+      properties.put(\"deleteProvider\", ImmutableList.of(providerId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52608d5664e611c76a6552e7cb9f871bdc8538cb"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDEyMTQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDowNjowMlrOFcB8QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDowNjowMlrOFcB8QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkzNjI1Nw==", "bodyText": "For our builders (which UpdateRequest effectively is), use setProperty() rather than property(). (So setLinkProvider() here.) Both for consistency with the existing type, (eg setValidSince) and also for consistency with our 'best practices' guide. (http://go/java-practices/builders#api, last bullet point.) Note that this directly conflicts with EJ (as pointed out by the practices doc.)", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r364936257", "createdAt": "2020-01-09T20:06:02Z", "author": {"login": "rsgowman"}, "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -528,6 +532,17 @@ UpdateRequest setValidSince(long epochSeconds) {\n       return this;\n     }\n \n+    UpdateRequest linkProvider(@NonNull UserProvider userProvider) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52608d5664e611c76a6552e7cb9f871bdc8538cb"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDEyNjc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDowODowMlrOFcB_og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDowODowMlrOFcB_og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkzNzEyMg==", "bodyText": "Note that this part of the api design is currently in flux, so it may change a bit yet. Sorry! :(\nNo action required (yet).", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r364937122", "createdAt": "2020-01-09T20:08:02Z", "author": {"login": "rsgowman"}, "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -528,6 +532,17 @@ UpdateRequest setValidSince(long epochSeconds) {\n       return this;\n     }\n \n+    UpdateRequest linkProvider(@NonNull UserProvider userProvider) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52608d5664e611c76a6552e7cb9f871bdc8538cb"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDEzMjgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDoxMDo0MFrOFcCDig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDoxMDo0MFrOFcCDig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkzODEyMg==", "bodyText": "Should be public (and probably have some javadoc).", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r364938122", "createdAt": "2020-01-09T20:10:40Z", "author": {"login": "rsgowman"}, "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -528,6 +532,17 @@ UpdateRequest setValidSince(long epochSeconds) {\n       return this;\n     }\n \n+    UpdateRequest linkProvider(@NonNull UserProvider userProvider) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52608d5664e611c76a6552e7cb9f871bdc8538cb"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDEzMzYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDoxMDo1NFrOFcCEAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDoxMDo1NFrOFcCEAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkzODI0Mg==", "bodyText": "public/javadoc", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r364938242", "createdAt": "2020-01-09T20:10:54Z", "author": {"login": "rsgowman"}, "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -528,6 +532,17 @@ UpdateRequest setValidSince(long epochSeconds) {\n       return this;\n     }\n \n+    UpdateRequest linkProvider(@NonNull UserProvider userProvider) {\n+      properties.put(\"linkProviderUserInfo\", userProvider);\n+      return this;\n+    }\n+\n+    UpdateRequest deleteProvider(String providerId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52608d5664e611c76a6552e7cb9f871bdc8538cb"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDE0OTQ0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/google/firebase/auth/FirebaseAuthIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDoxNzoxNlrOFcCN6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDoxNzoxNlrOFcCN6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk0MDc3OA==", "bodyText": "Good catch.", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r364940778", "createdAt": "2020-01-09T20:17:16Z", "author": {"login": "rsgowman"}, "path": "src/test/java/com/google/firebase/auth/FirebaseAuthIT.java", "diffHunk": "@@ -178,73 +179,134 @@ public void testCreateUserWithParams() throws Exception {\n   public void testUserLifecycle() throws Exception {\n     // Create user\n     UserRecord userRecord = auth.createUserAsync(new CreateRequest()).get();\n-    String uid = userRecord.getUid();\n-\n-    // Get user\n-    userRecord = auth.getUserAsync(userRecord.getUid()).get();\n-    assertEquals(uid, userRecord.getUid());\n-    assertNull(userRecord.getDisplayName());\n-    assertNull(userRecord.getEmail());\n-    assertNull(userRecord.getPhoneNumber());\n-    assertNull(userRecord.getPhotoUrl());\n-    assertFalse(userRecord.isEmailVerified());\n-    assertFalse(userRecord.isDisabled());\n-    assertTrue(userRecord.getUserMetadata().getCreationTimestamp() > 0);\n-    assertEquals(0, userRecord.getUserMetadata().getLastSignInTimestamp());\n-    assertEquals(0, userRecord.getProviderData().length);\n-    assertTrue(userRecord.getCustomClaims().isEmpty());\n-\n-    // Update user\n-    RandomUser randomUser = RandomUser.create();\n-    String phone = randomPhoneNumber();\n-    UpdateRequest request = userRecord.updateRequest()\n-        .setDisplayName(\"Updated Name\")\n-        .setEmail(randomUser.email)\n-        .setPhoneNumber(phone)\n-        .setPhotoUrl(\"https://example.com/photo.png\")\n-        .setEmailVerified(true)\n-        .setPassword(\"secret\");\n-    userRecord = auth.updateUserAsync(request).get();\n-    assertEquals(uid, userRecord.getUid());\n-    assertEquals(\"Updated Name\", userRecord.getDisplayName());\n-    assertEquals(randomUser.email, userRecord.getEmail());\n-    assertEquals(phone, userRecord.getPhoneNumber());\n-    assertEquals(\"https://example.com/photo.png\", userRecord.getPhotoUrl());\n-    assertTrue(userRecord.isEmailVerified());\n-    assertFalse(userRecord.isDisabled());\n-    assertEquals(2, userRecord.getProviderData().length);\n-    assertTrue(userRecord.getCustomClaims().isEmpty());\n-\n-    // Get user by email\n-    userRecord = auth.getUserByEmailAsync(userRecord.getEmail()).get();\n-    assertEquals(uid, userRecord.getUid());\n-\n-    // Disable user and remove properties\n-    request = userRecord.updateRequest()\n-        .setPhotoUrl(null)\n-        .setDisplayName(null)\n-        .setPhoneNumber(null)\n-        .setDisabled(true);\n-    userRecord = auth.updateUserAsync(request).get();\n-    assertEquals(uid, userRecord.getUid());\n-    assertNull(userRecord.getDisplayName());\n-    assertEquals(randomUser.email, userRecord.getEmail());\n-    assertNull(userRecord.getPhoneNumber());\n-    assertNull(userRecord.getPhotoUrl());\n-    assertTrue(userRecord.isEmailVerified());\n-    assertTrue(userRecord.isDisabled());\n-    assertEquals(1, userRecord.getProviderData().length);\n-    assertTrue(userRecord.getCustomClaims().isEmpty());\n-\n-    // Delete user\n-    auth.deleteUserAsync(userRecord.getUid()).get();\n     try {\n-      auth.getUserAsync(userRecord.getUid()).get();\n-      fail(\"No error thrown for deleted user\");\n-    } catch (ExecutionException e) {\n-      assertTrue(e.getCause() instanceof FirebaseAuthException);\n-      assertEquals(FirebaseUserManager.USER_NOT_FOUND_ERROR,\n-          ((FirebaseAuthException) e.getCause()).getErrorCode());\n+      String uid = userRecord.getUid();\n+\n+      // Get user\n+      userRecord = auth.getUserAsync(userRecord.getUid()).get();\n+      assertEquals(uid, userRecord.getUid());\n+      assertNull(userRecord.getDisplayName());\n+      assertNull(userRecord.getEmail());\n+      assertNull(userRecord.getPhoneNumber());\n+      assertNull(userRecord.getPhotoUrl());\n+      assertFalse(userRecord.isEmailVerified());\n+      assertFalse(userRecord.isDisabled());\n+      assertTrue(userRecord.getUserMetadata().getCreationTimestamp() > 0);\n+      assertEquals(0, userRecord.getUserMetadata().getLastSignInTimestamp());\n+      assertEquals(0, userRecord.getProviderData().length);\n+      assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+      // Update user\n+      RandomUser randomUser = RandomUser.create();\n+      UpdateRequest request = userRecord.updateRequest()\n+          .setDisplayName(\"Updated Name\")\n+          .setEmail(randomUser.email)\n+          .setPhoneNumber(randomUser.phone)\n+          .setPhotoUrl(\"https://example.com/photo.png\")\n+          .setEmailVerified(true)\n+          .setPassword(\"secret\");\n+      userRecord = auth.updateUserAsync(request).get();\n+      assertEquals(uid, userRecord.getUid());\n+      assertEquals(\"Updated Name\", userRecord.getDisplayName());\n+      assertEquals(randomUser.email, userRecord.getEmail());\n+      assertEquals(randomUser.phone, userRecord.getPhoneNumber());\n+      assertEquals(\"https://example.com/photo.png\", userRecord.getPhotoUrl());\n+      assertTrue(userRecord.isEmailVerified());\n+      assertFalse(userRecord.isDisabled());\n+      assertEquals(2, userRecord.getProviderData().length);\n+      assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+      // Link user to IDP providers\n+      request = userRecord.updateRequest()\n+          .linkProvider(\n+              UserProvider\n+                  .builder()\n+                  .setUid(\"testuid\")\n+                  .setProviderId(\"google.com\")\n+                  .setEmail(\"test@example.com\")\n+                  .setDisplayName(\"Test User\")\n+                  .setPhotoUrl(\"https://test.com/user.png\")\n+                  .build());\n+      userRecord = auth.updateUserAsync(request).get();\n+      assertEquals(uid, userRecord.getUid());\n+      assertEquals(\"Updated Name\", userRecord.getDisplayName());\n+      assertEquals(randomUser.email, userRecord.getEmail());\n+      assertEquals(randomUser.phone, userRecord.getPhoneNumber());\n+      assertEquals(\"https://example.com/photo.png\", userRecord.getPhotoUrl());\n+      assertTrue(userRecord.isEmailVerified());\n+      assertFalse(userRecord.isDisabled());\n+      assertEquals(3, userRecord.getProviderData().length);\n+      List<String> providers = new ArrayList<>();\n+      for (UserInfo provider : userRecord.getProviderData()) {\n+        providers.add(provider.getProviderId());\n+      }\n+      assertTrue(providers.contains(\"google.com\"));\n+      assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+      // Unlink phone provider\n+      request = userRecord.updateRequest().deleteProvider(\"phone\");\n+      userRecord = auth.updateUserAsync(request).get();\n+      assertNull(userRecord.getPhoneNumber());\n+      assertEquals(2, userRecord.getProviderData().length);\n+      providers.clear();\n+      for (UserInfo provider : userRecord.getProviderData()) {\n+        providers.add(provider.getProviderId());\n+      }\n+      assertFalse(providers.contains(\"phone\"));\n+      assertEquals(uid, userRecord.getUid());\n+      assertEquals(\"Updated Name\", userRecord.getDisplayName());\n+      assertEquals(randomUser.email, userRecord.getEmail());\n+      assertEquals(\"https://example.com/photo.png\", userRecord.getPhotoUrl());\n+      assertTrue(userRecord.isEmailVerified());\n+      assertFalse(userRecord.isDisabled());\n+      assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+      // Unlink IDP provider\n+      request = userRecord.updateRequest().deleteProvider(\"google.com\");\n+      userRecord = auth.updateUserAsync(request).get();\n+      assertEquals(1, userRecord.getProviderData().length);\n+      assertNotEquals(\"google.com\", userRecord.getProviderData()[0].getProviderId());\n+      assertEquals(uid, userRecord.getUid());\n+      assertEquals(\"Updated Name\", userRecord.getDisplayName());\n+      assertEquals(randomUser.email, userRecord.getEmail());\n+      assertNull(userRecord.getPhoneNumber());\n+      assertEquals(\"https://example.com/photo.png\", userRecord.getPhotoUrl());\n+      assertTrue(userRecord.isEmailVerified());\n+      assertFalse(userRecord.isDisabled());\n+      assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+      // Get user by email\n+      userRecord = auth.getUserByEmailAsync(userRecord.getEmail()).get();\n+      assertEquals(uid, userRecord.getUid());\n+\n+      // Disable user and remove properties\n+      request = userRecord.updateRequest()\n+          .setPhotoUrl(null)\n+          .setDisplayName(null)\n+          .setPhoneNumber(null)\n+          .setDisabled(true);\n+      userRecord = auth.updateUserAsync(request).get();\n+      assertEquals(uid, userRecord.getUid());\n+      assertNull(userRecord.getDisplayName());\n+      assertEquals(randomUser.email, userRecord.getEmail());\n+      assertNull(userRecord.getPhoneNumber());\n+      assertNull(userRecord.getPhotoUrl());\n+      assertTrue(userRecord.isEmailVerified());\n+      assertTrue(userRecord.isDisabled());\n+      assertEquals(1, userRecord.getProviderData().length);\n+      assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+    } finally {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52608d5664e611c76a6552e7cb9f871bdc8538cb"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDQ5MjM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMjo0Mjo0M1rOFcFl3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMjo0Mjo0M1rOFcFl3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk5NjA2Mg==", "bodyText": "It might still be worth checking each providerId to ensure it's not null/empty?", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r364996062", "createdAt": "2020-01-09T22:42:43Z", "author": {"login": "rsgowman"}, "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -526,20 +522,30 @@ public UpdateRequest setCustomClaims(Map<String,Object> customClaims) {\n       return this;\n     }\n \n-    UpdateRequest setValidSince(long epochSeconds) {\n-      checkValidSince(epochSeconds);\n-      properties.put(\"validSince\", epochSeconds);\n+    /**\n+     * Updates the provider to be linked to this user\\'s account.\n+     *\n+     * @param userProvider provider info to be linked to this user\\'s account.\n+     */\n+    public UpdateRequest setLinkProvider(@NonNull UserProvider userProvider) {\n+      properties.put(\"linkProviderUserInfo\", userProvider);\n       return this;\n     }\n \n-    UpdateRequest linkProvider(@NonNull UserProvider userProvider) {\n-      properties.put(\"linkProviderUserInfo\", userProvider);\n+    /**\n+     * Updates the identity providers to unlink from this user\\'s account.\n+     *\n+     * @param providerIds list of identifiers for the identity providers.\n+     */\n+    public UpdateRequest setDeleteProviders(List<String> providerIds) {\n+      checkNotNull(providerIds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dface3afbb1bfac907b3a0c01d74a6a4c2d094e4"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDUwNTM5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMjo0ODo0OFrOFcFt0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMjo0ODo0OFrOFcFt0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk5ODA5OQ==", "bodyText": "Can Iterable be used here (instead of List)?", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r364998099", "createdAt": "2020-01-09T22:48:48Z", "author": {"login": "rsgowman"}, "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -526,20 +522,30 @@ public UpdateRequest setCustomClaims(Map<String,Object> customClaims) {\n       return this;\n     }\n \n-    UpdateRequest setValidSince(long epochSeconds) {\n-      checkValidSince(epochSeconds);\n-      properties.put(\"validSince\", epochSeconds);\n+    /**\n+     * Updates the provider to be linked to this user\\'s account.\n+     *\n+     * @param userProvider provider info to be linked to this user\\'s account.\n+     */\n+    public UpdateRequest setLinkProvider(@NonNull UserProvider userProvider) {\n+      properties.put(\"linkProviderUserInfo\", userProvider);\n       return this;\n     }\n \n-    UpdateRequest linkProvider(@NonNull UserProvider userProvider) {\n-      properties.put(\"linkProviderUserInfo\", userProvider);\n+    /**\n+     * Updates the identity providers to unlink from this user\\'s account.\n+     *\n+     * @param providerIds list of identifiers for the identity providers.\n+     */\n+    public UpdateRequest setDeleteProviders(List<String> providerIds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dface3afbb1bfac907b3a0c01d74a6a4c2d094e4"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDUwODQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMjo1MDoxN1rOFcFvwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMjo1MDoxN1rOFcFvwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk5ODU5NA==", "bodyText": "Don't think you need to escape the apostrophe", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r364998594", "createdAt": "2020-01-09T22:50:17Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -522,6 +522,27 @@ public UpdateRequest setCustomClaims(Map<String,Object> customClaims) {\n       return this;\n     }\n \n+    /**\n+     * Updates the provider to be linked to this user\\'s account.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dface3afbb1bfac907b3a0c01d74a6a4c2d094e4"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDUxMzcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMjo1Mjo1MVrOFcFy_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMjo1Mjo1MVrOFcFy_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk5OTQyMg==", "bodyText": "Check out line 567. (Github doesn't allow you to comment on lines that haven't been changed.) The deleteProvider property will be overwritten if the phone property is null. I think you'll need to change that to append if it already exists (or set if it does not.)", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r364999422", "createdAt": "2020-01-09T22:52:51Z", "author": {"login": "rsgowman"}, "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -526,20 +522,30 @@ public UpdateRequest setCustomClaims(Map<String,Object> customClaims) {\n       return this;\n     }\n \n-    UpdateRequest setValidSince(long epochSeconds) {\n-      checkValidSince(epochSeconds);\n-      properties.put(\"validSince\", epochSeconds);\n+    /**\n+     * Updates the provider to be linked to this user\\'s account.\n+     *\n+     * @param userProvider provider info to be linked to this user\\'s account.\n+     */\n+    public UpdateRequest setLinkProvider(@NonNull UserProvider userProvider) {\n+      properties.put(\"linkProviderUserInfo\", userProvider);\n       return this;\n     }\n \n-    UpdateRequest linkProvider(@NonNull UserProvider userProvider) {\n-      properties.put(\"linkProviderUserInfo\", userProvider);\n+    /**\n+     * Updates the identity providers to unlink from this user\\'s account.\n+     *\n+     * @param providerIds list of identifiers for the identity providers.\n+     */\n+    public UpdateRequest setDeleteProviders(List<String> providerIds) {\n+      checkNotNull(providerIds);\n+      properties.put(\"deleteProvider\", providerIds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dface3afbb1bfac907b3a0c01d74a6a4c2d094e4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDUyNDU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMjo1Nzo0MFrOFcF5Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMjo1Nzo0MFrOFcF5Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAwMTA2Mw==", "bodyText": "This is a bit weird name. Was this the name decided in the API review? setLinkedProvider sounds better. Or just linkProvider.", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r365001063", "createdAt": "2020-01-09T22:57:40Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -522,6 +522,27 @@ public UpdateRequest setCustomClaims(Map<String,Object> customClaims) {\n       return this;\n     }\n \n+    /**\n+     * Updates the provider to be linked to this user\\'s account.\n+     *\n+     * @param userProvider provider info to be linked to this user\\'s account.\n+     */\n+    public UpdateRequest setLinkProvider(@NonNull UserProvider userProvider) {\n+      properties.put(\"linkProviderUserInfo\", userProvider);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dface3afbb1bfac907b3a0c01d74a6a4c2d094e4"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDU0MDA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMzowNToyN1rOFcGCsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMzowNToyN1rOFcGCsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAwMzQ0MA==", "bodyText": "deleteProvider or unlinkProvider. Also provide versions that take a single string and a collection", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r365003440", "createdAt": "2020-01-09T23:05:27Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -522,6 +522,27 @@ public UpdateRequest setCustomClaims(Map<String,Object> customClaims) {\n       return this;\n     }\n \n+    /**\n+     * Updates the provider to be linked to this user\\'s account.\n+     *\n+     * @param userProvider provider info to be linked to this user\\'s account.\n+     */\n+    public UpdateRequest setLinkProvider(@NonNull UserProvider userProvider) {\n+      properties.put(\"linkProviderUserInfo\", userProvider);\n+      return this;\n+    }\n+\n+    /**\n+     * Updates the identity providers to unlink from this user\\'s account.\n+     *\n+     * @param providerIds list of identifiers for the identity providers.\n+     */\n+    public UpdateRequest setDeleteProviders(List<String> providerIds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dface3afbb1bfac907b3a0c01d74a6a4c2d094e4"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDU0NDM3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/google/firebase/auth/FirebaseAuthIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMzowNzo1NlrOFcGFag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMzowNzo1NlrOFcGFag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAwNDEzOA==", "bodyText": "Move this entire block into a helper method for clarity", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r365004138", "createdAt": "2020-01-09T23:07:56Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/auth/FirebaseAuthIT.java", "diffHunk": "@@ -178,73 +179,135 @@ public void testCreateUserWithParams() throws Exception {\n   public void testUserLifecycle() throws Exception {\n     // Create user\n     UserRecord userRecord = auth.createUserAsync(new CreateRequest()).get();\n-    String uid = userRecord.getUid();\n-\n-    // Get user\n-    userRecord = auth.getUserAsync(userRecord.getUid()).get();\n-    assertEquals(uid, userRecord.getUid());\n-    assertNull(userRecord.getDisplayName());\n-    assertNull(userRecord.getEmail());\n-    assertNull(userRecord.getPhoneNumber());\n-    assertNull(userRecord.getPhotoUrl());\n-    assertFalse(userRecord.isEmailVerified());\n-    assertFalse(userRecord.isDisabled());\n-    assertTrue(userRecord.getUserMetadata().getCreationTimestamp() > 0);\n-    assertEquals(0, userRecord.getUserMetadata().getLastSignInTimestamp());\n-    assertEquals(0, userRecord.getProviderData().length);\n-    assertTrue(userRecord.getCustomClaims().isEmpty());\n-\n-    // Update user\n-    RandomUser randomUser = RandomUser.create();\n-    String phone = randomPhoneNumber();\n-    UpdateRequest request = userRecord.updateRequest()\n-        .setDisplayName(\"Updated Name\")\n-        .setEmail(randomUser.email)\n-        .setPhoneNumber(phone)\n-        .setPhotoUrl(\"https://example.com/photo.png\")\n-        .setEmailVerified(true)\n-        .setPassword(\"secret\");\n-    userRecord = auth.updateUserAsync(request).get();\n-    assertEquals(uid, userRecord.getUid());\n-    assertEquals(\"Updated Name\", userRecord.getDisplayName());\n-    assertEquals(randomUser.email, userRecord.getEmail());\n-    assertEquals(phone, userRecord.getPhoneNumber());\n-    assertEquals(\"https://example.com/photo.png\", userRecord.getPhotoUrl());\n-    assertTrue(userRecord.isEmailVerified());\n-    assertFalse(userRecord.isDisabled());\n-    assertEquals(2, userRecord.getProviderData().length);\n-    assertTrue(userRecord.getCustomClaims().isEmpty());\n-\n-    // Get user by email\n-    userRecord = auth.getUserByEmailAsync(userRecord.getEmail()).get();\n-    assertEquals(uid, userRecord.getUid());\n-\n-    // Disable user and remove properties\n-    request = userRecord.updateRequest()\n-        .setPhotoUrl(null)\n-        .setDisplayName(null)\n-        .setPhoneNumber(null)\n-        .setDisabled(true);\n-    userRecord = auth.updateUserAsync(request).get();\n-    assertEquals(uid, userRecord.getUid());\n-    assertNull(userRecord.getDisplayName());\n-    assertEquals(randomUser.email, userRecord.getEmail());\n-    assertNull(userRecord.getPhoneNumber());\n-    assertNull(userRecord.getPhotoUrl());\n-    assertTrue(userRecord.isEmailVerified());\n-    assertTrue(userRecord.isDisabled());\n-    assertEquals(1, userRecord.getProviderData().length);\n-    assertTrue(userRecord.getCustomClaims().isEmpty());\n-\n-    // Delete user\n-    auth.deleteUserAsync(userRecord.getUid()).get();\n     try {\n-      auth.getUserAsync(userRecord.getUid()).get();\n-      fail(\"No error thrown for deleted user\");\n-    } catch (ExecutionException e) {\n-      assertTrue(e.getCause() instanceof FirebaseAuthException);\n-      assertEquals(FirebaseUserManager.USER_NOT_FOUND_ERROR,\n-          ((FirebaseAuthException) e.getCause()).getErrorCode());\n+      String uid = userRecord.getUid();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dface3afbb1bfac907b3a0c01d74a6a4c2d094e4"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc3Mjg5ODM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xOVQwMDoyMzoxOFrOI5p-xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0zMVQxODozMjo0N1rOJBGOEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzMyNzU1OQ==", "bodyText": "Do we need a non-null check for the argument?", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r597327559", "createdAt": "2021-03-19T00:23:18Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -548,6 +548,41 @@ public UpdateRequest setCustomClaims(Map<String,Object> customClaims) {\n       return this;\n     }\n \n+    /**\n+     * Links this user to the specified provider.\n+     *\n+     * <p>Linking a provider to an existing user account does not invalidate the\n+     * refresh token of that account. In other words, the existing account\n+     * would continue to be able to access resources, despite not having used\n+     * the newly linked provider to log in. If you wish to force the user to\n+     * authenticate with this new provider, you need to (a) revoke their\n+     * refresh token (see\n+     * https://firebase.google.com/docs/auth/admin/manage-sessions#revoke_refresh_tokens),\n+     * and (b) ensure no other authentication methods are present on this\n+     * account.\n+     *\n+     * @param providerToLink provider info to be linked to this user\\'s account.\n+     */\n+    public UpdateRequest setProviderToLink(@NonNull UserProvider providerToLink) {\n+      properties.put(\"linkProviderUserInfo\", providerToLink);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bcaf694339d0e209291cb77a5c2ed61a6edcd25"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTEzMDI1Nw==", "bodyText": "Yes; done.", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r605130257", "createdAt": "2021-03-31T18:32:47Z", "author": {"login": "rsgowman"}, "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -548,6 +548,41 @@ public UpdateRequest setCustomClaims(Map<String,Object> customClaims) {\n       return this;\n     }\n \n+    /**\n+     * Links this user to the specified provider.\n+     *\n+     * <p>Linking a provider to an existing user account does not invalidate the\n+     * refresh token of that account. In other words, the existing account\n+     * would continue to be able to access resources, despite not having used\n+     * the newly linked provider to log in. If you wish to force the user to\n+     * authenticate with this new provider, you need to (a) revoke their\n+     * refresh token (see\n+     * https://firebase.google.com/docs/auth/admin/manage-sessions#revoke_refresh_tokens),\n+     * and (b) ensure no other authentication methods are present on this\n+     * account.\n+     *\n+     * @param providerToLink provider info to be linked to this user\\'s account.\n+     */\n+    public UpdateRequest setProviderToLink(@NonNull UserProvider providerToLink) {\n+      properties.put(\"linkProviderUserInfo\", providerToLink);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzMyNzU1OQ=="}, "originalCommit": {"oid": "0bcaf694339d0e209291cb77a5c2ed61a6edcd25"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc3MjkwMTc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xOVQwMDoyNTowMFrOI5qAuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0zMVQxODozNTozMVrOJBGT_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzMyODA1Ng==", "bodyText": "I'd just forego the explicit check and let the cast error pop up. This case should never occur since the writes to the properties map is managed by our code.", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r597328056", "createdAt": "2021-03-19T00:25:00Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -569,7 +604,24 @@ UpdateRequest setValidSince(long epochSeconds) {\n       }\n \n       if (copy.containsKey(\"phoneNumber\") && copy.get(\"phoneNumber\") == null) {\n-        copy.put(\"deleteProvider\", ImmutableList.of(\"phone\"));\n+        Object deleteProvider = copy.get(\"deleteProvider\");\n+        if (deleteProvider != null) {\n+          if (!(deleteProvider instanceof Iterable<?>)) {\n+            throw new IllegalStateException(\"Contents of deleteProvider was not iterable\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bcaf694339d0e209291cb77a5c2ed61a6edcd25"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTEzMTc3NQ==", "bodyText": "Done. (And yes, this should never occur.)", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r605131775", "createdAt": "2021-03-31T18:35:31Z", "author": {"login": "rsgowman"}, "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -569,7 +604,24 @@ UpdateRequest setValidSince(long epochSeconds) {\n       }\n \n       if (copy.containsKey(\"phoneNumber\") && copy.get(\"phoneNumber\") == null) {\n-        copy.put(\"deleteProvider\", ImmutableList.of(\"phone\"));\n+        Object deleteProvider = copy.get(\"deleteProvider\");\n+        if (deleteProvider != null) {\n+          if (!(deleteProvider instanceof Iterable<?>)) {\n+            throw new IllegalStateException(\"Contents of deleteProvider was not iterable\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzMyODA1Ng=="}, "originalCommit": {"oid": "0bcaf694339d0e209291cb77a5c2ed61a6edcd25"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc3MjkwNTkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xOVQwMDoyNjozN1rOI5qDBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wOVQxODo1ODoyMlrOJGjBhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzMyODY0NQ==", "bodyText": "Should we handle the double specification case?\nuser.updateRequest()\n  .setPhoneNumber(null)\n  .setProvidersToUnlink(ImmutableList.of(\"phone\"))\n\nI remember handling this case is other languages.", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r597328645", "createdAt": "2021-03-19T00:26:37Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -569,7 +604,24 @@ UpdateRequest setValidSince(long epochSeconds) {\n       }\n \n       if (copy.containsKey(\"phoneNumber\") && copy.get(\"phoneNumber\") == null) {\n-        copy.put(\"deleteProvider\", ImmutableList.of(\"phone\"));\n+        Object deleteProvider = copy.get(\"deleteProvider\");\n+        if (deleteProvider != null) {\n+          if (!(deleteProvider instanceof Iterable<?>)) {\n+            throw new IllegalStateException(\"Contents of deleteProvider was not iterable\");\n+          }\n+\n+          // Due to java's type erasure, we can't fully check the type. :(\n+          @SuppressWarnings(\"unchecked\")\n+          Iterable<String> deleteProviderIterable = (Iterable<String>)deleteProvider;\n+\n+          copy.put(\"deleteProvider\", new ImmutableList.Builder<String>()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bcaf694339d0e209291cb77a5c2ed61a6edcd25"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTE0MTQ3Mg==", "bodyText": "Done. Note that this results in the IllegalArgumentException being wrapped in an ExecutionException, which is a little awkward. (Option 1)\nOption 2:\nWe can resolve that by pulling the property calculation out of the async portion. It's a bit more disruptive, and diverges from how get/posts are handled throughout the rest of the code base. Roughly:\nFirebaseUserManager.java:\n...\n- void updateUser(UserRecord.UpdateRequest request JsonFactory jsonFactory) {\n+ void updateUser(Map<String, Object> payload) {\n...\n\n(NB: This is not a public interface.)\nOption 3:\nAlternatively, we could just call request.getProperties() before the async portion and ignore the results. (i.e. call it twice.)\nI've left it as option 1 for now. lmk if you'd prefer 2 or 3.", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r605141472", "createdAt": "2021-03-31T18:51:12Z", "author": {"login": "rsgowman"}, "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -569,7 +604,24 @@ UpdateRequest setValidSince(long epochSeconds) {\n       }\n \n       if (copy.containsKey(\"phoneNumber\") && copy.get(\"phoneNumber\") == null) {\n-        copy.put(\"deleteProvider\", ImmutableList.of(\"phone\"));\n+        Object deleteProvider = copy.get(\"deleteProvider\");\n+        if (deleteProvider != null) {\n+          if (!(deleteProvider instanceof Iterable<?>)) {\n+            throw new IllegalStateException(\"Contents of deleteProvider was not iterable\");\n+          }\n+\n+          // Due to java's type erasure, we can't fully check the type. :(\n+          @SuppressWarnings(\"unchecked\")\n+          Iterable<String> deleteProviderIterable = (Iterable<String>)deleteProvider;\n+\n+          copy.put(\"deleteProvider\", new ImmutableList.Builder<String>()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzMyODY0NQ=="}, "originalCommit": {"oid": "0bcaf694339d0e209291cb77a5c2ed61a6edcd25"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTkwNTc0NA==", "bodyText": "Would it make sense to enforce this constraint in the setters? We'd have to do so in both setPhoneNumber() and setProvidersToUnlink(), but I think we can reduce the duplication via some sort of a helper function. That would make argument validation consistent with the pattern currently used in this class.", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r605905744", "createdAt": "2021-04-01T19:48:17Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -569,7 +604,24 @@ UpdateRequest setValidSince(long epochSeconds) {\n       }\n \n       if (copy.containsKey(\"phoneNumber\") && copy.get(\"phoneNumber\") == null) {\n-        copy.put(\"deleteProvider\", ImmutableList.of(\"phone\"));\n+        Object deleteProvider = copy.get(\"deleteProvider\");\n+        if (deleteProvider != null) {\n+          if (!(deleteProvider instanceof Iterable<?>)) {\n+            throw new IllegalStateException(\"Contents of deleteProvider was not iterable\");\n+          }\n+\n+          // Due to java's type erasure, we can't fully check the type. :(\n+          @SuppressWarnings(\"unchecked\")\n+          Iterable<String> deleteProviderIterable = (Iterable<String>)deleteProvider;\n+\n+          copy.put(\"deleteProvider\", new ImmutableList.Builder<String>()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzMyODY0NQ=="}, "originalCommit": {"oid": "0bcaf694339d0e209291cb77a5c2ed61a6edcd25"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDg0NTA2MA==", "bodyText": "Yeah, that's better; done. I've removed the logic here, i.e. if we somehow get into a bad state, we won't notice it. (But now we shouldn't get into that state.)\nI didn't create a helper; there wasn't much duplication (though the exception itself is duplicated). If we set the value first and then checked, it would work out better... but that risks leaving the object in a bad state (eg if user catches and ignores the exception and then proceeds to use the object anyways.)", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r610845060", "createdAt": "2021-04-09T18:58:22Z", "author": {"login": "rsgowman"}, "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -569,7 +604,24 @@ UpdateRequest setValidSince(long epochSeconds) {\n       }\n \n       if (copy.containsKey(\"phoneNumber\") && copy.get(\"phoneNumber\") == null) {\n-        copy.put(\"deleteProvider\", ImmutableList.of(\"phone\"));\n+        Object deleteProvider = copy.get(\"deleteProvider\");\n+        if (deleteProvider != null) {\n+          if (!(deleteProvider instanceof Iterable<?>)) {\n+            throw new IllegalStateException(\"Contents of deleteProvider was not iterable\");\n+          }\n+\n+          // Due to java's type erasure, we can't fully check the type. :(\n+          @SuppressWarnings(\"unchecked\")\n+          Iterable<String> deleteProviderIterable = (Iterable<String>)deleteProvider;\n+\n+          copy.put(\"deleteProvider\", new ImmutableList.Builder<String>()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzMyODY0NQ=="}, "originalCommit": {"oid": "0bcaf694339d0e209291cb77a5c2ed61a6edcd25"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1504, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}