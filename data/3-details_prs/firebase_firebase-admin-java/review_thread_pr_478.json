{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwNTQ1OTQ5", "number": 478, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMTowMzoyNlrOEl1pQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDoyMzo1OVrOEmxNxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTExNjgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMTowMzoyNlrOHViVbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMTo0MzozMFrOHVjdgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0NDY4NQ==", "bodyText": "A builder is overkill for just 2 arguments. I'd recommend something simpler and direct:\n@VisibleForTesting\nFirebaseRemoteConfig(FirebaseApp app, FirebaseRemoteConfigClient client) {\n  this.app = checkNotNull(app);\n  this.client = checkNotNull(client);\n}\n\nprivate FirebaseRemoteConfig(FirebaseApp app) {\n  this(app, FirebaseRemoteConfigClientImpl.fromApp(app));\n}\nNote that I'm also not using a Supplier here. Since the client is needed for all operations in this API, there's no reason to lazy initialize it.", "url": "https://github.com/firebase/firebase-admin-java/pull/478#discussion_r492344685", "createdAt": "2020-09-21T21:03:26Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.ImplFirebaseTrampolines;\n+import com.google.firebase.internal.CallableOperation;\n+import com.google.firebase.internal.FirebaseService;\n+\n+/**\n+ * This class is the entry point for all server-side Firebase Remote Config actions.\n+ *\n+ * <p>You can get an instance of FirebaseRemoteConfig via {@link #getInstance(FirebaseApp)}, and\n+ * then use it to manage Remote Config templates.\n+ */\n+public final class FirebaseRemoteConfig {\n+\n+  private static final String SERVICE_ID = FirebaseRemoteConfig.class.getName();\n+  private final FirebaseApp app;\n+  private final Supplier<? extends FirebaseRemoteConfigClient> remoteConfigClient;\n+\n+  private FirebaseRemoteConfig(Builder builder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be1d9a498f2f39cb546fbe89bb87ffcca47fa11e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM2MzEzNw==", "bodyText": "Good point! Updated the code.\nI had to update the unit test for testRemoteConfigClientWithoutProjectId(). As the client is now initialized at construction it throws at FirebaseRemoteConfig.getInstance().", "url": "https://github.com/firebase/firebase-admin-java/pull/478#discussion_r492363137", "createdAt": "2020-09-21T21:43:30Z", "author": {"login": "lahirumaramba"}, "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.ImplFirebaseTrampolines;\n+import com.google.firebase.internal.CallableOperation;\n+import com.google.firebase.internal.FirebaseService;\n+\n+/**\n+ * This class is the entry point for all server-side Firebase Remote Config actions.\n+ *\n+ * <p>You can get an instance of FirebaseRemoteConfig via {@link #getInstance(FirebaseApp)}, and\n+ * then use it to manage Remote Config templates.\n+ */\n+public final class FirebaseRemoteConfig {\n+\n+  private static final String SERVICE_ID = FirebaseRemoteConfig.class.getName();\n+  private final FirebaseApp app;\n+  private final Supplier<? extends FirebaseRemoteConfigClient> remoteConfigClient;\n+\n+  private FirebaseRemoteConfig(Builder builder) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0NDY4NQ=="}, "originalCommit": {"oid": "be1d9a498f2f39cb546fbe89bb87ffcca47fa11e"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTEyNTkwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMTowNjowNFrOHViazA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMTowNjowNFrOHViazA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0NjA2MA==", "bodyText": "Add space before", "url": "https://github.com/firebase/firebase-admin-java/pull/478#discussion_r492346060", "createdAt": "2020-09-21T21:06:04Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n+import com.google.firebase.ErrorCode;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.FirebaseOptions;\n+import com.google.firebase.TestOnlyImplFirebaseTrampolines;\n+import com.google.firebase.auth.MockGoogleCredentials;\n+import java.util.concurrent.ExecutionException;\n+import org.junit.After;\n+import org.junit.Test;\n+\n+public class FirebaseRemoteConfigTest {\n+  private static final FirebaseOptions TEST_OPTIONS = FirebaseOptions.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be1d9a498f2f39cb546fbe89bb87ffcca47fa11e"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTU2MjIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMDowMjo1NVrOHVmadA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzo0Nzo0M1rOHV68EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQxMTUwOA==", "bodyText": "Remove fromApp. Call constructor directly where it's needed.", "url": "https://github.com/firebase/firebase-admin-java/pull/478#discussion_r492411508", "createdAt": "2020-09-22T00:02:55Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java", "diffHunk": "@@ -99,23 +102,11 @@ protected RemoteConfigTemplate execute() throws FirebaseRemoteConfigException {\n \n   @VisibleForTesting\n   FirebaseRemoteConfigClient getRemoteConfigClient() {\n-    return remoteConfigClient.get();\n+    return remoteConfigClient;\n   }\n \n   private static FirebaseRemoteConfig fromApp(final FirebaseApp app) {\n-    return FirebaseRemoteConfig.builder()\n-            .setFirebaseApp(app)\n-            .setRemoteConfigClient(new Supplier<FirebaseRemoteConfigClient>() {\n-              @Override\n-              public FirebaseRemoteConfigClient get() {\n-                return FirebaseRemoteConfigClientImpl.fromApp(app);\n-              }\n-            })\n-            .build();\n-  }\n-\n-  static Builder builder() {\n-    return new Builder();\n+    return new FirebaseRemoteConfig(app);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5108a9237dd5fcd5e2d96f8b91f889f88965d6"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0Nzc5Mw==", "bodyText": "Thanks! Updated!", "url": "https://github.com/firebase/firebase-admin-java/pull/478#discussion_r492747793", "createdAt": "2020-09-22T13:47:43Z", "author": {"login": "lahirumaramba"}, "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java", "diffHunk": "@@ -99,23 +102,11 @@ protected RemoteConfigTemplate execute() throws FirebaseRemoteConfigException {\n \n   @VisibleForTesting\n   FirebaseRemoteConfigClient getRemoteConfigClient() {\n-    return remoteConfigClient.get();\n+    return remoteConfigClient;\n   }\n \n   private static FirebaseRemoteConfig fromApp(final FirebaseApp app) {\n-    return FirebaseRemoteConfig.builder()\n-            .setFirebaseApp(app)\n-            .setRemoteConfigClient(new Supplier<FirebaseRemoteConfigClient>() {\n-              @Override\n-              public FirebaseRemoteConfigClient get() {\n-                return FirebaseRemoteConfigClientImpl.fromApp(app);\n-              }\n-            })\n-            .build();\n-  }\n-\n-  static Builder builder() {\n-    return new Builder();\n+    return new FirebaseRemoteConfig(app);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQxMTUwOA=="}, "originalCommit": {"oid": "cc5108a9237dd5fcd5e2d96f8b91f889f88965d6"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDg2NzQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDoyMToxMVrOHW_hOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjozMDozMFrOHXjHlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3MTQxNg==", "bodyText": "Literal?", "url": "https://github.com/firebase/firebase-admin-java/pull/478#discussion_r493871416", "createdAt": "2020-09-23T20:21:11Z", "author": {"login": "egilmorez"}, "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.ImplFirebaseTrampolines;\n+import com.google.firebase.internal.CallableOperation;\n+import com.google.firebase.internal.FirebaseService;\n+\n+/**\n+ * This class is the entry point for all server-side Firebase Remote Config actions.\n+ *\n+ * <p>You can get an instance of FirebaseRemoteConfig via {@link #getInstance(FirebaseApp)}, and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3016467b16123f0d08819e0fa34543ed3375342f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ1NDY3Ng==", "bodyText": "Updated!", "url": "https://github.com/firebase/firebase-admin-java/pull/478#discussion_r494454676", "createdAt": "2020-09-24T16:30:30Z", "author": {"login": "lahirumaramba"}, "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.ImplFirebaseTrampolines;\n+import com.google.firebase.internal.CallableOperation;\n+import com.google.firebase.internal.FirebaseService;\n+\n+/**\n+ * This class is the entry point for all server-side Firebase Remote Config actions.\n+ *\n+ * <p>You can get an instance of FirebaseRemoteConfig via {@link #getInstance(FirebaseApp)}, and", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3MTQxNg=="}, "originalCommit": {"oid": "3016467b16123f0d08819e0fa34543ed3375342f"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDg3MTMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDoyMjoyMVrOHW_joQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjozMDozOVrOHXjIAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3MjAzMw==", "bodyText": "Suggest present tense, just \"completes\"", "url": "https://github.com/firebase/firebase-admin-java/pull/478#discussion_r493872033", "createdAt": "2020-09-23T20:22:21Z", "author": {"login": "egilmorez"}, "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.ImplFirebaseTrampolines;\n+import com.google.firebase.internal.CallableOperation;\n+import com.google.firebase.internal.FirebaseService;\n+\n+/**\n+ * This class is the entry point for all server-side Firebase Remote Config actions.\n+ *\n+ * <p>You can get an instance of FirebaseRemoteConfig via {@link #getInstance(FirebaseApp)}, and\n+ * then use it to manage Remote Config templates.\n+ */\n+public final class FirebaseRemoteConfig {\n+\n+  private static final String SERVICE_ID = FirebaseRemoteConfig.class.getName();\n+  private final FirebaseApp app;\n+  private final FirebaseRemoteConfigClient remoteConfigClient;\n+\n+  @VisibleForTesting\n+  FirebaseRemoteConfig(FirebaseApp app, FirebaseRemoteConfigClient client) {\n+    this.app = checkNotNull(app);\n+    this.remoteConfigClient = checkNotNull(client);\n+  }\n+\n+  private FirebaseRemoteConfig(FirebaseApp app) {\n+    this(app, FirebaseRemoteConfigClientImpl.fromApp(app));\n+  }\n+\n+  /**\n+   * Gets the {@link FirebaseRemoteConfig} instance for the default {@link FirebaseApp}.\n+   *\n+   * @return The {@link FirebaseRemoteConfig} instance for the default {@link FirebaseApp}.\n+   */\n+  public static FirebaseRemoteConfig getInstance() {\n+    return getInstance(FirebaseApp.getInstance());\n+  }\n+\n+  /**\n+   * Gets the {@link FirebaseRemoteConfig} instance for the specified {@link FirebaseApp}.\n+   *\n+   * @return The {@link FirebaseRemoteConfig} instance for the specified {@link FirebaseApp}.\n+   */\n+  public static synchronized FirebaseRemoteConfig getInstance(FirebaseApp app) {\n+    FirebaseRemoteConfigService service = ImplFirebaseTrampolines.getService(app, SERVICE_ID,\n+            FirebaseRemoteConfigService.class);\n+    if (service == null) {\n+      service = ImplFirebaseTrampolines.addService(app, new FirebaseRemoteConfigService(app));\n+    }\n+    return service.getInstance();\n+  }\n+\n+  /**\n+   * Gets the current active version of the Remote Config template.\n+   *\n+   * @return A {@link RemoteConfigTemplate}.\n+   * @throws FirebaseRemoteConfigException If an error occurs while getting the template.\n+   */\n+  public RemoteConfigTemplate getTemplate() throws FirebaseRemoteConfigException {\n+    return getTemplateOp().call();\n+  }\n+\n+  /**\n+   * Similar to {@link #getTemplate()} but performs the operation asynchronously.\n+   *\n+   * @return An {@code ApiFuture} that will complete with a {@link RemoteConfigTemplate} when", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3016467b16123f0d08819e0fa34543ed3375342f"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ1NDc4Ng==", "bodyText": "Thanks! Updated!", "url": "https://github.com/firebase/firebase-admin-java/pull/478#discussion_r494454786", "createdAt": "2020-09-24T16:30:39Z", "author": {"login": "lahirumaramba"}, "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.ImplFirebaseTrampolines;\n+import com.google.firebase.internal.CallableOperation;\n+import com.google.firebase.internal.FirebaseService;\n+\n+/**\n+ * This class is the entry point for all server-side Firebase Remote Config actions.\n+ *\n+ * <p>You can get an instance of FirebaseRemoteConfig via {@link #getInstance(FirebaseApp)}, and\n+ * then use it to manage Remote Config templates.\n+ */\n+public final class FirebaseRemoteConfig {\n+\n+  private static final String SERVICE_ID = FirebaseRemoteConfig.class.getName();\n+  private final FirebaseApp app;\n+  private final FirebaseRemoteConfigClient remoteConfigClient;\n+\n+  @VisibleForTesting\n+  FirebaseRemoteConfig(FirebaseApp app, FirebaseRemoteConfigClient client) {\n+    this.app = checkNotNull(app);\n+    this.remoteConfigClient = checkNotNull(client);\n+  }\n+\n+  private FirebaseRemoteConfig(FirebaseApp app) {\n+    this(app, FirebaseRemoteConfigClientImpl.fromApp(app));\n+  }\n+\n+  /**\n+   * Gets the {@link FirebaseRemoteConfig} instance for the default {@link FirebaseApp}.\n+   *\n+   * @return The {@link FirebaseRemoteConfig} instance for the default {@link FirebaseApp}.\n+   */\n+  public static FirebaseRemoteConfig getInstance() {\n+    return getInstance(FirebaseApp.getInstance());\n+  }\n+\n+  /**\n+   * Gets the {@link FirebaseRemoteConfig} instance for the specified {@link FirebaseApp}.\n+   *\n+   * @return The {@link FirebaseRemoteConfig} instance for the specified {@link FirebaseApp}.\n+   */\n+  public static synchronized FirebaseRemoteConfig getInstance(FirebaseApp app) {\n+    FirebaseRemoteConfigService service = ImplFirebaseTrampolines.getService(app, SERVICE_ID,\n+            FirebaseRemoteConfigService.class);\n+    if (service == null) {\n+      service = ImplFirebaseTrampolines.addService(app, new FirebaseRemoteConfigService(app));\n+    }\n+    return service.getInstance();\n+  }\n+\n+  /**\n+   * Gets the current active version of the Remote Config template.\n+   *\n+   * @return A {@link RemoteConfigTemplate}.\n+   * @throws FirebaseRemoteConfigException If an error occurs while getting the template.\n+   */\n+  public RemoteConfigTemplate getTemplate() throws FirebaseRemoteConfigException {\n+    return getTemplateOp().call();\n+  }\n+\n+  /**\n+   * Similar to {@link #getTemplate()} but performs the operation asynchronously.\n+   *\n+   * @return An {@code ApiFuture} that will complete with a {@link RemoteConfigTemplate} when", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3MjAzMw=="}, "originalCommit": {"oid": "3016467b16123f0d08819e0fa34543ed3375342f"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDg3Njg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDoyMzo1OVrOHW_m-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjozMDowMFrOHXjGdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3Mjg5MQ==", "bodyText": "What does \"now\" suggest -- the state if destroy() is called?\nI'm trying to figure out if we need all the \"will\" future tense formations :)", "url": "https://github.com/firebase/firebase-admin-java/pull/478#discussion_r493872891", "createdAt": "2020-09-23T20:23:59Z", "author": {"login": "egilmorez"}, "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.ImplFirebaseTrampolines;\n+import com.google.firebase.internal.CallableOperation;\n+import com.google.firebase.internal.FirebaseService;\n+\n+/**\n+ * This class is the entry point for all server-side Firebase Remote Config actions.\n+ *\n+ * <p>You can get an instance of FirebaseRemoteConfig via {@link #getInstance(FirebaseApp)}, and\n+ * then use it to manage Remote Config templates.\n+ */\n+public final class FirebaseRemoteConfig {\n+\n+  private static final String SERVICE_ID = FirebaseRemoteConfig.class.getName();\n+  private final FirebaseApp app;\n+  private final FirebaseRemoteConfigClient remoteConfigClient;\n+\n+  @VisibleForTesting\n+  FirebaseRemoteConfig(FirebaseApp app, FirebaseRemoteConfigClient client) {\n+    this.app = checkNotNull(app);\n+    this.remoteConfigClient = checkNotNull(client);\n+  }\n+\n+  private FirebaseRemoteConfig(FirebaseApp app) {\n+    this(app, FirebaseRemoteConfigClientImpl.fromApp(app));\n+  }\n+\n+  /**\n+   * Gets the {@link FirebaseRemoteConfig} instance for the default {@link FirebaseApp}.\n+   *\n+   * @return The {@link FirebaseRemoteConfig} instance for the default {@link FirebaseApp}.\n+   */\n+  public static FirebaseRemoteConfig getInstance() {\n+    return getInstance(FirebaseApp.getInstance());\n+  }\n+\n+  /**\n+   * Gets the {@link FirebaseRemoteConfig} instance for the specified {@link FirebaseApp}.\n+   *\n+   * @return The {@link FirebaseRemoteConfig} instance for the specified {@link FirebaseApp}.\n+   */\n+  public static synchronized FirebaseRemoteConfig getInstance(FirebaseApp app) {\n+    FirebaseRemoteConfigService service = ImplFirebaseTrampolines.getService(app, SERVICE_ID,\n+            FirebaseRemoteConfigService.class);\n+    if (service == null) {\n+      service = ImplFirebaseTrampolines.addService(app, new FirebaseRemoteConfigService(app));\n+    }\n+    return service.getInstance();\n+  }\n+\n+  /**\n+   * Gets the current active version of the Remote Config template.\n+   *\n+   * @return A {@link RemoteConfigTemplate}.\n+   * @throws FirebaseRemoteConfigException If an error occurs while getting the template.\n+   */\n+  public RemoteConfigTemplate getTemplate() throws FirebaseRemoteConfigException {\n+    return getTemplateOp().call();\n+  }\n+\n+  /**\n+   * Similar to {@link #getTemplate()} but performs the operation asynchronously.\n+   *\n+   * @return An {@code ApiFuture} that will complete with a {@link RemoteConfigTemplate} when\n+   *      the template is available.\n+   */\n+  public ApiFuture<RemoteConfigTemplate> getTemplateAsync() {\n+    return getTemplateOp().callAsync(app);\n+  }\n+\n+  private CallableOperation<RemoteConfigTemplate, FirebaseRemoteConfigException> getTemplateOp() {\n+    final FirebaseRemoteConfigClient remoteConfigClient = getRemoteConfigClient();\n+    return new CallableOperation<RemoteConfigTemplate, FirebaseRemoteConfigException>() {\n+      @Override\n+      protected RemoteConfigTemplate execute() throws FirebaseRemoteConfigException {\n+        return remoteConfigClient.getTemplate();\n+      }\n+    };\n+  }\n+\n+  @VisibleForTesting\n+  FirebaseRemoteConfigClient getRemoteConfigClient() {\n+    return remoteConfigClient;\n+  }\n+\n+  private static class FirebaseRemoteConfigService extends FirebaseService<FirebaseRemoteConfig> {\n+\n+    FirebaseRemoteConfigService(FirebaseApp app) {\n+      super(SERVICE_ID, new FirebaseRemoteConfig(app));\n+    }\n+\n+    @Override\n+    public void destroy() {\n+      // NOTE: We don't explicitly tear down anything here, but public methods of\n+      // FirebaseRemoteConfig will now fail because calls to getOptions() and getToken()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3016467b16123f0d08819e0fa34543ed3375342f"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ1NDM5MA==", "bodyText": "I don't think this is publicly visible in docs. It is a comment in code. So we should be good here :)", "url": "https://github.com/firebase/firebase-admin-java/pull/478#discussion_r494454390", "createdAt": "2020-09-24T16:30:00Z", "author": {"login": "lahirumaramba"}, "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.ImplFirebaseTrampolines;\n+import com.google.firebase.internal.CallableOperation;\n+import com.google.firebase.internal.FirebaseService;\n+\n+/**\n+ * This class is the entry point for all server-side Firebase Remote Config actions.\n+ *\n+ * <p>You can get an instance of FirebaseRemoteConfig via {@link #getInstance(FirebaseApp)}, and\n+ * then use it to manage Remote Config templates.\n+ */\n+public final class FirebaseRemoteConfig {\n+\n+  private static final String SERVICE_ID = FirebaseRemoteConfig.class.getName();\n+  private final FirebaseApp app;\n+  private final FirebaseRemoteConfigClient remoteConfigClient;\n+\n+  @VisibleForTesting\n+  FirebaseRemoteConfig(FirebaseApp app, FirebaseRemoteConfigClient client) {\n+    this.app = checkNotNull(app);\n+    this.remoteConfigClient = checkNotNull(client);\n+  }\n+\n+  private FirebaseRemoteConfig(FirebaseApp app) {\n+    this(app, FirebaseRemoteConfigClientImpl.fromApp(app));\n+  }\n+\n+  /**\n+   * Gets the {@link FirebaseRemoteConfig} instance for the default {@link FirebaseApp}.\n+   *\n+   * @return The {@link FirebaseRemoteConfig} instance for the default {@link FirebaseApp}.\n+   */\n+  public static FirebaseRemoteConfig getInstance() {\n+    return getInstance(FirebaseApp.getInstance());\n+  }\n+\n+  /**\n+   * Gets the {@link FirebaseRemoteConfig} instance for the specified {@link FirebaseApp}.\n+   *\n+   * @return The {@link FirebaseRemoteConfig} instance for the specified {@link FirebaseApp}.\n+   */\n+  public static synchronized FirebaseRemoteConfig getInstance(FirebaseApp app) {\n+    FirebaseRemoteConfigService service = ImplFirebaseTrampolines.getService(app, SERVICE_ID,\n+            FirebaseRemoteConfigService.class);\n+    if (service == null) {\n+      service = ImplFirebaseTrampolines.addService(app, new FirebaseRemoteConfigService(app));\n+    }\n+    return service.getInstance();\n+  }\n+\n+  /**\n+   * Gets the current active version of the Remote Config template.\n+   *\n+   * @return A {@link RemoteConfigTemplate}.\n+   * @throws FirebaseRemoteConfigException If an error occurs while getting the template.\n+   */\n+  public RemoteConfigTemplate getTemplate() throws FirebaseRemoteConfigException {\n+    return getTemplateOp().call();\n+  }\n+\n+  /**\n+   * Similar to {@link #getTemplate()} but performs the operation asynchronously.\n+   *\n+   * @return An {@code ApiFuture} that will complete with a {@link RemoteConfigTemplate} when\n+   *      the template is available.\n+   */\n+  public ApiFuture<RemoteConfigTemplate> getTemplateAsync() {\n+    return getTemplateOp().callAsync(app);\n+  }\n+\n+  private CallableOperation<RemoteConfigTemplate, FirebaseRemoteConfigException> getTemplateOp() {\n+    final FirebaseRemoteConfigClient remoteConfigClient = getRemoteConfigClient();\n+    return new CallableOperation<RemoteConfigTemplate, FirebaseRemoteConfigException>() {\n+      @Override\n+      protected RemoteConfigTemplate execute() throws FirebaseRemoteConfigException {\n+        return remoteConfigClient.getTemplate();\n+      }\n+    };\n+  }\n+\n+  @VisibleForTesting\n+  FirebaseRemoteConfigClient getRemoteConfigClient() {\n+    return remoteConfigClient;\n+  }\n+\n+  private static class FirebaseRemoteConfigService extends FirebaseService<FirebaseRemoteConfig> {\n+\n+    FirebaseRemoteConfigService(FirebaseApp app) {\n+      super(SERVICE_ID, new FirebaseRemoteConfig(app));\n+    }\n+\n+    @Override\n+    public void destroy() {\n+      // NOTE: We don't explicitly tear down anything here, but public methods of\n+      // FirebaseRemoteConfig will now fail because calls to getOptions() and getToken()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3Mjg5MQ=="}, "originalCommit": {"oid": "3016467b16123f0d08819e0fa34543ed3375342f"}, "originalPosition": 117}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1453, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}