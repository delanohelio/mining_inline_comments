{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExODIxMjk2", "number": 402, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTozMTo0OFrOD4NtaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTozODo0NFrOD4N03w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjcxNDY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTozMTo0OFrOGO7E2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDo1NDo0OFrOGO_MvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMTE0NA==", "bodyText": "You will need to address this when implementing SAML config support.", "url": "https://github.com/firebase/firebase-admin-java/pull/402#discussion_r418301144", "createdAt": "2020-04-30T21:31:48Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -330,21 +322,45 @@ OidcProviderConfig createOidcProviderConfig(\n     return sendRequest(\"POST\", url, request.getProperties(), OidcProviderConfig.class);\n   }\n \n+  OidcProviderConfig updateOidcProviderConfig(OidcProviderConfig.UpdateRequest request)\n+      throws FirebaseAuthException {\n+    Map<String, Object> properties = request.getProperties();\n+    checkArgument(!properties.isEmpty(),\n+        \"provider config update must have at least one property set\");\n+    GenericUrl url =\n+        new GenericUrl(idpConfigMgtBaseUrl + getOidcUrlSuffix(request.getProviderId()));\n+    url.put(\"updateMask\", generateMask(properties));\n+    return sendRequest(\"PATCH\", url, properties, OidcProviderConfig.class);\n+  }\n+\n   OidcProviderConfig getOidcProviderConfig(String providerId) throws FirebaseAuthException {\n-    GenericUrl url = new GenericUrl(idpConfigMgtBaseUrl + \"/oauthIdpConfigs/\" + providerId);\n+    GenericUrl url = new GenericUrl(idpConfigMgtBaseUrl + getOidcUrlSuffix(providerId));\n     return sendRequest(\"GET\", url, null, OidcProviderConfig.class);\n   }\n \n   void deleteProviderConfig(String providerId) throws FirebaseAuthException {\n-    GenericUrl url = new GenericUrl(idpConfigMgtBaseUrl + \"/oauthIdpConfigs/\" + providerId);\n+    GenericUrl url = new GenericUrl(idpConfigMgtBaseUrl + getOidcUrlSuffix(providerId));\n     sendRequest(\"DELETE\", url, null, GenericJson.class);\n   }\n \n+  private static String generateMask(Map<String, Object> properties) {\n+    // This implementation does not currently handle the case of nested properties. This is fine", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d6503d1fc2c696287273ca512d018c34cf5548e"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2ODcwMQ==", "bodyText": "Yeah I'll defer it until then.", "url": "https://github.com/firebase/firebase-admin-java/pull/402#discussion_r418368701", "createdAt": "2020-05-01T00:54:48Z", "author": {"login": "micahstairs"}, "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -330,21 +322,45 @@ OidcProviderConfig createOidcProviderConfig(\n     return sendRequest(\"POST\", url, request.getProperties(), OidcProviderConfig.class);\n   }\n \n+  OidcProviderConfig updateOidcProviderConfig(OidcProviderConfig.UpdateRequest request)\n+      throws FirebaseAuthException {\n+    Map<String, Object> properties = request.getProperties();\n+    checkArgument(!properties.isEmpty(),\n+        \"provider config update must have at least one property set\");\n+    GenericUrl url =\n+        new GenericUrl(idpConfigMgtBaseUrl + getOidcUrlSuffix(request.getProviderId()));\n+    url.put(\"updateMask\", generateMask(properties));\n+    return sendRequest(\"PATCH\", url, properties, OidcProviderConfig.class);\n+  }\n+\n   OidcProviderConfig getOidcProviderConfig(String providerId) throws FirebaseAuthException {\n-    GenericUrl url = new GenericUrl(idpConfigMgtBaseUrl + \"/oauthIdpConfigs/\" + providerId);\n+    GenericUrl url = new GenericUrl(idpConfigMgtBaseUrl + getOidcUrlSuffix(providerId));\n     return sendRequest(\"GET\", url, null, OidcProviderConfig.class);\n   }\n \n   void deleteProviderConfig(String providerId) throws FirebaseAuthException {\n-    GenericUrl url = new GenericUrl(idpConfigMgtBaseUrl + \"/oauthIdpConfigs/\" + providerId);\n+    GenericUrl url = new GenericUrl(idpConfigMgtBaseUrl + getOidcUrlSuffix(providerId));\n     sendRequest(\"DELETE\", url, null, GenericJson.class);\n   }\n \n+  private static String generateMask(Map<String, Object> properties) {\n+    // This implementation does not currently handle the case of nested properties. This is fine", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMTE0NA=="}, "originalCommit": {"oid": "2d6503d1fc2c696287273ca512d018c34cf5548e"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjcyNjU4OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/google/firebase/auth/OidcProviderConfigTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTozNjowMFrOGO7MRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMTowMjo1NFrOGPVqcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMzA0NA==", "bodyText": "Also test for empty/null client ID?", "url": "https://github.com/firebase/firebase-admin-java/pull/402#discussion_r418303044", "createdAt": "2020-04-30T21:36:00Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/auth/OidcProviderConfigTest.java", "diffHunk": "@@ -71,7 +71,41 @@ public void testCreateRequest() throws IOException {\n   }\n \n   @Test(expected = IllegalArgumentException.class)\n-  public void testInvalidIssuerUrl() {\n+  public void testCreateRequestInvalidIssuerUrl() {\n     new OidcProviderConfig.CreateRequest().setIssuer(\"not a valid url\");\n   }\n+\n+  @Test\n+  public void testUpdateRequestFromOidcProviderConfig() throws IOException {\n+    OidcProviderConfig config = jsonFactory.fromString(OIDC_JSON_STRING, OidcProviderConfig.class);\n+\n+    OidcProviderConfig.UpdateRequest updateRequest = config.updateRequest();\n+\n+    assertEquals(\"oidc.provider-id\", updateRequest.getProviderId());\n+    assertTrue(updateRequest.getProperties().isEmpty());\n+  }\n+\n+  @Test\n+  public void testUpdateRequest() throws IOException {\n+    OidcProviderConfig.UpdateRequest updateRequest =\n+        new OidcProviderConfig.UpdateRequest(\"oidc.provider-id\");\n+    updateRequest\n+      .setDisplayName(\"DISPLAY_NAME\")\n+      .setEnabled(false)\n+      .setClientId(\"CLIENT_ID\")\n+      .setIssuer(\"https://oidc.com/issuer\");\n+\n+    assertEquals(\"oidc.provider-id\", updateRequest.getProviderId());\n+    Map<String,Object> properties = updateRequest.getProperties();\n+    assertEquals(properties.size(), 4);\n+    assertEquals(\"DISPLAY_NAME\", (String) properties.get(\"displayName\"));\n+    assertFalse((boolean) properties.get(\"enabled\"));\n+    assertEquals(\"CLIENT_ID\", (String) properties.get(\"clientId\"));\n+    assertEquals(\"https://oidc.com/issuer\", (String) properties.get(\"issuer\"));\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testUpdateRequestInvalidIssuerUrl() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d6503d1fc2c696287273ca512d018c34cf5548e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM4NDgxOQ==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-admin-java/pull/402#discussion_r418384819", "createdAt": "2020-05-01T02:05:42Z", "author": {"login": "micahstairs"}, "path": "src/test/java/com/google/firebase/auth/OidcProviderConfigTest.java", "diffHunk": "@@ -71,7 +71,41 @@ public void testCreateRequest() throws IOException {\n   }\n \n   @Test(expected = IllegalArgumentException.class)\n-  public void testInvalidIssuerUrl() {\n+  public void testCreateRequestInvalidIssuerUrl() {\n     new OidcProviderConfig.CreateRequest().setIssuer(\"not a valid url\");\n   }\n+\n+  @Test\n+  public void testUpdateRequestFromOidcProviderConfig() throws IOException {\n+    OidcProviderConfig config = jsonFactory.fromString(OIDC_JSON_STRING, OidcProviderConfig.class);\n+\n+    OidcProviderConfig.UpdateRequest updateRequest = config.updateRequest();\n+\n+    assertEquals(\"oidc.provider-id\", updateRequest.getProviderId());\n+    assertTrue(updateRequest.getProperties().isEmpty());\n+  }\n+\n+  @Test\n+  public void testUpdateRequest() throws IOException {\n+    OidcProviderConfig.UpdateRequest updateRequest =\n+        new OidcProviderConfig.UpdateRequest(\"oidc.provider-id\");\n+    updateRequest\n+      .setDisplayName(\"DISPLAY_NAME\")\n+      .setEnabled(false)\n+      .setClientId(\"CLIENT_ID\")\n+      .setIssuer(\"https://oidc.com/issuer\");\n+\n+    assertEquals(\"oidc.provider-id\", updateRequest.getProviderId());\n+    Map<String,Object> properties = updateRequest.getProperties();\n+    assertEquals(properties.size(), 4);\n+    assertEquals(\"DISPLAY_NAME\", (String) properties.get(\"displayName\"));\n+    assertFalse((boolean) properties.get(\"enabled\"));\n+    assertEquals(\"CLIENT_ID\", (String) properties.get(\"clientId\"));\n+    assertEquals(\"https://oidc.com/issuer\", (String) properties.get(\"issuer\"));\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testUpdateRequestInvalidIssuerUrl() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMzA0NA=="}, "originalCommit": {"oid": "2d6503d1fc2c696287273ca512d018c34cf5548e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3Njk3NA==", "bodyText": "I was particularly referring to empty/null client ID: .setClientId(null). Not sure if the current tests cover that case. But feel free to address it in a future PR.", "url": "https://github.com/firebase/firebase-admin-java/pull/402#discussion_r418676974", "createdAt": "2020-05-01T18:35:31Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/auth/OidcProviderConfigTest.java", "diffHunk": "@@ -71,7 +71,41 @@ public void testCreateRequest() throws IOException {\n   }\n \n   @Test(expected = IllegalArgumentException.class)\n-  public void testInvalidIssuerUrl() {\n+  public void testCreateRequestInvalidIssuerUrl() {\n     new OidcProviderConfig.CreateRequest().setIssuer(\"not a valid url\");\n   }\n+\n+  @Test\n+  public void testUpdateRequestFromOidcProviderConfig() throws IOException {\n+    OidcProviderConfig config = jsonFactory.fromString(OIDC_JSON_STRING, OidcProviderConfig.class);\n+\n+    OidcProviderConfig.UpdateRequest updateRequest = config.updateRequest();\n+\n+    assertEquals(\"oidc.provider-id\", updateRequest.getProviderId());\n+    assertTrue(updateRequest.getProperties().isEmpty());\n+  }\n+\n+  @Test\n+  public void testUpdateRequest() throws IOException {\n+    OidcProviderConfig.UpdateRequest updateRequest =\n+        new OidcProviderConfig.UpdateRequest(\"oidc.provider-id\");\n+    updateRequest\n+      .setDisplayName(\"DISPLAY_NAME\")\n+      .setEnabled(false)\n+      .setClientId(\"CLIENT_ID\")\n+      .setIssuer(\"https://oidc.com/issuer\");\n+\n+    assertEquals(\"oidc.provider-id\", updateRequest.getProviderId());\n+    Map<String,Object> properties = updateRequest.getProperties();\n+    assertEquals(properties.size(), 4);\n+    assertEquals(\"DISPLAY_NAME\", (String) properties.get(\"displayName\"));\n+    assertFalse((boolean) properties.get(\"enabled\"));\n+    assertEquals(\"CLIENT_ID\", (String) properties.get(\"clientId\"));\n+    assertEquals(\"https://oidc.com/issuer\", (String) properties.get(\"issuer\"));\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testUpdateRequestInvalidIssuerUrl() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMzA0NA=="}, "originalCommit": {"oid": "2d6503d1fc2c696287273ca512d018c34cf5548e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczNjc1Mg==", "bodyText": "Ah, that's easy enough to add here. Done.", "url": "https://github.com/firebase/firebase-admin-java/pull/402#discussion_r418736752", "createdAt": "2020-05-01T21:02:54Z", "author": {"login": "micahstairs"}, "path": "src/test/java/com/google/firebase/auth/OidcProviderConfigTest.java", "diffHunk": "@@ -71,7 +71,41 @@ public void testCreateRequest() throws IOException {\n   }\n \n   @Test(expected = IllegalArgumentException.class)\n-  public void testInvalidIssuerUrl() {\n+  public void testCreateRequestInvalidIssuerUrl() {\n     new OidcProviderConfig.CreateRequest().setIssuer(\"not a valid url\");\n   }\n+\n+  @Test\n+  public void testUpdateRequestFromOidcProviderConfig() throws IOException {\n+    OidcProviderConfig config = jsonFactory.fromString(OIDC_JSON_STRING, OidcProviderConfig.class);\n+\n+    OidcProviderConfig.UpdateRequest updateRequest = config.updateRequest();\n+\n+    assertEquals(\"oidc.provider-id\", updateRequest.getProviderId());\n+    assertTrue(updateRequest.getProperties().isEmpty());\n+  }\n+\n+  @Test\n+  public void testUpdateRequest() throws IOException {\n+    OidcProviderConfig.UpdateRequest updateRequest =\n+        new OidcProviderConfig.UpdateRequest(\"oidc.provider-id\");\n+    updateRequest\n+      .setDisplayName(\"DISPLAY_NAME\")\n+      .setEnabled(false)\n+      .setClientId(\"CLIENT_ID\")\n+      .setIssuer(\"https://oidc.com/issuer\");\n+\n+    assertEquals(\"oidc.provider-id\", updateRequest.getProviderId());\n+    Map<String,Object> properties = updateRequest.getProperties();\n+    assertEquals(properties.size(), 4);\n+    assertEquals(\"DISPLAY_NAME\", (String) properties.get(\"displayName\"));\n+    assertFalse((boolean) properties.get(\"enabled\"));\n+    assertEquals(\"CLIENT_ID\", (String) properties.get(\"clientId\"));\n+    assertEquals(\"https://oidc.com/issuer\", (String) properties.get(\"issuer\"));\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testUpdateRequestInvalidIssuerUrl() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMzA0NA=="}, "originalCommit": {"oid": "2d6503d1fc2c696287273ca512d018c34cf5548e"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjcyOTA3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTozNjo1NlrOGO7N1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMjowNTozOFrOGPALqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMzQ0Nw==", "bodyText": "assertEquals(1, parsed.size());", "url": "https://github.com/firebase/firebase-admin-java/pull/402#discussion_r418303447", "createdAt": "2020-04-30T21:36:56Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java", "diffHunk": "@@ -1491,6 +1491,110 @@ public void testTenantAwareCreateOidcProvider() throws Exception {\n     checkUrl(interceptor, \"POST\", TENANTS_BASE_URL + \"/TENANT_ID/oauthIdpConfigs\");\n   }\n \n+  @Test\n+  public void testUpdateOidcProvider() throws Exception {\n+    TestResponseInterceptor interceptor = initializeAppForUserManagement(\n+        TestUtils.loadResource(\"oidc.json\"));\n+    OidcProviderConfig.UpdateRequest request =\n+        new OidcProviderConfig.UpdateRequest(\"oidc.provider-id\")\n+            .setDisplayName(\"DISPLAY_NAME\")\n+            .setEnabled(true)\n+            .setClientId(\"CLIENT_ID\")\n+            .setIssuer(\"https://oidc.com/issuer\");\n+\n+    OidcProviderConfig config = FirebaseAuth.getInstance().updateOidcProviderConfig(request);\n+\n+    checkOidcProviderConfig(config);\n+    checkRequestHeaders(interceptor);\n+    checkUrl(interceptor, \"PATCH\", PROJECT_BASE_URL + \"/oauthIdpConfigs/oidc.provider-id\");\n+    GenericUrl url = interceptor.getResponse().getRequest().getUrl();\n+    assertEquals(\"clientId,displayName,enabled,issuer\", url.getFirst(\"updateMask\"));\n+    GenericJson parsed = parseRequestContent(interceptor);\n+    assertEquals(\"DISPLAY_NAME\", parsed.get(\"displayName\"));\n+    assertTrue((boolean) parsed.get(\"enabled\"));\n+    assertEquals(\"CLIENT_ID\", parsed.get(\"clientId\"));\n+    assertEquals(\"https://oidc.com/issuer\", parsed.get(\"issuer\"));\n+  }\n+\n+  @Test\n+  public void testUpdateOidcProviderMinimal() throws Exception {\n+    TestResponseInterceptor interceptor = initializeAppForUserManagement(\n+        TestUtils.loadResource(\"oidc.json\"));\n+    OidcProviderConfig.UpdateRequest request =\n+        new OidcProviderConfig.UpdateRequest(\"oidc.provider-id\").setDisplayName(\"DISPLAY_NAME\");\n+\n+    OidcProviderConfig config = FirebaseAuth.getInstance().updateOidcProviderConfig(request);\n+\n+    checkOidcProviderConfig(config);\n+    checkRequestHeaders(interceptor);\n+    checkUrl(interceptor, \"PATCH\", PROJECT_BASE_URL + \"/oauthIdpConfigs/oidc.provider-id\");\n+    GenericUrl url = interceptor.getResponse().getRequest().getUrl();\n+    assertEquals(\"displayName\", url.getFirst(\"updateMask\"));\n+    GenericJson parsed = parseRequestContent(interceptor);\n+    assertEquals(\"DISPLAY_NAME\", parsed.get(\"displayName\"));\n+    assertNull(parsed.get(\"enabled\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d6503d1fc2c696287273ca512d018c34cf5548e"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM4NDgwOA==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-admin-java/pull/402#discussion_r418384808", "createdAt": "2020-05-01T02:05:38Z", "author": {"login": "micahstairs"}, "path": "src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java", "diffHunk": "@@ -1491,6 +1491,110 @@ public void testTenantAwareCreateOidcProvider() throws Exception {\n     checkUrl(interceptor, \"POST\", TENANTS_BASE_URL + \"/TENANT_ID/oauthIdpConfigs\");\n   }\n \n+  @Test\n+  public void testUpdateOidcProvider() throws Exception {\n+    TestResponseInterceptor interceptor = initializeAppForUserManagement(\n+        TestUtils.loadResource(\"oidc.json\"));\n+    OidcProviderConfig.UpdateRequest request =\n+        new OidcProviderConfig.UpdateRequest(\"oidc.provider-id\")\n+            .setDisplayName(\"DISPLAY_NAME\")\n+            .setEnabled(true)\n+            .setClientId(\"CLIENT_ID\")\n+            .setIssuer(\"https://oidc.com/issuer\");\n+\n+    OidcProviderConfig config = FirebaseAuth.getInstance().updateOidcProviderConfig(request);\n+\n+    checkOidcProviderConfig(config);\n+    checkRequestHeaders(interceptor);\n+    checkUrl(interceptor, \"PATCH\", PROJECT_BASE_URL + \"/oauthIdpConfigs/oidc.provider-id\");\n+    GenericUrl url = interceptor.getResponse().getRequest().getUrl();\n+    assertEquals(\"clientId,displayName,enabled,issuer\", url.getFirst(\"updateMask\"));\n+    GenericJson parsed = parseRequestContent(interceptor);\n+    assertEquals(\"DISPLAY_NAME\", parsed.get(\"displayName\"));\n+    assertTrue((boolean) parsed.get(\"enabled\"));\n+    assertEquals(\"CLIENT_ID\", parsed.get(\"clientId\"));\n+    assertEquals(\"https://oidc.com/issuer\", parsed.get(\"issuer\"));\n+  }\n+\n+  @Test\n+  public void testUpdateOidcProviderMinimal() throws Exception {\n+    TestResponseInterceptor interceptor = initializeAppForUserManagement(\n+        TestUtils.loadResource(\"oidc.json\"));\n+    OidcProviderConfig.UpdateRequest request =\n+        new OidcProviderConfig.UpdateRequest(\"oidc.provider-id\").setDisplayName(\"DISPLAY_NAME\");\n+\n+    OidcProviderConfig config = FirebaseAuth.getInstance().updateOidcProviderConfig(request);\n+\n+    checkOidcProviderConfig(config);\n+    checkRequestHeaders(interceptor);\n+    checkUrl(interceptor, \"PATCH\", PROJECT_BASE_URL + \"/oauthIdpConfigs/oidc.provider-id\");\n+    GenericUrl url = interceptor.getResponse().getRequest().getUrl();\n+    assertEquals(\"displayName\", url.getFirst(\"updateMask\"));\n+    GenericJson parsed = parseRequestContent(interceptor);\n+    assertEquals(\"DISPLAY_NAME\", parsed.get(\"displayName\"));\n+    assertNull(parsed.get(\"enabled\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMzQ0Nw=="}, "originalCommit": {"oid": "2d6503d1fc2c696287273ca512d018c34cf5548e"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjczMzc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/ProviderConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTozODo0NFrOGO7Q2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMjowNTozMFrOGPALhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwNDIxNw==", "bodyText": "check not null or empty", "url": "https://github.com/firebase/firebase-admin-java/pull/402#discussion_r418304217", "createdAt": "2020-04-30T21:38:44Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/ProviderConfig.java", "diffHunk": "@@ -104,4 +104,48 @@ public T setEnabled(boolean enabled) {\n \n     abstract T getThis();\n   }\n+\n+  /**\n+   * A base class for updating the attributes of an existing provider.\n+   */\n+  public abstract static class AbstractUpdateRequest<T extends AbstractUpdateRequest<T>> {\n+\n+    final String providerId;\n+    final Map<String,Object> properties = new HashMap<>();\n+\n+    AbstractUpdateRequest(String providerId) {\n+      this.providerId = providerId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d6503d1fc2c696287273ca512d018c34cf5548e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM4NDc3NQ==", "bodyText": "I already had the check in OidcProviderConfig (so that it could be closer to the Javadoc comment which mentions that it throws an IllegalArgumentException if it's null or empty. But I moved it up here.", "url": "https://github.com/firebase/firebase-admin-java/pull/402#discussion_r418384775", "createdAt": "2020-05-01T02:05:30Z", "author": {"login": "micahstairs"}, "path": "src/main/java/com/google/firebase/auth/ProviderConfig.java", "diffHunk": "@@ -104,4 +104,48 @@ public T setEnabled(boolean enabled) {\n \n     abstract T getThis();\n   }\n+\n+  /**\n+   * A base class for updating the attributes of an existing provider.\n+   */\n+  public abstract static class AbstractUpdateRequest<T extends AbstractUpdateRequest<T>> {\n+\n+    final String providerId;\n+    final Map<String,Object> properties = new HashMap<>();\n+\n+    AbstractUpdateRequest(String providerId) {\n+      this.providerId = providerId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwNDIxNw=="}, "originalCommit": {"oid": "2d6503d1fc2c696287273ca512d018c34cf5548e"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1566, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}