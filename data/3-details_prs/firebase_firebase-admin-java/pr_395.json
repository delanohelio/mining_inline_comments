{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NTg4NTky", "number": 395, "title": "feat(auth): Add tenant operations, tenant-aware user operations, and provider config operations", "bodyText": "This adds multi-tenancy support to the Firebase client, as well as support for SAML/OIDC provider config operations. See issue #332.", "createdAt": "2020-04-22T22:55:26Z", "url": "https://github.com/firebase/firebase-admin-java/pull/395", "merged": true, "mergeCommit": {"oid": "0a0662e61d91d40cbd725ffd70c7c0268f868cb9"}, "closed": true, "closedAt": "2020-07-16T21:25:22Z", "author": {"login": "micahstairs"}, "timelineItems": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_dMUyAH2gAyNDA3NTg4NTkyOmUzMGRmN2RhNmViOGU2ZDA3YWExZjkyOGViMGM1NDMzNTFhNjY1MjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1l9nBgFqTQ1MDIyMzMyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e30df7da6eb8e6d07aa1f928eb0c543351a66525", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/e30df7da6eb8e6d07aa1f928eb0c543351a66525", "committedDate": "2020-01-30T16:32:52Z", "message": "Pull parts of FirebaseAuth into an abstract class. (#352)\n\nThis moves parts of FirebaseAuth into an abstract class as part of adding multi-tenancy support."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d76fc2034c570ad85d022ca324a56e4701a26086", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/d76fc2034c570ad85d022ca324a56e4701a26086", "committedDate": "2020-01-30T17:02:26Z", "message": "Add Tenant class and its create and update request classes. (#344)\n\nThis pull request adds the Tenant class (including it's create/update inner classes) as part of adding multi-tenancy support."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f157b90ff791e5a80bf48d4002bfe9f6b2356692", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/f157b90ff791e5a80bf48d4002bfe9f6b2356692", "committedDate": "2020-02-05T23:30:15Z", "message": "Add ListTenantsPage class. (#358)\n\nAdd ListTenantsPage and some supporting code as part of adding multi-tenancy support. This code was very largely based off of ListUsersPage and ListUsersPageTest."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44533629546584eceef3d34535dbb9a2cc177e0e", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/44533629546584eceef3d34535dbb9a2cc177e0e", "committedDate": "2020-02-17T16:30:52Z", "message": "Add updateRequest method to Tenant class and add unit tests. (#361)\n\nAdded some things to the Tenant class and added a few unit tests. This is part of the initiative to adding multi-tenancy support (see issue #332)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26799042dd6e539ea999214d081b8f79023d259b", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/26799042dd6e539ea999214d081b8f79023d259b", "committedDate": "2020-02-20T02:58:26Z", "message": "Create TenantManager class and wire through listTenants operation. (#369)\n\nAdd the TenantManager class and wire through the listTenants operation. Also add unit tests to FirebaseUserManagerTest."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a04fcfa740a902337d60d30c26ac527c0fd1583a", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/a04fcfa740a902337d60d30c26ac527c0fd1583a", "committedDate": "2020-02-27T23:08:05Z", "message": "Add deleteTenant operation to TenantManager. (#372)\n\nThis adds deleteTenant to the TenantManager class. I've added the relevant unit tests to FirebaseUserManagerTest. This is part of the initiative to adding multi-tenancy support (see issue #332)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3ef9729e3ee06a21f77eb73b35acd071a6359e4", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/c3ef9729e3ee06a21f77eb73b35acd071a6359e4", "committedDate": "2020-02-28T20:54:45Z", "message": "Add getTenant operation to TenantManager. (#371)\n\nAdded getTenant to the TenantManager class. Also added the relevant unit tests to FirebaseUserManagerTest. This is part of the initiative to adding multi-tenancy support (see issue #332)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52d6cb5bcc5bc639dae3c0d151f1b24993053a16", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/52d6cb5bcc5bc639dae3c0d151f1b24993053a16", "committedDate": "2020-03-12T21:06:47Z", "message": "Add createTenant and updateTenant operations. (#377)\n\nAdded createTenant and updateTenant to the TenantManager class. Also added the relevant unit tests to FirebaseUserManagerTest. This is part of the initiative to adding multi-tenancy support (see issue #332)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4dd47f53d5889156be89318bdd170d7222bd6c1", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/d4dd47f53d5889156be89318bdd170d7222bd6c1", "committedDate": "2020-03-31T23:35:16Z", "message": "Add integration tests for TenantManager operations. (#385)\n\nThis adds some integration testing for all of the tenant operations in TenantManager. Several bugs were uncovered after running the tests, so these have been fixed. This is part of the initiative to adding multi-tenancy support (see issue #332)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a09db1d0630392f155214ee328cc2e243a17a04", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/0a09db1d0630392f155214ee328cc2e243a17a04", "committedDate": "2020-04-04T01:14:31Z", "message": "Add firebase auth destroy check before tenant operations. (#386)\n\nThis addresses some TODOs left as part of the initiative to add multi-tenancy support (see issue #332)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa7c8580ee17d6a49911a375b54e91a8be362ba0", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/fa7c8580ee17d6a49911a375b54e91a8be362ba0", "committedDate": "2020-04-11T02:25:10Z", "message": "Make user operations tenant-aware. (#387)\n\nThis makes user operations tenant-aware. I've added some integration tests to ensure that this is working correctly. This is part of the initiative to adding multi-tenancy support (see issue #332)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fadc2d3f8dd36c36ad5af4827488850bfd07bbc9", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/fadc2d3f8dd36c36ad5af4827488850bfd07bbc9", "committedDate": "2020-04-21T12:01:10Z", "message": "Remove unused AutoValue dependency. (#392)\n\nRemove unused AutoValue dependency (and remove Java 8 API dependency which was accidentally introduced)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ece0030ff4a305b2b18c29167d62a9c0324077bd", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/ece0030ff4a305b2b18c29167d62a9c0324077bd", "committedDate": "2020-04-21T12:03:15Z", "message": "Indicate how to get set up for the multitenancy integration tests. (#393)\n\nThis documentation is based off of the instructions in https://github.com/firebase/firebase-admin-node/blob/master/CONTRIBUTING.md."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b97bb8a7b3f42b3361542bb7f0b0684535b94ec8", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/b97bb8a7b3f42b3361542bb7f0b0684535b94ec8", "committedDate": "2020-04-22T21:18:28Z", "message": "Add tenant-aware token generation and verification. (#391)\n\nThis incorporates the tenant ID into the token generation and validation when using a tenant-aware client. This is part of the initiative to add multi-tenancy support (see issue #332)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c8158f4c3617bef5f34e712524c1c0c62e15458", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/6c8158f4c3617bef5f34e712524c1c0c62e15458", "committedDate": "2020-04-22T22:28:50Z", "message": "Sync to master and add builder to FirebaseUserManager."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f75fe58b62be9969b050e019a21f8c5f8401fe1e", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/f75fe58b62be9969b050e019a21f8c5f8401fe1e", "committedDate": "2020-04-22T22:52:06Z", "message": "Fix javadoc comment."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b607383d0a1482c157a8a21d23587e227de2af5", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/5b607383d0a1482c157a8a21d23587e227de2af5", "committedDate": "2020-04-22T22:59:56Z", "message": "Trigger CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b38cadc25c3fd113308eb91cbdc0c43164a1ff0d", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/b38cadc25c3fd113308eb91cbdc0c43164a1ff0d", "committedDate": "2020-04-23T01:22:14Z", "message": "Make several Op methods private."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c90a7d5e53b2de418957a53361cf8cea9793354b", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/c90a7d5e53b2de418957a53361cf8cea9793354b", "committedDate": "2020-04-23T01:47:51Z", "message": "Move createSessionCookie and verifySessionCookie back to FirebaseAuth."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7415dac67cd15c5e7aa9bc40c08b49958c13835", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/e7415dac67cd15c5e7aa9bc40c08b49958c13835", "committedDate": "2020-04-23T02:33:37Z", "message": "Make verifySessionCookieOp private."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "312183aafcfb9d49eb9b01b2d8265a3903495587", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/312183aafcfb9d49eb9b01b2d8265a3903495587", "committedDate": "2020-04-23T21:35:36Z", "message": "Fix a few javadoc comments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MzgwNDI2", "url": "https://github.com/firebase/firebase-admin-java/pull/395#pullrequestreview-404380426", "createdAt": "2020-05-01T20:21:31Z", "commit": {"oid": "312183aafcfb9d49eb9b01b2d8265a3903495587"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMDoyMTozMlrOGPUsvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODowNzozM1rOGQ1fGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODcyMDk1OQ==", "bodyText": "\"... the expected value ('%s').\"", "url": "https://github.com/firebase/firebase-admin-java/pull/395#discussion_r418720959", "createdAt": "2020-05-01T20:21:32Z", "author": {"login": "kevinthecheung"}, "path": "src/main/java/com/google/firebase/auth/FirebaseTokenVerifierImpl.java", "diffHunk": "@@ -278,6 +283,18 @@ private boolean containsLegacyUidField(IdToken.Payload payload) {\n     return false;\n   }\n \n+  private void checkTenantId(final FirebaseToken firebaseToken) throws FirebaseAuthException {\n+    String tokenTenantId = Strings.nullToEmpty(firebaseToken.getTenantId());\n+    if (!this.tenantId.equals(tokenTenantId)) {\n+      throw new FirebaseAuthException(\n+          FirebaseUserManager.TENANT_ID_MISMATCH_ERROR,\n+          String.format(\n+            \"The tenant ID ('%s') of the token did not match the expected ('%s') value\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "312183aafcfb9d49eb9b01b2d8265a3903495587"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODcyMTI1Mw==", "bodyText": "Tenant", "url": "https://github.com/firebase/firebase-admin-java/pull/395#discussion_r418721253", "createdAt": "2020-05-01T20:22:15Z", "author": {"login": "kevinthecheung"}, "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -94,40 +102,36 @@\n       \"iss\", \"jti\", \"nbf\", \"nonce\", \"sub\", \"firebase\");\n \n   private static final String ID_TOOLKIT_URL =\n-      \"https://identitytoolkit.googleapis.com/v1/projects/%s\";\n+      \"https://identitytoolkit.googleapis.com/%s/projects/%s\";\n   private static final String CLIENT_VERSION_HEADER = \"X-Client-Version\";\n \n-  private final String baseUrl;\n+  private final String userMgtBaseUrl;\n+  private final String tenantMgtBaseUrl;\n   private final JsonFactory jsonFactory;\n   private final HttpRequestFactory requestFactory;\n   private final String clientVersion = \"Java/Admin/\" + SdkUtils.getVersion();\n \n   private HttpResponseInterceptor interceptor;\n \n-  /**\n-   * Creates a new FirebaseUserManager instance.\n-   *\n-   * @param app A non-null {@link FirebaseApp}.\n-   */\n-  FirebaseUserManager(@NonNull FirebaseApp app) {\n-    this(app, null);\n-  }\n-\n-  FirebaseUserManager(@NonNull FirebaseApp app, @Nullable HttpRequestFactory requestFactory) {\n-    checkNotNull(app, \"FirebaseApp must not be null\");\n+  FirebaseUserManager(Builder builder) {\n+    FirebaseApp app = checkNotNull(builder.app, \"FirebaseApp must not be null\");\n     String projectId = ImplFirebaseTrampolines.getProjectId(app);\n     checkArgument(!Strings.isNullOrEmpty(projectId),\n         \"Project ID is required to access the auth service. Use a service account credential or \"\n             + \"set the project ID explicitly via FirebaseOptions. Alternatively you can also \"\n             + \"set the project ID via the GOOGLE_CLOUD_PROJECT environment variable.\");\n-    this.baseUrl = String.format(ID_TOOLKIT_URL, projectId);\n-    this.jsonFactory = app.getOptions().getJsonFactory();\n-\n-    if (requestFactory == null) {\n-      requestFactory = ApiClientUtils.newAuthorizedRequestFactory(app);\n+    String tenantId = builder.tenantId;\n+    if (builder.tenantId == null) {\n+      this.userMgtBaseUrl = String.format(ID_TOOLKIT_URL, \"v1\", projectId);\n+    } else {\n+      checkArgument(!tenantId.isEmpty(), \"tenant ID must not be empty\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "312183aafcfb9d49eb9b01b2d8265a3903495587"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODcyMTQyOQ==", "bodyText": "Tenant", "url": "https://github.com/firebase/firebase-admin-java/pull/395#discussion_r418721429", "createdAt": "2020-05-01T20:22:45Z", "author": {"login": "kevinthecheung"}, "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -228,6 +233,56 @@ UserImportResult importUsers(UserImportRequest request) throws FirebaseAuthExcep\n     return new UserImportResult(request.getUsersCount(), response);\n   }\n \n+  Tenant getTenant(String tenantId) throws FirebaseAuthException {\n+    GenericUrl url = new GenericUrl(tenantMgtBaseUrl + getTenantUrlSuffix(tenantId));\n+    return sendRequest(\"GET\", url, null, Tenant.class);\n+  }\n+\n+  Tenant createTenant(Tenant.CreateRequest request) throws FirebaseAuthException {\n+    GenericUrl url = new GenericUrl(tenantMgtBaseUrl + \"/tenants\");\n+    return sendRequest(\"POST\", url, request.getProperties(), Tenant.class);\n+  }\n+\n+  Tenant updateTenant(Tenant.UpdateRequest request) throws FirebaseAuthException {\n+    Map<String, Object> properties = request.getProperties();\n+    checkArgument(!properties.isEmpty(), \"tenant update must have at least one property set\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "312183aafcfb9d49eb9b01b2d8265a3903495587"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODcyMTYxNg==", "bodyText": "Invalid", "url": "https://github.com/firebase/firebase-admin-java/pull/395#discussion_r418721616", "createdAt": "2020-05-01T20:23:14Z", "author": {"login": "kevinthecheung"}, "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -228,6 +233,56 @@ UserImportResult importUsers(UserImportRequest request) throws FirebaseAuthExcep\n     return new UserImportResult(request.getUsersCount(), response);\n   }\n \n+  Tenant getTenant(String tenantId) throws FirebaseAuthException {\n+    GenericUrl url = new GenericUrl(tenantMgtBaseUrl + getTenantUrlSuffix(tenantId));\n+    return sendRequest(\"GET\", url, null, Tenant.class);\n+  }\n+\n+  Tenant createTenant(Tenant.CreateRequest request) throws FirebaseAuthException {\n+    GenericUrl url = new GenericUrl(tenantMgtBaseUrl + \"/tenants\");\n+    return sendRequest(\"POST\", url, request.getProperties(), Tenant.class);\n+  }\n+\n+  Tenant updateTenant(Tenant.UpdateRequest request) throws FirebaseAuthException {\n+    Map<String, Object> properties = request.getProperties();\n+    checkArgument(!properties.isEmpty(), \"tenant update must have at least one property set\");\n+    GenericUrl url = new GenericUrl(tenantMgtBaseUrl + getTenantUrlSuffix(request.getTenantId()));\n+    url.put(\"updateMask\", generateMask(properties));\n+    return sendRequest(\"PATCH\", url, properties, Tenant.class);\n+  }\n+\n+  private static String generateMask(Map<String, Object> properties) {\n+    // This implementation does not currently handle the case of nested properties. This is fine\n+    // since we do not currently generate masks for any properties with nested values. When it\n+    // comes time to implement this, we can check if a property has nested properties by checking\n+    // if it is an instance of the Map class.\n+    return Joiner.on(\",\").join(ImmutableSortedSet.copyOf(properties.keySet()));\n+  }\n+\n+  void deleteTenant(String tenantId) throws FirebaseAuthException {\n+    GenericUrl url = new GenericUrl(tenantMgtBaseUrl + getTenantUrlSuffix(tenantId));\n+    sendRequest(\"DELETE\", url, null, GenericJson.class);\n+  }\n+\n+  ListTenantsResponse listTenants(int maxResults, String pageToken)\n+      throws FirebaseAuthException {\n+    ImmutableMap.Builder<String, Object> builder =\n+        ImmutableMap.<String, Object>builder().put(\"pageSize\", maxResults);\n+    if (pageToken != null) {\n+      checkArgument(!pageToken.equals(\n+          ListTenantsPage.END_OF_LIST), \"invalid end of list page token\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "312183aafcfb9d49eb9b01b2d8265a3903495587"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODcyMjU1Mw==", "bodyText": "\"User manager must not be null.\"", "url": "https://github.com/firebase/firebase-admin-java/pull/395#discussion_r418722553", "createdAt": "2020-05-01T20:25:36Z", "author": {"login": "kevinthecheung"}, "path": "src/main/java/com/google/firebase/auth/ListTenantsPage.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.client.json.JsonFactory;\n+import com.google.api.gax.paging.Page;\n+import com.google.common.collect.ImmutableList;\n+import com.google.firebase.auth.internal.DownloadAccountResponse;\n+import com.google.firebase.auth.internal.ListTenantsResponse;\n+import com.google.firebase.internal.NonNull;\n+import com.google.firebase.internal.Nullable;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Represents a page of {@link Tenant} instances.\n+ *\n+ * <p>Provides methods for iterating over the tenants in the current page, and calling up\n+ * subsequent pages of tenants.\n+ *\n+ * <p>Instances of this class are thread-safe and immutable.\n+ */\n+public class ListTenantsPage implements Page<Tenant> {\n+\n+  static final String END_OF_LIST = \"\";\n+\n+  private final ListTenantsResponse currentBatch;\n+  private final TenantSource source;\n+  private final int maxResults;\n+\n+  private ListTenantsPage(\n+      @NonNull ListTenantsResponse currentBatch, @NonNull TenantSource source, int maxResults) {\n+    this.currentBatch = checkNotNull(currentBatch);\n+    this.source = checkNotNull(source);\n+    this.maxResults = maxResults;\n+  }\n+\n+  /**\n+   * Checks if there is another page of tenants available to retrieve.\n+   *\n+   * @return true if another page is available, or false otherwise.\n+   */\n+  @Override\n+  public boolean hasNextPage() {\n+    return !END_OF_LIST.equals(currentBatch.getPageToken());\n+  }\n+\n+  /**\n+   * Returns the string token that identifies the next page.\n+   *\n+   * <p>Never returns null. Returns empty string if there are no more pages available to be\n+   * retrieved.\n+   *\n+   * @return A non-null string token (possibly empty, representing no more pages)\n+   */\n+  @NonNull\n+  @Override\n+  public String getNextPageToken() {\n+    return currentBatch.getPageToken();\n+  }\n+\n+  /**\n+   * Returns the next page of tenants.\n+   *\n+   * @return A new {@link ListTenantsPage} instance, or null if there are no more pages.\n+   */\n+  @Nullable\n+  @Override\n+  public ListTenantsPage getNextPage() {\n+    if (hasNextPage()) {\n+      PageFactory factory = new PageFactory(source, maxResults, currentBatch.getPageToken());\n+      try {\n+        return factory.create();\n+      } catch (FirebaseAuthException e) {\n+        throw new RuntimeException(e);\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Returns an {@link Iterable} that facilitates transparently iterating over all the tenants in\n+   * the current Firebase project, starting from this page.\n+   *\n+   * <p>The {@link Iterator} instances produced by the returned {@link Iterable} never buffers more\n+   * than one page of tenants at a time. It is safe to abandon the iterators (i.e. break the loops)\n+   * at any time.\n+   *\n+   * @return a new {@link Iterable} instance.\n+   */\n+  @NonNull\n+  @Override\n+  public Iterable<Tenant> iterateAll() {\n+    return new TenantIterable(this);\n+  }\n+\n+  /**\n+   * Returns an {@link Iterable} over the users in this page.\n+   *\n+   * @return a {@link Iterable} instance.\n+   */\n+  @NonNull\n+  @Override\n+  public Iterable<Tenant> getValues() {\n+    return currentBatch.getTenants();\n+  }\n+\n+  private static class TenantIterable implements Iterable<Tenant> {\n+\n+    private final ListTenantsPage startingPage;\n+\n+    TenantIterable(@NonNull ListTenantsPage startingPage) {\n+      this.startingPage = checkNotNull(startingPage, \"starting page must not be null\");\n+    }\n+\n+    @Override\n+    @NonNull\n+    public Iterator<Tenant> iterator() {\n+      return new TenantIterator(startingPage);\n+    }\n+\n+    /**\n+     * An {@link Iterator} that cycles through tenants, one at a time.\n+     *\n+     * <p>It buffers the last retrieved batch of tenants in memory. The {@code maxResults} parameter\n+     * is an upper bound on the batch size.\n+     */\n+    private static class TenantIterator implements Iterator<Tenant> {\n+\n+      private ListTenantsPage currentPage;\n+      private List<Tenant> batch;\n+      private int index = 0;\n+\n+      private TenantIterator(ListTenantsPage startingPage) {\n+        setCurrentPage(startingPage);\n+      }\n+\n+      @Override\n+      public boolean hasNext() {\n+        if (index == batch.size()) {\n+          if (currentPage.hasNextPage()) {\n+            setCurrentPage(currentPage.getNextPage());\n+          } else {\n+            return false;\n+          }\n+        }\n+\n+        return index < batch.size();\n+      }\n+\n+      @Override\n+      public Tenant next() {\n+        if (!hasNext()) {\n+          throw new NoSuchElementException();\n+        }\n+        return batch.get(index++);\n+      }\n+\n+      @Override\n+      public void remove() {\n+        throw new UnsupportedOperationException(\"remove operation not supported\");\n+      }\n+\n+      private void setCurrentPage(ListTenantsPage page) {\n+        this.currentPage = checkNotNull(page);\n+        this.batch = ImmutableList.copyOf(page.getValues());\n+        this.index = 0;\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Represents a source of tenant data that can be queried to load a batch of tenants.\n+   */\n+  interface TenantSource {\n+    @NonNull\n+    ListTenantsResponse fetch(int maxResults, String pageToken)\n+      throws FirebaseAuthException;\n+  }\n+\n+  static class DefaultTenantSource implements TenantSource {\n+\n+    private final FirebaseUserManager userManager;\n+\n+    DefaultTenantSource(FirebaseUserManager userManager) {\n+      this.userManager = checkNotNull(userManager, \"user manager must not be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "312183aafcfb9d49eb9b01b2d8265a3903495587"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0MzYyOQ==", "bodyText": "Invalid\nand period at the end", "url": "https://github.com/firebase/firebase-admin-java/pull/395#discussion_r418743629", "createdAt": "2020-05-01T21:22:12Z", "author": {"login": "kevinthecheung"}, "path": "src/main/java/com/google/firebase/auth/ListTenantsPage.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.client.json.JsonFactory;\n+import com.google.api.gax.paging.Page;\n+import com.google.common.collect.ImmutableList;\n+import com.google.firebase.auth.internal.DownloadAccountResponse;\n+import com.google.firebase.auth.internal.ListTenantsResponse;\n+import com.google.firebase.internal.NonNull;\n+import com.google.firebase.internal.Nullable;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Represents a page of {@link Tenant} instances.\n+ *\n+ * <p>Provides methods for iterating over the tenants in the current page, and calling up\n+ * subsequent pages of tenants.\n+ *\n+ * <p>Instances of this class are thread-safe and immutable.\n+ */\n+public class ListTenantsPage implements Page<Tenant> {\n+\n+  static final String END_OF_LIST = \"\";\n+\n+  private final ListTenantsResponse currentBatch;\n+  private final TenantSource source;\n+  private final int maxResults;\n+\n+  private ListTenantsPage(\n+      @NonNull ListTenantsResponse currentBatch, @NonNull TenantSource source, int maxResults) {\n+    this.currentBatch = checkNotNull(currentBatch);\n+    this.source = checkNotNull(source);\n+    this.maxResults = maxResults;\n+  }\n+\n+  /**\n+   * Checks if there is another page of tenants available to retrieve.\n+   *\n+   * @return true if another page is available, or false otherwise.\n+   */\n+  @Override\n+  public boolean hasNextPage() {\n+    return !END_OF_LIST.equals(currentBatch.getPageToken());\n+  }\n+\n+  /**\n+   * Returns the string token that identifies the next page.\n+   *\n+   * <p>Never returns null. Returns empty string if there are no more pages available to be\n+   * retrieved.\n+   *\n+   * @return A non-null string token (possibly empty, representing no more pages)\n+   */\n+  @NonNull\n+  @Override\n+  public String getNextPageToken() {\n+    return currentBatch.getPageToken();\n+  }\n+\n+  /**\n+   * Returns the next page of tenants.\n+   *\n+   * @return A new {@link ListTenantsPage} instance, or null if there are no more pages.\n+   */\n+  @Nullable\n+  @Override\n+  public ListTenantsPage getNextPage() {\n+    if (hasNextPage()) {\n+      PageFactory factory = new PageFactory(source, maxResults, currentBatch.getPageToken());\n+      try {\n+        return factory.create();\n+      } catch (FirebaseAuthException e) {\n+        throw new RuntimeException(e);\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Returns an {@link Iterable} that facilitates transparently iterating over all the tenants in\n+   * the current Firebase project, starting from this page.\n+   *\n+   * <p>The {@link Iterator} instances produced by the returned {@link Iterable} never buffers more\n+   * than one page of tenants at a time. It is safe to abandon the iterators (i.e. break the loops)\n+   * at any time.\n+   *\n+   * @return a new {@link Iterable} instance.\n+   */\n+  @NonNull\n+  @Override\n+  public Iterable<Tenant> iterateAll() {\n+    return new TenantIterable(this);\n+  }\n+\n+  /**\n+   * Returns an {@link Iterable} over the users in this page.\n+   *\n+   * @return a {@link Iterable} instance.\n+   */\n+  @NonNull\n+  @Override\n+  public Iterable<Tenant> getValues() {\n+    return currentBatch.getTenants();\n+  }\n+\n+  private static class TenantIterable implements Iterable<Tenant> {\n+\n+    private final ListTenantsPage startingPage;\n+\n+    TenantIterable(@NonNull ListTenantsPage startingPage) {\n+      this.startingPage = checkNotNull(startingPage, \"starting page must not be null\");\n+    }\n+\n+    @Override\n+    @NonNull\n+    public Iterator<Tenant> iterator() {\n+      return new TenantIterator(startingPage);\n+    }\n+\n+    /**\n+     * An {@link Iterator} that cycles through tenants, one at a time.\n+     *\n+     * <p>It buffers the last retrieved batch of tenants in memory. The {@code maxResults} parameter\n+     * is an upper bound on the batch size.\n+     */\n+    private static class TenantIterator implements Iterator<Tenant> {\n+\n+      private ListTenantsPage currentPage;\n+      private List<Tenant> batch;\n+      private int index = 0;\n+\n+      private TenantIterator(ListTenantsPage startingPage) {\n+        setCurrentPage(startingPage);\n+      }\n+\n+      @Override\n+      public boolean hasNext() {\n+        if (index == batch.size()) {\n+          if (currentPage.hasNextPage()) {\n+            setCurrentPage(currentPage.getNextPage());\n+          } else {\n+            return false;\n+          }\n+        }\n+\n+        return index < batch.size();\n+      }\n+\n+      @Override\n+      public Tenant next() {\n+        if (!hasNext()) {\n+          throw new NoSuchElementException();\n+        }\n+        return batch.get(index++);\n+      }\n+\n+      @Override\n+      public void remove() {\n+        throw new UnsupportedOperationException(\"remove operation not supported\");\n+      }\n+\n+      private void setCurrentPage(ListTenantsPage page) {\n+        this.currentPage = checkNotNull(page);\n+        this.batch = ImmutableList.copyOf(page.getValues());\n+        this.index = 0;\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Represents a source of tenant data that can be queried to load a batch of tenants.\n+   */\n+  interface TenantSource {\n+    @NonNull\n+    ListTenantsResponse fetch(int maxResults, String pageToken)\n+      throws FirebaseAuthException;\n+  }\n+\n+  static class DefaultTenantSource implements TenantSource {\n+\n+    private final FirebaseUserManager userManager;\n+\n+    DefaultTenantSource(FirebaseUserManager userManager) {\n+      this.userManager = checkNotNull(userManager, \"user manager must not be null\");\n+    }\n+\n+    @Override\n+    public ListTenantsResponse fetch(int maxResults, String pageToken)\n+        throws FirebaseAuthException {\n+      return userManager.listTenants(maxResults, pageToken);\n+    }\n+  }\n+\n+  /**\n+   * A simple factory class for {@link ListTenantsPage} instances.\n+   *\n+   * <p>Performs argument validation before attempting to load any tenant data (which is expensive,\n+   * and hence may be performed asynchronously on a separate thread).\n+   */\n+  static class PageFactory {\n+\n+    private final TenantSource source;\n+    private final int maxResults;\n+    private final String pageToken;\n+\n+    PageFactory(@NonNull TenantSource source) {\n+      this(source, FirebaseUserManager.MAX_LIST_TENANTS_RESULTS, null);\n+    }\n+\n+    PageFactory(@NonNull TenantSource source, int maxResults, @Nullable String pageToken) {\n+      checkArgument(maxResults > 0 && maxResults <= FirebaseUserManager.MAX_LIST_TENANTS_RESULTS,\n+          \"maxResults must be a positive integer that does not exceed %s\",\n+          FirebaseUserManager.MAX_LIST_TENANTS_RESULTS);\n+      checkArgument(!END_OF_LIST.equals(pageToken), \"invalid end of list page token\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "312183aafcfb9d49eb9b01b2d8265a3903495587"}, "originalPosition": 234}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMwMzIyMw==", "bodyText": "Probably omit \"and false otherwise\" (Or \"True if ... and false otherwise.\")\nhere and below", "url": "https://github.com/firebase/firebase-admin-java/pull/395#discussion_r420303223", "createdAt": "2020-05-05T18:01:42Z", "author": {"login": "kevinthecheung"}, "path": "src/main/java/com/google/firebase/auth/Tenant.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.api.client.util.Key;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Contains metadata associated with a Firebase tenant.\n+ *\n+ * <p>Instances of this class are immutable and thread safe.\n+ */\n+public final class Tenant {\n+\n+  // Lazily initialized from 'resourceName'.\n+  private String tenantId;\n+\n+  @Key(\"name\")\n+  private String resourceName;\n+\n+  @Key(\"displayName\")\n+  private String displayName;\n+\n+  @Key(\"allowPasswordSignup\")\n+  private boolean passwordSignInAllowed;\n+\n+  @Key(\"enableEmailLinkSignin\")\n+  private boolean emailLinkSignInEnabled;\n+\n+  public String getTenantId() {\n+    if (tenantId == null) {\n+      tenantId = resourceName.substring(resourceName.lastIndexOf(\"/\") + 1);\n+    }\n+    return tenantId;\n+  }\n+\n+  public String getDisplayName() {\n+    return displayName;\n+  }\n+\n+  public boolean isPasswordSignInAllowed() {\n+    return passwordSignInAllowed;\n+  }\n+\n+  public boolean isEmailLinkSignInEnabled() {\n+    return emailLinkSignInEnabled;\n+  }\n+\n+  /**\n+   * Returns a new {@link UpdateRequest}, which can be used to update the attributes\n+   * of this tenant.\n+   *\n+   * @return a non-null Tenant.UpdateRequest instance.\n+   */\n+  public UpdateRequest updateRequest() {\n+    return new UpdateRequest(getTenantId());\n+  }\n+\n+  /**\n+   * A specification class for creating a new tenant.\n+   *\n+   * <p>Set the initial attributes of the new tenant by calling various setter methods available in\n+   * this class. None of the attributes are required.\n+   */\n+  public static final class CreateRequest {\n+\n+    private final Map<String,Object> properties = new HashMap<>();\n+\n+    /**\n+     * Creates a new {@link CreateRequest}, which can be used to create a new tenant.\n+     *\n+     * <p>The returned object should be passed to {@link TenantManager#createTenant(CreateRequest)}\n+     * to register the tenant information persistently.\n+     */\n+    public CreateRequest() { }\n+\n+    /**\n+     * Sets the display name for the new tenant.\n+     *\n+     * @param displayName a non-null, non-empty display name string.\n+     */\n+    public CreateRequest setDisplayName(String displayName) {\n+      checkArgument(!Strings.isNullOrEmpty(displayName), \"display name must not be null or empty\");\n+      properties.put(\"displayName\", displayName);\n+      return this;\n+    }\n+\n+    /**\n+     * Sets whether to allow email/password user authentication.\n+     *\n+     * @param passwordSignInAllowed a boolean indicating whether users can be authenticated using\n+     *     an email and password, and false otherwise.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "312183aafcfb9d49eb9b01b2d8265a3903495587"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMwNDY2NA==", "bodyText": "Returns the client's tenant ID.", "url": "https://github.com/firebase/firebase-admin-java/pull/395#discussion_r420304664", "createdAt": "2020-05-05T18:04:14Z", "author": {"login": "kevinthecheung"}, "path": "src/main/java/com/google/firebase/auth/TenantAwareFirebaseAuth.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.api.client.util.Clock;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Supplier;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.auth.internal.FirebaseTokenFactory;\n+\n+/**\n+ * The tenant-aware Firebase client.\n+ *\n+ * <p>This can be used to perform a variety of authentication-related operations, scoped to a\n+ * particular tenant.\n+ */\n+public class TenantAwareFirebaseAuth extends AbstractFirebaseAuth {\n+\n+  private final String tenantId;\n+\n+  TenantAwareFirebaseAuth(final FirebaseApp firebaseApp, final String tenantId) {\n+    super(builderFromAppAndTenantId(firebaseApp, tenantId));\n+    checkArgument(!Strings.isNullOrEmpty(tenantId));\n+    this.tenantId = tenantId;\n+  }\n+\n+  private static Builder builderFromAppAndTenantId(final FirebaseApp app, final String tenantId) {\n+    return AbstractFirebaseAuth.builder()\n+        .setFirebaseApp(app)\n+        .setTokenFactory(\n+            new Supplier<FirebaseTokenFactory>() {\n+              @Override\n+              public FirebaseTokenFactory get() {\n+                return FirebaseTokenUtils.createTokenFactory(app, Clock.SYSTEM, tenantId);\n+              }\n+            })\n+        .setIdTokenVerifier(\n+            new Supplier<FirebaseTokenVerifier>() {\n+              @Override\n+              public FirebaseTokenVerifier get() {\n+                return FirebaseTokenUtils.createIdTokenVerifier(app, Clock.SYSTEM, tenantId);\n+              }\n+            })\n+        .setCookieVerifier(\n+            new Supplier<FirebaseTokenVerifier>() {\n+              @Override\n+              public FirebaseTokenVerifier get() {\n+                return FirebaseTokenUtils.createSessionCookieVerifier(app, Clock.SYSTEM);\n+              }\n+            })\n+        .setUserManager(\n+            new Supplier<FirebaseUserManager>() {\n+              @Override\n+              public FirebaseUserManager get() {\n+                return FirebaseUserManager\n+                  .builder()\n+                  .setFirebaseApp(app)\n+                  .setTenantId(tenantId)\n+                  .build();\n+              }\n+            });\n+  }\n+\n+  /** Returns the corresponding tenant ID. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "312183aafcfb9d49eb9b01b2d8265a3903495587"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMwNjcxNQ==", "bodyText": "the expected value ('TENANT_1')\nhere and below", "url": "https://github.com/firebase/firebase-admin-java/pull/395#discussion_r420306715", "createdAt": "2020-05-05T18:07:33Z", "author": {"login": "kevinthecheung"}, "path": "src/test/java/com/google/firebase/auth/FirebaseTokenVerifierImplTest.java", "diffHunk": "@@ -216,6 +218,50 @@ public void testMalformedToken() throws Exception {\n     tokenVerifier.verifyToken(\"not.a.jwt\");\n   }\n \n+  @Test\n+  public void testVerifyTokenDifferentTenantIds() throws Exception {\n+    try {\n+      fullyPopulatedBuilder()\n+        .setTenantId(\"TENANT_1\")\n+        .build()\n+        .verifyToken(createTokenWithTenantId(\"TENANT_2\"));\n+    } catch (FirebaseAuthException e) {\n+      assertEquals(FirebaseUserManager.TENANT_ID_MISMATCH_ERROR, e.getErrorCode());\n+      assertEquals(\n+          \"The tenant ID ('TENANT_2') of the token did not match the expected ('TENANT_1') value\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "312183aafcfb9d49eb9b01b2d8265a3903495587"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1a05c75405d32b73b3ee735595eb570bca1c4ee", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/e1a05c75405d32b73b3ee735595eb570bca1c4ee", "committedDate": "2020-05-05T21:25:42Z", "message": "Address Kevin's feedback."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MDY2MDUx", "url": "https://github.com/firebase/firebase-admin-java/pull/395#pullrequestreview-407066051", "createdAt": "2020-05-07T00:01:31Z", "commit": {"oid": "e1a05c75405d32b73b3ee735595eb570bca1c4ee"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef3fa9f64515e01b502445387f2e13008c0f7f00", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/ef3fa9f64515e01b502445387f2e13008c0f7f00", "committedDate": "2020-05-18T23:17:39Z", "message": "Make TenantAwareFirebaseAuth final."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "018fa6bfce47d4929dfa31b11886eb93e82d06c2", "author": {"user": {"login": "hiranya911", "name": "Hiranya Jayathilaka"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/018fa6bfce47d4929dfa31b11886eb93e82d06c2", "committedDate": "2020-05-19T20:21:20Z", "message": "chore: Merging master into tenant-mgt (#422)\n\n* Bump netty.version from 4.1.34.Final to 4.1.45.Final (#373)\r\n\r\nBumps `netty.version` from 4.1.34.Final to 4.1.45.Final.\r\n\r\nUpdates `netty-codec-http` from 4.1.34.Final to 4.1.45.Final\r\n- [Release notes](https://github.com/netty/netty/releases)\r\n- [Commits](https://github.com/netty/netty/compare/netty-4.1.34.Final...netty-4.1.45.Final)\r\n\r\nUpdates `netty-handler` from 4.1.34.Final to 4.1.45.Final\r\n- [Release notes](https://github.com/netty/netty/releases)\r\n- [Commits](https://github.com/netty/netty/compare/netty-4.1.34.Final...netty-4.1.45.Final)\r\n\r\nUpdates `netty-transport` from 4.1.34.Final to 4.1.45.Final\r\n- [Release notes](https://github.com/netty/netty/releases)\r\n- [Commits](https://github.com/netty/netty/compare/netty-4.1.34.Final...netty-4.1.45.Final)\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\n\r\n* feat(auth): Add bulk get/delete methods (#365)\r\n\r\nThis PR allows callers to retrieve a list of users by unique identifier (uid, email, phone, federated provider uid) as well as to delete a list of users.\r\n\r\nRELEASE NOTE: Added getUsers() and deleteUsers() APIs for retrieving and deleting user accounts in bulk.\r\n\r\n* chore: Setting the version of the Maven Javadoc plugin (#412)\r\n\r\n* [chore] Release 6.13.0 (#413)\r\n\r\n* [chore] Release 6.13.0 take 2 (#414)\r\n\r\n* Upgated the gpg keys\r\n\r\n* Added temp verify script\r\n\r\n* Disabled tty for gpg import\r\n\r\n* Removing temp verification script\r\n\r\n* Updated publish commands\r\n\r\n* [chore] Release 6.13.0 take 3 (#415)\r\n\r\n* [chore] Release 6.13.0 take 4 (#416)\r\n\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\nCo-authored-by: rsgowman <rich@gowman.noip.me>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec15fe08c8a508000a1d384c5cfa4778db1ee7f1", "author": {"user": {"login": "hiranya911", "name": "Hiranya Jayathilaka"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/ec15fe08c8a508000a1d384c5cfa4778db1ee7f1", "committedDate": "2020-05-19T23:30:48Z", "message": "Merge branch 'master' into tenant-mgt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d1b15be06c1fb16a83e8bb75f9e456fb2a416e2", "author": {"user": {"login": "hiranya911", "name": "Hiranya Jayathilaka"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/6d1b15be06c1fb16a83e8bb75f9e456fb2a416e2", "committedDate": "2020-05-19T23:36:41Z", "message": "Fixed a bad merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8b18f61bf58564e3f1a15a3c0daa46862a5fca5", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/b8b18f61bf58564e3f1a15a3c0daa46862a5fca5", "committedDate": "2020-06-17T17:17:06Z", "message": "Add provider config management operations. (#433)\n\nAdds all of the OIDC and SAML provider config operations, related to adding multi-tenancy support."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "baa99c343de144fa00e04415e5f1cf5355ddc245", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/baa99c343de144fa00e04415e5f1cf5355ddc245", "committedDate": "2020-06-17T17:53:05Z", "message": "Stop using deprecated MockHttpTransport.builder() method."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "042121baaddec0d53daa41bb3197a1416a311da4", "author": {"user": {"login": "hiranya911", "name": "Hiranya Jayathilaka"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/042121baaddec0d53daa41bb3197a1416a311da4", "committedDate": "2020-07-09T22:30:30Z", "message": "Moved tenant management code into a new package (#449)\n\n* Multi-tenancy refactor experiment\r\n\r\n* fix(auth): Completed tenant mgt refactor\r\n\r\n* Added license header to new class\r\n\r\n* Responding to code review comments: Consolidated error codes in AuthHttpClient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d7a74f9b8d99a27cc36ccd320e08453f92a488e", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/0d7a74f9b8d99a27cc36ccd320e08453f92a488e", "committedDate": "2020-07-16T20:08:18Z", "message": "Improve unit test coverage of tenant/provider-related code (#453)\n\nI've improved the unit test coverage of tenant/provider-related code, and I've also removed a number of unused imports."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e66e5868973368cb19b9a05c5160b61ca62c1891", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/e66e5868973368cb19b9a05c5160b61ca62c1891", "committedDate": "2020-07-16T20:28:38Z", "message": "Fix integration tests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMjIzMzI1", "url": "https://github.com/firebase/firebase-admin-java/pull/395#pullrequestreview-450223325", "createdAt": "2020-07-16T21:17:51Z", "commit": {"oid": "e66e5868973368cb19b9a05c5160b61ca62c1891"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2849, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}