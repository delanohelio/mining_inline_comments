{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1OTg2NjAw", "number": 496, "title": "Add Remote Config Pubish, Validate, and GetTemplateAtVersion operations", "bodyText": "Add getTemplateAtVersion(), publishTemplate(), validateTemplate(), and forcePublishTemplate() operations.\nAdd unit tests for new operations.\nAdd new unit test for timestamps with up to nanoseconds precision.\n\nRelated to: #446", "createdAt": "2020-11-23T20:49:55Z", "url": "https://github.com/firebase/firebase-admin-java/pull/496", "merged": true, "mergeCommit": {"oid": "1a3f03665c35454e5e4e969c853ec3dbd43786d3"}, "closed": true, "closedAt": "2020-11-24T16:16:18Z", "author": {"login": "lahirumaramba"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfbhGsgBqjQwMjk1OTM2NjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfeyWTAH2gAyNTI1OTg2NjAwOjgxZDg5MDcyZDE5NmE4NzQ0ZThhYzNjOWNhMWJmMDUzMmM3ZWQxMzM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5750833b15b20748f2eb1d5023dbbf04d1939581", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/5750833b15b20748f2eb1d5023dbbf04d1939581", "committedDate": "2020-11-23T20:46:48Z", "message": "Add Pubish, Validate, and GetTemplateAtVersion operations"}, "afterCommit": {"oid": "2611e9e550980bc6f817fa0e87f0d2e269b564d5", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/2611e9e550980bc6f817fa0e87f0d2e269b564d5", "committedDate": "2020-11-23T20:52:20Z", "message": "Add Pubish, Validate, and GetTemplateAtVersion operations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c63daf2c52e5c3753edc9d9f25844920b755cf78", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/c63daf2c52e5c3753edc9d9f25844920b755cf78", "committedDate": "2020-11-23T20:53:57Z", "message": "Add Pubish, Validate, and GetTemplateAtVersion operations"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2611e9e550980bc6f817fa0e87f0d2e269b564d5", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/2611e9e550980bc6f817fa0e87f0d2e269b564d5", "committedDate": "2020-11-23T20:52:20Z", "message": "Add Pubish, Validate, and GetTemplateAtVersion operations"}, "afterCommit": {"oid": "c63daf2c52e5c3753edc9d9f25844920b755cf78", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/c63daf2c52e5c3753edc9d9f25844920b755cf78", "committedDate": "2020-11-23T20:53:57Z", "message": "Add Pubish, Validate, and GetTemplateAtVersion operations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2ODUyODYz", "url": "https://github.com/firebase/firebase-admin-java/pull/496#pullrequestreview-536852863", "createdAt": "2020-11-23T21:17:55Z", "commit": {"oid": "c63daf2c52e5c3753edc9d9f25844920b755cf78"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMToxNzo1NVrOH4fsHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMjoxMDoyOFrOH4hViQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAwMTUwMg==", "bodyText": "Provide a few overloads so that callers don't have to specify the boolean flags all the time.\npublishTemplateOp(Template template)\npublishTemplateOp(Template template, boolean validateOnly)\npublishTemplateOp(Template template, boolean validateOnly, boolean forcePublish)", "url": "https://github.com/firebase/firebase-admin-java/pull/496#discussion_r529001502", "createdAt": "2020-11-23T21:17:55Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java", "diffHunk": "@@ -100,6 +101,154 @@ protected Template execute() throws FirebaseRemoteConfigException {\n     };\n   }\n \n+  /**\n+   * Gets the requested version of the of the Remote Config template.\n+   *\n+   * @param versionNumber The version number of the Remote Config template to look up.\n+   * @return A {@link Template}.\n+   * @throws FirebaseRemoteConfigException If an error occurs while getting the template.\n+   */\n+  public Template getTemplateAtVersion(\n+          @NonNull String versionNumber) throws FirebaseRemoteConfigException {\n+    return getTemplateAtVersionOp(versionNumber).call();\n+  }\n+\n+  /**\n+   * Gets the requested version of the of the Remote Config template.\n+   *\n+   * @param versionNumber The version number of the Remote Config template to look up.\n+   * @return A {@link Template}.\n+   * @throws FirebaseRemoteConfigException If an error occurs while getting the template.\n+   */\n+  public Template getTemplateAtVersion(long versionNumber) throws FirebaseRemoteConfigException {\n+    String versionNumberString = String.valueOf(versionNumber);\n+    return getTemplateAtVersionOp(versionNumberString).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #getTemplateAtVersion(String versionNumber)} but performs the operation\n+   * asynchronously.\n+   *\n+   * @param versionNumber The version number of the Remote Config template to look up.\n+   * @return An {@code ApiFuture} that completes with a {@link Template} when\n+   *     the requested template is available.\n+   */\n+  public ApiFuture<Template> getTemplateAtVersionAsync(@NonNull String versionNumber) {\n+    return getTemplateAtVersionOp(versionNumber).callAsync(app);\n+  }\n+\n+  /**\n+   * Similar to {@link #getTemplateAtVersion(long versionNumber)} but performs the operation\n+   * asynchronously.\n+   *\n+   * @param versionNumber The version number of the Remote Config template to look up.\n+   * @return An {@code ApiFuture} that completes with a {@link Template} when\n+   *     the requested template is available.\n+   */\n+  public ApiFuture<Template> getTemplateAtVersionAsync(long versionNumber) {\n+    String versionNumberString = String.valueOf(versionNumber);\n+    return getTemplateAtVersionOp(versionNumberString).callAsync(app);\n+  }\n+\n+  private CallableOperation<Template, FirebaseRemoteConfigException> getTemplateAtVersionOp(\n+          final String versionNumber) {\n+    final FirebaseRemoteConfigClient remoteConfigClient = getRemoteConfigClient();\n+    return new CallableOperation<Template, FirebaseRemoteConfigException>() {\n+      @Override\n+      protected Template execute() throws FirebaseRemoteConfigException {\n+        return remoteConfigClient.getTemplateAtVersion(versionNumber);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Publishes a Remote Config template.\n+   *\n+   * @param template The Remote Config template to be published.\n+   * @return The published {@link Template}.\n+   * @throws FirebaseRemoteConfigException If an error occurs while publishing the template.\n+   */\n+  public Template publishTemplate(@NonNull Template template) throws FirebaseRemoteConfigException {\n+    return publishTemplateOp(template, false, false).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #publishTemplate(Template template)} but performs the operation\n+   * asynchronously.\n+   *\n+   * @param template The Remote Config template to be published.\n+   * @return An {@code ApiFuture} that completes with a {@link Template} when\n+   *     the provided template is published.\n+   */\n+  public ApiFuture<Template> publishTemplateAsync(@NonNull Template template) {\n+    return publishTemplateOp(template, false, false).callAsync(app);\n+  }\n+\n+  /**\n+   * Validates a Remote Config template.\n+   *\n+   * @param template The Remote Config template to be validated.\n+   * @return The validated {@link Template}.\n+   * @throws FirebaseRemoteConfigException If an error occurs while validating the template.\n+   */\n+  public Template validateTemplate(\n+          @NonNull Template template) throws FirebaseRemoteConfigException {\n+    return publishTemplateOp(template, true, false).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #validateTemplate(Template template)} but performs the operation\n+   * asynchronously.\n+   *\n+   * @param template The Remote Config template to be validated.\n+   * @return An {@code ApiFuture} that completes with a {@link Template} when\n+   *     the provided template is validated.\n+   */\n+  public ApiFuture<Template> validateTemplateAsync(@NonNull Template template) {\n+    return publishTemplateOp(template, true, false).callAsync(app);\n+  }\n+\n+  /**\n+   * Force publishes a Remote Config template.\n+   *\n+   * <p>This method forces the Remote Config template to be updated and circumvent the ETag.\n+   * This approach is not recommended because it risks causing the loss of updates to your\n+   * Remote Config template if multiple clients are updating the Remote Config template.\n+   * See <a href=\"https://firebase.google.com/docs/remote-config/use-config-rest#etag_usage_and_forced_updates\">\n+   * ETag usage and forced updates</a>.\n+   *\n+   * @param template The Remote Config template to be forcefully published.\n+   * @return The published {@link Template}.\n+   * @throws FirebaseRemoteConfigException If an error occurs while publishing the template.\n+   */\n+  public Template forcePublishTemplate(\n+          @NonNull Template template) throws FirebaseRemoteConfigException {\n+    return publishTemplateOp(template, false, true).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #forcePublishTemplate(Template template)} but performs the operation\n+   * asynchronously.\n+   *\n+   * @param template The Remote Config template to be forcefully published.\n+   * @return An {@code ApiFuture} that completes with a {@link Template} when\n+   *     the provided template is published.\n+   */\n+  public ApiFuture<Template> forcePublishTemplateAsync(@NonNull Template template) {\n+    return publishTemplateOp(template, false, true).callAsync(app);\n+  }\n+\n+  private CallableOperation<Template, FirebaseRemoteConfigException> publishTemplateOp(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c63daf2c52e5c3753edc9d9f25844920b755cf78"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAwNzA1Mw==", "bodyText": "Or use an internal PublishSettings type to encapsulate the boolean flags.", "url": "https://github.com/firebase/firebase-admin-java/pull/496#discussion_r529007053", "createdAt": "2020-11-23T21:27:08Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java", "diffHunk": "@@ -100,6 +101,154 @@ protected Template execute() throws FirebaseRemoteConfigException {\n     };\n   }\n \n+  /**\n+   * Gets the requested version of the of the Remote Config template.\n+   *\n+   * @param versionNumber The version number of the Remote Config template to look up.\n+   * @return A {@link Template}.\n+   * @throws FirebaseRemoteConfigException If an error occurs while getting the template.\n+   */\n+  public Template getTemplateAtVersion(\n+          @NonNull String versionNumber) throws FirebaseRemoteConfigException {\n+    return getTemplateAtVersionOp(versionNumber).call();\n+  }\n+\n+  /**\n+   * Gets the requested version of the of the Remote Config template.\n+   *\n+   * @param versionNumber The version number of the Remote Config template to look up.\n+   * @return A {@link Template}.\n+   * @throws FirebaseRemoteConfigException If an error occurs while getting the template.\n+   */\n+  public Template getTemplateAtVersion(long versionNumber) throws FirebaseRemoteConfigException {\n+    String versionNumberString = String.valueOf(versionNumber);\n+    return getTemplateAtVersionOp(versionNumberString).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #getTemplateAtVersion(String versionNumber)} but performs the operation\n+   * asynchronously.\n+   *\n+   * @param versionNumber The version number of the Remote Config template to look up.\n+   * @return An {@code ApiFuture} that completes with a {@link Template} when\n+   *     the requested template is available.\n+   */\n+  public ApiFuture<Template> getTemplateAtVersionAsync(@NonNull String versionNumber) {\n+    return getTemplateAtVersionOp(versionNumber).callAsync(app);\n+  }\n+\n+  /**\n+   * Similar to {@link #getTemplateAtVersion(long versionNumber)} but performs the operation\n+   * asynchronously.\n+   *\n+   * @param versionNumber The version number of the Remote Config template to look up.\n+   * @return An {@code ApiFuture} that completes with a {@link Template} when\n+   *     the requested template is available.\n+   */\n+  public ApiFuture<Template> getTemplateAtVersionAsync(long versionNumber) {\n+    String versionNumberString = String.valueOf(versionNumber);\n+    return getTemplateAtVersionOp(versionNumberString).callAsync(app);\n+  }\n+\n+  private CallableOperation<Template, FirebaseRemoteConfigException> getTemplateAtVersionOp(\n+          final String versionNumber) {\n+    final FirebaseRemoteConfigClient remoteConfigClient = getRemoteConfigClient();\n+    return new CallableOperation<Template, FirebaseRemoteConfigException>() {\n+      @Override\n+      protected Template execute() throws FirebaseRemoteConfigException {\n+        return remoteConfigClient.getTemplateAtVersion(versionNumber);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Publishes a Remote Config template.\n+   *\n+   * @param template The Remote Config template to be published.\n+   * @return The published {@link Template}.\n+   * @throws FirebaseRemoteConfigException If an error occurs while publishing the template.\n+   */\n+  public Template publishTemplate(@NonNull Template template) throws FirebaseRemoteConfigException {\n+    return publishTemplateOp(template, false, false).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #publishTemplate(Template template)} but performs the operation\n+   * asynchronously.\n+   *\n+   * @param template The Remote Config template to be published.\n+   * @return An {@code ApiFuture} that completes with a {@link Template} when\n+   *     the provided template is published.\n+   */\n+  public ApiFuture<Template> publishTemplateAsync(@NonNull Template template) {\n+    return publishTemplateOp(template, false, false).callAsync(app);\n+  }\n+\n+  /**\n+   * Validates a Remote Config template.\n+   *\n+   * @param template The Remote Config template to be validated.\n+   * @return The validated {@link Template}.\n+   * @throws FirebaseRemoteConfigException If an error occurs while validating the template.\n+   */\n+  public Template validateTemplate(\n+          @NonNull Template template) throws FirebaseRemoteConfigException {\n+    return publishTemplateOp(template, true, false).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #validateTemplate(Template template)} but performs the operation\n+   * asynchronously.\n+   *\n+   * @param template The Remote Config template to be validated.\n+   * @return An {@code ApiFuture} that completes with a {@link Template} when\n+   *     the provided template is validated.\n+   */\n+  public ApiFuture<Template> validateTemplateAsync(@NonNull Template template) {\n+    return publishTemplateOp(template, true, false).callAsync(app);\n+  }\n+\n+  /**\n+   * Force publishes a Remote Config template.\n+   *\n+   * <p>This method forces the Remote Config template to be updated and circumvent the ETag.\n+   * This approach is not recommended because it risks causing the loss of updates to your\n+   * Remote Config template if multiple clients are updating the Remote Config template.\n+   * See <a href=\"https://firebase.google.com/docs/remote-config/use-config-rest#etag_usage_and_forced_updates\">\n+   * ETag usage and forced updates</a>.\n+   *\n+   * @param template The Remote Config template to be forcefully published.\n+   * @return The published {@link Template}.\n+   * @throws FirebaseRemoteConfigException If an error occurs while publishing the template.\n+   */\n+  public Template forcePublishTemplate(\n+          @NonNull Template template) throws FirebaseRemoteConfigException {\n+    return publishTemplateOp(template, false, true).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #forcePublishTemplate(Template template)} but performs the operation\n+   * asynchronously.\n+   *\n+   * @param template The Remote Config template to be forcefully published.\n+   * @return An {@code ApiFuture} that completes with a {@link Template} when\n+   *     the provided template is published.\n+   */\n+  public ApiFuture<Template> forcePublishTemplateAsync(@NonNull Template template) {\n+    return publishTemplateOp(template, false, true).callAsync(app);\n+  }\n+\n+  private CallableOperation<Template, FirebaseRemoteConfigException> publishTemplateOp(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAwMTUwMg=="}, "originalCommit": {"oid": "c63daf2c52e5c3753edc9d9f25844920b755cf78"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAyNjc2NQ==", "bodyText": "This is a bit redundant. Just test for a few timestamp formats.\nString[] timestamps = new String[] {\n  // 3 digits,\n  // 6 digits,\n  // 9 digits,\n}", "url": "https://github.com/firebase/firebase-admin-java/pull/496#discussion_r529026765", "createdAt": "2020-11-23T22:07:01Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java", "diffHunk": "@@ -83,64 +130,41 @@ public void setUp() {\n     client = initRemoteConfigClient(response, interceptor);\n   }\n \n+  // Get template tests\n+\n   @Test\n   public void testGetTemplate() throws Exception {\n     response.addHeader(\"etag\", TEST_ETAG);\n     response.setContent(MOCK_TEMPLATE_RESPONSE);\n \n     Template receivedTemplate = client.getTemplate();\n-    final Map<String, Parameter> expectedParameters = ImmutableMap.of(\n-            \"welcome_message_text\", new Parameter()\n-                    .setDefaultValue(ParameterValue.of(\"welcome to app\"))\n-                    .setConditionalValues(ImmutableMap.<String, ParameterValue>of(\n-                            \"ios_en\", ParameterValue.of(\"welcome to app en\")\n-                    ))\n-                    .setDescription(\"text for welcome message!\"),\n-            \"header_text\", new Parameter()\n-                    .setDefaultValue(ParameterValue.inAppDefault())\n-    );\n-    final Map<String, ParameterGroup> expectedParameterGroups = ImmutableMap.of(\n-            \"new menu\", new ParameterGroup()\n-                    .setDescription(\"New Menu\")\n-                    .setParameters(ImmutableMap.of(\n-                            \"pumpkin_spice_season\", new Parameter()\n-                                    .setDefaultValue(ParameterValue.of(\"true\"))\n-                                    .setDescription(\"Whether it's currently pumpkin spice season.\")\n-                            )\n-                    )\n-    );\n-    final List<Condition> expectedConditions = ImmutableList.of(\n-            new Condition(\"ios_en\", \"device.os == 'ios' && device.country in ['us', 'uk']\")\n-                    .setTagColor(TagColor.INDIGO),\n-            new Condition(\"android_en\",\n-                    \"device.os == 'android' && device.country in ['us', 'uk']\")\n-                    .setTagColor(TagColor.UNSPECIFIED)\n-    );\n-    final Version expectedVersion = new Version(new TemplateResponse.VersionResponse()\n-            .setVersionNumber(\"17\")\n-            .setUpdateOrigin(\"ADMIN_SDK_NODE\")\n-            .setUpdateType(\"INCREMENTAL_UPDATE\")\n-            .setUpdateUser(new TemplateResponse.UserResponse()\n-                    .setEmail(\"firebase-user@account.com\")\n-                    .setName(\"dev-admin\")\n-                    .setImageUrl(\"http://image.jpg\"))\n-            .setUpdateTime(\"2020-11-03T20:24:15.045123456Z\")\n-            .setDescription(\"promo config\")\n-    );\n-\n-    Template expectedTemplate = new Template()\n-            .setETag(TEST_ETAG)\n-            .setParameters(expectedParameters)\n-            .setConditions(expectedConditions)\n-            .setParameterGroups(expectedParameterGroups)\n-            .setVersion(expectedVersion);\n \n     assertEquals(TEST_ETAG, receivedTemplate.getETag());\n-    assertEquals(expectedTemplate, receivedTemplate);\n-    assertEquals(1604435055000L, receivedTemplate.getVersion().getUpdateTime());\n+    assertEquals(EXPECTED_TEMPLATE, receivedTemplate);\n+    assertEquals(1605423446000L, receivedTemplate.getVersion().getUpdateTime());\n     checkGetRequestHeader(interceptor.getLastRequest());\n   }\n \n+  @Test\n+  public void testGetTemplateWithTimestampUpToNanosecondPrecision() throws Exception {\n+    for (int i = 1; i < 10; i++) {\n+      String fractionalSecs = \"342763941\".substring(0, i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c63daf2c52e5c3753edc9d9f25844920b755cf78"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAyNzY3MA==", "bodyText": "Which line is supposed to throw in this test case?", "url": "https://github.com/firebase/firebase-admin-java/pull/496#discussion_r529027670", "createdAt": "2020-11-23T22:08:51Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java", "diffHunk": "@@ -277,12 +305,399 @@ public void testGetTemplateErrorWithRcError() {\n         fail(\"No error thrown for HTTP error\");\n       } catch (FirebaseRemoteConfigException error) {\n         checkExceptionFromHttpResponse(error, ErrorCode.INVALID_ARGUMENT,\n-                RemoteConfigErrorCode.INVALID_ARGUMENT, \"[INVALID_ARGUMENT]: test error\");\n+                RemoteConfigErrorCode.INVALID_ARGUMENT, \"[INVALID_ARGUMENT]: test error\",\n+                HttpMethods.GET);\n       }\n       checkGetRequestHeader(interceptor.getLastRequest());\n     }\n   }\n \n+  // Test getTemplateAtVersion\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testGetTemplateAtVersionWithNullString() throws Exception {\n+    client.getTemplateAtVersion(null);\n+  }\n+\n+  @Test\n+  public void testGetTemplateAtVersionWithInvalidString() throws Exception {\n+    List<String> invalidVersionStrings = ImmutableList\n+            .of(\"\", \" \", \"abc\", \"t123\", \"123t\", \"t123t\", \"12t3\", \"#$*&^\", \"-123\", \"+123\", \"123.4\");\n+\n+    for (String version : invalidVersionStrings) {\n+      try {\n+        client.getTemplateAtVersion(version);\n+        fail(\"No error thrown for invalid version number\");\n+      } catch (IllegalArgumentException expected) {\n+        String message = \"Version number must be a non-empty string in int64 format.\";\n+        assertEquals(message, expected.getMessage());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testGetTemplateAtVersionWithValidString() throws Exception {\n+    response.addHeader(\"etag\", TEST_ETAG);\n+    response.setContent(MOCK_TEMPLATE_RESPONSE);\n+\n+    Template receivedTemplate = client.getTemplateAtVersion(\"24\");\n+\n+    assertEquals(TEST_ETAG, receivedTemplate.getETag());\n+    assertEquals(EXPECTED_TEMPLATE, receivedTemplate);\n+    assertEquals(1605423446000L, receivedTemplate.getVersion().getUpdateTime());\n+    checkGetRequestHeader(interceptor.getLastRequest(), \"?versionNumber=24\");\n+  }\n+\n+  @Test\n+  public void testGetTemplateAtVersionWithEmptyTemplateResponse() throws Exception {\n+    response.addHeader(\"etag\", TEST_ETAG);\n+    response.setContent(\"{}\");\n+\n+    Template template = client.getTemplateAtVersion(\"24\");\n+\n+    assertEquals(TEST_ETAG, template.getETag());\n+    assertEquals(0, template.getParameters().size());\n+    assertEquals(0, template.getConditions().size());\n+    assertEquals(0, template.getParameterGroups().size());\n+    assertNull(template.getVersion());\n+    checkGetRequestHeader(interceptor.getLastRequest(), \"?versionNumber=24\");\n+  }\n+\n+  @Test(expected = IllegalStateException.class)\n+  public void testGetTemplateAtVersionWithInvalidEtags() throws FirebaseRemoteConfigException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c63daf2c52e5c3753edc9d9f25844920b755cf78"}, "originalPosition": 276}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAyODQ4OQ==", "bodyText": "Here too. Which lines are supposed to throw? The test case will terminate upon encountering the first exception.", "url": "https://github.com/firebase/firebase-admin-java/pull/496#discussion_r529028489", "createdAt": "2020-11-23T22:10:28Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java", "diffHunk": "@@ -277,12 +305,399 @@ public void testGetTemplateErrorWithRcError() {\n         fail(\"No error thrown for HTTP error\");\n       } catch (FirebaseRemoteConfigException error) {\n         checkExceptionFromHttpResponse(error, ErrorCode.INVALID_ARGUMENT,\n-                RemoteConfigErrorCode.INVALID_ARGUMENT, \"[INVALID_ARGUMENT]: test error\");\n+                RemoteConfigErrorCode.INVALID_ARGUMENT, \"[INVALID_ARGUMENT]: test error\",\n+                HttpMethods.GET);\n       }\n       checkGetRequestHeader(interceptor.getLastRequest());\n     }\n   }\n \n+  // Test getTemplateAtVersion\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testGetTemplateAtVersionWithNullString() throws Exception {\n+    client.getTemplateAtVersion(null);\n+  }\n+\n+  @Test\n+  public void testGetTemplateAtVersionWithInvalidString() throws Exception {\n+    List<String> invalidVersionStrings = ImmutableList\n+            .of(\"\", \" \", \"abc\", \"t123\", \"123t\", \"t123t\", \"12t3\", \"#$*&^\", \"-123\", \"+123\", \"123.4\");\n+\n+    for (String version : invalidVersionStrings) {\n+      try {\n+        client.getTemplateAtVersion(version);\n+        fail(\"No error thrown for invalid version number\");\n+      } catch (IllegalArgumentException expected) {\n+        String message = \"Version number must be a non-empty string in int64 format.\";\n+        assertEquals(message, expected.getMessage());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testGetTemplateAtVersionWithValidString() throws Exception {\n+    response.addHeader(\"etag\", TEST_ETAG);\n+    response.setContent(MOCK_TEMPLATE_RESPONSE);\n+\n+    Template receivedTemplate = client.getTemplateAtVersion(\"24\");\n+\n+    assertEquals(TEST_ETAG, receivedTemplate.getETag());\n+    assertEquals(EXPECTED_TEMPLATE, receivedTemplate);\n+    assertEquals(1605423446000L, receivedTemplate.getVersion().getUpdateTime());\n+    checkGetRequestHeader(interceptor.getLastRequest(), \"?versionNumber=24\");\n+  }\n+\n+  @Test\n+  public void testGetTemplateAtVersionWithEmptyTemplateResponse() throws Exception {\n+    response.addHeader(\"etag\", TEST_ETAG);\n+    response.setContent(\"{}\");\n+\n+    Template template = client.getTemplateAtVersion(\"24\");\n+\n+    assertEquals(TEST_ETAG, template.getETag());\n+    assertEquals(0, template.getParameters().size());\n+    assertEquals(0, template.getConditions().size());\n+    assertEquals(0, template.getParameterGroups().size());\n+    assertNull(template.getVersion());\n+    checkGetRequestHeader(interceptor.getLastRequest(), \"?versionNumber=24\");\n+  }\n+\n+  @Test(expected = IllegalStateException.class)\n+  public void testGetTemplateAtVersionWithInvalidEtags() throws FirebaseRemoteConfigException {\n+    // ETag does not exist\n+    response.setContent(MOCK_TEMPLATE_RESPONSE);\n+\n+    client.getTemplateAtVersion(\"24\");\n+\n+    // Empty ETag\n+    response.addHeader(\"etag\", \"\");\n+    response.setContent(MOCK_TEMPLATE_RESPONSE);\n+\n+    client.getTemplate();\n+  }\n+\n+  @Test\n+  public void testGetTemplateAtVersionHttpError() {\n+    for (int code : HTTP_STATUS_CODES) {\n+      response.setStatusCode(code).setContent(\"{}\");\n+\n+      try {\n+        client.getTemplateAtVersion(\"24\");\n+        fail(\"No error thrown for HTTP error\");\n+      } catch (FirebaseRemoteConfigException error) {\n+        checkExceptionFromHttpResponse(error, HTTP_STATUS_TO_ERROR_CODE.get(code), null,\n+                \"Unexpected HTTP response with status: \" + code + \"\\n{}\", HttpMethods.GET);\n+      }\n+      checkGetRequestHeader(interceptor.getLastRequest(), \"?versionNumber=24\");\n+    }\n+  }\n+\n+  @Test\n+  public void testGetTemplateAtVersionTransportError() {\n+    client = initClientWithFaultyTransport();\n+\n+    try {\n+      client.getTemplateAtVersion(\"24\");\n+      fail(\"No error thrown for HTTP error\");\n+    } catch (FirebaseRemoteConfigException error) {\n+      assertEquals(ErrorCode.UNKNOWN, error.getErrorCode());\n+      assertEquals(\"Unknown error while making a remote service call: transport error\",\n+              error.getMessage());\n+      assertTrue(error.getCause() instanceof IOException);\n+      assertNull(error.getHttpResponse());\n+      assertNull(error.getRemoteConfigErrorCode());\n+    }\n+  }\n+\n+  @Test\n+  public void testGetTemplateAtVersionSuccessResponseWithUnexpectedPayload() {\n+    response.setContent(\"not valid json\");\n+\n+    try {\n+      client.getTemplateAtVersion(\"24\");\n+      fail(\"No error thrown for malformed response\");\n+    } catch (FirebaseRemoteConfigException error) {\n+      assertEquals(ErrorCode.UNKNOWN, error.getErrorCode());\n+      assertTrue(error.getMessage().startsWith(\"Error while parsing HTTP response: \"));\n+      assertNotNull(error.getCause());\n+      assertNotNull(error.getHttpResponse());\n+      assertNull(error.getRemoteConfigErrorCode());\n+    }\n+    checkGetRequestHeader(interceptor.getLastRequest(), \"?versionNumber=24\");\n+  }\n+\n+  @Test\n+  public void testGetTemplateAtVersionErrorWithZeroContentResponse() {\n+    for (int code : HTTP_STATUS_CODES) {\n+      response.setStatusCode(code).setZeroContent();\n+\n+      try {\n+        client.getTemplateAtVersion(\"24\");\n+        fail(\"No error thrown for HTTP error\");\n+      } catch (FirebaseRemoteConfigException error) {\n+        checkExceptionFromHttpResponse(error, HTTP_STATUS_TO_ERROR_CODE.get(code), null,\n+                \"Unexpected HTTP response with status: \" + code + \"\\nnull\", HttpMethods.GET);\n+      }\n+      checkGetRequestHeader(interceptor.getLastRequest(), \"?versionNumber=24\");\n+    }\n+  }\n+\n+  @Test\n+  public void testGetTemplateAtVersionErrorWithMalformedResponse() {\n+    for (int code : HTTP_STATUS_CODES) {\n+      response.setStatusCode(code).setContent(\"not json\");\n+\n+      try {\n+        client.getTemplateAtVersion(\"24\");\n+        fail(\"No error thrown for HTTP error\");\n+      } catch (FirebaseRemoteConfigException error) {\n+        checkExceptionFromHttpResponse(error, HTTP_STATUS_TO_ERROR_CODE.get(code), null,\n+                \"Unexpected HTTP response with status: \" + code + \"\\nnot json\", HttpMethods.GET);\n+      }\n+      checkGetRequestHeader(interceptor.getLastRequest(), \"?versionNumber=24\");\n+    }\n+  }\n+\n+  @Test\n+  public void testGetTemplateAtVersionErrorWithDetails() {\n+    for (int code : HTTP_STATUS_CODES) {\n+      response.setStatusCode(code).setContent(\n+              \"{\\\"error\\\": {\\\"status\\\": \\\"INVALID_ARGUMENT\\\", \\\"message\\\": \\\"test error\\\"}}\");\n+\n+      try {\n+        client.getTemplateAtVersion(\"24\");\n+        fail(\"No error thrown for HTTP error\");\n+      } catch (FirebaseRemoteConfigException error) {\n+        checkExceptionFromHttpResponse(error, ErrorCode.INVALID_ARGUMENT, null, \"test error\",\n+                HttpMethods.GET);\n+      }\n+      checkGetRequestHeader(interceptor.getLastRequest(), \"?versionNumber=24\");\n+    }\n+  }\n+\n+  @Test\n+  public void testGetTemplateAtVersionErrorWithRcError() {\n+    for (int code : HTTP_STATUS_CODES) {\n+      response.setStatusCode(code).setContent(\n+              \"{\\\"error\\\": {\\\"status\\\": \\\"INVALID_ARGUMENT\\\", \"\n+                      + \"\\\"message\\\": \\\"[INVALID_ARGUMENT]: test error\\\"}}\");\n+\n+      try {\n+        client.getTemplateAtVersion(\"24\");\n+        fail(\"No error thrown for HTTP error\");\n+      } catch (FirebaseRemoteConfigException error) {\n+        checkExceptionFromHttpResponse(error, ErrorCode.INVALID_ARGUMENT,\n+                RemoteConfigErrorCode.INVALID_ARGUMENT, \"[INVALID_ARGUMENT]: test error\",\n+                HttpMethods.GET);\n+      }\n+      checkGetRequestHeader(interceptor.getLastRequest(), \"?versionNumber=24\");\n+    }\n+  }\n+\n+  // Test publishTemplate\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testPublishTemplateWithNullTemplate() throws Exception {\n+    client.publishTemplate(null, false, false);\n+  }\n+\n+  @Test\n+  public void testPublishTemplateWithValidTemplate() throws Exception {\n+    response.addHeader(\"etag\", TEST_ETAG);\n+    response.setContent(MOCK_TEMPLATE_RESPONSE);\n+\n+    Template publishedTemplate = client.publishTemplate(EXPECTED_TEMPLATE, false, false);\n+\n+    assertEquals(TEST_ETAG, publishedTemplate.getETag());\n+    assertEquals(EXPECTED_TEMPLATE, publishedTemplate);\n+    assertEquals(1605423446000L, publishedTemplate.getVersion().getUpdateTime());\n+    checkPutRequestHeader(interceptor.getLastRequest());\n+  }\n+\n+  @Test\n+  public void testPublishTemplateWithValidTemplateAndForceTrue() throws Exception {\n+    response.addHeader(\"etag\", TEST_ETAG);\n+    response.setContent(MOCK_TEMPLATE_RESPONSE);\n+\n+    Template publishedTemplate = client.publishTemplate(EXPECTED_TEMPLATE, false, true);\n+\n+    assertEquals(TEST_ETAG, publishedTemplate.getETag());\n+    assertEquals(EXPECTED_TEMPLATE, publishedTemplate);\n+    assertEquals(1605423446000L, publishedTemplate.getVersion().getUpdateTime());\n+    checkPutRequestHeader(interceptor.getLastRequest(), \"\", \"*\");\n+  }\n+\n+  @Test\n+  public void testPublishTemplateWithValidTemplateAndValidateOnlyTrue() throws Exception {\n+    response.addHeader(\"etag\", TEST_ETAG);\n+    response.setContent(MOCK_TEMPLATE_RESPONSE);\n+    Template expectedTemplate = new Template()\n+            .setETag(\"etag-123456789012-45\")\n+            .setParameters(EXPECTED_PARAMETERS)\n+            .setConditions(EXPECTED_CONDITIONS)\n+            .setParameterGroups(EXPECTED_PARAMETER_GROUPS)\n+            .setVersion(EXPECTED_VERSION);\n+\n+    Template validatedTemplate = client.publishTemplate(expectedTemplate, true, false);\n+\n+    // check if the etag matches the input template's etag and not the etag from the server response\n+    assertNotEquals(TEST_ETAG, validatedTemplate.getETag());\n+    assertEquals(\"etag-123456789012-45\", validatedTemplate.getETag());\n+    assertEquals(expectedTemplate, validatedTemplate);\n+    checkPutRequestHeader(interceptor.getLastRequest(), \"?validateOnly=true\",\n+            \"etag-123456789012-45\");\n+  }\n+\n+  @Test\n+  public void testPublishTemplateWithEmptyTemplateResponse() throws Exception {\n+    response.addHeader(\"etag\", TEST_ETAG);\n+    response.setContent(\"{}\");\n+\n+    Template template = client.publishTemplate(new Template().setETag(TEST_ETAG), false, false);\n+\n+    assertEquals(TEST_ETAG, template.getETag());\n+    assertEquals(0, template.getParameters().size());\n+    assertEquals(0, template.getConditions().size());\n+    assertEquals(0, template.getParameterGroups().size());\n+    assertNull(template.getVersion());\n+    checkPutRequestHeader(interceptor.getLastRequest());\n+  }\n+\n+  @Test(expected = IllegalStateException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c63daf2c52e5c3753edc9d9f25844920b755cf78"}, "originalPosition": 476}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "157f4ea0e1337b40d098439a7d5ca1ccdbd82872", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/157f4ea0e1337b40d098439a7d5ca1ccdbd82872", "committedDate": "2020-11-24T00:27:09Z", "message": "Clean up tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2OTUxNjU1", "url": "https://github.com/firebase/firebase-admin-java/pull/496#pullrequestreview-536951655", "createdAt": "2020-11-24T00:34:43Z", "commit": {"oid": "157f4ea0e1337b40d098439a7d5ca1ccdbd82872"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDozNDo0NFrOH4k15w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDozNDo0NFrOH4k15w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA4NTkyNw==", "bodyText": "This can probably live in the parent package as a package-protected class.", "url": "https://github.com/firebase/firebase-admin-java/pull/496#discussion_r529085927", "createdAt": "2020-11-24T00:34:44Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/internal/PublishOptions.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package com.google.firebase.remoteconfig.internal;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "157f4ea0e1337b40d098439a7d5ca1ccdbd82872"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81d89072d196a8744e8ac3c9ca1bf0532c7ed133", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/81d89072d196a8744e8ac3c9ca1bf0532c7ed133", "committedDate": "2020-11-24T00:41:02Z", "message": "Move PublishOptions to parent package"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2782, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}