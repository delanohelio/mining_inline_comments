{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNDU3NjY4", "number": 387, "title": "Make user operations tenant-aware.", "bodyText": "This pull request make user operations tenant-aware. I've added some integration tests to ensure that this is correct correctly. This is part of the initiative to adding multi-tenancy support (see issue #332).", "createdAt": "2020-04-07T19:27:48Z", "url": "https://github.com/firebase/firebase-admin-java/pull/387", "merged": true, "mergeCommit": {"oid": "fa7c8580ee17d6a49911a375b54e91a8be362ba0"}, "closed": true, "closedAt": "2020-04-11T02:25:10Z", "author": {"login": "micahstairs"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTcW8pgH2gAyNDAwNDU3NjY4OjAwMDA0MTI5MmMyOGY2MmU2NzM3MTAyNWIzY2YzNTAwMDZkNTAyZjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcWXqWAgFqTM5MTY2NDM1Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "000041292c28f62e67371025b3cf350006d502f8", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/000041292c28f62e67371025b3cf350006d502f8", "committedDate": "2020-04-01T18:53:03Z", "message": "Add tenantId() getters."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91a051ca072320c9bc0ddde5e023144af1c80110", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/91a051ca072320c9bc0ddde5e023144af1c80110", "committedDate": "2020-04-01T18:53:03Z", "message": "Add skeleton of TenantAwareFirebaseAuth."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a42ed8ea852d64eeb5b68afe124ff6fa49df8d2a", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/a42ed8ea852d64eeb5b68afe124ff6fa49df8d2a", "committedDate": "2020-04-01T19:48:26Z", "message": "Add (failing) integration tests for tenant-aware user operations."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fe54c26daf8c29fb0505912c8a460bfcaa8778e", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/3fe54c26daf8c29fb0505912c8a460bfcaa8778e", "committedDate": "2020-04-07T15:19:38Z", "message": "Use tenant-aware URLs when applicable."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6feaa2b4b1f5198ec3f2d682325d4a558441975c", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/6feaa2b4b1f5198ec3f2d682325d4a558441975c", "committedDate": "2020-04-07T19:24:53Z", "message": "Fix integration test and add a TODO."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDMwMzY0", "url": "https://github.com/firebase/firebase-admin-java/pull/387#pullrequestreview-389430364", "createdAt": "2020-04-07T19:36:47Z", "commit": {"oid": "6feaa2b4b1f5198ec3f2d682325d4a558441975c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTozNjo0N1rOGCTF8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTo0Njo1M1rOGCTayQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2MzE1NQ==", "bodyText": "For readability, I'd suggest defining another constructor for this class:\nFirebaseUserManager(@NonNull FirebaseApp app) {\n  this(app, null);\n}\n\nYou can call it from FirebaseAuth.", "url": "https://github.com/firebase/firebase-admin-java/pull/387#discussion_r405063155", "createdAt": "2020-04-07T19:36:47Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -115,15 +115,18 @@\n    * Creates a new FirebaseUserManager instance.\n    *\n    * @param app A non-null {@link FirebaseApp}.\n+   * @param tenantId The associated tenant ID if the user operations should be tenant-aware,\n+   *     otherwise {@code null}\n    */\n-  FirebaseUserManager(@NonNull FirebaseApp app) {\n+  FirebaseUserManager(@NonNull FirebaseApp app, @Nullable String tenantId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6feaa2b4b1f5198ec3f2d682325d4a558441975c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NDAwMQ==", "bodyText": "I feel like a simple if-else will explain the logic here a bit better:\nif (Strings.isNullOrEmpty(tenantId) {\n  this.userMgtBaseUrl = ...\n} else {\n  this.userMgtBaseUrl = ...\n}\n\nThen in getTenantUrlSuffix() make tenantId non-null.", "url": "https://github.com/firebase/firebase-admin-java/pull/387#discussion_r405064001", "createdAt": "2020-04-07T19:38:31Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -115,15 +115,18 @@\n    * Creates a new FirebaseUserManager instance.\n    *\n    * @param app A non-null {@link FirebaseApp}.\n+   * @param tenantId The associated tenant ID if the user operations should be tenant-aware,\n+   *     otherwise {@code null}\n    */\n-  FirebaseUserManager(@NonNull FirebaseApp app) {\n+  FirebaseUserManager(@NonNull FirebaseApp app, @Nullable String tenantId) {\n     checkNotNull(app, \"FirebaseApp must not be null\");\n     String projectId = ImplFirebaseTrampolines.getProjectId(app);\n     checkArgument(!Strings.isNullOrEmpty(projectId),\n         \"Project ID is required to access the auth service. Use a service account credential or \"\n             + \"set the project ID explicitly via FirebaseOptions. Alternatively you can also \"\n             + \"set the project ID via the GOOGLE_CLOUD_PROJECT environment variable.\");\n-    this.userMgtBaseUrl = String.format(ID_TOOLKIT_URL, \"v1\", projectId);\n+    this.userMgtBaseUrl =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6feaa2b4b1f5198ec3f2d682325d4a558441975c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NDMxMw==", "bodyText": "checkArgument(!Strings.isNullOrEmpty(tenantId));", "url": "https://github.com/firebase/firebase-admin-java/pull/387#discussion_r405064313", "createdAt": "2020-04-07T19:39:01Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -312,6 +315,10 @@ String getEmailActionLink(EmailLinkType type, String email,\n     throw new FirebaseAuthException(INTERNAL_ERROR, \"Failed to create email action link\");\n   }\n \n+  private static String getTenantUrlSuffix(@Nullable String tenantId) {\n+    return tenantId == null ? \"\" : \"/tenants/\" + tenantId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6feaa2b4b1f5198ec3f2d682325d4a558441975c"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NTQzOA==", "bodyText": "Can we shift the FirebaseAuth.Builder into this class, and reuse it in both child classes? A constructor with this many args is a little strange.", "url": "https://github.com/firebase/firebase-admin-java/pull/387#discussion_r405065438", "createdAt": "2020-04-07T19:41:02Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -63,17 +63,13 @@\n       final FirebaseApp firebaseApp,\n       Supplier<FirebaseTokenFactory> tokenFactory,\n       Supplier<? extends FirebaseTokenVerifier> idTokenVerifier,\n-      Supplier<? extends FirebaseTokenVerifier> cookieVerifier) {\n+      Supplier<? extends FirebaseTokenVerifier> cookieVerifier,\n+      Supplier<FirebaseUserManager> userManager) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6feaa2b4b1f5198ec3f2d682325d4a558441975c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NTg0NA==", "bodyText": "check not null or empty", "url": "https://github.com/firebase/firebase-admin-java/pull/387#discussion_r405065844", "createdAt": "2020-04-07T19:41:51Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/TenantAwareFirebaseAuth.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import com.google.api.client.util.Clock;\n+import com.google.common.base.Supplier;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.auth.internal.FirebaseTokenFactory;\n+\n+/**\n+ * The tenant-aware Firebase client.\n+ *\n+ * <p>This can be used to perform a variety of authentication-related operations, scoped to a\n+ * particular tenant.\n+ */\n+public class TenantAwareFirebaseAuth extends AbstractFirebaseAuth {\n+\n+  private final String tenantId;\n+\n+  TenantAwareFirebaseAuth(final FirebaseApp firebaseApp, final String tenantId) {\n+    // TODO(micahstairs): Incorporate tenant ID into token generation as well as ID token and\n+    // session cookie verification.\n+    super(\n+        firebaseApp,\n+        new Supplier<FirebaseTokenFactory>() {\n+          @Override\n+          public FirebaseTokenFactory get() {\n+            return FirebaseTokenUtils.createTokenFactory(firebaseApp, Clock.SYSTEM);\n+          }\n+        },\n+        new Supplier<FirebaseTokenVerifier>() {\n+          @Override\n+          public FirebaseTokenVerifier get() {\n+            return FirebaseTokenUtils.createIdTokenVerifier(firebaseApp, Clock.SYSTEM);\n+          }\n+        },\n+        new Supplier<FirebaseTokenVerifier>() {\n+          @Override\n+          public FirebaseTokenVerifier get() {\n+            return FirebaseTokenUtils.createSessionCookieVerifier(firebaseApp, Clock.SYSTEM);\n+          }\n+        },\n+        new Supplier<FirebaseUserManager>() {\n+          @Override\n+          public FirebaseUserManager get() {\n+            return new FirebaseUserManager(firebaseApp, tenantId);\n+          }\n+        });\n+    this.tenantId = tenantId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6feaa2b4b1f5198ec3f2d682325d4a558441975c"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NjYxNg==", "bodyText": "Also delete the tenant at the end of the test", "url": "https://github.com/firebase/firebase-admin-java/pull/387#discussion_r405066616", "createdAt": "2020-04-07T19:43:23Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/auth/FirebaseAuthIT.java", "diffHunk": "@@ -320,6 +319,203 @@ public void onSuccess(ListUsersPage result) {\n     }\n   }\n \n+  @Test\n+  public void testTenantAwareUserLifecycle() throws Exception {\n+    // Create tenant to use.\n+    TenantManager tenantManager = auth.getTenantManager();\n+    Tenant.CreateRequest tenantCreateRequest =\n+        new Tenant.CreateRequest().setDisplayName(\"DisplayName\");\n+    final String tenantId = tenantManager.createTenant(tenantCreateRequest).getTenantId();\n+\n+    TenantAwareFirebaseAuth tenantAwareAuth = auth.getTenantManager().getAuthForTenant(tenantId);\n+\n+    // Create user\n+    UserRecord userRecord = tenantAwareAuth.createUserAsync(new UserRecord.CreateRequest()).get();\n+    String uid = userRecord.getUid();\n+\n+    // Get user\n+    userRecord = tenantAwareAuth.getUserAsync(userRecord.getUid()).get();\n+    assertEquals(uid, userRecord.getUid());\n+    assertEquals(tenantId, userRecord.getTenantId());\n+    assertNull(userRecord.getDisplayName());\n+    assertNull(userRecord.getEmail());\n+    assertNull(userRecord.getPhoneNumber());\n+    assertNull(userRecord.getPhotoUrl());\n+    assertFalse(userRecord.isEmailVerified());\n+    assertFalse(userRecord.isDisabled());\n+    assertTrue(userRecord.getUserMetadata().getCreationTimestamp() > 0);\n+    assertEquals(0, userRecord.getUserMetadata().getLastSignInTimestamp());\n+    assertEquals(0, userRecord.getProviderData().length);\n+    assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+    // Update user\n+    RandomUser randomUser = RandomUser.create();\n+    String phone = randomPhoneNumber();\n+    UserRecord.UpdateRequest request = userRecord.updateRequest()\n+        .setDisplayName(\"Updated Name\")\n+        .setEmail(randomUser.email)\n+        .setPhoneNumber(phone)\n+        .setPhotoUrl(\"https://example.com/photo.png\")\n+        .setEmailVerified(true)\n+        .setPassword(\"secret\");\n+    userRecord = tenantAwareAuth.updateUserAsync(request).get();\n+    assertEquals(uid, userRecord.getUid());\n+    assertEquals(tenantId, userRecord.getTenantId());\n+    assertEquals(\"Updated Name\", userRecord.getDisplayName());\n+    assertEquals(randomUser.email, userRecord.getEmail());\n+    assertEquals(phone, userRecord.getPhoneNumber());\n+    assertEquals(\"https://example.com/photo.png\", userRecord.getPhotoUrl());\n+    assertTrue(userRecord.isEmailVerified());\n+    assertFalse(userRecord.isDisabled());\n+    assertEquals(2, userRecord.getProviderData().length);\n+    assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+    // Get user by email\n+    userRecord = tenantAwareAuth.getUserByEmailAsync(userRecord.getEmail()).get();\n+    assertEquals(uid, userRecord.getUid());\n+\n+    // Disable user and remove properties\n+    request = userRecord.updateRequest()\n+        .setPhotoUrl(null)\n+        .setDisplayName(null)\n+        .setPhoneNumber(null)\n+        .setDisabled(true);\n+    userRecord = tenantAwareAuth.updateUserAsync(request).get();\n+    assertEquals(uid, userRecord.getUid());\n+    assertEquals(tenantId, userRecord.getTenantId());\n+    assertNull(userRecord.getDisplayName());\n+    assertEquals(randomUser.email, userRecord.getEmail());\n+    assertNull(userRecord.getPhoneNumber());\n+    assertNull(userRecord.getPhotoUrl());\n+    assertTrue(userRecord.isEmailVerified());\n+    assertTrue(userRecord.isDisabled());\n+    assertEquals(1, userRecord.getProviderData().length);\n+    assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+    // Delete user\n+    tenantAwareAuth.deleteUserAsync(userRecord.getUid()).get();\n+    assertUserDoesNotExist(tenantAwareAuth, userRecord.getUid());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6feaa2b4b1f5198ec3f2d682325d4a558441975c"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2Njc3MQ==", "bodyText": "And delete the tenant", "url": "https://github.com/firebase/firebase-admin-java/pull/387#discussion_r405066771", "createdAt": "2020-04-07T19:43:39Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/auth/FirebaseAuthIT.java", "diffHunk": "@@ -320,6 +319,203 @@ public void onSuccess(ListUsersPage result) {\n     }\n   }\n \n+  @Test\n+  public void testTenantAwareUserLifecycle() throws Exception {\n+    // Create tenant to use.\n+    TenantManager tenantManager = auth.getTenantManager();\n+    Tenant.CreateRequest tenantCreateRequest =\n+        new Tenant.CreateRequest().setDisplayName(\"DisplayName\");\n+    final String tenantId = tenantManager.createTenant(tenantCreateRequest).getTenantId();\n+\n+    TenantAwareFirebaseAuth tenantAwareAuth = auth.getTenantManager().getAuthForTenant(tenantId);\n+\n+    // Create user\n+    UserRecord userRecord = tenantAwareAuth.createUserAsync(new UserRecord.CreateRequest()).get();\n+    String uid = userRecord.getUid();\n+\n+    // Get user\n+    userRecord = tenantAwareAuth.getUserAsync(userRecord.getUid()).get();\n+    assertEquals(uid, userRecord.getUid());\n+    assertEquals(tenantId, userRecord.getTenantId());\n+    assertNull(userRecord.getDisplayName());\n+    assertNull(userRecord.getEmail());\n+    assertNull(userRecord.getPhoneNumber());\n+    assertNull(userRecord.getPhotoUrl());\n+    assertFalse(userRecord.isEmailVerified());\n+    assertFalse(userRecord.isDisabled());\n+    assertTrue(userRecord.getUserMetadata().getCreationTimestamp() > 0);\n+    assertEquals(0, userRecord.getUserMetadata().getLastSignInTimestamp());\n+    assertEquals(0, userRecord.getProviderData().length);\n+    assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+    // Update user\n+    RandomUser randomUser = RandomUser.create();\n+    String phone = randomPhoneNumber();\n+    UserRecord.UpdateRequest request = userRecord.updateRequest()\n+        .setDisplayName(\"Updated Name\")\n+        .setEmail(randomUser.email)\n+        .setPhoneNumber(phone)\n+        .setPhotoUrl(\"https://example.com/photo.png\")\n+        .setEmailVerified(true)\n+        .setPassword(\"secret\");\n+    userRecord = tenantAwareAuth.updateUserAsync(request).get();\n+    assertEquals(uid, userRecord.getUid());\n+    assertEquals(tenantId, userRecord.getTenantId());\n+    assertEquals(\"Updated Name\", userRecord.getDisplayName());\n+    assertEquals(randomUser.email, userRecord.getEmail());\n+    assertEquals(phone, userRecord.getPhoneNumber());\n+    assertEquals(\"https://example.com/photo.png\", userRecord.getPhotoUrl());\n+    assertTrue(userRecord.isEmailVerified());\n+    assertFalse(userRecord.isDisabled());\n+    assertEquals(2, userRecord.getProviderData().length);\n+    assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+    // Get user by email\n+    userRecord = tenantAwareAuth.getUserByEmailAsync(userRecord.getEmail()).get();\n+    assertEquals(uid, userRecord.getUid());\n+\n+    // Disable user and remove properties\n+    request = userRecord.updateRequest()\n+        .setPhotoUrl(null)\n+        .setDisplayName(null)\n+        .setPhoneNumber(null)\n+        .setDisabled(true);\n+    userRecord = tenantAwareAuth.updateUserAsync(request).get();\n+    assertEquals(uid, userRecord.getUid());\n+    assertEquals(tenantId, userRecord.getTenantId());\n+    assertNull(userRecord.getDisplayName());\n+    assertEquals(randomUser.email, userRecord.getEmail());\n+    assertNull(userRecord.getPhoneNumber());\n+    assertNull(userRecord.getPhotoUrl());\n+    assertTrue(userRecord.isEmailVerified());\n+    assertTrue(userRecord.isDisabled());\n+    assertEquals(1, userRecord.getProviderData().length);\n+    assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+    // Delete user\n+    tenantAwareAuth.deleteUserAsync(userRecord.getUid()).get();\n+    assertUserDoesNotExist(tenantAwareAuth, userRecord.getUid());\n+  }\n+\n+  @Test\n+  public void testTenantAwareListUsers() throws Exception {\n+    // Create tenant to use.\n+    TenantManager tenantManager = auth.getTenantManager();\n+    Tenant.CreateRequest tenantCreateRequest =\n+        new Tenant.CreateRequest().setDisplayName(\"DisplayName\");\n+    final String tenantId = tenantManager.createTenant(tenantCreateRequest).getTenantId();\n+\n+    TenantAwareFirebaseAuth tenantAwareAuth = tenantManager.getAuthForTenant(tenantId);\n+    final List<String> uids = new ArrayList<>();\n+\n+    try {\n+      for (int i = 0; i < 3; i++) {\n+        UserRecord.CreateRequest createRequest =\n+            new UserRecord.CreateRequest().setPassword(\"password\");\n+        uids.add(tenantAwareAuth.createUserAsync(createRequest).get().getUid());\n+      }\n+\n+      // Test list by batches\n+      final AtomicInteger collected = new AtomicInteger(0);\n+      ListUsersPage page = tenantAwareAuth.listUsersAsync(null).get();\n+      while (page != null) {\n+        for (ExportedUserRecord user : page.getValues()) {\n+          if (uids.contains(user.getUid())) {\n+            collected.incrementAndGet();\n+            assertNotNull(\"Missing passwordHash field. A common cause would be \"\n+                + \"forgetting to add the \\\"Firebase Authentication Admin\\\" permission. See \"\n+                + \"instructions in CONTRIBUTING.md\", user.getPasswordHash());\n+            assertNotNull(user.getPasswordSalt());\n+            assertEquals(tenantId, user.getTenantId());\n+          }\n+        }\n+        page = page.getNextPage();\n+      }\n+      assertEquals(uids.size(), collected.get());\n+\n+      // Test iterate all\n+      collected.set(0);\n+      page = tenantAwareAuth.listUsersAsync(null).get();\n+      for (ExportedUserRecord user : page.iterateAll()) {\n+        if (uids.contains(user.getUid())) {\n+          collected.incrementAndGet();\n+          assertNotNull(user.getPasswordHash());\n+          assertNotNull(user.getPasswordSalt());\n+          assertEquals(tenantId, user.getTenantId());\n+        }\n+      }\n+      assertEquals(uids.size(), collected.get());\n+\n+      // Test iterate async\n+      collected.set(0);\n+      final Semaphore semaphore = new Semaphore(0);\n+      final AtomicReference<Throwable> error = new AtomicReference<>();\n+      ApiFuture<ListUsersPage> pageFuture = tenantAwareAuth.listUsersAsync(null);\n+      ApiFutures.addCallback(pageFuture, new ApiFutureCallback<ListUsersPage>() {\n+        @Override\n+        public void onFailure(Throwable t) {\n+          error.set(t);\n+          semaphore.release();\n+        }\n+\n+        @Override\n+        public void onSuccess(ListUsersPage result) {\n+          for (ExportedUserRecord user : result.iterateAll()) {\n+            if (uids.contains(user.getUid())) {\n+              collected.incrementAndGet();\n+              assertNotNull(user.getPasswordHash());\n+              assertNotNull(user.getPasswordSalt());\n+              assertEquals(tenantId, user.getTenantId());\n+            }\n+          }\n+          semaphore.release();\n+        }\n+      }, MoreExecutors.directExecutor());\n+      semaphore.acquire();\n+      assertEquals(uids.size(), collected.get());\n+      assertNull(error.get());\n+    } finally {\n+      for (String uid : uids) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6feaa2b4b1f5198ec3f2d682325d4a558441975c"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2ODQ4OQ==", "bodyText": "I believe this class also needs to override verifyIdToken(). But feel free to do that in a separate PR.", "url": "https://github.com/firebase/firebase-admin-java/pull/387#discussion_r405068489", "createdAt": "2020-04-07T19:46:53Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/TenantAwareFirebaseAuth.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import com.google.api.client.util.Clock;\n+import com.google.common.base.Supplier;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.auth.internal.FirebaseTokenFactory;\n+\n+/**\n+ * The tenant-aware Firebase client.\n+ *\n+ * <p>This can be used to perform a variety of authentication-related operations, scoped to a\n+ * particular tenant.\n+ */\n+public class TenantAwareFirebaseAuth extends AbstractFirebaseAuth {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6feaa2b4b1f5198ec3f2d682325d4a558441975c"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cf56995afd47f768fbeaf79c966869dc26b68eb", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/0cf56995afd47f768fbeaf79c966869dc26b68eb", "committedDate": "2020-04-09T18:19:09Z", "message": "Address pull request feedback."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMDYyMDUw", "url": "https://github.com/firebase/firebase-admin-java/pull/387#pullrequestreview-391062050", "createdAt": "2020-04-09T19:13:04Z", "commit": {"oid": "0cf56995afd47f768fbeaf79c966869dc26b68eb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMDYyMzQz", "url": "https://github.com/firebase/firebase-admin-java/pull/387#pullrequestreview-391062343", "createdAt": "2020-04-09T19:13:32Z", "commit": {"oid": "0cf56995afd47f768fbeaf79c966869dc26b68eb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "373df42a7bad4a91bf61f015671ef2be9daa17a9", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/373df42a7bad4a91bf61f015671ef2be9daa17a9", "committedDate": "2020-04-09T19:28:53Z", "message": "Merge branch 'tenant-mgt' into micahstairs-tenant-aware"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "442c7191bb2f37ccd8ecee986cb1cbac70e2ec2a", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/442c7191bb2f37ccd8ecee986cb1cbac70e2ec2a", "committedDate": "2020-04-09T19:50:53Z", "message": "Make TenantAwareFirebaseAuth implement doDestroy()."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMTA1MTU5", "url": "https://github.com/firebase/firebase-admin-java/pull/387#pullrequestreview-391105159", "createdAt": "2020-04-09T20:22:01Z", "commit": {"oid": "442c7191bb2f37ccd8ecee986cb1cbac70e2ec2a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDoyMjowMVrOGDoDcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDozMzoyNVrOGDoZmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1NTE1Mw==", "bodyText": "Strings.isNullOrEmpty for good measure", "url": "https://github.com/firebase/firebase-admin-java/pull/387#discussion_r406455153", "createdAt": "2020-04-09T20:22:01Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -115,21 +115,39 @@\n    * Creates a new FirebaseUserManager instance.\n    *\n    * @param app A non-null {@link FirebaseApp}.\n+   * @param tenantId The associated tenant ID if the user operations should be tenant-aware,\n+   *     otherwise {@code null}\n    */\n-  FirebaseUserManager(@NonNull FirebaseApp app) {\n+  FirebaseUserManager(@NonNull FirebaseApp app, @Nullable String tenantId) {\n     checkNotNull(app, \"FirebaseApp must not be null\");\n     String projectId = ImplFirebaseTrampolines.getProjectId(app);\n     checkArgument(!Strings.isNullOrEmpty(projectId),\n         \"Project ID is required to access the auth service. Use a service account credential or \"\n             + \"set the project ID explicitly via FirebaseOptions. Alternatively you can also \"\n             + \"set the project ID via the GOOGLE_CLOUD_PROJECT environment variable.\");\n-    this.userMgtBaseUrl = String.format(ID_TOOLKIT_URL, \"v1\", projectId);\n+    if (tenantId == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "442c7191bb2f37ccd8ecee986cb1cbac70e2ec2a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ2MDgyNg==", "bodyText": "Looks like this is still missing a delete call.", "url": "https://github.com/firebase/firebase-admin-java/pull/387#discussion_r406460826", "createdAt": "2020-04-09T20:33:25Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/auth/FirebaseAuthIT.java", "diffHunk": "@@ -320,6 +319,208 @@ public void onSuccess(ListUsersPage result) {\n     }\n   }\n \n+  @Test\n+  public void testTenantAwareUserLifecycle() throws Exception {\n+    // Create tenant to use.\n+    TenantManager tenantManager = auth.getTenantManager();\n+    Tenant.CreateRequest tenantCreateRequest =\n+        new Tenant.CreateRequest().setDisplayName(\"DisplayName\");\n+    final String tenantId = tenantManager.createTenant(tenantCreateRequest).getTenantId();\n+\n+    TenantAwareFirebaseAuth tenantAwareAuth = auth.getTenantManager().getAuthForTenant(tenantId);\n+\n+    // Create user\n+    UserRecord userRecord = tenantAwareAuth.createUserAsync(new UserRecord.CreateRequest()).get();\n+    String uid = userRecord.getUid();\n+\n+    // Get user\n+    userRecord = tenantAwareAuth.getUserAsync(userRecord.getUid()).get();\n+    assertEquals(uid, userRecord.getUid());\n+    assertEquals(tenantId, userRecord.getTenantId());\n+    assertNull(userRecord.getDisplayName());\n+    assertNull(userRecord.getEmail());\n+    assertNull(userRecord.getPhoneNumber());\n+    assertNull(userRecord.getPhotoUrl());\n+    assertFalse(userRecord.isEmailVerified());\n+    assertFalse(userRecord.isDisabled());\n+    assertTrue(userRecord.getUserMetadata().getCreationTimestamp() > 0);\n+    assertEquals(0, userRecord.getUserMetadata().getLastSignInTimestamp());\n+    assertEquals(0, userRecord.getProviderData().length);\n+    assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+    // Update user\n+    RandomUser randomUser = RandomUser.create();\n+    String phone = randomPhoneNumber();\n+    UserRecord.UpdateRequest request = userRecord.updateRequest()\n+        .setDisplayName(\"Updated Name\")\n+        .setEmail(randomUser.email)\n+        .setPhoneNumber(phone)\n+        .setPhotoUrl(\"https://example.com/photo.png\")\n+        .setEmailVerified(true)\n+        .setPassword(\"secret\");\n+    userRecord = tenantAwareAuth.updateUserAsync(request).get();\n+    assertEquals(uid, userRecord.getUid());\n+    assertEquals(tenantId, userRecord.getTenantId());\n+    assertEquals(\"Updated Name\", userRecord.getDisplayName());\n+    assertEquals(randomUser.email, userRecord.getEmail());\n+    assertEquals(phone, userRecord.getPhoneNumber());\n+    assertEquals(\"https://example.com/photo.png\", userRecord.getPhotoUrl());\n+    assertTrue(userRecord.isEmailVerified());\n+    assertFalse(userRecord.isDisabled());\n+    assertEquals(2, userRecord.getProviderData().length);\n+    assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+    // Get user by email\n+    userRecord = tenantAwareAuth.getUserByEmailAsync(userRecord.getEmail()).get();\n+    assertEquals(uid, userRecord.getUid());\n+\n+    // Disable user and remove properties\n+    request = userRecord.updateRequest()\n+        .setPhotoUrl(null)\n+        .setDisplayName(null)\n+        .setPhoneNumber(null)\n+        .setDisabled(true);\n+    userRecord = tenantAwareAuth.updateUserAsync(request).get();\n+    assertEquals(uid, userRecord.getUid());\n+    assertEquals(tenantId, userRecord.getTenantId());\n+    assertNull(userRecord.getDisplayName());\n+    assertEquals(randomUser.email, userRecord.getEmail());\n+    assertNull(userRecord.getPhoneNumber());\n+    assertNull(userRecord.getPhotoUrl());\n+    assertTrue(userRecord.isEmailVerified());\n+    assertTrue(userRecord.isDisabled());\n+    assertEquals(1, userRecord.getProviderData().length);\n+    assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+    // Delete user\n+    tenantAwareAuth.deleteUserAsync(userRecord.getUid()).get();\n+    assertUserDoesNotExist(tenantAwareAuth, userRecord.getUid());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "442c7191bb2f37ccd8ecee986cb1cbac70e2ec2a"}, "originalPosition": 143}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5349201137c2eb5c7abf089206b985bd79574a9b", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/5349201137c2eb5c7abf089206b985bd79574a9b", "committedDate": "2020-04-10T12:06:57Z", "message": "Address nits"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNTk3NjIz", "url": "https://github.com/firebase/firebase-admin-java/pull/387#pullrequestreview-391597623", "createdAt": "2020-04-10T18:38:55Z", "commit": {"oid": "5349201137c2eb5c7abf089206b985bd79574a9b"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODozODo1NVrOGECh5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODozODo1NVrOGECh5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg4ODkzNQ==", "bodyText": "What I meant was if (String.isNullOrEmpty(tenantId)). But this is ok too.", "url": "https://github.com/firebase/firebase-admin-java/pull/387#discussion_r406888935", "createdAt": "2020-04-10T18:38:55Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -115,21 +115,39 @@\n    * Creates a new FirebaseUserManager instance.\n    *\n    * @param app A non-null {@link FirebaseApp}.\n+   * @param tenantId The associated tenant ID if the user operations should be tenant-aware,\n+   *     otherwise {@code null}\n    */\n-  FirebaseUserManager(@NonNull FirebaseApp app) {\n+  FirebaseUserManager(@NonNull FirebaseApp app, @Nullable String tenantId) {\n     checkNotNull(app, \"FirebaseApp must not be null\");\n     String projectId = ImplFirebaseTrampolines.getProjectId(app);\n     checkArgument(!Strings.isNullOrEmpty(projectId),\n         \"Project ID is required to access the auth service. Use a service account credential or \"\n             + \"set the project ID explicitly via FirebaseOptions. Alternatively you can also \"\n             + \"set the project ID via the GOOGLE_CLOUD_PROJECT environment variable.\");\n-    this.userMgtBaseUrl = String.format(ID_TOOLKIT_URL, \"v1\", projectId);\n+    if (tenantId == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1NTE1Mw=="}, "originalCommit": {"oid": "442c7191bb2f37ccd8ecee986cb1cbac70e2ec2a"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNjY0MzU3", "url": "https://github.com/firebase/firebase-admin-java/pull/387#pullrequestreview-391664357", "createdAt": "2020-04-10T21:06:29Z", "commit": {"oid": "5349201137c2eb5c7abf089206b985bd79574a9b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2840, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}