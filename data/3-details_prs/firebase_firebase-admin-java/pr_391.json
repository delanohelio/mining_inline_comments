{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0NzQzODY5", "number": 391, "title": "Add tenant-aware token generation and verification.", "bodyText": "This pull request incorporates the tenant ID into the token generation and validation when using a tenant-aware client. This is part of the initiative to adding multi-tenancy support (see issue #332).", "createdAt": "2020-04-16T21:19:39Z", "url": "https://github.com/firebase/firebase-admin-java/pull/391", "merged": true, "mergeCommit": {"oid": "b97bb8a7b3f42b3361542bb7f0b0684535b94ec8"}, "closed": true, "closedAt": "2020-04-22T21:18:28Z", "author": {"login": "micahstairs"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYRhLAgH2gAyNDA0NzQzODY5OjQ5MjAyNzU0ZWM1Mjg1ZjE4OTAyMWZlYWY1YTZlZWIzMDcxNWIyYzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaO5sWAH2gAyNDA0NzQzODY5OmRiZWZjOGMyNzVmYTczNTk4OGJmNjM0OTBhMGVkYTNjZmM5NDM2MzA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "49202754ec5285f189021feaf5a6eeb30715b2c7", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/49202754ec5285f189021feaf5a6eeb30715b2c7", "committedDate": "2020-04-16T19:04:53Z", "message": "Work on token generation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d48d0c2250afa5d24f4c4b9f4750e5879ba17cd8", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/d48d0c2250afa5d24f4c4b9f4750e5879ba17cd8", "committedDate": "2020-04-16T21:13:43Z", "message": "Fix token generation and add verification."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10ea21551fb5e5b420f809d746c85370d552ce3e", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/10ea21551fb5e5b420f809d746c85370d552ce3e", "committedDate": "2020-04-16T21:18:56Z", "message": "Rename test for clarity."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NTQ3NjQy", "url": "https://github.com/firebase/firebase-admin-java/pull/391#pullrequestreview-397547642", "createdAt": "2020-04-21T18:02:32Z", "commit": {"oid": "10ea21551fb5e5b420f809d746c85370d552ce3e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODowMjozMlrOGJRYVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODoxMDo1NlrOGJRurw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM3NTEyNg==", "bodyText": "Session cookies do not support tenants at the moment. We can remove this.", "url": "https://github.com/firebase/firebase-admin-java/pull/391#discussion_r412375126", "createdAt": "2020-04-21T18:02:32Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/FirebaseTokenUtils.java", "diffHunk": "@@ -82,10 +94,16 @@ static FirebaseTokenVerifierImpl createIdTokenVerifier(FirebaseApp app, Clock cl\n         .setJsonFactory(app.getOptions().getJsonFactory())\n         .setPublicKeysManager(publicKeysManager)\n         .setIdTokenVerifier(idTokenVerifier)\n+        .setTenantId(tenantId)\n         .build();\n   }\n \n   static FirebaseTokenVerifierImpl createSessionCookieVerifier(FirebaseApp app, Clock clock) {\n+    return createSessionCookieVerifier(app, clock, null);\n+  }\n+\n+  static FirebaseTokenVerifierImpl createSessionCookieVerifier(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10ea21551fb5e5b420f809d746c85370d552ce3e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM3NjQxMQ==", "bodyText": "Following might be a bit more readable:\nif (!Strings.isNullOrEmpty(this.tenantId)) {\n  if (!this.tenantId.equals(tokenTenantId) {\n    // ...\n  }\n}", "url": "https://github.com/firebase/firebase-admin-java/pull/391#discussion_r412376411", "createdAt": "2020-04-21T18:04:26Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/FirebaseTokenVerifierImpl.java", "diffHunk": "@@ -278,6 +283,18 @@ private boolean containsLegacyUidField(IdToken.Payload payload) {\n     return false;\n   }\n \n+  private void checkTenantId(final FirebaseToken firebaseToken) throws FirebaseAuthException {\n+    String tokenTenantId = firebaseToken.getTenantId();\n+    if (!Strings.nullToEmpty(tokenTenantId).equals(Strings.nullToEmpty(tenantId))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10ea21551fb5e5b420f809d746c85370d552ce3e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM3ODU2Mg==", "bodyText": "Might want to push this into a finally block", "url": "https://github.com/firebase/firebase-admin-java/pull/391#discussion_r412378562", "createdAt": "2020-04-21T18:07:27Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/auth/FirebaseAuthIT.java", "diffHunk": "@@ -705,6 +706,58 @@ public void testCustomTokenWithIAM() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testTenantAwareCustomToken() throws Exception {\n+    // Create tenant to use.\n+    TenantManager tenantManager = auth.getTenantManager();\n+    Tenant.CreateRequest tenantCreateRequest =\n+        new Tenant.CreateRequest().setDisplayName(\"DisplayName\");\n+    String tenantId = tenantManager.createTenant(tenantCreateRequest).getTenantId();\n+\n+    // Create and decode a token with a tenant-aware client.\n+    TenantAwareFirebaseAuth tenantAwareAuth = auth.getTenantManager().getAuthForTenant(tenantId);\n+    String customToken = tenantAwareAuth.createCustomTokenAsync(\"user1\").get();\n+    String idToken = signInWithCustomToken(customToken, tenantId);\n+    FirebaseToken decoded = tenantAwareAuth.verifyIdTokenAsync(idToken).get();\n+    assertEquals(\"user1\", decoded.getUid());\n+    assertEquals(tenantId, decoded.getTenantId());\n+\n+    // Delete tenant.\n+    tenantManager.deleteTenantAsync(tenantId).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10ea21551fb5e5b420f809d746c85370d552ce3e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM3ODY2NA==", "bodyText": "Same here", "url": "https://github.com/firebase/firebase-admin-java/pull/391#discussion_r412378664", "createdAt": "2020-04-21T18:07:36Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/auth/FirebaseAuthIT.java", "diffHunk": "@@ -705,6 +706,58 @@ public void testCustomTokenWithIAM() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testTenantAwareCustomToken() throws Exception {\n+    // Create tenant to use.\n+    TenantManager tenantManager = auth.getTenantManager();\n+    Tenant.CreateRequest tenantCreateRequest =\n+        new Tenant.CreateRequest().setDisplayName(\"DisplayName\");\n+    String tenantId = tenantManager.createTenant(tenantCreateRequest).getTenantId();\n+\n+    // Create and decode a token with a tenant-aware client.\n+    TenantAwareFirebaseAuth tenantAwareAuth = auth.getTenantManager().getAuthForTenant(tenantId);\n+    String customToken = tenantAwareAuth.createCustomTokenAsync(\"user1\").get();\n+    String idToken = signInWithCustomToken(customToken, tenantId);\n+    FirebaseToken decoded = tenantAwareAuth.verifyIdTokenAsync(idToken).get();\n+    assertEquals(\"user1\", decoded.getUid());\n+    assertEquals(tenantId, decoded.getTenantId());\n+\n+    // Delete tenant.\n+    tenantManager.deleteTenantAsync(tenantId).get();\n+  }\n+\n+  @Test\n+  public void testVerifyTokenWithWrongTenantAwareClient() throws Exception {\n+    // Create tenants to use.\n+    TenantManager tenantManager = auth.getTenantManager();\n+    Tenant.CreateRequest tenantCreateRequest1 =\n+        new Tenant.CreateRequest().setDisplayName(\"DisplayName1\");\n+    String tenantId1 = tenantManager.createTenant(tenantCreateRequest1).getTenantId();\n+    Tenant.CreateRequest tenantCreateRequest2 =\n+        new Tenant.CreateRequest().setDisplayName(\"DisplayName2\");\n+    String tenantId2 = tenantManager.createTenant(tenantCreateRequest2).getTenantId();\n+\n+    // Create tenant-aware clients.\n+    TenantAwareFirebaseAuth tenantAwareAuth1 = auth.getTenantManager().getAuthForTenant(tenantId1);\n+    TenantAwareFirebaseAuth tenantAwareAuth2 = auth.getTenantManager().getAuthForTenant(tenantId2);\n+\n+    // Create a token with one client and decode with the other.\n+    String customToken = tenantAwareAuth1.createCustomTokenAsync(\"user1\").get();\n+    String idToken = signInWithCustomToken(customToken, tenantId1);\n+    try {\n+      tenantAwareAuth2.verifyIdTokenAsync(idToken).get();\n+      fail(\"No error thrown for verifying a token with the wrong tenant-aware client\");\n+    } catch (ExecutionException e) {\n+      assertTrue(e.getCause() instanceof FirebaseAuthException);\n+      assertEquals(FirebaseUserManager.TENANT_ID_MISMATCH,\n+          ((FirebaseAuthException) e.getCause()).getErrorCode());\n+    }\n+\n+    // Delete tenants.\n+    tenantManager.deleteTenantAsync(tenantId1).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10ea21551fb5e5b420f809d746c85370d552ce3e"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM4MDg0Nw==", "bodyText": "Can we also have some unit tests in FirebaseTokenVerifierImplTest.", "url": "https://github.com/firebase/firebase-admin-java/pull/391#discussion_r412380847", "createdAt": "2020-04-21T18:10:56Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/auth/internal/FirebaseTokenFactoryTest.java", "diffHunk": "@@ -18,6 +18,7 @@\n \n import static com.google.common.base.Preconditions.checkNotNull;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10ea21551fb5e5b420f809d746c85370d552ce3e"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d41e59c3244fa764c3cffcffc3a12507e5477dad", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/d41e59c3244fa764c3cffcffc3a12507e5477dad", "committedDate": "2020-04-22T13:57:36Z", "message": "Address pull request feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "646f98d29fb674a4d3cc74251edef7fd455e7216", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/646f98d29fb674a4d3cc74251edef7fd455e7216", "committedDate": "2020-04-22T20:18:41Z", "message": "Finish addressing feedback."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NTU4NTYy", "url": "https://github.com/firebase/firebase-admin-java/pull/391#pullrequestreview-398558562", "createdAt": "2020-04-22T20:25:19Z", "commit": {"oid": "646f98d29fb674a4d3cc74251edef7fd455e7216"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMDoyNToxOVrOGKKHZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMDozMjo0MVrOGKKYbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMwNDY3OA==", "bodyText": "Nit: nullToEmpty is not strictly needed here, since you call equals on this.tenantId which is never null. But I'll leave it to you decide.", "url": "https://github.com/firebase/firebase-admin-java/pull/391#discussion_r413304678", "createdAt": "2020-04-22T20:25:19Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/FirebaseTokenVerifierImpl.java", "diffHunk": "@@ -278,6 +283,18 @@ private boolean containsLegacyUidField(IdToken.Payload payload) {\n     return false;\n   }\n \n+  private void checkTenantId(final FirebaseToken firebaseToken) throws FirebaseAuthException {\n+    String tokenTenantId = Strings.nullToEmpty(firebaseToken.getTenantId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "646f98d29fb674a4d3cc74251edef7fd455e7216"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMwOTAzOQ==", "bodyText": "You can only create one tenant for this test. For the 2nd tenant use a fake tenant ID string. And to ensure proper clean up you will have to do something like this:\n// create test tenants\ntry {\n   // create token\n   try {\n     // verify token\n   }. catch {\n     // assert\n   }\n} finally {\n  // clean up tenants\n}\n\nYou can move the inner try-catch into a new helper method if this looks too ugly.", "url": "https://github.com/firebase/firebase-admin-java/pull/391#discussion_r413309039", "createdAt": "2020-04-22T20:32:41Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/auth/FirebaseAuthIT.java", "diffHunk": "@@ -705,6 +706,60 @@ public void testCustomTokenWithIAM() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testTenantAwareCustomToken() throws Exception {\n+    // Create tenant to use.\n+    TenantManager tenantManager = auth.getTenantManager();\n+    Tenant.CreateRequest tenantCreateRequest =\n+        new Tenant.CreateRequest().setDisplayName(\"DisplayName\");\n+    String tenantId = tenantManager.createTenant(tenantCreateRequest).getTenantId();\n+\n+    try {\n+      // Create and decode a token with a tenant-aware client.\n+      TenantAwareFirebaseAuth tenantAwareAuth = auth.getTenantManager().getAuthForTenant(tenantId);\n+      String customToken = tenantAwareAuth.createCustomTokenAsync(\"user1\").get();\n+      String idToken = signInWithCustomToken(customToken, tenantId);\n+      FirebaseToken decoded = tenantAwareAuth.verifyIdTokenAsync(idToken).get();\n+      assertEquals(\"user1\", decoded.getUid());\n+      assertEquals(tenantId, decoded.getTenantId());\n+    } finally {\n+      // Delete tenant.\n+      tenantManager.deleteTenantAsync(tenantId).get();\n+    }\n+  }\n+\n+  @Test\n+  public void testVerifyTokenWithWrongTenantAwareClient() throws Exception {\n+    // Create tenants to use.\n+    TenantManager tenantManager = auth.getTenantManager();\n+    Tenant.CreateRequest tenantCreateRequest1 =\n+        new Tenant.CreateRequest().setDisplayName(\"DisplayName1\");\n+    String tenantId1 = tenantManager.createTenant(tenantCreateRequest1).getTenantId();\n+    Tenant.CreateRequest tenantCreateRequest2 =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "646f98d29fb674a4d3cc74251edef7fd455e7216"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbefc8c275fa735988bf63490a0eda3cfc943630", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/dbefc8c275fa735988bf63490a0eda3cfc943630", "committedDate": "2020-04-22T21:09:48Z", "message": "Restructure integration test to ensure that cleanup is done."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2845, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}