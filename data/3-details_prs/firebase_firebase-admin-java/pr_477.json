{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0MzE1Njk2", "number": 477, "title": "Add initial classes for Remote Config API", "bodyText": "Add FirebaseRemoteConfigClient interface and implementation\nAdd basic classes for error handing\nAdd unit tests for FirebaseRemoteConfigClientImpl\n\nNote: merging to remote-config branch.\nRelated issue: #446", "createdAt": "2020-09-10T20:49:42Z", "url": "https://github.com/firebase/firebase-admin-java/pull/477", "merged": true, "mergeCommit": {"oid": "88482db9588919e523bab94496ed19a08fa34140"}, "closed": true, "closedAt": "2020-09-15T20:51:17Z", "author": {"login": "lahirumaramba"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHnJq_ABqjM3NTMxMDEzNzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJLXpIABqjM3Njk1NTQwNjg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e8bd8d58a6cb7f7e38125490b7a738f2e29d8beb", "author": {"user": null}, "url": "https://github.com/firebase/firebase-admin-java/commit/e8bd8d58a6cb7f7e38125490b7a738f2e29d8beb", "committedDate": "2020-09-10T20:48:37Z", "message": "Add initial classes for Remote Config API\nAdd unit tests"}, "afterCommit": {"oid": "498018e9419959a96d8afba152608ba1e8f81f2f", "author": {"user": null}, "url": "https://github.com/firebase/firebase-admin-java/commit/498018e9419959a96d8afba152608ba1e8f81f2f", "committedDate": "2020-09-10T20:51:25Z", "message": "Add initial classes for Remote Config API\nAdd unit tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "498018e9419959a96d8afba152608ba1e8f81f2f", "author": {"user": null}, "url": "https://github.com/firebase/firebase-admin-java/commit/498018e9419959a96d8afba152608ba1e8f81f2f", "committedDate": "2020-09-10T20:51:25Z", "message": "Add initial classes for Remote Config API\nAdd unit tests"}, "afterCommit": {"oid": "74c21d37e5f93e763a784c79eceb86873793861c", "author": {"user": null}, "url": "https://github.com/firebase/firebase-admin-java/commit/74c21d37e5f93e763a784c79eceb86873793861c", "committedDate": "2020-09-10T20:53:34Z", "message": "Add initial classes for Remote Config API\nAdd unit tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "74c21d37e5f93e763a784c79eceb86873793861c", "author": {"user": null}, "url": "https://github.com/firebase/firebase-admin-java/commit/74c21d37e5f93e763a784c79eceb86873793861c", "committedDate": "2020-09-10T20:53:34Z", "message": "Add initial classes for Remote Config API\nAdd unit tests"}, "afterCommit": {"oid": "07ec3047f51bbefef8560133a4ad0d0c614b9647", "author": {"user": null}, "url": "https://github.com/firebase/firebase-admin-java/commit/07ec3047f51bbefef8560133a4ad0d0c614b9647", "committedDate": "2020-09-10T21:55:35Z", "message": "Add initial classes for Remote Config API\nAdd unit tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzUxODg1", "url": "https://github.com/firebase/firebase-admin-java/pull/477#pullrequestreview-486351885", "createdAt": "2020-09-10T22:23:00Z", "commit": {"oid": "07ec3047f51bbefef8560133a4ad0d0c614b9647"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjoyMzowMFrOHQHxJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMzowNToyMlrOHQIpmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2NjUzNA==", "bodyText": "REMOTE_CONFIG_URL", "url": "https://github.com/firebase/firebase-admin-java/pull/477#discussion_r486666534", "createdAt": "2020-09-10T22:23:00Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImpl.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.client.http.HttpRequestFactory;\n+import com.google.api.client.http.HttpResponseInterceptor;\n+import com.google.api.client.json.JsonFactory;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.ErrorCode;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.FirebaseException;\n+import com.google.firebase.ImplFirebaseTrampolines;\n+import com.google.firebase.IncomingHttpResponse;\n+import com.google.firebase.internal.AbstractPlatformErrorHandler;\n+import com.google.firebase.internal.ApiClientUtils;\n+import com.google.firebase.internal.ErrorHandlingHttpClient;\n+import com.google.firebase.internal.HttpRequestInfo;\n+import com.google.firebase.internal.SdkUtils;\n+import com.google.firebase.remoteconfig.internal.RemoteConfigServiceErrorResponse;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * A helper class for interacting with Firebase Remote Config service.\n+ */\n+final class FirebaseRemoteConfigClientImpl implements FirebaseRemoteConfigClient {\n+\n+  private static final String RC_URL = \"https://firebaseremoteconfig.googleapis.com/v1/projects/%s/remoteConfig\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07ec3047f51bbefef8560133a4ad0d0c614b9647"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2Njc0OA==", "bodyText": "Do we need to set this header for this API?", "url": "https://github.com/firebase/firebase-admin-java/pull/477#discussion_r486666748", "createdAt": "2020-09-10T22:23:34Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImpl.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.client.http.HttpRequestFactory;\n+import com.google.api.client.http.HttpResponseInterceptor;\n+import com.google.api.client.json.JsonFactory;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.ErrorCode;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.FirebaseException;\n+import com.google.firebase.ImplFirebaseTrampolines;\n+import com.google.firebase.IncomingHttpResponse;\n+import com.google.firebase.internal.AbstractPlatformErrorHandler;\n+import com.google.firebase.internal.ApiClientUtils;\n+import com.google.firebase.internal.ErrorHandlingHttpClient;\n+import com.google.firebase.internal.HttpRequestInfo;\n+import com.google.firebase.internal.SdkUtils;\n+import com.google.firebase.remoteconfig.internal.RemoteConfigServiceErrorResponse;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * A helper class for interacting with Firebase Remote Config service.\n+ */\n+final class FirebaseRemoteConfigClientImpl implements FirebaseRemoteConfigClient {\n+\n+  private static final String RC_URL = \"https://firebaseremoteconfig.googleapis.com/v1/projects/%s/remoteConfig\";\n+\n+  private static final Map<String, String> COMMON_HEADERS =\n+          ImmutableMap.of(\n+                  \"X-GOOG-API-FORMAT-VERSION\", \"2\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07ec3047f51bbefef8560133a4ad0d0c614b9647"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2NzAxNw==", "bodyText": "Add a comment describing why this is needed.", "url": "https://github.com/firebase/firebase-admin-java/pull/477#discussion_r486667017", "createdAt": "2020-09-10T22:24:22Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImpl.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.client.http.HttpRequestFactory;\n+import com.google.api.client.http.HttpResponseInterceptor;\n+import com.google.api.client.json.JsonFactory;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.ErrorCode;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.FirebaseException;\n+import com.google.firebase.ImplFirebaseTrampolines;\n+import com.google.firebase.IncomingHttpResponse;\n+import com.google.firebase.internal.AbstractPlatformErrorHandler;\n+import com.google.firebase.internal.ApiClientUtils;\n+import com.google.firebase.internal.ErrorHandlingHttpClient;\n+import com.google.firebase.internal.HttpRequestInfo;\n+import com.google.firebase.internal.SdkUtils;\n+import com.google.firebase.remoteconfig.internal.RemoteConfigServiceErrorResponse;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * A helper class for interacting with Firebase Remote Config service.\n+ */\n+final class FirebaseRemoteConfigClientImpl implements FirebaseRemoteConfigClient {\n+\n+  private static final String RC_URL = \"https://firebaseremoteconfig.googleapis.com/v1/projects/%s/remoteConfig\";\n+\n+  private static final Map<String, String> COMMON_HEADERS =\n+          ImmutableMap.of(\n+                  \"X-GOOG-API-FORMAT-VERSION\", \"2\",\n+                  \"X-Firebase-Client\", \"fire-admin-java/\" + SdkUtils.getVersion(),\n+                  \"Accept-Encoding\", \"gzip\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07ec3047f51bbefef8560133a4ad0d0c614b9647"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2NzY0Ng==", "bodyText": "rcSendUrl is not a good name for this. May be just remoteConfigUrl.", "url": "https://github.com/firebase/firebase-admin-java/pull/477#discussion_r486667646", "createdAt": "2020-09-10T22:25:55Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImpl.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.client.http.HttpRequestFactory;\n+import com.google.api.client.http.HttpResponseInterceptor;\n+import com.google.api.client.json.JsonFactory;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.ErrorCode;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.FirebaseException;\n+import com.google.firebase.ImplFirebaseTrampolines;\n+import com.google.firebase.IncomingHttpResponse;\n+import com.google.firebase.internal.AbstractPlatformErrorHandler;\n+import com.google.firebase.internal.ApiClientUtils;\n+import com.google.firebase.internal.ErrorHandlingHttpClient;\n+import com.google.firebase.internal.HttpRequestInfo;\n+import com.google.firebase.internal.SdkUtils;\n+import com.google.firebase.remoteconfig.internal.RemoteConfigServiceErrorResponse;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * A helper class for interacting with Firebase Remote Config service.\n+ */\n+final class FirebaseRemoteConfigClientImpl implements FirebaseRemoteConfigClient {\n+\n+  private static final String RC_URL = \"https://firebaseremoteconfig.googleapis.com/v1/projects/%s/remoteConfig\";\n+\n+  private static final Map<String, String> COMMON_HEADERS =\n+          ImmutableMap.of(\n+                  \"X-GOOG-API-FORMAT-VERSION\", \"2\",\n+                  \"X-Firebase-Client\", \"fire-admin-java/\" + SdkUtils.getVersion(),\n+                  \"Accept-Encoding\", \"gzip\"\n+          );\n+\n+  private final String rcSendUrl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07ec3047f51bbefef8560133a4ad0d0c614b9647"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2ODU4Mw==", "bodyText": "Redundant spacing", "url": "https://github.com/firebase/firebase-admin-java/pull/477#discussion_r486668583", "createdAt": "2020-09-10T22:28:35Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImpl.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.client.http.HttpRequestFactory;\n+import com.google.api.client.http.HttpResponseInterceptor;\n+import com.google.api.client.json.JsonFactory;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.ErrorCode;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.FirebaseException;\n+import com.google.firebase.ImplFirebaseTrampolines;\n+import com.google.firebase.IncomingHttpResponse;\n+import com.google.firebase.internal.AbstractPlatformErrorHandler;\n+import com.google.firebase.internal.ApiClientUtils;\n+import com.google.firebase.internal.ErrorHandlingHttpClient;\n+import com.google.firebase.internal.HttpRequestInfo;\n+import com.google.firebase.internal.SdkUtils;\n+import com.google.firebase.remoteconfig.internal.RemoteConfigServiceErrorResponse;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * A helper class for interacting with Firebase Remote Config service.\n+ */\n+final class FirebaseRemoteConfigClientImpl implements FirebaseRemoteConfigClient {\n+\n+  private static final String RC_URL = \"https://firebaseremoteconfig.googleapis.com/v1/projects/%s/remoteConfig\";\n+\n+  private static final Map<String, String> COMMON_HEADERS =\n+          ImmutableMap.of(\n+                  \"X-GOOG-API-FORMAT-VERSION\", \"2\",\n+                  \"X-Firebase-Client\", \"fire-admin-java/\" + SdkUtils.getVersion(),\n+                  \"Accept-Encoding\", \"gzip\"\n+          );\n+\n+  private final String rcSendUrl;\n+  private final HttpRequestFactory requestFactory;\n+  private final HttpRequestFactory childRequestFactory;\n+  private final JsonFactory jsonFactory;\n+  private final ErrorHandlingHttpClient<FirebaseRemoteConfigException> httpClient;\n+\n+  private FirebaseRemoteConfigClientImpl(Builder builder) {\n+    checkArgument(!Strings.isNullOrEmpty(builder.projectId));\n+    this.rcSendUrl = String.format(RC_URL, builder.projectId);\n+    this.requestFactory = checkNotNull(builder.requestFactory);\n+    this.childRequestFactory = checkNotNull(builder.childRequestFactory);\n+    this.jsonFactory = checkNotNull(builder.jsonFactory);\n+    HttpResponseInterceptor responseInterceptor = builder.responseInterceptor;\n+    RemoteConfigErrorHandler errorHandler = new RemoteConfigErrorHandler(this.jsonFactory);\n+    this.httpClient = new ErrorHandlingHttpClient<>(requestFactory, jsonFactory, errorHandler)\n+            .setInterceptor(responseInterceptor);\n+  }\n+\n+  @VisibleForTesting\n+  String getRcSendUrl() {\n+    return rcSendUrl;\n+  }\n+\n+  @VisibleForTesting\n+  HttpRequestFactory getRequestFactory() {\n+    return requestFactory;\n+  }\n+\n+  @VisibleForTesting\n+  HttpRequestFactory getChildRequestFactory() {\n+    return childRequestFactory;\n+  }\n+\n+  @VisibleForTesting\n+  JsonFactory getJsonFactory() {\n+    return jsonFactory;\n+  }\n+\n+  @Override\n+  public RemoteConfigTemplate getTemplate() throws FirebaseRemoteConfigException {\n+    HttpRequestInfo request = HttpRequestInfo.buildGetRequest(rcSendUrl)\n+            .addAllHeaders(COMMON_HEADERS);\n+    IncomingHttpResponse response = httpClient.send(request);\n+    RemoteConfigTemplate parsed = httpClient.parse(response, RemoteConfigTemplate.class);\n+\n+    List<String> etagList = (List<String>) response.getHeaders().get(\"etag\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07ec3047f51bbefef8560133a4ad0d0c614b9647"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2ODYxNg==", "bodyText": "Remove space", "url": "https://github.com/firebase/firebase-admin-java/pull/477#discussion_r486668616", "createdAt": "2020-09-10T22:28:43Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImpl.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.client.http.HttpRequestFactory;\n+import com.google.api.client.http.HttpResponseInterceptor;\n+import com.google.api.client.json.JsonFactory;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.ErrorCode;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.FirebaseException;\n+import com.google.firebase.ImplFirebaseTrampolines;\n+import com.google.firebase.IncomingHttpResponse;\n+import com.google.firebase.internal.AbstractPlatformErrorHandler;\n+import com.google.firebase.internal.ApiClientUtils;\n+import com.google.firebase.internal.ErrorHandlingHttpClient;\n+import com.google.firebase.internal.HttpRequestInfo;\n+import com.google.firebase.internal.SdkUtils;\n+import com.google.firebase.remoteconfig.internal.RemoteConfigServiceErrorResponse;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * A helper class for interacting with Firebase Remote Config service.\n+ */\n+final class FirebaseRemoteConfigClientImpl implements FirebaseRemoteConfigClient {\n+\n+  private static final String RC_URL = \"https://firebaseremoteconfig.googleapis.com/v1/projects/%s/remoteConfig\";\n+\n+  private static final Map<String, String> COMMON_HEADERS =\n+          ImmutableMap.of(\n+                  \"X-GOOG-API-FORMAT-VERSION\", \"2\",\n+                  \"X-Firebase-Client\", \"fire-admin-java/\" + SdkUtils.getVersion(),\n+                  \"Accept-Encoding\", \"gzip\"\n+          );\n+\n+  private final String rcSendUrl;\n+  private final HttpRequestFactory requestFactory;\n+  private final HttpRequestFactory childRequestFactory;\n+  private final JsonFactory jsonFactory;\n+  private final ErrorHandlingHttpClient<FirebaseRemoteConfigException> httpClient;\n+\n+  private FirebaseRemoteConfigClientImpl(Builder builder) {\n+    checkArgument(!Strings.isNullOrEmpty(builder.projectId));\n+    this.rcSendUrl = String.format(RC_URL, builder.projectId);\n+    this.requestFactory = checkNotNull(builder.requestFactory);\n+    this.childRequestFactory = checkNotNull(builder.childRequestFactory);\n+    this.jsonFactory = checkNotNull(builder.jsonFactory);\n+    HttpResponseInterceptor responseInterceptor = builder.responseInterceptor;\n+    RemoteConfigErrorHandler errorHandler = new RemoteConfigErrorHandler(this.jsonFactory);\n+    this.httpClient = new ErrorHandlingHttpClient<>(requestFactory, jsonFactory, errorHandler)\n+            .setInterceptor(responseInterceptor);\n+  }\n+\n+  @VisibleForTesting\n+  String getRcSendUrl() {\n+    return rcSendUrl;\n+  }\n+\n+  @VisibleForTesting\n+  HttpRequestFactory getRequestFactory() {\n+    return requestFactory;\n+  }\n+\n+  @VisibleForTesting\n+  HttpRequestFactory getChildRequestFactory() {\n+    return childRequestFactory;\n+  }\n+\n+  @VisibleForTesting\n+  JsonFactory getJsonFactory() {\n+    return jsonFactory;\n+  }\n+\n+  @Override\n+  public RemoteConfigTemplate getTemplate() throws FirebaseRemoteConfigException {\n+    HttpRequestInfo request = HttpRequestInfo.buildGetRequest(rcSendUrl)\n+            .addAllHeaders(COMMON_HEADERS);\n+    IncomingHttpResponse response = httpClient.send(request);\n+    RemoteConfigTemplate parsed = httpClient.parse(response, RemoteConfigTemplate.class);\n+\n+    List<String> etagList = (List<String>) response.getHeaders().get(\"etag\");\n+\n+    if (etagList == null || etagList.isEmpty()) {\n+      throw new FirebaseRemoteConfigException(\n+              ErrorCode.INTERNAL,\n+              \"ETag header is not available in the server response.\", null, null,\n+              RemoteConfigErrorCode.INTERNAL);\n+    }\n+\n+    String etag = etagList.get(0);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07ec3047f51bbefef8560133a4ad0d0c614b9647"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2OTM4Ng==", "bodyText": "This looks like some unexpected backend error condition. We probably shouldn't convert them into FirebaseException.That implies we expect the developer to handle them. I think we should throw a runtime exception and fail-fast.", "url": "https://github.com/firebase/firebase-admin-java/pull/477#discussion_r486669386", "createdAt": "2020-09-10T22:30:57Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImpl.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.client.http.HttpRequestFactory;\n+import com.google.api.client.http.HttpResponseInterceptor;\n+import com.google.api.client.json.JsonFactory;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.ErrorCode;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.FirebaseException;\n+import com.google.firebase.ImplFirebaseTrampolines;\n+import com.google.firebase.IncomingHttpResponse;\n+import com.google.firebase.internal.AbstractPlatformErrorHandler;\n+import com.google.firebase.internal.ApiClientUtils;\n+import com.google.firebase.internal.ErrorHandlingHttpClient;\n+import com.google.firebase.internal.HttpRequestInfo;\n+import com.google.firebase.internal.SdkUtils;\n+import com.google.firebase.remoteconfig.internal.RemoteConfigServiceErrorResponse;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * A helper class for interacting with Firebase Remote Config service.\n+ */\n+final class FirebaseRemoteConfigClientImpl implements FirebaseRemoteConfigClient {\n+\n+  private static final String RC_URL = \"https://firebaseremoteconfig.googleapis.com/v1/projects/%s/remoteConfig\";\n+\n+  private static final Map<String, String> COMMON_HEADERS =\n+          ImmutableMap.of(\n+                  \"X-GOOG-API-FORMAT-VERSION\", \"2\",\n+                  \"X-Firebase-Client\", \"fire-admin-java/\" + SdkUtils.getVersion(),\n+                  \"Accept-Encoding\", \"gzip\"\n+          );\n+\n+  private final String rcSendUrl;\n+  private final HttpRequestFactory requestFactory;\n+  private final HttpRequestFactory childRequestFactory;\n+  private final JsonFactory jsonFactory;\n+  private final ErrorHandlingHttpClient<FirebaseRemoteConfigException> httpClient;\n+\n+  private FirebaseRemoteConfigClientImpl(Builder builder) {\n+    checkArgument(!Strings.isNullOrEmpty(builder.projectId));\n+    this.rcSendUrl = String.format(RC_URL, builder.projectId);\n+    this.requestFactory = checkNotNull(builder.requestFactory);\n+    this.childRequestFactory = checkNotNull(builder.childRequestFactory);\n+    this.jsonFactory = checkNotNull(builder.jsonFactory);\n+    HttpResponseInterceptor responseInterceptor = builder.responseInterceptor;\n+    RemoteConfigErrorHandler errorHandler = new RemoteConfigErrorHandler(this.jsonFactory);\n+    this.httpClient = new ErrorHandlingHttpClient<>(requestFactory, jsonFactory, errorHandler)\n+            .setInterceptor(responseInterceptor);\n+  }\n+\n+  @VisibleForTesting\n+  String getRcSendUrl() {\n+    return rcSendUrl;\n+  }\n+\n+  @VisibleForTesting\n+  HttpRequestFactory getRequestFactory() {\n+    return requestFactory;\n+  }\n+\n+  @VisibleForTesting\n+  HttpRequestFactory getChildRequestFactory() {\n+    return childRequestFactory;\n+  }\n+\n+  @VisibleForTesting\n+  JsonFactory getJsonFactory() {\n+    return jsonFactory;\n+  }\n+\n+  @Override\n+  public RemoteConfigTemplate getTemplate() throws FirebaseRemoteConfigException {\n+    HttpRequestInfo request = HttpRequestInfo.buildGetRequest(rcSendUrl)\n+            .addAllHeaders(COMMON_HEADERS);\n+    IncomingHttpResponse response = httpClient.send(request);\n+    RemoteConfigTemplate parsed = httpClient.parse(response, RemoteConfigTemplate.class);\n+\n+    List<String> etagList = (List<String>) response.getHeaders().get(\"etag\");\n+\n+    if (etagList == null || etagList.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07ec3047f51bbefef8560133a4ad0d0c614b9647"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2OTYwNg==", "bodyText": "Here too. Can't expect the developer to handle these.", "url": "https://github.com/firebase/firebase-admin-java/pull/477#discussion_r486669606", "createdAt": "2020-09-10T22:31:38Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImpl.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.client.http.HttpRequestFactory;\n+import com.google.api.client.http.HttpResponseInterceptor;\n+import com.google.api.client.json.JsonFactory;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.ErrorCode;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.FirebaseException;\n+import com.google.firebase.ImplFirebaseTrampolines;\n+import com.google.firebase.IncomingHttpResponse;\n+import com.google.firebase.internal.AbstractPlatformErrorHandler;\n+import com.google.firebase.internal.ApiClientUtils;\n+import com.google.firebase.internal.ErrorHandlingHttpClient;\n+import com.google.firebase.internal.HttpRequestInfo;\n+import com.google.firebase.internal.SdkUtils;\n+import com.google.firebase.remoteconfig.internal.RemoteConfigServiceErrorResponse;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * A helper class for interacting with Firebase Remote Config service.\n+ */\n+final class FirebaseRemoteConfigClientImpl implements FirebaseRemoteConfigClient {\n+\n+  private static final String RC_URL = \"https://firebaseremoteconfig.googleapis.com/v1/projects/%s/remoteConfig\";\n+\n+  private static final Map<String, String> COMMON_HEADERS =\n+          ImmutableMap.of(\n+                  \"X-GOOG-API-FORMAT-VERSION\", \"2\",\n+                  \"X-Firebase-Client\", \"fire-admin-java/\" + SdkUtils.getVersion(),\n+                  \"Accept-Encoding\", \"gzip\"\n+          );\n+\n+  private final String rcSendUrl;\n+  private final HttpRequestFactory requestFactory;\n+  private final HttpRequestFactory childRequestFactory;\n+  private final JsonFactory jsonFactory;\n+  private final ErrorHandlingHttpClient<FirebaseRemoteConfigException> httpClient;\n+\n+  private FirebaseRemoteConfigClientImpl(Builder builder) {\n+    checkArgument(!Strings.isNullOrEmpty(builder.projectId));\n+    this.rcSendUrl = String.format(RC_URL, builder.projectId);\n+    this.requestFactory = checkNotNull(builder.requestFactory);\n+    this.childRequestFactory = checkNotNull(builder.childRequestFactory);\n+    this.jsonFactory = checkNotNull(builder.jsonFactory);\n+    HttpResponseInterceptor responseInterceptor = builder.responseInterceptor;\n+    RemoteConfigErrorHandler errorHandler = new RemoteConfigErrorHandler(this.jsonFactory);\n+    this.httpClient = new ErrorHandlingHttpClient<>(requestFactory, jsonFactory, errorHandler)\n+            .setInterceptor(responseInterceptor);\n+  }\n+\n+  @VisibleForTesting\n+  String getRcSendUrl() {\n+    return rcSendUrl;\n+  }\n+\n+  @VisibleForTesting\n+  HttpRequestFactory getRequestFactory() {\n+    return requestFactory;\n+  }\n+\n+  @VisibleForTesting\n+  HttpRequestFactory getChildRequestFactory() {\n+    return childRequestFactory;\n+  }\n+\n+  @VisibleForTesting\n+  JsonFactory getJsonFactory() {\n+    return jsonFactory;\n+  }\n+\n+  @Override\n+  public RemoteConfigTemplate getTemplate() throws FirebaseRemoteConfigException {\n+    HttpRequestInfo request = HttpRequestInfo.buildGetRequest(rcSendUrl)\n+            .addAllHeaders(COMMON_HEADERS);\n+    IncomingHttpResponse response = httpClient.send(request);\n+    RemoteConfigTemplate parsed = httpClient.parse(response, RemoteConfigTemplate.class);\n+\n+    List<String> etagList = (List<String>) response.getHeaders().get(\"etag\");\n+\n+    if (etagList == null || etagList.isEmpty()) {\n+      throw new FirebaseRemoteConfigException(\n+              ErrorCode.INTERNAL,\n+              \"ETag header is not available in the server response.\", null, null,\n+              RemoteConfigErrorCode.INTERNAL);\n+    }\n+\n+    String etag = etagList.get(0);\n+\n+    if (Strings.isNullOrEmpty(etag)) {\n+      throw new FirebaseRemoteConfigException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07ec3047f51bbefef8560133a4ad0d0c614b9647"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3MDU0OQ==", "bodyText": "This is an FCM thing. Not relevant here.", "url": "https://github.com/firebase/firebase-admin-java/pull/477#discussion_r486670549", "createdAt": "2020-09-10T22:34:09Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImpl.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.client.http.HttpRequestFactory;\n+import com.google.api.client.http.HttpResponseInterceptor;\n+import com.google.api.client.json.JsonFactory;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.ErrorCode;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.FirebaseException;\n+import com.google.firebase.ImplFirebaseTrampolines;\n+import com.google.firebase.IncomingHttpResponse;\n+import com.google.firebase.internal.AbstractPlatformErrorHandler;\n+import com.google.firebase.internal.ApiClientUtils;\n+import com.google.firebase.internal.ErrorHandlingHttpClient;\n+import com.google.firebase.internal.HttpRequestInfo;\n+import com.google.firebase.internal.SdkUtils;\n+import com.google.firebase.remoteconfig.internal.RemoteConfigServiceErrorResponse;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * A helper class for interacting with Firebase Remote Config service.\n+ */\n+final class FirebaseRemoteConfigClientImpl implements FirebaseRemoteConfigClient {\n+\n+  private static final String RC_URL = \"https://firebaseremoteconfig.googleapis.com/v1/projects/%s/remoteConfig\";\n+\n+  private static final Map<String, String> COMMON_HEADERS =\n+          ImmutableMap.of(\n+                  \"X-GOOG-API-FORMAT-VERSION\", \"2\",\n+                  \"X-Firebase-Client\", \"fire-admin-java/\" + SdkUtils.getVersion(),\n+                  \"Accept-Encoding\", \"gzip\"\n+          );\n+\n+  private final String rcSendUrl;\n+  private final HttpRequestFactory requestFactory;\n+  private final HttpRequestFactory childRequestFactory;\n+  private final JsonFactory jsonFactory;\n+  private final ErrorHandlingHttpClient<FirebaseRemoteConfigException> httpClient;\n+\n+  private FirebaseRemoteConfigClientImpl(Builder builder) {\n+    checkArgument(!Strings.isNullOrEmpty(builder.projectId));\n+    this.rcSendUrl = String.format(RC_URL, builder.projectId);\n+    this.requestFactory = checkNotNull(builder.requestFactory);\n+    this.childRequestFactory = checkNotNull(builder.childRequestFactory);\n+    this.jsonFactory = checkNotNull(builder.jsonFactory);\n+    HttpResponseInterceptor responseInterceptor = builder.responseInterceptor;\n+    RemoteConfigErrorHandler errorHandler = new RemoteConfigErrorHandler(this.jsonFactory);\n+    this.httpClient = new ErrorHandlingHttpClient<>(requestFactory, jsonFactory, errorHandler)\n+            .setInterceptor(responseInterceptor);\n+  }\n+\n+  @VisibleForTesting\n+  String getRcSendUrl() {\n+    return rcSendUrl;\n+  }\n+\n+  @VisibleForTesting\n+  HttpRequestFactory getRequestFactory() {\n+    return requestFactory;\n+  }\n+\n+  @VisibleForTesting\n+  HttpRequestFactory getChildRequestFactory() {\n+    return childRequestFactory;\n+  }\n+\n+  @VisibleForTesting\n+  JsonFactory getJsonFactory() {\n+    return jsonFactory;\n+  }\n+\n+  @Override\n+  public RemoteConfigTemplate getTemplate() throws FirebaseRemoteConfigException {\n+    HttpRequestInfo request = HttpRequestInfo.buildGetRequest(rcSendUrl)\n+            .addAllHeaders(COMMON_HEADERS);\n+    IncomingHttpResponse response = httpClient.send(request);\n+    RemoteConfigTemplate parsed = httpClient.parse(response, RemoteConfigTemplate.class);\n+\n+    List<String> etagList = (List<String>) response.getHeaders().get(\"etag\");\n+\n+    if (etagList == null || etagList.isEmpty()) {\n+      throw new FirebaseRemoteConfigException(\n+              ErrorCode.INTERNAL,\n+              \"ETag header is not available in the server response.\", null, null,\n+              RemoteConfigErrorCode.INTERNAL);\n+    }\n+\n+    String etag = etagList.get(0);\n+\n+    if (Strings.isNullOrEmpty(etag)) {\n+      throw new FirebaseRemoteConfigException(\n+              ErrorCode.INTERNAL,\n+              \"ETag header is not available in the server response.\", null, null,\n+              RemoteConfigErrorCode.INTERNAL);\n+    }\n+\n+    parsed.setETag(etag);\n+    return parsed;\n+  }\n+\n+  static FirebaseRemoteConfigClientImpl fromApp(FirebaseApp app) {\n+    String projectId = ImplFirebaseTrampolines.getProjectId(app);\n+    checkArgument(!Strings.isNullOrEmpty(projectId),\n+            \"Project ID is required to access Remote Config service. Use a service \"\n+                    + \"account credential or set the project ID explicitly via FirebaseOptions. \"\n+                    + \"Alternatively you can also set the project ID via the GOOGLE_CLOUD_PROJECT \"\n+                    + \"environment variable.\");\n+    return FirebaseRemoteConfigClientImpl.builder()\n+            .setProjectId(projectId)\n+            .setRequestFactory(ApiClientUtils.newAuthorizedRequestFactory(app))\n+            .setChildRequestFactory(ApiClientUtils.newUnauthorizedRequestFactory(app))\n+            .setJsonFactory(app.getOptions().getJsonFactory())\n+            .build();\n+  }\n+\n+  static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  static final class Builder {\n+\n+    private String projectId;\n+    private HttpRequestFactory requestFactory;\n+    private HttpRequestFactory childRequestFactory;\n+    private JsonFactory jsonFactory;\n+    private HttpResponseInterceptor responseInterceptor;\n+\n+    private Builder() { }\n+\n+    Builder setProjectId(String projectId) {\n+      this.projectId = projectId;\n+      return this;\n+    }\n+\n+    Builder setRequestFactory(HttpRequestFactory requestFactory) {\n+      this.requestFactory = requestFactory;\n+      return this;\n+    }\n+\n+    Builder setChildRequestFactory(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07ec3047f51bbefef8560133a4ad0d0c614b9647"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3MDU4NA==", "bodyText": "Not applicable", "url": "https://github.com/firebase/firebase-admin-java/pull/477#discussion_r486670584", "createdAt": "2020-09-10T22:34:20Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImpl.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.client.http.HttpRequestFactory;\n+import com.google.api.client.http.HttpResponseInterceptor;\n+import com.google.api.client.json.JsonFactory;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.ErrorCode;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.FirebaseException;\n+import com.google.firebase.ImplFirebaseTrampolines;\n+import com.google.firebase.IncomingHttpResponse;\n+import com.google.firebase.internal.AbstractPlatformErrorHandler;\n+import com.google.firebase.internal.ApiClientUtils;\n+import com.google.firebase.internal.ErrorHandlingHttpClient;\n+import com.google.firebase.internal.HttpRequestInfo;\n+import com.google.firebase.internal.SdkUtils;\n+import com.google.firebase.remoteconfig.internal.RemoteConfigServiceErrorResponse;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * A helper class for interacting with Firebase Remote Config service.\n+ */\n+final class FirebaseRemoteConfigClientImpl implements FirebaseRemoteConfigClient {\n+\n+  private static final String RC_URL = \"https://firebaseremoteconfig.googleapis.com/v1/projects/%s/remoteConfig\";\n+\n+  private static final Map<String, String> COMMON_HEADERS =\n+          ImmutableMap.of(\n+                  \"X-GOOG-API-FORMAT-VERSION\", \"2\",\n+                  \"X-Firebase-Client\", \"fire-admin-java/\" + SdkUtils.getVersion(),\n+                  \"Accept-Encoding\", \"gzip\"\n+          );\n+\n+  private final String rcSendUrl;\n+  private final HttpRequestFactory requestFactory;\n+  private final HttpRequestFactory childRequestFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07ec3047f51bbefef8560133a4ad0d0c614b9647"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3MjU2Ng==", "bodyText": "Are these the only possible error codes? If so we shouldn't expose this enum.", "url": "https://github.com/firebase/firebase-admin-java/pull/477#discussion_r486672566", "createdAt": "2020-09-10T22:39:40Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/RemoteConfigErrorCode.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+/**\n+ * Error codes that can be raised by the Remote Config APIs.\n+ */\n+public enum RemoteConfigErrorCode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07ec3047f51bbefef8560133a4ad0d0c614b9647"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3MjY0Mw==", "bodyText": "Make all public classes final.", "url": "https://github.com/firebase/firebase-admin-java/pull/477#discussion_r486672643", "createdAt": "2020-09-10T22:39:53Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/RemoteConfigTemplate.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import com.google.api.client.util.Key;\n+\n+public class RemoteConfigTemplate {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07ec3047f51bbefef8560133a4ad0d0c614b9647"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3Mjk1NQ==", "bodyText": "Why is the setter needed?", "url": "https://github.com/firebase/firebase-admin-java/pull/477#discussion_r486672955", "createdAt": "2020-09-10T22:40:36Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/RemoteConfigTemplate.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import com.google.api.client.util.Key;\n+\n+public class RemoteConfigTemplate {\n+\n+  @Key(\"etag\")\n+  private String etag;\n+\n+  public String getETag() {\n+    return this.etag;\n+  }\n+\n+  void setETag(String etag) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07ec3047f51bbefef8560133a4ad0d0c614b9647"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3Mzc5Mw==", "bodyText": "Not used", "url": "https://github.com/firebase/firebase-admin-java/pull/477#discussion_r486673793", "createdAt": "2020-09-10T22:42:58Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/internal/RemoteConfigServiceErrorResponse.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig.internal;\n+\n+import com.google.api.client.json.GenericJson;\n+import com.google.api.client.util.Key;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.internal.Nullable;\n+import com.google.firebase.remoteconfig.RemoteConfigErrorCode;\n+\n+import java.util.Map;\n+\n+/**\n+ * The DTO for parsing error responses from the Remote Config service.\n+ * These error messages take the form,\n+ * `\"error\": {\"code\": 123, \"message\": \"[CODE]: Message Details\", \"status\": \"ERROR_STATUS\"}`\n+ */\n+public class RemoteConfigServiceErrorResponse extends GenericJson {\n+\n+  private static final Map<String, RemoteConfigErrorCode> RC_ERROR_CODES =\n+          ImmutableMap.<String, RemoteConfigErrorCode>builder()\n+                  .put(\"INTERNAL\", RemoteConfigErrorCode.INTERNAL)\n+                  .put(\"INVALID_ARGUMENT\", RemoteConfigErrorCode.INVALID_ARGUMENT)\n+                  .build();\n+\n+  @Key(\"error\")\n+  private Map<String, Object> error;\n+\n+  public String getStatus() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07ec3047f51bbefef8560133a4ad0d0c614b9647"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3Mzg1Mg==", "bodyText": "This is also only used in one place. Can be just inlined.", "url": "https://github.com/firebase/firebase-admin-java/pull/477#discussion_r486673852", "createdAt": "2020-09-10T22:43:12Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/internal/RemoteConfigServiceErrorResponse.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig.internal;\n+\n+import com.google.api.client.json.GenericJson;\n+import com.google.api.client.util.Key;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.internal.Nullable;\n+import com.google.firebase.remoteconfig.RemoteConfigErrorCode;\n+\n+import java.util.Map;\n+\n+/**\n+ * The DTO for parsing error responses from the Remote Config service.\n+ * These error messages take the form,\n+ * `\"error\": {\"code\": 123, \"message\": \"[CODE]: Message Details\", \"status\": \"ERROR_STATUS\"}`\n+ */\n+public class RemoteConfigServiceErrorResponse extends GenericJson {\n+\n+  private static final Map<String, RemoteConfigErrorCode> RC_ERROR_CODES =\n+          ImmutableMap.<String, RemoteConfigErrorCode>builder()\n+                  .put(\"INTERNAL\", RemoteConfigErrorCode.INTERNAL)\n+                  .put(\"INVALID_ARGUMENT\", RemoteConfigErrorCode.INVALID_ARGUMENT)\n+                  .build();\n+\n+  @Key(\"error\")\n+  private Map<String, Object> error;\n+\n+  public String getStatus() {\n+    if (error == null) {\n+      return null;\n+    }\n+\n+    return (String) error.get(\"status\");\n+  }\n+\n+  @Nullable\n+  public RemoteConfigErrorCode getRemoteConfigErrorCode() {\n+    if (error == null) {\n+      return null;\n+    }\n+\n+    String message = getErrorMessage();\n+    if (Strings.isNullOrEmpty(message)) {\n+      return null;\n+    }\n+\n+    int separator = message.indexOf(':');\n+    if (separator != -1) {\n+      String errorCode = message.substring(0, separator).replaceAll(\"\\\\[|\\\\]\", \"\");\n+      return RC_ERROR_CODES.get(errorCode);\n+    }\n+\n+    return null;\n+  }\n+\n+  @Nullable\n+  public String getErrorMessage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07ec3047f51bbefef8560133a4ad0d0c614b9647"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3Njk4Mw==", "bodyText": "Might be cleaner to extract this using a regex group match like ^\\[(\\w+)\\]:.*$. The current implementation is too lenient.", "url": "https://github.com/firebase/firebase-admin-java/pull/477#discussion_r486676983", "createdAt": "2020-09-10T22:52:45Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/internal/RemoteConfigServiceErrorResponse.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig.internal;\n+\n+import com.google.api.client.json.GenericJson;\n+import com.google.api.client.util.Key;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.internal.Nullable;\n+import com.google.firebase.remoteconfig.RemoteConfigErrorCode;\n+\n+import java.util.Map;\n+\n+/**\n+ * The DTO for parsing error responses from the Remote Config service.\n+ * These error messages take the form,\n+ * `\"error\": {\"code\": 123, \"message\": \"[CODE]: Message Details\", \"status\": \"ERROR_STATUS\"}`\n+ */\n+public class RemoteConfigServiceErrorResponse extends GenericJson {\n+\n+  private static final Map<String, RemoteConfigErrorCode> RC_ERROR_CODES =\n+          ImmutableMap.<String, RemoteConfigErrorCode>builder()\n+                  .put(\"INTERNAL\", RemoteConfigErrorCode.INTERNAL)\n+                  .put(\"INVALID_ARGUMENT\", RemoteConfigErrorCode.INVALID_ARGUMENT)\n+                  .build();\n+\n+  @Key(\"error\")\n+  private Map<String, Object> error;\n+\n+  public String getStatus() {\n+    if (error == null) {\n+      return null;\n+    }\n+\n+    return (String) error.get(\"status\");\n+  }\n+\n+  @Nullable\n+  public RemoteConfigErrorCode getRemoteConfigErrorCode() {\n+    if (error == null) {\n+      return null;\n+    }\n+\n+    String message = getErrorMessage();\n+    if (Strings.isNullOrEmpty(message)) {\n+      return null;\n+    }\n+\n+    int separator = message.indexOf(':');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07ec3047f51bbefef8560133a4ad0d0c614b9647"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3NzYxNg==", "bodyText": "The general format is:\nsetup code\n<space>\nTest API\n<space>\nAssertions", "url": "https://github.com/firebase/firebase-admin-java/pull/477#discussion_r486677616", "createdAt": "2020-09-10T22:54:51Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java", "diffHunk": "@@ -0,0 +1,377 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import com.google.api.client.googleapis.util.Utils;\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpHeaders;\n+import com.google.api.client.http.HttpMethods;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpResponseException;\n+import com.google.api.client.http.HttpResponseInterceptor;\n+import com.google.api.client.http.HttpTransport;\n+import com.google.api.client.testing.http.MockHttpTransport;\n+import com.google.api.client.testing.http.MockLowLevelHttpResponse;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.ErrorCode;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.FirebaseOptions;\n+import com.google.firebase.OutgoingHttpRequest;\n+import com.google.firebase.auth.MockGoogleCredentials;\n+import com.google.firebase.internal.SdkUtils;\n+import com.google.firebase.testing.TestResponseInterceptor;\n+import com.google.firebase.testing.TestUtils;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class FirebaseRemoteConfigClientImplTest {\n+\n+  private static final String TEST_RC_URL =\n+          \"https://firebaseremoteconfig.googleapis.com/v1/projects/test-project/remoteConfig\";\n+\n+  private static final List<Integer> HTTP_ERRORS = ImmutableList.of(401, 404, 500);\n+\n+  private static final Map<Integer, ErrorCode> HTTP_2_ERROR = ImmutableMap.of(\n+          401, ErrorCode.UNAUTHENTICATED,\n+          404, ErrorCode.NOT_FOUND,\n+          500, ErrorCode.INTERNAL);\n+\n+  private static final String MOCK_TEMPLATE_RESPONSE = \"{\\\"conditions\\\": [], \\\"parameters\\\": {}}\";\n+\n+  private static final String TEST_ETAG = \"etag-123456789012-1\";\n+\n+  private MockLowLevelHttpResponse response;\n+  private TestResponseInterceptor interceptor;\n+  private FirebaseRemoteConfigClient client;\n+\n+  @Before\n+  public void setUp() {\n+    response = new MockLowLevelHttpResponse();\n+    interceptor = new TestResponseInterceptor();\n+    client = initRemoteConfigClient(response, interceptor);\n+  }\n+\n+  @Test\n+  public void testGetTemplate() throws Exception {\n+    response.addHeader(\"etag\", TEST_ETAG);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07ec3047f51bbefef8560133a4ad0d0c614b9647"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3ODM0NA==", "bodyText": "This is still using the same response object as above. So it still has the etag header set to empty string.", "url": "https://github.com/firebase/firebase-admin-java/pull/477#discussion_r486678344", "createdAt": "2020-09-10T22:57:03Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java", "diffHunk": "@@ -0,0 +1,377 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import com.google.api.client.googleapis.util.Utils;\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpHeaders;\n+import com.google.api.client.http.HttpMethods;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpResponseException;\n+import com.google.api.client.http.HttpResponseInterceptor;\n+import com.google.api.client.http.HttpTransport;\n+import com.google.api.client.testing.http.MockHttpTransport;\n+import com.google.api.client.testing.http.MockLowLevelHttpResponse;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.ErrorCode;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.FirebaseOptions;\n+import com.google.firebase.OutgoingHttpRequest;\n+import com.google.firebase.auth.MockGoogleCredentials;\n+import com.google.firebase.internal.SdkUtils;\n+import com.google.firebase.testing.TestResponseInterceptor;\n+import com.google.firebase.testing.TestUtils;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class FirebaseRemoteConfigClientImplTest {\n+\n+  private static final String TEST_RC_URL =\n+          \"https://firebaseremoteconfig.googleapis.com/v1/projects/test-project/remoteConfig\";\n+\n+  private static final List<Integer> HTTP_ERRORS = ImmutableList.of(401, 404, 500);\n+\n+  private static final Map<Integer, ErrorCode> HTTP_2_ERROR = ImmutableMap.of(\n+          401, ErrorCode.UNAUTHENTICATED,\n+          404, ErrorCode.NOT_FOUND,\n+          500, ErrorCode.INTERNAL);\n+\n+  private static final String MOCK_TEMPLATE_RESPONSE = \"{\\\"conditions\\\": [], \\\"parameters\\\": {}}\";\n+\n+  private static final String TEST_ETAG = \"etag-123456789012-1\";\n+\n+  private MockLowLevelHttpResponse response;\n+  private TestResponseInterceptor interceptor;\n+  private FirebaseRemoteConfigClient client;\n+\n+  @Before\n+  public void setUp() {\n+    response = new MockLowLevelHttpResponse();\n+    interceptor = new TestResponseInterceptor();\n+    client = initRemoteConfigClient(response, interceptor);\n+  }\n+\n+  @Test\n+  public void testGetTemplate() throws Exception {\n+    response.addHeader(\"etag\", TEST_ETAG);\n+    response.setContent(MOCK_TEMPLATE_RESPONSE);\n+    RemoteConfigTemplate template = client.getTemplate();\n+\n+    assertEquals(TEST_ETAG, template.getETag());\n+    checkGetRequestHeader(interceptor.getLastRequest());\n+  }\n+\n+  @Test\n+  public void testGetTemplateWithInvalidEtags() {\n+    // Empty ETag\n+    response.addHeader(\"etag\", \"\");\n+    response.setContent(MOCK_TEMPLATE_RESPONSE);\n+    try {\n+      client.getTemplate();\n+      fail(\"No error thrown for invalid ETag\");\n+    } catch (FirebaseRemoteConfigException error) {\n+      assertEquals(ErrorCode.INTERNAL, error.getErrorCode());\n+      assertEquals(\"ETag header is not available in the server response.\", error.getMessage());\n+      assertEquals(RemoteConfigErrorCode.INTERNAL, error.getRemoteConfigErrorCode());\n+    }\n+    checkGetRequestHeader(interceptor.getLastRequest());\n+\n+    // ETag does not exist", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07ec3047f51bbefef8560133a4ad0d0c614b9647"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3OTExNw==", "bodyText": "Let's use a bit more descriptive names:\nTEST_REMOTE_CONFIG_URL\nHTTP_STATUS_CODES\nHTTP_STATUS_TO_ERROR_CODE", "url": "https://github.com/firebase/firebase-admin-java/pull/477#discussion_r486679117", "createdAt": "2020-09-10T22:59:31Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java", "diffHunk": "@@ -0,0 +1,377 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import com.google.api.client.googleapis.util.Utils;\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpHeaders;\n+import com.google.api.client.http.HttpMethods;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpResponseException;\n+import com.google.api.client.http.HttpResponseInterceptor;\n+import com.google.api.client.http.HttpTransport;\n+import com.google.api.client.testing.http.MockHttpTransport;\n+import com.google.api.client.testing.http.MockLowLevelHttpResponse;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.ErrorCode;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.FirebaseOptions;\n+import com.google.firebase.OutgoingHttpRequest;\n+import com.google.firebase.auth.MockGoogleCredentials;\n+import com.google.firebase.internal.SdkUtils;\n+import com.google.firebase.testing.TestResponseInterceptor;\n+import com.google.firebase.testing.TestUtils;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class FirebaseRemoteConfigClientImplTest {\n+\n+  private static final String TEST_RC_URL =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07ec3047f51bbefef8560133a4ad0d0c614b9647"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3OTc0Mg==", "bodyText": "headers.getAcceptEncoding()", "url": "https://github.com/firebase/firebase-admin-java/pull/477#discussion_r486679742", "createdAt": "2020-09-10T23:01:28Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java", "diffHunk": "@@ -0,0 +1,377 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import com.google.api.client.googleapis.util.Utils;\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpHeaders;\n+import com.google.api.client.http.HttpMethods;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpResponseException;\n+import com.google.api.client.http.HttpResponseInterceptor;\n+import com.google.api.client.http.HttpTransport;\n+import com.google.api.client.testing.http.MockHttpTransport;\n+import com.google.api.client.testing.http.MockLowLevelHttpResponse;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.ErrorCode;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.FirebaseOptions;\n+import com.google.firebase.OutgoingHttpRequest;\n+import com.google.firebase.auth.MockGoogleCredentials;\n+import com.google.firebase.internal.SdkUtils;\n+import com.google.firebase.testing.TestResponseInterceptor;\n+import com.google.firebase.testing.TestUtils;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class FirebaseRemoteConfigClientImplTest {\n+\n+  private static final String TEST_RC_URL =\n+          \"https://firebaseremoteconfig.googleapis.com/v1/projects/test-project/remoteConfig\";\n+\n+  private static final List<Integer> HTTP_ERRORS = ImmutableList.of(401, 404, 500);\n+\n+  private static final Map<Integer, ErrorCode> HTTP_2_ERROR = ImmutableMap.of(\n+          401, ErrorCode.UNAUTHENTICATED,\n+          404, ErrorCode.NOT_FOUND,\n+          500, ErrorCode.INTERNAL);\n+\n+  private static final String MOCK_TEMPLATE_RESPONSE = \"{\\\"conditions\\\": [], \\\"parameters\\\": {}}\";\n+\n+  private static final String TEST_ETAG = \"etag-123456789012-1\";\n+\n+  private MockLowLevelHttpResponse response;\n+  private TestResponseInterceptor interceptor;\n+  private FirebaseRemoteConfigClient client;\n+\n+  @Before\n+  public void setUp() {\n+    response = new MockLowLevelHttpResponse();\n+    interceptor = new TestResponseInterceptor();\n+    client = initRemoteConfigClient(response, interceptor);\n+  }\n+\n+  @Test\n+  public void testGetTemplate() throws Exception {\n+    response.addHeader(\"etag\", TEST_ETAG);\n+    response.setContent(MOCK_TEMPLATE_RESPONSE);\n+    RemoteConfigTemplate template = client.getTemplate();\n+\n+    assertEquals(TEST_ETAG, template.getETag());\n+    checkGetRequestHeader(interceptor.getLastRequest());\n+  }\n+\n+  @Test\n+  public void testGetTemplateWithInvalidEtags() {\n+    // Empty ETag\n+    response.addHeader(\"etag\", \"\");\n+    response.setContent(MOCK_TEMPLATE_RESPONSE);\n+    try {\n+      client.getTemplate();\n+      fail(\"No error thrown for invalid ETag\");\n+    } catch (FirebaseRemoteConfigException error) {\n+      assertEquals(ErrorCode.INTERNAL, error.getErrorCode());\n+      assertEquals(\"ETag header is not available in the server response.\", error.getMessage());\n+      assertEquals(RemoteConfigErrorCode.INTERNAL, error.getRemoteConfigErrorCode());\n+    }\n+    checkGetRequestHeader(interceptor.getLastRequest());\n+\n+    // ETag does not exist\n+    response.setContent(MOCK_TEMPLATE_RESPONSE);\n+    try {\n+      client.getTemplate();\n+      fail(\"No error thrown for invalid ETag\");\n+    } catch (FirebaseRemoteConfigException error) {\n+      assertEquals(ErrorCode.INTERNAL, error.getErrorCode());\n+      assertEquals(\"ETag header is not available in the server response.\", error.getMessage());\n+      assertEquals(RemoteConfigErrorCode.INTERNAL, error.getRemoteConfigErrorCode());\n+    }\n+    checkGetRequestHeader(interceptor.getLastRequest());\n+  }\n+\n+  @Test\n+  public void testGetTemplateHttpError() {\n+    for (int code : HTTP_ERRORS) {\n+      response.setStatusCode(code).setContent(\"{}\");\n+\n+      try {\n+        client.getTemplate();\n+        fail(\"No error thrown for HTTP error\");\n+      } catch (FirebaseRemoteConfigException error) {\n+        checkExceptionFromHttpResponse(error, HTTP_2_ERROR.get(code), null,\n+                \"Unexpected HTTP response with status: \" + code + \"\\n{}\");\n+      }\n+      checkGetRequestHeader(interceptor.getLastRequest());\n+    }\n+  }\n+\n+  @Test\n+  public void testGetTemplateTransportError() {\n+    client = initClientWithFaultyTransport();\n+\n+    try {\n+      client.getTemplate();\n+      fail(\"No error thrown for HTTP error\");\n+    } catch (FirebaseRemoteConfigException error) {\n+      assertEquals(ErrorCode.UNKNOWN, error.getErrorCode());\n+      assertEquals(\"Unknown error while making a remote service call: transport error\",\n+              error.getMessage());\n+      assertTrue(error.getCause() instanceof IOException);\n+      assertNull(error.getHttpResponse());\n+      assertNull(error.getRemoteConfigErrorCode());\n+    }\n+  }\n+\n+  @Test\n+  public void testGetTemplateSuccessResponseWithUnexpectedPayload() {\n+    response.setContent(\"not valid json\");\n+\n+    try {\n+      client.getTemplate();\n+      fail(\"No error thrown for malformed response\");\n+    } catch (FirebaseRemoteConfigException error) {\n+      assertEquals(ErrorCode.UNKNOWN, error.getErrorCode());\n+      assertTrue(error.getMessage().startsWith(\"Error while parsing HTTP response: \"));\n+      assertNotNull(error.getCause());\n+      assertNotNull(error.getHttpResponse());\n+      assertNull(error.getRemoteConfigErrorCode());\n+    }\n+    checkGetRequestHeader(interceptor.getLastRequest());\n+  }\n+\n+  @Test\n+  public void testGetTemplateErrorWithZeroContentResponse() {\n+    for (int code : HTTP_ERRORS) {\n+      response.setStatusCode(code).setZeroContent();\n+\n+      try {\n+        client.getTemplate();\n+        fail(\"No error thrown for HTTP error\");\n+      } catch (FirebaseRemoteConfigException error) {\n+        checkExceptionFromHttpResponse(error, HTTP_2_ERROR.get(code), null,\n+                \"Unexpected HTTP response with status: \" + code + \"\\nnull\");\n+      }\n+      checkGetRequestHeader(interceptor.getLastRequest());\n+    }\n+  }\n+\n+  @Test\n+  public void testGetTemplateErrorWithMalformedResponse() {\n+    for (int code : HTTP_ERRORS) {\n+      response.setStatusCode(code).setContent(\"not json\");\n+\n+      try {\n+        client.getTemplate();\n+        fail(\"No error thrown for HTTP error\");\n+      } catch (FirebaseRemoteConfigException error) {\n+        checkExceptionFromHttpResponse(error, HTTP_2_ERROR.get(code), null,\n+                \"Unexpected HTTP response with status: \" + code + \"\\nnot json\");\n+      }\n+      checkGetRequestHeader(interceptor.getLastRequest());\n+    }\n+  }\n+\n+  @Test\n+  public void testGetTemplateErrorWithDetails() {\n+    for (int code : HTTP_ERRORS) {\n+      response.setStatusCode(code).setContent(\n+              \"{\\\"error\\\": {\\\"status\\\": \\\"INVALID_ARGUMENT\\\", \\\"message\\\": \\\"test error\\\"}}\");\n+\n+      try {\n+        client.getTemplate();\n+        fail(\"No error thrown for HTTP error\");\n+      } catch (FirebaseRemoteConfigException error) {\n+        checkExceptionFromHttpResponse(error, ErrorCode.INVALID_ARGUMENT);\n+      }\n+      checkGetRequestHeader(interceptor.getLastRequest());\n+    }\n+  }\n+\n+  @Test\n+  public void testGetTemplateErrorWithCanonicalCode() {\n+    for (int code : HTTP_ERRORS) {\n+      response.setStatusCode(code).setContent(\n+              \"{\\\"error\\\": {\\\"status\\\": \\\"NOT_FOUND\\\", \\\"message\\\": \\\"test error\\\"}}\");\n+\n+      try {\n+        client.getTemplate();\n+        fail(\"No error thrown for HTTP error\");\n+      } catch (FirebaseRemoteConfigException error) {\n+        checkExceptionFromHttpResponse(error, ErrorCode.NOT_FOUND);\n+      }\n+      checkGetRequestHeader(interceptor.getLastRequest());\n+    }\n+  }\n+\n+  @Test\n+  public void testGetTemplateErrorWithRcError() {\n+    for (int code : HTTP_ERRORS) {\n+      response.setStatusCode(code).setContent(\n+              \"{\\\"error\\\": {\\\"status\\\": \\\"INVALID_ARGUMENT\\\", \"\n+                      + \"\\\"message\\\": \\\"[INVALID_ARGUMENT]: test error\\\"}}\");\n+\n+      try {\n+        client.getTemplate();\n+        fail(\"No error thrown for HTTP error\");\n+      } catch (FirebaseRemoteConfigException error) {\n+        checkExceptionFromHttpResponse(error, ErrorCode.INVALID_ARGUMENT,\n+                RemoteConfigErrorCode.INVALID_ARGUMENT, \"[INVALID_ARGUMENT]: test error\");\n+      }\n+      checkGetRequestHeader(interceptor.getLastRequest());\n+    }\n+  }\n+\n+  @Test\n+  public void testGetTemplateErrorWithDetailsAndNoCode() {\n+    for (int code : HTTP_ERRORS) {\n+      response.setStatusCode(code).setContent(\n+              \"{\\\"error\\\": {\\\"status\\\": \\\"INVALID_ARGUMENT\\\", \"\n+                      + \"\\\"message\\\": \\\"test error\\\"}}\");\n+\n+      try {\n+        client.getTemplate();\n+        fail(\"No error thrown for HTTP error\");\n+      } catch (FirebaseRemoteConfigException error) {\n+        checkExceptionFromHttpResponse(error, ErrorCode.INVALID_ARGUMENT);\n+      }\n+      checkGetRequestHeader(interceptor.getLastRequest());\n+    }\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testBuilderNullProjectId() {\n+    fullyPopulatedBuilder().setProjectId(null).build();\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testBuilderEmptyProjectId() {\n+    fullyPopulatedBuilder().setProjectId(\"\").build();\n+  }\n+\n+  @Test(expected = NullPointerException.class)\n+  public void testBuilderNullRequestFactory() {\n+    fullyPopulatedBuilder().setRequestFactory(null).build();\n+  }\n+\n+  @Test(expected = NullPointerException.class)\n+  public void testBuilderNullChildRequestFactory() {\n+    fullyPopulatedBuilder().setChildRequestFactory(null).build();\n+  }\n+\n+  @Test\n+  public void testFromApp() throws IOException {\n+    FirebaseOptions options = FirebaseOptions.builder()\n+            .setCredentials(new MockGoogleCredentials(\"test-token\"))\n+            .setProjectId(\"test-project\")\n+            .build();\n+    FirebaseApp app = FirebaseApp.initializeApp(options);\n+\n+    try {\n+      FirebaseRemoteConfigClientImpl client = FirebaseRemoteConfigClientImpl.fromApp(app);\n+\n+      assertEquals(TEST_RC_URL, client.getRcSendUrl());\n+      assertSame(options.getJsonFactory(), client.getJsonFactory());\n+\n+      HttpRequest request = client.getRequestFactory().buildGetRequest(\n+              new GenericUrl(\"https://example.com\"));\n+      assertEquals(\"Bearer test-token\", request.getHeaders().getAuthorization());\n+\n+      request = client.getChildRequestFactory().buildGetRequest(\n+              new GenericUrl(\"https://example.com\"));\n+      assertNull(request.getHeaders().getAuthorization());\n+    } finally {\n+      app.delete();\n+    }\n+  }\n+\n+  private FirebaseRemoteConfigClientImpl initRemoteConfigClient(\n+          MockLowLevelHttpResponse mockResponse, HttpResponseInterceptor interceptor) {\n+    MockHttpTransport transport = new MockHttpTransport.Builder()\n+            .setLowLevelHttpResponse(mockResponse)\n+            .build();\n+\n+    return FirebaseRemoteConfigClientImpl.builder()\n+            .setProjectId(\"test-project\")\n+            .setJsonFactory(Utils.getDefaultJsonFactory())\n+            .setRequestFactory(transport.createRequestFactory())\n+            .setChildRequestFactory(Utils.getDefaultTransport().createRequestFactory())\n+            .setResponseInterceptor(interceptor)\n+            .build();\n+  }\n+\n+  private FirebaseRemoteConfigClientImpl initClientWithFaultyTransport() {\n+    HttpTransport transport = TestUtils.createFaultyHttpTransport();\n+    return FirebaseRemoteConfigClientImpl.builder()\n+            .setProjectId(\"test-project\")\n+            .setJsonFactory(Utils.getDefaultJsonFactory())\n+            .setRequestFactory(transport.createRequestFactory())\n+            .setChildRequestFactory(Utils.getDefaultTransport().createRequestFactory())\n+            .build();\n+  }\n+\n+  private FirebaseRemoteConfigClientImpl.Builder fullyPopulatedBuilder() {\n+    return FirebaseRemoteConfigClientImpl.builder()\n+            .setProjectId(\"test-project\")\n+            .setJsonFactory(Utils.getDefaultJsonFactory())\n+            .setRequestFactory(Utils.getDefaultTransport().createRequestFactory())\n+            .setChildRequestFactory(Utils.getDefaultTransport().createRequestFactory());\n+  }\n+\n+  private void checkGetRequestHeader(HttpRequest request) {\n+    assertEquals(\"GET\", request.getRequestMethod());\n+    assertEquals(TEST_RC_URL, request.getUrl().toString());\n+    HttpHeaders headers = request.getHeaders();\n+    assertEquals(\"2\", headers.get(\"X-GOOG-API-FORMAT-VERSION\"));\n+    assertEquals(\"fire-admin-java/\" + SdkUtils.getVersion(), headers.get(\"X-Firebase-Client\"));\n+    assertEquals(\"gzip\", headers.getFirstHeaderStringValue(\"Accept-Encoding\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07ec3047f51bbefef8560133a4ad0d0c614b9647"}, "originalPosition": 353}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4MDA0MA==", "bodyText": "Also test for error message.", "url": "https://github.com/firebase/firebase-admin-java/pull/477#discussion_r486680040", "createdAt": "2020-09-10T23:02:28Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java", "diffHunk": "@@ -0,0 +1,377 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import com.google.api.client.googleapis.util.Utils;\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpHeaders;\n+import com.google.api.client.http.HttpMethods;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpResponseException;\n+import com.google.api.client.http.HttpResponseInterceptor;\n+import com.google.api.client.http.HttpTransport;\n+import com.google.api.client.testing.http.MockHttpTransport;\n+import com.google.api.client.testing.http.MockLowLevelHttpResponse;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.ErrorCode;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.FirebaseOptions;\n+import com.google.firebase.OutgoingHttpRequest;\n+import com.google.firebase.auth.MockGoogleCredentials;\n+import com.google.firebase.internal.SdkUtils;\n+import com.google.firebase.testing.TestResponseInterceptor;\n+import com.google.firebase.testing.TestUtils;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class FirebaseRemoteConfigClientImplTest {\n+\n+  private static final String TEST_RC_URL =\n+          \"https://firebaseremoteconfig.googleapis.com/v1/projects/test-project/remoteConfig\";\n+\n+  private static final List<Integer> HTTP_ERRORS = ImmutableList.of(401, 404, 500);\n+\n+  private static final Map<Integer, ErrorCode> HTTP_2_ERROR = ImmutableMap.of(\n+          401, ErrorCode.UNAUTHENTICATED,\n+          404, ErrorCode.NOT_FOUND,\n+          500, ErrorCode.INTERNAL);\n+\n+  private static final String MOCK_TEMPLATE_RESPONSE = \"{\\\"conditions\\\": [], \\\"parameters\\\": {}}\";\n+\n+  private static final String TEST_ETAG = \"etag-123456789012-1\";\n+\n+  private MockLowLevelHttpResponse response;\n+  private TestResponseInterceptor interceptor;\n+  private FirebaseRemoteConfigClient client;\n+\n+  @Before\n+  public void setUp() {\n+    response = new MockLowLevelHttpResponse();\n+    interceptor = new TestResponseInterceptor();\n+    client = initRemoteConfigClient(response, interceptor);\n+  }\n+\n+  @Test\n+  public void testGetTemplate() throws Exception {\n+    response.addHeader(\"etag\", TEST_ETAG);\n+    response.setContent(MOCK_TEMPLATE_RESPONSE);\n+    RemoteConfigTemplate template = client.getTemplate();\n+\n+    assertEquals(TEST_ETAG, template.getETag());\n+    checkGetRequestHeader(interceptor.getLastRequest());\n+  }\n+\n+  @Test\n+  public void testGetTemplateWithInvalidEtags() {\n+    // Empty ETag\n+    response.addHeader(\"etag\", \"\");\n+    response.setContent(MOCK_TEMPLATE_RESPONSE);\n+    try {\n+      client.getTemplate();\n+      fail(\"No error thrown for invalid ETag\");\n+    } catch (FirebaseRemoteConfigException error) {\n+      assertEquals(ErrorCode.INTERNAL, error.getErrorCode());\n+      assertEquals(\"ETag header is not available in the server response.\", error.getMessage());\n+      assertEquals(RemoteConfigErrorCode.INTERNAL, error.getRemoteConfigErrorCode());\n+    }\n+    checkGetRequestHeader(interceptor.getLastRequest());\n+\n+    // ETag does not exist\n+    response.setContent(MOCK_TEMPLATE_RESPONSE);\n+    try {\n+      client.getTemplate();\n+      fail(\"No error thrown for invalid ETag\");\n+    } catch (FirebaseRemoteConfigException error) {\n+      assertEquals(ErrorCode.INTERNAL, error.getErrorCode());\n+      assertEquals(\"ETag header is not available in the server response.\", error.getMessage());\n+      assertEquals(RemoteConfigErrorCode.INTERNAL, error.getRemoteConfigErrorCode());\n+    }\n+    checkGetRequestHeader(interceptor.getLastRequest());\n+  }\n+\n+  @Test\n+  public void testGetTemplateHttpError() {\n+    for (int code : HTTP_ERRORS) {\n+      response.setStatusCode(code).setContent(\"{}\");\n+\n+      try {\n+        client.getTemplate();\n+        fail(\"No error thrown for HTTP error\");\n+      } catch (FirebaseRemoteConfigException error) {\n+        checkExceptionFromHttpResponse(error, HTTP_2_ERROR.get(code), null,\n+                \"Unexpected HTTP response with status: \" + code + \"\\n{}\");\n+      }\n+      checkGetRequestHeader(interceptor.getLastRequest());\n+    }\n+  }\n+\n+  @Test\n+  public void testGetTemplateTransportError() {\n+    client = initClientWithFaultyTransport();\n+\n+    try {\n+      client.getTemplate();\n+      fail(\"No error thrown for HTTP error\");\n+    } catch (FirebaseRemoteConfigException error) {\n+      assertEquals(ErrorCode.UNKNOWN, error.getErrorCode());\n+      assertEquals(\"Unknown error while making a remote service call: transport error\",\n+              error.getMessage());\n+      assertTrue(error.getCause() instanceof IOException);\n+      assertNull(error.getHttpResponse());\n+      assertNull(error.getRemoteConfigErrorCode());\n+    }\n+  }\n+\n+  @Test\n+  public void testGetTemplateSuccessResponseWithUnexpectedPayload() {\n+    response.setContent(\"not valid json\");\n+\n+    try {\n+      client.getTemplate();\n+      fail(\"No error thrown for malformed response\");\n+    } catch (FirebaseRemoteConfigException error) {\n+      assertEquals(ErrorCode.UNKNOWN, error.getErrorCode());\n+      assertTrue(error.getMessage().startsWith(\"Error while parsing HTTP response: \"));\n+      assertNotNull(error.getCause());\n+      assertNotNull(error.getHttpResponse());\n+      assertNull(error.getRemoteConfigErrorCode());\n+    }\n+    checkGetRequestHeader(interceptor.getLastRequest());\n+  }\n+\n+  @Test\n+  public void testGetTemplateErrorWithZeroContentResponse() {\n+    for (int code : HTTP_ERRORS) {\n+      response.setStatusCode(code).setZeroContent();\n+\n+      try {\n+        client.getTemplate();\n+        fail(\"No error thrown for HTTP error\");\n+      } catch (FirebaseRemoteConfigException error) {\n+        checkExceptionFromHttpResponse(error, HTTP_2_ERROR.get(code), null,\n+                \"Unexpected HTTP response with status: \" + code + \"\\nnull\");\n+      }\n+      checkGetRequestHeader(interceptor.getLastRequest());\n+    }\n+  }\n+\n+  @Test\n+  public void testGetTemplateErrorWithMalformedResponse() {\n+    for (int code : HTTP_ERRORS) {\n+      response.setStatusCode(code).setContent(\"not json\");\n+\n+      try {\n+        client.getTemplate();\n+        fail(\"No error thrown for HTTP error\");\n+      } catch (FirebaseRemoteConfigException error) {\n+        checkExceptionFromHttpResponse(error, HTTP_2_ERROR.get(code), null,\n+                \"Unexpected HTTP response with status: \" + code + \"\\nnot json\");\n+      }\n+      checkGetRequestHeader(interceptor.getLastRequest());\n+    }\n+  }\n+\n+  @Test\n+  public void testGetTemplateErrorWithDetails() {\n+    for (int code : HTTP_ERRORS) {\n+      response.setStatusCode(code).setContent(\n+              \"{\\\"error\\\": {\\\"status\\\": \\\"INVALID_ARGUMENT\\\", \\\"message\\\": \\\"test error\\\"}}\");\n+\n+      try {\n+        client.getTemplate();\n+        fail(\"No error thrown for HTTP error\");\n+      } catch (FirebaseRemoteConfigException error) {\n+        checkExceptionFromHttpResponse(error, ErrorCode.INVALID_ARGUMENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07ec3047f51bbefef8560133a4ad0d0c614b9647"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4MDMyMg==", "bodyText": ".equals(TEST_RC_URL)?", "url": "https://github.com/firebase/firebase-admin-java/pull/477#discussion_r486680322", "createdAt": "2020-09-10T23:03:21Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java", "diffHunk": "@@ -0,0 +1,377 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import com.google.api.client.googleapis.util.Utils;\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpHeaders;\n+import com.google.api.client.http.HttpMethods;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpResponseException;\n+import com.google.api.client.http.HttpResponseInterceptor;\n+import com.google.api.client.http.HttpTransport;\n+import com.google.api.client.testing.http.MockHttpTransport;\n+import com.google.api.client.testing.http.MockLowLevelHttpResponse;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.ErrorCode;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.FirebaseOptions;\n+import com.google.firebase.OutgoingHttpRequest;\n+import com.google.firebase.auth.MockGoogleCredentials;\n+import com.google.firebase.internal.SdkUtils;\n+import com.google.firebase.testing.TestResponseInterceptor;\n+import com.google.firebase.testing.TestUtils;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class FirebaseRemoteConfigClientImplTest {\n+\n+  private static final String TEST_RC_URL =\n+          \"https://firebaseremoteconfig.googleapis.com/v1/projects/test-project/remoteConfig\";\n+\n+  private static final List<Integer> HTTP_ERRORS = ImmutableList.of(401, 404, 500);\n+\n+  private static final Map<Integer, ErrorCode> HTTP_2_ERROR = ImmutableMap.of(\n+          401, ErrorCode.UNAUTHENTICATED,\n+          404, ErrorCode.NOT_FOUND,\n+          500, ErrorCode.INTERNAL);\n+\n+  private static final String MOCK_TEMPLATE_RESPONSE = \"{\\\"conditions\\\": [], \\\"parameters\\\": {}}\";\n+\n+  private static final String TEST_ETAG = \"etag-123456789012-1\";\n+\n+  private MockLowLevelHttpResponse response;\n+  private TestResponseInterceptor interceptor;\n+  private FirebaseRemoteConfigClient client;\n+\n+  @Before\n+  public void setUp() {\n+    response = new MockLowLevelHttpResponse();\n+    interceptor = new TestResponseInterceptor();\n+    client = initRemoteConfigClient(response, interceptor);\n+  }\n+\n+  @Test\n+  public void testGetTemplate() throws Exception {\n+    response.addHeader(\"etag\", TEST_ETAG);\n+    response.setContent(MOCK_TEMPLATE_RESPONSE);\n+    RemoteConfigTemplate template = client.getTemplate();\n+\n+    assertEquals(TEST_ETAG, template.getETag());\n+    checkGetRequestHeader(interceptor.getLastRequest());\n+  }\n+\n+  @Test\n+  public void testGetTemplateWithInvalidEtags() {\n+    // Empty ETag\n+    response.addHeader(\"etag\", \"\");\n+    response.setContent(MOCK_TEMPLATE_RESPONSE);\n+    try {\n+      client.getTemplate();\n+      fail(\"No error thrown for invalid ETag\");\n+    } catch (FirebaseRemoteConfigException error) {\n+      assertEquals(ErrorCode.INTERNAL, error.getErrorCode());\n+      assertEquals(\"ETag header is not available in the server response.\", error.getMessage());\n+      assertEquals(RemoteConfigErrorCode.INTERNAL, error.getRemoteConfigErrorCode());\n+    }\n+    checkGetRequestHeader(interceptor.getLastRequest());\n+\n+    // ETag does not exist\n+    response.setContent(MOCK_TEMPLATE_RESPONSE);\n+    try {\n+      client.getTemplate();\n+      fail(\"No error thrown for invalid ETag\");\n+    } catch (FirebaseRemoteConfigException error) {\n+      assertEquals(ErrorCode.INTERNAL, error.getErrorCode());\n+      assertEquals(\"ETag header is not available in the server response.\", error.getMessage());\n+      assertEquals(RemoteConfigErrorCode.INTERNAL, error.getRemoteConfigErrorCode());\n+    }\n+    checkGetRequestHeader(interceptor.getLastRequest());\n+  }\n+\n+  @Test\n+  public void testGetTemplateHttpError() {\n+    for (int code : HTTP_ERRORS) {\n+      response.setStatusCode(code).setContent(\"{}\");\n+\n+      try {\n+        client.getTemplate();\n+        fail(\"No error thrown for HTTP error\");\n+      } catch (FirebaseRemoteConfigException error) {\n+        checkExceptionFromHttpResponse(error, HTTP_2_ERROR.get(code), null,\n+                \"Unexpected HTTP response with status: \" + code + \"\\n{}\");\n+      }\n+      checkGetRequestHeader(interceptor.getLastRequest());\n+    }\n+  }\n+\n+  @Test\n+  public void testGetTemplateTransportError() {\n+    client = initClientWithFaultyTransport();\n+\n+    try {\n+      client.getTemplate();\n+      fail(\"No error thrown for HTTP error\");\n+    } catch (FirebaseRemoteConfigException error) {\n+      assertEquals(ErrorCode.UNKNOWN, error.getErrorCode());\n+      assertEquals(\"Unknown error while making a remote service call: transport error\",\n+              error.getMessage());\n+      assertTrue(error.getCause() instanceof IOException);\n+      assertNull(error.getHttpResponse());\n+      assertNull(error.getRemoteConfigErrorCode());\n+    }\n+  }\n+\n+  @Test\n+  public void testGetTemplateSuccessResponseWithUnexpectedPayload() {\n+    response.setContent(\"not valid json\");\n+\n+    try {\n+      client.getTemplate();\n+      fail(\"No error thrown for malformed response\");\n+    } catch (FirebaseRemoteConfigException error) {\n+      assertEquals(ErrorCode.UNKNOWN, error.getErrorCode());\n+      assertTrue(error.getMessage().startsWith(\"Error while parsing HTTP response: \"));\n+      assertNotNull(error.getCause());\n+      assertNotNull(error.getHttpResponse());\n+      assertNull(error.getRemoteConfigErrorCode());\n+    }\n+    checkGetRequestHeader(interceptor.getLastRequest());\n+  }\n+\n+  @Test\n+  public void testGetTemplateErrorWithZeroContentResponse() {\n+    for (int code : HTTP_ERRORS) {\n+      response.setStatusCode(code).setZeroContent();\n+\n+      try {\n+        client.getTemplate();\n+        fail(\"No error thrown for HTTP error\");\n+      } catch (FirebaseRemoteConfigException error) {\n+        checkExceptionFromHttpResponse(error, HTTP_2_ERROR.get(code), null,\n+                \"Unexpected HTTP response with status: \" + code + \"\\nnull\");\n+      }\n+      checkGetRequestHeader(interceptor.getLastRequest());\n+    }\n+  }\n+\n+  @Test\n+  public void testGetTemplateErrorWithMalformedResponse() {\n+    for (int code : HTTP_ERRORS) {\n+      response.setStatusCode(code).setContent(\"not json\");\n+\n+      try {\n+        client.getTemplate();\n+        fail(\"No error thrown for HTTP error\");\n+      } catch (FirebaseRemoteConfigException error) {\n+        checkExceptionFromHttpResponse(error, HTTP_2_ERROR.get(code), null,\n+                \"Unexpected HTTP response with status: \" + code + \"\\nnot json\");\n+      }\n+      checkGetRequestHeader(interceptor.getLastRequest());\n+    }\n+  }\n+\n+  @Test\n+  public void testGetTemplateErrorWithDetails() {\n+    for (int code : HTTP_ERRORS) {\n+      response.setStatusCode(code).setContent(\n+              \"{\\\"error\\\": {\\\"status\\\": \\\"INVALID_ARGUMENT\\\", \\\"message\\\": \\\"test error\\\"}}\");\n+\n+      try {\n+        client.getTemplate();\n+        fail(\"No error thrown for HTTP error\");\n+      } catch (FirebaseRemoteConfigException error) {\n+        checkExceptionFromHttpResponse(error, ErrorCode.INVALID_ARGUMENT);\n+      }\n+      checkGetRequestHeader(interceptor.getLastRequest());\n+    }\n+  }\n+\n+  @Test\n+  public void testGetTemplateErrorWithCanonicalCode() {\n+    for (int code : HTTP_ERRORS) {\n+      response.setStatusCode(code).setContent(\n+              \"{\\\"error\\\": {\\\"status\\\": \\\"NOT_FOUND\\\", \\\"message\\\": \\\"test error\\\"}}\");\n+\n+      try {\n+        client.getTemplate();\n+        fail(\"No error thrown for HTTP error\");\n+      } catch (FirebaseRemoteConfigException error) {\n+        checkExceptionFromHttpResponse(error, ErrorCode.NOT_FOUND);\n+      }\n+      checkGetRequestHeader(interceptor.getLastRequest());\n+    }\n+  }\n+\n+  @Test\n+  public void testGetTemplateErrorWithRcError() {\n+    for (int code : HTTP_ERRORS) {\n+      response.setStatusCode(code).setContent(\n+              \"{\\\"error\\\": {\\\"status\\\": \\\"INVALID_ARGUMENT\\\", \"\n+                      + \"\\\"message\\\": \\\"[INVALID_ARGUMENT]: test error\\\"}}\");\n+\n+      try {\n+        client.getTemplate();\n+        fail(\"No error thrown for HTTP error\");\n+      } catch (FirebaseRemoteConfigException error) {\n+        checkExceptionFromHttpResponse(error, ErrorCode.INVALID_ARGUMENT,\n+                RemoteConfigErrorCode.INVALID_ARGUMENT, \"[INVALID_ARGUMENT]: test error\");\n+      }\n+      checkGetRequestHeader(interceptor.getLastRequest());\n+    }\n+  }\n+\n+  @Test\n+  public void testGetTemplateErrorWithDetailsAndNoCode() {\n+    for (int code : HTTP_ERRORS) {\n+      response.setStatusCode(code).setContent(\n+              \"{\\\"error\\\": {\\\"status\\\": \\\"INVALID_ARGUMENT\\\", \"\n+                      + \"\\\"message\\\": \\\"test error\\\"}}\");\n+\n+      try {\n+        client.getTemplate();\n+        fail(\"No error thrown for HTTP error\");\n+      } catch (FirebaseRemoteConfigException error) {\n+        checkExceptionFromHttpResponse(error, ErrorCode.INVALID_ARGUMENT);\n+      }\n+      checkGetRequestHeader(interceptor.getLastRequest());\n+    }\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testBuilderNullProjectId() {\n+    fullyPopulatedBuilder().setProjectId(null).build();\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testBuilderEmptyProjectId() {\n+    fullyPopulatedBuilder().setProjectId(\"\").build();\n+  }\n+\n+  @Test(expected = NullPointerException.class)\n+  public void testBuilderNullRequestFactory() {\n+    fullyPopulatedBuilder().setRequestFactory(null).build();\n+  }\n+\n+  @Test(expected = NullPointerException.class)\n+  public void testBuilderNullChildRequestFactory() {\n+    fullyPopulatedBuilder().setChildRequestFactory(null).build();\n+  }\n+\n+  @Test\n+  public void testFromApp() throws IOException {\n+    FirebaseOptions options = FirebaseOptions.builder()\n+            .setCredentials(new MockGoogleCredentials(\"test-token\"))\n+            .setProjectId(\"test-project\")\n+            .build();\n+    FirebaseApp app = FirebaseApp.initializeApp(options);\n+\n+    try {\n+      FirebaseRemoteConfigClientImpl client = FirebaseRemoteConfigClientImpl.fromApp(app);\n+\n+      assertEquals(TEST_RC_URL, client.getRcSendUrl());\n+      assertSame(options.getJsonFactory(), client.getJsonFactory());\n+\n+      HttpRequest request = client.getRequestFactory().buildGetRequest(\n+              new GenericUrl(\"https://example.com\"));\n+      assertEquals(\"Bearer test-token\", request.getHeaders().getAuthorization());\n+\n+      request = client.getChildRequestFactory().buildGetRequest(\n+              new GenericUrl(\"https://example.com\"));\n+      assertNull(request.getHeaders().getAuthorization());\n+    } finally {\n+      app.delete();\n+    }\n+  }\n+\n+  private FirebaseRemoteConfigClientImpl initRemoteConfigClient(\n+          MockLowLevelHttpResponse mockResponse, HttpResponseInterceptor interceptor) {\n+    MockHttpTransport transport = new MockHttpTransport.Builder()\n+            .setLowLevelHttpResponse(mockResponse)\n+            .build();\n+\n+    return FirebaseRemoteConfigClientImpl.builder()\n+            .setProjectId(\"test-project\")\n+            .setJsonFactory(Utils.getDefaultJsonFactory())\n+            .setRequestFactory(transport.createRequestFactory())\n+            .setChildRequestFactory(Utils.getDefaultTransport().createRequestFactory())\n+            .setResponseInterceptor(interceptor)\n+            .build();\n+  }\n+\n+  private FirebaseRemoteConfigClientImpl initClientWithFaultyTransport() {\n+    HttpTransport transport = TestUtils.createFaultyHttpTransport();\n+    return FirebaseRemoteConfigClientImpl.builder()\n+            .setProjectId(\"test-project\")\n+            .setJsonFactory(Utils.getDefaultJsonFactory())\n+            .setRequestFactory(transport.createRequestFactory())\n+            .setChildRequestFactory(Utils.getDefaultTransport().createRequestFactory())\n+            .build();\n+  }\n+\n+  private FirebaseRemoteConfigClientImpl.Builder fullyPopulatedBuilder() {\n+    return FirebaseRemoteConfigClientImpl.builder()\n+            .setProjectId(\"test-project\")\n+            .setJsonFactory(Utils.getDefaultJsonFactory())\n+            .setRequestFactory(Utils.getDefaultTransport().createRequestFactory())\n+            .setChildRequestFactory(Utils.getDefaultTransport().createRequestFactory());\n+  }\n+\n+  private void checkGetRequestHeader(HttpRequest request) {\n+    assertEquals(\"GET\", request.getRequestMethod());\n+    assertEquals(TEST_RC_URL, request.getUrl().toString());\n+    HttpHeaders headers = request.getHeaders();\n+    assertEquals(\"2\", headers.get(\"X-GOOG-API-FORMAT-VERSION\"));\n+    assertEquals(\"fire-admin-java/\" + SdkUtils.getVersion(), headers.get(\"X-Firebase-Client\"));\n+    assertEquals(\"gzip\", headers.getFirstHeaderStringValue(\"Accept-Encoding\"));\n+  }\n+\n+  private void checkExceptionFromHttpResponse(\n+          FirebaseRemoteConfigException error,\n+          ErrorCode expectedCode) {\n+    checkExceptionFromHttpResponse(error, expectedCode, null, \"test error\");\n+  }\n+\n+  private void checkExceptionFromHttpResponse(\n+          FirebaseRemoteConfigException error,\n+          ErrorCode expectedCode,\n+          RemoteConfigErrorCode expectedRemoteConfigCode,\n+          String expectedMessage) {\n+    assertEquals(expectedCode, error.getErrorCode());\n+    assertEquals(expectedMessage, error.getMessage());\n+    assertTrue(error.getCause() instanceof HttpResponseException);\n+    assertEquals(expectedRemoteConfigCode, error.getRemoteConfigErrorCode());\n+\n+    assertNotNull(error.getHttpResponse());\n+    OutgoingHttpRequest request = error.getHttpResponse().getRequest();\n+    assertEquals(HttpMethods.GET, request.getMethod());\n+    assertTrue(request.getUrl().startsWith(\"https://firebaseremoteconfig.googleapis.com\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07ec3047f51bbefef8560133a4ad0d0c614b9647"}, "originalPosition": 375}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4MDk4Nw==", "bodyText": "Duplicate of testGetTemplateErrorWithDetails", "url": "https://github.com/firebase/firebase-admin-java/pull/477#discussion_r486680987", "createdAt": "2020-09-10T23:05:22Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java", "diffHunk": "@@ -0,0 +1,377 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import com.google.api.client.googleapis.util.Utils;\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpHeaders;\n+import com.google.api.client.http.HttpMethods;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpResponseException;\n+import com.google.api.client.http.HttpResponseInterceptor;\n+import com.google.api.client.http.HttpTransport;\n+import com.google.api.client.testing.http.MockHttpTransport;\n+import com.google.api.client.testing.http.MockLowLevelHttpResponse;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.ErrorCode;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.FirebaseOptions;\n+import com.google.firebase.OutgoingHttpRequest;\n+import com.google.firebase.auth.MockGoogleCredentials;\n+import com.google.firebase.internal.SdkUtils;\n+import com.google.firebase.testing.TestResponseInterceptor;\n+import com.google.firebase.testing.TestUtils;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class FirebaseRemoteConfigClientImplTest {\n+\n+  private static final String TEST_RC_URL =\n+          \"https://firebaseremoteconfig.googleapis.com/v1/projects/test-project/remoteConfig\";\n+\n+  private static final List<Integer> HTTP_ERRORS = ImmutableList.of(401, 404, 500);\n+\n+  private static final Map<Integer, ErrorCode> HTTP_2_ERROR = ImmutableMap.of(\n+          401, ErrorCode.UNAUTHENTICATED,\n+          404, ErrorCode.NOT_FOUND,\n+          500, ErrorCode.INTERNAL);\n+\n+  private static final String MOCK_TEMPLATE_RESPONSE = \"{\\\"conditions\\\": [], \\\"parameters\\\": {}}\";\n+\n+  private static final String TEST_ETAG = \"etag-123456789012-1\";\n+\n+  private MockLowLevelHttpResponse response;\n+  private TestResponseInterceptor interceptor;\n+  private FirebaseRemoteConfigClient client;\n+\n+  @Before\n+  public void setUp() {\n+    response = new MockLowLevelHttpResponse();\n+    interceptor = new TestResponseInterceptor();\n+    client = initRemoteConfigClient(response, interceptor);\n+  }\n+\n+  @Test\n+  public void testGetTemplate() throws Exception {\n+    response.addHeader(\"etag\", TEST_ETAG);\n+    response.setContent(MOCK_TEMPLATE_RESPONSE);\n+    RemoteConfigTemplate template = client.getTemplate();\n+\n+    assertEquals(TEST_ETAG, template.getETag());\n+    checkGetRequestHeader(interceptor.getLastRequest());\n+  }\n+\n+  @Test\n+  public void testGetTemplateWithInvalidEtags() {\n+    // Empty ETag\n+    response.addHeader(\"etag\", \"\");\n+    response.setContent(MOCK_TEMPLATE_RESPONSE);\n+    try {\n+      client.getTemplate();\n+      fail(\"No error thrown for invalid ETag\");\n+    } catch (FirebaseRemoteConfigException error) {\n+      assertEquals(ErrorCode.INTERNAL, error.getErrorCode());\n+      assertEquals(\"ETag header is not available in the server response.\", error.getMessage());\n+      assertEquals(RemoteConfigErrorCode.INTERNAL, error.getRemoteConfigErrorCode());\n+    }\n+    checkGetRequestHeader(interceptor.getLastRequest());\n+\n+    // ETag does not exist\n+    response.setContent(MOCK_TEMPLATE_RESPONSE);\n+    try {\n+      client.getTemplate();\n+      fail(\"No error thrown for invalid ETag\");\n+    } catch (FirebaseRemoteConfigException error) {\n+      assertEquals(ErrorCode.INTERNAL, error.getErrorCode());\n+      assertEquals(\"ETag header is not available in the server response.\", error.getMessage());\n+      assertEquals(RemoteConfigErrorCode.INTERNAL, error.getRemoteConfigErrorCode());\n+    }\n+    checkGetRequestHeader(interceptor.getLastRequest());\n+  }\n+\n+  @Test\n+  public void testGetTemplateHttpError() {\n+    for (int code : HTTP_ERRORS) {\n+      response.setStatusCode(code).setContent(\"{}\");\n+\n+      try {\n+        client.getTemplate();\n+        fail(\"No error thrown for HTTP error\");\n+      } catch (FirebaseRemoteConfigException error) {\n+        checkExceptionFromHttpResponse(error, HTTP_2_ERROR.get(code), null,\n+                \"Unexpected HTTP response with status: \" + code + \"\\n{}\");\n+      }\n+      checkGetRequestHeader(interceptor.getLastRequest());\n+    }\n+  }\n+\n+  @Test\n+  public void testGetTemplateTransportError() {\n+    client = initClientWithFaultyTransport();\n+\n+    try {\n+      client.getTemplate();\n+      fail(\"No error thrown for HTTP error\");\n+    } catch (FirebaseRemoteConfigException error) {\n+      assertEquals(ErrorCode.UNKNOWN, error.getErrorCode());\n+      assertEquals(\"Unknown error while making a remote service call: transport error\",\n+              error.getMessage());\n+      assertTrue(error.getCause() instanceof IOException);\n+      assertNull(error.getHttpResponse());\n+      assertNull(error.getRemoteConfigErrorCode());\n+    }\n+  }\n+\n+  @Test\n+  public void testGetTemplateSuccessResponseWithUnexpectedPayload() {\n+    response.setContent(\"not valid json\");\n+\n+    try {\n+      client.getTemplate();\n+      fail(\"No error thrown for malformed response\");\n+    } catch (FirebaseRemoteConfigException error) {\n+      assertEquals(ErrorCode.UNKNOWN, error.getErrorCode());\n+      assertTrue(error.getMessage().startsWith(\"Error while parsing HTTP response: \"));\n+      assertNotNull(error.getCause());\n+      assertNotNull(error.getHttpResponse());\n+      assertNull(error.getRemoteConfigErrorCode());\n+    }\n+    checkGetRequestHeader(interceptor.getLastRequest());\n+  }\n+\n+  @Test\n+  public void testGetTemplateErrorWithZeroContentResponse() {\n+    for (int code : HTTP_ERRORS) {\n+      response.setStatusCode(code).setZeroContent();\n+\n+      try {\n+        client.getTemplate();\n+        fail(\"No error thrown for HTTP error\");\n+      } catch (FirebaseRemoteConfigException error) {\n+        checkExceptionFromHttpResponse(error, HTTP_2_ERROR.get(code), null,\n+                \"Unexpected HTTP response with status: \" + code + \"\\nnull\");\n+      }\n+      checkGetRequestHeader(interceptor.getLastRequest());\n+    }\n+  }\n+\n+  @Test\n+  public void testGetTemplateErrorWithMalformedResponse() {\n+    for (int code : HTTP_ERRORS) {\n+      response.setStatusCode(code).setContent(\"not json\");\n+\n+      try {\n+        client.getTemplate();\n+        fail(\"No error thrown for HTTP error\");\n+      } catch (FirebaseRemoteConfigException error) {\n+        checkExceptionFromHttpResponse(error, HTTP_2_ERROR.get(code), null,\n+                \"Unexpected HTTP response with status: \" + code + \"\\nnot json\");\n+      }\n+      checkGetRequestHeader(interceptor.getLastRequest());\n+    }\n+  }\n+\n+  @Test\n+  public void testGetTemplateErrorWithDetails() {\n+    for (int code : HTTP_ERRORS) {\n+      response.setStatusCode(code).setContent(\n+              \"{\\\"error\\\": {\\\"status\\\": \\\"INVALID_ARGUMENT\\\", \\\"message\\\": \\\"test error\\\"}}\");\n+\n+      try {\n+        client.getTemplate();\n+        fail(\"No error thrown for HTTP error\");\n+      } catch (FirebaseRemoteConfigException error) {\n+        checkExceptionFromHttpResponse(error, ErrorCode.INVALID_ARGUMENT);\n+      }\n+      checkGetRequestHeader(interceptor.getLastRequest());\n+    }\n+  }\n+\n+  @Test\n+  public void testGetTemplateErrorWithCanonicalCode() {\n+    for (int code : HTTP_ERRORS) {\n+      response.setStatusCode(code).setContent(\n+              \"{\\\"error\\\": {\\\"status\\\": \\\"NOT_FOUND\\\", \\\"message\\\": \\\"test error\\\"}}\");\n+\n+      try {\n+        client.getTemplate();\n+        fail(\"No error thrown for HTTP error\");\n+      } catch (FirebaseRemoteConfigException error) {\n+        checkExceptionFromHttpResponse(error, ErrorCode.NOT_FOUND);\n+      }\n+      checkGetRequestHeader(interceptor.getLastRequest());\n+    }\n+  }\n+\n+  @Test\n+  public void testGetTemplateErrorWithRcError() {\n+    for (int code : HTTP_ERRORS) {\n+      response.setStatusCode(code).setContent(\n+              \"{\\\"error\\\": {\\\"status\\\": \\\"INVALID_ARGUMENT\\\", \"\n+                      + \"\\\"message\\\": \\\"[INVALID_ARGUMENT]: test error\\\"}}\");\n+\n+      try {\n+        client.getTemplate();\n+        fail(\"No error thrown for HTTP error\");\n+      } catch (FirebaseRemoteConfigException error) {\n+        checkExceptionFromHttpResponse(error, ErrorCode.INVALID_ARGUMENT,\n+                RemoteConfigErrorCode.INVALID_ARGUMENT, \"[INVALID_ARGUMENT]: test error\");\n+      }\n+      checkGetRequestHeader(interceptor.getLastRequest());\n+    }\n+  }\n+\n+  @Test\n+  public void testGetTemplateErrorWithDetailsAndNoCode() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07ec3047f51bbefef8560133a4ad0d0c614b9647"}, "originalPosition": 252}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MTI2MjU1", "url": "https://github.com/firebase/firebase-admin-java/pull/477#pullrequestreview-487126255", "createdAt": "2020-09-11T21:10:14Z", "commit": {"oid": "02301efd1f438041d6c2333be60d6cad956faf3d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMToxMDoxNFrOHQt9Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMToxNzo0MFrOHQuH3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI5MjI1MA==", "bodyText": "Perhaps checkState is more appropriate here.", "url": "https://github.com/firebase/firebase-admin-java/pull/477#discussion_r487292250", "createdAt": "2020-09-11T21:10:14Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImpl.java", "diffHunk": "@@ -75,49 +75,34 @@ private FirebaseRemoteConfigClientImpl(Builder builder) {\n   }\n \n   @VisibleForTesting\n-  String getRcSendUrl() {\n-    return rcSendUrl;\n+  String getRemoteConfigUrl() {\n+    return remoteConfigUrl;\n   }\n \n   @VisibleForTesting\n   HttpRequestFactory getRequestFactory() {\n     return requestFactory;\n   }\n \n-  @VisibleForTesting\n-  HttpRequestFactory getChildRequestFactory() {\n-    return childRequestFactory;\n-  }\n-\n   @VisibleForTesting\n   JsonFactory getJsonFactory() {\n     return jsonFactory;\n   }\n \n   @Override\n   public RemoteConfigTemplate getTemplate() throws FirebaseRemoteConfigException {\n-    HttpRequestInfo request = HttpRequestInfo.buildGetRequest(rcSendUrl)\n+    HttpRequestInfo request = HttpRequestInfo.buildGetRequest(remoteConfigUrl)\n             .addAllHeaders(COMMON_HEADERS);\n     IncomingHttpResponse response = httpClient.send(request);\n     RemoteConfigTemplate parsed = httpClient.parse(response, RemoteConfigTemplate.class);\n \n     List<String> etagList = (List<String>) response.getHeaders().get(\"etag\");\n-\n-    if (etagList == null || etagList.isEmpty()) {\n-      throw new FirebaseRemoteConfigException(\n-              ErrorCode.INTERNAL,\n-              \"ETag header is not available in the server response.\", null, null,\n-              RemoteConfigErrorCode.INTERNAL);\n-    }\n+    checkArgument(!(etagList == null || etagList.isEmpty()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02301efd1f438041d6c2333be60d6cad956faf3d"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI5MjUzNw==", "bodyText": "Also checkState(etagList != null && !etagList.isEmpty())", "url": "https://github.com/firebase/firebase-admin-java/pull/477#discussion_r487292537", "createdAt": "2020-09-11T21:10:59Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImpl.java", "diffHunk": "@@ -75,49 +75,34 @@ private FirebaseRemoteConfigClientImpl(Builder builder) {\n   }\n \n   @VisibleForTesting\n-  String getRcSendUrl() {\n-    return rcSendUrl;\n+  String getRemoteConfigUrl() {\n+    return remoteConfigUrl;\n   }\n \n   @VisibleForTesting\n   HttpRequestFactory getRequestFactory() {\n     return requestFactory;\n   }\n \n-  @VisibleForTesting\n-  HttpRequestFactory getChildRequestFactory() {\n-    return childRequestFactory;\n-  }\n-\n   @VisibleForTesting\n   JsonFactory getJsonFactory() {\n     return jsonFactory;\n   }\n \n   @Override\n   public RemoteConfigTemplate getTemplate() throws FirebaseRemoteConfigException {\n-    HttpRequestInfo request = HttpRequestInfo.buildGetRequest(rcSendUrl)\n+    HttpRequestInfo request = HttpRequestInfo.buildGetRequest(remoteConfigUrl)\n             .addAllHeaders(COMMON_HEADERS);\n     IncomingHttpResponse response = httpClient.send(request);\n     RemoteConfigTemplate parsed = httpClient.parse(response, RemoteConfigTemplate.class);\n \n     List<String> etagList = (List<String>) response.getHeaders().get(\"etag\");\n-\n-    if (etagList == null || etagList.isEmpty()) {\n-      throw new FirebaseRemoteConfigException(\n-              ErrorCode.INTERNAL,\n-              \"ETag header is not available in the server response.\", null, null,\n-              RemoteConfigErrorCode.INTERNAL);\n-    }\n+    checkArgument(!(etagList == null || etagList.isEmpty()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02301efd1f438041d6c2333be60d6cad956faf3d"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI5MzAxNw==", "bodyText": "Here too. I'd even recommend adding a getETag(IncomingResponse resp) helper method, and doing all the validation there.", "url": "https://github.com/firebase/firebase-admin-java/pull/477#discussion_r487293017", "createdAt": "2020-09-11T21:12:08Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImpl.java", "diffHunk": "@@ -75,49 +75,34 @@ private FirebaseRemoteConfigClientImpl(Builder builder) {\n   }\n \n   @VisibleForTesting\n-  String getRcSendUrl() {\n-    return rcSendUrl;\n+  String getRemoteConfigUrl() {\n+    return remoteConfigUrl;\n   }\n \n   @VisibleForTesting\n   HttpRequestFactory getRequestFactory() {\n     return requestFactory;\n   }\n \n-  @VisibleForTesting\n-  HttpRequestFactory getChildRequestFactory() {\n-    return childRequestFactory;\n-  }\n-\n   @VisibleForTesting\n   JsonFactory getJsonFactory() {\n     return jsonFactory;\n   }\n \n   @Override\n   public RemoteConfigTemplate getTemplate() throws FirebaseRemoteConfigException {\n-    HttpRequestInfo request = HttpRequestInfo.buildGetRequest(rcSendUrl)\n+    HttpRequestInfo request = HttpRequestInfo.buildGetRequest(remoteConfigUrl)\n             .addAllHeaders(COMMON_HEADERS);\n     IncomingHttpResponse response = httpClient.send(request);\n     RemoteConfigTemplate parsed = httpClient.parse(response, RemoteConfigTemplate.class);\n \n     List<String> etagList = (List<String>) response.getHeaders().get(\"etag\");\n-\n-    if (etagList == null || etagList.isEmpty()) {\n-      throw new FirebaseRemoteConfigException(\n-              ErrorCode.INTERNAL,\n-              \"ETag header is not available in the server response.\", null, null,\n-              RemoteConfigErrorCode.INTERNAL);\n-    }\n+    checkArgument(!(etagList == null || etagList.isEmpty()),\n+            \"ETag header is not available in the server response.\");\n \n     String etag = etagList.get(0);\n-\n-    if (Strings.isNullOrEmpty(etag)) {\n-      throw new FirebaseRemoteConfigException(\n-              ErrorCode.INTERNAL,\n-              \"ETag header is not available in the server response.\", null, null,\n-              RemoteConfigErrorCode.INTERNAL);\n-    }\n+    checkArgument(!Strings.isNullOrEmpty(etag),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02301efd1f438041d6c2333be60d6cad956faf3d"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI5NDc4Mg==", "bodyText": "This happens automatically at the AbstractPlatformErrorHandler. You only need to extract the RC error code from the message.", "url": "https://github.com/firebase/firebase-admin-java/pull/477#discussion_r487294782", "createdAt": "2020-09-11T21:17:11Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/internal/RemoteConfigServiceErrorResponse.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig.internal;\n+\n+import com.google.api.client.json.GenericJson;\n+import com.google.api.client.util.Key;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.internal.Nullable;\n+import com.google.firebase.remoteconfig.RemoteConfigErrorCode;\n+\n+import java.util.Map;\n+\n+/**\n+ * The DTO for parsing error responses from the Remote Config service.\n+ * These error messages take the form,\n+ * `\"error\": {\"code\": 123, \"message\": \"[CODE]: Message Details\", \"status\": \"ERROR_STATUS\"}`\n+ */\n+public class RemoteConfigServiceErrorResponse extends GenericJson {\n+\n+  private static final Map<String, RemoteConfigErrorCode> RC_ERROR_CODES =\n+          ImmutableMap.<String, RemoteConfigErrorCode>builder()\n+                  .put(\"INTERNAL\", RemoteConfigErrorCode.INTERNAL)\n+                  .put(\"INVALID_ARGUMENT\", RemoteConfigErrorCode.INVALID_ARGUMENT)\n+                  .build();\n+\n+  @Key(\"error\")\n+  private Map<String, Object> error;\n+\n+  public String getStatus() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3Mzc5Mw=="}, "originalCommit": {"oid": "07ec3047f51bbefef8560133a4ad0d0c614b9647"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI5NDk0MQ==", "bodyText": "You will still need to parse this to extract the RC error code.", "url": "https://github.com/firebase/firebase-admin-java/pull/477#discussion_r487294941", "createdAt": "2020-09-11T21:17:40Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/internal/RemoteConfigServiceErrorResponse.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig.internal;\n+\n+import com.google.api.client.json.GenericJson;\n+import com.google.api.client.util.Key;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.internal.Nullable;\n+import com.google.firebase.remoteconfig.RemoteConfigErrorCode;\n+\n+import java.util.Map;\n+\n+/**\n+ * The DTO for parsing error responses from the Remote Config service.\n+ * These error messages take the form,\n+ * `\"error\": {\"code\": 123, \"message\": \"[CODE]: Message Details\", \"status\": \"ERROR_STATUS\"}`\n+ */\n+public class RemoteConfigServiceErrorResponse extends GenericJson {\n+\n+  private static final Map<String, RemoteConfigErrorCode> RC_ERROR_CODES =\n+          ImmutableMap.<String, RemoteConfigErrorCode>builder()\n+                  .put(\"INTERNAL\", RemoteConfigErrorCode.INTERNAL)\n+                  .put(\"INVALID_ARGUMENT\", RemoteConfigErrorCode.INVALID_ARGUMENT)\n+                  .build();\n+\n+  @Key(\"error\")\n+  private Map<String, Object> error;\n+\n+  public String getStatus() {\n+    if (error == null) {\n+      return null;\n+    }\n+\n+    return (String) error.get(\"status\");\n+  }\n+\n+  @Nullable\n+  public RemoteConfigErrorCode getRemoteConfigErrorCode() {\n+    if (error == null) {\n+      return null;\n+    }\n+\n+    String message = getErrorMessage();\n+    if (Strings.isNullOrEmpty(message)) {\n+      return null;\n+    }\n+\n+    int separator = message.indexOf(':');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3Njk4Mw=="}, "originalCommit": {"oid": "07ec3047f51bbefef8560133a4ad0d0c614b9647"}, "originalPosition": 63}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "64efe893a4c87896d163c620390f308deca5f152", "author": {"user": null}, "url": "https://github.com/firebase/firebase-admin-java/commit/64efe893a4c87896d163c620390f308deca5f152", "committedDate": "2020-09-14T18:12:04Z", "message": "Improve error handling"}, "afterCommit": {"oid": "426fe785cdd626bf9edfef425d8984231b6ae5d7", "author": {"user": null}, "url": "https://github.com/firebase/firebase-admin-java/commit/426fe785cdd626bf9edfef425d8984231b6ae5d7", "committedDate": "2020-09-14T18:14:29Z", "message": "Improve error handling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MjMxMzQ4", "url": "https://github.com/firebase/firebase-admin-java/pull/477#pullrequestreview-488231348", "createdAt": "2020-09-14T23:55:34Z", "commit": {"oid": "426fe785cdd626bf9edfef425d8984231b6ae5d7"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzo1NTozNFrOHRritg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzo1NTozNFrOHRritg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwMTIzOA==", "bodyText": "Pattern.compile() could be expensive. Pre-compute it and store as a static constant.", "url": "https://github.com/firebase/firebase-admin-java/pull/477#discussion_r488301238", "createdAt": "2020-09-14T23:55:34Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/internal/RemoteConfigServiceErrorResponse.java", "diffHunk": "@@ -60,9 +54,9 @@ public RemoteConfigErrorCode getRemoteConfigErrorCode() {\n       return null;\n     }\n \n-    int separator = message.indexOf(':');\n-    if (separator != -1) {\n-      String errorCode = message.substring(0, separator).replaceAll(\"\\\\[|\\\\]\", \"\");\n+    Matcher errorMatcher = Pattern.compile(\"^\\\\[(\\\\w+)\\\\]:.*$\").matcher(message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "426fe785cdd626bf9edfef425d8984231b6ae5d7"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c13d8893534ef723158a9bb9a8ea50257f4c2e7d", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/c13d8893534ef723158a9bb9a8ea50257f4c2e7d", "committedDate": "2020-09-15T17:35:45Z", "message": "Add initial classes for Remote Config API\nAdd unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71151f80cadab869f73de197a8a4ee35278f1c1e", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/71151f80cadab869f73de197a8a4ee35278f1c1e", "committedDate": "2020-09-15T17:36:11Z", "message": "PR fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6152cca2a89f8d2753d1a83978fa1cb7f0cac20", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/e6152cca2a89f8d2753d1a83978fa1cb7f0cac20", "committedDate": "2020-09-15T17:36:16Z", "message": "Improve error handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52319e96ef6b105e47a62ea2df22bb313b5fa8f1", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/52319e96ef6b105e47a62ea2df22bb313b5fa8f1", "committedDate": "2020-09-15T17:36:23Z", "message": "Pre compute error matching pattern"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "643fc74e1186054f2c1a92e5cb2fe4aa908463ab", "author": {"user": null}, "url": "https://github.com/firebase/firebase-admin-java/commit/643fc74e1186054f2c1a92e5cb2fe4aa908463ab", "committedDate": "2020-09-15T15:37:44Z", "message": "Pre compute error matching pattern"}, "afterCommit": {"oid": "52319e96ef6b105e47a62ea2df22bb313b5fa8f1", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/52319e96ef6b105e47a62ea2df22bb313b5fa8f1", "committedDate": "2020-09-15T17:36:23Z", "message": "Pre compute error matching pattern"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2757, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}