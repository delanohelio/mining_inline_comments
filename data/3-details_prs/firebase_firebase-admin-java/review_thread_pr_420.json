{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MTcwOTkz", "number": 420, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMDo0MToxN1rOD-cAaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMjo1OToxNFrOD-xw2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Nzk3MTYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMDo0MToxN1rOGYih0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjo0ODoxNFrOGYkcJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM4NDcyMg==", "bodyText": "SAML auth provider config", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428384722", "createdAt": "2020-05-21T00:41:17Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -1186,6 +1186,86 @@ protected Void execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Creates a new provider SAML Auth config with the attributes contained in the specified {@link", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28db8336e0010958b39af6c654b9e0cc5df5c2c8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxNjAzNw==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428416037", "createdAt": "2020-05-21T02:48:14Z", "author": {"login": "micahstairs"}, "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -1186,6 +1186,86 @@ protected Void execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Creates a new provider SAML Auth config with the attributes contained in the specified {@link", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM4NDcyMg=="}, "originalCommit": {"oid": "28db8336e0010958b39af6c654b9e0cc5df5c2c8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Nzk3MjQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMDo0MTo1NVrOGYiiVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjo1MDo0OFrOGYkezw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM4NDg1NA==", "bodyText": "Also check for prefix and throw?", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428384854", "createdAt": "2020-05-21T00:41:55Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -1186,6 +1186,86 @@ protected Void execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Creates a new provider SAML Auth config with the attributes contained in the specified {@link\n+   * SamlProviderConfig.CreateRequest}.\n+   *\n+   * @param request A non-null {@link SamlProviderConfig.CreateRequest} instance.\n+   * @return An {@link SamlProviderConfig} instance corresponding to the newly created provider\n+   *     config.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws FirebaseAuthException if an error occurs while creating the provider config.\n+   */\n+  public SamlProviderConfig createSamlProviderConfig(\n+      @NonNull SamlProviderConfig.CreateRequest request) throws FirebaseAuthException {\n+    return createSamlProviderConfigOp(request).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #createSamlProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param request A non-null {@link SamlProviderConfig.CreateRequest} instance.\n+   * @return An {@code ApiFuture} which will complete successfully with a {@link SamlProviderConfig}\n+   *     instance corresponding to the newly created provider config. If an error occurs while\n+   *     creating the provider config, the future throws a {@link FirebaseAuthException}.\n+   * @throws NullPointerException if the provided request is null.\n+   */\n+  public ApiFuture<SamlProviderConfig> createSamlProviderConfigAsync(\n+      @NonNull SamlProviderConfig.CreateRequest request) {\n+    return createSamlProviderConfigOp(request).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<SamlProviderConfig, FirebaseAuthException>\n+      createSamlProviderConfigOp(final SamlProviderConfig.CreateRequest request) {\n+    checkNotDestroyed();\n+    checkNotNull(request, \"Create request must not be null.\");\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<SamlProviderConfig, FirebaseAuthException>() {\n+      @Override\n+      protected SamlProviderConfig execute() throws FirebaseAuthException {\n+        return userManager.createSamlProviderConfig(request);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Deletes the SAML Auth provider config identified by the specified provider ID.\n+   *\n+   * @param providerId A provider ID string.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty.\n+   * @throws FirebaseAuthException If an error occurs while deleting the provider config.\n+   */\n+  public void deleteSamlProviderConfig(@NonNull String providerId) throws FirebaseAuthException {\n+    deleteSamlProviderConfigOp(providerId).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #deleteSamlProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param providerId A provider ID string.\n+   * @return An {@code ApiFuture} which will complete successfully when the specified provider\n+   *     config has been deleted. If an error occurs while deleting the provider config, the future\n+   *     throws a {@link FirebaseAuthException}.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty.\n+   */\n+  public ApiFuture<Void> deleteSamlProviderConfigAsync(String providerId) {\n+    return deleteSamlProviderConfigOp(providerId).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<Void, FirebaseAuthException> deleteSamlProviderConfigOp(\n+      final String providerId) {\n+    checkNotDestroyed();\n+    checkArgument(!Strings.isNullOrEmpty(providerId), \"Provider ID must not be null or empty.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28db8336e0010958b39af6c654b9e0cc5df5c2c8"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxNjcxOQ==", "bodyText": "Sure! I've decided to add a static SamlProviderConfig.checkSamlProviderId method so that we don't duplicate the logic in too many places.\nAlso made the relevant changes for OIDC provider config checks too.", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428416719", "createdAt": "2020-05-21T02:50:48Z", "author": {"login": "micahstairs"}, "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -1186,6 +1186,86 @@ protected Void execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Creates a new provider SAML Auth config with the attributes contained in the specified {@link\n+   * SamlProviderConfig.CreateRequest}.\n+   *\n+   * @param request A non-null {@link SamlProviderConfig.CreateRequest} instance.\n+   * @return An {@link SamlProviderConfig} instance corresponding to the newly created provider\n+   *     config.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws FirebaseAuthException if an error occurs while creating the provider config.\n+   */\n+  public SamlProviderConfig createSamlProviderConfig(\n+      @NonNull SamlProviderConfig.CreateRequest request) throws FirebaseAuthException {\n+    return createSamlProviderConfigOp(request).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #createSamlProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param request A non-null {@link SamlProviderConfig.CreateRequest} instance.\n+   * @return An {@code ApiFuture} which will complete successfully with a {@link SamlProviderConfig}\n+   *     instance corresponding to the newly created provider config. If an error occurs while\n+   *     creating the provider config, the future throws a {@link FirebaseAuthException}.\n+   * @throws NullPointerException if the provided request is null.\n+   */\n+  public ApiFuture<SamlProviderConfig> createSamlProviderConfigAsync(\n+      @NonNull SamlProviderConfig.CreateRequest request) {\n+    return createSamlProviderConfigOp(request).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<SamlProviderConfig, FirebaseAuthException>\n+      createSamlProviderConfigOp(final SamlProviderConfig.CreateRequest request) {\n+    checkNotDestroyed();\n+    checkNotNull(request, \"Create request must not be null.\");\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<SamlProviderConfig, FirebaseAuthException>() {\n+      @Override\n+      protected SamlProviderConfig execute() throws FirebaseAuthException {\n+        return userManager.createSamlProviderConfig(request);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Deletes the SAML Auth provider config identified by the specified provider ID.\n+   *\n+   * @param providerId A provider ID string.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty.\n+   * @throws FirebaseAuthException If an error occurs while deleting the provider config.\n+   */\n+  public void deleteSamlProviderConfig(@NonNull String providerId) throws FirebaseAuthException {\n+    deleteSamlProviderConfigOp(providerId).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #deleteSamlProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param providerId A provider ID string.\n+   * @return An {@code ApiFuture} which will complete successfully when the specified provider\n+   *     config has been deleted. If an error occurs while deleting the provider config, the future\n+   *     throws a {@link FirebaseAuthException}.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty.\n+   */\n+  public ApiFuture<Void> deleteSamlProviderConfigAsync(String providerId) {\n+    return deleteSamlProviderConfigOp(providerId).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<Void, FirebaseAuthException> deleteSamlProviderConfigOp(\n+      final String providerId) {\n+    checkNotDestroyed();\n+    checkArgument(!Strings.isNullOrEmpty(providerId), \"Provider ID must not be null or empty.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM4NDg1NA=="}, "originalCommit": {"oid": "28db8336e0010958b39af6c654b9e0cc5df5c2c8"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Nzk3NDUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMDo0MzowOVrOGYijiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMzoxODozNVrOGYk4LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM4NTE2MA==", "bodyText": "Ideally all argument validation should happen outside the CallableOperation. This looks like it would validate the request parameters within the CallableOperation.", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428385160", "createdAt": "2020-05-21T00:43:09Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -1186,6 +1186,86 @@ protected Void execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Creates a new provider SAML Auth config with the attributes contained in the specified {@link\n+   * SamlProviderConfig.CreateRequest}.\n+   *\n+   * @param request A non-null {@link SamlProviderConfig.CreateRequest} instance.\n+   * @return An {@link SamlProviderConfig} instance corresponding to the newly created provider\n+   *     config.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws FirebaseAuthException if an error occurs while creating the provider config.\n+   */\n+  public SamlProviderConfig createSamlProviderConfig(\n+      @NonNull SamlProviderConfig.CreateRequest request) throws FirebaseAuthException {\n+    return createSamlProviderConfigOp(request).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #createSamlProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param request A non-null {@link SamlProviderConfig.CreateRequest} instance.\n+   * @return An {@code ApiFuture} which will complete successfully with a {@link SamlProviderConfig}\n+   *     instance corresponding to the newly created provider config. If an error occurs while\n+   *     creating the provider config, the future throws a {@link FirebaseAuthException}.\n+   * @throws NullPointerException if the provided request is null.\n+   */\n+  public ApiFuture<SamlProviderConfig> createSamlProviderConfigAsync(\n+      @NonNull SamlProviderConfig.CreateRequest request) {\n+    return createSamlProviderConfigOp(request).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<SamlProviderConfig, FirebaseAuthException>\n+      createSamlProviderConfigOp(final SamlProviderConfig.CreateRequest request) {\n+    checkNotDestroyed();\n+    checkNotNull(request, \"Create request must not be null.\");\n+    final FirebaseUserManager userManager = getUserManager();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28db8336e0010958b39af6c654b9e0cc5df5c2c8"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMzIxMg==", "bodyText": "Okay, I've moved it for both createSamlProviderConfigOp and createOidcProviderConfigOp. I've added TODOs for a couple other operations that were starting to get out of scope for this PR.", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428423212", "createdAt": "2020-05-21T03:18:35Z", "author": {"login": "micahstairs"}, "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -1186,6 +1186,86 @@ protected Void execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Creates a new provider SAML Auth config with the attributes contained in the specified {@link\n+   * SamlProviderConfig.CreateRequest}.\n+   *\n+   * @param request A non-null {@link SamlProviderConfig.CreateRequest} instance.\n+   * @return An {@link SamlProviderConfig} instance corresponding to the newly created provider\n+   *     config.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws FirebaseAuthException if an error occurs while creating the provider config.\n+   */\n+  public SamlProviderConfig createSamlProviderConfig(\n+      @NonNull SamlProviderConfig.CreateRequest request) throws FirebaseAuthException {\n+    return createSamlProviderConfigOp(request).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #createSamlProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param request A non-null {@link SamlProviderConfig.CreateRequest} instance.\n+   * @return An {@code ApiFuture} which will complete successfully with a {@link SamlProviderConfig}\n+   *     instance corresponding to the newly created provider config. If an error occurs while\n+   *     creating the provider config, the future throws a {@link FirebaseAuthException}.\n+   * @throws NullPointerException if the provided request is null.\n+   */\n+  public ApiFuture<SamlProviderConfig> createSamlProviderConfigAsync(\n+      @NonNull SamlProviderConfig.CreateRequest request) {\n+    return createSamlProviderConfigOp(request).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<SamlProviderConfig, FirebaseAuthException>\n+      createSamlProviderConfigOp(final SamlProviderConfig.CreateRequest request) {\n+    checkNotDestroyed();\n+    checkNotNull(request, \"Create request must not be null.\");\n+    final FirebaseUserManager userManager = getUserManager();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM4NTE2MA=="}, "originalCommit": {"oid": "28db8336e0010958b39af6c654b9e0cc5df5c2c8"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Nzk4NzY5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMDo1MDo1NlrOGYirqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxODoyODo1OFrOGY-BHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM4NzI0MA==", "bodyText": "Just a hunch. See if you can use GenericJson in place of Map<String, Object>. If it works, it would clean things up a bit.", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428387240", "createdAt": "2020-05-21T00:50:56Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java", "diffHunk": "@@ -1730,17 +1730,207 @@ public void testDeleteProviderConfigWithNotFoundError() throws Exception {\n   }\n \n   @Test\n-  public void testTenantAwareDeleteProviderConfig() throws Exception {\n+  public void testTenantAwareDeleteOidcProviderConfig() throws Exception {\n     TestResponseInterceptor interceptor = initializeAppForTenantAwareUserManagement(\n         \"TENANT_ID\",\n         \"{}\");\n     TenantAwareFirebaseAuth tenantAwareAuth =\n         FirebaseAuth.getInstance().getTenantManager().getAuthForTenant(\"TENANT_ID\");\n \n-    tenantAwareAuth.deleteOidcProviderConfig(\"PROVIDER_ID\");\n+    tenantAwareAuth.deleteOidcProviderConfig(\"oidc.provider-id\");\n \n     checkRequestHeaders(interceptor);\n-    checkUrl(interceptor, \"DELETE\", TENANTS_BASE_URL + \"/TENANT_ID/oauthIdpConfigs/PROVIDER_ID\");\n+    String expectedUrl = TENANTS_BASE_URL + \"/TENANT_ID/oauthIdpConfigs/oidc.provider-id\";\n+    checkUrl(interceptor, \"DELETE\", expectedUrl);\n+  }\n+\n+  @Test\n+  public void testCreateSamlProvider() throws Exception {\n+    TestResponseInterceptor interceptor = initializeAppForUserManagement(\n+        TestUtils.loadResource(\"saml.json\"));\n+    // TODO(micahstairs): Add 'signRequest' to the create request once that field is added to\n+    // SamlProviderConfig.\n+    SamlProviderConfig.CreateRequest createRequest =\n+        new SamlProviderConfig.CreateRequest()\n+          .setProviderId(\"saml.provider-id\")\n+          .setDisplayName(\"DISPLAY_NAME\")\n+          .setEnabled(true)\n+          .setIdpEntityId(\"IDP_ENTITY_ID\")\n+          .setSsoUrl(\"https://example.com/login\")\n+          .addX509Certificate(\"certificate1\")\n+          .addX509Certificate(\"certificate2\")\n+          .setRpEntityId(\"RP_ENTITY_ID\")\n+          .setCallbackUrl(\"https://projectId.firebaseapp.com/__/auth/handler\");\n+\n+    SamlProviderConfig config = FirebaseAuth.getInstance().createSamlProviderConfig(createRequest);\n+\n+    checkSamlProviderConfig(config, \"saml.provider-id\");\n+    checkRequestHeaders(interceptor);\n+    checkUrl(interceptor, \"POST\", PROJECT_BASE_URL + \"/inboundSamlConfigs\");\n+    GenericUrl url = interceptor.getResponse().getRequest().getUrl();\n+    assertEquals(\"saml.provider-id\", url.getFirst(\"inboundSamlConfigId\"));\n+\n+    GenericJson parsed = parseRequestContent(interceptor);\n+    assertEquals(\"DISPLAY_NAME\", parsed.get(\"displayName\"));\n+    assertTrue((boolean) parsed.get(\"enabled\"));\n+    Map<String, Object> idpConfig = (Map<String, Object>) parsed.get(\"idpConfig\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28db8336e0010958b39af6c654b9e0cc5df5c2c8"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwMzM1Mw==", "bodyText": "If I try to cast it to GenericJson I get the following error:\njava.lang.ClassCastException: com.google.api.client.util.ArrayMap cannot be cast to com.google.api.client.json.GenericJson", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428403353", "createdAt": "2020-05-21T01:56:26Z", "author": {"login": "micahstairs"}, "path": "src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java", "diffHunk": "@@ -1730,17 +1730,207 @@ public void testDeleteProviderConfigWithNotFoundError() throws Exception {\n   }\n \n   @Test\n-  public void testTenantAwareDeleteProviderConfig() throws Exception {\n+  public void testTenantAwareDeleteOidcProviderConfig() throws Exception {\n     TestResponseInterceptor interceptor = initializeAppForTenantAwareUserManagement(\n         \"TENANT_ID\",\n         \"{}\");\n     TenantAwareFirebaseAuth tenantAwareAuth =\n         FirebaseAuth.getInstance().getTenantManager().getAuthForTenant(\"TENANT_ID\");\n \n-    tenantAwareAuth.deleteOidcProviderConfig(\"PROVIDER_ID\");\n+    tenantAwareAuth.deleteOidcProviderConfig(\"oidc.provider-id\");\n \n     checkRequestHeaders(interceptor);\n-    checkUrl(interceptor, \"DELETE\", TENANTS_BASE_URL + \"/TENANT_ID/oauthIdpConfigs/PROVIDER_ID\");\n+    String expectedUrl = TENANTS_BASE_URL + \"/TENANT_ID/oauthIdpConfigs/oidc.provider-id\";\n+    checkUrl(interceptor, \"DELETE\", expectedUrl);\n+  }\n+\n+  @Test\n+  public void testCreateSamlProvider() throws Exception {\n+    TestResponseInterceptor interceptor = initializeAppForUserManagement(\n+        TestUtils.loadResource(\"saml.json\"));\n+    // TODO(micahstairs): Add 'signRequest' to the create request once that field is added to\n+    // SamlProviderConfig.\n+    SamlProviderConfig.CreateRequest createRequest =\n+        new SamlProviderConfig.CreateRequest()\n+          .setProviderId(\"saml.provider-id\")\n+          .setDisplayName(\"DISPLAY_NAME\")\n+          .setEnabled(true)\n+          .setIdpEntityId(\"IDP_ENTITY_ID\")\n+          .setSsoUrl(\"https://example.com/login\")\n+          .addX509Certificate(\"certificate1\")\n+          .addX509Certificate(\"certificate2\")\n+          .setRpEntityId(\"RP_ENTITY_ID\")\n+          .setCallbackUrl(\"https://projectId.firebaseapp.com/__/auth/handler\");\n+\n+    SamlProviderConfig config = FirebaseAuth.getInstance().createSamlProviderConfig(createRequest);\n+\n+    checkSamlProviderConfig(config, \"saml.provider-id\");\n+    checkRequestHeaders(interceptor);\n+    checkUrl(interceptor, \"POST\", PROJECT_BASE_URL + \"/inboundSamlConfigs\");\n+    GenericUrl url = interceptor.getResponse().getRequest().getUrl();\n+    assertEquals(\"saml.provider-id\", url.getFirst(\"inboundSamlConfigId\"));\n+\n+    GenericJson parsed = parseRequestContent(interceptor);\n+    assertEquals(\"DISPLAY_NAME\", parsed.get(\"displayName\"));\n+    assertTrue((boolean) parsed.get(\"enabled\"));\n+    Map<String, Object> idpConfig = (Map<String, Object>) parsed.get(\"idpConfig\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM4NzI0MA=="}, "originalCommit": {"oid": "28db8336e0010958b39af6c654b9e0cc5df5c2c8"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzNTEwMQ==", "bodyText": "Thanks for checking.", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428835101", "createdAt": "2020-05-21T18:28:58Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java", "diffHunk": "@@ -1730,17 +1730,207 @@ public void testDeleteProviderConfigWithNotFoundError() throws Exception {\n   }\n \n   @Test\n-  public void testTenantAwareDeleteProviderConfig() throws Exception {\n+  public void testTenantAwareDeleteOidcProviderConfig() throws Exception {\n     TestResponseInterceptor interceptor = initializeAppForTenantAwareUserManagement(\n         \"TENANT_ID\",\n         \"{}\");\n     TenantAwareFirebaseAuth tenantAwareAuth =\n         FirebaseAuth.getInstance().getTenantManager().getAuthForTenant(\"TENANT_ID\");\n \n-    tenantAwareAuth.deleteOidcProviderConfig(\"PROVIDER_ID\");\n+    tenantAwareAuth.deleteOidcProviderConfig(\"oidc.provider-id\");\n \n     checkRequestHeaders(interceptor);\n-    checkUrl(interceptor, \"DELETE\", TENANTS_BASE_URL + \"/TENANT_ID/oauthIdpConfigs/PROVIDER_ID\");\n+    String expectedUrl = TENANTS_BASE_URL + \"/TENANT_ID/oauthIdpConfigs/oidc.provider-id\";\n+    checkUrl(interceptor, \"DELETE\", expectedUrl);\n+  }\n+\n+  @Test\n+  public void testCreateSamlProvider() throws Exception {\n+    TestResponseInterceptor interceptor = initializeAppForUserManagement(\n+        TestUtils.loadResource(\"saml.json\"));\n+    // TODO(micahstairs): Add 'signRequest' to the create request once that field is added to\n+    // SamlProviderConfig.\n+    SamlProviderConfig.CreateRequest createRequest =\n+        new SamlProviderConfig.CreateRequest()\n+          .setProviderId(\"saml.provider-id\")\n+          .setDisplayName(\"DISPLAY_NAME\")\n+          .setEnabled(true)\n+          .setIdpEntityId(\"IDP_ENTITY_ID\")\n+          .setSsoUrl(\"https://example.com/login\")\n+          .addX509Certificate(\"certificate1\")\n+          .addX509Certificate(\"certificate2\")\n+          .setRpEntityId(\"RP_ENTITY_ID\")\n+          .setCallbackUrl(\"https://projectId.firebaseapp.com/__/auth/handler\");\n+\n+    SamlProviderConfig config = FirebaseAuth.getInstance().createSamlProviderConfig(createRequest);\n+\n+    checkSamlProviderConfig(config, \"saml.provider-id\");\n+    checkRequestHeaders(interceptor);\n+    checkUrl(interceptor, \"POST\", PROJECT_BASE_URL + \"/inboundSamlConfigs\");\n+    GenericUrl url = interceptor.getResponse().getRequest().getUrl();\n+    assertEquals(\"saml.provider-id\", url.getFirst(\"inboundSamlConfigId\"));\n+\n+    GenericJson parsed = parseRequestContent(interceptor);\n+    assertEquals(\"DISPLAY_NAME\", parsed.get(\"displayName\"));\n+    assertTrue((boolean) parsed.get(\"enabled\"));\n+    Map<String, Object> idpConfig = (Map<String, Object>) parsed.get(\"idpConfig\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM4NzI0MA=="}, "originalCommit": {"oid": "28db8336e0010958b39af6c654b9e0cc5df5c2c8"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDc2NTc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxODoyOTo1NFrOGY-DFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxOTo1OToyM1rOGZA2KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzNTYwNQ==", "bodyText": "This still reads a bit weird. Shouldn't it be a new OIDC auth provider config...?", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428835605", "createdAt": "2020-05-21T18:29:54Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -939,13 +939,15 @@ protected String execute() throws FirebaseAuthException {\n   }\n \n   /**\n-   * Creates a new provider OIDC Auth config with the attributes contained in the specified {@link\n-   * OidcProviderConfig.CreateRequest}.\n+   * Creates a new provider OIDC Auth provider config with the attributes contained in the specified", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06d1db98d27963373cc71fe00f8fe6d8995d5b2e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg4MTQ0OQ==", "bodyText": "Sorry, thanks for catching that typo.", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428881449", "createdAt": "2020-05-21T19:59:23Z", "author": {"login": "micahstairs"}, "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -939,13 +939,15 @@ protected String execute() throws FirebaseAuthException {\n   }\n \n   /**\n-   * Creates a new provider OIDC Auth config with the attributes contained in the specified {@link\n-   * OidcProviderConfig.CreateRequest}.\n+   * Creates a new provider OIDC Auth provider config with the attributes contained in the specified", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzNTYwNQ=="}, "originalCommit": {"oid": "06d1db98d27963373cc71fe00f8fe6d8995d5b2e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDc3MzczOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/OidcProviderConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxODozMjozNFrOGY-Iaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMToyNjo1NFrOGZDdog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzNjk3MQ==", "bodyText": "Seems we can remove this helper method now and just call checkOidcProviderId() in its place.", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428836971", "createdAt": "2020-05-21T18:32:34Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/OidcProviderConfig.java", "diffHunk": "@@ -102,7 +108,7 @@ CreateRequest getThis() {\n     }\n \n     void assertValidProviderIdFormat(String providerId) {\n-      checkArgument(providerId.startsWith(\"oidc.\"), \"Invalid OIDC provider ID: \" + providerId);\n+      checkOidcProviderId(providerId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06d1db98d27963373cc71fe00f8fe6d8995d5b2e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkyNDMyMg==", "bodyText": "Restructured to make this possible.", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428924322", "createdAt": "2020-05-21T21:26:54Z", "author": {"login": "micahstairs"}, "path": "src/main/java/com/google/firebase/auth/OidcProviderConfig.java", "diffHunk": "@@ -102,7 +108,7 @@ CreateRequest getThis() {\n     }\n \n     void assertValidProviderIdFormat(String providerId) {\n-      checkArgument(providerId.startsWith(\"oidc.\"), \"Invalid OIDC provider ID: \" + providerId);\n+      checkOidcProviderId(providerId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzNjk3MQ=="}, "originalCommit": {"oid": "06d1db98d27963373cc71fe00f8fe6d8995d5b2e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDc4NTM2OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/google/firebase/auth/OidcProviderConfigTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxODozNjoyMlrOGY-P8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxOTo1OTozMVrOGZA2bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzODg5Ng==", "bodyText": "OidcProviderConfig", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428838896", "createdAt": "2020-05-21T18:36:22Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/auth/OidcProviderConfigTest.java", "diffHunk": "@@ -51,6 +51,26 @@ public void testJsonDeserialization() throws IOException {\n     assertEquals(\"https://oidc.com/issuer\", config.getIssuer());\n   }\n \n+  @Test\n+  public void testCheckSamlProviderId() {\n+    SamlProviderConfig.checkSamlProviderId(\"saml.valid-id\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06d1db98d27963373cc71fe00f8fe6d8995d5b2e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg4MTUxNw==", "bodyText": "Fixed.", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428881517", "createdAt": "2020-05-21T19:59:31Z", "author": {"login": "micahstairs"}, "path": "src/test/java/com/google/firebase/auth/OidcProviderConfigTest.java", "diffHunk": "@@ -51,6 +51,26 @@ public void testJsonDeserialization() throws IOException {\n     assertEquals(\"https://oidc.com/issuer\", config.getIssuer());\n   }\n \n+  @Test\n+  public void testCheckSamlProviderId() {\n+    SamlProviderConfig.checkSamlProviderId(\"saml.valid-id\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzODg5Ng=="}, "originalCommit": {"oid": "06d1db98d27963373cc71fe00f8fe6d8995d5b2e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDc4OTcyOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/google/firebase/auth/OidcProviderConfigTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxODozNzoyOFrOGY-Sgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMToyNjozM1rOGZDdBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzOTU1NQ==", "bodyText": "Is there a better way capture these tests without directly testing on internal methods? May be run tests on public methods getProviderConfig() and deleteProviderConfig() with invalid arguments to verify this behavior.", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428839555", "createdAt": "2020-05-21T18:37:28Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/auth/OidcProviderConfigTest.java", "diffHunk": "@@ -51,6 +51,26 @@ public void testJsonDeserialization() throws IOException {\n     assertEquals(\"https://oidc.com/issuer\", config.getIssuer());\n   }\n \n+  @Test\n+  public void testCheckSamlProviderId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06d1db98d27963373cc71fe00f8fe6d8995d5b2e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkyNDE2Ng==", "bodyText": "I've moved the testing to the API level!", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428924166", "createdAt": "2020-05-21T21:26:33Z", "author": {"login": "micahstairs"}, "path": "src/test/java/com/google/firebase/auth/OidcProviderConfigTest.java", "diffHunk": "@@ -51,6 +51,26 @@ public void testJsonDeserialization() throws IOException {\n     assertEquals(\"https://oidc.com/issuer\", config.getIssuer());\n   }\n \n+  @Test\n+  public void testCheckSamlProviderId() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzOTU1NQ=="}, "originalCommit": {"oid": "06d1db98d27963373cc71fe00f8fe6d8995d5b2e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDgwMjUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/SamlProviderConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxODo0MTozOVrOGY-arA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMToyNjo0MVrOGZDdSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg0MTY0NA==", "bodyText": "Remove this helper as well.", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428841644", "createdAt": "2020-05-21T18:41:39Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/SamlProviderConfig.java", "diffHunk": "@@ -183,7 +189,7 @@ CreateRequest getThis() {\n     }\n \n     void assertValidProviderIdFormat(String providerId) {\n-      checkArgument(providerId.startsWith(\"saml.\"), \"Invalid SAML provider ID: \" + providerId);\n+      checkSamlProviderId(providerId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06d1db98d27963373cc71fe00f8fe6d8995d5b2e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkyNDIzMw==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428924233", "createdAt": "2020-05-21T21:26:41Z", "author": {"login": "micahstairs"}, "path": "src/main/java/com/google/firebase/auth/SamlProviderConfig.java", "diffHunk": "@@ -183,7 +189,7 @@ CreateRequest getThis() {\n     }\n \n     void assertValidProviderIdFormat(String providerId) {\n-      checkArgument(providerId.startsWith(\"saml.\"), \"Invalid SAML provider ID: \" + providerId);\n+      checkSamlProviderId(providerId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg0MTY0NA=="}, "originalCommit": {"oid": "06d1db98d27963373cc71fe00f8fe6d8995d5b2e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTUzNjI1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMjo1OToxNFrOGZFmbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMzoxOToxNFrOGZF8ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk1OTM0MQ==", "bodyText": "Nit: You can also pass a value like saml.InvallidProviderId here so the invalid prefix will get tested more explicitly.", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428959341", "createdAt": "2020-05-21T22:59:14Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java", "diffHunk": "@@ -1606,6 +1606,32 @@ public void testGetOidcProviderConfig() throws Exception {\n     checkUrl(interceptor, \"GET\", PROJECT_BASE_URL + \"/oauthIdpConfigs/oidc.provider-id\");\n   }\n \n+  @Test\n+  public void testGetOidcProviderConfigMissingId() throws Exception {\n+    TestResponseInterceptor interceptor = initializeAppForUserManagement(\n+        TestUtils.loadResource(\"oidc.json\"));\n+\n+    try {\n+      FirebaseAuth.getInstance().getOidcProviderConfig(null);\n+      fail(\"No error thrown for missing provider ID.\");\n+    } catch (IllegalArgumentException e) {\n+      // Expected.\n+    }\n+  }\n+\n+  @Test\n+  public void testGetOidcProviderConfigInvalidId() throws Exception {\n+    TestResponseInterceptor interceptor = initializeAppForUserManagement(\n+        TestUtils.loadResource(\"oidc.json\"));\n+\n+    try {\n+      FirebaseAuth.getInstance().getOidcProviderConfig(\"not a valid provider ID\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "907c4953f80379c689948c2f8abcf5916940a130"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk2NTAyMg==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428965022", "createdAt": "2020-05-21T23:19:14Z", "author": {"login": "micahstairs"}, "path": "src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java", "diffHunk": "@@ -1606,6 +1606,32 @@ public void testGetOidcProviderConfig() throws Exception {\n     checkUrl(interceptor, \"GET\", PROJECT_BASE_URL + \"/oauthIdpConfigs/oidc.provider-id\");\n   }\n \n+  @Test\n+  public void testGetOidcProviderConfigMissingId() throws Exception {\n+    TestResponseInterceptor interceptor = initializeAppForUserManagement(\n+        TestUtils.loadResource(\"oidc.json\"));\n+\n+    try {\n+      FirebaseAuth.getInstance().getOidcProviderConfig(null);\n+      fail(\"No error thrown for missing provider ID.\");\n+    } catch (IllegalArgumentException e) {\n+      // Expected.\n+    }\n+  }\n+\n+  @Test\n+  public void testGetOidcProviderConfigInvalidId() throws Exception {\n+    TestResponseInterceptor interceptor = initializeAppForUserManagement(\n+        TestUtils.loadResource(\"oidc.json\"));\n+\n+    try {\n+      FirebaseAuth.getInstance().getOidcProviderConfig(\"not a valid provider ID\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk1OTM0MQ=="}, "originalCommit": {"oid": "907c4953f80379c689948c2f8abcf5916940a130"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1588, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}