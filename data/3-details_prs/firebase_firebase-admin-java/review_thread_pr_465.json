{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNDI0NjQx", "number": 465, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMToyODowNlrOEYPiVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjozNDowNFrOEYQlag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODU1ODMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/ErrorCode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMToyODowNlrOHAeVpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMToyODowNlrOHAeVpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI1OTExMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * A specified resource is not found, or the request is rejected by undisclosed reasons,\n          \n          \n            \n               * such as whitelisting.\n          \n          \n            \n               * A specified resource is not found, or the request is rejected for unknown reasons,\n          \n          \n            \n               * such as a blocked network address.", "url": "https://github.com/firebase/firebase-admin-java/pull/465#discussion_r470259110", "createdAt": "2020-08-13T21:28:06Z", "author": {"login": "kevinthecheung"}, "path": "src/main/java/com/google/firebase/ErrorCode.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase;\n+\n+/**\n+ * Platform-wide error codes that can be raised by Admin SDK APIs.\n+ */\n+public enum ErrorCode {\n+\n+  /**\n+   * Client specified an invalid argument.\n+   */\n+  INVALID_ARGUMENT,\n+\n+  /**\n+   * Request can not be executed in the current system state, such as deleting a non-empty\n+   * directory.\n+   */\n+  FAILED_PRECONDITION,\n+\n+  /**\n+   * Client specified an invalid range.\n+   */\n+  OUT_OF_RANGE,\n+\n+  /**\n+   * Request not authenticated due to missing, invalid, or expired OAuth token.\n+   */\n+  UNAUTHENTICATED,\n+\n+  /**\n+   * Client does not have sufficient permission. This can happen because the OAuth token does\n+   * not have the right scopes, the client doesn't have permission, or the API has not been\n+   * enabled for the client project.\n+   */\n+  PERMISSION_DENIED,\n+\n+  /**\n+   * A specified resource is not found, or the request is rejected by undisclosed reasons,\n+   * such as whitelisting.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b413c7ab64fcf2af657b55e578647559cf2bcd61"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODU2MDI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/ErrorCode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMToyODo0MFrOHAeW0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDoyMDo1M1rOHAiSbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI1OTQxMQ==", "bodyText": "Intentional dupe?", "url": "https://github.com/firebase/firebase-admin-java/pull/465#discussion_r470259411", "createdAt": "2020-08-13T21:28:40Z", "author": {"login": "kevinthecheung"}, "path": "src/main/java/com/google/firebase/ErrorCode.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase;\n+\n+/**\n+ * Platform-wide error codes that can be raised by Admin SDK APIs.\n+ */\n+public enum ErrorCode {\n+\n+  /**\n+   * Client specified an invalid argument.\n+   */\n+  INVALID_ARGUMENT,\n+\n+  /**\n+   * Request can not be executed in the current system state, such as deleting a non-empty\n+   * directory.\n+   */\n+  FAILED_PRECONDITION,\n+\n+  /**\n+   * Client specified an invalid range.\n+   */\n+  OUT_OF_RANGE,\n+\n+  /**\n+   * Request not authenticated due to missing, invalid, or expired OAuth token.\n+   */\n+  UNAUTHENTICATED,\n+\n+  /**\n+   * Client does not have sufficient permission. This can happen because the OAuth token does\n+   * not have the right scopes, the client doesn't have permission, or the API has not been\n+   * enabled for the client project.\n+   */\n+  PERMISSION_DENIED,\n+\n+  /**\n+   * A specified resource is not found, or the request is rejected by undisclosed reasons,\n+   * such as whitelisting.\n+   */\n+  NOT_FOUND,\n+\n+  /**\n+   * Concurrency conflict, such as read-modify-write conflict.\n+   */\n+  CONFLICT,\n+\n+  /**\n+   * Concurrency conflict, such as read-modify-write conflict.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b413c7ab64fcf2af657b55e578647559cf2bcd61"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMyMzgyMw==", "bodyText": "Yes. These 2 error codes are identical in semantics. We should be able to fold them into one in a future major release.", "url": "https://github.com/firebase/firebase-admin-java/pull/465#discussion_r470323823", "createdAt": "2020-08-14T00:20:53Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/ErrorCode.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase;\n+\n+/**\n+ * Platform-wide error codes that can be raised by Admin SDK APIs.\n+ */\n+public enum ErrorCode {\n+\n+  /**\n+   * Client specified an invalid argument.\n+   */\n+  INVALID_ARGUMENT,\n+\n+  /**\n+   * Request can not be executed in the current system state, such as deleting a non-empty\n+   * directory.\n+   */\n+  FAILED_PRECONDITION,\n+\n+  /**\n+   * Client specified an invalid range.\n+   */\n+  OUT_OF_RANGE,\n+\n+  /**\n+   * Request not authenticated due to missing, invalid, or expired OAuth token.\n+   */\n+  UNAUTHENTICATED,\n+\n+  /**\n+   * Client does not have sufficient permission. This can happen because the OAuth token does\n+   * not have the right scopes, the client doesn't have permission, or the API has not been\n+   * enabled for the client project.\n+   */\n+  PERMISSION_DENIED,\n+\n+  /**\n+   * A specified resource is not found, or the request is rejected by undisclosed reasons,\n+   * such as whitelisting.\n+   */\n+  NOT_FOUND,\n+\n+  /**\n+   * Concurrency conflict, such as read-modify-write conflict.\n+   */\n+  CONFLICT,\n+\n+  /**\n+   * Concurrency conflict, such as read-modify-write conflict.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI1OTQxMQ=="}, "originalCommit": {"oid": "b413c7ab64fcf2af657b55e578647559cf2bcd61"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODU2Mjg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/ErrorCode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMToyOTozMFrOHAeYcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMToyOTozMFrOHAeYcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI1OTgyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Either out of resource quota or reaching rate limiting.\n          \n          \n            \n               * Either out of resource quota or rate limited.", "url": "https://github.com/firebase/firebase-admin-java/pull/465#discussion_r470259825", "createdAt": "2020-08-13T21:29:30Z", "author": {"login": "kevinthecheung"}, "path": "src/main/java/com/google/firebase/ErrorCode.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase;\n+\n+/**\n+ * Platform-wide error codes that can be raised by Admin SDK APIs.\n+ */\n+public enum ErrorCode {\n+\n+  /**\n+   * Client specified an invalid argument.\n+   */\n+  INVALID_ARGUMENT,\n+\n+  /**\n+   * Request can not be executed in the current system state, such as deleting a non-empty\n+   * directory.\n+   */\n+  FAILED_PRECONDITION,\n+\n+  /**\n+   * Client specified an invalid range.\n+   */\n+  OUT_OF_RANGE,\n+\n+  /**\n+   * Request not authenticated due to missing, invalid, or expired OAuth token.\n+   */\n+  UNAUTHENTICATED,\n+\n+  /**\n+   * Client does not have sufficient permission. This can happen because the OAuth token does\n+   * not have the right scopes, the client doesn't have permission, or the API has not been\n+   * enabled for the client project.\n+   */\n+  PERMISSION_DENIED,\n+\n+  /**\n+   * A specified resource is not found, or the request is rejected by undisclosed reasons,\n+   * such as whitelisting.\n+   */\n+  NOT_FOUND,\n+\n+  /**\n+   * Concurrency conflict, such as read-modify-write conflict.\n+   */\n+  CONFLICT,\n+\n+  /**\n+   * Concurrency conflict, such as read-modify-write conflict.\n+   */\n+  ABORTED,\n+\n+  /**\n+   * The resource that a client tried to create already exists.\n+   */\n+  ALREADY_EXISTS,\n+\n+  /**\n+   * Either out of resource quota or reaching rate limiting.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b413c7ab64fcf2af657b55e578647559cf2bcd61"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODY0NzI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/ErrorCode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjowMDowNVrOHAfLGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjowMDowNVrOHAfLGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3Mjc5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /**\n          \n          \n            \n               * Request can not be executed in the current system state, such as deleting a non-empty\n          \n          \n            \n               * directory.\n          \n          \n            \n              /**\n          \n          \n            \n               * Request cannot be executed in the current system state, such as deleting a non-empty\n          \n          \n            \n               * directory.", "url": "https://github.com/firebase/firebase-admin-java/pull/465#discussion_r470272794", "createdAt": "2020-08-13T22:00:05Z", "author": {"login": "egilmorez"}, "path": "src/main/java/com/google/firebase/ErrorCode.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase;\n+\n+/**\n+ * Platform-wide error codes that can be raised by Admin SDK APIs.\n+ */\n+public enum ErrorCode {\n+\n+  /**\n+   * Client specified an invalid argument.\n+   */\n+  INVALID_ARGUMENT,\n+\n+  /**\n+   * Request can not be executed in the current system state, such as deleting a non-empty\n+   * directory.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b413c7ab64fcf2af657b55e578647559cf2bcd61"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODY1NjEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/ErrorCode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjowMzoxNFrOHAfQNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjowMzoxNFrOHAfQNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NDEwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /**\n          \n          \n            \n               * Request deadline exceeded. This will happen only if the caller sets a deadline that is\n          \n          \n            \n               * shorter than the method's default deadline (i.e. requested deadline is not enough for the\n          \n          \n            \n              /**\n          \n          \n            \n               * Request deadline exceeded. This happens only if the caller sets a deadline that is\n          \n          \n            \n               * shorter than the method's default deadline (i.e. requested deadline is not enough for the", "url": "https://github.com/firebase/firebase-admin-java/pull/465#discussion_r470274100", "createdAt": "2020-08-13T22:03:14Z", "author": {"login": "egilmorez"}, "path": "src/main/java/com/google/firebase/ErrorCode.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase;\n+\n+/**\n+ * Platform-wide error codes that can be raised by Admin SDK APIs.\n+ */\n+public enum ErrorCode {\n+\n+  /**\n+   * Client specified an invalid argument.\n+   */\n+  INVALID_ARGUMENT,\n+\n+  /**\n+   * Request can not be executed in the current system state, such as deleting a non-empty\n+   * directory.\n+   */\n+  FAILED_PRECONDITION,\n+\n+  /**\n+   * Client specified an invalid range.\n+   */\n+  OUT_OF_RANGE,\n+\n+  /**\n+   * Request not authenticated due to missing, invalid, or expired OAuth token.\n+   */\n+  UNAUTHENTICATED,\n+\n+  /**\n+   * Client does not have sufficient permission. This can happen because the OAuth token does\n+   * not have the right scopes, the client doesn't have permission, or the API has not been\n+   * enabled for the client project.\n+   */\n+  PERMISSION_DENIED,\n+\n+  /**\n+   * A specified resource is not found, or the request is rejected by undisclosed reasons,\n+   * such as whitelisting.\n+   */\n+  NOT_FOUND,\n+\n+  /**\n+   * Concurrency conflict, such as read-modify-write conflict.\n+   */\n+  CONFLICT,\n+\n+  /**\n+   * Concurrency conflict, such as read-modify-write conflict.\n+   */\n+  ABORTED,\n+\n+  /**\n+   * The resource that a client tried to create already exists.\n+   */\n+  ALREADY_EXISTS,\n+\n+  /**\n+   * Either out of resource quota or reaching rate limiting.\n+   */\n+  RESOURCE_EXHAUSTED,\n+\n+  /**\n+   * Request cancelled by the client.\n+   */\n+  CANCELLED,\n+\n+  /**\n+   * Unrecoverable data loss or data corruption. The client should report the error to the user.\n+   */\n+  DATA_LOSS,\n+\n+  /**\n+   * Unknown server error. Typically a server bug.\n+   */\n+  UNKNOWN,\n+\n+  /**\n+   * Internal server error. Typically a server bug.\n+   */\n+  INTERNAL,\n+\n+  /**\n+   * Service unavailable. Typically the server is down.\n+   */\n+  UNAVAILABLE,\n+\n+  /**\n+   * Request deadline exceeded. This will happen only if the caller sets a deadline that is\n+   * shorter than the method's default deadline (i.e. requested deadline is not enough for the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b413c7ab64fcf2af657b55e578647559cf2bcd61"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODY2Mjg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/FirebaseOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjowNjowNFrOHAfUVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozNTowN1rOHAi3mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NTE1OA==", "bodyText": "Should \"Builder\" be a literal?", "url": "https://github.com/firebase/firebase-admin-java/pull/465#discussion_r470275158", "createdAt": "2020-08-13T22:06:04Z", "author": {"login": "egilmorez"}, "path": "src/main/java/com/google/firebase/FirebaseOptions.java", "diffHunk": "@@ -223,6 +223,16 @@ public static Builder builder() {\n     return new Builder();\n   }\n \n+  /**\n+   * Creates a new Builder from the options object.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b413c7ab64fcf2af657b55e578647559cf2bcd61"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzMzMzNg==", "bodyText": "Fixed", "url": "https://github.com/firebase/firebase-admin-java/pull/465#discussion_r470333336", "createdAt": "2020-08-14T00:35:07Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/FirebaseOptions.java", "diffHunk": "@@ -223,6 +223,16 @@ public static Builder builder() {\n     return new Builder();\n   }\n \n+  /**\n+   * Creates a new Builder from the options object.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NTE1OA=="}, "originalCommit": {"oid": "b413c7ab64fcf2af657b55e578647559cf2bcd61"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODY2NDkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/FirebaseOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjowNjo1NlrOHAfVhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjowNjo1NlrOHAfVhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NTQ2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * <p>The new builder is not backed by this object's values, that is changes made to the new\n          \n          \n            \n               * builder don't change the values of the origin object.\n          \n          \n            \n               */\n          \n          \n            \n               * <p>The new builder is not backed by this object's values; that is, changes made to the new\n          \n          \n            \n               * builder don't change the values of the origin object.\n          \n          \n            \n               */", "url": "https://github.com/firebase/firebase-admin-java/pull/465#discussion_r470275463", "createdAt": "2020-08-13T22:06:56Z", "author": {"login": "egilmorez"}, "path": "src/main/java/com/google/firebase/FirebaseOptions.java", "diffHunk": "@@ -223,6 +223,16 @@ public static Builder builder() {\n     return new Builder();\n   }\n \n+  /**\n+   * Creates a new Builder from the options object.\n+   *\n+   * <p>The new builder is not backed by this object's values, that is changes made to the new\n+   * builder don't change the values of the origin object.\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b413c7ab64fcf2af657b55e578647559cf2bcd61"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODY2ODMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/IncomingHttpResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjowODoxOFrOHAfXlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjowODoxOFrOHAfXlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NTk5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Contains the information that describe an HTTP response received by the SDK.\n          \n          \n            \n             * Contains information that describes an HTTP response received by the SDK.", "url": "https://github.com/firebase/firebase-admin-java/pull/465#discussion_r470275991", "createdAt": "2020-08-13T22:08:18Z", "author": {"login": "egilmorez"}, "path": "src/main/java/com/google/firebase/IncomingHttpResponse.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpResponse;\n+import com.google.api.client.http.HttpResponseException;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.database.annotations.Nullable;\n+import java.util.Map;\n+\n+/**\n+ * Contains the information that describe an HTTP response received by the SDK.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b413c7ab64fcf2af657b55e578647559cf2bcd61"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODY2OTUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/IncomingHttpResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjowODo1NVrOHAfYZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozNjoxOVrOHAi6fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NjE5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Creates an IncomingHttpResponse from a successful HttpResponse and the content read from it.\n          \n          \n            \n               * Creates an `IncomingHttpResponse` from a successful `HttpResponse` and the content read from it.", "url": "https://github.com/firebase/firebase-admin-java/pull/465#discussion_r470276198", "createdAt": "2020-08-13T22:08:55Z", "author": {"login": "egilmorez"}, "path": "src/main/java/com/google/firebase/IncomingHttpResponse.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpResponse;\n+import com.google.api.client.http.HttpResponseException;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.database.annotations.Nullable;\n+import java.util.Map;\n+\n+/**\n+ * Contains the information that describe an HTTP response received by the SDK.\n+ */\n+public final class IncomingHttpResponse {\n+\n+  private final int statusCode;\n+  private final String content;\n+  private final Map<String, Object> headers;\n+  private final OutgoingHttpRequest request;\n+\n+  /**\n+   * Creates an IncomingHttpResponse from a successful HttpResponse and the content read from it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b413c7ab64fcf2af657b55e578647559cf2bcd61"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzNDA3Nw==", "bodyText": "Fixed", "url": "https://github.com/firebase/firebase-admin-java/pull/465#discussion_r470334077", "createdAt": "2020-08-14T00:36:19Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/IncomingHttpResponse.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpResponse;\n+import com.google.api.client.http.HttpResponseException;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.database.annotations.Nullable;\n+import java.util.Map;\n+\n+/**\n+ * Contains the information that describe an HTTP response received by the SDK.\n+ */\n+public final class IncomingHttpResponse {\n+\n+  private final int statusCode;\n+  private final String content;\n+  private final Map<String, Object> headers;\n+  private final OutgoingHttpRequest request;\n+\n+  /**\n+   * Creates an IncomingHttpResponse from a successful HttpResponse and the content read from it.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NjE5OA=="}, "originalCommit": {"oid": "b413c7ab64fcf2af657b55e578647559cf2bcd61"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODY3MjMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/IncomingHttpResponse.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjowOTo1OFrOHAfaFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozNDozM1rOHAi2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NjYzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param response A successful HttpResponse.\n          \n          \n            \n               * @param response A successful `HttpResponse`.", "url": "https://github.com/firebase/firebase-admin-java/pull/465#discussion_r470276631", "createdAt": "2020-08-13T22:09:58Z", "author": {"login": "egilmorez"}, "path": "src/main/java/com/google/firebase/IncomingHttpResponse.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpResponse;\n+import com.google.api.client.http.HttpResponseException;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.database.annotations.Nullable;\n+import java.util.Map;\n+\n+/**\n+ * Contains the information that describe an HTTP response received by the SDK.\n+ */\n+public final class IncomingHttpResponse {\n+\n+  private final int statusCode;\n+  private final String content;\n+  private final Map<String, Object> headers;\n+  private final OutgoingHttpRequest request;\n+\n+  /**\n+   * Creates an IncomingHttpResponse from a successful HttpResponse and the content read from it.\n+   * The caller is expected to read the content from the response, and handle any errors that\n+   * may occur while reading.\n+   *\n+   * @param response A successful HttpResponse.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b413c7ab64fcf2af657b55e578647559cf2bcd61"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzMjk4MQ==", "bodyText": "Changed to \"A successful response.\"", "url": "https://github.com/firebase/firebase-admin-java/pull/465#discussion_r470332981", "createdAt": "2020-08-14T00:34:33Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/IncomingHttpResponse.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpResponse;\n+import com.google.api.client.http.HttpResponseException;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.database.annotations.Nullable;\n+import java.util.Map;\n+\n+/**\n+ * Contains the information that describe an HTTP response received by the SDK.\n+ */\n+public final class IncomingHttpResponse {\n+\n+  private final int statusCode;\n+  private final String content;\n+  private final Map<String, Object> headers;\n+  private final OutgoingHttpRequest request;\n+\n+  /**\n+   * Creates an IncomingHttpResponse from a successful HttpResponse and the content read from it.\n+   * The caller is expected to read the content from the response, and handle any errors that\n+   * may occur while reading.\n+   *\n+   * @param response A successful HttpResponse.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NjYzMQ=="}, "originalCommit": {"oid": "b413c7ab64fcf2af657b55e578647559cf2bcd61"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODY3NTE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/IncomingHttpResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjoxMTowMFrOHAfb2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozNDoxOFrOHAi1kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NzA4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /**\n          \n          \n            \n               * Creates an IncomingHttpResponse from an HTTP error response.\n          \n          \n            \n              /**\n          \n          \n            \n               * Creates an `IncomingHttpResponse` from an HTTP error response.", "url": "https://github.com/firebase/firebase-admin-java/pull/465#discussion_r470277080", "createdAt": "2020-08-13T22:11:00Z", "author": {"login": "egilmorez"}, "path": "src/main/java/com/google/firebase/IncomingHttpResponse.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpResponse;\n+import com.google.api.client.http.HttpResponseException;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.database.annotations.Nullable;\n+import java.util.Map;\n+\n+/**\n+ * Contains the information that describe an HTTP response received by the SDK.\n+ */\n+public final class IncomingHttpResponse {\n+\n+  private final int statusCode;\n+  private final String content;\n+  private final Map<String, Object> headers;\n+  private final OutgoingHttpRequest request;\n+\n+  /**\n+   * Creates an IncomingHttpResponse from a successful HttpResponse and the content read from it.\n+   * The caller is expected to read the content from the response, and handle any errors that\n+   * may occur while reading.\n+   *\n+   * @param response A successful HttpResponse.\n+   * @param content Content read from the response.\n+   */\n+  public IncomingHttpResponse(HttpResponse response, @Nullable String content) {\n+    checkNotNull(response, \"response must not be null\");\n+    this.statusCode = response.getStatusCode();\n+    this.content = content;\n+    this.headers = ImmutableMap.copyOf(response.getHeaders());\n+    this.request = new OutgoingHttpRequest(response.getRequest());\n+  }\n+\n+  /**\n+   * Creates an IncomingHttpResponse from an HTTP error response.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b413c7ab64fcf2af657b55e578647559cf2bcd61"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzMjgxOA==", "bodyText": "Fixed", "url": "https://github.com/firebase/firebase-admin-java/pull/465#discussion_r470332818", "createdAt": "2020-08-14T00:34:18Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/IncomingHttpResponse.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpResponse;\n+import com.google.api.client.http.HttpResponseException;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.database.annotations.Nullable;\n+import java.util.Map;\n+\n+/**\n+ * Contains the information that describe an HTTP response received by the SDK.\n+ */\n+public final class IncomingHttpResponse {\n+\n+  private final int statusCode;\n+  private final String content;\n+  private final Map<String, Object> headers;\n+  private final OutgoingHttpRequest request;\n+\n+  /**\n+   * Creates an IncomingHttpResponse from a successful HttpResponse and the content read from it.\n+   * The caller is expected to read the content from the response, and handle any errors that\n+   * may occur while reading.\n+   *\n+   * @param response A successful HttpResponse.\n+   * @param content Content read from the response.\n+   */\n+  public IncomingHttpResponse(HttpResponse response, @Nullable String content) {\n+    checkNotNull(response, \"response must not be null\");\n+    this.statusCode = response.getStatusCode();\n+    this.content = content;\n+    this.headers = ImmutableMap.copyOf(response.getHeaders());\n+    this.request = new OutgoingHttpRequest(response.getRequest());\n+  }\n+\n+  /**\n+   * Creates an IncomingHttpResponse from an HTTP error response.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NzA4MA=="}, "originalCommit": {"oid": "b413c7ab64fcf2af657b55e578647559cf2bcd61"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODY3ODQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/IncomingHttpResponse.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjoxMjoxNFrOHAfdvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozNDowOVrOHAi1KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NzU2NQ==", "bodyText": "In cases like this, do you think it's best to say \"HttpResponseException object\" ?", "url": "https://github.com/firebase/firebase-admin-java/pull/465#discussion_r470277565", "createdAt": "2020-08-13T22:12:14Z", "author": {"login": "egilmorez"}, "path": "src/main/java/com/google/firebase/IncomingHttpResponse.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpResponse;\n+import com.google.api.client.http.HttpResponseException;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.database.annotations.Nullable;\n+import java.util.Map;\n+\n+/**\n+ * Contains the information that describe an HTTP response received by the SDK.\n+ */\n+public final class IncomingHttpResponse {\n+\n+  private final int statusCode;\n+  private final String content;\n+  private final Map<String, Object> headers;\n+  private final OutgoingHttpRequest request;\n+\n+  /**\n+   * Creates an IncomingHttpResponse from a successful HttpResponse and the content read from it.\n+   * The caller is expected to read the content from the response, and handle any errors that\n+   * may occur while reading.\n+   *\n+   * @param response A successful HttpResponse.\n+   * @param content Content read from the response.\n+   */\n+  public IncomingHttpResponse(HttpResponse response, @Nullable String content) {\n+    checkNotNull(response, \"response must not be null\");\n+    this.statusCode = response.getStatusCode();\n+    this.content = content;\n+    this.headers = ImmutableMap.copyOf(response.getHeaders());\n+    this.request = new OutgoingHttpRequest(response.getRequest());\n+  }\n+\n+  /**\n+   * Creates an IncomingHttpResponse from an HTTP error response.\n+   *\n+   * @param e HttpResponseException representing the HTTP error response.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b413c7ab64fcf2af657b55e578647559cf2bcd61"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzMjcxMg==", "bodyText": "Changed to \"Exception representing the...\"", "url": "https://github.com/firebase/firebase-admin-java/pull/465#discussion_r470332712", "createdAt": "2020-08-14T00:34:09Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/IncomingHttpResponse.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpResponse;\n+import com.google.api.client.http.HttpResponseException;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.database.annotations.Nullable;\n+import java.util.Map;\n+\n+/**\n+ * Contains the information that describe an HTTP response received by the SDK.\n+ */\n+public final class IncomingHttpResponse {\n+\n+  private final int statusCode;\n+  private final String content;\n+  private final Map<String, Object> headers;\n+  private final OutgoingHttpRequest request;\n+\n+  /**\n+   * Creates an IncomingHttpResponse from a successful HttpResponse and the content read from it.\n+   * The caller is expected to read the content from the response, and handle any errors that\n+   * may occur while reading.\n+   *\n+   * @param response A successful HttpResponse.\n+   * @param content Content read from the response.\n+   */\n+  public IncomingHttpResponse(HttpResponse response, @Nullable String content) {\n+    checkNotNull(response, \"response must not be null\");\n+    this.statusCode = response.getStatusCode();\n+    this.content = content;\n+    this.headers = ImmutableMap.copyOf(response.getHeaders());\n+    this.request = new OutgoingHttpRequest(response.getRequest());\n+  }\n+\n+  /**\n+   * Creates an IncomingHttpResponse from an HTTP error response.\n+   *\n+   * @param e HttpResponseException representing the HTTP error response.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NzU2NQ=="}, "originalCommit": {"oid": "b413c7ab64fcf2af657b55e578647559cf2bcd61"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODY3OTQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/IncomingHttpResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjoxMjozN1rOHAfeUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozMzoxN1rOHAizHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NzcxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /**\n          \n          \n            \n               * Creates an IncomingHttpResponse from an HTTP error response.\n          \n          \n            \n              /**\n          \n          \n            \n               * Creates an `IncomingHttpResponse` from an HTTP error response.", "url": "https://github.com/firebase/firebase-admin-java/pull/465#discussion_r470277713", "createdAt": "2020-08-13T22:12:37Z", "author": {"login": "egilmorez"}, "path": "src/main/java/com/google/firebase/IncomingHttpResponse.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpResponse;\n+import com.google.api.client.http.HttpResponseException;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.database.annotations.Nullable;\n+import java.util.Map;\n+\n+/**\n+ * Contains the information that describe an HTTP response received by the SDK.\n+ */\n+public final class IncomingHttpResponse {\n+\n+  private final int statusCode;\n+  private final String content;\n+  private final Map<String, Object> headers;\n+  private final OutgoingHttpRequest request;\n+\n+  /**\n+   * Creates an IncomingHttpResponse from a successful HttpResponse and the content read from it.\n+   * The caller is expected to read the content from the response, and handle any errors that\n+   * may occur while reading.\n+   *\n+   * @param response A successful HttpResponse.\n+   * @param content Content read from the response.\n+   */\n+  public IncomingHttpResponse(HttpResponse response, @Nullable String content) {\n+    checkNotNull(response, \"response must not be null\");\n+    this.statusCode = response.getStatusCode();\n+    this.content = content;\n+    this.headers = ImmutableMap.copyOf(response.getHeaders());\n+    this.request = new OutgoingHttpRequest(response.getRequest());\n+  }\n+\n+  /**\n+   * Creates an IncomingHttpResponse from an HTTP error response.\n+   *\n+   * @param e HttpResponseException representing the HTTP error response.\n+   * @param request The HttpRequest that resulted in the error.\n+   */\n+  public IncomingHttpResponse(HttpResponseException e, HttpRequest request) {\n+    this(e, new OutgoingHttpRequest(request));\n+  }\n+\n+  /**\n+   * Creates an IncomingHttpResponse from an HTTP error response.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b413c7ab64fcf2af657b55e578647559cf2bcd61"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzMjE4OQ==", "bodyText": "Fixed", "url": "https://github.com/firebase/firebase-admin-java/pull/465#discussion_r470332189", "createdAt": "2020-08-14T00:33:17Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/IncomingHttpResponse.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpResponse;\n+import com.google.api.client.http.HttpResponseException;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.database.annotations.Nullable;\n+import java.util.Map;\n+\n+/**\n+ * Contains the information that describe an HTTP response received by the SDK.\n+ */\n+public final class IncomingHttpResponse {\n+\n+  private final int statusCode;\n+  private final String content;\n+  private final Map<String, Object> headers;\n+  private final OutgoingHttpRequest request;\n+\n+  /**\n+   * Creates an IncomingHttpResponse from a successful HttpResponse and the content read from it.\n+   * The caller is expected to read the content from the response, and handle any errors that\n+   * may occur while reading.\n+   *\n+   * @param response A successful HttpResponse.\n+   * @param content Content read from the response.\n+   */\n+  public IncomingHttpResponse(HttpResponse response, @Nullable String content) {\n+    checkNotNull(response, \"response must not be null\");\n+    this.statusCode = response.getStatusCode();\n+    this.content = content;\n+    this.headers = ImmutableMap.copyOf(response.getHeaders());\n+    this.request = new OutgoingHttpRequest(response.getRequest());\n+  }\n+\n+  /**\n+   * Creates an IncomingHttpResponse from an HTTP error response.\n+   *\n+   * @param e HttpResponseException representing the HTTP error response.\n+   * @param request The HttpRequest that resulted in the error.\n+   */\n+  public IncomingHttpResponse(HttpResponseException e, HttpRequest request) {\n+    this(e, new OutgoingHttpRequest(request));\n+  }\n+\n+  /**\n+   * Creates an IncomingHttpResponse from an HTTP error response.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NzcxMw=="}, "originalCommit": {"oid": "b413c7ab64fcf2af657b55e578647559cf2bcd61"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODcwMDExOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/OutgoingHttpRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjoyMDo0M1rOHAfqcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozMzowN1rOHAiytw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI4MDgxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /**\n          \n          \n            \n               * Creates an OutgoingHttpRequest from the HTTP method and URL.\n          \n          \n            \n              /**\n          \n          \n            \n               * Creates an `OutgoingHttpRequest` from the HTTP method and URL.", "url": "https://github.com/firebase/firebase-admin-java/pull/465#discussion_r470280816", "createdAt": "2020-08-13T22:20:43Z", "author": {"login": "egilmorez"}, "path": "src/main/java/com/google/firebase/OutgoingHttpRequest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.client.http.HttpContent;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.internal.Nullable;\n+import java.util.Map;\n+\n+/**\n+ * Contains the information that describe an HTTP request made by the SDK.\n+ */\n+public final class OutgoingHttpRequest {\n+\n+  private final String method;\n+  private final String url;\n+  private final HttpContent content;\n+  private final Map<String, Object> headers;\n+\n+  /**\n+   * Creates an OutgoingHttpRequest from the HTTP method and URL.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b413c7ab64fcf2af657b55e578647559cf2bcd61"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzMjA4Nw==", "bodyText": "Java requires {@code } syntax. Fixed manually.", "url": "https://github.com/firebase/firebase-admin-java/pull/465#discussion_r470332087", "createdAt": "2020-08-14T00:33:07Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/OutgoingHttpRequest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.client.http.HttpContent;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.internal.Nullable;\n+import java.util.Map;\n+\n+/**\n+ * Contains the information that describe an HTTP request made by the SDK.\n+ */\n+public final class OutgoingHttpRequest {\n+\n+  private final String method;\n+  private final String url;\n+  private final HttpContent content;\n+  private final Map<String, Object> headers;\n+\n+  /**\n+   * Creates an OutgoingHttpRequest from the HTTP method and URL.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI4MDgxNg=="}, "originalCommit": {"oid": "b413c7ab64fcf2af657b55e578647559cf2bcd61"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODczMDAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/messaging/MessagingErrorCode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjozNDowNFrOHAf8vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjozNDowNFrOHAf8vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI4NTUwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /**\n          \n          \n            \n               * One or more argument specified in the request was invalid.\n          \n          \n            \n               */\n          \n          \n            \n              /**\n          \n          \n            \n               * One or more arguments specified in the request were invalid.\n          \n          \n            \n               */", "url": "https://github.com/firebase/firebase-admin-java/pull/465#discussion_r470285503", "createdAt": "2020-08-13T22:34:04Z", "author": {"login": "egilmorez"}, "path": "src/main/java/com/google/firebase/messaging/MessagingErrorCode.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.google.firebase.messaging;\n+\n+/**\n+ * Error codes that can be raised by the Cloud Messaging APIs.\n+ */\n+public enum MessagingErrorCode {\n+\n+  /**\n+   * APNs certificate or web push auth key was invalid or missing.\n+   */\n+  THIRD_PARTY_AUTH_ERROR,\n+\n+  /**\n+   * One or more argument specified in the request was invalid.\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b413c7ab64fcf2af657b55e578647559cf2bcd61"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1638, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}