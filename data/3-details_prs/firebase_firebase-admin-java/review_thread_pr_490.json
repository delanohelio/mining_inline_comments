{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExNzkwNzEx", "number": 490, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMDoxMTo0M1rOEy-4ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMDoyMDozOVrOEy_FGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODk0NTU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/remoteconfig/ParameterGroup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMDoxMTo0M1rOHp7nNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzowMjo1OVrOHqlzog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczMDM1OA==", "bodyText": "Does this work on collections like maps?", "url": "https://github.com/firebase/firebase-admin-java/pull/490#discussion_r513730358", "createdAt": "2020-10-28T20:11:43Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/ParameterGroup.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.firebase.internal.NonNull;\n+import com.google.firebase.internal.Nullable;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterGroupResponse;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterResponse;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a Remote Config parameter group that can be included in a {@link Template}.\n+ * Grouping parameters is only for management purposes and does not affect client-side\n+ * fetching of parameter values.\n+ */\n+public final class ParameterGroup {\n+\n+  private String description;\n+  private Map<String, Parameter> parameters;\n+\n+  /**\n+   * Creates a new {@link ParameterGroup}.\n+   */\n+  public ParameterGroup() {\n+    parameters = new HashMap<>();\n+  }\n+\n+  ParameterGroup(@NonNull ParameterGroupResponse parameterGroupResponse) {\n+    checkNotNull(parameterGroupResponse);\n+    this.parameters = new HashMap<>();\n+    if (parameterGroupResponse.getParameters() != null) {\n+      for (Map.Entry<String, TemplateResponse.ParameterResponse> entry\n+              : parameterGroupResponse.getParameters().entrySet()) {\n+        this.parameters.put(entry.getKey(), new Parameter(entry.getValue()));\n+      }\n+    }\n+    this.description = parameterGroupResponse.getDescription();\n+  }\n+\n+  /**\n+   * Gets the description of the parameter group.\n+   *\n+   * @return The description of the parameter or null.\n+   */\n+  @Nullable\n+  public String getDescription() {\n+    return description;\n+  }\n+\n+  /**\n+   * Gets the map of parameters that belong to this group.\n+   *\n+   * @return A non-null map of parameter keys to their optional default values and optional\n+   *     conditional values.\n+   */\n+  @NonNull\n+  public Map<String, Parameter> getParameters() {\n+    return parameters;\n+  }\n+\n+  /**\n+   * Sets the description of the parameter group.\n+   * Should not be over 256 characters and may contain any Unicode characters.\n+   *\n+   * @param description The description of the parameter group.\n+   * @return This {@link ParameterGroup}.\n+   */\n+  public ParameterGroup setDescription(@Nullable String description) {\n+    this.description = description;\n+    return this;\n+  }\n+\n+  /**\n+   * Sets the map of parameters that belong to this group.\n+   *\n+   * <p>A parameter only appears once per Remote Config template.\n+   * An ungrouped parameter appears at the top level, whereas a\n+   * parameter organized within a group appears within its group's map of parameters.\n+   *\n+   * @param parameters A non-null map of parameter keys to their optional default values and\n+   *                   optional conditional values.\n+   * @return This {@link ParameterGroup} instance.\n+   */\n+  public ParameterGroup setParameters(\n+          @NonNull Map<String, Parameter> parameters) {\n+    checkNotNull(parameters, \"parameters must not be null.\");\n+    this.parameters = parameters;\n+    return this;\n+  }\n+\n+  ParameterGroupResponse toParameterGroupResponse() {\n+    Map<String, ParameterResponse> parameterResponses = new HashMap<>();\n+    for (Map.Entry<String, Parameter> entry : this.parameters.entrySet()) {\n+      parameterResponses.put(entry.getKey(), entry.getValue().toParameterResponse());\n+    }\n+    return new ParameterGroupResponse()\n+            .setDescription(this.description)\n+            .setParameters(parameterResponses);\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    ParameterGroup that = (ParameterGroup) o;\n+    return Objects.equals(description, that.description)\n+            && Objects.equals(parameters, that.parameters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acafdf890b46bd30eb324f001a6a3f0645409918"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyMTY2Ng==", "bodyText": "Yes, it seems to be working fine on maps. Objects.equals(o1, o2) will end up calling o1.equals(o2) and that should work fine since we have implemented equals in the custom types Parameter etc.\nhttps://docs.oracle.com/javase/7/docs/api/java/util/Map.html#equals(java.lang.Object)\nI have added test cases for equality in ParameterGroupTest.java. I can change that test to use two separate collections to make it more explicit if that helps...", "url": "https://github.com/firebase/firebase-admin-java/pull/490#discussion_r514421666", "createdAt": "2020-10-29T17:02:59Z", "author": {"login": "lahirumaramba"}, "path": "src/main/java/com/google/firebase/remoteconfig/ParameterGroup.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.firebase.internal.NonNull;\n+import com.google.firebase.internal.Nullable;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterGroupResponse;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterResponse;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a Remote Config parameter group that can be included in a {@link Template}.\n+ * Grouping parameters is only for management purposes and does not affect client-side\n+ * fetching of parameter values.\n+ */\n+public final class ParameterGroup {\n+\n+  private String description;\n+  private Map<String, Parameter> parameters;\n+\n+  /**\n+   * Creates a new {@link ParameterGroup}.\n+   */\n+  public ParameterGroup() {\n+    parameters = new HashMap<>();\n+  }\n+\n+  ParameterGroup(@NonNull ParameterGroupResponse parameterGroupResponse) {\n+    checkNotNull(parameterGroupResponse);\n+    this.parameters = new HashMap<>();\n+    if (parameterGroupResponse.getParameters() != null) {\n+      for (Map.Entry<String, TemplateResponse.ParameterResponse> entry\n+              : parameterGroupResponse.getParameters().entrySet()) {\n+        this.parameters.put(entry.getKey(), new Parameter(entry.getValue()));\n+      }\n+    }\n+    this.description = parameterGroupResponse.getDescription();\n+  }\n+\n+  /**\n+   * Gets the description of the parameter group.\n+   *\n+   * @return The description of the parameter or null.\n+   */\n+  @Nullable\n+  public String getDescription() {\n+    return description;\n+  }\n+\n+  /**\n+   * Gets the map of parameters that belong to this group.\n+   *\n+   * @return A non-null map of parameter keys to their optional default values and optional\n+   *     conditional values.\n+   */\n+  @NonNull\n+  public Map<String, Parameter> getParameters() {\n+    return parameters;\n+  }\n+\n+  /**\n+   * Sets the description of the parameter group.\n+   * Should not be over 256 characters and may contain any Unicode characters.\n+   *\n+   * @param description The description of the parameter group.\n+   * @return This {@link ParameterGroup}.\n+   */\n+  public ParameterGroup setDescription(@Nullable String description) {\n+    this.description = description;\n+    return this;\n+  }\n+\n+  /**\n+   * Sets the map of parameters that belong to this group.\n+   *\n+   * <p>A parameter only appears once per Remote Config template.\n+   * An ungrouped parameter appears at the top level, whereas a\n+   * parameter organized within a group appears within its group's map of parameters.\n+   *\n+   * @param parameters A non-null map of parameter keys to their optional default values and\n+   *                   optional conditional values.\n+   * @return This {@link ParameterGroup} instance.\n+   */\n+  public ParameterGroup setParameters(\n+          @NonNull Map<String, Parameter> parameters) {\n+    checkNotNull(parameters, \"parameters must not be null.\");\n+    this.parameters = parameters;\n+    return this;\n+  }\n+\n+  ParameterGroupResponse toParameterGroupResponse() {\n+    Map<String, ParameterResponse> parameterResponses = new HashMap<>();\n+    for (Map.Entry<String, Parameter> entry : this.parameters.entrySet()) {\n+      parameterResponses.put(entry.getKey(), entry.getValue().toParameterResponse());\n+    }\n+    return new ParameterGroupResponse()\n+            .setDescription(this.description)\n+            .setParameters(parameterResponses);\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    ParameterGroup that = (ParameterGroup) o;\n+    return Objects.equals(description, that.description)\n+            && Objects.equals(parameters, that.parameters);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczMDM1OA=="}, "originalCommit": {"oid": "acafdf890b46bd30eb324f001a6a3f0645409918"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODk1NjY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/remoteconfig/Template.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMDoxNDo0MlrOHp7tmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMDoxNDo0MlrOHp7tmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczMTk5NA==", "bodyText": "Implement hashCode too.", "url": "https://github.com/firebase/firebase-admin-java/pull/490#discussion_r513731994", "createdAt": "2020-10-28T20:14:42Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/Template.java", "diffHunk": "@@ -132,8 +166,28 @@ TemplateResponse toTemplateResponse() {\n     for (Condition condition : this.conditions) {\n       conditionResponses.add(condition.toConditionResponse());\n     }\n+    Map<String, TemplateResponse.ParameterGroupResponse> parameterGroupResponse = new HashMap<>();\n+    for (Map.Entry<String, ParameterGroup> entry : this.parameterGroups.entrySet()) {\n+      parameterGroupResponse.put(entry.getKey(), entry.getValue().toParameterGroupResponse());\n+    }\n     return new TemplateResponse()\n             .setParameters(parameterResponses)\n-            .setConditions(conditionResponses);\n+            .setConditions(conditionResponses)\n+            .setParameterGroups(parameterGroupResponse);\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acafdf890b46bd30eb324f001a6a3f0645409918"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODk2MDkyOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/google/firebase/remoteconfig/ConditionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMDoxNTo1M1rOHp7wFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMDoxNTo1M1rOHp7wFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczMjYzMQ==", "bodyText": "Move into a separate test case: testConstructorWithColor", "url": "https://github.com/firebase/firebase-admin-java/pull/490#discussion_r513732631", "createdAt": "2020-10-28T20:15:53Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/remoteconfig/ConditionTest.java", "diffHunk": "@@ -18,11 +18,61 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNull;\n \n import org.junit.Test;\n \n public class ConditionTest {\n \n+  @Test\n+  public void testConstructor() {\n+    Condition c1 = new Condition(\"ios_en_1\", \"expression1\");\n+\n+    assertEquals(\"ios_en_1\", c1.getName());\n+    assertEquals(\"expression1\", c1.getExpression());\n+    assertNull(c1.getTagColor());\n+\n+    Condition c2 = new Condition(\"ios_en_2\", \"expression2\", TagColor.BLUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acafdf890b46bd30eb324f001a6a3f0645409918"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODk2OTk5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/google/firebase/remoteconfig/ParameterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMDoxODozN1rOHp71ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzowODo0NlrOHqmCnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczNDA4Mw==", "bodyText": "Just new Parameter(null) without the assignment", "url": "https://github.com/firebase/firebase-admin-java/pull/490#discussion_r513734083", "createdAt": "2020-10-28T20:18:37Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/remoteconfig/ParameterTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+public class ParameterTest {\n+\n+  @Test\n+  public void testConstructor() {\n+    final Parameter p = new Parameter();\n+    assertNotNull(p.getConditionalValues());\n+    assertEquals(0, p.getConditionalValues().size());\n+    assertNull(p.getDefaultValue());\n+    assertNull(p.getDescription());\n+  }\n+\n+  @Test(expected = NullPointerException.class)\n+  public void testConstructorWithNullParameterResponse() {\n+    Parameter p = new Parameter(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acafdf890b46bd30eb324f001a6a3f0645409918"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyNTUwMA==", "bodyText": "Good catch! Thanks!\nUpdated.", "url": "https://github.com/firebase/firebase-admin-java/pull/490#discussion_r514425500", "createdAt": "2020-10-29T17:08:46Z", "author": {"login": "lahirumaramba"}, "path": "src/test/java/com/google/firebase/remoteconfig/ParameterTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+public class ParameterTest {\n+\n+  @Test\n+  public void testConstructor() {\n+    final Parameter p = new Parameter();\n+    assertNotNull(p.getConditionalValues());\n+    assertEquals(0, p.getConditionalValues().size());\n+    assertNull(p.getDefaultValue());\n+    assertNull(p.getDescription());\n+  }\n+\n+  @Test(expected = NullPointerException.class)\n+  public void testConstructorWithNullParameterResponse() {\n+    Parameter p = new Parameter(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczNDA4Mw=="}, "originalCommit": {"oid": "acafdf890b46bd30eb324f001a6a3f0645409918"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODk3NzUzOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/google/firebase/remoteconfig/TemplateTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMDoyMDozOVrOHp76Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzoxMjoyNVrOHqmMsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczNTE3NQ==", "bodyText": "assertTrue(t.getParameters().isEmpty())", "url": "https://github.com/firebase/firebase-admin-java/pull/490#discussion_r513735175", "createdAt": "2020-10-28T20:20:39Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/remoteconfig/TemplateTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+public class TemplateTest {\n+\n+  @Test\n+  public void testConstructor() {\n+    Template t = new Template();\n+\n+    assertNotNull(t.getParameters());\n+    assertNotNull(t.getConditions());\n+    assertNotNull(t.getParameterGroups());\n+    assertEquals(0, t.getParameters().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acafdf890b46bd30eb324f001a6a3f0645409918"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyODA4Mg==", "bodyText": "Good one! Updated. Thanks!", "url": "https://github.com/firebase/firebase-admin-java/pull/490#discussion_r514428082", "createdAt": "2020-10-29T17:12:25Z", "author": {"login": "lahirumaramba"}, "path": "src/test/java/com/google/firebase/remoteconfig/TemplateTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+public class TemplateTest {\n+\n+  @Test\n+  public void testConstructor() {\n+    Template t = new Template();\n+\n+    assertNotNull(t.getParameters());\n+    assertNotNull(t.getConditions());\n+    assertNotNull(t.getParameterGroups());\n+    assertEquals(0, t.getParameters().size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczNTE3NQ=="}, "originalCommit": {"oid": "acafdf890b46bd30eb324f001a6a3f0645409918"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1472, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}