{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0OTU0ODg0", "number": 491, "title": "Add Version information to RC template", "bodyText": "Add Version information to the Template\nCreate new Version type\nCreate new User type\nNote: Since Version and User types are output only, I did not implement equal() and hashcode() operations. Instead, unit tests are checking for each property in Version and User individually. I also removed the equality operations from Template, as well.\nBased on PR review feedback, implement equality in all public types (including Version and User) to keep consistency.\n\nRelated to: #446", "createdAt": "2020-11-03T19:45:14Z", "url": "https://github.com/firebase/firebase-admin-java/pull/491", "merged": true, "mergeCommit": {"oid": "daf8b2c4253f5d4bee2f9528a2a526e3b8733589"}, "closed": true, "closedAt": "2020-11-10T20:22:24Z", "author": {"login": "lahirumaramba"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdY-mf9gBqjM5NTQ1Mzg0ODU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABda9VfegH2gAyNTE0OTU0ODg0OmE5NWJhOWE5ZmI2ZDhkNDRkMTA2ZjExMzkzZmU3Mjk2ZWNhNTJkOGU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3055c1416115aa0201574b275916290f0b59c8f0", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/3055c1416115aa0201574b275916290f0b59c8f0", "committedDate": "2020-11-03T19:41:21Z", "message": "Add Version information to RC template"}, "afterCommit": {"oid": "af11c4a00807ed70cc9d2c55274bfb33dadcf021", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/af11c4a00807ed70cc9d2c55274bfb33dadcf021", "committedDate": "2020-11-03T19:47:25Z", "message": "Add Version information to RC template"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyODI2MTU0", "url": "https://github.com/firebase/firebase-admin-java/pull/491#pullrequestreview-522826154", "createdAt": "2020-11-03T19:49:45Z", "commit": {"oid": "af11c4a00807ed70cc9d2c55274bfb33dadcf021"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTo0OTo0NVrOHs-HAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTo0OTo0NVrOHs-HAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkxNjk5Mg==", "bodyText": "I did not want to throw here as the backend ideally should not provide invalid date time strings... Open to suggestions :)", "url": "https://github.com/firebase/firebase-admin-java/pull/491#discussion_r516916992", "createdAt": "2020-11-03T19:49:45Z", "author": {"login": "lahirumaramba"}, "path": "src/main/java/com/google/firebase/remoteconfig/Version.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.base.Strings;\n+import com.google.firebase.internal.NonNull;\n+import com.google.firebase.internal.Nullable;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.VersionResponse;\n+\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.TimeZone;\n+\n+/**\n+ * Represents a Remote Config template version.\n+ * Output only, except for the version description. Contains metadata about a particular\n+ * version of the Remote Config template. All fields are set at the time the specified Remote\n+ * Config template is published. A version's description field may be specified when\n+ * publishing a template.\n+ */\n+public final class Version {\n+\n+  private String versionNumber;\n+  private long updateTime;\n+  private String updateOrigin;\n+  private String updateType;\n+  private User updateUser;\n+  private String description;\n+  private String rollbackSource;\n+  private boolean legacy;\n+\n+  /**\n+   * Creates a new {@link Version} with a description.\n+   */\n+  public static Version withDescription(String description) {\n+    return new Version().setDescription(description);\n+  }\n+\n+  Version() {\n+  }\n+\n+  Version(@NonNull VersionResponse versionResponse) {\n+    checkNotNull(versionResponse);\n+    this.versionNumber = versionResponse.getVersionNumber();\n+    if (!Strings.isNullOrEmpty(versionResponse.getUpdateTime())) {\n+      SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss z\");\n+      dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+      try {\n+        this.updateTime = dateFormat.parse(versionResponse.getUpdateTime()).getTime();\n+      } catch (ParseException e) {\n+        this.updateTime = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af11c4a00807ed70cc9d2c55274bfb33dadcf021"}, "originalPosition": 68}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "af11c4a00807ed70cc9d2c55274bfb33dadcf021", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/af11c4a00807ed70cc9d2c55274bfb33dadcf021", "committedDate": "2020-11-03T19:47:25Z", "message": "Add Version information to RC template"}, "afterCommit": {"oid": "2f4ab8f59935154753aa5e92fbcba505bf9593c9", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/2f4ab8f59935154753aa5e92fbcba505bf9593c9", "committedDate": "2020-11-03T19:50:36Z", "message": "Add Version information to RC template"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5123e8f44e7a1d869dd37a9f86bc8249c76a7dc1", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/5123e8f44e7a1d869dd37a9f86bc8249c76a7dc1", "committedDate": "2020-11-03T19:54:22Z", "message": "Add Version information to RC template"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2f4ab8f59935154753aa5e92fbcba505bf9593c9", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/2f4ab8f59935154753aa5e92fbcba505bf9593c9", "committedDate": "2020-11-03T19:50:36Z", "message": "Add Version information to RC template"}, "afterCommit": {"oid": "5123e8f44e7a1d869dd37a9f86bc8249c76a7dc1", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/5123e8f44e7a1d869dd37a9f86bc8249c76a7dc1", "committedDate": "2020-11-03T19:54:22Z", "message": "Add Version information to RC template"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyODkwNjc1", "url": "https://github.com/firebase/firebase-admin-java/pull/491#pullrequestreview-522890675", "createdAt": "2020-11-03T21:34:32Z", "commit": {"oid": "5123e8f44e7a1d869dd37a9f86bc8249c76a7dc1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMTozNDozMlrOHtBQzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMTo0MDo0NlrOHtBbsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk2ODY1Mw==", "bodyText": "final", "url": "https://github.com/firebase/firebase-admin-java/pull/491#discussion_r516968653", "createdAt": "2020-11-03T21:34:32Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/User.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.firebase.internal.NonNull;\n+import com.google.firebase.internal.Nullable;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.UserResponse;\n+\n+/**\n+ * Represents a Remote Config user. Output only.\n+ */\n+public final class User {\n+\n+  private String email;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5123e8f44e7a1d869dd37a9f86bc8249c76a7dc1"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk2OTA1OA==", "bodyText": "Everything except description can be made final.", "url": "https://github.com/firebase/firebase-admin-java/pull/491#discussion_r516969058", "createdAt": "2020-11-03T21:35:25Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/Version.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.base.Strings;\n+import com.google.firebase.internal.NonNull;\n+import com.google.firebase.internal.Nullable;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.VersionResponse;\n+\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.TimeZone;\n+\n+/**\n+ * Represents a Remote Config template version.\n+ * Output only, except for the version description. Contains metadata about a particular\n+ * version of the Remote Config template. All fields are set at the time the specified Remote\n+ * Config template is published. A version's description field may be specified when\n+ * publishing a template.\n+ */\n+public final class Version {\n+\n+  private String versionNumber;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5123e8f44e7a1d869dd37a9f86bc8249c76a7dc1"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk2OTIzOA==", "bodyText": "private?", "url": "https://github.com/firebase/firebase-admin-java/pull/491#discussion_r516969238", "createdAt": "2020-11-03T21:35:50Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/Version.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.base.Strings;\n+import com.google.firebase.internal.NonNull;\n+import com.google.firebase.internal.Nullable;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.VersionResponse;\n+\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.TimeZone;\n+\n+/**\n+ * Represents a Remote Config template version.\n+ * Output only, except for the version description. Contains metadata about a particular\n+ * version of the Remote Config template. All fields are set at the time the specified Remote\n+ * Config template is published. A version's description field may be specified when\n+ * publishing a template.\n+ */\n+public final class Version {\n+\n+  private String versionNumber;\n+  private long updateTime;\n+  private String updateOrigin;\n+  private String updateType;\n+  private User updateUser;\n+  private String description;\n+  private String rollbackSource;\n+  private boolean legacy;\n+\n+  /**\n+   * Creates a new {@link Version} with a description.\n+   */\n+  public static Version withDescription(String description) {\n+    return new Version().setDescription(description);\n+  }\n+\n+  Version() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5123e8f44e7a1d869dd37a9f86bc8249c76a7dc1"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk2OTMyNA==", "bodyText": "List factory methods after the constructors.", "url": "https://github.com/firebase/firebase-admin-java/pull/491#discussion_r516969324", "createdAt": "2020-11-03T21:36:02Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/Version.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.base.Strings;\n+import com.google.firebase.internal.NonNull;\n+import com.google.firebase.internal.Nullable;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.VersionResponse;\n+\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.TimeZone;\n+\n+/**\n+ * Represents a Remote Config template version.\n+ * Output only, except for the version description. Contains metadata about a particular\n+ * version of the Remote Config template. All fields are set at the time the specified Remote\n+ * Config template is published. A version's description field may be specified when\n+ * publishing a template.\n+ */\n+public final class Version {\n+\n+  private String versionNumber;\n+  private long updateTime;\n+  private String updateOrigin;\n+  private String updateType;\n+  private User updateUser;\n+  private String description;\n+  private String rollbackSource;\n+  private boolean legacy;\n+\n+  /**\n+   * Creates a new {@link Version} with a description.\n+   */\n+  public static Version withDescription(String description) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5123e8f44e7a1d869dd37a9f86bc8249c76a7dc1"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk2OTk4MQ==", "bodyText": "I think it's reasonable to throw IllegalStateException or something and fail fast.", "url": "https://github.com/firebase/firebase-admin-java/pull/491#discussion_r516969981", "createdAt": "2020-11-03T21:37:34Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/Version.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.base.Strings;\n+import com.google.firebase.internal.NonNull;\n+import com.google.firebase.internal.Nullable;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.VersionResponse;\n+\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.TimeZone;\n+\n+/**\n+ * Represents a Remote Config template version.\n+ * Output only, except for the version description. Contains metadata about a particular\n+ * version of the Remote Config template. All fields are set at the time the specified Remote\n+ * Config template is published. A version's description field may be specified when\n+ * publishing a template.\n+ */\n+public final class Version {\n+\n+  private String versionNumber;\n+  private long updateTime;\n+  private String updateOrigin;\n+  private String updateType;\n+  private User updateUser;\n+  private String description;\n+  private String rollbackSource;\n+  private boolean legacy;\n+\n+  /**\n+   * Creates a new {@link Version} with a description.\n+   */\n+  public static Version withDescription(String description) {\n+    return new Version().setDescription(description);\n+  }\n+\n+  Version() {\n+  }\n+\n+  Version(@NonNull VersionResponse versionResponse) {\n+    checkNotNull(versionResponse);\n+    this.versionNumber = versionResponse.getVersionNumber();\n+    if (!Strings.isNullOrEmpty(versionResponse.getUpdateTime())) {\n+      SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss z\");\n+      dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+      try {\n+        this.updateTime = dateFormat.parse(versionResponse.getUpdateTime()).getTime();\n+      } catch (ParseException e) {\n+        this.updateTime = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkxNjk5Mg=="}, "originalCommit": {"oid": "af11c4a00807ed70cc9d2c55274bfb33dadcf021"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3MTQ0MA==", "bodyText": "May be just compare the long values.", "url": "https://github.com/firebase/firebase-admin-java/pull/491#discussion_r516971440", "createdAt": "2020-11-03T21:40:46Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java", "diffHunk": "@@ -105,21 +108,32 @@ public void testGetTemplate() throws Exception {\n                             )\n                     )\n     );\n-    List<Condition> expectedConditions = ImmutableList.of(\n+    final List<Condition> expectedConditions = ImmutableList.of(\n             new Condition(\"ios_en\", \"device.os == 'ios' && device.country in ['us', 'uk']\")\n                     .setTagColor(TagColor.INDIGO),\n             new Condition(\"android_en\",\n                     \"device.os == 'android' && device.country in ['us', 'uk']\")\n                     .setTagColor(TagColor.UNSPECIFIED)\n     );\n-    Template expectedTemplate = new Template()\n-            .setParameters(expectedParameters)\n-            .setParameterGroups(expectedParameterGroups)\n-            .setConditions(expectedConditions)\n-            .setETag(TEST_ETAG);\n \n     assertEquals(TEST_ETAG, receivedTemplate.getETag());\n-    assertEquals(expectedTemplate, receivedTemplate);\n+    assertEquals(expectedParameters, receivedTemplate.getParameters());\n+    assertEquals(expectedParameterGroups, receivedTemplate.getParameterGroups());\n+    assertEquals(expectedConditions, receivedTemplate.getConditions());\n+\n+    final Version receivedVersion = receivedTemplate.getVersion();\n+    SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss z\");\n+    dateFormat.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+    final String updateTime = dateFormat.format(new Date(receivedVersion.getUpdateTime()));\n+\n+    assertEquals(\"17\", receivedVersion.getVersionNumber());\n+    assertEquals(\"ADMIN_SDK_NODE\", receivedVersion.getUpdateOrigin());\n+    assertEquals(\"INCREMENTAL_UPDATE\", receivedVersion.getUpdateType());\n+    assertEquals(\"firebase-user@account.com\", receivedVersion.getUpdateUser().getEmail());\n+    assertEquals(\"dev-admin\", receivedVersion.getUpdateUser().getName());\n+    assertEquals(\"http://image.jpg\", receivedVersion.getUpdateUser().getImageUrl());\n+    assertEquals(\"Wed, 30 Sep 2020 17:56:07 GMT\", updateTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5123e8f44e7a1d869dd37a9f86bc8249c76a7dc1"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0de7c09c643e498b050da378276a0c20b38fe8d8", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/0de7c09c643e498b050da378276a0c20b38fe8d8", "committedDate": "2020-11-04T20:20:15Z", "message": "PR fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNzA5MTk2", "url": "https://github.com/firebase/firebase-admin-java/pull/491#pullrequestreview-523709196", "createdAt": "2020-11-04T20:26:12Z", "commit": {"oid": "0de7c09c643e498b050da378276a0c20b38fe8d8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDoyNjoxM1rOHtoeMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDoyNjoxM1rOHtoeMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYxMTA1OA==", "bodyText": "I noticed that the update time is represented in FC3339 UTC \"Zulu\" format, accurate to nanoseconds. Added new code here to convert the timestamp to milliseconds properly.\nDateTime does not handle nanoseconds so I had to drop them from the timestamp string before parsing. Otherwise SimpleDateFormat considers nanoseconds as milliseconds and add it back to the time making the parsed date/time incorrect.\nApparently, there are better ways to handle nanoseconds in Java8 (LocalDateTime and Instant) :)", "url": "https://github.com/firebase/firebase-admin-java/pull/491#discussion_r517611058", "createdAt": "2020-11-04T20:26:13Z", "author": {"login": "lahirumaramba"}, "path": "src/main/java/com/google/firebase/remoteconfig/Version.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.base.Strings;\n+import com.google.firebase.internal.NonNull;\n+import com.google.firebase.internal.Nullable;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.VersionResponse;\n+\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Represents a Remote Config template version.\n+ * Output only, except for the version description. Contains metadata about a particular\n+ * version of the Remote Config template. All fields are set at the time the specified Remote\n+ * Config template is published. A version's description field may be specified when\n+ * publishing a template.\n+ */\n+public final class Version {\n+\n+  private static final Pattern ZULU_TIME_NO_NANOSECONDS_PATTERN = Pattern\n+          .compile(\"^(\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2})\");\n+\n+  private final String versionNumber;\n+  private final long updateTime;\n+  private final String updateOrigin;\n+  private final String updateType;\n+  private final User updateUser;\n+  private final String rollbackSource;\n+  private final boolean legacy;\n+  private String description;\n+\n+  private Version() {\n+    this.versionNumber = null;\n+    this.updateTime = 0L;\n+    this.updateOrigin = null;\n+    this.updateType = null;\n+    this.updateUser = null;\n+    this.rollbackSource = null;\n+    this.legacy = false;\n+  }\n+\n+  Version(@NonNull VersionResponse versionResponse) {\n+    checkNotNull(versionResponse);\n+    this.versionNumber = versionResponse.getVersionNumber();\n+\n+    if (!Strings.isNullOrEmpty(versionResponse.getUpdateTime())) {\n+      // Update Time is a timestamp in RFC3339 UTC \"Zulu\" format, accurate to nanoseconds.\n+      // example: \"2014-10-02T15:01:23.045123456Z\"\n+      // SimpleDateFormat cannot handle nanoseconds, therefore we drop nanoseconds from the string.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de7c09c643e498b050da378276a0c20b38fe8d8"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNzIwMDU2", "url": "https://github.com/firebase/firebase-admin-java/pull/491#pullrequestreview-523720056", "createdAt": "2020-11-04T20:43:07Z", "commit": {"oid": "0de7c09c643e498b050da378276a0c20b38fe8d8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDo0MzowN1rOHto_vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDo1NDoxNlrOHtpVwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYxOTY0Ng==", "bodyText": "Include a detailed error message.", "url": "https://github.com/firebase/firebase-admin-java/pull/491#discussion_r517619646", "createdAt": "2020-11-04T20:43:07Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/Version.java", "diffHunk": "@@ -37,37 +40,53 @@\n  */\n public final class Version {\n \n-  private String versionNumber;\n-  private long updateTime;\n-  private String updateOrigin;\n-  private String updateType;\n-  private User updateUser;\n-  private String description;\n-  private String rollbackSource;\n-  private boolean legacy;\n+  private static final Pattern ZULU_TIME_NO_NANOSECONDS_PATTERN = Pattern\n+          .compile(\"^(\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2})\");\n \n-  /**\n-   * Creates a new {@link Version} with a description.\n-   */\n-  public static Version withDescription(String description) {\n-    return new Version().setDescription(description);\n-  }\n+  private final String versionNumber;\n+  private final long updateTime;\n+  private final String updateOrigin;\n+  private final String updateType;\n+  private final User updateUser;\n+  private final String rollbackSource;\n+  private final boolean legacy;\n+  private String description;\n \n-  Version() {\n+  private Version() {\n+    this.versionNumber = null;\n+    this.updateTime = 0L;\n+    this.updateOrigin = null;\n+    this.updateType = null;\n+    this.updateUser = null;\n+    this.rollbackSource = null;\n+    this.legacy = false;\n   }\n \n   Version(@NonNull VersionResponse versionResponse) {\n     checkNotNull(versionResponse);\n     this.versionNumber = versionResponse.getVersionNumber();\n+\n     if (!Strings.isNullOrEmpty(versionResponse.getUpdateTime())) {\n-      SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss z\");\n+      // Update Time is a timestamp in RFC3339 UTC \"Zulu\" format, accurate to nanoseconds.\n+      // example: \"2014-10-02T15:01:23.045123456Z\"\n+      // SimpleDateFormat cannot handle nanoseconds, therefore we drop nanoseconds from the string.\n+      Matcher errorMatcher = ZULU_TIME_NO_NANOSECONDS_PATTERN\n+              .matcher(versionResponse.getUpdateTime());\n+      String updateTimeWithoutNanoseconds = \"\";\n+      if (errorMatcher.find()) {\n+        updateTimeWithoutNanoseconds = errorMatcher.group(1);\n+      }\n+      SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n       dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n       try {\n-        this.updateTime = dateFormat.parse(versionResponse.getUpdateTime()).getTime();\n+        this.updateTime = dateFormat.parse(updateTimeWithoutNanoseconds).getTime();\n       } catch (ParseException e) {\n-        this.updateTime = 0;\n+        throw new IllegalStateException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de7c09c643e498b050da378276a0c20b38fe8d8"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMTExMQ==", "bodyText": "Instead of a complex regex, why not just strip away everything (and including) the period? That seems easier and more readable.", "url": "https://github.com/firebase/firebase-admin-java/pull/491#discussion_r517621111", "createdAt": "2020-11-04T20:45:57Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/Version.java", "diffHunk": "@@ -37,37 +40,53 @@\n  */\n public final class Version {\n \n-  private String versionNumber;\n-  private long updateTime;\n-  private String updateOrigin;\n-  private String updateType;\n-  private User updateUser;\n-  private String description;\n-  private String rollbackSource;\n-  private boolean legacy;\n+  private static final Pattern ZULU_TIME_NO_NANOSECONDS_PATTERN = Pattern\n+          .compile(\"^(\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2})\");\n \n-  /**\n-   * Creates a new {@link Version} with a description.\n-   */\n-  public static Version withDescription(String description) {\n-    return new Version().setDescription(description);\n-  }\n+  private final String versionNumber;\n+  private final long updateTime;\n+  private final String updateOrigin;\n+  private final String updateType;\n+  private final User updateUser;\n+  private final String rollbackSource;\n+  private final boolean legacy;\n+  private String description;\n \n-  Version() {\n+  private Version() {\n+    this.versionNumber = null;\n+    this.updateTime = 0L;\n+    this.updateOrigin = null;\n+    this.updateType = null;\n+    this.updateUser = null;\n+    this.rollbackSource = null;\n+    this.legacy = false;\n   }\n \n   Version(@NonNull VersionResponse versionResponse) {\n     checkNotNull(versionResponse);\n     this.versionNumber = versionResponse.getVersionNumber();\n+\n     if (!Strings.isNullOrEmpty(versionResponse.getUpdateTime())) {\n-      SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss z\");\n+      // Update Time is a timestamp in RFC3339 UTC \"Zulu\" format, accurate to nanoseconds.\n+      // example: \"2014-10-02T15:01:23.045123456Z\"\n+      // SimpleDateFormat cannot handle nanoseconds, therefore we drop nanoseconds from the string.\n+      Matcher errorMatcher = ZULU_TIME_NO_NANOSECONDS_PATTERN", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de7c09c643e498b050da378276a0c20b38fe8d8"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyNDQyNQ==", "bodyText": "I'd advise splitting this into multiple smaller test cases. You can define some class-level constants for values that should be shared across test cases.", "url": "https://github.com/firebase/firebase-admin-java/pull/491#discussion_r517624425", "createdAt": "2020-11-04T20:52:33Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/remoteconfig/TemplateTest.java", "diffHunk": "@@ -59,4 +67,77 @@ public void testSetNullParameterGroups() {\n     Template template = new Template();\n     template.setParameterGroups(null);\n   }\n+\n+  @Test\n+  public void testEquality() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de7c09c643e498b050da378276a0c20b38fe8d8"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyNTI4MQ==", "bodyText": "This is not quite the format described in the comment in the source (it had 9 digit nano second value).", "url": "https://github.com/firebase/firebase-admin-java/pull/491#discussion_r517625281", "createdAt": "2020-11-04T20:54:16Z", "author": {"login": "hiranya911"}, "path": "src/test/resources/getRemoteConfig.json", "diffHunk": "@@ -50,7 +50,7 @@\n       \"name\": \"dev-admin\",\n       \"imageUrl\": \"http://image.jpg\"\n     },\n-    \"updateTime\": \"Wed, 30 Sep 2020 17:56:07 GMT\",\n+    \"updateTime\": \"2020-11-03T20:24:15.203Z\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de7c09c643e498b050da378276a0c20b38fe8d8"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a71dcd231bc4bb3f5d9ed0892017c2bd46ce192e", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/a71dcd231bc4bb3f5d9ed0892017c2bd46ce192e", "committedDate": "2020-11-05T21:39:12Z", "message": "PR fixes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f8bc8717ac9cfbda23f001581b5d0ee73c6a01a3", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/f8bc8717ac9cfbda23f001581b5d0ee73c6a01a3", "committedDate": "2020-11-05T21:25:17Z", "message": "PR fixes"}, "afterCommit": {"oid": "a71dcd231bc4bb3f5d9ed0892017c2bd46ce192e", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/a71dcd231bc4bb3f5d9ed0892017c2bd46ce192e", "committedDate": "2020-11-05T21:39:12Z", "message": "PR fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NzA2MzUz", "url": "https://github.com/firebase/firebase-admin-java/pull/491#pullrequestreview-524706353", "createdAt": "2020-11-05T22:00:35Z", "commit": {"oid": "a71dcd231bc4bb3f5d9ed0892017c2bd46ce192e"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjowMDozNVrOHuYXbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjowNjowOFrOHuYhug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM5NTc1Nw==", "bodyText": "indexOfPeriod can be possibly 0, in which case this will do substring(0, 0).  I think following makes more sense to me:\nString updateTime = versionResponse.getUpdateTime();\nint indexOfPeriod = updateTime.indexOf('.');\nif (indexOfPeriod != -1) {\n  updateTime = updateTime.substring(0, indexOfPeriod);\n}", "url": "https://github.com/firebase/firebase-admin-java/pull/491#discussion_r518395757", "createdAt": "2020-11-05T22:00:35Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/Version.java", "diffHunk": "@@ -69,19 +66,16 @@ private Version() {\n     if (!Strings.isNullOrEmpty(versionResponse.getUpdateTime())) {\n       // Update Time is a timestamp in RFC3339 UTC \"Zulu\" format, accurate to nanoseconds.\n       // example: \"2014-10-02T15:01:23.045123456Z\"\n-      // SimpleDateFormat cannot handle nanoseconds, therefore we drop nanoseconds from the string.\n-      Matcher errorMatcher = ZULU_TIME_NO_NANOSECONDS_PATTERN\n-              .matcher(versionResponse.getUpdateTime());\n-      String updateTimeWithoutNanoseconds = \"\";\n-      if (errorMatcher.find()) {\n-        updateTimeWithoutNanoseconds = errorMatcher.group(1);\n-      }\n+      // SimpleDateFormat cannot handle nanoseconds, therefore we strip nanoseconds from the string.\n+      String updateTime = versionResponse.getUpdateTime();\n+      int indexOfPeriod = !updateTime.contains(\".\") ? 0 : updateTime.indexOf(\".\");\n+      String updateTimeWithoutNanoseconds = updateTime.substring(0, indexOfPeriod);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a71dcd231bc4bb3f5d9ed0892017c2bd46ce192e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM5ODM5NA==", "bodyText": "It's ok to define some of these as class level constants. For example templateNine can be a class-level constant, and templateTen can be initialized in the corresponding test case as a local var. Same goes for others.", "url": "https://github.com/firebase/firebase-admin-java/pull/491#discussion_r518398394", "createdAt": "2020-11-05T22:06:08Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/remoteconfig/TemplateTest.java", "diffHunk": "@@ -132,5 +132,12 @@ public void testEquality() {\n     assertNotEquals(templateThree, templateFive);\n     assertNotEquals(templateThree, templateSeven);\n     assertNotEquals(templateFive, templateSeven);\n+\n+    final Template templateNine = new Template()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a71dcd231bc4bb3f5d9ed0892017c2bd46ce192e"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a95ba9a9fb6d8d44d106f11393fe7296eca52d8e", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/a95ba9a9fb6d8d44d106f11393fe7296eca52d8e", "committedDate": "2020-11-09T23:26:57Z", "message": "Clean up template unit tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2778, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}