{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwMzU5MDMy", "number": 400, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMTowMzoxN1rOD3YS0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODo0MDowMFrOD3wOFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5Mzk2MzA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMTowMzoxN1rOGNm0uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMDo0Nzo0NVrOGNsP-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyMDc2MQ==", "bodyText": "I find this mapping strange, however, \"CONFIGURATION_NOT_FOUND\" was already being mapped to \"project-not-found\".\nI've confirmed that the server returns CONFIGURATION_NOT_FOUND if you ask it to delete a provider config ID which doesn't exist.", "url": "https://github.com/firebase/firebase-admin-java/pull/400#discussion_r416920761", "createdAt": "2020-04-28T21:03:17Z", "author": {"login": "micahstairs"}, "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -65,6 +65,7 @@\n  */\n class FirebaseUserManager {\n \n+  static final String CONFIGURATION_NOT_FOUND = \"project-not-found\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913e1288d791fc8b60d8c10fe51b529517a7e168"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkzMDI5MQ==", "bodyText": "Already mapped where? Looks like it's being added here.", "url": "https://github.com/firebase/firebase-admin-java/pull/400#discussion_r416930291", "createdAt": "2020-04-28T21:20:53Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -65,6 +65,7 @@\n  */\n class FirebaseUserManager {\n \n+  static final String CONFIGURATION_NOT_FOUND = \"project-not-found\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyMDc2MQ=="}, "originalCommit": {"oid": "913e1288d791fc8b60d8c10fe51b529517a7e168"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0NTAxMg==", "bodyText": "It was already in the map (.put(\"CONFIGURATION_NOT_FOUND\", \"project-not-found\")), I just gave the constant a name so that it could be referenced.", "url": "https://github.com/firebase/firebase-admin-java/pull/400#discussion_r416945012", "createdAt": "2020-04-28T21:49:26Z", "author": {"login": "micahstairs"}, "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -65,6 +65,7 @@\n  */\n class FirebaseUserManager {\n \n+  static final String CONFIGURATION_NOT_FOUND = \"project-not-found\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyMDc2MQ=="}, "originalCommit": {"oid": "913e1288d791fc8b60d8c10fe51b529517a7e168"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk2MDE4MQ==", "bodyText": "I think we ought to fix it. I don't think any of the existing APIs return this error code, so it should be safe to change it to \"configuration-not-found\".", "url": "https://github.com/firebase/firebase-admin-java/pull/400#discussion_r416960181", "createdAt": "2020-04-28T22:23:47Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -65,6 +65,7 @@\n  */\n class FirebaseUserManager {\n \n+  static final String CONFIGURATION_NOT_FOUND = \"project-not-found\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyMDc2MQ=="}, "originalCommit": {"oid": "913e1288d791fc8b60d8c10fe51b529517a7e168"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwOTY1Nw==", "bodyText": "Okay! Done.", "url": "https://github.com/firebase/firebase-admin-java/pull/400#discussion_r417009657", "createdAt": "2020-04-29T00:47:45Z", "author": {"login": "micahstairs"}, "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -65,6 +65,7 @@\n  */\n class FirebaseUserManager {\n \n+  static final String CONFIGURATION_NOT_FOUND = \"project-not-found\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyMDc2MQ=="}, "originalCommit": {"oid": "913e1288d791fc8b60d8c10fe51b529517a7e168"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDAxMTkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToxNjozMlrOGNnRew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNDo0MTowN1rOGOCN9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyODEyMw==", "bodyText": "This is different from the signature proposed in go/firebase-mt-java. That is fine, but we should think if this is the best we can do. In .NET we used a generics-based solution for this. Can we do something similar here? Something like the following:\n<T extends ProviderConfig> T createProviderConfig(ProviderConfig.CreateRequest<T> request)\n\nWDYT?", "url": "https://github.com/firebase/firebase-admin-java/pull/400#discussion_r416928123", "createdAt": "2020-04-28T21:16:32Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -945,6 +936,98 @@ protected String execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Creates a new provider OIDC Auth config with the attributes contained in the specified {@link\n+   * OidcProviderConfig.CreateRequest}.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.CreateRequest} instance.\n+   * @return An {@link OidcProviderConfig} instance corresponding to the newly created provider\n+   *     config.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws FirebaseAuthException if an error occurs while creating the provider config.\n+   */\n+  public OidcProviderConfig createOidcProviderConfig(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913e1288d791fc8b60d8c10fe51b529517a7e168"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk1NzQ4MA==", "bodyText": "It's unfortunately not as simple as this. The class signature of AuthProviderConfig is public abstract static class CreateRequest<T extends CreateRequest<T>>, not public abstract static class CreateRequest<T extends AuthProviderConfig<T>>. In order to make this work, I think we'd need to add another (complex) generic type to AuthProviderConfig.CreateRequest. As I mentioned in my PR description, the accumulated complexity outweighed the benefits in my opinion.\nFor more context about why CreateRequest<T extends CreateRequest<T>> is necessary (as opposed to the more intuitive CreateRequest<T extends AuthProviderConfig>), see https://stackoverflow.com/a/17165079.", "url": "https://github.com/firebase/firebase-admin-java/pull/400#discussion_r416957480", "createdAt": "2020-04-28T22:17:11Z", "author": {"login": "micahstairs"}, "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -945,6 +936,98 @@ protected String execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Creates a new provider OIDC Auth config with the attributes contained in the specified {@link\n+   * OidcProviderConfig.CreateRequest}.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.CreateRequest} instance.\n+   * @return An {@link OidcProviderConfig} instance corresponding to the newly created provider\n+   *     config.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws FirebaseAuthException if an error occurs while creating the provider config.\n+   */\n+  public OidcProviderConfig createOidcProviderConfig(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyODEyMw=="}, "originalCommit": {"oid": "913e1288d791fc8b60d8c10fe51b529517a7e168"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk2MjY0MA==", "bodyText": "Wouldn't this work?\nclass CreateRequest<T extends CreateRequest<T>, U extends AuthProviderConfig> {\n \n}", "url": "https://github.com/firebase/firebase-admin-java/pull/400#discussion_r416962640", "createdAt": "2020-04-28T22:30:13Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -945,6 +936,98 @@ protected String execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Creates a new provider OIDC Auth config with the attributes contained in the specified {@link\n+   * OidcProviderConfig.CreateRequest}.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.CreateRequest} instance.\n+   * @return An {@link OidcProviderConfig} instance corresponding to the newly created provider\n+   *     config.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws FirebaseAuthException if an error occurs while creating the provider config.\n+   */\n+  public OidcProviderConfig createOidcProviderConfig(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyODEyMw=="}, "originalCommit": {"oid": "913e1288d791fc8b60d8c10fe51b529517a7e168"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDM2MA==", "bodyText": "Yes, I think that might work. That's the idea I was referring to when I mentioned adding another (complex) generic type to AuthProviderConfig.CreateRequest.\nMy concern is that this makes the external API too complex. Wouldn't this make the signature for createProviderConfig pretty wild?", "url": "https://github.com/firebase/firebase-admin-java/pull/400#discussion_r417010360", "createdAt": "2020-04-29T00:50:34Z", "author": {"login": "micahstairs"}, "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -945,6 +936,98 @@ protected String execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Creates a new provider OIDC Auth config with the attributes contained in the specified {@link\n+   * OidcProviderConfig.CreateRequest}.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.CreateRequest} instance.\n+   * @return An {@link OidcProviderConfig} instance corresponding to the newly created provider\n+   *     config.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws FirebaseAuthException if an error occurs while creating the provider config.\n+   */\n+  public OidcProviderConfig createOidcProviderConfig(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyODEyMw=="}, "originalCommit": {"oid": "913e1288d791fc8b60d8c10fe51b529517a7e168"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAyMjkxNQ==", "bodyText": "That's a good point. I guess the best we can do in that case is something like:\npublic <T extends ProviderConfig> T createProviderConfig(AbstractCreateRequest<?, T> request)\n\nUsers won't have to worry too much about this as they can simply do createProviderConfig(new OidcProviderConfig.CreateRequest()) most of the time, but createOidcProviderConfig(request) is far simpler to wrap one's head around.\nOk, I think I'm sufficiently convinced. Let's go ahead with separate create methods for the 2 types.", "url": "https://github.com/firebase/firebase-admin-java/pull/400#discussion_r417022915", "createdAt": "2020-04-29T01:43:03Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -945,6 +936,98 @@ protected String execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Creates a new provider OIDC Auth config with the attributes contained in the specified {@link\n+   * OidcProviderConfig.CreateRequest}.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.CreateRequest} instance.\n+   * @return An {@link OidcProviderConfig} instance corresponding to the newly created provider\n+   *     config.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws FirebaseAuthException if an error occurs while creating the provider config.\n+   */\n+  public OidcProviderConfig createOidcProviderConfig(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyODEyMw=="}, "originalCommit": {"oid": "913e1288d791fc8b60d8c10fe51b529517a7e168"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM2OTU4OQ==", "bodyText": "Great! Glad we are on the same page now.", "url": "https://github.com/firebase/firebase-admin-java/pull/400#discussion_r417369589", "createdAt": "2020-04-29T14:41:07Z", "author": {"login": "micahstairs"}, "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -945,6 +936,98 @@ protected String execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Creates a new provider OIDC Auth config with the attributes contained in the specified {@link\n+   * OidcProviderConfig.CreateRequest}.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.CreateRequest} instance.\n+   * @return An {@link OidcProviderConfig} instance corresponding to the newly created provider\n+   *     config.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws FirebaseAuthException if an error occurs while creating the provider config.\n+   */\n+  public OidcProviderConfig createOidcProviderConfig(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyODEyMw=="}, "originalCommit": {"oid": "913e1288d791fc8b60d8c10fe51b529517a7e168"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDAzMzQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToyMjo1NFrOGNnePA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMTo1ODowN1rOGNoi0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkzMTM4OA==", "bodyText": "idpConfigMgtBaseUrl", "url": "https://github.com/firebase/firebase-admin-java/pull/400#discussion_r416931388", "createdAt": "2020-04-28T21:22:54Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -106,6 +107,7 @@\n   private static final String CLIENT_VERSION_HEADER = \"X-Client-Version\";\n \n   private final String userMgtBaseUrl;\n+  private final String oidpMgtBaseUrl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913e1288d791fc8b60d8c10fe51b529517a7e168"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0ODk0NA==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-admin-java/pull/400#discussion_r416948944", "createdAt": "2020-04-28T21:58:07Z", "author": {"login": "micahstairs"}, "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -106,6 +107,7 @@\n   private static final String CLIENT_VERSION_HEADER = \"X-Client-Version\";\n \n   private final String userMgtBaseUrl;\n+  private final String oidpMgtBaseUrl;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkzMTM4OA=="}, "originalCommit": {"oid": "913e1288d791fc8b60d8c10fe51b529517a7e168"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDA1MzI4OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToyODoxOVrOGNnqMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMjowMjoyNlrOGNoqZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkzNDQ1MA==", "bodyText": "Lets add some assertions here.", "url": "https://github.com/firebase/firebase-admin-java/pull/400#discussion_r416934450", "createdAt": "2020-04-28T21:28:19Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java", "diffHunk": "@@ -1383,6 +1386,140 @@ public void testUnexpectedHttpError() {\n     }\n   }\n \n+  @Test\n+  public void testCreateOidcProvider() throws Exception {\n+    TestResponseInterceptor interceptor = initializeAppForUserManagement(\n+        TestUtils.loadResource(\"oidc.json\"));\n+    OidcProviderConfig.CreateRequest createRequest =\n+        new OidcProviderConfig.CreateRequest()\n+            .setProviderId(\"oidc.provider-id\")\n+            .setDisplayName(\"DISPLAY_NAME\")\n+            .setEnabled(true)\n+            .setClientId(\"CLIENT_ID\")\n+            .setIssuer(\"https://oidc.com/issuer\");\n+\n+    OidcProviderConfig config = FirebaseAuth.getInstance().createOidcProviderConfig(createRequest);\n+\n+    checkOidcProviderConfig(config);\n+    checkRequestHeaders(interceptor);\n+    checkUrl(interceptor, \"POST\", PROJECT_BASE_URL + \"/oauthIdpConfigs\");\n+    GenericJson parsed = parseRequestContent(interceptor);\n+    assertEquals(\"DISPLAY_NAME\", parsed.get(\"displayName\"));\n+    assertTrue((boolean) parsed.get(\"enabled\"));\n+    assertEquals(\"CLIENT_ID\", parsed.get(\"clientId\"));\n+    assertEquals(\"https://oidc.com/issuer\", parsed.get(\"issuer\"));\n+    GenericUrl url = interceptor.getResponse().getRequest().getUrl();\n+    assertEquals(\"oidc.provider-id\", url.getFirst(\"oauthIdpConfigId\"));\n+  }\n+\n+  @Test\n+  public void testCreateOidcProviderMinimal() throws Exception {\n+    TestResponseInterceptor interceptor = initializeAppForUserManagement(\n+        TestUtils.loadResource(\"oidc.json\"));\n+    // Only the 'enabled' field can be omitted from an OIDC provider config creation request.\n+    OidcProviderConfig.CreateRequest createRequest =\n+        new OidcProviderConfig.CreateRequest()\n+            .setProviderId(\"oidc.provider-id\")\n+            .setDisplayName(\"DISPLAY_NAME\")\n+            .setClientId(\"CLIENT_ID\")\n+            .setIssuer(\"https://oidc.com/issuer\");\n+\n+    FirebaseAuth.getInstance().createOidcProviderConfig(createRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913e1288d791fc8b60d8c10fe51b529517a7e168"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk1MDg4NQ==", "bodyText": "Done. Initially, I was thinking that the purpose of the test was to ensure that we didn't mistakenly disallow a create request missing \"enabled\", however, now I see that can also make meaningful assertions about the request that we are sending.", "url": "https://github.com/firebase/firebase-admin-java/pull/400#discussion_r416950885", "createdAt": "2020-04-28T22:02:26Z", "author": {"login": "micahstairs"}, "path": "src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java", "diffHunk": "@@ -1383,6 +1386,140 @@ public void testUnexpectedHttpError() {\n     }\n   }\n \n+  @Test\n+  public void testCreateOidcProvider() throws Exception {\n+    TestResponseInterceptor interceptor = initializeAppForUserManagement(\n+        TestUtils.loadResource(\"oidc.json\"));\n+    OidcProviderConfig.CreateRequest createRequest =\n+        new OidcProviderConfig.CreateRequest()\n+            .setProviderId(\"oidc.provider-id\")\n+            .setDisplayName(\"DISPLAY_NAME\")\n+            .setEnabled(true)\n+            .setClientId(\"CLIENT_ID\")\n+            .setIssuer(\"https://oidc.com/issuer\");\n+\n+    OidcProviderConfig config = FirebaseAuth.getInstance().createOidcProviderConfig(createRequest);\n+\n+    checkOidcProviderConfig(config);\n+    checkRequestHeaders(interceptor);\n+    checkUrl(interceptor, \"POST\", PROJECT_BASE_URL + \"/oauthIdpConfigs\");\n+    GenericJson parsed = parseRequestContent(interceptor);\n+    assertEquals(\"DISPLAY_NAME\", parsed.get(\"displayName\"));\n+    assertTrue((boolean) parsed.get(\"enabled\"));\n+    assertEquals(\"CLIENT_ID\", parsed.get(\"clientId\"));\n+    assertEquals(\"https://oidc.com/issuer\", parsed.get(\"issuer\"));\n+    GenericUrl url = interceptor.getResponse().getRequest().getUrl();\n+    assertEquals(\"oidc.provider-id\", url.getFirst(\"oauthIdpConfigId\"));\n+  }\n+\n+  @Test\n+  public void testCreateOidcProviderMinimal() throws Exception {\n+    TestResponseInterceptor interceptor = initializeAppForUserManagement(\n+        TestUtils.loadResource(\"oidc.json\"));\n+    // Only the 'enabled' field can be omitted from an OIDC provider config creation request.\n+    OidcProviderConfig.CreateRequest createRequest =\n+        new OidcProviderConfig.CreateRequest()\n+            .setProviderId(\"oidc.provider-id\")\n+            .setDisplayName(\"DISPLAY_NAME\")\n+            .setClientId(\"CLIENT_ID\")\n+            .setIssuer(\"https://oidc.com/issuer\");\n+\n+    FirebaseAuth.getInstance().createOidcProviderConfig(createRequest);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkzNDQ1MA=="}, "originalCommit": {"oid": "913e1288d791fc8b60d8c10fe51b529517a7e168"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5Nzg4MzA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODo0MDowMFrOGOMCsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxOTowMDo0N1rOGOMyqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUzMDU0Nw==", "bodyText": "SAML configs are on a different URL path. Better to not append /oauthIdpConfigs to the URL here.", "url": "https://github.com/firebase/firebase-admin-java/pull/400#discussion_r417530547", "createdAt": "2020-04-29T18:40:00Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -120,15 +122,18 @@\n         \"Project ID is required to access the auth service. Use a service account credential or \"\n             + \"set the project ID explicitly via FirebaseOptions. Alternatively you can also \"\n             + \"set the project ID via the GOOGLE_CLOUD_PROJECT environment variable.\");\n-    String tenantId = builder.tenantId;\n-    if (builder.tenantId == null) {\n-      this.userMgtBaseUrl = String.format(ID_TOOLKIT_URL, \"v1\", projectId);\n+    final String idToolkitUrlV1 = String.format(ID_TOOLKIT_URL, \"v1\", projectId);\n+    final String idToolkitUrlV2 = String.format(ID_TOOLKIT_URL, \"v2\", projectId);\n+    final String tenantId = builder.tenantId;\n+    if (tenantId == null) {\n+      this.userMgtBaseUrl = idToolkitUrlV1;\n+      this.idpConfigMgtBaseUrl = idToolkitUrlV2 + \"/oauthIdpConfigs\";\n     } else {\n       checkArgument(!tenantId.isEmpty(), \"tenant ID must not be empty\");\n-      this.userMgtBaseUrl =\n-          String.format(ID_TOOLKIT_URL, \"v1\", projectId) + getTenantUrlSuffix(tenantId);\n+      this.userMgtBaseUrl = idToolkitUrlV1 + getTenantUrlSuffix(tenantId);\n+      this.idpConfigMgtBaseUrl = idToolkitUrlV2 + getTenantUrlSuffix(tenantId) + \"/oauthIdpConfigs\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e47744e81cc20c49107644a23f6eb6e572a627c"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU0MjgyNA==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-admin-java/pull/400#discussion_r417542824", "createdAt": "2020-04-29T19:00:47Z", "author": {"login": "micahstairs"}, "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -120,15 +122,18 @@\n         \"Project ID is required to access the auth service. Use a service account credential or \"\n             + \"set the project ID explicitly via FirebaseOptions. Alternatively you can also \"\n             + \"set the project ID via the GOOGLE_CLOUD_PROJECT environment variable.\");\n-    String tenantId = builder.tenantId;\n-    if (builder.tenantId == null) {\n-      this.userMgtBaseUrl = String.format(ID_TOOLKIT_URL, \"v1\", projectId);\n+    final String idToolkitUrlV1 = String.format(ID_TOOLKIT_URL, \"v1\", projectId);\n+    final String idToolkitUrlV2 = String.format(ID_TOOLKIT_URL, \"v2\", projectId);\n+    final String tenantId = builder.tenantId;\n+    if (tenantId == null) {\n+      this.userMgtBaseUrl = idToolkitUrlV1;\n+      this.idpConfigMgtBaseUrl = idToolkitUrlV2 + \"/oauthIdpConfigs\";\n     } else {\n       checkArgument(!tenantId.isEmpty(), \"tenant ID must not be empty\");\n-      this.userMgtBaseUrl =\n-          String.format(ID_TOOLKIT_URL, \"v1\", projectId) + getTenantUrlSuffix(tenantId);\n+      this.userMgtBaseUrl = idToolkitUrlV1 + getTenantUrlSuffix(tenantId);\n+      this.idpConfigMgtBaseUrl = idToolkitUrlV2 + getTenantUrlSuffix(tenantId) + \"/oauthIdpConfigs\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUzMDU0Nw=="}, "originalCommit": {"oid": "5e47744e81cc20c49107644a23f6eb6e572a627c"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1563, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}