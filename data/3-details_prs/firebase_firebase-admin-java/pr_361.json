{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNTYwNDgy", "number": 361, "title": "Add updateRequest method to Tenant class and add unit tests.", "bodyText": "This pull request adds some things to the Tenant class and adds a few unit tests. This is part of the initiative to adding multi-tenancy support (see issue #332).\nIt's worth noting that these changes deviate from the API design doc. I realized that the updateTenant method in my design doc doesn\u2019t match the design of the existing updateUser method. To fix this, I'm adding the tenantId to Tenant.UpdateRequest.\nThis PR also removes the usage of AutoValue since using it was going to deviate too much from the design of the request classes in UserRecord. This change will also make it easier to do JSON serialization when we sending the requests.", "createdAt": "2020-02-07T19:17:47Z", "url": "https://github.com/firebase/firebase-admin-java/pull/361", "merged": true, "mergeCommit": {"oid": "44533629546584eceef3d34535dbb9a2cc177e0e"}, "closed": true, "closedAt": "2020-02-17T16:30:53Z", "author": {"login": "micahstairs"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcCEKonAH2gAyMzcyNTYwNDgyOjU3NDc3OTVmNDYwMTNkMGFkZjZhZDM1MjExZWE3NTZhZTgzMDIzZTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcFP7-HgFqTM1OTg1NjcyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5747795f46013d0adf6ad35211ea756ae83023e7", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/5747795f46013d0adf6ad35211ea756ae83023e7", "committedDate": "2020-02-07T19:05:10Z", "message": "Add updateRequest method to Tenant class and add unit tests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NDUwMTM5", "url": "https://github.com/firebase/firebase-admin-java/pull/361#pullrequestreview-355450139", "createdAt": "2020-02-07T21:33:32Z", "commit": {"oid": "5747795f46013d0adf6ad35211ea756ae83023e7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMTozMzozMlrOFnK7cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMTozNDo1N1rOFnK9aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxNzg0MA==", "bodyText": "I think this shouldn't be exposed. Builder seems to be a package-protected. Also we don't have a similar method in UserRecord.UpdateRequest. May be just expose the constructor.\nTenant tenant = ...;\nUpdateRequest req = tenant.updateRequest();\n\n// Or alternatively users should be able to:\nUpdateRequest req = new Tenant.UpdateReuqst(tenant.getTenantId());", "url": "https://github.com/firebase/firebase-admin-java/pull/361#discussion_r376617840", "createdAt": "2020-02-07T21:33:32Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/Tenant.java", "diffHunk": "@@ -134,14 +161,20 @@ public static Builder newBuilder() {\n      * Returns a builder for a tenant update request.\n      */\n     public static Builder newBuilder() {\n+      // TOOD(micahstairs): Figure out if any of the UpdateRequest fields should default to anything\n+      // particular. If any fields do not have a reasonable default, then the\n+      // fields should be made nullable, otherwise AutoValue will throw an\n+      // exception if those fields are left unset.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5747795f46013d0adf6ad35211ea756ae83023e7"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxODM0NQ==", "bodyText": "I think we should just set the tenantId. Other parameters will not be set, which means they won't be updated in the back-end.", "url": "https://github.com/firebase/firebase-admin-java/pull/361#discussion_r376618345", "createdAt": "2020-02-07T21:34:57Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/Tenant.java", "diffHunk": "@@ -54,6 +54,22 @@ public boolean isEmailLinkSignInEnabled() {\n     return emailLinkSignInEnabled;\n   }\n \n+  /**\n+   * Returns a new {@link UpdateRequest}, which can be used to update the attributes\n+   * of this tenant.\n+   *\n+   * @return a non-null Tenant.UpdateRequest instance.\n+   */\n+  public UpdateRequest updateRequest() {\n+    return UpdateRequest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5747795f46013d0adf6ad35211ea756ae83023e7"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e546a56f24797cba544d52ff833773bf5cd2bb8", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/6e546a56f24797cba544d52ff833773bf5cd2bb8", "committedDate": "2020-02-13T20:04:00Z", "message": "Rewrite Tenant.CreateRequest and Tenant.UpdateRequest without using AutoValue."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NTYxMDQ0", "url": "https://github.com/firebase/firebase-admin-java/pull/361#pullrequestreview-358561044", "createdAt": "2020-02-13T21:23:50Z", "commit": {"oid": "6e546a56f24797cba544d52ff833773bf5cd2bb8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMToyMzo1MFrOFpkCPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMToyNTo1NVrOFpkGFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyNjMzMw==", "bodyText": "final", "url": "https://github.com/firebase/firebase-admin-java/pull/361#discussion_r379126333", "createdAt": "2020-02-13T21:23:50Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/Tenant.java", "diffHunk": "@@ -55,100 +60,136 @@ public boolean isEmailLinkSignInEnabled() {\n   }\n \n   /**\n-   * Class used to hold the information needs to make a tenant create request.\n+   * Returns a new {@link UpdateRequest}, which can be used to update the attributes\n+   * of this tenant.\n+   *\n+   * @return a non-null Tenant.UpdateRequest instance.\n    */\n-  @AutoValue\n-  public abstract static class CreateRequest {\n+  public UpdateRequest updateRequest() {\n+    return new UpdateRequest(getTenantId());\n+  }\n+\n+  /**\n+   * A specification class for creating new user accounts.\n+   *\n+   * <p>Set the initial attributes of the new tenant by calling various setter methods available in\n+   * this class. None of the attributes are required.\n+   */\n+  public static class CreateRequest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e546a56f24797cba544d52ff833773bf5cd2bb8"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyNjQ5Ng==", "bodyText": "final", "url": "https://github.com/firebase/firebase-admin-java/pull/361#discussion_r379126496", "createdAt": "2020-02-13T21:24:11Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/Tenant.java", "diffHunk": "@@ -55,100 +60,136 @@ public boolean isEmailLinkSignInEnabled() {\n   }\n \n   /**\n-   * Class used to hold the information needs to make a tenant create request.\n+   * Returns a new {@link UpdateRequest}, which can be used to update the attributes\n+   * of this tenant.\n+   *\n+   * @return a non-null Tenant.UpdateRequest instance.\n    */\n-  @AutoValue\n-  public abstract static class CreateRequest {\n+  public UpdateRequest updateRequest() {\n+    return new UpdateRequest(getTenantId());\n+  }\n+\n+  /**\n+   * A specification class for creating new user accounts.\n+   *\n+   * <p>Set the initial attributes of the new tenant by calling various setter methods available in\n+   * this class. None of the attributes are required.\n+   */\n+  public static class CreateRequest {\n+\n+    private final Map<String,Object> properties = new HashMap<>();\n \n     /**\n-     * Returns the display name of this tenant.\n+     * Creates a new {@link CreateRequest}, which can be used to create a new tenant.\n      *\n-     * @return a non-empty display name string.\n+     * <p>The returned object should be passed to {@link TenantManager#createTenant(CreateRequest)}\n+     * to register the tenant information persistently.\n      */\n-    public abstract String getDisplayName();\n+    public CreateRequest() { }\n \n     /**\n-     * Returns whether to allow email/password user authentication.\n+     * Sets the display name for the new tenant.\n      *\n-     * @return true if a user can be authenticated using an email and password, and false otherwise.\n+     * @param displayName a non-null, non-empty display name string.\n      */\n-    public abstract boolean isPasswordSignInAllowed();\n+    public CreateRequest setDisplayName(String displayName) {\n+      checkArgument(!Strings.isNullOrEmpty(displayName), \"display name must not be null or empty\");\n+      properties.put(\"dislayName\", displayName);\n+      return this;\n+    }\n \n     /**\n-     * Returns whether to enable email link user authentication.\n+     * Sets whether to allow email/password user authentication.\n      *\n-     * @return true if a user can be authenticated using an email link, and false otherwise.\n+     * @param passwordSignInAllowed a boolean indicating whether users can be authenticated using\n+     *     an email and password, and false otherwise.\n      */\n-    public abstract boolean isEmailLinkSignInEnabled();\n+    public CreateRequest setPasswordSignInAllowed(boolean passwordSignInAllowed) {\n+      properties.put(\"allowPasswordSignup\", passwordSignInAllowed);\n+      return this;\n+    }\n \n     /**\n-     * Returns a builder for a tenant create request.\n+     * Sets whether to enable email link user authentication.\n+     *\n+     * @param emailLinkSignInEnabled a boolean indicating whether users can be authenticated using\n+     *     an email link, and false otherwise.\n      */\n-    public static Builder newBuilder() {\n-      return new AutoValue_Tenant_CreateRequest.Builder();\n+    public CreateRequest setEmailLinkSignInEnabled(boolean emailLinkSignInEnabled) {\n+      properties.put(\"enableEmailLinkSignin\", emailLinkSignInEnabled);\n+      return this;\n     }\n \n-    /**\n-    * Builder class used to construct a create request.\n-    */\n-    @AutoValue.Builder\n-    abstract static class Builder {\n-      public abstract Builder setDisplayName(String displayName);\n-\n-      public abstract Builder setPasswordSignInAllowed(boolean allowPasswordSignIn);\n-\n-      public abstract Builder setEmailLinkSignInEnabled(boolean enableEmailLinkSignIn);\n-\n-      public abstract CreateRequest build();\n+    Map<String, Object> getProperties() {\n+      return ImmutableMap.copyOf(properties);\n     }\n   }\n \n   /**\n-   * Class used to hold the information needs to make a tenant update request. \n+   * A class for updating the attributes of an existing tenant.\n+   *\n+   * <p>An instance of this class can be obtained via a {@link Tenant} object, or from a tenant ID\n+   * string. Specify the changes to be made to the tenant by calling the various setter methods\n+   * available in this class.\n    */\n-  @AutoValue\n-  public abstract static class UpdateRequest {\n+  public static class UpdateRequest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e546a56f24797cba544d52ff833773bf5cd2bb8"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyNjk4Mw==", "bodyText": "Define a constant for this and avoid duplication.", "url": "https://github.com/firebase/firebase-admin-java/pull/361#discussion_r379126983", "createdAt": "2020-02-13T21:25:10Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/auth/TenantTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import static com.google.firebase.auth.Tenant.UpdateRequest;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.google.api.client.googleapis.util.Utils;\n+import com.google.api.client.json.JsonFactory;\n+import java.io.IOException;\n+import java.util.Map;\n+import org.junit.Test;\n+\n+public class TenantTest {\n+\n+  private static final JsonFactory jsonFactory = Utils.getDefaultJsonFactory();\n+\n+  @Test\n+  public void testJsonSerialization() throws IOException {\n+    Tenant tenant = jsonFactory.fromString(\n+        \"{\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e546a56f24797cba544d52ff833773bf5cd2bb8"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyNzMxOA==", "bodyText": "These last 3 assertions are probably redundant since you've already tested for size == 1", "url": "https://github.com/firebase/firebase-admin-java/pull/361#discussion_r379127318", "createdAt": "2020-02-13T21:25:55Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/auth/TenantTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import static com.google.firebase.auth.Tenant.UpdateRequest;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.google.api.client.googleapis.util.Utils;\n+import com.google.api.client.json.JsonFactory;\n+import java.io.IOException;\n+import java.util.Map;\n+import org.junit.Test;\n+\n+public class TenantTest {\n+\n+  private static final JsonFactory jsonFactory = Utils.getDefaultJsonFactory();\n+\n+  @Test\n+  public void testJsonSerialization() throws IOException {\n+    Tenant tenant = jsonFactory.fromString(\n+        \"{\"\n+          + \"\\\"tenantId\\\":\\\"TENANT_ID\\\",\"\n+          + \"\\\"displayName\\\":\\\"DISPLAY_NAME\\\",\"\n+          + \"\\\"allowPasswordSignup\\\":true,\"\n+          + \"\\\"enableEmailLinkSignin\\\":false\"\n+          + \"}\", Tenant.class);\n+\n+    assertEquals(tenant.getTenantId(), \"TENANT_ID\");\n+    assertEquals(tenant.getDisplayName(), \"DISPLAY_NAME\");\n+    assertTrue(tenant.isPasswordSignInAllowed());\n+    assertFalse(tenant.isEmailLinkSignInEnabled());\n+  }\n+\n+  @Test\n+  public void testCreateUpdateRequestFromTenant() throws IOException {\n+    Tenant tenant = jsonFactory.fromString(\n+        \"{\"\n+          + \"\\\"tenantId\\\":\\\"TENANT_ID\\\",\"\n+          + \"\\\"displayName\\\":\\\"DISPLAY_NAME\\\",\"\n+          + \"\\\"allowPasswordSignup\\\":true,\"\n+          + \"\\\"enableEmailLinkSignin\\\":false\"\n+          + \"}\", Tenant.class);\n+\n+    Tenant.UpdateRequest updateRequest = tenant.updateRequest();\n+\n+    assertEquals(\"TENANT_ID\", updateRequest.getTenantId());\n+    Map<String,Object> properties = updateRequest.getProperties();\n+    assertEquals(properties.size(), 1);\n+    assertEquals(\"TENANT_ID\", (String) properties.get(\"tenantId\"));\n+    assertNull(properties.get(\"displayName\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e546a56f24797cba544d52ff833773bf5cd2bb8"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03e8220f9bb1ae2c582c88d056190f602e49bc8e", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/03e8220f9bb1ae2c582c88d056190f602e49bc8e", "committedDate": "2020-02-14T00:47:12Z", "message": "Fix inaccurate documentation concerning the emptyness of displayName parameter."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2077e3bb54de30169df97880c21e8e735942cdcb", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/2077e3bb54de30169df97880c21e8e735942cdcb", "committedDate": "2020-02-14T00:57:35Z", "message": "Apply suggested fixes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "565bea538155f66ae729dcb05e9f4e208e559837", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/565bea538155f66ae729dcb05e9f4e208e559837", "committedDate": "2020-02-14T01:04:35Z", "message": "Remove blip which slipped into my editor accidentally."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NjY0NDAw", "url": "https://github.com/firebase/firebase-admin-java/pull/361#pullrequestreview-358664400", "createdAt": "2020-02-14T01:30:30Z", "commit": {"oid": "565bea538155f66ae729dcb05e9f4e208e559837"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbd97ed7977db2104a59fe1aef271f4373255bad", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/bbd97ed7977db2104a59fe1aef271f4373255bad", "committedDate": "2020-02-14T14:44:04Z", "message": "Add unit test for Tenant.CreateRequest and fix bug in implementation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ea93da39673f45fbf96e4d7472f4c801c384a04", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/3ea93da39673f45fbf96e4d7472f4c801c384a04", "committedDate": "2020-02-15T19:22:37Z", "message": "Fix JSON variable for tenant ID."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5ODU2NzI1", "url": "https://github.com/firebase/firebase-admin-java/pull/361#pullrequestreview-359856725", "createdAt": "2020-02-17T16:29:47Z", "commit": {"oid": "3ea93da39673f45fbf96e4d7472f4c801c384a04"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2816, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}