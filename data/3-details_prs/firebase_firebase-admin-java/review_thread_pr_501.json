{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2MzM3NTY2", "number": 501, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMDoxMjowMlrOFDv0gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMDoyMTo1MlrOFDv_cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDczNTM5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMDoxMjowMlrOIDjRZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjowOTo1OVrOID_g8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU5NDUzNA==", "bodyText": "I'd suggest using the sync APIs here like the previous test case.", "url": "https://github.com/firebase/firebase-admin-java/pull/501#discussion_r540594534", "createdAt": "2020-12-11T00:12:02Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigIT.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNull;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.api.core.ApiFutureCallback;\n+import com.google.api.core.ApiFutures;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.google.firebase.testing.IntegrationTestUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Semaphore;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class FirebaseRemoteConfigIT {\n+\n+  private static FirebaseRemoteConfig remoteConfig;\n+\n+  private static final long timestamp = System.currentTimeMillis();\n+\n+  private static final Map<String, Parameter> PARAMETERS = ImmutableMap.of(\n+          \"welcome_message_text\", new Parameter()\n+                  .setDefaultValue(ParameterValue\n+                          .of(String.format(\"welcome to app %s\", timestamp)))\n+                  .setConditionalValues(ImmutableMap.<String, ParameterValue>of(\n+                          \"ios_en\",\n+                          ParameterValue.of(String.format(\"welcome to app en %s\", timestamp))\n+                  ))\n+                  .setDescription(\"text for welcome message!\"),\n+          \"header_text\", new Parameter()\n+                  .setDefaultValue(ParameterValue.inAppDefault()));\n+\n+  private static final Map<String, ParameterGroup> PARAMETER_GROUPS = ImmutableMap.of(\n+          \"new menu\", new ParameterGroup()\n+                  .setDescription(String.format(\"New Menu %s\", timestamp))\n+                  .setParameters(ImmutableMap.of(\n+                          \"pumpkin_spice_season\", new Parameter()\n+                                  .setDefaultValue(ParameterValue.of(\"true\"))\n+                                  .setDescription(\"Whether it's currently pumpkin spice season.\"))\n+                  ));\n+\n+  private static final List<Condition> CONDITIONS = ImmutableList.of(\n+          new Condition(\"ios_en\", \"device.os == 'ios' && device.country in ['us', 'uk']\")\n+                  .setTagColor(TagColor.INDIGO),\n+          new Condition(\"android_en\",\n+                  \"device.os == 'android' && device.country in ['us', 'uk']\"));\n+\n+  private static final Version VERSION = Version\n+          .withDescription(String.format(\"promo config %s\", timestamp));\n+\n+  @BeforeClass\n+  public static void setUpClass() {\n+    remoteConfig = FirebaseRemoteConfig.getInstance(IntegrationTestUtils.ensureDefaultApp());\n+  }\n+\n+  @Test\n+  public void testTemplateOperations() throws FirebaseRemoteConfigException {\n+    // get template to fetch the active template with correct etag\n+    final Template oldTemplate = remoteConfig.getTemplate();\n+    final Template inputTemplate = Template.fromJSON(oldTemplate.toJSON());\n+    final String versionNumber = oldTemplate.getVersion().getVersionNumber();\n+\n+    // modify template\n+    inputTemplate.setParameters(PARAMETERS)\n+            .setParameterGroups(PARAMETER_GROUPS)\n+            .setConditions(CONDITIONS)\n+            .setVersion(VERSION);\n+\n+    // validate template\n+    Template validatedTemplate = remoteConfig.validateTemplate(inputTemplate);\n+    assertEquals(inputTemplate.getETag(), validatedTemplate.getETag());\n+    assertEquals(PARAMETERS, validatedTemplate.getParameters());\n+    assertEquals(PARAMETER_GROUPS, validatedTemplate.getParameterGroups());\n+    assertEquals(CONDITIONS, validatedTemplate.getConditions());\n+    assertEquals(VERSION, validatedTemplate.getVersion());\n+\n+    // publish template\n+    Template publishedTemplate = remoteConfig.publishTemplate(inputTemplate);\n+    assertNotEquals(inputTemplate.getETag(), publishedTemplate.getETag());\n+    assertEquals(PARAMETERS, publishedTemplate.getParameters());\n+    assertEquals(PARAMETER_GROUPS, publishedTemplate.getParameterGroups());\n+    assertEquals(CONDITIONS, publishedTemplate.getConditions());\n+    assertNotEquals(VERSION, publishedTemplate.getVersion());\n+\n+    // get template\n+    Template currentTemplate = remoteConfig.getTemplate();\n+    assertEquals(publishedTemplate, currentTemplate);\n+\n+    // get template at version\n+    Template atVersionTemplate = remoteConfig.getTemplateAtVersion(versionNumber);\n+    assertEquals(oldTemplate, atVersionTemplate);\n+    assertEquals(versionNumber, atVersionTemplate.getVersion().getVersionNumber());\n+\n+    // rollback template\n+    Template rolledBackTemplate = remoteConfig.rollback(versionNumber);\n+    assertEquals(String.format(\"Rollback to version %s\", versionNumber),\n+            rolledBackTemplate.getVersion().getDescription());\n+\n+    // get template to verify rollback\n+    Template activeTemplate = remoteConfig.getTemplate();\n+    assertEquals(rolledBackTemplate, activeTemplate);\n+  }\n+\n+  @Test\n+  public void testListVersions() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb1df35da8a4c726d49c4a2c3d70e93ba87a5c7c"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA1NzI2NQ==", "bodyText": "Updated to use the sync api", "url": "https://github.com/firebase/firebase-admin-java/pull/501#discussion_r541057265", "createdAt": "2020-12-11T16:09:59Z", "author": {"login": "lahirumaramba"}, "path": "src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigIT.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNull;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.api.core.ApiFutureCallback;\n+import com.google.api.core.ApiFutures;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.google.firebase.testing.IntegrationTestUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Semaphore;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class FirebaseRemoteConfigIT {\n+\n+  private static FirebaseRemoteConfig remoteConfig;\n+\n+  private static final long timestamp = System.currentTimeMillis();\n+\n+  private static final Map<String, Parameter> PARAMETERS = ImmutableMap.of(\n+          \"welcome_message_text\", new Parameter()\n+                  .setDefaultValue(ParameterValue\n+                          .of(String.format(\"welcome to app %s\", timestamp)))\n+                  .setConditionalValues(ImmutableMap.<String, ParameterValue>of(\n+                          \"ios_en\",\n+                          ParameterValue.of(String.format(\"welcome to app en %s\", timestamp))\n+                  ))\n+                  .setDescription(\"text for welcome message!\"),\n+          \"header_text\", new Parameter()\n+                  .setDefaultValue(ParameterValue.inAppDefault()));\n+\n+  private static final Map<String, ParameterGroup> PARAMETER_GROUPS = ImmutableMap.of(\n+          \"new menu\", new ParameterGroup()\n+                  .setDescription(String.format(\"New Menu %s\", timestamp))\n+                  .setParameters(ImmutableMap.of(\n+                          \"pumpkin_spice_season\", new Parameter()\n+                                  .setDefaultValue(ParameterValue.of(\"true\"))\n+                                  .setDescription(\"Whether it's currently pumpkin spice season.\"))\n+                  ));\n+\n+  private static final List<Condition> CONDITIONS = ImmutableList.of(\n+          new Condition(\"ios_en\", \"device.os == 'ios' && device.country in ['us', 'uk']\")\n+                  .setTagColor(TagColor.INDIGO),\n+          new Condition(\"android_en\",\n+                  \"device.os == 'android' && device.country in ['us', 'uk']\"));\n+\n+  private static final Version VERSION = Version\n+          .withDescription(String.format(\"promo config %s\", timestamp));\n+\n+  @BeforeClass\n+  public static void setUpClass() {\n+    remoteConfig = FirebaseRemoteConfig.getInstance(IntegrationTestUtils.ensureDefaultApp());\n+  }\n+\n+  @Test\n+  public void testTemplateOperations() throws FirebaseRemoteConfigException {\n+    // get template to fetch the active template with correct etag\n+    final Template oldTemplate = remoteConfig.getTemplate();\n+    final Template inputTemplate = Template.fromJSON(oldTemplate.toJSON());\n+    final String versionNumber = oldTemplate.getVersion().getVersionNumber();\n+\n+    // modify template\n+    inputTemplate.setParameters(PARAMETERS)\n+            .setParameterGroups(PARAMETER_GROUPS)\n+            .setConditions(CONDITIONS)\n+            .setVersion(VERSION);\n+\n+    // validate template\n+    Template validatedTemplate = remoteConfig.validateTemplate(inputTemplate);\n+    assertEquals(inputTemplate.getETag(), validatedTemplate.getETag());\n+    assertEquals(PARAMETERS, validatedTemplate.getParameters());\n+    assertEquals(PARAMETER_GROUPS, validatedTemplate.getParameterGroups());\n+    assertEquals(CONDITIONS, validatedTemplate.getConditions());\n+    assertEquals(VERSION, validatedTemplate.getVersion());\n+\n+    // publish template\n+    Template publishedTemplate = remoteConfig.publishTemplate(inputTemplate);\n+    assertNotEquals(inputTemplate.getETag(), publishedTemplate.getETag());\n+    assertEquals(PARAMETERS, publishedTemplate.getParameters());\n+    assertEquals(PARAMETER_GROUPS, publishedTemplate.getParameterGroups());\n+    assertEquals(CONDITIONS, publishedTemplate.getConditions());\n+    assertNotEquals(VERSION, publishedTemplate.getVersion());\n+\n+    // get template\n+    Template currentTemplate = remoteConfig.getTemplate();\n+    assertEquals(publishedTemplate, currentTemplate);\n+\n+    // get template at version\n+    Template atVersionTemplate = remoteConfig.getTemplateAtVersion(versionNumber);\n+    assertEquals(oldTemplate, atVersionTemplate);\n+    assertEquals(versionNumber, atVersionTemplate.getVersion().getVersionNumber());\n+\n+    // rollback template\n+    Template rolledBackTemplate = remoteConfig.rollback(versionNumber);\n+    assertEquals(String.format(\"Rollback to version %s\", versionNumber),\n+            rolledBackTemplate.getVersion().getDescription());\n+\n+    // get template to verify rollback\n+    Template activeTemplate = remoteConfig.getTemplate();\n+    assertEquals(rolledBackTemplate, activeTemplate);\n+  }\n+\n+  @Test\n+  public void testListVersions() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU5NDUzNA=="}, "originalCommit": {"oid": "eb1df35da8a4c726d49c4a2c3d70e93ba87a5c7c"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDc2MzM5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMDoyMTo1MlrOIDjgWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjoxMToyNlrOID_klw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU5ODM2Mw==", "bodyText": "Nit: Some of these can be split into separate test case with a bit of effort and extra RPCs (I'll leave it to you to decide whether that's worth it)\n\nvalidate can be easily turned into a separate test case\ngetAtVersion and rollback can also be made into separate test cases if we are willing to run a few extra get and publish operations.", "url": "https://github.com/firebase/firebase-admin-java/pull/501#discussion_r540598363", "createdAt": "2020-12-11T00:21:52Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigIT.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNull;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.api.core.ApiFutureCallback;\n+import com.google.api.core.ApiFutures;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.google.firebase.testing.IntegrationTestUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Semaphore;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class FirebaseRemoteConfigIT {\n+\n+  private static FirebaseRemoteConfig remoteConfig;\n+\n+  private static final long timestamp = System.currentTimeMillis();\n+\n+  private static final Map<String, Parameter> PARAMETERS = ImmutableMap.of(\n+          \"welcome_message_text\", new Parameter()\n+                  .setDefaultValue(ParameterValue\n+                          .of(String.format(\"welcome to app %s\", timestamp)))\n+                  .setConditionalValues(ImmutableMap.<String, ParameterValue>of(\n+                          \"ios_en\",\n+                          ParameterValue.of(String.format(\"welcome to app en %s\", timestamp))\n+                  ))\n+                  .setDescription(\"text for welcome message!\"),\n+          \"header_text\", new Parameter()\n+                  .setDefaultValue(ParameterValue.inAppDefault()));\n+\n+  private static final Map<String, ParameterGroup> PARAMETER_GROUPS = ImmutableMap.of(\n+          \"new menu\", new ParameterGroup()\n+                  .setDescription(String.format(\"New Menu %s\", timestamp))\n+                  .setParameters(ImmutableMap.of(\n+                          \"pumpkin_spice_season\", new Parameter()\n+                                  .setDefaultValue(ParameterValue.of(\"true\"))\n+                                  .setDescription(\"Whether it's currently pumpkin spice season.\"))\n+                  ));\n+\n+  private static final List<Condition> CONDITIONS = ImmutableList.of(\n+          new Condition(\"ios_en\", \"device.os == 'ios' && device.country in ['us', 'uk']\")\n+                  .setTagColor(TagColor.INDIGO),\n+          new Condition(\"android_en\",\n+                  \"device.os == 'android' && device.country in ['us', 'uk']\"));\n+\n+  private static final Version VERSION = Version\n+          .withDescription(String.format(\"promo config %s\", timestamp));\n+\n+  @BeforeClass\n+  public static void setUpClass() {\n+    remoteConfig = FirebaseRemoteConfig.getInstance(IntegrationTestUtils.ensureDefaultApp());\n+  }\n+\n+  @Test\n+  public void testTemplateOperations() throws FirebaseRemoteConfigException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb1df35da8a4c726d49c4a2c3d70e93ba87a5c7c"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA1ODE5OQ==", "bodyText": "Good point! As discussed offline let's address this in a future PR. Thanks!", "url": "https://github.com/firebase/firebase-admin-java/pull/501#discussion_r541058199", "createdAt": "2020-12-11T16:11:26Z", "author": {"login": "lahirumaramba"}, "path": "src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigIT.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNull;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.api.core.ApiFutureCallback;\n+import com.google.api.core.ApiFutures;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.google.firebase.testing.IntegrationTestUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Semaphore;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class FirebaseRemoteConfigIT {\n+\n+  private static FirebaseRemoteConfig remoteConfig;\n+\n+  private static final long timestamp = System.currentTimeMillis();\n+\n+  private static final Map<String, Parameter> PARAMETERS = ImmutableMap.of(\n+          \"welcome_message_text\", new Parameter()\n+                  .setDefaultValue(ParameterValue\n+                          .of(String.format(\"welcome to app %s\", timestamp)))\n+                  .setConditionalValues(ImmutableMap.<String, ParameterValue>of(\n+                          \"ios_en\",\n+                          ParameterValue.of(String.format(\"welcome to app en %s\", timestamp))\n+                  ))\n+                  .setDescription(\"text for welcome message!\"),\n+          \"header_text\", new Parameter()\n+                  .setDefaultValue(ParameterValue.inAppDefault()));\n+\n+  private static final Map<String, ParameterGroup> PARAMETER_GROUPS = ImmutableMap.of(\n+          \"new menu\", new ParameterGroup()\n+                  .setDescription(String.format(\"New Menu %s\", timestamp))\n+                  .setParameters(ImmutableMap.of(\n+                          \"pumpkin_spice_season\", new Parameter()\n+                                  .setDefaultValue(ParameterValue.of(\"true\"))\n+                                  .setDescription(\"Whether it's currently pumpkin spice season.\"))\n+                  ));\n+\n+  private static final List<Condition> CONDITIONS = ImmutableList.of(\n+          new Condition(\"ios_en\", \"device.os == 'ios' && device.country in ['us', 'uk']\")\n+                  .setTagColor(TagColor.INDIGO),\n+          new Condition(\"android_en\",\n+                  \"device.os == 'android' && device.country in ['us', 'uk']\"));\n+\n+  private static final Version VERSION = Version\n+          .withDescription(String.format(\"promo config %s\", timestamp));\n+\n+  @BeforeClass\n+  public static void setUpClass() {\n+    remoteConfig = FirebaseRemoteConfig.getInstance(IntegrationTestUtils.ensureDefaultApp());\n+  }\n+\n+  @Test\n+  public void testTemplateOperations() throws FirebaseRemoteConfigException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU5ODM2Mw=="}, "originalCommit": {"oid": "eb1df35da8a4c726d49c4a2c3d70e93ba87a5c7c"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1492, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}