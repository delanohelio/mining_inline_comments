{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMTgyOTg1", "number": 404, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMTowNDozOVrOD5KhGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMjoxOToxMFrOD5L56w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjY3NzM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMTowNDozOVrOGQSI1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMTo1MzozM1rOGQTnVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcyNzU3Mg==", "bodyText": "Is 100 the right value to use as a maximum? The Go implementation uses 100 but I don't think the Node implementation has a limit at all. It's not clear what limit the server enforces.", "url": "https://github.com/firebase/firebase-admin-java/pull/404#discussion_r419727572", "createdAt": "2020-05-04T21:04:39Z", "author": {"login": "micahstairs"}, "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -94,6 +95,7 @@\n       .put(\"INVALID_DYNAMIC_LINK_DOMAIN\", \"invalid-dynamic-link-domain\")\n       .build();\n \n+  static final int MAX_LIST_PROVIDER_CONFIGS_RESULTS = 100;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68edeb3dc1a8f6b143197e32a76ec524431039f6"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc1MTc2NA==", "bodyText": "Yes 100 is correct.", "url": "https://github.com/firebase/firebase-admin-java/pull/404#discussion_r419751764", "createdAt": "2020-05-04T21:53:33Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -94,6 +95,7 @@\n       .put(\"INVALID_DYNAMIC_LINK_DOMAIN\", \"invalid-dynamic-link-domain\")\n       .build();\n \n+  static final int MAX_LIST_PROVIDER_CONFIGS_RESULTS = 100;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcyNzU3Mg=="}, "originalCommit": {"oid": "68edeb3dc1a8f6b143197e32a76ec524431039f6"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjg2NDk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/ListUsersPage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMjowNDoxOFrOGQT6Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMzozMjo1MFrOGQV1zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc1NjU3NA==", "bodyText": "May be just call this Factory and use the full qualified name of ListUsersPage.Factory at callsites?", "url": "https://github.com/firebase/firebase-admin-java/pull/404#discussion_r419756574", "createdAt": "2020-05-04T22:04:18Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/ListUsersPage.java", "diffHunk": "@@ -237,17 +238,17 @@ String getNextPageToken() {\n    * before attempting to load any user data (which is expensive, and hence may be performed\n    * asynchronously on a separate thread).\n    */\n-  static class PageFactory {\n+  static class UserPageFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68edeb3dc1a8f6b143197e32a76ec524431039f6"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4ODIzNg==", "bodyText": "Good idea!", "url": "https://github.com/firebase/firebase-admin-java/pull/404#discussion_r419788236", "createdAt": "2020-05-04T23:32:50Z", "author": {"login": "micahstairs"}, "path": "src/main/java/com/google/firebase/auth/ListUsersPage.java", "diffHunk": "@@ -237,17 +238,17 @@ String getNextPageToken() {\n    * before attempting to load any user data (which is expensive, and hence may be performed\n    * asynchronously on a separate thread).\n    */\n-  static class PageFactory {\n+  static class UserPageFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc1NjU3NA=="}, "originalCommit": {"oid": "68edeb3dc1a8f6b143197e32a76ec524431039f6"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjg2OTMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMjowNTo1NVrOGQT80w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMzozMzo1M1rOGQV27A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc1NzI2Nw==", "bodyText": "Mention the default maxResults in the docs.", "url": "https://github.com/firebase/firebase-admin-java/pull/404#discussion_r419757267", "createdAt": "2020-05-04T22:05:55Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -1058,6 +1060,78 @@ protected OidcProviderConfig execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Gets a page of OIDC Auth provider configs starting from the specified {@code pageToken}.\n+   *\n+   * @param pageToken A non-empty page token string, or null to retrieve the first page of provider\n+   *     configs.\n+   * @param maxResults Maximum number of provider configs to include in the returned page. This may\n+   *     not exceed 100.\n+   * @return A {@link ListProviderConfigsPage} instance.\n+   * @throws IllegalArgumentException If the specified page token is empty, or max results value is\n+   *     invalid.\n+   * @throws FirebaseAuthException If an error occurs while retrieving user data.\n+   */\n+  public ListProviderConfigsPage<OidcProviderConfig> listOidcProviderConfigs(\n+        @Nullable String pageToken, int maxResults) throws FirebaseAuthException {\n+    return listOidcProviderConfigsOp(pageToken, maxResults).call();\n+  }\n+\n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68edeb3dc1a8f6b143197e32a76ec524431039f6"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4ODUyNA==", "bodyText": "Done. I followed the same pattern as in the list user methods.", "url": "https://github.com/firebase/firebase-admin-java/pull/404#discussion_r419788524", "createdAt": "2020-05-04T23:33:53Z", "author": {"login": "micahstairs"}, "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -1058,6 +1060,78 @@ protected OidcProviderConfig execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Gets a page of OIDC Auth provider configs starting from the specified {@code pageToken}.\n+   *\n+   * @param pageToken A non-empty page token string, or null to retrieve the first page of provider\n+   *     configs.\n+   * @param maxResults Maximum number of provider configs to include in the returned page. This may\n+   *     not exceed 100.\n+   * @return A {@link ListProviderConfigsPage} instance.\n+   * @throws IllegalArgumentException If the specified page token is empty, or max results value is\n+   *     invalid.\n+   * @throws FirebaseAuthException If an error occurs while retrieving user data.\n+   */\n+  public ListProviderConfigsPage<OidcProviderConfig> listOidcProviderConfigs(\n+        @Nullable String pageToken, int maxResults) throws FirebaseAuthException {\n+    return listOidcProviderConfigsOp(pageToken, maxResults).call();\n+  }\n+\n+  /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc1NzI2Nw=="}, "originalCommit": {"oid": "68edeb3dc1a8f6b143197e32a76ec524431039f6"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjg3MzI3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/google/firebase/auth/ListUsersPageTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMjowNzozNlrOGQT_Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMzozMzoxMFrOGQV2Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc1NzkxOQ==", "bodyText": "Lets see if we can keep this as is, or just rename to ListUsersPage.Factory.", "url": "https://github.com/firebase/firebase-admin-java/pull/404#discussion_r419757919", "createdAt": "2020-05-04T22:07:36Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/auth/ListUsersPageTest.java", "diffHunk": "@@ -45,7 +46,7 @@\n   @Test\n   public void testSinglePage() throws FirebaseAuthException, IOException {\n     TestUserSource source = new TestUserSource(3);\n-    ListUsersPage page = new ListUsersPage.PageFactory(source).create();\n+    ListUsersPage page = new UserPageFactory(source).create();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68edeb3dc1a8f6b143197e32a76ec524431039f6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4ODMxOQ==", "bodyText": "Renamed to ListUsersPage.Factory.", "url": "https://github.com/firebase/firebase-admin-java/pull/404#discussion_r419788319", "createdAt": "2020-05-04T23:33:10Z", "author": {"login": "micahstairs"}, "path": "src/test/java/com/google/firebase/auth/ListUsersPageTest.java", "diffHunk": "@@ -45,7 +46,7 @@\n   @Test\n   public void testSinglePage() throws FirebaseAuthException, IOException {\n     TestUserSource source = new TestUserSource(3);\n-    ListUsersPage page = new ListUsersPage.PageFactory(source).create();\n+    ListUsersPage page = new UserPageFactory(source).create();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc1NzkxOQ=="}, "originalCommit": {"oid": "68edeb3dc1a8f6b143197e32a76ec524431039f6"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjg5MDMzOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/google/firebase/auth/FirebaseAuthIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMjoxNDowMFrOGQUJsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMzozMzoyOVrOGQV2gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc2MDU2Mg==", "bodyText": "Define a helper to reduce some of this duplication.\nif (checkProviderConfig(providerIds, providerConfig) {\n  collected.incrementAndGet();\n}\n\nprivate boolean checkProviderConfig(List<String> providerIds, OidcProviderConfig config) {\n  \n}", "url": "https://github.com/firebase/firebase-admin-java/pull/404#discussion_r419760562", "createdAt": "2020-05-04T22:14:00Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/auth/FirebaseAuthIT.java", "diffHunk": "@@ -1066,6 +1066,137 @@ public void testTenantAwareOidcProviderConfigLifecycle() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testListOidcProviderConfigs() throws Exception {\n+    final List<String> providerIds = new ArrayList<>();\n+\n+    try {\n+      // Create provider configs\n+      for (int i = 0; i < 3; i++) {\n+        String providerId = \"oidc.provider-id\" + i;\n+        providerIds.add(providerId);\n+        OidcProviderConfig.CreateRequest createRequest = new OidcProviderConfig.CreateRequest()\n+            .setProviderId(providerId)\n+            .setClientId(\"CLIENT_ID\")\n+            .setIssuer(\"https://oidc.com/issuer\");\n+        auth.createOidcProviderConfig(createRequest);\n+      }\n+\n+      // Test list by batches\n+      final AtomicInteger collected = new AtomicInteger(0);\n+      ListProviderConfigsPage<OidcProviderConfig> page =\n+          auth.listOidcProviderConfigsAsync(null).get();\n+      while (page != null) {\n+        for (OidcProviderConfig providerConfig : page.getValues()) {\n+          if (providerIds.contains(providerConfig.getProviderId())) {\n+            collected.incrementAndGet();\n+            assertEquals(\"CLIENT_ID\", providerConfig.getClientId());\n+            assertEquals(\"https://oidc.com/issuer\", providerConfig.getIssuer());\n+          }\n+        }\n+        page = page.getNextPage();\n+      }\n+      assertEquals(providerIds.size(), collected.get());\n+\n+      // Test iterate all\n+      collected.set(0);\n+      page = auth.listOidcProviderConfigsAsync(null).get();\n+      for (OidcProviderConfig providerConfig : page.iterateAll()) {\n+        if (providerIds.contains(providerConfig.getProviderId())) {\n+          collected.incrementAndGet();\n+          assertEquals(\"CLIENT_ID\", providerConfig.getClientId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68edeb3dc1a8f6b143197e32a76ec524431039f6"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4ODQxNg==", "bodyText": "This doesn't save too many lines, but sure.", "url": "https://github.com/firebase/firebase-admin-java/pull/404#discussion_r419788416", "createdAt": "2020-05-04T23:33:29Z", "author": {"login": "micahstairs"}, "path": "src/test/java/com/google/firebase/auth/FirebaseAuthIT.java", "diffHunk": "@@ -1066,6 +1066,137 @@ public void testTenantAwareOidcProviderConfigLifecycle() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testListOidcProviderConfigs() throws Exception {\n+    final List<String> providerIds = new ArrayList<>();\n+\n+    try {\n+      // Create provider configs\n+      for (int i = 0; i < 3; i++) {\n+        String providerId = \"oidc.provider-id\" + i;\n+        providerIds.add(providerId);\n+        OidcProviderConfig.CreateRequest createRequest = new OidcProviderConfig.CreateRequest()\n+            .setProviderId(providerId)\n+            .setClientId(\"CLIENT_ID\")\n+            .setIssuer(\"https://oidc.com/issuer\");\n+        auth.createOidcProviderConfig(createRequest);\n+      }\n+\n+      // Test list by batches\n+      final AtomicInteger collected = new AtomicInteger(0);\n+      ListProviderConfigsPage<OidcProviderConfig> page =\n+          auth.listOidcProviderConfigsAsync(null).get();\n+      while (page != null) {\n+        for (OidcProviderConfig providerConfig : page.getValues()) {\n+          if (providerIds.contains(providerConfig.getProviderId())) {\n+            collected.incrementAndGet();\n+            assertEquals(\"CLIENT_ID\", providerConfig.getClientId());\n+            assertEquals(\"https://oidc.com/issuer\", providerConfig.getIssuer());\n+          }\n+        }\n+        page = page.getNextPage();\n+      }\n+      assertEquals(providerIds.size(), collected.get());\n+\n+      // Test iterate all\n+      collected.set(0);\n+      page = auth.listOidcProviderConfigsAsync(null).get();\n+      for (OidcProviderConfig providerConfig : page.iterateAll()) {\n+        if (providerIds.contains(providerConfig.getProviderId())) {\n+          collected.incrementAndGet();\n+          assertEquals(\"CLIENT_ID\", providerConfig.getClientId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc2MDU2Mg=="}, "originalCommit": {"oid": "68edeb3dc1a8f6b143197e32a76ec524431039f6"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjkwNDc1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/google/firebase/auth/FirebaseAuthIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMjoxOToxMFrOGQUSAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMzoyNToyOFrOGQVs8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc2MjY5MA==", "bodyText": "I feel like we are creating so many throw away tenants in these tests. I'd suggest that we move all tenant-aware tests to a new class. We can just create one test tenant in a @BeforeClass and reuse it as much as possible. Will make the overall logic a lot clear that way too.\nBut feel free to do that in a separate PR.", "url": "https://github.com/firebase/firebase-admin-java/pull/404#discussion_r419762690", "createdAt": "2020-05-04T22:19:10Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/auth/FirebaseAuthIT.java", "diffHunk": "@@ -1066,6 +1066,137 @@ public void testTenantAwareOidcProviderConfigLifecycle() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testListOidcProviderConfigs() throws Exception {\n+    final List<String> providerIds = new ArrayList<>();\n+\n+    try {\n+      // Create provider configs\n+      for (int i = 0; i < 3; i++) {\n+        String providerId = \"oidc.provider-id\" + i;\n+        providerIds.add(providerId);\n+        OidcProviderConfig.CreateRequest createRequest = new OidcProviderConfig.CreateRequest()\n+            .setProviderId(providerId)\n+            .setClientId(\"CLIENT_ID\")\n+            .setIssuer(\"https://oidc.com/issuer\");\n+        auth.createOidcProviderConfig(createRequest);\n+      }\n+\n+      // Test list by batches\n+      final AtomicInteger collected = new AtomicInteger(0);\n+      ListProviderConfigsPage<OidcProviderConfig> page =\n+          auth.listOidcProviderConfigsAsync(null).get();\n+      while (page != null) {\n+        for (OidcProviderConfig providerConfig : page.getValues()) {\n+          if (providerIds.contains(providerConfig.getProviderId())) {\n+            collected.incrementAndGet();\n+            assertEquals(\"CLIENT_ID\", providerConfig.getClientId());\n+            assertEquals(\"https://oidc.com/issuer\", providerConfig.getIssuer());\n+          }\n+        }\n+        page = page.getNextPage();\n+      }\n+      assertEquals(providerIds.size(), collected.get());\n+\n+      // Test iterate all\n+      collected.set(0);\n+      page = auth.listOidcProviderConfigsAsync(null).get();\n+      for (OidcProviderConfig providerConfig : page.iterateAll()) {\n+        if (providerIds.contains(providerConfig.getProviderId())) {\n+          collected.incrementAndGet();\n+          assertEquals(\"CLIENT_ID\", providerConfig.getClientId());\n+          assertEquals(\"https://oidc.com/issuer\", providerConfig.getIssuer());\n+        }\n+      }\n+      assertEquals(providerIds.size(), collected.get());\n+\n+      // Test iterate async\n+      collected.set(0);\n+      final Semaphore semaphore = new Semaphore(0);\n+      final AtomicReference<Throwable> error = new AtomicReference<>();\n+      ApiFuture<ListProviderConfigsPage<OidcProviderConfig>> pageFuture =\n+          auth.listOidcProviderConfigsAsync(null);\n+      ApiFutures.addCallback(\n+          pageFuture,\n+          new ApiFutureCallback<ListProviderConfigsPage<OidcProviderConfig>>() {\n+            @Override\n+            public void onFailure(Throwable t) {\n+              error.set(t);\n+              semaphore.release();\n+            }\n+\n+            @Override\n+            public void onSuccess(ListProviderConfigsPage<OidcProviderConfig> result) {\n+              for (OidcProviderConfig providerConfig : result.iterateAll()) {\n+                if (providerIds.contains(providerConfig.getProviderId())) {\n+                  collected.incrementAndGet();\n+                  assertEquals(\"CLIENT_ID\", providerConfig.getClientId());\n+                  assertEquals(\"https://oidc.com/issuer\", providerConfig.getIssuer());\n+                }\n+              }\n+              semaphore.release();\n+            }\n+          }, MoreExecutors.directExecutor());\n+      semaphore.acquire();\n+      assertEquals(providerIds.size(), collected.get());\n+      assertNull(error.get());\n+    } finally {\n+      // Delete provider configs\n+      for (String providerId : providerIds) {\n+        auth.deleteProviderConfigAsync(providerId).get();\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testTenantAwareListOidcProviderConfigs() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68edeb3dc1a8f6b143197e32a76ec524431039f6"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4NTk3MQ==", "bodyText": "This is a really good idea! I think this would clean things up a lot. I've added a TODO to address in a separate PR (since it will involve moving quite a bit of code).", "url": "https://github.com/firebase/firebase-admin-java/pull/404#discussion_r419785971", "createdAt": "2020-05-04T23:25:28Z", "author": {"login": "micahstairs"}, "path": "src/test/java/com/google/firebase/auth/FirebaseAuthIT.java", "diffHunk": "@@ -1066,6 +1066,137 @@ public void testTenantAwareOidcProviderConfigLifecycle() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testListOidcProviderConfigs() throws Exception {\n+    final List<String> providerIds = new ArrayList<>();\n+\n+    try {\n+      // Create provider configs\n+      for (int i = 0; i < 3; i++) {\n+        String providerId = \"oidc.provider-id\" + i;\n+        providerIds.add(providerId);\n+        OidcProviderConfig.CreateRequest createRequest = new OidcProviderConfig.CreateRequest()\n+            .setProviderId(providerId)\n+            .setClientId(\"CLIENT_ID\")\n+            .setIssuer(\"https://oidc.com/issuer\");\n+        auth.createOidcProviderConfig(createRequest);\n+      }\n+\n+      // Test list by batches\n+      final AtomicInteger collected = new AtomicInteger(0);\n+      ListProviderConfigsPage<OidcProviderConfig> page =\n+          auth.listOidcProviderConfigsAsync(null).get();\n+      while (page != null) {\n+        for (OidcProviderConfig providerConfig : page.getValues()) {\n+          if (providerIds.contains(providerConfig.getProviderId())) {\n+            collected.incrementAndGet();\n+            assertEquals(\"CLIENT_ID\", providerConfig.getClientId());\n+            assertEquals(\"https://oidc.com/issuer\", providerConfig.getIssuer());\n+          }\n+        }\n+        page = page.getNextPage();\n+      }\n+      assertEquals(providerIds.size(), collected.get());\n+\n+      // Test iterate all\n+      collected.set(0);\n+      page = auth.listOidcProviderConfigsAsync(null).get();\n+      for (OidcProviderConfig providerConfig : page.iterateAll()) {\n+        if (providerIds.contains(providerConfig.getProviderId())) {\n+          collected.incrementAndGet();\n+          assertEquals(\"CLIENT_ID\", providerConfig.getClientId());\n+          assertEquals(\"https://oidc.com/issuer\", providerConfig.getIssuer());\n+        }\n+      }\n+      assertEquals(providerIds.size(), collected.get());\n+\n+      // Test iterate async\n+      collected.set(0);\n+      final Semaphore semaphore = new Semaphore(0);\n+      final AtomicReference<Throwable> error = new AtomicReference<>();\n+      ApiFuture<ListProviderConfigsPage<OidcProviderConfig>> pageFuture =\n+          auth.listOidcProviderConfigsAsync(null);\n+      ApiFutures.addCallback(\n+          pageFuture,\n+          new ApiFutureCallback<ListProviderConfigsPage<OidcProviderConfig>>() {\n+            @Override\n+            public void onFailure(Throwable t) {\n+              error.set(t);\n+              semaphore.release();\n+            }\n+\n+            @Override\n+            public void onSuccess(ListProviderConfigsPage<OidcProviderConfig> result) {\n+              for (OidcProviderConfig providerConfig : result.iterateAll()) {\n+                if (providerIds.contains(providerConfig.getProviderId())) {\n+                  collected.incrementAndGet();\n+                  assertEquals(\"CLIENT_ID\", providerConfig.getClientId());\n+                  assertEquals(\"https://oidc.com/issuer\", providerConfig.getIssuer());\n+                }\n+              }\n+              semaphore.release();\n+            }\n+          }, MoreExecutors.directExecutor());\n+      semaphore.acquire();\n+      assertEquals(providerIds.size(), collected.get());\n+      assertNull(error.get());\n+    } finally {\n+      // Delete provider configs\n+      for (String providerId : providerIds) {\n+        auth.deleteProviderConfigAsync(providerId).get();\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testTenantAwareListOidcProviderConfigs() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc2MjY5MA=="}, "originalCommit": {"oid": "68edeb3dc1a8f6b143197e32a76ec524431039f6"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1568, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}