{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MDExNzg1", "number": 419, "title": "Add class for SAML provider config.", "bodyText": "Adds a class for the SAML provider config.", "createdAt": "2020-05-16T19:22:22Z", "url": "https://github.com/firebase/firebase-admin-java/pull/419", "merged": true, "mergeCommit": {"oid": "51fdc9143235d1f677e9acb1d3be77248eacc9ef"}, "closed": true, "closedAt": "2020-05-18T23:01:20Z", "author": {"login": "micahstairs"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcijk9KgFqTQxMzc5OTMwNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcin7RqgFqTQxMzk4ODk3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNzk5MzA0", "url": "https://github.com/firebase/firebase-admin-java/pull/419#pullrequestreview-413799304", "createdAt": "2020-05-18T17:30:12Z", "commit": {"oid": "c1c697d1f3ba3a86dfee14b23ed3d70db3324367"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzozMDoxM1rOGXA9FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzo0NToyMFrOGXBcKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4NjA2OQ==", "bodyText": "These should be kept out of the public API.", "url": "https://github.com/firebase/firebase-admin-java/pull/419#discussion_r426786069", "createdAt": "2020-05-18T17:30:13Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/SamlProviderConfig.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.api.client.util.Key;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.auth.ProviderConfig.AbstractCreateRequest;\n+import com.google.firebase.auth.ProviderConfig.AbstractUpdateRequest;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Contains metadata associated with a SAML Auth provider.\n+ *\n+ * <p>Instances of this class are immutable and thread safe.\n+ */\n+public final class SamlProviderConfig extends ProviderConfig {\n+\n+  @Key(\"idpConfig\")\n+  private IdpConfig idpConfig;\n+\n+  @Key(\"spConfig\")\n+  private SpConfig spConfig;\n+\n+  public String getIdpEntityId() {\n+    return idpConfig.getIdpEntityId();\n+  }\n+\n+  public String getSsoUrl() {\n+    return idpConfig.getSsoUrl();\n+  }\n+\n+  public List<String> getX509Certificates() {\n+    ImmutableList.Builder<String> certificates = ImmutableList.<String>builder();\n+    for (IdpCertificate idpCertificate : idpConfig.getIdpCertificates()) {\n+      certificates.add(idpCertificate.getX509Certificate());\n+    }\n+    return certificates.build();\n+  }\n+\n+  public String getRpEntityId() {\n+    return spConfig.getRpEntityId();\n+  }\n+\n+  public String getCallbackUrl() {\n+    return spConfig.getCallbackUrl();\n+  }\n+\n+  /**\n+   * A specification class for creating a new SAML Auth provider.\n+   *\n+   * <p>Set the initial attributes of the new provider by calling various setter methods available\n+   * in this class.\n+   */\n+  public static final class CreateRequest extends AbstractCreateRequest<CreateRequest> {\n+\n+    /**\n+     * Creates a new {@link CreateRequest}, which can be used to create a new SAML Auth provider.\n+     *\n+     * <p>The returned object should be passed to\n+     * {@link AbstractFirebaseAuth#createSamlProviderConfig(CreateRequest)} to register the provider\n+     * information persistently.\n+     */\n+    public CreateRequest() { }\n+\n+    /**\n+     * Sets the IDP entity ID for the new provider.\n+     *\n+     * @param idpEntityId A non-null, non-empty IDP entity ID string.\n+     * @throws IllegalArgumentException If the IDP entity ID is null or empty.\n+     */\n+    public CreateRequest setIdpEntityId(String idpEntityId) {\n+      checkArgument(!Strings.isNullOrEmpty(idpEntityId),\n+          \"IDP entity ID must not be null or empty.\");\n+      getNestedMap(properties, \"idpConfig\").put(\"idpEntityId\", idpEntityId);\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the SSO URL for the new provider.\n+     *\n+     * @param ssoUrl A non-null, non-empty SSO URL string.\n+     * @throws IllegalArgumentException If the SSO URL is null or empty, or if the format is\n+     *     invalid.\n+     */\n+    public CreateRequest setSsoUrl(String ssoUrl) {\n+      checkArgument(!Strings.isNullOrEmpty(ssoUrl), \"SSO URL must not be null or empty.\");\n+      assertValidUrl(ssoUrl);\n+      getNestedMap(properties, \"idpConfig\").put(\"ssoUrl\", ssoUrl);\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the RP entity ID for the new provider.\n+     *\n+     * @param rpEntityId A non-null, non-empty RP entity ID string.\n+     * @throws IllegalArgumentException If the RP entity ID is null or empty.\n+     */\n+    public CreateRequest setRpEntityId(String rpEntityId) {\n+      checkArgument(!Strings.isNullOrEmpty(rpEntityId), \"RP entity ID must not be null or empty.\");\n+      getNestedMap(properties, \"spConfig\").put(\"spEntityId\", rpEntityId);\n+      return this;\n+    }\n+\n+    /**\n+     * Adds a x509 certificate to the new provider.\n+     *\n+     * @param x509Certificate A non-null, non-empty x509 certificate string.\n+     * @throws IllegalArgumentException If the x509 certificate is null or empty.\n+     */\n+    public CreateRequest addX509Certificate(String x509Certificate) {\n+      checkArgument(!Strings.isNullOrEmpty(x509Certificate),\n+          \"The x509 certificate must not be null or empty.\");\n+      Map<String, Object> idpConfigProperties = getNestedMap(properties, \"idpConfig\");\n+      List<Object> x509Certificates = getNestedList(idpConfigProperties, \"idpCertificates\");\n+      x509Certificates.add(ImmutableMap.<String, Object>of(\"x509Certificate\", x509Certificate));\n+      return this;\n+    }\n+\n+    // TODO(micahstairs): Add 'addAllX509Certificates' method.\n+\n+    /**\n+     * Sets the callback URL for the new provider.\n+     *\n+     * @param callbackUrl A non-null, non-empty callback URL string.\n+     * @throws IllegalArgumentException If the callback URL is null or empty, or if the format is\n+     *     invalid.\n+     */\n+    public CreateRequest setCallbackUrl(String callbackUrl) {\n+      checkArgument(!Strings.isNullOrEmpty(callbackUrl), \"Callback URL must not be null or empty.\");\n+      assertValidUrl(callbackUrl);\n+      getNestedMap(properties, \"spConfig\").put(\"callbackUri\", callbackUrl);\n+      return this;\n+    }\n+\n+    // TODO(micahstairs): Add 'setRequestSigningEnabled' method.\n+\n+    CreateRequest getThis() {\n+      return this;\n+    }\n+\n+    void assertValidProviderIdFormat(String providerId) {\n+      checkArgument(providerId.startsWith(\"saml.\"), \"Invalid SAML provider ID: \" + providerId);\n+    }\n+  }\n+\n+  public static class IdpCertificate {\n+    @Key(\"x509Certificate\")\n+    private String x509Certificate;\n+\n+    public String getX509Certificate() {\n+      return x509Certificate;\n+    }\n+  }\n+\n+  public static class IdpConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c697d1f3ba3a86dfee14b23ed3d70db3324367"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4NjM2OA==", "bodyText": "Shouldn't be public.", "url": "https://github.com/firebase/firebase-admin-java/pull/419#discussion_r426786368", "createdAt": "2020-05-18T17:30:41Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/SamlProviderConfig.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.api.client.util.Key;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.auth.ProviderConfig.AbstractCreateRequest;\n+import com.google.firebase.auth.ProviderConfig.AbstractUpdateRequest;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Contains metadata associated with a SAML Auth provider.\n+ *\n+ * <p>Instances of this class are immutable and thread safe.\n+ */\n+public final class SamlProviderConfig extends ProviderConfig {\n+\n+  @Key(\"idpConfig\")\n+  private IdpConfig idpConfig;\n+\n+  @Key(\"spConfig\")\n+  private SpConfig spConfig;\n+\n+  public String getIdpEntityId() {\n+    return idpConfig.getIdpEntityId();\n+  }\n+\n+  public String getSsoUrl() {\n+    return idpConfig.getSsoUrl();\n+  }\n+\n+  public List<String> getX509Certificates() {\n+    ImmutableList.Builder<String> certificates = ImmutableList.<String>builder();\n+    for (IdpCertificate idpCertificate : idpConfig.getIdpCertificates()) {\n+      certificates.add(idpCertificate.getX509Certificate());\n+    }\n+    return certificates.build();\n+  }\n+\n+  public String getRpEntityId() {\n+    return spConfig.getRpEntityId();\n+  }\n+\n+  public String getCallbackUrl() {\n+    return spConfig.getCallbackUrl();\n+  }\n+\n+  /**\n+   * A specification class for creating a new SAML Auth provider.\n+   *\n+   * <p>Set the initial attributes of the new provider by calling various setter methods available\n+   * in this class.\n+   */\n+  public static final class CreateRequest extends AbstractCreateRequest<CreateRequest> {\n+\n+    /**\n+     * Creates a new {@link CreateRequest}, which can be used to create a new SAML Auth provider.\n+     *\n+     * <p>The returned object should be passed to\n+     * {@link AbstractFirebaseAuth#createSamlProviderConfig(CreateRequest)} to register the provider\n+     * information persistently.\n+     */\n+    public CreateRequest() { }\n+\n+    /**\n+     * Sets the IDP entity ID for the new provider.\n+     *\n+     * @param idpEntityId A non-null, non-empty IDP entity ID string.\n+     * @throws IllegalArgumentException If the IDP entity ID is null or empty.\n+     */\n+    public CreateRequest setIdpEntityId(String idpEntityId) {\n+      checkArgument(!Strings.isNullOrEmpty(idpEntityId),\n+          \"IDP entity ID must not be null or empty.\");\n+      getNestedMap(properties, \"idpConfig\").put(\"idpEntityId\", idpEntityId);\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the SSO URL for the new provider.\n+     *\n+     * @param ssoUrl A non-null, non-empty SSO URL string.\n+     * @throws IllegalArgumentException If the SSO URL is null or empty, or if the format is\n+     *     invalid.\n+     */\n+    public CreateRequest setSsoUrl(String ssoUrl) {\n+      checkArgument(!Strings.isNullOrEmpty(ssoUrl), \"SSO URL must not be null or empty.\");\n+      assertValidUrl(ssoUrl);\n+      getNestedMap(properties, \"idpConfig\").put(\"ssoUrl\", ssoUrl);\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the RP entity ID for the new provider.\n+     *\n+     * @param rpEntityId A non-null, non-empty RP entity ID string.\n+     * @throws IllegalArgumentException If the RP entity ID is null or empty.\n+     */\n+    public CreateRequest setRpEntityId(String rpEntityId) {\n+      checkArgument(!Strings.isNullOrEmpty(rpEntityId), \"RP entity ID must not be null or empty.\");\n+      getNestedMap(properties, \"spConfig\").put(\"spEntityId\", rpEntityId);\n+      return this;\n+    }\n+\n+    /**\n+     * Adds a x509 certificate to the new provider.\n+     *\n+     * @param x509Certificate A non-null, non-empty x509 certificate string.\n+     * @throws IllegalArgumentException If the x509 certificate is null or empty.\n+     */\n+    public CreateRequest addX509Certificate(String x509Certificate) {\n+      checkArgument(!Strings.isNullOrEmpty(x509Certificate),\n+          \"The x509 certificate must not be null or empty.\");\n+      Map<String, Object> idpConfigProperties = getNestedMap(properties, \"idpConfig\");\n+      List<Object> x509Certificates = getNestedList(idpConfigProperties, \"idpCertificates\");\n+      x509Certificates.add(ImmutableMap.<String, Object>of(\"x509Certificate\", x509Certificate));\n+      return this;\n+    }\n+\n+    // TODO(micahstairs): Add 'addAllX509Certificates' method.\n+\n+    /**\n+     * Sets the callback URL for the new provider.\n+     *\n+     * @param callbackUrl A non-null, non-empty callback URL string.\n+     * @throws IllegalArgumentException If the callback URL is null or empty, or if the format is\n+     *     invalid.\n+     */\n+    public CreateRequest setCallbackUrl(String callbackUrl) {\n+      checkArgument(!Strings.isNullOrEmpty(callbackUrl), \"Callback URL must not be null or empty.\");\n+      assertValidUrl(callbackUrl);\n+      getNestedMap(properties, \"spConfig\").put(\"callbackUri\", callbackUrl);\n+      return this;\n+    }\n+\n+    // TODO(micahstairs): Add 'setRequestSigningEnabled' method.\n+\n+    CreateRequest getThis() {\n+      return this;\n+    }\n+\n+    void assertValidProviderIdFormat(String providerId) {\n+      checkArgument(providerId.startsWith(\"saml.\"), \"Invalid SAML provider ID: \" + providerId);\n+    }\n+  }\n+\n+  public static class IdpCertificate {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c697d1f3ba3a86dfee14b23ed3d70db3324367"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4ODAyOQ==", "bodyText": "Given these are only used in SamlProviderConfig, how about pushing them down to the child class?", "url": "https://github.com/firebase/firebase-admin-java/pull/419#discussion_r426788029", "createdAt": "2020-05-18T17:33:56Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/ProviderConfig.java", "diffHunk": "@@ -60,6 +62,24 @@ static void assertValidUrl(String url) throws IllegalArgumentException {\n     }\n   }\n \n+  static List<Object> getNestedList(Map<String, Object> outerMap, String id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c697d1f3ba3a86dfee14b23ed3d70db3324367"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4ODUyMA==", "bodyText": "I think ensureNestedMap() and ensureNestedList() indicate the intent of these a bit better.", "url": "https://github.com/firebase/firebase-admin-java/pull/419#discussion_r426788520", "createdAt": "2020-05-18T17:34:48Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/ProviderConfig.java", "diffHunk": "@@ -60,6 +62,24 @@ static void assertValidUrl(String url) throws IllegalArgumentException {\n     }\n   }\n \n+  static List<Object> getNestedList(Map<String, Object> outerMap, String id) {\n+    List<Object> list = (List<Object>) outerMap.get(id);\n+    if (list == null) {\n+      list = new ArrayList<Object>();\n+      outerMap.put(id, list);\n+    }\n+    return list;\n+  }\n+\n+  static Map<String, Object> getNestedMap(Map<String, Object> outerMap, String id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c697d1f3ba3a86dfee14b23ed3d70db3324367"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc5MjE2Nw==", "bodyText": "Nit: Move closer to the other idpConfig related methods", "url": "https://github.com/firebase/firebase-admin-java/pull/419#discussion_r426792167", "createdAt": "2020-05-18T17:41:56Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/SamlProviderConfig.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.api.client.util.Key;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.auth.ProviderConfig.AbstractCreateRequest;\n+import com.google.firebase.auth.ProviderConfig.AbstractUpdateRequest;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Contains metadata associated with a SAML Auth provider.\n+ *\n+ * <p>Instances of this class are immutable and thread safe.\n+ */\n+public final class SamlProviderConfig extends ProviderConfig {\n+\n+  @Key(\"idpConfig\")\n+  private IdpConfig idpConfig;\n+\n+  @Key(\"spConfig\")\n+  private SpConfig spConfig;\n+\n+  public String getIdpEntityId() {\n+    return idpConfig.getIdpEntityId();\n+  }\n+\n+  public String getSsoUrl() {\n+    return idpConfig.getSsoUrl();\n+  }\n+\n+  public List<String> getX509Certificates() {\n+    ImmutableList.Builder<String> certificates = ImmutableList.<String>builder();\n+    for (IdpCertificate idpCertificate : idpConfig.getIdpCertificates()) {\n+      certificates.add(idpCertificate.getX509Certificate());\n+    }\n+    return certificates.build();\n+  }\n+\n+  public String getRpEntityId() {\n+    return spConfig.getRpEntityId();\n+  }\n+\n+  public String getCallbackUrl() {\n+    return spConfig.getCallbackUrl();\n+  }\n+\n+  /**\n+   * A specification class for creating a new SAML Auth provider.\n+   *\n+   * <p>Set the initial attributes of the new provider by calling various setter methods available\n+   * in this class.\n+   */\n+  public static final class CreateRequest extends AbstractCreateRequest<CreateRequest> {\n+\n+    /**\n+     * Creates a new {@link CreateRequest}, which can be used to create a new SAML Auth provider.\n+     *\n+     * <p>The returned object should be passed to\n+     * {@link AbstractFirebaseAuth#createSamlProviderConfig(CreateRequest)} to register the provider\n+     * information persistently.\n+     */\n+    public CreateRequest() { }\n+\n+    /**\n+     * Sets the IDP entity ID for the new provider.\n+     *\n+     * @param idpEntityId A non-null, non-empty IDP entity ID string.\n+     * @throws IllegalArgumentException If the IDP entity ID is null or empty.\n+     */\n+    public CreateRequest setIdpEntityId(String idpEntityId) {\n+      checkArgument(!Strings.isNullOrEmpty(idpEntityId),\n+          \"IDP entity ID must not be null or empty.\");\n+      getNestedMap(properties, \"idpConfig\").put(\"idpEntityId\", idpEntityId);\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the SSO URL for the new provider.\n+     *\n+     * @param ssoUrl A non-null, non-empty SSO URL string.\n+     * @throws IllegalArgumentException If the SSO URL is null or empty, or if the format is\n+     *     invalid.\n+     */\n+    public CreateRequest setSsoUrl(String ssoUrl) {\n+      checkArgument(!Strings.isNullOrEmpty(ssoUrl), \"SSO URL must not be null or empty.\");\n+      assertValidUrl(ssoUrl);\n+      getNestedMap(properties, \"idpConfig\").put(\"ssoUrl\", ssoUrl);\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the RP entity ID for the new provider.\n+     *\n+     * @param rpEntityId A non-null, non-empty RP entity ID string.\n+     * @throws IllegalArgumentException If the RP entity ID is null or empty.\n+     */\n+    public CreateRequest setRpEntityId(String rpEntityId) {\n+      checkArgument(!Strings.isNullOrEmpty(rpEntityId), \"RP entity ID must not be null or empty.\");\n+      getNestedMap(properties, \"spConfig\").put(\"spEntityId\", rpEntityId);\n+      return this;\n+    }\n+\n+    /**\n+     * Adds a x509 certificate to the new provider.\n+     *\n+     * @param x509Certificate A non-null, non-empty x509 certificate string.\n+     * @throws IllegalArgumentException If the x509 certificate is null or empty.\n+     */\n+    public CreateRequest addX509Certificate(String x509Certificate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c697d1f3ba3a86dfee14b23ed3d70db3324367"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc5MzM4NA==", "bodyText": "We should also probably have an addAllX505Certificates(List<String>) API here.", "url": "https://github.com/firebase/firebase-admin-java/pull/419#discussion_r426793384", "createdAt": "2020-05-18T17:44:10Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/SamlProviderConfig.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.api.client.util.Key;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.auth.ProviderConfig.AbstractCreateRequest;\n+import com.google.firebase.auth.ProviderConfig.AbstractUpdateRequest;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Contains metadata associated with a SAML Auth provider.\n+ *\n+ * <p>Instances of this class are immutable and thread safe.\n+ */\n+public final class SamlProviderConfig extends ProviderConfig {\n+\n+  @Key(\"idpConfig\")\n+  private IdpConfig idpConfig;\n+\n+  @Key(\"spConfig\")\n+  private SpConfig spConfig;\n+\n+  public String getIdpEntityId() {\n+    return idpConfig.getIdpEntityId();\n+  }\n+\n+  public String getSsoUrl() {\n+    return idpConfig.getSsoUrl();\n+  }\n+\n+  public List<String> getX509Certificates() {\n+    ImmutableList.Builder<String> certificates = ImmutableList.<String>builder();\n+    for (IdpCertificate idpCertificate : idpConfig.getIdpCertificates()) {\n+      certificates.add(idpCertificate.getX509Certificate());\n+    }\n+    return certificates.build();\n+  }\n+\n+  public String getRpEntityId() {\n+    return spConfig.getRpEntityId();\n+  }\n+\n+  public String getCallbackUrl() {\n+    return spConfig.getCallbackUrl();\n+  }\n+\n+  /**\n+   * A specification class for creating a new SAML Auth provider.\n+   *\n+   * <p>Set the initial attributes of the new provider by calling various setter methods available\n+   * in this class.\n+   */\n+  public static final class CreateRequest extends AbstractCreateRequest<CreateRequest> {\n+\n+    /**\n+     * Creates a new {@link CreateRequest}, which can be used to create a new SAML Auth provider.\n+     *\n+     * <p>The returned object should be passed to\n+     * {@link AbstractFirebaseAuth#createSamlProviderConfig(CreateRequest)} to register the provider\n+     * information persistently.\n+     */\n+    public CreateRequest() { }\n+\n+    /**\n+     * Sets the IDP entity ID for the new provider.\n+     *\n+     * @param idpEntityId A non-null, non-empty IDP entity ID string.\n+     * @throws IllegalArgumentException If the IDP entity ID is null or empty.\n+     */\n+    public CreateRequest setIdpEntityId(String idpEntityId) {\n+      checkArgument(!Strings.isNullOrEmpty(idpEntityId),\n+          \"IDP entity ID must not be null or empty.\");\n+      getNestedMap(properties, \"idpConfig\").put(\"idpEntityId\", idpEntityId);\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the SSO URL for the new provider.\n+     *\n+     * @param ssoUrl A non-null, non-empty SSO URL string.\n+     * @throws IllegalArgumentException If the SSO URL is null or empty, or if the format is\n+     *     invalid.\n+     */\n+    public CreateRequest setSsoUrl(String ssoUrl) {\n+      checkArgument(!Strings.isNullOrEmpty(ssoUrl), \"SSO URL must not be null or empty.\");\n+      assertValidUrl(ssoUrl);\n+      getNestedMap(properties, \"idpConfig\").put(\"ssoUrl\", ssoUrl);\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the RP entity ID for the new provider.\n+     *\n+     * @param rpEntityId A non-null, non-empty RP entity ID string.\n+     * @throws IllegalArgumentException If the RP entity ID is null or empty.\n+     */\n+    public CreateRequest setRpEntityId(String rpEntityId) {\n+      checkArgument(!Strings.isNullOrEmpty(rpEntityId), \"RP entity ID must not be null or empty.\");\n+      getNestedMap(properties, \"spConfig\").put(\"spEntityId\", rpEntityId);\n+      return this;\n+    }\n+\n+    /**\n+     * Adds a x509 certificate to the new provider.\n+     *\n+     * @param x509Certificate A non-null, non-empty x509 certificate string.\n+     * @throws IllegalArgumentException If the x509 certificate is null or empty.\n+     */\n+    public CreateRequest addX509Certificate(String x509Certificate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c697d1f3ba3a86dfee14b23ed3d70db3324367"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc5NDAyNA==", "bodyText": "Deserialization", "url": "https://github.com/firebase/firebase-admin-java/pull/419#discussion_r426794024", "createdAt": "2020-05-18T17:45:20Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/auth/SamlProviderConfigTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.google.api.client.googleapis.util.Utils;\n+import com.google.api.client.json.JsonFactory;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.Test;\n+\n+public class SamlProviderConfigTest {\n+\n+  private static final JsonFactory jsonFactory = Utils.getDefaultJsonFactory();\n+\n+  private static final String SAML_JSON_STRING =\n+      (\"{\"\n+        + \"  'name':        'projects/projectId/inboundSamlConfigs/saml.provider-id',\"\n+        + \"  'displayName': 'DISPLAY_NAME',\"\n+        + \"  'enabled':      true,\"\n+        + \"  'idpConfig': {\"\n+        + \"    'idpEntityId': 'IDP_ENTITY_ID',\"\n+        + \"    'ssoUrl':      'https://example.com/login',\"\n+        + \"    'idpCertificates': [\"\n+        + \"      { 'x509Certificate': 'certificate1' },\"\n+        + \"      { 'x509Certificate': 'certificate2' }\"\n+        + \"    ]\"\n+        + \"  },\"\n+        + \"  'spConfig': {\"\n+        + \"    'spEntityId':  'RP_ENTITY_ID',\"\n+        + \"    'callbackUri': 'https://projectId.firebaseapp.com/__/auth/handler'\"\n+        + \"   }\"\n+        + \"}\").replace(\"'\", \"\\\"\");\n+\n+  @Test\n+  public void testJsonSerialization() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c697d1f3ba3a86dfee14b23ed3d70db3324367"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzODQ5NDM4", "url": "https://github.com/firebase/firebase-admin-java/pull/419#pullrequestreview-413849438", "createdAt": "2020-05-18T18:46:05Z", "commit": {"oid": "86dc1c2ff545013a3ab44d0cbe1fef4fcc77cef1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODo0NjowNVrOGXDXPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODo0NjoyNVrOGXDX2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyNTUzMw==", "bodyText": "I think we are missing some imports here causing a compilation error.", "url": "https://github.com/firebase/firebase-admin-java/pull/419#discussion_r426825533", "createdAt": "2020-05-18T18:46:05Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/SamlProviderConfig.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.api.client.util.Key;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.auth.ProviderConfig.AbstractCreateRequest;\n+import com.google.firebase.auth.ProviderConfig.AbstractUpdateRequest;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Contains metadata associated with a SAML Auth provider.\n+ *\n+ * <p>Instances of this class are immutable and thread safe.\n+ */\n+public final class SamlProviderConfig extends ProviderConfig {\n+\n+  @Key(\"idpConfig\")\n+  private IdpConfig idpConfig;\n+\n+  @Key(\"spConfig\")\n+  private SpConfig spConfig;\n+\n+  public String getIdpEntityId() {\n+    return idpConfig.getIdpEntityId();\n+  }\n+\n+  public String getSsoUrl() {\n+    return idpConfig.getSsoUrl();\n+  }\n+\n+  public List<String> getX509Certificates() {\n+    ImmutableList.Builder<String> certificates = ImmutableList.<String>builder();\n+    for (IdpCertificate idpCertificate : idpConfig.getIdpCertificates()) {\n+      certificates.add(idpCertificate.getX509Certificate());\n+    }\n+    return certificates.build();\n+  }\n+\n+  public String getRpEntityId() {\n+    return spConfig.getRpEntityId();\n+  }\n+\n+  public String getCallbackUrl() {\n+    return spConfig.getCallbackUrl();\n+  }\n+\n+  static List<Object> ensureNestedList(Map<String, Object> outerMap, String id) {\n+    List<Object> list = (List<Object>) outerMap.get(id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86dc1c2ff545013a3ab44d0cbe1fef4fcc77cef1"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyNTY4OA==", "bodyText": "Can be private?", "url": "https://github.com/firebase/firebase-admin-java/pull/419#discussion_r426825688", "createdAt": "2020-05-18T18:46:25Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/SamlProviderConfig.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.api.client.util.Key;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.auth.ProviderConfig.AbstractCreateRequest;\n+import com.google.firebase.auth.ProviderConfig.AbstractUpdateRequest;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Contains metadata associated with a SAML Auth provider.\n+ *\n+ * <p>Instances of this class are immutable and thread safe.\n+ */\n+public final class SamlProviderConfig extends ProviderConfig {\n+\n+  @Key(\"idpConfig\")\n+  private IdpConfig idpConfig;\n+\n+  @Key(\"spConfig\")\n+  private SpConfig spConfig;\n+\n+  public String getIdpEntityId() {\n+    return idpConfig.getIdpEntityId();\n+  }\n+\n+  public String getSsoUrl() {\n+    return idpConfig.getSsoUrl();\n+  }\n+\n+  public List<String> getX509Certificates() {\n+    ImmutableList.Builder<String> certificates = ImmutableList.<String>builder();\n+    for (IdpCertificate idpCertificate : idpConfig.getIdpCertificates()) {\n+      certificates.add(idpCertificate.getX509Certificate());\n+    }\n+    return certificates.build();\n+  }\n+\n+  public String getRpEntityId() {\n+    return spConfig.getRpEntityId();\n+  }\n+\n+  public String getCallbackUrl() {\n+    return spConfig.getCallbackUrl();\n+  }\n+\n+  static List<Object> ensureNestedList(Map<String, Object> outerMap, String id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86dc1c2ff545013a3ab44d0cbe1fef4fcc77cef1"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e13b409d14ae1e14c267dd03b627808fa0301121", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/e13b409d14ae1e14c267dd03b627808fa0301121", "committedDate": "2020-05-18T19:10:24Z", "message": "Add class for SAML provider config."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8914e9002b16ddaabf8501191f897826dfe2c2f4", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/8914e9002b16ddaabf8501191f897826dfe2c2f4", "committedDate": "2020-05-18T19:10:24Z", "message": "Address pull request feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42f18c77b60791a54486a7e9c44fe568916c4df9", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/42f18c77b60791a54486a7e9c44fe568916c4df9", "committedDate": "2020-05-18T19:10:24Z", "message": "Move SAML nested types to internal package."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "515463c72e29298a02c56859b6b8db0bf4bb3e67", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/515463c72e29298a02c56859b6b8db0bf4bb3e67", "committedDate": "2020-05-18T19:10:25Z", "message": "Make ensureNestedList and ensureNestedMap private."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4546b27bbe4c0d355e9fdfe78910888a96a171b1", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/4546b27bbe4c0d355e9fdfe78910888a96a171b1", "committedDate": "2020-05-18T19:04:01Z", "message": "Make ensureNestedList and ensureNestedMap private."}, "afterCommit": {"oid": "515463c72e29298a02c56859b6b8db0bf4bb3e67", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/515463c72e29298a02c56859b6b8db0bf4bb3e67", "committedDate": "2020-05-18T19:10:25Z", "message": "Make ensureNestedList and ensureNestedMap private."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzOTUxNTI4", "url": "https://github.com/firebase/firebase-admin-java/pull/419#pullrequestreview-413951528", "createdAt": "2020-05-18T21:28:29Z", "commit": {"oid": "515463c72e29298a02c56859b6b8db0bf4bb3e67"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMToyODoyOVrOGXIFvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMToyODoyOVrOGXIFvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwMjk3Mw==", "bodyText": "Let's move these into the new SamlProviderConfigResponse class as well, and handle all deserialization business there. I think this class can just wrap an instance of the response.\nEDIT: I suppose we can't do that since ProviderConfig already contains some deserialization logic (providerId, displayName etc). In that case let's define separate top-level classes in the internal package as follows:\n\nSamlProviderConfigResponse.IdpConfig --> SamlIdpConfig\nSamlProviderConfigResponse.SpConfig --> SamlSpConfig\nSamlProviderConfigResponse.IdpCertificate --> SamlIdpConfig.IdpCertificate\n\nBtw, the option of parsing into maps, and handling the keys manually doesn't sound too onerous in this case either if you want to consider that option:\n@Key(\"idpConfig\")\nprivate GenericJson idpConfig;\n\n@Key(\"spConfig\")\nprivate GenericJson spConfig;\n\npublic String getIdpEntityId() {\n    return (String) idpConfig.get(\"idpEntityId\");\n}\n\nLooks a bit cleaner than adding a bunch of new internal types.", "url": "https://github.com/firebase/firebase-admin-java/pull/419#discussion_r426902973", "createdAt": "2020-05-18T21:28:29Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/auth/SamlProviderConfig.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.api.client.util.Key;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.auth.ProviderConfig.AbstractCreateRequest;\n+import com.google.firebase.auth.ProviderConfig.AbstractUpdateRequest;\n+import com.google.firebase.auth.internal.SamlProviderConfigResponse.IdpCertificate;\n+import com.google.firebase.auth.internal.SamlProviderConfigResponse.IdpConfig;\n+import com.google.firebase.auth.internal.SamlProviderConfigResponse.SpConfig;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Contains metadata associated with a SAML Auth provider.\n+ *\n+ * <p>Instances of this class are immutable and thread safe.\n+ */\n+public final class SamlProviderConfig extends ProviderConfig {\n+\n+  @Key(\"idpConfig\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "515463c72e29298a02c56859b6b8db0bf4bb3e67"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f27c37c4bf1e3f8c96e94931fa6642bfe3ee1db", "author": {"user": {"login": "micahstairs", "name": "Micah Stairs"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/1f27c37c4bf1e3f8c96e94931fa6642bfe3ee1db", "committedDate": "2020-05-18T22:33:00Z", "message": "Use GenericJson instead of new internal types."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzOTg4OTc4", "url": "https://github.com/firebase/firebase-admin-java/pull/419#pullrequestreview-413988978", "createdAt": "2020-05-18T22:50:33Z", "commit": {"oid": "1f27c37c4bf1e3f8c96e94931fa6642bfe3ee1db"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2880, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}